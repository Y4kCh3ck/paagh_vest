
sensory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d078  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800d138  0800d138  0001d138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d620  0800d620  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d620  0800d620  0001d620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d628  0800d628  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d628  0800d628  0001d628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d62c  0800d62c  0001d62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800d630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  200001d4  0800d804  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  0800d804  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000174b5  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036e1  00000000  00000000  000376f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  0003add8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001398  00000000  00000000  0003c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a20  00000000  00000000  0003d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001af7e  00000000  00000000  000550c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088a3e  00000000  00000000  0007003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006058  00000000  00000000  000f8a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d120 	.word	0x0800d120

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800d120 	.word	0x0800d120

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8b3 	bl	80015a8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f803 	bl	8001458 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8a5 	bl	80015a8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f89b 	bl	80015a8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f82b 	bl	80014dc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f821 	bl	80014dc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f001 feeb 	bl	8002334 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fb44 	bl	8001bf4 <__aeabi_dsub>
 800056c:	f001 fee2 	bl	8002334 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 f853 	bl	8001670 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f001 ff16 	bl	8002400 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 f84a 	bl	8001670 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fb06 	bl	8001bf4 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f001 fecf 	bl	80023a0 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 f833 	bl	8001670 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f001 fef6 	bl	8002400 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 f8d0 	bl	80007bc <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f001 ffa6 	bl	8002594 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f001 ffa1 	bl	8002594 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_dadd>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0004      	movs	r4, r0
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	001f      	movs	r7, r3
 80007ca:	030b      	lsls	r3, r1, #12
 80007cc:	0010      	movs	r0, r2
 80007ce:	004e      	lsls	r6, r1, #1
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	0fcd      	lsrs	r5, r1, #31
 80007d4:	0f61      	lsrs	r1, r4, #29
 80007d6:	007a      	lsls	r2, r7, #1
 80007d8:	4319      	orrs	r1, r3
 80007da:	00e3      	lsls	r3, r4, #3
 80007dc:	033c      	lsls	r4, r7, #12
 80007de:	0fff      	lsrs	r7, r7, #31
 80007e0:	46bc      	mov	ip, r7
 80007e2:	0a64      	lsrs	r4, r4, #9
 80007e4:	0f47      	lsrs	r7, r0, #29
 80007e6:	4327      	orrs	r7, r4
 80007e8:	0d76      	lsrs	r6, r6, #21
 80007ea:	0d52      	lsrs	r2, r2, #21
 80007ec:	00c0      	lsls	r0, r0, #3
 80007ee:	46b9      	mov	r9, r7
 80007f0:	4680      	mov	r8, r0
 80007f2:	1ab7      	subs	r7, r6, r2
 80007f4:	4565      	cmp	r5, ip
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x3e>
 80007f8:	e09b      	b.n	8000932 <__aeabi_dadd+0x176>
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	dc00      	bgt.n	8000800 <__aeabi_dadd+0x44>
 80007fe:	e084      	b.n	800090a <__aeabi_dadd+0x14e>
 8000800:	2a00      	cmp	r2, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x4a>
 8000804:	e0be      	b.n	8000984 <__aeabi_dadd+0x1c8>
 8000806:	4ac8      	ldr	r2, [pc, #800]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000808:	4296      	cmp	r6, r2
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x52>
 800080c:	e124      	b.n	8000a58 <__aeabi_dadd+0x29c>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	464c      	mov	r4, r9
 8000812:	0412      	lsls	r2, r2, #16
 8000814:	4314      	orrs	r4, r2
 8000816:	46a1      	mov	r9, r4
 8000818:	2f38      	cmp	r7, #56	; 0x38
 800081a:	dd00      	ble.n	800081e <__aeabi_dadd+0x62>
 800081c:	e167      	b.n	8000aee <__aeabi_dadd+0x332>
 800081e:	2f1f      	cmp	r7, #31
 8000820:	dd00      	ble.n	8000824 <__aeabi_dadd+0x68>
 8000822:	e1d6      	b.n	8000bd2 <__aeabi_dadd+0x416>
 8000824:	2220      	movs	r2, #32
 8000826:	464c      	mov	r4, r9
 8000828:	1bd2      	subs	r2, r2, r7
 800082a:	4094      	lsls	r4, r2
 800082c:	46a2      	mov	sl, r4
 800082e:	4644      	mov	r4, r8
 8000830:	40fc      	lsrs	r4, r7
 8000832:	0020      	movs	r0, r4
 8000834:	4654      	mov	r4, sl
 8000836:	4304      	orrs	r4, r0
 8000838:	4640      	mov	r0, r8
 800083a:	4090      	lsls	r0, r2
 800083c:	1e42      	subs	r2, r0, #1
 800083e:	4190      	sbcs	r0, r2
 8000840:	464a      	mov	r2, r9
 8000842:	40fa      	lsrs	r2, r7
 8000844:	4304      	orrs	r4, r0
 8000846:	1a89      	subs	r1, r1, r2
 8000848:	1b1c      	subs	r4, r3, r4
 800084a:	42a3      	cmp	r3, r4
 800084c:	4192      	sbcs	r2, r2
 800084e:	4252      	negs	r2, r2
 8000850:	1a8b      	subs	r3, r1, r2
 8000852:	469a      	mov	sl, r3
 8000854:	4653      	mov	r3, sl
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	d400      	bmi.n	800085c <__aeabi_dadd+0xa0>
 800085a:	e0d4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 800085c:	4653      	mov	r3, sl
 800085e:	025a      	lsls	r2, r3, #9
 8000860:	0a53      	lsrs	r3, r2, #9
 8000862:	469a      	mov	sl, r3
 8000864:	4653      	mov	r3, sl
 8000866:	2b00      	cmp	r3, #0
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0xb0>
 800086a:	e104      	b.n	8000a76 <__aeabi_dadd+0x2ba>
 800086c:	4650      	mov	r0, sl
 800086e:	f001 fe73 	bl	8002558 <__clzsi2>
 8000872:	0003      	movs	r3, r0
 8000874:	3b08      	subs	r3, #8
 8000876:	2220      	movs	r2, #32
 8000878:	0020      	movs	r0, r4
 800087a:	1ad2      	subs	r2, r2, r3
 800087c:	4651      	mov	r1, sl
 800087e:	40d0      	lsrs	r0, r2
 8000880:	4099      	lsls	r1, r3
 8000882:	0002      	movs	r2, r0
 8000884:	409c      	lsls	r4, r3
 8000886:	430a      	orrs	r2, r1
 8000888:	42b3      	cmp	r3, r6
 800088a:	da00      	bge.n	800088e <__aeabi_dadd+0xd2>
 800088c:	e102      	b.n	8000a94 <__aeabi_dadd+0x2d8>
 800088e:	1b9b      	subs	r3, r3, r6
 8000890:	1c59      	adds	r1, r3, #1
 8000892:	291f      	cmp	r1, #31
 8000894:	dd00      	ble.n	8000898 <__aeabi_dadd+0xdc>
 8000896:	e0a7      	b.n	80009e8 <__aeabi_dadd+0x22c>
 8000898:	2320      	movs	r3, #32
 800089a:	0010      	movs	r0, r2
 800089c:	0026      	movs	r6, r4
 800089e:	1a5b      	subs	r3, r3, r1
 80008a0:	409c      	lsls	r4, r3
 80008a2:	4098      	lsls	r0, r3
 80008a4:	40ce      	lsrs	r6, r1
 80008a6:	40ca      	lsrs	r2, r1
 80008a8:	1e63      	subs	r3, r4, #1
 80008aa:	419c      	sbcs	r4, r3
 80008ac:	4330      	orrs	r0, r6
 80008ae:	4692      	mov	sl, r2
 80008b0:	2600      	movs	r6, #0
 80008b2:	4304      	orrs	r4, r0
 80008b4:	0763      	lsls	r3, r4, #29
 80008b6:	d009      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008b8:	230f      	movs	r3, #15
 80008ba:	4023      	ands	r3, r4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008c0:	1d23      	adds	r3, r4, #4
 80008c2:	42a3      	cmp	r3, r4
 80008c4:	41a4      	sbcs	r4, r4
 80008c6:	4264      	negs	r4, r4
 80008c8:	44a2      	add	sl, r4
 80008ca:	001c      	movs	r4, r3
 80008cc:	4653      	mov	r3, sl
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_dadd+0x118>
 80008d2:	e09b      	b.n	8000a0c <__aeabi_dadd+0x250>
 80008d4:	4b94      	ldr	r3, [pc, #592]	; (8000b28 <__aeabi_dadd+0x36c>)
 80008d6:	3601      	adds	r6, #1
 80008d8:	429e      	cmp	r6, r3
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x122>
 80008dc:	e0b8      	b.n	8000a50 <__aeabi_dadd+0x294>
 80008de:	4653      	mov	r3, sl
 80008e0:	4992      	ldr	r1, [pc, #584]	; (8000b2c <__aeabi_dadd+0x370>)
 80008e2:	08e4      	lsrs	r4, r4, #3
 80008e4:	400b      	ands	r3, r1
 80008e6:	0019      	movs	r1, r3
 80008e8:	075b      	lsls	r3, r3, #29
 80008ea:	4323      	orrs	r3, r4
 80008ec:	0572      	lsls	r2, r6, #21
 80008ee:	024c      	lsls	r4, r1, #9
 80008f0:	0b24      	lsrs	r4, r4, #12
 80008f2:	0d52      	lsrs	r2, r2, #21
 80008f4:	0512      	lsls	r2, r2, #20
 80008f6:	07ed      	lsls	r5, r5, #31
 80008f8:	4322      	orrs	r2, r4
 80008fa:	432a      	orrs	r2, r5
 80008fc:	0018      	movs	r0, r3
 80008fe:	0011      	movs	r1, r2
 8000900:	bce0      	pop	{r5, r6, r7}
 8000902:	46ba      	mov	sl, r7
 8000904:	46b1      	mov	r9, r6
 8000906:	46a8      	mov	r8, r5
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090a:	2f00      	cmp	r7, #0
 800090c:	d048      	beq.n	80009a0 <__aeabi_dadd+0x1e4>
 800090e:	1b97      	subs	r7, r2, r6
 8000910:	2e00      	cmp	r6, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x15a>
 8000914:	e10e      	b.n	8000b34 <__aeabi_dadd+0x378>
 8000916:	000c      	movs	r4, r1
 8000918:	431c      	orrs	r4, r3
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x162>
 800091c:	e1b7      	b.n	8000c8e <__aeabi_dadd+0x4d2>
 800091e:	1e7c      	subs	r4, r7, #1
 8000920:	2f01      	cmp	r7, #1
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x16a>
 8000924:	e226      	b.n	8000d74 <__aeabi_dadd+0x5b8>
 8000926:	4d80      	ldr	r5, [pc, #512]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000928:	42af      	cmp	r7, r5
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x172>
 800092c:	e1d5      	b.n	8000cda <__aeabi_dadd+0x51e>
 800092e:	0027      	movs	r7, r4
 8000930:	e107      	b.n	8000b42 <__aeabi_dadd+0x386>
 8000932:	2f00      	cmp	r7, #0
 8000934:	dc00      	bgt.n	8000938 <__aeabi_dadd+0x17c>
 8000936:	e0b2      	b.n	8000a9e <__aeabi_dadd+0x2e2>
 8000938:	2a00      	cmp	r2, #0
 800093a:	d047      	beq.n	80009cc <__aeabi_dadd+0x210>
 800093c:	4a7a      	ldr	r2, [pc, #488]	; (8000b28 <__aeabi_dadd+0x36c>)
 800093e:	4296      	cmp	r6, r2
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x188>
 8000942:	e089      	b.n	8000a58 <__aeabi_dadd+0x29c>
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	464c      	mov	r4, r9
 8000948:	0412      	lsls	r2, r2, #16
 800094a:	4314      	orrs	r4, r2
 800094c:	46a1      	mov	r9, r4
 800094e:	2f38      	cmp	r7, #56	; 0x38
 8000950:	dc6b      	bgt.n	8000a2a <__aeabi_dadd+0x26e>
 8000952:	2f1f      	cmp	r7, #31
 8000954:	dc00      	bgt.n	8000958 <__aeabi_dadd+0x19c>
 8000956:	e16e      	b.n	8000c36 <__aeabi_dadd+0x47a>
 8000958:	003a      	movs	r2, r7
 800095a:	4648      	mov	r0, r9
 800095c:	3a20      	subs	r2, #32
 800095e:	40d0      	lsrs	r0, r2
 8000960:	4684      	mov	ip, r0
 8000962:	2f20      	cmp	r7, #32
 8000964:	d007      	beq.n	8000976 <__aeabi_dadd+0x1ba>
 8000966:	2240      	movs	r2, #64	; 0x40
 8000968:	4648      	mov	r0, r9
 800096a:	1bd2      	subs	r2, r2, r7
 800096c:	4090      	lsls	r0, r2
 800096e:	0002      	movs	r2, r0
 8000970:	4640      	mov	r0, r8
 8000972:	4310      	orrs	r0, r2
 8000974:	4680      	mov	r8, r0
 8000976:	4640      	mov	r0, r8
 8000978:	1e42      	subs	r2, r0, #1
 800097a:	4190      	sbcs	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	0004      	movs	r4, r0
 8000980:	4314      	orrs	r4, r2
 8000982:	e057      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000984:	464a      	mov	r2, r9
 8000986:	4302      	orrs	r2, r0
 8000988:	d100      	bne.n	800098c <__aeabi_dadd+0x1d0>
 800098a:	e103      	b.n	8000b94 <__aeabi_dadd+0x3d8>
 800098c:	1e7a      	subs	r2, r7, #1
 800098e:	2f01      	cmp	r7, #1
 8000990:	d100      	bne.n	8000994 <__aeabi_dadd+0x1d8>
 8000992:	e193      	b.n	8000cbc <__aeabi_dadd+0x500>
 8000994:	4c64      	ldr	r4, [pc, #400]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000996:	42a7      	cmp	r7, r4
 8000998:	d100      	bne.n	800099c <__aeabi_dadd+0x1e0>
 800099a:	e18a      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 800099c:	0017      	movs	r7, r2
 800099e:	e73b      	b.n	8000818 <__aeabi_dadd+0x5c>
 80009a0:	4c63      	ldr	r4, [pc, #396]	; (8000b30 <__aeabi_dadd+0x374>)
 80009a2:	1c72      	adds	r2, r6, #1
 80009a4:	4222      	tst	r2, r4
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x1ee>
 80009a8:	e0e0      	b.n	8000b6c <__aeabi_dadd+0x3b0>
 80009aa:	000a      	movs	r2, r1
 80009ac:	431a      	orrs	r2, r3
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dadd+0x1f8>
 80009b2:	e174      	b.n	8000c9e <__aeabi_dadd+0x4e2>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x1fe>
 80009b8:	e1d0      	b.n	8000d5c <__aeabi_dadd+0x5a0>
 80009ba:	464a      	mov	r2, r9
 80009bc:	4302      	orrs	r2, r0
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x206>
 80009c0:	e1e3      	b.n	8000d8a <__aeabi_dadd+0x5ce>
 80009c2:	074a      	lsls	r2, r1, #29
 80009c4:	08db      	lsrs	r3, r3, #3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	08c9      	lsrs	r1, r1, #3
 80009ca:	e029      	b.n	8000a20 <__aeabi_dadd+0x264>
 80009cc:	464a      	mov	r2, r9
 80009ce:	4302      	orrs	r2, r0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x218>
 80009d2:	e17d      	b.n	8000cd0 <__aeabi_dadd+0x514>
 80009d4:	1e7a      	subs	r2, r7, #1
 80009d6:	2f01      	cmp	r7, #1
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x220>
 80009da:	e0e0      	b.n	8000b9e <__aeabi_dadd+0x3e2>
 80009dc:	4c52      	ldr	r4, [pc, #328]	; (8000b28 <__aeabi_dadd+0x36c>)
 80009de:	42a7      	cmp	r7, r4
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x228>
 80009e2:	e166      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 80009e4:	0017      	movs	r7, r2
 80009e6:	e7b2      	b.n	800094e <__aeabi_dadd+0x192>
 80009e8:	0010      	movs	r0, r2
 80009ea:	3b1f      	subs	r3, #31
 80009ec:	40d8      	lsrs	r0, r3
 80009ee:	2920      	cmp	r1, #32
 80009f0:	d003      	beq.n	80009fa <__aeabi_dadd+0x23e>
 80009f2:	2340      	movs	r3, #64	; 0x40
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	409a      	lsls	r2, r3
 80009f8:	4314      	orrs	r4, r2
 80009fa:	1e63      	subs	r3, r4, #1
 80009fc:	419c      	sbcs	r4, r3
 80009fe:	2300      	movs	r3, #0
 8000a00:	2600      	movs	r6, #0
 8000a02:	469a      	mov	sl, r3
 8000a04:	4304      	orrs	r4, r0
 8000a06:	0763      	lsls	r3, r4, #29
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dadd+0x250>
 8000a0a:	e755      	b.n	80008b8 <__aeabi_dadd+0xfc>
 8000a0c:	4652      	mov	r2, sl
 8000a0e:	08e3      	lsrs	r3, r4, #3
 8000a10:	0752      	lsls	r2, r2, #29
 8000a12:	4313      	orrs	r3, r2
 8000a14:	4652      	mov	r2, sl
 8000a16:	0037      	movs	r7, r6
 8000a18:	08d1      	lsrs	r1, r2, #3
 8000a1a:	4a43      	ldr	r2, [pc, #268]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a1c:	4297      	cmp	r7, r2
 8000a1e:	d01f      	beq.n	8000a60 <__aeabi_dadd+0x2a4>
 8000a20:	0309      	lsls	r1, r1, #12
 8000a22:	057a      	lsls	r2, r7, #21
 8000a24:	0b0c      	lsrs	r4, r1, #12
 8000a26:	0d52      	lsrs	r2, r2, #21
 8000a28:	e764      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a2a:	4642      	mov	r2, r8
 8000a2c:	464c      	mov	r4, r9
 8000a2e:	4314      	orrs	r4, r2
 8000a30:	1e62      	subs	r2, r4, #1
 8000a32:	4194      	sbcs	r4, r2
 8000a34:	18e4      	adds	r4, r4, r3
 8000a36:	429c      	cmp	r4, r3
 8000a38:	4192      	sbcs	r2, r2
 8000a3a:	4252      	negs	r2, r2
 8000a3c:	4692      	mov	sl, r2
 8000a3e:	448a      	add	sl, r1
 8000a40:	4653      	mov	r3, sl
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	d5df      	bpl.n	8000a06 <__aeabi_dadd+0x24a>
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a48:	3601      	adds	r6, #1
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_dadd+0x294>
 8000a4e:	e0b3      	b.n	8000bb8 <__aeabi_dadd+0x3fc>
 8000a50:	0032      	movs	r2, r6
 8000a52:	2400      	movs	r4, #0
 8000a54:	2300      	movs	r3, #0
 8000a56:	e74d      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a58:	074a      	lsls	r2, r1, #29
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	08c9      	lsrs	r1, r1, #3
 8000a60:	001a      	movs	r2, r3
 8000a62:	430a      	orrs	r2, r1
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dadd+0x2ac>
 8000a66:	e200      	b.n	8000e6a <__aeabi_dadd+0x6ae>
 8000a68:	2480      	movs	r4, #128	; 0x80
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	430c      	orrs	r4, r1
 8000a6e:	0324      	lsls	r4, r4, #12
 8000a70:	4a2d      	ldr	r2, [pc, #180]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a72:	0b24      	lsrs	r4, r4, #12
 8000a74:	e73e      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a76:	0020      	movs	r0, r4
 8000a78:	f001 fd6e 	bl	8002558 <__clzsi2>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	3318      	adds	r3, #24
 8000a80:	2b1f      	cmp	r3, #31
 8000a82:	dc00      	bgt.n	8000a86 <__aeabi_dadd+0x2ca>
 8000a84:	e6f7      	b.n	8000876 <__aeabi_dadd+0xba>
 8000a86:	0022      	movs	r2, r4
 8000a88:	3808      	subs	r0, #8
 8000a8a:	4082      	lsls	r2, r0
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	42b3      	cmp	r3, r6
 8000a90:	db00      	blt.n	8000a94 <__aeabi_dadd+0x2d8>
 8000a92:	e6fc      	b.n	800088e <__aeabi_dadd+0xd2>
 8000a94:	1af6      	subs	r6, r6, r3
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <__aeabi_dadd+0x370>)
 8000a98:	401a      	ands	r2, r3
 8000a9a:	4692      	mov	sl, r2
 8000a9c:	e70a      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	d02b      	beq.n	8000afa <__aeabi_dadd+0x33e>
 8000aa2:	1b97      	subs	r7, r2, r6
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x2ee>
 8000aa8:	e0b8      	b.n	8000c1c <__aeabi_dadd+0x460>
 8000aaa:	4c1f      	ldr	r4, [pc, #124]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000aac:	42a2      	cmp	r2, r4
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x2f6>
 8000ab0:	e11c      	b.n	8000cec <__aeabi_dadd+0x530>
 8000ab2:	2480      	movs	r4, #128	; 0x80
 8000ab4:	0424      	lsls	r4, r4, #16
 8000ab6:	4321      	orrs	r1, r4
 8000ab8:	2f38      	cmp	r7, #56	; 0x38
 8000aba:	dd00      	ble.n	8000abe <__aeabi_dadd+0x302>
 8000abc:	e11e      	b.n	8000cfc <__aeabi_dadd+0x540>
 8000abe:	2f1f      	cmp	r7, #31
 8000ac0:	dd00      	ble.n	8000ac4 <__aeabi_dadd+0x308>
 8000ac2:	e19e      	b.n	8000e02 <__aeabi_dadd+0x646>
 8000ac4:	2620      	movs	r6, #32
 8000ac6:	000c      	movs	r4, r1
 8000ac8:	1bf6      	subs	r6, r6, r7
 8000aca:	0018      	movs	r0, r3
 8000acc:	40b3      	lsls	r3, r6
 8000ace:	40b4      	lsls	r4, r6
 8000ad0:	40f8      	lsrs	r0, r7
 8000ad2:	1e5e      	subs	r6, r3, #1
 8000ad4:	41b3      	sbcs	r3, r6
 8000ad6:	40f9      	lsrs	r1, r7
 8000ad8:	4304      	orrs	r4, r0
 8000ada:	431c      	orrs	r4, r3
 8000adc:	4489      	add	r9, r1
 8000ade:	4444      	add	r4, r8
 8000ae0:	4544      	cmp	r4, r8
 8000ae2:	419b      	sbcs	r3, r3
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	444b      	add	r3, r9
 8000ae8:	469a      	mov	sl, r3
 8000aea:	0016      	movs	r6, r2
 8000aec:	e7a8      	b.n	8000a40 <__aeabi_dadd+0x284>
 8000aee:	4642      	mov	r2, r8
 8000af0:	464c      	mov	r4, r9
 8000af2:	4314      	orrs	r4, r2
 8000af4:	1e62      	subs	r2, r4, #1
 8000af6:	4194      	sbcs	r4, r2
 8000af8:	e6a6      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000afa:	4c0d      	ldr	r4, [pc, #52]	; (8000b30 <__aeabi_dadd+0x374>)
 8000afc:	1c72      	adds	r2, r6, #1
 8000afe:	4222      	tst	r2, r4
 8000b00:	d000      	beq.n	8000b04 <__aeabi_dadd+0x348>
 8000b02:	e0a8      	b.n	8000c56 <__aeabi_dadd+0x49a>
 8000b04:	000a      	movs	r2, r1
 8000b06:	431a      	orrs	r2, r3
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_dadd+0x352>
 8000b0c:	e10a      	b.n	8000d24 <__aeabi_dadd+0x568>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x358>
 8000b12:	e15e      	b.n	8000dd2 <__aeabi_dadd+0x616>
 8000b14:	464a      	mov	r2, r9
 8000b16:	4302      	orrs	r2, r0
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dadd+0x360>
 8000b1a:	e161      	b.n	8000de0 <__aeabi_dadd+0x624>
 8000b1c:	074a      	lsls	r2, r1, #29
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	08c9      	lsrs	r1, r1, #3
 8000b24:	e77c      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	000007ff 	.word	0x000007ff
 8000b2c:	ff7fffff 	.word	0xff7fffff
 8000b30:	000007fe 	.word	0x000007fe
 8000b34:	4ccf      	ldr	r4, [pc, #828]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000b36:	42a2      	cmp	r2, r4
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x380>
 8000b3a:	e0ce      	b.n	8000cda <__aeabi_dadd+0x51e>
 8000b3c:	2480      	movs	r4, #128	; 0x80
 8000b3e:	0424      	lsls	r4, r4, #16
 8000b40:	4321      	orrs	r1, r4
 8000b42:	2f38      	cmp	r7, #56	; 0x38
 8000b44:	dc5b      	bgt.n	8000bfe <__aeabi_dadd+0x442>
 8000b46:	2f1f      	cmp	r7, #31
 8000b48:	dd00      	ble.n	8000b4c <__aeabi_dadd+0x390>
 8000b4a:	e0dc      	b.n	8000d06 <__aeabi_dadd+0x54a>
 8000b4c:	2520      	movs	r5, #32
 8000b4e:	000c      	movs	r4, r1
 8000b50:	1bed      	subs	r5, r5, r7
 8000b52:	001e      	movs	r6, r3
 8000b54:	40ab      	lsls	r3, r5
 8000b56:	40ac      	lsls	r4, r5
 8000b58:	40fe      	lsrs	r6, r7
 8000b5a:	1e5d      	subs	r5, r3, #1
 8000b5c:	41ab      	sbcs	r3, r5
 8000b5e:	4334      	orrs	r4, r6
 8000b60:	40f9      	lsrs	r1, r7
 8000b62:	431c      	orrs	r4, r3
 8000b64:	464b      	mov	r3, r9
 8000b66:	1a5b      	subs	r3, r3, r1
 8000b68:	4699      	mov	r9, r3
 8000b6a:	e04c      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	1a1c      	subs	r4, r3, r0
 8000b70:	1a88      	subs	r0, r1, r2
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	4192      	sbcs	r2, r2
 8000b76:	4252      	negs	r2, r2
 8000b78:	4692      	mov	sl, r2
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	4650      	mov	r0, sl
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	4692      	mov	sl, r2
 8000b82:	0212      	lsls	r2, r2, #8
 8000b84:	d478      	bmi.n	8000c78 <__aeabi_dadd+0x4bc>
 8000b86:	4653      	mov	r3, sl
 8000b88:	4323      	orrs	r3, r4
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_dadd+0x3d2>
 8000b8c:	e66a      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2500      	movs	r5, #0
 8000b92:	e745      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b94:	074a      	lsls	r2, r1, #29
 8000b96:	08db      	lsrs	r3, r3, #3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	e73d      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000b9e:	181c      	adds	r4, r3, r0
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	419b      	sbcs	r3, r3
 8000ba4:	4449      	add	r1, r9
 8000ba6:	468a      	mov	sl, r1
 8000ba8:	425b      	negs	r3, r3
 8000baa:	449a      	add	sl, r3
 8000bac:	4653      	mov	r3, sl
 8000bae:	2601      	movs	r6, #1
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_dadd+0x3fa>
 8000bb4:	e727      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000bb6:	2602      	movs	r6, #2
 8000bb8:	4652      	mov	r2, sl
 8000bba:	4baf      	ldr	r3, [pc, #700]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	4021      	ands	r1, r4
 8000bc4:	0862      	lsrs	r2, r4, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	07dc      	lsls	r4, r3, #31
 8000bca:	085b      	lsrs	r3, r3, #1
 8000bcc:	469a      	mov	sl, r3
 8000bce:	4314      	orrs	r4, r2
 8000bd0:	e670      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000bd2:	003a      	movs	r2, r7
 8000bd4:	464c      	mov	r4, r9
 8000bd6:	3a20      	subs	r2, #32
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	46a4      	mov	ip, r4
 8000bdc:	2f20      	cmp	r7, #32
 8000bde:	d007      	beq.n	8000bf0 <__aeabi_dadd+0x434>
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	4648      	mov	r0, r9
 8000be4:	1bd2      	subs	r2, r2, r7
 8000be6:	4090      	lsls	r0, r2
 8000be8:	0002      	movs	r2, r0
 8000bea:	4640      	mov	r0, r8
 8000bec:	4310      	orrs	r0, r2
 8000bee:	4680      	mov	r8, r0
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	1e42      	subs	r2, r0, #1
 8000bf4:	4190      	sbcs	r0, r2
 8000bf6:	4662      	mov	r2, ip
 8000bf8:	0004      	movs	r4, r0
 8000bfa:	4314      	orrs	r4, r2
 8000bfc:	e624      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000bfe:	4319      	orrs	r1, r3
 8000c00:	000c      	movs	r4, r1
 8000c02:	1e63      	subs	r3, r4, #1
 8000c04:	419c      	sbcs	r4, r3
 8000c06:	4643      	mov	r3, r8
 8000c08:	1b1c      	subs	r4, r3, r4
 8000c0a:	45a0      	cmp	r8, r4
 8000c0c:	419b      	sbcs	r3, r3
 8000c0e:	4649      	mov	r1, r9
 8000c10:	425b      	negs	r3, r3
 8000c12:	1acb      	subs	r3, r1, r3
 8000c14:	469a      	mov	sl, r3
 8000c16:	4665      	mov	r5, ip
 8000c18:	0016      	movs	r6, r2
 8000c1a:	e61b      	b.n	8000854 <__aeabi_dadd+0x98>
 8000c1c:	000c      	movs	r4, r1
 8000c1e:	431c      	orrs	r4, r3
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x468>
 8000c22:	e0c7      	b.n	8000db4 <__aeabi_dadd+0x5f8>
 8000c24:	1e7c      	subs	r4, r7, #1
 8000c26:	2f01      	cmp	r7, #1
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dadd+0x470>
 8000c2a:	e0f9      	b.n	8000e20 <__aeabi_dadd+0x664>
 8000c2c:	4e91      	ldr	r6, [pc, #580]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c2e:	42b7      	cmp	r7, r6
 8000c30:	d05c      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000c32:	0027      	movs	r7, r4
 8000c34:	e740      	b.n	8000ab8 <__aeabi_dadd+0x2fc>
 8000c36:	2220      	movs	r2, #32
 8000c38:	464c      	mov	r4, r9
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	1bd2      	subs	r2, r2, r7
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	40f8      	lsrs	r0, r7
 8000c42:	4304      	orrs	r4, r0
 8000c44:	4640      	mov	r0, r8
 8000c46:	4090      	lsls	r0, r2
 8000c48:	1e42      	subs	r2, r0, #1
 8000c4a:	4190      	sbcs	r0, r2
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	40fa      	lsrs	r2, r7
 8000c50:	4304      	orrs	r4, r0
 8000c52:	1889      	adds	r1, r1, r2
 8000c54:	e6ee      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000c56:	4c87      	ldr	r4, [pc, #540]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c58:	42a2      	cmp	r2, r4
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x4a2>
 8000c5c:	e6f9      	b.n	8000a52 <__aeabi_dadd+0x296>
 8000c5e:	1818      	adds	r0, r3, r0
 8000c60:	4298      	cmp	r0, r3
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	4449      	add	r1, r9
 8000c66:	425b      	negs	r3, r3
 8000c68:	18cb      	adds	r3, r1, r3
 8000c6a:	07dc      	lsls	r4, r3, #31
 8000c6c:	0840      	lsrs	r0, r0, #1
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	469a      	mov	sl, r3
 8000c72:	0016      	movs	r6, r2
 8000c74:	4304      	orrs	r4, r0
 8000c76:	e6c6      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000c78:	4642      	mov	r2, r8
 8000c7a:	1ad4      	subs	r4, r2, r3
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	4180      	sbcs	r0, r0
 8000c80:	464b      	mov	r3, r9
 8000c82:	4240      	negs	r0, r0
 8000c84:	1a59      	subs	r1, r3, r1
 8000c86:	1a0b      	subs	r3, r1, r0
 8000c88:	469a      	mov	sl, r3
 8000c8a:	4665      	mov	r5, ip
 8000c8c:	e5ea      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000c8e:	464b      	mov	r3, r9
 8000c90:	464a      	mov	r2, r9
 8000c92:	08c0      	lsrs	r0, r0, #3
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4665      	mov	r5, ip
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	08d1      	lsrs	r1, r2, #3
 8000c9c:	e6bd      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d000      	beq.n	8000ca4 <__aeabi_dadd+0x4e8>
 8000ca2:	e08e      	b.n	8000dc2 <__aeabi_dadd+0x606>
 8000ca4:	464b      	mov	r3, r9
 8000ca6:	4303      	orrs	r3, r0
 8000ca8:	d117      	bne.n	8000cda <__aeabi_dadd+0x51e>
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	2500      	movs	r5, #0
 8000cae:	0309      	lsls	r1, r1, #12
 8000cb0:	e6da      	b.n	8000a68 <__aeabi_dadd+0x2ac>
 8000cb2:	074a      	lsls	r2, r1, #29
 8000cb4:	08db      	lsrs	r3, r3, #3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	08c9      	lsrs	r1, r1, #3
 8000cba:	e6d1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cbc:	1a1c      	subs	r4, r3, r0
 8000cbe:	464a      	mov	r2, r9
 8000cc0:	42a3      	cmp	r3, r4
 8000cc2:	419b      	sbcs	r3, r3
 8000cc4:	1a89      	subs	r1, r1, r2
 8000cc6:	425b      	negs	r3, r3
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	469a      	mov	sl, r3
 8000ccc:	2601      	movs	r6, #1
 8000cce:	e5c1      	b.n	8000854 <__aeabi_dadd+0x98>
 8000cd0:	074a      	lsls	r2, r1, #29
 8000cd2:	08db      	lsrs	r3, r3, #3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	e69f      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	08d8      	lsrs	r0, r3, #3
 8000cde:	464b      	mov	r3, r9
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	075b      	lsls	r3, r3, #29
 8000ce4:	4665      	mov	r5, ip
 8000ce6:	4303      	orrs	r3, r0
 8000ce8:	08d1      	lsrs	r1, r2, #3
 8000cea:	e6b9      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cec:	4643      	mov	r3, r8
 8000cee:	08d8      	lsrs	r0, r3, #3
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	075b      	lsls	r3, r3, #29
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	08d1      	lsrs	r1, r2, #3
 8000cfa:	e6b1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	000c      	movs	r4, r1
 8000d00:	1e63      	subs	r3, r4, #1
 8000d02:	419c      	sbcs	r4, r3
 8000d04:	e6eb      	b.n	8000ade <__aeabi_dadd+0x322>
 8000d06:	003c      	movs	r4, r7
 8000d08:	000d      	movs	r5, r1
 8000d0a:	3c20      	subs	r4, #32
 8000d0c:	40e5      	lsrs	r5, r4
 8000d0e:	2f20      	cmp	r7, #32
 8000d10:	d003      	beq.n	8000d1a <__aeabi_dadd+0x55e>
 8000d12:	2440      	movs	r4, #64	; 0x40
 8000d14:	1be4      	subs	r4, r4, r7
 8000d16:	40a1      	lsls	r1, r4
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	1e63      	subs	r3, r4, #1
 8000d1e:	419c      	sbcs	r4, r3
 8000d20:	432c      	orrs	r4, r5
 8000d22:	e770      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d0e1      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000d28:	464a      	mov	r2, r9
 8000d2a:	4302      	orrs	r2, r0
 8000d2c:	d0c1      	beq.n	8000cb2 <__aeabi_dadd+0x4f6>
 8000d2e:	074a      	lsls	r2, r1, #29
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	08c9      	lsrs	r1, r1, #3
 8000d38:	0312      	lsls	r2, r2, #12
 8000d3a:	4211      	tst	r1, r2
 8000d3c:	d008      	beq.n	8000d50 <__aeabi_dadd+0x594>
 8000d3e:	4648      	mov	r0, r9
 8000d40:	08c4      	lsrs	r4, r0, #3
 8000d42:	4214      	tst	r4, r2
 8000d44:	d104      	bne.n	8000d50 <__aeabi_dadd+0x594>
 8000d46:	4643      	mov	r3, r8
 8000d48:	0021      	movs	r1, r4
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	0742      	lsls	r2, r0, #29
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	0f5a      	lsrs	r2, r3, #29
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	0752      	lsls	r2, r2, #29
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	e681      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000d5c:	464b      	mov	r3, r9
 8000d5e:	4303      	orrs	r3, r0
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dadd+0x5a8>
 8000d62:	e714      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000d64:	464b      	mov	r3, r9
 8000d66:	464a      	mov	r2, r9
 8000d68:	08c0      	lsrs	r0, r0, #3
 8000d6a:	075b      	lsls	r3, r3, #29
 8000d6c:	4665      	mov	r5, ip
 8000d6e:	4303      	orrs	r3, r0
 8000d70:	08d1      	lsrs	r1, r2, #3
 8000d72:	e655      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000d74:	1ac4      	subs	r4, r0, r3
 8000d76:	45a0      	cmp	r8, r4
 8000d78:	4180      	sbcs	r0, r0
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	4240      	negs	r0, r0
 8000d7e:	1a59      	subs	r1, r3, r1
 8000d80:	1a0b      	subs	r3, r1, r0
 8000d82:	469a      	mov	sl, r3
 8000d84:	4665      	mov	r5, ip
 8000d86:	2601      	movs	r6, #1
 8000d88:	e564      	b.n	8000854 <__aeabi_dadd+0x98>
 8000d8a:	1a1c      	subs	r4, r3, r0
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	4180      	sbcs	r0, r0
 8000d92:	1a8a      	subs	r2, r1, r2
 8000d94:	4240      	negs	r0, r0
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	4692      	mov	sl, r2
 8000d9a:	0212      	lsls	r2, r2, #8
 8000d9c:	d549      	bpl.n	8000e32 <__aeabi_dadd+0x676>
 8000d9e:	4642      	mov	r2, r8
 8000da0:	1ad4      	subs	r4, r2, r3
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	4180      	sbcs	r0, r0
 8000da6:	464b      	mov	r3, r9
 8000da8:	4240      	negs	r0, r0
 8000daa:	1a59      	subs	r1, r3, r1
 8000dac:	1a0b      	subs	r3, r1, r0
 8000dae:	469a      	mov	sl, r3
 8000db0:	4665      	mov	r5, ip
 8000db2:	e57f      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000db4:	464b      	mov	r3, r9
 8000db6:	464a      	mov	r2, r9
 8000db8:	08c0      	lsrs	r0, r0, #3
 8000dba:	075b      	lsls	r3, r3, #29
 8000dbc:	4303      	orrs	r3, r0
 8000dbe:	08d1      	lsrs	r1, r2, #3
 8000dc0:	e62b      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000dc2:	464a      	mov	r2, r9
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	4302      	orrs	r2, r0
 8000dc8:	d138      	bne.n	8000e3c <__aeabi_dadd+0x680>
 8000dca:	074a      	lsls	r2, r1, #29
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	08c9      	lsrs	r1, r1, #3
 8000dd0:	e646      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	08c0      	lsrs	r0, r0, #3
 8000dd8:	075b      	lsls	r3, r3, #29
 8000dda:	4303      	orrs	r3, r0
 8000ddc:	08d1      	lsrs	r1, r2, #3
 8000dde:	e61f      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000de0:	181c      	adds	r4, r3, r0
 8000de2:	429c      	cmp	r4, r3
 8000de4:	419b      	sbcs	r3, r3
 8000de6:	4449      	add	r1, r9
 8000de8:	468a      	mov	sl, r1
 8000dea:	425b      	negs	r3, r3
 8000dec:	449a      	add	sl, r3
 8000dee:	4653      	mov	r3, sl
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	d400      	bmi.n	8000df6 <__aeabi_dadd+0x63a>
 8000df4:	e607      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000df6:	4652      	mov	r2, sl
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	4692      	mov	sl, r2
 8000e00:	e601      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e02:	003c      	movs	r4, r7
 8000e04:	000e      	movs	r6, r1
 8000e06:	3c20      	subs	r4, #32
 8000e08:	40e6      	lsrs	r6, r4
 8000e0a:	2f20      	cmp	r7, #32
 8000e0c:	d003      	beq.n	8000e16 <__aeabi_dadd+0x65a>
 8000e0e:	2440      	movs	r4, #64	; 0x40
 8000e10:	1be4      	subs	r4, r4, r7
 8000e12:	40a1      	lsls	r1, r4
 8000e14:	430b      	orrs	r3, r1
 8000e16:	001c      	movs	r4, r3
 8000e18:	1e63      	subs	r3, r4, #1
 8000e1a:	419c      	sbcs	r4, r3
 8000e1c:	4334      	orrs	r4, r6
 8000e1e:	e65e      	b.n	8000ade <__aeabi_dadd+0x322>
 8000e20:	4443      	add	r3, r8
 8000e22:	4283      	cmp	r3, r0
 8000e24:	4180      	sbcs	r0, r0
 8000e26:	4449      	add	r1, r9
 8000e28:	468a      	mov	sl, r1
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	001c      	movs	r4, r3
 8000e2e:	4482      	add	sl, r0
 8000e30:	e6bc      	b.n	8000bac <__aeabi_dadd+0x3f0>
 8000e32:	4653      	mov	r3, sl
 8000e34:	4323      	orrs	r3, r4
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x67e>
 8000e38:	e6a9      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000e3a:	e5e4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e3c:	074a      	lsls	r2, r1, #29
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	08c9      	lsrs	r1, r1, #3
 8000e44:	0312      	lsls	r2, r2, #12
 8000e46:	4211      	tst	r1, r2
 8000e48:	d009      	beq.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e4a:	4648      	mov	r0, r9
 8000e4c:	08c4      	lsrs	r4, r0, #3
 8000e4e:	4214      	tst	r4, r2
 8000e50:	d105      	bne.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e52:	4643      	mov	r3, r8
 8000e54:	4665      	mov	r5, ip
 8000e56:	0021      	movs	r1, r4
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	0742      	lsls	r2, r0, #29
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	0f5a      	lsrs	r2, r3, #29
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	0752      	lsls	r2, r2, #29
 8000e66:	4313      	orrs	r3, r2
 8000e68:	e5fa      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	4a01      	ldr	r2, [pc, #4]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000e6e:	001c      	movs	r4, r3
 8000e70:	e540      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	000007ff 	.word	0x000007ff
 8000e78:	ff7fffff 	.word	0xff7fffff

08000e7c <__aeabi_ddiv>:
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	4657      	mov	r7, sl
 8000e80:	464e      	mov	r6, r9
 8000e82:	4645      	mov	r5, r8
 8000e84:	46de      	mov	lr, fp
 8000e86:	b5e0      	push	{r5, r6, r7, lr}
 8000e88:	030c      	lsls	r4, r1, #12
 8000e8a:	001f      	movs	r7, r3
 8000e8c:	004b      	lsls	r3, r1, #1
 8000e8e:	4681      	mov	r9, r0
 8000e90:	4692      	mov	sl, r2
 8000e92:	0005      	movs	r5, r0
 8000e94:	b085      	sub	sp, #20
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d5b      	lsrs	r3, r3, #21
 8000e9a:	0fce      	lsrs	r6, r1, #31
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_ddiv+0x26>
 8000ea0:	e152      	b.n	8001148 <__aeabi_ddiv+0x2cc>
 8000ea2:	4ad2      	ldr	r2, [pc, #840]	; (80011ec <__aeabi_ddiv+0x370>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2e>
 8000ea8:	e16e      	b.n	8001188 <__aeabi_ddiv+0x30c>
 8000eaa:	0f42      	lsrs	r2, r0, #29
 8000eac:	00e4      	lsls	r4, r4, #3
 8000eae:	4314      	orrs	r4, r2
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	0412      	lsls	r2, r2, #16
 8000eb4:	4322      	orrs	r2, r4
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	4acd      	ldr	r2, [pc, #820]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eba:	00c5      	lsls	r5, r0, #3
 8000ebc:	4693      	mov	fp, r2
 8000ebe:	449b      	add	fp, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	033c      	lsls	r4, r7, #12
 8000ec8:	007b      	lsls	r3, r7, #1
 8000eca:	4650      	mov	r0, sl
 8000ecc:	0b24      	lsrs	r4, r4, #12
 8000ece:	0d5b      	lsrs	r3, r3, #21
 8000ed0:	0fff      	lsrs	r7, r7, #31
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x5c>
 8000ed6:	e11a      	b.n	800110e <__aeabi_ddiv+0x292>
 8000ed8:	4ac4      	ldr	r2, [pc, #784]	; (80011ec <__aeabi_ddiv+0x370>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_ddiv+0x64>
 8000ede:	e15e      	b.n	800119e <__aeabi_ddiv+0x322>
 8000ee0:	0f42      	lsrs	r2, r0, #29
 8000ee2:	00e4      	lsls	r4, r4, #3
 8000ee4:	4322      	orrs	r2, r4
 8000ee6:	2480      	movs	r4, #128	; 0x80
 8000ee8:	0424      	lsls	r4, r4, #16
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4ac0      	ldr	r2, [pc, #768]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eee:	00c1      	lsls	r1, r0, #3
 8000ef0:	4694      	mov	ip, r2
 8000ef2:	465a      	mov	r2, fp
 8000ef4:	4463      	add	r3, ip
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	469b      	mov	fp, r3
 8000efa:	2000      	movs	r0, #0
 8000efc:	0033      	movs	r3, r6
 8000efe:	407b      	eors	r3, r7
 8000f00:	469a      	mov	sl, r3
 8000f02:	464b      	mov	r3, r9
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d827      	bhi.n	8000f58 <__aeabi_ddiv+0xdc>
 8000f08:	4aba      	ldr	r2, [pc, #744]	; (80011f4 <__aeabi_ddiv+0x378>)
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	58d3      	ldr	r3, [r2, r3]
 8000f0e:	469f      	mov	pc, r3
 8000f10:	46b2      	mov	sl, r6
 8000f12:	9b00      	ldr	r3, [sp, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d016      	beq.n	8000f46 <__aeabi_ddiv+0xca>
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_ddiv+0xa2>
 8000f1c:	e287      	b.n	800142e <__aeabi_ddiv+0x5b2>
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d000      	beq.n	8000f24 <__aeabi_ddiv+0xa8>
 8000f22:	e0d5      	b.n	80010d0 <__aeabi_ddiv+0x254>
 8000f24:	2300      	movs	r3, #0
 8000f26:	2200      	movs	r2, #0
 8000f28:	2500      	movs	r5, #0
 8000f2a:	051b      	lsls	r3, r3, #20
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	4652      	mov	r2, sl
 8000f30:	07d2      	lsls	r2, r2, #31
 8000f32:	4313      	orrs	r3, r2
 8000f34:	0028      	movs	r0, r5
 8000f36:	0019      	movs	r1, r3
 8000f38:	b005      	add	sp, #20
 8000f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f3c:	46bb      	mov	fp, r7
 8000f3e:	46b2      	mov	sl, r6
 8000f40:	46a9      	mov	r9, r5
 8000f42:	46a0      	mov	r8, r4
 8000f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f46:	2200      	movs	r2, #0
 8000f48:	2500      	movs	r5, #0
 8000f4a:	4ba8      	ldr	r3, [pc, #672]	; (80011ec <__aeabi_ddiv+0x370>)
 8000f4c:	e7ed      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8000f4e:	46ba      	mov	sl, r7
 8000f50:	46a0      	mov	r8, r4
 8000f52:	000d      	movs	r5, r1
 8000f54:	9000      	str	r0, [sp, #0]
 8000f56:	e7dc      	b.n	8000f12 <__aeabi_ddiv+0x96>
 8000f58:	4544      	cmp	r4, r8
 8000f5a:	d200      	bcs.n	8000f5e <__aeabi_ddiv+0xe2>
 8000f5c:	e1c4      	b.n	80012e8 <__aeabi_ddiv+0x46c>
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0xe6>
 8000f60:	e1bf      	b.n	80012e2 <__aeabi_ddiv+0x466>
 8000f62:	2301      	movs	r3, #1
 8000f64:	425b      	negs	r3, r3
 8000f66:	469c      	mov	ip, r3
 8000f68:	002e      	movs	r6, r5
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	44e3      	add	fp, ip
 8000f70:	0223      	lsls	r3, r4, #8
 8000f72:	0e0c      	lsrs	r4, r1, #24
 8000f74:	431c      	orrs	r4, r3
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	4699      	mov	r9, r3
 8000f7a:	0423      	lsls	r3, r4, #16
 8000f7c:	020a      	lsls	r2, r1, #8
 8000f7e:	0c1f      	lsrs	r7, r3, #16
 8000f80:	4649      	mov	r1, r9
 8000f82:	9200      	str	r2, [sp, #0]
 8000f84:	9701      	str	r7, [sp, #4]
 8000f86:	f7ff f961 	bl	800024c <__aeabi_uidivmod>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	437a      	muls	r2, r7
 8000f8e:	040b      	lsls	r3, r1, #16
 8000f90:	0c31      	lsrs	r1, r6, #16
 8000f92:	4680      	mov	r8, r0
 8000f94:	4319      	orrs	r1, r3
 8000f96:	428a      	cmp	r2, r1
 8000f98:	d907      	bls.n	8000faa <__aeabi_ddiv+0x12e>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	425b      	negs	r3, r3
 8000f9e:	469c      	mov	ip, r3
 8000fa0:	1909      	adds	r1, r1, r4
 8000fa2:	44e0      	add	r8, ip
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d800      	bhi.n	8000faa <__aeabi_ddiv+0x12e>
 8000fa8:	e201      	b.n	80013ae <__aeabi_ddiv+0x532>
 8000faa:	1a88      	subs	r0, r1, r2
 8000fac:	4649      	mov	r1, r9
 8000fae:	f7ff f94d 	bl	800024c <__aeabi_uidivmod>
 8000fb2:	9a01      	ldr	r2, [sp, #4]
 8000fb4:	0436      	lsls	r6, r6, #16
 8000fb6:	4342      	muls	r2, r0
 8000fb8:	0409      	lsls	r1, r1, #16
 8000fba:	0c36      	lsrs	r6, r6, #16
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	430e      	orrs	r6, r1
 8000fc0:	42b2      	cmp	r2, r6
 8000fc2:	d904      	bls.n	8000fce <__aeabi_ddiv+0x152>
 8000fc4:	1936      	adds	r6, r6, r4
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	42b4      	cmp	r4, r6
 8000fca:	d800      	bhi.n	8000fce <__aeabi_ddiv+0x152>
 8000fcc:	e1e9      	b.n	80013a2 <__aeabi_ddiv+0x526>
 8000fce:	1ab0      	subs	r0, r6, r2
 8000fd0:	4642      	mov	r2, r8
 8000fd2:	9e00      	ldr	r6, [sp, #0]
 8000fd4:	0412      	lsls	r2, r2, #16
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	0c33      	lsrs	r3, r6, #16
 8000fda:	001f      	movs	r7, r3
 8000fdc:	0c11      	lsrs	r1, r2, #16
 8000fde:	4690      	mov	r8, r2
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	0413      	lsls	r3, r2, #16
 8000fe4:	0432      	lsls	r2, r6, #16
 8000fe6:	0c16      	lsrs	r6, r2, #16
 8000fe8:	0032      	movs	r2, r6
 8000fea:	0c1b      	lsrs	r3, r3, #16
 8000fec:	435a      	muls	r2, r3
 8000fee:	9603      	str	r6, [sp, #12]
 8000ff0:	437b      	muls	r3, r7
 8000ff2:	434e      	muls	r6, r1
 8000ff4:	4379      	muls	r1, r7
 8000ff6:	0c17      	lsrs	r7, r2, #16
 8000ff8:	46bc      	mov	ip, r7
 8000ffa:	199b      	adds	r3, r3, r6
 8000ffc:	4463      	add	r3, ip
 8000ffe:	429e      	cmp	r6, r3
 8001000:	d903      	bls.n	800100a <__aeabi_ddiv+0x18e>
 8001002:	2680      	movs	r6, #128	; 0x80
 8001004:	0276      	lsls	r6, r6, #9
 8001006:	46b4      	mov	ip, r6
 8001008:	4461      	add	r1, ip
 800100a:	0c1e      	lsrs	r6, r3, #16
 800100c:	1871      	adds	r1, r6, r1
 800100e:	0416      	lsls	r6, r2, #16
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	0c36      	lsrs	r6, r6, #16
 8001014:	199e      	adds	r6, r3, r6
 8001016:	4288      	cmp	r0, r1
 8001018:	d302      	bcc.n	8001020 <__aeabi_ddiv+0x1a4>
 800101a:	d112      	bne.n	8001042 <__aeabi_ddiv+0x1c6>
 800101c:	42b5      	cmp	r5, r6
 800101e:	d210      	bcs.n	8001042 <__aeabi_ddiv+0x1c6>
 8001020:	4643      	mov	r3, r8
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	469c      	mov	ip, r3
 8001028:	4465      	add	r5, ip
 800102a:	001f      	movs	r7, r3
 800102c:	429d      	cmp	r5, r3
 800102e:	419b      	sbcs	r3, r3
 8001030:	425b      	negs	r3, r3
 8001032:	191b      	adds	r3, r3, r4
 8001034:	18c0      	adds	r0, r0, r3
 8001036:	4284      	cmp	r4, r0
 8001038:	d200      	bcs.n	800103c <__aeabi_ddiv+0x1c0>
 800103a:	e19e      	b.n	800137a <__aeabi_ddiv+0x4fe>
 800103c:	d100      	bne.n	8001040 <__aeabi_ddiv+0x1c4>
 800103e:	e199      	b.n	8001374 <__aeabi_ddiv+0x4f8>
 8001040:	4690      	mov	r8, r2
 8001042:	1bae      	subs	r6, r5, r6
 8001044:	42b5      	cmp	r5, r6
 8001046:	41ad      	sbcs	r5, r5
 8001048:	1a40      	subs	r0, r0, r1
 800104a:	426d      	negs	r5, r5
 800104c:	1b40      	subs	r0, r0, r5
 800104e:	4284      	cmp	r4, r0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x1d8>
 8001052:	e1d2      	b.n	80013fa <__aeabi_ddiv+0x57e>
 8001054:	4649      	mov	r1, r9
 8001056:	f7ff f8f9 	bl	800024c <__aeabi_uidivmod>
 800105a:	9a01      	ldr	r2, [sp, #4]
 800105c:	040b      	lsls	r3, r1, #16
 800105e:	4342      	muls	r2, r0
 8001060:	0c31      	lsrs	r1, r6, #16
 8001062:	0005      	movs	r5, r0
 8001064:	4319      	orrs	r1, r3
 8001066:	428a      	cmp	r2, r1
 8001068:	d900      	bls.n	800106c <__aeabi_ddiv+0x1f0>
 800106a:	e16c      	b.n	8001346 <__aeabi_ddiv+0x4ca>
 800106c:	1a88      	subs	r0, r1, r2
 800106e:	4649      	mov	r1, r9
 8001070:	f7ff f8ec 	bl	800024c <__aeabi_uidivmod>
 8001074:	9a01      	ldr	r2, [sp, #4]
 8001076:	0436      	lsls	r6, r6, #16
 8001078:	4342      	muls	r2, r0
 800107a:	0409      	lsls	r1, r1, #16
 800107c:	0c36      	lsrs	r6, r6, #16
 800107e:	0003      	movs	r3, r0
 8001080:	430e      	orrs	r6, r1
 8001082:	42b2      	cmp	r2, r6
 8001084:	d900      	bls.n	8001088 <__aeabi_ddiv+0x20c>
 8001086:	e153      	b.n	8001330 <__aeabi_ddiv+0x4b4>
 8001088:	9803      	ldr	r0, [sp, #12]
 800108a:	1ab6      	subs	r6, r6, r2
 800108c:	0002      	movs	r2, r0
 800108e:	042d      	lsls	r5, r5, #16
 8001090:	431d      	orrs	r5, r3
 8001092:	9f02      	ldr	r7, [sp, #8]
 8001094:	042b      	lsls	r3, r5, #16
 8001096:	0c1b      	lsrs	r3, r3, #16
 8001098:	435a      	muls	r2, r3
 800109a:	437b      	muls	r3, r7
 800109c:	469c      	mov	ip, r3
 800109e:	0c29      	lsrs	r1, r5, #16
 80010a0:	4348      	muls	r0, r1
 80010a2:	0c13      	lsrs	r3, r2, #16
 80010a4:	4484      	add	ip, r0
 80010a6:	4463      	add	r3, ip
 80010a8:	4379      	muls	r1, r7
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d903      	bls.n	80010b6 <__aeabi_ddiv+0x23a>
 80010ae:	2080      	movs	r0, #128	; 0x80
 80010b0:	0240      	lsls	r0, r0, #9
 80010b2:	4684      	mov	ip, r0
 80010b4:	4461      	add	r1, ip
 80010b6:	0c18      	lsrs	r0, r3, #16
 80010b8:	0412      	lsls	r2, r2, #16
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	0c12      	lsrs	r2, r2, #16
 80010be:	1840      	adds	r0, r0, r1
 80010c0:	189b      	adds	r3, r3, r2
 80010c2:	4286      	cmp	r6, r0
 80010c4:	d200      	bcs.n	80010c8 <__aeabi_ddiv+0x24c>
 80010c6:	e100      	b.n	80012ca <__aeabi_ddiv+0x44e>
 80010c8:	d100      	bne.n	80010cc <__aeabi_ddiv+0x250>
 80010ca:	e0fb      	b.n	80012c4 <__aeabi_ddiv+0x448>
 80010cc:	2301      	movs	r3, #1
 80010ce:	431d      	orrs	r5, r3
 80010d0:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <__aeabi_ddiv+0x37c>)
 80010d2:	445b      	add	r3, fp
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dc00      	bgt.n	80010da <__aeabi_ddiv+0x25e>
 80010d8:	e0aa      	b.n	8001230 <__aeabi_ddiv+0x3b4>
 80010da:	076a      	lsls	r2, r5, #29
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0x264>
 80010de:	e13d      	b.n	800135c <__aeabi_ddiv+0x4e0>
 80010e0:	08e9      	lsrs	r1, r5, #3
 80010e2:	4642      	mov	r2, r8
 80010e4:	01d2      	lsls	r2, r2, #7
 80010e6:	d506      	bpl.n	80010f6 <__aeabi_ddiv+0x27a>
 80010e8:	4642      	mov	r2, r8
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <__aeabi_ddiv+0x380>)
 80010ec:	401a      	ands	r2, r3
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	4690      	mov	r8, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	445b      	add	r3, fp
 80010f6:	4a42      	ldr	r2, [pc, #264]	; (8001200 <__aeabi_ddiv+0x384>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	dd00      	ble.n	80010fe <__aeabi_ddiv+0x282>
 80010fc:	e723      	b.n	8000f46 <__aeabi_ddiv+0xca>
 80010fe:	4642      	mov	r2, r8
 8001100:	055b      	lsls	r3, r3, #21
 8001102:	0755      	lsls	r5, r2, #29
 8001104:	0252      	lsls	r2, r2, #9
 8001106:	430d      	orrs	r5, r1
 8001108:	0b12      	lsrs	r2, r2, #12
 800110a:	0d5b      	lsrs	r3, r3, #21
 800110c:	e70d      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800110e:	4651      	mov	r1, sl
 8001110:	4321      	orrs	r1, r4
 8001112:	d100      	bne.n	8001116 <__aeabi_ddiv+0x29a>
 8001114:	e07c      	b.n	8001210 <__aeabi_ddiv+0x394>
 8001116:	2c00      	cmp	r4, #0
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x2a0>
 800111a:	e0fb      	b.n	8001314 <__aeabi_ddiv+0x498>
 800111c:	0020      	movs	r0, r4
 800111e:	f001 fa1b 	bl	8002558 <__clzsi2>
 8001122:	0002      	movs	r2, r0
 8001124:	3a0b      	subs	r2, #11
 8001126:	231d      	movs	r3, #29
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	4652      	mov	r2, sl
 800112c:	0001      	movs	r1, r0
 800112e:	40da      	lsrs	r2, r3
 8001130:	4653      	mov	r3, sl
 8001132:	3908      	subs	r1, #8
 8001134:	408b      	lsls	r3, r1
 8001136:	408c      	lsls	r4, r1
 8001138:	0019      	movs	r1, r3
 800113a:	4314      	orrs	r4, r2
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <__aeabi_ddiv+0x388>)
 800113e:	4458      	add	r0, fp
 8001140:	469b      	mov	fp, r3
 8001142:	4483      	add	fp, r0
 8001144:	2000      	movs	r0, #0
 8001146:	e6d9      	b.n	8000efc <__aeabi_ddiv+0x80>
 8001148:	0003      	movs	r3, r0
 800114a:	4323      	orrs	r3, r4
 800114c:	4698      	mov	r8, r3
 800114e:	d044      	beq.n	80011da <__aeabi_ddiv+0x35e>
 8001150:	2c00      	cmp	r4, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_ddiv+0x2da>
 8001154:	e0cf      	b.n	80012f6 <__aeabi_ddiv+0x47a>
 8001156:	0020      	movs	r0, r4
 8001158:	f001 f9fe 	bl	8002558 <__clzsi2>
 800115c:	0001      	movs	r1, r0
 800115e:	0002      	movs	r2, r0
 8001160:	390b      	subs	r1, #11
 8001162:	231d      	movs	r3, #29
 8001164:	1a5b      	subs	r3, r3, r1
 8001166:	4649      	mov	r1, r9
 8001168:	0010      	movs	r0, r2
 800116a:	40d9      	lsrs	r1, r3
 800116c:	3808      	subs	r0, #8
 800116e:	4084      	lsls	r4, r0
 8001170:	000b      	movs	r3, r1
 8001172:	464d      	mov	r5, r9
 8001174:	4323      	orrs	r3, r4
 8001176:	4698      	mov	r8, r3
 8001178:	4085      	lsls	r5, r0
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <__aeabi_ddiv+0x38c>)
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	469b      	mov	fp, r3
 8001180:	2300      	movs	r3, #0
 8001182:	4699      	mov	r9, r3
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	e69e      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 8001188:	0002      	movs	r2, r0
 800118a:	4322      	orrs	r2, r4
 800118c:	4690      	mov	r8, r2
 800118e:	d11d      	bne.n	80011cc <__aeabi_ddiv+0x350>
 8001190:	2208      	movs	r2, #8
 8001192:	469b      	mov	fp, r3
 8001194:	2302      	movs	r3, #2
 8001196:	2500      	movs	r5, #0
 8001198:	4691      	mov	r9, r2
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	e693      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 800119e:	4651      	mov	r1, sl
 80011a0:	4321      	orrs	r1, r4
 80011a2:	d109      	bne.n	80011b8 <__aeabi_ddiv+0x33c>
 80011a4:	2302      	movs	r3, #2
 80011a6:	464a      	mov	r2, r9
 80011a8:	431a      	orrs	r2, r3
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <__aeabi_ddiv+0x390>)
 80011ac:	4691      	mov	r9, r2
 80011ae:	469c      	mov	ip, r3
 80011b0:	2400      	movs	r4, #0
 80011b2:	2002      	movs	r0, #2
 80011b4:	44e3      	add	fp, ip
 80011b6:	e6a1      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011b8:	2303      	movs	r3, #3
 80011ba:	464a      	mov	r2, r9
 80011bc:	431a      	orrs	r2, r3
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <__aeabi_ddiv+0x390>)
 80011c0:	4691      	mov	r9, r2
 80011c2:	469c      	mov	ip, r3
 80011c4:	4651      	mov	r1, sl
 80011c6:	2003      	movs	r0, #3
 80011c8:	44e3      	add	fp, ip
 80011ca:	e697      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011cc:	220c      	movs	r2, #12
 80011ce:	469b      	mov	fp, r3
 80011d0:	2303      	movs	r3, #3
 80011d2:	46a0      	mov	r8, r4
 80011d4:	4691      	mov	r9, r2
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	e675      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011da:	2304      	movs	r3, #4
 80011dc:	4699      	mov	r9, r3
 80011de:	2300      	movs	r3, #0
 80011e0:	469b      	mov	fp, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	2500      	movs	r5, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	e66d      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	fffffc01 	.word	0xfffffc01
 80011f4:	0800d148 	.word	0x0800d148
 80011f8:	000003ff 	.word	0x000003ff
 80011fc:	feffffff 	.word	0xfeffffff
 8001200:	000007fe 	.word	0x000007fe
 8001204:	000003f3 	.word	0x000003f3
 8001208:	fffffc0d 	.word	0xfffffc0d
 800120c:	fffff801 	.word	0xfffff801
 8001210:	464a      	mov	r2, r9
 8001212:	2301      	movs	r3, #1
 8001214:	431a      	orrs	r2, r3
 8001216:	4691      	mov	r9, r2
 8001218:	2400      	movs	r4, #0
 800121a:	2001      	movs	r0, #1
 800121c:	e66e      	b.n	8000efc <__aeabi_ddiv+0x80>
 800121e:	2300      	movs	r3, #0
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	469a      	mov	sl, r3
 8001224:	2500      	movs	r5, #0
 8001226:	4b88      	ldr	r3, [pc, #544]	; (8001448 <__aeabi_ddiv+0x5cc>)
 8001228:	0312      	lsls	r2, r2, #12
 800122a:	e67e      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800122c:	2501      	movs	r5, #1
 800122e:	426d      	negs	r5, r5
 8001230:	2201      	movs	r2, #1
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	2a38      	cmp	r2, #56	; 0x38
 8001236:	dd00      	ble.n	800123a <__aeabi_ddiv+0x3be>
 8001238:	e674      	b.n	8000f24 <__aeabi_ddiv+0xa8>
 800123a:	2a1f      	cmp	r2, #31
 800123c:	dc00      	bgt.n	8001240 <__aeabi_ddiv+0x3c4>
 800123e:	e0bd      	b.n	80013bc <__aeabi_ddiv+0x540>
 8001240:	211f      	movs	r1, #31
 8001242:	4249      	negs	r1, r1
 8001244:	1acb      	subs	r3, r1, r3
 8001246:	4641      	mov	r1, r8
 8001248:	40d9      	lsrs	r1, r3
 800124a:	000b      	movs	r3, r1
 800124c:	2a20      	cmp	r2, #32
 800124e:	d004      	beq.n	800125a <__aeabi_ddiv+0x3de>
 8001250:	4641      	mov	r1, r8
 8001252:	4a7e      	ldr	r2, [pc, #504]	; (800144c <__aeabi_ddiv+0x5d0>)
 8001254:	445a      	add	r2, fp
 8001256:	4091      	lsls	r1, r2
 8001258:	430d      	orrs	r5, r1
 800125a:	0029      	movs	r1, r5
 800125c:	1e4a      	subs	r2, r1, #1
 800125e:	4191      	sbcs	r1, r2
 8001260:	4319      	orrs	r1, r3
 8001262:	2307      	movs	r3, #7
 8001264:	001d      	movs	r5, r3
 8001266:	2200      	movs	r2, #0
 8001268:	400d      	ands	r5, r1
 800126a:	420b      	tst	r3, r1
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x3f4>
 800126e:	e0d0      	b.n	8001412 <__aeabi_ddiv+0x596>
 8001270:	220f      	movs	r2, #15
 8001272:	2300      	movs	r3, #0
 8001274:	400a      	ands	r2, r1
 8001276:	2a04      	cmp	r2, #4
 8001278:	d100      	bne.n	800127c <__aeabi_ddiv+0x400>
 800127a:	e0c7      	b.n	800140c <__aeabi_ddiv+0x590>
 800127c:	1d0a      	adds	r2, r1, #4
 800127e:	428a      	cmp	r2, r1
 8001280:	4189      	sbcs	r1, r1
 8001282:	4249      	negs	r1, r1
 8001284:	185b      	adds	r3, r3, r1
 8001286:	0011      	movs	r1, r2
 8001288:	021a      	lsls	r2, r3, #8
 800128a:	d400      	bmi.n	800128e <__aeabi_ddiv+0x412>
 800128c:	e0be      	b.n	800140c <__aeabi_ddiv+0x590>
 800128e:	2301      	movs	r3, #1
 8001290:	2200      	movs	r2, #0
 8001292:	2500      	movs	r5, #0
 8001294:	e649      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	4643      	mov	r3, r8
 800129a:	0312      	lsls	r2, r2, #12
 800129c:	4213      	tst	r3, r2
 800129e:	d008      	beq.n	80012b2 <__aeabi_ddiv+0x436>
 80012a0:	4214      	tst	r4, r2
 80012a2:	d106      	bne.n	80012b2 <__aeabi_ddiv+0x436>
 80012a4:	4322      	orrs	r2, r4
 80012a6:	0312      	lsls	r2, r2, #12
 80012a8:	46ba      	mov	sl, r7
 80012aa:	000d      	movs	r5, r1
 80012ac:	4b66      	ldr	r3, [pc, #408]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012ae:	0b12      	lsrs	r2, r2, #12
 80012b0:	e63b      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	4643      	mov	r3, r8
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	431a      	orrs	r2, r3
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	46b2      	mov	sl, r6
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012c0:	0b12      	lsrs	r2, r2, #12
 80012c2:	e632      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d100      	bne.n	80012ca <__aeabi_ddiv+0x44e>
 80012c8:	e702      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80012ca:	19a6      	adds	r6, r4, r6
 80012cc:	1e6a      	subs	r2, r5, #1
 80012ce:	42a6      	cmp	r6, r4
 80012d0:	d200      	bcs.n	80012d4 <__aeabi_ddiv+0x458>
 80012d2:	e089      	b.n	80013e8 <__aeabi_ddiv+0x56c>
 80012d4:	4286      	cmp	r6, r0
 80012d6:	d200      	bcs.n	80012da <__aeabi_ddiv+0x45e>
 80012d8:	e09f      	b.n	800141a <__aeabi_ddiv+0x59e>
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x462>
 80012dc:	e0af      	b.n	800143e <__aeabi_ddiv+0x5c2>
 80012de:	0015      	movs	r5, r2
 80012e0:	e6f4      	b.n	80010cc <__aeabi_ddiv+0x250>
 80012e2:	42a9      	cmp	r1, r5
 80012e4:	d900      	bls.n	80012e8 <__aeabi_ddiv+0x46c>
 80012e6:	e63c      	b.n	8000f62 <__aeabi_ddiv+0xe6>
 80012e8:	4643      	mov	r3, r8
 80012ea:	07de      	lsls	r6, r3, #31
 80012ec:	0858      	lsrs	r0, r3, #1
 80012ee:	086b      	lsrs	r3, r5, #1
 80012f0:	431e      	orrs	r6, r3
 80012f2:	07ed      	lsls	r5, r5, #31
 80012f4:	e63c      	b.n	8000f70 <__aeabi_ddiv+0xf4>
 80012f6:	f001 f92f 	bl	8002558 <__clzsi2>
 80012fa:	0001      	movs	r1, r0
 80012fc:	0002      	movs	r2, r0
 80012fe:	3115      	adds	r1, #21
 8001300:	3220      	adds	r2, #32
 8001302:	291c      	cmp	r1, #28
 8001304:	dc00      	bgt.n	8001308 <__aeabi_ddiv+0x48c>
 8001306:	e72c      	b.n	8001162 <__aeabi_ddiv+0x2e6>
 8001308:	464b      	mov	r3, r9
 800130a:	3808      	subs	r0, #8
 800130c:	4083      	lsls	r3, r0
 800130e:	2500      	movs	r5, #0
 8001310:	4698      	mov	r8, r3
 8001312:	e732      	b.n	800117a <__aeabi_ddiv+0x2fe>
 8001314:	f001 f920 	bl	8002558 <__clzsi2>
 8001318:	0003      	movs	r3, r0
 800131a:	001a      	movs	r2, r3
 800131c:	3215      	adds	r2, #21
 800131e:	3020      	adds	r0, #32
 8001320:	2a1c      	cmp	r2, #28
 8001322:	dc00      	bgt.n	8001326 <__aeabi_ddiv+0x4aa>
 8001324:	e6ff      	b.n	8001126 <__aeabi_ddiv+0x2aa>
 8001326:	4654      	mov	r4, sl
 8001328:	3b08      	subs	r3, #8
 800132a:	2100      	movs	r1, #0
 800132c:	409c      	lsls	r4, r3
 800132e:	e705      	b.n	800113c <__aeabi_ddiv+0x2c0>
 8001330:	1936      	adds	r6, r6, r4
 8001332:	3b01      	subs	r3, #1
 8001334:	42b4      	cmp	r4, r6
 8001336:	d900      	bls.n	800133a <__aeabi_ddiv+0x4be>
 8001338:	e6a6      	b.n	8001088 <__aeabi_ddiv+0x20c>
 800133a:	42b2      	cmp	r2, r6
 800133c:	d800      	bhi.n	8001340 <__aeabi_ddiv+0x4c4>
 800133e:	e6a3      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001340:	1e83      	subs	r3, r0, #2
 8001342:	1936      	adds	r6, r6, r4
 8001344:	e6a0      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001346:	1909      	adds	r1, r1, r4
 8001348:	3d01      	subs	r5, #1
 800134a:	428c      	cmp	r4, r1
 800134c:	d900      	bls.n	8001350 <__aeabi_ddiv+0x4d4>
 800134e:	e68d      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001350:	428a      	cmp	r2, r1
 8001352:	d800      	bhi.n	8001356 <__aeabi_ddiv+0x4da>
 8001354:	e68a      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001356:	1e85      	subs	r5, r0, #2
 8001358:	1909      	adds	r1, r1, r4
 800135a:	e687      	b.n	800106c <__aeabi_ddiv+0x1f0>
 800135c:	220f      	movs	r2, #15
 800135e:	402a      	ands	r2, r5
 8001360:	2a04      	cmp	r2, #4
 8001362:	d100      	bne.n	8001366 <__aeabi_ddiv+0x4ea>
 8001364:	e6bc      	b.n	80010e0 <__aeabi_ddiv+0x264>
 8001366:	1d29      	adds	r1, r5, #4
 8001368:	42a9      	cmp	r1, r5
 800136a:	41ad      	sbcs	r5, r5
 800136c:	426d      	negs	r5, r5
 800136e:	08c9      	lsrs	r1, r1, #3
 8001370:	44a8      	add	r8, r5
 8001372:	e6b6      	b.n	80010e2 <__aeabi_ddiv+0x266>
 8001374:	42af      	cmp	r7, r5
 8001376:	d900      	bls.n	800137a <__aeabi_ddiv+0x4fe>
 8001378:	e662      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 800137a:	4281      	cmp	r1, r0
 800137c:	d804      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 800137e:	d000      	beq.n	8001382 <__aeabi_ddiv+0x506>
 8001380:	e65e      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001382:	42ae      	cmp	r6, r5
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 8001386:	e65b      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001388:	2302      	movs	r3, #2
 800138a:	425b      	negs	r3, r3
 800138c:	469c      	mov	ip, r3
 800138e:	9b00      	ldr	r3, [sp, #0]
 8001390:	44e0      	add	r8, ip
 8001392:	469c      	mov	ip, r3
 8001394:	4465      	add	r5, ip
 8001396:	429d      	cmp	r5, r3
 8001398:	419b      	sbcs	r3, r3
 800139a:	425b      	negs	r3, r3
 800139c:	191b      	adds	r3, r3, r4
 800139e:	18c0      	adds	r0, r0, r3
 80013a0:	e64f      	b.n	8001042 <__aeabi_ddiv+0x1c6>
 80013a2:	42b2      	cmp	r2, r6
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x52c>
 80013a6:	e612      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013a8:	1e83      	subs	r3, r0, #2
 80013aa:	1936      	adds	r6, r6, r4
 80013ac:	e60f      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013ae:	428a      	cmp	r2, r1
 80013b0:	d800      	bhi.n	80013b4 <__aeabi_ddiv+0x538>
 80013b2:	e5fa      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013b4:	1e83      	subs	r3, r0, #2
 80013b6:	4698      	mov	r8, r3
 80013b8:	1909      	adds	r1, r1, r4
 80013ba:	e5f6      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <__aeabi_ddiv+0x5d4>)
 80013be:	0028      	movs	r0, r5
 80013c0:	445b      	add	r3, fp
 80013c2:	4641      	mov	r1, r8
 80013c4:	409d      	lsls	r5, r3
 80013c6:	4099      	lsls	r1, r3
 80013c8:	40d0      	lsrs	r0, r2
 80013ca:	1e6b      	subs	r3, r5, #1
 80013cc:	419d      	sbcs	r5, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4301      	orrs	r1, r0
 80013d2:	4329      	orrs	r1, r5
 80013d4:	40d3      	lsrs	r3, r2
 80013d6:	074a      	lsls	r2, r1, #29
 80013d8:	d100      	bne.n	80013dc <__aeabi_ddiv+0x560>
 80013da:	e755      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013dc:	220f      	movs	r2, #15
 80013de:	400a      	ands	r2, r1
 80013e0:	2a04      	cmp	r2, #4
 80013e2:	d000      	beq.n	80013e6 <__aeabi_ddiv+0x56a>
 80013e4:	e74a      	b.n	800127c <__aeabi_ddiv+0x400>
 80013e6:	e74f      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013e8:	0015      	movs	r5, r2
 80013ea:	4286      	cmp	r6, r0
 80013ec:	d000      	beq.n	80013f0 <__aeabi_ddiv+0x574>
 80013ee:	e66d      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f0:	9a00      	ldr	r2, [sp, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d000      	beq.n	80013f8 <__aeabi_ddiv+0x57c>
 80013f6:	e669      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f8:	e66a      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <__aeabi_ddiv+0x5d8>)
 80013fc:	445b      	add	r3, fp
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dc00      	bgt.n	8001404 <__aeabi_ddiv+0x588>
 8001402:	e713      	b.n	800122c <__aeabi_ddiv+0x3b0>
 8001404:	2501      	movs	r5, #1
 8001406:	2100      	movs	r1, #0
 8001408:	44a8      	add	r8, r5
 800140a:	e66a      	b.n	80010e2 <__aeabi_ddiv+0x266>
 800140c:	075d      	lsls	r5, r3, #29
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	0b1a      	lsrs	r2, r3, #12
 8001412:	08c9      	lsrs	r1, r1, #3
 8001414:	2300      	movs	r3, #0
 8001416:	430d      	orrs	r5, r1
 8001418:	e587      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800141a:	9900      	ldr	r1, [sp, #0]
 800141c:	3d02      	subs	r5, #2
 800141e:	004a      	lsls	r2, r1, #1
 8001420:	428a      	cmp	r2, r1
 8001422:	41bf      	sbcs	r7, r7
 8001424:	427f      	negs	r7, r7
 8001426:	193f      	adds	r7, r7, r4
 8001428:	19f6      	adds	r6, r6, r7
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	e7dd      	b.n	80013ea <__aeabi_ddiv+0x56e>
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	4643      	mov	r3, r8
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	431a      	orrs	r2, r3
 8001436:	0312      	lsls	r2, r2, #12
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <__aeabi_ddiv+0x5cc>)
 800143a:	0b12      	lsrs	r2, r2, #12
 800143c:	e575      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800143e:	9900      	ldr	r1, [sp, #0]
 8001440:	4299      	cmp	r1, r3
 8001442:	d3ea      	bcc.n	800141a <__aeabi_ddiv+0x59e>
 8001444:	0015      	movs	r5, r2
 8001446:	e7d3      	b.n	80013f0 <__aeabi_ddiv+0x574>
 8001448:	000007ff 	.word	0x000007ff
 800144c:	0000043e 	.word	0x0000043e
 8001450:	0000041e 	.word	0x0000041e
 8001454:	000003ff 	.word	0x000003ff

08001458 <__eqdf2>:
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	464e      	mov	r6, r9
 800145c:	4645      	mov	r5, r8
 800145e:	46de      	mov	lr, fp
 8001460:	4657      	mov	r7, sl
 8001462:	4690      	mov	r8, r2
 8001464:	b5e0      	push	{r5, r6, r7, lr}
 8001466:	0017      	movs	r7, r2
 8001468:	031a      	lsls	r2, r3, #12
 800146a:	0b12      	lsrs	r2, r2, #12
 800146c:	0005      	movs	r5, r0
 800146e:	4684      	mov	ip, r0
 8001470:	4819      	ldr	r0, [pc, #100]	; (80014d8 <__eqdf2+0x80>)
 8001472:	030e      	lsls	r6, r1, #12
 8001474:	004c      	lsls	r4, r1, #1
 8001476:	4691      	mov	r9, r2
 8001478:	005a      	lsls	r2, r3, #1
 800147a:	0fdb      	lsrs	r3, r3, #31
 800147c:	469b      	mov	fp, r3
 800147e:	0b36      	lsrs	r6, r6, #12
 8001480:	0d64      	lsrs	r4, r4, #21
 8001482:	0fc9      	lsrs	r1, r1, #31
 8001484:	0d52      	lsrs	r2, r2, #21
 8001486:	4284      	cmp	r4, r0
 8001488:	d019      	beq.n	80014be <__eqdf2+0x66>
 800148a:	4282      	cmp	r2, r0
 800148c:	d010      	beq.n	80014b0 <__eqdf2+0x58>
 800148e:	2001      	movs	r0, #1
 8001490:	4294      	cmp	r4, r2
 8001492:	d10e      	bne.n	80014b2 <__eqdf2+0x5a>
 8001494:	454e      	cmp	r6, r9
 8001496:	d10c      	bne.n	80014b2 <__eqdf2+0x5a>
 8001498:	2001      	movs	r0, #1
 800149a:	45c4      	cmp	ip, r8
 800149c:	d109      	bne.n	80014b2 <__eqdf2+0x5a>
 800149e:	4559      	cmp	r1, fp
 80014a0:	d017      	beq.n	80014d2 <__eqdf2+0x7a>
 80014a2:	2c00      	cmp	r4, #0
 80014a4:	d105      	bne.n	80014b2 <__eqdf2+0x5a>
 80014a6:	0030      	movs	r0, r6
 80014a8:	4328      	orrs	r0, r5
 80014aa:	1e43      	subs	r3, r0, #1
 80014ac:	4198      	sbcs	r0, r3
 80014ae:	e000      	b.n	80014b2 <__eqdf2+0x5a>
 80014b0:	2001      	movs	r0, #1
 80014b2:	bcf0      	pop	{r4, r5, r6, r7}
 80014b4:	46bb      	mov	fp, r7
 80014b6:	46b2      	mov	sl, r6
 80014b8:	46a9      	mov	r9, r5
 80014ba:	46a0      	mov	r8, r4
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014be:	0033      	movs	r3, r6
 80014c0:	2001      	movs	r0, #1
 80014c2:	432b      	orrs	r3, r5
 80014c4:	d1f5      	bne.n	80014b2 <__eqdf2+0x5a>
 80014c6:	42a2      	cmp	r2, r4
 80014c8:	d1f3      	bne.n	80014b2 <__eqdf2+0x5a>
 80014ca:	464b      	mov	r3, r9
 80014cc:	433b      	orrs	r3, r7
 80014ce:	d1f0      	bne.n	80014b2 <__eqdf2+0x5a>
 80014d0:	e7e2      	b.n	8001498 <__eqdf2+0x40>
 80014d2:	2000      	movs	r0, #0
 80014d4:	e7ed      	b.n	80014b2 <__eqdf2+0x5a>
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	000007ff 	.word	0x000007ff

080014dc <__gedf2>:
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	4647      	mov	r7, r8
 80014e0:	46ce      	mov	lr, r9
 80014e2:	0004      	movs	r4, r0
 80014e4:	0018      	movs	r0, r3
 80014e6:	0016      	movs	r6, r2
 80014e8:	031b      	lsls	r3, r3, #12
 80014ea:	0b1b      	lsrs	r3, r3, #12
 80014ec:	4d2d      	ldr	r5, [pc, #180]	; (80015a4 <__gedf2+0xc8>)
 80014ee:	004a      	lsls	r2, r1, #1
 80014f0:	4699      	mov	r9, r3
 80014f2:	b580      	push	{r7, lr}
 80014f4:	0043      	lsls	r3, r0, #1
 80014f6:	030f      	lsls	r7, r1, #12
 80014f8:	46a4      	mov	ip, r4
 80014fa:	46b0      	mov	r8, r6
 80014fc:	0b3f      	lsrs	r7, r7, #12
 80014fe:	0d52      	lsrs	r2, r2, #21
 8001500:	0fc9      	lsrs	r1, r1, #31
 8001502:	0d5b      	lsrs	r3, r3, #21
 8001504:	0fc0      	lsrs	r0, r0, #31
 8001506:	42aa      	cmp	r2, r5
 8001508:	d021      	beq.n	800154e <__gedf2+0x72>
 800150a:	42ab      	cmp	r3, r5
 800150c:	d013      	beq.n	8001536 <__gedf2+0x5a>
 800150e:	2a00      	cmp	r2, #0
 8001510:	d122      	bne.n	8001558 <__gedf2+0x7c>
 8001512:	433c      	orrs	r4, r7
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <__gedf2+0x42>
 8001518:	464d      	mov	r5, r9
 800151a:	432e      	orrs	r6, r5
 800151c:	d022      	beq.n	8001564 <__gedf2+0x88>
 800151e:	2c00      	cmp	r4, #0
 8001520:	d010      	beq.n	8001544 <__gedf2+0x68>
 8001522:	4281      	cmp	r1, r0
 8001524:	d022      	beq.n	800156c <__gedf2+0x90>
 8001526:	2002      	movs	r0, #2
 8001528:	3901      	subs	r1, #1
 800152a:	4008      	ands	r0, r1
 800152c:	3801      	subs	r0, #1
 800152e:	bcc0      	pop	{r6, r7}
 8001530:	46b9      	mov	r9, r7
 8001532:	46b0      	mov	r8, r6
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001536:	464d      	mov	r5, r9
 8001538:	432e      	orrs	r6, r5
 800153a:	d129      	bne.n	8001590 <__gedf2+0xb4>
 800153c:	2a00      	cmp	r2, #0
 800153e:	d1f0      	bne.n	8001522 <__gedf2+0x46>
 8001540:	433c      	orrs	r4, r7
 8001542:	d1ee      	bne.n	8001522 <__gedf2+0x46>
 8001544:	2800      	cmp	r0, #0
 8001546:	d1f2      	bne.n	800152e <__gedf2+0x52>
 8001548:	2001      	movs	r0, #1
 800154a:	4240      	negs	r0, r0
 800154c:	e7ef      	b.n	800152e <__gedf2+0x52>
 800154e:	003d      	movs	r5, r7
 8001550:	4325      	orrs	r5, r4
 8001552:	d11d      	bne.n	8001590 <__gedf2+0xb4>
 8001554:	4293      	cmp	r3, r2
 8001556:	d0ee      	beq.n	8001536 <__gedf2+0x5a>
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e2      	bne.n	8001522 <__gedf2+0x46>
 800155c:	464c      	mov	r4, r9
 800155e:	4326      	orrs	r6, r4
 8001560:	d1df      	bne.n	8001522 <__gedf2+0x46>
 8001562:	e7e0      	b.n	8001526 <__gedf2+0x4a>
 8001564:	2000      	movs	r0, #0
 8001566:	2c00      	cmp	r4, #0
 8001568:	d0e1      	beq.n	800152e <__gedf2+0x52>
 800156a:	e7dc      	b.n	8001526 <__gedf2+0x4a>
 800156c:	429a      	cmp	r2, r3
 800156e:	dc0a      	bgt.n	8001586 <__gedf2+0xaa>
 8001570:	dbe8      	blt.n	8001544 <__gedf2+0x68>
 8001572:	454f      	cmp	r7, r9
 8001574:	d8d7      	bhi.n	8001526 <__gedf2+0x4a>
 8001576:	d00e      	beq.n	8001596 <__gedf2+0xba>
 8001578:	2000      	movs	r0, #0
 800157a:	454f      	cmp	r7, r9
 800157c:	d2d7      	bcs.n	800152e <__gedf2+0x52>
 800157e:	2900      	cmp	r1, #0
 8001580:	d0e2      	beq.n	8001548 <__gedf2+0x6c>
 8001582:	0008      	movs	r0, r1
 8001584:	e7d3      	b.n	800152e <__gedf2+0x52>
 8001586:	4243      	negs	r3, r0
 8001588:	4158      	adcs	r0, r3
 800158a:	0040      	lsls	r0, r0, #1
 800158c:	3801      	subs	r0, #1
 800158e:	e7ce      	b.n	800152e <__gedf2+0x52>
 8001590:	2002      	movs	r0, #2
 8001592:	4240      	negs	r0, r0
 8001594:	e7cb      	b.n	800152e <__gedf2+0x52>
 8001596:	45c4      	cmp	ip, r8
 8001598:	d8c5      	bhi.n	8001526 <__gedf2+0x4a>
 800159a:	2000      	movs	r0, #0
 800159c:	45c4      	cmp	ip, r8
 800159e:	d2c6      	bcs.n	800152e <__gedf2+0x52>
 80015a0:	e7ed      	b.n	800157e <__gedf2+0xa2>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	000007ff 	.word	0x000007ff

080015a8 <__ledf2>:
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	4647      	mov	r7, r8
 80015ac:	46ce      	mov	lr, r9
 80015ae:	0004      	movs	r4, r0
 80015b0:	0018      	movs	r0, r3
 80015b2:	0016      	movs	r6, r2
 80015b4:	031b      	lsls	r3, r3, #12
 80015b6:	0b1b      	lsrs	r3, r3, #12
 80015b8:	4d2c      	ldr	r5, [pc, #176]	; (800166c <__ledf2+0xc4>)
 80015ba:	004a      	lsls	r2, r1, #1
 80015bc:	4699      	mov	r9, r3
 80015be:	b580      	push	{r7, lr}
 80015c0:	0043      	lsls	r3, r0, #1
 80015c2:	030f      	lsls	r7, r1, #12
 80015c4:	46a4      	mov	ip, r4
 80015c6:	46b0      	mov	r8, r6
 80015c8:	0b3f      	lsrs	r7, r7, #12
 80015ca:	0d52      	lsrs	r2, r2, #21
 80015cc:	0fc9      	lsrs	r1, r1, #31
 80015ce:	0d5b      	lsrs	r3, r3, #21
 80015d0:	0fc0      	lsrs	r0, r0, #31
 80015d2:	42aa      	cmp	r2, r5
 80015d4:	d00d      	beq.n	80015f2 <__ledf2+0x4a>
 80015d6:	42ab      	cmp	r3, r5
 80015d8:	d010      	beq.n	80015fc <__ledf2+0x54>
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d127      	bne.n	800162e <__ledf2+0x86>
 80015de:	433c      	orrs	r4, r7
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d111      	bne.n	8001608 <__ledf2+0x60>
 80015e4:	464d      	mov	r5, r9
 80015e6:	432e      	orrs	r6, r5
 80015e8:	d10e      	bne.n	8001608 <__ledf2+0x60>
 80015ea:	2000      	movs	r0, #0
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d015      	beq.n	800161c <__ledf2+0x74>
 80015f0:	e00e      	b.n	8001610 <__ledf2+0x68>
 80015f2:	003d      	movs	r5, r7
 80015f4:	4325      	orrs	r5, r4
 80015f6:	d110      	bne.n	800161a <__ledf2+0x72>
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d118      	bne.n	800162e <__ledf2+0x86>
 80015fc:	464d      	mov	r5, r9
 80015fe:	432e      	orrs	r6, r5
 8001600:	d10b      	bne.n	800161a <__ledf2+0x72>
 8001602:	2a00      	cmp	r2, #0
 8001604:	d102      	bne.n	800160c <__ledf2+0x64>
 8001606:	433c      	orrs	r4, r7
 8001608:	2c00      	cmp	r4, #0
 800160a:	d00b      	beq.n	8001624 <__ledf2+0x7c>
 800160c:	4281      	cmp	r1, r0
 800160e:	d014      	beq.n	800163a <__ledf2+0x92>
 8001610:	2002      	movs	r0, #2
 8001612:	3901      	subs	r1, #1
 8001614:	4008      	ands	r0, r1
 8001616:	3801      	subs	r0, #1
 8001618:	e000      	b.n	800161c <__ledf2+0x74>
 800161a:	2002      	movs	r0, #2
 800161c:	bcc0      	pop	{r6, r7}
 800161e:	46b9      	mov	r9, r7
 8001620:	46b0      	mov	r8, r6
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001624:	2800      	cmp	r0, #0
 8001626:	d1f9      	bne.n	800161c <__ledf2+0x74>
 8001628:	2001      	movs	r0, #1
 800162a:	4240      	negs	r0, r0
 800162c:	e7f6      	b.n	800161c <__ledf2+0x74>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ec      	bne.n	800160c <__ledf2+0x64>
 8001632:	464c      	mov	r4, r9
 8001634:	4326      	orrs	r6, r4
 8001636:	d1e9      	bne.n	800160c <__ledf2+0x64>
 8001638:	e7ea      	b.n	8001610 <__ledf2+0x68>
 800163a:	429a      	cmp	r2, r3
 800163c:	dd04      	ble.n	8001648 <__ledf2+0xa0>
 800163e:	4243      	negs	r3, r0
 8001640:	4158      	adcs	r0, r3
 8001642:	0040      	lsls	r0, r0, #1
 8001644:	3801      	subs	r0, #1
 8001646:	e7e9      	b.n	800161c <__ledf2+0x74>
 8001648:	429a      	cmp	r2, r3
 800164a:	dbeb      	blt.n	8001624 <__ledf2+0x7c>
 800164c:	454f      	cmp	r7, r9
 800164e:	d8df      	bhi.n	8001610 <__ledf2+0x68>
 8001650:	d006      	beq.n	8001660 <__ledf2+0xb8>
 8001652:	2000      	movs	r0, #0
 8001654:	454f      	cmp	r7, r9
 8001656:	d2e1      	bcs.n	800161c <__ledf2+0x74>
 8001658:	2900      	cmp	r1, #0
 800165a:	d0e5      	beq.n	8001628 <__ledf2+0x80>
 800165c:	0008      	movs	r0, r1
 800165e:	e7dd      	b.n	800161c <__ledf2+0x74>
 8001660:	45c4      	cmp	ip, r8
 8001662:	d8d5      	bhi.n	8001610 <__ledf2+0x68>
 8001664:	2000      	movs	r0, #0
 8001666:	45c4      	cmp	ip, r8
 8001668:	d2d8      	bcs.n	800161c <__ledf2+0x74>
 800166a:	e7f5      	b.n	8001658 <__ledf2+0xb0>
 800166c:	000007ff 	.word	0x000007ff

08001670 <__aeabi_dmul>:
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	4645      	mov	r5, r8
 8001674:	46de      	mov	lr, fp
 8001676:	4657      	mov	r7, sl
 8001678:	464e      	mov	r6, r9
 800167a:	b5e0      	push	{r5, r6, r7, lr}
 800167c:	001f      	movs	r7, r3
 800167e:	030b      	lsls	r3, r1, #12
 8001680:	0b1b      	lsrs	r3, r3, #12
 8001682:	469b      	mov	fp, r3
 8001684:	004d      	lsls	r5, r1, #1
 8001686:	0fcb      	lsrs	r3, r1, #31
 8001688:	0004      	movs	r4, r0
 800168a:	4691      	mov	r9, r2
 800168c:	4698      	mov	r8, r3
 800168e:	b087      	sub	sp, #28
 8001690:	0d6d      	lsrs	r5, r5, #21
 8001692:	d100      	bne.n	8001696 <__aeabi_dmul+0x26>
 8001694:	e1cd      	b.n	8001a32 <__aeabi_dmul+0x3c2>
 8001696:	4bce      	ldr	r3, [pc, #824]	; (80019d0 <__aeabi_dmul+0x360>)
 8001698:	429d      	cmp	r5, r3
 800169a:	d100      	bne.n	800169e <__aeabi_dmul+0x2e>
 800169c:	e1e9      	b.n	8001a72 <__aeabi_dmul+0x402>
 800169e:	465a      	mov	r2, fp
 80016a0:	0f43      	lsrs	r3, r0, #29
 80016a2:	00d2      	lsls	r2, r2, #3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	0412      	lsls	r2, r2, #16
 80016aa:	431a      	orrs	r2, r3
 80016ac:	00c3      	lsls	r3, r0, #3
 80016ae:	469a      	mov	sl, r3
 80016b0:	4bc8      	ldr	r3, [pc, #800]	; (80019d4 <__aeabi_dmul+0x364>)
 80016b2:	4693      	mov	fp, r2
 80016b4:	469c      	mov	ip, r3
 80016b6:	2300      	movs	r3, #0
 80016b8:	2600      	movs	r6, #0
 80016ba:	4465      	add	r5, ip
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	033c      	lsls	r4, r7, #12
 80016c0:	007b      	lsls	r3, r7, #1
 80016c2:	4648      	mov	r0, r9
 80016c4:	0b24      	lsrs	r4, r4, #12
 80016c6:	0d5b      	lsrs	r3, r3, #21
 80016c8:	0fff      	lsrs	r7, r7, #31
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dmul+0x60>
 80016ce:	e189      	b.n	80019e4 <__aeabi_dmul+0x374>
 80016d0:	4abf      	ldr	r2, [pc, #764]	; (80019d0 <__aeabi_dmul+0x360>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <__aeabi_dmul+0x9a>
 80016d6:	0f42      	lsrs	r2, r0, #29
 80016d8:	00e4      	lsls	r4, r4, #3
 80016da:	4322      	orrs	r2, r4
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	0424      	lsls	r4, r4, #16
 80016e0:	4314      	orrs	r4, r2
 80016e2:	4abc      	ldr	r2, [pc, #752]	; (80019d4 <__aeabi_dmul+0x364>)
 80016e4:	2100      	movs	r1, #0
 80016e6:	4694      	mov	ip, r2
 80016e8:	4642      	mov	r2, r8
 80016ea:	4463      	add	r3, ip
 80016ec:	195b      	adds	r3, r3, r5
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	9b01      	ldr	r3, [sp, #4]
 80016f2:	407a      	eors	r2, r7
 80016f4:	3301      	adds	r3, #1
 80016f6:	00c0      	lsls	r0, r0, #3
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2e0a      	cmp	r6, #10
 80016fe:	dd1c      	ble.n	800173a <__aeabi_dmul+0xca>
 8001700:	003a      	movs	r2, r7
 8001702:	2e0b      	cmp	r6, #11
 8001704:	d05e      	beq.n	80017c4 <__aeabi_dmul+0x154>
 8001706:	4647      	mov	r7, r8
 8001708:	e056      	b.n	80017b8 <__aeabi_dmul+0x148>
 800170a:	4649      	mov	r1, r9
 800170c:	4bb0      	ldr	r3, [pc, #704]	; (80019d0 <__aeabi_dmul+0x360>)
 800170e:	4321      	orrs	r1, r4
 8001710:	18eb      	adds	r3, r5, r3
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2900      	cmp	r1, #0
 8001716:	d12a      	bne.n	800176e <__aeabi_dmul+0xfe>
 8001718:	2080      	movs	r0, #128	; 0x80
 800171a:	2202      	movs	r2, #2
 800171c:	0100      	lsls	r0, r0, #4
 800171e:	002b      	movs	r3, r5
 8001720:	4684      	mov	ip, r0
 8001722:	4316      	orrs	r6, r2
 8001724:	4642      	mov	r2, r8
 8001726:	4463      	add	r3, ip
 8001728:	407a      	eors	r2, r7
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	2e0a      	cmp	r6, #10
 8001730:	dd00      	ble.n	8001734 <__aeabi_dmul+0xc4>
 8001732:	e231      	b.n	8001b98 <__aeabi_dmul+0x528>
 8001734:	2000      	movs	r0, #0
 8001736:	2400      	movs	r4, #0
 8001738:	2102      	movs	r1, #2
 800173a:	2e02      	cmp	r6, #2
 800173c:	dc26      	bgt.n	800178c <__aeabi_dmul+0x11c>
 800173e:	3e01      	subs	r6, #1
 8001740:	2e01      	cmp	r6, #1
 8001742:	d852      	bhi.n	80017ea <__aeabi_dmul+0x17a>
 8001744:	2902      	cmp	r1, #2
 8001746:	d04c      	beq.n	80017e2 <__aeabi_dmul+0x172>
 8001748:	2901      	cmp	r1, #1
 800174a:	d000      	beq.n	800174e <__aeabi_dmul+0xde>
 800174c:	e118      	b.n	8001980 <__aeabi_dmul+0x310>
 800174e:	2300      	movs	r3, #0
 8001750:	2400      	movs	r4, #0
 8001752:	2500      	movs	r5, #0
 8001754:	051b      	lsls	r3, r3, #20
 8001756:	4323      	orrs	r3, r4
 8001758:	07d2      	lsls	r2, r2, #31
 800175a:	4313      	orrs	r3, r2
 800175c:	0028      	movs	r0, r5
 800175e:	0019      	movs	r1, r3
 8001760:	b007      	add	sp, #28
 8001762:	bcf0      	pop	{r4, r5, r6, r7}
 8001764:	46bb      	mov	fp, r7
 8001766:	46b2      	mov	sl, r6
 8001768:	46a9      	mov	r9, r5
 800176a:	46a0      	mov	r8, r4
 800176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	2203      	movs	r2, #3
 8001772:	0109      	lsls	r1, r1, #4
 8001774:	002b      	movs	r3, r5
 8001776:	468c      	mov	ip, r1
 8001778:	4316      	orrs	r6, r2
 800177a:	4642      	mov	r2, r8
 800177c:	4463      	add	r3, ip
 800177e:	407a      	eors	r2, r7
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2e0a      	cmp	r6, #10
 8001786:	dd00      	ble.n	800178a <__aeabi_dmul+0x11a>
 8001788:	e228      	b.n	8001bdc <__aeabi_dmul+0x56c>
 800178a:	2103      	movs	r1, #3
 800178c:	2501      	movs	r5, #1
 800178e:	40b5      	lsls	r5, r6
 8001790:	46ac      	mov	ip, r5
 8001792:	26a6      	movs	r6, #166	; 0xa6
 8001794:	4663      	mov	r3, ip
 8001796:	00f6      	lsls	r6, r6, #3
 8001798:	4035      	ands	r5, r6
 800179a:	4233      	tst	r3, r6
 800179c:	d10b      	bne.n	80017b6 <__aeabi_dmul+0x146>
 800179e:	2690      	movs	r6, #144	; 0x90
 80017a0:	00b6      	lsls	r6, r6, #2
 80017a2:	4233      	tst	r3, r6
 80017a4:	d118      	bne.n	80017d8 <__aeabi_dmul+0x168>
 80017a6:	3eb9      	subs	r6, #185	; 0xb9
 80017a8:	3eff      	subs	r6, #255	; 0xff
 80017aa:	421e      	tst	r6, r3
 80017ac:	d01d      	beq.n	80017ea <__aeabi_dmul+0x17a>
 80017ae:	46a3      	mov	fp, r4
 80017b0:	4682      	mov	sl, r0
 80017b2:	9100      	str	r1, [sp, #0]
 80017b4:	e000      	b.n	80017b8 <__aeabi_dmul+0x148>
 80017b6:	0017      	movs	r7, r2
 80017b8:	9900      	ldr	r1, [sp, #0]
 80017ba:	003a      	movs	r2, r7
 80017bc:	2902      	cmp	r1, #2
 80017be:	d010      	beq.n	80017e2 <__aeabi_dmul+0x172>
 80017c0:	465c      	mov	r4, fp
 80017c2:	4650      	mov	r0, sl
 80017c4:	2903      	cmp	r1, #3
 80017c6:	d1bf      	bne.n	8001748 <__aeabi_dmul+0xd8>
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	031b      	lsls	r3, r3, #12
 80017cc:	431c      	orrs	r4, r3
 80017ce:	0324      	lsls	r4, r4, #12
 80017d0:	0005      	movs	r5, r0
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <__aeabi_dmul+0x360>)
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	e7bd      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017d8:	2480      	movs	r4, #128	; 0x80
 80017da:	2200      	movs	r2, #0
 80017dc:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <__aeabi_dmul+0x360>)
 80017de:	0324      	lsls	r4, r4, #12
 80017e0:	e7b8      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017e2:	2400      	movs	r4, #0
 80017e4:	2500      	movs	r5, #0
 80017e6:	4b7a      	ldr	r3, [pc, #488]	; (80019d0 <__aeabi_dmul+0x360>)
 80017e8:	e7b4      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017ea:	4653      	mov	r3, sl
 80017ec:	041e      	lsls	r6, r3, #16
 80017ee:	0c36      	lsrs	r6, r6, #16
 80017f0:	0c1f      	lsrs	r7, r3, #16
 80017f2:	0033      	movs	r3, r6
 80017f4:	0c01      	lsrs	r1, r0, #16
 80017f6:	0400      	lsls	r0, r0, #16
 80017f8:	0c00      	lsrs	r0, r0, #16
 80017fa:	4343      	muls	r3, r0
 80017fc:	4698      	mov	r8, r3
 80017fe:	0003      	movs	r3, r0
 8001800:	437b      	muls	r3, r7
 8001802:	4699      	mov	r9, r3
 8001804:	0033      	movs	r3, r6
 8001806:	434b      	muls	r3, r1
 8001808:	469c      	mov	ip, r3
 800180a:	4643      	mov	r3, r8
 800180c:	000d      	movs	r5, r1
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	469a      	mov	sl, r3
 8001812:	437d      	muls	r5, r7
 8001814:	44cc      	add	ip, r9
 8001816:	44d4      	add	ip, sl
 8001818:	9500      	str	r5, [sp, #0]
 800181a:	45e1      	cmp	r9, ip
 800181c:	d904      	bls.n	8001828 <__aeabi_dmul+0x1b8>
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	025b      	lsls	r3, r3, #9
 8001822:	4699      	mov	r9, r3
 8001824:	444d      	add	r5, r9
 8001826:	9500      	str	r5, [sp, #0]
 8001828:	4663      	mov	r3, ip
 800182a:	0c1b      	lsrs	r3, r3, #16
 800182c:	001d      	movs	r5, r3
 800182e:	4663      	mov	r3, ip
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	469c      	mov	ip, r3
 8001834:	4643      	mov	r3, r8
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	4698      	mov	r8, r3
 800183c:	4663      	mov	r3, ip
 800183e:	4443      	add	r3, r8
 8001840:	9303      	str	r3, [sp, #12]
 8001842:	0c23      	lsrs	r3, r4, #16
 8001844:	4698      	mov	r8, r3
 8001846:	0033      	movs	r3, r6
 8001848:	0424      	lsls	r4, r4, #16
 800184a:	0c24      	lsrs	r4, r4, #16
 800184c:	4363      	muls	r3, r4
 800184e:	469c      	mov	ip, r3
 8001850:	0023      	movs	r3, r4
 8001852:	437b      	muls	r3, r7
 8001854:	4699      	mov	r9, r3
 8001856:	4643      	mov	r3, r8
 8001858:	435e      	muls	r6, r3
 800185a:	435f      	muls	r7, r3
 800185c:	444e      	add	r6, r9
 800185e:	4663      	mov	r3, ip
 8001860:	46b2      	mov	sl, r6
 8001862:	0c1e      	lsrs	r6, r3, #16
 8001864:	4456      	add	r6, sl
 8001866:	45b1      	cmp	r9, r6
 8001868:	d903      	bls.n	8001872 <__aeabi_dmul+0x202>
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	025b      	lsls	r3, r3, #9
 800186e:	4699      	mov	r9, r3
 8001870:	444f      	add	r7, r9
 8001872:	0c33      	lsrs	r3, r6, #16
 8001874:	4699      	mov	r9, r3
 8001876:	003b      	movs	r3, r7
 8001878:	444b      	add	r3, r9
 800187a:	9305      	str	r3, [sp, #20]
 800187c:	4663      	mov	r3, ip
 800187e:	46ac      	mov	ip, r5
 8001880:	041f      	lsls	r7, r3, #16
 8001882:	0c3f      	lsrs	r7, r7, #16
 8001884:	0436      	lsls	r6, r6, #16
 8001886:	19f6      	adds	r6, r6, r7
 8001888:	44b4      	add	ip, r6
 800188a:	4663      	mov	r3, ip
 800188c:	9304      	str	r3, [sp, #16]
 800188e:	465b      	mov	r3, fp
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	469c      	mov	ip, r3
 8001894:	465b      	mov	r3, fp
 8001896:	041f      	lsls	r7, r3, #16
 8001898:	0c3f      	lsrs	r7, r7, #16
 800189a:	003b      	movs	r3, r7
 800189c:	4343      	muls	r3, r0
 800189e:	4699      	mov	r9, r3
 80018a0:	4663      	mov	r3, ip
 80018a2:	4343      	muls	r3, r0
 80018a4:	469a      	mov	sl, r3
 80018a6:	464b      	mov	r3, r9
 80018a8:	4660      	mov	r0, ip
 80018aa:	0c1b      	lsrs	r3, r3, #16
 80018ac:	469b      	mov	fp, r3
 80018ae:	4348      	muls	r0, r1
 80018b0:	4379      	muls	r1, r7
 80018b2:	4451      	add	r1, sl
 80018b4:	4459      	add	r1, fp
 80018b6:	458a      	cmp	sl, r1
 80018b8:	d903      	bls.n	80018c2 <__aeabi_dmul+0x252>
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	469a      	mov	sl, r3
 80018c0:	4450      	add	r0, sl
 80018c2:	0c0b      	lsrs	r3, r1, #16
 80018c4:	469a      	mov	sl, r3
 80018c6:	464b      	mov	r3, r9
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	4699      	mov	r9, r3
 80018ce:	003b      	movs	r3, r7
 80018d0:	4363      	muls	r3, r4
 80018d2:	0409      	lsls	r1, r1, #16
 80018d4:	4645      	mov	r5, r8
 80018d6:	4449      	add	r1, r9
 80018d8:	4699      	mov	r9, r3
 80018da:	4663      	mov	r3, ip
 80018dc:	435c      	muls	r4, r3
 80018de:	436b      	muls	r3, r5
 80018e0:	469c      	mov	ip, r3
 80018e2:	464b      	mov	r3, r9
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	4698      	mov	r8, r3
 80018e8:	436f      	muls	r7, r5
 80018ea:	193f      	adds	r7, r7, r4
 80018ec:	4447      	add	r7, r8
 80018ee:	4450      	add	r0, sl
 80018f0:	42bc      	cmp	r4, r7
 80018f2:	d903      	bls.n	80018fc <__aeabi_dmul+0x28c>
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	4698      	mov	r8, r3
 80018fa:	44c4      	add	ip, r8
 80018fc:	9b04      	ldr	r3, [sp, #16]
 80018fe:	9d00      	ldr	r5, [sp, #0]
 8001900:	4698      	mov	r8, r3
 8001902:	4445      	add	r5, r8
 8001904:	42b5      	cmp	r5, r6
 8001906:	41b6      	sbcs	r6, r6
 8001908:	4273      	negs	r3, r6
 800190a:	4698      	mov	r8, r3
 800190c:	464b      	mov	r3, r9
 800190e:	041e      	lsls	r6, r3, #16
 8001910:	9b05      	ldr	r3, [sp, #20]
 8001912:	043c      	lsls	r4, r7, #16
 8001914:	4699      	mov	r9, r3
 8001916:	0c36      	lsrs	r6, r6, #16
 8001918:	19a4      	adds	r4, r4, r6
 800191a:	444c      	add	r4, r9
 800191c:	46a1      	mov	r9, r4
 800191e:	4683      	mov	fp, r0
 8001920:	186e      	adds	r6, r5, r1
 8001922:	44c1      	add	r9, r8
 8001924:	428e      	cmp	r6, r1
 8001926:	4189      	sbcs	r1, r1
 8001928:	44cb      	add	fp, r9
 800192a:	465d      	mov	r5, fp
 800192c:	4249      	negs	r1, r1
 800192e:	186d      	adds	r5, r5, r1
 8001930:	429c      	cmp	r4, r3
 8001932:	41a4      	sbcs	r4, r4
 8001934:	45c1      	cmp	r9, r8
 8001936:	419b      	sbcs	r3, r3
 8001938:	4583      	cmp	fp, r0
 800193a:	4180      	sbcs	r0, r0
 800193c:	428d      	cmp	r5, r1
 800193e:	4189      	sbcs	r1, r1
 8001940:	425b      	negs	r3, r3
 8001942:	4264      	negs	r4, r4
 8001944:	431c      	orrs	r4, r3
 8001946:	4240      	negs	r0, r0
 8001948:	9b03      	ldr	r3, [sp, #12]
 800194a:	4249      	negs	r1, r1
 800194c:	4301      	orrs	r1, r0
 800194e:	0270      	lsls	r0, r6, #9
 8001950:	0c3f      	lsrs	r7, r7, #16
 8001952:	4318      	orrs	r0, r3
 8001954:	19e4      	adds	r4, r4, r7
 8001956:	1e47      	subs	r7, r0, #1
 8001958:	41b8      	sbcs	r0, r7
 800195a:	1864      	adds	r4, r4, r1
 800195c:	4464      	add	r4, ip
 800195e:	0df6      	lsrs	r6, r6, #23
 8001960:	0261      	lsls	r1, r4, #9
 8001962:	4330      	orrs	r0, r6
 8001964:	0dec      	lsrs	r4, r5, #23
 8001966:	026e      	lsls	r6, r5, #9
 8001968:	430c      	orrs	r4, r1
 800196a:	4330      	orrs	r0, r6
 800196c:	01c9      	lsls	r1, r1, #7
 800196e:	d400      	bmi.n	8001972 <__aeabi_dmul+0x302>
 8001970:	e0f1      	b.n	8001b56 <__aeabi_dmul+0x4e6>
 8001972:	2101      	movs	r1, #1
 8001974:	0843      	lsrs	r3, r0, #1
 8001976:	4001      	ands	r1, r0
 8001978:	430b      	orrs	r3, r1
 800197a:	07e0      	lsls	r0, r4, #31
 800197c:	4318      	orrs	r0, r3
 800197e:	0864      	lsrs	r4, r4, #1
 8001980:	4915      	ldr	r1, [pc, #84]	; (80019d8 <__aeabi_dmul+0x368>)
 8001982:	9b02      	ldr	r3, [sp, #8]
 8001984:	468c      	mov	ip, r1
 8001986:	4463      	add	r3, ip
 8001988:	2b00      	cmp	r3, #0
 800198a:	dc00      	bgt.n	800198e <__aeabi_dmul+0x31e>
 800198c:	e097      	b.n	8001abe <__aeabi_dmul+0x44e>
 800198e:	0741      	lsls	r1, r0, #29
 8001990:	d009      	beq.n	80019a6 <__aeabi_dmul+0x336>
 8001992:	210f      	movs	r1, #15
 8001994:	4001      	ands	r1, r0
 8001996:	2904      	cmp	r1, #4
 8001998:	d005      	beq.n	80019a6 <__aeabi_dmul+0x336>
 800199a:	1d01      	adds	r1, r0, #4
 800199c:	4281      	cmp	r1, r0
 800199e:	4180      	sbcs	r0, r0
 80019a0:	4240      	negs	r0, r0
 80019a2:	1824      	adds	r4, r4, r0
 80019a4:	0008      	movs	r0, r1
 80019a6:	01e1      	lsls	r1, r4, #7
 80019a8:	d506      	bpl.n	80019b8 <__aeabi_dmul+0x348>
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	00c9      	lsls	r1, r1, #3
 80019ae:	468c      	mov	ip, r1
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <__aeabi_dmul+0x36c>)
 80019b2:	401c      	ands	r4, r3
 80019b4:	9b02      	ldr	r3, [sp, #8]
 80019b6:	4463      	add	r3, ip
 80019b8:	4909      	ldr	r1, [pc, #36]	; (80019e0 <__aeabi_dmul+0x370>)
 80019ba:	428b      	cmp	r3, r1
 80019bc:	dd00      	ble.n	80019c0 <__aeabi_dmul+0x350>
 80019be:	e710      	b.n	80017e2 <__aeabi_dmul+0x172>
 80019c0:	0761      	lsls	r1, r4, #29
 80019c2:	08c5      	lsrs	r5, r0, #3
 80019c4:	0264      	lsls	r4, r4, #9
 80019c6:	055b      	lsls	r3, r3, #21
 80019c8:	430d      	orrs	r5, r1
 80019ca:	0b24      	lsrs	r4, r4, #12
 80019cc:	0d5b      	lsrs	r3, r3, #21
 80019ce:	e6c1      	b.n	8001754 <__aeabi_dmul+0xe4>
 80019d0:	000007ff 	.word	0x000007ff
 80019d4:	fffffc01 	.word	0xfffffc01
 80019d8:	000003ff 	.word	0x000003ff
 80019dc:	feffffff 	.word	0xfeffffff
 80019e0:	000007fe 	.word	0x000007fe
 80019e4:	464b      	mov	r3, r9
 80019e6:	4323      	orrs	r3, r4
 80019e8:	d059      	beq.n	8001a9e <__aeabi_dmul+0x42e>
 80019ea:	2c00      	cmp	r4, #0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dmul+0x380>
 80019ee:	e0a3      	b.n	8001b38 <__aeabi_dmul+0x4c8>
 80019f0:	0020      	movs	r0, r4
 80019f2:	f000 fdb1 	bl	8002558 <__clzsi2>
 80019f6:	0001      	movs	r1, r0
 80019f8:	0003      	movs	r3, r0
 80019fa:	390b      	subs	r1, #11
 80019fc:	221d      	movs	r2, #29
 80019fe:	1a52      	subs	r2, r2, r1
 8001a00:	4649      	mov	r1, r9
 8001a02:	0018      	movs	r0, r3
 8001a04:	40d1      	lsrs	r1, r2
 8001a06:	464a      	mov	r2, r9
 8001a08:	3808      	subs	r0, #8
 8001a0a:	4082      	lsls	r2, r0
 8001a0c:	4084      	lsls	r4, r0
 8001a0e:	0010      	movs	r0, r2
 8001a10:	430c      	orrs	r4, r1
 8001a12:	4a74      	ldr	r2, [pc, #464]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a14:	1aeb      	subs	r3, r5, r3
 8001a16:	4694      	mov	ip, r2
 8001a18:	4642      	mov	r2, r8
 8001a1a:	4463      	add	r3, ip
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	9b01      	ldr	r3, [sp, #4]
 8001a20:	407a      	eors	r2, r7
 8001a22:	3301      	adds	r3, #1
 8001a24:	2100      	movs	r1, #0
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	2e0a      	cmp	r6, #10
 8001a2c:	dd00      	ble.n	8001a30 <__aeabi_dmul+0x3c0>
 8001a2e:	e667      	b.n	8001700 <__aeabi_dmul+0x90>
 8001a30:	e683      	b.n	800173a <__aeabi_dmul+0xca>
 8001a32:	465b      	mov	r3, fp
 8001a34:	4303      	orrs	r3, r0
 8001a36:	469a      	mov	sl, r3
 8001a38:	d02a      	beq.n	8001a90 <__aeabi_dmul+0x420>
 8001a3a:	465b      	mov	r3, fp
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d06d      	beq.n	8001b1c <__aeabi_dmul+0x4ac>
 8001a40:	4658      	mov	r0, fp
 8001a42:	f000 fd89 	bl	8002558 <__clzsi2>
 8001a46:	0001      	movs	r1, r0
 8001a48:	0003      	movs	r3, r0
 8001a4a:	390b      	subs	r1, #11
 8001a4c:	221d      	movs	r2, #29
 8001a4e:	1a52      	subs	r2, r2, r1
 8001a50:	0021      	movs	r1, r4
 8001a52:	0018      	movs	r0, r3
 8001a54:	465d      	mov	r5, fp
 8001a56:	40d1      	lsrs	r1, r2
 8001a58:	3808      	subs	r0, #8
 8001a5a:	4085      	lsls	r5, r0
 8001a5c:	000a      	movs	r2, r1
 8001a5e:	4084      	lsls	r4, r0
 8001a60:	432a      	orrs	r2, r5
 8001a62:	4693      	mov	fp, r2
 8001a64:	46a2      	mov	sl, r4
 8001a66:	4d5f      	ldr	r5, [pc, #380]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a68:	2600      	movs	r6, #0
 8001a6a:	1aed      	subs	r5, r5, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	e625      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a72:	465b      	mov	r3, fp
 8001a74:	4303      	orrs	r3, r0
 8001a76:	469a      	mov	sl, r3
 8001a78:	d105      	bne.n	8001a86 <__aeabi_dmul+0x416>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	3302      	adds	r3, #2
 8001a80:	2608      	movs	r6, #8
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	e61b      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a86:	2303      	movs	r3, #3
 8001a88:	4682      	mov	sl, r0
 8001a8a:	260c      	movs	r6, #12
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	e616      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a90:	2300      	movs	r3, #0
 8001a92:	469b      	mov	fp, r3
 8001a94:	3301      	adds	r3, #1
 8001a96:	2604      	movs	r6, #4
 8001a98:	2500      	movs	r5, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	e60f      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a9e:	4642      	mov	r2, r8
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	9501      	str	r5, [sp, #4]
 8001aa4:	431e      	orrs	r6, r3
 8001aa6:	9b01      	ldr	r3, [sp, #4]
 8001aa8:	407a      	eors	r2, r7
 8001aaa:	3301      	adds	r3, #1
 8001aac:	2400      	movs	r4, #0
 8001aae:	2000      	movs	r0, #0
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2e0a      	cmp	r6, #10
 8001ab8:	dd00      	ble.n	8001abc <__aeabi_dmul+0x44c>
 8001aba:	e621      	b.n	8001700 <__aeabi_dmul+0x90>
 8001abc:	e63d      	b.n	800173a <__aeabi_dmul+0xca>
 8001abe:	2101      	movs	r1, #1
 8001ac0:	1ac9      	subs	r1, r1, r3
 8001ac2:	2938      	cmp	r1, #56	; 0x38
 8001ac4:	dd00      	ble.n	8001ac8 <__aeabi_dmul+0x458>
 8001ac6:	e642      	b.n	800174e <__aeabi_dmul+0xde>
 8001ac8:	291f      	cmp	r1, #31
 8001aca:	dd47      	ble.n	8001b5c <__aeabi_dmul+0x4ec>
 8001acc:	261f      	movs	r6, #31
 8001ace:	0025      	movs	r5, r4
 8001ad0:	4276      	negs	r6, r6
 8001ad2:	1af3      	subs	r3, r6, r3
 8001ad4:	40dd      	lsrs	r5, r3
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	2920      	cmp	r1, #32
 8001ada:	d005      	beq.n	8001ae8 <__aeabi_dmul+0x478>
 8001adc:	4942      	ldr	r1, [pc, #264]	; (8001be8 <__aeabi_dmul+0x578>)
 8001ade:	9d02      	ldr	r5, [sp, #8]
 8001ae0:	468c      	mov	ip, r1
 8001ae2:	4465      	add	r5, ip
 8001ae4:	40ac      	lsls	r4, r5
 8001ae6:	4320      	orrs	r0, r4
 8001ae8:	1e41      	subs	r1, r0, #1
 8001aea:	4188      	sbcs	r0, r1
 8001aec:	4318      	orrs	r0, r3
 8001aee:	2307      	movs	r3, #7
 8001af0:	001d      	movs	r5, r3
 8001af2:	2400      	movs	r4, #0
 8001af4:	4005      	ands	r5, r0
 8001af6:	4203      	tst	r3, r0
 8001af8:	d04a      	beq.n	8001b90 <__aeabi_dmul+0x520>
 8001afa:	230f      	movs	r3, #15
 8001afc:	2400      	movs	r4, #0
 8001afe:	4003      	ands	r3, r0
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d042      	beq.n	8001b8a <__aeabi_dmul+0x51a>
 8001b04:	1d03      	adds	r3, r0, #4
 8001b06:	4283      	cmp	r3, r0
 8001b08:	4180      	sbcs	r0, r0
 8001b0a:	4240      	negs	r0, r0
 8001b0c:	1824      	adds	r4, r4, r0
 8001b0e:	0018      	movs	r0, r3
 8001b10:	0223      	lsls	r3, r4, #8
 8001b12:	d53a      	bpl.n	8001b8a <__aeabi_dmul+0x51a>
 8001b14:	2301      	movs	r3, #1
 8001b16:	2400      	movs	r4, #0
 8001b18:	2500      	movs	r5, #0
 8001b1a:	e61b      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b1c:	f000 fd1c 	bl	8002558 <__clzsi2>
 8001b20:	0001      	movs	r1, r0
 8001b22:	0003      	movs	r3, r0
 8001b24:	3115      	adds	r1, #21
 8001b26:	3320      	adds	r3, #32
 8001b28:	291c      	cmp	r1, #28
 8001b2a:	dd8f      	ble.n	8001a4c <__aeabi_dmul+0x3dc>
 8001b2c:	3808      	subs	r0, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4084      	lsls	r4, r0
 8001b32:	4692      	mov	sl, r2
 8001b34:	46a3      	mov	fp, r4
 8001b36:	e796      	b.n	8001a66 <__aeabi_dmul+0x3f6>
 8001b38:	f000 fd0e 	bl	8002558 <__clzsi2>
 8001b3c:	0001      	movs	r1, r0
 8001b3e:	0003      	movs	r3, r0
 8001b40:	3115      	adds	r1, #21
 8001b42:	3320      	adds	r3, #32
 8001b44:	291c      	cmp	r1, #28
 8001b46:	dc00      	bgt.n	8001b4a <__aeabi_dmul+0x4da>
 8001b48:	e758      	b.n	80019fc <__aeabi_dmul+0x38c>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	464c      	mov	r4, r9
 8001b4e:	3a08      	subs	r2, #8
 8001b50:	2000      	movs	r0, #0
 8001b52:	4094      	lsls	r4, r2
 8001b54:	e75d      	b.n	8001a12 <__aeabi_dmul+0x3a2>
 8001b56:	9b01      	ldr	r3, [sp, #4]
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	e711      	b.n	8001980 <__aeabi_dmul+0x310>
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <__aeabi_dmul+0x57c>)
 8001b5e:	0026      	movs	r6, r4
 8001b60:	469c      	mov	ip, r3
 8001b62:	0003      	movs	r3, r0
 8001b64:	9d02      	ldr	r5, [sp, #8]
 8001b66:	40cb      	lsrs	r3, r1
 8001b68:	4465      	add	r5, ip
 8001b6a:	40ae      	lsls	r6, r5
 8001b6c:	431e      	orrs	r6, r3
 8001b6e:	0003      	movs	r3, r0
 8001b70:	40ab      	lsls	r3, r5
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	4183      	sbcs	r3, r0
 8001b76:	0030      	movs	r0, r6
 8001b78:	4318      	orrs	r0, r3
 8001b7a:	40cc      	lsrs	r4, r1
 8001b7c:	0743      	lsls	r3, r0, #29
 8001b7e:	d0c7      	beq.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b80:	230f      	movs	r3, #15
 8001b82:	4003      	ands	r3, r0
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d1bd      	bne.n	8001b04 <__aeabi_dmul+0x494>
 8001b88:	e7c2      	b.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b8a:	0765      	lsls	r5, r4, #29
 8001b8c:	0264      	lsls	r4, r4, #9
 8001b8e:	0b24      	lsrs	r4, r4, #12
 8001b90:	08c0      	lsrs	r0, r0, #3
 8001b92:	2300      	movs	r3, #0
 8001b94:	4305      	orrs	r5, r0
 8001b96:	e5dd      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b98:	2500      	movs	r5, #0
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	2e0f      	cmp	r6, #15
 8001b9e:	d10c      	bne.n	8001bba <__aeabi_dmul+0x54a>
 8001ba0:	2480      	movs	r4, #128	; 0x80
 8001ba2:	465b      	mov	r3, fp
 8001ba4:	0324      	lsls	r4, r4, #12
 8001ba6:	4223      	tst	r3, r4
 8001ba8:	d00e      	beq.n	8001bc8 <__aeabi_dmul+0x558>
 8001baa:	4221      	tst	r1, r4
 8001bac:	d10c      	bne.n	8001bc8 <__aeabi_dmul+0x558>
 8001bae:	430c      	orrs	r4, r1
 8001bb0:	0324      	lsls	r4, r4, #12
 8001bb2:	003a      	movs	r2, r7
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bb6:	0b24      	lsrs	r4, r4, #12
 8001bb8:	e5cc      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bba:	2e0b      	cmp	r6, #11
 8001bbc:	d000      	beq.n	8001bc0 <__aeabi_dmul+0x550>
 8001bbe:	e5a2      	b.n	8001706 <__aeabi_dmul+0x96>
 8001bc0:	468b      	mov	fp, r1
 8001bc2:	46aa      	mov	sl, r5
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	e5f7      	b.n	80017b8 <__aeabi_dmul+0x148>
 8001bc8:	2480      	movs	r4, #128	; 0x80
 8001bca:	465b      	mov	r3, fp
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	431c      	orrs	r4, r3
 8001bd0:	0324      	lsls	r4, r4, #12
 8001bd2:	4642      	mov	r2, r8
 8001bd4:	4655      	mov	r5, sl
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bd8:	0b24      	lsrs	r4, r4, #12
 8001bda:	e5bb      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bdc:	464d      	mov	r5, r9
 8001bde:	0021      	movs	r1, r4
 8001be0:	2303      	movs	r3, #3
 8001be2:	e7db      	b.n	8001b9c <__aeabi_dmul+0x52c>
 8001be4:	fffffc0d 	.word	0xfffffc0d
 8001be8:	0000043e 	.word	0x0000043e
 8001bec:	0000041e 	.word	0x0000041e
 8001bf0:	000007ff 	.word	0x000007ff

08001bf4 <__aeabi_dsub>:
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	4657      	mov	r7, sl
 8001bf8:	464e      	mov	r6, r9
 8001bfa:	4645      	mov	r5, r8
 8001bfc:	46de      	mov	lr, fp
 8001bfe:	b5e0      	push	{r5, r6, r7, lr}
 8001c00:	000d      	movs	r5, r1
 8001c02:	0004      	movs	r4, r0
 8001c04:	0019      	movs	r1, r3
 8001c06:	0010      	movs	r0, r2
 8001c08:	032b      	lsls	r3, r5, #12
 8001c0a:	0a5b      	lsrs	r3, r3, #9
 8001c0c:	0f62      	lsrs	r2, r4, #29
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	00e3      	lsls	r3, r4, #3
 8001c12:	030c      	lsls	r4, r1, #12
 8001c14:	0a64      	lsrs	r4, r4, #9
 8001c16:	0f47      	lsrs	r7, r0, #29
 8001c18:	4327      	orrs	r7, r4
 8001c1a:	4cd0      	ldr	r4, [pc, #832]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c1c:	006e      	lsls	r6, r5, #1
 8001c1e:	4691      	mov	r9, r2
 8001c20:	b083      	sub	sp, #12
 8001c22:	004a      	lsls	r2, r1, #1
 8001c24:	00c0      	lsls	r0, r0, #3
 8001c26:	4698      	mov	r8, r3
 8001c28:	46a2      	mov	sl, r4
 8001c2a:	0d76      	lsrs	r6, r6, #21
 8001c2c:	0fed      	lsrs	r5, r5, #31
 8001c2e:	0d52      	lsrs	r2, r2, #21
 8001c30:	0fc9      	lsrs	r1, r1, #31
 8001c32:	9001      	str	r0, [sp, #4]
 8001c34:	42a2      	cmp	r2, r4
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x46>
 8001c38:	e0b9      	b.n	8001dae <__aeabi_dsub+0x1ba>
 8001c3a:	2401      	movs	r4, #1
 8001c3c:	4061      	eors	r1, r4
 8001c3e:	468b      	mov	fp, r1
 8001c40:	428d      	cmp	r5, r1
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dsub+0x52>
 8001c44:	e08d      	b.n	8001d62 <__aeabi_dsub+0x16e>
 8001c46:	1ab4      	subs	r4, r6, r2
 8001c48:	46a4      	mov	ip, r4
 8001c4a:	2c00      	cmp	r4, #0
 8001c4c:	dc00      	bgt.n	8001c50 <__aeabi_dsub+0x5c>
 8001c4e:	e0b7      	b.n	8001dc0 <__aeabi_dsub+0x1cc>
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x62>
 8001c54:	e0cb      	b.n	8001dee <__aeabi_dsub+0x1fa>
 8001c56:	4ac1      	ldr	r2, [pc, #772]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c58:	4296      	cmp	r6, r2
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x6a>
 8001c5c:	e186      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	0412      	lsls	r2, r2, #16
 8001c62:	4317      	orrs	r7, r2
 8001c64:	4662      	mov	r2, ip
 8001c66:	2a38      	cmp	r2, #56	; 0x38
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x78>
 8001c6a:	e1a4      	b.n	8001fb6 <__aeabi_dsub+0x3c2>
 8001c6c:	2a1f      	cmp	r2, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x7e>
 8001c70:	e21d      	b.n	80020ae <__aeabi_dsub+0x4ba>
 8001c72:	4661      	mov	r1, ip
 8001c74:	2220      	movs	r2, #32
 8001c76:	003c      	movs	r4, r7
 8001c78:	1a52      	subs	r2, r2, r1
 8001c7a:	0001      	movs	r1, r0
 8001c7c:	4090      	lsls	r0, r2
 8001c7e:	4094      	lsls	r4, r2
 8001c80:	1e42      	subs	r2, r0, #1
 8001c82:	4190      	sbcs	r0, r2
 8001c84:	4662      	mov	r2, ip
 8001c86:	46a0      	mov	r8, r4
 8001c88:	4664      	mov	r4, ip
 8001c8a:	40d7      	lsrs	r7, r2
 8001c8c:	464a      	mov	r2, r9
 8001c8e:	40e1      	lsrs	r1, r4
 8001c90:	4644      	mov	r4, r8
 8001c92:	1bd2      	subs	r2, r2, r7
 8001c94:	4691      	mov	r9, r2
 8001c96:	430c      	orrs	r4, r1
 8001c98:	4304      	orrs	r4, r0
 8001c9a:	1b1c      	subs	r4, r3, r4
 8001c9c:	42a3      	cmp	r3, r4
 8001c9e:	4192      	sbcs	r2, r2
 8001ca0:	464b      	mov	r3, r9
 8001ca2:	4252      	negs	r2, r2
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	469a      	mov	sl, r3
 8001ca8:	4653      	mov	r3, sl
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	d400      	bmi.n	8001cb0 <__aeabi_dsub+0xbc>
 8001cae:	e12b      	b.n	8001f08 <__aeabi_dsub+0x314>
 8001cb0:	4653      	mov	r3, sl
 8001cb2:	025a      	lsls	r2, r3, #9
 8001cb4:	0a53      	lsrs	r3, r2, #9
 8001cb6:	469a      	mov	sl, r3
 8001cb8:	4653      	mov	r3, sl
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0xcc>
 8001cbe:	e166      	b.n	8001f8e <__aeabi_dsub+0x39a>
 8001cc0:	4650      	mov	r0, sl
 8001cc2:	f000 fc49 	bl	8002558 <__clzsi2>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	3b08      	subs	r3, #8
 8001cca:	2220      	movs	r2, #32
 8001ccc:	0020      	movs	r0, r4
 8001cce:	1ad2      	subs	r2, r2, r3
 8001cd0:	4651      	mov	r1, sl
 8001cd2:	40d0      	lsrs	r0, r2
 8001cd4:	4099      	lsls	r1, r3
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	409c      	lsls	r4, r3
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	429e      	cmp	r6, r3
 8001cde:	dd00      	ble.n	8001ce2 <__aeabi_dsub+0xee>
 8001ce0:	e164      	b.n	8001fac <__aeabi_dsub+0x3b8>
 8001ce2:	1b9b      	subs	r3, r3, r6
 8001ce4:	1c59      	adds	r1, r3, #1
 8001ce6:	291f      	cmp	r1, #31
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0xf8>
 8001cea:	e0fe      	b.n	8001eea <__aeabi_dsub+0x2f6>
 8001cec:	2320      	movs	r3, #32
 8001cee:	0010      	movs	r0, r2
 8001cf0:	0026      	movs	r6, r4
 8001cf2:	1a5b      	subs	r3, r3, r1
 8001cf4:	409c      	lsls	r4, r3
 8001cf6:	4098      	lsls	r0, r3
 8001cf8:	40ce      	lsrs	r6, r1
 8001cfa:	40ca      	lsrs	r2, r1
 8001cfc:	1e63      	subs	r3, r4, #1
 8001cfe:	419c      	sbcs	r4, r3
 8001d00:	4330      	orrs	r0, r6
 8001d02:	4692      	mov	sl, r2
 8001d04:	2600      	movs	r6, #0
 8001d06:	4304      	orrs	r4, r0
 8001d08:	0763      	lsls	r3, r4, #29
 8001d0a:	d009      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	4023      	ands	r3, r4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d005      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d14:	1d23      	adds	r3, r4, #4
 8001d16:	42a3      	cmp	r3, r4
 8001d18:	41a4      	sbcs	r4, r4
 8001d1a:	4264      	negs	r4, r4
 8001d1c:	44a2      	add	sl, r4
 8001d1e:	001c      	movs	r4, r3
 8001d20:	4653      	mov	r3, sl
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	d400      	bmi.n	8001d28 <__aeabi_dsub+0x134>
 8001d26:	e0f2      	b.n	8001f0e <__aeabi_dsub+0x31a>
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <__aeabi_dsub+0x368>)
 8001d2a:	3601      	adds	r6, #1
 8001d2c:	429e      	cmp	r6, r3
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x13e>
 8001d30:	e10f      	b.n	8001f52 <__aeabi_dsub+0x35e>
 8001d32:	4653      	mov	r3, sl
 8001d34:	498a      	ldr	r1, [pc, #552]	; (8001f60 <__aeabi_dsub+0x36c>)
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	400b      	ands	r3, r1
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	075b      	lsls	r3, r3, #29
 8001d3e:	4323      	orrs	r3, r4
 8001d40:	0572      	lsls	r2, r6, #21
 8001d42:	024c      	lsls	r4, r1, #9
 8001d44:	0b24      	lsrs	r4, r4, #12
 8001d46:	0d52      	lsrs	r2, r2, #21
 8001d48:	0512      	lsls	r2, r2, #20
 8001d4a:	4322      	orrs	r2, r4
 8001d4c:	07ed      	lsls	r5, r5, #31
 8001d4e:	432a      	orrs	r2, r5
 8001d50:	0018      	movs	r0, r3
 8001d52:	0011      	movs	r1, r2
 8001d54:	b003      	add	sp, #12
 8001d56:	bcf0      	pop	{r4, r5, r6, r7}
 8001d58:	46bb      	mov	fp, r7
 8001d5a:	46b2      	mov	sl, r6
 8001d5c:	46a9      	mov	r9, r5
 8001d5e:	46a0      	mov	r8, r4
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d62:	1ab4      	subs	r4, r6, r2
 8001d64:	46a4      	mov	ip, r4
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	dd59      	ble.n	8001e1e <__aeabi_dsub+0x22a>
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x17c>
 8001d6e:	e0b0      	b.n	8001ed2 <__aeabi_dsub+0x2de>
 8001d70:	4556      	cmp	r6, sl
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x182>
 8001d74:	e0fa      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0412      	lsls	r2, r2, #16
 8001d7a:	4317      	orrs	r7, r2
 8001d7c:	4662      	mov	r2, ip
 8001d7e:	2a38      	cmp	r2, #56	; 0x38
 8001d80:	dd00      	ble.n	8001d84 <__aeabi_dsub+0x190>
 8001d82:	e0d4      	b.n	8001f2e <__aeabi_dsub+0x33a>
 8001d84:	2a1f      	cmp	r2, #31
 8001d86:	dc00      	bgt.n	8001d8a <__aeabi_dsub+0x196>
 8001d88:	e1c0      	b.n	800210c <__aeabi_dsub+0x518>
 8001d8a:	0039      	movs	r1, r7
 8001d8c:	3a20      	subs	r2, #32
 8001d8e:	40d1      	lsrs	r1, r2
 8001d90:	4662      	mov	r2, ip
 8001d92:	2a20      	cmp	r2, #32
 8001d94:	d006      	beq.n	8001da4 <__aeabi_dsub+0x1b0>
 8001d96:	4664      	mov	r4, ip
 8001d98:	2240      	movs	r2, #64	; 0x40
 8001d9a:	1b12      	subs	r2, r2, r4
 8001d9c:	003c      	movs	r4, r7
 8001d9e:	4094      	lsls	r4, r2
 8001da0:	4304      	orrs	r4, r0
 8001da2:	9401      	str	r4, [sp, #4]
 8001da4:	9c01      	ldr	r4, [sp, #4]
 8001da6:	1e62      	subs	r2, r4, #1
 8001da8:	4194      	sbcs	r4, r2
 8001daa:	430c      	orrs	r4, r1
 8001dac:	e0c3      	b.n	8001f36 <__aeabi_dsub+0x342>
 8001dae:	003c      	movs	r4, r7
 8001db0:	4304      	orrs	r4, r0
 8001db2:	d02b      	beq.n	8001e0c <__aeabi_dsub+0x218>
 8001db4:	468b      	mov	fp, r1
 8001db6:	428d      	cmp	r5, r1
 8001db8:	d02e      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001dba:	4c6a      	ldr	r4, [pc, #424]	; (8001f64 <__aeabi_dsub+0x370>)
 8001dbc:	46a4      	mov	ip, r4
 8001dbe:	44b4      	add	ip, r6
 8001dc0:	4664      	mov	r4, ip
 8001dc2:	2c00      	cmp	r4, #0
 8001dc4:	d05f      	beq.n	8001e86 <__aeabi_dsub+0x292>
 8001dc6:	1b94      	subs	r4, r2, r6
 8001dc8:	46a4      	mov	ip, r4
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_dsub+0x1dc>
 8001dce:	e120      	b.n	8002012 <__aeabi_dsub+0x41e>
 8001dd0:	464c      	mov	r4, r9
 8001dd2:	431c      	orrs	r4, r3
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x1e4>
 8001dd6:	e1c7      	b.n	8002168 <__aeabi_dsub+0x574>
 8001dd8:	4661      	mov	r1, ip
 8001dda:	1e4c      	subs	r4, r1, #1
 8001ddc:	2901      	cmp	r1, #1
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x1ee>
 8001de0:	e223      	b.n	800222a <__aeabi_dsub+0x636>
 8001de2:	4d5e      	ldr	r5, [pc, #376]	; (8001f5c <__aeabi_dsub+0x368>)
 8001de4:	45ac      	cmp	ip, r5
 8001de6:	d100      	bne.n	8001dea <__aeabi_dsub+0x1f6>
 8001de8:	e1d8      	b.n	800219c <__aeabi_dsub+0x5a8>
 8001dea:	46a4      	mov	ip, r4
 8001dec:	e11a      	b.n	8002024 <__aeabi_dsub+0x430>
 8001dee:	003a      	movs	r2, r7
 8001df0:	4302      	orrs	r2, r0
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x202>
 8001df4:	e0e4      	b.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001df6:	0022      	movs	r2, r4
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	2c01      	cmp	r4, #1
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x20c>
 8001dfe:	e1c3      	b.n	8002188 <__aeabi_dsub+0x594>
 8001e00:	4956      	ldr	r1, [pc, #344]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e02:	428c      	cmp	r4, r1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x214>
 8001e06:	e0b1      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001e08:	4694      	mov	ip, r2
 8001e0a:	e72b      	b.n	8001c64 <__aeabi_dsub+0x70>
 8001e0c:	2401      	movs	r4, #1
 8001e0e:	4061      	eors	r1, r4
 8001e10:	468b      	mov	fp, r1
 8001e12:	428d      	cmp	r5, r1
 8001e14:	d000      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001e16:	e716      	b.n	8001c46 <__aeabi_dsub+0x52>
 8001e18:	4952      	ldr	r1, [pc, #328]	; (8001f64 <__aeabi_dsub+0x370>)
 8001e1a:	468c      	mov	ip, r1
 8001e1c:	44b4      	add	ip, r6
 8001e1e:	4664      	mov	r4, ip
 8001e20:	2c00      	cmp	r4, #0
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x232>
 8001e24:	e0d3      	b.n	8001fce <__aeabi_dsub+0x3da>
 8001e26:	1b91      	subs	r1, r2, r6
 8001e28:	468c      	mov	ip, r1
 8001e2a:	2e00      	cmp	r6, #0
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x23c>
 8001e2e:	e15e      	b.n	80020ee <__aeabi_dsub+0x4fa>
 8001e30:	494a      	ldr	r1, [pc, #296]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e32:	428a      	cmp	r2, r1
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x244>
 8001e36:	e1be      	b.n	80021b6 <__aeabi_dsub+0x5c2>
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	464c      	mov	r4, r9
 8001e3c:	0409      	lsls	r1, r1, #16
 8001e3e:	430c      	orrs	r4, r1
 8001e40:	46a1      	mov	r9, r4
 8001e42:	4661      	mov	r1, ip
 8001e44:	2938      	cmp	r1, #56	; 0x38
 8001e46:	dd00      	ble.n	8001e4a <__aeabi_dsub+0x256>
 8001e48:	e1ba      	b.n	80021c0 <__aeabi_dsub+0x5cc>
 8001e4a:	291f      	cmp	r1, #31
 8001e4c:	dd00      	ble.n	8001e50 <__aeabi_dsub+0x25c>
 8001e4e:	e227      	b.n	80022a0 <__aeabi_dsub+0x6ac>
 8001e50:	2420      	movs	r4, #32
 8001e52:	1a64      	subs	r4, r4, r1
 8001e54:	4649      	mov	r1, r9
 8001e56:	40a1      	lsls	r1, r4
 8001e58:	001e      	movs	r6, r3
 8001e5a:	4688      	mov	r8, r1
 8001e5c:	4661      	mov	r1, ip
 8001e5e:	40a3      	lsls	r3, r4
 8001e60:	40ce      	lsrs	r6, r1
 8001e62:	4641      	mov	r1, r8
 8001e64:	1e5c      	subs	r4, r3, #1
 8001e66:	41a3      	sbcs	r3, r4
 8001e68:	4331      	orrs	r1, r6
 8001e6a:	4319      	orrs	r1, r3
 8001e6c:	000c      	movs	r4, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	4649      	mov	r1, r9
 8001e72:	40d9      	lsrs	r1, r3
 8001e74:	187f      	adds	r7, r7, r1
 8001e76:	1824      	adds	r4, r4, r0
 8001e78:	4284      	cmp	r4, r0
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	469a      	mov	sl, r3
 8001e80:	0016      	movs	r6, r2
 8001e82:	44ba      	add	sl, r7
 8001e84:	e05d      	b.n	8001f42 <__aeabi_dsub+0x34e>
 8001e86:	4c38      	ldr	r4, [pc, #224]	; (8001f68 <__aeabi_dsub+0x374>)
 8001e88:	1c72      	adds	r2, r6, #1
 8001e8a:	4222      	tst	r2, r4
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x29c>
 8001e8e:	e0df      	b.n	8002050 <__aeabi_dsub+0x45c>
 8001e90:	464a      	mov	r2, r9
 8001e92:	431a      	orrs	r2, r3
 8001e94:	2e00      	cmp	r6, #0
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dsub+0x2a6>
 8001e98:	e15c      	b.n	8002154 <__aeabi_dsub+0x560>
 8001e9a:	2a00      	cmp	r2, #0
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x2ac>
 8001e9e:	e1cf      	b.n	8002240 <__aeabi_dsub+0x64c>
 8001ea0:	003a      	movs	r2, r7
 8001ea2:	4302      	orrs	r2, r0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x2b4>
 8001ea6:	e17f      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ea8:	1a1c      	subs	r4, r3, r0
 8001eaa:	464a      	mov	r2, r9
 8001eac:	42a3      	cmp	r3, r4
 8001eae:	4189      	sbcs	r1, r1
 8001eb0:	1bd2      	subs	r2, r2, r7
 8001eb2:	4249      	negs	r1, r1
 8001eb4:	1a52      	subs	r2, r2, r1
 8001eb6:	4692      	mov	sl, r2
 8001eb8:	0212      	lsls	r2, r2, #8
 8001eba:	d400      	bmi.n	8001ebe <__aeabi_dsub+0x2ca>
 8001ebc:	e20a      	b.n	80022d4 <__aeabi_dsub+0x6e0>
 8001ebe:	1ac4      	subs	r4, r0, r3
 8001ec0:	42a0      	cmp	r0, r4
 8001ec2:	4180      	sbcs	r0, r0
 8001ec4:	464b      	mov	r3, r9
 8001ec6:	4240      	negs	r0, r0
 8001ec8:	1aff      	subs	r7, r7, r3
 8001eca:	1a3b      	subs	r3, r7, r0
 8001ecc:	469a      	mov	sl, r3
 8001ece:	465d      	mov	r5, fp
 8001ed0:	e71a      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001ed2:	003a      	movs	r2, r7
 8001ed4:	4302      	orrs	r2, r0
 8001ed6:	d073      	beq.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001ed8:	0022      	movs	r2, r4
 8001eda:	3a01      	subs	r2, #1
 8001edc:	2c01      	cmp	r4, #1
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_dsub+0x2ee>
 8001ee0:	e0cb      	b.n	800207a <__aeabi_dsub+0x486>
 8001ee2:	4554      	cmp	r4, sl
 8001ee4:	d042      	beq.n	8001f6c <__aeabi_dsub+0x378>
 8001ee6:	4694      	mov	ip, r2
 8001ee8:	e748      	b.n	8001d7c <__aeabi_dsub+0x188>
 8001eea:	0010      	movs	r0, r2
 8001eec:	3b1f      	subs	r3, #31
 8001eee:	40d8      	lsrs	r0, r3
 8001ef0:	2920      	cmp	r1, #32
 8001ef2:	d003      	beq.n	8001efc <__aeabi_dsub+0x308>
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	1a5b      	subs	r3, r3, r1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	4314      	orrs	r4, r2
 8001efc:	1e63      	subs	r3, r4, #1
 8001efe:	419c      	sbcs	r4, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	2600      	movs	r6, #0
 8001f04:	469a      	mov	sl, r3
 8001f06:	4304      	orrs	r4, r0
 8001f08:	0763      	lsls	r3, r4, #29
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_dsub+0x31a>
 8001f0c:	e6fe      	b.n	8001d0c <__aeabi_dsub+0x118>
 8001f0e:	4652      	mov	r2, sl
 8001f10:	08e3      	lsrs	r3, r4, #3
 8001f12:	0752      	lsls	r2, r2, #29
 8001f14:	4313      	orrs	r3, r2
 8001f16:	4652      	mov	r2, sl
 8001f18:	46b4      	mov	ip, r6
 8001f1a:	08d2      	lsrs	r2, r2, #3
 8001f1c:	490f      	ldr	r1, [pc, #60]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f1e:	458c      	cmp	ip, r1
 8001f20:	d02a      	beq.n	8001f78 <__aeabi_dsub+0x384>
 8001f22:	0312      	lsls	r2, r2, #12
 8001f24:	0b14      	lsrs	r4, r2, #12
 8001f26:	4662      	mov	r2, ip
 8001f28:	0552      	lsls	r2, r2, #21
 8001f2a:	0d52      	lsrs	r2, r2, #21
 8001f2c:	e70c      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f2e:	003c      	movs	r4, r7
 8001f30:	4304      	orrs	r4, r0
 8001f32:	1e62      	subs	r2, r4, #1
 8001f34:	4194      	sbcs	r4, r2
 8001f36:	18e4      	adds	r4, r4, r3
 8001f38:	429c      	cmp	r4, r3
 8001f3a:	4192      	sbcs	r2, r2
 8001f3c:	4252      	negs	r2, r2
 8001f3e:	444a      	add	r2, r9
 8001f40:	4692      	mov	sl, r2
 8001f42:	4653      	mov	r3, sl
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	d5df      	bpl.n	8001f08 <__aeabi_dsub+0x314>
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f4a:	3601      	adds	r6, #1
 8001f4c:	429e      	cmp	r6, r3
 8001f4e:	d000      	beq.n	8001f52 <__aeabi_dsub+0x35e>
 8001f50:	e0a0      	b.n	8002094 <__aeabi_dsub+0x4a0>
 8001f52:	0032      	movs	r2, r6
 8001f54:	2400      	movs	r4, #0
 8001f56:	2300      	movs	r3, #0
 8001f58:	e6f6      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	000007ff 	.word	0x000007ff
 8001f60:	ff7fffff 	.word	0xff7fffff
 8001f64:	fffff801 	.word	0xfffff801
 8001f68:	000007fe 	.word	0x000007fe
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	464a      	mov	r2, r9
 8001f70:	0752      	lsls	r2, r2, #29
 8001f72:	4313      	orrs	r3, r2
 8001f74:	464a      	mov	r2, r9
 8001f76:	08d2      	lsrs	r2, r2, #3
 8001f78:	0019      	movs	r1, r3
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x38c>
 8001f7e:	e1b5      	b.n	80022ec <__aeabi_dsub+0x6f8>
 8001f80:	2480      	movs	r4, #128	; 0x80
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4314      	orrs	r4, r2
 8001f86:	0324      	lsls	r4, r4, #12
 8001f88:	4ad5      	ldr	r2, [pc, #852]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	e6dc      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f8e:	0020      	movs	r0, r4
 8001f90:	f000 fae2 	bl	8002558 <__clzsi2>
 8001f94:	0003      	movs	r3, r0
 8001f96:	3318      	adds	r3, #24
 8001f98:	2b1f      	cmp	r3, #31
 8001f9a:	dc00      	bgt.n	8001f9e <__aeabi_dsub+0x3aa>
 8001f9c:	e695      	b.n	8001cca <__aeabi_dsub+0xd6>
 8001f9e:	0022      	movs	r2, r4
 8001fa0:	3808      	subs	r0, #8
 8001fa2:	4082      	lsls	r2, r0
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	429e      	cmp	r6, r3
 8001fa8:	dc00      	bgt.n	8001fac <__aeabi_dsub+0x3b8>
 8001faa:	e69a      	b.n	8001ce2 <__aeabi_dsub+0xee>
 8001fac:	1af6      	subs	r6, r6, r3
 8001fae:	4bcd      	ldr	r3, [pc, #820]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	4692      	mov	sl, r2
 8001fb4:	e6a8      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001fb6:	003c      	movs	r4, r7
 8001fb8:	4304      	orrs	r4, r0
 8001fba:	1e62      	subs	r2, r4, #1
 8001fbc:	4194      	sbcs	r4, r2
 8001fbe:	e66c      	b.n	8001c9a <__aeabi_dsub+0xa6>
 8001fc0:	464a      	mov	r2, r9
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	0752      	lsls	r2, r2, #29
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	464a      	mov	r2, r9
 8001fca:	08d2      	lsrs	r2, r2, #3
 8001fcc:	e7a6      	b.n	8001f1c <__aeabi_dsub+0x328>
 8001fce:	4cc6      	ldr	r4, [pc, #792]	; (80022e8 <__aeabi_dsub+0x6f4>)
 8001fd0:	1c72      	adds	r2, r6, #1
 8001fd2:	4222      	tst	r2, r4
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x3e4>
 8001fd6:	e0ac      	b.n	8002132 <__aeabi_dsub+0x53e>
 8001fd8:	464a      	mov	r2, r9
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	2e00      	cmp	r6, #0
 8001fde:	d000      	beq.n	8001fe2 <__aeabi_dsub+0x3ee>
 8001fe0:	e105      	b.n	80021ee <__aeabi_dsub+0x5fa>
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x3f4>
 8001fe6:	e156      	b.n	8002296 <__aeabi_dsub+0x6a2>
 8001fe8:	003a      	movs	r2, r7
 8001fea:	4302      	orrs	r2, r0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x3fc>
 8001fee:	e0db      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ff0:	181c      	adds	r4, r3, r0
 8001ff2:	429c      	cmp	r4, r3
 8001ff4:	419b      	sbcs	r3, r3
 8001ff6:	444f      	add	r7, r9
 8001ff8:	46ba      	mov	sl, r7
 8001ffa:	425b      	negs	r3, r3
 8001ffc:	449a      	add	sl, r3
 8001ffe:	4653      	mov	r3, sl
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	d400      	bmi.n	8002006 <__aeabi_dsub+0x412>
 8002004:	e780      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002006:	4652      	mov	r2, sl
 8002008:	4bb6      	ldr	r3, [pc, #728]	; (80022e4 <__aeabi_dsub+0x6f0>)
 800200a:	2601      	movs	r6, #1
 800200c:	401a      	ands	r2, r3
 800200e:	4692      	mov	sl, r2
 8002010:	e77a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002012:	4cb3      	ldr	r4, [pc, #716]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002014:	42a2      	cmp	r2, r4
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x426>
 8002018:	e0c0      	b.n	800219c <__aeabi_dsub+0x5a8>
 800201a:	2480      	movs	r4, #128	; 0x80
 800201c:	464d      	mov	r5, r9
 800201e:	0424      	lsls	r4, r4, #16
 8002020:	4325      	orrs	r5, r4
 8002022:	46a9      	mov	r9, r5
 8002024:	4664      	mov	r4, ip
 8002026:	2c38      	cmp	r4, #56	; 0x38
 8002028:	dc53      	bgt.n	80020d2 <__aeabi_dsub+0x4de>
 800202a:	4661      	mov	r1, ip
 800202c:	2c1f      	cmp	r4, #31
 800202e:	dd00      	ble.n	8002032 <__aeabi_dsub+0x43e>
 8002030:	e0cd      	b.n	80021ce <__aeabi_dsub+0x5da>
 8002032:	2520      	movs	r5, #32
 8002034:	001e      	movs	r6, r3
 8002036:	1b2d      	subs	r5, r5, r4
 8002038:	464c      	mov	r4, r9
 800203a:	40ab      	lsls	r3, r5
 800203c:	40ac      	lsls	r4, r5
 800203e:	40ce      	lsrs	r6, r1
 8002040:	1e5d      	subs	r5, r3, #1
 8002042:	41ab      	sbcs	r3, r5
 8002044:	4334      	orrs	r4, r6
 8002046:	4323      	orrs	r3, r4
 8002048:	464c      	mov	r4, r9
 800204a:	40cc      	lsrs	r4, r1
 800204c:	1b3f      	subs	r7, r7, r4
 800204e:	e045      	b.n	80020dc <__aeabi_dsub+0x4e8>
 8002050:	464a      	mov	r2, r9
 8002052:	1a1c      	subs	r4, r3, r0
 8002054:	1bd1      	subs	r1, r2, r7
 8002056:	42a3      	cmp	r3, r4
 8002058:	4192      	sbcs	r2, r2
 800205a:	4252      	negs	r2, r2
 800205c:	4692      	mov	sl, r2
 800205e:	000a      	movs	r2, r1
 8002060:	4651      	mov	r1, sl
 8002062:	1a52      	subs	r2, r2, r1
 8002064:	4692      	mov	sl, r2
 8002066:	0212      	lsls	r2, r2, #8
 8002068:	d500      	bpl.n	800206c <__aeabi_dsub+0x478>
 800206a:	e083      	b.n	8002174 <__aeabi_dsub+0x580>
 800206c:	4653      	mov	r3, sl
 800206e:	4323      	orrs	r3, r4
 8002070:	d000      	beq.n	8002074 <__aeabi_dsub+0x480>
 8002072:	e621      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002074:	2200      	movs	r2, #0
 8002076:	2500      	movs	r5, #0
 8002078:	e753      	b.n	8001f22 <__aeabi_dsub+0x32e>
 800207a:	181c      	adds	r4, r3, r0
 800207c:	429c      	cmp	r4, r3
 800207e:	419b      	sbcs	r3, r3
 8002080:	444f      	add	r7, r9
 8002082:	46ba      	mov	sl, r7
 8002084:	425b      	negs	r3, r3
 8002086:	449a      	add	sl, r3
 8002088:	4653      	mov	r3, sl
 800208a:	2601      	movs	r6, #1
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	d400      	bmi.n	8002092 <__aeabi_dsub+0x49e>
 8002090:	e73a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002092:	2602      	movs	r6, #2
 8002094:	4652      	mov	r2, sl
 8002096:	4b93      	ldr	r3, [pc, #588]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8002098:	2101      	movs	r1, #1
 800209a:	401a      	ands	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	4021      	ands	r1, r4
 80020a0:	0862      	lsrs	r2, r4, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	07dc      	lsls	r4, r3, #31
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	469a      	mov	sl, r3
 80020aa:	4314      	orrs	r4, r2
 80020ac:	e62c      	b.n	8001d08 <__aeabi_dsub+0x114>
 80020ae:	0039      	movs	r1, r7
 80020b0:	3a20      	subs	r2, #32
 80020b2:	40d1      	lsrs	r1, r2
 80020b4:	4662      	mov	r2, ip
 80020b6:	2a20      	cmp	r2, #32
 80020b8:	d006      	beq.n	80020c8 <__aeabi_dsub+0x4d4>
 80020ba:	4664      	mov	r4, ip
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	1b12      	subs	r2, r2, r4
 80020c0:	003c      	movs	r4, r7
 80020c2:	4094      	lsls	r4, r2
 80020c4:	4304      	orrs	r4, r0
 80020c6:	9401      	str	r4, [sp, #4]
 80020c8:	9c01      	ldr	r4, [sp, #4]
 80020ca:	1e62      	subs	r2, r4, #1
 80020cc:	4194      	sbcs	r4, r2
 80020ce:	430c      	orrs	r4, r1
 80020d0:	e5e3      	b.n	8001c9a <__aeabi_dsub+0xa6>
 80020d2:	4649      	mov	r1, r9
 80020d4:	4319      	orrs	r1, r3
 80020d6:	000b      	movs	r3, r1
 80020d8:	1e5c      	subs	r4, r3, #1
 80020da:	41a3      	sbcs	r3, r4
 80020dc:	1ac4      	subs	r4, r0, r3
 80020de:	42a0      	cmp	r0, r4
 80020e0:	419b      	sbcs	r3, r3
 80020e2:	425b      	negs	r3, r3
 80020e4:	1afb      	subs	r3, r7, r3
 80020e6:	469a      	mov	sl, r3
 80020e8:	465d      	mov	r5, fp
 80020ea:	0016      	movs	r6, r2
 80020ec:	e5dc      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 80020ee:	4649      	mov	r1, r9
 80020f0:	4319      	orrs	r1, r3
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x502>
 80020f4:	e0ae      	b.n	8002254 <__aeabi_dsub+0x660>
 80020f6:	4661      	mov	r1, ip
 80020f8:	4664      	mov	r4, ip
 80020fa:	3901      	subs	r1, #1
 80020fc:	2c01      	cmp	r4, #1
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x50e>
 8002100:	e0e0      	b.n	80022c4 <__aeabi_dsub+0x6d0>
 8002102:	4c77      	ldr	r4, [pc, #476]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002104:	45a4      	cmp	ip, r4
 8002106:	d056      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 8002108:	468c      	mov	ip, r1
 800210a:	e69a      	b.n	8001e42 <__aeabi_dsub+0x24e>
 800210c:	4661      	mov	r1, ip
 800210e:	2220      	movs	r2, #32
 8002110:	003c      	movs	r4, r7
 8002112:	1a52      	subs	r2, r2, r1
 8002114:	4094      	lsls	r4, r2
 8002116:	0001      	movs	r1, r0
 8002118:	4090      	lsls	r0, r2
 800211a:	46a0      	mov	r8, r4
 800211c:	4664      	mov	r4, ip
 800211e:	1e42      	subs	r2, r0, #1
 8002120:	4190      	sbcs	r0, r2
 8002122:	4662      	mov	r2, ip
 8002124:	40e1      	lsrs	r1, r4
 8002126:	4644      	mov	r4, r8
 8002128:	40d7      	lsrs	r7, r2
 800212a:	430c      	orrs	r4, r1
 800212c:	4304      	orrs	r4, r0
 800212e:	44b9      	add	r9, r7
 8002130:	e701      	b.n	8001f36 <__aeabi_dsub+0x342>
 8002132:	496b      	ldr	r1, [pc, #428]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002134:	428a      	cmp	r2, r1
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x546>
 8002138:	e70c      	b.n	8001f54 <__aeabi_dsub+0x360>
 800213a:	1818      	adds	r0, r3, r0
 800213c:	4298      	cmp	r0, r3
 800213e:	419b      	sbcs	r3, r3
 8002140:	444f      	add	r7, r9
 8002142:	425b      	negs	r3, r3
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	07dc      	lsls	r4, r3, #31
 8002148:	0840      	lsrs	r0, r0, #1
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	469a      	mov	sl, r3
 800214e:	0016      	movs	r6, r2
 8002150:	4304      	orrs	r4, r0
 8002152:	e6d9      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002154:	2a00      	cmp	r2, #0
 8002156:	d000      	beq.n	800215a <__aeabi_dsub+0x566>
 8002158:	e081      	b.n	800225e <__aeabi_dsub+0x66a>
 800215a:	003b      	movs	r3, r7
 800215c:	4303      	orrs	r3, r0
 800215e:	d11d      	bne.n	800219c <__aeabi_dsub+0x5a8>
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	2500      	movs	r5, #0
 8002164:	0312      	lsls	r2, r2, #12
 8002166:	e70b      	b.n	8001f80 <__aeabi_dsub+0x38c>
 8002168:	08c0      	lsrs	r0, r0, #3
 800216a:	077b      	lsls	r3, r7, #29
 800216c:	465d      	mov	r5, fp
 800216e:	4303      	orrs	r3, r0
 8002170:	08fa      	lsrs	r2, r7, #3
 8002172:	e6d3      	b.n	8001f1c <__aeabi_dsub+0x328>
 8002174:	1ac4      	subs	r4, r0, r3
 8002176:	42a0      	cmp	r0, r4
 8002178:	4180      	sbcs	r0, r0
 800217a:	464b      	mov	r3, r9
 800217c:	4240      	negs	r0, r0
 800217e:	1aff      	subs	r7, r7, r3
 8002180:	1a3b      	subs	r3, r7, r0
 8002182:	469a      	mov	sl, r3
 8002184:	465d      	mov	r5, fp
 8002186:	e597      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002188:	1a1c      	subs	r4, r3, r0
 800218a:	464a      	mov	r2, r9
 800218c:	42a3      	cmp	r3, r4
 800218e:	419b      	sbcs	r3, r3
 8002190:	1bd7      	subs	r7, r2, r7
 8002192:	425b      	negs	r3, r3
 8002194:	1afb      	subs	r3, r7, r3
 8002196:	469a      	mov	sl, r3
 8002198:	2601      	movs	r6, #1
 800219a:	e585      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 800219c:	08c0      	lsrs	r0, r0, #3
 800219e:	077b      	lsls	r3, r7, #29
 80021a0:	465d      	mov	r5, fp
 80021a2:	4303      	orrs	r3, r0
 80021a4:	08fa      	lsrs	r2, r7, #3
 80021a6:	e6e7      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021a8:	464a      	mov	r2, r9
 80021aa:	08db      	lsrs	r3, r3, #3
 80021ac:	0752      	lsls	r2, r2, #29
 80021ae:	4313      	orrs	r3, r2
 80021b0:	464a      	mov	r2, r9
 80021b2:	08d2      	lsrs	r2, r2, #3
 80021b4:	e6b5      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80021b6:	08c0      	lsrs	r0, r0, #3
 80021b8:	077b      	lsls	r3, r7, #29
 80021ba:	4303      	orrs	r3, r0
 80021bc:	08fa      	lsrs	r2, r7, #3
 80021be:	e6db      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021c0:	4649      	mov	r1, r9
 80021c2:	4319      	orrs	r1, r3
 80021c4:	000b      	movs	r3, r1
 80021c6:	1e59      	subs	r1, r3, #1
 80021c8:	418b      	sbcs	r3, r1
 80021ca:	001c      	movs	r4, r3
 80021cc:	e653      	b.n	8001e76 <__aeabi_dsub+0x282>
 80021ce:	464d      	mov	r5, r9
 80021d0:	3c20      	subs	r4, #32
 80021d2:	40e5      	lsrs	r5, r4
 80021d4:	2920      	cmp	r1, #32
 80021d6:	d005      	beq.n	80021e4 <__aeabi_dsub+0x5f0>
 80021d8:	2440      	movs	r4, #64	; 0x40
 80021da:	1a64      	subs	r4, r4, r1
 80021dc:	4649      	mov	r1, r9
 80021de:	40a1      	lsls	r1, r4
 80021e0:	430b      	orrs	r3, r1
 80021e2:	4698      	mov	r8, r3
 80021e4:	4643      	mov	r3, r8
 80021e6:	1e5c      	subs	r4, r3, #1
 80021e8:	41a3      	sbcs	r3, r4
 80021ea:	432b      	orrs	r3, r5
 80021ec:	e776      	b.n	80020dc <__aeabi_dsub+0x4e8>
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d0e1      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 80021f2:	003a      	movs	r2, r7
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	4302      	orrs	r2, r0
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x608>
 80021fa:	e6b8      	b.n	8001f6e <__aeabi_dsub+0x37a>
 80021fc:	464a      	mov	r2, r9
 80021fe:	0752      	lsls	r2, r2, #29
 8002200:	2480      	movs	r4, #128	; 0x80
 8002202:	4313      	orrs	r3, r2
 8002204:	464a      	mov	r2, r9
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	08d2      	lsrs	r2, r2, #3
 800220a:	4222      	tst	r2, r4
 800220c:	d007      	beq.n	800221e <__aeabi_dsub+0x62a>
 800220e:	08fe      	lsrs	r6, r7, #3
 8002210:	4226      	tst	r6, r4
 8002212:	d104      	bne.n	800221e <__aeabi_dsub+0x62a>
 8002214:	465d      	mov	r5, fp
 8002216:	0032      	movs	r2, r6
 8002218:	08c3      	lsrs	r3, r0, #3
 800221a:	077f      	lsls	r7, r7, #29
 800221c:	433b      	orrs	r3, r7
 800221e:	0f59      	lsrs	r1, r3, #29
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	0749      	lsls	r1, r1, #29
 8002224:	08db      	lsrs	r3, r3, #3
 8002226:	430b      	orrs	r3, r1
 8002228:	e6a6      	b.n	8001f78 <__aeabi_dsub+0x384>
 800222a:	1ac4      	subs	r4, r0, r3
 800222c:	42a0      	cmp	r0, r4
 800222e:	4180      	sbcs	r0, r0
 8002230:	464b      	mov	r3, r9
 8002232:	4240      	negs	r0, r0
 8002234:	1aff      	subs	r7, r7, r3
 8002236:	1a3b      	subs	r3, r7, r0
 8002238:	469a      	mov	sl, r3
 800223a:	465d      	mov	r5, fp
 800223c:	2601      	movs	r6, #1
 800223e:	e533      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 8002240:	003b      	movs	r3, r7
 8002242:	4303      	orrs	r3, r0
 8002244:	d100      	bne.n	8002248 <__aeabi_dsub+0x654>
 8002246:	e715      	b.n	8002074 <__aeabi_dsub+0x480>
 8002248:	08c0      	lsrs	r0, r0, #3
 800224a:	077b      	lsls	r3, r7, #29
 800224c:	465d      	mov	r5, fp
 800224e:	4303      	orrs	r3, r0
 8002250:	08fa      	lsrs	r2, r7, #3
 8002252:	e666      	b.n	8001f22 <__aeabi_dsub+0x32e>
 8002254:	08c0      	lsrs	r0, r0, #3
 8002256:	077b      	lsls	r3, r7, #29
 8002258:	4303      	orrs	r3, r0
 800225a:	08fa      	lsrs	r2, r7, #3
 800225c:	e65e      	b.n	8001f1c <__aeabi_dsub+0x328>
 800225e:	003a      	movs	r2, r7
 8002260:	08db      	lsrs	r3, r3, #3
 8002262:	4302      	orrs	r2, r0
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x674>
 8002266:	e682      	b.n	8001f6e <__aeabi_dsub+0x37a>
 8002268:	464a      	mov	r2, r9
 800226a:	0752      	lsls	r2, r2, #29
 800226c:	2480      	movs	r4, #128	; 0x80
 800226e:	4313      	orrs	r3, r2
 8002270:	464a      	mov	r2, r9
 8002272:	0324      	lsls	r4, r4, #12
 8002274:	08d2      	lsrs	r2, r2, #3
 8002276:	4222      	tst	r2, r4
 8002278:	d007      	beq.n	800228a <__aeabi_dsub+0x696>
 800227a:	08fe      	lsrs	r6, r7, #3
 800227c:	4226      	tst	r6, r4
 800227e:	d104      	bne.n	800228a <__aeabi_dsub+0x696>
 8002280:	465d      	mov	r5, fp
 8002282:	0032      	movs	r2, r6
 8002284:	08c3      	lsrs	r3, r0, #3
 8002286:	077f      	lsls	r7, r7, #29
 8002288:	433b      	orrs	r3, r7
 800228a:	0f59      	lsrs	r1, r3, #29
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	08db      	lsrs	r3, r3, #3
 8002290:	0749      	lsls	r1, r1, #29
 8002292:	430b      	orrs	r3, r1
 8002294:	e670      	b.n	8001f78 <__aeabi_dsub+0x384>
 8002296:	08c0      	lsrs	r0, r0, #3
 8002298:	077b      	lsls	r3, r7, #29
 800229a:	4303      	orrs	r3, r0
 800229c:	08fa      	lsrs	r2, r7, #3
 800229e:	e640      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80022a0:	464c      	mov	r4, r9
 80022a2:	3920      	subs	r1, #32
 80022a4:	40cc      	lsrs	r4, r1
 80022a6:	4661      	mov	r1, ip
 80022a8:	2920      	cmp	r1, #32
 80022aa:	d006      	beq.n	80022ba <__aeabi_dsub+0x6c6>
 80022ac:	4666      	mov	r6, ip
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	1b89      	subs	r1, r1, r6
 80022b2:	464e      	mov	r6, r9
 80022b4:	408e      	lsls	r6, r1
 80022b6:	4333      	orrs	r3, r6
 80022b8:	4698      	mov	r8, r3
 80022ba:	4643      	mov	r3, r8
 80022bc:	1e59      	subs	r1, r3, #1
 80022be:	418b      	sbcs	r3, r1
 80022c0:	431c      	orrs	r4, r3
 80022c2:	e5d8      	b.n	8001e76 <__aeabi_dsub+0x282>
 80022c4:	181c      	adds	r4, r3, r0
 80022c6:	4284      	cmp	r4, r0
 80022c8:	4180      	sbcs	r0, r0
 80022ca:	444f      	add	r7, r9
 80022cc:	46ba      	mov	sl, r7
 80022ce:	4240      	negs	r0, r0
 80022d0:	4482      	add	sl, r0
 80022d2:	e6d9      	b.n	8002088 <__aeabi_dsub+0x494>
 80022d4:	4653      	mov	r3, sl
 80022d6:	4323      	orrs	r3, r4
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x6e8>
 80022da:	e6cb      	b.n	8002074 <__aeabi_dsub+0x480>
 80022dc:	e614      	b.n	8001f08 <__aeabi_dsub+0x314>
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2300      	movs	r3, #0
 80022ee:	4a01      	ldr	r2, [pc, #4]	; (80022f4 <__aeabi_dsub+0x700>)
 80022f0:	001c      	movs	r4, r3
 80022f2:	e529      	b.n	8001d48 <__aeabi_dsub+0x154>
 80022f4:	000007ff 	.word	0x000007ff

080022f8 <__aeabi_dcmpun>:
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	0005      	movs	r5, r0
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <__aeabi_dcmpun+0x38>)
 80022fe:	031c      	lsls	r4, r3, #12
 8002300:	0016      	movs	r6, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	030a      	lsls	r2, r1, #12
 8002306:	0049      	lsls	r1, r1, #1
 8002308:	0b12      	lsrs	r2, r2, #12
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b24      	lsrs	r4, r4, #12
 800230e:	0d5b      	lsrs	r3, r3, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d008      	beq.n	8002326 <__aeabi_dcmpun+0x2e>
 8002314:	4a06      	ldr	r2, [pc, #24]	; (8002330 <__aeabi_dcmpun+0x38>)
 8002316:	2000      	movs	r0, #0
 8002318:	4293      	cmp	r3, r2
 800231a:	d103      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800231c:	0020      	movs	r0, r4
 800231e:	4330      	orrs	r0, r6
 8002320:	1e43      	subs	r3, r0, #1
 8002322:	4198      	sbcs	r0, r3
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	2001      	movs	r0, #1
 8002328:	432a      	orrs	r2, r5
 800232a:	d1fb      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800232c:	e7f2      	b.n	8002314 <__aeabi_dcmpun+0x1c>
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	000007ff 	.word	0x000007ff

08002334 <__aeabi_d2iz>:
 8002334:	000a      	movs	r2, r1
 8002336:	b530      	push	{r4, r5, lr}
 8002338:	4c13      	ldr	r4, [pc, #76]	; (8002388 <__aeabi_d2iz+0x54>)
 800233a:	0053      	lsls	r3, r2, #1
 800233c:	0309      	lsls	r1, r1, #12
 800233e:	0005      	movs	r5, r0
 8002340:	0b09      	lsrs	r1, r1, #12
 8002342:	2000      	movs	r0, #0
 8002344:	0d5b      	lsrs	r3, r3, #21
 8002346:	0fd2      	lsrs	r2, r2, #31
 8002348:	42a3      	cmp	r3, r4
 800234a:	dd04      	ble.n	8002356 <__aeabi_d2iz+0x22>
 800234c:	480f      	ldr	r0, [pc, #60]	; (800238c <__aeabi_d2iz+0x58>)
 800234e:	4283      	cmp	r3, r0
 8002350:	dd02      	ble.n	8002358 <__aeabi_d2iz+0x24>
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <__aeabi_d2iz+0x5c>)
 8002354:	18d0      	adds	r0, r2, r3
 8002356:	bd30      	pop	{r4, r5, pc}
 8002358:	2080      	movs	r0, #128	; 0x80
 800235a:	0340      	lsls	r0, r0, #13
 800235c:	4301      	orrs	r1, r0
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <__aeabi_d2iz+0x60>)
 8002360:	1ac0      	subs	r0, r0, r3
 8002362:	281f      	cmp	r0, #31
 8002364:	dd08      	ble.n	8002378 <__aeabi_d2iz+0x44>
 8002366:	480c      	ldr	r0, [pc, #48]	; (8002398 <__aeabi_d2iz+0x64>)
 8002368:	1ac3      	subs	r3, r0, r3
 800236a:	40d9      	lsrs	r1, r3
 800236c:	000b      	movs	r3, r1
 800236e:	4258      	negs	r0, r3
 8002370:	2a00      	cmp	r2, #0
 8002372:	d1f0      	bne.n	8002356 <__aeabi_d2iz+0x22>
 8002374:	0018      	movs	r0, r3
 8002376:	e7ee      	b.n	8002356 <__aeabi_d2iz+0x22>
 8002378:	4c08      	ldr	r4, [pc, #32]	; (800239c <__aeabi_d2iz+0x68>)
 800237a:	40c5      	lsrs	r5, r0
 800237c:	46a4      	mov	ip, r4
 800237e:	4463      	add	r3, ip
 8002380:	4099      	lsls	r1, r3
 8002382:	000b      	movs	r3, r1
 8002384:	432b      	orrs	r3, r5
 8002386:	e7f2      	b.n	800236e <__aeabi_d2iz+0x3a>
 8002388:	000003fe 	.word	0x000003fe
 800238c:	0000041d 	.word	0x0000041d
 8002390:	7fffffff 	.word	0x7fffffff
 8002394:	00000433 	.word	0x00000433
 8002398:	00000413 	.word	0x00000413
 800239c:	fffffbed 	.word	0xfffffbed

080023a0 <__aeabi_i2d>:
 80023a0:	b570      	push	{r4, r5, r6, lr}
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d016      	beq.n	80023d4 <__aeabi_i2d+0x34>
 80023a6:	17c3      	asrs	r3, r0, #31
 80023a8:	18c5      	adds	r5, r0, r3
 80023aa:	405d      	eors	r5, r3
 80023ac:	0fc4      	lsrs	r4, r0, #31
 80023ae:	0028      	movs	r0, r5
 80023b0:	f000 f8d2 	bl	8002558 <__clzsi2>
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <__aeabi_i2d+0x5c>)
 80023b6:	1a1b      	subs	r3, r3, r0
 80023b8:	280a      	cmp	r0, #10
 80023ba:	dc16      	bgt.n	80023ea <__aeabi_i2d+0x4a>
 80023bc:	0002      	movs	r2, r0
 80023be:	002e      	movs	r6, r5
 80023c0:	3215      	adds	r2, #21
 80023c2:	4096      	lsls	r6, r2
 80023c4:	220b      	movs	r2, #11
 80023c6:	1a12      	subs	r2, r2, r0
 80023c8:	40d5      	lsrs	r5, r2
 80023ca:	055b      	lsls	r3, r3, #21
 80023cc:	032d      	lsls	r5, r5, #12
 80023ce:	0b2d      	lsrs	r5, r5, #12
 80023d0:	0d5b      	lsrs	r3, r3, #21
 80023d2:	e003      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023d4:	2400      	movs	r4, #0
 80023d6:	2300      	movs	r3, #0
 80023d8:	2500      	movs	r5, #0
 80023da:	2600      	movs	r6, #0
 80023dc:	051b      	lsls	r3, r3, #20
 80023de:	432b      	orrs	r3, r5
 80023e0:	07e4      	lsls	r4, r4, #31
 80023e2:	4323      	orrs	r3, r4
 80023e4:	0030      	movs	r0, r6
 80023e6:	0019      	movs	r1, r3
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
 80023ea:	380b      	subs	r0, #11
 80023ec:	4085      	lsls	r5, r0
 80023ee:	055b      	lsls	r3, r3, #21
 80023f0:	032d      	lsls	r5, r5, #12
 80023f2:	2600      	movs	r6, #0
 80023f4:	0b2d      	lsrs	r5, r5, #12
 80023f6:	0d5b      	lsrs	r3, r3, #21
 80023f8:	e7f0      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	0000041e 	.word	0x0000041e

08002400 <__aeabi_ui2d>:
 8002400:	b510      	push	{r4, lr}
 8002402:	1e04      	subs	r4, r0, #0
 8002404:	d010      	beq.n	8002428 <__aeabi_ui2d+0x28>
 8002406:	f000 f8a7 	bl	8002558 <__clzsi2>
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <__aeabi_ui2d+0x48>)
 800240c:	1a1b      	subs	r3, r3, r0
 800240e:	280a      	cmp	r0, #10
 8002410:	dc11      	bgt.n	8002436 <__aeabi_ui2d+0x36>
 8002412:	220b      	movs	r2, #11
 8002414:	0021      	movs	r1, r4
 8002416:	1a12      	subs	r2, r2, r0
 8002418:	40d1      	lsrs	r1, r2
 800241a:	3015      	adds	r0, #21
 800241c:	030a      	lsls	r2, r1, #12
 800241e:	055b      	lsls	r3, r3, #21
 8002420:	4084      	lsls	r4, r0
 8002422:	0b12      	lsrs	r2, r2, #12
 8002424:	0d5b      	lsrs	r3, r3, #21
 8002426:	e001      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002428:	2300      	movs	r3, #0
 800242a:	2200      	movs	r2, #0
 800242c:	051b      	lsls	r3, r3, #20
 800242e:	4313      	orrs	r3, r2
 8002430:	0020      	movs	r0, r4
 8002432:	0019      	movs	r1, r3
 8002434:	bd10      	pop	{r4, pc}
 8002436:	0022      	movs	r2, r4
 8002438:	380b      	subs	r0, #11
 800243a:	4082      	lsls	r2, r0
 800243c:	055b      	lsls	r3, r3, #21
 800243e:	0312      	lsls	r2, r2, #12
 8002440:	2400      	movs	r4, #0
 8002442:	0b12      	lsrs	r2, r2, #12
 8002444:	0d5b      	lsrs	r3, r3, #21
 8002446:	e7f1      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002448:	0000041e 	.word	0x0000041e

0800244c <__aeabi_d2f>:
 800244c:	0002      	movs	r2, r0
 800244e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002450:	004b      	lsls	r3, r1, #1
 8002452:	030d      	lsls	r5, r1, #12
 8002454:	0f40      	lsrs	r0, r0, #29
 8002456:	0d5b      	lsrs	r3, r3, #21
 8002458:	0fcc      	lsrs	r4, r1, #31
 800245a:	0a6d      	lsrs	r5, r5, #9
 800245c:	493a      	ldr	r1, [pc, #232]	; (8002548 <__aeabi_d2f+0xfc>)
 800245e:	4305      	orrs	r5, r0
 8002460:	1c58      	adds	r0, r3, #1
 8002462:	00d7      	lsls	r7, r2, #3
 8002464:	4208      	tst	r0, r1
 8002466:	d00a      	beq.n	800247e <__aeabi_d2f+0x32>
 8002468:	4938      	ldr	r1, [pc, #224]	; (800254c <__aeabi_d2f+0x100>)
 800246a:	1859      	adds	r1, r3, r1
 800246c:	29fe      	cmp	r1, #254	; 0xfe
 800246e:	dd16      	ble.n	800249e <__aeabi_d2f+0x52>
 8002470:	20ff      	movs	r0, #255	; 0xff
 8002472:	2200      	movs	r2, #0
 8002474:	05c0      	lsls	r0, r0, #23
 8002476:	4310      	orrs	r0, r2
 8002478:	07e4      	lsls	r4, r4, #31
 800247a:	4320      	orrs	r0, r4
 800247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <__aeabi_d2f+0x44>
 8002482:	433d      	orrs	r5, r7
 8002484:	d026      	beq.n	80024d4 <__aeabi_d2f+0x88>
 8002486:	2205      	movs	r2, #5
 8002488:	0192      	lsls	r2, r2, #6
 800248a:	0a52      	lsrs	r2, r2, #9
 800248c:	b2d8      	uxtb	r0, r3
 800248e:	e7f1      	b.n	8002474 <__aeabi_d2f+0x28>
 8002490:	432f      	orrs	r7, r5
 8002492:	d0ed      	beq.n	8002470 <__aeabi_d2f+0x24>
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	03d2      	lsls	r2, r2, #15
 8002498:	20ff      	movs	r0, #255	; 0xff
 800249a:	432a      	orrs	r2, r5
 800249c:	e7ea      	b.n	8002474 <__aeabi_d2f+0x28>
 800249e:	2900      	cmp	r1, #0
 80024a0:	dd1b      	ble.n	80024da <__aeabi_d2f+0x8e>
 80024a2:	0192      	lsls	r2, r2, #6
 80024a4:	1e50      	subs	r0, r2, #1
 80024a6:	4182      	sbcs	r2, r0
 80024a8:	00ed      	lsls	r5, r5, #3
 80024aa:	0f7f      	lsrs	r7, r7, #29
 80024ac:	432a      	orrs	r2, r5
 80024ae:	433a      	orrs	r2, r7
 80024b0:	0753      	lsls	r3, r2, #29
 80024b2:	d047      	beq.n	8002544 <__aeabi_d2f+0xf8>
 80024b4:	230f      	movs	r3, #15
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d000      	beq.n	80024be <__aeabi_d2f+0x72>
 80024bc:	3204      	adds	r2, #4
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	04db      	lsls	r3, r3, #19
 80024c2:	4013      	ands	r3, r2
 80024c4:	d03e      	beq.n	8002544 <__aeabi_d2f+0xf8>
 80024c6:	1c48      	adds	r0, r1, #1
 80024c8:	29fe      	cmp	r1, #254	; 0xfe
 80024ca:	d0d1      	beq.n	8002470 <__aeabi_d2f+0x24>
 80024cc:	0192      	lsls	r2, r2, #6
 80024ce:	0a52      	lsrs	r2, r2, #9
 80024d0:	b2c0      	uxtb	r0, r0
 80024d2:	e7cf      	b.n	8002474 <__aeabi_d2f+0x28>
 80024d4:	2000      	movs	r0, #0
 80024d6:	2200      	movs	r2, #0
 80024d8:	e7cc      	b.n	8002474 <__aeabi_d2f+0x28>
 80024da:	000a      	movs	r2, r1
 80024dc:	3217      	adds	r2, #23
 80024de:	db2f      	blt.n	8002540 <__aeabi_d2f+0xf4>
 80024e0:	2680      	movs	r6, #128	; 0x80
 80024e2:	0436      	lsls	r6, r6, #16
 80024e4:	432e      	orrs	r6, r5
 80024e6:	251e      	movs	r5, #30
 80024e8:	1a6d      	subs	r5, r5, r1
 80024ea:	2d1f      	cmp	r5, #31
 80024ec:	dd11      	ble.n	8002512 <__aeabi_d2f+0xc6>
 80024ee:	2202      	movs	r2, #2
 80024f0:	4252      	negs	r2, r2
 80024f2:	1a52      	subs	r2, r2, r1
 80024f4:	0031      	movs	r1, r6
 80024f6:	40d1      	lsrs	r1, r2
 80024f8:	2d20      	cmp	r5, #32
 80024fa:	d004      	beq.n	8002506 <__aeabi_d2f+0xba>
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <__aeabi_d2f+0x104>)
 80024fe:	4694      	mov	ip, r2
 8002500:	4463      	add	r3, ip
 8002502:	409e      	lsls	r6, r3
 8002504:	4337      	orrs	r7, r6
 8002506:	003a      	movs	r2, r7
 8002508:	1e53      	subs	r3, r2, #1
 800250a:	419a      	sbcs	r2, r3
 800250c:	430a      	orrs	r2, r1
 800250e:	2100      	movs	r1, #0
 8002510:	e7ce      	b.n	80024b0 <__aeabi_d2f+0x64>
 8002512:	4a10      	ldr	r2, [pc, #64]	; (8002554 <__aeabi_d2f+0x108>)
 8002514:	0038      	movs	r0, r7
 8002516:	4694      	mov	ip, r2
 8002518:	4463      	add	r3, ip
 800251a:	4098      	lsls	r0, r3
 800251c:	003a      	movs	r2, r7
 800251e:	1e41      	subs	r1, r0, #1
 8002520:	4188      	sbcs	r0, r1
 8002522:	409e      	lsls	r6, r3
 8002524:	40ea      	lsrs	r2, r5
 8002526:	4330      	orrs	r0, r6
 8002528:	4302      	orrs	r2, r0
 800252a:	2100      	movs	r1, #0
 800252c:	0753      	lsls	r3, r2, #29
 800252e:	d1c1      	bne.n	80024b4 <__aeabi_d2f+0x68>
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	0013      	movs	r3, r2
 8002534:	04c9      	lsls	r1, r1, #19
 8002536:	2001      	movs	r0, #1
 8002538:	400b      	ands	r3, r1
 800253a:	420a      	tst	r2, r1
 800253c:	d1c6      	bne.n	80024cc <__aeabi_d2f+0x80>
 800253e:	e7a3      	b.n	8002488 <__aeabi_d2f+0x3c>
 8002540:	2300      	movs	r3, #0
 8002542:	e7a0      	b.n	8002486 <__aeabi_d2f+0x3a>
 8002544:	000b      	movs	r3, r1
 8002546:	e79f      	b.n	8002488 <__aeabi_d2f+0x3c>
 8002548:	000007fe 	.word	0x000007fe
 800254c:	fffffc80 	.word	0xfffffc80
 8002550:	fffffca2 	.word	0xfffffca2
 8002554:	fffffc82 	.word	0xfffffc82

08002558 <__clzsi2>:
 8002558:	211c      	movs	r1, #28
 800255a:	2301      	movs	r3, #1
 800255c:	041b      	lsls	r3, r3, #16
 800255e:	4298      	cmp	r0, r3
 8002560:	d301      	bcc.n	8002566 <__clzsi2+0xe>
 8002562:	0c00      	lsrs	r0, r0, #16
 8002564:	3910      	subs	r1, #16
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	4298      	cmp	r0, r3
 800256a:	d301      	bcc.n	8002570 <__clzsi2+0x18>
 800256c:	0a00      	lsrs	r0, r0, #8
 800256e:	3908      	subs	r1, #8
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	4298      	cmp	r0, r3
 8002574:	d301      	bcc.n	800257a <__clzsi2+0x22>
 8002576:	0900      	lsrs	r0, r0, #4
 8002578:	3904      	subs	r1, #4
 800257a:	a202      	add	r2, pc, #8	; (adr r2, 8002584 <__clzsi2+0x2c>)
 800257c:	5c10      	ldrb	r0, [r2, r0]
 800257e:	1840      	adds	r0, r0, r1
 8002580:	4770      	bx	lr
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	02020304 	.word	0x02020304
 8002588:	01010101 	.word	0x01010101
	...

08002594 <__clzdi2>:
 8002594:	b510      	push	{r4, lr}
 8002596:	2900      	cmp	r1, #0
 8002598:	d103      	bne.n	80025a2 <__clzdi2+0xe>
 800259a:	f7ff ffdd 	bl	8002558 <__clzsi2>
 800259e:	3020      	adds	r0, #32
 80025a0:	e002      	b.n	80025a8 <__clzdi2+0x14>
 80025a2:	0008      	movs	r0, r1
 80025a4:	f7ff ffd8 	bl	8002558 <__clzsi2>
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)

080025ac <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025b2:	003b      	movs	r3, r7
 80025b4:	0018      	movs	r0, r3
 80025b6:	2308      	movs	r3, #8
 80025b8:	001a      	movs	r2, r3
 80025ba:	2100      	movs	r1, #0
 80025bc:	f007 f8d4 	bl	8009768 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <MX_ADC_Init+0xbc>)
 80025c2:	4a2a      	ldr	r2, [pc, #168]	; (800266c <MX_ADC_Init+0xc0>)
 80025c4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80025c6:	4b28      	ldr	r3, [pc, #160]	; (8002668 <MX_ADC_Init+0xbc>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <MX_ADC_Init+0xbc>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80025d2:	4b25      	ldr	r3, [pc, #148]	; (8002668 <MX_ADC_Init+0xbc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80025d8:	4b23      	ldr	r3, [pc, #140]	; (8002668 <MX_ADC_Init+0xbc>)
 80025da:	2207      	movs	r2, #7
 80025dc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80025de:	4b22      	ldr	r3, [pc, #136]	; (8002668 <MX_ADC_Init+0xbc>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025e4:	4b20      	ldr	r3, [pc, #128]	; (8002668 <MX_ADC_Init+0xbc>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80025ea:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <MX_ADC_Init+0xbc>)
 80025ec:	2220      	movs	r2, #32
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <MX_ADC_Init+0xbc>)
 80025f4:	2221      	movs	r2, #33	; 0x21
 80025f6:	2100      	movs	r1, #0
 80025f8:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <MX_ADC_Init+0xbc>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <MX_ADC_Init+0xbc>)
 8002602:	22c2      	movs	r2, #194	; 0xc2
 8002604:	32ff      	adds	r2, #255	; 0xff
 8002606:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002608:	4b17      	ldr	r3, [pc, #92]	; (8002668 <MX_ADC_Init+0xbc>)
 800260a:	222c      	movs	r2, #44	; 0x2c
 800260c:	2101      	movs	r1, #1
 800260e:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002610:	4b15      	ldr	r3, [pc, #84]	; (8002668 <MX_ADC_Init+0xbc>)
 8002612:	2204      	movs	r2, #4
 8002614:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002616:	4b14      	ldr	r3, [pc, #80]	; (8002668 <MX_ADC_Init+0xbc>)
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <MX_ADC_Init+0xbc>)
 800261e:	2200      	movs	r2, #0
 8002620:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <MX_ADC_Init+0xbc>)
 8002624:	2200      	movs	r2, #0
 8002626:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002628:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <MX_ADC_Init+0xbc>)
 800262a:	2200      	movs	r2, #0
 800262c:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <MX_ADC_Init+0xbc>)
 8002630:	0018      	movs	r0, r3
 8002632:	f001 fc43 	bl	8003ebc <HAL_ADC_Init>
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d001      	beq.n	800263e <MX_ADC_Init+0x92>
  {
    Error_Handler();
 800263a:	f000 fae3 	bl	8002c04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800263e:	003b      	movs	r3, r7
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002644:	003b      	movs	r3, r7
 8002646:	2280      	movs	r2, #128	; 0x80
 8002648:	0152      	lsls	r2, r2, #5
 800264a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800264c:	003a      	movs	r2, r7
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <MX_ADC_Init+0xbc>)
 8002650:	0011      	movs	r1, r2
 8002652:	0018      	movs	r0, r3
 8002654:	f001 fda6 	bl	80041a4 <HAL_ADC_ConfigChannel>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d001      	beq.n	8002660 <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 800265c:	f000 fad2 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200001f0 	.word	0x200001f0
 800266c:	40012400 	.word	0x40012400

08002670 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	240c      	movs	r4, #12
 800267a:	193b      	adds	r3, r7, r4
 800267c:	0018      	movs	r0, r3
 800267e:	2314      	movs	r3, #20
 8002680:	001a      	movs	r2, r3
 8002682:	2100      	movs	r1, #0
 8002684:	f007 f870 	bl	8009768 <memset>
  if(adcHandle->Instance==ADC1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a2a      	ldr	r2, [pc, #168]	; (8002738 <HAL_ADC_MspInit+0xc8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d14d      	bne.n	800272e <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002692:	4b2a      	ldr	r3, [pc, #168]	; (800273c <HAL_ADC_MspInit+0xcc>)
 8002694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002696:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_ADC_MspInit+0xcc>)
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	0089      	lsls	r1, r1, #2
 800269c:	430a      	orrs	r2, r1
 800269e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	4b26      	ldr	r3, [pc, #152]	; (800273c <HAL_ADC_MspInit+0xcc>)
 80026a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a4:	4b25      	ldr	r3, [pc, #148]	; (800273c <HAL_ADC_MspInit+0xcc>)
 80026a6:	2101      	movs	r1, #1
 80026a8:	430a      	orrs	r2, r1
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <HAL_ADC_MspInit+0xcc>)
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	2201      	movs	r2, #1
 80026b2:	4013      	ands	r3, r2
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026b8:	193b      	adds	r3, r7, r4
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026be:	193b      	adds	r3, r7, r4
 80026c0:	2203      	movs	r2, #3
 80026c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	193b      	adds	r3, r7, r4
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ca:	193a      	adds	r2, r7, r4
 80026cc:	23a0      	movs	r3, #160	; 0xa0
 80026ce:	05db      	lsls	r3, r3, #23
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f002 f8b2 	bl	800483c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 80026da:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_ADC_MspInit+0xd4>)
 80026dc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 8002700:	2280      	movs	r2, #128	; 0x80
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 8002708:	2220      	movs	r2, #32
 800270a:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 800270e:	2200      	movs	r2, #0
 8002710:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 8002714:	0018      	movs	r0, r3
 8002716:	f001 fee3 	bl	80044e0 <HAL_DMA_Init>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d001      	beq.n	8002722 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800271e:	f000 fa71 	bl	8002c04 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a06      	ldr	r2, [pc, #24]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 8002726:	64da      	str	r2, [r3, #76]	; 0x4c
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b009      	add	sp, #36	; 0x24
 8002734:	bd90      	pop	{r4, r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	40012400 	.word	0x40012400
 800273c:	40021000 	.word	0x40021000
 8002740:	2000024c 	.word	0x2000024c
 8002744:	40020008 	.word	0x40020008

08002748 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <MX_DMA_Init+0x38>)
 8002750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <MX_DMA_Init+0x38>)
 8002754:	2101      	movs	r1, #1
 8002756:	430a      	orrs	r2, r1
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <MX_DMA_Init+0x38>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	2201      	movs	r2, #1
 8002760:	4013      	ands	r3, r2
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2101      	movs	r1, #1
 800276a:	2009      	movs	r0, #9
 800276c:	f001 fe86 	bl	800447c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002770:	2009      	movs	r0, #9
 8002772:	f001 fe98 	bl	80044a6 <HAL_NVIC_EnableIRQ>

}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	b002      	add	sp, #8
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	40021000 	.word	0x40021000

08002784 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b08b      	sub	sp, #44	; 0x2c
 8002788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278a:	2414      	movs	r4, #20
 800278c:	193b      	adds	r3, r7, r4
 800278e:	0018      	movs	r0, r3
 8002790:	2314      	movs	r3, #20
 8002792:	001a      	movs	r2, r3
 8002794:	2100      	movs	r1, #0
 8002796:	f006 ffe7 	bl	8009768 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800279a:	4b48      	ldr	r3, [pc, #288]	; (80028bc <MX_GPIO_Init+0x138>)
 800279c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <MX_GPIO_Init+0x138>)
 80027a0:	2104      	movs	r1, #4
 80027a2:	430a      	orrs	r2, r1
 80027a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027a6:	4b45      	ldr	r3, [pc, #276]	; (80028bc <MX_GPIO_Init+0x138>)
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	2204      	movs	r2, #4
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027b2:	4b42      	ldr	r3, [pc, #264]	; (80028bc <MX_GPIO_Init+0x138>)
 80027b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b6:	4b41      	ldr	r3, [pc, #260]	; (80028bc <MX_GPIO_Init+0x138>)
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	430a      	orrs	r2, r1
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80027be:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <MX_GPIO_Init+0x138>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	4013      	ands	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <MX_GPIO_Init+0x138>)
 80027cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ce:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <MX_GPIO_Init+0x138>)
 80027d0:	2101      	movs	r1, #1
 80027d2:	430a      	orrs	r2, r1
 80027d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027d6:	4b39      	ldr	r3, [pc, #228]	; (80028bc <MX_GPIO_Init+0x138>)
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	2201      	movs	r2, #1
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	4b36      	ldr	r3, [pc, #216]	; (80028bc <MX_GPIO_Init+0x138>)
 80027e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e6:	4b35      	ldr	r3, [pc, #212]	; (80028bc <MX_GPIO_Init+0x138>)
 80027e8:	2102      	movs	r1, #2
 80027ea:	430a      	orrs	r2, r1
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80027ee:	4b33      	ldr	r3, [pc, #204]	; (80028bc <MX_GPIO_Init+0x138>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	2202      	movs	r2, #2
 80027f4:	4013      	ands	r3, r2
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80027fa:	23a0      	movs	r3, #160	; 0xa0
 80027fc:	05db      	lsls	r3, r3, #23
 80027fe:	2200      	movs	r2, #0
 8002800:	2120      	movs	r1, #32
 8002802:	0018      	movs	r0, r3
 8002804:	f002 f990 	bl	8004b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8002808:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <MX_GPIO_Init+0x13c>)
 800280a:	2200      	movs	r2, #0
 800280c:	21c0      	movs	r1, #192	; 0xc0
 800280e:	0018      	movs	r0, r3
 8002810:	f002 f98a 	bl	8004b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002814:	193b      	adds	r3, r7, r4
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	0192      	lsls	r2, r2, #6
 800281a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800281c:	193b      	adds	r3, r7, r4
 800281e:	2284      	movs	r2, #132	; 0x84
 8002820:	0392      	lsls	r2, r2, #14
 8002822:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	193b      	adds	r3, r7, r4
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800282a:	193b      	adds	r3, r7, r4
 800282c:	4a24      	ldr	r2, [pc, #144]	; (80028c0 <MX_GPIO_Init+0x13c>)
 800282e:	0019      	movs	r1, r3
 8002830:	0010      	movs	r0, r2
 8002832:	f002 f803 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002836:	193b      	adds	r3, r7, r4
 8002838:	2220      	movs	r2, #32
 800283a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283c:	193b      	adds	r3, r7, r4
 800283e:	2201      	movs	r2, #1
 8002840:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	193b      	adds	r3, r7, r4
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	193b      	adds	r3, r7, r4
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800284e:	193a      	adds	r2, r7, r4
 8002850:	23a0      	movs	r3, #160	; 0xa0
 8002852:	05db      	lsls	r3, r3, #23
 8002854:	0011      	movs	r1, r2
 8002856:	0018      	movs	r0, r3
 8002858:	f001 fff0 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 800285c:	193b      	adds	r3, r7, r4
 800285e:	22c0      	movs	r2, #192	; 0xc0
 8002860:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002862:	193b      	adds	r3, r7, r4
 8002864:	2201      	movs	r2, #1
 8002866:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	193b      	adds	r3, r7, r4
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	193b      	adds	r3, r7, r4
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002874:	193b      	adds	r3, r7, r4
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <MX_GPIO_Init+0x13c>)
 8002878:	0019      	movs	r1, r3
 800287a:	0010      	movs	r0, r2
 800287c:	f001 ffde 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8002880:	0021      	movs	r1, r4
 8002882:	187b      	adds	r3, r7, r1
 8002884:	2280      	movs	r2, #128	; 0x80
 8002886:	0052      	lsls	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800288a:	187b      	adds	r3, r7, r1
 800288c:	2288      	movs	r2, #136	; 0x88
 800288e:	0352      	lsls	r2, r2, #13
 8002890:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	187b      	adds	r3, r7, r1
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002898:	187b      	adds	r3, r7, r1
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <MX_GPIO_Init+0x13c>)
 800289c:	0019      	movs	r1, r3
 800289e:	0010      	movs	r0, r2
 80028a0:	f001 ffcc 	bl	800483c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	2100      	movs	r1, #0
 80028a8:	2007      	movs	r0, #7
 80028aa:	f001 fde7 	bl	800447c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80028ae:	2007      	movs	r0, #7
 80028b0:	f001 fdf9 	bl	80044a6 <HAL_NVIC_EnableIRQ>

}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b00b      	add	sp, #44	; 0x2c
 80028ba:	bd90      	pop	{r4, r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	50000800 	.word	0x50000800

080028c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <MX_I2C1_Init+0x74>)
 80028ca:	4a1c      	ldr	r2, [pc, #112]	; (800293c <MX_I2C1_Init+0x78>)
 80028cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <MX_I2C1_Init+0x74>)
 80028d0:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <MX_I2C1_Init+0x7c>)
 80028d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028d4:	4b18      	ldr	r3, [pc, #96]	; (8002938 <MX_I2C1_Init+0x74>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <MX_I2C1_Init+0x74>)
 80028dc:	2201      	movs	r2, #1
 80028de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <MX_I2C1_Init+0x74>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028e6:	4b14      	ldr	r3, [pc, #80]	; (8002938 <MX_I2C1_Init+0x74>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <MX_I2C1_Init+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <MX_I2C1_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <MX_I2C1_Init+0x74>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <MX_I2C1_Init+0x74>)
 8002900:	0018      	movs	r0, r3
 8002902:	f002 f96f 	bl	8004be4 <HAL_I2C_Init>
 8002906:	1e03      	subs	r3, r0, #0
 8002908:	d001      	beq.n	800290e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800290a:	f000 f97b 	bl	8002c04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <MX_I2C1_Init+0x74>)
 8002910:	2100      	movs	r1, #0
 8002912:	0018      	movs	r0, r3
 8002914:	f002 f9fc 	bl	8004d10 <HAL_I2CEx_ConfigAnalogFilter>
 8002918:	1e03      	subs	r3, r0, #0
 800291a:	d001      	beq.n	8002920 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800291c:	f000 f972 	bl	8002c04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <MX_I2C1_Init+0x74>)
 8002922:	2100      	movs	r1, #0
 8002924:	0018      	movs	r0, r3
 8002926:	f002 fa3f 	bl	8004da8 <HAL_I2CEx_ConfigDigitalFilter>
 800292a:	1e03      	subs	r3, r0, #0
 800292c:	d001      	beq.n	8002932 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800292e:	f000 f969 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000294 	.word	0x20000294
 800293c:	40005400 	.word	0x40005400
 8002940:	00707cbb 	.word	0x00707cbb

08002944 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	240c      	movs	r4, #12
 800294e:	193b      	adds	r3, r7, r4
 8002950:	0018      	movs	r0, r3
 8002952:	2314      	movs	r3, #20
 8002954:	001a      	movs	r2, r3
 8002956:	2100      	movs	r1, #0
 8002958:	f006 ff06 	bl	8009768 <memset>
  if(i2cHandle->Instance==I2C1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a17      	ldr	r2, [pc, #92]	; (80029c0 <HAL_I2C_MspInit+0x7c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d128      	bne.n	80029b8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_I2C_MspInit+0x80>)
 8002968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_I2C_MspInit+0x80>)
 800296c:	2102      	movs	r1, #2
 800296e:	430a      	orrs	r2, r1
 8002970:	62da      	str	r2, [r3, #44]	; 0x2c
 8002972:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <HAL_I2C_MspInit+0x80>)
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	2202      	movs	r2, #2
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800297e:	0021      	movs	r1, r4
 8002980:	187b      	adds	r3, r7, r1
 8002982:	22c0      	movs	r2, #192	; 0xc0
 8002984:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002986:	187b      	adds	r3, r7, r1
 8002988:	2212      	movs	r2, #18
 800298a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	187b      	adds	r3, r7, r1
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	187b      	adds	r3, r7, r1
 8002994:	2203      	movs	r2, #3
 8002996:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002998:	187b      	adds	r3, r7, r1
 800299a:	2201      	movs	r2, #1
 800299c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299e:	187b      	adds	r3, r7, r1
 80029a0:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <HAL_I2C_MspInit+0x84>)
 80029a2:	0019      	movs	r1, r3
 80029a4:	0010      	movs	r0, r2
 80029a6:	f001 ff49 	bl	800483c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_I2C_MspInit+0x80>)
 80029ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_I2C_MspInit+0x80>)
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	0389      	lsls	r1, r1, #14
 80029b4:	430a      	orrs	r2, r1
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b009      	add	sp, #36	; 0x24
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	40005400 	.word	0x40005400
 80029c4:	40021000 	.word	0x40021000
 80029c8:	50000400 	.word	0x50000400

080029cc <HAL_UART_RxCpltCallback>:
uint8_t UARTMessage[NRF24_PAYLOAD_SIZE];
uint8_t Message[NRF24_PAYLOAD_SIZE];
uint8_t MessageLength;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if(huart == &hlpuart1)
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_UART_RxCpltCallback+0x30>)
 80029d8:	429a      	cmp	r2, r3
 80029da:	d10b      	bne.n	80029f4 <HAL_UART_RxCpltCallback+0x28>
  {
	  HAL_UART_Receive_IT(&hlpuart1, UARTMessage, sizeof(UARTMessage)); // receive from pcb
 80029dc:	4908      	ldr	r1, [pc, #32]	; (8002a00 <HAL_UART_RxCpltCallback+0x34>)
 80029de:	4b07      	ldr	r3, [pc, #28]	; (80029fc <HAL_UART_RxCpltCallback+0x30>)
 80029e0:	22ff      	movs	r2, #255	; 0xff
 80029e2:	0018      	movs	r0, r3
 80029e4:	f004 fb70 	bl	80070c8 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit_IT(&huart2, UARTMessage, sizeof(UARTMessage)); // send to pc
 80029e8:	4905      	ldr	r1, [pc, #20]	; (8002a00 <HAL_UART_RxCpltCallback+0x34>)
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_UART_RxCpltCallback+0x38>)
 80029ec:	22ff      	movs	r2, #255	; 0xff
 80029ee:	0018      	movs	r0, r3
 80029f0:	f004 fafa 	bl	8006fe8 <HAL_UART_Transmit_IT>
  }
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	2000068c 	.word	0x2000068c
 8002a00:	200003e8 	.word	0x200003e8
 8002a04:	2000079c 	.word	0x2000079c

08002a08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if (htim == &htim6)
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d105      	bne.n	8002a24 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002a18:	23a0      	movs	r3, #160	; 0xa0
 8002a1a:	05db      	lsls	r3, r3, #23
 8002a1c:	2120      	movs	r1, #32
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f002 f89f 	bl	8004b62 <HAL_GPIO_TogglePin>
  }
}
 8002a24:	46c0      	nop			; (mov r8, r8)
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b002      	add	sp, #8
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	2000064c 	.word	0x2000064c

08002a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a36:	f001 f9ad 	bl	8003d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a3a:	f000 f863 	bl	8002b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a3e:	f7ff fea1 	bl	8002784 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a42:	f7ff fe81 	bl	8002748 <MX_DMA_Init>
  MX_I2C1_Init();
 8002a46:	f7ff ff3d 	bl	80028c4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002a4a:	f001 f853 	bl	8003af4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002a4e:	f001 f885 	bl	8003b5c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002a52:	f000 fde9 	bl	8003628 <MX_SPI1_Init>
  MX_TIM6_Init();
 8002a56:	f000 ffbd 	bl	80039d4 <MX_TIM6_Init>
  MX_ADC_Init();
 8002a5a:	f7ff fda7 	bl	80025ac <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 8002a5e:	f001 f817 	bl	8003a90 <MX_LPUART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim6);
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <main+0xa8>)
 8002a64:	0018      	movs	r0, r3
 8002a66:	f003 ffcb 	bl	8006a00 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&hlpuart1, UARTMessage, sizeof(UARTMessage));
 8002a6a:	491c      	ldr	r1, [pc, #112]	; (8002adc <main+0xac>)
 8002a6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <main+0xb0>)
 8002a6e:	22ff      	movs	r2, #255	; 0xff
 8002a70:	0018      	movs	r0, r3
 8002a72:	f004 fb29 	bl	80070c8 <HAL_UART_Receive_IT>

  // NRF RECEIVER
  nRF24_Init(&hspi1);
 8002a76:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <main+0xb4>)
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f000 fd69 	bl	8003550 <nRF24_Init>
  nRF24_SetRXAddress(0, "Odb");
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <main+0xb8>)
 8002a80:	0019      	movs	r1, r3
 8002a82:	2000      	movs	r0, #0
 8002a84:	f000 fbe4 	bl	8003250 <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Nad");
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <main+0xbc>)
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 fc26 	bl	80032dc <nRF24_SetTXAddress>
  nRF24_RX_Mode();
 8002a90:	f000 f9b0 	bl	8002df4 <nRF24_RX_Mode>
  uint8_t size = 0;
 8002a94:	1dfb      	adds	r3, r7, #7
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	  /////////////// NRF ///////////////

	  if(nRF24_RXAvailible())
 8002a9a:	f000 fd35 	bl	8003508 <nRF24_RXAvailible>
 8002a9e:	1e03      	subs	r3, r0, #0
 8002aa0:	d0fb      	beq.n	8002a9a <main+0x6a>
	  {
		  nRF24_ReadRXPaylaod(Nrf24_Message, &size);
 8002aa2:	1dfa      	adds	r2, r7, #7
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <main+0xc0>)
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f000 fd17 	bl	80034dc <nRF24_ReadRXPaylaod>
		  MessageLength = sprintf(Message, "%c\n\r", Nrf24_Message);
 8002aae:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <main+0xc0>)
 8002ab0:	4910      	ldr	r1, [pc, #64]	; (8002af4 <main+0xc4>)
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <main+0xc8>)
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f006 fdeb 	bl	8009690 <siprintf>
 8002aba:	0003      	movs	r3, r0
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <main+0xcc>)
 8002ac0:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <main+0xcc>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	23fa      	movs	r3, #250	; 0xfa
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	490a      	ldr	r1, [pc, #40]	; (8002af8 <main+0xc8>)
 8002ace:	480c      	ldr	r0, [pc, #48]	; (8002b00 <main+0xd0>)
 8002ad0:	f004 f9ea 	bl	8006ea8 <HAL_UART_Transmit>
	  if(nRF24_RXAvailible())
 8002ad4:	e7e1      	b.n	8002a9a <main+0x6a>
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	2000064c 	.word	0x2000064c
 8002adc:	200003e8 	.word	0x200003e8
 8002ae0:	2000068c 	.word	0x2000068c
 8002ae4:	200005f0 	.word	0x200005f0
 8002ae8:	0800d138 	.word	0x0800d138
 8002aec:	0800d13c 	.word	0x0800d13c
 8002af0:	200002e8 	.word	0x200002e8
 8002af4:	0800d140 	.word	0x0800d140
 8002af8:	200004e8 	.word	0x200004e8
 8002afc:	200005e7 	.word	0x200005e7
 8002b00:	2000079c 	.word	0x2000079c

08002b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b09d      	sub	sp, #116	; 0x74
 8002b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b0a:	2438      	movs	r4, #56	; 0x38
 8002b0c:	193b      	adds	r3, r7, r4
 8002b0e:	0018      	movs	r0, r3
 8002b10:	2338      	movs	r3, #56	; 0x38
 8002b12:	001a      	movs	r2, r3
 8002b14:	2100      	movs	r1, #0
 8002b16:	f006 fe27 	bl	8009768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b1a:	2324      	movs	r3, #36	; 0x24
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	0018      	movs	r0, r3
 8002b20:	2314      	movs	r3, #20
 8002b22:	001a      	movs	r2, r3
 8002b24:	2100      	movs	r1, #0
 8002b26:	f006 fe1f 	bl	8009768 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b2a:	003b      	movs	r3, r7
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	2324      	movs	r3, #36	; 0x24
 8002b30:	001a      	movs	r2, r3
 8002b32:	2100      	movs	r1, #0
 8002b34:	f006 fe18 	bl	8009768 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b38:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <SystemClock_Config+0xf8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a30      	ldr	r2, [pc, #192]	; (8002c00 <SystemClock_Config+0xfc>)
 8002b3e:	401a      	ands	r2, r3
 8002b40:	4b2e      	ldr	r3, [pc, #184]	; (8002bfc <SystemClock_Config+0xf8>)
 8002b42:	2180      	movs	r1, #128	; 0x80
 8002b44:	0109      	lsls	r1, r1, #4
 8002b46:	430a      	orrs	r2, r1
 8002b48:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002b4a:	193b      	adds	r3, r7, r4
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002b50:	193b      	adds	r3, r7, r4
 8002b52:	22a0      	movs	r2, #160	; 0xa0
 8002b54:	02d2      	lsls	r2, r2, #11
 8002b56:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b58:	0021      	movs	r1, r4
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	2210      	movs	r2, #16
 8002b64:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	2202      	movs	r2, #2
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	2280      	movs	r2, #128	; 0x80
 8002b70:	0252      	lsls	r2, r2, #9
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	22c0      	movs	r2, #192	; 0xc0
 8002b78:	0312      	lsls	r2, r2, #12
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002b7c:	187b      	adds	r3, r7, r1
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	03d2      	lsls	r2, r2, #15
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	0018      	movs	r0, r3
 8002b88:	f002 f95a 	bl	8004e40 <HAL_RCC_OscConfig>
 8002b8c:	1e03      	subs	r3, r0, #0
 8002b8e:	d001      	beq.n	8002b94 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002b90:	f000 f838 	bl	8002c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b94:	2124      	movs	r1, #36	; 0x24
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	220f      	movs	r2, #15
 8002b9a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bae:	187b      	adds	r3, r7, r1
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002bb4:	187b      	adds	r3, r7, r1
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f002 fd05 	bl	80055c8 <HAL_RCC_ClockConfig>
 8002bbe:	1e03      	subs	r3, r0, #0
 8002bc0:	d001      	beq.n	8002bc6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002bc2:	f000 f81f 	bl	8002c04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002bc6:	003b      	movs	r3, r7
 8002bc8:	220f      	movs	r2, #15
 8002bca:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bcc:	003b      	movs	r3, r7
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bd2:	003b      	movs	r3, r7
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002bd8:	003b      	movs	r3, r7
 8002bda:	2200      	movs	r2, #0
 8002bdc:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002bde:	003b      	movs	r3, r7
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002be4:	003b      	movs	r3, r7
 8002be6:	0018      	movs	r0, r3
 8002be8:	f002 ff12 	bl	8005a10 <HAL_RCCEx_PeriphCLKConfig>
 8002bec:	1e03      	subs	r3, r0, #0
 8002bee:	d001      	beq.n	8002bf4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8002bf0:	f000 f808 	bl	8002c04 <Error_Handler>
  }
}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b01d      	add	sp, #116	; 0x74
 8002bfa:	bd90      	pop	{r4, r7, pc}
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	ffffe7ff 	.word	0xffffe7ff

08002c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c08:	b672      	cpsid	i
}
 8002c0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c0c:	e7fe      	b.n	8002c0c <Error_Handler+0x8>

08002c0e <nRF24_Delay_ms>:

#define NRF24_CE_HIGH           HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW            HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	0002      	movs	r2, r0
 8002c16:	1dfb      	adds	r3, r7, #7
 8002c18:	701a      	strb	r2, [r3, #0]
        HAL_Delay(Time);
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f001 f928 	bl	8003e74 <HAL_Delay>
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	000a      	movs	r2, r1
 8002c36:	1cfb      	adds	r3, r7, #3
 8002c38:	701a      	strb	r2, [r3, #0]
        HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8002c3a:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <nRF24_SendSpi+0x2c>)
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	1cfb      	adds	r3, r7, #3
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	23fa      	movs	r3, #250	; 0xfa
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	f003 f903 	bl	8005e54 <HAL_SPI_Transmit>
}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b002      	add	sp, #8
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	200005e8 	.word	0x200005e8

08002c5c <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	000a      	movs	r2, r1
 8002c66:	1cfb      	adds	r3, r7, #3
 8002c68:	701a      	strb	r2, [r3, #0]
        HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <nRF24_ReadSpi+0x2c>)
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	1cfb      	adds	r3, r7, #3
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	23fa      	movs	r3, #250	; 0xfa
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	f003 fa49 	bl	8006110 <HAL_SPI_Receive>
}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b002      	add	sp, #8
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	200005e8 	.word	0x200005e8

08002c8c <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	0002      	movs	r2, r0
 8002c94:	1dfb      	adds	r3, r7, #7
 8002c96:	701a      	strb	r2, [r3, #0]
        uint8_t result;

        reg = NRF24_CMD_R_REGISTER | reg;
 8002c98:	1dfb      	adds	r3, r7, #7
 8002c9a:	781a      	ldrb	r2, [r3, #0]
 8002c9c:	1dfb      	adds	r3, r7, #7
 8002c9e:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <nRF24_ReadRegister+0x50>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2140      	movs	r1, #64	; 0x40
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f001 ff3e 	bl	8004b28 <HAL_GPIO_WritePin>
        nRF24_SendSpi(&reg, 1);
 8002cac:	1dfb      	adds	r3, r7, #7
 8002cae:	2101      	movs	r1, #1
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7ff ffbb 	bl	8002c2c <nRF24_SendSpi>
        nRF24_ReadSpi(&result, 1);
 8002cb6:	240f      	movs	r4, #15
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	2101      	movs	r1, #1
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7ff ffcd 	bl	8002c5c <nRF24_ReadSpi>
        NRF24_CSN_HIGH;
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <nRF24_ReadRegister+0x50>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	2140      	movs	r1, #64	; 0x40
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f001 ff2d 	bl	8004b28 <HAL_GPIO_WritePin>

        return result;
 8002cce:	193b      	adds	r3, r7, r4
 8002cd0:	781b      	ldrb	r3, [r3, #0]
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b005      	add	sp, #20
 8002cd8:	bd90      	pop	{r4, r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	50000800 	.word	0x50000800

08002ce0 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6039      	str	r1, [r7, #0]
 8002ce8:	0011      	movs	r1, r2
 8002cea:	1dfb      	adds	r3, r7, #7
 8002cec:	1c02      	adds	r2, r0, #0
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	1dbb      	adds	r3, r7, #6
 8002cf2:	1c0a      	adds	r2, r1, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
        reg = NRF24_CMD_R_REGISTER | reg;
 8002cf6:	1dfb      	adds	r3, r7, #7
 8002cf8:	781a      	ldrb	r2, [r3, #0]
 8002cfa:	1dfb      	adds	r3, r7, #7
 8002cfc:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <nRF24_ReadRegisters+0x58>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	2140      	movs	r1, #64	; 0x40
 8002d04:	0018      	movs	r0, r3
 8002d06:	f001 ff0f 	bl	8004b28 <HAL_GPIO_WritePin>

        nRF24_SendSpi(&reg, 1);
 8002d0a:	1dfb      	adds	r3, r7, #7
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f7ff ff8c 	bl	8002c2c <nRF24_SendSpi>
        nRF24_ReadSpi(ret, len);
 8002d14:	1dbb      	adds	r3, r7, #6
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	0011      	movs	r1, r2
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7ff ff9d 	bl	8002c5c <nRF24_ReadSpi>

        NRF24_CSN_HIGH;
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <nRF24_ReadRegisters+0x58>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	2140      	movs	r1, #64	; 0x40
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f001 fefd 	bl	8004b28 <HAL_GPIO_WritePin>
}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b002      	add	sp, #8
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	50000800 	.word	0x50000800

08002d3c <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	0002      	movs	r2, r0
 8002d44:	1dfb      	adds	r3, r7, #7
 8002d46:	701a      	strb	r2, [r3, #0]
 8002d48:	1dbb      	adds	r3, r7, #6
 8002d4a:	1c0a      	adds	r2, r1, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
        uint8_t tmp[2];

        tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8002d4e:	1dfb      	adds	r3, r7, #7
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2220      	movs	r2, #32
 8002d54:	4313      	orrs	r3, r2
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	240c      	movs	r4, #12
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	701a      	strb	r2, [r3, #0]
        tmp[1] = val;
 8002d5e:	193b      	adds	r3, r7, r4
 8002d60:	1dba      	adds	r2, r7, #6
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	705a      	strb	r2, [r3, #1]

        NRF24_CSN_LOW;
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <nRF24_WriteRegister+0x54>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2140      	movs	r1, #64	; 0x40
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f001 fedb 	bl	8004b28 <HAL_GPIO_WritePin>

        nRF24_SendSpi(tmp, 2);
 8002d72:	193b      	adds	r3, r7, r4
 8002d74:	2102      	movs	r1, #2
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7ff ff58 	bl	8002c2c <nRF24_SendSpi>

        NRF24_CSN_HIGH;
 8002d7c:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <nRF24_WriteRegister+0x54>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	2140      	movs	r1, #64	; 0x40
 8002d82:	0018      	movs	r0, r3
 8002d84:	f001 fed0 	bl	8004b28 <HAL_GPIO_WritePin>
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b005      	add	sp, #20
 8002d8e:	bd90      	pop	{r4, r7, pc}
 8002d90:	50000800 	.word	0x50000800

08002d94 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6039      	str	r1, [r7, #0]
 8002d9c:	0011      	movs	r1, r2
 8002d9e:	1dfb      	adds	r3, r7, #7
 8002da0:	1c02      	adds	r2, r0, #0
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	1dbb      	adds	r3, r7, #6
 8002da6:	1c0a      	adds	r2, r1, #0
 8002da8:	701a      	strb	r2, [r3, #0]
        reg = NRF24_CMD_W_REGISTER | reg;
 8002daa:	1dfb      	adds	r3, r7, #7
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2220      	movs	r2, #32
 8002db0:	4313      	orrs	r3, r2
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8002db8:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <nRF24_WriteRegisters+0x5c>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2140      	movs	r1, #64	; 0x40
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f001 feb2 	bl	8004b28 <HAL_GPIO_WritePin>

        nRF24_SendSpi(&reg, 1);
 8002dc4:	1dfb      	adds	r3, r7, #7
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7ff ff2f 	bl	8002c2c <nRF24_SendSpi>
        nRF24_SendSpi(val, len);
 8002dce:	1dbb      	adds	r3, r7, #6
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	0011      	movs	r1, r2
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f7ff ff28 	bl	8002c2c <nRF24_SendSpi>

        NRF24_CSN_HIGH;
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <nRF24_WriteRegisters+0x5c>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	2140      	movs	r1, #64	; 0x40
 8002de2:	0018      	movs	r0, r3
 8002de4:	f001 fea0 	bl	8004b28 <HAL_GPIO_WritePin>
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	50000800 	.word	0x50000800

08002df4 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
        uint8_t config = nRF24_ReadConfig();
 8002dfa:	1dfc      	adds	r4, r7, #7
 8002dfc:	f000 f830 	bl	8002e60 <nRF24_ReadConfig>
 8002e00:	0003      	movs	r3, r0
 8002e02:	7023      	strb	r3, [r4, #0]
        // Restore pipe 0 adress after comeback from TX mode
        nRF24_SetRXAddress(0, addr_p0_backup);
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <nRF24_RX_Mode+0x64>)
 8002e06:	0019      	movs	r1, r3
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f000 fa21 	bl	8003250 <nRF24_SetRXAddress>
        // PWR_UP bit set
        config |= (1<<NRF24_PWR_UP);
 8002e0e:	1dfb      	adds	r3, r7, #7
 8002e10:	1dfa      	adds	r2, r7, #7
 8002e12:	7812      	ldrb	r2, [r2, #0]
 8002e14:	2102      	movs	r1, #2
 8002e16:	430a      	orrs	r2, r1
 8002e18:	701a      	strb	r2, [r3, #0]
        // PRIM_RX bit set
        config |= (1<<NRF24_PRIM_RX);
 8002e1a:	1dfb      	adds	r3, r7, #7
 8002e1c:	1dfa      	adds	r2, r7, #7
 8002e1e:	7812      	ldrb	r2, [r2, #0]
 8002e20:	2101      	movs	r1, #1
 8002e22:	430a      	orrs	r2, r1
 8002e24:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 8002e26:	1dfb      	adds	r3, r7, #7
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 f821 	bl	8002e72 <nRF24_WriteConfig>
        // Reset status
        nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002e30:	2070      	movs	r0, #112	; 0x70
 8002e32:	f000 f895 	bl	8002f60 <nRF24_WriteStatus>
        // Flush RX
        nRF24_FlushRX();
 8002e36:	f000 f8a3 	bl	8002f80 <nRF24_FlushRX>
        // Flush TX
        nRF24_FlushTX();
 8002e3a:	f000 f8bf 	bl	8002fbc <nRF24_FlushTX>

        NRF24_CE_HIGH;
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <nRF24_RX_Mode+0x68>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	2180      	movs	r1, #128	; 0x80
 8002e44:	0018      	movs	r0, r3
 8002e46:	f001 fe6f 	bl	8004b28 <HAL_GPIO_WritePin>
        nRF24_Delay_ms(1);
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f7ff fedf 	bl	8002c0e <nRF24_Delay_ms>
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b003      	add	sp, #12
 8002e56:	bd90      	pop	{r4, r7, pc}
 8002e58:	200005ec 	.word	0x200005ec
 8002e5c:	50000800 	.word	0x50000800

08002e60 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
        return (nRF24_ReadRegister(NRF24_CONFIG));
 8002e64:	2000      	movs	r0, #0
 8002e66:	f7ff ff11 	bl	8002c8c <nRF24_ReadRegister>
 8002e6a:	0003      	movs	r3, r0
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	0002      	movs	r2, r0
 8002e7a:	1dfb      	adds	r3, r7, #7
 8002e7c:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_CONFIG, conf);
 8002e7e:	1dfb      	adds	r3, r7, #7
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	0019      	movs	r1, r3
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7ff ff59 	bl	8002d3c <nRF24_WriteRegister>
}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b002      	add	sp, #8
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8002e92:	b5b0      	push	{r4, r5, r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	0002      	movs	r2, r0
 8002e9a:	1dfb      	adds	r3, r7, #7
 8002e9c:	701a      	strb	r2, [r3, #0]
        uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002e9e:	250f      	movs	r5, #15
 8002ea0:	197c      	adds	r4, r7, r5
 8002ea2:	2006      	movs	r0, #6
 8002ea4:	f7ff fef2 	bl	8002c8c <nRF24_ReadRegister>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	7023      	strb	r3, [r4, #0]
        rf_setup &= 0xF8; // Clear PWR bits
 8002eac:	0028      	movs	r0, r5
 8002eae:	183b      	adds	r3, r7, r0
 8002eb0:	183a      	adds	r2, r7, r0
 8002eb2:	7812      	ldrb	r2, [r2, #0]
 8002eb4:	2107      	movs	r1, #7
 8002eb6:	438a      	bics	r2, r1
 8002eb8:	701a      	strb	r2, [r3, #0]
        rf_setup |= (lev<<1);
 8002eba:	1dfb      	adds	r3, r7, #7
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	b25a      	sxtb	r2, r3
 8002ec2:	183b      	adds	r3, r7, r0
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b25b      	sxtb	r3, r3
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	b25a      	sxtb	r2, r3
 8002ecc:	183b      	adds	r3, r7, r0
 8002ece:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002ed0:	183b      	adds	r3, r7, r0
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	2006      	movs	r0, #6
 8002ed8:	f7ff ff30 	bl	8002d3c <nRF24_WriteRegister>
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b004      	add	sp, #16
 8002ee2:	bdb0      	pop	{r4, r5, r7, pc}

08002ee4 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8002ee4:	b5b0      	push	{r4, r5, r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	0002      	movs	r2, r0
 8002eec:	1dfb      	adds	r3, r7, #7
 8002eee:	701a      	strb	r2, [r3, #0]
        uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002ef0:	250f      	movs	r5, #15
 8002ef2:	197c      	adds	r4, r7, r5
 8002ef4:	2006      	movs	r0, #6
 8002ef6:	f7ff fec9 	bl	8002c8c <nRF24_ReadRegister>
 8002efa:	0003      	movs	r3, r0
 8002efc:	7023      	strb	r3, [r4, #0]
        rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002efe:	0028      	movs	r0, r5
 8002f00:	183b      	adds	r3, r7, r0
 8002f02:	183a      	adds	r2, r7, r0
 8002f04:	7812      	ldrb	r2, [r2, #0]
 8002f06:	2128      	movs	r1, #40	; 0x28
 8002f08:	438a      	bics	r2, r1
 8002f0a:	701a      	strb	r2, [r3, #0]
        if(dr == NRF24_RF_DR_250KBPS)
 8002f0c:	1dfb      	adds	r3, r7, #7
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d106      	bne.n	8002f22 <nRF24_SetDataRate+0x3e>
                rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002f14:	183b      	adds	r3, r7, r0
 8002f16:	183a      	adds	r2, r7, r0
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	e00a      	b.n	8002f38 <nRF24_SetDataRate+0x54>
        else if(dr == NRF24_RF_DR_2MBPS)
 8002f22:	1dfb      	adds	r3, r7, #7
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d106      	bne.n	8002f38 <nRF24_SetDataRate+0x54>
                rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002f2a:	220f      	movs	r2, #15
 8002f2c:	18bb      	adds	r3, r7, r2
 8002f2e:	18ba      	adds	r2, r7, r2
 8002f30:	7812      	ldrb	r2, [r2, #0]
 8002f32:	2108      	movs	r1, #8
 8002f34:	430a      	orrs	r2, r1
 8002f36:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002f38:	230f      	movs	r3, #15
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	0019      	movs	r1, r3
 8002f40:	2006      	movs	r0, #6
 8002f42:	f7ff fefb 	bl	8002d3c <nRF24_WriteRegister>
}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b004      	add	sp, #16
 8002f4c:	bdb0      	pop	{r4, r5, r7, pc}

08002f4e <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	af00      	add	r7, sp, #0
        return (nRF24_ReadRegister(NRF24_STATUS));
 8002f52:	2007      	movs	r0, #7
 8002f54:	f7ff fe9a 	bl	8002c8c <nRF24_ReadRegister>
 8002f58:	0003      	movs	r3, r0
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	0002      	movs	r2, r0
 8002f68:	1dfb      	adds	r3, r7, #7
 8002f6a:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_STATUS, st);
 8002f6c:	1dfb      	adds	r3, r7, #7
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	0019      	movs	r1, r3
 8002f72:	2007      	movs	r0, #7
 8002f74:	f7ff fee2 	bl	8002d3c <nRF24_WriteRegister>
}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <nRF24_FlushRX>:
{
        return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
        uint8_t command = NRF24_CMD_FLUSH_RX;
 8002f86:	1dfb      	adds	r3, r7, #7
 8002f88:	22e2      	movs	r2, #226	; 0xe2
 8002f8a:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <nRF24_FlushRX+0x38>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2140      	movs	r1, #64	; 0x40
 8002f92:	0018      	movs	r0, r3
 8002f94:	f001 fdc8 	bl	8004b28 <HAL_GPIO_WritePin>
        nRF24_SendSpi(&command, 1);
 8002f98:	1dfb      	adds	r3, r7, #7
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f7ff fe45 	bl	8002c2c <nRF24_SendSpi>
        NRF24_CSN_HIGH;
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <nRF24_FlushRX+0x38>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	2140      	movs	r1, #64	; 0x40
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f001 fdbd 	bl	8004b28 <HAL_GPIO_WritePin>
}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b002      	add	sp, #8
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	50000800 	.word	0x50000800

08002fbc <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
        uint8_t command = NRF24_CMD_FLUSH_TX;
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	22e1      	movs	r2, #225	; 0xe1
 8002fc6:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <nRF24_FlushTX+0x38>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2140      	movs	r1, #64	; 0x40
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f001 fdaa 	bl	8004b28 <HAL_GPIO_WritePin>
        nRF24_SendSpi(&command, 1);
 8002fd4:	1dfb      	adds	r3, r7, #7
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f7ff fe27 	bl	8002c2c <nRF24_SendSpi>
        NRF24_CSN_HIGH;
 8002fde:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <nRF24_FlushTX+0x38>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	2140      	movs	r1, #64	; 0x40
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f001 fd9f 	bl	8004b28 <HAL_GPIO_WritePin>
}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b002      	add	sp, #8
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	50000800 	.word	0x50000800

08002ff8 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	0002      	movs	r2, r0
 8003000:	1dfb      	adds	r3, r7, #7
 8003002:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 8003004:	250f      	movs	r5, #15
 8003006:	197c      	adds	r4, r7, r5
 8003008:	f7ff ff2a 	bl	8002e60 <nRF24_ReadConfig>
 800300c:	0003      	movs	r3, r0
 800300e:	7023      	strb	r3, [r4, #0]

        if(onoff)
 8003010:	1dfb      	adds	r3, r7, #7
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d006      	beq.n	8003026 <nRF24_EnableCRC+0x2e>
                config |= (1<<NRF24_EN_CRC);
 8003018:	197b      	adds	r3, r7, r5
 800301a:	197a      	adds	r2, r7, r5
 800301c:	7812      	ldrb	r2, [r2, #0]
 800301e:	2108      	movs	r1, #8
 8003020:	430a      	orrs	r2, r1
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e006      	b.n	8003034 <nRF24_EnableCRC+0x3c>
        else
                config &= ~(1<<NRF24_EN_CRC);
 8003026:	220f      	movs	r2, #15
 8003028:	18bb      	adds	r3, r7, r2
 800302a:	18ba      	adds	r2, r7, r2
 800302c:	7812      	ldrb	r2, [r2, #0]
 800302e:	2108      	movs	r1, #8
 8003030:	438a      	bics	r2, r1
 8003032:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 8003034:	230f      	movs	r3, #15
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	0018      	movs	r0, r3
 800303c:	f7ff ff19 	bl	8002e72 <nRF24_WriteConfig>
}
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b004      	add	sp, #16
 8003046:	bdb0      	pop	{r4, r5, r7, pc}

08003048 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8003048:	b5b0      	push	{r4, r5, r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	0002      	movs	r2, r0
 8003050:	1dfb      	adds	r3, r7, #7
 8003052:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 8003054:	250f      	movs	r5, #15
 8003056:	197c      	adds	r4, r7, r5
 8003058:	f7ff ff02 	bl	8002e60 <nRF24_ReadConfig>
 800305c:	0003      	movs	r3, r0
 800305e:	7023      	strb	r3, [r4, #0]
        if(crcl == NRF24_CRC_WIDTH_2B)
 8003060:	1dfb      	adds	r3, r7, #7
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d106      	bne.n	8003076 <nRF24_SetCRCLength+0x2e>
                config |= (1<<NRF24_CRCO);
 8003068:	197b      	adds	r3, r7, r5
 800306a:	197a      	adds	r2, r7, r5
 800306c:	7812      	ldrb	r2, [r2, #0]
 800306e:	2104      	movs	r1, #4
 8003070:	430a      	orrs	r2, r1
 8003072:	701a      	strb	r2, [r3, #0]
 8003074:	e006      	b.n	8003084 <nRF24_SetCRCLength+0x3c>
        else
                config &= ~(1<<NRF24_CRCO);
 8003076:	220f      	movs	r2, #15
 8003078:	18bb      	adds	r3, r7, r2
 800307a:	18ba      	adds	r2, r7, r2
 800307c:	7812      	ldrb	r2, [r2, #0]
 800307e:	2104      	movs	r1, #4
 8003080:	438a      	bics	r2, r1
 8003082:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 8003084:	230f      	movs	r3, #15
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	0018      	movs	r0, r3
 800308c:	f7ff fef1 	bl	8002e72 <nRF24_WriteConfig>
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b004      	add	sp, #16
 8003096:	bdb0      	pop	{r4, r5, r7, pc}

08003098 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{ //ard = delay   arc = count (ilość i odległość czasowa
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	0002      	movs	r2, r0
 80030a0:	1dfb      	adds	r3, r7, #7
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	1dbb      	adds	r3, r7, #6
 80030a6:	1c0a      	adds	r2, r1, #0
 80030a8:	701a      	strb	r2, [r3, #0]
        // ard * 250us, arc repeats
        nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80030aa:	1dfb      	adds	r3, r7, #7
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	b25a      	sxtb	r2, r3
 80030b2:	1dbb      	adds	r3, r7, #6
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b25b      	sxtb	r3, r3
 80030b8:	210f      	movs	r1, #15
 80030ba:	400b      	ands	r3, r1
 80030bc:	b25b      	sxtb	r3, r3
 80030be:	4313      	orrs	r3, r2
 80030c0:	b25b      	sxtb	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	0019      	movs	r1, r3
 80030c6:	2004      	movs	r0, #4
 80030c8:	f7ff fe38 	bl	8002d3c <nRF24_WriteRegister>
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b002      	add	sp, #8
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	0002      	movs	r2, r0
 80030dc:	1dfb      	adds	r3, r7, #7
 80030de:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80030e0:	1dfb      	adds	r3, r7, #7
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	227f      	movs	r2, #127	; 0x7f
 80030e6:	4013      	ands	r3, r2
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	0019      	movs	r1, r3
 80030ec:	2005      	movs	r0, #5
 80030ee:	f7ff fe25 	bl	8002d3c <nRF24_WriteRegister>
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b002      	add	sp, #8
 80030f8:	bd80      	pop	{r7, pc}

080030fa <nRF24_EnablePipe>:
                pipe = 5; // Block too high pipe number
        nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80030fa:	b5b0      	push	{r4, r5, r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	0002      	movs	r2, r0
 8003102:	1dfb      	adds	r3, r7, #7
 8003104:	701a      	strb	r2, [r3, #0]
 8003106:	1dbb      	adds	r3, r7, #6
 8003108:	1c0a      	adds	r2, r1, #0
 800310a:	701a      	strb	r2, [r3, #0]
        if(pipe > 5)
 800310c:	1dfb      	adds	r3, r7, #7
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b05      	cmp	r3, #5
 8003112:	d902      	bls.n	800311a <nRF24_EnablePipe+0x20>
                pipe = 5; // Block too high pipe number
 8003114:	1dfb      	adds	r3, r7, #7
 8003116:	2205      	movs	r2, #5
 8003118:	701a      	strb	r2, [r3, #0]
        uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800311a:	250f      	movs	r5, #15
 800311c:	197c      	adds	r4, r7, r5
 800311e:	2002      	movs	r0, #2
 8003120:	f7ff fdb4 	bl	8002c8c <nRF24_ReadRegister>
 8003124:	0003      	movs	r3, r0
 8003126:	7023      	strb	r3, [r4, #0]
        if(onoff == 1)
 8003128:	1dbb      	adds	r3, r7, #6
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10d      	bne.n	800314c <nRF24_EnablePipe+0x52>
                enable_pipe |= (1<<pipe);
 8003130:	1dfb      	adds	r3, r7, #7
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2201      	movs	r2, #1
 8003136:	409a      	lsls	r2, r3
 8003138:	0013      	movs	r3, r2
 800313a:	b25a      	sxtb	r2, r3
 800313c:	197b      	adds	r3, r7, r5
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	b25b      	sxtb	r3, r3
 8003142:	4313      	orrs	r3, r2
 8003144:	b25a      	sxtb	r2, r3
 8003146:	197b      	adds	r3, r7, r5
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e00f      	b.n	800316c <nRF24_EnablePipe+0x72>
        else
                enable_pipe &= ~(1<<pipe);
 800314c:	1dfb      	adds	r3, r7, #7
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2201      	movs	r2, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	0013      	movs	r3, r2
 8003156:	b25b      	sxtb	r3, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	b25b      	sxtb	r3, r3
 800315c:	210f      	movs	r1, #15
 800315e:	187a      	adds	r2, r7, r1
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	b252      	sxtb	r2, r2
 8003164:	4013      	ands	r3, r2
 8003166:	b25a      	sxtb	r2, r3
 8003168:	187b      	adds	r3, r7, r1
 800316a:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800316c:	230f      	movs	r3, #15
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	0019      	movs	r1, r3
 8003174:	2002      	movs	r0, #2
 8003176:	f7ff fde1 	bl	8002d3c <nRF24_WriteRegister>
}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	46bd      	mov	sp, r7
 800317e:	b004      	add	sp, #16
 8003180:	bdb0      	pop	{r4, r5, r7, pc}

08003182 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8003182:	b5b0      	push	{r4, r5, r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	0002      	movs	r2, r0
 800318a:	1dfb      	adds	r3, r7, #7
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	1dbb      	adds	r3, r7, #6
 8003190:	1c0a      	adds	r2, r1, #0
 8003192:	701a      	strb	r2, [r3, #0]
        if(pipe > 5)
 8003194:	1dfb      	adds	r3, r7, #7
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b05      	cmp	r3, #5
 800319a:	d902      	bls.n	80031a2 <nRF24_AutoACK+0x20>
                pipe = 5; // Block too high pipe number
 800319c:	1dfb      	adds	r3, r7, #7
 800319e:	2205      	movs	r2, #5
 80031a0:	701a      	strb	r2, [r3, #0]
        uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80031a2:	250f      	movs	r5, #15
 80031a4:	197c      	adds	r4, r7, r5
 80031a6:	2001      	movs	r0, #1
 80031a8:	f7ff fd70 	bl	8002c8c <nRF24_ReadRegister>
 80031ac:	0003      	movs	r3, r0
 80031ae:	7023      	strb	r3, [r4, #0]
        if(onoff == 1)
 80031b0:	1dbb      	adds	r3, r7, #6
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d10d      	bne.n	80031d4 <nRF24_AutoACK+0x52>
                enaa |= (1<<pipe);
 80031b8:	1dfb      	adds	r3, r7, #7
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2201      	movs	r2, #1
 80031be:	409a      	lsls	r2, r3
 80031c0:	0013      	movs	r3, r2
 80031c2:	b25a      	sxtb	r2, r3
 80031c4:	197b      	adds	r3, r7, r5
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	b25b      	sxtb	r3, r3
 80031ca:	4313      	orrs	r3, r2
 80031cc:	b25a      	sxtb	r2, r3
 80031ce:	197b      	adds	r3, r7, r5
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e00f      	b.n	80031f4 <nRF24_AutoACK+0x72>
        else
                enaa &= ~(1<<pipe);
 80031d4:	1dfb      	adds	r3, r7, #7
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2201      	movs	r2, #1
 80031da:	409a      	lsls	r2, r3
 80031dc:	0013      	movs	r3, r2
 80031de:	b25b      	sxtb	r3, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	b25b      	sxtb	r3, r3
 80031e4:	210f      	movs	r1, #15
 80031e6:	187a      	adds	r2, r7, r1
 80031e8:	7812      	ldrb	r2, [r2, #0]
 80031ea:	b252      	sxtb	r2, r2
 80031ec:	4013      	ands	r3, r2
 80031ee:	b25a      	sxtb	r2, r3
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80031f4:	230f      	movs	r3, #15
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	0019      	movs	r1, r3
 80031fc:	2001      	movs	r0, #1
 80031fe:	f7ff fd9d 	bl	8002d3c <nRF24_WriteRegister>
}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	b004      	add	sp, #16
 8003208:	bdb0      	pop	{r4, r5, r7, pc}

0800320a <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	0002      	movs	r2, r0
 8003212:	1dfb      	adds	r3, r7, #7
 8003214:	701a      	strb	r2, [r3, #0]
        if(size > 5)
 8003216:	1dfb      	adds	r3, r7, #7
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d902      	bls.n	8003224 <nRF24_SetAddressWidth+0x1a>
                size = 5; // Maximum are 5 bytes
 800321e:	1dfb      	adds	r3, r7, #7
 8003220:	2205      	movs	r2, #5
 8003222:	701a      	strb	r2, [r3, #0]
        if(size < 3)
 8003224:	1dfb      	adds	r3, r7, #7
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d802      	bhi.n	8003232 <nRF24_SetAddressWidth+0x28>
                size = 3; // Minimum are 3 bytes
 800322c:	1dfb      	adds	r3, r7, #7
 800322e:	2203      	movs	r2, #3
 8003230:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8003232:	1dfb      	adds	r3, r7, #7
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	3b02      	subs	r3, #2
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2203      	movs	r2, #3
 800323c:	4013      	ands	r3, r2
 800323e:	b2db      	uxtb	r3, r3
 8003240:	0019      	movs	r1, r3
 8003242:	2003      	movs	r0, #3
 8003244:	f7ff fd7a 	bl	8002d3c <nRF24_WriteRegister>
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}

08003250 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	0002      	movs	r2, r0
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	1dfb      	adds	r3, r7, #7
 800325c:	701a      	strb	r2, [r3, #0]
        // pipe 0 and pipe 1 are fully 40-bits storaged
        // pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
        // pipe 0 and 1 are LSByte first so they are needed to reverse address
        if((pipe == 0) || (pipe == 1))
 800325e:	1dfb      	adds	r3, r7, #7
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <nRF24_SetRXAddress+0x1e>
 8003266:	1dfb      	adds	r3, r7, #7
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d126      	bne.n	80032bc <nRF24_SetRXAddress+0x6c>
        {
                uint8_t i;
                uint8_t address_rev[NRF24_ADDR_SIZE];
                for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800326e:	230f      	movs	r3, #15
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e011      	b.n	800329c <nRF24_SetRXAddress+0x4c>
                        address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8003278:	200f      	movs	r0, #15
 800327a:	183b      	adds	r3, r7, r0
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	18d2      	adds	r2, r2, r3
 8003282:	183b      	adds	r3, r7, r0
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2102      	movs	r1, #2
 8003288:	1acb      	subs	r3, r1, r3
 800328a:	7811      	ldrb	r1, [r2, #0]
 800328c:	220c      	movs	r2, #12
 800328e:	18ba      	adds	r2, r7, r2
 8003290:	54d1      	strb	r1, [r2, r3]
                for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8003292:	183b      	adds	r3, r7, r0
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	183b      	adds	r3, r7, r0
 8003298:	3201      	adds	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	230f      	movs	r3, #15
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d9e8      	bls.n	8003278 <nRF24_SetRXAddress+0x28>
                nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80032a6:	1dfb      	adds	r3, r7, #7
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	330a      	adds	r3, #10
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	220c      	movs	r2, #12
 80032b0:	18b9      	adds	r1, r7, r2
 80032b2:	2203      	movs	r2, #3
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7ff fd6d 	bl	8002d94 <nRF24_WriteRegisters>
        {
 80032ba:	e00b      	b.n	80032d4 <nRF24_SetRXAddress+0x84>
        }
        else
                nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80032bc:	1dfb      	adds	r3, r7, #7
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	330a      	adds	r3, #10
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	3302      	adds	r3, #2
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	0019      	movs	r1, r3
 80032cc:	0010      	movs	r0, r2
 80032ce:	f7ff fd35 	bl	8002d3c <nRF24_WriteRegister>
}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b004      	add	sp, #16
 80032da:	bd80      	pop	{r7, pc}

080032dc <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
        // TX address is storaged similar to RX pipe 0 - LSByte first
        uint8_t i;
        uint8_t address_rev[NRF24_ADDR_SIZE];

        nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80032e4:	230c      	movs	r3, #12
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	2203      	movs	r2, #3
 80032ea:	0019      	movs	r1, r3
 80032ec:	200a      	movs	r0, #10
 80032ee:	f7ff fcf7 	bl	8002ce0 <nRF24_ReadRegisters>
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80032f2:	230f      	movs	r3, #15
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	e010      	b.n	800331e <nRF24_SetTXAddress+0x42>
                addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80032fc:	200f      	movs	r0, #15
 80032fe:	183b      	adds	r3, r7, r0
 8003300:	781a      	ldrb	r2, [r3, #0]
 8003302:	183b      	adds	r3, r7, r0
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2102      	movs	r1, #2
 8003308:	1acb      	subs	r3, r1, r3
 800330a:	210c      	movs	r1, #12
 800330c:	1879      	adds	r1, r7, r1
 800330e:	5c89      	ldrb	r1, [r1, r2]
 8003310:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <nRF24_SetTXAddress+0xa4>)
 8003312:	54d1      	strb	r1, [r2, r3]
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8003314:	183b      	adds	r3, r7, r0
 8003316:	781a      	ldrb	r2, [r3, #0]
 8003318:	183b      	adds	r3, r7, r0
 800331a:	3201      	adds	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	220f      	movs	r2, #15
 8003320:	18bb      	adds	r3, r7, r2
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d9e9      	bls.n	80032fc <nRF24_SetTXAddress+0x20>

        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8003328:	18bb      	adds	r3, r7, r2
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	e011      	b.n	8003354 <nRF24_SetTXAddress+0x78>
                address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8003330:	200f      	movs	r0, #15
 8003332:	183b      	adds	r3, r7, r0
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	18d2      	adds	r2, r2, r3
 800333a:	183b      	adds	r3, r7, r0
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2102      	movs	r1, #2
 8003340:	1acb      	subs	r3, r1, r3
 8003342:	7811      	ldrb	r1, [r2, #0]
 8003344:	220c      	movs	r2, #12
 8003346:	18ba      	adds	r2, r7, r2
 8003348:	54d1      	strb	r1, [r2, r3]
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800334a:	183b      	adds	r3, r7, r0
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	183b      	adds	r3, r7, r0
 8003350:	3201      	adds	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	230f      	movs	r3, #15
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d9e8      	bls.n	8003330 <nRF24_SetTXAddress+0x54>
        //make pipe 0 address backup;

        nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 800335e:	240c      	movs	r4, #12
 8003360:	193b      	adds	r3, r7, r4
 8003362:	2203      	movs	r2, #3
 8003364:	0019      	movs	r1, r3
 8003366:	200a      	movs	r0, #10
 8003368:	f7ff fd14 	bl	8002d94 <nRF24_WriteRegisters>
        nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 800336c:	193b      	adds	r3, r7, r4
 800336e:	2203      	movs	r2, #3
 8003370:	0019      	movs	r1, r3
 8003372:	2010      	movs	r0, #16
 8003374:	f7ff fd0e 	bl	8002d94 <nRF24_WriteRegisters>

}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b005      	add	sp, #20
 800337e:	bd90      	pop	{r4, r7, pc}
 8003380:	200005ec 	.word	0x200005ec

08003384 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8003384:	b590      	push	{r4, r7, lr}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
        uint8_t status = nRF24_ReadStatus();
 800338a:	1dfc      	adds	r4, r7, #7
 800338c:	f7ff fddf 	bl	8002f4e <nRF24_ReadStatus>
 8003390:	0003      	movs	r3, r0
 8003392:	7023      	strb	r3, [r4, #0]
        status |= (7<<4); // Clear bits 4, 5, 6.
 8003394:	1dfb      	adds	r3, r7, #7
 8003396:	1dfa      	adds	r2, r7, #7
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	2170      	movs	r1, #112	; 0x70
 800339c:	430a      	orrs	r2, r1
 800339e:	701a      	strb	r2, [r3, #0]
        nRF24_WriteStatus(status);
 80033a0:	1dfb      	adds	r3, r7, #7
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f7ff fddb 	bl	8002f60 <nRF24_WriteStatus>
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b003      	add	sp, #12
 80033b0:	bd90      	pop	{r4, r7, pc}

080033b2 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 80033b2:	b590      	push	{r4, r7, lr}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 80033b8:	1dfb      	adds	r3, r7, #7
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 80033be:	1dfc      	adds	r4, r7, #7
 80033c0:	2060      	movs	r0, #96	; 0x60
 80033c2:	f7ff fc63 	bl	8002c8c <nRF24_ReadRegister>
 80033c6:	0003      	movs	r3, r0
 80033c8:	7023      	strb	r3, [r4, #0]

    if (result > 32) // Something went wrong :)
 80033ca:	1dfb      	adds	r3, r7, #7
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d906      	bls.n	80033e0 <nRF24_GetDynamicPayloadSize+0x2e>
    {
        nRF24_FlushRX();
 80033d2:	f7ff fdd5 	bl	8002f80 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 80033d6:	2002      	movs	r0, #2
 80033d8:	f7ff fc19 	bl	8002c0e <nRF24_Delay_ms>
        return 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	e001      	b.n	80033e4 <nRF24_GetDynamicPayloadSize+0x32>
    }
    return result;
 80033e0:	1dfb      	adds	r3, r7, #7
 80033e2:	781b      	ldrb	r3, [r3, #0]
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b003      	add	sp, #12
 80033ea:	bd90      	pop	{r4, r7, pc}

080033ec <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80033ec:	b5b0      	push	{r4, r5, r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	0002      	movs	r2, r0
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 80033f8:	250f      	movs	r5, #15
 80033fa:	197c      	adds	r4, r7, r5
 80033fc:	f7ff fd30 	bl	8002e60 <nRF24_ReadConfig>
 8003400:	0003      	movs	r3, r0
 8003402:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 8003404:	1dfb      	adds	r3, r7, #7
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <nRF24_EnableRXDataReadyIRQ+0x2e>
                config |= (1<<NRF24_RX_DR);
 800340c:	197b      	adds	r3, r7, r5
 800340e:	197a      	adds	r2, r7, r5
 8003410:	7812      	ldrb	r2, [r2, #0]
 8003412:	2140      	movs	r1, #64	; 0x40
 8003414:	430a      	orrs	r2, r1
 8003416:	701a      	strb	r2, [r3, #0]
 8003418:	e006      	b.n	8003428 <nRF24_EnableRXDataReadyIRQ+0x3c>
        else
                config &= ~(1<<NRF24_RX_DR);
 800341a:	220f      	movs	r2, #15
 800341c:	18bb      	adds	r3, r7, r2
 800341e:	18ba      	adds	r2, r7, r2
 8003420:	7812      	ldrb	r2, [r2, #0]
 8003422:	2140      	movs	r1, #64	; 0x40
 8003424:	438a      	bics	r2, r1
 8003426:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 8003428:	230f      	movs	r3, #15
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	0018      	movs	r0, r3
 8003430:	f7ff fd1f 	bl	8002e72 <nRF24_WriteConfig>
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b004      	add	sp, #16
 800343a:	bdb0      	pop	{r4, r5, r7, pc}

0800343c <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 800343c:	b5b0      	push	{r4, r5, r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	0002      	movs	r2, r0
 8003444:	1dfb      	adds	r3, r7, #7
 8003446:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 8003448:	250f      	movs	r5, #15
 800344a:	197c      	adds	r4, r7, r5
 800344c:	f7ff fd08 	bl	8002e60 <nRF24_ReadConfig>
 8003450:	0003      	movs	r3, r0
 8003452:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 8003454:	1dfb      	adds	r3, r7, #7
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <nRF24_EnableTXDataSentIRQ+0x2e>
                config |= (1<<NRF24_TX_DS);
 800345c:	197b      	adds	r3, r7, r5
 800345e:	197a      	adds	r2, r7, r5
 8003460:	7812      	ldrb	r2, [r2, #0]
 8003462:	2120      	movs	r1, #32
 8003464:	430a      	orrs	r2, r1
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	e006      	b.n	8003478 <nRF24_EnableTXDataSentIRQ+0x3c>
        else
                config &= ~(1<<NRF24_TX_DS);
 800346a:	220f      	movs	r2, #15
 800346c:	18bb      	adds	r3, r7, r2
 800346e:	18ba      	adds	r2, r7, r2
 8003470:	7812      	ldrb	r2, [r2, #0]
 8003472:	2120      	movs	r1, #32
 8003474:	438a      	bics	r2, r1
 8003476:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 8003478:	230f      	movs	r3, #15
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	0018      	movs	r0, r3
 8003480:	f7ff fcf7 	bl	8002e72 <nRF24_WriteConfig>
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b004      	add	sp, #16
 800348a:	bdb0      	pop	{r4, r5, r7, pc}

0800348c <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	0002      	movs	r2, r0
 8003494:	1dfb      	adds	r3, r7, #7
 8003496:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 8003498:	250f      	movs	r5, #15
 800349a:	197c      	adds	r4, r7, r5
 800349c:	f7ff fce0 	bl	8002e60 <nRF24_ReadConfig>
 80034a0:	0003      	movs	r3, r0
 80034a2:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 80034a4:	1dfb      	adds	r3, r7, #7
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d106      	bne.n	80034ba <nRF24_EnableMaxRetransmitIRQ+0x2e>
                config |= (1<<NRF24_MAX_RT);
 80034ac:	197b      	adds	r3, r7, r5
 80034ae:	197a      	adds	r2, r7, r5
 80034b0:	7812      	ldrb	r2, [r2, #0]
 80034b2:	2110      	movs	r1, #16
 80034b4:	430a      	orrs	r2, r1
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	e006      	b.n	80034c8 <nRF24_EnableMaxRetransmitIRQ+0x3c>
        else
                config &= ~(1<<NRF24_MAX_RT);
 80034ba:	220f      	movs	r2, #15
 80034bc:	18bb      	adds	r3, r7, r2
 80034be:	18ba      	adds	r2, r7, r2
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	2110      	movs	r1, #16
 80034c4:	438a      	bics	r2, r1
 80034c6:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 80034c8:	230f      	movs	r3, #15
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	0018      	movs	r0, r3
 80034d0:	f7ff fccf 	bl	8002e72 <nRF24_WriteConfig>
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b004      	add	sp, #16
 80034da:	bdb0      	pop	{r4, r5, r7, pc}

080034dc <nRF24_ReadRXPaylaod>:
        }while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
        *size = nRF24_GetDynamicPayloadSize();
 80034e6:	f7ff ff64 	bl	80033b2 <nRF24_GetDynamicPayloadSize>
 80034ea:	0003      	movs	r3, r0
 80034ec:	001a      	movs	r2, r3
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	701a      	strb	r2, [r3, #0]
        nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0019      	movs	r1, r3
 80034fa:	2061      	movs	r0, #97	; 0x61
 80034fc:	f7ff fbf0 	bl	8002ce0 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
        nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
        if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
                nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8003500:	46c0      	nop			; (mov r8, r8)
 8003502:	46bd      	mov	sp, r7
 8003504:	b002      	add	sp, #8
 8003506:	bd80      	pop	{r7, pc}

08003508 <nRF24_RXAvailible>:
#endif
        return NRF24_RECEIVED_PACKET; //FX??
}

uint8_t nRF24_RXAvailible(void)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
        uint8_t status = nRF24_ReadStatus();
 800350e:	1dfc      	adds	r4, r7, #7
 8003510:	f7ff fd1d 	bl	8002f4e <nRF24_ReadStatus>
 8003514:	0003      	movs	r3, r0
 8003516:	7023      	strb	r3, [r4, #0]

        // RX FIFO Interrupt
        if ((status & (1 << 6)))
 8003518:	1dfb      	adds	r3, r7, #7
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2240      	movs	r2, #64	; 0x40
 800351e:	4013      	ands	r3, r2
 8003520:	d00f      	beq.n	8003542 <nRF24_RXAvailible+0x3a>
        {
                nrf24_rx_flag = 1;
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <nRF24_RXAvailible+0x44>)
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
                status |= (1<<6); // Interrupt flag clear
 8003528:	1dfb      	adds	r3, r7, #7
 800352a:	1dfa      	adds	r2, r7, #7
 800352c:	7812      	ldrb	r2, [r2, #0]
 800352e:	2140      	movs	r1, #64	; 0x40
 8003530:	430a      	orrs	r2, r1
 8003532:	701a      	strb	r2, [r3, #0]
                nRF24_WriteStatus(status);
 8003534:	1dfb      	adds	r3, r7, #7
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	0018      	movs	r0, r3
 800353a:	f7ff fd11 	bl	8002f60 <nRF24_WriteStatus>
                return 1;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <nRF24_RXAvailible+0x3c>
        }
        return 0;
 8003542:	2300      	movs	r3, #0
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	b003      	add	sp, #12
 800354a:	bd90      	pop	{r4, r7, pc}
 800354c:	200005ef 	.word	0x200005ef

08003550 <nRF24_Init>:
                nrf24_mr_flag = 0;
        }
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
        hspi_nrf = hspi;
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <nRF24_Init+0xd0>)
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	601a      	str	r2, [r3, #0]

        NRF24_CE_LOW;
 800355e:	4b31      	ldr	r3, [pc, #196]	; (8003624 <nRF24_Init+0xd4>)
 8003560:	2200      	movs	r2, #0
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	0018      	movs	r0, r3
 8003566:	f001 fadf 	bl	8004b28 <HAL_GPIO_WritePin>
        NRF24_CSN_HIGH;
 800356a:	4b2e      	ldr	r3, [pc, #184]	; (8003624 <nRF24_Init+0xd4>)
 800356c:	2201      	movs	r2, #1
 800356e:	2140      	movs	r1, #64	; 0x40
 8003570:	0018      	movs	r0, r3
 8003572:	f001 fad9 	bl	8004b28 <HAL_GPIO_WritePin>

        nRF24_Delay_ms(5); // Wait for radio power up
 8003576:	2005      	movs	r0, #5
 8003578:	f7ff fb49 	bl	8002c0e <nRF24_Delay_ms>

        nRF24_SetPALevel( NRF24_PA_PWR_0dBM); // Radio power NRF24_PA_PWR_0dBM
 800357c:	2003      	movs	r0, #3
 800357e:	f7ff fc88 	bl	8002e92 <nRF24_SetPALevel>
        nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8003582:	2002      	movs	r0, #2
 8003584:	f7ff fcae 	bl	8002ee4 <nRF24_SetDataRate>
        nRF24_EnableCRC(1); // Enable CRC
 8003588:	2001      	movs	r0, #1
 800358a:	f7ff fd35 	bl	8002ff8 <nRF24_EnableCRC>
        nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B);//1==NRF24_CRC_WIDTH_2B); // CRC Length 1 byte _1B
 800358e:	2000      	movs	r0, #0
 8003590:	f7ff fd5a 	bl	8003048 <nRF24_SetCRCLength>
//      nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
        nRF24_SetRetries(5, 15); // 1000us, 7 times //5,15 lub 4,7
 8003594:	210f      	movs	r1, #15
 8003596:	2005      	movs	r0, #5
 8003598:	f7ff fd7e 	bl	8003098 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
        nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 800359c:	201d      	movs	r0, #29
 800359e:	f7ff fb75 	bl	8002c8c <nRF24_ReadRegister>
 80035a2:	0003      	movs	r3, r0
 80035a4:	001a      	movs	r2, r3
 80035a6:	2304      	movs	r3, #4
 80035a8:	4313      	orrs	r3, r2
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	0019      	movs	r1, r3
 80035ae:	201d      	movs	r0, #29
 80035b0:	f7ff fbc4 	bl	8002d3c <nRF24_WriteRegister>
        nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 80035b4:	213f      	movs	r1, #63	; 0x3f
 80035b6:	201c      	movs	r0, #28
 80035b8:	f7ff fbc0 	bl	8002d3c <nRF24_WriteRegister>
#else
        nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
        nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
        nRF24_SetRFChannel(0x4c); // Set RF channel for transmission 10
 80035bc:	204c      	movs	r0, #76	; 0x4c
 80035be:	f7ff fd89 	bl	80030d4 <nRF24_SetRFChannel>
        nRF24_EnablePipe(0, 1); // Enable pipe 0
 80035c2:	2101      	movs	r1, #1
 80035c4:	2000      	movs	r0, #0
 80035c6:	f7ff fd98 	bl	80030fa <nRF24_EnablePipe>
        nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80035ca:	2003      	movs	r0, #3
 80035cc:	f7ff fe1d 	bl	800320a <nRF24_SetAddressWidth>
        nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80035d0:	2101      	movs	r1, #1
 80035d2:	2000      	movs	r0, #0
 80035d4:	f7ff fdd5 	bl	8003182 <nRF24_AutoACK>

        nRF24_WriteRegister(NRF24_RF_SETUP,0x5); //skopiowane z RPi ustawienia rejestrów
 80035d8:	2105      	movs	r1, #5
 80035da:	2006      	movs	r0, #6
 80035dc:	f7ff fbae 	bl	8002d3c <nRF24_WriteRegister>
        nRF24_WriteRegister(NRF24_FEATURE,0x6); //skopiowane z RPi ustawienia rejestrów (ważne, aby były te same)
 80035e0:	2106      	movs	r1, #6
 80035e2:	201d      	movs	r0, #29
 80035e4:	f7ff fbaa 	bl	8002d3c <nRF24_WriteRegister>
        nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 80035e8:	2002      	movs	r0, #2
 80035ea:	f7ff fc7b 	bl	8002ee4 <nRF24_SetDataRate>
    nRF24_SetAddressWidth(3); //adres 3 znaki a nie 5
 80035ee:	2003      	movs	r0, #3
 80035f0:	f7ff fe0b 	bl	800320a <nRF24_SetAddressWidth>

        nRF24_Delay_ms(1);
 80035f4:	2001      	movs	r0, #1
 80035f6:	f7ff fb0a 	bl	8002c0e <nRF24_Delay_ms>

        nRF24_EnableRXDataReadyIRQ(1); //receiver irq
 80035fa:	2001      	movs	r0, #1
 80035fc:	f7ff fef6 	bl	80033ec <nRF24_EnableRXDataReadyIRQ>
        nRF24_EnableTXDataSentIRQ(0);
 8003600:	2000      	movs	r0, #0
 8003602:	f7ff ff1b 	bl	800343c <nRF24_EnableTXDataSentIRQ>
        nRF24_EnableMaxRetransmitIRQ(0);
 8003606:	2000      	movs	r0, #0
 8003608:	f7ff ff40 	bl	800348c <nRF24_EnableMaxRetransmitIRQ>

        nRF24_Delay_ms(1);
 800360c:	2001      	movs	r0, #1
 800360e:	f7ff fafe 	bl	8002c0e <nRF24_Delay_ms>

        nRF24_ClearInterrupts();
 8003612:	f7ff feb7 	bl	8003384 <nRF24_ClearInterrupts>
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	b002      	add	sp, #8
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	200005e8 	.word	0x200005e8
 8003624:	50000800 	.word	0x50000800

08003628 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800362c:	4b17      	ldr	r3, [pc, #92]	; (800368c <MX_SPI1_Init+0x64>)
 800362e:	4a18      	ldr	r2, [pc, #96]	; (8003690 <MX_SPI1_Init+0x68>)
 8003630:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003632:	4b16      	ldr	r3, [pc, #88]	; (800368c <MX_SPI1_Init+0x64>)
 8003634:	2282      	movs	r2, #130	; 0x82
 8003636:	0052      	lsls	r2, r2, #1
 8003638:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800363a:	4b14      	ldr	r3, [pc, #80]	; (800368c <MX_SPI1_Init+0x64>)
 800363c:	2200      	movs	r2, #0
 800363e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003640:	4b12      	ldr	r3, [pc, #72]	; (800368c <MX_SPI1_Init+0x64>)
 8003642:	2200      	movs	r2, #0
 8003644:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003646:	4b11      	ldr	r3, [pc, #68]	; (800368c <MX_SPI1_Init+0x64>)
 8003648:	2200      	movs	r2, #0
 800364a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800364c:	4b0f      	ldr	r3, [pc, #60]	; (800368c <MX_SPI1_Init+0x64>)
 800364e:	2200      	movs	r2, #0
 8003650:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8003652:	4b0e      	ldr	r3, [pc, #56]	; (800368c <MX_SPI1_Init+0x64>)
 8003654:	2200      	movs	r2, #0
 8003656:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003658:	4b0c      	ldr	r3, [pc, #48]	; (800368c <MX_SPI1_Init+0x64>)
 800365a:	2218      	movs	r2, #24
 800365c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <MX_SPI1_Init+0x64>)
 8003660:	2200      	movs	r2, #0
 8003662:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <MX_SPI1_Init+0x64>)
 8003666:	2200      	movs	r2, #0
 8003668:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <MX_SPI1_Init+0x64>)
 800366c:	2200      	movs	r2, #0
 800366e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <MX_SPI1_Init+0x64>)
 8003672:	2207      	movs	r2, #7
 8003674:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <MX_SPI1_Init+0x64>)
 8003678:	0018      	movs	r0, r3
 800367a:	f002 fb57 	bl	8005d2c <HAL_SPI_Init>
 800367e:	1e03      	subs	r3, r0, #0
 8003680:	d001      	beq.n	8003686 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8003682:	f7ff fabf 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200005f0 	.word	0x200005f0
 8003690:	40013000 	.word	0x40013000

08003694 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003694:	b590      	push	{r4, r7, lr}
 8003696:	b08b      	sub	sp, #44	; 0x2c
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	2414      	movs	r4, #20
 800369e:	193b      	adds	r3, r7, r4
 80036a0:	0018      	movs	r0, r3
 80036a2:	2314      	movs	r3, #20
 80036a4:	001a      	movs	r2, r3
 80036a6:	2100      	movs	r1, #0
 80036a8:	f006 f85e 	bl	8009768 <memset>
  if(spiHandle->Instance==SPI1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a28      	ldr	r2, [pc, #160]	; (8003754 <HAL_SPI_MspInit+0xc0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d14a      	bne.n	800374c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036b6:	4b28      	ldr	r3, [pc, #160]	; (8003758 <HAL_SPI_MspInit+0xc4>)
 80036b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ba:	4b27      	ldr	r3, [pc, #156]	; (8003758 <HAL_SPI_MspInit+0xc4>)
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	0149      	lsls	r1, r1, #5
 80036c0:	430a      	orrs	r2, r1
 80036c2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c4:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_SPI_MspInit+0xc4>)
 80036c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c8:	4b23      	ldr	r3, [pc, #140]	; (8003758 <HAL_SPI_MspInit+0xc4>)
 80036ca:	2101      	movs	r1, #1
 80036cc:	430a      	orrs	r2, r1
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80036d0:	4b21      	ldr	r3, [pc, #132]	; (8003758 <HAL_SPI_MspInit+0xc4>)
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	2201      	movs	r2, #1
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036dc:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <HAL_SPI_MspInit+0xc4>)
 80036de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e0:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_SPI_MspInit+0xc4>)
 80036e2:	2102      	movs	r1, #2
 80036e4:	430a      	orrs	r2, r1
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_SPI_MspInit+0xc4>)
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	2202      	movs	r2, #2
 80036ee:	4013      	ands	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80036f4:	193b      	adds	r3, r7, r4
 80036f6:	22d0      	movs	r2, #208	; 0xd0
 80036f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fa:	193b      	adds	r3, r7, r4
 80036fc:	2202      	movs	r2, #2
 80036fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	193b      	adds	r3, r7, r4
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003706:	193b      	adds	r3, r7, r4
 8003708:	2203      	movs	r2, #3
 800370a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800370c:	193b      	adds	r3, r7, r4
 800370e:	2200      	movs	r2, #0
 8003710:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003712:	193a      	adds	r2, r7, r4
 8003714:	23a0      	movs	r3, #160	; 0xa0
 8003716:	05db      	lsls	r3, r3, #23
 8003718:	0011      	movs	r1, r2
 800371a:	0018      	movs	r0, r3
 800371c:	f001 f88e 	bl	800483c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003720:	0021      	movs	r1, r4
 8003722:	187b      	adds	r3, r7, r1
 8003724:	2208      	movs	r2, #8
 8003726:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003728:	187b      	adds	r3, r7, r1
 800372a:	2202      	movs	r2, #2
 800372c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	187b      	adds	r3, r7, r1
 8003730:	2200      	movs	r2, #0
 8003732:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003734:	187b      	adds	r3, r7, r1
 8003736:	2203      	movs	r2, #3
 8003738:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800373a:	187b      	adds	r3, r7, r1
 800373c:	2200      	movs	r2, #0
 800373e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003740:	187b      	adds	r3, r7, r1
 8003742:	4a06      	ldr	r2, [pc, #24]	; (800375c <HAL_SPI_MspInit+0xc8>)
 8003744:	0019      	movs	r1, r3
 8003746:	0010      	movs	r0, r2
 8003748:	f001 f878 	bl	800483c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800374c:	46c0      	nop			; (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b00b      	add	sp, #44	; 0x2c
 8003752:	bd90      	pop	{r4, r7, pc}
 8003754:	40013000 	.word	0x40013000
 8003758:	40021000 	.word	0x40021000
 800375c:	50000400 	.word	0x50000400

08003760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003764:	4b07      	ldr	r3, [pc, #28]	; (8003784 <HAL_MspInit+0x24>)
 8003766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_MspInit+0x24>)
 800376a:	2101      	movs	r1, #1
 800376c:	430a      	orrs	r2, r1
 800376e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <HAL_MspInit+0x24>)
 8003772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <HAL_MspInit+0x24>)
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	0549      	lsls	r1, r1, #21
 800377a:	430a      	orrs	r2, r1
 800377c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000

08003788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800378c:	e7fe      	b.n	800378c <NMI_Handler+0x4>

0800378e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003792:	e7fe      	b.n	8003792 <HardFault_Handler+0x4>

08003794 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037ac:	f000 fb46 	bl	8003e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b0:	46c0      	nop			; (mov r8, r8)
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	0018      	movs	r0, r3
 80037c0:	f001 f9ea 	bl	8004b98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	019b      	lsls	r3, r3, #6
 80037c8:	0018      	movs	r0, r3
 80037ca:	f001 f9e5 	bl	8004b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <DMA1_Channel1_IRQHandler+0x14>)
 80037da:	0018      	movs	r0, r3
 80037dc:	f000 ff7f 	bl	80046de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80037e0:	46c0      	nop			; (mov r8, r8)
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	2000024c 	.word	0x2000024c

080037ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <TIM6_DAC_IRQHandler+0x14>)
 80037f2:	0018      	movs	r0, r3
 80037f4:	f003 f950 	bl	8006a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	2000064c 	.word	0x2000064c

08003804 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <USART1_IRQHandler+0x14>)
 800380a:	0018      	movs	r0, r3
 800380c:	f003 fcba 	bl	8007184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003810:	46c0      	nop			; (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	20000714 	.word	0x20000714

0800381c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <USART2_IRQHandler+0x14>)
 8003822:	0018      	movs	r0, r3
 8003824:	f003 fcae 	bl	8007184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	2000079c 	.word	0x2000079c

08003834 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <RNG_LPUART1_IRQHandler+0x14>)
 800383a:	0018      	movs	r0, r3
 800383c:	f003 fca2 	bl	8007184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	2000068c 	.word	0x2000068c

0800384c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  return 1;
 8003850:	2301      	movs	r3, #1
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <_kill>:

int _kill(int pid, int sig)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003862:	f005 ffdb 	bl	800981c <__errno>
 8003866:	0003      	movs	r3, r0
 8003868:	2216      	movs	r2, #22
 800386a:	601a      	str	r2, [r3, #0]
  return -1;
 800386c:	2301      	movs	r3, #1
 800386e:	425b      	negs	r3, r3
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b002      	add	sp, #8
 8003876:	bd80      	pop	{r7, pc}

08003878 <_exit>:

void _exit (int status)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003880:	2301      	movs	r3, #1
 8003882:	425a      	negs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	0011      	movs	r1, r2
 8003888:	0018      	movs	r0, r3
 800388a:	f7ff ffe5 	bl	8003858 <_kill>
  while (1) {}    /* Make sure we hang here */
 800388e:	e7fe      	b.n	800388e <_exit+0x16>

08003890 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e00a      	b.n	80038b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038a2:	e000      	b.n	80038a6 <_read+0x16>
 80038a4:	bf00      	nop
 80038a6:	0001      	movs	r1, r0
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	60ba      	str	r2, [r7, #8]
 80038ae:	b2ca      	uxtb	r2, r1
 80038b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	3301      	adds	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	dbf0      	blt.n	80038a2 <_read+0x12>
  }

  return len;
 80038c0:	687b      	ldr	r3, [r7, #4]
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b006      	add	sp, #24
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e009      	b.n	80038f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	60ba      	str	r2, [r7, #8]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	0018      	movs	r0, r3
 80038e6:	e000      	b.n	80038ea <_write+0x20>
 80038e8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	3301      	adds	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	dbf1      	blt.n	80038dc <_write+0x12>
  }
  return len;
 80038f8:	687b      	ldr	r3, [r7, #4]
}
 80038fa:	0018      	movs	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b006      	add	sp, #24
 8003900:	bd80      	pop	{r7, pc}

08003902 <_close>:

int _close(int file)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800390a:	2301      	movs	r3, #1
 800390c:	425b      	negs	r3, r3
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b002      	add	sp, #8
 8003914:	bd80      	pop	{r7, pc}

08003916 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2280      	movs	r2, #128	; 0x80
 8003924:	0192      	lsls	r2, r2, #6
 8003926:	605a      	str	r2, [r3, #4]
  return 0;
 8003928:	2300      	movs	r3, #0
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b002      	add	sp, #8
 8003930:	bd80      	pop	{r7, pc}

08003932 <_isatty>:

int _isatty(int file)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800393a:	2301      	movs	r3, #1
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b002      	add	sp, #8
 8003942:	bd80      	pop	{r7, pc}

08003944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003950:	2300      	movs	r3, #0
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b004      	add	sp, #16
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <_sbrk+0x5c>)
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <_sbrk+0x60>)
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <_sbrk+0x64>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <_sbrk+0x64>)
 800397a:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <_sbrk+0x68>)
 800397c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <_sbrk+0x64>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	18d3      	adds	r3, r2, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	429a      	cmp	r2, r3
 800398a:	d207      	bcs.n	800399c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800398c:	f005 ff46 	bl	800981c <__errno>
 8003990:	0003      	movs	r3, r0
 8003992:	220c      	movs	r2, #12
 8003994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003996:	2301      	movs	r3, #1
 8003998:	425b      	negs	r3, r3
 800399a:	e009      	b.n	80039b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800399c:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <_sbrk+0x64>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <_sbrk+0x64>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	18d2      	adds	r2, r2, r3
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <_sbrk+0x64>)
 80039ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80039ae:	68fb      	ldr	r3, [r7, #12]
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b006      	add	sp, #24
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20002000 	.word	0x20002000
 80039bc:	00000400 	.word	0x00000400
 80039c0:	20000648 	.word	0x20000648
 80039c4:	20000978 	.word	0x20000978

080039c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039da:	003b      	movs	r3, r7
 80039dc:	0018      	movs	r0, r3
 80039de:	2308      	movs	r3, #8
 80039e0:	001a      	movs	r2, r3
 80039e2:	2100      	movs	r1, #0
 80039e4:	f005 fec0 	bl	8009768 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80039e8:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <MX_TIM6_Init+0x6c>)
 80039ea:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <MX_TIM6_Init+0x70>)
 80039ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 80039ee:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <MX_TIM6_Init+0x6c>)
 80039f0:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <MX_TIM6_Init+0x74>)
 80039f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f4:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <MX_TIM6_Init+0x6c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80039fa:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <MX_TIM6_Init+0x6c>)
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <MX_TIM6_Init+0x78>)
 80039fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a00:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <MX_TIM6_Init+0x6c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a06:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <MX_TIM6_Init+0x6c>)
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f002 ffb9 	bl	8006980 <HAL_TIM_Base_Init>
 8003a0e:	1e03      	subs	r3, r0, #0
 8003a10:	d001      	beq.n	8003a16 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003a12:	f7ff f8f7 	bl	8002c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a16:	003b      	movs	r3, r7
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a1c:	003b      	movs	r3, r7
 8003a1e:	2200      	movs	r2, #0
 8003a20:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a22:	003a      	movs	r2, r7
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <MX_TIM6_Init+0x6c>)
 8003a26:	0011      	movs	r1, r2
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f003 f991 	bl	8006d50 <HAL_TIMEx_MasterConfigSynchronization>
 8003a2e:	1e03      	subs	r3, r0, #0
 8003a30:	d001      	beq.n	8003a36 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003a32:	f7ff f8e7 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b002      	add	sp, #8
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	2000064c 	.word	0x2000064c
 8003a44:	40001000 	.word	0x40001000
 8003a48:	00000c7f 	.word	0x00000c7f
 8003a4c:	0000270f 	.word	0x0000270f

08003a50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <HAL_TIM_Base_MspInit+0x38>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d10d      	bne.n	8003a7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <HAL_TIM_Base_MspInit+0x3c>)
 8003a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_TIM_Base_MspInit+0x3c>)
 8003a68:	2110      	movs	r1, #16
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2103      	movs	r1, #3
 8003a72:	2011      	movs	r0, #17
 8003a74:	f000 fd02 	bl	800447c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a78:	2011      	movs	r0, #17
 8003a7a:	f000 fd14 	bl	80044a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	40001000 	.word	0x40001000
 8003a8c:	40021000 	.word	0x40021000

08003a90 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003a94:	4b15      	ldr	r3, [pc, #84]	; (8003aec <MX_LPUART1_UART_Init+0x5c>)
 8003a96:	4a16      	ldr	r2, [pc, #88]	; (8003af0 <MX_LPUART1_UART_Init+0x60>)
 8003a98:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <MX_LPUART1_UART_Init+0x5c>)
 8003a9c:	2296      	movs	r2, #150	; 0x96
 8003a9e:	0192      	lsls	r2, r2, #6
 8003aa0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <MX_LPUART1_UART_Init+0x5c>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003aa8:	4b10      	ldr	r3, [pc, #64]	; (8003aec <MX_LPUART1_UART_Init+0x5c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003aae:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <MX_LPUART1_UART_Init+0x5c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <MX_LPUART1_UART_Init+0x5c>)
 8003ab6:	220c      	movs	r2, #12
 8003ab8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <MX_LPUART1_UART_Init+0x5c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <MX_LPUART1_UART_Init+0x5c>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <MX_LPUART1_UART_Init+0x5c>)
 8003ac8:	2210      	movs	r2, #16
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003acc:	4b07      	ldr	r3, [pc, #28]	; (8003aec <MX_LPUART1_UART_Init+0x5c>)
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	0152      	lsls	r2, r2, #5
 8003ad2:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <MX_LPUART1_UART_Init+0x5c>)
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f003 f992 	bl	8006e00 <HAL_UART_Init>
 8003adc:	1e03      	subs	r3, r0, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_LPUART1_UART_Init+0x54>
  {
    Error_Handler();
 8003ae0:	f7ff f890 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003ae4:	46c0      	nop			; (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	2000068c 	.word	0x2000068c
 8003af0:	40004800 	.word	0x40004800

08003af4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <MX_USART1_UART_Init+0x60>)
 8003afa:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <MX_USART1_UART_Init+0x64>)
 8003afc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003afe:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <MX_USART1_UART_Init+0x60>)
 8003b00:	2296      	movs	r2, #150	; 0x96
 8003b02:	0192      	lsls	r2, r2, #6
 8003b04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b06:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <MX_USART1_UART_Init+0x60>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b0c:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <MX_USART1_UART_Init+0x60>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b12:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <MX_USART1_UART_Init+0x60>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8003b18:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <MX_USART1_UART_Init+0x60>)
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <MX_USART1_UART_Init+0x60>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <MX_USART1_UART_Init+0x60>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <MX_USART1_UART_Init+0x60>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <MX_USART1_UART_Init+0x60>)
 8003b32:	2210      	movs	r2, #16
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003b36:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <MX_USART1_UART_Init+0x60>)
 8003b38:	2280      	movs	r2, #128	; 0x80
 8003b3a:	0152      	lsls	r2, r2, #5
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <MX_USART1_UART_Init+0x60>)
 8003b40:	0018      	movs	r0, r3
 8003b42:	f003 f95d 	bl	8006e00 <HAL_UART_Init>
 8003b46:	1e03      	subs	r3, r0, #0
 8003b48:	d001      	beq.n	8003b4e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003b4a:	f7ff f85b 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000714 	.word	0x20000714
 8003b58:	40013800 	.word	0x40013800

08003b5c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b60:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b62:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <MX_USART2_UART_Init+0x5c>)
 8003b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b68:	2296      	movs	r2, #150	; 0x96
 8003b6a:	0192      	lsls	r2, r2, #6
 8003b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b6e:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b82:	220c      	movs	r2, #12
 8003b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b9e:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f003 f92d 	bl	8006e00 <HAL_UART_Init>
 8003ba6:	1e03      	subs	r3, r0, #0
 8003ba8:	d001      	beq.n	8003bae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003baa:	f7ff f82b 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	2000079c 	.word	0x2000079c
 8003bb8:	40004400 	.word	0x40004400

08003bbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bbc:	b590      	push	{r4, r7, lr}
 8003bbe:	b08b      	sub	sp, #44	; 0x2c
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc4:	2414      	movs	r4, #20
 8003bc6:	193b      	adds	r3, r7, r4
 8003bc8:	0018      	movs	r0, r3
 8003bca:	2314      	movs	r3, #20
 8003bcc:	001a      	movs	r2, r3
 8003bce:	2100      	movs	r1, #0
 8003bd0:	f005 fdca 	bl	8009768 <memset>
  if(uartHandle->Instance==LPUART1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a54      	ldr	r2, [pc, #336]	; (8003d2c <HAL_UART_MspInit+0x170>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d131      	bne.n	8003c42 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003bde:	4b54      	ldr	r3, [pc, #336]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003be2:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003be4:	2180      	movs	r1, #128	; 0x80
 8003be6:	02c9      	lsls	r1, r1, #11
 8003be8:	430a      	orrs	r2, r1
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bec:	4b50      	ldr	r3, [pc, #320]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf0:	4b4f      	ldr	r3, [pc, #316]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003bf2:	2104      	movs	r1, #4
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bf8:	4b4d      	ldr	r3, [pc, #308]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PC4     ------> LPUART1_TX
    PC5     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c04:	0021      	movs	r1, r4
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	2230      	movs	r2, #48	; 0x30
 8003c0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	2202      	movs	r2, #2
 8003c10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_LPUART1;
 8003c1e:	187b      	adds	r3, r7, r1
 8003c20:	2202      	movs	r2, #2
 8003c22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c24:	187b      	adds	r3, r7, r1
 8003c26:	4a43      	ldr	r2, [pc, #268]	; (8003d34 <HAL_UART_MspInit+0x178>)
 8003c28:	0019      	movs	r1, r3
 8003c2a:	0010      	movs	r0, r2
 8003c2c:	f000 fe06 	bl	800483c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8003c30:	2200      	movs	r2, #0
 8003c32:	2100      	movs	r1, #0
 8003c34:	201d      	movs	r0, #29
 8003c36:	f000 fc21 	bl	800447c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8003c3a:	201d      	movs	r0, #29
 8003c3c:	f000 fc33 	bl	80044a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003c40:	e06f      	b.n	8003d22 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a3c      	ldr	r2, [pc, #240]	; (8003d38 <HAL_UART_MspInit+0x17c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d133      	bne.n	8003cb4 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c4c:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c50:	4b37      	ldr	r3, [pc, #220]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003c52:	2180      	movs	r1, #128	; 0x80
 8003c54:	01c9      	lsls	r1, r1, #7
 8003c56:	430a      	orrs	r2, r1
 8003c58:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5a:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5e:	4b34      	ldr	r3, [pc, #208]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003c60:	2101      	movs	r1, #1
 8003c62:	430a      	orrs	r2, r1
 8003c64:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c66:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c72:	2114      	movs	r1, #20
 8003c74:	187b      	adds	r3, r7, r1
 8003c76:	22c0      	movs	r2, #192	; 0xc0
 8003c78:	00d2      	lsls	r2, r2, #3
 8003c7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7c:	187b      	adds	r3, r7, r1
 8003c7e:	2202      	movs	r2, #2
 8003c80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	187b      	adds	r3, r7, r1
 8003c84:	2200      	movs	r2, #0
 8003c86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c88:	187b      	adds	r3, r7, r1
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003c8e:	187b      	adds	r3, r7, r1
 8003c90:	2204      	movs	r2, #4
 8003c92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c94:	187a      	adds	r2, r7, r1
 8003c96:	23a0      	movs	r3, #160	; 0xa0
 8003c98:	05db      	lsls	r3, r3, #23
 8003c9a:	0011      	movs	r1, r2
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f000 fdcd 	bl	800483c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	201b      	movs	r0, #27
 8003ca8:	f000 fbe8 	bl	800447c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cac:	201b      	movs	r0, #27
 8003cae:	f000 fbfa 	bl	80044a6 <HAL_NVIC_EnableIRQ>
}
 8003cb2:	e036      	b.n	8003d22 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a20      	ldr	r2, [pc, #128]	; (8003d3c <HAL_UART_MspInit+0x180>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d131      	bne.n	8003d22 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cbe:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc2:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003cc4:	2180      	movs	r1, #128	; 0x80
 8003cc6:	0289      	lsls	r1, r1, #10
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ccc:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cd8:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <HAL_UART_MspInit+0x174>)
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	2201      	movs	r2, #1
 8003cde:	4013      	ands	r3, r2
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ce4:	2114      	movs	r1, #20
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	220c      	movs	r2, #12
 8003cea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	2202      	movs	r2, #2
 8003cf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	2204      	movs	r2, #4
 8003d02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d04:	187a      	adds	r2, r7, r1
 8003d06:	23a0      	movs	r3, #160	; 0xa0
 8003d08:	05db      	lsls	r3, r3, #23
 8003d0a:	0011      	movs	r1, r2
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f000 fd95 	bl	800483c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d12:	2200      	movs	r2, #0
 8003d14:	2100      	movs	r1, #0
 8003d16:	201c      	movs	r0, #28
 8003d18:	f000 fbb0 	bl	800447c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d1c:	201c      	movs	r0, #28
 8003d1e:	f000 fbc2 	bl	80044a6 <HAL_NVIC_EnableIRQ>
}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b00b      	add	sp, #44	; 0x2c
 8003d28:	bd90      	pop	{r4, r7, pc}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	40004800 	.word	0x40004800
 8003d30:	40021000 	.word	0x40021000
 8003d34:	50000800 	.word	0x50000800
 8003d38:	40013800 	.word	0x40013800
 8003d3c:	40004400 	.word	0x40004400

08003d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003d40:	480d      	ldr	r0, [pc, #52]	; (8003d78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d44:	f7ff fe40 	bl	80039c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d48:	480c      	ldr	r0, [pc, #48]	; (8003d7c <LoopForever+0x6>)
  ldr r1, =_edata
 8003d4a:	490d      	ldr	r1, [pc, #52]	; (8003d80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d4c:	4a0d      	ldr	r2, [pc, #52]	; (8003d84 <LoopForever+0xe>)
  movs r3, #0
 8003d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d50:	e002      	b.n	8003d58 <LoopCopyDataInit>

08003d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d56:	3304      	adds	r3, #4

08003d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d5c:	d3f9      	bcc.n	8003d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d60:	4c0a      	ldr	r4, [pc, #40]	; (8003d8c <LoopForever+0x16>)
  movs r3, #0
 8003d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d64:	e001      	b.n	8003d6a <LoopFillZerobss>

08003d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d68:	3204      	adds	r2, #4

08003d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d6c:	d3fb      	bcc.n	8003d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d6e:	f005 fd5b 	bl	8009828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d72:	f7fe fe5d 	bl	8002a30 <main>

08003d76 <LoopForever>:

LoopForever:
    b LoopForever
 8003d76:	e7fe      	b.n	8003d76 <LoopForever>
  ldr   r0, =_estack
 8003d78:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d80:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003d84:	0800d630 	.word	0x0800d630
  ldr r2, =_sbss
 8003d88:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003d8c:	20000974 	.word	0x20000974

08003d90 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d90:	e7fe      	b.n	8003d90 <ADC1_COMP_IRQHandler>
	...

08003d94 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d9a:	1dfb      	adds	r3, r7, #7
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_Init+0x3c>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <HAL_Init+0x3c>)
 8003da6:	2140      	movs	r1, #64	; 0x40
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dac:	2000      	movs	r0, #0
 8003dae:	f000 f811 	bl	8003dd4 <HAL_InitTick>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003db6:	1dfb      	adds	r3, r7, #7
 8003db8:	2201      	movs	r2, #1
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	e001      	b.n	8003dc2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003dbe:	f7ff fccf 	bl	8003760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003dc2:	1dfb      	adds	r3, r7, #7
 8003dc4:	781b      	ldrb	r3, [r3, #0]
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b002      	add	sp, #8
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	40022000 	.word	0x40022000

08003dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ddc:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <HAL_InitTick+0x5c>)
 8003dde:	681c      	ldr	r4, [r3, #0]
 8003de0:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <HAL_InitTick+0x60>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	0019      	movs	r1, r3
 8003de6:	23fa      	movs	r3, #250	; 0xfa
 8003de8:	0098      	lsls	r0, r3, #2
 8003dea:	f7fc f9a9 	bl	8000140 <__udivsi3>
 8003dee:	0003      	movs	r3, r0
 8003df0:	0019      	movs	r1, r3
 8003df2:	0020      	movs	r0, r4
 8003df4:	f7fc f9a4 	bl	8000140 <__udivsi3>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f000 fb63 	bl	80044c6 <HAL_SYSTICK_Config>
 8003e00:	1e03      	subs	r3, r0, #0
 8003e02:	d001      	beq.n	8003e08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e00f      	b.n	8003e28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d80b      	bhi.n	8003e26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	2301      	movs	r3, #1
 8003e12:	425b      	negs	r3, r3
 8003e14:	2200      	movs	r2, #0
 8003e16:	0018      	movs	r0, r3
 8003e18:	f000 fb30 	bl	800447c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_InitTick+0x64>)
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e000      	b.n	8003e28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b003      	add	sp, #12
 8003e2e:	bd90      	pop	{r4, r7, pc}
 8003e30:	20000000 	.word	0x20000000
 8003e34:	20000008 	.word	0x20000008
 8003e38:	20000004 	.word	0x20000004

08003e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <HAL_IncTick+0x1c>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	001a      	movs	r2, r3
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_IncTick+0x20>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	18d2      	adds	r2, r2, r3
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <HAL_IncTick+0x20>)
 8003e4e:	601a      	str	r2, [r3, #0]
}
 8003e50:	46c0      	nop			; (mov r8, r8)
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	20000008 	.word	0x20000008
 8003e5c:	20000824 	.word	0x20000824

08003e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  return uwTick;
 8003e64:	4b02      	ldr	r3, [pc, #8]	; (8003e70 <HAL_GetTick+0x10>)
 8003e66:	681b      	ldr	r3, [r3, #0]
}
 8003e68:	0018      	movs	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	20000824 	.word	0x20000824

08003e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e7c:	f7ff fff0 	bl	8003e60 <HAL_GetTick>
 8003e80:	0003      	movs	r3, r0
 8003e82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	d005      	beq.n	8003e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <HAL_Delay+0x44>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	001a      	movs	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	189b      	adds	r3, r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	f7ff ffe0 	bl	8003e60 <HAL_GetTick>
 8003ea0:	0002      	movs	r2, r0
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d8f7      	bhi.n	8003e9c <HAL_Delay+0x28>
  {
  }
}
 8003eac:	46c0      	nop			; (mov r8, r8)
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b004      	add	sp, #16
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	20000008 	.word	0x20000008

08003ebc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e159      	b.n	8004182 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10a      	bne.n	8003eec <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2250      	movs	r2, #80	; 0x50
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7fe fbc2 	bl	8002670 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d005      	beq.n	8003f04 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2204      	movs	r2, #4
 8003f00:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003f02:	d00b      	beq.n	8003f1c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	2210      	movs	r2, #16
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2250      	movs	r2, #80	; 0x50
 8003f14:	2100      	movs	r1, #0
 8003f16:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e132      	b.n	8004182 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f20:	4a9a      	ldr	r2, [pc, #616]	; (800418c <HAL_ADC_Init+0x2d0>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	2202      	movs	r2, #2
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2203      	movs	r2, #3
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d108      	bne.n	8003f4c <HAL_ADC_Init+0x90>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2201      	movs	r2, #1
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_ADC_Init+0x90>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <HAL_ADC_Init+0x92>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d149      	bne.n	8003fe6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	23c0      	movs	r3, #192	; 0xc0
 8003f58:	061b      	lsls	r3, r3, #24
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d00b      	beq.n	8003f76 <HAL_ADC_Init+0xba>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	05db      	lsls	r3, r3, #23
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d005      	beq.n	8003f76 <HAL_ADC_Init+0xba>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	061b      	lsls	r3, r3, #24
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d111      	bne.n	8003f9a <HAL_ADC_Init+0xde>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	0092      	lsls	r2, r2, #2
 8003f82:	0892      	lsrs	r2, r2, #2
 8003f84:	611a      	str	r2, [r3, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6919      	ldr	r1, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	611a      	str	r2, [r3, #16]
 8003f98:	e014      	b.n	8003fc4 <HAL_ADC_Init+0x108>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	0092      	lsls	r2, r2, #2
 8003fa6:	0892      	lsrs	r2, r2, #2
 8003fa8:	611a      	str	r2, [r3, #16]
 8003faa:	4b79      	ldr	r3, [pc, #484]	; (8004190 <HAL_ADC_Init+0x2d4>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4b78      	ldr	r3, [pc, #480]	; (8004190 <HAL_ADC_Init+0x2d4>)
 8003fb0:	4978      	ldr	r1, [pc, #480]	; (8004194 <HAL_ADC_Init+0x2d8>)
 8003fb2:	400a      	ands	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	4b76      	ldr	r3, [pc, #472]	; (8004190 <HAL_ADC_Init+0x2d4>)
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	4b74      	ldr	r3, [pc, #464]	; (8004190 <HAL_ADC_Init+0x2d4>)
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2118      	movs	r1, #24
 8003fd0:	438a      	bics	r2, r1
 8003fd2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68d9      	ldr	r1, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003fe6:	4b6a      	ldr	r3, [pc, #424]	; (8004190 <HAL_ADC_Init+0x2d4>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b69      	ldr	r3, [pc, #420]	; (8004190 <HAL_ADC_Init+0x2d4>)
 8003fec:	496a      	ldr	r1, [pc, #424]	; (8004198 <HAL_ADC_Init+0x2dc>)
 8003fee:	400a      	ands	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8003ff2:	4b67      	ldr	r3, [pc, #412]	; (8004190 <HAL_ADC_Init+0x2d4>)
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	065a      	lsls	r2, r3, #25
 8003ffc:	4b64      	ldr	r3, [pc, #400]	; (8004190 <HAL_ADC_Init+0x2d4>)
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	055b      	lsls	r3, r3, #21
 800400c:	4013      	ands	r3, r2
 800400e:	d108      	bne.n	8004022 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2180      	movs	r1, #128	; 0x80
 800401c:	0549      	lsls	r1, r1, #21
 800401e:	430a      	orrs	r2, r1
 8004020:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	495b      	ldr	r1, [pc, #364]	; (800419c <HAL_ADC_Init+0x2e0>)
 800402e:	400a      	ands	r2, r1
 8004030:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68d9      	ldr	r1, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d101      	bne.n	8004048 <HAL_ADC_Init+0x18c>
 8004044:	2304      	movs	r3, #4
 8004046:	e000      	b.n	800404a <HAL_ADC_Init+0x18e>
 8004048:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800404a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2020      	movs	r0, #32
 8004050:	5c1b      	ldrb	r3, [r3, r0]
 8004052:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004054:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	202c      	movs	r0, #44	; 0x2c
 800405a:	5c1b      	ldrb	r3, [r3, r0]
 800405c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800405e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004064:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800406c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004074:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004082:	23c2      	movs	r3, #194	; 0xc2
 8004084:	33ff      	adds	r3, #255	; 0xff
 8004086:	429a      	cmp	r2, r3
 8004088:	d00b      	beq.n	80040a2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68d9      	ldr	r1, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2221      	movs	r2, #33	; 0x21
 80040a6:	5c9b      	ldrb	r3, [r3, r2]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d11a      	bne.n	80040e2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	5c9b      	ldrb	r3, [r3, r2]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2180      	movs	r1, #128	; 0x80
 80040c2:	0249      	lsls	r1, r1, #9
 80040c4:	430a      	orrs	r2, r1
 80040c6:	60da      	str	r2, [r3, #12]
 80040c8:	e00b      	b.n	80040e2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	2220      	movs	r2, #32
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	2201      	movs	r2, #1
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d11f      	bne.n	800412a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	492a      	ldr	r1, [pc, #168]	; (80041a0 <HAL_ADC_Init+0x2e4>)
 80040f6:	400a      	ands	r2, r1
 80040f8:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6919      	ldr	r1, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004108:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800410e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2101      	movs	r1, #1
 8004124:	430a      	orrs	r2, r1
 8004126:	611a      	str	r2, [r3, #16]
 8004128:	e00e      	b.n	8004148 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	2201      	movs	r2, #1
 8004132:	4013      	ands	r3, r2
 8004134:	2b01      	cmp	r3, #1
 8004136:	d107      	bne.n	8004148 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2101      	movs	r1, #1
 8004144:	438a      	bics	r2, r1
 8004146:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2107      	movs	r1, #7
 8004154:	438a      	bics	r2, r1
 8004156:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6959      	ldr	r1, [r3, #20]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004174:	2203      	movs	r2, #3
 8004176:	4393      	bics	r3, r2
 8004178:	2201      	movs	r2, #1
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	0018      	movs	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	b002      	add	sp, #8
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	fffffefd 	.word	0xfffffefd
 8004190:	40012708 	.word	0x40012708
 8004194:	ffc3ffff 	.word	0xffc3ffff
 8004198:	fdffffff 	.word	0xfdffffff
 800419c:	fffe0219 	.word	0xfffe0219
 80041a0:	fffffc03 	.word	0xfffffc03

080041a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2250      	movs	r2, #80	; 0x50
 80041b2:	5c9b      	ldrb	r3, [r3, r2]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x18>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e085      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x124>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2250      	movs	r2, #80	; 0x50
 80041c0:	2101      	movs	r1, #1
 80041c2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2204      	movs	r2, #4
 80041cc:	4013      	ands	r3, r2
 80041ce:	d00b      	beq.n	80041e8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	2220      	movs	r2, #32
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2250      	movs	r2, #80	; 0x50
 80041e0:	2100      	movs	r1, #0
 80041e2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e06f      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	4a38      	ldr	r2, [pc, #224]	; (80042d0 <HAL_ADC_ConfigChannel+0x12c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d035      	beq.n	800425e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	035b      	lsls	r3, r3, #13
 80041fe:	0b5a      	lsrs	r2, r3, #13
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	02db      	lsls	r3, r3, #11
 8004210:	4013      	ands	r3, r2
 8004212:	d009      	beq.n	8004228 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8004214:	4b2f      	ldr	r3, [pc, #188]	; (80042d4 <HAL_ADC_ConfigChannel+0x130>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b2e      	ldr	r3, [pc, #184]	; (80042d4 <HAL_ADC_ConfigChannel+0x130>)
 800421a:	2180      	movs	r1, #128	; 0x80
 800421c:	0409      	lsls	r1, r1, #16
 800421e:	430a      	orrs	r2, r1
 8004220:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004222:	200a      	movs	r0, #10
 8004224:	f000 f85e 	bl	80042e4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	2380      	movs	r3, #128	; 0x80
 800422e:	029b      	lsls	r3, r3, #10
 8004230:	4013      	ands	r3, r2
 8004232:	d006      	beq.n	8004242 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8004234:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <HAL_ADC_ConfigChannel+0x130>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b26      	ldr	r3, [pc, #152]	; (80042d4 <HAL_ADC_ConfigChannel+0x130>)
 800423a:	2180      	movs	r1, #128	; 0x80
 800423c:	03c9      	lsls	r1, r1, #15
 800423e:	430a      	orrs	r2, r1
 8004240:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	2380      	movs	r3, #128	; 0x80
 8004248:	025b      	lsls	r3, r3, #9
 800424a:	4013      	ands	r3, r2
 800424c:	d037      	beq.n	80042be <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 800424e:	4b21      	ldr	r3, [pc, #132]	; (80042d4 <HAL_ADC_ConfigChannel+0x130>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <HAL_ADC_ConfigChannel+0x130>)
 8004254:	2180      	movs	r1, #128	; 0x80
 8004256:	0449      	lsls	r1, r1, #17
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	e02f      	b.n	80042be <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	035b      	lsls	r3, r3, #13
 800426a:	0b5b      	lsrs	r3, r3, #13
 800426c:	43d9      	mvns	r1, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	400a      	ands	r2, r1
 8004274:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	2380      	movs	r3, #128	; 0x80
 800427c:	02db      	lsls	r3, r3, #11
 800427e:	4013      	ands	r3, r2
 8004280:	d005      	beq.n	800428e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8004282:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <HAL_ADC_ConfigChannel+0x130>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <HAL_ADC_ConfigChannel+0x130>)
 8004288:	4913      	ldr	r1, [pc, #76]	; (80042d8 <HAL_ADC_ConfigChannel+0x134>)
 800428a:	400a      	ands	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	2380      	movs	r3, #128	; 0x80
 8004294:	029b      	lsls	r3, r3, #10
 8004296:	4013      	ands	r3, r2
 8004298:	d005      	beq.n	80042a6 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800429a:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <HAL_ADC_ConfigChannel+0x130>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <HAL_ADC_ConfigChannel+0x130>)
 80042a0:	490e      	ldr	r1, [pc, #56]	; (80042dc <HAL_ADC_ConfigChannel+0x138>)
 80042a2:	400a      	ands	r2, r1
 80042a4:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	025b      	lsls	r3, r3, #9
 80042ae:	4013      	ands	r3, r2
 80042b0:	d005      	beq.n	80042be <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <HAL_ADC_ConfigChannel+0x130>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <HAL_ADC_ConfigChannel+0x130>)
 80042b8:	4909      	ldr	r1, [pc, #36]	; (80042e0 <HAL_ADC_ConfigChannel+0x13c>)
 80042ba:	400a      	ands	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2250      	movs	r2, #80	; 0x50
 80042c2:	2100      	movs	r1, #0
 80042c4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b002      	add	sp, #8
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	00001001 	.word	0x00001001
 80042d4:	40012708 	.word	0x40012708
 80042d8:	ff7fffff 	.word	0xff7fffff
 80042dc:	ffbfffff 	.word	0xffbfffff
 80042e0:	feffffff 	.word	0xfeffffff

080042e4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <ADC_DelayMicroSecond+0x38>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	490b      	ldr	r1, [pc, #44]	; (8004320 <ADC_DelayMicroSecond+0x3c>)
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7fb ff24 	bl	8000140 <__udivsi3>
 80042f8:	0003      	movs	r3, r0
 80042fa:	001a      	movs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4353      	muls	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8004302:	e002      	b.n	800430a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3b01      	subs	r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f9      	bne.n	8004304 <ADC_DelayMicroSecond+0x20>
  }
}
 8004310:	46c0      	nop			; (mov r8, r8)
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	46bd      	mov	sp, r7
 8004316:	b004      	add	sp, #16
 8004318:	bd80      	pop	{r7, pc}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	20000000 	.word	0x20000000
 8004320:	000f4240 	.word	0x000f4240

08004324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	0002      	movs	r2, r0
 800432c:	1dfb      	adds	r3, r7, #7
 800432e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004330:	1dfb      	adds	r3, r7, #7
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b7f      	cmp	r3, #127	; 0x7f
 8004336:	d809      	bhi.n	800434c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004338:	1dfb      	adds	r3, r7, #7
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	001a      	movs	r2, r3
 800433e:	231f      	movs	r3, #31
 8004340:	401a      	ands	r2, r3
 8004342:	4b04      	ldr	r3, [pc, #16]	; (8004354 <__NVIC_EnableIRQ+0x30>)
 8004344:	2101      	movs	r1, #1
 8004346:	4091      	lsls	r1, r2
 8004348:	000a      	movs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]
  }
}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	46bd      	mov	sp, r7
 8004350:	b002      	add	sp, #8
 8004352:	bd80      	pop	{r7, pc}
 8004354:	e000e100 	.word	0xe000e100

08004358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	0002      	movs	r2, r0
 8004360:	6039      	str	r1, [r7, #0]
 8004362:	1dfb      	adds	r3, r7, #7
 8004364:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004366:	1dfb      	adds	r3, r7, #7
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b7f      	cmp	r3, #127	; 0x7f
 800436c:	d828      	bhi.n	80043c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800436e:	4a2f      	ldr	r2, [pc, #188]	; (800442c <__NVIC_SetPriority+0xd4>)
 8004370:	1dfb      	adds	r3, r7, #7
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	b25b      	sxtb	r3, r3
 8004376:	089b      	lsrs	r3, r3, #2
 8004378:	33c0      	adds	r3, #192	; 0xc0
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	589b      	ldr	r3, [r3, r2]
 800437e:	1dfa      	adds	r2, r7, #7
 8004380:	7812      	ldrb	r2, [r2, #0]
 8004382:	0011      	movs	r1, r2
 8004384:	2203      	movs	r2, #3
 8004386:	400a      	ands	r2, r1
 8004388:	00d2      	lsls	r2, r2, #3
 800438a:	21ff      	movs	r1, #255	; 0xff
 800438c:	4091      	lsls	r1, r2
 800438e:	000a      	movs	r2, r1
 8004390:	43d2      	mvns	r2, r2
 8004392:	401a      	ands	r2, r3
 8004394:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	019b      	lsls	r3, r3, #6
 800439a:	22ff      	movs	r2, #255	; 0xff
 800439c:	401a      	ands	r2, r3
 800439e:	1dfb      	adds	r3, r7, #7
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	0018      	movs	r0, r3
 80043a4:	2303      	movs	r3, #3
 80043a6:	4003      	ands	r3, r0
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043ac:	481f      	ldr	r0, [pc, #124]	; (800442c <__NVIC_SetPriority+0xd4>)
 80043ae:	1dfb      	adds	r3, r7, #7
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	b25b      	sxtb	r3, r3
 80043b4:	089b      	lsrs	r3, r3, #2
 80043b6:	430a      	orrs	r2, r1
 80043b8:	33c0      	adds	r3, #192	; 0xc0
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80043be:	e031      	b.n	8004424 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043c0:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <__NVIC_SetPriority+0xd8>)
 80043c2:	1dfb      	adds	r3, r7, #7
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	0019      	movs	r1, r3
 80043c8:	230f      	movs	r3, #15
 80043ca:	400b      	ands	r3, r1
 80043cc:	3b08      	subs	r3, #8
 80043ce:	089b      	lsrs	r3, r3, #2
 80043d0:	3306      	adds	r3, #6
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	18d3      	adds	r3, r2, r3
 80043d6:	3304      	adds	r3, #4
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	1dfa      	adds	r2, r7, #7
 80043dc:	7812      	ldrb	r2, [r2, #0]
 80043de:	0011      	movs	r1, r2
 80043e0:	2203      	movs	r2, #3
 80043e2:	400a      	ands	r2, r1
 80043e4:	00d2      	lsls	r2, r2, #3
 80043e6:	21ff      	movs	r1, #255	; 0xff
 80043e8:	4091      	lsls	r1, r2
 80043ea:	000a      	movs	r2, r1
 80043ec:	43d2      	mvns	r2, r2
 80043ee:	401a      	ands	r2, r3
 80043f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	019b      	lsls	r3, r3, #6
 80043f6:	22ff      	movs	r2, #255	; 0xff
 80043f8:	401a      	ands	r2, r3
 80043fa:	1dfb      	adds	r3, r7, #7
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	0018      	movs	r0, r3
 8004400:	2303      	movs	r3, #3
 8004402:	4003      	ands	r3, r0
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004408:	4809      	ldr	r0, [pc, #36]	; (8004430 <__NVIC_SetPriority+0xd8>)
 800440a:	1dfb      	adds	r3, r7, #7
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	001c      	movs	r4, r3
 8004410:	230f      	movs	r3, #15
 8004412:	4023      	ands	r3, r4
 8004414:	3b08      	subs	r3, #8
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	430a      	orrs	r2, r1
 800441a:	3306      	adds	r3, #6
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	18c3      	adds	r3, r0, r3
 8004420:	3304      	adds	r3, #4
 8004422:	601a      	str	r2, [r3, #0]
}
 8004424:	46c0      	nop			; (mov r8, r8)
 8004426:	46bd      	mov	sp, r7
 8004428:	b003      	add	sp, #12
 800442a:	bd90      	pop	{r4, r7, pc}
 800442c:	e000e100 	.word	0xe000e100
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	1e5a      	subs	r2, r3, #1
 8004440:	2380      	movs	r3, #128	; 0x80
 8004442:	045b      	lsls	r3, r3, #17
 8004444:	429a      	cmp	r2, r3
 8004446:	d301      	bcc.n	800444c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004448:	2301      	movs	r3, #1
 800444a:	e010      	b.n	800446e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <SysTick_Config+0x44>)
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	3a01      	subs	r2, #1
 8004452:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004454:	2301      	movs	r3, #1
 8004456:	425b      	negs	r3, r3
 8004458:	2103      	movs	r1, #3
 800445a:	0018      	movs	r0, r3
 800445c:	f7ff ff7c 	bl	8004358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <SysTick_Config+0x44>)
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004466:	4b04      	ldr	r3, [pc, #16]	; (8004478 <SysTick_Config+0x44>)
 8004468:	2207      	movs	r2, #7
 800446a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800446c:	2300      	movs	r3, #0
}
 800446e:	0018      	movs	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	b002      	add	sp, #8
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	e000e010 	.word	0xe000e010

0800447c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	210f      	movs	r1, #15
 8004488:	187b      	adds	r3, r7, r1
 800448a:	1c02      	adds	r2, r0, #0
 800448c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	187b      	adds	r3, r7, r1
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	b25b      	sxtb	r3, r3
 8004496:	0011      	movs	r1, r2
 8004498:	0018      	movs	r0, r3
 800449a:	f7ff ff5d 	bl	8004358 <__NVIC_SetPriority>
}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b004      	add	sp, #16
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	0002      	movs	r2, r0
 80044ae:	1dfb      	adds	r3, r7, #7
 80044b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044b2:	1dfb      	adds	r3, r7, #7
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	b25b      	sxtb	r3, r3
 80044b8:	0018      	movs	r0, r3
 80044ba:	f7ff ff33 	bl	8004324 <__NVIC_EnableIRQ>
}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	46bd      	mov	sp, r7
 80044c2:	b002      	add	sp, #8
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	0018      	movs	r0, r3
 80044d2:	f7ff ffaf 	bl	8004434 <SysTick_Config>
 80044d6:	0003      	movs	r3, r0
}
 80044d8:	0018      	movs	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	b002      	add	sp, #8
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e061      	b.n	80045b6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a32      	ldr	r2, [pc, #200]	; (80045c0 <HAL_DMA_Init+0xe0>)
 80044f8:	4694      	mov	ip, r2
 80044fa:	4463      	add	r3, ip
 80044fc:	2114      	movs	r1, #20
 80044fe:	0018      	movs	r0, r3
 8004500:	f7fb fe1e 	bl	8000140 <__udivsi3>
 8004504:	0003      	movs	r3, r0
 8004506:	009a      	lsls	r2, r3, #2
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a2d      	ldr	r2, [pc, #180]	; (80045c4 <HAL_DMA_Init+0xe4>)
 8004510:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2225      	movs	r2, #37	; 0x25
 8004516:	2102      	movs	r1, #2
 8004518:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4a28      	ldr	r2, [pc, #160]	; (80045c8 <HAL_DMA_Init+0xe8>)
 8004526:	4013      	ands	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004532:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800453e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800454a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	2380      	movs	r3, #128	; 0x80
 8004566:	01db      	lsls	r3, r3, #7
 8004568:	429a      	cmp	r2, r3
 800456a:	d018      	beq.n	800459e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800456c:	4b17      	ldr	r3, [pc, #92]	; (80045cc <HAL_DMA_Init+0xec>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004574:	211c      	movs	r1, #28
 8004576:	400b      	ands	r3, r1
 8004578:	210f      	movs	r1, #15
 800457a:	4099      	lsls	r1, r3
 800457c:	000b      	movs	r3, r1
 800457e:	43d9      	mvns	r1, r3
 8004580:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_DMA_Init+0xec>)
 8004582:	400a      	ands	r2, r1
 8004584:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004586:	4b11      	ldr	r3, [pc, #68]	; (80045cc <HAL_DMA_Init+0xec>)
 8004588:	6819      	ldr	r1, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	201c      	movs	r0, #28
 8004594:	4003      	ands	r3, r0
 8004596:	409a      	lsls	r2, r3
 8004598:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <HAL_DMA_Init+0xec>)
 800459a:	430a      	orrs	r2, r1
 800459c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2225      	movs	r2, #37	; 0x25
 80045a8:	2101      	movs	r1, #1
 80045aa:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2224      	movs	r2, #36	; 0x24
 80045b0:	2100      	movs	r1, #0
 80045b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	0018      	movs	r0, r3
 80045b8:	46bd      	mov	sp, r7
 80045ba:	b004      	add	sp, #16
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	bffdfff8 	.word	0xbffdfff8
 80045c4:	40020000 	.word	0x40020000
 80045c8:	ffff800f 	.word	0xffff800f
 80045cc:	400200a8 	.word	0x400200a8

080045d0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d8:	230f      	movs	r3, #15
 80045da:	18fb      	adds	r3, r7, r3
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2225      	movs	r2, #37	; 0x25
 80045e4:	5c9b      	ldrb	r3, [r3, r2]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d008      	beq.n	80045fe <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2204      	movs	r2, #4
 80045f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2224      	movs	r2, #36	; 0x24
 80045f6:	2100      	movs	r1, #0
 80045f8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e024      	b.n	8004648 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	210e      	movs	r1, #14
 800460a:	438a      	bics	r2, r1
 800460c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2101      	movs	r1, #1
 800461a:	438a      	bics	r2, r1
 800461c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	221c      	movs	r2, #28
 8004624:	401a      	ands	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	2101      	movs	r1, #1
 800462c:	4091      	lsls	r1, r2
 800462e:	000a      	movs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2225      	movs	r2, #37	; 0x25
 8004636:	2101      	movs	r1, #1
 8004638:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2224      	movs	r2, #36	; 0x24
 800463e:	2100      	movs	r1, #0
 8004640:	5499      	strb	r1, [r3, r2]

    return status;
 8004642:	230f      	movs	r3, #15
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004648:	0018      	movs	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	b004      	add	sp, #16
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004658:	210f      	movs	r1, #15
 800465a:	187b      	adds	r3, r7, r1
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2225      	movs	r2, #37	; 0x25
 8004664:	5c9b      	ldrb	r3, [r3, r2]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d006      	beq.n	800467a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2204      	movs	r2, #4
 8004670:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004672:	187b      	adds	r3, r7, r1
 8004674:	2201      	movs	r2, #1
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e02a      	b.n	80046d0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	210e      	movs	r1, #14
 8004686:	438a      	bics	r2, r1
 8004688:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2101      	movs	r1, #1
 8004696:	438a      	bics	r2, r1
 8004698:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	221c      	movs	r2, #28
 80046a0:	401a      	ands	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	2101      	movs	r1, #1
 80046a8:	4091      	lsls	r1, r2
 80046aa:	000a      	movs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2225      	movs	r2, #37	; 0x25
 80046b2:	2101      	movs	r1, #1
 80046b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2224      	movs	r2, #36	; 0x24
 80046ba:	2100      	movs	r1, #0
 80046bc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	0010      	movs	r0, r2
 80046ce:	4798      	blx	r3
    }
  }
  return status;
 80046d0:	230f      	movs	r3, #15
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	781b      	ldrb	r3, [r3, #0]
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	b004      	add	sp, #16
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	221c      	movs	r2, #28
 80046fc:	4013      	ands	r3, r2
 80046fe:	2204      	movs	r2, #4
 8004700:	409a      	lsls	r2, r3
 8004702:	0013      	movs	r3, r2
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4013      	ands	r3, r2
 8004708:	d026      	beq.n	8004758 <HAL_DMA_IRQHandler+0x7a>
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2204      	movs	r2, #4
 800470e:	4013      	ands	r3, r2
 8004710:	d022      	beq.n	8004758 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2220      	movs	r2, #32
 800471a:	4013      	ands	r3, r2
 800471c:	d107      	bne.n	800472e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2104      	movs	r1, #4
 800472a:	438a      	bics	r2, r1
 800472c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	221c      	movs	r2, #28
 8004734:	401a      	ands	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	2104      	movs	r1, #4
 800473c:	4091      	lsls	r1, r2
 800473e:	000a      	movs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	2b00      	cmp	r3, #0
 8004748:	d100      	bne.n	800474c <HAL_DMA_IRQHandler+0x6e>
 800474a:	e071      	b.n	8004830 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	0010      	movs	r0, r2
 8004754:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004756:	e06b      	b.n	8004830 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	221c      	movs	r2, #28
 800475e:	4013      	ands	r3, r2
 8004760:	2202      	movs	r2, #2
 8004762:	409a      	lsls	r2, r3
 8004764:	0013      	movs	r3, r2
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4013      	ands	r3, r2
 800476a:	d02d      	beq.n	80047c8 <HAL_DMA_IRQHandler+0xea>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2202      	movs	r2, #2
 8004770:	4013      	ands	r3, r2
 8004772:	d029      	beq.n	80047c8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2220      	movs	r2, #32
 800477c:	4013      	ands	r3, r2
 800477e:	d10b      	bne.n	8004798 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	210a      	movs	r1, #10
 800478c:	438a      	bics	r2, r1
 800478e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2225      	movs	r2, #37	; 0x25
 8004794:	2101      	movs	r1, #1
 8004796:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479c:	221c      	movs	r2, #28
 800479e:	401a      	ands	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	2102      	movs	r1, #2
 80047a6:	4091      	lsls	r1, r2
 80047a8:	000a      	movs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2224      	movs	r2, #36	; 0x24
 80047b0:	2100      	movs	r1, #0
 80047b2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d039      	beq.n	8004830 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	0010      	movs	r0, r2
 80047c4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80047c6:	e033      	b.n	8004830 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047cc:	221c      	movs	r2, #28
 80047ce:	4013      	ands	r3, r2
 80047d0:	2208      	movs	r2, #8
 80047d2:	409a      	lsls	r2, r3
 80047d4:	0013      	movs	r3, r2
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4013      	ands	r3, r2
 80047da:	d02a      	beq.n	8004832 <HAL_DMA_IRQHandler+0x154>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2208      	movs	r2, #8
 80047e0:	4013      	ands	r3, r2
 80047e2:	d026      	beq.n	8004832 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	210e      	movs	r1, #14
 80047f0:	438a      	bics	r2, r1
 80047f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f8:	221c      	movs	r2, #28
 80047fa:	401a      	ands	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	2101      	movs	r1, #1
 8004802:	4091      	lsls	r1, r2
 8004804:	000a      	movs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2225      	movs	r2, #37	; 0x25
 8004812:	2101      	movs	r1, #1
 8004814:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2224      	movs	r2, #36	; 0x24
 800481a:	2100      	movs	r1, #0
 800481c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	0010      	movs	r0, r2
 800482e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004830:	46c0      	nop			; (mov r8, r8)
 8004832:	46c0      	nop			; (mov r8, r8)
}
 8004834:	46bd      	mov	sp, r7
 8004836:	b004      	add	sp, #16
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004852:	e14f      	b.n	8004af4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2101      	movs	r1, #1
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4091      	lsls	r1, r2
 800485e:	000a      	movs	r2, r1
 8004860:	4013      	ands	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d100      	bne.n	800486c <HAL_GPIO_Init+0x30>
 800486a:	e140      	b.n	8004aee <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2203      	movs	r2, #3
 8004872:	4013      	ands	r3, r2
 8004874:	2b01      	cmp	r3, #1
 8004876:	d005      	beq.n	8004884 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2203      	movs	r2, #3
 800487e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004880:	2b02      	cmp	r3, #2
 8004882:	d130      	bne.n	80048e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	2203      	movs	r2, #3
 8004890:	409a      	lsls	r2, r3
 8004892:	0013      	movs	r3, r2
 8004894:	43da      	mvns	r2, r3
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4013      	ands	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	409a      	lsls	r2, r3
 80048a6:	0013      	movs	r3, r2
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048ba:	2201      	movs	r2, #1
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	409a      	lsls	r2, r3
 80048c0:	0013      	movs	r3, r2
 80048c2:	43da      	mvns	r2, r3
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	4013      	ands	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	2201      	movs	r2, #1
 80048d2:	401a      	ands	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	409a      	lsls	r2, r3
 80048d8:	0013      	movs	r3, r2
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2203      	movs	r2, #3
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d017      	beq.n	8004922 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	2203      	movs	r2, #3
 80048fe:	409a      	lsls	r2, r3
 8004900:	0013      	movs	r3, r2
 8004902:	43da      	mvns	r2, r3
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4013      	ands	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	409a      	lsls	r2, r3
 8004914:	0013      	movs	r3, r2
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2203      	movs	r2, #3
 8004928:	4013      	ands	r3, r2
 800492a:	2b02      	cmp	r3, #2
 800492c:	d123      	bne.n	8004976 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	08da      	lsrs	r2, r3, #3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3208      	adds	r2, #8
 8004936:	0092      	lsls	r2, r2, #2
 8004938:	58d3      	ldr	r3, [r2, r3]
 800493a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2207      	movs	r2, #7
 8004940:	4013      	ands	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	220f      	movs	r2, #15
 8004946:	409a      	lsls	r2, r3
 8004948:	0013      	movs	r3, r2
 800494a:	43da      	mvns	r2, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2107      	movs	r1, #7
 800495a:	400b      	ands	r3, r1
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	409a      	lsls	r2, r3
 8004960:	0013      	movs	r3, r2
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	08da      	lsrs	r2, r3, #3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3208      	adds	r2, #8
 8004970:	0092      	lsls	r2, r2, #2
 8004972:	6939      	ldr	r1, [r7, #16]
 8004974:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	2203      	movs	r2, #3
 8004982:	409a      	lsls	r2, r3
 8004984:	0013      	movs	r3, r2
 8004986:	43da      	mvns	r2, r3
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4013      	ands	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2203      	movs	r2, #3
 8004994:	401a      	ands	r2, r3
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	409a      	lsls	r2, r3
 800499c:	0013      	movs	r3, r2
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	23c0      	movs	r3, #192	; 0xc0
 80049b0:	029b      	lsls	r3, r3, #10
 80049b2:	4013      	ands	r3, r2
 80049b4:	d100      	bne.n	80049b8 <HAL_GPIO_Init+0x17c>
 80049b6:	e09a      	b.n	8004aee <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b8:	4b54      	ldr	r3, [pc, #336]	; (8004b0c <HAL_GPIO_Init+0x2d0>)
 80049ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049bc:	4b53      	ldr	r3, [pc, #332]	; (8004b0c <HAL_GPIO_Init+0x2d0>)
 80049be:	2101      	movs	r1, #1
 80049c0:	430a      	orrs	r2, r1
 80049c2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80049c4:	4a52      	ldr	r2, [pc, #328]	; (8004b10 <HAL_GPIO_Init+0x2d4>)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	089b      	lsrs	r3, r3, #2
 80049ca:	3302      	adds	r3, #2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	589b      	ldr	r3, [r3, r2]
 80049d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2203      	movs	r2, #3
 80049d6:	4013      	ands	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	220f      	movs	r2, #15
 80049dc:	409a      	lsls	r2, r3
 80049de:	0013      	movs	r3, r2
 80049e0:	43da      	mvns	r2, r3
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4013      	ands	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	23a0      	movs	r3, #160	; 0xa0
 80049ec:	05db      	lsls	r3, r3, #23
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d019      	beq.n	8004a26 <HAL_GPIO_Init+0x1ea>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a47      	ldr	r2, [pc, #284]	; (8004b14 <HAL_GPIO_Init+0x2d8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <HAL_GPIO_Init+0x1e6>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a46      	ldr	r2, [pc, #280]	; (8004b18 <HAL_GPIO_Init+0x2dc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00d      	beq.n	8004a1e <HAL_GPIO_Init+0x1e2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a45      	ldr	r2, [pc, #276]	; (8004b1c <HAL_GPIO_Init+0x2e0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d007      	beq.n	8004a1a <HAL_GPIO_Init+0x1de>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a44      	ldr	r2, [pc, #272]	; (8004b20 <HAL_GPIO_Init+0x2e4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d101      	bne.n	8004a16 <HAL_GPIO_Init+0x1da>
 8004a12:	2305      	movs	r3, #5
 8004a14:	e008      	b.n	8004a28 <HAL_GPIO_Init+0x1ec>
 8004a16:	2306      	movs	r3, #6
 8004a18:	e006      	b.n	8004a28 <HAL_GPIO_Init+0x1ec>
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e004      	b.n	8004a28 <HAL_GPIO_Init+0x1ec>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e002      	b.n	8004a28 <HAL_GPIO_Init+0x1ec>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <HAL_GPIO_Init+0x1ec>
 8004a26:	2300      	movs	r3, #0
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	2103      	movs	r1, #3
 8004a2c:	400a      	ands	r2, r1
 8004a2e:	0092      	lsls	r2, r2, #2
 8004a30:	4093      	lsls	r3, r2
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a38:	4935      	ldr	r1, [pc, #212]	; (8004b10 <HAL_GPIO_Init+0x2d4>)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	089b      	lsrs	r3, r3, #2
 8004a3e:	3302      	adds	r3, #2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a46:	4b37      	ldr	r3, [pc, #220]	; (8004b24 <HAL_GPIO_Init+0x2e8>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	43da      	mvns	r2, r3
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4013      	ands	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	035b      	lsls	r3, r3, #13
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d003      	beq.n	8004a6a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a6a:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <HAL_GPIO_Init+0x2e8>)
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004a70:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <HAL_GPIO_Init+0x2e8>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	43da      	mvns	r2, r3
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	2380      	movs	r3, #128	; 0x80
 8004a86:	039b      	lsls	r3, r3, #14
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004a94:	4b23      	ldr	r3, [pc, #140]	; (8004b24 <HAL_GPIO_Init+0x2e8>)
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004a9a:	4b22      	ldr	r3, [pc, #136]	; (8004b24 <HAL_GPIO_Init+0x2e8>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	43da      	mvns	r2, r3
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	2380      	movs	r3, #128	; 0x80
 8004ab0:	029b      	lsls	r3, r3, #10
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d003      	beq.n	8004abe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004abe:	4b19      	ldr	r3, [pc, #100]	; (8004b24 <HAL_GPIO_Init+0x2e8>)
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ac4:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <HAL_GPIO_Init+0x2e8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	43da      	mvns	r2, r3
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	025b      	lsls	r3, r3, #9
 8004adc:	4013      	ands	r3, r2
 8004ade:	d003      	beq.n	8004ae8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004ae8:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <HAL_GPIO_Init+0x2e8>)
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	3301      	adds	r3, #1
 8004af2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	40da      	lsrs	r2, r3
 8004afc:	1e13      	subs	r3, r2, #0
 8004afe:	d000      	beq.n	8004b02 <HAL_GPIO_Init+0x2c6>
 8004b00:	e6a8      	b.n	8004854 <HAL_GPIO_Init+0x18>
  }
}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	46c0      	nop			; (mov r8, r8)
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b006      	add	sp, #24
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40010000 	.word	0x40010000
 8004b14:	50000400 	.word	0x50000400
 8004b18:	50000800 	.word	0x50000800
 8004b1c:	50000c00 	.word	0x50000c00
 8004b20:	50001c00 	.word	0x50001c00
 8004b24:	40010400 	.word	0x40010400

08004b28 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	0008      	movs	r0, r1
 8004b32:	0011      	movs	r1, r2
 8004b34:	1cbb      	adds	r3, r7, #2
 8004b36:	1c02      	adds	r2, r0, #0
 8004b38:	801a      	strh	r2, [r3, #0]
 8004b3a:	1c7b      	adds	r3, r7, #1
 8004b3c:	1c0a      	adds	r2, r1, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b40:	1c7b      	adds	r3, r7, #1
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d004      	beq.n	8004b52 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b48:	1cbb      	adds	r3, r7, #2
 8004b4a:	881a      	ldrh	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004b50:	e003      	b.n	8004b5a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004b52:	1cbb      	adds	r3, r7, #2
 8004b54:	881a      	ldrh	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b002      	add	sp, #8
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	000a      	movs	r2, r1
 8004b6c:	1cbb      	adds	r3, r7, #2
 8004b6e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b76:	1cbb      	adds	r3, r7, #2
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	041a      	lsls	r2, r3, #16
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	43db      	mvns	r3, r3
 8004b84:	1cb9      	adds	r1, r7, #2
 8004b86:	8809      	ldrh	r1, [r1, #0]
 8004b88:	400b      	ands	r3, r1
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	619a      	str	r2, [r3, #24]
}
 8004b90:	46c0      	nop			; (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b004      	add	sp, #16
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	0002      	movs	r2, r0
 8004ba0:	1dbb      	adds	r3, r7, #6
 8004ba2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ba4:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	1dba      	adds	r2, r7, #6
 8004baa:	8812      	ldrh	r2, [r2, #0]
 8004bac:	4013      	ands	r3, r2
 8004bae:	d008      	beq.n	8004bc2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bb0:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004bb2:	1dba      	adds	r2, r7, #6
 8004bb4:	8812      	ldrh	r2, [r2, #0]
 8004bb6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bb8:	1dbb      	adds	r3, r7, #6
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 f807 	bl	8004bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b002      	add	sp, #8
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	40010400 	.word	0x40010400

08004bd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	1dbb      	adds	r3, r7, #6
 8004bda:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b002      	add	sp, #8
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e082      	b.n	8004cfc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2241      	movs	r2, #65	; 0x41
 8004bfa:	5c9b      	ldrb	r3, [r3, r2]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d107      	bne.n	8004c12 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2240      	movs	r2, #64	; 0x40
 8004c06:	2100      	movs	r1, #0
 8004c08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f7fd fe99 	bl	8002944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2241      	movs	r2, #65	; 0x41
 8004c16:	2124      	movs	r1, #36	; 0x24
 8004c18:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2101      	movs	r1, #1
 8004c26:	438a      	bics	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4934      	ldr	r1, [pc, #208]	; (8004d04 <HAL_I2C_Init+0x120>)
 8004c34:	400a      	ands	r2, r1
 8004c36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4931      	ldr	r1, [pc, #196]	; (8004d08 <HAL_I2C_Init+0x124>)
 8004c44:	400a      	ands	r2, r1
 8004c46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d108      	bne.n	8004c62 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2180      	movs	r1, #128	; 0x80
 8004c5a:	0209      	lsls	r1, r1, #8
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	e007      	b.n	8004c72 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2184      	movs	r1, #132	; 0x84
 8004c6c:	0209      	lsls	r1, r1, #8
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d104      	bne.n	8004c84 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2280      	movs	r2, #128	; 0x80
 8004c80:	0112      	lsls	r2, r2, #4
 8004c82:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	491f      	ldr	r1, [pc, #124]	; (8004d0c <HAL_I2C_Init+0x128>)
 8004c90:	430a      	orrs	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	491a      	ldr	r1, [pc, #104]	; (8004d08 <HAL_I2C_Init+0x124>)
 8004ca0:	400a      	ands	r2, r1
 8004ca2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69d9      	ldr	r1, [r3, #28]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1a      	ldr	r2, [r3, #32]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2101      	movs	r1, #1
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2241      	movs	r2, #65	; 0x41
 8004ce8:	2120      	movs	r1, #32
 8004cea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2242      	movs	r2, #66	; 0x42
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b002      	add	sp, #8
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	f0ffffff 	.word	0xf0ffffff
 8004d08:	ffff7fff 	.word	0xffff7fff
 8004d0c:	02008000 	.word	0x02008000

08004d10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2241      	movs	r2, #65	; 0x41
 8004d1e:	5c9b      	ldrb	r3, [r3, r2]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d138      	bne.n	8004d98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2240      	movs	r2, #64	; 0x40
 8004d2a:	5c9b      	ldrb	r3, [r3, r2]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e032      	b.n	8004d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2240      	movs	r2, #64	; 0x40
 8004d38:	2101      	movs	r1, #1
 8004d3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2241      	movs	r2, #65	; 0x41
 8004d40:	2124      	movs	r1, #36	; 0x24
 8004d42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2101      	movs	r1, #1
 8004d50:	438a      	bics	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4911      	ldr	r1, [pc, #68]	; (8004da4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004d60:	400a      	ands	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6819      	ldr	r1, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2101      	movs	r1, #1
 8004d80:	430a      	orrs	r2, r1
 8004d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2241      	movs	r2, #65	; 0x41
 8004d88:	2120      	movs	r1, #32
 8004d8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2240      	movs	r2, #64	; 0x40
 8004d90:	2100      	movs	r1, #0
 8004d92:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	e000      	b.n	8004d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d98:	2302      	movs	r3, #2
  }
}
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b002      	add	sp, #8
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	ffffefff 	.word	0xffffefff

08004da8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2241      	movs	r2, #65	; 0x41
 8004db6:	5c9b      	ldrb	r3, [r3, r2]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	d139      	bne.n	8004e32 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2240      	movs	r2, #64	; 0x40
 8004dc2:	5c9b      	ldrb	r3, [r3, r2]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e033      	b.n	8004e34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2240      	movs	r2, #64	; 0x40
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2241      	movs	r2, #65	; 0x41
 8004dd8:	2124      	movs	r1, #36	; 0x24
 8004dda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2101      	movs	r1, #1
 8004de8:	438a      	bics	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2101      	movs	r1, #1
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2241      	movs	r2, #65	; 0x41
 8004e22:	2120      	movs	r1, #32
 8004e24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2240      	movs	r2, #64	; 0x40
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e000      	b.n	8004e34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e32:	2302      	movs	r3, #2
  }
}
 8004e34:	0018      	movs	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b004      	add	sp, #16
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	fffff0ff 	.word	0xfffff0ff

08004e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e40:	b5b0      	push	{r4, r5, r7, lr}
 8004e42:	b08a      	sub	sp, #40	; 0x28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f000 fbaf 	bl	80055b2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e54:	4bcf      	ldr	r3, [pc, #828]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	220c      	movs	r2, #12
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e5e:	4bcd      	ldr	r3, [pc, #820]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	025b      	lsls	r3, r3, #9
 8004e66:	4013      	ands	r3, r2
 8004e68:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	4013      	ands	r3, r2
 8004e72:	d100      	bne.n	8004e76 <HAL_RCC_OscConfig+0x36>
 8004e74:	e07e      	b.n	8004f74 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d007      	beq.n	8004e8c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	2b0c      	cmp	r3, #12
 8004e80:	d112      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x68>
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	025b      	lsls	r3, r3, #9
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d10d      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e8c:	4bc1      	ldr	r3, [pc, #772]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	029b      	lsls	r3, r3, #10
 8004e94:	4013      	ands	r3, r2
 8004e96:	d100      	bne.n	8004e9a <HAL_RCC_OscConfig+0x5a>
 8004e98:	e06b      	b.n	8004f72 <HAL_RCC_OscConfig+0x132>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d167      	bne.n	8004f72 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f000 fb85 	bl	80055b2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	2380      	movs	r3, #128	; 0x80
 8004eae:	025b      	lsls	r3, r3, #9
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x84>
 8004eb4:	4bb7      	ldr	r3, [pc, #732]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	4bb6      	ldr	r3, [pc, #728]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004eba:	2180      	movs	r1, #128	; 0x80
 8004ebc:	0249      	lsls	r1, r1, #9
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e027      	b.n	8004f14 <HAL_RCC_OscConfig+0xd4>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	23a0      	movs	r3, #160	; 0xa0
 8004eca:	02db      	lsls	r3, r3, #11
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d10e      	bne.n	8004eee <HAL_RCC_OscConfig+0xae>
 8004ed0:	4bb0      	ldr	r3, [pc, #704]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4baf      	ldr	r3, [pc, #700]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004ed6:	2180      	movs	r1, #128	; 0x80
 8004ed8:	02c9      	lsls	r1, r1, #11
 8004eda:	430a      	orrs	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	4bad      	ldr	r3, [pc, #692]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4bac      	ldr	r3, [pc, #688]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004ee4:	2180      	movs	r1, #128	; 0x80
 8004ee6:	0249      	lsls	r1, r1, #9
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	e012      	b.n	8004f14 <HAL_RCC_OscConfig+0xd4>
 8004eee:	4ba9      	ldr	r3, [pc, #676]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	4ba8      	ldr	r3, [pc, #672]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004ef4:	49a8      	ldr	r1, [pc, #672]	; (8005198 <HAL_RCC_OscConfig+0x358>)
 8004ef6:	400a      	ands	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	4ba6      	ldr	r3, [pc, #664]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	025b      	lsls	r3, r3, #9
 8004f02:	4013      	ands	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4ba2      	ldr	r3, [pc, #648]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	4ba1      	ldr	r3, [pc, #644]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004f0e:	49a3      	ldr	r1, [pc, #652]	; (800519c <HAL_RCC_OscConfig+0x35c>)
 8004f10:	400a      	ands	r2, r1
 8004f12:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1c:	f7fe ffa0 	bl	8003e60 <HAL_GetTick>
 8004f20:	0003      	movs	r3, r0
 8004f22:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f24:	e009      	b.n	8004f3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f26:	f7fe ff9b 	bl	8003e60 <HAL_GetTick>
 8004f2a:	0002      	movs	r2, r0
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b64      	cmp	r3, #100	; 0x64
 8004f32:	d902      	bls.n	8004f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	f000 fb3c 	bl	80055b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f3a:	4b96      	ldr	r3, [pc, #600]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	2380      	movs	r3, #128	; 0x80
 8004f40:	029b      	lsls	r3, r3, #10
 8004f42:	4013      	ands	r3, r2
 8004f44:	d0ef      	beq.n	8004f26 <HAL_RCC_OscConfig+0xe6>
 8004f46:	e015      	b.n	8004f74 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fe ff8a 	bl	8003e60 <HAL_GetTick>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f52:	f7fe ff85 	bl	8003e60 <HAL_GetTick>
 8004f56:	0002      	movs	r2, r0
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b64      	cmp	r3, #100	; 0x64
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e326      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f64:	4b8b      	ldr	r3, [pc, #556]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	029b      	lsls	r3, r3, #10
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d1f0      	bne.n	8004f52 <HAL_RCC_OscConfig+0x112>
 8004f70:	e000      	b.n	8004f74 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d100      	bne.n	8004f80 <HAL_RCC_OscConfig+0x140>
 8004f7e:	e08b      	b.n	8005098 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d005      	beq.n	8004f98 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	2b0c      	cmp	r3, #12
 8004f90:	d13e      	bne.n	8005010 <HAL_RCC_OscConfig+0x1d0>
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d13b      	bne.n	8005010 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004f98:	4b7e      	ldr	r3, [pc, #504]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d004      	beq.n	8004fac <HAL_RCC_OscConfig+0x16c>
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e302      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fac:	4b79      	ldr	r3, [pc, #484]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	4a7b      	ldr	r2, [pc, #492]	; (80051a0 <HAL_RCC_OscConfig+0x360>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	0019      	movs	r1, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	021a      	lsls	r2, r3, #8
 8004fbc:	4b75      	ldr	r3, [pc, #468]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004fc2:	4b74      	ldr	r3, [pc, #464]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2209      	movs	r2, #9
 8004fc8:	4393      	bics	r3, r2
 8004fca:	0019      	movs	r1, r3
 8004fcc:	4b71      	ldr	r3, [pc, #452]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fd4:	f000 fc40 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8004fd8:	0001      	movs	r1, r0
 8004fda:	4b6e      	ldr	r3, [pc, #440]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	091b      	lsrs	r3, r3, #4
 8004fe0:	220f      	movs	r2, #15
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	4a6f      	ldr	r2, [pc, #444]	; (80051a4 <HAL_RCC_OscConfig+0x364>)
 8004fe6:	5cd3      	ldrb	r3, [r2, r3]
 8004fe8:	000a      	movs	r2, r1
 8004fea:	40da      	lsrs	r2, r3
 8004fec:	4b6e      	ldr	r3, [pc, #440]	; (80051a8 <HAL_RCC_OscConfig+0x368>)
 8004fee:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004ff0:	4b6e      	ldr	r3, [pc, #440]	; (80051ac <HAL_RCC_OscConfig+0x36c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2513      	movs	r5, #19
 8004ff6:	197c      	adds	r4, r7, r5
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f7fe feeb 	bl	8003dd4 <HAL_InitTick>
 8004ffe:	0003      	movs	r3, r0
 8005000:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005002:	197b      	adds	r3, r7, r5
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d046      	beq.n	8005098 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800500a:	197b      	adds	r3, r7, r5
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	e2d0      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d027      	beq.n	8005066 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005016:	4b5f      	ldr	r3, [pc, #380]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2209      	movs	r2, #9
 800501c:	4393      	bics	r3, r2
 800501e:	0019      	movs	r1, r3
 8005020:	4b5c      	ldr	r3, [pc, #368]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	430a      	orrs	r2, r1
 8005026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005028:	f7fe ff1a 	bl	8003e60 <HAL_GetTick>
 800502c:	0003      	movs	r3, r0
 800502e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005032:	f7fe ff15 	bl	8003e60 <HAL_GetTick>
 8005036:	0002      	movs	r2, r0
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e2b6      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005044:	4b53      	ldr	r3, [pc, #332]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2204      	movs	r2, #4
 800504a:	4013      	ands	r3, r2
 800504c:	d0f1      	beq.n	8005032 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800504e:	4b51      	ldr	r3, [pc, #324]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	4a53      	ldr	r2, [pc, #332]	; (80051a0 <HAL_RCC_OscConfig+0x360>)
 8005054:	4013      	ands	r3, r2
 8005056:	0019      	movs	r1, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	021a      	lsls	r2, r3, #8
 800505e:	4b4d      	ldr	r3, [pc, #308]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8005060:	430a      	orrs	r2, r1
 8005062:	605a      	str	r2, [r3, #4]
 8005064:	e018      	b.n	8005098 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005066:	4b4b      	ldr	r3, [pc, #300]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4b4a      	ldr	r3, [pc, #296]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 800506c:	2101      	movs	r1, #1
 800506e:	438a      	bics	r2, r1
 8005070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005072:	f7fe fef5 	bl	8003e60 <HAL_GetTick>
 8005076:	0003      	movs	r3, r0
 8005078:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800507c:	f7fe fef0 	bl	8003e60 <HAL_GetTick>
 8005080:	0002      	movs	r2, r0
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e291      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800508e:	4b41      	ldr	r3, [pc, #260]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2204      	movs	r2, #4
 8005094:	4013      	ands	r3, r2
 8005096:	d1f1      	bne.n	800507c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2210      	movs	r2, #16
 800509e:	4013      	ands	r3, r2
 80050a0:	d100      	bne.n	80050a4 <HAL_RCC_OscConfig+0x264>
 80050a2:	e0a1      	b.n	80051e8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d140      	bne.n	800512c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050aa:	4b3a      	ldr	r3, [pc, #232]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	2380      	movs	r3, #128	; 0x80
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4013      	ands	r3, r2
 80050b4:	d005      	beq.n	80050c2 <HAL_RCC_OscConfig+0x282>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e277      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050c2:	4b34      	ldr	r3, [pc, #208]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4a3a      	ldr	r2, [pc, #232]	; (80051b0 <HAL_RCC_OscConfig+0x370>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	0019      	movs	r1, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050d0:	4b30      	ldr	r3, [pc, #192]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050d6:	4b2f      	ldr	r3, [pc, #188]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	0a19      	lsrs	r1, r3, #8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	061a      	lsls	r2, r3, #24
 80050e4:	4b2b      	ldr	r3, [pc, #172]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	0b5b      	lsrs	r3, r3, #13
 80050f0:	3301      	adds	r3, #1
 80050f2:	2280      	movs	r2, #128	; 0x80
 80050f4:	0212      	lsls	r2, r2, #8
 80050f6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80050f8:	4b26      	ldr	r3, [pc, #152]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	091b      	lsrs	r3, r3, #4
 80050fe:	210f      	movs	r1, #15
 8005100:	400b      	ands	r3, r1
 8005102:	4928      	ldr	r1, [pc, #160]	; (80051a4 <HAL_RCC_OscConfig+0x364>)
 8005104:	5ccb      	ldrb	r3, [r1, r3]
 8005106:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005108:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <HAL_RCC_OscConfig+0x368>)
 800510a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800510c:	4b27      	ldr	r3, [pc, #156]	; (80051ac <HAL_RCC_OscConfig+0x36c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2513      	movs	r5, #19
 8005112:	197c      	adds	r4, r7, r5
 8005114:	0018      	movs	r0, r3
 8005116:	f7fe fe5d 	bl	8003dd4 <HAL_InitTick>
 800511a:	0003      	movs	r3, r0
 800511c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800511e:	197b      	adds	r3, r7, r5
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d060      	beq.n	80051e8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8005126:	197b      	adds	r3, r7, r5
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	e242      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d03f      	beq.n	80051b4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005134:	4b17      	ldr	r3, [pc, #92]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	4b16      	ldr	r3, [pc, #88]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 800513a:	2180      	movs	r1, #128	; 0x80
 800513c:	0049      	lsls	r1, r1, #1
 800513e:	430a      	orrs	r2, r1
 8005140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005142:	f7fe fe8d 	bl	8003e60 <HAL_GetTick>
 8005146:	0003      	movs	r3, r0
 8005148:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800514c:	f7fe fe88 	bl	8003e60 <HAL_GetTick>
 8005150:	0002      	movs	r2, r0
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e229      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800515e:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	2380      	movs	r3, #128	; 0x80
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4013      	ands	r3, r2
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	4a10      	ldr	r2, [pc, #64]	; (80051b0 <HAL_RCC_OscConfig+0x370>)
 8005170:	4013      	ands	r3, r2
 8005172:	0019      	movs	r1, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005178:	4b06      	ldr	r3, [pc, #24]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800517e:	4b05      	ldr	r3, [pc, #20]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	0a19      	lsrs	r1, r3, #8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	061a      	lsls	r2, r3, #24
 800518c:	4b01      	ldr	r3, [pc, #4]	; (8005194 <HAL_RCC_OscConfig+0x354>)
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
 8005192:	e029      	b.n	80051e8 <HAL_RCC_OscConfig+0x3a8>
 8005194:	40021000 	.word	0x40021000
 8005198:	fffeffff 	.word	0xfffeffff
 800519c:	fffbffff 	.word	0xfffbffff
 80051a0:	ffffe0ff 	.word	0xffffe0ff
 80051a4:	0800d188 	.word	0x0800d188
 80051a8:	20000000 	.word	0x20000000
 80051ac:	20000004 	.word	0x20000004
 80051b0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051b4:	4bbd      	ldr	r3, [pc, #756]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	4bbc      	ldr	r3, [pc, #752]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 80051ba:	49bd      	ldr	r1, [pc, #756]	; (80054b0 <HAL_RCC_OscConfig+0x670>)
 80051bc:	400a      	ands	r2, r1
 80051be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c0:	f7fe fe4e 	bl	8003e60 <HAL_GetTick>
 80051c4:	0003      	movs	r3, r0
 80051c6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051ca:	f7fe fe49 	bl	8003e60 <HAL_GetTick>
 80051ce:	0002      	movs	r2, r0
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e1ea      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80051dc:	4bb3      	ldr	r3, [pc, #716]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4013      	ands	r3, r2
 80051e6:	d1f0      	bne.n	80051ca <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2208      	movs	r2, #8
 80051ee:	4013      	ands	r3, r2
 80051f0:	d036      	beq.n	8005260 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d019      	beq.n	800522e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051fa:	4bac      	ldr	r3, [pc, #688]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 80051fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051fe:	4bab      	ldr	r3, [pc, #684]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005200:	2101      	movs	r1, #1
 8005202:	430a      	orrs	r2, r1
 8005204:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005206:	f7fe fe2b 	bl	8003e60 <HAL_GetTick>
 800520a:	0003      	movs	r3, r0
 800520c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005210:	f7fe fe26 	bl	8003e60 <HAL_GetTick>
 8005214:	0002      	movs	r2, r0
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e1c7      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005222:	4ba2      	ldr	r3, [pc, #648]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005226:	2202      	movs	r2, #2
 8005228:	4013      	ands	r3, r2
 800522a:	d0f1      	beq.n	8005210 <HAL_RCC_OscConfig+0x3d0>
 800522c:	e018      	b.n	8005260 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800522e:	4b9f      	ldr	r3, [pc, #636]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005232:	4b9e      	ldr	r3, [pc, #632]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005234:	2101      	movs	r1, #1
 8005236:	438a      	bics	r2, r1
 8005238:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523a:	f7fe fe11 	bl	8003e60 <HAL_GetTick>
 800523e:	0003      	movs	r3, r0
 8005240:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005244:	f7fe fe0c 	bl	8003e60 <HAL_GetTick>
 8005248:	0002      	movs	r2, r0
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e1ad      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005256:	4b95      	ldr	r3, [pc, #596]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525a:	2202      	movs	r2, #2
 800525c:	4013      	ands	r3, r2
 800525e:	d1f1      	bne.n	8005244 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2204      	movs	r2, #4
 8005266:	4013      	ands	r3, r2
 8005268:	d100      	bne.n	800526c <HAL_RCC_OscConfig+0x42c>
 800526a:	e0ae      	b.n	80053ca <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800526c:	2027      	movs	r0, #39	; 0x27
 800526e:	183b      	adds	r3, r7, r0
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005274:	4b8d      	ldr	r3, [pc, #564]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005278:	2380      	movs	r3, #128	; 0x80
 800527a:	055b      	lsls	r3, r3, #21
 800527c:	4013      	ands	r3, r2
 800527e:	d109      	bne.n	8005294 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005280:	4b8a      	ldr	r3, [pc, #552]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005284:	4b89      	ldr	r3, [pc, #548]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005286:	2180      	movs	r1, #128	; 0x80
 8005288:	0549      	lsls	r1, r1, #21
 800528a:	430a      	orrs	r2, r1
 800528c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800528e:	183b      	adds	r3, r7, r0
 8005290:	2201      	movs	r2, #1
 8005292:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005294:	4b87      	ldr	r3, [pc, #540]	; (80054b4 <HAL_RCC_OscConfig+0x674>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	4013      	ands	r3, r2
 800529e:	d11a      	bne.n	80052d6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052a0:	4b84      	ldr	r3, [pc, #528]	; (80054b4 <HAL_RCC_OscConfig+0x674>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4b83      	ldr	r3, [pc, #524]	; (80054b4 <HAL_RCC_OscConfig+0x674>)
 80052a6:	2180      	movs	r1, #128	; 0x80
 80052a8:	0049      	lsls	r1, r1, #1
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ae:	f7fe fdd7 	bl	8003e60 <HAL_GetTick>
 80052b2:	0003      	movs	r3, r0
 80052b4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b8:	f7fe fdd2 	bl	8003e60 <HAL_GetTick>
 80052bc:	0002      	movs	r2, r0
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b64      	cmp	r3, #100	; 0x64
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e173      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ca:	4b7a      	ldr	r3, [pc, #488]	; (80054b4 <HAL_RCC_OscConfig+0x674>)
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	4013      	ands	r3, r2
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	2380      	movs	r3, #128	; 0x80
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	429a      	cmp	r2, r3
 80052e0:	d107      	bne.n	80052f2 <HAL_RCC_OscConfig+0x4b2>
 80052e2:	4b72      	ldr	r3, [pc, #456]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 80052e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052e6:	4b71      	ldr	r3, [pc, #452]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 80052e8:	2180      	movs	r1, #128	; 0x80
 80052ea:	0049      	lsls	r1, r1, #1
 80052ec:	430a      	orrs	r2, r1
 80052ee:	651a      	str	r2, [r3, #80]	; 0x50
 80052f0:	e031      	b.n	8005356 <HAL_RCC_OscConfig+0x516>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10c      	bne.n	8005314 <HAL_RCC_OscConfig+0x4d4>
 80052fa:	4b6c      	ldr	r3, [pc, #432]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 80052fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052fe:	4b6b      	ldr	r3, [pc, #428]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005300:	496b      	ldr	r1, [pc, #428]	; (80054b0 <HAL_RCC_OscConfig+0x670>)
 8005302:	400a      	ands	r2, r1
 8005304:	651a      	str	r2, [r3, #80]	; 0x50
 8005306:	4b69      	ldr	r3, [pc, #420]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800530a:	4b68      	ldr	r3, [pc, #416]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 800530c:	496a      	ldr	r1, [pc, #424]	; (80054b8 <HAL_RCC_OscConfig+0x678>)
 800530e:	400a      	ands	r2, r1
 8005310:	651a      	str	r2, [r3, #80]	; 0x50
 8005312:	e020      	b.n	8005356 <HAL_RCC_OscConfig+0x516>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	23a0      	movs	r3, #160	; 0xa0
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	429a      	cmp	r2, r3
 800531e:	d10e      	bne.n	800533e <HAL_RCC_OscConfig+0x4fe>
 8005320:	4b62      	ldr	r3, [pc, #392]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005322:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005324:	4b61      	ldr	r3, [pc, #388]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005326:	2180      	movs	r1, #128	; 0x80
 8005328:	00c9      	lsls	r1, r1, #3
 800532a:	430a      	orrs	r2, r1
 800532c:	651a      	str	r2, [r3, #80]	; 0x50
 800532e:	4b5f      	ldr	r3, [pc, #380]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005332:	4b5e      	ldr	r3, [pc, #376]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005334:	2180      	movs	r1, #128	; 0x80
 8005336:	0049      	lsls	r1, r1, #1
 8005338:	430a      	orrs	r2, r1
 800533a:	651a      	str	r2, [r3, #80]	; 0x50
 800533c:	e00b      	b.n	8005356 <HAL_RCC_OscConfig+0x516>
 800533e:	4b5b      	ldr	r3, [pc, #364]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005340:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005342:	4b5a      	ldr	r3, [pc, #360]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005344:	495a      	ldr	r1, [pc, #360]	; (80054b0 <HAL_RCC_OscConfig+0x670>)
 8005346:	400a      	ands	r2, r1
 8005348:	651a      	str	r2, [r3, #80]	; 0x50
 800534a:	4b58      	ldr	r3, [pc, #352]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 800534c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800534e:	4b57      	ldr	r3, [pc, #348]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005350:	4959      	ldr	r1, [pc, #356]	; (80054b8 <HAL_RCC_OscConfig+0x678>)
 8005352:	400a      	ands	r2, r1
 8005354:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d015      	beq.n	800538a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535e:	f7fe fd7f 	bl	8003e60 <HAL_GetTick>
 8005362:	0003      	movs	r3, r0
 8005364:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005366:	e009      	b.n	800537c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005368:	f7fe fd7a 	bl	8003e60 <HAL_GetTick>
 800536c:	0002      	movs	r2, r0
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	4a52      	ldr	r2, [pc, #328]	; (80054bc <HAL_RCC_OscConfig+0x67c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e11a      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800537c:	4b4b      	ldr	r3, [pc, #300]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 800537e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4013      	ands	r3, r2
 8005386:	d0ef      	beq.n	8005368 <HAL_RCC_OscConfig+0x528>
 8005388:	e014      	b.n	80053b4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800538a:	f7fe fd69 	bl	8003e60 <HAL_GetTick>
 800538e:	0003      	movs	r3, r0
 8005390:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005392:	e009      	b.n	80053a8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005394:	f7fe fd64 	bl	8003e60 <HAL_GetTick>
 8005398:	0002      	movs	r2, r0
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	4a47      	ldr	r2, [pc, #284]	; (80054bc <HAL_RCC_OscConfig+0x67c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e104      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053a8:	4b40      	ldr	r3, [pc, #256]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 80053aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053ac:	2380      	movs	r3, #128	; 0x80
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4013      	ands	r3, r2
 80053b2:	d1ef      	bne.n	8005394 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053b4:	2327      	movs	r3, #39	; 0x27
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d105      	bne.n	80053ca <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053be:	4b3b      	ldr	r3, [pc, #236]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 80053c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c2:	4b3a      	ldr	r3, [pc, #232]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 80053c4:	493e      	ldr	r1, [pc, #248]	; (80054c0 <HAL_RCC_OscConfig+0x680>)
 80053c6:	400a      	ands	r2, r1
 80053c8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2220      	movs	r2, #32
 80053d0:	4013      	ands	r3, r2
 80053d2:	d049      	beq.n	8005468 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d026      	beq.n	800542a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80053dc:	4b33      	ldr	r3, [pc, #204]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	4b32      	ldr	r3, [pc, #200]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 80053e2:	2101      	movs	r1, #1
 80053e4:	430a      	orrs	r2, r1
 80053e6:	609a      	str	r2, [r3, #8]
 80053e8:	4b30      	ldr	r3, [pc, #192]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 80053ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ec:	4b2f      	ldr	r3, [pc, #188]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 80053ee:	2101      	movs	r1, #1
 80053f0:	430a      	orrs	r2, r1
 80053f2:	635a      	str	r2, [r3, #52]	; 0x34
 80053f4:	4b33      	ldr	r3, [pc, #204]	; (80054c4 <HAL_RCC_OscConfig+0x684>)
 80053f6:	6a1a      	ldr	r2, [r3, #32]
 80053f8:	4b32      	ldr	r3, [pc, #200]	; (80054c4 <HAL_RCC_OscConfig+0x684>)
 80053fa:	2180      	movs	r1, #128	; 0x80
 80053fc:	0189      	lsls	r1, r1, #6
 80053fe:	430a      	orrs	r2, r1
 8005400:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005402:	f7fe fd2d 	bl	8003e60 <HAL_GetTick>
 8005406:	0003      	movs	r3, r0
 8005408:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800540c:	f7fe fd28 	bl	8003e60 <HAL_GetTick>
 8005410:	0002      	movs	r2, r0
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e0c9      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800541e:	4b23      	ldr	r3, [pc, #140]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2202      	movs	r2, #2
 8005424:	4013      	ands	r3, r2
 8005426:	d0f1      	beq.n	800540c <HAL_RCC_OscConfig+0x5cc>
 8005428:	e01e      	b.n	8005468 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800542a:	4b20      	ldr	r3, [pc, #128]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	4b1f      	ldr	r3, [pc, #124]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005430:	2101      	movs	r1, #1
 8005432:	438a      	bics	r2, r1
 8005434:	609a      	str	r2, [r3, #8]
 8005436:	4b23      	ldr	r3, [pc, #140]	; (80054c4 <HAL_RCC_OscConfig+0x684>)
 8005438:	6a1a      	ldr	r2, [r3, #32]
 800543a:	4b22      	ldr	r3, [pc, #136]	; (80054c4 <HAL_RCC_OscConfig+0x684>)
 800543c:	4922      	ldr	r1, [pc, #136]	; (80054c8 <HAL_RCC_OscConfig+0x688>)
 800543e:	400a      	ands	r2, r1
 8005440:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005442:	f7fe fd0d 	bl	8003e60 <HAL_GetTick>
 8005446:	0003      	movs	r3, r0
 8005448:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800544c:	f7fe fd08 	bl	8003e60 <HAL_GetTick>
 8005450:	0002      	movs	r2, r0
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e0a9      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800545e:	4b13      	ldr	r3, [pc, #76]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2202      	movs	r2, #2
 8005464:	4013      	ands	r3, r2
 8005466:	d1f1      	bne.n	800544c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	2b00      	cmp	r3, #0
 800546e:	d100      	bne.n	8005472 <HAL_RCC_OscConfig+0x632>
 8005470:	e09e      	b.n	80055b0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	2b0c      	cmp	r3, #12
 8005476:	d100      	bne.n	800547a <HAL_RCC_OscConfig+0x63a>
 8005478:	e077      	b.n	800556a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	2b02      	cmp	r3, #2
 8005480:	d158      	bne.n	8005534 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005482:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b09      	ldr	r3, [pc, #36]	; (80054ac <HAL_RCC_OscConfig+0x66c>)
 8005488:	4910      	ldr	r1, [pc, #64]	; (80054cc <HAL_RCC_OscConfig+0x68c>)
 800548a:	400a      	ands	r2, r1
 800548c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548e:	f7fe fce7 	bl	8003e60 <HAL_GetTick>
 8005492:	0003      	movs	r3, r0
 8005494:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005496:	e01b      	b.n	80054d0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005498:	f7fe fce2 	bl	8003e60 <HAL_GetTick>
 800549c:	0002      	movs	r2, r0
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d914      	bls.n	80054d0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e083      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	40021000 	.word	0x40021000
 80054b0:	fffffeff 	.word	0xfffffeff
 80054b4:	40007000 	.word	0x40007000
 80054b8:	fffffbff 	.word	0xfffffbff
 80054bc:	00001388 	.word	0x00001388
 80054c0:	efffffff 	.word	0xefffffff
 80054c4:	40010000 	.word	0x40010000
 80054c8:	ffffdfff 	.word	0xffffdfff
 80054cc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80054d0:	4b3a      	ldr	r3, [pc, #232]	; (80055bc <HAL_RCC_OscConfig+0x77c>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	049b      	lsls	r3, r3, #18
 80054d8:	4013      	ands	r3, r2
 80054da:	d1dd      	bne.n	8005498 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054dc:	4b37      	ldr	r3, [pc, #220]	; (80055bc <HAL_RCC_OscConfig+0x77c>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4a37      	ldr	r2, [pc, #220]	; (80055c0 <HAL_RCC_OscConfig+0x780>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	0019      	movs	r1, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f4:	431a      	orrs	r2, r3
 80054f6:	4b31      	ldr	r3, [pc, #196]	; (80055bc <HAL_RCC_OscConfig+0x77c>)
 80054f8:	430a      	orrs	r2, r1
 80054fa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054fc:	4b2f      	ldr	r3, [pc, #188]	; (80055bc <HAL_RCC_OscConfig+0x77c>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4b2e      	ldr	r3, [pc, #184]	; (80055bc <HAL_RCC_OscConfig+0x77c>)
 8005502:	2180      	movs	r1, #128	; 0x80
 8005504:	0449      	lsls	r1, r1, #17
 8005506:	430a      	orrs	r2, r1
 8005508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550a:	f7fe fca9 	bl	8003e60 <HAL_GetTick>
 800550e:	0003      	movs	r3, r0
 8005510:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005514:	f7fe fca4 	bl	8003e60 <HAL_GetTick>
 8005518:	0002      	movs	r2, r0
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e045      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005526:	4b25      	ldr	r3, [pc, #148]	; (80055bc <HAL_RCC_OscConfig+0x77c>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	2380      	movs	r3, #128	; 0x80
 800552c:	049b      	lsls	r3, r3, #18
 800552e:	4013      	ands	r3, r2
 8005530:	d0f0      	beq.n	8005514 <HAL_RCC_OscConfig+0x6d4>
 8005532:	e03d      	b.n	80055b0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005534:	4b21      	ldr	r3, [pc, #132]	; (80055bc <HAL_RCC_OscConfig+0x77c>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	4b20      	ldr	r3, [pc, #128]	; (80055bc <HAL_RCC_OscConfig+0x77c>)
 800553a:	4922      	ldr	r1, [pc, #136]	; (80055c4 <HAL_RCC_OscConfig+0x784>)
 800553c:	400a      	ands	r2, r1
 800553e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005540:	f7fe fc8e 	bl	8003e60 <HAL_GetTick>
 8005544:	0003      	movs	r3, r0
 8005546:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800554a:	f7fe fc89 	bl	8003e60 <HAL_GetTick>
 800554e:	0002      	movs	r2, r0
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e02a      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800555c:	4b17      	ldr	r3, [pc, #92]	; (80055bc <HAL_RCC_OscConfig+0x77c>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	049b      	lsls	r3, r3, #18
 8005564:	4013      	ands	r3, r2
 8005566:	d1f0      	bne.n	800554a <HAL_RCC_OscConfig+0x70a>
 8005568:	e022      	b.n	80055b0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e01d      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005576:	4b11      	ldr	r3, [pc, #68]	; (80055bc <HAL_RCC_OscConfig+0x77c>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800557c:	69fa      	ldr	r2, [r7, #28]
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	025b      	lsls	r3, r3, #9
 8005582:	401a      	ands	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	429a      	cmp	r2, r3
 800558a:	d10f      	bne.n	80055ac <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	23f0      	movs	r3, #240	; 0xf0
 8005590:	039b      	lsls	r3, r3, #14
 8005592:	401a      	ands	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005598:	429a      	cmp	r2, r3
 800559a:	d107      	bne.n	80055ac <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800559c:	69fa      	ldr	r2, [r7, #28]
 800559e:	23c0      	movs	r3, #192	; 0xc0
 80055a0:	041b      	lsls	r3, r3, #16
 80055a2:	401a      	ands	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	0018      	movs	r0, r3
 80055b4:	46bd      	mov	sp, r7
 80055b6:	b00a      	add	sp, #40	; 0x28
 80055b8:	bdb0      	pop	{r4, r5, r7, pc}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	40021000 	.word	0x40021000
 80055c0:	ff02ffff 	.word	0xff02ffff
 80055c4:	feffffff 	.word	0xfeffffff

080055c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055c8:	b5b0      	push	{r4, r5, r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e128      	b.n	800582e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055dc:	4b96      	ldr	r3, [pc, #600]	; (8005838 <HAL_RCC_ClockConfig+0x270>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2201      	movs	r2, #1
 80055e2:	4013      	ands	r3, r2
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d91e      	bls.n	8005628 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ea:	4b93      	ldr	r3, [pc, #588]	; (8005838 <HAL_RCC_ClockConfig+0x270>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2201      	movs	r2, #1
 80055f0:	4393      	bics	r3, r2
 80055f2:	0019      	movs	r1, r3
 80055f4:	4b90      	ldr	r3, [pc, #576]	; (8005838 <HAL_RCC_ClockConfig+0x270>)
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055fc:	f7fe fc30 	bl	8003e60 <HAL_GetTick>
 8005600:	0003      	movs	r3, r0
 8005602:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005604:	e009      	b.n	800561a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005606:	f7fe fc2b 	bl	8003e60 <HAL_GetTick>
 800560a:	0002      	movs	r2, r0
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	4a8a      	ldr	r2, [pc, #552]	; (800583c <HAL_RCC_ClockConfig+0x274>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e109      	b.n	800582e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800561a:	4b87      	ldr	r3, [pc, #540]	; (8005838 <HAL_RCC_ClockConfig+0x270>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2201      	movs	r2, #1
 8005620:	4013      	ands	r3, r2
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d1ee      	bne.n	8005606 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2202      	movs	r2, #2
 800562e:	4013      	ands	r3, r2
 8005630:	d009      	beq.n	8005646 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005632:	4b83      	ldr	r3, [pc, #524]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	22f0      	movs	r2, #240	; 0xf0
 8005638:	4393      	bics	r3, r2
 800563a:	0019      	movs	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	4b7f      	ldr	r3, [pc, #508]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 8005642:	430a      	orrs	r2, r1
 8005644:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2201      	movs	r2, #1
 800564c:	4013      	ands	r3, r2
 800564e:	d100      	bne.n	8005652 <HAL_RCC_ClockConfig+0x8a>
 8005650:	e089      	b.n	8005766 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d107      	bne.n	800566a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800565a:	4b79      	ldr	r3, [pc, #484]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	2380      	movs	r3, #128	; 0x80
 8005660:	029b      	lsls	r3, r3, #10
 8005662:	4013      	ands	r3, r2
 8005664:	d120      	bne.n	80056a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e0e1      	b.n	800582e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b03      	cmp	r3, #3
 8005670:	d107      	bne.n	8005682 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005672:	4b73      	ldr	r3, [pc, #460]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	2380      	movs	r3, #128	; 0x80
 8005678:	049b      	lsls	r3, r3, #18
 800567a:	4013      	ands	r3, r2
 800567c:	d114      	bne.n	80056a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e0d5      	b.n	800582e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d106      	bne.n	8005698 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800568a:	4b6d      	ldr	r3, [pc, #436]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2204      	movs	r2, #4
 8005690:	4013      	ands	r3, r2
 8005692:	d109      	bne.n	80056a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e0ca      	b.n	800582e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005698:	4b69      	ldr	r3, [pc, #420]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	2380      	movs	r3, #128	; 0x80
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4013      	ands	r3, r2
 80056a2:	d101      	bne.n	80056a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0c2      	b.n	800582e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056a8:	4b65      	ldr	r3, [pc, #404]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	2203      	movs	r2, #3
 80056ae:	4393      	bics	r3, r2
 80056b0:	0019      	movs	r1, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	4b62      	ldr	r3, [pc, #392]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 80056b8:	430a      	orrs	r2, r1
 80056ba:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056bc:	f7fe fbd0 	bl	8003e60 <HAL_GetTick>
 80056c0:	0003      	movs	r3, r0
 80056c2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d111      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80056cc:	e009      	b.n	80056e2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ce:	f7fe fbc7 	bl	8003e60 <HAL_GetTick>
 80056d2:	0002      	movs	r2, r0
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	4a58      	ldr	r2, [pc, #352]	; (800583c <HAL_RCC_ClockConfig+0x274>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e0a5      	b.n	800582e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80056e2:	4b57      	ldr	r3, [pc, #348]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	220c      	movs	r2, #12
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d1ef      	bne.n	80056ce <HAL_RCC_ClockConfig+0x106>
 80056ee:	e03a      	b.n	8005766 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d111      	bne.n	800571c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056f8:	e009      	b.n	800570e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056fa:	f7fe fbb1 	bl	8003e60 <HAL_GetTick>
 80056fe:	0002      	movs	r2, r0
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	4a4d      	ldr	r2, [pc, #308]	; (800583c <HAL_RCC_ClockConfig+0x274>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e08f      	b.n	800582e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800570e:	4b4c      	ldr	r3, [pc, #304]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	220c      	movs	r2, #12
 8005714:	4013      	ands	r3, r2
 8005716:	2b0c      	cmp	r3, #12
 8005718:	d1ef      	bne.n	80056fa <HAL_RCC_ClockConfig+0x132>
 800571a:	e024      	b.n	8005766 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d11b      	bne.n	800575c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005724:	e009      	b.n	800573a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005726:	f7fe fb9b 	bl	8003e60 <HAL_GetTick>
 800572a:	0002      	movs	r2, r0
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	4a42      	ldr	r2, [pc, #264]	; (800583c <HAL_RCC_ClockConfig+0x274>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d901      	bls.n	800573a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e079      	b.n	800582e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800573a:	4b41      	ldr	r3, [pc, #260]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	220c      	movs	r2, #12
 8005740:	4013      	ands	r3, r2
 8005742:	2b04      	cmp	r3, #4
 8005744:	d1ef      	bne.n	8005726 <HAL_RCC_ClockConfig+0x15e>
 8005746:	e00e      	b.n	8005766 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005748:	f7fe fb8a 	bl	8003e60 <HAL_GetTick>
 800574c:	0002      	movs	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	4a3a      	ldr	r2, [pc, #232]	; (800583c <HAL_RCC_ClockConfig+0x274>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d901      	bls.n	800575c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e068      	b.n	800582e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800575c:	4b38      	ldr	r3, [pc, #224]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	220c      	movs	r2, #12
 8005762:	4013      	ands	r3, r2
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005766:	4b34      	ldr	r3, [pc, #208]	; (8005838 <HAL_RCC_ClockConfig+0x270>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2201      	movs	r2, #1
 800576c:	4013      	ands	r3, r2
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d21e      	bcs.n	80057b2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005774:	4b30      	ldr	r3, [pc, #192]	; (8005838 <HAL_RCC_ClockConfig+0x270>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2201      	movs	r2, #1
 800577a:	4393      	bics	r3, r2
 800577c:	0019      	movs	r1, r3
 800577e:	4b2e      	ldr	r3, [pc, #184]	; (8005838 <HAL_RCC_ClockConfig+0x270>)
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005786:	f7fe fb6b 	bl	8003e60 <HAL_GetTick>
 800578a:	0003      	movs	r3, r0
 800578c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578e:	e009      	b.n	80057a4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005790:	f7fe fb66 	bl	8003e60 <HAL_GetTick>
 8005794:	0002      	movs	r2, r0
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	4a28      	ldr	r2, [pc, #160]	; (800583c <HAL_RCC_ClockConfig+0x274>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e044      	b.n	800582e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a4:	4b24      	ldr	r3, [pc, #144]	; (8005838 <HAL_RCC_ClockConfig+0x270>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2201      	movs	r2, #1
 80057aa:	4013      	ands	r3, r2
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d1ee      	bne.n	8005790 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2204      	movs	r2, #4
 80057b8:	4013      	ands	r3, r2
 80057ba:	d009      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057bc:	4b20      	ldr	r3, [pc, #128]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	4a20      	ldr	r2, [pc, #128]	; (8005844 <HAL_RCC_ClockConfig+0x27c>)
 80057c2:	4013      	ands	r3, r2
 80057c4:	0019      	movs	r1, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 80057cc:	430a      	orrs	r2, r1
 80057ce:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2208      	movs	r2, #8
 80057d6:	4013      	ands	r3, r2
 80057d8:	d00a      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057da:	4b19      	ldr	r3, [pc, #100]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	4a1a      	ldr	r2, [pc, #104]	; (8005848 <HAL_RCC_ClockConfig+0x280>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	0019      	movs	r1, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	00da      	lsls	r2, r3, #3
 80057ea:	4b15      	ldr	r3, [pc, #84]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 80057ec:	430a      	orrs	r2, r1
 80057ee:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057f0:	f000 f832 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 80057f4:	0001      	movs	r1, r0
 80057f6:	4b12      	ldr	r3, [pc, #72]	; (8005840 <HAL_RCC_ClockConfig+0x278>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	091b      	lsrs	r3, r3, #4
 80057fc:	220f      	movs	r2, #15
 80057fe:	4013      	ands	r3, r2
 8005800:	4a12      	ldr	r2, [pc, #72]	; (800584c <HAL_RCC_ClockConfig+0x284>)
 8005802:	5cd3      	ldrb	r3, [r2, r3]
 8005804:	000a      	movs	r2, r1
 8005806:	40da      	lsrs	r2, r3
 8005808:	4b11      	ldr	r3, [pc, #68]	; (8005850 <HAL_RCC_ClockConfig+0x288>)
 800580a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800580c:	4b11      	ldr	r3, [pc, #68]	; (8005854 <HAL_RCC_ClockConfig+0x28c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	250b      	movs	r5, #11
 8005812:	197c      	adds	r4, r7, r5
 8005814:	0018      	movs	r0, r3
 8005816:	f7fe fadd 	bl	8003dd4 <HAL_InitTick>
 800581a:	0003      	movs	r3, r0
 800581c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800581e:	197b      	adds	r3, r7, r5
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005826:	197b      	adds	r3, r7, r5
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	e000      	b.n	800582e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	0018      	movs	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	b004      	add	sp, #16
 8005834:	bdb0      	pop	{r4, r5, r7, pc}
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	40022000 	.word	0x40022000
 800583c:	00001388 	.word	0x00001388
 8005840:	40021000 	.word	0x40021000
 8005844:	fffff8ff 	.word	0xfffff8ff
 8005848:	ffffc7ff 	.word	0xffffc7ff
 800584c:	0800d188 	.word	0x0800d188
 8005850:	20000000 	.word	0x20000000
 8005854:	20000004 	.word	0x20000004

08005858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005858:	b5b0      	push	{r4, r5, r7, lr}
 800585a:	b08e      	sub	sp, #56	; 0x38
 800585c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800585e:	4b4c      	ldr	r3, [pc, #304]	; (8005990 <HAL_RCC_GetSysClockFreq+0x138>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005866:	230c      	movs	r3, #12
 8005868:	4013      	ands	r3, r2
 800586a:	2b0c      	cmp	r3, #12
 800586c:	d014      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x40>
 800586e:	d900      	bls.n	8005872 <HAL_RCC_GetSysClockFreq+0x1a>
 8005870:	e07b      	b.n	800596a <HAL_RCC_GetSysClockFreq+0x112>
 8005872:	2b04      	cmp	r3, #4
 8005874:	d002      	beq.n	800587c <HAL_RCC_GetSysClockFreq+0x24>
 8005876:	2b08      	cmp	r3, #8
 8005878:	d00b      	beq.n	8005892 <HAL_RCC_GetSysClockFreq+0x3a>
 800587a:	e076      	b.n	800596a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800587c:	4b44      	ldr	r3, [pc, #272]	; (8005990 <HAL_RCC_GetSysClockFreq+0x138>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2210      	movs	r2, #16
 8005882:	4013      	ands	r3, r2
 8005884:	d002      	beq.n	800588c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005886:	4b43      	ldr	r3, [pc, #268]	; (8005994 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005888:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800588a:	e07c      	b.n	8005986 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800588c:	4b42      	ldr	r3, [pc, #264]	; (8005998 <HAL_RCC_GetSysClockFreq+0x140>)
 800588e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005890:	e079      	b.n	8005986 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005892:	4b42      	ldr	r3, [pc, #264]	; (800599c <HAL_RCC_GetSysClockFreq+0x144>)
 8005894:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005896:	e076      	b.n	8005986 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	0c9a      	lsrs	r2, r3, #18
 800589c:	230f      	movs	r3, #15
 800589e:	401a      	ands	r2, r3
 80058a0:	4b3f      	ldr	r3, [pc, #252]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x148>)
 80058a2:	5c9b      	ldrb	r3, [r3, r2]
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	0d9a      	lsrs	r2, r3, #22
 80058aa:	2303      	movs	r3, #3
 80058ac:	4013      	ands	r3, r2
 80058ae:	3301      	adds	r3, #1
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058b2:	4b37      	ldr	r3, [pc, #220]	; (8005990 <HAL_RCC_GetSysClockFreq+0x138>)
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	2380      	movs	r3, #128	; 0x80
 80058b8:	025b      	lsls	r3, r3, #9
 80058ba:	4013      	ands	r3, r2
 80058bc:	d01a      	beq.n	80058f4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	2300      	movs	r3, #0
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	4a35      	ldr	r2, [pc, #212]	; (800599c <HAL_RCC_GetSysClockFreq+0x144>)
 80058c8:	2300      	movs	r3, #0
 80058ca:	69b8      	ldr	r0, [r7, #24]
 80058cc:	69f9      	ldr	r1, [r7, #28]
 80058ce:	f7fa fe0b 	bl	80004e8 <__aeabi_lmul>
 80058d2:	0002      	movs	r2, r0
 80058d4:	000b      	movs	r3, r1
 80058d6:	0010      	movs	r0, r2
 80058d8:	0019      	movs	r1, r3
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f7fa fddf 	bl	80004a8 <__aeabi_uldivmod>
 80058ea:	0002      	movs	r2, r0
 80058ec:	000b      	movs	r3, r1
 80058ee:	0013      	movs	r3, r2
 80058f0:	637b      	str	r3, [r7, #52]	; 0x34
 80058f2:	e037      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80058f4:	4b26      	ldr	r3, [pc, #152]	; (8005990 <HAL_RCC_GetSysClockFreq+0x138>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2210      	movs	r2, #16
 80058fa:	4013      	ands	r3, r2
 80058fc:	d01a      	beq.n	8005934 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	60bb      	str	r3, [r7, #8]
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	4a23      	ldr	r2, [pc, #140]	; (8005994 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005908:	2300      	movs	r3, #0
 800590a:	68b8      	ldr	r0, [r7, #8]
 800590c:	68f9      	ldr	r1, [r7, #12]
 800590e:	f7fa fdeb 	bl	80004e8 <__aeabi_lmul>
 8005912:	0002      	movs	r2, r0
 8005914:	000b      	movs	r3, r1
 8005916:	0010      	movs	r0, r2
 8005918:	0019      	movs	r1, r3
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	603b      	str	r3, [r7, #0]
 800591e:	2300      	movs	r3, #0
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f7fa fdbf 	bl	80004a8 <__aeabi_uldivmod>
 800592a:	0002      	movs	r2, r0
 800592c:	000b      	movs	r3, r1
 800592e:	0013      	movs	r3, r2
 8005930:	637b      	str	r3, [r7, #52]	; 0x34
 8005932:	e017      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	0018      	movs	r0, r3
 8005938:	2300      	movs	r3, #0
 800593a:	0019      	movs	r1, r3
 800593c:	4a16      	ldr	r2, [pc, #88]	; (8005998 <HAL_RCC_GetSysClockFreq+0x140>)
 800593e:	2300      	movs	r3, #0
 8005940:	f7fa fdd2 	bl	80004e8 <__aeabi_lmul>
 8005944:	0002      	movs	r2, r0
 8005946:	000b      	movs	r3, r1
 8005948:	0010      	movs	r0, r2
 800594a:	0019      	movs	r1, r3
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	001c      	movs	r4, r3
 8005950:	2300      	movs	r3, #0
 8005952:	001d      	movs	r5, r3
 8005954:	0022      	movs	r2, r4
 8005956:	002b      	movs	r3, r5
 8005958:	f7fa fda6 	bl	80004a8 <__aeabi_uldivmod>
 800595c:	0002      	movs	r2, r0
 800595e:	000b      	movs	r3, r1
 8005960:	0013      	movs	r3, r2
 8005962:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005966:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005968:	e00d      	b.n	8005986 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800596a:	4b09      	ldr	r3, [pc, #36]	; (8005990 <HAL_RCC_GetSysClockFreq+0x138>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	0b5b      	lsrs	r3, r3, #13
 8005970:	2207      	movs	r2, #7
 8005972:	4013      	ands	r3, r2
 8005974:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	3301      	adds	r3, #1
 800597a:	2280      	movs	r2, #128	; 0x80
 800597c:	0212      	lsls	r2, r2, #8
 800597e:	409a      	lsls	r2, r3
 8005980:	0013      	movs	r3, r2
 8005982:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005984:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005988:	0018      	movs	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	b00e      	add	sp, #56	; 0x38
 800598e:	bdb0      	pop	{r4, r5, r7, pc}
 8005990:	40021000 	.word	0x40021000
 8005994:	003d0900 	.word	0x003d0900
 8005998:	00f42400 	.word	0x00f42400
 800599c:	007a1200 	.word	0x007a1200
 80059a0:	0800d1a0 	.word	0x0800d1a0

080059a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059a8:	4b02      	ldr	r3, [pc, #8]	; (80059b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80059aa:	681b      	ldr	r3, [r3, #0]
}
 80059ac:	0018      	movs	r0, r3
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	20000000 	.word	0x20000000

080059b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059bc:	f7ff fff2 	bl	80059a4 <HAL_RCC_GetHCLKFreq>
 80059c0:	0001      	movs	r1, r0
 80059c2:	4b06      	ldr	r3, [pc, #24]	; (80059dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	0a1b      	lsrs	r3, r3, #8
 80059c8:	2207      	movs	r2, #7
 80059ca:	4013      	ands	r3, r2
 80059cc:	4a04      	ldr	r2, [pc, #16]	; (80059e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059ce:	5cd3      	ldrb	r3, [r2, r3]
 80059d0:	40d9      	lsrs	r1, r3
 80059d2:	000b      	movs	r3, r1
}
 80059d4:	0018      	movs	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	40021000 	.word	0x40021000
 80059e0:	0800d198 	.word	0x0800d198

080059e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059e8:	f7ff ffdc 	bl	80059a4 <HAL_RCC_GetHCLKFreq>
 80059ec:	0001      	movs	r1, r0
 80059ee:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	0adb      	lsrs	r3, r3, #11
 80059f4:	2207      	movs	r2, #7
 80059f6:	4013      	ands	r3, r2
 80059f8:	4a04      	ldr	r2, [pc, #16]	; (8005a0c <HAL_RCC_GetPCLK2Freq+0x28>)
 80059fa:	5cd3      	ldrb	r3, [r2, r3]
 80059fc:	40d9      	lsrs	r1, r3
 80059fe:	000b      	movs	r3, r1
}
 8005a00:	0018      	movs	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	0800d198 	.word	0x0800d198

08005a10 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005a18:	2317      	movs	r3, #23
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2220      	movs	r2, #32
 8005a26:	4013      	ands	r3, r2
 8005a28:	d106      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	2380      	movs	r3, #128	; 0x80
 8005a30:	011b      	lsls	r3, r3, #4
 8005a32:	4013      	ands	r3, r2
 8005a34:	d100      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005a36:	e104      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a38:	4bb1      	ldr	r3, [pc, #708]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a3c:	2380      	movs	r3, #128	; 0x80
 8005a3e:	055b      	lsls	r3, r3, #21
 8005a40:	4013      	ands	r3, r2
 8005a42:	d10a      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a44:	4bae      	ldr	r3, [pc, #696]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a48:	4bad      	ldr	r3, [pc, #692]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a4a:	2180      	movs	r1, #128	; 0x80
 8005a4c:	0549      	lsls	r1, r1, #21
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005a52:	2317      	movs	r3, #23
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	2201      	movs	r2, #1
 8005a58:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a5a:	4baa      	ldr	r3, [pc, #680]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	2380      	movs	r3, #128	; 0x80
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4013      	ands	r3, r2
 8005a64:	d11a      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a66:	4ba7      	ldr	r3, [pc, #668]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4ba6      	ldr	r3, [pc, #664]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a6c:	2180      	movs	r1, #128	; 0x80
 8005a6e:	0049      	lsls	r1, r1, #1
 8005a70:	430a      	orrs	r2, r1
 8005a72:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a74:	f7fe f9f4 	bl	8003e60 <HAL_GetTick>
 8005a78:	0003      	movs	r3, r0
 8005a7a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7c:	e008      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a7e:	f7fe f9ef 	bl	8003e60 <HAL_GetTick>
 8005a82:	0002      	movs	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b64      	cmp	r3, #100	; 0x64
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e133      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a90:	4b9c      	ldr	r3, [pc, #624]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	2380      	movs	r3, #128	; 0x80
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	4013      	ands	r3, r2
 8005a9a:	d0f0      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005a9c:	4b98      	ldr	r3, [pc, #608]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	23c0      	movs	r3, #192	; 0xc0
 8005aa2:	039b      	lsls	r3, r3, #14
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	23c0      	movs	r3, #192	; 0xc0
 8005aae:	039b      	lsls	r3, r3, #14
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d107      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	23c0      	movs	r3, #192	; 0xc0
 8005abe:	039b      	lsls	r3, r3, #14
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d013      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	23c0      	movs	r3, #192	; 0xc0
 8005ace:	029b      	lsls	r3, r3, #10
 8005ad0:	401a      	ands	r2, r3
 8005ad2:	23c0      	movs	r3, #192	; 0xc0
 8005ad4:	029b      	lsls	r3, r3, #10
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d10a      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ada:	4b89      	ldr	r3, [pc, #548]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	2380      	movs	r3, #128	; 0x80
 8005ae0:	029b      	lsls	r3, r3, #10
 8005ae2:	401a      	ands	r2, r3
 8005ae4:	2380      	movs	r3, #128	; 0x80
 8005ae6:	029b      	lsls	r3, r3, #10
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d101      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e103      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005af0:	4b83      	ldr	r3, [pc, #524]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005af2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005af4:	23c0      	movs	r3, #192	; 0xc0
 8005af6:	029b      	lsls	r3, r3, #10
 8005af8:	4013      	ands	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d049      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	23c0      	movs	r3, #192	; 0xc0
 8005b08:	029b      	lsls	r3, r3, #10
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d004      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2220      	movs	r2, #32
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d10d      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	23c0      	movs	r3, #192	; 0xc0
 8005b22:	029b      	lsls	r3, r3, #10
 8005b24:	4013      	ands	r3, r2
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d034      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	2380      	movs	r3, #128	; 0x80
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	4013      	ands	r3, r2
 8005b36:	d02e      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005b38:	4b71      	ldr	r3, [pc, #452]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3c:	4a72      	ldr	r2, [pc, #456]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b42:	4b6f      	ldr	r3, [pc, #444]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b46:	4b6e      	ldr	r3, [pc, #440]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b48:	2180      	movs	r1, #128	; 0x80
 8005b4a:	0309      	lsls	r1, r1, #12
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b50:	4b6b      	ldr	r3, [pc, #428]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b54:	4b6a      	ldr	r3, [pc, #424]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b56:	496d      	ldr	r1, [pc, #436]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b58:	400a      	ands	r2, r1
 8005b5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005b5c:	4b68      	ldr	r3, [pc, #416]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	2380      	movs	r3, #128	; 0x80
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d014      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6c:	f7fe f978 	bl	8003e60 <HAL_GetTick>
 8005b70:	0003      	movs	r3, r0
 8005b72:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b74:	e009      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b76:	f7fe f973 	bl	8003e60 <HAL_GetTick>
 8005b7a:	0002      	movs	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	4a63      	ldr	r2, [pc, #396]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e0b6      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b8a:	4b5d      	ldr	r3, [pc, #372]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b8e:	2380      	movs	r3, #128	; 0x80
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4013      	ands	r3, r2
 8005b94:	d0ef      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	2380      	movs	r3, #128	; 0x80
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d01f      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	23c0      	movs	r3, #192	; 0xc0
 8005ba8:	029b      	lsls	r3, r3, #10
 8005baa:	401a      	ands	r2, r3
 8005bac:	23c0      	movs	r3, #192	; 0xc0
 8005bae:	029b      	lsls	r3, r3, #10
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d10c      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005bb4:	4b52      	ldr	r3, [pc, #328]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a56      	ldr	r2, [pc, #344]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bba:	4013      	ands	r3, r2
 8005bbc:	0019      	movs	r1, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	23c0      	movs	r3, #192	; 0xc0
 8005bc4:	039b      	lsls	r3, r3, #14
 8005bc6:	401a      	ands	r2, r3
 8005bc8:	4b4d      	ldr	r3, [pc, #308]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	4b4c      	ldr	r3, [pc, #304]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bd0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	23c0      	movs	r3, #192	; 0xc0
 8005bd8:	029b      	lsls	r3, r3, #10
 8005bda:	401a      	ands	r2, r3
 8005bdc:	4b48      	ldr	r3, [pc, #288]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bde:	430a      	orrs	r2, r1
 8005be0:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2220      	movs	r2, #32
 8005be8:	4013      	ands	r3, r2
 8005bea:	d01f      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	23c0      	movs	r3, #192	; 0xc0
 8005bf2:	029b      	lsls	r3, r3, #10
 8005bf4:	401a      	ands	r2, r3
 8005bf6:	23c0      	movs	r3, #192	; 0xc0
 8005bf8:	029b      	lsls	r3, r3, #10
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d10c      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005bfe:	4b40      	ldr	r3, [pc, #256]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a44      	ldr	r2, [pc, #272]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	0019      	movs	r1, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	23c0      	movs	r3, #192	; 0xc0
 8005c0e:	039b      	lsls	r3, r3, #14
 8005c10:	401a      	ands	r2, r3
 8005c12:	4b3b      	ldr	r3, [pc, #236]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c14:	430a      	orrs	r2, r1
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	4b39      	ldr	r3, [pc, #228]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c1a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	23c0      	movs	r3, #192	; 0xc0
 8005c22:	029b      	lsls	r3, r3, #10
 8005c24:	401a      	ands	r2, r3
 8005c26:	4b36      	ldr	r3, [pc, #216]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c2c:	2317      	movs	r3, #23
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d105      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c36:	4b32      	ldr	r3, [pc, #200]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c3a:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c3c:	4936      	ldr	r1, [pc, #216]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c3e:	400a      	ands	r2, r1
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2201      	movs	r2, #1
 8005c48:	4013      	ands	r3, r2
 8005c4a:	d009      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c4c:	4b2c      	ldr	r3, [pc, #176]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c50:	2203      	movs	r2, #3
 8005c52:	4393      	bics	r3, r2
 8005c54:	0019      	movs	r1, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	4b29      	ldr	r3, [pc, #164]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2202      	movs	r2, #2
 8005c66:	4013      	ands	r3, r2
 8005c68:	d009      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c6a:	4b25      	ldr	r3, [pc, #148]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6e:	220c      	movs	r2, #12
 8005c70:	4393      	bics	r3, r2
 8005c72:	0019      	movs	r1, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	4b21      	ldr	r3, [pc, #132]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2204      	movs	r2, #4
 8005c84:	4013      	ands	r3, r2
 8005c86:	d009      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c88:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8c:	4a23      	ldr	r2, [pc, #140]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	0019      	movs	r1, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695a      	ldr	r2, [r3, #20]
 8005c96:	4b1a      	ldr	r3, [pc, #104]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d009      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ca6:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005caa:	4a1d      	ldr	r2, [pc, #116]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	0019      	movs	r1, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	4b12      	ldr	r3, [pc, #72]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2240      	movs	r2, #64	; 0x40
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc8:	4a16      	ldr	r2, [pc, #88]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	0019      	movs	r1, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1a      	ldr	r2, [r3, #32]
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2280      	movs	r2, #128	; 0x80
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d009      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005ce2:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce6:	4a10      	ldr	r2, [pc, #64]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	0019      	movs	r1, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	4b03      	ldr	r3, [pc, #12]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b006      	add	sp, #24
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	40021000 	.word	0x40021000
 8005d04:	40007000 	.word	0x40007000
 8005d08:	fffcffff 	.word	0xfffcffff
 8005d0c:	fff7ffff 	.word	0xfff7ffff
 8005d10:	00001388 	.word	0x00001388
 8005d14:	ffcfffff 	.word	0xffcfffff
 8005d18:	efffffff 	.word	0xefffffff
 8005d1c:	fffff3ff 	.word	0xfffff3ff
 8005d20:	ffffcfff 	.word	0xffffcfff
 8005d24:	fbffffff 	.word	0xfbffffff
 8005d28:	fff3ffff 	.word	0xfff3ffff

08005d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e083      	b.n	8005e46 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	2382      	movs	r3, #130	; 0x82
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d009      	beq.n	8005d66 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	61da      	str	r2, [r3, #28]
 8005d58:	e005      	b.n	8005d66 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2251      	movs	r2, #81	; 0x51
 8005d70:	5c9b      	ldrb	r3, [r3, r2]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d107      	bne.n	8005d88 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2250      	movs	r2, #80	; 0x50
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	0018      	movs	r0, r3
 8005d84:	f7fd fc86 	bl	8003694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2251      	movs	r2, #81	; 0x51
 8005d8c:	2102      	movs	r1, #2
 8005d8e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2140      	movs	r1, #64	; 0x40
 8005d9c:	438a      	bics	r2, r1
 8005d9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	2382      	movs	r3, #130	; 0x82
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	401a      	ands	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6899      	ldr	r1, [r3, #8]
 8005dae:	2384      	movs	r3, #132	; 0x84
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	400b      	ands	r3, r1
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68d9      	ldr	r1, [r3, #12]
 8005dba:	2380      	movs	r3, #128	; 0x80
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	400b      	ands	r3, r1
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2102      	movs	r1, #2
 8005dc8:	400b      	ands	r3, r1
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	400b      	ands	r3, r1
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6999      	ldr	r1, [r3, #24]
 8005dda:	2380      	movs	r3, #128	; 0x80
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	400b      	ands	r3, r1
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	2138      	movs	r1, #56	; 0x38
 8005de8:	400b      	ands	r3, r1
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	2180      	movs	r1, #128	; 0x80
 8005df2:	400b      	ands	r3, r1
 8005df4:	431a      	orrs	r2, r3
 8005df6:	0011      	movs	r1, r2
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dfc:	2380      	movs	r3, #128	; 0x80
 8005dfe:	019b      	lsls	r3, r3, #6
 8005e00:	401a      	ands	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	0c1b      	lsrs	r3, r3, #16
 8005e10:	2204      	movs	r2, #4
 8005e12:	4013      	ands	r3, r2
 8005e14:	0019      	movs	r1, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	2210      	movs	r2, #16
 8005e1c:	401a      	ands	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69da      	ldr	r2, [r3, #28]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4907      	ldr	r1, [pc, #28]	; (8005e50 <HAL_SPI_Init+0x124>)
 8005e32:	400a      	ands	r2, r1
 8005e34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2251      	movs	r2, #81	; 0x51
 8005e40:	2101      	movs	r1, #1
 8005e42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	0018      	movs	r0, r3
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	b002      	add	sp, #8
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	46c0      	nop			; (mov r8, r8)
 8005e50:	fffff7ff 	.word	0xfffff7ff

08005e54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	603b      	str	r3, [r7, #0]
 8005e60:	1dbb      	adds	r3, r7, #6
 8005e62:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e64:	231f      	movs	r3, #31
 8005e66:	18fb      	adds	r3, r7, r3
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2250      	movs	r2, #80	; 0x50
 8005e70:	5c9b      	ldrb	r3, [r3, r2]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_SPI_Transmit+0x26>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e145      	b.n	8006106 <HAL_SPI_Transmit+0x2b2>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2250      	movs	r2, #80	; 0x50
 8005e7e:	2101      	movs	r1, #1
 8005e80:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e82:	f7fd ffed 	bl	8003e60 <HAL_GetTick>
 8005e86:	0003      	movs	r3, r0
 8005e88:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005e8a:	2316      	movs	r3, #22
 8005e8c:	18fb      	adds	r3, r7, r3
 8005e8e:	1dba      	adds	r2, r7, #6
 8005e90:	8812      	ldrh	r2, [r2, #0]
 8005e92:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2251      	movs	r2, #81	; 0x51
 8005e98:	5c9b      	ldrb	r3, [r3, r2]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d004      	beq.n	8005eaa <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005ea0:	231f      	movs	r3, #31
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ea8:	e126      	b.n	80060f8 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <HAL_SPI_Transmit+0x64>
 8005eb0:	1dbb      	adds	r3, r7, #6
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d104      	bne.n	8005ec2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005eb8:	231f      	movs	r3, #31
 8005eba:	18fb      	adds	r3, r7, r3
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ec0:	e11a      	b.n	80060f8 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2251      	movs	r2, #81	; 0x51
 8005ec6:	2103      	movs	r1, #3
 8005ec8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	1dba      	adds	r2, r7, #6
 8005eda:	8812      	ldrh	r2, [r2, #0]
 8005edc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	1dba      	adds	r2, r7, #6
 8005ee2:	8812      	ldrh	r2, [r2, #0]
 8005ee4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d110      	bne.n	8005f32 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2140      	movs	r1, #64	; 0x40
 8005f1c:	438a      	bics	r2, r1
 8005f1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2180      	movs	r1, #128	; 0x80
 8005f2c:	01c9      	lsls	r1, r1, #7
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2240      	movs	r2, #64	; 0x40
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b40      	cmp	r3, #64	; 0x40
 8005f3e:	d007      	beq.n	8005f50 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2140      	movs	r1, #64	; 0x40
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	2380      	movs	r3, #128	; 0x80
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d152      	bne.n	8006002 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d004      	beq.n	8005f6e <HAL_SPI_Transmit+0x11a>
 8005f64:	2316      	movs	r3, #22
 8005f66:	18fb      	adds	r3, r7, r3
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d143      	bne.n	8005ff6 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	881a      	ldrh	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	1c9a      	adds	r2, r3, #2
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f92:	e030      	b.n	8005ff6 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d112      	bne.n	8005fc8 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	881a      	ldrh	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb2:	1c9a      	adds	r2, r3, #2
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fc6:	e016      	b.n	8005ff6 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fc8:	f7fd ff4a 	bl	8003e60 <HAL_GetTick>
 8005fcc:	0002      	movs	r2, r0
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d802      	bhi.n	8005fde <HAL_SPI_Transmit+0x18a>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	d102      	bne.n	8005fe4 <HAL_SPI_Transmit+0x190>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d108      	bne.n	8005ff6 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8005fe4:	231f      	movs	r3, #31
 8005fe6:	18fb      	adds	r3, r7, r3
 8005fe8:	2203      	movs	r2, #3
 8005fea:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2251      	movs	r2, #81	; 0x51
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	5499      	strb	r1, [r3, r2]
          goto error;
 8005ff4:	e080      	b.n	80060f8 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1c9      	bne.n	8005f94 <HAL_SPI_Transmit+0x140>
 8006000:	e053      	b.n	80060aa <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d004      	beq.n	8006014 <HAL_SPI_Transmit+0x1c0>
 800600a:	2316      	movs	r3, #22
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d145      	bne.n	80060a0 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	330c      	adds	r3, #12
 800601e:	7812      	ldrb	r2, [r2, #0]
 8006020:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800603a:	e031      	b.n	80060a0 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2202      	movs	r2, #2
 8006044:	4013      	ands	r3, r2
 8006046:	2b02      	cmp	r3, #2
 8006048:	d113      	bne.n	8006072 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	7812      	ldrb	r2, [r2, #0]
 8006056:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006070:	e016      	b.n	80060a0 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006072:	f7fd fef5 	bl	8003e60 <HAL_GetTick>
 8006076:	0002      	movs	r2, r0
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d802      	bhi.n	8006088 <HAL_SPI_Transmit+0x234>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	d102      	bne.n	800608e <HAL_SPI_Transmit+0x23a>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d108      	bne.n	80060a0 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 800608e:	231f      	movs	r3, #31
 8006090:	18fb      	adds	r3, r7, r3
 8006092:	2203      	movs	r2, #3
 8006094:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2251      	movs	r2, #81	; 0x51
 800609a:	2101      	movs	r1, #1
 800609c:	5499      	strb	r1, [r3, r2]
          goto error;
 800609e:	e02b      	b.n	80060f8 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1c8      	bne.n	800603c <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	0018      	movs	r0, r3
 80060b2:	f000 fc1f 	bl	80068f4 <SPI_EndRxTxTransaction>
 80060b6:	1e03      	subs	r3, r0, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060c8:	2300      	movs	r3, #0
 80060ca:	613b      	str	r3, [r7, #16]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d004      	beq.n	80060f0 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80060e6:	231f      	movs	r3, #31
 80060e8:	18fb      	adds	r3, r7, r3
 80060ea:	2201      	movs	r2, #1
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	e003      	b.n	80060f8 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2251      	movs	r2, #81	; 0x51
 80060f4:	2101      	movs	r1, #1
 80060f6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2250      	movs	r2, #80	; 0x50
 80060fc:	2100      	movs	r1, #0
 80060fe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006100:	231f      	movs	r3, #31
 8006102:	18fb      	adds	r3, r7, r3
 8006104:	781b      	ldrb	r3, [r3, #0]
}
 8006106:	0018      	movs	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	b008      	add	sp, #32
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006110:	b590      	push	{r4, r7, lr}
 8006112:	b089      	sub	sp, #36	; 0x24
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	1dbb      	adds	r3, r7, #6
 800611e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006120:	2117      	movs	r1, #23
 8006122:	187b      	adds	r3, r7, r1
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2251      	movs	r2, #81	; 0x51
 800612c:	5c9b      	ldrb	r3, [r3, r2]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b01      	cmp	r3, #1
 8006132:	d003      	beq.n	800613c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8006134:	187b      	adds	r3, r7, r1
 8006136:	2202      	movs	r2, #2
 8006138:	701a      	strb	r2, [r3, #0]
    goto error;
 800613a:	e109      	b.n	8006350 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	2382      	movs	r3, #130	; 0x82
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	429a      	cmp	r2, r3
 8006146:	d113      	bne.n	8006170 <HAL_SPI_Receive+0x60>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10f      	bne.n	8006170 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2251      	movs	r2, #81	; 0x51
 8006154:	2104      	movs	r1, #4
 8006156:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006158:	1dbb      	adds	r3, r7, #6
 800615a:	881c      	ldrh	r4, [r3, #0]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	0023      	movs	r3, r4
 8006168:	f000 f900 	bl	800636c <HAL_SPI_TransmitReceive>
 800616c:	0003      	movs	r3, r0
 800616e:	e0f6      	b.n	800635e <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2250      	movs	r2, #80	; 0x50
 8006174:	5c9b      	ldrb	r3, [r3, r2]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_SPI_Receive+0x6e>
 800617a:	2302      	movs	r3, #2
 800617c:	e0ef      	b.n	800635e <HAL_SPI_Receive+0x24e>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2250      	movs	r2, #80	; 0x50
 8006182:	2101      	movs	r1, #1
 8006184:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006186:	f7fd fe6b 	bl	8003e60 <HAL_GetTick>
 800618a:	0003      	movs	r3, r0
 800618c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_SPI_Receive+0x8c>
 8006194:	1dbb      	adds	r3, r7, #6
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d104      	bne.n	80061a6 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800619c:	2317      	movs	r3, #23
 800619e:	18fb      	adds	r3, r7, r3
 80061a0:	2201      	movs	r2, #1
 80061a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80061a4:	e0d4      	b.n	8006350 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2251      	movs	r2, #81	; 0x51
 80061aa:	2104      	movs	r1, #4
 80061ac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	1dba      	adds	r2, r7, #6
 80061be:	8812      	ldrh	r2, [r2, #0]
 80061c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	1dba      	adds	r2, r7, #6
 80061c6:	8812      	ldrh	r2, [r2, #0]
 80061c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d10f      	bne.n	8006214 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2140      	movs	r1, #64	; 0x40
 8006200:	438a      	bics	r2, r1
 8006202:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4956      	ldr	r1, [pc, #344]	; (8006368 <HAL_SPI_Receive+0x258>)
 8006210:	400a      	ands	r2, r1
 8006212:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2240      	movs	r2, #64	; 0x40
 800621c:	4013      	ands	r3, r2
 800621e:	2b40      	cmp	r3, #64	; 0x40
 8006220:	d007      	beq.n	8006232 <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2140      	movs	r1, #64	; 0x40
 800622e:	430a      	orrs	r2, r1
 8006230:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d000      	beq.n	800623c <HAL_SPI_Receive+0x12c>
 800623a:	e06c      	b.n	8006316 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800623c:	e033      	b.n	80062a6 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	2201      	movs	r2, #1
 8006246:	4013      	ands	r3, r2
 8006248:	2b01      	cmp	r3, #1
 800624a:	d115      	bne.n	8006278 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	001a      	movs	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	7812      	ldrb	r2, [r2, #0]
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006276:	e016      	b.n	80062a6 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006278:	f7fd fdf2 	bl	8003e60 <HAL_GetTick>
 800627c:	0002      	movs	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d802      	bhi.n	800628e <HAL_SPI_Receive+0x17e>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	d102      	bne.n	8006294 <HAL_SPI_Receive+0x184>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d108      	bne.n	80062a6 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8006294:	2317      	movs	r3, #23
 8006296:	18fb      	adds	r3, r7, r3
 8006298:	2203      	movs	r2, #3
 800629a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2251      	movs	r2, #81	; 0x51
 80062a0:	2101      	movs	r1, #1
 80062a2:	5499      	strb	r1, [r3, r2]
          goto error;
 80062a4:	e054      	b.n	8006350 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1c6      	bne.n	800623e <HAL_SPI_Receive+0x12e>
 80062b0:	e036      	b.n	8006320 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2201      	movs	r2, #1
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d113      	bne.n	80062e8 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ca:	b292      	uxth	r2, r2
 80062cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	1c9a      	adds	r2, r3, #2
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062dc:	b29b      	uxth	r3, r3
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062e6:	e016      	b.n	8006316 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062e8:	f7fd fdba 	bl	8003e60 <HAL_GetTick>
 80062ec:	0002      	movs	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d802      	bhi.n	80062fe <HAL_SPI_Receive+0x1ee>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	3301      	adds	r3, #1
 80062fc:	d102      	bne.n	8006304 <HAL_SPI_Receive+0x1f4>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d108      	bne.n	8006316 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8006304:	2317      	movs	r3, #23
 8006306:	18fb      	adds	r3, r7, r3
 8006308:	2203      	movs	r2, #3
 800630a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2251      	movs	r2, #81	; 0x51
 8006310:	2101      	movs	r1, #1
 8006312:	5499      	strb	r1, [r3, r2]
          goto error;
 8006314:	e01c      	b.n	8006350 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631a:	b29b      	uxth	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1c8      	bne.n	80062b2 <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	0018      	movs	r0, r3
 8006328:	f000 fa7a 	bl	8006820 <SPI_EndRxTransaction>
 800632c:	1e03      	subs	r3, r0, #0
 800632e:	d002      	beq.n	8006336 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633a:	2b00      	cmp	r3, #0
 800633c:	d004      	beq.n	8006348 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 800633e:	2317      	movs	r3, #23
 8006340:	18fb      	adds	r3, r7, r3
 8006342:	2201      	movs	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e003      	b.n	8006350 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2251      	movs	r2, #81	; 0x51
 800634c:	2101      	movs	r1, #1
 800634e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2250      	movs	r2, #80	; 0x50
 8006354:	2100      	movs	r1, #0
 8006356:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006358:	2317      	movs	r3, #23
 800635a:	18fb      	adds	r3, r7, r3
 800635c:	781b      	ldrb	r3, [r3, #0]
}
 800635e:	0018      	movs	r0, r3
 8006360:	46bd      	mov	sp, r7
 8006362:	b007      	add	sp, #28
 8006364:	bd90      	pop	{r4, r7, pc}
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	ffffbfff 	.word	0xffffbfff

0800636c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08c      	sub	sp, #48	; 0x30
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	001a      	movs	r2, r3
 800637a:	1cbb      	adds	r3, r7, #2
 800637c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800637e:	2301      	movs	r3, #1
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006382:	232b      	movs	r3, #43	; 0x2b
 8006384:	18fb      	adds	r3, r7, r3
 8006386:	2200      	movs	r2, #0
 8006388:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2250      	movs	r2, #80	; 0x50
 800638e:	5c9b      	ldrb	r3, [r3, r2]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x2c>
 8006394:	2302      	movs	r3, #2
 8006396:	e1b0      	b.n	80066fa <HAL_SPI_TransmitReceive+0x38e>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2250      	movs	r2, #80	; 0x50
 800639c:	2101      	movs	r1, #1
 800639e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063a0:	f7fd fd5e 	bl	8003e60 <HAL_GetTick>
 80063a4:	0003      	movs	r3, r0
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063a8:	2023      	movs	r0, #35	; 0x23
 80063aa:	183b      	adds	r3, r7, r0
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	2151      	movs	r1, #81	; 0x51
 80063b0:	5c52      	ldrb	r2, [r2, r1]
 80063b2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80063ba:	231a      	movs	r3, #26
 80063bc:	18fb      	adds	r3, r7, r3
 80063be:	1cba      	adds	r2, r7, #2
 80063c0:	8812      	ldrh	r2, [r2, #0]
 80063c2:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063c4:	183b      	adds	r3, r7, r0
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d011      	beq.n	80063f0 <HAL_SPI_TransmitReceive+0x84>
 80063cc:	69fa      	ldr	r2, [r7, #28]
 80063ce:	2382      	movs	r3, #130	; 0x82
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d107      	bne.n	80063e6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d103      	bne.n	80063e6 <HAL_SPI_TransmitReceive+0x7a>
 80063de:	183b      	adds	r3, r7, r0
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d004      	beq.n	80063f0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80063e6:	232b      	movs	r3, #43	; 0x2b
 80063e8:	18fb      	adds	r3, r7, r3
 80063ea:	2202      	movs	r2, #2
 80063ec:	701a      	strb	r2, [r3, #0]
    goto error;
 80063ee:	e17d      	b.n	80066ec <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d006      	beq.n	8006404 <HAL_SPI_TransmitReceive+0x98>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_SPI_TransmitReceive+0x98>
 80063fc:	1cbb      	adds	r3, r7, #2
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d104      	bne.n	800640e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006404:	232b      	movs	r3, #43	; 0x2b
 8006406:	18fb      	adds	r3, r7, r3
 8006408:	2201      	movs	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
    goto error;
 800640c:	e16e      	b.n	80066ec <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2251      	movs	r2, #81	; 0x51
 8006412:	5c9b      	ldrb	r3, [r3, r2]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b04      	cmp	r3, #4
 8006418:	d003      	beq.n	8006422 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2251      	movs	r2, #81	; 0x51
 800641e:	2105      	movs	r1, #5
 8006420:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1cba      	adds	r2, r7, #2
 8006432:	8812      	ldrh	r2, [r2, #0]
 8006434:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	1cba      	adds	r2, r7, #2
 800643a:	8812      	ldrh	r2, [r2, #0]
 800643c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	1cba      	adds	r2, r7, #2
 8006448:	8812      	ldrh	r2, [r2, #0]
 800644a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	1cba      	adds	r2, r7, #2
 8006450:	8812      	ldrh	r2, [r2, #0]
 8006452:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2240      	movs	r2, #64	; 0x40
 8006468:	4013      	ands	r3, r2
 800646a:	2b40      	cmp	r3, #64	; 0x40
 800646c:	d007      	beq.n	800647e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2140      	movs	r1, #64	; 0x40
 800647a:	430a      	orrs	r2, r1
 800647c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	2380      	movs	r3, #128	; 0x80
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	429a      	cmp	r2, r3
 8006488:	d000      	beq.n	800648c <HAL_SPI_TransmitReceive+0x120>
 800648a:	e07f      	b.n	800658c <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d005      	beq.n	80064a0 <HAL_SPI_TransmitReceive+0x134>
 8006494:	231a      	movs	r3, #26
 8006496:	18fb      	adds	r3, r7, r3
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d000      	beq.n	80064a0 <HAL_SPI_TransmitReceive+0x134>
 800649e:	e06a      	b.n	8006576 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a4:	881a      	ldrh	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	1c9a      	adds	r2, r3, #2
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064c4:	e057      	b.n	8006576 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	2202      	movs	r2, #2
 80064ce:	4013      	ands	r3, r2
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d11b      	bne.n	800650c <HAL_SPI_TransmitReceive+0x1a0>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d016      	beq.n	800650c <HAL_SPI_TransmitReceive+0x1a0>
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d113      	bne.n	800650c <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e8:	881a      	ldrh	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f4:	1c9a      	adds	r2, r3, #2
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2201      	movs	r2, #1
 8006514:	4013      	ands	r3, r2
 8006516:	2b01      	cmp	r3, #1
 8006518:	d119      	bne.n	800654e <HAL_SPI_TransmitReceive+0x1e2>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d014      	beq.n	800654e <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	b292      	uxth	r2, r2
 8006530:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	1c9a      	adds	r2, r3, #2
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006540:	b29b      	uxth	r3, r3
 8006542:	3b01      	subs	r3, #1
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800654a:	2301      	movs	r3, #1
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800654e:	f7fd fc87 	bl	8003e60 <HAL_GetTick>
 8006552:	0002      	movs	r2, r0
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800655a:	429a      	cmp	r2, r3
 800655c:	d80b      	bhi.n	8006576 <HAL_SPI_TransmitReceive+0x20a>
 800655e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006560:	3301      	adds	r3, #1
 8006562:	d008      	beq.n	8006576 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8006564:	232b      	movs	r3, #43	; 0x2b
 8006566:	18fb      	adds	r3, r7, r3
 8006568:	2203      	movs	r2, #3
 800656a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2251      	movs	r2, #81	; 0x51
 8006570:	2101      	movs	r1, #1
 8006572:	5499      	strb	r1, [r3, r2]
        goto error;
 8006574:	e0ba      	b.n	80066ec <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1a2      	bne.n	80064c6 <HAL_SPI_TransmitReceive+0x15a>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006584:	b29b      	uxth	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d19d      	bne.n	80064c6 <HAL_SPI_TransmitReceive+0x15a>
 800658a:	e083      	b.n	8006694 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <HAL_SPI_TransmitReceive+0x234>
 8006594:	231a      	movs	r3, #26
 8006596:	18fb      	adds	r3, r7, r3
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d000      	beq.n	80065a0 <HAL_SPI_TransmitReceive+0x234>
 800659e:	e06f      	b.n	8006680 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	330c      	adds	r3, #12
 80065aa:	7812      	ldrb	r2, [r2, #0]
 80065ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065c6:	e05b      	b.n	8006680 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2202      	movs	r2, #2
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d11c      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x2a4>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d017      	beq.n	8006610 <HAL_SPI_TransmitReceive+0x2a4>
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d114      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	330c      	adds	r3, #12
 80065f0:	7812      	ldrb	r2, [r2, #0]
 80065f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	2201      	movs	r2, #1
 8006618:	4013      	ands	r3, r2
 800661a:	2b01      	cmp	r3, #1
 800661c:	d119      	bne.n	8006652 <HAL_SPI_TransmitReceive+0x2e6>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d014      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800664e:	2301      	movs	r3, #1
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006652:	f7fd fc05 	bl	8003e60 <HAL_GetTick>
 8006656:	0002      	movs	r2, r0
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800665e:	429a      	cmp	r2, r3
 8006660:	d802      	bhi.n	8006668 <HAL_SPI_TransmitReceive+0x2fc>
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	3301      	adds	r3, #1
 8006666:	d102      	bne.n	800666e <HAL_SPI_TransmitReceive+0x302>
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	2b00      	cmp	r3, #0
 800666c:	d108      	bne.n	8006680 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800666e:	232b      	movs	r3, #43	; 0x2b
 8006670:	18fb      	adds	r3, r7, r3
 8006672:	2203      	movs	r2, #3
 8006674:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2251      	movs	r2, #81	; 0x51
 800667a:	2101      	movs	r1, #1
 800667c:	5499      	strb	r1, [r3, r2]
        goto error;
 800667e:	e035      	b.n	80066ec <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d19e      	bne.n	80065c8 <HAL_SPI_TransmitReceive+0x25c>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800668e:	b29b      	uxth	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d199      	bne.n	80065c8 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	0018      	movs	r0, r3
 800669c:	f000 f92a 	bl	80068f4 <SPI_EndRxTxTransaction>
 80066a0:	1e03      	subs	r3, r0, #0
 80066a2:	d007      	beq.n	80066b4 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 80066a4:	232b      	movs	r3, #43	; 0x2b
 80066a6:	18fb      	adds	r3, r7, r3
 80066a8:	2201      	movs	r2, #1
 80066aa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80066b2:	e01b      	b.n	80066ec <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066bc:	2300      	movs	r3, #0
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	617b      	str	r3, [r7, #20]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d004      	beq.n	80066e4 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80066da:	232b      	movs	r3, #43	; 0x2b
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	2201      	movs	r2, #1
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	e003      	b.n	80066ec <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2251      	movs	r2, #81	; 0x51
 80066e8:	2101      	movs	r1, #1
 80066ea:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2250      	movs	r2, #80	; 0x50
 80066f0:	2100      	movs	r1, #0
 80066f2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80066f4:	232b      	movs	r3, #43	; 0x2b
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	781b      	ldrb	r3, [r3, #0]
}
 80066fa:	0018      	movs	r0, r3
 80066fc:	46bd      	mov	sp, r7
 80066fe:	b00c      	add	sp, #48	; 0x30
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	1dfb      	adds	r3, r7, #7
 8006712:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006714:	f7fd fba4 	bl	8003e60 <HAL_GetTick>
 8006718:	0002      	movs	r2, r0
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	18d3      	adds	r3, r2, r3
 8006722:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006724:	f7fd fb9c 	bl	8003e60 <HAL_GetTick>
 8006728:	0003      	movs	r3, r0
 800672a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800672c:	4b3a      	ldr	r3, [pc, #232]	; (8006818 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	015b      	lsls	r3, r3, #5
 8006732:	0d1b      	lsrs	r3, r3, #20
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	4353      	muls	r3, r2
 8006738:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800673a:	e058      	b.n	80067ee <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	3301      	adds	r3, #1
 8006740:	d055      	beq.n	80067ee <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006742:	f7fd fb8d 	bl	8003e60 <HAL_GetTick>
 8006746:	0002      	movs	r2, r0
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	429a      	cmp	r2, r3
 8006750:	d902      	bls.n	8006758 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d142      	bne.n	80067de <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	21e0      	movs	r1, #224	; 0xe0
 8006764:	438a      	bics	r2, r1
 8006766:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	2382      	movs	r3, #130	; 0x82
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	429a      	cmp	r2, r3
 8006772:	d113      	bne.n	800679c <SPI_WaitFlagStateUntilTimeout+0x98>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	2380      	movs	r3, #128	; 0x80
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	429a      	cmp	r2, r3
 800677e:	d005      	beq.n	800678c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	2380      	movs	r3, #128	; 0x80
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	429a      	cmp	r2, r3
 800678a:	d107      	bne.n	800679c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2140      	movs	r1, #64	; 0x40
 8006798:	438a      	bics	r2, r1
 800679a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067a0:	2380      	movs	r3, #128	; 0x80
 80067a2:	019b      	lsls	r3, r3, #6
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d110      	bne.n	80067ca <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	491a      	ldr	r1, [pc, #104]	; (800681c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80067b4:	400a      	ands	r2, r1
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2180      	movs	r1, #128	; 0x80
 80067c4:	0189      	lsls	r1, r1, #6
 80067c6:	430a      	orrs	r2, r1
 80067c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2251      	movs	r2, #81	; 0x51
 80067ce:	2101      	movs	r1, #1
 80067d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2250      	movs	r2, #80	; 0x50
 80067d6:	2100      	movs	r1, #0
 80067d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e017      	b.n	800680e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	4013      	ands	r3, r2
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	425a      	negs	r2, r3
 80067fe:	4153      	adcs	r3, r2
 8006800:	b2db      	uxtb	r3, r3
 8006802:	001a      	movs	r2, r3
 8006804:	1dfb      	adds	r3, r7, #7
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d197      	bne.n	800673c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	0018      	movs	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	b008      	add	sp, #32
 8006814:	bd80      	pop	{r7, pc}
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	20000000 	.word	0x20000000
 800681c:	ffffdfff 	.word	0xffffdfff

08006820 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	2382      	movs	r3, #130	; 0x82
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	429a      	cmp	r2, r3
 8006836:	d113      	bne.n	8006860 <SPI_EndRxTransaction+0x40>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	2380      	movs	r3, #128	; 0x80
 800683e:	021b      	lsls	r3, r3, #8
 8006840:	429a      	cmp	r2, r3
 8006842:	d005      	beq.n	8006850 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689a      	ldr	r2, [r3, #8]
 8006848:	2380      	movs	r3, #128	; 0x80
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	429a      	cmp	r2, r3
 800684e:	d107      	bne.n	8006860 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2140      	movs	r1, #64	; 0x40
 800685c:	438a      	bics	r2, r1
 800685e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	2382      	movs	r3, #130	; 0x82
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	429a      	cmp	r2, r3
 800686a:	d12b      	bne.n	80068c4 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	2380      	movs	r3, #128	; 0x80
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	429a      	cmp	r2, r3
 8006876:	d012      	beq.n	800689e <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	0013      	movs	r3, r2
 8006882:	2200      	movs	r2, #0
 8006884:	2180      	movs	r1, #128	; 0x80
 8006886:	f7ff ff3d 	bl	8006704 <SPI_WaitFlagStateUntilTimeout>
 800688a:	1e03      	subs	r3, r0, #0
 800688c:	d02d      	beq.n	80068ea <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006892:	2220      	movs	r2, #32
 8006894:	431a      	orrs	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e026      	b.n	80068ec <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	0013      	movs	r3, r2
 80068a8:	2200      	movs	r2, #0
 80068aa:	2101      	movs	r1, #1
 80068ac:	f7ff ff2a 	bl	8006704 <SPI_WaitFlagStateUntilTimeout>
 80068b0:	1e03      	subs	r3, r0, #0
 80068b2:	d01a      	beq.n	80068ea <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b8:	2220      	movs	r2, #32
 80068ba:	431a      	orrs	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e013      	b.n	80068ec <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	0013      	movs	r3, r2
 80068ce:	2200      	movs	r2, #0
 80068d0:	2101      	movs	r1, #1
 80068d2:	f7ff ff17 	bl	8006704 <SPI_WaitFlagStateUntilTimeout>
 80068d6:	1e03      	subs	r3, r0, #0
 80068d8:	d007      	beq.n	80068ea <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068de:	2220      	movs	r2, #32
 80068e0:	431a      	orrs	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e000      	b.n	80068ec <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	0018      	movs	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	b004      	add	sp, #16
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006900:	4b1d      	ldr	r3, [pc, #116]	; (8006978 <SPI_EndRxTxTransaction+0x84>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	491d      	ldr	r1, [pc, #116]	; (800697c <SPI_EndRxTxTransaction+0x88>)
 8006906:	0018      	movs	r0, r3
 8006908:	f7f9 fc1a 	bl	8000140 <__udivsi3>
 800690c:	0003      	movs	r3, r0
 800690e:	001a      	movs	r2, r3
 8006910:	0013      	movs	r3, r2
 8006912:	015b      	lsls	r3, r3, #5
 8006914:	1a9b      	subs	r3, r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	189b      	adds	r3, r3, r2
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	2382      	movs	r3, #130	; 0x82
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	429a      	cmp	r2, r3
 8006928:	d112      	bne.n	8006950 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	0013      	movs	r3, r2
 8006934:	2200      	movs	r2, #0
 8006936:	2180      	movs	r1, #128	; 0x80
 8006938:	f7ff fee4 	bl	8006704 <SPI_WaitFlagStateUntilTimeout>
 800693c:	1e03      	subs	r3, r0, #0
 800693e:	d016      	beq.n	800696e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006944:	2220      	movs	r2, #32
 8006946:	431a      	orrs	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e00f      	b.n	8006970 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00a      	beq.n	800696c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	3b01      	subs	r3, #1
 800695a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2280      	movs	r2, #128	; 0x80
 8006964:	4013      	ands	r3, r2
 8006966:	2b80      	cmp	r3, #128	; 0x80
 8006968:	d0f2      	beq.n	8006950 <SPI_EndRxTxTransaction+0x5c>
 800696a:	e000      	b.n	800696e <SPI_EndRxTxTransaction+0x7a>
        break;
 800696c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	0018      	movs	r0, r3
 8006972:	46bd      	mov	sp, r7
 8006974:	b006      	add	sp, #24
 8006976:	bd80      	pop	{r7, pc}
 8006978:	20000000 	.word	0x20000000
 800697c:	016e3600 	.word	0x016e3600

08006980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e032      	b.n	80069f8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2239      	movs	r2, #57	; 0x39
 8006996:	5c9b      	ldrb	r3, [r3, r2]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d107      	bne.n	80069ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2238      	movs	r2, #56	; 0x38
 80069a2:	2100      	movs	r1, #0
 80069a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	0018      	movs	r0, r3
 80069aa:	f7fd f851 	bl	8003a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2239      	movs	r2, #57	; 0x39
 80069b2:	2102      	movs	r1, #2
 80069b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3304      	adds	r3, #4
 80069be:	0019      	movs	r1, r3
 80069c0:	0010      	movs	r0, r2
 80069c2:	f000 f971 	bl	8006ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	223e      	movs	r2, #62	; 0x3e
 80069ca:	2101      	movs	r1, #1
 80069cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	223a      	movs	r2, #58	; 0x3a
 80069d2:	2101      	movs	r1, #1
 80069d4:	5499      	strb	r1, [r3, r2]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	223b      	movs	r2, #59	; 0x3b
 80069da:	2101      	movs	r1, #1
 80069dc:	5499      	strb	r1, [r3, r2]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	223c      	movs	r2, #60	; 0x3c
 80069e2:	2101      	movs	r1, #1
 80069e4:	5499      	strb	r1, [r3, r2]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	223d      	movs	r2, #61	; 0x3d
 80069ea:	2101      	movs	r1, #1
 80069ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2239      	movs	r2, #57	; 0x39
 80069f2:	2101      	movs	r1, #1
 80069f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	0018      	movs	r0, r3
 80069fa:	46bd      	mov	sp, r7
 80069fc:	b002      	add	sp, #8
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2239      	movs	r2, #57	; 0x39
 8006a0c:	5c9b      	ldrb	r3, [r3, r2]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d001      	beq.n	8006a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e036      	b.n	8006a86 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2239      	movs	r2, #57	; 0x39
 8006a1c:	2102      	movs	r1, #2
 8006a1e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	2380      	movs	r3, #128	; 0x80
 8006a36:	05db      	lsls	r3, r3, #23
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d009      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x50>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a13      	ldr	r2, [pc, #76]	; (8006a90 <HAL_TIM_Base_Start_IT+0x90>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x50>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a12      	ldr	r2, [pc, #72]	; (8006a94 <HAL_TIM_Base_Start_IT+0x94>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d111      	bne.n	8006a74 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	2207      	movs	r2, #7
 8006a58:	4013      	ands	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b06      	cmp	r3, #6
 8006a60:	d010      	beq.n	8006a84 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a72:	e007      	b.n	8006a84 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2101      	movs	r1, #1
 8006a80:	430a      	orrs	r2, r1
 8006a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	0018      	movs	r0, r3
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	b004      	add	sp, #16
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	40010800 	.word	0x40010800
 8006a94:	40011400 	.word	0x40011400

08006a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d124      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d11d      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2203      	movs	r2, #3
 8006ac2:	4252      	negs	r2, r2
 8006ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	2203      	movs	r2, #3
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	d004      	beq.n	8006ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	0018      	movs	r0, r3
 8006adc:	f000 f8cc 	bl	8006c78 <HAL_TIM_IC_CaptureCallback>
 8006ae0:	e007      	b.n	8006af2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f000 f8bf 	bl	8006c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	0018      	movs	r0, r3
 8006aee:	f000 f8cb 	bl	8006c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2204      	movs	r2, #4
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d125      	bne.n	8006b52 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	2204      	movs	r2, #4
 8006b0e:	4013      	ands	r3, r2
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d11e      	bne.n	8006b52 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2205      	movs	r2, #5
 8006b1a:	4252      	negs	r2, r2
 8006b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	23c0      	movs	r3, #192	; 0xc0
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4013      	ands	r3, r2
 8006b30:	d004      	beq.n	8006b3c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	0018      	movs	r0, r3
 8006b36:	f000 f89f 	bl	8006c78 <HAL_TIM_IC_CaptureCallback>
 8006b3a:	e007      	b.n	8006b4c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f000 f892 	bl	8006c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	0018      	movs	r0, r3
 8006b48:	f000 f89e 	bl	8006c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2208      	movs	r2, #8
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d124      	bne.n	8006baa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	2208      	movs	r2, #8
 8006b68:	4013      	ands	r3, r2
 8006b6a:	2b08      	cmp	r3, #8
 8006b6c:	d11d      	bne.n	8006baa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2209      	movs	r2, #9
 8006b74:	4252      	negs	r2, r2
 8006b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2204      	movs	r2, #4
 8006b7c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	2203      	movs	r2, #3
 8006b86:	4013      	ands	r3, r2
 8006b88:	d004      	beq.n	8006b94 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	f000 f873 	bl	8006c78 <HAL_TIM_IC_CaptureCallback>
 8006b92:	e007      	b.n	8006ba4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	0018      	movs	r0, r3
 8006b98:	f000 f866 	bl	8006c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f000 f872 	bl	8006c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	2210      	movs	r2, #16
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	2b10      	cmp	r3, #16
 8006bb6:	d125      	bne.n	8006c04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	2210      	movs	r2, #16
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	2b10      	cmp	r3, #16
 8006bc4:	d11e      	bne.n	8006c04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2211      	movs	r2, #17
 8006bcc:	4252      	negs	r2, r2
 8006bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2208      	movs	r2, #8
 8006bd4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69da      	ldr	r2, [r3, #28]
 8006bdc:	23c0      	movs	r3, #192	; 0xc0
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4013      	ands	r3, r2
 8006be2:	d004      	beq.n	8006bee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	0018      	movs	r0, r3
 8006be8:	f000 f846 	bl	8006c78 <HAL_TIM_IC_CaptureCallback>
 8006bec:	e007      	b.n	8006bfe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f000 f839 	bl	8006c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f000 f845 	bl	8006c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d10f      	bne.n	8006c32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d108      	bne.n	8006c32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2202      	movs	r2, #2
 8006c26:	4252      	negs	r2, r2
 8006c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f7fb feeb 	bl	8002a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2240      	movs	r2, #64	; 0x40
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	d10f      	bne.n	8006c60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	2240      	movs	r2, #64	; 0x40
 8006c48:	4013      	ands	r3, r2
 8006c4a:	2b40      	cmp	r3, #64	; 0x40
 8006c4c:	d108      	bne.n	8006c60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2241      	movs	r2, #65	; 0x41
 8006c54:	4252      	negs	r2, r2
 8006c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	f000 f81c 	bl	8006c98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c60:	46c0      	nop			; (mov r8, r8)
 8006c62:	46bd      	mov	sp, r7
 8006c64:	b002      	add	sp, #8
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c70:	46c0      	nop			; (mov r8, r8)
 8006c72:	46bd      	mov	sp, r7
 8006c74:	b002      	add	sp, #8
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c80:	46c0      	nop			; (mov r8, r8)
 8006c82:	46bd      	mov	sp, r7
 8006c84:	b002      	add	sp, #8
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c90:	46c0      	nop			; (mov r8, r8)
 8006c92:	46bd      	mov	sp, r7
 8006c94:	b002      	add	sp, #8
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ca0:	46c0      	nop			; (mov r8, r8)
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	b002      	add	sp, #8
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	2380      	movs	r3, #128	; 0x80
 8006cbc:	05db      	lsls	r3, r3, #23
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d007      	beq.n	8006cd2 <TIM_Base_SetConfig+0x2a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a1f      	ldr	r2, [pc, #124]	; (8006d44 <TIM_Base_SetConfig+0x9c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d003      	beq.n	8006cd2 <TIM_Base_SetConfig+0x2a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a1e      	ldr	r2, [pc, #120]	; (8006d48 <TIM_Base_SetConfig+0xa0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d108      	bne.n	8006ce4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2270      	movs	r2, #112	; 0x70
 8006cd6:	4393      	bics	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	2380      	movs	r3, #128	; 0x80
 8006ce8:	05db      	lsls	r3, r3, #23
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d007      	beq.n	8006cfe <TIM_Base_SetConfig+0x56>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a14      	ldr	r2, [pc, #80]	; (8006d44 <TIM_Base_SetConfig+0x9c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d003      	beq.n	8006cfe <TIM_Base_SetConfig+0x56>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a13      	ldr	r2, [pc, #76]	; (8006d48 <TIM_Base_SetConfig+0xa0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d108      	bne.n	8006d10 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4a12      	ldr	r2, [pc, #72]	; (8006d4c <TIM_Base_SetConfig+0xa4>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2280      	movs	r2, #128	; 0x80
 8006d14:	4393      	bics	r3, r2
 8006d16:	001a      	movs	r2, r3
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	689a      	ldr	r2, [r3, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	615a      	str	r2, [r3, #20]
}
 8006d3c:	46c0      	nop			; (mov r8, r8)
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	b004      	add	sp, #16
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	40010800 	.word	0x40010800
 8006d48:	40011400 	.word	0x40011400
 8006d4c:	fffffcff 	.word	0xfffffcff

08006d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2238      	movs	r2, #56	; 0x38
 8006d5e:	5c9b      	ldrb	r3, [r3, r2]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d64:	2302      	movs	r3, #2
 8006d66:	e042      	b.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2238      	movs	r2, #56	; 0x38
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2239      	movs	r2, #57	; 0x39
 8006d74:	2102      	movs	r1, #2
 8006d76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2270      	movs	r2, #112	; 0x70
 8006d8c:	4393      	bics	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	2380      	movs	r3, #128	; 0x80
 8006da8:	05db      	lsls	r3, r3, #23
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d009      	beq.n	8006dc2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a11      	ldr	r2, [pc, #68]	; (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d004      	beq.n	8006dc2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a0f      	ldr	r2, [pc, #60]	; (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d10c      	bne.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2280      	movs	r2, #128	; 0x80
 8006dc6:	4393      	bics	r3, r2
 8006dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2239      	movs	r2, #57	; 0x39
 8006de0:	2101      	movs	r1, #1
 8006de2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2238      	movs	r2, #56	; 0x38
 8006de8:	2100      	movs	r1, #0
 8006dea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	0018      	movs	r0, r3
 8006df0:	46bd      	mov	sp, r7
 8006df2:	b004      	add	sp, #16
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	46c0      	nop			; (mov r8, r8)
 8006df8:	40010800 	.word	0x40010800
 8006dfc:	40011400 	.word	0x40011400

08006e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e044      	b.n	8006e9c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d107      	bne.n	8006e2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2278      	movs	r2, #120	; 0x78
 8006e1e:	2100      	movs	r1, #0
 8006e20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	0018      	movs	r0, r3
 8006e26:	f7fc fec9 	bl	8003bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2224      	movs	r2, #36	; 0x24
 8006e2e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	438a      	bics	r2, r1
 8006e3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	0018      	movs	r0, r3
 8006e44:	f000 fc9c 	bl	8007780 <UART_SetConfig>
 8006e48:	0003      	movs	r3, r0
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e024      	b.n	8006e9c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f000 ff13 	bl	8007c88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	490d      	ldr	r1, [pc, #52]	; (8006ea4 <HAL_UART_Init+0xa4>)
 8006e6e:	400a      	ands	r2, r1
 8006e70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	212a      	movs	r1, #42	; 0x2a
 8006e7e:	438a      	bics	r2, r1
 8006e80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	0018      	movs	r0, r3
 8006e96:	f000 ffab 	bl	8007df0 <UART_CheckIdleState>
 8006e9a:	0003      	movs	r3, r0
}
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b002      	add	sp, #8
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	ffffb7ff 	.word	0xffffb7ff

08006ea8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08a      	sub	sp, #40	; 0x28
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	1dbb      	adds	r3, r7, #6
 8006eb6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	d000      	beq.n	8006ec2 <HAL_UART_Transmit+0x1a>
 8006ec0:	e08c      	b.n	8006fdc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_UART_Transmit+0x28>
 8006ec8:	1dbb      	adds	r3, r7, #6
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e084      	b.n	8006fde <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	2380      	movs	r3, #128	; 0x80
 8006eda:	015b      	lsls	r3, r3, #5
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d109      	bne.n	8006ef4 <HAL_UART_Transmit+0x4c>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d105      	bne.n	8006ef4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2201      	movs	r2, #1
 8006eec:	4013      	ands	r3, r2
 8006eee:	d001      	beq.n	8006ef4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e074      	b.n	8006fde <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2284      	movs	r2, #132	; 0x84
 8006ef8:	2100      	movs	r1, #0
 8006efa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2221      	movs	r2, #33	; 0x21
 8006f00:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f02:	f7fc ffad 	bl	8003e60 <HAL_GetTick>
 8006f06:	0003      	movs	r3, r0
 8006f08:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	1dba      	adds	r2, r7, #6
 8006f0e:	2150      	movs	r1, #80	; 0x50
 8006f10:	8812      	ldrh	r2, [r2, #0]
 8006f12:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	1dba      	adds	r2, r7, #6
 8006f18:	2152      	movs	r1, #82	; 0x52
 8006f1a:	8812      	ldrh	r2, [r2, #0]
 8006f1c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	2380      	movs	r3, #128	; 0x80
 8006f24:	015b      	lsls	r3, r3, #5
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d108      	bne.n	8006f3c <HAL_UART_Transmit+0x94>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d104      	bne.n	8006f3c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006f32:	2300      	movs	r3, #0
 8006f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	61bb      	str	r3, [r7, #24]
 8006f3a:	e003      	b.n	8006f44 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f40:	2300      	movs	r3, #0
 8006f42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f44:	e02f      	b.n	8006fa6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	0013      	movs	r3, r2
 8006f50:	2200      	movs	r2, #0
 8006f52:	2180      	movs	r1, #128	; 0x80
 8006f54:	f000 fff4 	bl	8007f40 <UART_WaitOnFlagUntilTimeout>
 8006f58:	1e03      	subs	r3, r0, #0
 8006f5a:	d004      	beq.n	8006f66 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e03b      	b.n	8006fde <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10b      	bne.n	8006f84 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	001a      	movs	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	05d2      	lsls	r2, r2, #23
 8006f78:	0dd2      	lsrs	r2, r2, #23
 8006f7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	3302      	adds	r3, #2
 8006f80:	61bb      	str	r3, [r7, #24]
 8006f82:	e007      	b.n	8006f94 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	781a      	ldrb	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	3301      	adds	r3, #1
 8006f92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2252      	movs	r2, #82	; 0x52
 8006f98:	5a9b      	ldrh	r3, [r3, r2]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b299      	uxth	r1, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2252      	movs	r2, #82	; 0x52
 8006fa4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2252      	movs	r2, #82	; 0x52
 8006faa:	5a9b      	ldrh	r3, [r3, r2]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1c9      	bne.n	8006f46 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	0013      	movs	r3, r2
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2140      	movs	r1, #64	; 0x40
 8006fc0:	f000 ffbe 	bl	8007f40 <UART_WaitOnFlagUntilTimeout>
 8006fc4:	1e03      	subs	r3, r0, #0
 8006fc6:	d004      	beq.n	8006fd2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e005      	b.n	8006fde <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e000      	b.n	8006fde <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006fdc:	2302      	movs	r3, #2
  }
}
 8006fde:	0018      	movs	r0, r3
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	b008      	add	sp, #32
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	1dbb      	adds	r3, r7, #6
 8006ff4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d15b      	bne.n	80070b6 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <HAL_UART_Transmit_IT+0x24>
 8007004:	1dbb      	adds	r3, r7, #6
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e053      	b.n	80070b8 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	2380      	movs	r3, #128	; 0x80
 8007016:	015b      	lsls	r3, r3, #5
 8007018:	429a      	cmp	r2, r3
 800701a:	d109      	bne.n	8007030 <HAL_UART_Transmit_IT+0x48>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2201      	movs	r2, #1
 8007028:	4013      	ands	r3, r2
 800702a:	d001      	beq.n	8007030 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e043      	b.n	80070b8 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	1dba      	adds	r2, r7, #6
 800703a:	2150      	movs	r1, #80	; 0x50
 800703c:	8812      	ldrh	r2, [r2, #0]
 800703e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	1dba      	adds	r2, r7, #6
 8007044:	2152      	movs	r1, #82	; 0x52
 8007046:	8812      	ldrh	r2, [r2, #0]
 8007048:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2284      	movs	r2, #132	; 0x84
 8007054:	2100      	movs	r1, #0
 8007056:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2221      	movs	r2, #33	; 0x21
 800705c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	2380      	movs	r3, #128	; 0x80
 8007064:	015b      	lsls	r3, r3, #5
 8007066:	429a      	cmp	r2, r3
 8007068:	d107      	bne.n	800707a <HAL_UART_Transmit_IT+0x92>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d103      	bne.n	800707a <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4a12      	ldr	r2, [pc, #72]	; (80070c0 <HAL_UART_Transmit_IT+0xd8>)
 8007076:	66da      	str	r2, [r3, #108]	; 0x6c
 8007078:	e002      	b.n	8007080 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4a11      	ldr	r2, [pc, #68]	; (80070c4 <HAL_UART_Transmit_IT+0xdc>)
 800707e:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007080:	f3ef 8310 	mrs	r3, PRIMASK
 8007084:	613b      	str	r3, [r7, #16]
  return(result);
 8007086:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007088:	61fb      	str	r3, [r7, #28]
 800708a:	2301      	movs	r3, #1
 800708c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f383 8810 	msr	PRIMASK, r3
}
 8007094:	46c0      	nop			; (mov r8, r8)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2180      	movs	r1, #128	; 0x80
 80070a2:	430a      	orrs	r2, r1
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	f383 8810 	msr	PRIMASK, r3
}
 80070b0:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e000      	b.n	80070b8 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80070b6:	2302      	movs	r3, #2
  }
}
 80070b8:	0018      	movs	r0, r3
 80070ba:	46bd      	mov	sp, r7
 80070bc:	b008      	add	sp, #32
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	08008351 	.word	0x08008351
 80070c4:	0800829f 	.word	0x0800829f

080070c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	1dbb      	adds	r3, r7, #6
 80070d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2280      	movs	r2, #128	; 0x80
 80070da:	589b      	ldr	r3, [r3, r2]
 80070dc:	2b20      	cmp	r3, #32
 80070de:	d14a      	bne.n	8007176 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_UART_Receive_IT+0x26>
 80070e6:	1dbb      	adds	r3, r7, #6
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e042      	b.n	8007178 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	2380      	movs	r3, #128	; 0x80
 80070f8:	015b      	lsls	r3, r3, #5
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d109      	bne.n	8007112 <HAL_UART_Receive_IT+0x4a>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d105      	bne.n	8007112 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2201      	movs	r2, #1
 800710a:	4013      	ands	r3, r2
 800710c:	d001      	beq.n	8007112 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e032      	b.n	8007178 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a18      	ldr	r2, [pc, #96]	; (8007180 <HAL_UART_Receive_IT+0xb8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d020      	beq.n	8007164 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	2380      	movs	r3, #128	; 0x80
 800712a:	041b      	lsls	r3, r3, #16
 800712c:	4013      	ands	r3, r2
 800712e:	d019      	beq.n	8007164 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007130:	f3ef 8310 	mrs	r3, PRIMASK
 8007134:	613b      	str	r3, [r7, #16]
  return(result);
 8007136:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007138:	61fb      	str	r3, [r7, #28]
 800713a:	2301      	movs	r3, #1
 800713c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f383 8810 	msr	PRIMASK, r3
}
 8007144:	46c0      	nop			; (mov r8, r8)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2180      	movs	r1, #128	; 0x80
 8007152:	04c9      	lsls	r1, r1, #19
 8007154:	430a      	orrs	r2, r1
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	f383 8810 	msr	PRIMASK, r3
}
 8007162:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007164:	1dbb      	adds	r3, r7, #6
 8007166:	881a      	ldrh	r2, [r3, #0]
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	0018      	movs	r0, r3
 800716e:	f000 ff51 	bl	8008014 <UART_Start_Receive_IT>
 8007172:	0003      	movs	r3, r0
 8007174:	e000      	b.n	8007178 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8007176:	2302      	movs	r3, #2
  }
}
 8007178:	0018      	movs	r0, r3
 800717a:	46bd      	mov	sp, r7
 800717c:	b008      	add	sp, #32
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40004800 	.word	0x40004800

08007184 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007184:	b590      	push	{r4, r7, lr}
 8007186:	b0ab      	sub	sp, #172	; 0xac
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	22a4      	movs	r2, #164	; 0xa4
 8007194:	18b9      	adds	r1, r7, r2
 8007196:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	20a0      	movs	r0, #160	; 0xa0
 80071a0:	1839      	adds	r1, r7, r0
 80071a2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	219c      	movs	r1, #156	; 0x9c
 80071ac:	1879      	adds	r1, r7, r1
 80071ae:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80071b0:	0011      	movs	r1, r2
 80071b2:	18bb      	adds	r3, r7, r2
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a99      	ldr	r2, [pc, #612]	; (800741c <HAL_UART_IRQHandler+0x298>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	2298      	movs	r2, #152	; 0x98
 80071bc:	18bc      	adds	r4, r7, r2
 80071be:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80071c0:	18bb      	adds	r3, r7, r2
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d114      	bne.n	80071f2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80071c8:	187b      	adds	r3, r7, r1
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2220      	movs	r2, #32
 80071ce:	4013      	ands	r3, r2
 80071d0:	d00f      	beq.n	80071f2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071d2:	183b      	adds	r3, r7, r0
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2220      	movs	r2, #32
 80071d8:	4013      	ands	r3, r2
 80071da:	d00a      	beq.n	80071f2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d100      	bne.n	80071e6 <HAL_UART_IRQHandler+0x62>
 80071e4:	e2a0      	b.n	8007728 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	0010      	movs	r0, r2
 80071ee:	4798      	blx	r3
      }
      return;
 80071f0:	e29a      	b.n	8007728 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071f2:	2398      	movs	r3, #152	; 0x98
 80071f4:	18fb      	adds	r3, r7, r3
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d100      	bne.n	80071fe <HAL_UART_IRQHandler+0x7a>
 80071fc:	e114      	b.n	8007428 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80071fe:	239c      	movs	r3, #156	; 0x9c
 8007200:	18fb      	adds	r3, r7, r3
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2201      	movs	r2, #1
 8007206:	4013      	ands	r3, r2
 8007208:	d106      	bne.n	8007218 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800720a:	23a0      	movs	r3, #160	; 0xa0
 800720c:	18fb      	adds	r3, r7, r3
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a83      	ldr	r2, [pc, #524]	; (8007420 <HAL_UART_IRQHandler+0x29c>)
 8007212:	4013      	ands	r3, r2
 8007214:	d100      	bne.n	8007218 <HAL_UART_IRQHandler+0x94>
 8007216:	e107      	b.n	8007428 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007218:	23a4      	movs	r3, #164	; 0xa4
 800721a:	18fb      	adds	r3, r7, r3
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2201      	movs	r2, #1
 8007220:	4013      	ands	r3, r2
 8007222:	d012      	beq.n	800724a <HAL_UART_IRQHandler+0xc6>
 8007224:	23a0      	movs	r3, #160	; 0xa0
 8007226:	18fb      	adds	r3, r7, r3
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	2380      	movs	r3, #128	; 0x80
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	4013      	ands	r3, r2
 8007230:	d00b      	beq.n	800724a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2201      	movs	r2, #1
 8007238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2284      	movs	r2, #132	; 0x84
 800723e:	589b      	ldr	r3, [r3, r2]
 8007240:	2201      	movs	r2, #1
 8007242:	431a      	orrs	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2184      	movs	r1, #132	; 0x84
 8007248:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800724a:	23a4      	movs	r3, #164	; 0xa4
 800724c:	18fb      	adds	r3, r7, r3
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2202      	movs	r2, #2
 8007252:	4013      	ands	r3, r2
 8007254:	d011      	beq.n	800727a <HAL_UART_IRQHandler+0xf6>
 8007256:	239c      	movs	r3, #156	; 0x9c
 8007258:	18fb      	adds	r3, r7, r3
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2201      	movs	r2, #1
 800725e:	4013      	ands	r3, r2
 8007260:	d00b      	beq.n	800727a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2202      	movs	r2, #2
 8007268:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2284      	movs	r2, #132	; 0x84
 800726e:	589b      	ldr	r3, [r3, r2]
 8007270:	2204      	movs	r2, #4
 8007272:	431a      	orrs	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2184      	movs	r1, #132	; 0x84
 8007278:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800727a:	23a4      	movs	r3, #164	; 0xa4
 800727c:	18fb      	adds	r3, r7, r3
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2204      	movs	r2, #4
 8007282:	4013      	ands	r3, r2
 8007284:	d011      	beq.n	80072aa <HAL_UART_IRQHandler+0x126>
 8007286:	239c      	movs	r3, #156	; 0x9c
 8007288:	18fb      	adds	r3, r7, r3
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2201      	movs	r2, #1
 800728e:	4013      	ands	r3, r2
 8007290:	d00b      	beq.n	80072aa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2204      	movs	r2, #4
 8007298:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2284      	movs	r2, #132	; 0x84
 800729e:	589b      	ldr	r3, [r3, r2]
 80072a0:	2202      	movs	r2, #2
 80072a2:	431a      	orrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2184      	movs	r1, #132	; 0x84
 80072a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072aa:	23a4      	movs	r3, #164	; 0xa4
 80072ac:	18fb      	adds	r3, r7, r3
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2208      	movs	r2, #8
 80072b2:	4013      	ands	r3, r2
 80072b4:	d017      	beq.n	80072e6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072b6:	23a0      	movs	r3, #160	; 0xa0
 80072b8:	18fb      	adds	r3, r7, r3
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2220      	movs	r2, #32
 80072be:	4013      	ands	r3, r2
 80072c0:	d105      	bne.n	80072ce <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80072c2:	239c      	movs	r3, #156	; 0x9c
 80072c4:	18fb      	adds	r3, r7, r3
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2201      	movs	r2, #1
 80072ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072cc:	d00b      	beq.n	80072e6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2208      	movs	r2, #8
 80072d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2284      	movs	r2, #132	; 0x84
 80072da:	589b      	ldr	r3, [r3, r2]
 80072dc:	2208      	movs	r2, #8
 80072de:	431a      	orrs	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2184      	movs	r1, #132	; 0x84
 80072e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072e6:	23a4      	movs	r3, #164	; 0xa4
 80072e8:	18fb      	adds	r3, r7, r3
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	2380      	movs	r3, #128	; 0x80
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	4013      	ands	r3, r2
 80072f2:	d013      	beq.n	800731c <HAL_UART_IRQHandler+0x198>
 80072f4:	23a0      	movs	r3, #160	; 0xa0
 80072f6:	18fb      	adds	r3, r7, r3
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	2380      	movs	r3, #128	; 0x80
 80072fc:	04db      	lsls	r3, r3, #19
 80072fe:	4013      	ands	r3, r2
 8007300:	d00c      	beq.n	800731c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2280      	movs	r2, #128	; 0x80
 8007308:	0112      	lsls	r2, r2, #4
 800730a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2284      	movs	r2, #132	; 0x84
 8007310:	589b      	ldr	r3, [r3, r2]
 8007312:	2220      	movs	r2, #32
 8007314:	431a      	orrs	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2184      	movs	r1, #132	; 0x84
 800731a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2284      	movs	r2, #132	; 0x84
 8007320:	589b      	ldr	r3, [r3, r2]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d100      	bne.n	8007328 <HAL_UART_IRQHandler+0x1a4>
 8007326:	e201      	b.n	800772c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007328:	23a4      	movs	r3, #164	; 0xa4
 800732a:	18fb      	adds	r3, r7, r3
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2220      	movs	r2, #32
 8007330:	4013      	ands	r3, r2
 8007332:	d00e      	beq.n	8007352 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007334:	23a0      	movs	r3, #160	; 0xa0
 8007336:	18fb      	adds	r3, r7, r3
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2220      	movs	r2, #32
 800733c:	4013      	ands	r3, r2
 800733e:	d008      	beq.n	8007352 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007344:	2b00      	cmp	r3, #0
 8007346:	d004      	beq.n	8007352 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	0010      	movs	r0, r2
 8007350:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2284      	movs	r2, #132	; 0x84
 8007356:	589b      	ldr	r3, [r3, r2]
 8007358:	2194      	movs	r1, #148	; 0x94
 800735a:	187a      	adds	r2, r7, r1
 800735c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	2240      	movs	r2, #64	; 0x40
 8007366:	4013      	ands	r3, r2
 8007368:	2b40      	cmp	r3, #64	; 0x40
 800736a:	d004      	beq.n	8007376 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800736c:	187b      	adds	r3, r7, r1
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2228      	movs	r2, #40	; 0x28
 8007372:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007374:	d047      	beq.n	8007406 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	0018      	movs	r0, r3
 800737a:	f000 ff15 	bl	80081a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	2240      	movs	r2, #64	; 0x40
 8007386:	4013      	ands	r3, r2
 8007388:	2b40      	cmp	r3, #64	; 0x40
 800738a:	d137      	bne.n	80073fc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800738c:	f3ef 8310 	mrs	r3, PRIMASK
 8007390:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007394:	2090      	movs	r0, #144	; 0x90
 8007396:	183a      	adds	r2, r7, r0
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	2301      	movs	r3, #1
 800739c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800739e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073a0:	f383 8810 	msr	PRIMASK, r3
}
 80073a4:	46c0      	nop			; (mov r8, r8)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2140      	movs	r1, #64	; 0x40
 80073b2:	438a      	bics	r2, r1
 80073b4:	609a      	str	r2, [r3, #8]
 80073b6:	183b      	adds	r3, r7, r0
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073be:	f383 8810 	msr	PRIMASK, r3
}
 80073c2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d012      	beq.n	80073f2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d0:	4a14      	ldr	r2, [pc, #80]	; (8007424 <HAL_UART_IRQHandler+0x2a0>)
 80073d2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d8:	0018      	movs	r0, r3
 80073da:	f7fd f939 	bl	8004650 <HAL_DMA_Abort_IT>
 80073de:	1e03      	subs	r3, r0, #0
 80073e0:	d01a      	beq.n	8007418 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ec:	0018      	movs	r0, r3
 80073ee:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f0:	e012      	b.n	8007418 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	0018      	movs	r0, r3
 80073f6:	f000 f9af 	bl	8007758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073fa:	e00d      	b.n	8007418 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	0018      	movs	r0, r3
 8007400:	f000 f9aa 	bl	8007758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007404:	e008      	b.n	8007418 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	0018      	movs	r0, r3
 800740a:	f000 f9a5 	bl	8007758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2284      	movs	r2, #132	; 0x84
 8007412:	2100      	movs	r1, #0
 8007414:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007416:	e189      	b.n	800772c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	46c0      	nop			; (mov r8, r8)
    return;
 800741a:	e187      	b.n	800772c <HAL_UART_IRQHandler+0x5a8>
 800741c:	0000080f 	.word	0x0000080f
 8007420:	04000120 	.word	0x04000120
 8007424:	08008271 	.word	0x08008271

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800742c:	2b01      	cmp	r3, #1
 800742e:	d000      	beq.n	8007432 <HAL_UART_IRQHandler+0x2ae>
 8007430:	e13b      	b.n	80076aa <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007432:	23a4      	movs	r3, #164	; 0xa4
 8007434:	18fb      	adds	r3, r7, r3
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2210      	movs	r2, #16
 800743a:	4013      	ands	r3, r2
 800743c:	d100      	bne.n	8007440 <HAL_UART_IRQHandler+0x2bc>
 800743e:	e134      	b.n	80076aa <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007440:	23a0      	movs	r3, #160	; 0xa0
 8007442:	18fb      	adds	r3, r7, r3
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2210      	movs	r2, #16
 8007448:	4013      	ands	r3, r2
 800744a:	d100      	bne.n	800744e <HAL_UART_IRQHandler+0x2ca>
 800744c:	e12d      	b.n	80076aa <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2210      	movs	r2, #16
 8007454:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	2240      	movs	r2, #64	; 0x40
 800745e:	4013      	ands	r3, r2
 8007460:	2b40      	cmp	r3, #64	; 0x40
 8007462:	d000      	beq.n	8007466 <HAL_UART_IRQHandler+0x2e2>
 8007464:	e0a1      	b.n	80075aa <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	217e      	movs	r1, #126	; 0x7e
 8007470:	187b      	adds	r3, r7, r1
 8007472:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007474:	187b      	adds	r3, r7, r1
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d100      	bne.n	800747e <HAL_UART_IRQHandler+0x2fa>
 800747c:	e158      	b.n	8007730 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2258      	movs	r2, #88	; 0x58
 8007482:	5a9b      	ldrh	r3, [r3, r2]
 8007484:	187a      	adds	r2, r7, r1
 8007486:	8812      	ldrh	r2, [r2, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d300      	bcc.n	800748e <HAL_UART_IRQHandler+0x30a>
 800748c:	e150      	b.n	8007730 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	187a      	adds	r2, r7, r1
 8007492:	215a      	movs	r1, #90	; 0x5a
 8007494:	8812      	ldrh	r2, [r2, #0]
 8007496:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2220      	movs	r2, #32
 80074a2:	4013      	ands	r3, r2
 80074a4:	d16f      	bne.n	8007586 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074a6:	f3ef 8310 	mrs	r3, PRIMASK
 80074aa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80074b0:	2301      	movs	r3, #1
 80074b2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b6:	f383 8810 	msr	PRIMASK, r3
}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	499e      	ldr	r1, [pc, #632]	; (8007740 <HAL_UART_IRQHandler+0x5bc>)
 80074c8:	400a      	ands	r2, r1
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d2:	f383 8810 	msr	PRIMASK, r3
}
 80074d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074d8:	f3ef 8310 	mrs	r3, PRIMASK
 80074dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80074de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e0:	677b      	str	r3, [r7, #116]	; 0x74
 80074e2:	2301      	movs	r3, #1
 80074e4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e8:	f383 8810 	msr	PRIMASK, r3
}
 80074ec:	46c0      	nop			; (mov r8, r8)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2101      	movs	r1, #1
 80074fa:	438a      	bics	r2, r1
 80074fc:	609a      	str	r2, [r3, #8]
 80074fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007500:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007504:	f383 8810 	msr	PRIMASK, r3
}
 8007508:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800750a:	f3ef 8310 	mrs	r3, PRIMASK
 800750e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007510:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007512:	673b      	str	r3, [r7, #112]	; 0x70
 8007514:	2301      	movs	r3, #1
 8007516:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800751a:	f383 8810 	msr	PRIMASK, r3
}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2140      	movs	r1, #64	; 0x40
 800752c:	438a      	bics	r2, r1
 800752e:	609a      	str	r2, [r3, #8]
 8007530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007532:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007536:	f383 8810 	msr	PRIMASK, r3
}
 800753a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2280      	movs	r2, #128	; 0x80
 8007540:	2120      	movs	r1, #32
 8007542:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800754a:	f3ef 8310 	mrs	r3, PRIMASK
 800754e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007550:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007552:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007554:	2301      	movs	r3, #1
 8007556:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800755a:	f383 8810 	msr	PRIMASK, r3
}
 800755e:	46c0      	nop			; (mov r8, r8)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2110      	movs	r1, #16
 800756c:	438a      	bics	r2, r1
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007572:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007576:	f383 8810 	msr	PRIMASK, r3
}
 800757a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007580:	0018      	movs	r0, r3
 8007582:	f7fd f825 	bl	80045d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2202      	movs	r2, #2
 800758a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2258      	movs	r2, #88	; 0x58
 8007590:	5a9a      	ldrh	r2, [r3, r2]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	215a      	movs	r1, #90	; 0x5a
 8007596:	5a5b      	ldrh	r3, [r3, r1]
 8007598:	b29b      	uxth	r3, r3
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	b29a      	uxth	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	0011      	movs	r1, r2
 80075a2:	0018      	movs	r0, r3
 80075a4:	f000 f8e0 	bl	8007768 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075a8:	e0c2      	b.n	8007730 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2258      	movs	r2, #88	; 0x58
 80075ae:	5a99      	ldrh	r1, [r3, r2]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	225a      	movs	r2, #90	; 0x5a
 80075b4:	5a9b      	ldrh	r3, [r3, r2]
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	208e      	movs	r0, #142	; 0x8e
 80075ba:	183b      	adds	r3, r7, r0
 80075bc:	1a8a      	subs	r2, r1, r2
 80075be:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	225a      	movs	r2, #90	; 0x5a
 80075c4:	5a9b      	ldrh	r3, [r3, r2]
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d100      	bne.n	80075ce <HAL_UART_IRQHandler+0x44a>
 80075cc:	e0b2      	b.n	8007734 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80075ce:	183b      	adds	r3, r7, r0
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d100      	bne.n	80075d8 <HAL_UART_IRQHandler+0x454>
 80075d6:	e0ad      	b.n	8007734 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d8:	f3ef 8310 	mrs	r3, PRIMASK
 80075dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80075de:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075e0:	2488      	movs	r4, #136	; 0x88
 80075e2:	193a      	adds	r2, r7, r4
 80075e4:	6013      	str	r3, [r2, #0]
 80075e6:	2301      	movs	r3, #1
 80075e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f383 8810 	msr	PRIMASK, r3
}
 80075f0:	46c0      	nop			; (mov r8, r8)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4951      	ldr	r1, [pc, #324]	; (8007744 <HAL_UART_IRQHandler+0x5c0>)
 80075fe:	400a      	ands	r2, r1
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	193b      	adds	r3, r7, r4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f383 8810 	msr	PRIMASK, r3
}
 800760e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007610:	f3ef 8310 	mrs	r3, PRIMASK
 8007614:	61bb      	str	r3, [r7, #24]
  return(result);
 8007616:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007618:	2484      	movs	r4, #132	; 0x84
 800761a:	193a      	adds	r2, r7, r4
 800761c:	6013      	str	r3, [r2, #0]
 800761e:	2301      	movs	r3, #1
 8007620:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	f383 8810 	msr	PRIMASK, r3
}
 8007628:	46c0      	nop			; (mov r8, r8)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2101      	movs	r1, #1
 8007636:	438a      	bics	r2, r1
 8007638:	609a      	str	r2, [r3, #8]
 800763a:	193b      	adds	r3, r7, r4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	f383 8810 	msr	PRIMASK, r3
}
 8007646:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2280      	movs	r2, #128	; 0x80
 800764c:	2120      	movs	r1, #32
 800764e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800765c:	f3ef 8310 	mrs	r3, PRIMASK
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007664:	2480      	movs	r4, #128	; 0x80
 8007666:	193a      	adds	r2, r7, r4
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	2301      	movs	r3, #1
 800766c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	f383 8810 	msr	PRIMASK, r3
}
 8007674:	46c0      	nop			; (mov r8, r8)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2110      	movs	r1, #16
 8007682:	438a      	bics	r2, r1
 8007684:	601a      	str	r2, [r3, #0]
 8007686:	193b      	adds	r3, r7, r4
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768e:	f383 8810 	msr	PRIMASK, r3
}
 8007692:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800769a:	183b      	adds	r3, r7, r0
 800769c:	881a      	ldrh	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	0011      	movs	r1, r2
 80076a2:	0018      	movs	r0, r3
 80076a4:	f000 f860 	bl	8007768 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076a8:	e044      	b.n	8007734 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076aa:	23a4      	movs	r3, #164	; 0xa4
 80076ac:	18fb      	adds	r3, r7, r3
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	2380      	movs	r3, #128	; 0x80
 80076b2:	035b      	lsls	r3, r3, #13
 80076b4:	4013      	ands	r3, r2
 80076b6:	d010      	beq.n	80076da <HAL_UART_IRQHandler+0x556>
 80076b8:	239c      	movs	r3, #156	; 0x9c
 80076ba:	18fb      	adds	r3, r7, r3
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	2380      	movs	r3, #128	; 0x80
 80076c0:	03db      	lsls	r3, r3, #15
 80076c2:	4013      	ands	r3, r2
 80076c4:	d009      	beq.n	80076da <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2280      	movs	r2, #128	; 0x80
 80076cc:	0352      	lsls	r2, r2, #13
 80076ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	0018      	movs	r0, r3
 80076d4:	f001 f88a 	bl	80087ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076d8:	e02f      	b.n	800773a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80076da:	23a4      	movs	r3, #164	; 0xa4
 80076dc:	18fb      	adds	r3, r7, r3
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2280      	movs	r2, #128	; 0x80
 80076e2:	4013      	ands	r3, r2
 80076e4:	d00f      	beq.n	8007706 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80076e6:	23a0      	movs	r3, #160	; 0xa0
 80076e8:	18fb      	adds	r3, r7, r3
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2280      	movs	r2, #128	; 0x80
 80076ee:	4013      	ands	r3, r2
 80076f0:	d009      	beq.n	8007706 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01e      	beq.n	8007738 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	0010      	movs	r0, r2
 8007702:	4798      	blx	r3
    }
    return;
 8007704:	e018      	b.n	8007738 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007706:	23a4      	movs	r3, #164	; 0xa4
 8007708:	18fb      	adds	r3, r7, r3
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2240      	movs	r2, #64	; 0x40
 800770e:	4013      	ands	r3, r2
 8007710:	d013      	beq.n	800773a <HAL_UART_IRQHandler+0x5b6>
 8007712:	23a0      	movs	r3, #160	; 0xa0
 8007714:	18fb      	adds	r3, r7, r3
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2240      	movs	r2, #64	; 0x40
 800771a:	4013      	ands	r3, r2
 800771c:	d00d      	beq.n	800773a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	0018      	movs	r0, r3
 8007722:	f000 fe73 	bl	800840c <UART_EndTransmit_IT>
    return;
 8007726:	e008      	b.n	800773a <HAL_UART_IRQHandler+0x5b6>
      return;
 8007728:	46c0      	nop			; (mov r8, r8)
 800772a:	e006      	b.n	800773a <HAL_UART_IRQHandler+0x5b6>
    return;
 800772c:	46c0      	nop			; (mov r8, r8)
 800772e:	e004      	b.n	800773a <HAL_UART_IRQHandler+0x5b6>
      return;
 8007730:	46c0      	nop			; (mov r8, r8)
 8007732:	e002      	b.n	800773a <HAL_UART_IRQHandler+0x5b6>
      return;
 8007734:	46c0      	nop			; (mov r8, r8)
 8007736:	e000      	b.n	800773a <HAL_UART_IRQHandler+0x5b6>
    return;
 8007738:	46c0      	nop			; (mov r8, r8)
  }

}
 800773a:	46bd      	mov	sp, r7
 800773c:	b02b      	add	sp, #172	; 0xac
 800773e:	bd90      	pop	{r4, r7, pc}
 8007740:	fffffeff 	.word	0xfffffeff
 8007744:	fffffedf 	.word	0xfffffedf

08007748 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007750:	46c0      	nop			; (mov r8, r8)
 8007752:	46bd      	mov	sp, r7
 8007754:	b002      	add	sp, #8
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007760:	46c0      	nop			; (mov r8, r8)
 8007762:	46bd      	mov	sp, r7
 8007764:	b002      	add	sp, #8
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	000a      	movs	r2, r1
 8007772:	1cbb      	adds	r3, r7, #2
 8007774:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007776:	46c0      	nop			; (mov r8, r8)
 8007778:	46bd      	mov	sp, r7
 800777a:	b002      	add	sp, #8
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007780:	b5b0      	push	{r4, r5, r7, lr}
 8007782:	b08e      	sub	sp, #56	; 0x38
 8007784:	af00      	add	r7, sp, #0
 8007786:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007788:	231a      	movs	r3, #26
 800778a:	2218      	movs	r2, #24
 800778c:	189b      	adds	r3, r3, r2
 800778e:	19db      	adds	r3, r3, r7
 8007790:	2200      	movs	r2, #0
 8007792:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	431a      	orrs	r2, r3
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	431a      	orrs	r2, r3
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4ac6      	ldr	r2, [pc, #792]	; (8007acc <UART_SetConfig+0x34c>)
 80077b4:	4013      	ands	r3, r2
 80077b6:	0019      	movs	r1, r3
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077be:	430a      	orrs	r2, r1
 80077c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	4ac1      	ldr	r2, [pc, #772]	; (8007ad0 <UART_SetConfig+0x350>)
 80077ca:	4013      	ands	r3, r2
 80077cc:	0019      	movs	r1, r3
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	68da      	ldr	r2, [r3, #12]
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4abb      	ldr	r2, [pc, #748]	; (8007ad4 <UART_SetConfig+0x354>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d004      	beq.n	80077f4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077f0:	4313      	orrs	r3, r2
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	4ab7      	ldr	r2, [pc, #732]	; (8007ad8 <UART_SetConfig+0x358>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	0019      	movs	r1, r3
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007806:	430a      	orrs	r2, r1
 8007808:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4ab3      	ldr	r2, [pc, #716]	; (8007adc <UART_SetConfig+0x35c>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d131      	bne.n	8007878 <UART_SetConfig+0xf8>
 8007814:	4bb2      	ldr	r3, [pc, #712]	; (8007ae0 <UART_SetConfig+0x360>)
 8007816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007818:	2203      	movs	r2, #3
 800781a:	4013      	ands	r3, r2
 800781c:	2b03      	cmp	r3, #3
 800781e:	d01d      	beq.n	800785c <UART_SetConfig+0xdc>
 8007820:	d823      	bhi.n	800786a <UART_SetConfig+0xea>
 8007822:	2b02      	cmp	r3, #2
 8007824:	d00c      	beq.n	8007840 <UART_SetConfig+0xc0>
 8007826:	d820      	bhi.n	800786a <UART_SetConfig+0xea>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <UART_SetConfig+0xb2>
 800782c:	2b01      	cmp	r3, #1
 800782e:	d00e      	beq.n	800784e <UART_SetConfig+0xce>
 8007830:	e01b      	b.n	800786a <UART_SetConfig+0xea>
 8007832:	231b      	movs	r3, #27
 8007834:	2218      	movs	r2, #24
 8007836:	189b      	adds	r3, r3, r2
 8007838:	19db      	adds	r3, r3, r7
 800783a:	2201      	movs	r2, #1
 800783c:	701a      	strb	r2, [r3, #0]
 800783e:	e09c      	b.n	800797a <UART_SetConfig+0x1fa>
 8007840:	231b      	movs	r3, #27
 8007842:	2218      	movs	r2, #24
 8007844:	189b      	adds	r3, r3, r2
 8007846:	19db      	adds	r3, r3, r7
 8007848:	2202      	movs	r2, #2
 800784a:	701a      	strb	r2, [r3, #0]
 800784c:	e095      	b.n	800797a <UART_SetConfig+0x1fa>
 800784e:	231b      	movs	r3, #27
 8007850:	2218      	movs	r2, #24
 8007852:	189b      	adds	r3, r3, r2
 8007854:	19db      	adds	r3, r3, r7
 8007856:	2204      	movs	r2, #4
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	e08e      	b.n	800797a <UART_SetConfig+0x1fa>
 800785c:	231b      	movs	r3, #27
 800785e:	2218      	movs	r2, #24
 8007860:	189b      	adds	r3, r3, r2
 8007862:	19db      	adds	r3, r3, r7
 8007864:	2208      	movs	r2, #8
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	e087      	b.n	800797a <UART_SetConfig+0x1fa>
 800786a:	231b      	movs	r3, #27
 800786c:	2218      	movs	r2, #24
 800786e:	189b      	adds	r3, r3, r2
 8007870:	19db      	adds	r3, r3, r7
 8007872:	2210      	movs	r2, #16
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	e080      	b.n	800797a <UART_SetConfig+0x1fa>
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a99      	ldr	r2, [pc, #612]	; (8007ae4 <UART_SetConfig+0x364>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d131      	bne.n	80078e6 <UART_SetConfig+0x166>
 8007882:	4b97      	ldr	r3, [pc, #604]	; (8007ae0 <UART_SetConfig+0x360>)
 8007884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007886:	220c      	movs	r2, #12
 8007888:	4013      	ands	r3, r2
 800788a:	2b0c      	cmp	r3, #12
 800788c:	d01d      	beq.n	80078ca <UART_SetConfig+0x14a>
 800788e:	d823      	bhi.n	80078d8 <UART_SetConfig+0x158>
 8007890:	2b08      	cmp	r3, #8
 8007892:	d00c      	beq.n	80078ae <UART_SetConfig+0x12e>
 8007894:	d820      	bhi.n	80078d8 <UART_SetConfig+0x158>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <UART_SetConfig+0x120>
 800789a:	2b04      	cmp	r3, #4
 800789c:	d00e      	beq.n	80078bc <UART_SetConfig+0x13c>
 800789e:	e01b      	b.n	80078d8 <UART_SetConfig+0x158>
 80078a0:	231b      	movs	r3, #27
 80078a2:	2218      	movs	r2, #24
 80078a4:	189b      	adds	r3, r3, r2
 80078a6:	19db      	adds	r3, r3, r7
 80078a8:	2200      	movs	r2, #0
 80078aa:	701a      	strb	r2, [r3, #0]
 80078ac:	e065      	b.n	800797a <UART_SetConfig+0x1fa>
 80078ae:	231b      	movs	r3, #27
 80078b0:	2218      	movs	r2, #24
 80078b2:	189b      	adds	r3, r3, r2
 80078b4:	19db      	adds	r3, r3, r7
 80078b6:	2202      	movs	r2, #2
 80078b8:	701a      	strb	r2, [r3, #0]
 80078ba:	e05e      	b.n	800797a <UART_SetConfig+0x1fa>
 80078bc:	231b      	movs	r3, #27
 80078be:	2218      	movs	r2, #24
 80078c0:	189b      	adds	r3, r3, r2
 80078c2:	19db      	adds	r3, r3, r7
 80078c4:	2204      	movs	r2, #4
 80078c6:	701a      	strb	r2, [r3, #0]
 80078c8:	e057      	b.n	800797a <UART_SetConfig+0x1fa>
 80078ca:	231b      	movs	r3, #27
 80078cc:	2218      	movs	r2, #24
 80078ce:	189b      	adds	r3, r3, r2
 80078d0:	19db      	adds	r3, r3, r7
 80078d2:	2208      	movs	r2, #8
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	e050      	b.n	800797a <UART_SetConfig+0x1fa>
 80078d8:	231b      	movs	r3, #27
 80078da:	2218      	movs	r2, #24
 80078dc:	189b      	adds	r3, r3, r2
 80078de:	19db      	adds	r3, r3, r7
 80078e0:	2210      	movs	r2, #16
 80078e2:	701a      	strb	r2, [r3, #0]
 80078e4:	e049      	b.n	800797a <UART_SetConfig+0x1fa>
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a7a      	ldr	r2, [pc, #488]	; (8007ad4 <UART_SetConfig+0x354>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d13e      	bne.n	800796e <UART_SetConfig+0x1ee>
 80078f0:	4b7b      	ldr	r3, [pc, #492]	; (8007ae0 <UART_SetConfig+0x360>)
 80078f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078f4:	23c0      	movs	r3, #192	; 0xc0
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	4013      	ands	r3, r2
 80078fa:	22c0      	movs	r2, #192	; 0xc0
 80078fc:	0112      	lsls	r2, r2, #4
 80078fe:	4293      	cmp	r3, r2
 8007900:	d027      	beq.n	8007952 <UART_SetConfig+0x1d2>
 8007902:	22c0      	movs	r2, #192	; 0xc0
 8007904:	0112      	lsls	r2, r2, #4
 8007906:	4293      	cmp	r3, r2
 8007908:	d82a      	bhi.n	8007960 <UART_SetConfig+0x1e0>
 800790a:	2280      	movs	r2, #128	; 0x80
 800790c:	0112      	lsls	r2, r2, #4
 800790e:	4293      	cmp	r3, r2
 8007910:	d011      	beq.n	8007936 <UART_SetConfig+0x1b6>
 8007912:	2280      	movs	r2, #128	; 0x80
 8007914:	0112      	lsls	r2, r2, #4
 8007916:	4293      	cmp	r3, r2
 8007918:	d822      	bhi.n	8007960 <UART_SetConfig+0x1e0>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d004      	beq.n	8007928 <UART_SetConfig+0x1a8>
 800791e:	2280      	movs	r2, #128	; 0x80
 8007920:	00d2      	lsls	r2, r2, #3
 8007922:	4293      	cmp	r3, r2
 8007924:	d00e      	beq.n	8007944 <UART_SetConfig+0x1c4>
 8007926:	e01b      	b.n	8007960 <UART_SetConfig+0x1e0>
 8007928:	231b      	movs	r3, #27
 800792a:	2218      	movs	r2, #24
 800792c:	189b      	adds	r3, r3, r2
 800792e:	19db      	adds	r3, r3, r7
 8007930:	2200      	movs	r2, #0
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	e021      	b.n	800797a <UART_SetConfig+0x1fa>
 8007936:	231b      	movs	r3, #27
 8007938:	2218      	movs	r2, #24
 800793a:	189b      	adds	r3, r3, r2
 800793c:	19db      	adds	r3, r3, r7
 800793e:	2202      	movs	r2, #2
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	e01a      	b.n	800797a <UART_SetConfig+0x1fa>
 8007944:	231b      	movs	r3, #27
 8007946:	2218      	movs	r2, #24
 8007948:	189b      	adds	r3, r3, r2
 800794a:	19db      	adds	r3, r3, r7
 800794c:	2204      	movs	r2, #4
 800794e:	701a      	strb	r2, [r3, #0]
 8007950:	e013      	b.n	800797a <UART_SetConfig+0x1fa>
 8007952:	231b      	movs	r3, #27
 8007954:	2218      	movs	r2, #24
 8007956:	189b      	adds	r3, r3, r2
 8007958:	19db      	adds	r3, r3, r7
 800795a:	2208      	movs	r2, #8
 800795c:	701a      	strb	r2, [r3, #0]
 800795e:	e00c      	b.n	800797a <UART_SetConfig+0x1fa>
 8007960:	231b      	movs	r3, #27
 8007962:	2218      	movs	r2, #24
 8007964:	189b      	adds	r3, r3, r2
 8007966:	19db      	adds	r3, r3, r7
 8007968:	2210      	movs	r2, #16
 800796a:	701a      	strb	r2, [r3, #0]
 800796c:	e005      	b.n	800797a <UART_SetConfig+0x1fa>
 800796e:	231b      	movs	r3, #27
 8007970:	2218      	movs	r2, #24
 8007972:	189b      	adds	r3, r3, r2
 8007974:	19db      	adds	r3, r3, r7
 8007976:	2210      	movs	r2, #16
 8007978:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a55      	ldr	r2, [pc, #340]	; (8007ad4 <UART_SetConfig+0x354>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d000      	beq.n	8007986 <UART_SetConfig+0x206>
 8007984:	e084      	b.n	8007a90 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007986:	231b      	movs	r3, #27
 8007988:	2218      	movs	r2, #24
 800798a:	189b      	adds	r3, r3, r2
 800798c:	19db      	adds	r3, r3, r7
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b08      	cmp	r3, #8
 8007992:	d01d      	beq.n	80079d0 <UART_SetConfig+0x250>
 8007994:	dc20      	bgt.n	80079d8 <UART_SetConfig+0x258>
 8007996:	2b04      	cmp	r3, #4
 8007998:	d015      	beq.n	80079c6 <UART_SetConfig+0x246>
 800799a:	dc1d      	bgt.n	80079d8 <UART_SetConfig+0x258>
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <UART_SetConfig+0x226>
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d005      	beq.n	80079b0 <UART_SetConfig+0x230>
 80079a4:	e018      	b.n	80079d8 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079a6:	f7fe f807 	bl	80059b8 <HAL_RCC_GetPCLK1Freq>
 80079aa:	0003      	movs	r3, r0
 80079ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079ae:	e01c      	b.n	80079ea <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079b0:	4b4b      	ldr	r3, [pc, #300]	; (8007ae0 <UART_SetConfig+0x360>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2210      	movs	r2, #16
 80079b6:	4013      	ands	r3, r2
 80079b8:	d002      	beq.n	80079c0 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80079ba:	4b4b      	ldr	r3, [pc, #300]	; (8007ae8 <UART_SetConfig+0x368>)
 80079bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079be:	e014      	b.n	80079ea <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80079c0:	4b4a      	ldr	r3, [pc, #296]	; (8007aec <UART_SetConfig+0x36c>)
 80079c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079c4:	e011      	b.n	80079ea <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079c6:	f7fd ff47 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 80079ca:	0003      	movs	r3, r0
 80079cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079ce:	e00c      	b.n	80079ea <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079d0:	2380      	movs	r3, #128	; 0x80
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079d6:	e008      	b.n	80079ea <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80079dc:	231a      	movs	r3, #26
 80079de:	2218      	movs	r2, #24
 80079e0:	189b      	adds	r3, r3, r2
 80079e2:	19db      	adds	r3, r3, r7
 80079e4:	2201      	movs	r2, #1
 80079e6:	701a      	strb	r2, [r3, #0]
        break;
 80079e8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d100      	bne.n	80079f2 <UART_SetConfig+0x272>
 80079f0:	e132      	b.n	8007c58 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	0013      	movs	r3, r2
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	189b      	adds	r3, r3, r2
 80079fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d305      	bcc.n	8007a0e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d906      	bls.n	8007a1c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8007a0e:	231a      	movs	r3, #26
 8007a10:	2218      	movs	r2, #24
 8007a12:	189b      	adds	r3, r3, r2
 8007a14:	19db      	adds	r3, r3, r7
 8007a16:	2201      	movs	r2, #1
 8007a18:	701a      	strb	r2, [r3, #0]
 8007a1a:	e11d      	b.n	8007c58 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1e:	613b      	str	r3, [r7, #16]
 8007a20:	2300      	movs	r3, #0
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	6939      	ldr	r1, [r7, #16]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	000b      	movs	r3, r1
 8007a2a:	0e1b      	lsrs	r3, r3, #24
 8007a2c:	0010      	movs	r0, r2
 8007a2e:	0205      	lsls	r5, r0, #8
 8007a30:	431d      	orrs	r5, r3
 8007a32:	000b      	movs	r3, r1
 8007a34:	021c      	lsls	r4, r3, #8
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	085b      	lsrs	r3, r3, #1
 8007a3c:	60bb      	str	r3, [r7, #8]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	68b8      	ldr	r0, [r7, #8]
 8007a44:	68f9      	ldr	r1, [r7, #12]
 8007a46:	1900      	adds	r0, r0, r4
 8007a48:	4169      	adcs	r1, r5
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	2300      	movs	r3, #0
 8007a52:	607b      	str	r3, [r7, #4]
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f7f8 fd26 	bl	80004a8 <__aeabi_uldivmod>
 8007a5c:	0002      	movs	r2, r0
 8007a5e:	000b      	movs	r3, r1
 8007a60:	0013      	movs	r3, r2
 8007a62:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a66:	23c0      	movs	r3, #192	; 0xc0
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d309      	bcc.n	8007a82 <UART_SetConfig+0x302>
 8007a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a70:	2380      	movs	r3, #128	; 0x80
 8007a72:	035b      	lsls	r3, r3, #13
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d204      	bcs.n	8007a82 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a7e:	60da      	str	r2, [r3, #12]
 8007a80:	e0ea      	b.n	8007c58 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8007a82:	231a      	movs	r3, #26
 8007a84:	2218      	movs	r2, #24
 8007a86:	189b      	adds	r3, r3, r2
 8007a88:	19db      	adds	r3, r3, r7
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	e0e3      	b.n	8007c58 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	69da      	ldr	r2, [r3, #28]
 8007a94:	2380      	movs	r3, #128	; 0x80
 8007a96:	021b      	lsls	r3, r3, #8
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d000      	beq.n	8007a9e <UART_SetConfig+0x31e>
 8007a9c:	e085      	b.n	8007baa <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8007a9e:	231b      	movs	r3, #27
 8007aa0:	2218      	movs	r2, #24
 8007aa2:	189b      	adds	r3, r3, r2
 8007aa4:	19db      	adds	r3, r3, r7
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b08      	cmp	r3, #8
 8007aaa:	d837      	bhi.n	8007b1c <UART_SetConfig+0x39c>
 8007aac:	009a      	lsls	r2, r3, #2
 8007aae:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <UART_SetConfig+0x370>)
 8007ab0:	18d3      	adds	r3, r2, r3
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ab6:	f7fd ff7f 	bl	80059b8 <HAL_RCC_GetPCLK1Freq>
 8007aba:	0003      	movs	r3, r0
 8007abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007abe:	e036      	b.n	8007b2e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ac0:	f7fd ff90 	bl	80059e4 <HAL_RCC_GetPCLK2Freq>
 8007ac4:	0003      	movs	r3, r0
 8007ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ac8:	e031      	b.n	8007b2e <UART_SetConfig+0x3ae>
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	efff69f3 	.word	0xefff69f3
 8007ad0:	ffffcfff 	.word	0xffffcfff
 8007ad4:	40004800 	.word	0x40004800
 8007ad8:	fffff4ff 	.word	0xfffff4ff
 8007adc:	40013800 	.word	0x40013800
 8007ae0:	40021000 	.word	0x40021000
 8007ae4:	40004400 	.word	0x40004400
 8007ae8:	003d0900 	.word	0x003d0900
 8007aec:	00f42400 	.word	0x00f42400
 8007af0:	0800d1ac 	.word	0x0800d1ac
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007af4:	4b60      	ldr	r3, [pc, #384]	; (8007c78 <UART_SetConfig+0x4f8>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2210      	movs	r2, #16
 8007afa:	4013      	ands	r3, r2
 8007afc:	d002      	beq.n	8007b04 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007afe:	4b5f      	ldr	r3, [pc, #380]	; (8007c7c <UART_SetConfig+0x4fc>)
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b02:	e014      	b.n	8007b2e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8007b04:	4b5e      	ldr	r3, [pc, #376]	; (8007c80 <UART_SetConfig+0x500>)
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b08:	e011      	b.n	8007b2e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b0a:	f7fd fea5 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8007b0e:	0003      	movs	r3, r0
 8007b10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b12:	e00c      	b.n	8007b2e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b14:	2380      	movs	r3, #128	; 0x80
 8007b16:	021b      	lsls	r3, r3, #8
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b1a:	e008      	b.n	8007b2e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007b20:	231a      	movs	r3, #26
 8007b22:	2218      	movs	r2, #24
 8007b24:	189b      	adds	r3, r3, r2
 8007b26:	19db      	adds	r3, r3, r7
 8007b28:	2201      	movs	r2, #1
 8007b2a:	701a      	strb	r2, [r3, #0]
        break;
 8007b2c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d100      	bne.n	8007b36 <UART_SetConfig+0x3b6>
 8007b34:	e090      	b.n	8007c58 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b38:	005a      	lsls	r2, r3, #1
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	085b      	lsrs	r3, r3, #1
 8007b40:	18d2      	adds	r2, r2, r3
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	0019      	movs	r1, r3
 8007b48:	0010      	movs	r0, r2
 8007b4a:	f7f8 faf9 	bl	8000140 <__udivsi3>
 8007b4e:	0003      	movs	r3, r0
 8007b50:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b54:	2b0f      	cmp	r3, #15
 8007b56:	d921      	bls.n	8007b9c <UART_SetConfig+0x41c>
 8007b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b5a:	2380      	movs	r3, #128	; 0x80
 8007b5c:	025b      	lsls	r3, r3, #9
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d21c      	bcs.n	8007b9c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	200e      	movs	r0, #14
 8007b68:	2418      	movs	r4, #24
 8007b6a:	1903      	adds	r3, r0, r4
 8007b6c:	19db      	adds	r3, r3, r7
 8007b6e:	210f      	movs	r1, #15
 8007b70:	438a      	bics	r2, r1
 8007b72:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	085b      	lsrs	r3, r3, #1
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	2207      	movs	r2, #7
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	b299      	uxth	r1, r3
 8007b80:	1903      	adds	r3, r0, r4
 8007b82:	19db      	adds	r3, r3, r7
 8007b84:	1902      	adds	r2, r0, r4
 8007b86:	19d2      	adds	r2, r2, r7
 8007b88:	8812      	ldrh	r2, [r2, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	1902      	adds	r2, r0, r4
 8007b94:	19d2      	adds	r2, r2, r7
 8007b96:	8812      	ldrh	r2, [r2, #0]
 8007b98:	60da      	str	r2, [r3, #12]
 8007b9a:	e05d      	b.n	8007c58 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8007b9c:	231a      	movs	r3, #26
 8007b9e:	2218      	movs	r2, #24
 8007ba0:	189b      	adds	r3, r3, r2
 8007ba2:	19db      	adds	r3, r3, r7
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	701a      	strb	r2, [r3, #0]
 8007ba8:	e056      	b.n	8007c58 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007baa:	231b      	movs	r3, #27
 8007bac:	2218      	movs	r2, #24
 8007bae:	189b      	adds	r3, r3, r2
 8007bb0:	19db      	adds	r3, r3, r7
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d822      	bhi.n	8007bfe <UART_SetConfig+0x47e>
 8007bb8:	009a      	lsls	r2, r3, #2
 8007bba:	4b32      	ldr	r3, [pc, #200]	; (8007c84 <UART_SetConfig+0x504>)
 8007bbc:	18d3      	adds	r3, r2, r3
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bc2:	f7fd fef9 	bl	80059b8 <HAL_RCC_GetPCLK1Freq>
 8007bc6:	0003      	movs	r3, r0
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bca:	e021      	b.n	8007c10 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bcc:	f7fd ff0a 	bl	80059e4 <HAL_RCC_GetPCLK2Freq>
 8007bd0:	0003      	movs	r3, r0
 8007bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bd4:	e01c      	b.n	8007c10 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bd6:	4b28      	ldr	r3, [pc, #160]	; (8007c78 <UART_SetConfig+0x4f8>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2210      	movs	r2, #16
 8007bdc:	4013      	ands	r3, r2
 8007bde:	d002      	beq.n	8007be6 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007be0:	4b26      	ldr	r3, [pc, #152]	; (8007c7c <UART_SetConfig+0x4fc>)
 8007be2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007be4:	e014      	b.n	8007c10 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8007be6:	4b26      	ldr	r3, [pc, #152]	; (8007c80 <UART_SetConfig+0x500>)
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bea:	e011      	b.n	8007c10 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bec:	f7fd fe34 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8007bf0:	0003      	movs	r3, r0
 8007bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bf4:	e00c      	b.n	8007c10 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bf6:	2380      	movs	r3, #128	; 0x80
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bfc:	e008      	b.n	8007c10 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c02:	231a      	movs	r3, #26
 8007c04:	2218      	movs	r2, #24
 8007c06:	189b      	adds	r3, r3, r2
 8007c08:	19db      	adds	r3, r3, r7
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	701a      	strb	r2, [r3, #0]
        break;
 8007c0e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d020      	beq.n	8007c58 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	085a      	lsrs	r2, r3, #1
 8007c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1e:	18d2      	adds	r2, r2, r3
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	0019      	movs	r1, r3
 8007c26:	0010      	movs	r0, r2
 8007c28:	f7f8 fa8a 	bl	8000140 <__udivsi3>
 8007c2c:	0003      	movs	r3, r0
 8007c2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	2b0f      	cmp	r3, #15
 8007c34:	d90a      	bls.n	8007c4c <UART_SetConfig+0x4cc>
 8007c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c38:	2380      	movs	r3, #128	; 0x80
 8007c3a:	025b      	lsls	r3, r3, #9
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d205      	bcs.n	8007c4c <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	60da      	str	r2, [r3, #12]
 8007c4a:	e005      	b.n	8007c58 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8007c4c:	231a      	movs	r3, #26
 8007c4e:	2218      	movs	r2, #24
 8007c50:	189b      	adds	r3, r3, r2
 8007c52:	19db      	adds	r3, r3, r7
 8007c54:	2201      	movs	r2, #1
 8007c56:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	2200      	movs	r2, #0
 8007c62:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007c64:	231a      	movs	r3, #26
 8007c66:	2218      	movs	r2, #24
 8007c68:	189b      	adds	r3, r3, r2
 8007c6a:	19db      	adds	r3, r3, r7
 8007c6c:	781b      	ldrb	r3, [r3, #0]
}
 8007c6e:	0018      	movs	r0, r3
 8007c70:	46bd      	mov	sp, r7
 8007c72:	b00e      	add	sp, #56	; 0x38
 8007c74:	bdb0      	pop	{r4, r5, r7, pc}
 8007c76:	46c0      	nop			; (mov r8, r8)
 8007c78:	40021000 	.word	0x40021000
 8007c7c:	003d0900 	.word	0x003d0900
 8007c80:	00f42400 	.word	0x00f42400
 8007c84:	0800d1d0 	.word	0x0800d1d0

08007c88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	2201      	movs	r2, #1
 8007c96:	4013      	ands	r3, r2
 8007c98:	d00b      	beq.n	8007cb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	4a4a      	ldr	r2, [pc, #296]	; (8007dcc <UART_AdvFeatureConfig+0x144>)
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	0019      	movs	r1, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	4013      	ands	r3, r2
 8007cba:	d00b      	beq.n	8007cd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	4a43      	ldr	r2, [pc, #268]	; (8007dd0 <UART_AdvFeatureConfig+0x148>)
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	0019      	movs	r1, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	2204      	movs	r2, #4
 8007cda:	4013      	ands	r3, r2
 8007cdc:	d00b      	beq.n	8007cf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	4a3b      	ldr	r2, [pc, #236]	; (8007dd4 <UART_AdvFeatureConfig+0x14c>)
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	0019      	movs	r1, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	2208      	movs	r2, #8
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	d00b      	beq.n	8007d18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	4a34      	ldr	r2, [pc, #208]	; (8007dd8 <UART_AdvFeatureConfig+0x150>)
 8007d08:	4013      	ands	r3, r2
 8007d0a:	0019      	movs	r1, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	2210      	movs	r2, #16
 8007d1e:	4013      	ands	r3, r2
 8007d20:	d00b      	beq.n	8007d3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	4a2c      	ldr	r2, [pc, #176]	; (8007ddc <UART_AdvFeatureConfig+0x154>)
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	0019      	movs	r1, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	2220      	movs	r2, #32
 8007d40:	4013      	ands	r3, r2
 8007d42:	d00b      	beq.n	8007d5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	4a25      	ldr	r2, [pc, #148]	; (8007de0 <UART_AdvFeatureConfig+0x158>)
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	0019      	movs	r1, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	2240      	movs	r2, #64	; 0x40
 8007d62:	4013      	ands	r3, r2
 8007d64:	d01d      	beq.n	8007da2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	4a1d      	ldr	r2, [pc, #116]	; (8007de4 <UART_AdvFeatureConfig+0x15c>)
 8007d6e:	4013      	ands	r3, r2
 8007d70:	0019      	movs	r1, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d82:	2380      	movs	r3, #128	; 0x80
 8007d84:	035b      	lsls	r3, r3, #13
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d10b      	bne.n	8007da2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	4a15      	ldr	r2, [pc, #84]	; (8007de8 <UART_AdvFeatureConfig+0x160>)
 8007d92:	4013      	ands	r3, r2
 8007d94:	0019      	movs	r1, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	2280      	movs	r2, #128	; 0x80
 8007da8:	4013      	ands	r3, r2
 8007daa:	d00b      	beq.n	8007dc4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	4a0e      	ldr	r2, [pc, #56]	; (8007dec <UART_AdvFeatureConfig+0x164>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	0019      	movs	r1, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	605a      	str	r2, [r3, #4]
  }
}
 8007dc4:	46c0      	nop			; (mov r8, r8)
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	b002      	add	sp, #8
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	fffdffff 	.word	0xfffdffff
 8007dd0:	fffeffff 	.word	0xfffeffff
 8007dd4:	fffbffff 	.word	0xfffbffff
 8007dd8:	ffff7fff 	.word	0xffff7fff
 8007ddc:	ffffefff 	.word	0xffffefff
 8007de0:	ffffdfff 	.word	0xffffdfff
 8007de4:	ffefffff 	.word	0xffefffff
 8007de8:	ff9fffff 	.word	0xff9fffff
 8007dec:	fff7ffff 	.word	0xfff7ffff

08007df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b092      	sub	sp, #72	; 0x48
 8007df4:	af02      	add	r7, sp, #8
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2284      	movs	r2, #132	; 0x84
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e00:	f7fc f82e 	bl	8003e60 <HAL_GetTick>
 8007e04:	0003      	movs	r3, r0
 8007e06:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2208      	movs	r2, #8
 8007e10:	4013      	ands	r3, r2
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	d12c      	bne.n	8007e70 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e18:	2280      	movs	r2, #128	; 0x80
 8007e1a:	0391      	lsls	r1, r2, #14
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	4a46      	ldr	r2, [pc, #280]	; (8007f38 <UART_CheckIdleState+0x148>)
 8007e20:	9200      	str	r2, [sp, #0]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f000 f88c 	bl	8007f40 <UART_WaitOnFlagUntilTimeout>
 8007e28:	1e03      	subs	r3, r0, #0
 8007e2a:	d021      	beq.n	8007e70 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007e34:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e36:	2301      	movs	r3, #1
 8007e38:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	f383 8810 	msr	PRIMASK, r3
}
 8007e40:	46c0      	nop			; (mov r8, r8)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2180      	movs	r1, #128	; 0x80
 8007e4e:	438a      	bics	r2, r1
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	f383 8810 	msr	PRIMASK, r3
}
 8007e5c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2278      	movs	r2, #120	; 0x78
 8007e68:	2100      	movs	r1, #0
 8007e6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e05f      	b.n	8007f30 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2204      	movs	r2, #4
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	d146      	bne.n	8007f0c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e80:	2280      	movs	r2, #128	; 0x80
 8007e82:	03d1      	lsls	r1, r2, #15
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4a2c      	ldr	r2, [pc, #176]	; (8007f38 <UART_CheckIdleState+0x148>)
 8007e88:	9200      	str	r2, [sp, #0]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f000 f858 	bl	8007f40 <UART_WaitOnFlagUntilTimeout>
 8007e90:	1e03      	subs	r3, r0, #0
 8007e92:	d03b      	beq.n	8007f0c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e94:	f3ef 8310 	mrs	r3, PRIMASK
 8007e98:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f383 8810 	msr	PRIMASK, r3
}
 8007ea8:	46c0      	nop			; (mov r8, r8)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4921      	ldr	r1, [pc, #132]	; (8007f3c <UART_CheckIdleState+0x14c>)
 8007eb6:	400a      	ands	r2, r1
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f383 8810 	msr	PRIMASK, r3
}
 8007ec4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8007eca:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ecc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ece:	633b      	str	r3, [r7, #48]	; 0x30
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	f383 8810 	msr	PRIMASK, r3
}
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689a      	ldr	r2, [r3, #8]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	438a      	bics	r2, r1
 8007eea:	609a      	str	r2, [r3, #8]
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	f383 8810 	msr	PRIMASK, r3
}
 8007ef6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2280      	movs	r2, #128	; 0x80
 8007efc:	2120      	movs	r1, #32
 8007efe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2278      	movs	r2, #120	; 0x78
 8007f04:	2100      	movs	r1, #0
 8007f06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e011      	b.n	8007f30 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2280      	movs	r2, #128	; 0x80
 8007f16:	2120      	movs	r1, #32
 8007f18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2278      	movs	r2, #120	; 0x78
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	0018      	movs	r0, r3
 8007f32:	46bd      	mov	sp, r7
 8007f34:	b010      	add	sp, #64	; 0x40
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	01ffffff 	.word	0x01ffffff
 8007f3c:	fffffedf 	.word	0xfffffedf

08007f40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	1dfb      	adds	r3, r7, #7
 8007f4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f50:	e04b      	b.n	8007fea <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	3301      	adds	r3, #1
 8007f56:	d048      	beq.n	8007fea <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f58:	f7fb ff82 	bl	8003e60 <HAL_GetTick>
 8007f5c:	0002      	movs	r2, r0
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d302      	bcc.n	8007f6e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e04b      	b.n	800800a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2204      	movs	r2, #4
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	d035      	beq.n	8007fea <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	2208      	movs	r2, #8
 8007f86:	4013      	ands	r3, r2
 8007f88:	2b08      	cmp	r3, #8
 8007f8a:	d111      	bne.n	8007fb0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2208      	movs	r2, #8
 8007f92:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	0018      	movs	r0, r3
 8007f98:	f000 f906 	bl	80081a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2284      	movs	r2, #132	; 0x84
 8007fa0:	2108      	movs	r1, #8
 8007fa2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2278      	movs	r2, #120	; 0x78
 8007fa8:	2100      	movs	r1, #0
 8007faa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e02c      	b.n	800800a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	69da      	ldr	r2, [r3, #28]
 8007fb6:	2380      	movs	r3, #128	; 0x80
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	401a      	ands	r2, r3
 8007fbc:	2380      	movs	r3, #128	; 0x80
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d112      	bne.n	8007fea <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2280      	movs	r2, #128	; 0x80
 8007fca:	0112      	lsls	r2, r2, #4
 8007fcc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	f000 f8e9 	bl	80081a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2284      	movs	r2, #132	; 0x84
 8007fda:	2120      	movs	r1, #32
 8007fdc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2278      	movs	r2, #120	; 0x78
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e00f      	b.n	800800a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	425a      	negs	r2, r3
 8007ffa:	4153      	adcs	r3, r2
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	001a      	movs	r2, r3
 8008000:	1dfb      	adds	r3, r7, #7
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	429a      	cmp	r2, r3
 8008006:	d0a4      	beq.n	8007f52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	0018      	movs	r0, r3
 800800c:	46bd      	mov	sp, r7
 800800e:	b004      	add	sp, #16
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b090      	sub	sp, #64	; 0x40
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	1dbb      	adds	r3, r7, #6
 8008020:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	1dba      	adds	r2, r7, #6
 800802c:	2158      	movs	r1, #88	; 0x58
 800802e:	8812      	ldrh	r2, [r2, #0]
 8008030:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	1dba      	adds	r2, r7, #6
 8008036:	215a      	movs	r1, #90	; 0x5a
 8008038:	8812      	ldrh	r2, [r2, #0]
 800803a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	689a      	ldr	r2, [r3, #8]
 8008046:	2380      	movs	r3, #128	; 0x80
 8008048:	015b      	lsls	r3, r3, #5
 800804a:	429a      	cmp	r2, r3
 800804c:	d10d      	bne.n	800806a <UART_Start_Receive_IT+0x56>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d104      	bne.n	8008060 <UART_Start_Receive_IT+0x4c>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	225c      	movs	r2, #92	; 0x5c
 800805a:	4950      	ldr	r1, [pc, #320]	; (800819c <UART_Start_Receive_IT+0x188>)
 800805c:	5299      	strh	r1, [r3, r2]
 800805e:	e02e      	b.n	80080be <UART_Start_Receive_IT+0xaa>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	225c      	movs	r2, #92	; 0x5c
 8008064:	21ff      	movs	r1, #255	; 0xff
 8008066:	5299      	strh	r1, [r3, r2]
 8008068:	e029      	b.n	80080be <UART_Start_Receive_IT+0xaa>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10d      	bne.n	800808e <UART_Start_Receive_IT+0x7a>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d104      	bne.n	8008084 <UART_Start_Receive_IT+0x70>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	225c      	movs	r2, #92	; 0x5c
 800807e:	21ff      	movs	r1, #255	; 0xff
 8008080:	5299      	strh	r1, [r3, r2]
 8008082:	e01c      	b.n	80080be <UART_Start_Receive_IT+0xaa>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	225c      	movs	r2, #92	; 0x5c
 8008088:	217f      	movs	r1, #127	; 0x7f
 800808a:	5299      	strh	r1, [r3, r2]
 800808c:	e017      	b.n	80080be <UART_Start_Receive_IT+0xaa>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	2380      	movs	r3, #128	; 0x80
 8008094:	055b      	lsls	r3, r3, #21
 8008096:	429a      	cmp	r2, r3
 8008098:	d10d      	bne.n	80080b6 <UART_Start_Receive_IT+0xa2>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d104      	bne.n	80080ac <UART_Start_Receive_IT+0x98>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	225c      	movs	r2, #92	; 0x5c
 80080a6:	217f      	movs	r1, #127	; 0x7f
 80080a8:	5299      	strh	r1, [r3, r2]
 80080aa:	e008      	b.n	80080be <UART_Start_Receive_IT+0xaa>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	225c      	movs	r2, #92	; 0x5c
 80080b0:	213f      	movs	r1, #63	; 0x3f
 80080b2:	5299      	strh	r1, [r3, r2]
 80080b4:	e003      	b.n	80080be <UART_Start_Receive_IT+0xaa>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	225c      	movs	r2, #92	; 0x5c
 80080ba:	2100      	movs	r1, #0
 80080bc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2284      	movs	r2, #132	; 0x84
 80080c2:	2100      	movs	r1, #0
 80080c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2280      	movs	r2, #128	; 0x80
 80080ca:	2122      	movs	r1, #34	; 0x22
 80080cc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ce:	f3ef 8310 	mrs	r3, PRIMASK
 80080d2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80080d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d8:	2301      	movs	r3, #1
 80080da:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080de:	f383 8810 	msr	PRIMASK, r3
}
 80080e2:	46c0      	nop			; (mov r8, r8)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2101      	movs	r1, #1
 80080f0:	430a      	orrs	r2, r1
 80080f2:	609a      	str	r2, [r3, #8]
 80080f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	f383 8810 	msr	PRIMASK, r3
}
 80080fe:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	2380      	movs	r3, #128	; 0x80
 8008106:	015b      	lsls	r3, r3, #5
 8008108:	429a      	cmp	r2, r3
 800810a:	d107      	bne.n	800811c <UART_Start_Receive_IT+0x108>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d103      	bne.n	800811c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4a22      	ldr	r2, [pc, #136]	; (80081a0 <UART_Start_Receive_IT+0x18c>)
 8008118:	669a      	str	r2, [r3, #104]	; 0x68
 800811a:	e002      	b.n	8008122 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4a21      	ldr	r2, [pc, #132]	; (80081a4 <UART_Start_Receive_IT+0x190>)
 8008120:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d019      	beq.n	800815e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800812a:	f3ef 8310 	mrs	r3, PRIMASK
 800812e:	61fb      	str	r3, [r7, #28]
  return(result);
 8008130:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008132:	637b      	str	r3, [r7, #52]	; 0x34
 8008134:	2301      	movs	r3, #1
 8008136:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	f383 8810 	msr	PRIMASK, r3
}
 800813e:	46c0      	nop			; (mov r8, r8)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2190      	movs	r1, #144	; 0x90
 800814c:	0049      	lsls	r1, r1, #1
 800814e:	430a      	orrs	r2, r1
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008154:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	f383 8810 	msr	PRIMASK, r3
}
 800815c:	e018      	b.n	8008190 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800815e:	f3ef 8310 	mrs	r3, PRIMASK
 8008162:	613b      	str	r3, [r7, #16]
  return(result);
 8008164:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008166:	63bb      	str	r3, [r7, #56]	; 0x38
 8008168:	2301      	movs	r3, #1
 800816a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f383 8810 	msr	PRIMASK, r3
}
 8008172:	46c0      	nop			; (mov r8, r8)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2120      	movs	r1, #32
 8008180:	430a      	orrs	r2, r1
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	f383 8810 	msr	PRIMASK, r3
}
 800818e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	0018      	movs	r0, r3
 8008194:	46bd      	mov	sp, r7
 8008196:	b010      	add	sp, #64	; 0x40
 8008198:	bd80      	pop	{r7, pc}
 800819a:	46c0      	nop			; (mov r8, r8)
 800819c:	000001ff 	.word	0x000001ff
 80081a0:	08008629 	.word	0x08008629
 80081a4:	08008465 	.word	0x08008465

080081a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08e      	sub	sp, #56	; 0x38
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081b0:	f3ef 8310 	mrs	r3, PRIMASK
 80081b4:	617b      	str	r3, [r7, #20]
  return(result);
 80081b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081b8:	637b      	str	r3, [r7, #52]	; 0x34
 80081ba:	2301      	movs	r3, #1
 80081bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	f383 8810 	msr	PRIMASK, r3
}
 80081c4:	46c0      	nop			; (mov r8, r8)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4926      	ldr	r1, [pc, #152]	; (800826c <UART_EndRxTransfer+0xc4>)
 80081d2:	400a      	ands	r2, r1
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	f383 8810 	msr	PRIMASK, r3
}
 80081e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081e2:	f3ef 8310 	mrs	r3, PRIMASK
 80081e6:	623b      	str	r3, [r7, #32]
  return(result);
 80081e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ea:	633b      	str	r3, [r7, #48]	; 0x30
 80081ec:	2301      	movs	r3, #1
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	f383 8810 	msr	PRIMASK, r3
}
 80081f6:	46c0      	nop			; (mov r8, r8)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689a      	ldr	r2, [r3, #8]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2101      	movs	r1, #1
 8008204:	438a      	bics	r2, r1
 8008206:	609a      	str	r2, [r3, #8]
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	f383 8810 	msr	PRIMASK, r3
}
 8008212:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008218:	2b01      	cmp	r3, #1
 800821a:	d118      	bne.n	800824e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800821c:	f3ef 8310 	mrs	r3, PRIMASK
 8008220:	60bb      	str	r3, [r7, #8]
  return(result);
 8008222:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008226:	2301      	movs	r3, #1
 8008228:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f383 8810 	msr	PRIMASK, r3
}
 8008230:	46c0      	nop			; (mov r8, r8)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2110      	movs	r1, #16
 800823e:	438a      	bics	r2, r1
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008244:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f383 8810 	msr	PRIMASK, r3
}
 800824c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2280      	movs	r2, #128	; 0x80
 8008252:	2120      	movs	r1, #32
 8008254:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008262:	46c0      	nop			; (mov r8, r8)
 8008264:	46bd      	mov	sp, r7
 8008266:	b00e      	add	sp, #56	; 0x38
 8008268:	bd80      	pop	{r7, pc}
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	fffffedf 	.word	0xfffffedf

08008270 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	225a      	movs	r2, #90	; 0x5a
 8008282:	2100      	movs	r1, #0
 8008284:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2252      	movs	r2, #82	; 0x52
 800828a:	2100      	movs	r1, #0
 800828c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	0018      	movs	r0, r3
 8008292:	f7ff fa61 	bl	8007758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008296:	46c0      	nop			; (mov r8, r8)
 8008298:	46bd      	mov	sp, r7
 800829a:	b004      	add	sp, #16
 800829c:	bd80      	pop	{r7, pc}

0800829e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b08a      	sub	sp, #40	; 0x28
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082aa:	2b21      	cmp	r3, #33	; 0x21
 80082ac:	d14c      	bne.n	8008348 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2252      	movs	r2, #82	; 0x52
 80082b2:	5a9b      	ldrh	r3, [r3, r2]
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d132      	bne.n	8008320 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082ba:	f3ef 8310 	mrs	r3, PRIMASK
 80082be:	60bb      	str	r3, [r7, #8]
  return(result);
 80082c0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80082c2:	627b      	str	r3, [r7, #36]	; 0x24
 80082c4:	2301      	movs	r3, #1
 80082c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f383 8810 	msr	PRIMASK, r3
}
 80082ce:	46c0      	nop			; (mov r8, r8)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2180      	movs	r1, #128	; 0x80
 80082dc:	438a      	bics	r2, r1
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	f383 8810 	msr	PRIMASK, r3
}
 80082ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082ec:	f3ef 8310 	mrs	r3, PRIMASK
 80082f0:	617b      	str	r3, [r7, #20]
  return(result);
 80082f2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082f4:	623b      	str	r3, [r7, #32]
 80082f6:	2301      	movs	r3, #1
 80082f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	f383 8810 	msr	PRIMASK, r3
}
 8008300:	46c0      	nop			; (mov r8, r8)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2140      	movs	r1, #64	; 0x40
 800830e:	430a      	orrs	r2, r1
 8008310:	601a      	str	r2, [r3, #0]
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	f383 8810 	msr	PRIMASK, r3
}
 800831c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800831e:	e013      	b.n	8008348 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008324:	781a      	ldrb	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008330:	1c5a      	adds	r2, r3, #1
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2252      	movs	r2, #82	; 0x52
 800833a:	5a9b      	ldrh	r3, [r3, r2]
 800833c:	b29b      	uxth	r3, r3
 800833e:	3b01      	subs	r3, #1
 8008340:	b299      	uxth	r1, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2252      	movs	r2, #82	; 0x52
 8008346:	5299      	strh	r1, [r3, r2]
}
 8008348:	46c0      	nop			; (mov r8, r8)
 800834a:	46bd      	mov	sp, r7
 800834c:	b00a      	add	sp, #40	; 0x28
 800834e:	bd80      	pop	{r7, pc}

08008350 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08c      	sub	sp, #48	; 0x30
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800835c:	2b21      	cmp	r3, #33	; 0x21
 800835e:	d151      	bne.n	8008404 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2252      	movs	r2, #82	; 0x52
 8008364:	5a9b      	ldrh	r3, [r3, r2]
 8008366:	b29b      	uxth	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d132      	bne.n	80083d2 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800836c:	f3ef 8310 	mrs	r3, PRIMASK
 8008370:	60fb      	str	r3, [r7, #12]
  return(result);
 8008372:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008374:	62bb      	str	r3, [r7, #40]	; 0x28
 8008376:	2301      	movs	r3, #1
 8008378:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	f383 8810 	msr	PRIMASK, r3
}
 8008380:	46c0      	nop			; (mov r8, r8)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2180      	movs	r1, #128	; 0x80
 800838e:	438a      	bics	r2, r1
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f383 8810 	msr	PRIMASK, r3
}
 800839c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800839e:	f3ef 8310 	mrs	r3, PRIMASK
 80083a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80083a4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083a6:	627b      	str	r3, [r7, #36]	; 0x24
 80083a8:	2301      	movs	r3, #1
 80083aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	f383 8810 	msr	PRIMASK, r3
}
 80083b2:	46c0      	nop			; (mov r8, r8)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2140      	movs	r1, #64	; 0x40
 80083c0:	430a      	orrs	r2, r1
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	f383 8810 	msr	PRIMASK, r3
}
 80083ce:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80083d0:	e018      	b.n	8008404 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80083d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	001a      	movs	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	05d2      	lsls	r2, r2, #23
 80083e4:	0dd2      	lsrs	r2, r2, #23
 80083e6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ec:	1c9a      	adds	r2, r3, #2
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2252      	movs	r2, #82	; 0x52
 80083f6:	5a9b      	ldrh	r3, [r3, r2]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	3b01      	subs	r3, #1
 80083fc:	b299      	uxth	r1, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2252      	movs	r2, #82	; 0x52
 8008402:	5299      	strh	r1, [r3, r2]
}
 8008404:	46c0      	nop			; (mov r8, r8)
 8008406:	46bd      	mov	sp, r7
 8008408:	b00c      	add	sp, #48	; 0x30
 800840a:	bd80      	pop	{r7, pc}

0800840c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008414:	f3ef 8310 	mrs	r3, PRIMASK
 8008418:	60bb      	str	r3, [r7, #8]
  return(result);
 800841a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	2301      	movs	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f383 8810 	msr	PRIMASK, r3
}
 8008428:	46c0      	nop			; (mov r8, r8)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2140      	movs	r1, #64	; 0x40
 8008436:	438a      	bics	r2, r1
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f383 8810 	msr	PRIMASK, r3
}
 8008444:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2220      	movs	r2, #32
 800844a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	0018      	movs	r0, r3
 8008456:	f7ff f977 	bl	8007748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800845a:	46c0      	nop			; (mov r8, r8)
 800845c:	46bd      	mov	sp, r7
 800845e:	b006      	add	sp, #24
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b094      	sub	sp, #80	; 0x50
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800846c:	204e      	movs	r0, #78	; 0x4e
 800846e:	183b      	adds	r3, r7, r0
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	215c      	movs	r1, #92	; 0x5c
 8008474:	5a52      	ldrh	r2, [r2, r1]
 8008476:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2280      	movs	r2, #128	; 0x80
 800847c:	589b      	ldr	r3, [r3, r2]
 800847e:	2b22      	cmp	r3, #34	; 0x22
 8008480:	d000      	beq.n	8008484 <UART_RxISR_8BIT+0x20>
 8008482:	e0bf      	b.n	8008604 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800848a:	214c      	movs	r1, #76	; 0x4c
 800848c:	187b      	adds	r3, r7, r1
 800848e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008490:	187b      	adds	r3, r7, r1
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	b2da      	uxtb	r2, r3
 8008496:	183b      	adds	r3, r7, r0
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b2d9      	uxtb	r1, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a0:	400a      	ands	r2, r1
 80084a2:	b2d2      	uxtb	r2, r2
 80084a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	225a      	movs	r2, #90	; 0x5a
 80084b4:	5a9b      	ldrh	r3, [r3, r2]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	3b01      	subs	r3, #1
 80084ba:	b299      	uxth	r1, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	225a      	movs	r2, #90	; 0x5a
 80084c0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	225a      	movs	r2, #90	; 0x5a
 80084c6:	5a9b      	ldrh	r3, [r3, r2]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d000      	beq.n	80084d0 <UART_RxISR_8BIT+0x6c>
 80084ce:	e0a1      	b.n	8008614 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084d0:	f3ef 8310 	mrs	r3, PRIMASK
 80084d4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80084da:	2301      	movs	r3, #1
 80084dc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e0:	f383 8810 	msr	PRIMASK, r3
}
 80084e4:	46c0      	nop			; (mov r8, r8)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	494a      	ldr	r1, [pc, #296]	; (800861c <UART_RxISR_8BIT+0x1b8>)
 80084f2:	400a      	ands	r2, r1
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	f383 8810 	msr	PRIMASK, r3
}
 8008500:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008502:	f3ef 8310 	mrs	r3, PRIMASK
 8008506:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850a:	647b      	str	r3, [r7, #68]	; 0x44
 800850c:	2301      	movs	r3, #1
 800850e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	f383 8810 	msr	PRIMASK, r3
}
 8008516:	46c0      	nop			; (mov r8, r8)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	689a      	ldr	r2, [r3, #8]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2101      	movs	r1, #1
 8008524:	438a      	bics	r2, r1
 8008526:	609a      	str	r2, [r3, #8]
 8008528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800852a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	f383 8810 	msr	PRIMASK, r3
}
 8008532:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2280      	movs	r2, #128	; 0x80
 8008538:	2120      	movs	r1, #32
 800853a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a34      	ldr	r2, [pc, #208]	; (8008620 <UART_RxISR_8BIT+0x1bc>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d01f      	beq.n	8008592 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	2380      	movs	r3, #128	; 0x80
 800855a:	041b      	lsls	r3, r3, #16
 800855c:	4013      	ands	r3, r2
 800855e:	d018      	beq.n	8008592 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008560:	f3ef 8310 	mrs	r3, PRIMASK
 8008564:	61bb      	str	r3, [r7, #24]
  return(result);
 8008566:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008568:	643b      	str	r3, [r7, #64]	; 0x40
 800856a:	2301      	movs	r3, #1
 800856c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	f383 8810 	msr	PRIMASK, r3
}
 8008574:	46c0      	nop			; (mov r8, r8)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4928      	ldr	r1, [pc, #160]	; (8008624 <UART_RxISR_8BIT+0x1c0>)
 8008582:	400a      	ands	r2, r1
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008588:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	f383 8810 	msr	PRIMASK, r3
}
 8008590:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008596:	2b01      	cmp	r3, #1
 8008598:	d12f      	bne.n	80085fa <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085a0:	f3ef 8310 	mrs	r3, PRIMASK
 80085a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80085a6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085aa:	2301      	movs	r3, #1
 80085ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f383 8810 	msr	PRIMASK, r3
}
 80085b4:	46c0      	nop			; (mov r8, r8)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2110      	movs	r1, #16
 80085c2:	438a      	bics	r2, r1
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f383 8810 	msr	PRIMASK, r3
}
 80085d0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	2210      	movs	r2, #16
 80085da:	4013      	ands	r3, r2
 80085dc:	2b10      	cmp	r3, #16
 80085de:	d103      	bne.n	80085e8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2210      	movs	r2, #16
 80085e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2258      	movs	r2, #88	; 0x58
 80085ec:	5a9a      	ldrh	r2, [r3, r2]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	0011      	movs	r1, r2
 80085f2:	0018      	movs	r0, r3
 80085f4:	f7ff f8b8 	bl	8007768 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085f8:	e00c      	b.n	8008614 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	0018      	movs	r0, r3
 80085fe:	f7fa f9e5 	bl	80029cc <HAL_UART_RxCpltCallback>
}
 8008602:	e007      	b.n	8008614 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	699a      	ldr	r2, [r3, #24]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2108      	movs	r1, #8
 8008610:	430a      	orrs	r2, r1
 8008612:	619a      	str	r2, [r3, #24]
}
 8008614:	46c0      	nop			; (mov r8, r8)
 8008616:	46bd      	mov	sp, r7
 8008618:	b014      	add	sp, #80	; 0x50
 800861a:	bd80      	pop	{r7, pc}
 800861c:	fffffedf 	.word	0xfffffedf
 8008620:	40004800 	.word	0x40004800
 8008624:	fbffffff 	.word	0xfbffffff

08008628 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b094      	sub	sp, #80	; 0x50
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008630:	204e      	movs	r0, #78	; 0x4e
 8008632:	183b      	adds	r3, r7, r0
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	215c      	movs	r1, #92	; 0x5c
 8008638:	5a52      	ldrh	r2, [r2, r1]
 800863a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2280      	movs	r2, #128	; 0x80
 8008640:	589b      	ldr	r3, [r3, r2]
 8008642:	2b22      	cmp	r3, #34	; 0x22
 8008644:	d000      	beq.n	8008648 <UART_RxISR_16BIT+0x20>
 8008646:	e0bf      	b.n	80087c8 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800864e:	214c      	movs	r1, #76	; 0x4c
 8008650:	187b      	adds	r3, r7, r1
 8008652:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008658:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800865a:	187b      	adds	r3, r7, r1
 800865c:	183a      	adds	r2, r7, r0
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	8812      	ldrh	r2, [r2, #0]
 8008662:	4013      	ands	r3, r2
 8008664:	b29a      	uxth	r2, r3
 8008666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008668:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866e:	1c9a      	adds	r2, r3, #2
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	225a      	movs	r2, #90	; 0x5a
 8008678:	5a9b      	ldrh	r3, [r3, r2]
 800867a:	b29b      	uxth	r3, r3
 800867c:	3b01      	subs	r3, #1
 800867e:	b299      	uxth	r1, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	225a      	movs	r2, #90	; 0x5a
 8008684:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	225a      	movs	r2, #90	; 0x5a
 800868a:	5a9b      	ldrh	r3, [r3, r2]
 800868c:	b29b      	uxth	r3, r3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d000      	beq.n	8008694 <UART_RxISR_16BIT+0x6c>
 8008692:	e0a1      	b.n	80087d8 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008694:	f3ef 8310 	mrs	r3, PRIMASK
 8008698:	623b      	str	r3, [r7, #32]
  return(result);
 800869a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800869c:	647b      	str	r3, [r7, #68]	; 0x44
 800869e:	2301      	movs	r3, #1
 80086a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	f383 8810 	msr	PRIMASK, r3
}
 80086a8:	46c0      	nop			; (mov r8, r8)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	494a      	ldr	r1, [pc, #296]	; (80087e0 <UART_RxISR_16BIT+0x1b8>)
 80086b6:	400a      	ands	r2, r1
 80086b8:	601a      	str	r2, [r3, #0]
 80086ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c0:	f383 8810 	msr	PRIMASK, r3
}
 80086c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086c6:	f3ef 8310 	mrs	r3, PRIMASK
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80086cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ce:	643b      	str	r3, [r7, #64]	; 0x40
 80086d0:	2301      	movs	r3, #1
 80086d2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	f383 8810 	msr	PRIMASK, r3
}
 80086da:	46c0      	nop			; (mov r8, r8)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	689a      	ldr	r2, [r3, #8]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2101      	movs	r1, #1
 80086e8:	438a      	bics	r2, r1
 80086ea:	609a      	str	r2, [r3, #8]
 80086ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f2:	f383 8810 	msr	PRIMASK, r3
}
 80086f6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2280      	movs	r2, #128	; 0x80
 80086fc:	2120      	movs	r1, #32
 80086fe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a34      	ldr	r2, [pc, #208]	; (80087e4 <UART_RxISR_16BIT+0x1bc>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d01f      	beq.n	8008756 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	2380      	movs	r3, #128	; 0x80
 800871e:	041b      	lsls	r3, r3, #16
 8008720:	4013      	ands	r3, r2
 8008722:	d018      	beq.n	8008756 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008724:	f3ef 8310 	mrs	r3, PRIMASK
 8008728:	617b      	str	r3, [r7, #20]
  return(result);
 800872a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800872c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800872e:	2301      	movs	r3, #1
 8008730:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	f383 8810 	msr	PRIMASK, r3
}
 8008738:	46c0      	nop			; (mov r8, r8)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4928      	ldr	r1, [pc, #160]	; (80087e8 <UART_RxISR_16BIT+0x1c0>)
 8008746:	400a      	ands	r2, r1
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	f383 8810 	msr	PRIMASK, r3
}
 8008754:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800875a:	2b01      	cmp	r3, #1
 800875c:	d12f      	bne.n	80087be <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008764:	f3ef 8310 	mrs	r3, PRIMASK
 8008768:	60bb      	str	r3, [r7, #8]
  return(result);
 800876a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800876c:	63bb      	str	r3, [r7, #56]	; 0x38
 800876e:	2301      	movs	r3, #1
 8008770:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f383 8810 	msr	PRIMASK, r3
}
 8008778:	46c0      	nop			; (mov r8, r8)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2110      	movs	r1, #16
 8008786:	438a      	bics	r2, r1
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f383 8810 	msr	PRIMASK, r3
}
 8008794:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	2210      	movs	r2, #16
 800879e:	4013      	ands	r3, r2
 80087a0:	2b10      	cmp	r3, #16
 80087a2:	d103      	bne.n	80087ac <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2210      	movs	r2, #16
 80087aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2258      	movs	r2, #88	; 0x58
 80087b0:	5a9a      	ldrh	r2, [r3, r2]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	0011      	movs	r1, r2
 80087b6:	0018      	movs	r0, r3
 80087b8:	f7fe ffd6 	bl	8007768 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087bc:	e00c      	b.n	80087d8 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	0018      	movs	r0, r3
 80087c2:	f7fa f903 	bl	80029cc <HAL_UART_RxCpltCallback>
}
 80087c6:	e007      	b.n	80087d8 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2108      	movs	r1, #8
 80087d4:	430a      	orrs	r2, r1
 80087d6:	619a      	str	r2, [r3, #24]
}
 80087d8:	46c0      	nop			; (mov r8, r8)
 80087da:	46bd      	mov	sp, r7
 80087dc:	b014      	add	sp, #80	; 0x50
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	fffffedf 	.word	0xfffffedf
 80087e4:	40004800 	.word	0x40004800
 80087e8:	fbffffff 	.word	0xfbffffff

080087ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087f4:	46c0      	nop			; (mov r8, r8)
 80087f6:	46bd      	mov	sp, r7
 80087f8:	b002      	add	sp, #8
 80087fa:	bd80      	pop	{r7, pc}

080087fc <__cvt>:
 80087fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fe:	001e      	movs	r6, r3
 8008800:	2300      	movs	r3, #0
 8008802:	0014      	movs	r4, r2
 8008804:	b08b      	sub	sp, #44	; 0x2c
 8008806:	429e      	cmp	r6, r3
 8008808:	da04      	bge.n	8008814 <__cvt+0x18>
 800880a:	2180      	movs	r1, #128	; 0x80
 800880c:	0609      	lsls	r1, r1, #24
 800880e:	1873      	adds	r3, r6, r1
 8008810:	001e      	movs	r6, r3
 8008812:	232d      	movs	r3, #45	; 0x2d
 8008814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008816:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008818:	7013      	strb	r3, [r2, #0]
 800881a:	2320      	movs	r3, #32
 800881c:	2203      	movs	r2, #3
 800881e:	439f      	bics	r7, r3
 8008820:	2f46      	cmp	r7, #70	; 0x46
 8008822:	d007      	beq.n	8008834 <__cvt+0x38>
 8008824:	003b      	movs	r3, r7
 8008826:	3b45      	subs	r3, #69	; 0x45
 8008828:	4259      	negs	r1, r3
 800882a:	414b      	adcs	r3, r1
 800882c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800882e:	3a01      	subs	r2, #1
 8008830:	18cb      	adds	r3, r1, r3
 8008832:	9310      	str	r3, [sp, #64]	; 0x40
 8008834:	ab09      	add	r3, sp, #36	; 0x24
 8008836:	9304      	str	r3, [sp, #16]
 8008838:	ab08      	add	r3, sp, #32
 800883a:	9303      	str	r3, [sp, #12]
 800883c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800883e:	9200      	str	r2, [sp, #0]
 8008840:	9302      	str	r3, [sp, #8]
 8008842:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008844:	0022      	movs	r2, r4
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	0033      	movs	r3, r6
 800884a:	f001 f8b3 	bl	80099b4 <_dtoa_r>
 800884e:	0005      	movs	r5, r0
 8008850:	2f47      	cmp	r7, #71	; 0x47
 8008852:	d102      	bne.n	800885a <__cvt+0x5e>
 8008854:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008856:	07db      	lsls	r3, r3, #31
 8008858:	d528      	bpl.n	80088ac <__cvt+0xb0>
 800885a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800885c:	18eb      	adds	r3, r5, r3
 800885e:	9307      	str	r3, [sp, #28]
 8008860:	2f46      	cmp	r7, #70	; 0x46
 8008862:	d114      	bne.n	800888e <__cvt+0x92>
 8008864:	782b      	ldrb	r3, [r5, #0]
 8008866:	2b30      	cmp	r3, #48	; 0x30
 8008868:	d10c      	bne.n	8008884 <__cvt+0x88>
 800886a:	2200      	movs	r2, #0
 800886c:	2300      	movs	r3, #0
 800886e:	0020      	movs	r0, r4
 8008870:	0031      	movs	r1, r6
 8008872:	f7f7 fdeb 	bl	800044c <__aeabi_dcmpeq>
 8008876:	2800      	cmp	r0, #0
 8008878:	d104      	bne.n	8008884 <__cvt+0x88>
 800887a:	2301      	movs	r3, #1
 800887c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800887e:	1a9b      	subs	r3, r3, r2
 8008880:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008886:	9a07      	ldr	r2, [sp, #28]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	18d3      	adds	r3, r2, r3
 800888c:	9307      	str	r3, [sp, #28]
 800888e:	2200      	movs	r2, #0
 8008890:	2300      	movs	r3, #0
 8008892:	0020      	movs	r0, r4
 8008894:	0031      	movs	r1, r6
 8008896:	f7f7 fdd9 	bl	800044c <__aeabi_dcmpeq>
 800889a:	2800      	cmp	r0, #0
 800889c:	d001      	beq.n	80088a2 <__cvt+0xa6>
 800889e:	9b07      	ldr	r3, [sp, #28]
 80088a0:	9309      	str	r3, [sp, #36]	; 0x24
 80088a2:	2230      	movs	r2, #48	; 0x30
 80088a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a6:	9907      	ldr	r1, [sp, #28]
 80088a8:	428b      	cmp	r3, r1
 80088aa:	d306      	bcc.n	80088ba <__cvt+0xbe>
 80088ac:	0028      	movs	r0, r5
 80088ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088b2:	1b5b      	subs	r3, r3, r5
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	b00b      	add	sp, #44	; 0x2c
 80088b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ba:	1c59      	adds	r1, r3, #1
 80088bc:	9109      	str	r1, [sp, #36]	; 0x24
 80088be:	701a      	strb	r2, [r3, #0]
 80088c0:	e7f0      	b.n	80088a4 <__cvt+0xa8>

080088c2 <__exponent>:
 80088c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088c4:	1c83      	adds	r3, r0, #2
 80088c6:	b087      	sub	sp, #28
 80088c8:	9303      	str	r3, [sp, #12]
 80088ca:	0005      	movs	r5, r0
 80088cc:	000c      	movs	r4, r1
 80088ce:	232b      	movs	r3, #43	; 0x2b
 80088d0:	7002      	strb	r2, [r0, #0]
 80088d2:	2900      	cmp	r1, #0
 80088d4:	da01      	bge.n	80088da <__exponent+0x18>
 80088d6:	424c      	negs	r4, r1
 80088d8:	3302      	adds	r3, #2
 80088da:	706b      	strb	r3, [r5, #1]
 80088dc:	2c09      	cmp	r4, #9
 80088de:	dd2f      	ble.n	8008940 <__exponent+0x7e>
 80088e0:	270a      	movs	r7, #10
 80088e2:	ab04      	add	r3, sp, #16
 80088e4:	1dde      	adds	r6, r3, #7
 80088e6:	0020      	movs	r0, r4
 80088e8:	0039      	movs	r1, r7
 80088ea:	9601      	str	r6, [sp, #4]
 80088ec:	f7f7 fd98 	bl	8000420 <__aeabi_idivmod>
 80088f0:	3e01      	subs	r6, #1
 80088f2:	3130      	adds	r1, #48	; 0x30
 80088f4:	0020      	movs	r0, r4
 80088f6:	7031      	strb	r1, [r6, #0]
 80088f8:	0039      	movs	r1, r7
 80088fa:	9402      	str	r4, [sp, #8]
 80088fc:	f7f7 fcaa 	bl	8000254 <__divsi3>
 8008900:	9b02      	ldr	r3, [sp, #8]
 8008902:	0004      	movs	r4, r0
 8008904:	2b63      	cmp	r3, #99	; 0x63
 8008906:	dcee      	bgt.n	80088e6 <__exponent+0x24>
 8008908:	9b01      	ldr	r3, [sp, #4]
 800890a:	3430      	adds	r4, #48	; 0x30
 800890c:	1e9a      	subs	r2, r3, #2
 800890e:	0013      	movs	r3, r2
 8008910:	9903      	ldr	r1, [sp, #12]
 8008912:	7014      	strb	r4, [r2, #0]
 8008914:	a804      	add	r0, sp, #16
 8008916:	3007      	adds	r0, #7
 8008918:	4298      	cmp	r0, r3
 800891a:	d80c      	bhi.n	8008936 <__exponent+0x74>
 800891c:	2300      	movs	r3, #0
 800891e:	4282      	cmp	r2, r0
 8008920:	d804      	bhi.n	800892c <__exponent+0x6a>
 8008922:	aa04      	add	r2, sp, #16
 8008924:	3309      	adds	r3, #9
 8008926:	189b      	adds	r3, r3, r2
 8008928:	9a01      	ldr	r2, [sp, #4]
 800892a:	1a9b      	subs	r3, r3, r2
 800892c:	9a03      	ldr	r2, [sp, #12]
 800892e:	18d3      	adds	r3, r2, r3
 8008930:	1b58      	subs	r0, r3, r5
 8008932:	b007      	add	sp, #28
 8008934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008936:	7818      	ldrb	r0, [r3, #0]
 8008938:	3301      	adds	r3, #1
 800893a:	7008      	strb	r0, [r1, #0]
 800893c:	3101      	adds	r1, #1
 800893e:	e7e9      	b.n	8008914 <__exponent+0x52>
 8008940:	2330      	movs	r3, #48	; 0x30
 8008942:	3430      	adds	r4, #48	; 0x30
 8008944:	70ab      	strb	r3, [r5, #2]
 8008946:	70ec      	strb	r4, [r5, #3]
 8008948:	1d2b      	adds	r3, r5, #4
 800894a:	e7f1      	b.n	8008930 <__exponent+0x6e>

0800894c <_printf_float>:
 800894c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800894e:	b095      	sub	sp, #84	; 0x54
 8008950:	000c      	movs	r4, r1
 8008952:	9208      	str	r2, [sp, #32]
 8008954:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008956:	9309      	str	r3, [sp, #36]	; 0x24
 8008958:	0007      	movs	r7, r0
 800895a:	f000 ff0d 	bl	8009778 <_localeconv_r>
 800895e:	6803      	ldr	r3, [r0, #0]
 8008960:	0018      	movs	r0, r3
 8008962:	930c      	str	r3, [sp, #48]	; 0x30
 8008964:	f7f7 fbd0 	bl	8000108 <strlen>
 8008968:	2300      	movs	r3, #0
 800896a:	9312      	str	r3, [sp, #72]	; 0x48
 800896c:	7e23      	ldrb	r3, [r4, #24]
 800896e:	2207      	movs	r2, #7
 8008970:	930a      	str	r3, [sp, #40]	; 0x28
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	900d      	str	r0, [sp, #52]	; 0x34
 8008976:	930b      	str	r3, [sp, #44]	; 0x2c
 8008978:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800897a:	682b      	ldr	r3, [r5, #0]
 800897c:	05c9      	lsls	r1, r1, #23
 800897e:	d547      	bpl.n	8008a10 <_printf_float+0xc4>
 8008980:	189b      	adds	r3, r3, r2
 8008982:	4393      	bics	r3, r2
 8008984:	001a      	movs	r2, r3
 8008986:	3208      	adds	r2, #8
 8008988:	602a      	str	r2, [r5, #0]
 800898a:	681e      	ldr	r6, [r3, #0]
 800898c:	685d      	ldr	r5, [r3, #4]
 800898e:	0032      	movs	r2, r6
 8008990:	002b      	movs	r3, r5
 8008992:	64a2      	str	r2, [r4, #72]	; 0x48
 8008994:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008996:	2201      	movs	r2, #1
 8008998:	006b      	lsls	r3, r5, #1
 800899a:	085b      	lsrs	r3, r3, #1
 800899c:	930e      	str	r3, [sp, #56]	; 0x38
 800899e:	0030      	movs	r0, r6
 80089a0:	4bab      	ldr	r3, [pc, #684]	; (8008c50 <_printf_float+0x304>)
 80089a2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80089a4:	4252      	negs	r2, r2
 80089a6:	f7f9 fca7 	bl	80022f8 <__aeabi_dcmpun>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d132      	bne.n	8008a14 <_printf_float+0xc8>
 80089ae:	2201      	movs	r2, #1
 80089b0:	0030      	movs	r0, r6
 80089b2:	4ba7      	ldr	r3, [pc, #668]	; (8008c50 <_printf_float+0x304>)
 80089b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80089b6:	4252      	negs	r2, r2
 80089b8:	f7f7 fd58 	bl	800046c <__aeabi_dcmple>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d129      	bne.n	8008a14 <_printf_float+0xc8>
 80089c0:	2200      	movs	r2, #0
 80089c2:	2300      	movs	r3, #0
 80089c4:	0030      	movs	r0, r6
 80089c6:	0029      	movs	r1, r5
 80089c8:	f7f7 fd46 	bl	8000458 <__aeabi_dcmplt>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d003      	beq.n	80089d8 <_printf_float+0x8c>
 80089d0:	0023      	movs	r3, r4
 80089d2:	222d      	movs	r2, #45	; 0x2d
 80089d4:	3343      	adds	r3, #67	; 0x43
 80089d6:	701a      	strb	r2, [r3, #0]
 80089d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089da:	4d9e      	ldr	r5, [pc, #632]	; (8008c54 <_printf_float+0x308>)
 80089dc:	2b47      	cmp	r3, #71	; 0x47
 80089de:	d900      	bls.n	80089e2 <_printf_float+0x96>
 80089e0:	4d9d      	ldr	r5, [pc, #628]	; (8008c58 <_printf_float+0x30c>)
 80089e2:	2303      	movs	r3, #3
 80089e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089e6:	6123      	str	r3, [r4, #16]
 80089e8:	3301      	adds	r3, #1
 80089ea:	439a      	bics	r2, r3
 80089ec:	2300      	movs	r3, #0
 80089ee:	6022      	str	r2, [r4, #0]
 80089f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80089f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f4:	0021      	movs	r1, r4
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	0038      	movs	r0, r7
 80089fa:	9b08      	ldr	r3, [sp, #32]
 80089fc:	aa13      	add	r2, sp, #76	; 0x4c
 80089fe:	f000 f9fb 	bl	8008df8 <_printf_common>
 8008a02:	3001      	adds	r0, #1
 8008a04:	d000      	beq.n	8008a08 <_printf_float+0xbc>
 8008a06:	e0a3      	b.n	8008b50 <_printf_float+0x204>
 8008a08:	2001      	movs	r0, #1
 8008a0a:	4240      	negs	r0, r0
 8008a0c:	b015      	add	sp, #84	; 0x54
 8008a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a10:	3307      	adds	r3, #7
 8008a12:	e7b6      	b.n	8008982 <_printf_float+0x36>
 8008a14:	0032      	movs	r2, r6
 8008a16:	002b      	movs	r3, r5
 8008a18:	0030      	movs	r0, r6
 8008a1a:	0029      	movs	r1, r5
 8008a1c:	f7f9 fc6c 	bl	80022f8 <__aeabi_dcmpun>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d00b      	beq.n	8008a3c <_printf_float+0xf0>
 8008a24:	2d00      	cmp	r5, #0
 8008a26:	da03      	bge.n	8008a30 <_printf_float+0xe4>
 8008a28:	0023      	movs	r3, r4
 8008a2a:	222d      	movs	r2, #45	; 0x2d
 8008a2c:	3343      	adds	r3, #67	; 0x43
 8008a2e:	701a      	strb	r2, [r3, #0]
 8008a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a32:	4d8a      	ldr	r5, [pc, #552]	; (8008c5c <_printf_float+0x310>)
 8008a34:	2b47      	cmp	r3, #71	; 0x47
 8008a36:	d9d4      	bls.n	80089e2 <_printf_float+0x96>
 8008a38:	4d89      	ldr	r5, [pc, #548]	; (8008c60 <_printf_float+0x314>)
 8008a3a:	e7d2      	b.n	80089e2 <_printf_float+0x96>
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a40:	6863      	ldr	r3, [r4, #4]
 8008a42:	4391      	bics	r1, r2
 8008a44:	910e      	str	r1, [sp, #56]	; 0x38
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	d14a      	bne.n	8008ae0 <_printf_float+0x194>
 8008a4a:	3307      	adds	r3, #7
 8008a4c:	6063      	str	r3, [r4, #4]
 8008a4e:	2380      	movs	r3, #128	; 0x80
 8008a50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	4313      	orrs	r3, r2
 8008a56:	2200      	movs	r2, #0
 8008a58:	9206      	str	r2, [sp, #24]
 8008a5a:	aa12      	add	r2, sp, #72	; 0x48
 8008a5c:	9205      	str	r2, [sp, #20]
 8008a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	9204      	str	r2, [sp, #16]
 8008a64:	aa11      	add	r2, sp, #68	; 0x44
 8008a66:	9203      	str	r2, [sp, #12]
 8008a68:	2223      	movs	r2, #35	; 0x23
 8008a6a:	a908      	add	r1, sp, #32
 8008a6c:	9301      	str	r3, [sp, #4]
 8008a6e:	6863      	ldr	r3, [r4, #4]
 8008a70:	1852      	adds	r2, r2, r1
 8008a72:	9202      	str	r2, [sp, #8]
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	0032      	movs	r2, r6
 8008a78:	002b      	movs	r3, r5
 8008a7a:	0038      	movs	r0, r7
 8008a7c:	f7ff febe 	bl	80087fc <__cvt>
 8008a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a82:	0005      	movs	r5, r0
 8008a84:	2b47      	cmp	r3, #71	; 0x47
 8008a86:	d109      	bne.n	8008a9c <_printf_float+0x150>
 8008a88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a8a:	1cda      	adds	r2, r3, #3
 8008a8c:	db02      	blt.n	8008a94 <_printf_float+0x148>
 8008a8e:	6862      	ldr	r2, [r4, #4]
 8008a90:	4293      	cmp	r3, r2
 8008a92:	dd49      	ble.n	8008b28 <_printf_float+0x1dc>
 8008a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a96:	3b02      	subs	r3, #2
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a9e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008aa0:	2b65      	cmp	r3, #101	; 0x65
 8008aa2:	d824      	bhi.n	8008aee <_printf_float+0x1a2>
 8008aa4:	0020      	movs	r0, r4
 8008aa6:	001a      	movs	r2, r3
 8008aa8:	3901      	subs	r1, #1
 8008aaa:	3050      	adds	r0, #80	; 0x50
 8008aac:	9111      	str	r1, [sp, #68]	; 0x44
 8008aae:	f7ff ff08 	bl	80088c2 <__exponent>
 8008ab2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ab4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ab6:	1813      	adds	r3, r2, r0
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	2a01      	cmp	r2, #1
 8008abc:	dc02      	bgt.n	8008ac4 <_printf_float+0x178>
 8008abe:	6822      	ldr	r2, [r4, #0]
 8008ac0:	07d2      	lsls	r2, r2, #31
 8008ac2:	d501      	bpl.n	8008ac8 <_printf_float+0x17c>
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	6123      	str	r3, [r4, #16]
 8008ac8:	2323      	movs	r3, #35	; 0x23
 8008aca:	aa08      	add	r2, sp, #32
 8008acc:	189b      	adds	r3, r3, r2
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d100      	bne.n	8008ad6 <_printf_float+0x18a>
 8008ad4:	e78d      	b.n	80089f2 <_printf_float+0xa6>
 8008ad6:	0023      	movs	r3, r4
 8008ad8:	222d      	movs	r2, #45	; 0x2d
 8008ada:	3343      	adds	r3, #67	; 0x43
 8008adc:	701a      	strb	r2, [r3, #0]
 8008ade:	e788      	b.n	80089f2 <_printf_float+0xa6>
 8008ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ae2:	2a47      	cmp	r2, #71	; 0x47
 8008ae4:	d1b3      	bne.n	8008a4e <_printf_float+0x102>
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1b1      	bne.n	8008a4e <_printf_float+0x102>
 8008aea:	3301      	adds	r3, #1
 8008aec:	e7ae      	b.n	8008a4c <_printf_float+0x100>
 8008aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af0:	2b66      	cmp	r3, #102	; 0x66
 8008af2:	d11b      	bne.n	8008b2c <_printf_float+0x1e0>
 8008af4:	6863      	ldr	r3, [r4, #4]
 8008af6:	2900      	cmp	r1, #0
 8008af8:	dd09      	ble.n	8008b0e <_printf_float+0x1c2>
 8008afa:	6121      	str	r1, [r4, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d102      	bne.n	8008b06 <_printf_float+0x1ba>
 8008b00:	6822      	ldr	r2, [r4, #0]
 8008b02:	07d2      	lsls	r2, r2, #31
 8008b04:	d50b      	bpl.n	8008b1e <_printf_float+0x1d2>
 8008b06:	3301      	adds	r3, #1
 8008b08:	185b      	adds	r3, r3, r1
 8008b0a:	6123      	str	r3, [r4, #16]
 8008b0c:	e007      	b.n	8008b1e <_printf_float+0x1d2>
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d103      	bne.n	8008b1a <_printf_float+0x1ce>
 8008b12:	2201      	movs	r2, #1
 8008b14:	6821      	ldr	r1, [r4, #0]
 8008b16:	4211      	tst	r1, r2
 8008b18:	d000      	beq.n	8008b1c <_printf_float+0x1d0>
 8008b1a:	1c9a      	adds	r2, r3, #2
 8008b1c:	6122      	str	r2, [r4, #16]
 8008b1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b20:	65a3      	str	r3, [r4, #88]	; 0x58
 8008b22:	2300      	movs	r3, #0
 8008b24:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b26:	e7cf      	b.n	8008ac8 <_printf_float+0x17c>
 8008b28:	2367      	movs	r3, #103	; 0x67
 8008b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008b2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b30:	4299      	cmp	r1, r3
 8008b32:	db06      	blt.n	8008b42 <_printf_float+0x1f6>
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	6121      	str	r1, [r4, #16]
 8008b38:	07db      	lsls	r3, r3, #31
 8008b3a:	d5f0      	bpl.n	8008b1e <_printf_float+0x1d2>
 8008b3c:	3101      	adds	r1, #1
 8008b3e:	6121      	str	r1, [r4, #16]
 8008b40:	e7ed      	b.n	8008b1e <_printf_float+0x1d2>
 8008b42:	2201      	movs	r2, #1
 8008b44:	2900      	cmp	r1, #0
 8008b46:	dc01      	bgt.n	8008b4c <_printf_float+0x200>
 8008b48:	1892      	adds	r2, r2, r2
 8008b4a:	1a52      	subs	r2, r2, r1
 8008b4c:	189b      	adds	r3, r3, r2
 8008b4e:	e7dc      	b.n	8008b0a <_printf_float+0x1be>
 8008b50:	6822      	ldr	r2, [r4, #0]
 8008b52:	0553      	lsls	r3, r2, #21
 8008b54:	d408      	bmi.n	8008b68 <_printf_float+0x21c>
 8008b56:	6923      	ldr	r3, [r4, #16]
 8008b58:	002a      	movs	r2, r5
 8008b5a:	0038      	movs	r0, r7
 8008b5c:	9908      	ldr	r1, [sp, #32]
 8008b5e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b60:	47a8      	blx	r5
 8008b62:	3001      	adds	r0, #1
 8008b64:	d12a      	bne.n	8008bbc <_printf_float+0x270>
 8008b66:	e74f      	b.n	8008a08 <_printf_float+0xbc>
 8008b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6a:	2b65      	cmp	r3, #101	; 0x65
 8008b6c:	d800      	bhi.n	8008b70 <_printf_float+0x224>
 8008b6e:	e0ec      	b.n	8008d4a <_printf_float+0x3fe>
 8008b70:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008b72:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008b74:	2200      	movs	r2, #0
 8008b76:	2300      	movs	r3, #0
 8008b78:	f7f7 fc68 	bl	800044c <__aeabi_dcmpeq>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d034      	beq.n	8008bea <_printf_float+0x29e>
 8008b80:	2301      	movs	r3, #1
 8008b82:	0038      	movs	r0, r7
 8008b84:	4a37      	ldr	r2, [pc, #220]	; (8008c64 <_printf_float+0x318>)
 8008b86:	9908      	ldr	r1, [sp, #32]
 8008b88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b8a:	47a8      	blx	r5
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d100      	bne.n	8008b92 <_printf_float+0x246>
 8008b90:	e73a      	b.n	8008a08 <_printf_float+0xbc>
 8008b92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b96:	429a      	cmp	r2, r3
 8008b98:	db02      	blt.n	8008ba0 <_printf_float+0x254>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	07db      	lsls	r3, r3, #31
 8008b9e:	d50d      	bpl.n	8008bbc <_printf_float+0x270>
 8008ba0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ba2:	0038      	movs	r0, r7
 8008ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ba8:	9908      	ldr	r1, [sp, #32]
 8008baa:	47a8      	blx	r5
 8008bac:	2500      	movs	r5, #0
 8008bae:	3001      	adds	r0, #1
 8008bb0:	d100      	bne.n	8008bb4 <_printf_float+0x268>
 8008bb2:	e729      	b.n	8008a08 <_printf_float+0xbc>
 8008bb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	42ab      	cmp	r3, r5
 8008bba:	dc0a      	bgt.n	8008bd2 <_printf_float+0x286>
 8008bbc:	6823      	ldr	r3, [r4, #0]
 8008bbe:	079b      	lsls	r3, r3, #30
 8008bc0:	d500      	bpl.n	8008bc4 <_printf_float+0x278>
 8008bc2:	e116      	b.n	8008df2 <_printf_float+0x4a6>
 8008bc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bc6:	68e0      	ldr	r0, [r4, #12]
 8008bc8:	4298      	cmp	r0, r3
 8008bca:	db00      	blt.n	8008bce <_printf_float+0x282>
 8008bcc:	e71e      	b.n	8008a0c <_printf_float+0xc0>
 8008bce:	0018      	movs	r0, r3
 8008bd0:	e71c      	b.n	8008a0c <_printf_float+0xc0>
 8008bd2:	0022      	movs	r2, r4
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	0038      	movs	r0, r7
 8008bd8:	9908      	ldr	r1, [sp, #32]
 8008bda:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008bdc:	321a      	adds	r2, #26
 8008bde:	47b0      	blx	r6
 8008be0:	3001      	adds	r0, #1
 8008be2:	d100      	bne.n	8008be6 <_printf_float+0x29a>
 8008be4:	e710      	b.n	8008a08 <_printf_float+0xbc>
 8008be6:	3501      	adds	r5, #1
 8008be8:	e7e4      	b.n	8008bb4 <_printf_float+0x268>
 8008bea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	dc3b      	bgt.n	8008c68 <_printf_float+0x31c>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	0038      	movs	r0, r7
 8008bf4:	4a1b      	ldr	r2, [pc, #108]	; (8008c64 <_printf_float+0x318>)
 8008bf6:	9908      	ldr	r1, [sp, #32]
 8008bf8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008bfa:	47b0      	blx	r6
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d100      	bne.n	8008c02 <_printf_float+0x2b6>
 8008c00:	e702      	b.n	8008a08 <_printf_float+0xbc>
 8008c02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c06:	4313      	orrs	r3, r2
 8008c08:	d102      	bne.n	8008c10 <_printf_float+0x2c4>
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	07db      	lsls	r3, r3, #31
 8008c0e:	d5d5      	bpl.n	8008bbc <_printf_float+0x270>
 8008c10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c12:	0038      	movs	r0, r7
 8008c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c16:	9908      	ldr	r1, [sp, #32]
 8008c18:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c1a:	47b0      	blx	r6
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	3001      	adds	r0, #1
 8008c20:	d100      	bne.n	8008c24 <_printf_float+0x2d8>
 8008c22:	e6f1      	b.n	8008a08 <_printf_float+0xbc>
 8008c24:	930a      	str	r3, [sp, #40]	; 0x28
 8008c26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c2a:	425b      	negs	r3, r3
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	dc01      	bgt.n	8008c34 <_printf_float+0x2e8>
 8008c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c32:	e791      	b.n	8008b58 <_printf_float+0x20c>
 8008c34:	0022      	movs	r2, r4
 8008c36:	2301      	movs	r3, #1
 8008c38:	0038      	movs	r0, r7
 8008c3a:	9908      	ldr	r1, [sp, #32]
 8008c3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c3e:	321a      	adds	r2, #26
 8008c40:	47b0      	blx	r6
 8008c42:	3001      	adds	r0, #1
 8008c44:	d100      	bne.n	8008c48 <_printf_float+0x2fc>
 8008c46:	e6df      	b.n	8008a08 <_printf_float+0xbc>
 8008c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	e7ea      	b.n	8008c24 <_printf_float+0x2d8>
 8008c4e:	46c0      	nop			; (mov r8, r8)
 8008c50:	7fefffff 	.word	0x7fefffff
 8008c54:	0800d1f4 	.word	0x0800d1f4
 8008c58:	0800d1f8 	.word	0x0800d1f8
 8008c5c:	0800d1fc 	.word	0x0800d1fc
 8008c60:	0800d200 	.word	0x0800d200
 8008c64:	0800d204 	.word	0x0800d204
 8008c68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c6c:	920a      	str	r2, [sp, #40]	; 0x28
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	dd00      	ble.n	8008c74 <_printf_float+0x328>
 8008c72:	930a      	str	r3, [sp, #40]	; 0x28
 8008c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dc3d      	bgt.n	8008cf6 <_printf_float+0x3aa>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	930e      	str	r3, [sp, #56]	; 0x38
 8008c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c80:	43db      	mvns	r3, r3
 8008c82:	17db      	asrs	r3, r3, #31
 8008c84:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c8e:	4013      	ands	r3, r2
 8008c90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c96:	4293      	cmp	r3, r2
 8008c98:	dc36      	bgt.n	8008d08 <_printf_float+0x3bc>
 8008c9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	db40      	blt.n	8008d24 <_printf_float+0x3d8>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	07db      	lsls	r3, r3, #31
 8008ca6:	d43d      	bmi.n	8008d24 <_printf_float+0x3d8>
 8008ca8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008caa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cae:	1af3      	subs	r3, r6, r3
 8008cb0:	1ab6      	subs	r6, r6, r2
 8008cb2:	429e      	cmp	r6, r3
 8008cb4:	dd00      	ble.n	8008cb8 <_printf_float+0x36c>
 8008cb6:	001e      	movs	r6, r3
 8008cb8:	2e00      	cmp	r6, #0
 8008cba:	dc3c      	bgt.n	8008d36 <_printf_float+0x3ea>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8008cc0:	43f3      	mvns	r3, r6
 8008cc2:	17db      	asrs	r3, r3, #31
 8008cc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cca:	1a9b      	subs	r3, r3, r2
 8008ccc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cce:	4032      	ands	r2, r6
 8008cd0:	1a9b      	subs	r3, r3, r2
 8008cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	dc00      	bgt.n	8008cda <_printf_float+0x38e>
 8008cd8:	e770      	b.n	8008bbc <_printf_float+0x270>
 8008cda:	0022      	movs	r2, r4
 8008cdc:	2301      	movs	r3, #1
 8008cde:	0038      	movs	r0, r7
 8008ce0:	9908      	ldr	r1, [sp, #32]
 8008ce2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ce4:	321a      	adds	r2, #26
 8008ce6:	47a8      	blx	r5
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d100      	bne.n	8008cee <_printf_float+0x3a2>
 8008cec:	e68c      	b.n	8008a08 <_printf_float+0xbc>
 8008cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8008cf4:	e7e7      	b.n	8008cc6 <_printf_float+0x37a>
 8008cf6:	002a      	movs	r2, r5
 8008cf8:	0038      	movs	r0, r7
 8008cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cfc:	9908      	ldr	r1, [sp, #32]
 8008cfe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d00:	47b0      	blx	r6
 8008d02:	3001      	adds	r0, #1
 8008d04:	d1b9      	bne.n	8008c7a <_printf_float+0x32e>
 8008d06:	e67f      	b.n	8008a08 <_printf_float+0xbc>
 8008d08:	0022      	movs	r2, r4
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	0038      	movs	r0, r7
 8008d0e:	9908      	ldr	r1, [sp, #32]
 8008d10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d12:	321a      	adds	r2, #26
 8008d14:	47b0      	blx	r6
 8008d16:	3001      	adds	r0, #1
 8008d18:	d100      	bne.n	8008d1c <_printf_float+0x3d0>
 8008d1a:	e675      	b.n	8008a08 <_printf_float+0xbc>
 8008d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d1e:	3301      	adds	r3, #1
 8008d20:	930e      	str	r3, [sp, #56]	; 0x38
 8008d22:	e7b0      	b.n	8008c86 <_printf_float+0x33a>
 8008d24:	0038      	movs	r0, r7
 8008d26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d2a:	9908      	ldr	r1, [sp, #32]
 8008d2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d2e:	47b0      	blx	r6
 8008d30:	3001      	adds	r0, #1
 8008d32:	d1b9      	bne.n	8008ca8 <_printf_float+0x35c>
 8008d34:	e668      	b.n	8008a08 <_printf_float+0xbc>
 8008d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d38:	0038      	movs	r0, r7
 8008d3a:	18ea      	adds	r2, r5, r3
 8008d3c:	9908      	ldr	r1, [sp, #32]
 8008d3e:	0033      	movs	r3, r6
 8008d40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d42:	47a8      	blx	r5
 8008d44:	3001      	adds	r0, #1
 8008d46:	d1b9      	bne.n	8008cbc <_printf_float+0x370>
 8008d48:	e65e      	b.n	8008a08 <_printf_float+0xbc>
 8008d4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	dc02      	bgt.n	8008d56 <_printf_float+0x40a>
 8008d50:	2301      	movs	r3, #1
 8008d52:	421a      	tst	r2, r3
 8008d54:	d03a      	beq.n	8008dcc <_printf_float+0x480>
 8008d56:	2301      	movs	r3, #1
 8008d58:	002a      	movs	r2, r5
 8008d5a:	0038      	movs	r0, r7
 8008d5c:	9908      	ldr	r1, [sp, #32]
 8008d5e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d60:	47b0      	blx	r6
 8008d62:	3001      	adds	r0, #1
 8008d64:	d100      	bne.n	8008d68 <_printf_float+0x41c>
 8008d66:	e64f      	b.n	8008a08 <_printf_float+0xbc>
 8008d68:	0038      	movs	r0, r7
 8008d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d6e:	9908      	ldr	r1, [sp, #32]
 8008d70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d72:	47b0      	blx	r6
 8008d74:	3001      	adds	r0, #1
 8008d76:	d100      	bne.n	8008d7a <_printf_float+0x42e>
 8008d78:	e646      	b.n	8008a08 <_printf_float+0xbc>
 8008d7a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008d7c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008d7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d80:	2200      	movs	r2, #0
 8008d82:	001e      	movs	r6, r3
 8008d84:	2300      	movs	r3, #0
 8008d86:	f7f7 fb61 	bl	800044c <__aeabi_dcmpeq>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d11c      	bne.n	8008dc8 <_printf_float+0x47c>
 8008d8e:	0033      	movs	r3, r6
 8008d90:	1c6a      	adds	r2, r5, #1
 8008d92:	3b01      	subs	r3, #1
 8008d94:	0038      	movs	r0, r7
 8008d96:	9908      	ldr	r1, [sp, #32]
 8008d98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d9a:	47a8      	blx	r5
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	d10f      	bne.n	8008dc0 <_printf_float+0x474>
 8008da0:	e632      	b.n	8008a08 <_printf_float+0xbc>
 8008da2:	0022      	movs	r2, r4
 8008da4:	2301      	movs	r3, #1
 8008da6:	0038      	movs	r0, r7
 8008da8:	9908      	ldr	r1, [sp, #32]
 8008daa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008dac:	321a      	adds	r2, #26
 8008dae:	47b0      	blx	r6
 8008db0:	3001      	adds	r0, #1
 8008db2:	d100      	bne.n	8008db6 <_printf_float+0x46a>
 8008db4:	e628      	b.n	8008a08 <_printf_float+0xbc>
 8008db6:	3501      	adds	r5, #1
 8008db8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	42ab      	cmp	r3, r5
 8008dbe:	dcf0      	bgt.n	8008da2 <_printf_float+0x456>
 8008dc0:	0022      	movs	r2, r4
 8008dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dc4:	3250      	adds	r2, #80	; 0x50
 8008dc6:	e6c8      	b.n	8008b5a <_printf_float+0x20e>
 8008dc8:	2500      	movs	r5, #0
 8008dca:	e7f5      	b.n	8008db8 <_printf_float+0x46c>
 8008dcc:	002a      	movs	r2, r5
 8008dce:	e7e1      	b.n	8008d94 <_printf_float+0x448>
 8008dd0:	0022      	movs	r2, r4
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	0038      	movs	r0, r7
 8008dd6:	9908      	ldr	r1, [sp, #32]
 8008dd8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008dda:	3219      	adds	r2, #25
 8008ddc:	47b0      	blx	r6
 8008dde:	3001      	adds	r0, #1
 8008de0:	d100      	bne.n	8008de4 <_printf_float+0x498>
 8008de2:	e611      	b.n	8008a08 <_printf_float+0xbc>
 8008de4:	3501      	adds	r5, #1
 8008de6:	68e3      	ldr	r3, [r4, #12]
 8008de8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	42ab      	cmp	r3, r5
 8008dee:	dcef      	bgt.n	8008dd0 <_printf_float+0x484>
 8008df0:	e6e8      	b.n	8008bc4 <_printf_float+0x278>
 8008df2:	2500      	movs	r5, #0
 8008df4:	e7f7      	b.n	8008de6 <_printf_float+0x49a>
 8008df6:	46c0      	nop			; (mov r8, r8)

08008df8 <_printf_common>:
 8008df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dfa:	0016      	movs	r6, r2
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	688a      	ldr	r2, [r1, #8]
 8008e00:	690b      	ldr	r3, [r1, #16]
 8008e02:	000c      	movs	r4, r1
 8008e04:	9000      	str	r0, [sp, #0]
 8008e06:	4293      	cmp	r3, r2
 8008e08:	da00      	bge.n	8008e0c <_printf_common+0x14>
 8008e0a:	0013      	movs	r3, r2
 8008e0c:	0022      	movs	r2, r4
 8008e0e:	6033      	str	r3, [r6, #0]
 8008e10:	3243      	adds	r2, #67	; 0x43
 8008e12:	7812      	ldrb	r2, [r2, #0]
 8008e14:	2a00      	cmp	r2, #0
 8008e16:	d001      	beq.n	8008e1c <_printf_common+0x24>
 8008e18:	3301      	adds	r3, #1
 8008e1a:	6033      	str	r3, [r6, #0]
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	069b      	lsls	r3, r3, #26
 8008e20:	d502      	bpl.n	8008e28 <_printf_common+0x30>
 8008e22:	6833      	ldr	r3, [r6, #0]
 8008e24:	3302      	adds	r3, #2
 8008e26:	6033      	str	r3, [r6, #0]
 8008e28:	6822      	ldr	r2, [r4, #0]
 8008e2a:	2306      	movs	r3, #6
 8008e2c:	0015      	movs	r5, r2
 8008e2e:	401d      	ands	r5, r3
 8008e30:	421a      	tst	r2, r3
 8008e32:	d027      	beq.n	8008e84 <_printf_common+0x8c>
 8008e34:	0023      	movs	r3, r4
 8008e36:	3343      	adds	r3, #67	; 0x43
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	1e5a      	subs	r2, r3, #1
 8008e3c:	4193      	sbcs	r3, r2
 8008e3e:	6822      	ldr	r2, [r4, #0]
 8008e40:	0692      	lsls	r2, r2, #26
 8008e42:	d430      	bmi.n	8008ea6 <_printf_common+0xae>
 8008e44:	0022      	movs	r2, r4
 8008e46:	9901      	ldr	r1, [sp, #4]
 8008e48:	9800      	ldr	r0, [sp, #0]
 8008e4a:	9d08      	ldr	r5, [sp, #32]
 8008e4c:	3243      	adds	r2, #67	; 0x43
 8008e4e:	47a8      	blx	r5
 8008e50:	3001      	adds	r0, #1
 8008e52:	d025      	beq.n	8008ea0 <_printf_common+0xa8>
 8008e54:	2206      	movs	r2, #6
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	2500      	movs	r5, #0
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d105      	bne.n	8008e6c <_printf_common+0x74>
 8008e60:	6833      	ldr	r3, [r6, #0]
 8008e62:	68e5      	ldr	r5, [r4, #12]
 8008e64:	1aed      	subs	r5, r5, r3
 8008e66:	43eb      	mvns	r3, r5
 8008e68:	17db      	asrs	r3, r3, #31
 8008e6a:	401d      	ands	r5, r3
 8008e6c:	68a3      	ldr	r3, [r4, #8]
 8008e6e:	6922      	ldr	r2, [r4, #16]
 8008e70:	4293      	cmp	r3, r2
 8008e72:	dd01      	ble.n	8008e78 <_printf_common+0x80>
 8008e74:	1a9b      	subs	r3, r3, r2
 8008e76:	18ed      	adds	r5, r5, r3
 8008e78:	2600      	movs	r6, #0
 8008e7a:	42b5      	cmp	r5, r6
 8008e7c:	d120      	bne.n	8008ec0 <_printf_common+0xc8>
 8008e7e:	2000      	movs	r0, #0
 8008e80:	e010      	b.n	8008ea4 <_printf_common+0xac>
 8008e82:	3501      	adds	r5, #1
 8008e84:	68e3      	ldr	r3, [r4, #12]
 8008e86:	6832      	ldr	r2, [r6, #0]
 8008e88:	1a9b      	subs	r3, r3, r2
 8008e8a:	42ab      	cmp	r3, r5
 8008e8c:	ddd2      	ble.n	8008e34 <_printf_common+0x3c>
 8008e8e:	0022      	movs	r2, r4
 8008e90:	2301      	movs	r3, #1
 8008e92:	9901      	ldr	r1, [sp, #4]
 8008e94:	9800      	ldr	r0, [sp, #0]
 8008e96:	9f08      	ldr	r7, [sp, #32]
 8008e98:	3219      	adds	r2, #25
 8008e9a:	47b8      	blx	r7
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d1f0      	bne.n	8008e82 <_printf_common+0x8a>
 8008ea0:	2001      	movs	r0, #1
 8008ea2:	4240      	negs	r0, r0
 8008ea4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ea6:	2030      	movs	r0, #48	; 0x30
 8008ea8:	18e1      	adds	r1, r4, r3
 8008eaa:	3143      	adds	r1, #67	; 0x43
 8008eac:	7008      	strb	r0, [r1, #0]
 8008eae:	0021      	movs	r1, r4
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	3145      	adds	r1, #69	; 0x45
 8008eb4:	7809      	ldrb	r1, [r1, #0]
 8008eb6:	18a2      	adds	r2, r4, r2
 8008eb8:	3243      	adds	r2, #67	; 0x43
 8008eba:	3302      	adds	r3, #2
 8008ebc:	7011      	strb	r1, [r2, #0]
 8008ebe:	e7c1      	b.n	8008e44 <_printf_common+0x4c>
 8008ec0:	0022      	movs	r2, r4
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	9901      	ldr	r1, [sp, #4]
 8008ec6:	9800      	ldr	r0, [sp, #0]
 8008ec8:	9f08      	ldr	r7, [sp, #32]
 8008eca:	321a      	adds	r2, #26
 8008ecc:	47b8      	blx	r7
 8008ece:	3001      	adds	r0, #1
 8008ed0:	d0e6      	beq.n	8008ea0 <_printf_common+0xa8>
 8008ed2:	3601      	adds	r6, #1
 8008ed4:	e7d1      	b.n	8008e7a <_printf_common+0x82>
	...

08008ed8 <_printf_i>:
 8008ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eda:	b08b      	sub	sp, #44	; 0x2c
 8008edc:	9206      	str	r2, [sp, #24]
 8008ede:	000a      	movs	r2, r1
 8008ee0:	3243      	adds	r2, #67	; 0x43
 8008ee2:	9307      	str	r3, [sp, #28]
 8008ee4:	9005      	str	r0, [sp, #20]
 8008ee6:	9204      	str	r2, [sp, #16]
 8008ee8:	7e0a      	ldrb	r2, [r1, #24]
 8008eea:	000c      	movs	r4, r1
 8008eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008eee:	2a78      	cmp	r2, #120	; 0x78
 8008ef0:	d809      	bhi.n	8008f06 <_printf_i+0x2e>
 8008ef2:	2a62      	cmp	r2, #98	; 0x62
 8008ef4:	d80b      	bhi.n	8008f0e <_printf_i+0x36>
 8008ef6:	2a00      	cmp	r2, #0
 8008ef8:	d100      	bne.n	8008efc <_printf_i+0x24>
 8008efa:	e0be      	b.n	800907a <_printf_i+0x1a2>
 8008efc:	497c      	ldr	r1, [pc, #496]	; (80090f0 <_printf_i+0x218>)
 8008efe:	9103      	str	r1, [sp, #12]
 8008f00:	2a58      	cmp	r2, #88	; 0x58
 8008f02:	d100      	bne.n	8008f06 <_printf_i+0x2e>
 8008f04:	e093      	b.n	800902e <_printf_i+0x156>
 8008f06:	0026      	movs	r6, r4
 8008f08:	3642      	adds	r6, #66	; 0x42
 8008f0a:	7032      	strb	r2, [r6, #0]
 8008f0c:	e022      	b.n	8008f54 <_printf_i+0x7c>
 8008f0e:	0010      	movs	r0, r2
 8008f10:	3863      	subs	r0, #99	; 0x63
 8008f12:	2815      	cmp	r0, #21
 8008f14:	d8f7      	bhi.n	8008f06 <_printf_i+0x2e>
 8008f16:	f7f7 f909 	bl	800012c <__gnu_thumb1_case_shi>
 8008f1a:	0016      	.short	0x0016
 8008f1c:	fff6001f 	.word	0xfff6001f
 8008f20:	fff6fff6 	.word	0xfff6fff6
 8008f24:	001ffff6 	.word	0x001ffff6
 8008f28:	fff6fff6 	.word	0xfff6fff6
 8008f2c:	fff6fff6 	.word	0xfff6fff6
 8008f30:	003600a3 	.word	0x003600a3
 8008f34:	fff60083 	.word	0xfff60083
 8008f38:	00b4fff6 	.word	0x00b4fff6
 8008f3c:	0036fff6 	.word	0x0036fff6
 8008f40:	fff6fff6 	.word	0xfff6fff6
 8008f44:	0087      	.short	0x0087
 8008f46:	0026      	movs	r6, r4
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	3642      	adds	r6, #66	; 0x42
 8008f4c:	1d11      	adds	r1, r2, #4
 8008f4e:	6019      	str	r1, [r3, #0]
 8008f50:	6813      	ldr	r3, [r2, #0]
 8008f52:	7033      	strb	r3, [r6, #0]
 8008f54:	2301      	movs	r3, #1
 8008f56:	e0a2      	b.n	800909e <_printf_i+0x1c6>
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	6809      	ldr	r1, [r1, #0]
 8008f5c:	1d02      	adds	r2, r0, #4
 8008f5e:	060d      	lsls	r5, r1, #24
 8008f60:	d50b      	bpl.n	8008f7a <_printf_i+0xa2>
 8008f62:	6805      	ldr	r5, [r0, #0]
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	2d00      	cmp	r5, #0
 8008f68:	da03      	bge.n	8008f72 <_printf_i+0x9a>
 8008f6a:	232d      	movs	r3, #45	; 0x2d
 8008f6c:	9a04      	ldr	r2, [sp, #16]
 8008f6e:	426d      	negs	r5, r5
 8008f70:	7013      	strb	r3, [r2, #0]
 8008f72:	4b5f      	ldr	r3, [pc, #380]	; (80090f0 <_printf_i+0x218>)
 8008f74:	270a      	movs	r7, #10
 8008f76:	9303      	str	r3, [sp, #12]
 8008f78:	e01b      	b.n	8008fb2 <_printf_i+0xda>
 8008f7a:	6805      	ldr	r5, [r0, #0]
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	0649      	lsls	r1, r1, #25
 8008f80:	d5f1      	bpl.n	8008f66 <_printf_i+0x8e>
 8008f82:	b22d      	sxth	r5, r5
 8008f84:	e7ef      	b.n	8008f66 <_printf_i+0x8e>
 8008f86:	680d      	ldr	r5, [r1, #0]
 8008f88:	6819      	ldr	r1, [r3, #0]
 8008f8a:	1d08      	adds	r0, r1, #4
 8008f8c:	6018      	str	r0, [r3, #0]
 8008f8e:	062e      	lsls	r6, r5, #24
 8008f90:	d501      	bpl.n	8008f96 <_printf_i+0xbe>
 8008f92:	680d      	ldr	r5, [r1, #0]
 8008f94:	e003      	b.n	8008f9e <_printf_i+0xc6>
 8008f96:	066d      	lsls	r5, r5, #25
 8008f98:	d5fb      	bpl.n	8008f92 <_printf_i+0xba>
 8008f9a:	680d      	ldr	r5, [r1, #0]
 8008f9c:	b2ad      	uxth	r5, r5
 8008f9e:	4b54      	ldr	r3, [pc, #336]	; (80090f0 <_printf_i+0x218>)
 8008fa0:	2708      	movs	r7, #8
 8008fa2:	9303      	str	r3, [sp, #12]
 8008fa4:	2a6f      	cmp	r2, #111	; 0x6f
 8008fa6:	d000      	beq.n	8008faa <_printf_i+0xd2>
 8008fa8:	3702      	adds	r7, #2
 8008faa:	0023      	movs	r3, r4
 8008fac:	2200      	movs	r2, #0
 8008fae:	3343      	adds	r3, #67	; 0x43
 8008fb0:	701a      	strb	r2, [r3, #0]
 8008fb2:	6863      	ldr	r3, [r4, #4]
 8008fb4:	60a3      	str	r3, [r4, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	db03      	blt.n	8008fc2 <_printf_i+0xea>
 8008fba:	2104      	movs	r1, #4
 8008fbc:	6822      	ldr	r2, [r4, #0]
 8008fbe:	438a      	bics	r2, r1
 8008fc0:	6022      	str	r2, [r4, #0]
 8008fc2:	2d00      	cmp	r5, #0
 8008fc4:	d102      	bne.n	8008fcc <_printf_i+0xf4>
 8008fc6:	9e04      	ldr	r6, [sp, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00c      	beq.n	8008fe6 <_printf_i+0x10e>
 8008fcc:	9e04      	ldr	r6, [sp, #16]
 8008fce:	0028      	movs	r0, r5
 8008fd0:	0039      	movs	r1, r7
 8008fd2:	f7f7 f93b 	bl	800024c <__aeabi_uidivmod>
 8008fd6:	9b03      	ldr	r3, [sp, #12]
 8008fd8:	3e01      	subs	r6, #1
 8008fda:	5c5b      	ldrb	r3, [r3, r1]
 8008fdc:	7033      	strb	r3, [r6, #0]
 8008fde:	002b      	movs	r3, r5
 8008fe0:	0005      	movs	r5, r0
 8008fe2:	429f      	cmp	r7, r3
 8008fe4:	d9f3      	bls.n	8008fce <_printf_i+0xf6>
 8008fe6:	2f08      	cmp	r7, #8
 8008fe8:	d109      	bne.n	8008ffe <_printf_i+0x126>
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	07db      	lsls	r3, r3, #31
 8008fee:	d506      	bpl.n	8008ffe <_printf_i+0x126>
 8008ff0:	6862      	ldr	r2, [r4, #4]
 8008ff2:	6923      	ldr	r3, [r4, #16]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	dc02      	bgt.n	8008ffe <_printf_i+0x126>
 8008ff8:	2330      	movs	r3, #48	; 0x30
 8008ffa:	3e01      	subs	r6, #1
 8008ffc:	7033      	strb	r3, [r6, #0]
 8008ffe:	9b04      	ldr	r3, [sp, #16]
 8009000:	1b9b      	subs	r3, r3, r6
 8009002:	6123      	str	r3, [r4, #16]
 8009004:	9b07      	ldr	r3, [sp, #28]
 8009006:	0021      	movs	r1, r4
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	9805      	ldr	r0, [sp, #20]
 800900c:	9b06      	ldr	r3, [sp, #24]
 800900e:	aa09      	add	r2, sp, #36	; 0x24
 8009010:	f7ff fef2 	bl	8008df8 <_printf_common>
 8009014:	3001      	adds	r0, #1
 8009016:	d147      	bne.n	80090a8 <_printf_i+0x1d0>
 8009018:	2001      	movs	r0, #1
 800901a:	4240      	negs	r0, r0
 800901c:	b00b      	add	sp, #44	; 0x2c
 800901e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009020:	2220      	movs	r2, #32
 8009022:	6809      	ldr	r1, [r1, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	6022      	str	r2, [r4, #0]
 8009028:	2278      	movs	r2, #120	; 0x78
 800902a:	4932      	ldr	r1, [pc, #200]	; (80090f4 <_printf_i+0x21c>)
 800902c:	9103      	str	r1, [sp, #12]
 800902e:	0021      	movs	r1, r4
 8009030:	3145      	adds	r1, #69	; 0x45
 8009032:	700a      	strb	r2, [r1, #0]
 8009034:	6819      	ldr	r1, [r3, #0]
 8009036:	6822      	ldr	r2, [r4, #0]
 8009038:	c920      	ldmia	r1!, {r5}
 800903a:	0610      	lsls	r0, r2, #24
 800903c:	d402      	bmi.n	8009044 <_printf_i+0x16c>
 800903e:	0650      	lsls	r0, r2, #25
 8009040:	d500      	bpl.n	8009044 <_printf_i+0x16c>
 8009042:	b2ad      	uxth	r5, r5
 8009044:	6019      	str	r1, [r3, #0]
 8009046:	07d3      	lsls	r3, r2, #31
 8009048:	d502      	bpl.n	8009050 <_printf_i+0x178>
 800904a:	2320      	movs	r3, #32
 800904c:	4313      	orrs	r3, r2
 800904e:	6023      	str	r3, [r4, #0]
 8009050:	2710      	movs	r7, #16
 8009052:	2d00      	cmp	r5, #0
 8009054:	d1a9      	bne.n	8008faa <_printf_i+0xd2>
 8009056:	2220      	movs	r2, #32
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	4393      	bics	r3, r2
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	e7a4      	b.n	8008faa <_printf_i+0xd2>
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	680d      	ldr	r5, [r1, #0]
 8009064:	1d10      	adds	r0, r2, #4
 8009066:	6949      	ldr	r1, [r1, #20]
 8009068:	6018      	str	r0, [r3, #0]
 800906a:	6813      	ldr	r3, [r2, #0]
 800906c:	062e      	lsls	r6, r5, #24
 800906e:	d501      	bpl.n	8009074 <_printf_i+0x19c>
 8009070:	6019      	str	r1, [r3, #0]
 8009072:	e002      	b.n	800907a <_printf_i+0x1a2>
 8009074:	066d      	lsls	r5, r5, #25
 8009076:	d5fb      	bpl.n	8009070 <_printf_i+0x198>
 8009078:	8019      	strh	r1, [r3, #0]
 800907a:	2300      	movs	r3, #0
 800907c:	9e04      	ldr	r6, [sp, #16]
 800907e:	6123      	str	r3, [r4, #16]
 8009080:	e7c0      	b.n	8009004 <_printf_i+0x12c>
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	1d11      	adds	r1, r2, #4
 8009086:	6019      	str	r1, [r3, #0]
 8009088:	6816      	ldr	r6, [r2, #0]
 800908a:	2100      	movs	r1, #0
 800908c:	0030      	movs	r0, r6
 800908e:	6862      	ldr	r2, [r4, #4]
 8009090:	f000 fbf1 	bl	8009876 <memchr>
 8009094:	2800      	cmp	r0, #0
 8009096:	d001      	beq.n	800909c <_printf_i+0x1c4>
 8009098:	1b80      	subs	r0, r0, r6
 800909a:	6060      	str	r0, [r4, #4]
 800909c:	6863      	ldr	r3, [r4, #4]
 800909e:	6123      	str	r3, [r4, #16]
 80090a0:	2300      	movs	r3, #0
 80090a2:	9a04      	ldr	r2, [sp, #16]
 80090a4:	7013      	strb	r3, [r2, #0]
 80090a6:	e7ad      	b.n	8009004 <_printf_i+0x12c>
 80090a8:	0032      	movs	r2, r6
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	9906      	ldr	r1, [sp, #24]
 80090ae:	9805      	ldr	r0, [sp, #20]
 80090b0:	9d07      	ldr	r5, [sp, #28]
 80090b2:	47a8      	blx	r5
 80090b4:	3001      	adds	r0, #1
 80090b6:	d0af      	beq.n	8009018 <_printf_i+0x140>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	079b      	lsls	r3, r3, #30
 80090bc:	d415      	bmi.n	80090ea <_printf_i+0x212>
 80090be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c0:	68e0      	ldr	r0, [r4, #12]
 80090c2:	4298      	cmp	r0, r3
 80090c4:	daaa      	bge.n	800901c <_printf_i+0x144>
 80090c6:	0018      	movs	r0, r3
 80090c8:	e7a8      	b.n	800901c <_printf_i+0x144>
 80090ca:	0022      	movs	r2, r4
 80090cc:	2301      	movs	r3, #1
 80090ce:	9906      	ldr	r1, [sp, #24]
 80090d0:	9805      	ldr	r0, [sp, #20]
 80090d2:	9e07      	ldr	r6, [sp, #28]
 80090d4:	3219      	adds	r2, #25
 80090d6:	47b0      	blx	r6
 80090d8:	3001      	adds	r0, #1
 80090da:	d09d      	beq.n	8009018 <_printf_i+0x140>
 80090dc:	3501      	adds	r5, #1
 80090de:	68e3      	ldr	r3, [r4, #12]
 80090e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090e2:	1a9b      	subs	r3, r3, r2
 80090e4:	42ab      	cmp	r3, r5
 80090e6:	dcf0      	bgt.n	80090ca <_printf_i+0x1f2>
 80090e8:	e7e9      	b.n	80090be <_printf_i+0x1e6>
 80090ea:	2500      	movs	r5, #0
 80090ec:	e7f7      	b.n	80090de <_printf_i+0x206>
 80090ee:	46c0      	nop			; (mov r8, r8)
 80090f0:	0800d206 	.word	0x0800d206
 80090f4:	0800d217 	.word	0x0800d217

080090f8 <_scanf_float>:
 80090f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090fa:	b08b      	sub	sp, #44	; 0x2c
 80090fc:	0016      	movs	r6, r2
 80090fe:	9002      	str	r0, [sp, #8]
 8009100:	22ae      	movs	r2, #174	; 0xae
 8009102:	2000      	movs	r0, #0
 8009104:	9307      	str	r3, [sp, #28]
 8009106:	688b      	ldr	r3, [r1, #8]
 8009108:	000f      	movs	r7, r1
 800910a:	1e59      	subs	r1, r3, #1
 800910c:	0052      	lsls	r2, r2, #1
 800910e:	9006      	str	r0, [sp, #24]
 8009110:	4291      	cmp	r1, r2
 8009112:	d905      	bls.n	8009120 <_scanf_float+0x28>
 8009114:	3b5e      	subs	r3, #94	; 0x5e
 8009116:	3bff      	subs	r3, #255	; 0xff
 8009118:	9306      	str	r3, [sp, #24]
 800911a:	235e      	movs	r3, #94	; 0x5e
 800911c:	33ff      	adds	r3, #255	; 0xff
 800911e:	60bb      	str	r3, [r7, #8]
 8009120:	23f0      	movs	r3, #240	; 0xf0
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	00db      	lsls	r3, r3, #3
 8009126:	4313      	orrs	r3, r2
 8009128:	603b      	str	r3, [r7, #0]
 800912a:	003b      	movs	r3, r7
 800912c:	2400      	movs	r4, #0
 800912e:	331c      	adds	r3, #28
 8009130:	001d      	movs	r5, r3
 8009132:	9304      	str	r3, [sp, #16]
 8009134:	9403      	str	r4, [sp, #12]
 8009136:	9409      	str	r4, [sp, #36]	; 0x24
 8009138:	9408      	str	r4, [sp, #32]
 800913a:	9401      	str	r4, [sp, #4]
 800913c:	9405      	str	r4, [sp, #20]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	2a00      	cmp	r2, #0
 8009142:	d00a      	beq.n	800915a <_scanf_float+0x62>
 8009144:	6833      	ldr	r3, [r6, #0]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	2b4e      	cmp	r3, #78	; 0x4e
 800914a:	d844      	bhi.n	80091d6 <_scanf_float+0xde>
 800914c:	0018      	movs	r0, r3
 800914e:	2b40      	cmp	r3, #64	; 0x40
 8009150:	d82c      	bhi.n	80091ac <_scanf_float+0xb4>
 8009152:	382b      	subs	r0, #43	; 0x2b
 8009154:	b2c1      	uxtb	r1, r0
 8009156:	290e      	cmp	r1, #14
 8009158:	d92a      	bls.n	80091b0 <_scanf_float+0xb8>
 800915a:	9b01      	ldr	r3, [sp, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d003      	beq.n	8009168 <_scanf_float+0x70>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	4aa3      	ldr	r2, [pc, #652]	; (80093f0 <_scanf_float+0x2f8>)
 8009164:	4013      	ands	r3, r2
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	9b03      	ldr	r3, [sp, #12]
 800916a:	3b01      	subs	r3, #1
 800916c:	2b01      	cmp	r3, #1
 800916e:	d900      	bls.n	8009172 <_scanf_float+0x7a>
 8009170:	e0f9      	b.n	8009366 <_scanf_float+0x26e>
 8009172:	24be      	movs	r4, #190	; 0xbe
 8009174:	0064      	lsls	r4, r4, #1
 8009176:	9b04      	ldr	r3, [sp, #16]
 8009178:	429d      	cmp	r5, r3
 800917a:	d900      	bls.n	800917e <_scanf_float+0x86>
 800917c:	e0e9      	b.n	8009352 <_scanf_float+0x25a>
 800917e:	2301      	movs	r3, #1
 8009180:	9303      	str	r3, [sp, #12]
 8009182:	e183      	b.n	800948c <_scanf_float+0x394>
 8009184:	0018      	movs	r0, r3
 8009186:	3861      	subs	r0, #97	; 0x61
 8009188:	280d      	cmp	r0, #13
 800918a:	d8e6      	bhi.n	800915a <_scanf_float+0x62>
 800918c:	f7f6 ffce 	bl	800012c <__gnu_thumb1_case_shi>
 8009190:	ffe50083 	.word	0xffe50083
 8009194:	ffe5ffe5 	.word	0xffe5ffe5
 8009198:	00a200b6 	.word	0x00a200b6
 800919c:	ffe5ffe5 	.word	0xffe5ffe5
 80091a0:	ffe50089 	.word	0xffe50089
 80091a4:	ffe5ffe5 	.word	0xffe5ffe5
 80091a8:	0065ffe5 	.word	0x0065ffe5
 80091ac:	3841      	subs	r0, #65	; 0x41
 80091ae:	e7eb      	b.n	8009188 <_scanf_float+0x90>
 80091b0:	280e      	cmp	r0, #14
 80091b2:	d8d2      	bhi.n	800915a <_scanf_float+0x62>
 80091b4:	f7f6 ffba 	bl	800012c <__gnu_thumb1_case_shi>
 80091b8:	ffd1004b 	.word	0xffd1004b
 80091bc:	0098004b 	.word	0x0098004b
 80091c0:	0020ffd1 	.word	0x0020ffd1
 80091c4:	00400040 	.word	0x00400040
 80091c8:	00400040 	.word	0x00400040
 80091cc:	00400040 	.word	0x00400040
 80091d0:	00400040 	.word	0x00400040
 80091d4:	0040      	.short	0x0040
 80091d6:	2b6e      	cmp	r3, #110	; 0x6e
 80091d8:	d809      	bhi.n	80091ee <_scanf_float+0xf6>
 80091da:	2b60      	cmp	r3, #96	; 0x60
 80091dc:	d8d2      	bhi.n	8009184 <_scanf_float+0x8c>
 80091de:	2b54      	cmp	r3, #84	; 0x54
 80091e0:	d07d      	beq.n	80092de <_scanf_float+0x1e6>
 80091e2:	2b59      	cmp	r3, #89	; 0x59
 80091e4:	d1b9      	bne.n	800915a <_scanf_float+0x62>
 80091e6:	2c07      	cmp	r4, #7
 80091e8:	d1b7      	bne.n	800915a <_scanf_float+0x62>
 80091ea:	2408      	movs	r4, #8
 80091ec:	e02c      	b.n	8009248 <_scanf_float+0x150>
 80091ee:	2b74      	cmp	r3, #116	; 0x74
 80091f0:	d075      	beq.n	80092de <_scanf_float+0x1e6>
 80091f2:	2b79      	cmp	r3, #121	; 0x79
 80091f4:	d0f7      	beq.n	80091e6 <_scanf_float+0xee>
 80091f6:	e7b0      	b.n	800915a <_scanf_float+0x62>
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	05c8      	lsls	r0, r1, #23
 80091fc:	d51c      	bpl.n	8009238 <_scanf_float+0x140>
 80091fe:	2380      	movs	r3, #128	; 0x80
 8009200:	4399      	bics	r1, r3
 8009202:	9b01      	ldr	r3, [sp, #4]
 8009204:	6039      	str	r1, [r7, #0]
 8009206:	3301      	adds	r3, #1
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	9b06      	ldr	r3, [sp, #24]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <_scanf_float+0x120>
 8009210:	3b01      	subs	r3, #1
 8009212:	3201      	adds	r2, #1
 8009214:	9306      	str	r3, [sp, #24]
 8009216:	60ba      	str	r2, [r7, #8]
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	3b01      	subs	r3, #1
 800921c:	60bb      	str	r3, [r7, #8]
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	3301      	adds	r3, #1
 8009222:	613b      	str	r3, [r7, #16]
 8009224:	6873      	ldr	r3, [r6, #4]
 8009226:	3b01      	subs	r3, #1
 8009228:	6073      	str	r3, [r6, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	dc00      	bgt.n	8009230 <_scanf_float+0x138>
 800922e:	e086      	b.n	800933e <_scanf_float+0x246>
 8009230:	6833      	ldr	r3, [r6, #0]
 8009232:	3301      	adds	r3, #1
 8009234:	6033      	str	r3, [r6, #0]
 8009236:	e782      	b.n	800913e <_scanf_float+0x46>
 8009238:	9a03      	ldr	r2, [sp, #12]
 800923a:	1912      	adds	r2, r2, r4
 800923c:	2a00      	cmp	r2, #0
 800923e:	d18c      	bne.n	800915a <_scanf_float+0x62>
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	496c      	ldr	r1, [pc, #432]	; (80093f4 <_scanf_float+0x2fc>)
 8009244:	400a      	ands	r2, r1
 8009246:	603a      	str	r2, [r7, #0]
 8009248:	702b      	strb	r3, [r5, #0]
 800924a:	3501      	adds	r5, #1
 800924c:	e7e4      	b.n	8009218 <_scanf_float+0x120>
 800924e:	2180      	movs	r1, #128	; 0x80
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	420a      	tst	r2, r1
 8009254:	d081      	beq.n	800915a <_scanf_float+0x62>
 8009256:	438a      	bics	r2, r1
 8009258:	e7f5      	b.n	8009246 <_scanf_float+0x14e>
 800925a:	9a03      	ldr	r2, [sp, #12]
 800925c:	2a00      	cmp	r2, #0
 800925e:	d10f      	bne.n	8009280 <_scanf_float+0x188>
 8009260:	9a01      	ldr	r2, [sp, #4]
 8009262:	2a00      	cmp	r2, #0
 8009264:	d10f      	bne.n	8009286 <_scanf_float+0x18e>
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	21e0      	movs	r1, #224	; 0xe0
 800926a:	0010      	movs	r0, r2
 800926c:	00c9      	lsls	r1, r1, #3
 800926e:	4008      	ands	r0, r1
 8009270:	4288      	cmp	r0, r1
 8009272:	d108      	bne.n	8009286 <_scanf_float+0x18e>
 8009274:	4960      	ldr	r1, [pc, #384]	; (80093f8 <_scanf_float+0x300>)
 8009276:	400a      	ands	r2, r1
 8009278:	603a      	str	r2, [r7, #0]
 800927a:	2201      	movs	r2, #1
 800927c:	9203      	str	r2, [sp, #12]
 800927e:	e7e3      	b.n	8009248 <_scanf_float+0x150>
 8009280:	9a03      	ldr	r2, [sp, #12]
 8009282:	2a02      	cmp	r2, #2
 8009284:	d059      	beq.n	800933a <_scanf_float+0x242>
 8009286:	2c01      	cmp	r4, #1
 8009288:	d002      	beq.n	8009290 <_scanf_float+0x198>
 800928a:	2c04      	cmp	r4, #4
 800928c:	d000      	beq.n	8009290 <_scanf_float+0x198>
 800928e:	e764      	b.n	800915a <_scanf_float+0x62>
 8009290:	3401      	adds	r4, #1
 8009292:	b2e4      	uxtb	r4, r4
 8009294:	e7d8      	b.n	8009248 <_scanf_float+0x150>
 8009296:	9a03      	ldr	r2, [sp, #12]
 8009298:	2a01      	cmp	r2, #1
 800929a:	d000      	beq.n	800929e <_scanf_float+0x1a6>
 800929c:	e75d      	b.n	800915a <_scanf_float+0x62>
 800929e:	2202      	movs	r2, #2
 80092a0:	e7ec      	b.n	800927c <_scanf_float+0x184>
 80092a2:	2c00      	cmp	r4, #0
 80092a4:	d110      	bne.n	80092c8 <_scanf_float+0x1d0>
 80092a6:	9a01      	ldr	r2, [sp, #4]
 80092a8:	2a00      	cmp	r2, #0
 80092aa:	d000      	beq.n	80092ae <_scanf_float+0x1b6>
 80092ac:	e758      	b.n	8009160 <_scanf_float+0x68>
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	21e0      	movs	r1, #224	; 0xe0
 80092b2:	0010      	movs	r0, r2
 80092b4:	00c9      	lsls	r1, r1, #3
 80092b6:	4008      	ands	r0, r1
 80092b8:	4288      	cmp	r0, r1
 80092ba:	d000      	beq.n	80092be <_scanf_float+0x1c6>
 80092bc:	e754      	b.n	8009168 <_scanf_float+0x70>
 80092be:	494e      	ldr	r1, [pc, #312]	; (80093f8 <_scanf_float+0x300>)
 80092c0:	3401      	adds	r4, #1
 80092c2:	400a      	ands	r2, r1
 80092c4:	603a      	str	r2, [r7, #0]
 80092c6:	e7bf      	b.n	8009248 <_scanf_float+0x150>
 80092c8:	21fd      	movs	r1, #253	; 0xfd
 80092ca:	1ee2      	subs	r2, r4, #3
 80092cc:	420a      	tst	r2, r1
 80092ce:	d000      	beq.n	80092d2 <_scanf_float+0x1da>
 80092d0:	e743      	b.n	800915a <_scanf_float+0x62>
 80092d2:	e7dd      	b.n	8009290 <_scanf_float+0x198>
 80092d4:	2c02      	cmp	r4, #2
 80092d6:	d000      	beq.n	80092da <_scanf_float+0x1e2>
 80092d8:	e73f      	b.n	800915a <_scanf_float+0x62>
 80092da:	2403      	movs	r4, #3
 80092dc:	e7b4      	b.n	8009248 <_scanf_float+0x150>
 80092de:	2c06      	cmp	r4, #6
 80092e0:	d000      	beq.n	80092e4 <_scanf_float+0x1ec>
 80092e2:	e73a      	b.n	800915a <_scanf_float+0x62>
 80092e4:	2407      	movs	r4, #7
 80092e6:	e7af      	b.n	8009248 <_scanf_float+0x150>
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	0591      	lsls	r1, r2, #22
 80092ec:	d400      	bmi.n	80092f0 <_scanf_float+0x1f8>
 80092ee:	e734      	b.n	800915a <_scanf_float+0x62>
 80092f0:	4942      	ldr	r1, [pc, #264]	; (80093fc <_scanf_float+0x304>)
 80092f2:	400a      	ands	r2, r1
 80092f4:	603a      	str	r2, [r7, #0]
 80092f6:	9a01      	ldr	r2, [sp, #4]
 80092f8:	9205      	str	r2, [sp, #20]
 80092fa:	e7a5      	b.n	8009248 <_scanf_float+0x150>
 80092fc:	21a0      	movs	r1, #160	; 0xa0
 80092fe:	2080      	movs	r0, #128	; 0x80
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	00c9      	lsls	r1, r1, #3
 8009304:	4011      	ands	r1, r2
 8009306:	00c0      	lsls	r0, r0, #3
 8009308:	4281      	cmp	r1, r0
 800930a:	d006      	beq.n	800931a <_scanf_float+0x222>
 800930c:	4202      	tst	r2, r0
 800930e:	d100      	bne.n	8009312 <_scanf_float+0x21a>
 8009310:	e723      	b.n	800915a <_scanf_float+0x62>
 8009312:	9901      	ldr	r1, [sp, #4]
 8009314:	2900      	cmp	r1, #0
 8009316:	d100      	bne.n	800931a <_scanf_float+0x222>
 8009318:	e726      	b.n	8009168 <_scanf_float+0x70>
 800931a:	0591      	lsls	r1, r2, #22
 800931c:	d404      	bmi.n	8009328 <_scanf_float+0x230>
 800931e:	9901      	ldr	r1, [sp, #4]
 8009320:	9805      	ldr	r0, [sp, #20]
 8009322:	9509      	str	r5, [sp, #36]	; 0x24
 8009324:	1a09      	subs	r1, r1, r0
 8009326:	9108      	str	r1, [sp, #32]
 8009328:	4933      	ldr	r1, [pc, #204]	; (80093f8 <_scanf_float+0x300>)
 800932a:	400a      	ands	r2, r1
 800932c:	21c0      	movs	r1, #192	; 0xc0
 800932e:	0049      	lsls	r1, r1, #1
 8009330:	430a      	orrs	r2, r1
 8009332:	603a      	str	r2, [r7, #0]
 8009334:	2200      	movs	r2, #0
 8009336:	9201      	str	r2, [sp, #4]
 8009338:	e786      	b.n	8009248 <_scanf_float+0x150>
 800933a:	2203      	movs	r2, #3
 800933c:	e79e      	b.n	800927c <_scanf_float+0x184>
 800933e:	23c0      	movs	r3, #192	; 0xc0
 8009340:	005b      	lsls	r3, r3, #1
 8009342:	0031      	movs	r1, r6
 8009344:	58fb      	ldr	r3, [r7, r3]
 8009346:	9802      	ldr	r0, [sp, #8]
 8009348:	4798      	blx	r3
 800934a:	2800      	cmp	r0, #0
 800934c:	d100      	bne.n	8009350 <_scanf_float+0x258>
 800934e:	e6f6      	b.n	800913e <_scanf_float+0x46>
 8009350:	e703      	b.n	800915a <_scanf_float+0x62>
 8009352:	3d01      	subs	r5, #1
 8009354:	593b      	ldr	r3, [r7, r4]
 8009356:	0032      	movs	r2, r6
 8009358:	7829      	ldrb	r1, [r5, #0]
 800935a:	9802      	ldr	r0, [sp, #8]
 800935c:	4798      	blx	r3
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	3b01      	subs	r3, #1
 8009362:	613b      	str	r3, [r7, #16]
 8009364:	e707      	b.n	8009176 <_scanf_float+0x7e>
 8009366:	1e63      	subs	r3, r4, #1
 8009368:	2b06      	cmp	r3, #6
 800936a:	d80e      	bhi.n	800938a <_scanf_float+0x292>
 800936c:	9503      	str	r5, [sp, #12]
 800936e:	2c02      	cmp	r4, #2
 8009370:	d920      	bls.n	80093b4 <_scanf_float+0x2bc>
 8009372:	1b63      	subs	r3, r4, r5
 8009374:	b2db      	uxtb	r3, r3
 8009376:	9306      	str	r3, [sp, #24]
 8009378:	9b03      	ldr	r3, [sp, #12]
 800937a:	9a06      	ldr	r2, [sp, #24]
 800937c:	189b      	adds	r3, r3, r2
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b03      	cmp	r3, #3
 8009382:	d827      	bhi.n	80093d4 <_scanf_float+0x2dc>
 8009384:	3c03      	subs	r4, #3
 8009386:	b2e4      	uxtb	r4, r4
 8009388:	1b2d      	subs	r5, r5, r4
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	05da      	lsls	r2, r3, #23
 800938e:	d552      	bpl.n	8009436 <_scanf_float+0x33e>
 8009390:	055b      	lsls	r3, r3, #21
 8009392:	d535      	bpl.n	8009400 <_scanf_float+0x308>
 8009394:	24be      	movs	r4, #190	; 0xbe
 8009396:	0064      	lsls	r4, r4, #1
 8009398:	9b04      	ldr	r3, [sp, #16]
 800939a:	429d      	cmp	r5, r3
 800939c:	d800      	bhi.n	80093a0 <_scanf_float+0x2a8>
 800939e:	e6ee      	b.n	800917e <_scanf_float+0x86>
 80093a0:	3d01      	subs	r5, #1
 80093a2:	593b      	ldr	r3, [r7, r4]
 80093a4:	0032      	movs	r2, r6
 80093a6:	7829      	ldrb	r1, [r5, #0]
 80093a8:	9802      	ldr	r0, [sp, #8]
 80093aa:	4798      	blx	r3
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	613b      	str	r3, [r7, #16]
 80093b2:	e7f1      	b.n	8009398 <_scanf_float+0x2a0>
 80093b4:	24be      	movs	r4, #190	; 0xbe
 80093b6:	0064      	lsls	r4, r4, #1
 80093b8:	9b04      	ldr	r3, [sp, #16]
 80093ba:	429d      	cmp	r5, r3
 80093bc:	d800      	bhi.n	80093c0 <_scanf_float+0x2c8>
 80093be:	e6de      	b.n	800917e <_scanf_float+0x86>
 80093c0:	3d01      	subs	r5, #1
 80093c2:	593b      	ldr	r3, [r7, r4]
 80093c4:	0032      	movs	r2, r6
 80093c6:	7829      	ldrb	r1, [r5, #0]
 80093c8:	9802      	ldr	r0, [sp, #8]
 80093ca:	4798      	blx	r3
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	613b      	str	r3, [r7, #16]
 80093d2:	e7f1      	b.n	80093b8 <_scanf_float+0x2c0>
 80093d4:	9b03      	ldr	r3, [sp, #12]
 80093d6:	0032      	movs	r2, r6
 80093d8:	3b01      	subs	r3, #1
 80093da:	7819      	ldrb	r1, [r3, #0]
 80093dc:	9303      	str	r3, [sp, #12]
 80093de:	23be      	movs	r3, #190	; 0xbe
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	58fb      	ldr	r3, [r7, r3]
 80093e4:	9802      	ldr	r0, [sp, #8]
 80093e6:	4798      	blx	r3
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	613b      	str	r3, [r7, #16]
 80093ee:	e7c3      	b.n	8009378 <_scanf_float+0x280>
 80093f0:	fffffeff 	.word	0xfffffeff
 80093f4:	fffffe7f 	.word	0xfffffe7f
 80093f8:	fffff87f 	.word	0xfffff87f
 80093fc:	fffffd7f 	.word	0xfffffd7f
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	1e6c      	subs	r4, r5, #1
 8009404:	7821      	ldrb	r1, [r4, #0]
 8009406:	3b01      	subs	r3, #1
 8009408:	613b      	str	r3, [r7, #16]
 800940a:	2965      	cmp	r1, #101	; 0x65
 800940c:	d00c      	beq.n	8009428 <_scanf_float+0x330>
 800940e:	2945      	cmp	r1, #69	; 0x45
 8009410:	d00a      	beq.n	8009428 <_scanf_float+0x330>
 8009412:	23be      	movs	r3, #190	; 0xbe
 8009414:	005b      	lsls	r3, r3, #1
 8009416:	58fb      	ldr	r3, [r7, r3]
 8009418:	0032      	movs	r2, r6
 800941a:	9802      	ldr	r0, [sp, #8]
 800941c:	4798      	blx	r3
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	1eac      	subs	r4, r5, #2
 8009422:	3b01      	subs	r3, #1
 8009424:	7821      	ldrb	r1, [r4, #0]
 8009426:	613b      	str	r3, [r7, #16]
 8009428:	23be      	movs	r3, #190	; 0xbe
 800942a:	005b      	lsls	r3, r3, #1
 800942c:	0032      	movs	r2, r6
 800942e:	58fb      	ldr	r3, [r7, r3]
 8009430:	9802      	ldr	r0, [sp, #8]
 8009432:	4798      	blx	r3
 8009434:	0025      	movs	r5, r4
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	2310      	movs	r3, #16
 800943a:	0011      	movs	r1, r2
 800943c:	4019      	ands	r1, r3
 800943e:	9103      	str	r1, [sp, #12]
 8009440:	421a      	tst	r2, r3
 8009442:	d15b      	bne.n	80094fc <_scanf_float+0x404>
 8009444:	22c0      	movs	r2, #192	; 0xc0
 8009446:	7029      	strb	r1, [r5, #0]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	00d2      	lsls	r2, r2, #3
 800944c:	4013      	ands	r3, r2
 800944e:	2280      	movs	r2, #128	; 0x80
 8009450:	00d2      	lsls	r2, r2, #3
 8009452:	4293      	cmp	r3, r2
 8009454:	d11d      	bne.n	8009492 <_scanf_float+0x39a>
 8009456:	9b05      	ldr	r3, [sp, #20]
 8009458:	9a01      	ldr	r2, [sp, #4]
 800945a:	9901      	ldr	r1, [sp, #4]
 800945c:	1a9a      	subs	r2, r3, r2
 800945e:	428b      	cmp	r3, r1
 8009460:	d124      	bne.n	80094ac <_scanf_float+0x3b4>
 8009462:	2200      	movs	r2, #0
 8009464:	9904      	ldr	r1, [sp, #16]
 8009466:	9802      	ldr	r0, [sp, #8]
 8009468:	f002 fc98 	bl	800bd9c <_strtod_r>
 800946c:	9b07      	ldr	r3, [sp, #28]
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	0004      	movs	r4, r0
 8009472:	000d      	movs	r5, r1
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	0791      	lsls	r1, r2, #30
 8009478:	d525      	bpl.n	80094c6 <_scanf_float+0x3ce>
 800947a:	9907      	ldr	r1, [sp, #28]
 800947c:	1d1a      	adds	r2, r3, #4
 800947e:	600a      	str	r2, [r1, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	601c      	str	r4, [r3, #0]
 8009484:	605d      	str	r5, [r3, #4]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3301      	adds	r3, #1
 800948a:	60fb      	str	r3, [r7, #12]
 800948c:	9803      	ldr	r0, [sp, #12]
 800948e:	b00b      	add	sp, #44	; 0x2c
 8009490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009492:	9b08      	ldr	r3, [sp, #32]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d0e4      	beq.n	8009462 <_scanf_float+0x36a>
 8009498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800949a:	9a03      	ldr	r2, [sp, #12]
 800949c:	1c59      	adds	r1, r3, #1
 800949e:	9802      	ldr	r0, [sp, #8]
 80094a0:	230a      	movs	r3, #10
 80094a2:	f002 fd09 	bl	800beb8 <_strtol_r>
 80094a6:	9b08      	ldr	r3, [sp, #32]
 80094a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80094aa:	1ac2      	subs	r2, r0, r3
 80094ac:	003b      	movs	r3, r7
 80094ae:	3370      	adds	r3, #112	; 0x70
 80094b0:	33ff      	adds	r3, #255	; 0xff
 80094b2:	429d      	cmp	r5, r3
 80094b4:	d302      	bcc.n	80094bc <_scanf_float+0x3c4>
 80094b6:	003d      	movs	r5, r7
 80094b8:	356f      	adds	r5, #111	; 0x6f
 80094ba:	35ff      	adds	r5, #255	; 0xff
 80094bc:	0028      	movs	r0, r5
 80094be:	4910      	ldr	r1, [pc, #64]	; (8009500 <_scanf_float+0x408>)
 80094c0:	f000 f8e6 	bl	8009690 <siprintf>
 80094c4:	e7cd      	b.n	8009462 <_scanf_float+0x36a>
 80094c6:	1d19      	adds	r1, r3, #4
 80094c8:	0752      	lsls	r2, r2, #29
 80094ca:	d502      	bpl.n	80094d2 <_scanf_float+0x3da>
 80094cc:	9a07      	ldr	r2, [sp, #28]
 80094ce:	6011      	str	r1, [r2, #0]
 80094d0:	e7d6      	b.n	8009480 <_scanf_float+0x388>
 80094d2:	9a07      	ldr	r2, [sp, #28]
 80094d4:	0020      	movs	r0, r4
 80094d6:	6011      	str	r1, [r2, #0]
 80094d8:	681e      	ldr	r6, [r3, #0]
 80094da:	0022      	movs	r2, r4
 80094dc:	002b      	movs	r3, r5
 80094de:	0029      	movs	r1, r5
 80094e0:	f7f8 ff0a 	bl	80022f8 <__aeabi_dcmpun>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	d004      	beq.n	80094f2 <_scanf_float+0x3fa>
 80094e8:	4806      	ldr	r0, [pc, #24]	; (8009504 <_scanf_float+0x40c>)
 80094ea:	f000 f9cf 	bl	800988c <nanf>
 80094ee:	6030      	str	r0, [r6, #0]
 80094f0:	e7c9      	b.n	8009486 <_scanf_float+0x38e>
 80094f2:	0020      	movs	r0, r4
 80094f4:	0029      	movs	r1, r5
 80094f6:	f7f8 ffa9 	bl	800244c <__aeabi_d2f>
 80094fa:	e7f8      	b.n	80094ee <_scanf_float+0x3f6>
 80094fc:	2300      	movs	r3, #0
 80094fe:	e63f      	b.n	8009180 <_scanf_float+0x88>
 8009500:	0800d228 	.word	0x0800d228
 8009504:	0800d5bd 	.word	0x0800d5bd

08009508 <std>:
 8009508:	2300      	movs	r3, #0
 800950a:	b510      	push	{r4, lr}
 800950c:	0004      	movs	r4, r0
 800950e:	6003      	str	r3, [r0, #0]
 8009510:	6043      	str	r3, [r0, #4]
 8009512:	6083      	str	r3, [r0, #8]
 8009514:	8181      	strh	r1, [r0, #12]
 8009516:	6643      	str	r3, [r0, #100]	; 0x64
 8009518:	81c2      	strh	r2, [r0, #14]
 800951a:	6103      	str	r3, [r0, #16]
 800951c:	6143      	str	r3, [r0, #20]
 800951e:	6183      	str	r3, [r0, #24]
 8009520:	0019      	movs	r1, r3
 8009522:	2208      	movs	r2, #8
 8009524:	305c      	adds	r0, #92	; 0x5c
 8009526:	f000 f91f 	bl	8009768 <memset>
 800952a:	4b0b      	ldr	r3, [pc, #44]	; (8009558 <std+0x50>)
 800952c:	6224      	str	r4, [r4, #32]
 800952e:	6263      	str	r3, [r4, #36]	; 0x24
 8009530:	4b0a      	ldr	r3, [pc, #40]	; (800955c <std+0x54>)
 8009532:	62a3      	str	r3, [r4, #40]	; 0x28
 8009534:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <std+0x58>)
 8009536:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009538:	4b0a      	ldr	r3, [pc, #40]	; (8009564 <std+0x5c>)
 800953a:	6323      	str	r3, [r4, #48]	; 0x30
 800953c:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <std+0x60>)
 800953e:	429c      	cmp	r4, r3
 8009540:	d005      	beq.n	800954e <std+0x46>
 8009542:	4b0a      	ldr	r3, [pc, #40]	; (800956c <std+0x64>)
 8009544:	429c      	cmp	r4, r3
 8009546:	d002      	beq.n	800954e <std+0x46>
 8009548:	4b09      	ldr	r3, [pc, #36]	; (8009570 <std+0x68>)
 800954a:	429c      	cmp	r4, r3
 800954c:	d103      	bne.n	8009556 <std+0x4e>
 800954e:	0020      	movs	r0, r4
 8009550:	3058      	adds	r0, #88	; 0x58
 8009552:	f000 f98d 	bl	8009870 <__retarget_lock_init_recursive>
 8009556:	bd10      	pop	{r4, pc}
 8009558:	080096d1 	.word	0x080096d1
 800955c:	080096f9 	.word	0x080096f9
 8009560:	08009731 	.word	0x08009731
 8009564:	0800975d 	.word	0x0800975d
 8009568:	20000828 	.word	0x20000828
 800956c:	20000890 	.word	0x20000890
 8009570:	200008f8 	.word	0x200008f8

08009574 <stdio_exit_handler>:
 8009574:	b510      	push	{r4, lr}
 8009576:	4a03      	ldr	r2, [pc, #12]	; (8009584 <stdio_exit_handler+0x10>)
 8009578:	4903      	ldr	r1, [pc, #12]	; (8009588 <stdio_exit_handler+0x14>)
 800957a:	4804      	ldr	r0, [pc, #16]	; (800958c <stdio_exit_handler+0x18>)
 800957c:	f000 f86c 	bl	8009658 <_fwalk_sglue>
 8009580:	bd10      	pop	{r4, pc}
 8009582:	46c0      	nop			; (mov r8, r8)
 8009584:	2000000c 	.word	0x2000000c
 8009588:	0800c299 	.word	0x0800c299
 800958c:	20000018 	.word	0x20000018

08009590 <cleanup_stdio>:
 8009590:	6841      	ldr	r1, [r0, #4]
 8009592:	4b0b      	ldr	r3, [pc, #44]	; (80095c0 <cleanup_stdio+0x30>)
 8009594:	b510      	push	{r4, lr}
 8009596:	0004      	movs	r4, r0
 8009598:	4299      	cmp	r1, r3
 800959a:	d001      	beq.n	80095a0 <cleanup_stdio+0x10>
 800959c:	f002 fe7c 	bl	800c298 <_fflush_r>
 80095a0:	68a1      	ldr	r1, [r4, #8]
 80095a2:	4b08      	ldr	r3, [pc, #32]	; (80095c4 <cleanup_stdio+0x34>)
 80095a4:	4299      	cmp	r1, r3
 80095a6:	d002      	beq.n	80095ae <cleanup_stdio+0x1e>
 80095a8:	0020      	movs	r0, r4
 80095aa:	f002 fe75 	bl	800c298 <_fflush_r>
 80095ae:	68e1      	ldr	r1, [r4, #12]
 80095b0:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <cleanup_stdio+0x38>)
 80095b2:	4299      	cmp	r1, r3
 80095b4:	d002      	beq.n	80095bc <cleanup_stdio+0x2c>
 80095b6:	0020      	movs	r0, r4
 80095b8:	f002 fe6e 	bl	800c298 <_fflush_r>
 80095bc:	bd10      	pop	{r4, pc}
 80095be:	46c0      	nop			; (mov r8, r8)
 80095c0:	20000828 	.word	0x20000828
 80095c4:	20000890 	.word	0x20000890
 80095c8:	200008f8 	.word	0x200008f8

080095cc <global_stdio_init.part.0>:
 80095cc:	b510      	push	{r4, lr}
 80095ce:	4b09      	ldr	r3, [pc, #36]	; (80095f4 <global_stdio_init.part.0+0x28>)
 80095d0:	4a09      	ldr	r2, [pc, #36]	; (80095f8 <global_stdio_init.part.0+0x2c>)
 80095d2:	2104      	movs	r1, #4
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	4809      	ldr	r0, [pc, #36]	; (80095fc <global_stdio_init.part.0+0x30>)
 80095d8:	2200      	movs	r2, #0
 80095da:	f7ff ff95 	bl	8009508 <std>
 80095de:	2201      	movs	r2, #1
 80095e0:	2109      	movs	r1, #9
 80095e2:	4807      	ldr	r0, [pc, #28]	; (8009600 <global_stdio_init.part.0+0x34>)
 80095e4:	f7ff ff90 	bl	8009508 <std>
 80095e8:	2202      	movs	r2, #2
 80095ea:	2112      	movs	r1, #18
 80095ec:	4805      	ldr	r0, [pc, #20]	; (8009604 <global_stdio_init.part.0+0x38>)
 80095ee:	f7ff ff8b 	bl	8009508 <std>
 80095f2:	bd10      	pop	{r4, pc}
 80095f4:	20000960 	.word	0x20000960
 80095f8:	08009575 	.word	0x08009575
 80095fc:	20000828 	.word	0x20000828
 8009600:	20000890 	.word	0x20000890
 8009604:	200008f8 	.word	0x200008f8

08009608 <__sfp_lock_acquire>:
 8009608:	b510      	push	{r4, lr}
 800960a:	4802      	ldr	r0, [pc, #8]	; (8009614 <__sfp_lock_acquire+0xc>)
 800960c:	f000 f931 	bl	8009872 <__retarget_lock_acquire_recursive>
 8009610:	bd10      	pop	{r4, pc}
 8009612:	46c0      	nop			; (mov r8, r8)
 8009614:	20000969 	.word	0x20000969

08009618 <__sfp_lock_release>:
 8009618:	b510      	push	{r4, lr}
 800961a:	4802      	ldr	r0, [pc, #8]	; (8009624 <__sfp_lock_release+0xc>)
 800961c:	f000 f92a 	bl	8009874 <__retarget_lock_release_recursive>
 8009620:	bd10      	pop	{r4, pc}
 8009622:	46c0      	nop			; (mov r8, r8)
 8009624:	20000969 	.word	0x20000969

08009628 <__sinit>:
 8009628:	b510      	push	{r4, lr}
 800962a:	0004      	movs	r4, r0
 800962c:	f7ff ffec 	bl	8009608 <__sfp_lock_acquire>
 8009630:	6a23      	ldr	r3, [r4, #32]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d002      	beq.n	800963c <__sinit+0x14>
 8009636:	f7ff ffef 	bl	8009618 <__sfp_lock_release>
 800963a:	bd10      	pop	{r4, pc}
 800963c:	4b04      	ldr	r3, [pc, #16]	; (8009650 <__sinit+0x28>)
 800963e:	6223      	str	r3, [r4, #32]
 8009640:	4b04      	ldr	r3, [pc, #16]	; (8009654 <__sinit+0x2c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1f6      	bne.n	8009636 <__sinit+0xe>
 8009648:	f7ff ffc0 	bl	80095cc <global_stdio_init.part.0>
 800964c:	e7f3      	b.n	8009636 <__sinit+0xe>
 800964e:	46c0      	nop			; (mov r8, r8)
 8009650:	08009591 	.word	0x08009591
 8009654:	20000960 	.word	0x20000960

08009658 <_fwalk_sglue>:
 8009658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800965a:	0014      	movs	r4, r2
 800965c:	2600      	movs	r6, #0
 800965e:	9000      	str	r0, [sp, #0]
 8009660:	9101      	str	r1, [sp, #4]
 8009662:	68a5      	ldr	r5, [r4, #8]
 8009664:	6867      	ldr	r7, [r4, #4]
 8009666:	3f01      	subs	r7, #1
 8009668:	d504      	bpl.n	8009674 <_fwalk_sglue+0x1c>
 800966a:	6824      	ldr	r4, [r4, #0]
 800966c:	2c00      	cmp	r4, #0
 800966e:	d1f8      	bne.n	8009662 <_fwalk_sglue+0xa>
 8009670:	0030      	movs	r0, r6
 8009672:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009674:	89ab      	ldrh	r3, [r5, #12]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d908      	bls.n	800968c <_fwalk_sglue+0x34>
 800967a:	220e      	movs	r2, #14
 800967c:	5eab      	ldrsh	r3, [r5, r2]
 800967e:	3301      	adds	r3, #1
 8009680:	d004      	beq.n	800968c <_fwalk_sglue+0x34>
 8009682:	0029      	movs	r1, r5
 8009684:	9800      	ldr	r0, [sp, #0]
 8009686:	9b01      	ldr	r3, [sp, #4]
 8009688:	4798      	blx	r3
 800968a:	4306      	orrs	r6, r0
 800968c:	3568      	adds	r5, #104	; 0x68
 800968e:	e7ea      	b.n	8009666 <_fwalk_sglue+0xe>

08009690 <siprintf>:
 8009690:	b40e      	push	{r1, r2, r3}
 8009692:	b500      	push	{lr}
 8009694:	490b      	ldr	r1, [pc, #44]	; (80096c4 <siprintf+0x34>)
 8009696:	b09c      	sub	sp, #112	; 0x70
 8009698:	ab1d      	add	r3, sp, #116	; 0x74
 800969a:	9002      	str	r0, [sp, #8]
 800969c:	9006      	str	r0, [sp, #24]
 800969e:	9107      	str	r1, [sp, #28]
 80096a0:	9104      	str	r1, [sp, #16]
 80096a2:	4809      	ldr	r0, [pc, #36]	; (80096c8 <siprintf+0x38>)
 80096a4:	4909      	ldr	r1, [pc, #36]	; (80096cc <siprintf+0x3c>)
 80096a6:	cb04      	ldmia	r3!, {r2}
 80096a8:	9105      	str	r1, [sp, #20]
 80096aa:	6800      	ldr	r0, [r0, #0]
 80096ac:	a902      	add	r1, sp, #8
 80096ae:	9301      	str	r3, [sp, #4]
 80096b0:	f002 fc68 	bl	800bf84 <_svfiprintf_r>
 80096b4:	2200      	movs	r2, #0
 80096b6:	9b02      	ldr	r3, [sp, #8]
 80096b8:	701a      	strb	r2, [r3, #0]
 80096ba:	b01c      	add	sp, #112	; 0x70
 80096bc:	bc08      	pop	{r3}
 80096be:	b003      	add	sp, #12
 80096c0:	4718      	bx	r3
 80096c2:	46c0      	nop			; (mov r8, r8)
 80096c4:	7fffffff 	.word	0x7fffffff
 80096c8:	20000064 	.word	0x20000064
 80096cc:	ffff0208 	.word	0xffff0208

080096d0 <__sread>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	000c      	movs	r4, r1
 80096d4:	250e      	movs	r5, #14
 80096d6:	5f49      	ldrsh	r1, [r1, r5]
 80096d8:	f000 f878 	bl	80097cc <_read_r>
 80096dc:	2800      	cmp	r0, #0
 80096de:	db03      	blt.n	80096e8 <__sread+0x18>
 80096e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80096e2:	181b      	adds	r3, r3, r0
 80096e4:	6563      	str	r3, [r4, #84]	; 0x54
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	4a02      	ldr	r2, [pc, #8]	; (80096f4 <__sread+0x24>)
 80096ec:	4013      	ands	r3, r2
 80096ee:	81a3      	strh	r3, [r4, #12]
 80096f0:	e7f9      	b.n	80096e6 <__sread+0x16>
 80096f2:	46c0      	nop			; (mov r8, r8)
 80096f4:	ffffefff 	.word	0xffffefff

080096f8 <__swrite>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	001f      	movs	r7, r3
 80096fc:	898b      	ldrh	r3, [r1, #12]
 80096fe:	0005      	movs	r5, r0
 8009700:	000c      	movs	r4, r1
 8009702:	0016      	movs	r6, r2
 8009704:	05db      	lsls	r3, r3, #23
 8009706:	d505      	bpl.n	8009714 <__swrite+0x1c>
 8009708:	230e      	movs	r3, #14
 800970a:	5ec9      	ldrsh	r1, [r1, r3]
 800970c:	2200      	movs	r2, #0
 800970e:	2302      	movs	r3, #2
 8009710:	f000 f848 	bl	80097a4 <_lseek_r>
 8009714:	89a3      	ldrh	r3, [r4, #12]
 8009716:	4a05      	ldr	r2, [pc, #20]	; (800972c <__swrite+0x34>)
 8009718:	0028      	movs	r0, r5
 800971a:	4013      	ands	r3, r2
 800971c:	81a3      	strh	r3, [r4, #12]
 800971e:	0032      	movs	r2, r6
 8009720:	230e      	movs	r3, #14
 8009722:	5ee1      	ldrsh	r1, [r4, r3]
 8009724:	003b      	movs	r3, r7
 8009726:	f000 f865 	bl	80097f4 <_write_r>
 800972a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800972c:	ffffefff 	.word	0xffffefff

08009730 <__sseek>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	000c      	movs	r4, r1
 8009734:	250e      	movs	r5, #14
 8009736:	5f49      	ldrsh	r1, [r1, r5]
 8009738:	f000 f834 	bl	80097a4 <_lseek_r>
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	1c42      	adds	r2, r0, #1
 8009740:	d103      	bne.n	800974a <__sseek+0x1a>
 8009742:	4a05      	ldr	r2, [pc, #20]	; (8009758 <__sseek+0x28>)
 8009744:	4013      	ands	r3, r2
 8009746:	81a3      	strh	r3, [r4, #12]
 8009748:	bd70      	pop	{r4, r5, r6, pc}
 800974a:	2280      	movs	r2, #128	; 0x80
 800974c:	0152      	lsls	r2, r2, #5
 800974e:	4313      	orrs	r3, r2
 8009750:	81a3      	strh	r3, [r4, #12]
 8009752:	6560      	str	r0, [r4, #84]	; 0x54
 8009754:	e7f8      	b.n	8009748 <__sseek+0x18>
 8009756:	46c0      	nop			; (mov r8, r8)
 8009758:	ffffefff 	.word	0xffffefff

0800975c <__sclose>:
 800975c:	b510      	push	{r4, lr}
 800975e:	230e      	movs	r3, #14
 8009760:	5ec9      	ldrsh	r1, [r1, r3]
 8009762:	f000 f80d 	bl	8009780 <_close_r>
 8009766:	bd10      	pop	{r4, pc}

08009768 <memset>:
 8009768:	0003      	movs	r3, r0
 800976a:	1882      	adds	r2, r0, r2
 800976c:	4293      	cmp	r3, r2
 800976e:	d100      	bne.n	8009772 <memset+0xa>
 8009770:	4770      	bx	lr
 8009772:	7019      	strb	r1, [r3, #0]
 8009774:	3301      	adds	r3, #1
 8009776:	e7f9      	b.n	800976c <memset+0x4>

08009778 <_localeconv_r>:
 8009778:	4800      	ldr	r0, [pc, #0]	; (800977c <_localeconv_r+0x4>)
 800977a:	4770      	bx	lr
 800977c:	20000158 	.word	0x20000158

08009780 <_close_r>:
 8009780:	2300      	movs	r3, #0
 8009782:	b570      	push	{r4, r5, r6, lr}
 8009784:	4d06      	ldr	r5, [pc, #24]	; (80097a0 <_close_r+0x20>)
 8009786:	0004      	movs	r4, r0
 8009788:	0008      	movs	r0, r1
 800978a:	602b      	str	r3, [r5, #0]
 800978c:	f7fa f8b9 	bl	8003902 <_close>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d103      	bne.n	800979c <_close_r+0x1c>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d000      	beq.n	800979c <_close_r+0x1c>
 800979a:	6023      	str	r3, [r4, #0]
 800979c:	bd70      	pop	{r4, r5, r6, pc}
 800979e:	46c0      	nop			; (mov r8, r8)
 80097a0:	20000964 	.word	0x20000964

080097a4 <_lseek_r>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	0004      	movs	r4, r0
 80097a8:	0008      	movs	r0, r1
 80097aa:	0011      	movs	r1, r2
 80097ac:	001a      	movs	r2, r3
 80097ae:	2300      	movs	r3, #0
 80097b0:	4d05      	ldr	r5, [pc, #20]	; (80097c8 <_lseek_r+0x24>)
 80097b2:	602b      	str	r3, [r5, #0]
 80097b4:	f7fa f8c6 	bl	8003944 <_lseek>
 80097b8:	1c43      	adds	r3, r0, #1
 80097ba:	d103      	bne.n	80097c4 <_lseek_r+0x20>
 80097bc:	682b      	ldr	r3, [r5, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d000      	beq.n	80097c4 <_lseek_r+0x20>
 80097c2:	6023      	str	r3, [r4, #0]
 80097c4:	bd70      	pop	{r4, r5, r6, pc}
 80097c6:	46c0      	nop			; (mov r8, r8)
 80097c8:	20000964 	.word	0x20000964

080097cc <_read_r>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	0004      	movs	r4, r0
 80097d0:	0008      	movs	r0, r1
 80097d2:	0011      	movs	r1, r2
 80097d4:	001a      	movs	r2, r3
 80097d6:	2300      	movs	r3, #0
 80097d8:	4d05      	ldr	r5, [pc, #20]	; (80097f0 <_read_r+0x24>)
 80097da:	602b      	str	r3, [r5, #0]
 80097dc:	f7fa f858 	bl	8003890 <_read>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d103      	bne.n	80097ec <_read_r+0x20>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d000      	beq.n	80097ec <_read_r+0x20>
 80097ea:	6023      	str	r3, [r4, #0]
 80097ec:	bd70      	pop	{r4, r5, r6, pc}
 80097ee:	46c0      	nop			; (mov r8, r8)
 80097f0:	20000964 	.word	0x20000964

080097f4 <_write_r>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	0004      	movs	r4, r0
 80097f8:	0008      	movs	r0, r1
 80097fa:	0011      	movs	r1, r2
 80097fc:	001a      	movs	r2, r3
 80097fe:	2300      	movs	r3, #0
 8009800:	4d05      	ldr	r5, [pc, #20]	; (8009818 <_write_r+0x24>)
 8009802:	602b      	str	r3, [r5, #0]
 8009804:	f7fa f861 	bl	80038ca <_write>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d103      	bne.n	8009814 <_write_r+0x20>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d000      	beq.n	8009814 <_write_r+0x20>
 8009812:	6023      	str	r3, [r4, #0]
 8009814:	bd70      	pop	{r4, r5, r6, pc}
 8009816:	46c0      	nop			; (mov r8, r8)
 8009818:	20000964 	.word	0x20000964

0800981c <__errno>:
 800981c:	4b01      	ldr	r3, [pc, #4]	; (8009824 <__errno+0x8>)
 800981e:	6818      	ldr	r0, [r3, #0]
 8009820:	4770      	bx	lr
 8009822:	46c0      	nop			; (mov r8, r8)
 8009824:	20000064 	.word	0x20000064

08009828 <__libc_init_array>:
 8009828:	b570      	push	{r4, r5, r6, lr}
 800982a:	2600      	movs	r6, #0
 800982c:	4c0c      	ldr	r4, [pc, #48]	; (8009860 <__libc_init_array+0x38>)
 800982e:	4d0d      	ldr	r5, [pc, #52]	; (8009864 <__libc_init_array+0x3c>)
 8009830:	1b64      	subs	r4, r4, r5
 8009832:	10a4      	asrs	r4, r4, #2
 8009834:	42a6      	cmp	r6, r4
 8009836:	d109      	bne.n	800984c <__libc_init_array+0x24>
 8009838:	2600      	movs	r6, #0
 800983a:	f003 fc71 	bl	800d120 <_init>
 800983e:	4c0a      	ldr	r4, [pc, #40]	; (8009868 <__libc_init_array+0x40>)
 8009840:	4d0a      	ldr	r5, [pc, #40]	; (800986c <__libc_init_array+0x44>)
 8009842:	1b64      	subs	r4, r4, r5
 8009844:	10a4      	asrs	r4, r4, #2
 8009846:	42a6      	cmp	r6, r4
 8009848:	d105      	bne.n	8009856 <__libc_init_array+0x2e>
 800984a:	bd70      	pop	{r4, r5, r6, pc}
 800984c:	00b3      	lsls	r3, r6, #2
 800984e:	58eb      	ldr	r3, [r5, r3]
 8009850:	4798      	blx	r3
 8009852:	3601      	adds	r6, #1
 8009854:	e7ee      	b.n	8009834 <__libc_init_array+0xc>
 8009856:	00b3      	lsls	r3, r6, #2
 8009858:	58eb      	ldr	r3, [r5, r3]
 800985a:	4798      	blx	r3
 800985c:	3601      	adds	r6, #1
 800985e:	e7f2      	b.n	8009846 <__libc_init_array+0x1e>
 8009860:	0800d628 	.word	0x0800d628
 8009864:	0800d628 	.word	0x0800d628
 8009868:	0800d62c 	.word	0x0800d62c
 800986c:	0800d628 	.word	0x0800d628

08009870 <__retarget_lock_init_recursive>:
 8009870:	4770      	bx	lr

08009872 <__retarget_lock_acquire_recursive>:
 8009872:	4770      	bx	lr

08009874 <__retarget_lock_release_recursive>:
 8009874:	4770      	bx	lr

08009876 <memchr>:
 8009876:	b2c9      	uxtb	r1, r1
 8009878:	1882      	adds	r2, r0, r2
 800987a:	4290      	cmp	r0, r2
 800987c:	d101      	bne.n	8009882 <memchr+0xc>
 800987e:	2000      	movs	r0, #0
 8009880:	4770      	bx	lr
 8009882:	7803      	ldrb	r3, [r0, #0]
 8009884:	428b      	cmp	r3, r1
 8009886:	d0fb      	beq.n	8009880 <memchr+0xa>
 8009888:	3001      	adds	r0, #1
 800988a:	e7f6      	b.n	800987a <memchr+0x4>

0800988c <nanf>:
 800988c:	4800      	ldr	r0, [pc, #0]	; (8009890 <nanf+0x4>)
 800988e:	4770      	bx	lr
 8009890:	7fc00000 	.word	0x7fc00000

08009894 <quorem>:
 8009894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009896:	6902      	ldr	r2, [r0, #16]
 8009898:	690b      	ldr	r3, [r1, #16]
 800989a:	b089      	sub	sp, #36	; 0x24
 800989c:	0007      	movs	r7, r0
 800989e:	9104      	str	r1, [sp, #16]
 80098a0:	2000      	movs	r0, #0
 80098a2:	429a      	cmp	r2, r3
 80098a4:	db69      	blt.n	800997a <quorem+0xe6>
 80098a6:	3b01      	subs	r3, #1
 80098a8:	009c      	lsls	r4, r3, #2
 80098aa:	9301      	str	r3, [sp, #4]
 80098ac:	000b      	movs	r3, r1
 80098ae:	3314      	adds	r3, #20
 80098b0:	9306      	str	r3, [sp, #24]
 80098b2:	191b      	adds	r3, r3, r4
 80098b4:	9305      	str	r3, [sp, #20]
 80098b6:	003b      	movs	r3, r7
 80098b8:	3314      	adds	r3, #20
 80098ba:	9303      	str	r3, [sp, #12]
 80098bc:	191c      	adds	r4, r3, r4
 80098be:	9b05      	ldr	r3, [sp, #20]
 80098c0:	6826      	ldr	r6, [r4, #0]
 80098c2:	681d      	ldr	r5, [r3, #0]
 80098c4:	0030      	movs	r0, r6
 80098c6:	3501      	adds	r5, #1
 80098c8:	0029      	movs	r1, r5
 80098ca:	f7f6 fc39 	bl	8000140 <__udivsi3>
 80098ce:	9002      	str	r0, [sp, #8]
 80098d0:	42ae      	cmp	r6, r5
 80098d2:	d329      	bcc.n	8009928 <quorem+0x94>
 80098d4:	9b06      	ldr	r3, [sp, #24]
 80098d6:	2600      	movs	r6, #0
 80098d8:	469c      	mov	ip, r3
 80098da:	9d03      	ldr	r5, [sp, #12]
 80098dc:	9606      	str	r6, [sp, #24]
 80098de:	4662      	mov	r2, ip
 80098e0:	ca08      	ldmia	r2!, {r3}
 80098e2:	6828      	ldr	r0, [r5, #0]
 80098e4:	4694      	mov	ip, r2
 80098e6:	9a02      	ldr	r2, [sp, #8]
 80098e8:	b299      	uxth	r1, r3
 80098ea:	4351      	muls	r1, r2
 80098ec:	0c1b      	lsrs	r3, r3, #16
 80098ee:	4353      	muls	r3, r2
 80098f0:	1989      	adds	r1, r1, r6
 80098f2:	0c0a      	lsrs	r2, r1, #16
 80098f4:	189b      	adds	r3, r3, r2
 80098f6:	9307      	str	r3, [sp, #28]
 80098f8:	0c1e      	lsrs	r6, r3, #16
 80098fa:	9b06      	ldr	r3, [sp, #24]
 80098fc:	b282      	uxth	r2, r0
 80098fe:	18d2      	adds	r2, r2, r3
 8009900:	466b      	mov	r3, sp
 8009902:	b289      	uxth	r1, r1
 8009904:	8b9b      	ldrh	r3, [r3, #28]
 8009906:	1a52      	subs	r2, r2, r1
 8009908:	0c01      	lsrs	r1, r0, #16
 800990a:	1ac9      	subs	r1, r1, r3
 800990c:	1413      	asrs	r3, r2, #16
 800990e:	18cb      	adds	r3, r1, r3
 8009910:	1419      	asrs	r1, r3, #16
 8009912:	b292      	uxth	r2, r2
 8009914:	041b      	lsls	r3, r3, #16
 8009916:	4313      	orrs	r3, r2
 8009918:	c508      	stmia	r5!, {r3}
 800991a:	9b05      	ldr	r3, [sp, #20]
 800991c:	9106      	str	r1, [sp, #24]
 800991e:	4563      	cmp	r3, ip
 8009920:	d2dd      	bcs.n	80098de <quorem+0x4a>
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d030      	beq.n	800998a <quorem+0xf6>
 8009928:	0038      	movs	r0, r7
 800992a:	9904      	ldr	r1, [sp, #16]
 800992c:	f001 fa2a 	bl	800ad84 <__mcmp>
 8009930:	2800      	cmp	r0, #0
 8009932:	db21      	blt.n	8009978 <quorem+0xe4>
 8009934:	0038      	movs	r0, r7
 8009936:	2600      	movs	r6, #0
 8009938:	9b02      	ldr	r3, [sp, #8]
 800993a:	9c04      	ldr	r4, [sp, #16]
 800993c:	3301      	adds	r3, #1
 800993e:	9302      	str	r3, [sp, #8]
 8009940:	3014      	adds	r0, #20
 8009942:	3414      	adds	r4, #20
 8009944:	6803      	ldr	r3, [r0, #0]
 8009946:	cc02      	ldmia	r4!, {r1}
 8009948:	b29d      	uxth	r5, r3
 800994a:	19ad      	adds	r5, r5, r6
 800994c:	b28a      	uxth	r2, r1
 800994e:	1aaa      	subs	r2, r5, r2
 8009950:	0c09      	lsrs	r1, r1, #16
 8009952:	0c1b      	lsrs	r3, r3, #16
 8009954:	1a5b      	subs	r3, r3, r1
 8009956:	1411      	asrs	r1, r2, #16
 8009958:	185b      	adds	r3, r3, r1
 800995a:	141e      	asrs	r6, r3, #16
 800995c:	b292      	uxth	r2, r2
 800995e:	041b      	lsls	r3, r3, #16
 8009960:	4313      	orrs	r3, r2
 8009962:	c008      	stmia	r0!, {r3}
 8009964:	9b05      	ldr	r3, [sp, #20]
 8009966:	42a3      	cmp	r3, r4
 8009968:	d2ec      	bcs.n	8009944 <quorem+0xb0>
 800996a:	9b01      	ldr	r3, [sp, #4]
 800996c:	9a03      	ldr	r2, [sp, #12]
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	18d3      	adds	r3, r2, r3
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	2a00      	cmp	r2, #0
 8009976:	d015      	beq.n	80099a4 <quorem+0x110>
 8009978:	9802      	ldr	r0, [sp, #8]
 800997a:	b009      	add	sp, #36	; 0x24
 800997c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d106      	bne.n	8009992 <quorem+0xfe>
 8009984:	9b01      	ldr	r3, [sp, #4]
 8009986:	3b01      	subs	r3, #1
 8009988:	9301      	str	r3, [sp, #4]
 800998a:	9b03      	ldr	r3, [sp, #12]
 800998c:	3c04      	subs	r4, #4
 800998e:	42a3      	cmp	r3, r4
 8009990:	d3f5      	bcc.n	800997e <quorem+0xea>
 8009992:	9b01      	ldr	r3, [sp, #4]
 8009994:	613b      	str	r3, [r7, #16]
 8009996:	e7c7      	b.n	8009928 <quorem+0x94>
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	2a00      	cmp	r2, #0
 800999c:	d106      	bne.n	80099ac <quorem+0x118>
 800999e:	9a01      	ldr	r2, [sp, #4]
 80099a0:	3a01      	subs	r2, #1
 80099a2:	9201      	str	r2, [sp, #4]
 80099a4:	9a03      	ldr	r2, [sp, #12]
 80099a6:	3b04      	subs	r3, #4
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d3f5      	bcc.n	8009998 <quorem+0x104>
 80099ac:	9b01      	ldr	r3, [sp, #4]
 80099ae:	613b      	str	r3, [r7, #16]
 80099b0:	e7e2      	b.n	8009978 <quorem+0xe4>
	...

080099b4 <_dtoa_r>:
 80099b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099b6:	0014      	movs	r4, r2
 80099b8:	001d      	movs	r5, r3
 80099ba:	69c6      	ldr	r6, [r0, #28]
 80099bc:	b09d      	sub	sp, #116	; 0x74
 80099be:	9408      	str	r4, [sp, #32]
 80099c0:	9509      	str	r5, [sp, #36]	; 0x24
 80099c2:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80099c4:	9004      	str	r0, [sp, #16]
 80099c6:	2e00      	cmp	r6, #0
 80099c8:	d10f      	bne.n	80099ea <_dtoa_r+0x36>
 80099ca:	2010      	movs	r0, #16
 80099cc:	f000 fe4a 	bl	800a664 <malloc>
 80099d0:	9b04      	ldr	r3, [sp, #16]
 80099d2:	1e02      	subs	r2, r0, #0
 80099d4:	61d8      	str	r0, [r3, #28]
 80099d6:	d104      	bne.n	80099e2 <_dtoa_r+0x2e>
 80099d8:	21ef      	movs	r1, #239	; 0xef
 80099da:	4bc6      	ldr	r3, [pc, #792]	; (8009cf4 <_dtoa_r+0x340>)
 80099dc:	48c6      	ldr	r0, [pc, #792]	; (8009cf8 <_dtoa_r+0x344>)
 80099de:	f002 fccd 	bl	800c37c <__assert_func>
 80099e2:	6046      	str	r6, [r0, #4]
 80099e4:	6086      	str	r6, [r0, #8]
 80099e6:	6006      	str	r6, [r0, #0]
 80099e8:	60c6      	str	r6, [r0, #12]
 80099ea:	9b04      	ldr	r3, [sp, #16]
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	6819      	ldr	r1, [r3, #0]
 80099f0:	2900      	cmp	r1, #0
 80099f2:	d00b      	beq.n	8009a0c <_dtoa_r+0x58>
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	2301      	movs	r3, #1
 80099f8:	4093      	lsls	r3, r2
 80099fa:	604a      	str	r2, [r1, #4]
 80099fc:	608b      	str	r3, [r1, #8]
 80099fe:	9804      	ldr	r0, [sp, #16]
 8009a00:	f000 ff32 	bl	800a868 <_Bfree>
 8009a04:	2200      	movs	r2, #0
 8009a06:	9b04      	ldr	r3, [sp, #16]
 8009a08:	69db      	ldr	r3, [r3, #28]
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	2d00      	cmp	r5, #0
 8009a0e:	da1e      	bge.n	8009a4e <_dtoa_r+0x9a>
 8009a10:	2301      	movs	r3, #1
 8009a12:	603b      	str	r3, [r7, #0]
 8009a14:	006b      	lsls	r3, r5, #1
 8009a16:	085b      	lsrs	r3, r3, #1
 8009a18:	9309      	str	r3, [sp, #36]	; 0x24
 8009a1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009a1c:	4bb7      	ldr	r3, [pc, #732]	; (8009cfc <_dtoa_r+0x348>)
 8009a1e:	4ab7      	ldr	r2, [pc, #732]	; (8009cfc <_dtoa_r+0x348>)
 8009a20:	403b      	ands	r3, r7
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d116      	bne.n	8009a54 <_dtoa_r+0xa0>
 8009a26:	4bb6      	ldr	r3, [pc, #728]	; (8009d00 <_dtoa_r+0x34c>)
 8009a28:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a2a:	6013      	str	r3, [r2, #0]
 8009a2c:	033b      	lsls	r3, r7, #12
 8009a2e:	0b1b      	lsrs	r3, r3, #12
 8009a30:	4323      	orrs	r3, r4
 8009a32:	d101      	bne.n	8009a38 <_dtoa_r+0x84>
 8009a34:	f000 fdb5 	bl	800a5a2 <_dtoa_r+0xbee>
 8009a38:	4bb2      	ldr	r3, [pc, #712]	; (8009d04 <_dtoa_r+0x350>)
 8009a3a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a3c:	9306      	str	r3, [sp, #24]
 8009a3e:	2a00      	cmp	r2, #0
 8009a40:	d002      	beq.n	8009a48 <_dtoa_r+0x94>
 8009a42:	4bb1      	ldr	r3, [pc, #708]	; (8009d08 <_dtoa_r+0x354>)
 8009a44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a46:	6013      	str	r3, [r2, #0]
 8009a48:	9806      	ldr	r0, [sp, #24]
 8009a4a:	b01d      	add	sp, #116	; 0x74
 8009a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a4e:	2300      	movs	r3, #0
 8009a50:	603b      	str	r3, [r7, #0]
 8009a52:	e7e2      	b.n	8009a1a <_dtoa_r+0x66>
 8009a54:	9a08      	ldr	r2, [sp, #32]
 8009a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a58:	9210      	str	r2, [sp, #64]	; 0x40
 8009a5a:	9311      	str	r3, [sp, #68]	; 0x44
 8009a5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009a5e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009a60:	2200      	movs	r2, #0
 8009a62:	2300      	movs	r3, #0
 8009a64:	f7f6 fcf2 	bl	800044c <__aeabi_dcmpeq>
 8009a68:	1e06      	subs	r6, r0, #0
 8009a6a:	d009      	beq.n	8009a80 <_dtoa_r+0xcc>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	4ba6      	ldr	r3, [pc, #664]	; (8009d0c <_dtoa_r+0x358>)
 8009a74:	9306      	str	r3, [sp, #24]
 8009a76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d0e5      	beq.n	8009a48 <_dtoa_r+0x94>
 8009a7c:	4ba4      	ldr	r3, [pc, #656]	; (8009d10 <_dtoa_r+0x35c>)
 8009a7e:	e7e1      	b.n	8009a44 <_dtoa_r+0x90>
 8009a80:	ab1a      	add	r3, sp, #104	; 0x68
 8009a82:	9301      	str	r3, [sp, #4]
 8009a84:	ab1b      	add	r3, sp, #108	; 0x6c
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	9804      	ldr	r0, [sp, #16]
 8009a8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a8e:	f001 fa95 	bl	800afbc <__d2b>
 8009a92:	007a      	lsls	r2, r7, #1
 8009a94:	9005      	str	r0, [sp, #20]
 8009a96:	0d52      	lsrs	r2, r2, #21
 8009a98:	d100      	bne.n	8009a9c <_dtoa_r+0xe8>
 8009a9a:	e07b      	b.n	8009b94 <_dtoa_r+0x1e0>
 8009a9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a9e:	9617      	str	r6, [sp, #92]	; 0x5c
 8009aa0:	0319      	lsls	r1, r3, #12
 8009aa2:	4b9c      	ldr	r3, [pc, #624]	; (8009d14 <_dtoa_r+0x360>)
 8009aa4:	0b09      	lsrs	r1, r1, #12
 8009aa6:	430b      	orrs	r3, r1
 8009aa8:	499b      	ldr	r1, [pc, #620]	; (8009d18 <_dtoa_r+0x364>)
 8009aaa:	1857      	adds	r7, r2, r1
 8009aac:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009aae:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009ab0:	0019      	movs	r1, r3
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	4b99      	ldr	r3, [pc, #612]	; (8009d1c <_dtoa_r+0x368>)
 8009ab6:	f7f8 f89d 	bl	8001bf4 <__aeabi_dsub>
 8009aba:	4a99      	ldr	r2, [pc, #612]	; (8009d20 <_dtoa_r+0x36c>)
 8009abc:	4b99      	ldr	r3, [pc, #612]	; (8009d24 <_dtoa_r+0x370>)
 8009abe:	f7f7 fdd7 	bl	8001670 <__aeabi_dmul>
 8009ac2:	4a99      	ldr	r2, [pc, #612]	; (8009d28 <_dtoa_r+0x374>)
 8009ac4:	4b99      	ldr	r3, [pc, #612]	; (8009d2c <_dtoa_r+0x378>)
 8009ac6:	f7f6 fe79 	bl	80007bc <__aeabi_dadd>
 8009aca:	0004      	movs	r4, r0
 8009acc:	0038      	movs	r0, r7
 8009ace:	000d      	movs	r5, r1
 8009ad0:	f7f8 fc66 	bl	80023a0 <__aeabi_i2d>
 8009ad4:	4a96      	ldr	r2, [pc, #600]	; (8009d30 <_dtoa_r+0x37c>)
 8009ad6:	4b97      	ldr	r3, [pc, #604]	; (8009d34 <_dtoa_r+0x380>)
 8009ad8:	f7f7 fdca 	bl	8001670 <__aeabi_dmul>
 8009adc:	0002      	movs	r2, r0
 8009ade:	000b      	movs	r3, r1
 8009ae0:	0020      	movs	r0, r4
 8009ae2:	0029      	movs	r1, r5
 8009ae4:	f7f6 fe6a 	bl	80007bc <__aeabi_dadd>
 8009ae8:	0004      	movs	r4, r0
 8009aea:	000d      	movs	r5, r1
 8009aec:	f7f8 fc22 	bl	8002334 <__aeabi_d2iz>
 8009af0:	2200      	movs	r2, #0
 8009af2:	9003      	str	r0, [sp, #12]
 8009af4:	2300      	movs	r3, #0
 8009af6:	0020      	movs	r0, r4
 8009af8:	0029      	movs	r1, r5
 8009afa:	f7f6 fcad 	bl	8000458 <__aeabi_dcmplt>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d00b      	beq.n	8009b1a <_dtoa_r+0x166>
 8009b02:	9803      	ldr	r0, [sp, #12]
 8009b04:	f7f8 fc4c 	bl	80023a0 <__aeabi_i2d>
 8009b08:	002b      	movs	r3, r5
 8009b0a:	0022      	movs	r2, r4
 8009b0c:	f7f6 fc9e 	bl	800044c <__aeabi_dcmpeq>
 8009b10:	4243      	negs	r3, r0
 8009b12:	4158      	adcs	r0, r3
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	1a1b      	subs	r3, r3, r0
 8009b18:	9303      	str	r3, [sp, #12]
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	9316      	str	r3, [sp, #88]	; 0x58
 8009b1e:	9b03      	ldr	r3, [sp, #12]
 8009b20:	2b16      	cmp	r3, #22
 8009b22:	d810      	bhi.n	8009b46 <_dtoa_r+0x192>
 8009b24:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009b26:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009b28:	9a03      	ldr	r2, [sp, #12]
 8009b2a:	4b83      	ldr	r3, [pc, #524]	; (8009d38 <_dtoa_r+0x384>)
 8009b2c:	00d2      	lsls	r2, r2, #3
 8009b2e:	189b      	adds	r3, r3, r2
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f7f6 fc90 	bl	8000458 <__aeabi_dcmplt>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d047      	beq.n	8009bcc <_dtoa_r+0x218>
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	9303      	str	r3, [sp, #12]
 8009b42:	2300      	movs	r3, #0
 8009b44:	9316      	str	r3, [sp, #88]	; 0x58
 8009b46:	2200      	movs	r2, #0
 8009b48:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009b4a:	920a      	str	r2, [sp, #40]	; 0x28
 8009b4c:	1bdb      	subs	r3, r3, r7
 8009b4e:	1e5a      	subs	r2, r3, #1
 8009b50:	d53e      	bpl.n	8009bd0 <_dtoa_r+0x21c>
 8009b52:	2201      	movs	r2, #1
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	930a      	str	r3, [sp, #40]	; 0x28
 8009b58:	2300      	movs	r3, #0
 8009b5a:	930c      	str	r3, [sp, #48]	; 0x30
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	db38      	blt.n	8009bd4 <_dtoa_r+0x220>
 8009b62:	9a03      	ldr	r2, [sp, #12]
 8009b64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b66:	4694      	mov	ip, r2
 8009b68:	4463      	add	r3, ip
 8009b6a:	930c      	str	r3, [sp, #48]	; 0x30
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	9213      	str	r2, [sp, #76]	; 0x4c
 8009b70:	930d      	str	r3, [sp, #52]	; 0x34
 8009b72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b74:	2401      	movs	r4, #1
 8009b76:	2b09      	cmp	r3, #9
 8009b78:	d867      	bhi.n	8009c4a <_dtoa_r+0x296>
 8009b7a:	2b05      	cmp	r3, #5
 8009b7c:	dd02      	ble.n	8009b84 <_dtoa_r+0x1d0>
 8009b7e:	2400      	movs	r4, #0
 8009b80:	3b04      	subs	r3, #4
 8009b82:	9322      	str	r3, [sp, #136]	; 0x88
 8009b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b86:	1e98      	subs	r0, r3, #2
 8009b88:	2803      	cmp	r0, #3
 8009b8a:	d867      	bhi.n	8009c5c <_dtoa_r+0x2a8>
 8009b8c:	f7f6 fac4 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009b90:	5b383a2b 	.word	0x5b383a2b
 8009b94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b96:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009b98:	18f6      	adds	r6, r6, r3
 8009b9a:	4b68      	ldr	r3, [pc, #416]	; (8009d3c <_dtoa_r+0x388>)
 8009b9c:	18f2      	adds	r2, r6, r3
 8009b9e:	2a20      	cmp	r2, #32
 8009ba0:	dd0f      	ble.n	8009bc2 <_dtoa_r+0x20e>
 8009ba2:	2340      	movs	r3, #64	; 0x40
 8009ba4:	1a9b      	subs	r3, r3, r2
 8009ba6:	409f      	lsls	r7, r3
 8009ba8:	4b65      	ldr	r3, [pc, #404]	; (8009d40 <_dtoa_r+0x38c>)
 8009baa:	0038      	movs	r0, r7
 8009bac:	18f3      	adds	r3, r6, r3
 8009bae:	40dc      	lsrs	r4, r3
 8009bb0:	4320      	orrs	r0, r4
 8009bb2:	f7f8 fc25 	bl	8002400 <__aeabi_ui2d>
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	4b62      	ldr	r3, [pc, #392]	; (8009d44 <_dtoa_r+0x390>)
 8009bba:	1e77      	subs	r7, r6, #1
 8009bbc:	18cb      	adds	r3, r1, r3
 8009bbe:	9217      	str	r2, [sp, #92]	; 0x5c
 8009bc0:	e776      	b.n	8009ab0 <_dtoa_r+0xfc>
 8009bc2:	2320      	movs	r3, #32
 8009bc4:	0020      	movs	r0, r4
 8009bc6:	1a9b      	subs	r3, r3, r2
 8009bc8:	4098      	lsls	r0, r3
 8009bca:	e7f2      	b.n	8009bb2 <_dtoa_r+0x1fe>
 8009bcc:	9016      	str	r0, [sp, #88]	; 0x58
 8009bce:	e7ba      	b.n	8009b46 <_dtoa_r+0x192>
 8009bd0:	920c      	str	r2, [sp, #48]	; 0x30
 8009bd2:	e7c3      	b.n	8009b5c <_dtoa_r+0x1a8>
 8009bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd6:	9a03      	ldr	r2, [sp, #12]
 8009bd8:	1a9b      	subs	r3, r3, r2
 8009bda:	930a      	str	r3, [sp, #40]	; 0x28
 8009bdc:	4253      	negs	r3, r2
 8009bde:	930d      	str	r3, [sp, #52]	; 0x34
 8009be0:	2300      	movs	r3, #0
 8009be2:	9313      	str	r3, [sp, #76]	; 0x4c
 8009be4:	e7c5      	b.n	8009b72 <_dtoa_r+0x1be>
 8009be6:	2300      	movs	r3, #0
 8009be8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bee:	9307      	str	r3, [sp, #28]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	dc13      	bgt.n	8009c1c <_dtoa_r+0x268>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	001a      	movs	r2, r3
 8009bf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bfa:	9307      	str	r3, [sp, #28]
 8009bfc:	9223      	str	r2, [sp, #140]	; 0x8c
 8009bfe:	e00d      	b.n	8009c1c <_dtoa_r+0x268>
 8009c00:	2301      	movs	r3, #1
 8009c02:	e7f1      	b.n	8009be8 <_dtoa_r+0x234>
 8009c04:	2300      	movs	r3, #0
 8009c06:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009c08:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c0a:	4694      	mov	ip, r2
 8009c0c:	9b03      	ldr	r3, [sp, #12]
 8009c0e:	4463      	add	r3, ip
 8009c10:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c12:	3301      	adds	r3, #1
 8009c14:	9307      	str	r3, [sp, #28]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	dc00      	bgt.n	8009c1c <_dtoa_r+0x268>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	9a04      	ldr	r2, [sp, #16]
 8009c1e:	2100      	movs	r1, #0
 8009c20:	69d0      	ldr	r0, [r2, #28]
 8009c22:	2204      	movs	r2, #4
 8009c24:	0015      	movs	r5, r2
 8009c26:	3514      	adds	r5, #20
 8009c28:	429d      	cmp	r5, r3
 8009c2a:	d91b      	bls.n	8009c64 <_dtoa_r+0x2b0>
 8009c2c:	6041      	str	r1, [r0, #4]
 8009c2e:	9804      	ldr	r0, [sp, #16]
 8009c30:	f000 fdd6 	bl	800a7e0 <_Balloc>
 8009c34:	9006      	str	r0, [sp, #24]
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d117      	bne.n	8009c6a <_dtoa_r+0x2b6>
 8009c3a:	21b0      	movs	r1, #176	; 0xb0
 8009c3c:	4b42      	ldr	r3, [pc, #264]	; (8009d48 <_dtoa_r+0x394>)
 8009c3e:	482e      	ldr	r0, [pc, #184]	; (8009cf8 <_dtoa_r+0x344>)
 8009c40:	9a06      	ldr	r2, [sp, #24]
 8009c42:	31ff      	adds	r1, #255	; 0xff
 8009c44:	e6cb      	b.n	80099de <_dtoa_r+0x2a>
 8009c46:	2301      	movs	r3, #1
 8009c48:	e7dd      	b.n	8009c06 <_dtoa_r+0x252>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	940f      	str	r4, [sp, #60]	; 0x3c
 8009c4e:	9322      	str	r3, [sp, #136]	; 0x88
 8009c50:	3b01      	subs	r3, #1
 8009c52:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c54:	9307      	str	r3, [sp, #28]
 8009c56:	2200      	movs	r2, #0
 8009c58:	3313      	adds	r3, #19
 8009c5a:	e7cf      	b.n	8009bfc <_dtoa_r+0x248>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c60:	3b02      	subs	r3, #2
 8009c62:	e7f6      	b.n	8009c52 <_dtoa_r+0x29e>
 8009c64:	3101      	adds	r1, #1
 8009c66:	0052      	lsls	r2, r2, #1
 8009c68:	e7dc      	b.n	8009c24 <_dtoa_r+0x270>
 8009c6a:	9b04      	ldr	r3, [sp, #16]
 8009c6c:	9a06      	ldr	r2, [sp, #24]
 8009c6e:	69db      	ldr	r3, [r3, #28]
 8009c70:	601a      	str	r2, [r3, #0]
 8009c72:	9b07      	ldr	r3, [sp, #28]
 8009c74:	2b0e      	cmp	r3, #14
 8009c76:	d900      	bls.n	8009c7a <_dtoa_r+0x2c6>
 8009c78:	e0e5      	b.n	8009e46 <_dtoa_r+0x492>
 8009c7a:	2c00      	cmp	r4, #0
 8009c7c:	d100      	bne.n	8009c80 <_dtoa_r+0x2cc>
 8009c7e:	e0e2      	b.n	8009e46 <_dtoa_r+0x492>
 8009c80:	9b03      	ldr	r3, [sp, #12]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dd64      	ble.n	8009d50 <_dtoa_r+0x39c>
 8009c86:	210f      	movs	r1, #15
 8009c88:	9a03      	ldr	r2, [sp, #12]
 8009c8a:	4b2b      	ldr	r3, [pc, #172]	; (8009d38 <_dtoa_r+0x384>)
 8009c8c:	400a      	ands	r2, r1
 8009c8e:	00d2      	lsls	r2, r2, #3
 8009c90:	189b      	adds	r3, r3, r2
 8009c92:	681e      	ldr	r6, [r3, #0]
 8009c94:	685f      	ldr	r7, [r3, #4]
 8009c96:	9b03      	ldr	r3, [sp, #12]
 8009c98:	2402      	movs	r4, #2
 8009c9a:	111d      	asrs	r5, r3, #4
 8009c9c:	05db      	lsls	r3, r3, #23
 8009c9e:	d50a      	bpl.n	8009cb6 <_dtoa_r+0x302>
 8009ca0:	4b2a      	ldr	r3, [pc, #168]	; (8009d4c <_dtoa_r+0x398>)
 8009ca2:	400d      	ands	r5, r1
 8009ca4:	6a1a      	ldr	r2, [r3, #32]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009caa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009cac:	f7f7 f8e6 	bl	8000e7c <__aeabi_ddiv>
 8009cb0:	9008      	str	r0, [sp, #32]
 8009cb2:	9109      	str	r1, [sp, #36]	; 0x24
 8009cb4:	3401      	adds	r4, #1
 8009cb6:	4b25      	ldr	r3, [pc, #148]	; (8009d4c <_dtoa_r+0x398>)
 8009cb8:	930e      	str	r3, [sp, #56]	; 0x38
 8009cba:	2d00      	cmp	r5, #0
 8009cbc:	d108      	bne.n	8009cd0 <_dtoa_r+0x31c>
 8009cbe:	9808      	ldr	r0, [sp, #32]
 8009cc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cc2:	0032      	movs	r2, r6
 8009cc4:	003b      	movs	r3, r7
 8009cc6:	f7f7 f8d9 	bl	8000e7c <__aeabi_ddiv>
 8009cca:	9008      	str	r0, [sp, #32]
 8009ccc:	9109      	str	r1, [sp, #36]	; 0x24
 8009cce:	e05a      	b.n	8009d86 <_dtoa_r+0x3d2>
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	421d      	tst	r5, r3
 8009cd4:	d009      	beq.n	8009cea <_dtoa_r+0x336>
 8009cd6:	18e4      	adds	r4, r4, r3
 8009cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cda:	0030      	movs	r0, r6
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	0039      	movs	r1, r7
 8009ce2:	f7f7 fcc5 	bl	8001670 <__aeabi_dmul>
 8009ce6:	0006      	movs	r6, r0
 8009ce8:	000f      	movs	r7, r1
 8009cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cec:	106d      	asrs	r5, r5, #1
 8009cee:	3308      	adds	r3, #8
 8009cf0:	e7e2      	b.n	8009cb8 <_dtoa_r+0x304>
 8009cf2:	46c0      	nop			; (mov r8, r8)
 8009cf4:	0800d23a 	.word	0x0800d23a
 8009cf8:	0800d251 	.word	0x0800d251
 8009cfc:	7ff00000 	.word	0x7ff00000
 8009d00:	0000270f 	.word	0x0000270f
 8009d04:	0800d236 	.word	0x0800d236
 8009d08:	0800d239 	.word	0x0800d239
 8009d0c:	0800d204 	.word	0x0800d204
 8009d10:	0800d205 	.word	0x0800d205
 8009d14:	3ff00000 	.word	0x3ff00000
 8009d18:	fffffc01 	.word	0xfffffc01
 8009d1c:	3ff80000 	.word	0x3ff80000
 8009d20:	636f4361 	.word	0x636f4361
 8009d24:	3fd287a7 	.word	0x3fd287a7
 8009d28:	8b60c8b3 	.word	0x8b60c8b3
 8009d2c:	3fc68a28 	.word	0x3fc68a28
 8009d30:	509f79fb 	.word	0x509f79fb
 8009d34:	3fd34413 	.word	0x3fd34413
 8009d38:	0800d340 	.word	0x0800d340
 8009d3c:	00000432 	.word	0x00000432
 8009d40:	00000412 	.word	0x00000412
 8009d44:	fe100000 	.word	0xfe100000
 8009d48:	0800d2a9 	.word	0x0800d2a9
 8009d4c:	0800d318 	.word	0x0800d318
 8009d50:	9b03      	ldr	r3, [sp, #12]
 8009d52:	2402      	movs	r4, #2
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d016      	beq.n	8009d86 <_dtoa_r+0x3d2>
 8009d58:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009d5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d5c:	220f      	movs	r2, #15
 8009d5e:	425d      	negs	r5, r3
 8009d60:	402a      	ands	r2, r5
 8009d62:	4bdd      	ldr	r3, [pc, #884]	; (800a0d8 <_dtoa_r+0x724>)
 8009d64:	00d2      	lsls	r2, r2, #3
 8009d66:	189b      	adds	r3, r3, r2
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f7f7 fc80 	bl	8001670 <__aeabi_dmul>
 8009d70:	2701      	movs	r7, #1
 8009d72:	2300      	movs	r3, #0
 8009d74:	9008      	str	r0, [sp, #32]
 8009d76:	9109      	str	r1, [sp, #36]	; 0x24
 8009d78:	4ed8      	ldr	r6, [pc, #864]	; (800a0dc <_dtoa_r+0x728>)
 8009d7a:	112d      	asrs	r5, r5, #4
 8009d7c:	2d00      	cmp	r5, #0
 8009d7e:	d000      	beq.n	8009d82 <_dtoa_r+0x3ce>
 8009d80:	e091      	b.n	8009ea6 <_dtoa_r+0x4f2>
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1a1      	bne.n	8009cca <_dtoa_r+0x316>
 8009d86:	9e08      	ldr	r6, [sp, #32]
 8009d88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009d8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d100      	bne.n	8009d92 <_dtoa_r+0x3de>
 8009d90:	e094      	b.n	8009ebc <_dtoa_r+0x508>
 8009d92:	2200      	movs	r2, #0
 8009d94:	0030      	movs	r0, r6
 8009d96:	0039      	movs	r1, r7
 8009d98:	4bd1      	ldr	r3, [pc, #836]	; (800a0e0 <_dtoa_r+0x72c>)
 8009d9a:	f7f6 fb5d 	bl	8000458 <__aeabi_dcmplt>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d100      	bne.n	8009da4 <_dtoa_r+0x3f0>
 8009da2:	e08b      	b.n	8009ebc <_dtoa_r+0x508>
 8009da4:	9b07      	ldr	r3, [sp, #28]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d100      	bne.n	8009dac <_dtoa_r+0x3f8>
 8009daa:	e087      	b.n	8009ebc <_dtoa_r+0x508>
 8009dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	dd45      	ble.n	8009e3e <_dtoa_r+0x48a>
 8009db2:	9b03      	ldr	r3, [sp, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	3b01      	subs	r3, #1
 8009db8:	930e      	str	r3, [sp, #56]	; 0x38
 8009dba:	0030      	movs	r0, r6
 8009dbc:	4bc9      	ldr	r3, [pc, #804]	; (800a0e4 <_dtoa_r+0x730>)
 8009dbe:	0039      	movs	r1, r7
 8009dc0:	f7f7 fc56 	bl	8001670 <__aeabi_dmul>
 8009dc4:	9008      	str	r0, [sp, #32]
 8009dc6:	9109      	str	r1, [sp, #36]	; 0x24
 8009dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dca:	3401      	adds	r4, #1
 8009dcc:	0020      	movs	r0, r4
 8009dce:	9e08      	ldr	r6, [sp, #32]
 8009dd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009dd2:	9312      	str	r3, [sp, #72]	; 0x48
 8009dd4:	f7f8 fae4 	bl	80023a0 <__aeabi_i2d>
 8009dd8:	0032      	movs	r2, r6
 8009dda:	003b      	movs	r3, r7
 8009ddc:	f7f7 fc48 	bl	8001670 <__aeabi_dmul>
 8009de0:	2200      	movs	r2, #0
 8009de2:	4bc1      	ldr	r3, [pc, #772]	; (800a0e8 <_dtoa_r+0x734>)
 8009de4:	f7f6 fcea 	bl	80007bc <__aeabi_dadd>
 8009de8:	4ac0      	ldr	r2, [pc, #768]	; (800a0ec <_dtoa_r+0x738>)
 8009dea:	9014      	str	r0, [sp, #80]	; 0x50
 8009dec:	9115      	str	r1, [sp, #84]	; 0x54
 8009dee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009df0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8009df2:	4694      	mov	ip, r2
 8009df4:	9308      	str	r3, [sp, #32]
 8009df6:	9409      	str	r4, [sp, #36]	; 0x24
 8009df8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dfa:	4463      	add	r3, ip
 8009dfc:	9318      	str	r3, [sp, #96]	; 0x60
 8009dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8009e00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d15e      	bne.n	8009ec4 <_dtoa_r+0x510>
 8009e06:	2200      	movs	r2, #0
 8009e08:	4bb9      	ldr	r3, [pc, #740]	; (800a0f0 <_dtoa_r+0x73c>)
 8009e0a:	0030      	movs	r0, r6
 8009e0c:	0039      	movs	r1, r7
 8009e0e:	f7f7 fef1 	bl	8001bf4 <__aeabi_dsub>
 8009e12:	9a08      	ldr	r2, [sp, #32]
 8009e14:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009e16:	0004      	movs	r4, r0
 8009e18:	000d      	movs	r5, r1
 8009e1a:	f7f6 fb31 	bl	8000480 <__aeabi_dcmpgt>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d000      	beq.n	8009e24 <_dtoa_r+0x470>
 8009e22:	e2b3      	b.n	800a38c <_dtoa_r+0x9d8>
 8009e24:	48b3      	ldr	r0, [pc, #716]	; (800a0f4 <_dtoa_r+0x740>)
 8009e26:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009e28:	4684      	mov	ip, r0
 8009e2a:	4461      	add	r1, ip
 8009e2c:	000b      	movs	r3, r1
 8009e2e:	0020      	movs	r0, r4
 8009e30:	0029      	movs	r1, r5
 8009e32:	9a08      	ldr	r2, [sp, #32]
 8009e34:	f7f6 fb10 	bl	8000458 <__aeabi_dcmplt>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	d000      	beq.n	8009e3e <_dtoa_r+0x48a>
 8009e3c:	e2a3      	b.n	800a386 <_dtoa_r+0x9d2>
 8009e3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e40:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009e42:	9308      	str	r3, [sp, #32]
 8009e44:	9409      	str	r4, [sp, #36]	; 0x24
 8009e46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	da00      	bge.n	8009e4e <_dtoa_r+0x49a>
 8009e4c:	e179      	b.n	800a142 <_dtoa_r+0x78e>
 8009e4e:	9a03      	ldr	r2, [sp, #12]
 8009e50:	2a0e      	cmp	r2, #14
 8009e52:	dd00      	ble.n	8009e56 <_dtoa_r+0x4a2>
 8009e54:	e175      	b.n	800a142 <_dtoa_r+0x78e>
 8009e56:	4ba0      	ldr	r3, [pc, #640]	; (800a0d8 <_dtoa_r+0x724>)
 8009e58:	00d2      	lsls	r2, r2, #3
 8009e5a:	189b      	adds	r3, r3, r2
 8009e5c:	681e      	ldr	r6, [r3, #0]
 8009e5e:	685f      	ldr	r7, [r3, #4]
 8009e60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	db00      	blt.n	8009e68 <_dtoa_r+0x4b4>
 8009e66:	e0e5      	b.n	800a034 <_dtoa_r+0x680>
 8009e68:	9b07      	ldr	r3, [sp, #28]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	dd00      	ble.n	8009e70 <_dtoa_r+0x4bc>
 8009e6e:	e0e1      	b.n	800a034 <_dtoa_r+0x680>
 8009e70:	d000      	beq.n	8009e74 <_dtoa_r+0x4c0>
 8009e72:	e288      	b.n	800a386 <_dtoa_r+0x9d2>
 8009e74:	2200      	movs	r2, #0
 8009e76:	0030      	movs	r0, r6
 8009e78:	0039      	movs	r1, r7
 8009e7a:	4b9d      	ldr	r3, [pc, #628]	; (800a0f0 <_dtoa_r+0x73c>)
 8009e7c:	f7f7 fbf8 	bl	8001670 <__aeabi_dmul>
 8009e80:	9a08      	ldr	r2, [sp, #32]
 8009e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e84:	f7f6 fb06 	bl	8000494 <__aeabi_dcmpge>
 8009e88:	9e07      	ldr	r6, [sp, #28]
 8009e8a:	0037      	movs	r7, r6
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d000      	beq.n	8009e92 <_dtoa_r+0x4de>
 8009e90:	e25f      	b.n	800a352 <_dtoa_r+0x99e>
 8009e92:	9b06      	ldr	r3, [sp, #24]
 8009e94:	9a06      	ldr	r2, [sp, #24]
 8009e96:	3301      	adds	r3, #1
 8009e98:	9308      	str	r3, [sp, #32]
 8009e9a:	2331      	movs	r3, #49	; 0x31
 8009e9c:	7013      	strb	r3, [r2, #0]
 8009e9e:	9b03      	ldr	r3, [sp, #12]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	9303      	str	r3, [sp, #12]
 8009ea4:	e25a      	b.n	800a35c <_dtoa_r+0x9a8>
 8009ea6:	423d      	tst	r5, r7
 8009ea8:	d005      	beq.n	8009eb6 <_dtoa_r+0x502>
 8009eaa:	6832      	ldr	r2, [r6, #0]
 8009eac:	6873      	ldr	r3, [r6, #4]
 8009eae:	f7f7 fbdf 	bl	8001670 <__aeabi_dmul>
 8009eb2:	003b      	movs	r3, r7
 8009eb4:	3401      	adds	r4, #1
 8009eb6:	106d      	asrs	r5, r5, #1
 8009eb8:	3608      	adds	r6, #8
 8009eba:	e75f      	b.n	8009d7c <_dtoa_r+0x3c8>
 8009ebc:	9b03      	ldr	r3, [sp, #12]
 8009ebe:	930e      	str	r3, [sp, #56]	; 0x38
 8009ec0:	9b07      	ldr	r3, [sp, #28]
 8009ec2:	e783      	b.n	8009dcc <_dtoa_r+0x418>
 8009ec4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ec6:	4b84      	ldr	r3, [pc, #528]	; (800a0d8 <_dtoa_r+0x724>)
 8009ec8:	3a01      	subs	r2, #1
 8009eca:	00d2      	lsls	r2, r2, #3
 8009ecc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ece:	189b      	adds	r3, r3, r2
 8009ed0:	9c08      	ldr	r4, [sp, #32]
 8009ed2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	2900      	cmp	r1, #0
 8009eda:	d051      	beq.n	8009f80 <_dtoa_r+0x5cc>
 8009edc:	2000      	movs	r0, #0
 8009ede:	4986      	ldr	r1, [pc, #536]	; (800a0f8 <_dtoa_r+0x744>)
 8009ee0:	f7f6 ffcc 	bl	8000e7c <__aeabi_ddiv>
 8009ee4:	0022      	movs	r2, r4
 8009ee6:	002b      	movs	r3, r5
 8009ee8:	f7f7 fe84 	bl	8001bf4 <__aeabi_dsub>
 8009eec:	9a06      	ldr	r2, [sp, #24]
 8009eee:	0004      	movs	r4, r0
 8009ef0:	4694      	mov	ip, r2
 8009ef2:	000d      	movs	r5, r1
 8009ef4:	9b06      	ldr	r3, [sp, #24]
 8009ef6:	9314      	str	r3, [sp, #80]	; 0x50
 8009ef8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009efa:	4463      	add	r3, ip
 8009efc:	9318      	str	r3, [sp, #96]	; 0x60
 8009efe:	0039      	movs	r1, r7
 8009f00:	0030      	movs	r0, r6
 8009f02:	f7f8 fa17 	bl	8002334 <__aeabi_d2iz>
 8009f06:	9012      	str	r0, [sp, #72]	; 0x48
 8009f08:	f7f8 fa4a 	bl	80023a0 <__aeabi_i2d>
 8009f0c:	0002      	movs	r2, r0
 8009f0e:	000b      	movs	r3, r1
 8009f10:	0030      	movs	r0, r6
 8009f12:	0039      	movs	r1, r7
 8009f14:	f7f7 fe6e 	bl	8001bf4 <__aeabi_dsub>
 8009f18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	9308      	str	r3, [sp, #32]
 8009f20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f22:	0006      	movs	r6, r0
 8009f24:	3330      	adds	r3, #48	; 0x30
 8009f26:	7013      	strb	r3, [r2, #0]
 8009f28:	0022      	movs	r2, r4
 8009f2a:	002b      	movs	r3, r5
 8009f2c:	000f      	movs	r7, r1
 8009f2e:	f7f6 fa93 	bl	8000458 <__aeabi_dcmplt>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	d174      	bne.n	800a020 <_dtoa_r+0x66c>
 8009f36:	0032      	movs	r2, r6
 8009f38:	003b      	movs	r3, r7
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	4968      	ldr	r1, [pc, #416]	; (800a0e0 <_dtoa_r+0x72c>)
 8009f3e:	f7f7 fe59 	bl	8001bf4 <__aeabi_dsub>
 8009f42:	0022      	movs	r2, r4
 8009f44:	002b      	movs	r3, r5
 8009f46:	f7f6 fa87 	bl	8000458 <__aeabi_dcmplt>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d000      	beq.n	8009f50 <_dtoa_r+0x59c>
 8009f4e:	e0d7      	b.n	800a100 <_dtoa_r+0x74c>
 8009f50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009f52:	9a08      	ldr	r2, [sp, #32]
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d100      	bne.n	8009f5a <_dtoa_r+0x5a6>
 8009f58:	e771      	b.n	8009e3e <_dtoa_r+0x48a>
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	0020      	movs	r0, r4
 8009f5e:	0029      	movs	r1, r5
 8009f60:	4b60      	ldr	r3, [pc, #384]	; (800a0e4 <_dtoa_r+0x730>)
 8009f62:	f7f7 fb85 	bl	8001670 <__aeabi_dmul>
 8009f66:	4b5f      	ldr	r3, [pc, #380]	; (800a0e4 <_dtoa_r+0x730>)
 8009f68:	0004      	movs	r4, r0
 8009f6a:	000d      	movs	r5, r1
 8009f6c:	0030      	movs	r0, r6
 8009f6e:	0039      	movs	r1, r7
 8009f70:	2200      	movs	r2, #0
 8009f72:	f7f7 fb7d 	bl	8001670 <__aeabi_dmul>
 8009f76:	9b08      	ldr	r3, [sp, #32]
 8009f78:	0006      	movs	r6, r0
 8009f7a:	000f      	movs	r7, r1
 8009f7c:	9314      	str	r3, [sp, #80]	; 0x50
 8009f7e:	e7be      	b.n	8009efe <_dtoa_r+0x54a>
 8009f80:	0020      	movs	r0, r4
 8009f82:	0029      	movs	r1, r5
 8009f84:	f7f7 fb74 	bl	8001670 <__aeabi_dmul>
 8009f88:	9a06      	ldr	r2, [sp, #24]
 8009f8a:	9b06      	ldr	r3, [sp, #24]
 8009f8c:	4694      	mov	ip, r2
 8009f8e:	9308      	str	r3, [sp, #32]
 8009f90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f92:	9014      	str	r0, [sp, #80]	; 0x50
 8009f94:	9115      	str	r1, [sp, #84]	; 0x54
 8009f96:	4463      	add	r3, ip
 8009f98:	9319      	str	r3, [sp, #100]	; 0x64
 8009f9a:	0030      	movs	r0, r6
 8009f9c:	0039      	movs	r1, r7
 8009f9e:	f7f8 f9c9 	bl	8002334 <__aeabi_d2iz>
 8009fa2:	9018      	str	r0, [sp, #96]	; 0x60
 8009fa4:	f7f8 f9fc 	bl	80023a0 <__aeabi_i2d>
 8009fa8:	0002      	movs	r2, r0
 8009faa:	000b      	movs	r3, r1
 8009fac:	0030      	movs	r0, r6
 8009fae:	0039      	movs	r1, r7
 8009fb0:	f7f7 fe20 	bl	8001bf4 <__aeabi_dsub>
 8009fb4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009fb6:	9b08      	ldr	r3, [sp, #32]
 8009fb8:	3630      	adds	r6, #48	; 0x30
 8009fba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009fbc:	701e      	strb	r6, [r3, #0]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	0004      	movs	r4, r0
 8009fc2:	000d      	movs	r5, r1
 8009fc4:	9308      	str	r3, [sp, #32]
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d12d      	bne.n	800a026 <_dtoa_r+0x672>
 8009fca:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009fcc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009fce:	9a06      	ldr	r2, [sp, #24]
 8009fd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fd2:	4694      	mov	ip, r2
 8009fd4:	4463      	add	r3, ip
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	9308      	str	r3, [sp, #32]
 8009fda:	4b47      	ldr	r3, [pc, #284]	; (800a0f8 <_dtoa_r+0x744>)
 8009fdc:	f7f6 fbee 	bl	80007bc <__aeabi_dadd>
 8009fe0:	0002      	movs	r2, r0
 8009fe2:	000b      	movs	r3, r1
 8009fe4:	0020      	movs	r0, r4
 8009fe6:	0029      	movs	r1, r5
 8009fe8:	f7f6 fa4a 	bl	8000480 <__aeabi_dcmpgt>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d000      	beq.n	8009ff2 <_dtoa_r+0x63e>
 8009ff0:	e086      	b.n	800a100 <_dtoa_r+0x74c>
 8009ff2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	493f      	ldr	r1, [pc, #252]	; (800a0f8 <_dtoa_r+0x744>)
 8009ffa:	f7f7 fdfb 	bl	8001bf4 <__aeabi_dsub>
 8009ffe:	0002      	movs	r2, r0
 800a000:	000b      	movs	r3, r1
 800a002:	0020      	movs	r0, r4
 800a004:	0029      	movs	r1, r5
 800a006:	f7f6 fa27 	bl	8000458 <__aeabi_dcmplt>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d100      	bne.n	800a010 <_dtoa_r+0x65c>
 800a00e:	e716      	b.n	8009e3e <_dtoa_r+0x48a>
 800a010:	9b08      	ldr	r3, [sp, #32]
 800a012:	001a      	movs	r2, r3
 800a014:	3a01      	subs	r2, #1
 800a016:	9208      	str	r2, [sp, #32]
 800a018:	7812      	ldrb	r2, [r2, #0]
 800a01a:	2a30      	cmp	r2, #48	; 0x30
 800a01c:	d0f8      	beq.n	800a010 <_dtoa_r+0x65c>
 800a01e:	9308      	str	r3, [sp, #32]
 800a020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a022:	9303      	str	r3, [sp, #12]
 800a024:	e046      	b.n	800a0b4 <_dtoa_r+0x700>
 800a026:	2200      	movs	r2, #0
 800a028:	4b2e      	ldr	r3, [pc, #184]	; (800a0e4 <_dtoa_r+0x730>)
 800a02a:	f7f7 fb21 	bl	8001670 <__aeabi_dmul>
 800a02e:	0006      	movs	r6, r0
 800a030:	000f      	movs	r7, r1
 800a032:	e7b2      	b.n	8009f9a <_dtoa_r+0x5e6>
 800a034:	9b06      	ldr	r3, [sp, #24]
 800a036:	9a06      	ldr	r2, [sp, #24]
 800a038:	930a      	str	r3, [sp, #40]	; 0x28
 800a03a:	9b07      	ldr	r3, [sp, #28]
 800a03c:	9c08      	ldr	r4, [sp, #32]
 800a03e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a040:	3b01      	subs	r3, #1
 800a042:	189b      	adds	r3, r3, r2
 800a044:	930b      	str	r3, [sp, #44]	; 0x2c
 800a046:	0032      	movs	r2, r6
 800a048:	003b      	movs	r3, r7
 800a04a:	0020      	movs	r0, r4
 800a04c:	0029      	movs	r1, r5
 800a04e:	f7f6 ff15 	bl	8000e7c <__aeabi_ddiv>
 800a052:	f7f8 f96f 	bl	8002334 <__aeabi_d2iz>
 800a056:	9007      	str	r0, [sp, #28]
 800a058:	f7f8 f9a2 	bl	80023a0 <__aeabi_i2d>
 800a05c:	0032      	movs	r2, r6
 800a05e:	003b      	movs	r3, r7
 800a060:	f7f7 fb06 	bl	8001670 <__aeabi_dmul>
 800a064:	0002      	movs	r2, r0
 800a066:	000b      	movs	r3, r1
 800a068:	0020      	movs	r0, r4
 800a06a:	0029      	movs	r1, r5
 800a06c:	f7f7 fdc2 	bl	8001bf4 <__aeabi_dsub>
 800a070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a072:	001a      	movs	r2, r3
 800a074:	3201      	adds	r2, #1
 800a076:	920a      	str	r2, [sp, #40]	; 0x28
 800a078:	9208      	str	r2, [sp, #32]
 800a07a:	9a07      	ldr	r2, [sp, #28]
 800a07c:	3230      	adds	r2, #48	; 0x30
 800a07e:	701a      	strb	r2, [r3, #0]
 800a080:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a082:	429a      	cmp	r2, r3
 800a084:	d14f      	bne.n	800a126 <_dtoa_r+0x772>
 800a086:	0002      	movs	r2, r0
 800a088:	000b      	movs	r3, r1
 800a08a:	f7f6 fb97 	bl	80007bc <__aeabi_dadd>
 800a08e:	0032      	movs	r2, r6
 800a090:	003b      	movs	r3, r7
 800a092:	0004      	movs	r4, r0
 800a094:	000d      	movs	r5, r1
 800a096:	f7f6 f9f3 	bl	8000480 <__aeabi_dcmpgt>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d12e      	bne.n	800a0fc <_dtoa_r+0x748>
 800a09e:	0032      	movs	r2, r6
 800a0a0:	003b      	movs	r3, r7
 800a0a2:	0020      	movs	r0, r4
 800a0a4:	0029      	movs	r1, r5
 800a0a6:	f7f6 f9d1 	bl	800044c <__aeabi_dcmpeq>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d002      	beq.n	800a0b4 <_dtoa_r+0x700>
 800a0ae:	9b07      	ldr	r3, [sp, #28]
 800a0b0:	07de      	lsls	r6, r3, #31
 800a0b2:	d423      	bmi.n	800a0fc <_dtoa_r+0x748>
 800a0b4:	9905      	ldr	r1, [sp, #20]
 800a0b6:	9804      	ldr	r0, [sp, #16]
 800a0b8:	f000 fbd6 	bl	800a868 <_Bfree>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	9a08      	ldr	r2, [sp, #32]
 800a0c0:	7013      	strb	r3, [r2, #0]
 800a0c2:	9b03      	ldr	r3, [sp, #12]
 800a0c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d100      	bne.n	800a0d2 <_dtoa_r+0x71e>
 800a0d0:	e4ba      	b.n	8009a48 <_dtoa_r+0x94>
 800a0d2:	9a08      	ldr	r2, [sp, #32]
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	e4b7      	b.n	8009a48 <_dtoa_r+0x94>
 800a0d8:	0800d340 	.word	0x0800d340
 800a0dc:	0800d318 	.word	0x0800d318
 800a0e0:	3ff00000 	.word	0x3ff00000
 800a0e4:	40240000 	.word	0x40240000
 800a0e8:	401c0000 	.word	0x401c0000
 800a0ec:	fcc00000 	.word	0xfcc00000
 800a0f0:	40140000 	.word	0x40140000
 800a0f4:	7cc00000 	.word	0x7cc00000
 800a0f8:	3fe00000 	.word	0x3fe00000
 800a0fc:	9b03      	ldr	r3, [sp, #12]
 800a0fe:	930e      	str	r3, [sp, #56]	; 0x38
 800a100:	9b08      	ldr	r3, [sp, #32]
 800a102:	9308      	str	r3, [sp, #32]
 800a104:	3b01      	subs	r3, #1
 800a106:	781a      	ldrb	r2, [r3, #0]
 800a108:	2a39      	cmp	r2, #57	; 0x39
 800a10a:	d108      	bne.n	800a11e <_dtoa_r+0x76a>
 800a10c:	9a06      	ldr	r2, [sp, #24]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d1f7      	bne.n	800a102 <_dtoa_r+0x74e>
 800a112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a114:	9906      	ldr	r1, [sp, #24]
 800a116:	3201      	adds	r2, #1
 800a118:	920e      	str	r2, [sp, #56]	; 0x38
 800a11a:	2230      	movs	r2, #48	; 0x30
 800a11c:	700a      	strb	r2, [r1, #0]
 800a11e:	781a      	ldrb	r2, [r3, #0]
 800a120:	3201      	adds	r2, #1
 800a122:	701a      	strb	r2, [r3, #0]
 800a124:	e77c      	b.n	800a020 <_dtoa_r+0x66c>
 800a126:	2200      	movs	r2, #0
 800a128:	4ba9      	ldr	r3, [pc, #676]	; (800a3d0 <_dtoa_r+0xa1c>)
 800a12a:	f7f7 faa1 	bl	8001670 <__aeabi_dmul>
 800a12e:	2200      	movs	r2, #0
 800a130:	2300      	movs	r3, #0
 800a132:	0004      	movs	r4, r0
 800a134:	000d      	movs	r5, r1
 800a136:	f7f6 f989 	bl	800044c <__aeabi_dcmpeq>
 800a13a:	2800      	cmp	r0, #0
 800a13c:	d100      	bne.n	800a140 <_dtoa_r+0x78c>
 800a13e:	e782      	b.n	800a046 <_dtoa_r+0x692>
 800a140:	e7b8      	b.n	800a0b4 <_dtoa_r+0x700>
 800a142:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a144:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a146:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a148:	2f00      	cmp	r7, #0
 800a14a:	d012      	beq.n	800a172 <_dtoa_r+0x7be>
 800a14c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a14e:	2a01      	cmp	r2, #1
 800a150:	dc6e      	bgt.n	800a230 <_dtoa_r+0x87c>
 800a152:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a154:	2a00      	cmp	r2, #0
 800a156:	d065      	beq.n	800a224 <_dtoa_r+0x870>
 800a158:	4a9e      	ldr	r2, [pc, #632]	; (800a3d4 <_dtoa_r+0xa20>)
 800a15a:	189b      	adds	r3, r3, r2
 800a15c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a15e:	2101      	movs	r1, #1
 800a160:	18d2      	adds	r2, r2, r3
 800a162:	920a      	str	r2, [sp, #40]	; 0x28
 800a164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a166:	9804      	ldr	r0, [sp, #16]
 800a168:	18d3      	adds	r3, r2, r3
 800a16a:	930c      	str	r3, [sp, #48]	; 0x30
 800a16c:	f000 fc78 	bl	800aa60 <__i2b>
 800a170:	0007      	movs	r7, r0
 800a172:	2c00      	cmp	r4, #0
 800a174:	d00e      	beq.n	800a194 <_dtoa_r+0x7e0>
 800a176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a178:	2b00      	cmp	r3, #0
 800a17a:	dd0b      	ble.n	800a194 <_dtoa_r+0x7e0>
 800a17c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a17e:	0023      	movs	r3, r4
 800a180:	4294      	cmp	r4, r2
 800a182:	dd00      	ble.n	800a186 <_dtoa_r+0x7d2>
 800a184:	0013      	movs	r3, r2
 800a186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a188:	1ae4      	subs	r4, r4, r3
 800a18a:	1ad2      	subs	r2, r2, r3
 800a18c:	920a      	str	r2, [sp, #40]	; 0x28
 800a18e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	930c      	str	r3, [sp, #48]	; 0x30
 800a194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a196:	2b00      	cmp	r3, #0
 800a198:	d01e      	beq.n	800a1d8 <_dtoa_r+0x824>
 800a19a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d05c      	beq.n	800a25a <_dtoa_r+0x8a6>
 800a1a0:	2d00      	cmp	r5, #0
 800a1a2:	dd10      	ble.n	800a1c6 <_dtoa_r+0x812>
 800a1a4:	0039      	movs	r1, r7
 800a1a6:	002a      	movs	r2, r5
 800a1a8:	9804      	ldr	r0, [sp, #16]
 800a1aa:	f000 fd21 	bl	800abf0 <__pow5mult>
 800a1ae:	9a05      	ldr	r2, [sp, #20]
 800a1b0:	0001      	movs	r1, r0
 800a1b2:	0007      	movs	r7, r0
 800a1b4:	9804      	ldr	r0, [sp, #16]
 800a1b6:	f000 fc6b 	bl	800aa90 <__multiply>
 800a1ba:	0006      	movs	r6, r0
 800a1bc:	9905      	ldr	r1, [sp, #20]
 800a1be:	9804      	ldr	r0, [sp, #16]
 800a1c0:	f000 fb52 	bl	800a868 <_Bfree>
 800a1c4:	9605      	str	r6, [sp, #20]
 800a1c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1c8:	1b5a      	subs	r2, r3, r5
 800a1ca:	42ab      	cmp	r3, r5
 800a1cc:	d004      	beq.n	800a1d8 <_dtoa_r+0x824>
 800a1ce:	9905      	ldr	r1, [sp, #20]
 800a1d0:	9804      	ldr	r0, [sp, #16]
 800a1d2:	f000 fd0d 	bl	800abf0 <__pow5mult>
 800a1d6:	9005      	str	r0, [sp, #20]
 800a1d8:	2101      	movs	r1, #1
 800a1da:	9804      	ldr	r0, [sp, #16]
 800a1dc:	f000 fc40 	bl	800aa60 <__i2b>
 800a1e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a1e2:	0006      	movs	r6, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	dd3a      	ble.n	800a25e <_dtoa_r+0x8aa>
 800a1e8:	001a      	movs	r2, r3
 800a1ea:	0001      	movs	r1, r0
 800a1ec:	9804      	ldr	r0, [sp, #16]
 800a1ee:	f000 fcff 	bl	800abf0 <__pow5mult>
 800a1f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1f4:	0006      	movs	r6, r0
 800a1f6:	2500      	movs	r5, #0
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	dc38      	bgt.n	800a26e <_dtoa_r+0x8ba>
 800a1fc:	2500      	movs	r5, #0
 800a1fe:	9b08      	ldr	r3, [sp, #32]
 800a200:	42ab      	cmp	r3, r5
 800a202:	d130      	bne.n	800a266 <_dtoa_r+0x8b2>
 800a204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a206:	031b      	lsls	r3, r3, #12
 800a208:	42ab      	cmp	r3, r5
 800a20a:	d12c      	bne.n	800a266 <_dtoa_r+0x8b2>
 800a20c:	4b72      	ldr	r3, [pc, #456]	; (800a3d8 <_dtoa_r+0xa24>)
 800a20e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a210:	4213      	tst	r3, r2
 800a212:	d028      	beq.n	800a266 <_dtoa_r+0x8b2>
 800a214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a216:	3501      	adds	r5, #1
 800a218:	3301      	adds	r3, #1
 800a21a:	930a      	str	r3, [sp, #40]	; 0x28
 800a21c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a21e:	3301      	adds	r3, #1
 800a220:	930c      	str	r3, [sp, #48]	; 0x30
 800a222:	e020      	b.n	800a266 <_dtoa_r+0x8b2>
 800a224:	2336      	movs	r3, #54	; 0x36
 800a226:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a228:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a22a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a22c:	1a9b      	subs	r3, r3, r2
 800a22e:	e795      	b.n	800a15c <_dtoa_r+0x7a8>
 800a230:	9b07      	ldr	r3, [sp, #28]
 800a232:	1e5d      	subs	r5, r3, #1
 800a234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a236:	42ab      	cmp	r3, r5
 800a238:	db07      	blt.n	800a24a <_dtoa_r+0x896>
 800a23a:	1b5d      	subs	r5, r3, r5
 800a23c:	9b07      	ldr	r3, [sp, #28]
 800a23e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a240:	2b00      	cmp	r3, #0
 800a242:	da8b      	bge.n	800a15c <_dtoa_r+0x7a8>
 800a244:	1ae4      	subs	r4, r4, r3
 800a246:	2300      	movs	r3, #0
 800a248:	e788      	b.n	800a15c <_dtoa_r+0x7a8>
 800a24a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a24c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a24e:	1aeb      	subs	r3, r5, r3
 800a250:	18d3      	adds	r3, r2, r3
 800a252:	950d      	str	r5, [sp, #52]	; 0x34
 800a254:	9313      	str	r3, [sp, #76]	; 0x4c
 800a256:	2500      	movs	r5, #0
 800a258:	e7f0      	b.n	800a23c <_dtoa_r+0x888>
 800a25a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a25c:	e7b7      	b.n	800a1ce <_dtoa_r+0x81a>
 800a25e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a260:	2500      	movs	r5, #0
 800a262:	2b01      	cmp	r3, #1
 800a264:	ddca      	ble.n	800a1fc <_dtoa_r+0x848>
 800a266:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a268:	2001      	movs	r0, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d008      	beq.n	800a280 <_dtoa_r+0x8cc>
 800a26e:	6933      	ldr	r3, [r6, #16]
 800a270:	3303      	adds	r3, #3
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	18f3      	adds	r3, r6, r3
 800a276:	6858      	ldr	r0, [r3, #4]
 800a278:	f000 fbaa 	bl	800a9d0 <__hi0bits>
 800a27c:	2320      	movs	r3, #32
 800a27e:	1a18      	subs	r0, r3, r0
 800a280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a282:	1818      	adds	r0, r3, r0
 800a284:	0002      	movs	r2, r0
 800a286:	231f      	movs	r3, #31
 800a288:	401a      	ands	r2, r3
 800a28a:	4218      	tst	r0, r3
 800a28c:	d047      	beq.n	800a31e <_dtoa_r+0x96a>
 800a28e:	3301      	adds	r3, #1
 800a290:	1a9b      	subs	r3, r3, r2
 800a292:	2b04      	cmp	r3, #4
 800a294:	dd3f      	ble.n	800a316 <_dtoa_r+0x962>
 800a296:	231c      	movs	r3, #28
 800a298:	1a9b      	subs	r3, r3, r2
 800a29a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a29c:	18e4      	adds	r4, r4, r3
 800a29e:	18d2      	adds	r2, r2, r3
 800a2a0:	920a      	str	r2, [sp, #40]	; 0x28
 800a2a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2a4:	18d3      	adds	r3, r2, r3
 800a2a6:	930c      	str	r3, [sp, #48]	; 0x30
 800a2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	dd05      	ble.n	800a2ba <_dtoa_r+0x906>
 800a2ae:	001a      	movs	r2, r3
 800a2b0:	9905      	ldr	r1, [sp, #20]
 800a2b2:	9804      	ldr	r0, [sp, #16]
 800a2b4:	f000 fcf8 	bl	800aca8 <__lshift>
 800a2b8:	9005      	str	r0, [sp, #20]
 800a2ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	dd05      	ble.n	800a2cc <_dtoa_r+0x918>
 800a2c0:	0031      	movs	r1, r6
 800a2c2:	001a      	movs	r2, r3
 800a2c4:	9804      	ldr	r0, [sp, #16]
 800a2c6:	f000 fcef 	bl	800aca8 <__lshift>
 800a2ca:	0006      	movs	r6, r0
 800a2cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d027      	beq.n	800a322 <_dtoa_r+0x96e>
 800a2d2:	0031      	movs	r1, r6
 800a2d4:	9805      	ldr	r0, [sp, #20]
 800a2d6:	f000 fd55 	bl	800ad84 <__mcmp>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	da21      	bge.n	800a322 <_dtoa_r+0x96e>
 800a2de:	9b03      	ldr	r3, [sp, #12]
 800a2e0:	220a      	movs	r2, #10
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	9303      	str	r3, [sp, #12]
 800a2e6:	9905      	ldr	r1, [sp, #20]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9804      	ldr	r0, [sp, #16]
 800a2ec:	f000 fae0 	bl	800a8b0 <__multadd>
 800a2f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2f2:	9005      	str	r0, [sp, #20]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d100      	bne.n	800a2fa <_dtoa_r+0x946>
 800a2f8:	e15d      	b.n	800a5b6 <_dtoa_r+0xc02>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	0039      	movs	r1, r7
 800a2fe:	220a      	movs	r2, #10
 800a300:	9804      	ldr	r0, [sp, #16]
 800a302:	f000 fad5 	bl	800a8b0 <__multadd>
 800a306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a308:	0007      	movs	r7, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	dc49      	bgt.n	800a3a2 <_dtoa_r+0x9ee>
 800a30e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a310:	2b02      	cmp	r3, #2
 800a312:	dc0e      	bgt.n	800a332 <_dtoa_r+0x97e>
 800a314:	e045      	b.n	800a3a2 <_dtoa_r+0x9ee>
 800a316:	2b04      	cmp	r3, #4
 800a318:	d0c6      	beq.n	800a2a8 <_dtoa_r+0x8f4>
 800a31a:	331c      	adds	r3, #28
 800a31c:	e7bd      	b.n	800a29a <_dtoa_r+0x8e6>
 800a31e:	0013      	movs	r3, r2
 800a320:	e7fb      	b.n	800a31a <_dtoa_r+0x966>
 800a322:	9b07      	ldr	r3, [sp, #28]
 800a324:	2b00      	cmp	r3, #0
 800a326:	dc36      	bgt.n	800a396 <_dtoa_r+0x9e2>
 800a328:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	dd33      	ble.n	800a396 <_dtoa_r+0x9e2>
 800a32e:	9b07      	ldr	r3, [sp, #28]
 800a330:	930b      	str	r3, [sp, #44]	; 0x2c
 800a332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10c      	bne.n	800a352 <_dtoa_r+0x99e>
 800a338:	0031      	movs	r1, r6
 800a33a:	2205      	movs	r2, #5
 800a33c:	9804      	ldr	r0, [sp, #16]
 800a33e:	f000 fab7 	bl	800a8b0 <__multadd>
 800a342:	0006      	movs	r6, r0
 800a344:	0001      	movs	r1, r0
 800a346:	9805      	ldr	r0, [sp, #20]
 800a348:	f000 fd1c 	bl	800ad84 <__mcmp>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	dd00      	ble.n	800a352 <_dtoa_r+0x99e>
 800a350:	e59f      	b.n	8009e92 <_dtoa_r+0x4de>
 800a352:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a354:	43db      	mvns	r3, r3
 800a356:	9303      	str	r3, [sp, #12]
 800a358:	9b06      	ldr	r3, [sp, #24]
 800a35a:	9308      	str	r3, [sp, #32]
 800a35c:	2500      	movs	r5, #0
 800a35e:	0031      	movs	r1, r6
 800a360:	9804      	ldr	r0, [sp, #16]
 800a362:	f000 fa81 	bl	800a868 <_Bfree>
 800a366:	2f00      	cmp	r7, #0
 800a368:	d100      	bne.n	800a36c <_dtoa_r+0x9b8>
 800a36a:	e6a3      	b.n	800a0b4 <_dtoa_r+0x700>
 800a36c:	2d00      	cmp	r5, #0
 800a36e:	d005      	beq.n	800a37c <_dtoa_r+0x9c8>
 800a370:	42bd      	cmp	r5, r7
 800a372:	d003      	beq.n	800a37c <_dtoa_r+0x9c8>
 800a374:	0029      	movs	r1, r5
 800a376:	9804      	ldr	r0, [sp, #16]
 800a378:	f000 fa76 	bl	800a868 <_Bfree>
 800a37c:	0039      	movs	r1, r7
 800a37e:	9804      	ldr	r0, [sp, #16]
 800a380:	f000 fa72 	bl	800a868 <_Bfree>
 800a384:	e696      	b.n	800a0b4 <_dtoa_r+0x700>
 800a386:	2600      	movs	r6, #0
 800a388:	0037      	movs	r7, r6
 800a38a:	e7e2      	b.n	800a352 <_dtoa_r+0x99e>
 800a38c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a38e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a390:	9303      	str	r3, [sp, #12]
 800a392:	0037      	movs	r7, r6
 800a394:	e57d      	b.n	8009e92 <_dtoa_r+0x4de>
 800a396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d100      	bne.n	800a39e <_dtoa_r+0x9ea>
 800a39c:	e0c3      	b.n	800a526 <_dtoa_r+0xb72>
 800a39e:	9b07      	ldr	r3, [sp, #28]
 800a3a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3a2:	2c00      	cmp	r4, #0
 800a3a4:	dd05      	ble.n	800a3b2 <_dtoa_r+0x9fe>
 800a3a6:	0039      	movs	r1, r7
 800a3a8:	0022      	movs	r2, r4
 800a3aa:	9804      	ldr	r0, [sp, #16]
 800a3ac:	f000 fc7c 	bl	800aca8 <__lshift>
 800a3b0:	0007      	movs	r7, r0
 800a3b2:	0038      	movs	r0, r7
 800a3b4:	2d00      	cmp	r5, #0
 800a3b6:	d024      	beq.n	800a402 <_dtoa_r+0xa4e>
 800a3b8:	6879      	ldr	r1, [r7, #4]
 800a3ba:	9804      	ldr	r0, [sp, #16]
 800a3bc:	f000 fa10 	bl	800a7e0 <_Balloc>
 800a3c0:	1e04      	subs	r4, r0, #0
 800a3c2:	d111      	bne.n	800a3e8 <_dtoa_r+0xa34>
 800a3c4:	0022      	movs	r2, r4
 800a3c6:	4b05      	ldr	r3, [pc, #20]	; (800a3dc <_dtoa_r+0xa28>)
 800a3c8:	4805      	ldr	r0, [pc, #20]	; (800a3e0 <_dtoa_r+0xa2c>)
 800a3ca:	4906      	ldr	r1, [pc, #24]	; (800a3e4 <_dtoa_r+0xa30>)
 800a3cc:	f7ff fb07 	bl	80099de <_dtoa_r+0x2a>
 800a3d0:	40240000 	.word	0x40240000
 800a3d4:	00000433 	.word	0x00000433
 800a3d8:	7ff00000 	.word	0x7ff00000
 800a3dc:	0800d2a9 	.word	0x0800d2a9
 800a3e0:	0800d251 	.word	0x0800d251
 800a3e4:	000002ef 	.word	0x000002ef
 800a3e8:	0039      	movs	r1, r7
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	310c      	adds	r1, #12
 800a3ee:	3202      	adds	r2, #2
 800a3f0:	0092      	lsls	r2, r2, #2
 800a3f2:	300c      	adds	r0, #12
 800a3f4:	f001 ffb2 	bl	800c35c <memcpy>
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	0021      	movs	r1, r4
 800a3fc:	9804      	ldr	r0, [sp, #16]
 800a3fe:	f000 fc53 	bl	800aca8 <__lshift>
 800a402:	9b06      	ldr	r3, [sp, #24]
 800a404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a406:	9307      	str	r3, [sp, #28]
 800a408:	3b01      	subs	r3, #1
 800a40a:	189b      	adds	r3, r3, r2
 800a40c:	2201      	movs	r2, #1
 800a40e:	003d      	movs	r5, r7
 800a410:	0007      	movs	r7, r0
 800a412:	930e      	str	r3, [sp, #56]	; 0x38
 800a414:	9b08      	ldr	r3, [sp, #32]
 800a416:	4013      	ands	r3, r2
 800a418:	930d      	str	r3, [sp, #52]	; 0x34
 800a41a:	0031      	movs	r1, r6
 800a41c:	9805      	ldr	r0, [sp, #20]
 800a41e:	f7ff fa39 	bl	8009894 <quorem>
 800a422:	0029      	movs	r1, r5
 800a424:	0004      	movs	r4, r0
 800a426:	900b      	str	r0, [sp, #44]	; 0x2c
 800a428:	9805      	ldr	r0, [sp, #20]
 800a42a:	f000 fcab 	bl	800ad84 <__mcmp>
 800a42e:	003a      	movs	r2, r7
 800a430:	900c      	str	r0, [sp, #48]	; 0x30
 800a432:	0031      	movs	r1, r6
 800a434:	9804      	ldr	r0, [sp, #16]
 800a436:	f000 fcc1 	bl	800adbc <__mdiff>
 800a43a:	2201      	movs	r2, #1
 800a43c:	68c3      	ldr	r3, [r0, #12]
 800a43e:	3430      	adds	r4, #48	; 0x30
 800a440:	9008      	str	r0, [sp, #32]
 800a442:	920a      	str	r2, [sp, #40]	; 0x28
 800a444:	2b00      	cmp	r3, #0
 800a446:	d104      	bne.n	800a452 <_dtoa_r+0xa9e>
 800a448:	0001      	movs	r1, r0
 800a44a:	9805      	ldr	r0, [sp, #20]
 800a44c:	f000 fc9a 	bl	800ad84 <__mcmp>
 800a450:	900a      	str	r0, [sp, #40]	; 0x28
 800a452:	9908      	ldr	r1, [sp, #32]
 800a454:	9804      	ldr	r0, [sp, #16]
 800a456:	f000 fa07 	bl	800a868 <_Bfree>
 800a45a:	9b07      	ldr	r3, [sp, #28]
 800a45c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a45e:	3301      	adds	r3, #1
 800a460:	9308      	str	r3, [sp, #32]
 800a462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a464:	4313      	orrs	r3, r2
 800a466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a468:	4313      	orrs	r3, r2
 800a46a:	d109      	bne.n	800a480 <_dtoa_r+0xacc>
 800a46c:	2c39      	cmp	r4, #57	; 0x39
 800a46e:	d022      	beq.n	800a4b6 <_dtoa_r+0xb02>
 800a470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a472:	2b00      	cmp	r3, #0
 800a474:	dd01      	ble.n	800a47a <_dtoa_r+0xac6>
 800a476:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a478:	3431      	adds	r4, #49	; 0x31
 800a47a:	9b07      	ldr	r3, [sp, #28]
 800a47c:	701c      	strb	r4, [r3, #0]
 800a47e:	e76e      	b.n	800a35e <_dtoa_r+0x9aa>
 800a480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a482:	2b00      	cmp	r3, #0
 800a484:	db04      	blt.n	800a490 <_dtoa_r+0xadc>
 800a486:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a488:	4313      	orrs	r3, r2
 800a48a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a48c:	4313      	orrs	r3, r2
 800a48e:	d11e      	bne.n	800a4ce <_dtoa_r+0xb1a>
 800a490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a492:	2b00      	cmp	r3, #0
 800a494:	ddf1      	ble.n	800a47a <_dtoa_r+0xac6>
 800a496:	9905      	ldr	r1, [sp, #20]
 800a498:	2201      	movs	r2, #1
 800a49a:	9804      	ldr	r0, [sp, #16]
 800a49c:	f000 fc04 	bl	800aca8 <__lshift>
 800a4a0:	0031      	movs	r1, r6
 800a4a2:	9005      	str	r0, [sp, #20]
 800a4a4:	f000 fc6e 	bl	800ad84 <__mcmp>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	dc02      	bgt.n	800a4b2 <_dtoa_r+0xafe>
 800a4ac:	d1e5      	bne.n	800a47a <_dtoa_r+0xac6>
 800a4ae:	07e3      	lsls	r3, r4, #31
 800a4b0:	d5e3      	bpl.n	800a47a <_dtoa_r+0xac6>
 800a4b2:	2c39      	cmp	r4, #57	; 0x39
 800a4b4:	d1df      	bne.n	800a476 <_dtoa_r+0xac2>
 800a4b6:	2339      	movs	r3, #57	; 0x39
 800a4b8:	9a07      	ldr	r2, [sp, #28]
 800a4ba:	7013      	strb	r3, [r2, #0]
 800a4bc:	9b08      	ldr	r3, [sp, #32]
 800a4be:	9308      	str	r3, [sp, #32]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	781a      	ldrb	r2, [r3, #0]
 800a4c4:	2a39      	cmp	r2, #57	; 0x39
 800a4c6:	d063      	beq.n	800a590 <_dtoa_r+0xbdc>
 800a4c8:	3201      	adds	r2, #1
 800a4ca:	701a      	strb	r2, [r3, #0]
 800a4cc:	e747      	b.n	800a35e <_dtoa_r+0x9aa>
 800a4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	dd03      	ble.n	800a4dc <_dtoa_r+0xb28>
 800a4d4:	2c39      	cmp	r4, #57	; 0x39
 800a4d6:	d0ee      	beq.n	800a4b6 <_dtoa_r+0xb02>
 800a4d8:	3401      	adds	r4, #1
 800a4da:	e7ce      	b.n	800a47a <_dtoa_r+0xac6>
 800a4dc:	9b07      	ldr	r3, [sp, #28]
 800a4de:	9a07      	ldr	r2, [sp, #28]
 800a4e0:	701c      	strb	r4, [r3, #0]
 800a4e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d03e      	beq.n	800a566 <_dtoa_r+0xbb2>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	220a      	movs	r2, #10
 800a4ec:	9905      	ldr	r1, [sp, #20]
 800a4ee:	9804      	ldr	r0, [sp, #16]
 800a4f0:	f000 f9de 	bl	800a8b0 <__multadd>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9005      	str	r0, [sp, #20]
 800a4f8:	220a      	movs	r2, #10
 800a4fa:	0029      	movs	r1, r5
 800a4fc:	9804      	ldr	r0, [sp, #16]
 800a4fe:	42bd      	cmp	r5, r7
 800a500:	d106      	bne.n	800a510 <_dtoa_r+0xb5c>
 800a502:	f000 f9d5 	bl	800a8b0 <__multadd>
 800a506:	0005      	movs	r5, r0
 800a508:	0007      	movs	r7, r0
 800a50a:	9b08      	ldr	r3, [sp, #32]
 800a50c:	9307      	str	r3, [sp, #28]
 800a50e:	e784      	b.n	800a41a <_dtoa_r+0xa66>
 800a510:	f000 f9ce 	bl	800a8b0 <__multadd>
 800a514:	0039      	movs	r1, r7
 800a516:	0005      	movs	r5, r0
 800a518:	2300      	movs	r3, #0
 800a51a:	220a      	movs	r2, #10
 800a51c:	9804      	ldr	r0, [sp, #16]
 800a51e:	f000 f9c7 	bl	800a8b0 <__multadd>
 800a522:	0007      	movs	r7, r0
 800a524:	e7f1      	b.n	800a50a <_dtoa_r+0xb56>
 800a526:	9b07      	ldr	r3, [sp, #28]
 800a528:	930b      	str	r3, [sp, #44]	; 0x2c
 800a52a:	2500      	movs	r5, #0
 800a52c:	0031      	movs	r1, r6
 800a52e:	9805      	ldr	r0, [sp, #20]
 800a530:	f7ff f9b0 	bl	8009894 <quorem>
 800a534:	9b06      	ldr	r3, [sp, #24]
 800a536:	3030      	adds	r0, #48	; 0x30
 800a538:	5558      	strb	r0, [r3, r5]
 800a53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a53c:	3501      	adds	r5, #1
 800a53e:	0004      	movs	r4, r0
 800a540:	42ab      	cmp	r3, r5
 800a542:	dd07      	ble.n	800a554 <_dtoa_r+0xba0>
 800a544:	2300      	movs	r3, #0
 800a546:	220a      	movs	r2, #10
 800a548:	9905      	ldr	r1, [sp, #20]
 800a54a:	9804      	ldr	r0, [sp, #16]
 800a54c:	f000 f9b0 	bl	800a8b0 <__multadd>
 800a550:	9005      	str	r0, [sp, #20]
 800a552:	e7eb      	b.n	800a52c <_dtoa_r+0xb78>
 800a554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a556:	2301      	movs	r3, #1
 800a558:	2a00      	cmp	r2, #0
 800a55a:	dd00      	ble.n	800a55e <_dtoa_r+0xbaa>
 800a55c:	0013      	movs	r3, r2
 800a55e:	2500      	movs	r5, #0
 800a560:	9a06      	ldr	r2, [sp, #24]
 800a562:	18d3      	adds	r3, r2, r3
 800a564:	9308      	str	r3, [sp, #32]
 800a566:	9905      	ldr	r1, [sp, #20]
 800a568:	2201      	movs	r2, #1
 800a56a:	9804      	ldr	r0, [sp, #16]
 800a56c:	f000 fb9c 	bl	800aca8 <__lshift>
 800a570:	0031      	movs	r1, r6
 800a572:	9005      	str	r0, [sp, #20]
 800a574:	f000 fc06 	bl	800ad84 <__mcmp>
 800a578:	2800      	cmp	r0, #0
 800a57a:	dc9f      	bgt.n	800a4bc <_dtoa_r+0xb08>
 800a57c:	d101      	bne.n	800a582 <_dtoa_r+0xbce>
 800a57e:	07e4      	lsls	r4, r4, #31
 800a580:	d49c      	bmi.n	800a4bc <_dtoa_r+0xb08>
 800a582:	9b08      	ldr	r3, [sp, #32]
 800a584:	9308      	str	r3, [sp, #32]
 800a586:	3b01      	subs	r3, #1
 800a588:	781a      	ldrb	r2, [r3, #0]
 800a58a:	2a30      	cmp	r2, #48	; 0x30
 800a58c:	d0fa      	beq.n	800a584 <_dtoa_r+0xbd0>
 800a58e:	e6e6      	b.n	800a35e <_dtoa_r+0x9aa>
 800a590:	9a06      	ldr	r2, [sp, #24]
 800a592:	429a      	cmp	r2, r3
 800a594:	d193      	bne.n	800a4be <_dtoa_r+0xb0a>
 800a596:	9b03      	ldr	r3, [sp, #12]
 800a598:	3301      	adds	r3, #1
 800a59a:	9303      	str	r3, [sp, #12]
 800a59c:	2331      	movs	r3, #49	; 0x31
 800a59e:	7013      	strb	r3, [r2, #0]
 800a5a0:	e6dd      	b.n	800a35e <_dtoa_r+0x9aa>
 800a5a2:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <_dtoa_r+0xc14>)
 800a5a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a5a6:	9306      	str	r3, [sp, #24]
 800a5a8:	4b08      	ldr	r3, [pc, #32]	; (800a5cc <_dtoa_r+0xc18>)
 800a5aa:	2a00      	cmp	r2, #0
 800a5ac:	d001      	beq.n	800a5b2 <_dtoa_r+0xbfe>
 800a5ae:	f7ff fa49 	bl	8009a44 <_dtoa_r+0x90>
 800a5b2:	f7ff fa49 	bl	8009a48 <_dtoa_r+0x94>
 800a5b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	dcb6      	bgt.n	800a52a <_dtoa_r+0xb76>
 800a5bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	dd00      	ble.n	800a5c4 <_dtoa_r+0xc10>
 800a5c2:	e6b6      	b.n	800a332 <_dtoa_r+0x97e>
 800a5c4:	e7b1      	b.n	800a52a <_dtoa_r+0xb76>
 800a5c6:	46c0      	nop			; (mov r8, r8)
 800a5c8:	0800d22d 	.word	0x0800d22d
 800a5cc:	0800d235 	.word	0x0800d235

0800a5d0 <_free_r>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	0005      	movs	r5, r0
 800a5d4:	2900      	cmp	r1, #0
 800a5d6:	d010      	beq.n	800a5fa <_free_r+0x2a>
 800a5d8:	1f0c      	subs	r4, r1, #4
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	da00      	bge.n	800a5e2 <_free_r+0x12>
 800a5e0:	18e4      	adds	r4, r4, r3
 800a5e2:	0028      	movs	r0, r5
 800a5e4:	f000 f8ec 	bl	800a7c0 <__malloc_lock>
 800a5e8:	4a1d      	ldr	r2, [pc, #116]	; (800a660 <_free_r+0x90>)
 800a5ea:	6813      	ldr	r3, [r2, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d105      	bne.n	800a5fc <_free_r+0x2c>
 800a5f0:	6063      	str	r3, [r4, #4]
 800a5f2:	6014      	str	r4, [r2, #0]
 800a5f4:	0028      	movs	r0, r5
 800a5f6:	f000 f8eb 	bl	800a7d0 <__malloc_unlock>
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}
 800a5fc:	42a3      	cmp	r3, r4
 800a5fe:	d908      	bls.n	800a612 <_free_r+0x42>
 800a600:	6820      	ldr	r0, [r4, #0]
 800a602:	1821      	adds	r1, r4, r0
 800a604:	428b      	cmp	r3, r1
 800a606:	d1f3      	bne.n	800a5f0 <_free_r+0x20>
 800a608:	6819      	ldr	r1, [r3, #0]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	1809      	adds	r1, r1, r0
 800a60e:	6021      	str	r1, [r4, #0]
 800a610:	e7ee      	b.n	800a5f0 <_free_r+0x20>
 800a612:	001a      	movs	r2, r3
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d001      	beq.n	800a61e <_free_r+0x4e>
 800a61a:	42a3      	cmp	r3, r4
 800a61c:	d9f9      	bls.n	800a612 <_free_r+0x42>
 800a61e:	6811      	ldr	r1, [r2, #0]
 800a620:	1850      	adds	r0, r2, r1
 800a622:	42a0      	cmp	r0, r4
 800a624:	d10b      	bne.n	800a63e <_free_r+0x6e>
 800a626:	6820      	ldr	r0, [r4, #0]
 800a628:	1809      	adds	r1, r1, r0
 800a62a:	1850      	adds	r0, r2, r1
 800a62c:	6011      	str	r1, [r2, #0]
 800a62e:	4283      	cmp	r3, r0
 800a630:	d1e0      	bne.n	800a5f4 <_free_r+0x24>
 800a632:	6818      	ldr	r0, [r3, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	1841      	adds	r1, r0, r1
 800a638:	6011      	str	r1, [r2, #0]
 800a63a:	6053      	str	r3, [r2, #4]
 800a63c:	e7da      	b.n	800a5f4 <_free_r+0x24>
 800a63e:	42a0      	cmp	r0, r4
 800a640:	d902      	bls.n	800a648 <_free_r+0x78>
 800a642:	230c      	movs	r3, #12
 800a644:	602b      	str	r3, [r5, #0]
 800a646:	e7d5      	b.n	800a5f4 <_free_r+0x24>
 800a648:	6820      	ldr	r0, [r4, #0]
 800a64a:	1821      	adds	r1, r4, r0
 800a64c:	428b      	cmp	r3, r1
 800a64e:	d103      	bne.n	800a658 <_free_r+0x88>
 800a650:	6819      	ldr	r1, [r3, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	1809      	adds	r1, r1, r0
 800a656:	6021      	str	r1, [r4, #0]
 800a658:	6063      	str	r3, [r4, #4]
 800a65a:	6054      	str	r4, [r2, #4]
 800a65c:	e7ca      	b.n	800a5f4 <_free_r+0x24>
 800a65e:	46c0      	nop			; (mov r8, r8)
 800a660:	2000096c 	.word	0x2000096c

0800a664 <malloc>:
 800a664:	b510      	push	{r4, lr}
 800a666:	4b03      	ldr	r3, [pc, #12]	; (800a674 <malloc+0x10>)
 800a668:	0001      	movs	r1, r0
 800a66a:	6818      	ldr	r0, [r3, #0]
 800a66c:	f000 f826 	bl	800a6bc <_malloc_r>
 800a670:	bd10      	pop	{r4, pc}
 800a672:	46c0      	nop			; (mov r8, r8)
 800a674:	20000064 	.word	0x20000064

0800a678 <sbrk_aligned>:
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	4e0f      	ldr	r6, [pc, #60]	; (800a6b8 <sbrk_aligned+0x40>)
 800a67c:	000d      	movs	r5, r1
 800a67e:	6831      	ldr	r1, [r6, #0]
 800a680:	0004      	movs	r4, r0
 800a682:	2900      	cmp	r1, #0
 800a684:	d102      	bne.n	800a68c <sbrk_aligned+0x14>
 800a686:	f001 fe57 	bl	800c338 <_sbrk_r>
 800a68a:	6030      	str	r0, [r6, #0]
 800a68c:	0029      	movs	r1, r5
 800a68e:	0020      	movs	r0, r4
 800a690:	f001 fe52 	bl	800c338 <_sbrk_r>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d00a      	beq.n	800a6ae <sbrk_aligned+0x36>
 800a698:	2303      	movs	r3, #3
 800a69a:	1cc5      	adds	r5, r0, #3
 800a69c:	439d      	bics	r5, r3
 800a69e:	42a8      	cmp	r0, r5
 800a6a0:	d007      	beq.n	800a6b2 <sbrk_aligned+0x3a>
 800a6a2:	1a29      	subs	r1, r5, r0
 800a6a4:	0020      	movs	r0, r4
 800a6a6:	f001 fe47 	bl	800c338 <_sbrk_r>
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	d101      	bne.n	800a6b2 <sbrk_aligned+0x3a>
 800a6ae:	2501      	movs	r5, #1
 800a6b0:	426d      	negs	r5, r5
 800a6b2:	0028      	movs	r0, r5
 800a6b4:	bd70      	pop	{r4, r5, r6, pc}
 800a6b6:	46c0      	nop			; (mov r8, r8)
 800a6b8:	20000970 	.word	0x20000970

0800a6bc <_malloc_r>:
 800a6bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6be:	2203      	movs	r2, #3
 800a6c0:	1ccb      	adds	r3, r1, #3
 800a6c2:	4393      	bics	r3, r2
 800a6c4:	3308      	adds	r3, #8
 800a6c6:	0006      	movs	r6, r0
 800a6c8:	001f      	movs	r7, r3
 800a6ca:	2b0c      	cmp	r3, #12
 800a6cc:	d238      	bcs.n	800a740 <_malloc_r+0x84>
 800a6ce:	270c      	movs	r7, #12
 800a6d0:	42b9      	cmp	r1, r7
 800a6d2:	d837      	bhi.n	800a744 <_malloc_r+0x88>
 800a6d4:	0030      	movs	r0, r6
 800a6d6:	f000 f873 	bl	800a7c0 <__malloc_lock>
 800a6da:	4b38      	ldr	r3, [pc, #224]	; (800a7bc <_malloc_r+0x100>)
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	001c      	movs	r4, r3
 800a6e2:	2c00      	cmp	r4, #0
 800a6e4:	d133      	bne.n	800a74e <_malloc_r+0x92>
 800a6e6:	0039      	movs	r1, r7
 800a6e8:	0030      	movs	r0, r6
 800a6ea:	f7ff ffc5 	bl	800a678 <sbrk_aligned>
 800a6ee:	0004      	movs	r4, r0
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	d15e      	bne.n	800a7b2 <_malloc_r+0xf6>
 800a6f4:	9b00      	ldr	r3, [sp, #0]
 800a6f6:	681c      	ldr	r4, [r3, #0]
 800a6f8:	0025      	movs	r5, r4
 800a6fa:	2d00      	cmp	r5, #0
 800a6fc:	d14e      	bne.n	800a79c <_malloc_r+0xe0>
 800a6fe:	2c00      	cmp	r4, #0
 800a700:	d051      	beq.n	800a7a6 <_malloc_r+0xea>
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	0029      	movs	r1, r5
 800a706:	18e3      	adds	r3, r4, r3
 800a708:	0030      	movs	r0, r6
 800a70a:	9301      	str	r3, [sp, #4]
 800a70c:	f001 fe14 	bl	800c338 <_sbrk_r>
 800a710:	9b01      	ldr	r3, [sp, #4]
 800a712:	4283      	cmp	r3, r0
 800a714:	d147      	bne.n	800a7a6 <_malloc_r+0xea>
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	0030      	movs	r0, r6
 800a71a:	1aff      	subs	r7, r7, r3
 800a71c:	0039      	movs	r1, r7
 800a71e:	f7ff ffab 	bl	800a678 <sbrk_aligned>
 800a722:	3001      	adds	r0, #1
 800a724:	d03f      	beq.n	800a7a6 <_malloc_r+0xea>
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	19db      	adds	r3, r3, r7
 800a72a:	6023      	str	r3, [r4, #0]
 800a72c:	9b00      	ldr	r3, [sp, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d040      	beq.n	800a7b6 <_malloc_r+0xfa>
 800a734:	685a      	ldr	r2, [r3, #4]
 800a736:	42a2      	cmp	r2, r4
 800a738:	d133      	bne.n	800a7a2 <_malloc_r+0xe6>
 800a73a:	2200      	movs	r2, #0
 800a73c:	605a      	str	r2, [r3, #4]
 800a73e:	e014      	b.n	800a76a <_malloc_r+0xae>
 800a740:	2b00      	cmp	r3, #0
 800a742:	dac5      	bge.n	800a6d0 <_malloc_r+0x14>
 800a744:	230c      	movs	r3, #12
 800a746:	2500      	movs	r5, #0
 800a748:	6033      	str	r3, [r6, #0]
 800a74a:	0028      	movs	r0, r5
 800a74c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a74e:	6821      	ldr	r1, [r4, #0]
 800a750:	1bc9      	subs	r1, r1, r7
 800a752:	d420      	bmi.n	800a796 <_malloc_r+0xda>
 800a754:	290b      	cmp	r1, #11
 800a756:	d918      	bls.n	800a78a <_malloc_r+0xce>
 800a758:	19e2      	adds	r2, r4, r7
 800a75a:	6027      	str	r7, [r4, #0]
 800a75c:	42a3      	cmp	r3, r4
 800a75e:	d112      	bne.n	800a786 <_malloc_r+0xca>
 800a760:	9b00      	ldr	r3, [sp, #0]
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	6863      	ldr	r3, [r4, #4]
 800a766:	6011      	str	r1, [r2, #0]
 800a768:	6053      	str	r3, [r2, #4]
 800a76a:	0030      	movs	r0, r6
 800a76c:	0025      	movs	r5, r4
 800a76e:	f000 f82f 	bl	800a7d0 <__malloc_unlock>
 800a772:	2207      	movs	r2, #7
 800a774:	350b      	adds	r5, #11
 800a776:	1d23      	adds	r3, r4, #4
 800a778:	4395      	bics	r5, r2
 800a77a:	1aea      	subs	r2, r5, r3
 800a77c:	429d      	cmp	r5, r3
 800a77e:	d0e4      	beq.n	800a74a <_malloc_r+0x8e>
 800a780:	1b5b      	subs	r3, r3, r5
 800a782:	50a3      	str	r3, [r4, r2]
 800a784:	e7e1      	b.n	800a74a <_malloc_r+0x8e>
 800a786:	605a      	str	r2, [r3, #4]
 800a788:	e7ec      	b.n	800a764 <_malloc_r+0xa8>
 800a78a:	6862      	ldr	r2, [r4, #4]
 800a78c:	42a3      	cmp	r3, r4
 800a78e:	d1d5      	bne.n	800a73c <_malloc_r+0x80>
 800a790:	9b00      	ldr	r3, [sp, #0]
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	e7e9      	b.n	800a76a <_malloc_r+0xae>
 800a796:	0023      	movs	r3, r4
 800a798:	6864      	ldr	r4, [r4, #4]
 800a79a:	e7a2      	b.n	800a6e2 <_malloc_r+0x26>
 800a79c:	002c      	movs	r4, r5
 800a79e:	686d      	ldr	r5, [r5, #4]
 800a7a0:	e7ab      	b.n	800a6fa <_malloc_r+0x3e>
 800a7a2:	0013      	movs	r3, r2
 800a7a4:	e7c4      	b.n	800a730 <_malloc_r+0x74>
 800a7a6:	230c      	movs	r3, #12
 800a7a8:	0030      	movs	r0, r6
 800a7aa:	6033      	str	r3, [r6, #0]
 800a7ac:	f000 f810 	bl	800a7d0 <__malloc_unlock>
 800a7b0:	e7cb      	b.n	800a74a <_malloc_r+0x8e>
 800a7b2:	6027      	str	r7, [r4, #0]
 800a7b4:	e7d9      	b.n	800a76a <_malloc_r+0xae>
 800a7b6:	605b      	str	r3, [r3, #4]
 800a7b8:	deff      	udf	#255	; 0xff
 800a7ba:	46c0      	nop			; (mov r8, r8)
 800a7bc:	2000096c 	.word	0x2000096c

0800a7c0 <__malloc_lock>:
 800a7c0:	b510      	push	{r4, lr}
 800a7c2:	4802      	ldr	r0, [pc, #8]	; (800a7cc <__malloc_lock+0xc>)
 800a7c4:	f7ff f855 	bl	8009872 <__retarget_lock_acquire_recursive>
 800a7c8:	bd10      	pop	{r4, pc}
 800a7ca:	46c0      	nop			; (mov r8, r8)
 800a7cc:	20000968 	.word	0x20000968

0800a7d0 <__malloc_unlock>:
 800a7d0:	b510      	push	{r4, lr}
 800a7d2:	4802      	ldr	r0, [pc, #8]	; (800a7dc <__malloc_unlock+0xc>)
 800a7d4:	f7ff f84e 	bl	8009874 <__retarget_lock_release_recursive>
 800a7d8:	bd10      	pop	{r4, pc}
 800a7da:	46c0      	nop			; (mov r8, r8)
 800a7dc:	20000968 	.word	0x20000968

0800a7e0 <_Balloc>:
 800a7e0:	b570      	push	{r4, r5, r6, lr}
 800a7e2:	69c5      	ldr	r5, [r0, #28]
 800a7e4:	0006      	movs	r6, r0
 800a7e6:	000c      	movs	r4, r1
 800a7e8:	2d00      	cmp	r5, #0
 800a7ea:	d10e      	bne.n	800a80a <_Balloc+0x2a>
 800a7ec:	2010      	movs	r0, #16
 800a7ee:	f7ff ff39 	bl	800a664 <malloc>
 800a7f2:	1e02      	subs	r2, r0, #0
 800a7f4:	61f0      	str	r0, [r6, #28]
 800a7f6:	d104      	bne.n	800a802 <_Balloc+0x22>
 800a7f8:	216b      	movs	r1, #107	; 0x6b
 800a7fa:	4b19      	ldr	r3, [pc, #100]	; (800a860 <_Balloc+0x80>)
 800a7fc:	4819      	ldr	r0, [pc, #100]	; (800a864 <_Balloc+0x84>)
 800a7fe:	f001 fdbd 	bl	800c37c <__assert_func>
 800a802:	6045      	str	r5, [r0, #4]
 800a804:	6085      	str	r5, [r0, #8]
 800a806:	6005      	str	r5, [r0, #0]
 800a808:	60c5      	str	r5, [r0, #12]
 800a80a:	69f5      	ldr	r5, [r6, #28]
 800a80c:	68eb      	ldr	r3, [r5, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d013      	beq.n	800a83a <_Balloc+0x5a>
 800a812:	69f3      	ldr	r3, [r6, #28]
 800a814:	00a2      	lsls	r2, r4, #2
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	189b      	adds	r3, r3, r2
 800a81a:	6818      	ldr	r0, [r3, #0]
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d118      	bne.n	800a852 <_Balloc+0x72>
 800a820:	2101      	movs	r1, #1
 800a822:	000d      	movs	r5, r1
 800a824:	40a5      	lsls	r5, r4
 800a826:	1d6a      	adds	r2, r5, #5
 800a828:	0030      	movs	r0, r6
 800a82a:	0092      	lsls	r2, r2, #2
 800a82c:	f001 fdc4 	bl	800c3b8 <_calloc_r>
 800a830:	2800      	cmp	r0, #0
 800a832:	d00c      	beq.n	800a84e <_Balloc+0x6e>
 800a834:	6044      	str	r4, [r0, #4]
 800a836:	6085      	str	r5, [r0, #8]
 800a838:	e00d      	b.n	800a856 <_Balloc+0x76>
 800a83a:	2221      	movs	r2, #33	; 0x21
 800a83c:	2104      	movs	r1, #4
 800a83e:	0030      	movs	r0, r6
 800a840:	f001 fdba 	bl	800c3b8 <_calloc_r>
 800a844:	69f3      	ldr	r3, [r6, #28]
 800a846:	60e8      	str	r0, [r5, #12]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1e1      	bne.n	800a812 <_Balloc+0x32>
 800a84e:	2000      	movs	r0, #0
 800a850:	bd70      	pop	{r4, r5, r6, pc}
 800a852:	6802      	ldr	r2, [r0, #0]
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	2300      	movs	r3, #0
 800a858:	6103      	str	r3, [r0, #16]
 800a85a:	60c3      	str	r3, [r0, #12]
 800a85c:	e7f8      	b.n	800a850 <_Balloc+0x70>
 800a85e:	46c0      	nop			; (mov r8, r8)
 800a860:	0800d23a 	.word	0x0800d23a
 800a864:	0800d2ba 	.word	0x0800d2ba

0800a868 <_Bfree>:
 800a868:	b570      	push	{r4, r5, r6, lr}
 800a86a:	69c6      	ldr	r6, [r0, #28]
 800a86c:	0005      	movs	r5, r0
 800a86e:	000c      	movs	r4, r1
 800a870:	2e00      	cmp	r6, #0
 800a872:	d10e      	bne.n	800a892 <_Bfree+0x2a>
 800a874:	2010      	movs	r0, #16
 800a876:	f7ff fef5 	bl	800a664 <malloc>
 800a87a:	1e02      	subs	r2, r0, #0
 800a87c:	61e8      	str	r0, [r5, #28]
 800a87e:	d104      	bne.n	800a88a <_Bfree+0x22>
 800a880:	218f      	movs	r1, #143	; 0x8f
 800a882:	4b09      	ldr	r3, [pc, #36]	; (800a8a8 <_Bfree+0x40>)
 800a884:	4809      	ldr	r0, [pc, #36]	; (800a8ac <_Bfree+0x44>)
 800a886:	f001 fd79 	bl	800c37c <__assert_func>
 800a88a:	6046      	str	r6, [r0, #4]
 800a88c:	6086      	str	r6, [r0, #8]
 800a88e:	6006      	str	r6, [r0, #0]
 800a890:	60c6      	str	r6, [r0, #12]
 800a892:	2c00      	cmp	r4, #0
 800a894:	d007      	beq.n	800a8a6 <_Bfree+0x3e>
 800a896:	69eb      	ldr	r3, [r5, #28]
 800a898:	6862      	ldr	r2, [r4, #4]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	0092      	lsls	r2, r2, #2
 800a89e:	189b      	adds	r3, r3, r2
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	6022      	str	r2, [r4, #0]
 800a8a4:	601c      	str	r4, [r3, #0]
 800a8a6:	bd70      	pop	{r4, r5, r6, pc}
 800a8a8:	0800d23a 	.word	0x0800d23a
 800a8ac:	0800d2ba 	.word	0x0800d2ba

0800a8b0 <__multadd>:
 800a8b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8b2:	000e      	movs	r6, r1
 800a8b4:	9001      	str	r0, [sp, #4]
 800a8b6:	000c      	movs	r4, r1
 800a8b8:	001d      	movs	r5, r3
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	690f      	ldr	r7, [r1, #16]
 800a8be:	3614      	adds	r6, #20
 800a8c0:	6833      	ldr	r3, [r6, #0]
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	b299      	uxth	r1, r3
 800a8c6:	4351      	muls	r1, r2
 800a8c8:	0c1b      	lsrs	r3, r3, #16
 800a8ca:	4353      	muls	r3, r2
 800a8cc:	1949      	adds	r1, r1, r5
 800a8ce:	0c0d      	lsrs	r5, r1, #16
 800a8d0:	195b      	adds	r3, r3, r5
 800a8d2:	0c1d      	lsrs	r5, r3, #16
 800a8d4:	b289      	uxth	r1, r1
 800a8d6:	041b      	lsls	r3, r3, #16
 800a8d8:	185b      	adds	r3, r3, r1
 800a8da:	c608      	stmia	r6!, {r3}
 800a8dc:	4287      	cmp	r7, r0
 800a8de:	dcef      	bgt.n	800a8c0 <__multadd+0x10>
 800a8e0:	2d00      	cmp	r5, #0
 800a8e2:	d022      	beq.n	800a92a <__multadd+0x7a>
 800a8e4:	68a3      	ldr	r3, [r4, #8]
 800a8e6:	42bb      	cmp	r3, r7
 800a8e8:	dc19      	bgt.n	800a91e <__multadd+0x6e>
 800a8ea:	6861      	ldr	r1, [r4, #4]
 800a8ec:	9801      	ldr	r0, [sp, #4]
 800a8ee:	3101      	adds	r1, #1
 800a8f0:	f7ff ff76 	bl	800a7e0 <_Balloc>
 800a8f4:	1e06      	subs	r6, r0, #0
 800a8f6:	d105      	bne.n	800a904 <__multadd+0x54>
 800a8f8:	0032      	movs	r2, r6
 800a8fa:	21ba      	movs	r1, #186	; 0xba
 800a8fc:	4b0c      	ldr	r3, [pc, #48]	; (800a930 <__multadd+0x80>)
 800a8fe:	480d      	ldr	r0, [pc, #52]	; (800a934 <__multadd+0x84>)
 800a900:	f001 fd3c 	bl	800c37c <__assert_func>
 800a904:	0021      	movs	r1, r4
 800a906:	6922      	ldr	r2, [r4, #16]
 800a908:	310c      	adds	r1, #12
 800a90a:	3202      	adds	r2, #2
 800a90c:	0092      	lsls	r2, r2, #2
 800a90e:	300c      	adds	r0, #12
 800a910:	f001 fd24 	bl	800c35c <memcpy>
 800a914:	0021      	movs	r1, r4
 800a916:	9801      	ldr	r0, [sp, #4]
 800a918:	f7ff ffa6 	bl	800a868 <_Bfree>
 800a91c:	0034      	movs	r4, r6
 800a91e:	1d3b      	adds	r3, r7, #4
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	18e3      	adds	r3, r4, r3
 800a924:	605d      	str	r5, [r3, #4]
 800a926:	1c7b      	adds	r3, r7, #1
 800a928:	6123      	str	r3, [r4, #16]
 800a92a:	0020      	movs	r0, r4
 800a92c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a92e:	46c0      	nop			; (mov r8, r8)
 800a930:	0800d2a9 	.word	0x0800d2a9
 800a934:	0800d2ba 	.word	0x0800d2ba

0800a938 <__s2b>:
 800a938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a93a:	0006      	movs	r6, r0
 800a93c:	0018      	movs	r0, r3
 800a93e:	000c      	movs	r4, r1
 800a940:	3008      	adds	r0, #8
 800a942:	2109      	movs	r1, #9
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	0015      	movs	r5, r2
 800a948:	f7f5 fc84 	bl	8000254 <__divsi3>
 800a94c:	2301      	movs	r3, #1
 800a94e:	2100      	movs	r1, #0
 800a950:	4283      	cmp	r3, r0
 800a952:	db0a      	blt.n	800a96a <__s2b+0x32>
 800a954:	0030      	movs	r0, r6
 800a956:	f7ff ff43 	bl	800a7e0 <_Balloc>
 800a95a:	1e01      	subs	r1, r0, #0
 800a95c:	d108      	bne.n	800a970 <__s2b+0x38>
 800a95e:	000a      	movs	r2, r1
 800a960:	4b19      	ldr	r3, [pc, #100]	; (800a9c8 <__s2b+0x90>)
 800a962:	481a      	ldr	r0, [pc, #104]	; (800a9cc <__s2b+0x94>)
 800a964:	31d3      	adds	r1, #211	; 0xd3
 800a966:	f001 fd09 	bl	800c37c <__assert_func>
 800a96a:	005b      	lsls	r3, r3, #1
 800a96c:	3101      	adds	r1, #1
 800a96e:	e7ef      	b.n	800a950 <__s2b+0x18>
 800a970:	9b08      	ldr	r3, [sp, #32]
 800a972:	6143      	str	r3, [r0, #20]
 800a974:	2301      	movs	r3, #1
 800a976:	6103      	str	r3, [r0, #16]
 800a978:	2d09      	cmp	r5, #9
 800a97a:	dd18      	ble.n	800a9ae <__s2b+0x76>
 800a97c:	0023      	movs	r3, r4
 800a97e:	3309      	adds	r3, #9
 800a980:	001f      	movs	r7, r3
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	1964      	adds	r4, r4, r5
 800a986:	783b      	ldrb	r3, [r7, #0]
 800a988:	220a      	movs	r2, #10
 800a98a:	0030      	movs	r0, r6
 800a98c:	3b30      	subs	r3, #48	; 0x30
 800a98e:	f7ff ff8f 	bl	800a8b0 <__multadd>
 800a992:	3701      	adds	r7, #1
 800a994:	0001      	movs	r1, r0
 800a996:	42a7      	cmp	r7, r4
 800a998:	d1f5      	bne.n	800a986 <__s2b+0x4e>
 800a99a:	002c      	movs	r4, r5
 800a99c:	9b00      	ldr	r3, [sp, #0]
 800a99e:	3c08      	subs	r4, #8
 800a9a0:	191c      	adds	r4, r3, r4
 800a9a2:	002f      	movs	r7, r5
 800a9a4:	9b01      	ldr	r3, [sp, #4]
 800a9a6:	429f      	cmp	r7, r3
 800a9a8:	db04      	blt.n	800a9b4 <__s2b+0x7c>
 800a9aa:	0008      	movs	r0, r1
 800a9ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a9ae:	2509      	movs	r5, #9
 800a9b0:	340a      	adds	r4, #10
 800a9b2:	e7f6      	b.n	800a9a2 <__s2b+0x6a>
 800a9b4:	1b63      	subs	r3, r4, r5
 800a9b6:	5ddb      	ldrb	r3, [r3, r7]
 800a9b8:	220a      	movs	r2, #10
 800a9ba:	0030      	movs	r0, r6
 800a9bc:	3b30      	subs	r3, #48	; 0x30
 800a9be:	f7ff ff77 	bl	800a8b0 <__multadd>
 800a9c2:	3701      	adds	r7, #1
 800a9c4:	0001      	movs	r1, r0
 800a9c6:	e7ed      	b.n	800a9a4 <__s2b+0x6c>
 800a9c8:	0800d2a9 	.word	0x0800d2a9
 800a9cc:	0800d2ba 	.word	0x0800d2ba

0800a9d0 <__hi0bits>:
 800a9d0:	0003      	movs	r3, r0
 800a9d2:	0c02      	lsrs	r2, r0, #16
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	4282      	cmp	r2, r0
 800a9d8:	d101      	bne.n	800a9de <__hi0bits+0xe>
 800a9da:	041b      	lsls	r3, r3, #16
 800a9dc:	3010      	adds	r0, #16
 800a9de:	0e1a      	lsrs	r2, r3, #24
 800a9e0:	d101      	bne.n	800a9e6 <__hi0bits+0x16>
 800a9e2:	3008      	adds	r0, #8
 800a9e4:	021b      	lsls	r3, r3, #8
 800a9e6:	0f1a      	lsrs	r2, r3, #28
 800a9e8:	d101      	bne.n	800a9ee <__hi0bits+0x1e>
 800a9ea:	3004      	adds	r0, #4
 800a9ec:	011b      	lsls	r3, r3, #4
 800a9ee:	0f9a      	lsrs	r2, r3, #30
 800a9f0:	d101      	bne.n	800a9f6 <__hi0bits+0x26>
 800a9f2:	3002      	adds	r0, #2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	db03      	blt.n	800aa02 <__hi0bits+0x32>
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	005b      	lsls	r3, r3, #1
 800a9fe:	d400      	bmi.n	800aa02 <__hi0bits+0x32>
 800aa00:	2020      	movs	r0, #32
 800aa02:	4770      	bx	lr

0800aa04 <__lo0bits>:
 800aa04:	6803      	ldr	r3, [r0, #0]
 800aa06:	0001      	movs	r1, r0
 800aa08:	2207      	movs	r2, #7
 800aa0a:	0018      	movs	r0, r3
 800aa0c:	4010      	ands	r0, r2
 800aa0e:	4213      	tst	r3, r2
 800aa10:	d00d      	beq.n	800aa2e <__lo0bits+0x2a>
 800aa12:	3a06      	subs	r2, #6
 800aa14:	2000      	movs	r0, #0
 800aa16:	4213      	tst	r3, r2
 800aa18:	d105      	bne.n	800aa26 <__lo0bits+0x22>
 800aa1a:	3002      	adds	r0, #2
 800aa1c:	4203      	tst	r3, r0
 800aa1e:	d003      	beq.n	800aa28 <__lo0bits+0x24>
 800aa20:	40d3      	lsrs	r3, r2
 800aa22:	0010      	movs	r0, r2
 800aa24:	600b      	str	r3, [r1, #0]
 800aa26:	4770      	bx	lr
 800aa28:	089b      	lsrs	r3, r3, #2
 800aa2a:	600b      	str	r3, [r1, #0]
 800aa2c:	e7fb      	b.n	800aa26 <__lo0bits+0x22>
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	2a00      	cmp	r2, #0
 800aa32:	d101      	bne.n	800aa38 <__lo0bits+0x34>
 800aa34:	2010      	movs	r0, #16
 800aa36:	0c1b      	lsrs	r3, r3, #16
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	2a00      	cmp	r2, #0
 800aa3c:	d101      	bne.n	800aa42 <__lo0bits+0x3e>
 800aa3e:	3008      	adds	r0, #8
 800aa40:	0a1b      	lsrs	r3, r3, #8
 800aa42:	071a      	lsls	r2, r3, #28
 800aa44:	d101      	bne.n	800aa4a <__lo0bits+0x46>
 800aa46:	3004      	adds	r0, #4
 800aa48:	091b      	lsrs	r3, r3, #4
 800aa4a:	079a      	lsls	r2, r3, #30
 800aa4c:	d101      	bne.n	800aa52 <__lo0bits+0x4e>
 800aa4e:	3002      	adds	r0, #2
 800aa50:	089b      	lsrs	r3, r3, #2
 800aa52:	07da      	lsls	r2, r3, #31
 800aa54:	d4e9      	bmi.n	800aa2a <__lo0bits+0x26>
 800aa56:	3001      	adds	r0, #1
 800aa58:	085b      	lsrs	r3, r3, #1
 800aa5a:	d1e6      	bne.n	800aa2a <__lo0bits+0x26>
 800aa5c:	2020      	movs	r0, #32
 800aa5e:	e7e2      	b.n	800aa26 <__lo0bits+0x22>

0800aa60 <__i2b>:
 800aa60:	b510      	push	{r4, lr}
 800aa62:	000c      	movs	r4, r1
 800aa64:	2101      	movs	r1, #1
 800aa66:	f7ff febb 	bl	800a7e0 <_Balloc>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d107      	bne.n	800aa7e <__i2b+0x1e>
 800aa6e:	2146      	movs	r1, #70	; 0x46
 800aa70:	4c05      	ldr	r4, [pc, #20]	; (800aa88 <__i2b+0x28>)
 800aa72:	0002      	movs	r2, r0
 800aa74:	4b05      	ldr	r3, [pc, #20]	; (800aa8c <__i2b+0x2c>)
 800aa76:	0020      	movs	r0, r4
 800aa78:	31ff      	adds	r1, #255	; 0xff
 800aa7a:	f001 fc7f 	bl	800c37c <__assert_func>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	6144      	str	r4, [r0, #20]
 800aa82:	6103      	str	r3, [r0, #16]
 800aa84:	bd10      	pop	{r4, pc}
 800aa86:	46c0      	nop			; (mov r8, r8)
 800aa88:	0800d2ba 	.word	0x0800d2ba
 800aa8c:	0800d2a9 	.word	0x0800d2a9

0800aa90 <__multiply>:
 800aa90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa92:	0015      	movs	r5, r2
 800aa94:	690a      	ldr	r2, [r1, #16]
 800aa96:	692b      	ldr	r3, [r5, #16]
 800aa98:	000c      	movs	r4, r1
 800aa9a:	b08b      	sub	sp, #44	; 0x2c
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	da01      	bge.n	800aaa4 <__multiply+0x14>
 800aaa0:	002c      	movs	r4, r5
 800aaa2:	000d      	movs	r5, r1
 800aaa4:	6927      	ldr	r7, [r4, #16]
 800aaa6:	692e      	ldr	r6, [r5, #16]
 800aaa8:	6861      	ldr	r1, [r4, #4]
 800aaaa:	19bb      	adds	r3, r7, r6
 800aaac:	9303      	str	r3, [sp, #12]
 800aaae:	68a3      	ldr	r3, [r4, #8]
 800aab0:	19ba      	adds	r2, r7, r6
 800aab2:	4293      	cmp	r3, r2
 800aab4:	da00      	bge.n	800aab8 <__multiply+0x28>
 800aab6:	3101      	adds	r1, #1
 800aab8:	f7ff fe92 	bl	800a7e0 <_Balloc>
 800aabc:	9002      	str	r0, [sp, #8]
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d106      	bne.n	800aad0 <__multiply+0x40>
 800aac2:	21b1      	movs	r1, #177	; 0xb1
 800aac4:	4b48      	ldr	r3, [pc, #288]	; (800abe8 <__multiply+0x158>)
 800aac6:	4849      	ldr	r0, [pc, #292]	; (800abec <__multiply+0x15c>)
 800aac8:	9a02      	ldr	r2, [sp, #8]
 800aaca:	0049      	lsls	r1, r1, #1
 800aacc:	f001 fc56 	bl	800c37c <__assert_func>
 800aad0:	9b02      	ldr	r3, [sp, #8]
 800aad2:	2200      	movs	r2, #0
 800aad4:	3314      	adds	r3, #20
 800aad6:	469c      	mov	ip, r3
 800aad8:	19bb      	adds	r3, r7, r6
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	4463      	add	r3, ip
 800aade:	9304      	str	r3, [sp, #16]
 800aae0:	4663      	mov	r3, ip
 800aae2:	9904      	ldr	r1, [sp, #16]
 800aae4:	428b      	cmp	r3, r1
 800aae6:	d32a      	bcc.n	800ab3e <__multiply+0xae>
 800aae8:	0023      	movs	r3, r4
 800aaea:	00bf      	lsls	r7, r7, #2
 800aaec:	3314      	adds	r3, #20
 800aaee:	3514      	adds	r5, #20
 800aaf0:	9308      	str	r3, [sp, #32]
 800aaf2:	00b6      	lsls	r6, r6, #2
 800aaf4:	19db      	adds	r3, r3, r7
 800aaf6:	9305      	str	r3, [sp, #20]
 800aaf8:	19ab      	adds	r3, r5, r6
 800aafa:	9309      	str	r3, [sp, #36]	; 0x24
 800aafc:	2304      	movs	r3, #4
 800aafe:	9306      	str	r3, [sp, #24]
 800ab00:	0023      	movs	r3, r4
 800ab02:	9a05      	ldr	r2, [sp, #20]
 800ab04:	3315      	adds	r3, #21
 800ab06:	9501      	str	r5, [sp, #4]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d305      	bcc.n	800ab18 <__multiply+0x88>
 800ab0c:	1b13      	subs	r3, r2, r4
 800ab0e:	3b15      	subs	r3, #21
 800ab10:	089b      	lsrs	r3, r3, #2
 800ab12:	3301      	adds	r3, #1
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	9306      	str	r3, [sp, #24]
 800ab18:	9b01      	ldr	r3, [sp, #4]
 800ab1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d310      	bcc.n	800ab42 <__multiply+0xb2>
 800ab20:	9b03      	ldr	r3, [sp, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	dd05      	ble.n	800ab32 <__multiply+0xa2>
 800ab26:	9b04      	ldr	r3, [sp, #16]
 800ab28:	3b04      	subs	r3, #4
 800ab2a:	9304      	str	r3, [sp, #16]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d056      	beq.n	800abe0 <__multiply+0x150>
 800ab32:	9b02      	ldr	r3, [sp, #8]
 800ab34:	9a03      	ldr	r2, [sp, #12]
 800ab36:	0018      	movs	r0, r3
 800ab38:	611a      	str	r2, [r3, #16]
 800ab3a:	b00b      	add	sp, #44	; 0x2c
 800ab3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab3e:	c304      	stmia	r3!, {r2}
 800ab40:	e7cf      	b.n	800aae2 <__multiply+0x52>
 800ab42:	9b01      	ldr	r3, [sp, #4]
 800ab44:	6818      	ldr	r0, [r3, #0]
 800ab46:	b280      	uxth	r0, r0
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d01e      	beq.n	800ab8a <__multiply+0xfa>
 800ab4c:	4667      	mov	r7, ip
 800ab4e:	2500      	movs	r5, #0
 800ab50:	9e08      	ldr	r6, [sp, #32]
 800ab52:	ce02      	ldmia	r6!, {r1}
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	9307      	str	r3, [sp, #28]
 800ab58:	b28b      	uxth	r3, r1
 800ab5a:	4343      	muls	r3, r0
 800ab5c:	001a      	movs	r2, r3
 800ab5e:	466b      	mov	r3, sp
 800ab60:	8b9b      	ldrh	r3, [r3, #28]
 800ab62:	18d3      	adds	r3, r2, r3
 800ab64:	195b      	adds	r3, r3, r5
 800ab66:	0c0d      	lsrs	r5, r1, #16
 800ab68:	4345      	muls	r5, r0
 800ab6a:	9a07      	ldr	r2, [sp, #28]
 800ab6c:	0c11      	lsrs	r1, r2, #16
 800ab6e:	1869      	adds	r1, r5, r1
 800ab70:	0c1a      	lsrs	r2, r3, #16
 800ab72:	188a      	adds	r2, r1, r2
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	0c15      	lsrs	r5, r2, #16
 800ab78:	0412      	lsls	r2, r2, #16
 800ab7a:	431a      	orrs	r2, r3
 800ab7c:	9b05      	ldr	r3, [sp, #20]
 800ab7e:	c704      	stmia	r7!, {r2}
 800ab80:	42b3      	cmp	r3, r6
 800ab82:	d8e6      	bhi.n	800ab52 <__multiply+0xc2>
 800ab84:	4663      	mov	r3, ip
 800ab86:	9a06      	ldr	r2, [sp, #24]
 800ab88:	509d      	str	r5, [r3, r2]
 800ab8a:	9b01      	ldr	r3, [sp, #4]
 800ab8c:	6818      	ldr	r0, [r3, #0]
 800ab8e:	0c00      	lsrs	r0, r0, #16
 800ab90:	d020      	beq.n	800abd4 <__multiply+0x144>
 800ab92:	4663      	mov	r3, ip
 800ab94:	0025      	movs	r5, r4
 800ab96:	4661      	mov	r1, ip
 800ab98:	2700      	movs	r7, #0
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3514      	adds	r5, #20
 800ab9e:	682a      	ldr	r2, [r5, #0]
 800aba0:	680e      	ldr	r6, [r1, #0]
 800aba2:	b292      	uxth	r2, r2
 800aba4:	4342      	muls	r2, r0
 800aba6:	0c36      	lsrs	r6, r6, #16
 800aba8:	1992      	adds	r2, r2, r6
 800abaa:	19d2      	adds	r2, r2, r7
 800abac:	0416      	lsls	r6, r2, #16
 800abae:	b29b      	uxth	r3, r3
 800abb0:	431e      	orrs	r6, r3
 800abb2:	600e      	str	r6, [r1, #0]
 800abb4:	cd40      	ldmia	r5!, {r6}
 800abb6:	684b      	ldr	r3, [r1, #4]
 800abb8:	0c36      	lsrs	r6, r6, #16
 800abba:	4346      	muls	r6, r0
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	0c12      	lsrs	r2, r2, #16
 800abc0:	18f3      	adds	r3, r6, r3
 800abc2:	189b      	adds	r3, r3, r2
 800abc4:	9a05      	ldr	r2, [sp, #20]
 800abc6:	0c1f      	lsrs	r7, r3, #16
 800abc8:	3104      	adds	r1, #4
 800abca:	42aa      	cmp	r2, r5
 800abcc:	d8e7      	bhi.n	800ab9e <__multiply+0x10e>
 800abce:	4662      	mov	r2, ip
 800abd0:	9906      	ldr	r1, [sp, #24]
 800abd2:	5053      	str	r3, [r2, r1]
 800abd4:	9b01      	ldr	r3, [sp, #4]
 800abd6:	3304      	adds	r3, #4
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	2304      	movs	r3, #4
 800abdc:	449c      	add	ip, r3
 800abde:	e79b      	b.n	800ab18 <__multiply+0x88>
 800abe0:	9b03      	ldr	r3, [sp, #12]
 800abe2:	3b01      	subs	r3, #1
 800abe4:	9303      	str	r3, [sp, #12]
 800abe6:	e79b      	b.n	800ab20 <__multiply+0x90>
 800abe8:	0800d2a9 	.word	0x0800d2a9
 800abec:	0800d2ba 	.word	0x0800d2ba

0800abf0 <__pow5mult>:
 800abf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abf2:	2303      	movs	r3, #3
 800abf4:	0015      	movs	r5, r2
 800abf6:	0007      	movs	r7, r0
 800abf8:	000e      	movs	r6, r1
 800abfa:	401a      	ands	r2, r3
 800abfc:	421d      	tst	r5, r3
 800abfe:	d008      	beq.n	800ac12 <__pow5mult+0x22>
 800ac00:	4925      	ldr	r1, [pc, #148]	; (800ac98 <__pow5mult+0xa8>)
 800ac02:	3a01      	subs	r2, #1
 800ac04:	0092      	lsls	r2, r2, #2
 800ac06:	5852      	ldr	r2, [r2, r1]
 800ac08:	2300      	movs	r3, #0
 800ac0a:	0031      	movs	r1, r6
 800ac0c:	f7ff fe50 	bl	800a8b0 <__multadd>
 800ac10:	0006      	movs	r6, r0
 800ac12:	10ad      	asrs	r5, r5, #2
 800ac14:	d03d      	beq.n	800ac92 <__pow5mult+0xa2>
 800ac16:	69fc      	ldr	r4, [r7, #28]
 800ac18:	2c00      	cmp	r4, #0
 800ac1a:	d10f      	bne.n	800ac3c <__pow5mult+0x4c>
 800ac1c:	2010      	movs	r0, #16
 800ac1e:	f7ff fd21 	bl	800a664 <malloc>
 800ac22:	1e02      	subs	r2, r0, #0
 800ac24:	61f8      	str	r0, [r7, #28]
 800ac26:	d105      	bne.n	800ac34 <__pow5mult+0x44>
 800ac28:	21b4      	movs	r1, #180	; 0xb4
 800ac2a:	4b1c      	ldr	r3, [pc, #112]	; (800ac9c <__pow5mult+0xac>)
 800ac2c:	481c      	ldr	r0, [pc, #112]	; (800aca0 <__pow5mult+0xb0>)
 800ac2e:	31ff      	adds	r1, #255	; 0xff
 800ac30:	f001 fba4 	bl	800c37c <__assert_func>
 800ac34:	6044      	str	r4, [r0, #4]
 800ac36:	6084      	str	r4, [r0, #8]
 800ac38:	6004      	str	r4, [r0, #0]
 800ac3a:	60c4      	str	r4, [r0, #12]
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	689c      	ldr	r4, [r3, #8]
 800ac40:	9301      	str	r3, [sp, #4]
 800ac42:	2c00      	cmp	r4, #0
 800ac44:	d108      	bne.n	800ac58 <__pow5mult+0x68>
 800ac46:	0038      	movs	r0, r7
 800ac48:	4916      	ldr	r1, [pc, #88]	; (800aca4 <__pow5mult+0xb4>)
 800ac4a:	f7ff ff09 	bl	800aa60 <__i2b>
 800ac4e:	9b01      	ldr	r3, [sp, #4]
 800ac50:	0004      	movs	r4, r0
 800ac52:	6098      	str	r0, [r3, #8]
 800ac54:	2300      	movs	r3, #0
 800ac56:	6003      	str	r3, [r0, #0]
 800ac58:	2301      	movs	r3, #1
 800ac5a:	421d      	tst	r5, r3
 800ac5c:	d00a      	beq.n	800ac74 <__pow5mult+0x84>
 800ac5e:	0031      	movs	r1, r6
 800ac60:	0022      	movs	r2, r4
 800ac62:	0038      	movs	r0, r7
 800ac64:	f7ff ff14 	bl	800aa90 <__multiply>
 800ac68:	0031      	movs	r1, r6
 800ac6a:	9001      	str	r0, [sp, #4]
 800ac6c:	0038      	movs	r0, r7
 800ac6e:	f7ff fdfb 	bl	800a868 <_Bfree>
 800ac72:	9e01      	ldr	r6, [sp, #4]
 800ac74:	106d      	asrs	r5, r5, #1
 800ac76:	d00c      	beq.n	800ac92 <__pow5mult+0xa2>
 800ac78:	6820      	ldr	r0, [r4, #0]
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d107      	bne.n	800ac8e <__pow5mult+0x9e>
 800ac7e:	0022      	movs	r2, r4
 800ac80:	0021      	movs	r1, r4
 800ac82:	0038      	movs	r0, r7
 800ac84:	f7ff ff04 	bl	800aa90 <__multiply>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	6020      	str	r0, [r4, #0]
 800ac8c:	6003      	str	r3, [r0, #0]
 800ac8e:	0004      	movs	r4, r0
 800ac90:	e7e2      	b.n	800ac58 <__pow5mult+0x68>
 800ac92:	0030      	movs	r0, r6
 800ac94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac96:	46c0      	nop			; (mov r8, r8)
 800ac98:	0800d408 	.word	0x0800d408
 800ac9c:	0800d23a 	.word	0x0800d23a
 800aca0:	0800d2ba 	.word	0x0800d2ba
 800aca4:	00000271 	.word	0x00000271

0800aca8 <__lshift>:
 800aca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acaa:	000c      	movs	r4, r1
 800acac:	0017      	movs	r7, r2
 800acae:	6923      	ldr	r3, [r4, #16]
 800acb0:	1155      	asrs	r5, r2, #5
 800acb2:	b087      	sub	sp, #28
 800acb4:	18eb      	adds	r3, r5, r3
 800acb6:	9302      	str	r3, [sp, #8]
 800acb8:	3301      	adds	r3, #1
 800acba:	9301      	str	r3, [sp, #4]
 800acbc:	6849      	ldr	r1, [r1, #4]
 800acbe:	68a3      	ldr	r3, [r4, #8]
 800acc0:	9004      	str	r0, [sp, #16]
 800acc2:	9a01      	ldr	r2, [sp, #4]
 800acc4:	4293      	cmp	r3, r2
 800acc6:	db10      	blt.n	800acea <__lshift+0x42>
 800acc8:	9804      	ldr	r0, [sp, #16]
 800acca:	f7ff fd89 	bl	800a7e0 <_Balloc>
 800acce:	2300      	movs	r3, #0
 800acd0:	0002      	movs	r2, r0
 800acd2:	0006      	movs	r6, r0
 800acd4:	0019      	movs	r1, r3
 800acd6:	3214      	adds	r2, #20
 800acd8:	4298      	cmp	r0, r3
 800acda:	d10c      	bne.n	800acf6 <__lshift+0x4e>
 800acdc:	31df      	adds	r1, #223	; 0xdf
 800acde:	0032      	movs	r2, r6
 800ace0:	4b26      	ldr	r3, [pc, #152]	; (800ad7c <__lshift+0xd4>)
 800ace2:	4827      	ldr	r0, [pc, #156]	; (800ad80 <__lshift+0xd8>)
 800ace4:	31ff      	adds	r1, #255	; 0xff
 800ace6:	f001 fb49 	bl	800c37c <__assert_func>
 800acea:	3101      	adds	r1, #1
 800acec:	005b      	lsls	r3, r3, #1
 800acee:	e7e8      	b.n	800acc2 <__lshift+0x1a>
 800acf0:	0098      	lsls	r0, r3, #2
 800acf2:	5011      	str	r1, [r2, r0]
 800acf4:	3301      	adds	r3, #1
 800acf6:	42ab      	cmp	r3, r5
 800acf8:	dbfa      	blt.n	800acf0 <__lshift+0x48>
 800acfa:	43eb      	mvns	r3, r5
 800acfc:	17db      	asrs	r3, r3, #31
 800acfe:	401d      	ands	r5, r3
 800ad00:	211f      	movs	r1, #31
 800ad02:	0023      	movs	r3, r4
 800ad04:	0038      	movs	r0, r7
 800ad06:	00ad      	lsls	r5, r5, #2
 800ad08:	1955      	adds	r5, r2, r5
 800ad0a:	6922      	ldr	r2, [r4, #16]
 800ad0c:	3314      	adds	r3, #20
 800ad0e:	0092      	lsls	r2, r2, #2
 800ad10:	4008      	ands	r0, r1
 800ad12:	4684      	mov	ip, r0
 800ad14:	189a      	adds	r2, r3, r2
 800ad16:	420f      	tst	r7, r1
 800ad18:	d02a      	beq.n	800ad70 <__lshift+0xc8>
 800ad1a:	3101      	adds	r1, #1
 800ad1c:	1a09      	subs	r1, r1, r0
 800ad1e:	9105      	str	r1, [sp, #20]
 800ad20:	2100      	movs	r1, #0
 800ad22:	9503      	str	r5, [sp, #12]
 800ad24:	4667      	mov	r7, ip
 800ad26:	6818      	ldr	r0, [r3, #0]
 800ad28:	40b8      	lsls	r0, r7
 800ad2a:	4308      	orrs	r0, r1
 800ad2c:	9903      	ldr	r1, [sp, #12]
 800ad2e:	c101      	stmia	r1!, {r0}
 800ad30:	9103      	str	r1, [sp, #12]
 800ad32:	9805      	ldr	r0, [sp, #20]
 800ad34:	cb02      	ldmia	r3!, {r1}
 800ad36:	40c1      	lsrs	r1, r0
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d8f3      	bhi.n	800ad24 <__lshift+0x7c>
 800ad3c:	0020      	movs	r0, r4
 800ad3e:	3015      	adds	r0, #21
 800ad40:	2304      	movs	r3, #4
 800ad42:	4282      	cmp	r2, r0
 800ad44:	d304      	bcc.n	800ad50 <__lshift+0xa8>
 800ad46:	1b13      	subs	r3, r2, r4
 800ad48:	3b15      	subs	r3, #21
 800ad4a:	089b      	lsrs	r3, r3, #2
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	50e9      	str	r1, [r5, r3]
 800ad52:	2900      	cmp	r1, #0
 800ad54:	d002      	beq.n	800ad5c <__lshift+0xb4>
 800ad56:	9b02      	ldr	r3, [sp, #8]
 800ad58:	3302      	adds	r3, #2
 800ad5a:	9301      	str	r3, [sp, #4]
 800ad5c:	9b01      	ldr	r3, [sp, #4]
 800ad5e:	9804      	ldr	r0, [sp, #16]
 800ad60:	3b01      	subs	r3, #1
 800ad62:	0021      	movs	r1, r4
 800ad64:	6133      	str	r3, [r6, #16]
 800ad66:	f7ff fd7f 	bl	800a868 <_Bfree>
 800ad6a:	0030      	movs	r0, r6
 800ad6c:	b007      	add	sp, #28
 800ad6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad70:	cb02      	ldmia	r3!, {r1}
 800ad72:	c502      	stmia	r5!, {r1}
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d8fb      	bhi.n	800ad70 <__lshift+0xc8>
 800ad78:	e7f0      	b.n	800ad5c <__lshift+0xb4>
 800ad7a:	46c0      	nop			; (mov r8, r8)
 800ad7c:	0800d2a9 	.word	0x0800d2a9
 800ad80:	0800d2ba 	.word	0x0800d2ba

0800ad84 <__mcmp>:
 800ad84:	b530      	push	{r4, r5, lr}
 800ad86:	690b      	ldr	r3, [r1, #16]
 800ad88:	6904      	ldr	r4, [r0, #16]
 800ad8a:	0002      	movs	r2, r0
 800ad8c:	1ae0      	subs	r0, r4, r3
 800ad8e:	429c      	cmp	r4, r3
 800ad90:	d10e      	bne.n	800adb0 <__mcmp+0x2c>
 800ad92:	3214      	adds	r2, #20
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	3114      	adds	r1, #20
 800ad98:	0014      	movs	r4, r2
 800ad9a:	18c9      	adds	r1, r1, r3
 800ad9c:	18d2      	adds	r2, r2, r3
 800ad9e:	3a04      	subs	r2, #4
 800ada0:	3904      	subs	r1, #4
 800ada2:	6815      	ldr	r5, [r2, #0]
 800ada4:	680b      	ldr	r3, [r1, #0]
 800ada6:	429d      	cmp	r5, r3
 800ada8:	d003      	beq.n	800adb2 <__mcmp+0x2e>
 800adaa:	2001      	movs	r0, #1
 800adac:	429d      	cmp	r5, r3
 800adae:	d303      	bcc.n	800adb8 <__mcmp+0x34>
 800adb0:	bd30      	pop	{r4, r5, pc}
 800adb2:	4294      	cmp	r4, r2
 800adb4:	d3f3      	bcc.n	800ad9e <__mcmp+0x1a>
 800adb6:	e7fb      	b.n	800adb0 <__mcmp+0x2c>
 800adb8:	4240      	negs	r0, r0
 800adba:	e7f9      	b.n	800adb0 <__mcmp+0x2c>

0800adbc <__mdiff>:
 800adbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adbe:	000e      	movs	r6, r1
 800adc0:	0007      	movs	r7, r0
 800adc2:	0011      	movs	r1, r2
 800adc4:	0030      	movs	r0, r6
 800adc6:	b087      	sub	sp, #28
 800adc8:	0014      	movs	r4, r2
 800adca:	f7ff ffdb 	bl	800ad84 <__mcmp>
 800adce:	1e05      	subs	r5, r0, #0
 800add0:	d110      	bne.n	800adf4 <__mdiff+0x38>
 800add2:	0001      	movs	r1, r0
 800add4:	0038      	movs	r0, r7
 800add6:	f7ff fd03 	bl	800a7e0 <_Balloc>
 800adda:	1e02      	subs	r2, r0, #0
 800addc:	d104      	bne.n	800ade8 <__mdiff+0x2c>
 800adde:	4b3f      	ldr	r3, [pc, #252]	; (800aedc <__mdiff+0x120>)
 800ade0:	483f      	ldr	r0, [pc, #252]	; (800aee0 <__mdiff+0x124>)
 800ade2:	4940      	ldr	r1, [pc, #256]	; (800aee4 <__mdiff+0x128>)
 800ade4:	f001 faca 	bl	800c37c <__assert_func>
 800ade8:	2301      	movs	r3, #1
 800adea:	6145      	str	r5, [r0, #20]
 800adec:	6103      	str	r3, [r0, #16]
 800adee:	0010      	movs	r0, r2
 800adf0:	b007      	add	sp, #28
 800adf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adf4:	2301      	movs	r3, #1
 800adf6:	9301      	str	r3, [sp, #4]
 800adf8:	2800      	cmp	r0, #0
 800adfa:	db04      	blt.n	800ae06 <__mdiff+0x4a>
 800adfc:	0023      	movs	r3, r4
 800adfe:	0034      	movs	r4, r6
 800ae00:	001e      	movs	r6, r3
 800ae02:	2300      	movs	r3, #0
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	0038      	movs	r0, r7
 800ae08:	6861      	ldr	r1, [r4, #4]
 800ae0a:	f7ff fce9 	bl	800a7e0 <_Balloc>
 800ae0e:	1e02      	subs	r2, r0, #0
 800ae10:	d103      	bne.n	800ae1a <__mdiff+0x5e>
 800ae12:	4b32      	ldr	r3, [pc, #200]	; (800aedc <__mdiff+0x120>)
 800ae14:	4832      	ldr	r0, [pc, #200]	; (800aee0 <__mdiff+0x124>)
 800ae16:	4934      	ldr	r1, [pc, #208]	; (800aee8 <__mdiff+0x12c>)
 800ae18:	e7e4      	b.n	800ade4 <__mdiff+0x28>
 800ae1a:	9b01      	ldr	r3, [sp, #4]
 800ae1c:	2700      	movs	r7, #0
 800ae1e:	60c3      	str	r3, [r0, #12]
 800ae20:	6920      	ldr	r0, [r4, #16]
 800ae22:	3414      	adds	r4, #20
 800ae24:	0083      	lsls	r3, r0, #2
 800ae26:	18e3      	adds	r3, r4, r3
 800ae28:	0021      	movs	r1, r4
 800ae2a:	9401      	str	r4, [sp, #4]
 800ae2c:	0034      	movs	r4, r6
 800ae2e:	9302      	str	r3, [sp, #8]
 800ae30:	6933      	ldr	r3, [r6, #16]
 800ae32:	3414      	adds	r4, #20
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	18e3      	adds	r3, r4, r3
 800ae38:	9303      	str	r3, [sp, #12]
 800ae3a:	0013      	movs	r3, r2
 800ae3c:	3314      	adds	r3, #20
 800ae3e:	469c      	mov	ip, r3
 800ae40:	9305      	str	r3, [sp, #20]
 800ae42:	9104      	str	r1, [sp, #16]
 800ae44:	9b04      	ldr	r3, [sp, #16]
 800ae46:	cc02      	ldmia	r4!, {r1}
 800ae48:	cb20      	ldmia	r3!, {r5}
 800ae4a:	9304      	str	r3, [sp, #16]
 800ae4c:	b2ab      	uxth	r3, r5
 800ae4e:	19df      	adds	r7, r3, r7
 800ae50:	b28b      	uxth	r3, r1
 800ae52:	1afb      	subs	r3, r7, r3
 800ae54:	0c09      	lsrs	r1, r1, #16
 800ae56:	0c2d      	lsrs	r5, r5, #16
 800ae58:	1a6d      	subs	r5, r5, r1
 800ae5a:	1419      	asrs	r1, r3, #16
 800ae5c:	1869      	adds	r1, r5, r1
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	140f      	asrs	r7, r1, #16
 800ae62:	0409      	lsls	r1, r1, #16
 800ae64:	4319      	orrs	r1, r3
 800ae66:	4663      	mov	r3, ip
 800ae68:	c302      	stmia	r3!, {r1}
 800ae6a:	469c      	mov	ip, r3
 800ae6c:	9b03      	ldr	r3, [sp, #12]
 800ae6e:	42a3      	cmp	r3, r4
 800ae70:	d8e8      	bhi.n	800ae44 <__mdiff+0x88>
 800ae72:	0031      	movs	r1, r6
 800ae74:	9c03      	ldr	r4, [sp, #12]
 800ae76:	3115      	adds	r1, #21
 800ae78:	2304      	movs	r3, #4
 800ae7a:	428c      	cmp	r4, r1
 800ae7c:	d304      	bcc.n	800ae88 <__mdiff+0xcc>
 800ae7e:	1ba3      	subs	r3, r4, r6
 800ae80:	3b15      	subs	r3, #21
 800ae82:	089b      	lsrs	r3, r3, #2
 800ae84:	3301      	adds	r3, #1
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	9901      	ldr	r1, [sp, #4]
 800ae8a:	18cd      	adds	r5, r1, r3
 800ae8c:	9905      	ldr	r1, [sp, #20]
 800ae8e:	002e      	movs	r6, r5
 800ae90:	18cb      	adds	r3, r1, r3
 800ae92:	469c      	mov	ip, r3
 800ae94:	9902      	ldr	r1, [sp, #8]
 800ae96:	428e      	cmp	r6, r1
 800ae98:	d310      	bcc.n	800aebc <__mdiff+0x100>
 800ae9a:	9e02      	ldr	r6, [sp, #8]
 800ae9c:	1ee9      	subs	r1, r5, #3
 800ae9e:	2400      	movs	r4, #0
 800aea0:	428e      	cmp	r6, r1
 800aea2:	d304      	bcc.n	800aeae <__mdiff+0xf2>
 800aea4:	0031      	movs	r1, r6
 800aea6:	3103      	adds	r1, #3
 800aea8:	1b49      	subs	r1, r1, r5
 800aeaa:	0889      	lsrs	r1, r1, #2
 800aeac:	008c      	lsls	r4, r1, #2
 800aeae:	191b      	adds	r3, r3, r4
 800aeb0:	3b04      	subs	r3, #4
 800aeb2:	6819      	ldr	r1, [r3, #0]
 800aeb4:	2900      	cmp	r1, #0
 800aeb6:	d00f      	beq.n	800aed8 <__mdiff+0x11c>
 800aeb8:	6110      	str	r0, [r2, #16]
 800aeba:	e798      	b.n	800adee <__mdiff+0x32>
 800aebc:	ce02      	ldmia	r6!, {r1}
 800aebe:	b28c      	uxth	r4, r1
 800aec0:	19e4      	adds	r4, r4, r7
 800aec2:	0c0f      	lsrs	r7, r1, #16
 800aec4:	1421      	asrs	r1, r4, #16
 800aec6:	1879      	adds	r1, r7, r1
 800aec8:	b2a4      	uxth	r4, r4
 800aeca:	140f      	asrs	r7, r1, #16
 800aecc:	0409      	lsls	r1, r1, #16
 800aece:	4321      	orrs	r1, r4
 800aed0:	4664      	mov	r4, ip
 800aed2:	c402      	stmia	r4!, {r1}
 800aed4:	46a4      	mov	ip, r4
 800aed6:	e7dd      	b.n	800ae94 <__mdiff+0xd8>
 800aed8:	3801      	subs	r0, #1
 800aeda:	e7e9      	b.n	800aeb0 <__mdiff+0xf4>
 800aedc:	0800d2a9 	.word	0x0800d2a9
 800aee0:	0800d2ba 	.word	0x0800d2ba
 800aee4:	00000237 	.word	0x00000237
 800aee8:	00000245 	.word	0x00000245

0800aeec <__ulp>:
 800aeec:	2000      	movs	r0, #0
 800aeee:	4b0b      	ldr	r3, [pc, #44]	; (800af1c <__ulp+0x30>)
 800aef0:	4019      	ands	r1, r3
 800aef2:	4b0b      	ldr	r3, [pc, #44]	; (800af20 <__ulp+0x34>)
 800aef4:	18c9      	adds	r1, r1, r3
 800aef6:	4281      	cmp	r1, r0
 800aef8:	dc06      	bgt.n	800af08 <__ulp+0x1c>
 800aefa:	4249      	negs	r1, r1
 800aefc:	150b      	asrs	r3, r1, #20
 800aefe:	2b13      	cmp	r3, #19
 800af00:	dc03      	bgt.n	800af0a <__ulp+0x1e>
 800af02:	2180      	movs	r1, #128	; 0x80
 800af04:	0309      	lsls	r1, r1, #12
 800af06:	4119      	asrs	r1, r3
 800af08:	4770      	bx	lr
 800af0a:	3b14      	subs	r3, #20
 800af0c:	2001      	movs	r0, #1
 800af0e:	2b1e      	cmp	r3, #30
 800af10:	dc02      	bgt.n	800af18 <__ulp+0x2c>
 800af12:	2080      	movs	r0, #128	; 0x80
 800af14:	0600      	lsls	r0, r0, #24
 800af16:	40d8      	lsrs	r0, r3
 800af18:	2100      	movs	r1, #0
 800af1a:	e7f5      	b.n	800af08 <__ulp+0x1c>
 800af1c:	7ff00000 	.word	0x7ff00000
 800af20:	fcc00000 	.word	0xfcc00000

0800af24 <__b2d>:
 800af24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af26:	0006      	movs	r6, r0
 800af28:	6903      	ldr	r3, [r0, #16]
 800af2a:	3614      	adds	r6, #20
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	18f3      	adds	r3, r6, r3
 800af30:	1f1d      	subs	r5, r3, #4
 800af32:	682c      	ldr	r4, [r5, #0]
 800af34:	000f      	movs	r7, r1
 800af36:	0020      	movs	r0, r4
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	f7ff fd49 	bl	800a9d0 <__hi0bits>
 800af3e:	2220      	movs	r2, #32
 800af40:	1a12      	subs	r2, r2, r0
 800af42:	603a      	str	r2, [r7, #0]
 800af44:	0003      	movs	r3, r0
 800af46:	4a1c      	ldr	r2, [pc, #112]	; (800afb8 <__b2d+0x94>)
 800af48:	280a      	cmp	r0, #10
 800af4a:	dc15      	bgt.n	800af78 <__b2d+0x54>
 800af4c:	210b      	movs	r1, #11
 800af4e:	0027      	movs	r7, r4
 800af50:	1a09      	subs	r1, r1, r0
 800af52:	40cf      	lsrs	r7, r1
 800af54:	433a      	orrs	r2, r7
 800af56:	468c      	mov	ip, r1
 800af58:	0011      	movs	r1, r2
 800af5a:	2200      	movs	r2, #0
 800af5c:	42ae      	cmp	r6, r5
 800af5e:	d202      	bcs.n	800af66 <__b2d+0x42>
 800af60:	9a01      	ldr	r2, [sp, #4]
 800af62:	3a08      	subs	r2, #8
 800af64:	6812      	ldr	r2, [r2, #0]
 800af66:	3315      	adds	r3, #21
 800af68:	409c      	lsls	r4, r3
 800af6a:	4663      	mov	r3, ip
 800af6c:	0027      	movs	r7, r4
 800af6e:	40da      	lsrs	r2, r3
 800af70:	4317      	orrs	r7, r2
 800af72:	0038      	movs	r0, r7
 800af74:	b003      	add	sp, #12
 800af76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af78:	2700      	movs	r7, #0
 800af7a:	42ae      	cmp	r6, r5
 800af7c:	d202      	bcs.n	800af84 <__b2d+0x60>
 800af7e:	9d01      	ldr	r5, [sp, #4]
 800af80:	3d08      	subs	r5, #8
 800af82:	682f      	ldr	r7, [r5, #0]
 800af84:	210b      	movs	r1, #11
 800af86:	4249      	negs	r1, r1
 800af88:	468c      	mov	ip, r1
 800af8a:	449c      	add	ip, r3
 800af8c:	2b0b      	cmp	r3, #11
 800af8e:	d010      	beq.n	800afb2 <__b2d+0x8e>
 800af90:	4661      	mov	r1, ip
 800af92:	2320      	movs	r3, #32
 800af94:	408c      	lsls	r4, r1
 800af96:	1a5b      	subs	r3, r3, r1
 800af98:	0039      	movs	r1, r7
 800af9a:	40d9      	lsrs	r1, r3
 800af9c:	430c      	orrs	r4, r1
 800af9e:	4322      	orrs	r2, r4
 800afa0:	0011      	movs	r1, r2
 800afa2:	2200      	movs	r2, #0
 800afa4:	42b5      	cmp	r5, r6
 800afa6:	d901      	bls.n	800afac <__b2d+0x88>
 800afa8:	3d04      	subs	r5, #4
 800afaa:	682a      	ldr	r2, [r5, #0]
 800afac:	4664      	mov	r4, ip
 800afae:	40a7      	lsls	r7, r4
 800afb0:	e7dd      	b.n	800af6e <__b2d+0x4a>
 800afb2:	4322      	orrs	r2, r4
 800afb4:	0011      	movs	r1, r2
 800afb6:	e7dc      	b.n	800af72 <__b2d+0x4e>
 800afb8:	3ff00000 	.word	0x3ff00000

0800afbc <__d2b>:
 800afbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afbe:	2101      	movs	r1, #1
 800afc0:	0014      	movs	r4, r2
 800afc2:	001d      	movs	r5, r3
 800afc4:	9f08      	ldr	r7, [sp, #32]
 800afc6:	f7ff fc0b 	bl	800a7e0 <_Balloc>
 800afca:	1e06      	subs	r6, r0, #0
 800afcc:	d105      	bne.n	800afda <__d2b+0x1e>
 800afce:	0032      	movs	r2, r6
 800afd0:	4b24      	ldr	r3, [pc, #144]	; (800b064 <__d2b+0xa8>)
 800afd2:	4825      	ldr	r0, [pc, #148]	; (800b068 <__d2b+0xac>)
 800afd4:	4925      	ldr	r1, [pc, #148]	; (800b06c <__d2b+0xb0>)
 800afd6:	f001 f9d1 	bl	800c37c <__assert_func>
 800afda:	032b      	lsls	r3, r5, #12
 800afdc:	006d      	lsls	r5, r5, #1
 800afde:	0b1b      	lsrs	r3, r3, #12
 800afe0:	0d6d      	lsrs	r5, r5, #21
 800afe2:	d125      	bne.n	800b030 <__d2b+0x74>
 800afe4:	9301      	str	r3, [sp, #4]
 800afe6:	2c00      	cmp	r4, #0
 800afe8:	d028      	beq.n	800b03c <__d2b+0x80>
 800afea:	4668      	mov	r0, sp
 800afec:	9400      	str	r4, [sp, #0]
 800afee:	f7ff fd09 	bl	800aa04 <__lo0bits>
 800aff2:	9b01      	ldr	r3, [sp, #4]
 800aff4:	9900      	ldr	r1, [sp, #0]
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d01e      	beq.n	800b038 <__d2b+0x7c>
 800affa:	2220      	movs	r2, #32
 800affc:	001c      	movs	r4, r3
 800affe:	1a12      	subs	r2, r2, r0
 800b000:	4094      	lsls	r4, r2
 800b002:	0022      	movs	r2, r4
 800b004:	40c3      	lsrs	r3, r0
 800b006:	430a      	orrs	r2, r1
 800b008:	6172      	str	r2, [r6, #20]
 800b00a:	9301      	str	r3, [sp, #4]
 800b00c:	9c01      	ldr	r4, [sp, #4]
 800b00e:	61b4      	str	r4, [r6, #24]
 800b010:	1e63      	subs	r3, r4, #1
 800b012:	419c      	sbcs	r4, r3
 800b014:	3401      	adds	r4, #1
 800b016:	6134      	str	r4, [r6, #16]
 800b018:	2d00      	cmp	r5, #0
 800b01a:	d017      	beq.n	800b04c <__d2b+0x90>
 800b01c:	2435      	movs	r4, #53	; 0x35
 800b01e:	4b14      	ldr	r3, [pc, #80]	; (800b070 <__d2b+0xb4>)
 800b020:	18ed      	adds	r5, r5, r3
 800b022:	182d      	adds	r5, r5, r0
 800b024:	603d      	str	r5, [r7, #0]
 800b026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b028:	1a24      	subs	r4, r4, r0
 800b02a:	601c      	str	r4, [r3, #0]
 800b02c:	0030      	movs	r0, r6
 800b02e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b030:	2280      	movs	r2, #128	; 0x80
 800b032:	0352      	lsls	r2, r2, #13
 800b034:	4313      	orrs	r3, r2
 800b036:	e7d5      	b.n	800afe4 <__d2b+0x28>
 800b038:	6171      	str	r1, [r6, #20]
 800b03a:	e7e7      	b.n	800b00c <__d2b+0x50>
 800b03c:	a801      	add	r0, sp, #4
 800b03e:	f7ff fce1 	bl	800aa04 <__lo0bits>
 800b042:	9b01      	ldr	r3, [sp, #4]
 800b044:	2401      	movs	r4, #1
 800b046:	6173      	str	r3, [r6, #20]
 800b048:	3020      	adds	r0, #32
 800b04a:	e7e4      	b.n	800b016 <__d2b+0x5a>
 800b04c:	4b09      	ldr	r3, [pc, #36]	; (800b074 <__d2b+0xb8>)
 800b04e:	18c0      	adds	r0, r0, r3
 800b050:	4b09      	ldr	r3, [pc, #36]	; (800b078 <__d2b+0xbc>)
 800b052:	6038      	str	r0, [r7, #0]
 800b054:	18e3      	adds	r3, r4, r3
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	18f3      	adds	r3, r6, r3
 800b05a:	6958      	ldr	r0, [r3, #20]
 800b05c:	f7ff fcb8 	bl	800a9d0 <__hi0bits>
 800b060:	0164      	lsls	r4, r4, #5
 800b062:	e7e0      	b.n	800b026 <__d2b+0x6a>
 800b064:	0800d2a9 	.word	0x0800d2a9
 800b068:	0800d2ba 	.word	0x0800d2ba
 800b06c:	0000030f 	.word	0x0000030f
 800b070:	fffffbcd 	.word	0xfffffbcd
 800b074:	fffffbce 	.word	0xfffffbce
 800b078:	3fffffff 	.word	0x3fffffff

0800b07c <__ratio>:
 800b07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b07e:	b087      	sub	sp, #28
 800b080:	000f      	movs	r7, r1
 800b082:	a904      	add	r1, sp, #16
 800b084:	0006      	movs	r6, r0
 800b086:	f7ff ff4d 	bl	800af24 <__b2d>
 800b08a:	9000      	str	r0, [sp, #0]
 800b08c:	9101      	str	r1, [sp, #4]
 800b08e:	9c00      	ldr	r4, [sp, #0]
 800b090:	9d01      	ldr	r5, [sp, #4]
 800b092:	0038      	movs	r0, r7
 800b094:	a905      	add	r1, sp, #20
 800b096:	f7ff ff45 	bl	800af24 <__b2d>
 800b09a:	9002      	str	r0, [sp, #8]
 800b09c:	9103      	str	r1, [sp, #12]
 800b09e:	9a02      	ldr	r2, [sp, #8]
 800b0a0:	9b03      	ldr	r3, [sp, #12]
 800b0a2:	6930      	ldr	r0, [r6, #16]
 800b0a4:	6939      	ldr	r1, [r7, #16]
 800b0a6:	9e04      	ldr	r6, [sp, #16]
 800b0a8:	1a40      	subs	r0, r0, r1
 800b0aa:	9905      	ldr	r1, [sp, #20]
 800b0ac:	0140      	lsls	r0, r0, #5
 800b0ae:	1a71      	subs	r1, r6, r1
 800b0b0:	1841      	adds	r1, r0, r1
 800b0b2:	0508      	lsls	r0, r1, #20
 800b0b4:	2900      	cmp	r1, #0
 800b0b6:	dd07      	ble.n	800b0c8 <__ratio+0x4c>
 800b0b8:	9901      	ldr	r1, [sp, #4]
 800b0ba:	1845      	adds	r5, r0, r1
 800b0bc:	0020      	movs	r0, r4
 800b0be:	0029      	movs	r1, r5
 800b0c0:	f7f5 fedc 	bl	8000e7c <__aeabi_ddiv>
 800b0c4:	b007      	add	sp, #28
 800b0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0c8:	9903      	ldr	r1, [sp, #12]
 800b0ca:	1a0b      	subs	r3, r1, r0
 800b0cc:	e7f6      	b.n	800b0bc <__ratio+0x40>

0800b0ce <__copybits>:
 800b0ce:	b570      	push	{r4, r5, r6, lr}
 800b0d0:	0014      	movs	r4, r2
 800b0d2:	0005      	movs	r5, r0
 800b0d4:	3901      	subs	r1, #1
 800b0d6:	6913      	ldr	r3, [r2, #16]
 800b0d8:	1149      	asrs	r1, r1, #5
 800b0da:	3101      	adds	r1, #1
 800b0dc:	0089      	lsls	r1, r1, #2
 800b0de:	3414      	adds	r4, #20
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	1841      	adds	r1, r0, r1
 800b0e4:	18e3      	adds	r3, r4, r3
 800b0e6:	42a3      	cmp	r3, r4
 800b0e8:	d80d      	bhi.n	800b106 <__copybits+0x38>
 800b0ea:	0014      	movs	r4, r2
 800b0ec:	3411      	adds	r4, #17
 800b0ee:	2500      	movs	r5, #0
 800b0f0:	429c      	cmp	r4, r3
 800b0f2:	d803      	bhi.n	800b0fc <__copybits+0x2e>
 800b0f4:	1a9b      	subs	r3, r3, r2
 800b0f6:	3b11      	subs	r3, #17
 800b0f8:	089b      	lsrs	r3, r3, #2
 800b0fa:	009d      	lsls	r5, r3, #2
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	1940      	adds	r0, r0, r5
 800b100:	4281      	cmp	r1, r0
 800b102:	d803      	bhi.n	800b10c <__copybits+0x3e>
 800b104:	bd70      	pop	{r4, r5, r6, pc}
 800b106:	cc40      	ldmia	r4!, {r6}
 800b108:	c540      	stmia	r5!, {r6}
 800b10a:	e7ec      	b.n	800b0e6 <__copybits+0x18>
 800b10c:	c008      	stmia	r0!, {r3}
 800b10e:	e7f7      	b.n	800b100 <__copybits+0x32>

0800b110 <__any_on>:
 800b110:	0002      	movs	r2, r0
 800b112:	6900      	ldr	r0, [r0, #16]
 800b114:	b510      	push	{r4, lr}
 800b116:	3214      	adds	r2, #20
 800b118:	114b      	asrs	r3, r1, #5
 800b11a:	4298      	cmp	r0, r3
 800b11c:	db13      	blt.n	800b146 <__any_on+0x36>
 800b11e:	dd0c      	ble.n	800b13a <__any_on+0x2a>
 800b120:	241f      	movs	r4, #31
 800b122:	0008      	movs	r0, r1
 800b124:	4020      	ands	r0, r4
 800b126:	4221      	tst	r1, r4
 800b128:	d007      	beq.n	800b13a <__any_on+0x2a>
 800b12a:	0099      	lsls	r1, r3, #2
 800b12c:	588c      	ldr	r4, [r1, r2]
 800b12e:	0021      	movs	r1, r4
 800b130:	40c1      	lsrs	r1, r0
 800b132:	4081      	lsls	r1, r0
 800b134:	2001      	movs	r0, #1
 800b136:	428c      	cmp	r4, r1
 800b138:	d104      	bne.n	800b144 <__any_on+0x34>
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	18d3      	adds	r3, r2, r3
 800b13e:	4293      	cmp	r3, r2
 800b140:	d803      	bhi.n	800b14a <__any_on+0x3a>
 800b142:	2000      	movs	r0, #0
 800b144:	bd10      	pop	{r4, pc}
 800b146:	0003      	movs	r3, r0
 800b148:	e7f7      	b.n	800b13a <__any_on+0x2a>
 800b14a:	3b04      	subs	r3, #4
 800b14c:	6819      	ldr	r1, [r3, #0]
 800b14e:	2900      	cmp	r1, #0
 800b150:	d0f5      	beq.n	800b13e <__any_on+0x2e>
 800b152:	2001      	movs	r0, #1
 800b154:	e7f6      	b.n	800b144 <__any_on+0x34>
	...

0800b158 <sulp>:
 800b158:	b570      	push	{r4, r5, r6, lr}
 800b15a:	0016      	movs	r6, r2
 800b15c:	000d      	movs	r5, r1
 800b15e:	f7ff fec5 	bl	800aeec <__ulp>
 800b162:	2e00      	cmp	r6, #0
 800b164:	d00d      	beq.n	800b182 <sulp+0x2a>
 800b166:	236b      	movs	r3, #107	; 0x6b
 800b168:	006a      	lsls	r2, r5, #1
 800b16a:	0d52      	lsrs	r2, r2, #21
 800b16c:	1a9b      	subs	r3, r3, r2
 800b16e:	2b00      	cmp	r3, #0
 800b170:	dd07      	ble.n	800b182 <sulp+0x2a>
 800b172:	2400      	movs	r4, #0
 800b174:	4a03      	ldr	r2, [pc, #12]	; (800b184 <sulp+0x2c>)
 800b176:	051b      	lsls	r3, r3, #20
 800b178:	189d      	adds	r5, r3, r2
 800b17a:	002b      	movs	r3, r5
 800b17c:	0022      	movs	r2, r4
 800b17e:	f7f6 fa77 	bl	8001670 <__aeabi_dmul>
 800b182:	bd70      	pop	{r4, r5, r6, pc}
 800b184:	3ff00000 	.word	0x3ff00000

0800b188 <_strtod_l>:
 800b188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b18a:	b0a1      	sub	sp, #132	; 0x84
 800b18c:	9219      	str	r2, [sp, #100]	; 0x64
 800b18e:	2200      	movs	r2, #0
 800b190:	2600      	movs	r6, #0
 800b192:	2700      	movs	r7, #0
 800b194:	9004      	str	r0, [sp, #16]
 800b196:	9107      	str	r1, [sp, #28]
 800b198:	921c      	str	r2, [sp, #112]	; 0x70
 800b19a:	911b      	str	r1, [sp, #108]	; 0x6c
 800b19c:	780a      	ldrb	r2, [r1, #0]
 800b19e:	2a2b      	cmp	r2, #43	; 0x2b
 800b1a0:	d055      	beq.n	800b24e <_strtod_l+0xc6>
 800b1a2:	d841      	bhi.n	800b228 <_strtod_l+0xa0>
 800b1a4:	2a0d      	cmp	r2, #13
 800b1a6:	d83b      	bhi.n	800b220 <_strtod_l+0x98>
 800b1a8:	2a08      	cmp	r2, #8
 800b1aa:	d83b      	bhi.n	800b224 <_strtod_l+0x9c>
 800b1ac:	2a00      	cmp	r2, #0
 800b1ae:	d044      	beq.n	800b23a <_strtod_l+0xb2>
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	920f      	str	r2, [sp, #60]	; 0x3c
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b1b8:	9109      	str	r1, [sp, #36]	; 0x24
 800b1ba:	782a      	ldrb	r2, [r5, #0]
 800b1bc:	2a30      	cmp	r2, #48	; 0x30
 800b1be:	d000      	beq.n	800b1c2 <_strtod_l+0x3a>
 800b1c0:	e085      	b.n	800b2ce <_strtod_l+0x146>
 800b1c2:	786a      	ldrb	r2, [r5, #1]
 800b1c4:	3120      	adds	r1, #32
 800b1c6:	438a      	bics	r2, r1
 800b1c8:	2a58      	cmp	r2, #88	; 0x58
 800b1ca:	d000      	beq.n	800b1ce <_strtod_l+0x46>
 800b1cc:	e075      	b.n	800b2ba <_strtod_l+0x132>
 800b1ce:	9302      	str	r3, [sp, #8]
 800b1d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1d2:	4a97      	ldr	r2, [pc, #604]	; (800b430 <_strtod_l+0x2a8>)
 800b1d4:	9301      	str	r3, [sp, #4]
 800b1d6:	ab1c      	add	r3, sp, #112	; 0x70
 800b1d8:	9300      	str	r3, [sp, #0]
 800b1da:	9804      	ldr	r0, [sp, #16]
 800b1dc:	ab1d      	add	r3, sp, #116	; 0x74
 800b1de:	a91b      	add	r1, sp, #108	; 0x6c
 800b1e0:	f001 f982 	bl	800c4e8 <__gethex>
 800b1e4:	230f      	movs	r3, #15
 800b1e6:	0002      	movs	r2, r0
 800b1e8:	401a      	ands	r2, r3
 800b1ea:	0004      	movs	r4, r0
 800b1ec:	9205      	str	r2, [sp, #20]
 800b1ee:	4218      	tst	r0, r3
 800b1f0:	d005      	beq.n	800b1fe <_strtod_l+0x76>
 800b1f2:	2a06      	cmp	r2, #6
 800b1f4:	d12d      	bne.n	800b252 <_strtod_l+0xca>
 800b1f6:	1c6b      	adds	r3, r5, #1
 800b1f8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <_strtod_l+0x82>
 800b204:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b206:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b208:	6013      	str	r3, [r2, #0]
 800b20a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d01b      	beq.n	800b248 <_strtod_l+0xc0>
 800b210:	2380      	movs	r3, #128	; 0x80
 800b212:	0032      	movs	r2, r6
 800b214:	061b      	lsls	r3, r3, #24
 800b216:	18fb      	adds	r3, r7, r3
 800b218:	0010      	movs	r0, r2
 800b21a:	0019      	movs	r1, r3
 800b21c:	b021      	add	sp, #132	; 0x84
 800b21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b220:	2a20      	cmp	r2, #32
 800b222:	d1c5      	bne.n	800b1b0 <_strtod_l+0x28>
 800b224:	3101      	adds	r1, #1
 800b226:	e7b8      	b.n	800b19a <_strtod_l+0x12>
 800b228:	2a2d      	cmp	r2, #45	; 0x2d
 800b22a:	d1c1      	bne.n	800b1b0 <_strtod_l+0x28>
 800b22c:	3a2c      	subs	r2, #44	; 0x2c
 800b22e:	920f      	str	r2, [sp, #60]	; 0x3c
 800b230:	1c4a      	adds	r2, r1, #1
 800b232:	921b      	str	r2, [sp, #108]	; 0x6c
 800b234:	784a      	ldrb	r2, [r1, #1]
 800b236:	2a00      	cmp	r2, #0
 800b238:	d1bc      	bne.n	800b1b4 <_strtod_l+0x2c>
 800b23a:	9b07      	ldr	r3, [sp, #28]
 800b23c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b23e:	2300      	movs	r3, #0
 800b240:	930f      	str	r3, [sp, #60]	; 0x3c
 800b242:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1dd      	bne.n	800b204 <_strtod_l+0x7c>
 800b248:	0032      	movs	r2, r6
 800b24a:	003b      	movs	r3, r7
 800b24c:	e7e4      	b.n	800b218 <_strtod_l+0x90>
 800b24e:	2200      	movs	r2, #0
 800b250:	e7ed      	b.n	800b22e <_strtod_l+0xa6>
 800b252:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b254:	2a00      	cmp	r2, #0
 800b256:	d007      	beq.n	800b268 <_strtod_l+0xe0>
 800b258:	2135      	movs	r1, #53	; 0x35
 800b25a:	a81e      	add	r0, sp, #120	; 0x78
 800b25c:	f7ff ff37 	bl	800b0ce <__copybits>
 800b260:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b262:	9804      	ldr	r0, [sp, #16]
 800b264:	f7ff fb00 	bl	800a868 <_Bfree>
 800b268:	9805      	ldr	r0, [sp, #20]
 800b26a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b26c:	3801      	subs	r0, #1
 800b26e:	2804      	cmp	r0, #4
 800b270:	d806      	bhi.n	800b280 <_strtod_l+0xf8>
 800b272:	f7f4 ff51 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b276:	0312      	.short	0x0312
 800b278:	1e1c      	.short	0x1e1c
 800b27a:	12          	.byte	0x12
 800b27b:	00          	.byte	0x00
 800b27c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b27e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b280:	05e4      	lsls	r4, r4, #23
 800b282:	d502      	bpl.n	800b28a <_strtod_l+0x102>
 800b284:	2380      	movs	r3, #128	; 0x80
 800b286:	061b      	lsls	r3, r3, #24
 800b288:	431f      	orrs	r7, r3
 800b28a:	4b6a      	ldr	r3, [pc, #424]	; (800b434 <_strtod_l+0x2ac>)
 800b28c:	423b      	tst	r3, r7
 800b28e:	d1b6      	bne.n	800b1fe <_strtod_l+0x76>
 800b290:	f7fe fac4 	bl	800981c <__errno>
 800b294:	2322      	movs	r3, #34	; 0x22
 800b296:	6003      	str	r3, [r0, #0]
 800b298:	e7b1      	b.n	800b1fe <_strtod_l+0x76>
 800b29a:	4967      	ldr	r1, [pc, #412]	; (800b438 <_strtod_l+0x2b0>)
 800b29c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b29e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b2a0:	400a      	ands	r2, r1
 800b2a2:	4966      	ldr	r1, [pc, #408]	; (800b43c <_strtod_l+0x2b4>)
 800b2a4:	185b      	adds	r3, r3, r1
 800b2a6:	051b      	lsls	r3, r3, #20
 800b2a8:	431a      	orrs	r2, r3
 800b2aa:	0017      	movs	r7, r2
 800b2ac:	e7e8      	b.n	800b280 <_strtod_l+0xf8>
 800b2ae:	4f61      	ldr	r7, [pc, #388]	; (800b434 <_strtod_l+0x2ac>)
 800b2b0:	e7e6      	b.n	800b280 <_strtod_l+0xf8>
 800b2b2:	2601      	movs	r6, #1
 800b2b4:	4f62      	ldr	r7, [pc, #392]	; (800b440 <_strtod_l+0x2b8>)
 800b2b6:	4276      	negs	r6, r6
 800b2b8:	e7e2      	b.n	800b280 <_strtod_l+0xf8>
 800b2ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2bc:	1c5a      	adds	r2, r3, #1
 800b2be:	921b      	str	r2, [sp, #108]	; 0x6c
 800b2c0:	785b      	ldrb	r3, [r3, #1]
 800b2c2:	2b30      	cmp	r3, #48	; 0x30
 800b2c4:	d0f9      	beq.n	800b2ba <_strtod_l+0x132>
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d099      	beq.n	800b1fe <_strtod_l+0x76>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ce:	2500      	movs	r5, #0
 800b2d0:	220a      	movs	r2, #10
 800b2d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2d4:	950d      	str	r5, [sp, #52]	; 0x34
 800b2d6:	9310      	str	r3, [sp, #64]	; 0x40
 800b2d8:	9508      	str	r5, [sp, #32]
 800b2da:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b2dc:	7804      	ldrb	r4, [r0, #0]
 800b2de:	0023      	movs	r3, r4
 800b2e0:	3b30      	subs	r3, #48	; 0x30
 800b2e2:	b2d9      	uxtb	r1, r3
 800b2e4:	2909      	cmp	r1, #9
 800b2e6:	d927      	bls.n	800b338 <_strtod_l+0x1b0>
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	4956      	ldr	r1, [pc, #344]	; (800b444 <_strtod_l+0x2bc>)
 800b2ec:	f001 f812 	bl	800c314 <strncmp>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d031      	beq.n	800b358 <_strtod_l+0x1d0>
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	0023      	movs	r3, r4
 800b2f8:	4684      	mov	ip, r0
 800b2fa:	9a08      	ldr	r2, [sp, #32]
 800b2fc:	900c      	str	r0, [sp, #48]	; 0x30
 800b2fe:	9205      	str	r2, [sp, #20]
 800b300:	2220      	movs	r2, #32
 800b302:	0019      	movs	r1, r3
 800b304:	4391      	bics	r1, r2
 800b306:	000a      	movs	r2, r1
 800b308:	2100      	movs	r1, #0
 800b30a:	9106      	str	r1, [sp, #24]
 800b30c:	2a45      	cmp	r2, #69	; 0x45
 800b30e:	d000      	beq.n	800b312 <_strtod_l+0x18a>
 800b310:	e0c2      	b.n	800b498 <_strtod_l+0x310>
 800b312:	9b05      	ldr	r3, [sp, #20]
 800b314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b316:	4303      	orrs	r3, r0
 800b318:	4313      	orrs	r3, r2
 800b31a:	428b      	cmp	r3, r1
 800b31c:	d08d      	beq.n	800b23a <_strtod_l+0xb2>
 800b31e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b320:	9307      	str	r3, [sp, #28]
 800b322:	3301      	adds	r3, #1
 800b324:	931b      	str	r3, [sp, #108]	; 0x6c
 800b326:	9b07      	ldr	r3, [sp, #28]
 800b328:	785b      	ldrb	r3, [r3, #1]
 800b32a:	2b2b      	cmp	r3, #43	; 0x2b
 800b32c:	d071      	beq.n	800b412 <_strtod_l+0x28a>
 800b32e:	000c      	movs	r4, r1
 800b330:	2b2d      	cmp	r3, #45	; 0x2d
 800b332:	d174      	bne.n	800b41e <_strtod_l+0x296>
 800b334:	2401      	movs	r4, #1
 800b336:	e06d      	b.n	800b414 <_strtod_l+0x28c>
 800b338:	9908      	ldr	r1, [sp, #32]
 800b33a:	2908      	cmp	r1, #8
 800b33c:	dc09      	bgt.n	800b352 <_strtod_l+0x1ca>
 800b33e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b340:	4351      	muls	r1, r2
 800b342:	185b      	adds	r3, r3, r1
 800b344:	930d      	str	r3, [sp, #52]	; 0x34
 800b346:	9b08      	ldr	r3, [sp, #32]
 800b348:	3001      	adds	r0, #1
 800b34a:	3301      	adds	r3, #1
 800b34c:	9308      	str	r3, [sp, #32]
 800b34e:	901b      	str	r0, [sp, #108]	; 0x6c
 800b350:	e7c3      	b.n	800b2da <_strtod_l+0x152>
 800b352:	4355      	muls	r5, r2
 800b354:	195d      	adds	r5, r3, r5
 800b356:	e7f6      	b.n	800b346 <_strtod_l+0x1be>
 800b358:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	921b      	str	r2, [sp, #108]	; 0x6c
 800b35e:	9a08      	ldr	r2, [sp, #32]
 800b360:	785b      	ldrb	r3, [r3, #1]
 800b362:	2a00      	cmp	r2, #0
 800b364:	d03a      	beq.n	800b3dc <_strtod_l+0x254>
 800b366:	900c      	str	r0, [sp, #48]	; 0x30
 800b368:	9205      	str	r2, [sp, #20]
 800b36a:	001a      	movs	r2, r3
 800b36c:	3a30      	subs	r2, #48	; 0x30
 800b36e:	2a09      	cmp	r2, #9
 800b370:	d912      	bls.n	800b398 <_strtod_l+0x210>
 800b372:	2201      	movs	r2, #1
 800b374:	4694      	mov	ip, r2
 800b376:	e7c3      	b.n	800b300 <_strtod_l+0x178>
 800b378:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b37a:	3001      	adds	r0, #1
 800b37c:	1c5a      	adds	r2, r3, #1
 800b37e:	921b      	str	r2, [sp, #108]	; 0x6c
 800b380:	785b      	ldrb	r3, [r3, #1]
 800b382:	2b30      	cmp	r3, #48	; 0x30
 800b384:	d0f8      	beq.n	800b378 <_strtod_l+0x1f0>
 800b386:	001a      	movs	r2, r3
 800b388:	3a31      	subs	r2, #49	; 0x31
 800b38a:	2a08      	cmp	r2, #8
 800b38c:	d83c      	bhi.n	800b408 <_strtod_l+0x280>
 800b38e:	900c      	str	r0, [sp, #48]	; 0x30
 800b390:	2000      	movs	r0, #0
 800b392:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b394:	9005      	str	r0, [sp, #20]
 800b396:	9210      	str	r2, [sp, #64]	; 0x40
 800b398:	001a      	movs	r2, r3
 800b39a:	1c41      	adds	r1, r0, #1
 800b39c:	3a30      	subs	r2, #48	; 0x30
 800b39e:	2b30      	cmp	r3, #48	; 0x30
 800b3a0:	d016      	beq.n	800b3d0 <_strtod_l+0x248>
 800b3a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3a4:	185b      	adds	r3, r3, r1
 800b3a6:	930c      	str	r3, [sp, #48]	; 0x30
 800b3a8:	9b05      	ldr	r3, [sp, #20]
 800b3aa:	210a      	movs	r1, #10
 800b3ac:	469c      	mov	ip, r3
 800b3ae:	4484      	add	ip, r0
 800b3b0:	4563      	cmp	r3, ip
 800b3b2:	d115      	bne.n	800b3e0 <_strtod_l+0x258>
 800b3b4:	9905      	ldr	r1, [sp, #20]
 800b3b6:	9b05      	ldr	r3, [sp, #20]
 800b3b8:	3101      	adds	r1, #1
 800b3ba:	1809      	adds	r1, r1, r0
 800b3bc:	181b      	adds	r3, r3, r0
 800b3be:	9105      	str	r1, [sp, #20]
 800b3c0:	2b08      	cmp	r3, #8
 800b3c2:	dc19      	bgt.n	800b3f8 <_strtod_l+0x270>
 800b3c4:	230a      	movs	r3, #10
 800b3c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b3c8:	434b      	muls	r3, r1
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	18d3      	adds	r3, r2, r3
 800b3ce:	930d      	str	r3, [sp, #52]	; 0x34
 800b3d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3d2:	0008      	movs	r0, r1
 800b3d4:	1c5a      	adds	r2, r3, #1
 800b3d6:	921b      	str	r2, [sp, #108]	; 0x6c
 800b3d8:	785b      	ldrb	r3, [r3, #1]
 800b3da:	e7c6      	b.n	800b36a <_strtod_l+0x1e2>
 800b3dc:	9808      	ldr	r0, [sp, #32]
 800b3de:	e7d0      	b.n	800b382 <_strtod_l+0x1fa>
 800b3e0:	1c5c      	adds	r4, r3, #1
 800b3e2:	2b08      	cmp	r3, #8
 800b3e4:	dc04      	bgt.n	800b3f0 <_strtod_l+0x268>
 800b3e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3e8:	434b      	muls	r3, r1
 800b3ea:	930d      	str	r3, [sp, #52]	; 0x34
 800b3ec:	0023      	movs	r3, r4
 800b3ee:	e7df      	b.n	800b3b0 <_strtod_l+0x228>
 800b3f0:	2c10      	cmp	r4, #16
 800b3f2:	dcfb      	bgt.n	800b3ec <_strtod_l+0x264>
 800b3f4:	434d      	muls	r5, r1
 800b3f6:	e7f9      	b.n	800b3ec <_strtod_l+0x264>
 800b3f8:	9b05      	ldr	r3, [sp, #20]
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	2b10      	cmp	r3, #16
 800b3fe:	dce7      	bgt.n	800b3d0 <_strtod_l+0x248>
 800b400:	230a      	movs	r3, #10
 800b402:	435d      	muls	r5, r3
 800b404:	1955      	adds	r5, r2, r5
 800b406:	e7e3      	b.n	800b3d0 <_strtod_l+0x248>
 800b408:	2200      	movs	r2, #0
 800b40a:	920c      	str	r2, [sp, #48]	; 0x30
 800b40c:	9205      	str	r2, [sp, #20]
 800b40e:	3201      	adds	r2, #1
 800b410:	e7b0      	b.n	800b374 <_strtod_l+0x1ec>
 800b412:	2400      	movs	r4, #0
 800b414:	9b07      	ldr	r3, [sp, #28]
 800b416:	3302      	adds	r3, #2
 800b418:	931b      	str	r3, [sp, #108]	; 0x6c
 800b41a:	9b07      	ldr	r3, [sp, #28]
 800b41c:	789b      	ldrb	r3, [r3, #2]
 800b41e:	001a      	movs	r2, r3
 800b420:	3a30      	subs	r2, #48	; 0x30
 800b422:	2a09      	cmp	r2, #9
 800b424:	d914      	bls.n	800b450 <_strtod_l+0x2c8>
 800b426:	9a07      	ldr	r2, [sp, #28]
 800b428:	921b      	str	r2, [sp, #108]	; 0x6c
 800b42a:	2200      	movs	r2, #0
 800b42c:	e033      	b.n	800b496 <_strtod_l+0x30e>
 800b42e:	46c0      	nop			; (mov r8, r8)
 800b430:	0800d418 	.word	0x0800d418
 800b434:	7ff00000 	.word	0x7ff00000
 800b438:	ffefffff 	.word	0xffefffff
 800b43c:	00000433 	.word	0x00000433
 800b440:	7fffffff 	.word	0x7fffffff
 800b444:	0800d414 	.word	0x0800d414
 800b448:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b44a:	1c5a      	adds	r2, r3, #1
 800b44c:	921b      	str	r2, [sp, #108]	; 0x6c
 800b44e:	785b      	ldrb	r3, [r3, #1]
 800b450:	2b30      	cmp	r3, #48	; 0x30
 800b452:	d0f9      	beq.n	800b448 <_strtod_l+0x2c0>
 800b454:	2200      	movs	r2, #0
 800b456:	9206      	str	r2, [sp, #24]
 800b458:	001a      	movs	r2, r3
 800b45a:	3a31      	subs	r2, #49	; 0x31
 800b45c:	2a08      	cmp	r2, #8
 800b45e:	d81b      	bhi.n	800b498 <_strtod_l+0x310>
 800b460:	3b30      	subs	r3, #48	; 0x30
 800b462:	930e      	str	r3, [sp, #56]	; 0x38
 800b464:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b466:	9306      	str	r3, [sp, #24]
 800b468:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b46a:	1c59      	adds	r1, r3, #1
 800b46c:	911b      	str	r1, [sp, #108]	; 0x6c
 800b46e:	785b      	ldrb	r3, [r3, #1]
 800b470:	001a      	movs	r2, r3
 800b472:	3a30      	subs	r2, #48	; 0x30
 800b474:	2a09      	cmp	r2, #9
 800b476:	d93a      	bls.n	800b4ee <_strtod_l+0x366>
 800b478:	9a06      	ldr	r2, [sp, #24]
 800b47a:	1a8a      	subs	r2, r1, r2
 800b47c:	49b2      	ldr	r1, [pc, #712]	; (800b748 <_strtod_l+0x5c0>)
 800b47e:	9106      	str	r1, [sp, #24]
 800b480:	2a08      	cmp	r2, #8
 800b482:	dc04      	bgt.n	800b48e <_strtod_l+0x306>
 800b484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b486:	9206      	str	r2, [sp, #24]
 800b488:	428a      	cmp	r2, r1
 800b48a:	dd00      	ble.n	800b48e <_strtod_l+0x306>
 800b48c:	9106      	str	r1, [sp, #24]
 800b48e:	2c00      	cmp	r4, #0
 800b490:	d002      	beq.n	800b498 <_strtod_l+0x310>
 800b492:	9a06      	ldr	r2, [sp, #24]
 800b494:	4252      	negs	r2, r2
 800b496:	9206      	str	r2, [sp, #24]
 800b498:	9a05      	ldr	r2, [sp, #20]
 800b49a:	2a00      	cmp	r2, #0
 800b49c:	d14d      	bne.n	800b53a <_strtod_l+0x3b2>
 800b49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4a0:	4310      	orrs	r0, r2
 800b4a2:	d000      	beq.n	800b4a6 <_strtod_l+0x31e>
 800b4a4:	e6ab      	b.n	800b1fe <_strtod_l+0x76>
 800b4a6:	4662      	mov	r2, ip
 800b4a8:	2a00      	cmp	r2, #0
 800b4aa:	d000      	beq.n	800b4ae <_strtod_l+0x326>
 800b4ac:	e6c5      	b.n	800b23a <_strtod_l+0xb2>
 800b4ae:	2b69      	cmp	r3, #105	; 0x69
 800b4b0:	d027      	beq.n	800b502 <_strtod_l+0x37a>
 800b4b2:	dc23      	bgt.n	800b4fc <_strtod_l+0x374>
 800b4b4:	2b49      	cmp	r3, #73	; 0x49
 800b4b6:	d024      	beq.n	800b502 <_strtod_l+0x37a>
 800b4b8:	2b4e      	cmp	r3, #78	; 0x4e
 800b4ba:	d000      	beq.n	800b4be <_strtod_l+0x336>
 800b4bc:	e6bd      	b.n	800b23a <_strtod_l+0xb2>
 800b4be:	49a3      	ldr	r1, [pc, #652]	; (800b74c <_strtod_l+0x5c4>)
 800b4c0:	a81b      	add	r0, sp, #108	; 0x6c
 800b4c2:	f001 fa47 	bl	800c954 <__match>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	d100      	bne.n	800b4cc <_strtod_l+0x344>
 800b4ca:	e6b6      	b.n	800b23a <_strtod_l+0xb2>
 800b4cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	2b28      	cmp	r3, #40	; 0x28
 800b4d2:	d12c      	bne.n	800b52e <_strtod_l+0x3a6>
 800b4d4:	499e      	ldr	r1, [pc, #632]	; (800b750 <_strtod_l+0x5c8>)
 800b4d6:	aa1e      	add	r2, sp, #120	; 0x78
 800b4d8:	a81b      	add	r0, sp, #108	; 0x6c
 800b4da:	f001 fa4f 	bl	800c97c <__hexnan>
 800b4de:	2805      	cmp	r0, #5
 800b4e0:	d125      	bne.n	800b52e <_strtod_l+0x3a6>
 800b4e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b4e4:	4a9b      	ldr	r2, [pc, #620]	; (800b754 <_strtod_l+0x5cc>)
 800b4e6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b4e8:	431a      	orrs	r2, r3
 800b4ea:	0017      	movs	r7, r2
 800b4ec:	e687      	b.n	800b1fe <_strtod_l+0x76>
 800b4ee:	220a      	movs	r2, #10
 800b4f0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b4f2:	434a      	muls	r2, r1
 800b4f4:	18d2      	adds	r2, r2, r3
 800b4f6:	3a30      	subs	r2, #48	; 0x30
 800b4f8:	920e      	str	r2, [sp, #56]	; 0x38
 800b4fa:	e7b5      	b.n	800b468 <_strtod_l+0x2e0>
 800b4fc:	2b6e      	cmp	r3, #110	; 0x6e
 800b4fe:	d0de      	beq.n	800b4be <_strtod_l+0x336>
 800b500:	e69b      	b.n	800b23a <_strtod_l+0xb2>
 800b502:	4995      	ldr	r1, [pc, #596]	; (800b758 <_strtod_l+0x5d0>)
 800b504:	a81b      	add	r0, sp, #108	; 0x6c
 800b506:	f001 fa25 	bl	800c954 <__match>
 800b50a:	2800      	cmp	r0, #0
 800b50c:	d100      	bne.n	800b510 <_strtod_l+0x388>
 800b50e:	e694      	b.n	800b23a <_strtod_l+0xb2>
 800b510:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b512:	4992      	ldr	r1, [pc, #584]	; (800b75c <_strtod_l+0x5d4>)
 800b514:	3b01      	subs	r3, #1
 800b516:	a81b      	add	r0, sp, #108	; 0x6c
 800b518:	931b      	str	r3, [sp, #108]	; 0x6c
 800b51a:	f001 fa1b 	bl	800c954 <__match>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d102      	bne.n	800b528 <_strtod_l+0x3a0>
 800b522:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b524:	3301      	adds	r3, #1
 800b526:	931b      	str	r3, [sp, #108]	; 0x6c
 800b528:	2600      	movs	r6, #0
 800b52a:	4f8a      	ldr	r7, [pc, #552]	; (800b754 <_strtod_l+0x5cc>)
 800b52c:	e667      	b.n	800b1fe <_strtod_l+0x76>
 800b52e:	488c      	ldr	r0, [pc, #560]	; (800b760 <_strtod_l+0x5d8>)
 800b530:	f000 ff1e 	bl	800c370 <nan>
 800b534:	0006      	movs	r6, r0
 800b536:	000f      	movs	r7, r1
 800b538:	e661      	b.n	800b1fe <_strtod_l+0x76>
 800b53a:	9b06      	ldr	r3, [sp, #24]
 800b53c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b53e:	1a9b      	subs	r3, r3, r2
 800b540:	9309      	str	r3, [sp, #36]	; 0x24
 800b542:	9b08      	ldr	r3, [sp, #32]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d101      	bne.n	800b54c <_strtod_l+0x3c4>
 800b548:	9b05      	ldr	r3, [sp, #20]
 800b54a:	9308      	str	r3, [sp, #32]
 800b54c:	9c05      	ldr	r4, [sp, #20]
 800b54e:	2c10      	cmp	r4, #16
 800b550:	dd00      	ble.n	800b554 <_strtod_l+0x3cc>
 800b552:	2410      	movs	r4, #16
 800b554:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b556:	f7f6 ff53 	bl	8002400 <__aeabi_ui2d>
 800b55a:	9b05      	ldr	r3, [sp, #20]
 800b55c:	0006      	movs	r6, r0
 800b55e:	000f      	movs	r7, r1
 800b560:	2b09      	cmp	r3, #9
 800b562:	dd15      	ble.n	800b590 <_strtod_l+0x408>
 800b564:	0022      	movs	r2, r4
 800b566:	4b7f      	ldr	r3, [pc, #508]	; (800b764 <_strtod_l+0x5dc>)
 800b568:	3a09      	subs	r2, #9
 800b56a:	00d2      	lsls	r2, r2, #3
 800b56c:	189b      	adds	r3, r3, r2
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	f7f6 f87d 	bl	8001670 <__aeabi_dmul>
 800b576:	0006      	movs	r6, r0
 800b578:	0028      	movs	r0, r5
 800b57a:	000f      	movs	r7, r1
 800b57c:	f7f6 ff40 	bl	8002400 <__aeabi_ui2d>
 800b580:	0002      	movs	r2, r0
 800b582:	000b      	movs	r3, r1
 800b584:	0030      	movs	r0, r6
 800b586:	0039      	movs	r1, r7
 800b588:	f7f5 f918 	bl	80007bc <__aeabi_dadd>
 800b58c:	0006      	movs	r6, r0
 800b58e:	000f      	movs	r7, r1
 800b590:	9b05      	ldr	r3, [sp, #20]
 800b592:	2b0f      	cmp	r3, #15
 800b594:	dc39      	bgt.n	800b60a <_strtod_l+0x482>
 800b596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d100      	bne.n	800b59e <_strtod_l+0x416>
 800b59c:	e62f      	b.n	800b1fe <_strtod_l+0x76>
 800b59e:	dd24      	ble.n	800b5ea <_strtod_l+0x462>
 800b5a0:	2b16      	cmp	r3, #22
 800b5a2:	dc09      	bgt.n	800b5b8 <_strtod_l+0x430>
 800b5a4:	496f      	ldr	r1, [pc, #444]	; (800b764 <_strtod_l+0x5dc>)
 800b5a6:	00db      	lsls	r3, r3, #3
 800b5a8:	18c9      	adds	r1, r1, r3
 800b5aa:	0032      	movs	r2, r6
 800b5ac:	6808      	ldr	r0, [r1, #0]
 800b5ae:	6849      	ldr	r1, [r1, #4]
 800b5b0:	003b      	movs	r3, r7
 800b5b2:	f7f6 f85d 	bl	8001670 <__aeabi_dmul>
 800b5b6:	e7bd      	b.n	800b534 <_strtod_l+0x3ac>
 800b5b8:	2325      	movs	r3, #37	; 0x25
 800b5ba:	9a05      	ldr	r2, [sp, #20]
 800b5bc:	1a9b      	subs	r3, r3, r2
 800b5be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	db22      	blt.n	800b60a <_strtod_l+0x482>
 800b5c4:	240f      	movs	r4, #15
 800b5c6:	9b05      	ldr	r3, [sp, #20]
 800b5c8:	4d66      	ldr	r5, [pc, #408]	; (800b764 <_strtod_l+0x5dc>)
 800b5ca:	1ae4      	subs	r4, r4, r3
 800b5cc:	00e1      	lsls	r1, r4, #3
 800b5ce:	1869      	adds	r1, r5, r1
 800b5d0:	0032      	movs	r2, r6
 800b5d2:	6808      	ldr	r0, [r1, #0]
 800b5d4:	6849      	ldr	r1, [r1, #4]
 800b5d6:	003b      	movs	r3, r7
 800b5d8:	f7f6 f84a 	bl	8001670 <__aeabi_dmul>
 800b5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5de:	1b1c      	subs	r4, r3, r4
 800b5e0:	00e4      	lsls	r4, r4, #3
 800b5e2:	192d      	adds	r5, r5, r4
 800b5e4:	682a      	ldr	r2, [r5, #0]
 800b5e6:	686b      	ldr	r3, [r5, #4]
 800b5e8:	e7e3      	b.n	800b5b2 <_strtod_l+0x42a>
 800b5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ec:	3316      	adds	r3, #22
 800b5ee:	db0c      	blt.n	800b60a <_strtod_l+0x482>
 800b5f0:	9906      	ldr	r1, [sp, #24]
 800b5f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5f4:	4b5b      	ldr	r3, [pc, #364]	; (800b764 <_strtod_l+0x5dc>)
 800b5f6:	1a52      	subs	r2, r2, r1
 800b5f8:	00d2      	lsls	r2, r2, #3
 800b5fa:	189b      	adds	r3, r3, r2
 800b5fc:	0030      	movs	r0, r6
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	0039      	movs	r1, r7
 800b604:	f7f5 fc3a 	bl	8000e7c <__aeabi_ddiv>
 800b608:	e794      	b.n	800b534 <_strtod_l+0x3ac>
 800b60a:	9b05      	ldr	r3, [sp, #20]
 800b60c:	1b1c      	subs	r4, r3, r4
 800b60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b610:	18e4      	adds	r4, r4, r3
 800b612:	2c00      	cmp	r4, #0
 800b614:	dd72      	ble.n	800b6fc <_strtod_l+0x574>
 800b616:	220f      	movs	r2, #15
 800b618:	0023      	movs	r3, r4
 800b61a:	4013      	ands	r3, r2
 800b61c:	4214      	tst	r4, r2
 800b61e:	d00a      	beq.n	800b636 <_strtod_l+0x4ae>
 800b620:	4950      	ldr	r1, [pc, #320]	; (800b764 <_strtod_l+0x5dc>)
 800b622:	00db      	lsls	r3, r3, #3
 800b624:	18c9      	adds	r1, r1, r3
 800b626:	0032      	movs	r2, r6
 800b628:	6808      	ldr	r0, [r1, #0]
 800b62a:	6849      	ldr	r1, [r1, #4]
 800b62c:	003b      	movs	r3, r7
 800b62e:	f7f6 f81f 	bl	8001670 <__aeabi_dmul>
 800b632:	0006      	movs	r6, r0
 800b634:	000f      	movs	r7, r1
 800b636:	230f      	movs	r3, #15
 800b638:	439c      	bics	r4, r3
 800b63a:	d04a      	beq.n	800b6d2 <_strtod_l+0x54a>
 800b63c:	3326      	adds	r3, #38	; 0x26
 800b63e:	33ff      	adds	r3, #255	; 0xff
 800b640:	429c      	cmp	r4, r3
 800b642:	dd22      	ble.n	800b68a <_strtod_l+0x502>
 800b644:	2300      	movs	r3, #0
 800b646:	9305      	str	r3, [sp, #20]
 800b648:	9306      	str	r3, [sp, #24]
 800b64a:	930d      	str	r3, [sp, #52]	; 0x34
 800b64c:	9308      	str	r3, [sp, #32]
 800b64e:	2322      	movs	r3, #34	; 0x22
 800b650:	2600      	movs	r6, #0
 800b652:	9a04      	ldr	r2, [sp, #16]
 800b654:	4f3f      	ldr	r7, [pc, #252]	; (800b754 <_strtod_l+0x5cc>)
 800b656:	6013      	str	r3, [r2, #0]
 800b658:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b65a:	42b3      	cmp	r3, r6
 800b65c:	d100      	bne.n	800b660 <_strtod_l+0x4d8>
 800b65e:	e5ce      	b.n	800b1fe <_strtod_l+0x76>
 800b660:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b662:	9804      	ldr	r0, [sp, #16]
 800b664:	f7ff f900 	bl	800a868 <_Bfree>
 800b668:	9908      	ldr	r1, [sp, #32]
 800b66a:	9804      	ldr	r0, [sp, #16]
 800b66c:	f7ff f8fc 	bl	800a868 <_Bfree>
 800b670:	9906      	ldr	r1, [sp, #24]
 800b672:	9804      	ldr	r0, [sp, #16]
 800b674:	f7ff f8f8 	bl	800a868 <_Bfree>
 800b678:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b67a:	9804      	ldr	r0, [sp, #16]
 800b67c:	f7ff f8f4 	bl	800a868 <_Bfree>
 800b680:	9905      	ldr	r1, [sp, #20]
 800b682:	9804      	ldr	r0, [sp, #16]
 800b684:	f7ff f8f0 	bl	800a868 <_Bfree>
 800b688:	e5b9      	b.n	800b1fe <_strtod_l+0x76>
 800b68a:	2300      	movs	r3, #0
 800b68c:	0030      	movs	r0, r6
 800b68e:	0039      	movs	r1, r7
 800b690:	4d35      	ldr	r5, [pc, #212]	; (800b768 <_strtod_l+0x5e0>)
 800b692:	1124      	asrs	r4, r4, #4
 800b694:	9307      	str	r3, [sp, #28]
 800b696:	2c01      	cmp	r4, #1
 800b698:	dc1e      	bgt.n	800b6d8 <_strtod_l+0x550>
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <_strtod_l+0x51a>
 800b69e:	0006      	movs	r6, r0
 800b6a0:	000f      	movs	r7, r1
 800b6a2:	4b32      	ldr	r3, [pc, #200]	; (800b76c <_strtod_l+0x5e4>)
 800b6a4:	9a07      	ldr	r2, [sp, #28]
 800b6a6:	18ff      	adds	r7, r7, r3
 800b6a8:	4b2f      	ldr	r3, [pc, #188]	; (800b768 <_strtod_l+0x5e0>)
 800b6aa:	00d2      	lsls	r2, r2, #3
 800b6ac:	189d      	adds	r5, r3, r2
 800b6ae:	6828      	ldr	r0, [r5, #0]
 800b6b0:	6869      	ldr	r1, [r5, #4]
 800b6b2:	0032      	movs	r2, r6
 800b6b4:	003b      	movs	r3, r7
 800b6b6:	f7f5 ffdb 	bl	8001670 <__aeabi_dmul>
 800b6ba:	4b26      	ldr	r3, [pc, #152]	; (800b754 <_strtod_l+0x5cc>)
 800b6bc:	4a2c      	ldr	r2, [pc, #176]	; (800b770 <_strtod_l+0x5e8>)
 800b6be:	0006      	movs	r6, r0
 800b6c0:	400b      	ands	r3, r1
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d8be      	bhi.n	800b644 <_strtod_l+0x4bc>
 800b6c6:	4a2b      	ldr	r2, [pc, #172]	; (800b774 <_strtod_l+0x5ec>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d913      	bls.n	800b6f4 <_strtod_l+0x56c>
 800b6cc:	2601      	movs	r6, #1
 800b6ce:	4f2a      	ldr	r7, [pc, #168]	; (800b778 <_strtod_l+0x5f0>)
 800b6d0:	4276      	negs	r6, r6
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	9307      	str	r3, [sp, #28]
 800b6d6:	e088      	b.n	800b7ea <_strtod_l+0x662>
 800b6d8:	2201      	movs	r2, #1
 800b6da:	4214      	tst	r4, r2
 800b6dc:	d004      	beq.n	800b6e8 <_strtod_l+0x560>
 800b6de:	682a      	ldr	r2, [r5, #0]
 800b6e0:	686b      	ldr	r3, [r5, #4]
 800b6e2:	f7f5 ffc5 	bl	8001670 <__aeabi_dmul>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	9a07      	ldr	r2, [sp, #28]
 800b6ea:	1064      	asrs	r4, r4, #1
 800b6ec:	3201      	adds	r2, #1
 800b6ee:	9207      	str	r2, [sp, #28]
 800b6f0:	3508      	adds	r5, #8
 800b6f2:	e7d0      	b.n	800b696 <_strtod_l+0x50e>
 800b6f4:	23d4      	movs	r3, #212	; 0xd4
 800b6f6:	049b      	lsls	r3, r3, #18
 800b6f8:	18cf      	adds	r7, r1, r3
 800b6fa:	e7ea      	b.n	800b6d2 <_strtod_l+0x54a>
 800b6fc:	2c00      	cmp	r4, #0
 800b6fe:	d0e8      	beq.n	800b6d2 <_strtod_l+0x54a>
 800b700:	4264      	negs	r4, r4
 800b702:	230f      	movs	r3, #15
 800b704:	0022      	movs	r2, r4
 800b706:	401a      	ands	r2, r3
 800b708:	421c      	tst	r4, r3
 800b70a:	d00a      	beq.n	800b722 <_strtod_l+0x59a>
 800b70c:	4b15      	ldr	r3, [pc, #84]	; (800b764 <_strtod_l+0x5dc>)
 800b70e:	00d2      	lsls	r2, r2, #3
 800b710:	189b      	adds	r3, r3, r2
 800b712:	0030      	movs	r0, r6
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	0039      	movs	r1, r7
 800b71a:	f7f5 fbaf 	bl	8000e7c <__aeabi_ddiv>
 800b71e:	0006      	movs	r6, r0
 800b720:	000f      	movs	r7, r1
 800b722:	1124      	asrs	r4, r4, #4
 800b724:	d0d5      	beq.n	800b6d2 <_strtod_l+0x54a>
 800b726:	2c1f      	cmp	r4, #31
 800b728:	dd28      	ble.n	800b77c <_strtod_l+0x5f4>
 800b72a:	2300      	movs	r3, #0
 800b72c:	9305      	str	r3, [sp, #20]
 800b72e:	9306      	str	r3, [sp, #24]
 800b730:	930d      	str	r3, [sp, #52]	; 0x34
 800b732:	9308      	str	r3, [sp, #32]
 800b734:	2322      	movs	r3, #34	; 0x22
 800b736:	9a04      	ldr	r2, [sp, #16]
 800b738:	2600      	movs	r6, #0
 800b73a:	6013      	str	r3, [r2, #0]
 800b73c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b73e:	2700      	movs	r7, #0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d18d      	bne.n	800b660 <_strtod_l+0x4d8>
 800b744:	e55b      	b.n	800b1fe <_strtod_l+0x76>
 800b746:	46c0      	nop			; (mov r8, r8)
 800b748:	00004e1f 	.word	0x00004e1f
 800b74c:	0800d201 	.word	0x0800d201
 800b750:	0800d42c 	.word	0x0800d42c
 800b754:	7ff00000 	.word	0x7ff00000
 800b758:	0800d1f9 	.word	0x0800d1f9
 800b75c:	0800d230 	.word	0x0800d230
 800b760:	0800d5bd 	.word	0x0800d5bd
 800b764:	0800d340 	.word	0x0800d340
 800b768:	0800d318 	.word	0x0800d318
 800b76c:	fcb00000 	.word	0xfcb00000
 800b770:	7ca00000 	.word	0x7ca00000
 800b774:	7c900000 	.word	0x7c900000
 800b778:	7fefffff 	.word	0x7fefffff
 800b77c:	2310      	movs	r3, #16
 800b77e:	0022      	movs	r2, r4
 800b780:	401a      	ands	r2, r3
 800b782:	9207      	str	r2, [sp, #28]
 800b784:	421c      	tst	r4, r3
 800b786:	d001      	beq.n	800b78c <_strtod_l+0x604>
 800b788:	335a      	adds	r3, #90	; 0x5a
 800b78a:	9307      	str	r3, [sp, #28]
 800b78c:	0030      	movs	r0, r6
 800b78e:	0039      	movs	r1, r7
 800b790:	2300      	movs	r3, #0
 800b792:	4dc4      	ldr	r5, [pc, #784]	; (800baa4 <_strtod_l+0x91c>)
 800b794:	2201      	movs	r2, #1
 800b796:	4214      	tst	r4, r2
 800b798:	d004      	beq.n	800b7a4 <_strtod_l+0x61c>
 800b79a:	682a      	ldr	r2, [r5, #0]
 800b79c:	686b      	ldr	r3, [r5, #4]
 800b79e:	f7f5 ff67 	bl	8001670 <__aeabi_dmul>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	1064      	asrs	r4, r4, #1
 800b7a6:	3508      	adds	r5, #8
 800b7a8:	2c00      	cmp	r4, #0
 800b7aa:	d1f3      	bne.n	800b794 <_strtod_l+0x60c>
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <_strtod_l+0x62c>
 800b7b0:	0006      	movs	r6, r0
 800b7b2:	000f      	movs	r7, r1
 800b7b4:	9b07      	ldr	r3, [sp, #28]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00f      	beq.n	800b7da <_strtod_l+0x652>
 800b7ba:	236b      	movs	r3, #107	; 0x6b
 800b7bc:	007a      	lsls	r2, r7, #1
 800b7be:	0d52      	lsrs	r2, r2, #21
 800b7c0:	0039      	movs	r1, r7
 800b7c2:	1a9b      	subs	r3, r3, r2
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	dd08      	ble.n	800b7da <_strtod_l+0x652>
 800b7c8:	2b1f      	cmp	r3, #31
 800b7ca:	dc00      	bgt.n	800b7ce <_strtod_l+0x646>
 800b7cc:	e121      	b.n	800ba12 <_strtod_l+0x88a>
 800b7ce:	2600      	movs	r6, #0
 800b7d0:	2b34      	cmp	r3, #52	; 0x34
 800b7d2:	dc00      	bgt.n	800b7d6 <_strtod_l+0x64e>
 800b7d4:	e116      	b.n	800ba04 <_strtod_l+0x87c>
 800b7d6:	27dc      	movs	r7, #220	; 0xdc
 800b7d8:	04bf      	lsls	r7, r7, #18
 800b7da:	2200      	movs	r2, #0
 800b7dc:	2300      	movs	r3, #0
 800b7de:	0030      	movs	r0, r6
 800b7e0:	0039      	movs	r1, r7
 800b7e2:	f7f4 fe33 	bl	800044c <__aeabi_dcmpeq>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d19f      	bne.n	800b72a <_strtod_l+0x5a2>
 800b7ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ec:	9a08      	ldr	r2, [sp, #32]
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b7f2:	9b05      	ldr	r3, [sp, #20]
 800b7f4:	9804      	ldr	r0, [sp, #16]
 800b7f6:	f7ff f89f 	bl	800a938 <__s2b>
 800b7fa:	900d      	str	r0, [sp, #52]	; 0x34
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	d100      	bne.n	800b802 <_strtod_l+0x67a>
 800b800:	e720      	b.n	800b644 <_strtod_l+0x4bc>
 800b802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b804:	9906      	ldr	r1, [sp, #24]
 800b806:	17da      	asrs	r2, r3, #31
 800b808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b80a:	1a5b      	subs	r3, r3, r1
 800b80c:	401a      	ands	r2, r3
 800b80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b810:	9215      	str	r2, [sp, #84]	; 0x54
 800b812:	43db      	mvns	r3, r3
 800b814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b816:	17db      	asrs	r3, r3, #31
 800b818:	401a      	ands	r2, r3
 800b81a:	2300      	movs	r3, #0
 800b81c:	9218      	str	r2, [sp, #96]	; 0x60
 800b81e:	9305      	str	r3, [sp, #20]
 800b820:	9306      	str	r3, [sp, #24]
 800b822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b824:	9804      	ldr	r0, [sp, #16]
 800b826:	6859      	ldr	r1, [r3, #4]
 800b828:	f7fe ffda 	bl	800a7e0 <_Balloc>
 800b82c:	9008      	str	r0, [sp, #32]
 800b82e:	2800      	cmp	r0, #0
 800b830:	d100      	bne.n	800b834 <_strtod_l+0x6ac>
 800b832:	e70c      	b.n	800b64e <_strtod_l+0x4c6>
 800b834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b836:	300c      	adds	r0, #12
 800b838:	0019      	movs	r1, r3
 800b83a:	691a      	ldr	r2, [r3, #16]
 800b83c:	310c      	adds	r1, #12
 800b83e:	3202      	adds	r2, #2
 800b840:	0092      	lsls	r2, r2, #2
 800b842:	f000 fd8b 	bl	800c35c <memcpy>
 800b846:	ab1e      	add	r3, sp, #120	; 0x78
 800b848:	9301      	str	r3, [sp, #4]
 800b84a:	ab1d      	add	r3, sp, #116	; 0x74
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	0032      	movs	r2, r6
 800b850:	003b      	movs	r3, r7
 800b852:	9804      	ldr	r0, [sp, #16]
 800b854:	9610      	str	r6, [sp, #64]	; 0x40
 800b856:	9711      	str	r7, [sp, #68]	; 0x44
 800b858:	f7ff fbb0 	bl	800afbc <__d2b>
 800b85c:	901c      	str	r0, [sp, #112]	; 0x70
 800b85e:	2800      	cmp	r0, #0
 800b860:	d100      	bne.n	800b864 <_strtod_l+0x6dc>
 800b862:	e6f4      	b.n	800b64e <_strtod_l+0x4c6>
 800b864:	2101      	movs	r1, #1
 800b866:	9804      	ldr	r0, [sp, #16]
 800b868:	f7ff f8fa 	bl	800aa60 <__i2b>
 800b86c:	9006      	str	r0, [sp, #24]
 800b86e:	2800      	cmp	r0, #0
 800b870:	d100      	bne.n	800b874 <_strtod_l+0x6ec>
 800b872:	e6ec      	b.n	800b64e <_strtod_l+0x4c6>
 800b874:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b876:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b878:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b87a:	1ad4      	subs	r4, r2, r3
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	db01      	blt.n	800b884 <_strtod_l+0x6fc>
 800b880:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b882:	195d      	adds	r5, r3, r5
 800b884:	9907      	ldr	r1, [sp, #28]
 800b886:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b888:	1a5b      	subs	r3, r3, r1
 800b88a:	2136      	movs	r1, #54	; 0x36
 800b88c:	189b      	adds	r3, r3, r2
 800b88e:	1a8a      	subs	r2, r1, r2
 800b890:	4985      	ldr	r1, [pc, #532]	; (800baa8 <_strtod_l+0x920>)
 800b892:	2001      	movs	r0, #1
 800b894:	468c      	mov	ip, r1
 800b896:	2100      	movs	r1, #0
 800b898:	3b01      	subs	r3, #1
 800b89a:	9114      	str	r1, [sp, #80]	; 0x50
 800b89c:	9012      	str	r0, [sp, #72]	; 0x48
 800b89e:	4563      	cmp	r3, ip
 800b8a0:	da07      	bge.n	800b8b2 <_strtod_l+0x72a>
 800b8a2:	4661      	mov	r1, ip
 800b8a4:	1ac9      	subs	r1, r1, r3
 800b8a6:	1a52      	subs	r2, r2, r1
 800b8a8:	291f      	cmp	r1, #31
 800b8aa:	dd00      	ble.n	800b8ae <_strtod_l+0x726>
 800b8ac:	e0b6      	b.n	800ba1c <_strtod_l+0x894>
 800b8ae:	4088      	lsls	r0, r1
 800b8b0:	9012      	str	r0, [sp, #72]	; 0x48
 800b8b2:	18ab      	adds	r3, r5, r2
 800b8b4:	930c      	str	r3, [sp, #48]	; 0x30
 800b8b6:	18a4      	adds	r4, r4, r2
 800b8b8:	9b07      	ldr	r3, [sp, #28]
 800b8ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8bc:	191c      	adds	r4, r3, r4
 800b8be:	002b      	movs	r3, r5
 800b8c0:	4295      	cmp	r5, r2
 800b8c2:	dd00      	ble.n	800b8c6 <_strtod_l+0x73e>
 800b8c4:	0013      	movs	r3, r2
 800b8c6:	42a3      	cmp	r3, r4
 800b8c8:	dd00      	ble.n	800b8cc <_strtod_l+0x744>
 800b8ca:	0023      	movs	r3, r4
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	dd04      	ble.n	800b8da <_strtod_l+0x752>
 800b8d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8d2:	1ae4      	subs	r4, r4, r3
 800b8d4:	1ad2      	subs	r2, r2, r3
 800b8d6:	920c      	str	r2, [sp, #48]	; 0x30
 800b8d8:	1aed      	subs	r5, r5, r3
 800b8da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	dd17      	ble.n	800b910 <_strtod_l+0x788>
 800b8e0:	001a      	movs	r2, r3
 800b8e2:	9906      	ldr	r1, [sp, #24]
 800b8e4:	9804      	ldr	r0, [sp, #16]
 800b8e6:	f7ff f983 	bl	800abf0 <__pow5mult>
 800b8ea:	9006      	str	r0, [sp, #24]
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d100      	bne.n	800b8f2 <_strtod_l+0x76a>
 800b8f0:	e6ad      	b.n	800b64e <_strtod_l+0x4c6>
 800b8f2:	0001      	movs	r1, r0
 800b8f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b8f6:	9804      	ldr	r0, [sp, #16]
 800b8f8:	f7ff f8ca 	bl	800aa90 <__multiply>
 800b8fc:	900e      	str	r0, [sp, #56]	; 0x38
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d100      	bne.n	800b904 <_strtod_l+0x77c>
 800b902:	e6a4      	b.n	800b64e <_strtod_l+0x4c6>
 800b904:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b906:	9804      	ldr	r0, [sp, #16]
 800b908:	f7fe ffae 	bl	800a868 <_Bfree>
 800b90c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b90e:	931c      	str	r3, [sp, #112]	; 0x70
 800b910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b912:	2b00      	cmp	r3, #0
 800b914:	dd00      	ble.n	800b918 <_strtod_l+0x790>
 800b916:	e087      	b.n	800ba28 <_strtod_l+0x8a0>
 800b918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	dd08      	ble.n	800b930 <_strtod_l+0x7a8>
 800b91e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b920:	9908      	ldr	r1, [sp, #32]
 800b922:	9804      	ldr	r0, [sp, #16]
 800b924:	f7ff f964 	bl	800abf0 <__pow5mult>
 800b928:	9008      	str	r0, [sp, #32]
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d100      	bne.n	800b930 <_strtod_l+0x7a8>
 800b92e:	e68e      	b.n	800b64e <_strtod_l+0x4c6>
 800b930:	2c00      	cmp	r4, #0
 800b932:	dd08      	ble.n	800b946 <_strtod_l+0x7be>
 800b934:	0022      	movs	r2, r4
 800b936:	9908      	ldr	r1, [sp, #32]
 800b938:	9804      	ldr	r0, [sp, #16]
 800b93a:	f7ff f9b5 	bl	800aca8 <__lshift>
 800b93e:	9008      	str	r0, [sp, #32]
 800b940:	2800      	cmp	r0, #0
 800b942:	d100      	bne.n	800b946 <_strtod_l+0x7be>
 800b944:	e683      	b.n	800b64e <_strtod_l+0x4c6>
 800b946:	2d00      	cmp	r5, #0
 800b948:	dd08      	ble.n	800b95c <_strtod_l+0x7d4>
 800b94a:	002a      	movs	r2, r5
 800b94c:	9906      	ldr	r1, [sp, #24]
 800b94e:	9804      	ldr	r0, [sp, #16]
 800b950:	f7ff f9aa 	bl	800aca8 <__lshift>
 800b954:	9006      	str	r0, [sp, #24]
 800b956:	2800      	cmp	r0, #0
 800b958:	d100      	bne.n	800b95c <_strtod_l+0x7d4>
 800b95a:	e678      	b.n	800b64e <_strtod_l+0x4c6>
 800b95c:	9a08      	ldr	r2, [sp, #32]
 800b95e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b960:	9804      	ldr	r0, [sp, #16]
 800b962:	f7ff fa2b 	bl	800adbc <__mdiff>
 800b966:	9005      	str	r0, [sp, #20]
 800b968:	2800      	cmp	r0, #0
 800b96a:	d100      	bne.n	800b96e <_strtod_l+0x7e6>
 800b96c:	e66f      	b.n	800b64e <_strtod_l+0x4c6>
 800b96e:	2200      	movs	r2, #0
 800b970:	68c3      	ldr	r3, [r0, #12]
 800b972:	9906      	ldr	r1, [sp, #24]
 800b974:	60c2      	str	r2, [r0, #12]
 800b976:	930c      	str	r3, [sp, #48]	; 0x30
 800b978:	f7ff fa04 	bl	800ad84 <__mcmp>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	da5d      	bge.n	800ba3c <_strtod_l+0x8b4>
 800b980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b982:	4333      	orrs	r3, r6
 800b984:	d000      	beq.n	800b988 <_strtod_l+0x800>
 800b986:	e088      	b.n	800ba9a <_strtod_l+0x912>
 800b988:	033b      	lsls	r3, r7, #12
 800b98a:	d000      	beq.n	800b98e <_strtod_l+0x806>
 800b98c:	e085      	b.n	800ba9a <_strtod_l+0x912>
 800b98e:	22d6      	movs	r2, #214	; 0xd6
 800b990:	4b46      	ldr	r3, [pc, #280]	; (800baac <_strtod_l+0x924>)
 800b992:	04d2      	lsls	r2, r2, #19
 800b994:	403b      	ands	r3, r7
 800b996:	4293      	cmp	r3, r2
 800b998:	d97f      	bls.n	800ba9a <_strtod_l+0x912>
 800b99a:	9b05      	ldr	r3, [sp, #20]
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d103      	bne.n	800b9aa <_strtod_l+0x822>
 800b9a2:	9b05      	ldr	r3, [sp, #20]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	dd77      	ble.n	800ba9a <_strtod_l+0x912>
 800b9aa:	9905      	ldr	r1, [sp, #20]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	9804      	ldr	r0, [sp, #16]
 800b9b0:	f7ff f97a 	bl	800aca8 <__lshift>
 800b9b4:	9906      	ldr	r1, [sp, #24]
 800b9b6:	9005      	str	r0, [sp, #20]
 800b9b8:	f7ff f9e4 	bl	800ad84 <__mcmp>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	dd6c      	ble.n	800ba9a <_strtod_l+0x912>
 800b9c0:	9907      	ldr	r1, [sp, #28]
 800b9c2:	003b      	movs	r3, r7
 800b9c4:	4a39      	ldr	r2, [pc, #228]	; (800baac <_strtod_l+0x924>)
 800b9c6:	2900      	cmp	r1, #0
 800b9c8:	d100      	bne.n	800b9cc <_strtod_l+0x844>
 800b9ca:	e094      	b.n	800baf6 <_strtod_l+0x96e>
 800b9cc:	0011      	movs	r1, r2
 800b9ce:	20d6      	movs	r0, #214	; 0xd6
 800b9d0:	4039      	ands	r1, r7
 800b9d2:	04c0      	lsls	r0, r0, #19
 800b9d4:	4281      	cmp	r1, r0
 800b9d6:	dd00      	ble.n	800b9da <_strtod_l+0x852>
 800b9d8:	e08d      	b.n	800baf6 <_strtod_l+0x96e>
 800b9da:	23dc      	movs	r3, #220	; 0xdc
 800b9dc:	049b      	lsls	r3, r3, #18
 800b9de:	4299      	cmp	r1, r3
 800b9e0:	dc00      	bgt.n	800b9e4 <_strtod_l+0x85c>
 800b9e2:	e6a7      	b.n	800b734 <_strtod_l+0x5ac>
 800b9e4:	0030      	movs	r0, r6
 800b9e6:	0039      	movs	r1, r7
 800b9e8:	4b31      	ldr	r3, [pc, #196]	; (800bab0 <_strtod_l+0x928>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f7f5 fe40 	bl	8001670 <__aeabi_dmul>
 800b9f0:	4b2e      	ldr	r3, [pc, #184]	; (800baac <_strtod_l+0x924>)
 800b9f2:	0006      	movs	r6, r0
 800b9f4:	000f      	movs	r7, r1
 800b9f6:	420b      	tst	r3, r1
 800b9f8:	d000      	beq.n	800b9fc <_strtod_l+0x874>
 800b9fa:	e631      	b.n	800b660 <_strtod_l+0x4d8>
 800b9fc:	2322      	movs	r3, #34	; 0x22
 800b9fe:	9a04      	ldr	r2, [sp, #16]
 800ba00:	6013      	str	r3, [r2, #0]
 800ba02:	e62d      	b.n	800b660 <_strtod_l+0x4d8>
 800ba04:	234b      	movs	r3, #75	; 0x4b
 800ba06:	1a9a      	subs	r2, r3, r2
 800ba08:	3b4c      	subs	r3, #76	; 0x4c
 800ba0a:	4093      	lsls	r3, r2
 800ba0c:	4019      	ands	r1, r3
 800ba0e:	000f      	movs	r7, r1
 800ba10:	e6e3      	b.n	800b7da <_strtod_l+0x652>
 800ba12:	2201      	movs	r2, #1
 800ba14:	4252      	negs	r2, r2
 800ba16:	409a      	lsls	r2, r3
 800ba18:	4016      	ands	r6, r2
 800ba1a:	e6de      	b.n	800b7da <_strtod_l+0x652>
 800ba1c:	4925      	ldr	r1, [pc, #148]	; (800bab4 <_strtod_l+0x92c>)
 800ba1e:	1acb      	subs	r3, r1, r3
 800ba20:	0001      	movs	r1, r0
 800ba22:	4099      	lsls	r1, r3
 800ba24:	9114      	str	r1, [sp, #80]	; 0x50
 800ba26:	e743      	b.n	800b8b0 <_strtod_l+0x728>
 800ba28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba2a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ba2c:	9804      	ldr	r0, [sp, #16]
 800ba2e:	f7ff f93b 	bl	800aca8 <__lshift>
 800ba32:	901c      	str	r0, [sp, #112]	; 0x70
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d000      	beq.n	800ba3a <_strtod_l+0x8b2>
 800ba38:	e76e      	b.n	800b918 <_strtod_l+0x790>
 800ba3a:	e608      	b.n	800b64e <_strtod_l+0x4c6>
 800ba3c:	970e      	str	r7, [sp, #56]	; 0x38
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d177      	bne.n	800bb32 <_strtod_l+0x9aa>
 800ba42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba44:	033b      	lsls	r3, r7, #12
 800ba46:	0b1b      	lsrs	r3, r3, #12
 800ba48:	2a00      	cmp	r2, #0
 800ba4a:	d039      	beq.n	800bac0 <_strtod_l+0x938>
 800ba4c:	4a1a      	ldr	r2, [pc, #104]	; (800bab8 <_strtod_l+0x930>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d139      	bne.n	800bac6 <_strtod_l+0x93e>
 800ba52:	2101      	movs	r1, #1
 800ba54:	9b07      	ldr	r3, [sp, #28]
 800ba56:	4249      	negs	r1, r1
 800ba58:	0032      	movs	r2, r6
 800ba5a:	0008      	movs	r0, r1
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00b      	beq.n	800ba78 <_strtod_l+0x8f0>
 800ba60:	24d4      	movs	r4, #212	; 0xd4
 800ba62:	4b12      	ldr	r3, [pc, #72]	; (800baac <_strtod_l+0x924>)
 800ba64:	0008      	movs	r0, r1
 800ba66:	403b      	ands	r3, r7
 800ba68:	04e4      	lsls	r4, r4, #19
 800ba6a:	42a3      	cmp	r3, r4
 800ba6c:	d804      	bhi.n	800ba78 <_strtod_l+0x8f0>
 800ba6e:	306c      	adds	r0, #108	; 0x6c
 800ba70:	0d1b      	lsrs	r3, r3, #20
 800ba72:	1ac3      	subs	r3, r0, r3
 800ba74:	4099      	lsls	r1, r3
 800ba76:	0008      	movs	r0, r1
 800ba78:	4282      	cmp	r2, r0
 800ba7a:	d124      	bne.n	800bac6 <_strtod_l+0x93e>
 800ba7c:	4b0f      	ldr	r3, [pc, #60]	; (800babc <_strtod_l+0x934>)
 800ba7e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ba80:	4299      	cmp	r1, r3
 800ba82:	d102      	bne.n	800ba8a <_strtod_l+0x902>
 800ba84:	3201      	adds	r2, #1
 800ba86:	d100      	bne.n	800ba8a <_strtod_l+0x902>
 800ba88:	e5e1      	b.n	800b64e <_strtod_l+0x4c6>
 800ba8a:	4b08      	ldr	r3, [pc, #32]	; (800baac <_strtod_l+0x924>)
 800ba8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba8e:	2600      	movs	r6, #0
 800ba90:	401a      	ands	r2, r3
 800ba92:	0013      	movs	r3, r2
 800ba94:	2280      	movs	r2, #128	; 0x80
 800ba96:	0352      	lsls	r2, r2, #13
 800ba98:	189f      	adds	r7, r3, r2
 800ba9a:	9b07      	ldr	r3, [sp, #28]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1a1      	bne.n	800b9e4 <_strtod_l+0x85c>
 800baa0:	e5de      	b.n	800b660 <_strtod_l+0x4d8>
 800baa2:	46c0      	nop			; (mov r8, r8)
 800baa4:	0800d440 	.word	0x0800d440
 800baa8:	fffffc02 	.word	0xfffffc02
 800baac:	7ff00000 	.word	0x7ff00000
 800bab0:	39500000 	.word	0x39500000
 800bab4:	fffffbe2 	.word	0xfffffbe2
 800bab8:	000fffff 	.word	0x000fffff
 800babc:	7fefffff 	.word	0x7fefffff
 800bac0:	4333      	orrs	r3, r6
 800bac2:	d100      	bne.n	800bac6 <_strtod_l+0x93e>
 800bac4:	e77c      	b.n	800b9c0 <_strtod_l+0x838>
 800bac6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d01d      	beq.n	800bb08 <_strtod_l+0x980>
 800bacc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bace:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bad0:	4213      	tst	r3, r2
 800bad2:	d0e2      	beq.n	800ba9a <_strtod_l+0x912>
 800bad4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bad6:	0030      	movs	r0, r6
 800bad8:	0039      	movs	r1, r7
 800bada:	9a07      	ldr	r2, [sp, #28]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d017      	beq.n	800bb10 <_strtod_l+0x988>
 800bae0:	f7ff fb3a 	bl	800b158 <sulp>
 800bae4:	0002      	movs	r2, r0
 800bae6:	000b      	movs	r3, r1
 800bae8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800baea:	9911      	ldr	r1, [sp, #68]	; 0x44
 800baec:	f7f4 fe66 	bl	80007bc <__aeabi_dadd>
 800baf0:	0006      	movs	r6, r0
 800baf2:	000f      	movs	r7, r1
 800baf4:	e7d1      	b.n	800ba9a <_strtod_l+0x912>
 800baf6:	2601      	movs	r6, #1
 800baf8:	4013      	ands	r3, r2
 800bafa:	4a98      	ldr	r2, [pc, #608]	; (800bd5c <_strtod_l+0xbd4>)
 800bafc:	4276      	negs	r6, r6
 800bafe:	189b      	adds	r3, r3, r2
 800bb00:	4a97      	ldr	r2, [pc, #604]	; (800bd60 <_strtod_l+0xbd8>)
 800bb02:	431a      	orrs	r2, r3
 800bb04:	0017      	movs	r7, r2
 800bb06:	e7c8      	b.n	800ba9a <_strtod_l+0x912>
 800bb08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb0a:	4233      	tst	r3, r6
 800bb0c:	d0c5      	beq.n	800ba9a <_strtod_l+0x912>
 800bb0e:	e7e1      	b.n	800bad4 <_strtod_l+0x94c>
 800bb10:	f7ff fb22 	bl	800b158 <sulp>
 800bb14:	0002      	movs	r2, r0
 800bb16:	000b      	movs	r3, r1
 800bb18:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bb1a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bb1c:	f7f6 f86a 	bl	8001bf4 <__aeabi_dsub>
 800bb20:	2200      	movs	r2, #0
 800bb22:	2300      	movs	r3, #0
 800bb24:	0006      	movs	r6, r0
 800bb26:	000f      	movs	r7, r1
 800bb28:	f7f4 fc90 	bl	800044c <__aeabi_dcmpeq>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d0b4      	beq.n	800ba9a <_strtod_l+0x912>
 800bb30:	e600      	b.n	800b734 <_strtod_l+0x5ac>
 800bb32:	9906      	ldr	r1, [sp, #24]
 800bb34:	9805      	ldr	r0, [sp, #20]
 800bb36:	f7ff faa1 	bl	800b07c <__ratio>
 800bb3a:	2380      	movs	r3, #128	; 0x80
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	05db      	lsls	r3, r3, #23
 800bb40:	0004      	movs	r4, r0
 800bb42:	000d      	movs	r5, r1
 800bb44:	f7f4 fc92 	bl	800046c <__aeabi_dcmple>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d06d      	beq.n	800bc28 <_strtod_l+0xaa0>
 800bb4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d000      	beq.n	800bb54 <_strtod_l+0x9cc>
 800bb52:	e07e      	b.n	800bc52 <_strtod_l+0xaca>
 800bb54:	2e00      	cmp	r6, #0
 800bb56:	d158      	bne.n	800bc0a <_strtod_l+0xa82>
 800bb58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb5a:	031b      	lsls	r3, r3, #12
 800bb5c:	d000      	beq.n	800bb60 <_strtod_l+0x9d8>
 800bb5e:	e07f      	b.n	800bc60 <_strtod_l+0xad8>
 800bb60:	2200      	movs	r2, #0
 800bb62:	0020      	movs	r0, r4
 800bb64:	0029      	movs	r1, r5
 800bb66:	4b7f      	ldr	r3, [pc, #508]	; (800bd64 <_strtod_l+0xbdc>)
 800bb68:	f7f4 fc76 	bl	8000458 <__aeabi_dcmplt>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d158      	bne.n	800bc22 <_strtod_l+0xa9a>
 800bb70:	0020      	movs	r0, r4
 800bb72:	0029      	movs	r1, r5
 800bb74:	2200      	movs	r2, #0
 800bb76:	4b7c      	ldr	r3, [pc, #496]	; (800bd68 <_strtod_l+0xbe0>)
 800bb78:	f7f5 fd7a 	bl	8001670 <__aeabi_dmul>
 800bb7c:	0004      	movs	r4, r0
 800bb7e:	000d      	movs	r5, r1
 800bb80:	2380      	movs	r3, #128	; 0x80
 800bb82:	061b      	lsls	r3, r3, #24
 800bb84:	940a      	str	r4, [sp, #40]	; 0x28
 800bb86:	18eb      	adds	r3, r5, r3
 800bb88:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb8e:	9212      	str	r2, [sp, #72]	; 0x48
 800bb90:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb92:	4a76      	ldr	r2, [pc, #472]	; (800bd6c <_strtod_l+0xbe4>)
 800bb94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb96:	4013      	ands	r3, r2
 800bb98:	9314      	str	r3, [sp, #80]	; 0x50
 800bb9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb9c:	4b74      	ldr	r3, [pc, #464]	; (800bd70 <_strtod_l+0xbe8>)
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d000      	beq.n	800bba4 <_strtod_l+0xa1c>
 800bba2:	e091      	b.n	800bcc8 <_strtod_l+0xb40>
 800bba4:	4a73      	ldr	r2, [pc, #460]	; (800bd74 <_strtod_l+0xbec>)
 800bba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bba8:	4694      	mov	ip, r2
 800bbaa:	4463      	add	r3, ip
 800bbac:	001f      	movs	r7, r3
 800bbae:	0030      	movs	r0, r6
 800bbb0:	0019      	movs	r1, r3
 800bbb2:	f7ff f99b 	bl	800aeec <__ulp>
 800bbb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbba:	f7f5 fd59 	bl	8001670 <__aeabi_dmul>
 800bbbe:	0032      	movs	r2, r6
 800bbc0:	003b      	movs	r3, r7
 800bbc2:	f7f4 fdfb 	bl	80007bc <__aeabi_dadd>
 800bbc6:	4a69      	ldr	r2, [pc, #420]	; (800bd6c <_strtod_l+0xbe4>)
 800bbc8:	4b6b      	ldr	r3, [pc, #428]	; (800bd78 <_strtod_l+0xbf0>)
 800bbca:	0006      	movs	r6, r0
 800bbcc:	400a      	ands	r2, r1
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d949      	bls.n	800bc66 <_strtod_l+0xade>
 800bbd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bbd4:	4b69      	ldr	r3, [pc, #420]	; (800bd7c <_strtod_l+0xbf4>)
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d103      	bne.n	800bbe2 <_strtod_l+0xa5a>
 800bbda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bbdc:	3301      	adds	r3, #1
 800bbde:	d100      	bne.n	800bbe2 <_strtod_l+0xa5a>
 800bbe0:	e535      	b.n	800b64e <_strtod_l+0x4c6>
 800bbe2:	2601      	movs	r6, #1
 800bbe4:	4f65      	ldr	r7, [pc, #404]	; (800bd7c <_strtod_l+0xbf4>)
 800bbe6:	4276      	negs	r6, r6
 800bbe8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bbea:	9804      	ldr	r0, [sp, #16]
 800bbec:	f7fe fe3c 	bl	800a868 <_Bfree>
 800bbf0:	9908      	ldr	r1, [sp, #32]
 800bbf2:	9804      	ldr	r0, [sp, #16]
 800bbf4:	f7fe fe38 	bl	800a868 <_Bfree>
 800bbf8:	9906      	ldr	r1, [sp, #24]
 800bbfa:	9804      	ldr	r0, [sp, #16]
 800bbfc:	f7fe fe34 	bl	800a868 <_Bfree>
 800bc00:	9905      	ldr	r1, [sp, #20]
 800bc02:	9804      	ldr	r0, [sp, #16]
 800bc04:	f7fe fe30 	bl	800a868 <_Bfree>
 800bc08:	e60b      	b.n	800b822 <_strtod_l+0x69a>
 800bc0a:	2e01      	cmp	r6, #1
 800bc0c:	d103      	bne.n	800bc16 <_strtod_l+0xa8e>
 800bc0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d100      	bne.n	800bc16 <_strtod_l+0xa8e>
 800bc14:	e58e      	b.n	800b734 <_strtod_l+0x5ac>
 800bc16:	2300      	movs	r3, #0
 800bc18:	4c59      	ldr	r4, [pc, #356]	; (800bd80 <_strtod_l+0xbf8>)
 800bc1a:	930a      	str	r3, [sp, #40]	; 0x28
 800bc1c:	940b      	str	r4, [sp, #44]	; 0x2c
 800bc1e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bc20:	e01c      	b.n	800bc5c <_strtod_l+0xad4>
 800bc22:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bc24:	4d50      	ldr	r5, [pc, #320]	; (800bd68 <_strtod_l+0xbe0>)
 800bc26:	e7ab      	b.n	800bb80 <_strtod_l+0x9f8>
 800bc28:	2200      	movs	r2, #0
 800bc2a:	0020      	movs	r0, r4
 800bc2c:	0029      	movs	r1, r5
 800bc2e:	4b4e      	ldr	r3, [pc, #312]	; (800bd68 <_strtod_l+0xbe0>)
 800bc30:	f7f5 fd1e 	bl	8001670 <__aeabi_dmul>
 800bc34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc36:	0004      	movs	r4, r0
 800bc38:	000b      	movs	r3, r1
 800bc3a:	000d      	movs	r5, r1
 800bc3c:	2a00      	cmp	r2, #0
 800bc3e:	d104      	bne.n	800bc4a <_strtod_l+0xac2>
 800bc40:	2280      	movs	r2, #128	; 0x80
 800bc42:	0612      	lsls	r2, r2, #24
 800bc44:	900a      	str	r0, [sp, #40]	; 0x28
 800bc46:	188b      	adds	r3, r1, r2
 800bc48:	e79e      	b.n	800bb88 <_strtod_l+0xa00>
 800bc4a:	0002      	movs	r2, r0
 800bc4c:	920a      	str	r2, [sp, #40]	; 0x28
 800bc4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc50:	e79b      	b.n	800bb8a <_strtod_l+0xa02>
 800bc52:	2300      	movs	r3, #0
 800bc54:	4c43      	ldr	r4, [pc, #268]	; (800bd64 <_strtod_l+0xbdc>)
 800bc56:	930a      	str	r3, [sp, #40]	; 0x28
 800bc58:	940b      	str	r4, [sp, #44]	; 0x2c
 800bc5a:	2400      	movs	r4, #0
 800bc5c:	4d41      	ldr	r5, [pc, #260]	; (800bd64 <_strtod_l+0xbdc>)
 800bc5e:	e794      	b.n	800bb8a <_strtod_l+0xa02>
 800bc60:	2300      	movs	r3, #0
 800bc62:	4c47      	ldr	r4, [pc, #284]	; (800bd80 <_strtod_l+0xbf8>)
 800bc64:	e7f7      	b.n	800bc56 <_strtod_l+0xace>
 800bc66:	23d4      	movs	r3, #212	; 0xd4
 800bc68:	049b      	lsls	r3, r3, #18
 800bc6a:	18cf      	adds	r7, r1, r3
 800bc6c:	9b07      	ldr	r3, [sp, #28]
 800bc6e:	970e      	str	r7, [sp, #56]	; 0x38
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1b9      	bne.n	800bbe8 <_strtod_l+0xa60>
 800bc74:	4b3d      	ldr	r3, [pc, #244]	; (800bd6c <_strtod_l+0xbe4>)
 800bc76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc78:	403b      	ands	r3, r7
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d1b4      	bne.n	800bbe8 <_strtod_l+0xa60>
 800bc7e:	0020      	movs	r0, r4
 800bc80:	0029      	movs	r1, r5
 800bc82:	f7f4 fc7d 	bl	8000580 <__aeabi_d2lz>
 800bc86:	f7f4 fcb7 	bl	80005f8 <__aeabi_l2d>
 800bc8a:	0002      	movs	r2, r0
 800bc8c:	000b      	movs	r3, r1
 800bc8e:	0020      	movs	r0, r4
 800bc90:	0029      	movs	r1, r5
 800bc92:	f7f5 ffaf 	bl	8001bf4 <__aeabi_dsub>
 800bc96:	033b      	lsls	r3, r7, #12
 800bc98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc9a:	0b1b      	lsrs	r3, r3, #12
 800bc9c:	4333      	orrs	r3, r6
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	0004      	movs	r4, r0
 800bca2:	000d      	movs	r5, r1
 800bca4:	4a37      	ldr	r2, [pc, #220]	; (800bd84 <_strtod_l+0xbfc>)
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d054      	beq.n	800bd54 <_strtod_l+0xbcc>
 800bcaa:	4b37      	ldr	r3, [pc, #220]	; (800bd88 <_strtod_l+0xc00>)
 800bcac:	f7f4 fbd4 	bl	8000458 <__aeabi_dcmplt>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	d000      	beq.n	800bcb6 <_strtod_l+0xb2e>
 800bcb4:	e4d4      	b.n	800b660 <_strtod_l+0x4d8>
 800bcb6:	0020      	movs	r0, r4
 800bcb8:	0029      	movs	r1, r5
 800bcba:	4a34      	ldr	r2, [pc, #208]	; (800bd8c <_strtod_l+0xc04>)
 800bcbc:	4b2a      	ldr	r3, [pc, #168]	; (800bd68 <_strtod_l+0xbe0>)
 800bcbe:	f7f4 fbdf 	bl	8000480 <__aeabi_dcmpgt>
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d090      	beq.n	800bbe8 <_strtod_l+0xa60>
 800bcc6:	e4cb      	b.n	800b660 <_strtod_l+0x4d8>
 800bcc8:	9b07      	ldr	r3, [sp, #28]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d02b      	beq.n	800bd26 <_strtod_l+0xb9e>
 800bcce:	23d4      	movs	r3, #212	; 0xd4
 800bcd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bcd2:	04db      	lsls	r3, r3, #19
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d826      	bhi.n	800bd26 <_strtod_l+0xb9e>
 800bcd8:	0020      	movs	r0, r4
 800bcda:	0029      	movs	r1, r5
 800bcdc:	4a2c      	ldr	r2, [pc, #176]	; (800bd90 <_strtod_l+0xc08>)
 800bcde:	4b2d      	ldr	r3, [pc, #180]	; (800bd94 <_strtod_l+0xc0c>)
 800bce0:	f7f4 fbc4 	bl	800046c <__aeabi_dcmple>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	d017      	beq.n	800bd18 <_strtod_l+0xb90>
 800bce8:	0020      	movs	r0, r4
 800bcea:	0029      	movs	r1, r5
 800bcec:	f7f4 fc2a 	bl	8000544 <__aeabi_d2uiz>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d100      	bne.n	800bcf6 <_strtod_l+0xb6e>
 800bcf4:	3001      	adds	r0, #1
 800bcf6:	f7f6 fb83 	bl	8002400 <__aeabi_ui2d>
 800bcfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcfc:	0004      	movs	r4, r0
 800bcfe:	000b      	movs	r3, r1
 800bd00:	000d      	movs	r5, r1
 800bd02:	2a00      	cmp	r2, #0
 800bd04:	d122      	bne.n	800bd4c <_strtod_l+0xbc4>
 800bd06:	2280      	movs	r2, #128	; 0x80
 800bd08:	0612      	lsls	r2, r2, #24
 800bd0a:	188b      	adds	r3, r1, r2
 800bd0c:	9016      	str	r0, [sp, #88]	; 0x58
 800bd0e:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd10:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bd12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd14:	9212      	str	r2, [sp, #72]	; 0x48
 800bd16:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd18:	22d6      	movs	r2, #214	; 0xd6
 800bd1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd1c:	04d2      	lsls	r2, r2, #19
 800bd1e:	189b      	adds	r3, r3, r2
 800bd20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd22:	1a9b      	subs	r3, r3, r2
 800bd24:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd26:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bd28:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bd2a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800bd2c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800bd2e:	f7ff f8dd 	bl	800aeec <__ulp>
 800bd32:	0002      	movs	r2, r0
 800bd34:	000b      	movs	r3, r1
 800bd36:	0030      	movs	r0, r6
 800bd38:	0039      	movs	r1, r7
 800bd3a:	f7f5 fc99 	bl	8001670 <__aeabi_dmul>
 800bd3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd42:	f7f4 fd3b 	bl	80007bc <__aeabi_dadd>
 800bd46:	0006      	movs	r6, r0
 800bd48:	000f      	movs	r7, r1
 800bd4a:	e78f      	b.n	800bc6c <_strtod_l+0xae4>
 800bd4c:	0002      	movs	r2, r0
 800bd4e:	9216      	str	r2, [sp, #88]	; 0x58
 800bd50:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd52:	e7dd      	b.n	800bd10 <_strtod_l+0xb88>
 800bd54:	4b10      	ldr	r3, [pc, #64]	; (800bd98 <_strtod_l+0xc10>)
 800bd56:	f7f4 fb7f 	bl	8000458 <__aeabi_dcmplt>
 800bd5a:	e7b2      	b.n	800bcc2 <_strtod_l+0xb3a>
 800bd5c:	fff00000 	.word	0xfff00000
 800bd60:	000fffff 	.word	0x000fffff
 800bd64:	3ff00000 	.word	0x3ff00000
 800bd68:	3fe00000 	.word	0x3fe00000
 800bd6c:	7ff00000 	.word	0x7ff00000
 800bd70:	7fe00000 	.word	0x7fe00000
 800bd74:	fcb00000 	.word	0xfcb00000
 800bd78:	7c9fffff 	.word	0x7c9fffff
 800bd7c:	7fefffff 	.word	0x7fefffff
 800bd80:	bff00000 	.word	0xbff00000
 800bd84:	94a03595 	.word	0x94a03595
 800bd88:	3fdfffff 	.word	0x3fdfffff
 800bd8c:	35afe535 	.word	0x35afe535
 800bd90:	ffc00000 	.word	0xffc00000
 800bd94:	41dfffff 	.word	0x41dfffff
 800bd98:	3fcfffff 	.word	0x3fcfffff

0800bd9c <_strtod_r>:
 800bd9c:	b510      	push	{r4, lr}
 800bd9e:	4b02      	ldr	r3, [pc, #8]	; (800bda8 <_strtod_r+0xc>)
 800bda0:	f7ff f9f2 	bl	800b188 <_strtod_l>
 800bda4:	bd10      	pop	{r4, pc}
 800bda6:	46c0      	nop			; (mov r8, r8)
 800bda8:	20000068 	.word	0x20000068

0800bdac <_strtol_l.constprop.0>:
 800bdac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdae:	b087      	sub	sp, #28
 800bdb0:	001e      	movs	r6, r3
 800bdb2:	9005      	str	r0, [sp, #20]
 800bdb4:	9101      	str	r1, [sp, #4]
 800bdb6:	9202      	str	r2, [sp, #8]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d048      	beq.n	800be4e <_strtol_l.constprop.0+0xa2>
 800bdbc:	000b      	movs	r3, r1
 800bdbe:	2e24      	cmp	r6, #36	; 0x24
 800bdc0:	d845      	bhi.n	800be4e <_strtol_l.constprop.0+0xa2>
 800bdc2:	4a3b      	ldr	r2, [pc, #236]	; (800beb0 <_strtol_l.constprop.0+0x104>)
 800bdc4:	2108      	movs	r1, #8
 800bdc6:	4694      	mov	ip, r2
 800bdc8:	001a      	movs	r2, r3
 800bdca:	4660      	mov	r0, ip
 800bdcc:	7814      	ldrb	r4, [r2, #0]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	5d00      	ldrb	r0, [r0, r4]
 800bdd2:	001d      	movs	r5, r3
 800bdd4:	0007      	movs	r7, r0
 800bdd6:	400f      	ands	r7, r1
 800bdd8:	4208      	tst	r0, r1
 800bdda:	d1f5      	bne.n	800bdc8 <_strtol_l.constprop.0+0x1c>
 800bddc:	2c2d      	cmp	r4, #45	; 0x2d
 800bdde:	d13d      	bne.n	800be5c <_strtol_l.constprop.0+0xb0>
 800bde0:	2701      	movs	r7, #1
 800bde2:	781c      	ldrb	r4, [r3, #0]
 800bde4:	1c95      	adds	r5, r2, #2
 800bde6:	2e00      	cmp	r6, #0
 800bde8:	d05e      	beq.n	800bea8 <_strtol_l.constprop.0+0xfc>
 800bdea:	2e10      	cmp	r6, #16
 800bdec:	d109      	bne.n	800be02 <_strtol_l.constprop.0+0x56>
 800bdee:	2c30      	cmp	r4, #48	; 0x30
 800bdf0:	d107      	bne.n	800be02 <_strtol_l.constprop.0+0x56>
 800bdf2:	2220      	movs	r2, #32
 800bdf4:	782b      	ldrb	r3, [r5, #0]
 800bdf6:	4393      	bics	r3, r2
 800bdf8:	2b58      	cmp	r3, #88	; 0x58
 800bdfa:	d150      	bne.n	800be9e <_strtol_l.constprop.0+0xf2>
 800bdfc:	2610      	movs	r6, #16
 800bdfe:	786c      	ldrb	r4, [r5, #1]
 800be00:	3502      	adds	r5, #2
 800be02:	4b2c      	ldr	r3, [pc, #176]	; (800beb4 <_strtol_l.constprop.0+0x108>)
 800be04:	0031      	movs	r1, r6
 800be06:	18fb      	adds	r3, r7, r3
 800be08:	0018      	movs	r0, r3
 800be0a:	9303      	str	r3, [sp, #12]
 800be0c:	f7f4 fa1e 	bl	800024c <__aeabi_uidivmod>
 800be10:	2200      	movs	r2, #0
 800be12:	9104      	str	r1, [sp, #16]
 800be14:	2101      	movs	r1, #1
 800be16:	4684      	mov	ip, r0
 800be18:	0010      	movs	r0, r2
 800be1a:	4249      	negs	r1, r1
 800be1c:	0023      	movs	r3, r4
 800be1e:	3b30      	subs	r3, #48	; 0x30
 800be20:	2b09      	cmp	r3, #9
 800be22:	d903      	bls.n	800be2c <_strtol_l.constprop.0+0x80>
 800be24:	3b11      	subs	r3, #17
 800be26:	2b19      	cmp	r3, #25
 800be28:	d81d      	bhi.n	800be66 <_strtol_l.constprop.0+0xba>
 800be2a:	330a      	adds	r3, #10
 800be2c:	429e      	cmp	r6, r3
 800be2e:	dd1e      	ble.n	800be6e <_strtol_l.constprop.0+0xc2>
 800be30:	1c54      	adds	r4, r2, #1
 800be32:	d009      	beq.n	800be48 <_strtol_l.constprop.0+0x9c>
 800be34:	000a      	movs	r2, r1
 800be36:	4584      	cmp	ip, r0
 800be38:	d306      	bcc.n	800be48 <_strtol_l.constprop.0+0x9c>
 800be3a:	d102      	bne.n	800be42 <_strtol_l.constprop.0+0x96>
 800be3c:	9c04      	ldr	r4, [sp, #16]
 800be3e:	429c      	cmp	r4, r3
 800be40:	db02      	blt.n	800be48 <_strtol_l.constprop.0+0x9c>
 800be42:	2201      	movs	r2, #1
 800be44:	4370      	muls	r0, r6
 800be46:	1818      	adds	r0, r3, r0
 800be48:	782c      	ldrb	r4, [r5, #0]
 800be4a:	3501      	adds	r5, #1
 800be4c:	e7e6      	b.n	800be1c <_strtol_l.constprop.0+0x70>
 800be4e:	f7fd fce5 	bl	800981c <__errno>
 800be52:	2316      	movs	r3, #22
 800be54:	6003      	str	r3, [r0, #0]
 800be56:	2000      	movs	r0, #0
 800be58:	b007      	add	sp, #28
 800be5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be5c:	2c2b      	cmp	r4, #43	; 0x2b
 800be5e:	d1c2      	bne.n	800bde6 <_strtol_l.constprop.0+0x3a>
 800be60:	781c      	ldrb	r4, [r3, #0]
 800be62:	1c95      	adds	r5, r2, #2
 800be64:	e7bf      	b.n	800bde6 <_strtol_l.constprop.0+0x3a>
 800be66:	0023      	movs	r3, r4
 800be68:	3b61      	subs	r3, #97	; 0x61
 800be6a:	2b19      	cmp	r3, #25
 800be6c:	d9dd      	bls.n	800be2a <_strtol_l.constprop.0+0x7e>
 800be6e:	1c53      	adds	r3, r2, #1
 800be70:	d109      	bne.n	800be86 <_strtol_l.constprop.0+0xda>
 800be72:	2322      	movs	r3, #34	; 0x22
 800be74:	9a05      	ldr	r2, [sp, #20]
 800be76:	9803      	ldr	r0, [sp, #12]
 800be78:	6013      	str	r3, [r2, #0]
 800be7a:	9b02      	ldr	r3, [sp, #8]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d0eb      	beq.n	800be58 <_strtol_l.constprop.0+0xac>
 800be80:	1e6b      	subs	r3, r5, #1
 800be82:	9301      	str	r3, [sp, #4]
 800be84:	e007      	b.n	800be96 <_strtol_l.constprop.0+0xea>
 800be86:	2f00      	cmp	r7, #0
 800be88:	d000      	beq.n	800be8c <_strtol_l.constprop.0+0xe0>
 800be8a:	4240      	negs	r0, r0
 800be8c:	9b02      	ldr	r3, [sp, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d0e2      	beq.n	800be58 <_strtol_l.constprop.0+0xac>
 800be92:	2a00      	cmp	r2, #0
 800be94:	d1f4      	bne.n	800be80 <_strtol_l.constprop.0+0xd4>
 800be96:	9b02      	ldr	r3, [sp, #8]
 800be98:	9a01      	ldr	r2, [sp, #4]
 800be9a:	601a      	str	r2, [r3, #0]
 800be9c:	e7dc      	b.n	800be58 <_strtol_l.constprop.0+0xac>
 800be9e:	2430      	movs	r4, #48	; 0x30
 800bea0:	2e00      	cmp	r6, #0
 800bea2:	d1ae      	bne.n	800be02 <_strtol_l.constprop.0+0x56>
 800bea4:	3608      	adds	r6, #8
 800bea6:	e7ac      	b.n	800be02 <_strtol_l.constprop.0+0x56>
 800bea8:	2c30      	cmp	r4, #48	; 0x30
 800beaa:	d0a2      	beq.n	800bdf2 <_strtol_l.constprop.0+0x46>
 800beac:	260a      	movs	r6, #10
 800beae:	e7a8      	b.n	800be02 <_strtol_l.constprop.0+0x56>
 800beb0:	0800d469 	.word	0x0800d469
 800beb4:	7fffffff 	.word	0x7fffffff

0800beb8 <_strtol_r>:
 800beb8:	b510      	push	{r4, lr}
 800beba:	f7ff ff77 	bl	800bdac <_strtol_l.constprop.0>
 800bebe:	bd10      	pop	{r4, pc}

0800bec0 <__ssputs_r>:
 800bec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bec2:	b085      	sub	sp, #20
 800bec4:	9301      	str	r3, [sp, #4]
 800bec6:	9203      	str	r2, [sp, #12]
 800bec8:	688e      	ldr	r6, [r1, #8]
 800beca:	9a01      	ldr	r2, [sp, #4]
 800becc:	0007      	movs	r7, r0
 800bece:	000c      	movs	r4, r1
 800bed0:	680b      	ldr	r3, [r1, #0]
 800bed2:	4296      	cmp	r6, r2
 800bed4:	d831      	bhi.n	800bf3a <__ssputs_r+0x7a>
 800bed6:	898a      	ldrh	r2, [r1, #12]
 800bed8:	2190      	movs	r1, #144	; 0x90
 800beda:	00c9      	lsls	r1, r1, #3
 800bedc:	420a      	tst	r2, r1
 800bede:	d029      	beq.n	800bf34 <__ssputs_r+0x74>
 800bee0:	2003      	movs	r0, #3
 800bee2:	6921      	ldr	r1, [r4, #16]
 800bee4:	1a5b      	subs	r3, r3, r1
 800bee6:	9302      	str	r3, [sp, #8]
 800bee8:	6963      	ldr	r3, [r4, #20]
 800beea:	4343      	muls	r3, r0
 800beec:	0fdd      	lsrs	r5, r3, #31
 800beee:	18ed      	adds	r5, r5, r3
 800bef0:	9b01      	ldr	r3, [sp, #4]
 800bef2:	9802      	ldr	r0, [sp, #8]
 800bef4:	3301      	adds	r3, #1
 800bef6:	181b      	adds	r3, r3, r0
 800bef8:	106d      	asrs	r5, r5, #1
 800befa:	42ab      	cmp	r3, r5
 800befc:	d900      	bls.n	800bf00 <__ssputs_r+0x40>
 800befe:	001d      	movs	r5, r3
 800bf00:	0552      	lsls	r2, r2, #21
 800bf02:	d529      	bpl.n	800bf58 <__ssputs_r+0x98>
 800bf04:	0029      	movs	r1, r5
 800bf06:	0038      	movs	r0, r7
 800bf08:	f7fe fbd8 	bl	800a6bc <_malloc_r>
 800bf0c:	1e06      	subs	r6, r0, #0
 800bf0e:	d02d      	beq.n	800bf6c <__ssputs_r+0xac>
 800bf10:	9a02      	ldr	r2, [sp, #8]
 800bf12:	6921      	ldr	r1, [r4, #16]
 800bf14:	f000 fa22 	bl	800c35c <memcpy>
 800bf18:	89a2      	ldrh	r2, [r4, #12]
 800bf1a:	4b19      	ldr	r3, [pc, #100]	; (800bf80 <__ssputs_r+0xc0>)
 800bf1c:	401a      	ands	r2, r3
 800bf1e:	2380      	movs	r3, #128	; 0x80
 800bf20:	4313      	orrs	r3, r2
 800bf22:	81a3      	strh	r3, [r4, #12]
 800bf24:	9b02      	ldr	r3, [sp, #8]
 800bf26:	6126      	str	r6, [r4, #16]
 800bf28:	18f6      	adds	r6, r6, r3
 800bf2a:	6026      	str	r6, [r4, #0]
 800bf2c:	6165      	str	r5, [r4, #20]
 800bf2e:	9e01      	ldr	r6, [sp, #4]
 800bf30:	1aed      	subs	r5, r5, r3
 800bf32:	60a5      	str	r5, [r4, #8]
 800bf34:	9b01      	ldr	r3, [sp, #4]
 800bf36:	429e      	cmp	r6, r3
 800bf38:	d900      	bls.n	800bf3c <__ssputs_r+0x7c>
 800bf3a:	9e01      	ldr	r6, [sp, #4]
 800bf3c:	0032      	movs	r2, r6
 800bf3e:	9903      	ldr	r1, [sp, #12]
 800bf40:	6820      	ldr	r0, [r4, #0]
 800bf42:	f000 f9d4 	bl	800c2ee <memmove>
 800bf46:	2000      	movs	r0, #0
 800bf48:	68a3      	ldr	r3, [r4, #8]
 800bf4a:	1b9b      	subs	r3, r3, r6
 800bf4c:	60a3      	str	r3, [r4, #8]
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	199b      	adds	r3, r3, r6
 800bf52:	6023      	str	r3, [r4, #0]
 800bf54:	b005      	add	sp, #20
 800bf56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf58:	002a      	movs	r2, r5
 800bf5a:	0038      	movs	r0, r7
 800bf5c:	f000 fdc8 	bl	800caf0 <_realloc_r>
 800bf60:	1e06      	subs	r6, r0, #0
 800bf62:	d1df      	bne.n	800bf24 <__ssputs_r+0x64>
 800bf64:	0038      	movs	r0, r7
 800bf66:	6921      	ldr	r1, [r4, #16]
 800bf68:	f7fe fb32 	bl	800a5d0 <_free_r>
 800bf6c:	230c      	movs	r3, #12
 800bf6e:	2001      	movs	r0, #1
 800bf70:	603b      	str	r3, [r7, #0]
 800bf72:	89a2      	ldrh	r2, [r4, #12]
 800bf74:	3334      	adds	r3, #52	; 0x34
 800bf76:	4313      	orrs	r3, r2
 800bf78:	81a3      	strh	r3, [r4, #12]
 800bf7a:	4240      	negs	r0, r0
 800bf7c:	e7ea      	b.n	800bf54 <__ssputs_r+0x94>
 800bf7e:	46c0      	nop			; (mov r8, r8)
 800bf80:	fffffb7f 	.word	0xfffffb7f

0800bf84 <_svfiprintf_r>:
 800bf84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf86:	b0a1      	sub	sp, #132	; 0x84
 800bf88:	9003      	str	r0, [sp, #12]
 800bf8a:	001d      	movs	r5, r3
 800bf8c:	898b      	ldrh	r3, [r1, #12]
 800bf8e:	000f      	movs	r7, r1
 800bf90:	0016      	movs	r6, r2
 800bf92:	061b      	lsls	r3, r3, #24
 800bf94:	d511      	bpl.n	800bfba <_svfiprintf_r+0x36>
 800bf96:	690b      	ldr	r3, [r1, #16]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10e      	bne.n	800bfba <_svfiprintf_r+0x36>
 800bf9c:	2140      	movs	r1, #64	; 0x40
 800bf9e:	f7fe fb8d 	bl	800a6bc <_malloc_r>
 800bfa2:	6038      	str	r0, [r7, #0]
 800bfa4:	6138      	str	r0, [r7, #16]
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	d105      	bne.n	800bfb6 <_svfiprintf_r+0x32>
 800bfaa:	230c      	movs	r3, #12
 800bfac:	9a03      	ldr	r2, [sp, #12]
 800bfae:	3801      	subs	r0, #1
 800bfb0:	6013      	str	r3, [r2, #0]
 800bfb2:	b021      	add	sp, #132	; 0x84
 800bfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfb6:	2340      	movs	r3, #64	; 0x40
 800bfb8:	617b      	str	r3, [r7, #20]
 800bfba:	2300      	movs	r3, #0
 800bfbc:	ac08      	add	r4, sp, #32
 800bfbe:	6163      	str	r3, [r4, #20]
 800bfc0:	3320      	adds	r3, #32
 800bfc2:	7663      	strb	r3, [r4, #25]
 800bfc4:	3310      	adds	r3, #16
 800bfc6:	76a3      	strb	r3, [r4, #26]
 800bfc8:	9507      	str	r5, [sp, #28]
 800bfca:	0035      	movs	r5, r6
 800bfcc:	782b      	ldrb	r3, [r5, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d001      	beq.n	800bfd6 <_svfiprintf_r+0x52>
 800bfd2:	2b25      	cmp	r3, #37	; 0x25
 800bfd4:	d148      	bne.n	800c068 <_svfiprintf_r+0xe4>
 800bfd6:	1bab      	subs	r3, r5, r6
 800bfd8:	9305      	str	r3, [sp, #20]
 800bfda:	42b5      	cmp	r5, r6
 800bfdc:	d00b      	beq.n	800bff6 <_svfiprintf_r+0x72>
 800bfde:	0032      	movs	r2, r6
 800bfe0:	0039      	movs	r1, r7
 800bfe2:	9803      	ldr	r0, [sp, #12]
 800bfe4:	f7ff ff6c 	bl	800bec0 <__ssputs_r>
 800bfe8:	3001      	adds	r0, #1
 800bfea:	d100      	bne.n	800bfee <_svfiprintf_r+0x6a>
 800bfec:	e0af      	b.n	800c14e <_svfiprintf_r+0x1ca>
 800bfee:	6963      	ldr	r3, [r4, #20]
 800bff0:	9a05      	ldr	r2, [sp, #20]
 800bff2:	189b      	adds	r3, r3, r2
 800bff4:	6163      	str	r3, [r4, #20]
 800bff6:	782b      	ldrb	r3, [r5, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d100      	bne.n	800bffe <_svfiprintf_r+0x7a>
 800bffc:	e0a7      	b.n	800c14e <_svfiprintf_r+0x1ca>
 800bffe:	2201      	movs	r2, #1
 800c000:	2300      	movs	r3, #0
 800c002:	4252      	negs	r2, r2
 800c004:	6062      	str	r2, [r4, #4]
 800c006:	a904      	add	r1, sp, #16
 800c008:	3254      	adds	r2, #84	; 0x54
 800c00a:	1852      	adds	r2, r2, r1
 800c00c:	1c6e      	adds	r6, r5, #1
 800c00e:	6023      	str	r3, [r4, #0]
 800c010:	60e3      	str	r3, [r4, #12]
 800c012:	60a3      	str	r3, [r4, #8]
 800c014:	7013      	strb	r3, [r2, #0]
 800c016:	65a3      	str	r3, [r4, #88]	; 0x58
 800c018:	4b55      	ldr	r3, [pc, #340]	; (800c170 <_svfiprintf_r+0x1ec>)
 800c01a:	2205      	movs	r2, #5
 800c01c:	0018      	movs	r0, r3
 800c01e:	7831      	ldrb	r1, [r6, #0]
 800c020:	9305      	str	r3, [sp, #20]
 800c022:	f7fd fc28 	bl	8009876 <memchr>
 800c026:	1c75      	adds	r5, r6, #1
 800c028:	2800      	cmp	r0, #0
 800c02a:	d11f      	bne.n	800c06c <_svfiprintf_r+0xe8>
 800c02c:	6822      	ldr	r2, [r4, #0]
 800c02e:	06d3      	lsls	r3, r2, #27
 800c030:	d504      	bpl.n	800c03c <_svfiprintf_r+0xb8>
 800c032:	2353      	movs	r3, #83	; 0x53
 800c034:	a904      	add	r1, sp, #16
 800c036:	185b      	adds	r3, r3, r1
 800c038:	2120      	movs	r1, #32
 800c03a:	7019      	strb	r1, [r3, #0]
 800c03c:	0713      	lsls	r3, r2, #28
 800c03e:	d504      	bpl.n	800c04a <_svfiprintf_r+0xc6>
 800c040:	2353      	movs	r3, #83	; 0x53
 800c042:	a904      	add	r1, sp, #16
 800c044:	185b      	adds	r3, r3, r1
 800c046:	212b      	movs	r1, #43	; 0x2b
 800c048:	7019      	strb	r1, [r3, #0]
 800c04a:	7833      	ldrb	r3, [r6, #0]
 800c04c:	2b2a      	cmp	r3, #42	; 0x2a
 800c04e:	d016      	beq.n	800c07e <_svfiprintf_r+0xfa>
 800c050:	0035      	movs	r5, r6
 800c052:	2100      	movs	r1, #0
 800c054:	200a      	movs	r0, #10
 800c056:	68e3      	ldr	r3, [r4, #12]
 800c058:	782a      	ldrb	r2, [r5, #0]
 800c05a:	1c6e      	adds	r6, r5, #1
 800c05c:	3a30      	subs	r2, #48	; 0x30
 800c05e:	2a09      	cmp	r2, #9
 800c060:	d94e      	bls.n	800c100 <_svfiprintf_r+0x17c>
 800c062:	2900      	cmp	r1, #0
 800c064:	d111      	bne.n	800c08a <_svfiprintf_r+0x106>
 800c066:	e017      	b.n	800c098 <_svfiprintf_r+0x114>
 800c068:	3501      	adds	r5, #1
 800c06a:	e7af      	b.n	800bfcc <_svfiprintf_r+0x48>
 800c06c:	9b05      	ldr	r3, [sp, #20]
 800c06e:	6822      	ldr	r2, [r4, #0]
 800c070:	1ac0      	subs	r0, r0, r3
 800c072:	2301      	movs	r3, #1
 800c074:	4083      	lsls	r3, r0
 800c076:	4313      	orrs	r3, r2
 800c078:	002e      	movs	r6, r5
 800c07a:	6023      	str	r3, [r4, #0]
 800c07c:	e7cc      	b.n	800c018 <_svfiprintf_r+0x94>
 800c07e:	9b07      	ldr	r3, [sp, #28]
 800c080:	1d19      	adds	r1, r3, #4
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	9107      	str	r1, [sp, #28]
 800c086:	2b00      	cmp	r3, #0
 800c088:	db01      	blt.n	800c08e <_svfiprintf_r+0x10a>
 800c08a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c08c:	e004      	b.n	800c098 <_svfiprintf_r+0x114>
 800c08e:	425b      	negs	r3, r3
 800c090:	60e3      	str	r3, [r4, #12]
 800c092:	2302      	movs	r3, #2
 800c094:	4313      	orrs	r3, r2
 800c096:	6023      	str	r3, [r4, #0]
 800c098:	782b      	ldrb	r3, [r5, #0]
 800c09a:	2b2e      	cmp	r3, #46	; 0x2e
 800c09c:	d10a      	bne.n	800c0b4 <_svfiprintf_r+0x130>
 800c09e:	786b      	ldrb	r3, [r5, #1]
 800c0a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c0a2:	d135      	bne.n	800c110 <_svfiprintf_r+0x18c>
 800c0a4:	9b07      	ldr	r3, [sp, #28]
 800c0a6:	3502      	adds	r5, #2
 800c0a8:	1d1a      	adds	r2, r3, #4
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	9207      	str	r2, [sp, #28]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	db2b      	blt.n	800c10a <_svfiprintf_r+0x186>
 800c0b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c0b4:	4e2f      	ldr	r6, [pc, #188]	; (800c174 <_svfiprintf_r+0x1f0>)
 800c0b6:	2203      	movs	r2, #3
 800c0b8:	0030      	movs	r0, r6
 800c0ba:	7829      	ldrb	r1, [r5, #0]
 800c0bc:	f7fd fbdb 	bl	8009876 <memchr>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d006      	beq.n	800c0d2 <_svfiprintf_r+0x14e>
 800c0c4:	2340      	movs	r3, #64	; 0x40
 800c0c6:	1b80      	subs	r0, r0, r6
 800c0c8:	4083      	lsls	r3, r0
 800c0ca:	6822      	ldr	r2, [r4, #0]
 800c0cc:	3501      	adds	r5, #1
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	7829      	ldrb	r1, [r5, #0]
 800c0d4:	2206      	movs	r2, #6
 800c0d6:	4828      	ldr	r0, [pc, #160]	; (800c178 <_svfiprintf_r+0x1f4>)
 800c0d8:	1c6e      	adds	r6, r5, #1
 800c0da:	7621      	strb	r1, [r4, #24]
 800c0dc:	f7fd fbcb 	bl	8009876 <memchr>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d03c      	beq.n	800c15e <_svfiprintf_r+0x1da>
 800c0e4:	4b25      	ldr	r3, [pc, #148]	; (800c17c <_svfiprintf_r+0x1f8>)
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d125      	bne.n	800c136 <_svfiprintf_r+0x1b2>
 800c0ea:	2207      	movs	r2, #7
 800c0ec:	9b07      	ldr	r3, [sp, #28]
 800c0ee:	3307      	adds	r3, #7
 800c0f0:	4393      	bics	r3, r2
 800c0f2:	3308      	adds	r3, #8
 800c0f4:	9307      	str	r3, [sp, #28]
 800c0f6:	6963      	ldr	r3, [r4, #20]
 800c0f8:	9a04      	ldr	r2, [sp, #16]
 800c0fa:	189b      	adds	r3, r3, r2
 800c0fc:	6163      	str	r3, [r4, #20]
 800c0fe:	e764      	b.n	800bfca <_svfiprintf_r+0x46>
 800c100:	4343      	muls	r3, r0
 800c102:	0035      	movs	r5, r6
 800c104:	2101      	movs	r1, #1
 800c106:	189b      	adds	r3, r3, r2
 800c108:	e7a6      	b.n	800c058 <_svfiprintf_r+0xd4>
 800c10a:	2301      	movs	r3, #1
 800c10c:	425b      	negs	r3, r3
 800c10e:	e7d0      	b.n	800c0b2 <_svfiprintf_r+0x12e>
 800c110:	2300      	movs	r3, #0
 800c112:	200a      	movs	r0, #10
 800c114:	001a      	movs	r2, r3
 800c116:	3501      	adds	r5, #1
 800c118:	6063      	str	r3, [r4, #4]
 800c11a:	7829      	ldrb	r1, [r5, #0]
 800c11c:	1c6e      	adds	r6, r5, #1
 800c11e:	3930      	subs	r1, #48	; 0x30
 800c120:	2909      	cmp	r1, #9
 800c122:	d903      	bls.n	800c12c <_svfiprintf_r+0x1a8>
 800c124:	2b00      	cmp	r3, #0
 800c126:	d0c5      	beq.n	800c0b4 <_svfiprintf_r+0x130>
 800c128:	9209      	str	r2, [sp, #36]	; 0x24
 800c12a:	e7c3      	b.n	800c0b4 <_svfiprintf_r+0x130>
 800c12c:	4342      	muls	r2, r0
 800c12e:	0035      	movs	r5, r6
 800c130:	2301      	movs	r3, #1
 800c132:	1852      	adds	r2, r2, r1
 800c134:	e7f1      	b.n	800c11a <_svfiprintf_r+0x196>
 800c136:	aa07      	add	r2, sp, #28
 800c138:	9200      	str	r2, [sp, #0]
 800c13a:	0021      	movs	r1, r4
 800c13c:	003a      	movs	r2, r7
 800c13e:	4b10      	ldr	r3, [pc, #64]	; (800c180 <_svfiprintf_r+0x1fc>)
 800c140:	9803      	ldr	r0, [sp, #12]
 800c142:	f7fc fc03 	bl	800894c <_printf_float>
 800c146:	9004      	str	r0, [sp, #16]
 800c148:	9b04      	ldr	r3, [sp, #16]
 800c14a:	3301      	adds	r3, #1
 800c14c:	d1d3      	bne.n	800c0f6 <_svfiprintf_r+0x172>
 800c14e:	89bb      	ldrh	r3, [r7, #12]
 800c150:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c152:	065b      	lsls	r3, r3, #25
 800c154:	d400      	bmi.n	800c158 <_svfiprintf_r+0x1d4>
 800c156:	e72c      	b.n	800bfb2 <_svfiprintf_r+0x2e>
 800c158:	2001      	movs	r0, #1
 800c15a:	4240      	negs	r0, r0
 800c15c:	e729      	b.n	800bfb2 <_svfiprintf_r+0x2e>
 800c15e:	aa07      	add	r2, sp, #28
 800c160:	9200      	str	r2, [sp, #0]
 800c162:	0021      	movs	r1, r4
 800c164:	003a      	movs	r2, r7
 800c166:	4b06      	ldr	r3, [pc, #24]	; (800c180 <_svfiprintf_r+0x1fc>)
 800c168:	9803      	ldr	r0, [sp, #12]
 800c16a:	f7fc feb5 	bl	8008ed8 <_printf_i>
 800c16e:	e7ea      	b.n	800c146 <_svfiprintf_r+0x1c2>
 800c170:	0800d569 	.word	0x0800d569
 800c174:	0800d56f 	.word	0x0800d56f
 800c178:	0800d573 	.word	0x0800d573
 800c17c:	0800894d 	.word	0x0800894d
 800c180:	0800bec1 	.word	0x0800bec1

0800c184 <__sflush_r>:
 800c184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c186:	898b      	ldrh	r3, [r1, #12]
 800c188:	0005      	movs	r5, r0
 800c18a:	000c      	movs	r4, r1
 800c18c:	071a      	lsls	r2, r3, #28
 800c18e:	d45c      	bmi.n	800c24a <__sflush_r+0xc6>
 800c190:	684a      	ldr	r2, [r1, #4]
 800c192:	2a00      	cmp	r2, #0
 800c194:	dc04      	bgt.n	800c1a0 <__sflush_r+0x1c>
 800c196:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c198:	2a00      	cmp	r2, #0
 800c19a:	dc01      	bgt.n	800c1a0 <__sflush_r+0x1c>
 800c19c:	2000      	movs	r0, #0
 800c19e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c1a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c1a2:	2f00      	cmp	r7, #0
 800c1a4:	d0fa      	beq.n	800c19c <__sflush_r+0x18>
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2080      	movs	r0, #128	; 0x80
 800c1aa:	682e      	ldr	r6, [r5, #0]
 800c1ac:	602a      	str	r2, [r5, #0]
 800c1ae:	001a      	movs	r2, r3
 800c1b0:	0140      	lsls	r0, r0, #5
 800c1b2:	6a21      	ldr	r1, [r4, #32]
 800c1b4:	4002      	ands	r2, r0
 800c1b6:	4203      	tst	r3, r0
 800c1b8:	d034      	beq.n	800c224 <__sflush_r+0xa0>
 800c1ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1bc:	89a3      	ldrh	r3, [r4, #12]
 800c1be:	075b      	lsls	r3, r3, #29
 800c1c0:	d506      	bpl.n	800c1d0 <__sflush_r+0x4c>
 800c1c2:	6863      	ldr	r3, [r4, #4]
 800c1c4:	1ac0      	subs	r0, r0, r3
 800c1c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d001      	beq.n	800c1d0 <__sflush_r+0x4c>
 800c1cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1ce:	1ac0      	subs	r0, r0, r3
 800c1d0:	0002      	movs	r2, r0
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	0028      	movs	r0, r5
 800c1d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c1d8:	6a21      	ldr	r1, [r4, #32]
 800c1da:	47b8      	blx	r7
 800c1dc:	89a2      	ldrh	r2, [r4, #12]
 800c1de:	1c43      	adds	r3, r0, #1
 800c1e0:	d106      	bne.n	800c1f0 <__sflush_r+0x6c>
 800c1e2:	6829      	ldr	r1, [r5, #0]
 800c1e4:	291d      	cmp	r1, #29
 800c1e6:	d82c      	bhi.n	800c242 <__sflush_r+0xbe>
 800c1e8:	4b2a      	ldr	r3, [pc, #168]	; (800c294 <__sflush_r+0x110>)
 800c1ea:	410b      	asrs	r3, r1
 800c1ec:	07db      	lsls	r3, r3, #31
 800c1ee:	d428      	bmi.n	800c242 <__sflush_r+0xbe>
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	6063      	str	r3, [r4, #4]
 800c1f4:	6923      	ldr	r3, [r4, #16]
 800c1f6:	6023      	str	r3, [r4, #0]
 800c1f8:	04d2      	lsls	r2, r2, #19
 800c1fa:	d505      	bpl.n	800c208 <__sflush_r+0x84>
 800c1fc:	1c43      	adds	r3, r0, #1
 800c1fe:	d102      	bne.n	800c206 <__sflush_r+0x82>
 800c200:	682b      	ldr	r3, [r5, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d100      	bne.n	800c208 <__sflush_r+0x84>
 800c206:	6560      	str	r0, [r4, #84]	; 0x54
 800c208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c20a:	602e      	str	r6, [r5, #0]
 800c20c:	2900      	cmp	r1, #0
 800c20e:	d0c5      	beq.n	800c19c <__sflush_r+0x18>
 800c210:	0023      	movs	r3, r4
 800c212:	3344      	adds	r3, #68	; 0x44
 800c214:	4299      	cmp	r1, r3
 800c216:	d002      	beq.n	800c21e <__sflush_r+0x9a>
 800c218:	0028      	movs	r0, r5
 800c21a:	f7fe f9d9 	bl	800a5d0 <_free_r>
 800c21e:	2000      	movs	r0, #0
 800c220:	6360      	str	r0, [r4, #52]	; 0x34
 800c222:	e7bc      	b.n	800c19e <__sflush_r+0x1a>
 800c224:	2301      	movs	r3, #1
 800c226:	0028      	movs	r0, r5
 800c228:	47b8      	blx	r7
 800c22a:	1c43      	adds	r3, r0, #1
 800c22c:	d1c6      	bne.n	800c1bc <__sflush_r+0x38>
 800c22e:	682b      	ldr	r3, [r5, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d0c3      	beq.n	800c1bc <__sflush_r+0x38>
 800c234:	2b1d      	cmp	r3, #29
 800c236:	d001      	beq.n	800c23c <__sflush_r+0xb8>
 800c238:	2b16      	cmp	r3, #22
 800c23a:	d101      	bne.n	800c240 <__sflush_r+0xbc>
 800c23c:	602e      	str	r6, [r5, #0]
 800c23e:	e7ad      	b.n	800c19c <__sflush_r+0x18>
 800c240:	89a2      	ldrh	r2, [r4, #12]
 800c242:	2340      	movs	r3, #64	; 0x40
 800c244:	4313      	orrs	r3, r2
 800c246:	81a3      	strh	r3, [r4, #12]
 800c248:	e7a9      	b.n	800c19e <__sflush_r+0x1a>
 800c24a:	690e      	ldr	r6, [r1, #16]
 800c24c:	2e00      	cmp	r6, #0
 800c24e:	d0a5      	beq.n	800c19c <__sflush_r+0x18>
 800c250:	680f      	ldr	r7, [r1, #0]
 800c252:	600e      	str	r6, [r1, #0]
 800c254:	1bba      	subs	r2, r7, r6
 800c256:	9201      	str	r2, [sp, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	079b      	lsls	r3, r3, #30
 800c25c:	d100      	bne.n	800c260 <__sflush_r+0xdc>
 800c25e:	694a      	ldr	r2, [r1, #20]
 800c260:	60a2      	str	r2, [r4, #8]
 800c262:	9b01      	ldr	r3, [sp, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	dd99      	ble.n	800c19c <__sflush_r+0x18>
 800c268:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c26a:	0032      	movs	r2, r6
 800c26c:	001f      	movs	r7, r3
 800c26e:	0028      	movs	r0, r5
 800c270:	9b01      	ldr	r3, [sp, #4]
 800c272:	6a21      	ldr	r1, [r4, #32]
 800c274:	47b8      	blx	r7
 800c276:	2800      	cmp	r0, #0
 800c278:	dc06      	bgt.n	800c288 <__sflush_r+0x104>
 800c27a:	2340      	movs	r3, #64	; 0x40
 800c27c:	2001      	movs	r0, #1
 800c27e:	89a2      	ldrh	r2, [r4, #12]
 800c280:	4240      	negs	r0, r0
 800c282:	4313      	orrs	r3, r2
 800c284:	81a3      	strh	r3, [r4, #12]
 800c286:	e78a      	b.n	800c19e <__sflush_r+0x1a>
 800c288:	9b01      	ldr	r3, [sp, #4]
 800c28a:	1836      	adds	r6, r6, r0
 800c28c:	1a1b      	subs	r3, r3, r0
 800c28e:	9301      	str	r3, [sp, #4]
 800c290:	e7e7      	b.n	800c262 <__sflush_r+0xde>
 800c292:	46c0      	nop			; (mov r8, r8)
 800c294:	dfbffffe 	.word	0xdfbffffe

0800c298 <_fflush_r>:
 800c298:	690b      	ldr	r3, [r1, #16]
 800c29a:	b570      	push	{r4, r5, r6, lr}
 800c29c:	0005      	movs	r5, r0
 800c29e:	000c      	movs	r4, r1
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d102      	bne.n	800c2aa <_fflush_r+0x12>
 800c2a4:	2500      	movs	r5, #0
 800c2a6:	0028      	movs	r0, r5
 800c2a8:	bd70      	pop	{r4, r5, r6, pc}
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d004      	beq.n	800c2b8 <_fflush_r+0x20>
 800c2ae:	6a03      	ldr	r3, [r0, #32]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d101      	bne.n	800c2b8 <_fflush_r+0x20>
 800c2b4:	f7fd f9b8 	bl	8009628 <__sinit>
 800c2b8:	220c      	movs	r2, #12
 800c2ba:	5ea3      	ldrsh	r3, [r4, r2]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d0f1      	beq.n	800c2a4 <_fflush_r+0xc>
 800c2c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2c2:	07d2      	lsls	r2, r2, #31
 800c2c4:	d404      	bmi.n	800c2d0 <_fflush_r+0x38>
 800c2c6:	059b      	lsls	r3, r3, #22
 800c2c8:	d402      	bmi.n	800c2d0 <_fflush_r+0x38>
 800c2ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2cc:	f7fd fad1 	bl	8009872 <__retarget_lock_acquire_recursive>
 800c2d0:	0028      	movs	r0, r5
 800c2d2:	0021      	movs	r1, r4
 800c2d4:	f7ff ff56 	bl	800c184 <__sflush_r>
 800c2d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2da:	0005      	movs	r5, r0
 800c2dc:	07db      	lsls	r3, r3, #31
 800c2de:	d4e2      	bmi.n	800c2a6 <_fflush_r+0xe>
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	059b      	lsls	r3, r3, #22
 800c2e4:	d4df      	bmi.n	800c2a6 <_fflush_r+0xe>
 800c2e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2e8:	f7fd fac4 	bl	8009874 <__retarget_lock_release_recursive>
 800c2ec:	e7db      	b.n	800c2a6 <_fflush_r+0xe>

0800c2ee <memmove>:
 800c2ee:	b510      	push	{r4, lr}
 800c2f0:	4288      	cmp	r0, r1
 800c2f2:	d902      	bls.n	800c2fa <memmove+0xc>
 800c2f4:	188b      	adds	r3, r1, r2
 800c2f6:	4298      	cmp	r0, r3
 800c2f8:	d303      	bcc.n	800c302 <memmove+0x14>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	e007      	b.n	800c30e <memmove+0x20>
 800c2fe:	5c8b      	ldrb	r3, [r1, r2]
 800c300:	5483      	strb	r3, [r0, r2]
 800c302:	3a01      	subs	r2, #1
 800c304:	d2fb      	bcs.n	800c2fe <memmove+0x10>
 800c306:	bd10      	pop	{r4, pc}
 800c308:	5ccc      	ldrb	r4, [r1, r3]
 800c30a:	54c4      	strb	r4, [r0, r3]
 800c30c:	3301      	adds	r3, #1
 800c30e:	429a      	cmp	r2, r3
 800c310:	d1fa      	bne.n	800c308 <memmove+0x1a>
 800c312:	e7f8      	b.n	800c306 <memmove+0x18>

0800c314 <strncmp>:
 800c314:	b530      	push	{r4, r5, lr}
 800c316:	0005      	movs	r5, r0
 800c318:	1e10      	subs	r0, r2, #0
 800c31a:	d00b      	beq.n	800c334 <strncmp+0x20>
 800c31c:	2400      	movs	r4, #0
 800c31e:	3a01      	subs	r2, #1
 800c320:	5d2b      	ldrb	r3, [r5, r4]
 800c322:	5d08      	ldrb	r0, [r1, r4]
 800c324:	4283      	cmp	r3, r0
 800c326:	d104      	bne.n	800c332 <strncmp+0x1e>
 800c328:	42a2      	cmp	r2, r4
 800c32a:	d002      	beq.n	800c332 <strncmp+0x1e>
 800c32c:	3401      	adds	r4, #1
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1f6      	bne.n	800c320 <strncmp+0xc>
 800c332:	1a18      	subs	r0, r3, r0
 800c334:	bd30      	pop	{r4, r5, pc}
	...

0800c338 <_sbrk_r>:
 800c338:	2300      	movs	r3, #0
 800c33a:	b570      	push	{r4, r5, r6, lr}
 800c33c:	4d06      	ldr	r5, [pc, #24]	; (800c358 <_sbrk_r+0x20>)
 800c33e:	0004      	movs	r4, r0
 800c340:	0008      	movs	r0, r1
 800c342:	602b      	str	r3, [r5, #0]
 800c344:	f7f7 fb0a 	bl	800395c <_sbrk>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	d103      	bne.n	800c354 <_sbrk_r+0x1c>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d000      	beq.n	800c354 <_sbrk_r+0x1c>
 800c352:	6023      	str	r3, [r4, #0]
 800c354:	bd70      	pop	{r4, r5, r6, pc}
 800c356:	46c0      	nop			; (mov r8, r8)
 800c358:	20000964 	.word	0x20000964

0800c35c <memcpy>:
 800c35c:	2300      	movs	r3, #0
 800c35e:	b510      	push	{r4, lr}
 800c360:	429a      	cmp	r2, r3
 800c362:	d100      	bne.n	800c366 <memcpy+0xa>
 800c364:	bd10      	pop	{r4, pc}
 800c366:	5ccc      	ldrb	r4, [r1, r3]
 800c368:	54c4      	strb	r4, [r0, r3]
 800c36a:	3301      	adds	r3, #1
 800c36c:	e7f8      	b.n	800c360 <memcpy+0x4>
	...

0800c370 <nan>:
 800c370:	2000      	movs	r0, #0
 800c372:	4901      	ldr	r1, [pc, #4]	; (800c378 <nan+0x8>)
 800c374:	4770      	bx	lr
 800c376:	46c0      	nop			; (mov r8, r8)
 800c378:	7ff80000 	.word	0x7ff80000

0800c37c <__assert_func>:
 800c37c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c37e:	0014      	movs	r4, r2
 800c380:	001a      	movs	r2, r3
 800c382:	4b09      	ldr	r3, [pc, #36]	; (800c3a8 <__assert_func+0x2c>)
 800c384:	0005      	movs	r5, r0
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	000e      	movs	r6, r1
 800c38a:	68d8      	ldr	r0, [r3, #12]
 800c38c:	4b07      	ldr	r3, [pc, #28]	; (800c3ac <__assert_func+0x30>)
 800c38e:	2c00      	cmp	r4, #0
 800c390:	d101      	bne.n	800c396 <__assert_func+0x1a>
 800c392:	4b07      	ldr	r3, [pc, #28]	; (800c3b0 <__assert_func+0x34>)
 800c394:	001c      	movs	r4, r3
 800c396:	4907      	ldr	r1, [pc, #28]	; (800c3b4 <__assert_func+0x38>)
 800c398:	9301      	str	r3, [sp, #4]
 800c39a:	9402      	str	r4, [sp, #8]
 800c39c:	002b      	movs	r3, r5
 800c39e:	9600      	str	r6, [sp, #0]
 800c3a0:	f000 fbe2 	bl	800cb68 <fiprintf>
 800c3a4:	f000 fbf0 	bl	800cb88 <abort>
 800c3a8:	20000064 	.word	0x20000064
 800c3ac:	0800d582 	.word	0x0800d582
 800c3b0:	0800d5bd 	.word	0x0800d5bd
 800c3b4:	0800d58f 	.word	0x0800d58f

0800c3b8 <_calloc_r>:
 800c3b8:	b570      	push	{r4, r5, r6, lr}
 800c3ba:	0c0b      	lsrs	r3, r1, #16
 800c3bc:	0c15      	lsrs	r5, r2, #16
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d11e      	bne.n	800c400 <_calloc_r+0x48>
 800c3c2:	2d00      	cmp	r5, #0
 800c3c4:	d10c      	bne.n	800c3e0 <_calloc_r+0x28>
 800c3c6:	b289      	uxth	r1, r1
 800c3c8:	b294      	uxth	r4, r2
 800c3ca:	434c      	muls	r4, r1
 800c3cc:	0021      	movs	r1, r4
 800c3ce:	f7fe f975 	bl	800a6bc <_malloc_r>
 800c3d2:	1e05      	subs	r5, r0, #0
 800c3d4:	d01b      	beq.n	800c40e <_calloc_r+0x56>
 800c3d6:	0022      	movs	r2, r4
 800c3d8:	2100      	movs	r1, #0
 800c3da:	f7fd f9c5 	bl	8009768 <memset>
 800c3de:	e016      	b.n	800c40e <_calloc_r+0x56>
 800c3e0:	1c2b      	adds	r3, r5, #0
 800c3e2:	1c0c      	adds	r4, r1, #0
 800c3e4:	b289      	uxth	r1, r1
 800c3e6:	b292      	uxth	r2, r2
 800c3e8:	434a      	muls	r2, r1
 800c3ea:	b2a1      	uxth	r1, r4
 800c3ec:	b29c      	uxth	r4, r3
 800c3ee:	434c      	muls	r4, r1
 800c3f0:	0c13      	lsrs	r3, r2, #16
 800c3f2:	18e4      	adds	r4, r4, r3
 800c3f4:	0c23      	lsrs	r3, r4, #16
 800c3f6:	d107      	bne.n	800c408 <_calloc_r+0x50>
 800c3f8:	0424      	lsls	r4, r4, #16
 800c3fa:	b292      	uxth	r2, r2
 800c3fc:	4314      	orrs	r4, r2
 800c3fe:	e7e5      	b.n	800c3cc <_calloc_r+0x14>
 800c400:	2d00      	cmp	r5, #0
 800c402:	d101      	bne.n	800c408 <_calloc_r+0x50>
 800c404:	1c14      	adds	r4, r2, #0
 800c406:	e7ed      	b.n	800c3e4 <_calloc_r+0x2c>
 800c408:	230c      	movs	r3, #12
 800c40a:	2500      	movs	r5, #0
 800c40c:	6003      	str	r3, [r0, #0]
 800c40e:	0028      	movs	r0, r5
 800c410:	bd70      	pop	{r4, r5, r6, pc}

0800c412 <rshift>:
 800c412:	0002      	movs	r2, r0
 800c414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c416:	6904      	ldr	r4, [r0, #16]
 800c418:	114b      	asrs	r3, r1, #5
 800c41a:	b085      	sub	sp, #20
 800c41c:	3214      	adds	r2, #20
 800c41e:	9302      	str	r3, [sp, #8]
 800c420:	114d      	asrs	r5, r1, #5
 800c422:	0013      	movs	r3, r2
 800c424:	42ac      	cmp	r4, r5
 800c426:	dd32      	ble.n	800c48e <rshift+0x7c>
 800c428:	261f      	movs	r6, #31
 800c42a:	000f      	movs	r7, r1
 800c42c:	114b      	asrs	r3, r1, #5
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	00a5      	lsls	r5, r4, #2
 800c432:	18d3      	adds	r3, r2, r3
 800c434:	4037      	ands	r7, r6
 800c436:	1955      	adds	r5, r2, r5
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	9701      	str	r7, [sp, #4]
 800c43c:	4231      	tst	r1, r6
 800c43e:	d10d      	bne.n	800c45c <rshift+0x4a>
 800c440:	0016      	movs	r6, r2
 800c442:	0019      	movs	r1, r3
 800c444:	428d      	cmp	r5, r1
 800c446:	d836      	bhi.n	800c4b6 <rshift+0xa4>
 800c448:	9900      	ldr	r1, [sp, #0]
 800c44a:	2300      	movs	r3, #0
 800c44c:	3903      	subs	r1, #3
 800c44e:	428d      	cmp	r5, r1
 800c450:	d302      	bcc.n	800c458 <rshift+0x46>
 800c452:	9b02      	ldr	r3, [sp, #8]
 800c454:	1ae4      	subs	r4, r4, r3
 800c456:	00a3      	lsls	r3, r4, #2
 800c458:	18d3      	adds	r3, r2, r3
 800c45a:	e018      	b.n	800c48e <rshift+0x7c>
 800c45c:	2120      	movs	r1, #32
 800c45e:	9e01      	ldr	r6, [sp, #4]
 800c460:	9f01      	ldr	r7, [sp, #4]
 800c462:	1b89      	subs	r1, r1, r6
 800c464:	9e00      	ldr	r6, [sp, #0]
 800c466:	9103      	str	r1, [sp, #12]
 800c468:	ce02      	ldmia	r6!, {r1}
 800c46a:	4694      	mov	ip, r2
 800c46c:	40f9      	lsrs	r1, r7
 800c46e:	42b5      	cmp	r5, r6
 800c470:	d816      	bhi.n	800c4a0 <rshift+0x8e>
 800c472:	9e00      	ldr	r6, [sp, #0]
 800c474:	2300      	movs	r3, #0
 800c476:	3601      	adds	r6, #1
 800c478:	42b5      	cmp	r5, r6
 800c47a:	d303      	bcc.n	800c484 <rshift+0x72>
 800c47c:	9b02      	ldr	r3, [sp, #8]
 800c47e:	1ae3      	subs	r3, r4, r3
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	3b04      	subs	r3, #4
 800c484:	18d3      	adds	r3, r2, r3
 800c486:	6019      	str	r1, [r3, #0]
 800c488:	2900      	cmp	r1, #0
 800c48a:	d000      	beq.n	800c48e <rshift+0x7c>
 800c48c:	3304      	adds	r3, #4
 800c48e:	1a99      	subs	r1, r3, r2
 800c490:	1089      	asrs	r1, r1, #2
 800c492:	6101      	str	r1, [r0, #16]
 800c494:	4293      	cmp	r3, r2
 800c496:	d101      	bne.n	800c49c <rshift+0x8a>
 800c498:	2300      	movs	r3, #0
 800c49a:	6143      	str	r3, [r0, #20]
 800c49c:	b005      	add	sp, #20
 800c49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a0:	6837      	ldr	r7, [r6, #0]
 800c4a2:	9b03      	ldr	r3, [sp, #12]
 800c4a4:	409f      	lsls	r7, r3
 800c4a6:	430f      	orrs	r7, r1
 800c4a8:	4661      	mov	r1, ip
 800c4aa:	c180      	stmia	r1!, {r7}
 800c4ac:	468c      	mov	ip, r1
 800c4ae:	9b01      	ldr	r3, [sp, #4]
 800c4b0:	ce02      	ldmia	r6!, {r1}
 800c4b2:	40d9      	lsrs	r1, r3
 800c4b4:	e7db      	b.n	800c46e <rshift+0x5c>
 800c4b6:	c980      	ldmia	r1!, {r7}
 800c4b8:	c680      	stmia	r6!, {r7}
 800c4ba:	e7c3      	b.n	800c444 <rshift+0x32>

0800c4bc <__hexdig_fun>:
 800c4bc:	0002      	movs	r2, r0
 800c4be:	3a30      	subs	r2, #48	; 0x30
 800c4c0:	0003      	movs	r3, r0
 800c4c2:	2a09      	cmp	r2, #9
 800c4c4:	d802      	bhi.n	800c4cc <__hexdig_fun+0x10>
 800c4c6:	3b20      	subs	r3, #32
 800c4c8:	b2d8      	uxtb	r0, r3
 800c4ca:	4770      	bx	lr
 800c4cc:	0002      	movs	r2, r0
 800c4ce:	3a61      	subs	r2, #97	; 0x61
 800c4d0:	2a05      	cmp	r2, #5
 800c4d2:	d801      	bhi.n	800c4d8 <__hexdig_fun+0x1c>
 800c4d4:	3b47      	subs	r3, #71	; 0x47
 800c4d6:	e7f7      	b.n	800c4c8 <__hexdig_fun+0xc>
 800c4d8:	001a      	movs	r2, r3
 800c4da:	3a41      	subs	r2, #65	; 0x41
 800c4dc:	2000      	movs	r0, #0
 800c4de:	2a05      	cmp	r2, #5
 800c4e0:	d8f3      	bhi.n	800c4ca <__hexdig_fun+0xe>
 800c4e2:	3b27      	subs	r3, #39	; 0x27
 800c4e4:	e7f0      	b.n	800c4c8 <__hexdig_fun+0xc>
	...

0800c4e8 <__gethex>:
 800c4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ea:	b089      	sub	sp, #36	; 0x24
 800c4ec:	9307      	str	r3, [sp, #28]
 800c4ee:	2302      	movs	r3, #2
 800c4f0:	9201      	str	r2, [sp, #4]
 800c4f2:	680a      	ldr	r2, [r1, #0]
 800c4f4:	425b      	negs	r3, r3
 800c4f6:	9003      	str	r0, [sp, #12]
 800c4f8:	9106      	str	r1, [sp, #24]
 800c4fa:	1c96      	adds	r6, r2, #2
 800c4fc:	1a9b      	subs	r3, r3, r2
 800c4fe:	199a      	adds	r2, r3, r6
 800c500:	9600      	str	r6, [sp, #0]
 800c502:	9205      	str	r2, [sp, #20]
 800c504:	9a00      	ldr	r2, [sp, #0]
 800c506:	3601      	adds	r6, #1
 800c508:	7810      	ldrb	r0, [r2, #0]
 800c50a:	2830      	cmp	r0, #48	; 0x30
 800c50c:	d0f7      	beq.n	800c4fe <__gethex+0x16>
 800c50e:	f7ff ffd5 	bl	800c4bc <__hexdig_fun>
 800c512:	2300      	movs	r3, #0
 800c514:	001d      	movs	r5, r3
 800c516:	9302      	str	r3, [sp, #8]
 800c518:	4298      	cmp	r0, r3
 800c51a:	d11d      	bne.n	800c558 <__gethex+0x70>
 800c51c:	2201      	movs	r2, #1
 800c51e:	49a6      	ldr	r1, [pc, #664]	; (800c7b8 <__gethex+0x2d0>)
 800c520:	9800      	ldr	r0, [sp, #0]
 800c522:	f7ff fef7 	bl	800c314 <strncmp>
 800c526:	0007      	movs	r7, r0
 800c528:	42a8      	cmp	r0, r5
 800c52a:	d169      	bne.n	800c600 <__gethex+0x118>
 800c52c:	9b00      	ldr	r3, [sp, #0]
 800c52e:	0034      	movs	r4, r6
 800c530:	7858      	ldrb	r0, [r3, #1]
 800c532:	f7ff ffc3 	bl	800c4bc <__hexdig_fun>
 800c536:	2301      	movs	r3, #1
 800c538:	9302      	str	r3, [sp, #8]
 800c53a:	42a8      	cmp	r0, r5
 800c53c:	d02f      	beq.n	800c59e <__gethex+0xb6>
 800c53e:	9600      	str	r6, [sp, #0]
 800c540:	9b00      	ldr	r3, [sp, #0]
 800c542:	7818      	ldrb	r0, [r3, #0]
 800c544:	2830      	cmp	r0, #48	; 0x30
 800c546:	d009      	beq.n	800c55c <__gethex+0x74>
 800c548:	f7ff ffb8 	bl	800c4bc <__hexdig_fun>
 800c54c:	4242      	negs	r2, r0
 800c54e:	4142      	adcs	r2, r0
 800c550:	2301      	movs	r3, #1
 800c552:	0035      	movs	r5, r6
 800c554:	9202      	str	r2, [sp, #8]
 800c556:	9305      	str	r3, [sp, #20]
 800c558:	9c00      	ldr	r4, [sp, #0]
 800c55a:	e004      	b.n	800c566 <__gethex+0x7e>
 800c55c:	9b00      	ldr	r3, [sp, #0]
 800c55e:	3301      	adds	r3, #1
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	e7ed      	b.n	800c540 <__gethex+0x58>
 800c564:	3401      	adds	r4, #1
 800c566:	7820      	ldrb	r0, [r4, #0]
 800c568:	f7ff ffa8 	bl	800c4bc <__hexdig_fun>
 800c56c:	1e07      	subs	r7, r0, #0
 800c56e:	d1f9      	bne.n	800c564 <__gethex+0x7c>
 800c570:	2201      	movs	r2, #1
 800c572:	0020      	movs	r0, r4
 800c574:	4990      	ldr	r1, [pc, #576]	; (800c7b8 <__gethex+0x2d0>)
 800c576:	f7ff fecd 	bl	800c314 <strncmp>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	d10d      	bne.n	800c59a <__gethex+0xb2>
 800c57e:	2d00      	cmp	r5, #0
 800c580:	d106      	bne.n	800c590 <__gethex+0xa8>
 800c582:	3401      	adds	r4, #1
 800c584:	0025      	movs	r5, r4
 800c586:	7820      	ldrb	r0, [r4, #0]
 800c588:	f7ff ff98 	bl	800c4bc <__hexdig_fun>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d102      	bne.n	800c596 <__gethex+0xae>
 800c590:	1b2d      	subs	r5, r5, r4
 800c592:	00af      	lsls	r7, r5, #2
 800c594:	e003      	b.n	800c59e <__gethex+0xb6>
 800c596:	3401      	adds	r4, #1
 800c598:	e7f5      	b.n	800c586 <__gethex+0x9e>
 800c59a:	2d00      	cmp	r5, #0
 800c59c:	d1f8      	bne.n	800c590 <__gethex+0xa8>
 800c59e:	2220      	movs	r2, #32
 800c5a0:	7823      	ldrb	r3, [r4, #0]
 800c5a2:	0026      	movs	r6, r4
 800c5a4:	4393      	bics	r3, r2
 800c5a6:	2b50      	cmp	r3, #80	; 0x50
 800c5a8:	d11d      	bne.n	800c5e6 <__gethex+0xfe>
 800c5aa:	7863      	ldrb	r3, [r4, #1]
 800c5ac:	2b2b      	cmp	r3, #43	; 0x2b
 800c5ae:	d02c      	beq.n	800c60a <__gethex+0x122>
 800c5b0:	2b2d      	cmp	r3, #45	; 0x2d
 800c5b2:	d02e      	beq.n	800c612 <__gethex+0x12a>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	1c66      	adds	r6, r4, #1
 800c5b8:	9304      	str	r3, [sp, #16]
 800c5ba:	7830      	ldrb	r0, [r6, #0]
 800c5bc:	f7ff ff7e 	bl	800c4bc <__hexdig_fun>
 800c5c0:	1e43      	subs	r3, r0, #1
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	2b18      	cmp	r3, #24
 800c5c6:	d82b      	bhi.n	800c620 <__gethex+0x138>
 800c5c8:	3810      	subs	r0, #16
 800c5ca:	0005      	movs	r5, r0
 800c5cc:	7870      	ldrb	r0, [r6, #1]
 800c5ce:	f7ff ff75 	bl	800c4bc <__hexdig_fun>
 800c5d2:	1e43      	subs	r3, r0, #1
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	3601      	adds	r6, #1
 800c5d8:	2b18      	cmp	r3, #24
 800c5da:	d91c      	bls.n	800c616 <__gethex+0x12e>
 800c5dc:	9b04      	ldr	r3, [sp, #16]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d000      	beq.n	800c5e4 <__gethex+0xfc>
 800c5e2:	426d      	negs	r5, r5
 800c5e4:	197f      	adds	r7, r7, r5
 800c5e6:	9b06      	ldr	r3, [sp, #24]
 800c5e8:	601e      	str	r6, [r3, #0]
 800c5ea:	9b02      	ldr	r3, [sp, #8]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d019      	beq.n	800c624 <__gethex+0x13c>
 800c5f0:	2600      	movs	r6, #0
 800c5f2:	9b05      	ldr	r3, [sp, #20]
 800c5f4:	42b3      	cmp	r3, r6
 800c5f6:	d100      	bne.n	800c5fa <__gethex+0x112>
 800c5f8:	3606      	adds	r6, #6
 800c5fa:	0030      	movs	r0, r6
 800c5fc:	b009      	add	sp, #36	; 0x24
 800c5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c600:	2301      	movs	r3, #1
 800c602:	2700      	movs	r7, #0
 800c604:	9c00      	ldr	r4, [sp, #0]
 800c606:	9302      	str	r3, [sp, #8]
 800c608:	e7c9      	b.n	800c59e <__gethex+0xb6>
 800c60a:	2300      	movs	r3, #0
 800c60c:	9304      	str	r3, [sp, #16]
 800c60e:	1ca6      	adds	r6, r4, #2
 800c610:	e7d3      	b.n	800c5ba <__gethex+0xd2>
 800c612:	2301      	movs	r3, #1
 800c614:	e7fa      	b.n	800c60c <__gethex+0x124>
 800c616:	230a      	movs	r3, #10
 800c618:	435d      	muls	r5, r3
 800c61a:	182d      	adds	r5, r5, r0
 800c61c:	3d10      	subs	r5, #16
 800c61e:	e7d5      	b.n	800c5cc <__gethex+0xe4>
 800c620:	0026      	movs	r6, r4
 800c622:	e7e0      	b.n	800c5e6 <__gethex+0xfe>
 800c624:	9b00      	ldr	r3, [sp, #0]
 800c626:	9902      	ldr	r1, [sp, #8]
 800c628:	1ae3      	subs	r3, r4, r3
 800c62a:	3b01      	subs	r3, #1
 800c62c:	2b07      	cmp	r3, #7
 800c62e:	dc0a      	bgt.n	800c646 <__gethex+0x15e>
 800c630:	9803      	ldr	r0, [sp, #12]
 800c632:	f7fe f8d5 	bl	800a7e0 <_Balloc>
 800c636:	1e05      	subs	r5, r0, #0
 800c638:	d108      	bne.n	800c64c <__gethex+0x164>
 800c63a:	002a      	movs	r2, r5
 800c63c:	21e4      	movs	r1, #228	; 0xe4
 800c63e:	4b5f      	ldr	r3, [pc, #380]	; (800c7bc <__gethex+0x2d4>)
 800c640:	485f      	ldr	r0, [pc, #380]	; (800c7c0 <__gethex+0x2d8>)
 800c642:	f7ff fe9b 	bl	800c37c <__assert_func>
 800c646:	3101      	adds	r1, #1
 800c648:	105b      	asrs	r3, r3, #1
 800c64a:	e7ef      	b.n	800c62c <__gethex+0x144>
 800c64c:	0003      	movs	r3, r0
 800c64e:	3314      	adds	r3, #20
 800c650:	9302      	str	r3, [sp, #8]
 800c652:	9305      	str	r3, [sp, #20]
 800c654:	2300      	movs	r3, #0
 800c656:	001e      	movs	r6, r3
 800c658:	9304      	str	r3, [sp, #16]
 800c65a:	9b00      	ldr	r3, [sp, #0]
 800c65c:	42a3      	cmp	r3, r4
 800c65e:	d33f      	bcc.n	800c6e0 <__gethex+0x1f8>
 800c660:	9c05      	ldr	r4, [sp, #20]
 800c662:	9b02      	ldr	r3, [sp, #8]
 800c664:	c440      	stmia	r4!, {r6}
 800c666:	1ae4      	subs	r4, r4, r3
 800c668:	10a4      	asrs	r4, r4, #2
 800c66a:	0030      	movs	r0, r6
 800c66c:	612c      	str	r4, [r5, #16]
 800c66e:	f7fe f9af 	bl	800a9d0 <__hi0bits>
 800c672:	9b01      	ldr	r3, [sp, #4]
 800c674:	0164      	lsls	r4, r4, #5
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	1a26      	subs	r6, r4, r0
 800c67a:	9300      	str	r3, [sp, #0]
 800c67c:	429e      	cmp	r6, r3
 800c67e:	dd51      	ble.n	800c724 <__gethex+0x23c>
 800c680:	1af6      	subs	r6, r6, r3
 800c682:	0031      	movs	r1, r6
 800c684:	0028      	movs	r0, r5
 800c686:	f7fe fd43 	bl	800b110 <__any_on>
 800c68a:	1e04      	subs	r4, r0, #0
 800c68c:	d016      	beq.n	800c6bc <__gethex+0x1d4>
 800c68e:	2401      	movs	r4, #1
 800c690:	231f      	movs	r3, #31
 800c692:	0020      	movs	r0, r4
 800c694:	1e72      	subs	r2, r6, #1
 800c696:	4013      	ands	r3, r2
 800c698:	4098      	lsls	r0, r3
 800c69a:	0003      	movs	r3, r0
 800c69c:	1151      	asrs	r1, r2, #5
 800c69e:	9802      	ldr	r0, [sp, #8]
 800c6a0:	0089      	lsls	r1, r1, #2
 800c6a2:	5809      	ldr	r1, [r1, r0]
 800c6a4:	4219      	tst	r1, r3
 800c6a6:	d009      	beq.n	800c6bc <__gethex+0x1d4>
 800c6a8:	42a2      	cmp	r2, r4
 800c6aa:	dd06      	ble.n	800c6ba <__gethex+0x1d2>
 800c6ac:	0028      	movs	r0, r5
 800c6ae:	1eb1      	subs	r1, r6, #2
 800c6b0:	f7fe fd2e 	bl	800b110 <__any_on>
 800c6b4:	3402      	adds	r4, #2
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	d100      	bne.n	800c6bc <__gethex+0x1d4>
 800c6ba:	2402      	movs	r4, #2
 800c6bc:	0031      	movs	r1, r6
 800c6be:	0028      	movs	r0, r5
 800c6c0:	f7ff fea7 	bl	800c412 <rshift>
 800c6c4:	19bf      	adds	r7, r7, r6
 800c6c6:	9b01      	ldr	r3, [sp, #4]
 800c6c8:	689b      	ldr	r3, [r3, #8]
 800c6ca:	42bb      	cmp	r3, r7
 800c6cc:	da3a      	bge.n	800c744 <__gethex+0x25c>
 800c6ce:	0029      	movs	r1, r5
 800c6d0:	9803      	ldr	r0, [sp, #12]
 800c6d2:	f7fe f8c9 	bl	800a868 <_Bfree>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6da:	26a3      	movs	r6, #163	; 0xa3
 800c6dc:	6013      	str	r3, [r2, #0]
 800c6de:	e78c      	b.n	800c5fa <__gethex+0x112>
 800c6e0:	3c01      	subs	r4, #1
 800c6e2:	7823      	ldrb	r3, [r4, #0]
 800c6e4:	2b2e      	cmp	r3, #46	; 0x2e
 800c6e6:	d012      	beq.n	800c70e <__gethex+0x226>
 800c6e8:	9b04      	ldr	r3, [sp, #16]
 800c6ea:	2b20      	cmp	r3, #32
 800c6ec:	d104      	bne.n	800c6f8 <__gethex+0x210>
 800c6ee:	9b05      	ldr	r3, [sp, #20]
 800c6f0:	c340      	stmia	r3!, {r6}
 800c6f2:	2600      	movs	r6, #0
 800c6f4:	9305      	str	r3, [sp, #20]
 800c6f6:	9604      	str	r6, [sp, #16]
 800c6f8:	7820      	ldrb	r0, [r4, #0]
 800c6fa:	f7ff fedf 	bl	800c4bc <__hexdig_fun>
 800c6fe:	230f      	movs	r3, #15
 800c700:	4018      	ands	r0, r3
 800c702:	9b04      	ldr	r3, [sp, #16]
 800c704:	4098      	lsls	r0, r3
 800c706:	3304      	adds	r3, #4
 800c708:	4306      	orrs	r6, r0
 800c70a:	9304      	str	r3, [sp, #16]
 800c70c:	e7a5      	b.n	800c65a <__gethex+0x172>
 800c70e:	9b00      	ldr	r3, [sp, #0]
 800c710:	42a3      	cmp	r3, r4
 800c712:	d8e9      	bhi.n	800c6e8 <__gethex+0x200>
 800c714:	2201      	movs	r2, #1
 800c716:	0020      	movs	r0, r4
 800c718:	4927      	ldr	r1, [pc, #156]	; (800c7b8 <__gethex+0x2d0>)
 800c71a:	f7ff fdfb 	bl	800c314 <strncmp>
 800c71e:	2800      	cmp	r0, #0
 800c720:	d1e2      	bne.n	800c6e8 <__gethex+0x200>
 800c722:	e79a      	b.n	800c65a <__gethex+0x172>
 800c724:	9b00      	ldr	r3, [sp, #0]
 800c726:	2400      	movs	r4, #0
 800c728:	429e      	cmp	r6, r3
 800c72a:	dacc      	bge.n	800c6c6 <__gethex+0x1de>
 800c72c:	1b9e      	subs	r6, r3, r6
 800c72e:	0029      	movs	r1, r5
 800c730:	0032      	movs	r2, r6
 800c732:	9803      	ldr	r0, [sp, #12]
 800c734:	f7fe fab8 	bl	800aca8 <__lshift>
 800c738:	0003      	movs	r3, r0
 800c73a:	3314      	adds	r3, #20
 800c73c:	0005      	movs	r5, r0
 800c73e:	1bbf      	subs	r7, r7, r6
 800c740:	9302      	str	r3, [sp, #8]
 800c742:	e7c0      	b.n	800c6c6 <__gethex+0x1de>
 800c744:	9b01      	ldr	r3, [sp, #4]
 800c746:	685e      	ldr	r6, [r3, #4]
 800c748:	42be      	cmp	r6, r7
 800c74a:	dd70      	ble.n	800c82e <__gethex+0x346>
 800c74c:	9b00      	ldr	r3, [sp, #0]
 800c74e:	1bf6      	subs	r6, r6, r7
 800c750:	42b3      	cmp	r3, r6
 800c752:	dc37      	bgt.n	800c7c4 <__gethex+0x2dc>
 800c754:	9b01      	ldr	r3, [sp, #4]
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	2b02      	cmp	r3, #2
 800c75a:	d024      	beq.n	800c7a6 <__gethex+0x2be>
 800c75c:	2b03      	cmp	r3, #3
 800c75e:	d026      	beq.n	800c7ae <__gethex+0x2c6>
 800c760:	2b01      	cmp	r3, #1
 800c762:	d117      	bne.n	800c794 <__gethex+0x2ac>
 800c764:	9b00      	ldr	r3, [sp, #0]
 800c766:	42b3      	cmp	r3, r6
 800c768:	d114      	bne.n	800c794 <__gethex+0x2ac>
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d10b      	bne.n	800c786 <__gethex+0x29e>
 800c76e:	9b01      	ldr	r3, [sp, #4]
 800c770:	9a07      	ldr	r2, [sp, #28]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	2662      	movs	r6, #98	; 0x62
 800c776:	6013      	str	r3, [r2, #0]
 800c778:	2301      	movs	r3, #1
 800c77a:	9a02      	ldr	r2, [sp, #8]
 800c77c:	612b      	str	r3, [r5, #16]
 800c77e:	6013      	str	r3, [r2, #0]
 800c780:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c782:	601d      	str	r5, [r3, #0]
 800c784:	e739      	b.n	800c5fa <__gethex+0x112>
 800c786:	9900      	ldr	r1, [sp, #0]
 800c788:	0028      	movs	r0, r5
 800c78a:	3901      	subs	r1, #1
 800c78c:	f7fe fcc0 	bl	800b110 <__any_on>
 800c790:	2800      	cmp	r0, #0
 800c792:	d1ec      	bne.n	800c76e <__gethex+0x286>
 800c794:	0029      	movs	r1, r5
 800c796:	9803      	ldr	r0, [sp, #12]
 800c798:	f7fe f866 	bl	800a868 <_Bfree>
 800c79c:	2300      	movs	r3, #0
 800c79e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7a0:	2650      	movs	r6, #80	; 0x50
 800c7a2:	6013      	str	r3, [r2, #0]
 800c7a4:	e729      	b.n	800c5fa <__gethex+0x112>
 800c7a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1f3      	bne.n	800c794 <__gethex+0x2ac>
 800c7ac:	e7df      	b.n	800c76e <__gethex+0x286>
 800c7ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d1dc      	bne.n	800c76e <__gethex+0x286>
 800c7b4:	e7ee      	b.n	800c794 <__gethex+0x2ac>
 800c7b6:	46c0      	nop			; (mov r8, r8)
 800c7b8:	0800d414 	.word	0x0800d414
 800c7bc:	0800d2a9 	.word	0x0800d2a9
 800c7c0:	0800d5be 	.word	0x0800d5be
 800c7c4:	1e77      	subs	r7, r6, #1
 800c7c6:	2c00      	cmp	r4, #0
 800c7c8:	d12f      	bne.n	800c82a <__gethex+0x342>
 800c7ca:	2f00      	cmp	r7, #0
 800c7cc:	d004      	beq.n	800c7d8 <__gethex+0x2f0>
 800c7ce:	0039      	movs	r1, r7
 800c7d0:	0028      	movs	r0, r5
 800c7d2:	f7fe fc9d 	bl	800b110 <__any_on>
 800c7d6:	0004      	movs	r4, r0
 800c7d8:	231f      	movs	r3, #31
 800c7da:	117a      	asrs	r2, r7, #5
 800c7dc:	401f      	ands	r7, r3
 800c7de:	3b1e      	subs	r3, #30
 800c7e0:	40bb      	lsls	r3, r7
 800c7e2:	9902      	ldr	r1, [sp, #8]
 800c7e4:	0092      	lsls	r2, r2, #2
 800c7e6:	5852      	ldr	r2, [r2, r1]
 800c7e8:	421a      	tst	r2, r3
 800c7ea:	d001      	beq.n	800c7f0 <__gethex+0x308>
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	431c      	orrs	r4, r3
 800c7f0:	9b00      	ldr	r3, [sp, #0]
 800c7f2:	0031      	movs	r1, r6
 800c7f4:	1b9b      	subs	r3, r3, r6
 800c7f6:	2602      	movs	r6, #2
 800c7f8:	0028      	movs	r0, r5
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	f7ff fe09 	bl	800c412 <rshift>
 800c800:	9b01      	ldr	r3, [sp, #4]
 800c802:	685f      	ldr	r7, [r3, #4]
 800c804:	2c00      	cmp	r4, #0
 800c806:	d041      	beq.n	800c88c <__gethex+0x3a4>
 800c808:	9b01      	ldr	r3, [sp, #4]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	2b02      	cmp	r3, #2
 800c80e:	d010      	beq.n	800c832 <__gethex+0x34a>
 800c810:	2b03      	cmp	r3, #3
 800c812:	d012      	beq.n	800c83a <__gethex+0x352>
 800c814:	2b01      	cmp	r3, #1
 800c816:	d106      	bne.n	800c826 <__gethex+0x33e>
 800c818:	07a2      	lsls	r2, r4, #30
 800c81a:	d504      	bpl.n	800c826 <__gethex+0x33e>
 800c81c:	9a02      	ldr	r2, [sp, #8]
 800c81e:	6812      	ldr	r2, [r2, #0]
 800c820:	4314      	orrs	r4, r2
 800c822:	421c      	tst	r4, r3
 800c824:	d10c      	bne.n	800c840 <__gethex+0x358>
 800c826:	2310      	movs	r3, #16
 800c828:	e02f      	b.n	800c88a <__gethex+0x3a2>
 800c82a:	2401      	movs	r4, #1
 800c82c:	e7d4      	b.n	800c7d8 <__gethex+0x2f0>
 800c82e:	2601      	movs	r6, #1
 800c830:	e7e8      	b.n	800c804 <__gethex+0x31c>
 800c832:	2301      	movs	r3, #1
 800c834:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c836:	1a9b      	subs	r3, r3, r2
 800c838:	930f      	str	r3, [sp, #60]	; 0x3c
 800c83a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d0f2      	beq.n	800c826 <__gethex+0x33e>
 800c840:	692b      	ldr	r3, [r5, #16]
 800c842:	2000      	movs	r0, #0
 800c844:	9302      	str	r3, [sp, #8]
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	9304      	str	r3, [sp, #16]
 800c84a:	002b      	movs	r3, r5
 800c84c:	9a04      	ldr	r2, [sp, #16]
 800c84e:	3314      	adds	r3, #20
 800c850:	1899      	adds	r1, r3, r2
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	1c54      	adds	r4, r2, #1
 800c856:	d01e      	beq.n	800c896 <__gethex+0x3ae>
 800c858:	3201      	adds	r2, #1
 800c85a:	601a      	str	r2, [r3, #0]
 800c85c:	002b      	movs	r3, r5
 800c85e:	3314      	adds	r3, #20
 800c860:	2e02      	cmp	r6, #2
 800c862:	d141      	bne.n	800c8e8 <__gethex+0x400>
 800c864:	9a01      	ldr	r2, [sp, #4]
 800c866:	9900      	ldr	r1, [sp, #0]
 800c868:	6812      	ldr	r2, [r2, #0]
 800c86a:	3a01      	subs	r2, #1
 800c86c:	428a      	cmp	r2, r1
 800c86e:	d10b      	bne.n	800c888 <__gethex+0x3a0>
 800c870:	221f      	movs	r2, #31
 800c872:	9800      	ldr	r0, [sp, #0]
 800c874:	1149      	asrs	r1, r1, #5
 800c876:	4002      	ands	r2, r0
 800c878:	2001      	movs	r0, #1
 800c87a:	0004      	movs	r4, r0
 800c87c:	4094      	lsls	r4, r2
 800c87e:	0089      	lsls	r1, r1, #2
 800c880:	58cb      	ldr	r3, [r1, r3]
 800c882:	4223      	tst	r3, r4
 800c884:	d000      	beq.n	800c888 <__gethex+0x3a0>
 800c886:	2601      	movs	r6, #1
 800c888:	2320      	movs	r3, #32
 800c88a:	431e      	orrs	r6, r3
 800c88c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c88e:	601d      	str	r5, [r3, #0]
 800c890:	9b07      	ldr	r3, [sp, #28]
 800c892:	601f      	str	r7, [r3, #0]
 800c894:	e6b1      	b.n	800c5fa <__gethex+0x112>
 800c896:	c301      	stmia	r3!, {r0}
 800c898:	4299      	cmp	r1, r3
 800c89a:	d8da      	bhi.n	800c852 <__gethex+0x36a>
 800c89c:	68ab      	ldr	r3, [r5, #8]
 800c89e:	9a02      	ldr	r2, [sp, #8]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	db18      	blt.n	800c8d6 <__gethex+0x3ee>
 800c8a4:	6869      	ldr	r1, [r5, #4]
 800c8a6:	9803      	ldr	r0, [sp, #12]
 800c8a8:	3101      	adds	r1, #1
 800c8aa:	f7fd ff99 	bl	800a7e0 <_Balloc>
 800c8ae:	1e04      	subs	r4, r0, #0
 800c8b0:	d104      	bne.n	800c8bc <__gethex+0x3d4>
 800c8b2:	0022      	movs	r2, r4
 800c8b4:	2184      	movs	r1, #132	; 0x84
 800c8b6:	4b1c      	ldr	r3, [pc, #112]	; (800c928 <__gethex+0x440>)
 800c8b8:	481c      	ldr	r0, [pc, #112]	; (800c92c <__gethex+0x444>)
 800c8ba:	e6c2      	b.n	800c642 <__gethex+0x15a>
 800c8bc:	0029      	movs	r1, r5
 800c8be:	692a      	ldr	r2, [r5, #16]
 800c8c0:	310c      	adds	r1, #12
 800c8c2:	3202      	adds	r2, #2
 800c8c4:	0092      	lsls	r2, r2, #2
 800c8c6:	300c      	adds	r0, #12
 800c8c8:	f7ff fd48 	bl	800c35c <memcpy>
 800c8cc:	0029      	movs	r1, r5
 800c8ce:	9803      	ldr	r0, [sp, #12]
 800c8d0:	f7fd ffca 	bl	800a868 <_Bfree>
 800c8d4:	0025      	movs	r5, r4
 800c8d6:	692b      	ldr	r3, [r5, #16]
 800c8d8:	1c5a      	adds	r2, r3, #1
 800c8da:	612a      	str	r2, [r5, #16]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	3304      	adds	r3, #4
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	18eb      	adds	r3, r5, r3
 800c8e4:	605a      	str	r2, [r3, #4]
 800c8e6:	e7b9      	b.n	800c85c <__gethex+0x374>
 800c8e8:	692a      	ldr	r2, [r5, #16]
 800c8ea:	9902      	ldr	r1, [sp, #8]
 800c8ec:	428a      	cmp	r2, r1
 800c8ee:	dd09      	ble.n	800c904 <__gethex+0x41c>
 800c8f0:	2101      	movs	r1, #1
 800c8f2:	0028      	movs	r0, r5
 800c8f4:	f7ff fd8d 	bl	800c412 <rshift>
 800c8f8:	9b01      	ldr	r3, [sp, #4]
 800c8fa:	3701      	adds	r7, #1
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	42bb      	cmp	r3, r7
 800c900:	dac1      	bge.n	800c886 <__gethex+0x39e>
 800c902:	e6e4      	b.n	800c6ce <__gethex+0x1e6>
 800c904:	221f      	movs	r2, #31
 800c906:	9c00      	ldr	r4, [sp, #0]
 800c908:	9900      	ldr	r1, [sp, #0]
 800c90a:	2601      	movs	r6, #1
 800c90c:	4014      	ands	r4, r2
 800c90e:	4211      	tst	r1, r2
 800c910:	d0ba      	beq.n	800c888 <__gethex+0x3a0>
 800c912:	9a04      	ldr	r2, [sp, #16]
 800c914:	189b      	adds	r3, r3, r2
 800c916:	3b04      	subs	r3, #4
 800c918:	6818      	ldr	r0, [r3, #0]
 800c91a:	f7fe f859 	bl	800a9d0 <__hi0bits>
 800c91e:	2320      	movs	r3, #32
 800c920:	1b1b      	subs	r3, r3, r4
 800c922:	4298      	cmp	r0, r3
 800c924:	dbe4      	blt.n	800c8f0 <__gethex+0x408>
 800c926:	e7af      	b.n	800c888 <__gethex+0x3a0>
 800c928:	0800d2a9 	.word	0x0800d2a9
 800c92c:	0800d5be 	.word	0x0800d5be

0800c930 <L_shift>:
 800c930:	2308      	movs	r3, #8
 800c932:	b570      	push	{r4, r5, r6, lr}
 800c934:	2520      	movs	r5, #32
 800c936:	1a9a      	subs	r2, r3, r2
 800c938:	0092      	lsls	r2, r2, #2
 800c93a:	1aad      	subs	r5, r5, r2
 800c93c:	6843      	ldr	r3, [r0, #4]
 800c93e:	6804      	ldr	r4, [r0, #0]
 800c940:	001e      	movs	r6, r3
 800c942:	40ae      	lsls	r6, r5
 800c944:	40d3      	lsrs	r3, r2
 800c946:	4334      	orrs	r4, r6
 800c948:	6004      	str	r4, [r0, #0]
 800c94a:	6043      	str	r3, [r0, #4]
 800c94c:	3004      	adds	r0, #4
 800c94e:	4288      	cmp	r0, r1
 800c950:	d3f4      	bcc.n	800c93c <L_shift+0xc>
 800c952:	bd70      	pop	{r4, r5, r6, pc}

0800c954 <__match>:
 800c954:	b530      	push	{r4, r5, lr}
 800c956:	6803      	ldr	r3, [r0, #0]
 800c958:	780c      	ldrb	r4, [r1, #0]
 800c95a:	3301      	adds	r3, #1
 800c95c:	2c00      	cmp	r4, #0
 800c95e:	d102      	bne.n	800c966 <__match+0x12>
 800c960:	6003      	str	r3, [r0, #0]
 800c962:	2001      	movs	r0, #1
 800c964:	bd30      	pop	{r4, r5, pc}
 800c966:	781a      	ldrb	r2, [r3, #0]
 800c968:	0015      	movs	r5, r2
 800c96a:	3d41      	subs	r5, #65	; 0x41
 800c96c:	2d19      	cmp	r5, #25
 800c96e:	d800      	bhi.n	800c972 <__match+0x1e>
 800c970:	3220      	adds	r2, #32
 800c972:	3101      	adds	r1, #1
 800c974:	42a2      	cmp	r2, r4
 800c976:	d0ef      	beq.n	800c958 <__match+0x4>
 800c978:	2000      	movs	r0, #0
 800c97a:	e7f3      	b.n	800c964 <__match+0x10>

0800c97c <__hexnan>:
 800c97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c97e:	680b      	ldr	r3, [r1, #0]
 800c980:	b08b      	sub	sp, #44	; 0x2c
 800c982:	9201      	str	r2, [sp, #4]
 800c984:	9901      	ldr	r1, [sp, #4]
 800c986:	115a      	asrs	r2, r3, #5
 800c988:	0092      	lsls	r2, r2, #2
 800c98a:	188a      	adds	r2, r1, r2
 800c98c:	9202      	str	r2, [sp, #8]
 800c98e:	0019      	movs	r1, r3
 800c990:	221f      	movs	r2, #31
 800c992:	4011      	ands	r1, r2
 800c994:	9008      	str	r0, [sp, #32]
 800c996:	9106      	str	r1, [sp, #24]
 800c998:	4213      	tst	r3, r2
 800c99a:	d002      	beq.n	800c9a2 <__hexnan+0x26>
 800c99c:	9b02      	ldr	r3, [sp, #8]
 800c99e:	3304      	adds	r3, #4
 800c9a0:	9302      	str	r3, [sp, #8]
 800c9a2:	9b02      	ldr	r3, [sp, #8]
 800c9a4:	2500      	movs	r5, #0
 800c9a6:	1f1f      	subs	r7, r3, #4
 800c9a8:	003e      	movs	r6, r7
 800c9aa:	003c      	movs	r4, r7
 800c9ac:	9b08      	ldr	r3, [sp, #32]
 800c9ae:	603d      	str	r5, [r7, #0]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	9507      	str	r5, [sp, #28]
 800c9b4:	9305      	str	r3, [sp, #20]
 800c9b6:	9503      	str	r5, [sp, #12]
 800c9b8:	9b05      	ldr	r3, [sp, #20]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c9be:	9b05      	ldr	r3, [sp, #20]
 800c9c0:	785b      	ldrb	r3, [r3, #1]
 800c9c2:	9304      	str	r3, [sp, #16]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d028      	beq.n	800ca1a <__hexnan+0x9e>
 800c9c8:	9804      	ldr	r0, [sp, #16]
 800c9ca:	f7ff fd77 	bl	800c4bc <__hexdig_fun>
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	d154      	bne.n	800ca7c <__hexnan+0x100>
 800c9d2:	9b04      	ldr	r3, [sp, #16]
 800c9d4:	2b20      	cmp	r3, #32
 800c9d6:	d819      	bhi.n	800ca0c <__hexnan+0x90>
 800c9d8:	9b03      	ldr	r3, [sp, #12]
 800c9da:	9a07      	ldr	r2, [sp, #28]
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	dd12      	ble.n	800ca06 <__hexnan+0x8a>
 800c9e0:	42b4      	cmp	r4, r6
 800c9e2:	d206      	bcs.n	800c9f2 <__hexnan+0x76>
 800c9e4:	2d07      	cmp	r5, #7
 800c9e6:	dc04      	bgt.n	800c9f2 <__hexnan+0x76>
 800c9e8:	002a      	movs	r2, r5
 800c9ea:	0031      	movs	r1, r6
 800c9ec:	0020      	movs	r0, r4
 800c9ee:	f7ff ff9f 	bl	800c930 <L_shift>
 800c9f2:	9b01      	ldr	r3, [sp, #4]
 800c9f4:	2508      	movs	r5, #8
 800c9f6:	429c      	cmp	r4, r3
 800c9f8:	d905      	bls.n	800ca06 <__hexnan+0x8a>
 800c9fa:	1f26      	subs	r6, r4, #4
 800c9fc:	2500      	movs	r5, #0
 800c9fe:	0034      	movs	r4, r6
 800ca00:	9b03      	ldr	r3, [sp, #12]
 800ca02:	6035      	str	r5, [r6, #0]
 800ca04:	9307      	str	r3, [sp, #28]
 800ca06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca08:	9305      	str	r3, [sp, #20]
 800ca0a:	e7d5      	b.n	800c9b8 <__hexnan+0x3c>
 800ca0c:	9b04      	ldr	r3, [sp, #16]
 800ca0e:	2b29      	cmp	r3, #41	; 0x29
 800ca10:	d159      	bne.n	800cac6 <__hexnan+0x14a>
 800ca12:	9b05      	ldr	r3, [sp, #20]
 800ca14:	9a08      	ldr	r2, [sp, #32]
 800ca16:	3302      	adds	r3, #2
 800ca18:	6013      	str	r3, [r2, #0]
 800ca1a:	9b03      	ldr	r3, [sp, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d052      	beq.n	800cac6 <__hexnan+0x14a>
 800ca20:	42b4      	cmp	r4, r6
 800ca22:	d206      	bcs.n	800ca32 <__hexnan+0xb6>
 800ca24:	2d07      	cmp	r5, #7
 800ca26:	dc04      	bgt.n	800ca32 <__hexnan+0xb6>
 800ca28:	002a      	movs	r2, r5
 800ca2a:	0031      	movs	r1, r6
 800ca2c:	0020      	movs	r0, r4
 800ca2e:	f7ff ff7f 	bl	800c930 <L_shift>
 800ca32:	9b01      	ldr	r3, [sp, #4]
 800ca34:	429c      	cmp	r4, r3
 800ca36:	d935      	bls.n	800caa4 <__hexnan+0x128>
 800ca38:	001a      	movs	r2, r3
 800ca3a:	0023      	movs	r3, r4
 800ca3c:	cb02      	ldmia	r3!, {r1}
 800ca3e:	c202      	stmia	r2!, {r1}
 800ca40:	429f      	cmp	r7, r3
 800ca42:	d2fb      	bcs.n	800ca3c <__hexnan+0xc0>
 800ca44:	9b02      	ldr	r3, [sp, #8]
 800ca46:	1c62      	adds	r2, r4, #1
 800ca48:	1ed9      	subs	r1, r3, #3
 800ca4a:	2304      	movs	r3, #4
 800ca4c:	4291      	cmp	r1, r2
 800ca4e:	d305      	bcc.n	800ca5c <__hexnan+0xe0>
 800ca50:	9b02      	ldr	r3, [sp, #8]
 800ca52:	3b04      	subs	r3, #4
 800ca54:	1b1b      	subs	r3, r3, r4
 800ca56:	089b      	lsrs	r3, r3, #2
 800ca58:	3301      	adds	r3, #1
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	9a01      	ldr	r2, [sp, #4]
 800ca5e:	18d3      	adds	r3, r2, r3
 800ca60:	2200      	movs	r2, #0
 800ca62:	c304      	stmia	r3!, {r2}
 800ca64:	429f      	cmp	r7, r3
 800ca66:	d2fc      	bcs.n	800ca62 <__hexnan+0xe6>
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d104      	bne.n	800ca78 <__hexnan+0xfc>
 800ca6e:	9b01      	ldr	r3, [sp, #4]
 800ca70:	429f      	cmp	r7, r3
 800ca72:	d126      	bne.n	800cac2 <__hexnan+0x146>
 800ca74:	2301      	movs	r3, #1
 800ca76:	603b      	str	r3, [r7, #0]
 800ca78:	2005      	movs	r0, #5
 800ca7a:	e025      	b.n	800cac8 <__hexnan+0x14c>
 800ca7c:	9b03      	ldr	r3, [sp, #12]
 800ca7e:	3501      	adds	r5, #1
 800ca80:	3301      	adds	r3, #1
 800ca82:	9303      	str	r3, [sp, #12]
 800ca84:	2d08      	cmp	r5, #8
 800ca86:	dd06      	ble.n	800ca96 <__hexnan+0x11a>
 800ca88:	9b01      	ldr	r3, [sp, #4]
 800ca8a:	429c      	cmp	r4, r3
 800ca8c:	d9bb      	bls.n	800ca06 <__hexnan+0x8a>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	2501      	movs	r5, #1
 800ca92:	3c04      	subs	r4, #4
 800ca94:	6023      	str	r3, [r4, #0]
 800ca96:	220f      	movs	r2, #15
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	4010      	ands	r0, r2
 800ca9c:	011b      	lsls	r3, r3, #4
 800ca9e:	4303      	orrs	r3, r0
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	e7b0      	b.n	800ca06 <__hexnan+0x8a>
 800caa4:	9b06      	ldr	r3, [sp, #24]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d0de      	beq.n	800ca68 <__hexnan+0xec>
 800caaa:	2320      	movs	r3, #32
 800caac:	9a06      	ldr	r2, [sp, #24]
 800caae:	9902      	ldr	r1, [sp, #8]
 800cab0:	1a9b      	subs	r3, r3, r2
 800cab2:	2201      	movs	r2, #1
 800cab4:	4252      	negs	r2, r2
 800cab6:	40da      	lsrs	r2, r3
 800cab8:	3904      	subs	r1, #4
 800caba:	680b      	ldr	r3, [r1, #0]
 800cabc:	4013      	ands	r3, r2
 800cabe:	600b      	str	r3, [r1, #0]
 800cac0:	e7d2      	b.n	800ca68 <__hexnan+0xec>
 800cac2:	3f04      	subs	r7, #4
 800cac4:	e7d0      	b.n	800ca68 <__hexnan+0xec>
 800cac6:	2004      	movs	r0, #4
 800cac8:	b00b      	add	sp, #44	; 0x2c
 800caca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cacc <__ascii_mbtowc>:
 800cacc:	b082      	sub	sp, #8
 800cace:	2900      	cmp	r1, #0
 800cad0:	d100      	bne.n	800cad4 <__ascii_mbtowc+0x8>
 800cad2:	a901      	add	r1, sp, #4
 800cad4:	1e10      	subs	r0, r2, #0
 800cad6:	d006      	beq.n	800cae6 <__ascii_mbtowc+0x1a>
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d006      	beq.n	800caea <__ascii_mbtowc+0x1e>
 800cadc:	7813      	ldrb	r3, [r2, #0]
 800cade:	600b      	str	r3, [r1, #0]
 800cae0:	7810      	ldrb	r0, [r2, #0]
 800cae2:	1e43      	subs	r3, r0, #1
 800cae4:	4198      	sbcs	r0, r3
 800cae6:	b002      	add	sp, #8
 800cae8:	4770      	bx	lr
 800caea:	2002      	movs	r0, #2
 800caec:	4240      	negs	r0, r0
 800caee:	e7fa      	b.n	800cae6 <__ascii_mbtowc+0x1a>

0800caf0 <_realloc_r>:
 800caf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800caf2:	0007      	movs	r7, r0
 800caf4:	000e      	movs	r6, r1
 800caf6:	0014      	movs	r4, r2
 800caf8:	2900      	cmp	r1, #0
 800cafa:	d105      	bne.n	800cb08 <_realloc_r+0x18>
 800cafc:	0011      	movs	r1, r2
 800cafe:	f7fd fddd 	bl	800a6bc <_malloc_r>
 800cb02:	0005      	movs	r5, r0
 800cb04:	0028      	movs	r0, r5
 800cb06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb08:	2a00      	cmp	r2, #0
 800cb0a:	d103      	bne.n	800cb14 <_realloc_r+0x24>
 800cb0c:	f7fd fd60 	bl	800a5d0 <_free_r>
 800cb10:	0025      	movs	r5, r4
 800cb12:	e7f7      	b.n	800cb04 <_realloc_r+0x14>
 800cb14:	f000 f83f 	bl	800cb96 <_malloc_usable_size_r>
 800cb18:	9001      	str	r0, [sp, #4]
 800cb1a:	4284      	cmp	r4, r0
 800cb1c:	d803      	bhi.n	800cb26 <_realloc_r+0x36>
 800cb1e:	0035      	movs	r5, r6
 800cb20:	0843      	lsrs	r3, r0, #1
 800cb22:	42a3      	cmp	r3, r4
 800cb24:	d3ee      	bcc.n	800cb04 <_realloc_r+0x14>
 800cb26:	0021      	movs	r1, r4
 800cb28:	0038      	movs	r0, r7
 800cb2a:	f7fd fdc7 	bl	800a6bc <_malloc_r>
 800cb2e:	1e05      	subs	r5, r0, #0
 800cb30:	d0e8      	beq.n	800cb04 <_realloc_r+0x14>
 800cb32:	9b01      	ldr	r3, [sp, #4]
 800cb34:	0022      	movs	r2, r4
 800cb36:	429c      	cmp	r4, r3
 800cb38:	d900      	bls.n	800cb3c <_realloc_r+0x4c>
 800cb3a:	001a      	movs	r2, r3
 800cb3c:	0031      	movs	r1, r6
 800cb3e:	0028      	movs	r0, r5
 800cb40:	f7ff fc0c 	bl	800c35c <memcpy>
 800cb44:	0031      	movs	r1, r6
 800cb46:	0038      	movs	r0, r7
 800cb48:	f7fd fd42 	bl	800a5d0 <_free_r>
 800cb4c:	e7da      	b.n	800cb04 <_realloc_r+0x14>

0800cb4e <__ascii_wctomb>:
 800cb4e:	0003      	movs	r3, r0
 800cb50:	1e08      	subs	r0, r1, #0
 800cb52:	d005      	beq.n	800cb60 <__ascii_wctomb+0x12>
 800cb54:	2aff      	cmp	r2, #255	; 0xff
 800cb56:	d904      	bls.n	800cb62 <__ascii_wctomb+0x14>
 800cb58:	228a      	movs	r2, #138	; 0x8a
 800cb5a:	2001      	movs	r0, #1
 800cb5c:	601a      	str	r2, [r3, #0]
 800cb5e:	4240      	negs	r0, r0
 800cb60:	4770      	bx	lr
 800cb62:	2001      	movs	r0, #1
 800cb64:	700a      	strb	r2, [r1, #0]
 800cb66:	e7fb      	b.n	800cb60 <__ascii_wctomb+0x12>

0800cb68 <fiprintf>:
 800cb68:	b40e      	push	{r1, r2, r3}
 800cb6a:	b517      	push	{r0, r1, r2, r4, lr}
 800cb6c:	4c05      	ldr	r4, [pc, #20]	; (800cb84 <fiprintf+0x1c>)
 800cb6e:	ab05      	add	r3, sp, #20
 800cb70:	cb04      	ldmia	r3!, {r2}
 800cb72:	0001      	movs	r1, r0
 800cb74:	6820      	ldr	r0, [r4, #0]
 800cb76:	9301      	str	r3, [sp, #4]
 800cb78:	f000 f83c 	bl	800cbf4 <_vfiprintf_r>
 800cb7c:	bc1e      	pop	{r1, r2, r3, r4}
 800cb7e:	bc08      	pop	{r3}
 800cb80:	b003      	add	sp, #12
 800cb82:	4718      	bx	r3
 800cb84:	20000064 	.word	0x20000064

0800cb88 <abort>:
 800cb88:	2006      	movs	r0, #6
 800cb8a:	b510      	push	{r4, lr}
 800cb8c:	f000 fa1e 	bl	800cfcc <raise>
 800cb90:	2001      	movs	r0, #1
 800cb92:	f7f6 fe71 	bl	8003878 <_exit>

0800cb96 <_malloc_usable_size_r>:
 800cb96:	1f0b      	subs	r3, r1, #4
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	1f18      	subs	r0, r3, #4
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	da01      	bge.n	800cba4 <_malloc_usable_size_r+0xe>
 800cba0:	580b      	ldr	r3, [r1, r0]
 800cba2:	18c0      	adds	r0, r0, r3
 800cba4:	4770      	bx	lr

0800cba6 <__sfputc_r>:
 800cba6:	6893      	ldr	r3, [r2, #8]
 800cba8:	b510      	push	{r4, lr}
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	6093      	str	r3, [r2, #8]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	da04      	bge.n	800cbbc <__sfputc_r+0x16>
 800cbb2:	6994      	ldr	r4, [r2, #24]
 800cbb4:	42a3      	cmp	r3, r4
 800cbb6:	db07      	blt.n	800cbc8 <__sfputc_r+0x22>
 800cbb8:	290a      	cmp	r1, #10
 800cbba:	d005      	beq.n	800cbc8 <__sfputc_r+0x22>
 800cbbc:	6813      	ldr	r3, [r2, #0]
 800cbbe:	1c58      	adds	r0, r3, #1
 800cbc0:	6010      	str	r0, [r2, #0]
 800cbc2:	7019      	strb	r1, [r3, #0]
 800cbc4:	0008      	movs	r0, r1
 800cbc6:	bd10      	pop	{r4, pc}
 800cbc8:	f000 f930 	bl	800ce2c <__swbuf_r>
 800cbcc:	0001      	movs	r1, r0
 800cbce:	e7f9      	b.n	800cbc4 <__sfputc_r+0x1e>

0800cbd0 <__sfputs_r>:
 800cbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd2:	0006      	movs	r6, r0
 800cbd4:	000f      	movs	r7, r1
 800cbd6:	0014      	movs	r4, r2
 800cbd8:	18d5      	adds	r5, r2, r3
 800cbda:	42ac      	cmp	r4, r5
 800cbdc:	d101      	bne.n	800cbe2 <__sfputs_r+0x12>
 800cbde:	2000      	movs	r0, #0
 800cbe0:	e007      	b.n	800cbf2 <__sfputs_r+0x22>
 800cbe2:	7821      	ldrb	r1, [r4, #0]
 800cbe4:	003a      	movs	r2, r7
 800cbe6:	0030      	movs	r0, r6
 800cbe8:	f7ff ffdd 	bl	800cba6 <__sfputc_r>
 800cbec:	3401      	adds	r4, #1
 800cbee:	1c43      	adds	r3, r0, #1
 800cbf0:	d1f3      	bne.n	800cbda <__sfputs_r+0xa>
 800cbf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cbf4 <_vfiprintf_r>:
 800cbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbf6:	b0a1      	sub	sp, #132	; 0x84
 800cbf8:	000f      	movs	r7, r1
 800cbfa:	0015      	movs	r5, r2
 800cbfc:	001e      	movs	r6, r3
 800cbfe:	9003      	str	r0, [sp, #12]
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d004      	beq.n	800cc0e <_vfiprintf_r+0x1a>
 800cc04:	6a03      	ldr	r3, [r0, #32]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d101      	bne.n	800cc0e <_vfiprintf_r+0x1a>
 800cc0a:	f7fc fd0d 	bl	8009628 <__sinit>
 800cc0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc10:	07db      	lsls	r3, r3, #31
 800cc12:	d405      	bmi.n	800cc20 <_vfiprintf_r+0x2c>
 800cc14:	89bb      	ldrh	r3, [r7, #12]
 800cc16:	059b      	lsls	r3, r3, #22
 800cc18:	d402      	bmi.n	800cc20 <_vfiprintf_r+0x2c>
 800cc1a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cc1c:	f7fc fe29 	bl	8009872 <__retarget_lock_acquire_recursive>
 800cc20:	89bb      	ldrh	r3, [r7, #12]
 800cc22:	071b      	lsls	r3, r3, #28
 800cc24:	d502      	bpl.n	800cc2c <_vfiprintf_r+0x38>
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d113      	bne.n	800cc54 <_vfiprintf_r+0x60>
 800cc2c:	0039      	movs	r1, r7
 800cc2e:	9803      	ldr	r0, [sp, #12]
 800cc30:	f000 f93e 	bl	800ceb0 <__swsetup_r>
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d00d      	beq.n	800cc54 <_vfiprintf_r+0x60>
 800cc38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc3a:	07db      	lsls	r3, r3, #31
 800cc3c:	d503      	bpl.n	800cc46 <_vfiprintf_r+0x52>
 800cc3e:	2001      	movs	r0, #1
 800cc40:	4240      	negs	r0, r0
 800cc42:	b021      	add	sp, #132	; 0x84
 800cc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc46:	89bb      	ldrh	r3, [r7, #12]
 800cc48:	059b      	lsls	r3, r3, #22
 800cc4a:	d4f8      	bmi.n	800cc3e <_vfiprintf_r+0x4a>
 800cc4c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cc4e:	f7fc fe11 	bl	8009874 <__retarget_lock_release_recursive>
 800cc52:	e7f4      	b.n	800cc3e <_vfiprintf_r+0x4a>
 800cc54:	2300      	movs	r3, #0
 800cc56:	ac08      	add	r4, sp, #32
 800cc58:	6163      	str	r3, [r4, #20]
 800cc5a:	3320      	adds	r3, #32
 800cc5c:	7663      	strb	r3, [r4, #25]
 800cc5e:	3310      	adds	r3, #16
 800cc60:	76a3      	strb	r3, [r4, #26]
 800cc62:	9607      	str	r6, [sp, #28]
 800cc64:	002e      	movs	r6, r5
 800cc66:	7833      	ldrb	r3, [r6, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d001      	beq.n	800cc70 <_vfiprintf_r+0x7c>
 800cc6c:	2b25      	cmp	r3, #37	; 0x25
 800cc6e:	d148      	bne.n	800cd02 <_vfiprintf_r+0x10e>
 800cc70:	1b73      	subs	r3, r6, r5
 800cc72:	9305      	str	r3, [sp, #20]
 800cc74:	42ae      	cmp	r6, r5
 800cc76:	d00b      	beq.n	800cc90 <_vfiprintf_r+0x9c>
 800cc78:	002a      	movs	r2, r5
 800cc7a:	0039      	movs	r1, r7
 800cc7c:	9803      	ldr	r0, [sp, #12]
 800cc7e:	f7ff ffa7 	bl	800cbd0 <__sfputs_r>
 800cc82:	3001      	adds	r0, #1
 800cc84:	d100      	bne.n	800cc88 <_vfiprintf_r+0x94>
 800cc86:	e0af      	b.n	800cde8 <_vfiprintf_r+0x1f4>
 800cc88:	6963      	ldr	r3, [r4, #20]
 800cc8a:	9a05      	ldr	r2, [sp, #20]
 800cc8c:	189b      	adds	r3, r3, r2
 800cc8e:	6163      	str	r3, [r4, #20]
 800cc90:	7833      	ldrb	r3, [r6, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d100      	bne.n	800cc98 <_vfiprintf_r+0xa4>
 800cc96:	e0a7      	b.n	800cde8 <_vfiprintf_r+0x1f4>
 800cc98:	2201      	movs	r2, #1
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	4252      	negs	r2, r2
 800cc9e:	6062      	str	r2, [r4, #4]
 800cca0:	a904      	add	r1, sp, #16
 800cca2:	3254      	adds	r2, #84	; 0x54
 800cca4:	1852      	adds	r2, r2, r1
 800cca6:	1c75      	adds	r5, r6, #1
 800cca8:	6023      	str	r3, [r4, #0]
 800ccaa:	60e3      	str	r3, [r4, #12]
 800ccac:	60a3      	str	r3, [r4, #8]
 800ccae:	7013      	strb	r3, [r2, #0]
 800ccb0:	65a3      	str	r3, [r4, #88]	; 0x58
 800ccb2:	4b59      	ldr	r3, [pc, #356]	; (800ce18 <_vfiprintf_r+0x224>)
 800ccb4:	2205      	movs	r2, #5
 800ccb6:	0018      	movs	r0, r3
 800ccb8:	7829      	ldrb	r1, [r5, #0]
 800ccba:	9305      	str	r3, [sp, #20]
 800ccbc:	f7fc fddb 	bl	8009876 <memchr>
 800ccc0:	1c6e      	adds	r6, r5, #1
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d11f      	bne.n	800cd06 <_vfiprintf_r+0x112>
 800ccc6:	6822      	ldr	r2, [r4, #0]
 800ccc8:	06d3      	lsls	r3, r2, #27
 800ccca:	d504      	bpl.n	800ccd6 <_vfiprintf_r+0xe2>
 800cccc:	2353      	movs	r3, #83	; 0x53
 800ccce:	a904      	add	r1, sp, #16
 800ccd0:	185b      	adds	r3, r3, r1
 800ccd2:	2120      	movs	r1, #32
 800ccd4:	7019      	strb	r1, [r3, #0]
 800ccd6:	0713      	lsls	r3, r2, #28
 800ccd8:	d504      	bpl.n	800cce4 <_vfiprintf_r+0xf0>
 800ccda:	2353      	movs	r3, #83	; 0x53
 800ccdc:	a904      	add	r1, sp, #16
 800ccde:	185b      	adds	r3, r3, r1
 800cce0:	212b      	movs	r1, #43	; 0x2b
 800cce2:	7019      	strb	r1, [r3, #0]
 800cce4:	782b      	ldrb	r3, [r5, #0]
 800cce6:	2b2a      	cmp	r3, #42	; 0x2a
 800cce8:	d016      	beq.n	800cd18 <_vfiprintf_r+0x124>
 800ccea:	002e      	movs	r6, r5
 800ccec:	2100      	movs	r1, #0
 800ccee:	200a      	movs	r0, #10
 800ccf0:	68e3      	ldr	r3, [r4, #12]
 800ccf2:	7832      	ldrb	r2, [r6, #0]
 800ccf4:	1c75      	adds	r5, r6, #1
 800ccf6:	3a30      	subs	r2, #48	; 0x30
 800ccf8:	2a09      	cmp	r2, #9
 800ccfa:	d94e      	bls.n	800cd9a <_vfiprintf_r+0x1a6>
 800ccfc:	2900      	cmp	r1, #0
 800ccfe:	d111      	bne.n	800cd24 <_vfiprintf_r+0x130>
 800cd00:	e017      	b.n	800cd32 <_vfiprintf_r+0x13e>
 800cd02:	3601      	adds	r6, #1
 800cd04:	e7af      	b.n	800cc66 <_vfiprintf_r+0x72>
 800cd06:	9b05      	ldr	r3, [sp, #20]
 800cd08:	6822      	ldr	r2, [r4, #0]
 800cd0a:	1ac0      	subs	r0, r0, r3
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	4083      	lsls	r3, r0
 800cd10:	4313      	orrs	r3, r2
 800cd12:	0035      	movs	r5, r6
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	e7cc      	b.n	800ccb2 <_vfiprintf_r+0xbe>
 800cd18:	9b07      	ldr	r3, [sp, #28]
 800cd1a:	1d19      	adds	r1, r3, #4
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	9107      	str	r1, [sp, #28]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	db01      	blt.n	800cd28 <_vfiprintf_r+0x134>
 800cd24:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd26:	e004      	b.n	800cd32 <_vfiprintf_r+0x13e>
 800cd28:	425b      	negs	r3, r3
 800cd2a:	60e3      	str	r3, [r4, #12]
 800cd2c:	2302      	movs	r3, #2
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	6023      	str	r3, [r4, #0]
 800cd32:	7833      	ldrb	r3, [r6, #0]
 800cd34:	2b2e      	cmp	r3, #46	; 0x2e
 800cd36:	d10a      	bne.n	800cd4e <_vfiprintf_r+0x15a>
 800cd38:	7873      	ldrb	r3, [r6, #1]
 800cd3a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd3c:	d135      	bne.n	800cdaa <_vfiprintf_r+0x1b6>
 800cd3e:	9b07      	ldr	r3, [sp, #28]
 800cd40:	3602      	adds	r6, #2
 800cd42:	1d1a      	adds	r2, r3, #4
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	9207      	str	r2, [sp, #28]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	db2b      	blt.n	800cda4 <_vfiprintf_r+0x1b0>
 800cd4c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd4e:	4d33      	ldr	r5, [pc, #204]	; (800ce1c <_vfiprintf_r+0x228>)
 800cd50:	2203      	movs	r2, #3
 800cd52:	0028      	movs	r0, r5
 800cd54:	7831      	ldrb	r1, [r6, #0]
 800cd56:	f7fc fd8e 	bl	8009876 <memchr>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	d006      	beq.n	800cd6c <_vfiprintf_r+0x178>
 800cd5e:	2340      	movs	r3, #64	; 0x40
 800cd60:	1b40      	subs	r0, r0, r5
 800cd62:	4083      	lsls	r3, r0
 800cd64:	6822      	ldr	r2, [r4, #0]
 800cd66:	3601      	adds	r6, #1
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	6023      	str	r3, [r4, #0]
 800cd6c:	7831      	ldrb	r1, [r6, #0]
 800cd6e:	2206      	movs	r2, #6
 800cd70:	482b      	ldr	r0, [pc, #172]	; (800ce20 <_vfiprintf_r+0x22c>)
 800cd72:	1c75      	adds	r5, r6, #1
 800cd74:	7621      	strb	r1, [r4, #24]
 800cd76:	f7fc fd7e 	bl	8009876 <memchr>
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	d043      	beq.n	800ce06 <_vfiprintf_r+0x212>
 800cd7e:	4b29      	ldr	r3, [pc, #164]	; (800ce24 <_vfiprintf_r+0x230>)
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d125      	bne.n	800cdd0 <_vfiprintf_r+0x1dc>
 800cd84:	2207      	movs	r2, #7
 800cd86:	9b07      	ldr	r3, [sp, #28]
 800cd88:	3307      	adds	r3, #7
 800cd8a:	4393      	bics	r3, r2
 800cd8c:	3308      	adds	r3, #8
 800cd8e:	9307      	str	r3, [sp, #28]
 800cd90:	6963      	ldr	r3, [r4, #20]
 800cd92:	9a04      	ldr	r2, [sp, #16]
 800cd94:	189b      	adds	r3, r3, r2
 800cd96:	6163      	str	r3, [r4, #20]
 800cd98:	e764      	b.n	800cc64 <_vfiprintf_r+0x70>
 800cd9a:	4343      	muls	r3, r0
 800cd9c:	002e      	movs	r6, r5
 800cd9e:	2101      	movs	r1, #1
 800cda0:	189b      	adds	r3, r3, r2
 800cda2:	e7a6      	b.n	800ccf2 <_vfiprintf_r+0xfe>
 800cda4:	2301      	movs	r3, #1
 800cda6:	425b      	negs	r3, r3
 800cda8:	e7d0      	b.n	800cd4c <_vfiprintf_r+0x158>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	200a      	movs	r0, #10
 800cdae:	001a      	movs	r2, r3
 800cdb0:	3601      	adds	r6, #1
 800cdb2:	6063      	str	r3, [r4, #4]
 800cdb4:	7831      	ldrb	r1, [r6, #0]
 800cdb6:	1c75      	adds	r5, r6, #1
 800cdb8:	3930      	subs	r1, #48	; 0x30
 800cdba:	2909      	cmp	r1, #9
 800cdbc:	d903      	bls.n	800cdc6 <_vfiprintf_r+0x1d2>
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d0c5      	beq.n	800cd4e <_vfiprintf_r+0x15a>
 800cdc2:	9209      	str	r2, [sp, #36]	; 0x24
 800cdc4:	e7c3      	b.n	800cd4e <_vfiprintf_r+0x15a>
 800cdc6:	4342      	muls	r2, r0
 800cdc8:	002e      	movs	r6, r5
 800cdca:	2301      	movs	r3, #1
 800cdcc:	1852      	adds	r2, r2, r1
 800cdce:	e7f1      	b.n	800cdb4 <_vfiprintf_r+0x1c0>
 800cdd0:	aa07      	add	r2, sp, #28
 800cdd2:	9200      	str	r2, [sp, #0]
 800cdd4:	0021      	movs	r1, r4
 800cdd6:	003a      	movs	r2, r7
 800cdd8:	4b13      	ldr	r3, [pc, #76]	; (800ce28 <_vfiprintf_r+0x234>)
 800cdda:	9803      	ldr	r0, [sp, #12]
 800cddc:	f7fb fdb6 	bl	800894c <_printf_float>
 800cde0:	9004      	str	r0, [sp, #16]
 800cde2:	9b04      	ldr	r3, [sp, #16]
 800cde4:	3301      	adds	r3, #1
 800cde6:	d1d3      	bne.n	800cd90 <_vfiprintf_r+0x19c>
 800cde8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdea:	07db      	lsls	r3, r3, #31
 800cdec:	d405      	bmi.n	800cdfa <_vfiprintf_r+0x206>
 800cdee:	89bb      	ldrh	r3, [r7, #12]
 800cdf0:	059b      	lsls	r3, r3, #22
 800cdf2:	d402      	bmi.n	800cdfa <_vfiprintf_r+0x206>
 800cdf4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cdf6:	f7fc fd3d 	bl	8009874 <__retarget_lock_release_recursive>
 800cdfa:	89bb      	ldrh	r3, [r7, #12]
 800cdfc:	065b      	lsls	r3, r3, #25
 800cdfe:	d500      	bpl.n	800ce02 <_vfiprintf_r+0x20e>
 800ce00:	e71d      	b.n	800cc3e <_vfiprintf_r+0x4a>
 800ce02:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ce04:	e71d      	b.n	800cc42 <_vfiprintf_r+0x4e>
 800ce06:	aa07      	add	r2, sp, #28
 800ce08:	9200      	str	r2, [sp, #0]
 800ce0a:	0021      	movs	r1, r4
 800ce0c:	003a      	movs	r2, r7
 800ce0e:	4b06      	ldr	r3, [pc, #24]	; (800ce28 <_vfiprintf_r+0x234>)
 800ce10:	9803      	ldr	r0, [sp, #12]
 800ce12:	f7fc f861 	bl	8008ed8 <_printf_i>
 800ce16:	e7e3      	b.n	800cde0 <_vfiprintf_r+0x1ec>
 800ce18:	0800d569 	.word	0x0800d569
 800ce1c:	0800d56f 	.word	0x0800d56f
 800ce20:	0800d573 	.word	0x0800d573
 800ce24:	0800894d 	.word	0x0800894d
 800ce28:	0800cbd1 	.word	0x0800cbd1

0800ce2c <__swbuf_r>:
 800ce2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce2e:	0006      	movs	r6, r0
 800ce30:	000d      	movs	r5, r1
 800ce32:	0014      	movs	r4, r2
 800ce34:	2800      	cmp	r0, #0
 800ce36:	d004      	beq.n	800ce42 <__swbuf_r+0x16>
 800ce38:	6a03      	ldr	r3, [r0, #32]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d101      	bne.n	800ce42 <__swbuf_r+0x16>
 800ce3e:	f7fc fbf3 	bl	8009628 <__sinit>
 800ce42:	69a3      	ldr	r3, [r4, #24]
 800ce44:	60a3      	str	r3, [r4, #8]
 800ce46:	89a3      	ldrh	r3, [r4, #12]
 800ce48:	071b      	lsls	r3, r3, #28
 800ce4a:	d528      	bpl.n	800ce9e <__swbuf_r+0x72>
 800ce4c:	6923      	ldr	r3, [r4, #16]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d025      	beq.n	800ce9e <__swbuf_r+0x72>
 800ce52:	6923      	ldr	r3, [r4, #16]
 800ce54:	6820      	ldr	r0, [r4, #0]
 800ce56:	b2ef      	uxtb	r7, r5
 800ce58:	1ac0      	subs	r0, r0, r3
 800ce5a:	6963      	ldr	r3, [r4, #20]
 800ce5c:	b2ed      	uxtb	r5, r5
 800ce5e:	4283      	cmp	r3, r0
 800ce60:	dc05      	bgt.n	800ce6e <__swbuf_r+0x42>
 800ce62:	0021      	movs	r1, r4
 800ce64:	0030      	movs	r0, r6
 800ce66:	f7ff fa17 	bl	800c298 <_fflush_r>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d11d      	bne.n	800ceaa <__swbuf_r+0x7e>
 800ce6e:	68a3      	ldr	r3, [r4, #8]
 800ce70:	3001      	adds	r0, #1
 800ce72:	3b01      	subs	r3, #1
 800ce74:	60a3      	str	r3, [r4, #8]
 800ce76:	6823      	ldr	r3, [r4, #0]
 800ce78:	1c5a      	adds	r2, r3, #1
 800ce7a:	6022      	str	r2, [r4, #0]
 800ce7c:	701f      	strb	r7, [r3, #0]
 800ce7e:	6963      	ldr	r3, [r4, #20]
 800ce80:	4283      	cmp	r3, r0
 800ce82:	d004      	beq.n	800ce8e <__swbuf_r+0x62>
 800ce84:	89a3      	ldrh	r3, [r4, #12]
 800ce86:	07db      	lsls	r3, r3, #31
 800ce88:	d507      	bpl.n	800ce9a <__swbuf_r+0x6e>
 800ce8a:	2d0a      	cmp	r5, #10
 800ce8c:	d105      	bne.n	800ce9a <__swbuf_r+0x6e>
 800ce8e:	0021      	movs	r1, r4
 800ce90:	0030      	movs	r0, r6
 800ce92:	f7ff fa01 	bl	800c298 <_fflush_r>
 800ce96:	2800      	cmp	r0, #0
 800ce98:	d107      	bne.n	800ceaa <__swbuf_r+0x7e>
 800ce9a:	0028      	movs	r0, r5
 800ce9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce9e:	0021      	movs	r1, r4
 800cea0:	0030      	movs	r0, r6
 800cea2:	f000 f805 	bl	800ceb0 <__swsetup_r>
 800cea6:	2800      	cmp	r0, #0
 800cea8:	d0d3      	beq.n	800ce52 <__swbuf_r+0x26>
 800ceaa:	2501      	movs	r5, #1
 800ceac:	426d      	negs	r5, r5
 800ceae:	e7f4      	b.n	800ce9a <__swbuf_r+0x6e>

0800ceb0 <__swsetup_r>:
 800ceb0:	4b30      	ldr	r3, [pc, #192]	; (800cf74 <__swsetup_r+0xc4>)
 800ceb2:	b570      	push	{r4, r5, r6, lr}
 800ceb4:	0005      	movs	r5, r0
 800ceb6:	6818      	ldr	r0, [r3, #0]
 800ceb8:	000c      	movs	r4, r1
 800ceba:	2800      	cmp	r0, #0
 800cebc:	d004      	beq.n	800cec8 <__swsetup_r+0x18>
 800cebe:	6a03      	ldr	r3, [r0, #32]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d101      	bne.n	800cec8 <__swsetup_r+0x18>
 800cec4:	f7fc fbb0 	bl	8009628 <__sinit>
 800cec8:	230c      	movs	r3, #12
 800ceca:	5ee2      	ldrsh	r2, [r4, r3]
 800cecc:	b293      	uxth	r3, r2
 800cece:	0711      	lsls	r1, r2, #28
 800ced0:	d423      	bmi.n	800cf1a <__swsetup_r+0x6a>
 800ced2:	06d9      	lsls	r1, r3, #27
 800ced4:	d407      	bmi.n	800cee6 <__swsetup_r+0x36>
 800ced6:	2309      	movs	r3, #9
 800ced8:	2001      	movs	r0, #1
 800ceda:	602b      	str	r3, [r5, #0]
 800cedc:	3337      	adds	r3, #55	; 0x37
 800cede:	4313      	orrs	r3, r2
 800cee0:	81a3      	strh	r3, [r4, #12]
 800cee2:	4240      	negs	r0, r0
 800cee4:	bd70      	pop	{r4, r5, r6, pc}
 800cee6:	075b      	lsls	r3, r3, #29
 800cee8:	d513      	bpl.n	800cf12 <__swsetup_r+0x62>
 800ceea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ceec:	2900      	cmp	r1, #0
 800ceee:	d008      	beq.n	800cf02 <__swsetup_r+0x52>
 800cef0:	0023      	movs	r3, r4
 800cef2:	3344      	adds	r3, #68	; 0x44
 800cef4:	4299      	cmp	r1, r3
 800cef6:	d002      	beq.n	800cefe <__swsetup_r+0x4e>
 800cef8:	0028      	movs	r0, r5
 800cefa:	f7fd fb69 	bl	800a5d0 <_free_r>
 800cefe:	2300      	movs	r3, #0
 800cf00:	6363      	str	r3, [r4, #52]	; 0x34
 800cf02:	2224      	movs	r2, #36	; 0x24
 800cf04:	89a3      	ldrh	r3, [r4, #12]
 800cf06:	4393      	bics	r3, r2
 800cf08:	81a3      	strh	r3, [r4, #12]
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	6063      	str	r3, [r4, #4]
 800cf0e:	6923      	ldr	r3, [r4, #16]
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	2308      	movs	r3, #8
 800cf14:	89a2      	ldrh	r2, [r4, #12]
 800cf16:	4313      	orrs	r3, r2
 800cf18:	81a3      	strh	r3, [r4, #12]
 800cf1a:	6923      	ldr	r3, [r4, #16]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10b      	bne.n	800cf38 <__swsetup_r+0x88>
 800cf20:	21a0      	movs	r1, #160	; 0xa0
 800cf22:	2280      	movs	r2, #128	; 0x80
 800cf24:	89a3      	ldrh	r3, [r4, #12]
 800cf26:	0089      	lsls	r1, r1, #2
 800cf28:	0092      	lsls	r2, r2, #2
 800cf2a:	400b      	ands	r3, r1
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d003      	beq.n	800cf38 <__swsetup_r+0x88>
 800cf30:	0021      	movs	r1, r4
 800cf32:	0028      	movs	r0, r5
 800cf34:	f000 f892 	bl	800d05c <__smakebuf_r>
 800cf38:	220c      	movs	r2, #12
 800cf3a:	5ea3      	ldrsh	r3, [r4, r2]
 800cf3c:	2001      	movs	r0, #1
 800cf3e:	001a      	movs	r2, r3
 800cf40:	b299      	uxth	r1, r3
 800cf42:	4002      	ands	r2, r0
 800cf44:	4203      	tst	r3, r0
 800cf46:	d00f      	beq.n	800cf68 <__swsetup_r+0xb8>
 800cf48:	2200      	movs	r2, #0
 800cf4a:	60a2      	str	r2, [r4, #8]
 800cf4c:	6962      	ldr	r2, [r4, #20]
 800cf4e:	4252      	negs	r2, r2
 800cf50:	61a2      	str	r2, [r4, #24]
 800cf52:	2000      	movs	r0, #0
 800cf54:	6922      	ldr	r2, [r4, #16]
 800cf56:	4282      	cmp	r2, r0
 800cf58:	d1c4      	bne.n	800cee4 <__swsetup_r+0x34>
 800cf5a:	0609      	lsls	r1, r1, #24
 800cf5c:	d5c2      	bpl.n	800cee4 <__swsetup_r+0x34>
 800cf5e:	2240      	movs	r2, #64	; 0x40
 800cf60:	4313      	orrs	r3, r2
 800cf62:	81a3      	strh	r3, [r4, #12]
 800cf64:	3801      	subs	r0, #1
 800cf66:	e7bd      	b.n	800cee4 <__swsetup_r+0x34>
 800cf68:	0788      	lsls	r0, r1, #30
 800cf6a:	d400      	bmi.n	800cf6e <__swsetup_r+0xbe>
 800cf6c:	6962      	ldr	r2, [r4, #20]
 800cf6e:	60a2      	str	r2, [r4, #8]
 800cf70:	e7ef      	b.n	800cf52 <__swsetup_r+0xa2>
 800cf72:	46c0      	nop			; (mov r8, r8)
 800cf74:	20000064 	.word	0x20000064

0800cf78 <_raise_r>:
 800cf78:	b570      	push	{r4, r5, r6, lr}
 800cf7a:	0004      	movs	r4, r0
 800cf7c:	000d      	movs	r5, r1
 800cf7e:	291f      	cmp	r1, #31
 800cf80:	d904      	bls.n	800cf8c <_raise_r+0x14>
 800cf82:	2316      	movs	r3, #22
 800cf84:	6003      	str	r3, [r0, #0]
 800cf86:	2001      	movs	r0, #1
 800cf88:	4240      	negs	r0, r0
 800cf8a:	bd70      	pop	{r4, r5, r6, pc}
 800cf8c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d004      	beq.n	800cf9c <_raise_r+0x24>
 800cf92:	008a      	lsls	r2, r1, #2
 800cf94:	189b      	adds	r3, r3, r2
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	2a00      	cmp	r2, #0
 800cf9a:	d108      	bne.n	800cfae <_raise_r+0x36>
 800cf9c:	0020      	movs	r0, r4
 800cf9e:	f000 f831 	bl	800d004 <_getpid_r>
 800cfa2:	002a      	movs	r2, r5
 800cfa4:	0001      	movs	r1, r0
 800cfa6:	0020      	movs	r0, r4
 800cfa8:	f000 f81a 	bl	800cfe0 <_kill_r>
 800cfac:	e7ed      	b.n	800cf8a <_raise_r+0x12>
 800cfae:	2000      	movs	r0, #0
 800cfb0:	2a01      	cmp	r2, #1
 800cfb2:	d0ea      	beq.n	800cf8a <_raise_r+0x12>
 800cfb4:	1c51      	adds	r1, r2, #1
 800cfb6:	d103      	bne.n	800cfc0 <_raise_r+0x48>
 800cfb8:	2316      	movs	r3, #22
 800cfba:	3001      	adds	r0, #1
 800cfbc:	6023      	str	r3, [r4, #0]
 800cfbe:	e7e4      	b.n	800cf8a <_raise_r+0x12>
 800cfc0:	2400      	movs	r4, #0
 800cfc2:	0028      	movs	r0, r5
 800cfc4:	601c      	str	r4, [r3, #0]
 800cfc6:	4790      	blx	r2
 800cfc8:	0020      	movs	r0, r4
 800cfca:	e7de      	b.n	800cf8a <_raise_r+0x12>

0800cfcc <raise>:
 800cfcc:	b510      	push	{r4, lr}
 800cfce:	4b03      	ldr	r3, [pc, #12]	; (800cfdc <raise+0x10>)
 800cfd0:	0001      	movs	r1, r0
 800cfd2:	6818      	ldr	r0, [r3, #0]
 800cfd4:	f7ff ffd0 	bl	800cf78 <_raise_r>
 800cfd8:	bd10      	pop	{r4, pc}
 800cfda:	46c0      	nop			; (mov r8, r8)
 800cfdc:	20000064 	.word	0x20000064

0800cfe0 <_kill_r>:
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	b570      	push	{r4, r5, r6, lr}
 800cfe4:	4d06      	ldr	r5, [pc, #24]	; (800d000 <_kill_r+0x20>)
 800cfe6:	0004      	movs	r4, r0
 800cfe8:	0008      	movs	r0, r1
 800cfea:	0011      	movs	r1, r2
 800cfec:	602b      	str	r3, [r5, #0]
 800cfee:	f7f6 fc33 	bl	8003858 <_kill>
 800cff2:	1c43      	adds	r3, r0, #1
 800cff4:	d103      	bne.n	800cffe <_kill_r+0x1e>
 800cff6:	682b      	ldr	r3, [r5, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d000      	beq.n	800cffe <_kill_r+0x1e>
 800cffc:	6023      	str	r3, [r4, #0]
 800cffe:	bd70      	pop	{r4, r5, r6, pc}
 800d000:	20000964 	.word	0x20000964

0800d004 <_getpid_r>:
 800d004:	b510      	push	{r4, lr}
 800d006:	f7f6 fc21 	bl	800384c <_getpid>
 800d00a:	bd10      	pop	{r4, pc}

0800d00c <__swhatbuf_r>:
 800d00c:	b570      	push	{r4, r5, r6, lr}
 800d00e:	000e      	movs	r6, r1
 800d010:	001d      	movs	r5, r3
 800d012:	230e      	movs	r3, #14
 800d014:	5ec9      	ldrsh	r1, [r1, r3]
 800d016:	0014      	movs	r4, r2
 800d018:	b096      	sub	sp, #88	; 0x58
 800d01a:	2900      	cmp	r1, #0
 800d01c:	da0c      	bge.n	800d038 <__swhatbuf_r+0x2c>
 800d01e:	89b2      	ldrh	r2, [r6, #12]
 800d020:	2380      	movs	r3, #128	; 0x80
 800d022:	0011      	movs	r1, r2
 800d024:	4019      	ands	r1, r3
 800d026:	421a      	tst	r2, r3
 800d028:	d013      	beq.n	800d052 <__swhatbuf_r+0x46>
 800d02a:	2100      	movs	r1, #0
 800d02c:	3b40      	subs	r3, #64	; 0x40
 800d02e:	2000      	movs	r0, #0
 800d030:	6029      	str	r1, [r5, #0]
 800d032:	6023      	str	r3, [r4, #0]
 800d034:	b016      	add	sp, #88	; 0x58
 800d036:	bd70      	pop	{r4, r5, r6, pc}
 800d038:	466a      	mov	r2, sp
 800d03a:	f000 f84d 	bl	800d0d8 <_fstat_r>
 800d03e:	2800      	cmp	r0, #0
 800d040:	dbed      	blt.n	800d01e <__swhatbuf_r+0x12>
 800d042:	23f0      	movs	r3, #240	; 0xf0
 800d044:	9901      	ldr	r1, [sp, #4]
 800d046:	021b      	lsls	r3, r3, #8
 800d048:	4019      	ands	r1, r3
 800d04a:	4b03      	ldr	r3, [pc, #12]	; (800d058 <__swhatbuf_r+0x4c>)
 800d04c:	18c9      	adds	r1, r1, r3
 800d04e:	424b      	negs	r3, r1
 800d050:	4159      	adcs	r1, r3
 800d052:	2380      	movs	r3, #128	; 0x80
 800d054:	00db      	lsls	r3, r3, #3
 800d056:	e7ea      	b.n	800d02e <__swhatbuf_r+0x22>
 800d058:	ffffe000 	.word	0xffffe000

0800d05c <__smakebuf_r>:
 800d05c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d05e:	2602      	movs	r6, #2
 800d060:	898b      	ldrh	r3, [r1, #12]
 800d062:	0005      	movs	r5, r0
 800d064:	000c      	movs	r4, r1
 800d066:	4233      	tst	r3, r6
 800d068:	d006      	beq.n	800d078 <__smakebuf_r+0x1c>
 800d06a:	0023      	movs	r3, r4
 800d06c:	3347      	adds	r3, #71	; 0x47
 800d06e:	6023      	str	r3, [r4, #0]
 800d070:	6123      	str	r3, [r4, #16]
 800d072:	2301      	movs	r3, #1
 800d074:	6163      	str	r3, [r4, #20]
 800d076:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d078:	466a      	mov	r2, sp
 800d07a:	ab01      	add	r3, sp, #4
 800d07c:	f7ff ffc6 	bl	800d00c <__swhatbuf_r>
 800d080:	9900      	ldr	r1, [sp, #0]
 800d082:	0007      	movs	r7, r0
 800d084:	0028      	movs	r0, r5
 800d086:	f7fd fb19 	bl	800a6bc <_malloc_r>
 800d08a:	2800      	cmp	r0, #0
 800d08c:	d108      	bne.n	800d0a0 <__smakebuf_r+0x44>
 800d08e:	220c      	movs	r2, #12
 800d090:	5ea3      	ldrsh	r3, [r4, r2]
 800d092:	059a      	lsls	r2, r3, #22
 800d094:	d4ef      	bmi.n	800d076 <__smakebuf_r+0x1a>
 800d096:	2203      	movs	r2, #3
 800d098:	4393      	bics	r3, r2
 800d09a:	431e      	orrs	r6, r3
 800d09c:	81a6      	strh	r6, [r4, #12]
 800d09e:	e7e4      	b.n	800d06a <__smakebuf_r+0xe>
 800d0a0:	2380      	movs	r3, #128	; 0x80
 800d0a2:	89a2      	ldrh	r2, [r4, #12]
 800d0a4:	6020      	str	r0, [r4, #0]
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	81a3      	strh	r3, [r4, #12]
 800d0aa:	9b00      	ldr	r3, [sp, #0]
 800d0ac:	6120      	str	r0, [r4, #16]
 800d0ae:	6163      	str	r3, [r4, #20]
 800d0b0:	9b01      	ldr	r3, [sp, #4]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d00c      	beq.n	800d0d0 <__smakebuf_r+0x74>
 800d0b6:	0028      	movs	r0, r5
 800d0b8:	230e      	movs	r3, #14
 800d0ba:	5ee1      	ldrsh	r1, [r4, r3]
 800d0bc:	f000 f81e 	bl	800d0fc <_isatty_r>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d005      	beq.n	800d0d0 <__smakebuf_r+0x74>
 800d0c4:	2303      	movs	r3, #3
 800d0c6:	89a2      	ldrh	r2, [r4, #12]
 800d0c8:	439a      	bics	r2, r3
 800d0ca:	3b02      	subs	r3, #2
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	81a3      	strh	r3, [r4, #12]
 800d0d0:	89a3      	ldrh	r3, [r4, #12]
 800d0d2:	433b      	orrs	r3, r7
 800d0d4:	81a3      	strh	r3, [r4, #12]
 800d0d6:	e7ce      	b.n	800d076 <__smakebuf_r+0x1a>

0800d0d8 <_fstat_r>:
 800d0d8:	2300      	movs	r3, #0
 800d0da:	b570      	push	{r4, r5, r6, lr}
 800d0dc:	4d06      	ldr	r5, [pc, #24]	; (800d0f8 <_fstat_r+0x20>)
 800d0de:	0004      	movs	r4, r0
 800d0e0:	0008      	movs	r0, r1
 800d0e2:	0011      	movs	r1, r2
 800d0e4:	602b      	str	r3, [r5, #0]
 800d0e6:	f7f6 fc16 	bl	8003916 <_fstat>
 800d0ea:	1c43      	adds	r3, r0, #1
 800d0ec:	d103      	bne.n	800d0f6 <_fstat_r+0x1e>
 800d0ee:	682b      	ldr	r3, [r5, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d000      	beq.n	800d0f6 <_fstat_r+0x1e>
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	bd70      	pop	{r4, r5, r6, pc}
 800d0f8:	20000964 	.word	0x20000964

0800d0fc <_isatty_r>:
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	b570      	push	{r4, r5, r6, lr}
 800d100:	4d06      	ldr	r5, [pc, #24]	; (800d11c <_isatty_r+0x20>)
 800d102:	0004      	movs	r4, r0
 800d104:	0008      	movs	r0, r1
 800d106:	602b      	str	r3, [r5, #0]
 800d108:	f7f6 fc13 	bl	8003932 <_isatty>
 800d10c:	1c43      	adds	r3, r0, #1
 800d10e:	d103      	bne.n	800d118 <_isatty_r+0x1c>
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d000      	beq.n	800d118 <_isatty_r+0x1c>
 800d116:	6023      	str	r3, [r4, #0]
 800d118:	bd70      	pop	{r4, r5, r6, pc}
 800d11a:	46c0      	nop			; (mov r8, r8)
 800d11c:	20000964 	.word	0x20000964

0800d120 <_init>:
 800d120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d122:	46c0      	nop			; (mov r8, r8)
 800d124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d126:	bc08      	pop	{r3}
 800d128:	469e      	mov	lr, r3
 800d12a:	4770      	bx	lr

0800d12c <_fini>:
 800d12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d12e:	46c0      	nop			; (mov r8, r8)
 800d130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d132:	bc08      	pop	{r3}
 800d134:	469e      	mov	lr, r3
 800d136:	4770      	bx	lr
