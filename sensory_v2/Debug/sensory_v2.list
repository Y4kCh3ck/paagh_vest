
sensory_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007074  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08007134  08007134  00017134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007314  08007314  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08007314  08007314  00017314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800731c  0800731c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800731c  0800731c  0001731c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007320  08007320  00017320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08007324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000068  0800738c  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  0800738c  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ed4  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039dd  00000000  00000000  00035fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  00039988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f49  00000000  00000000  0003ad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000168ca  00000000  00000000  0003bc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b3f6  00000000  00000000  0005254b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081555  00000000  00000000  0006d941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e38  00000000  00000000  000eee98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f3cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800711c 	.word	0x0800711c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800711c 	.word	0x0800711c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 fd70 	bl	8000dd4 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 fd6b 	bl	8000dd4 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__aeabi_fdiv>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	464f      	mov	r7, r9
 800046c:	4646      	mov	r6, r8
 800046e:	46d6      	mov	lr, sl
 8000470:	0245      	lsls	r5, r0, #9
 8000472:	b5c0      	push	{r6, r7, lr}
 8000474:	0047      	lsls	r7, r0, #1
 8000476:	1c0c      	adds	r4, r1, #0
 8000478:	0a6d      	lsrs	r5, r5, #9
 800047a:	0e3f      	lsrs	r7, r7, #24
 800047c:	0fc6      	lsrs	r6, r0, #31
 800047e:	2f00      	cmp	r7, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_fdiv+0x1c>
 8000482:	e06f      	b.n	8000564 <__aeabi_fdiv+0xfc>
 8000484:	2fff      	cmp	r7, #255	; 0xff
 8000486:	d100      	bne.n	800048a <__aeabi_fdiv+0x22>
 8000488:	e074      	b.n	8000574 <__aeabi_fdiv+0x10c>
 800048a:	2300      	movs	r3, #0
 800048c:	2280      	movs	r2, #128	; 0x80
 800048e:	4699      	mov	r9, r3
 8000490:	469a      	mov	sl, r3
 8000492:	00ed      	lsls	r5, r5, #3
 8000494:	04d2      	lsls	r2, r2, #19
 8000496:	4315      	orrs	r5, r2
 8000498:	3f7f      	subs	r7, #127	; 0x7f
 800049a:	0263      	lsls	r3, r4, #9
 800049c:	0a5b      	lsrs	r3, r3, #9
 800049e:	4698      	mov	r8, r3
 80004a0:	0063      	lsls	r3, r4, #1
 80004a2:	0e1b      	lsrs	r3, r3, #24
 80004a4:	0fe4      	lsrs	r4, r4, #31
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d04d      	beq.n	8000546 <__aeabi_fdiv+0xde>
 80004aa:	2bff      	cmp	r3, #255	; 0xff
 80004ac:	d045      	beq.n	800053a <__aeabi_fdiv+0xd2>
 80004ae:	4642      	mov	r2, r8
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	00d2      	lsls	r2, r2, #3
 80004b4:	04c9      	lsls	r1, r1, #19
 80004b6:	4311      	orrs	r1, r2
 80004b8:	4688      	mov	r8, r1
 80004ba:	2200      	movs	r2, #0
 80004bc:	3b7f      	subs	r3, #127	; 0x7f
 80004be:	0031      	movs	r1, r6
 80004c0:	1aff      	subs	r7, r7, r3
 80004c2:	464b      	mov	r3, r9
 80004c4:	4061      	eors	r1, r4
 80004c6:	b2c9      	uxtb	r1, r1
 80004c8:	2b0f      	cmp	r3, #15
 80004ca:	d900      	bls.n	80004ce <__aeabi_fdiv+0x66>
 80004cc:	e0b8      	b.n	8000640 <__aeabi_fdiv+0x1d8>
 80004ce:	4870      	ldr	r0, [pc, #448]	; (8000690 <__aeabi_fdiv+0x228>)
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	58c3      	ldr	r3, [r0, r3]
 80004d4:	469f      	mov	pc, r3
 80004d6:	2300      	movs	r3, #0
 80004d8:	4698      	mov	r8, r3
 80004da:	0026      	movs	r6, r4
 80004dc:	4645      	mov	r5, r8
 80004de:	4692      	mov	sl, r2
 80004e0:	4653      	mov	r3, sl
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	d100      	bne.n	80004e8 <__aeabi_fdiv+0x80>
 80004e6:	e08d      	b.n	8000604 <__aeabi_fdiv+0x19c>
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d100      	bne.n	80004ee <__aeabi_fdiv+0x86>
 80004ec:	e0a1      	b.n	8000632 <__aeabi_fdiv+0x1ca>
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d018      	beq.n	8000524 <__aeabi_fdiv+0xbc>
 80004f2:	003b      	movs	r3, r7
 80004f4:	337f      	adds	r3, #127	; 0x7f
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	dd6d      	ble.n	80005d6 <__aeabi_fdiv+0x16e>
 80004fa:	076a      	lsls	r2, r5, #29
 80004fc:	d004      	beq.n	8000508 <__aeabi_fdiv+0xa0>
 80004fe:	220f      	movs	r2, #15
 8000500:	402a      	ands	r2, r5
 8000502:	2a04      	cmp	r2, #4
 8000504:	d000      	beq.n	8000508 <__aeabi_fdiv+0xa0>
 8000506:	3504      	adds	r5, #4
 8000508:	012a      	lsls	r2, r5, #4
 800050a:	d503      	bpl.n	8000514 <__aeabi_fdiv+0xac>
 800050c:	4b61      	ldr	r3, [pc, #388]	; (8000694 <__aeabi_fdiv+0x22c>)
 800050e:	401d      	ands	r5, r3
 8000510:	003b      	movs	r3, r7
 8000512:	3380      	adds	r3, #128	; 0x80
 8000514:	2bfe      	cmp	r3, #254	; 0xfe
 8000516:	dd00      	ble.n	800051a <__aeabi_fdiv+0xb2>
 8000518:	e074      	b.n	8000604 <__aeabi_fdiv+0x19c>
 800051a:	01aa      	lsls	r2, r5, #6
 800051c:	0a52      	lsrs	r2, r2, #9
 800051e:	b2d8      	uxtb	r0, r3
 8000520:	e002      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000522:	000e      	movs	r6, r1
 8000524:	2000      	movs	r0, #0
 8000526:	2200      	movs	r2, #0
 8000528:	05c0      	lsls	r0, r0, #23
 800052a:	07f6      	lsls	r6, r6, #31
 800052c:	4310      	orrs	r0, r2
 800052e:	4330      	orrs	r0, r6
 8000530:	bce0      	pop	{r5, r6, r7}
 8000532:	46ba      	mov	sl, r7
 8000534:	46b1      	mov	r9, r6
 8000536:	46a8      	mov	r8, r5
 8000538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053a:	4643      	mov	r3, r8
 800053c:	2b00      	cmp	r3, #0
 800053e:	d13f      	bne.n	80005c0 <__aeabi_fdiv+0x158>
 8000540:	2202      	movs	r2, #2
 8000542:	3fff      	subs	r7, #255	; 0xff
 8000544:	e003      	b.n	800054e <__aeabi_fdiv+0xe6>
 8000546:	4643      	mov	r3, r8
 8000548:	2b00      	cmp	r3, #0
 800054a:	d12d      	bne.n	80005a8 <__aeabi_fdiv+0x140>
 800054c:	2201      	movs	r2, #1
 800054e:	0031      	movs	r1, r6
 8000550:	464b      	mov	r3, r9
 8000552:	4061      	eors	r1, r4
 8000554:	b2c9      	uxtb	r1, r1
 8000556:	4313      	orrs	r3, r2
 8000558:	2b0f      	cmp	r3, #15
 800055a:	d838      	bhi.n	80005ce <__aeabi_fdiv+0x166>
 800055c:	484e      	ldr	r0, [pc, #312]	; (8000698 <__aeabi_fdiv+0x230>)
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	58c3      	ldr	r3, [r0, r3]
 8000562:	469f      	mov	pc, r3
 8000564:	2d00      	cmp	r5, #0
 8000566:	d113      	bne.n	8000590 <__aeabi_fdiv+0x128>
 8000568:	2304      	movs	r3, #4
 800056a:	4699      	mov	r9, r3
 800056c:	3b03      	subs	r3, #3
 800056e:	2700      	movs	r7, #0
 8000570:	469a      	mov	sl, r3
 8000572:	e792      	b.n	800049a <__aeabi_fdiv+0x32>
 8000574:	2d00      	cmp	r5, #0
 8000576:	d105      	bne.n	8000584 <__aeabi_fdiv+0x11c>
 8000578:	2308      	movs	r3, #8
 800057a:	4699      	mov	r9, r3
 800057c:	3b06      	subs	r3, #6
 800057e:	27ff      	movs	r7, #255	; 0xff
 8000580:	469a      	mov	sl, r3
 8000582:	e78a      	b.n	800049a <__aeabi_fdiv+0x32>
 8000584:	230c      	movs	r3, #12
 8000586:	4699      	mov	r9, r3
 8000588:	3b09      	subs	r3, #9
 800058a:	27ff      	movs	r7, #255	; 0xff
 800058c:	469a      	mov	sl, r3
 800058e:	e784      	b.n	800049a <__aeabi_fdiv+0x32>
 8000590:	0028      	movs	r0, r5
 8000592:	f000 fc01 	bl	8000d98 <__clzsi2>
 8000596:	2776      	movs	r7, #118	; 0x76
 8000598:	1f43      	subs	r3, r0, #5
 800059a:	409d      	lsls	r5, r3
 800059c:	2300      	movs	r3, #0
 800059e:	427f      	negs	r7, r7
 80005a0:	4699      	mov	r9, r3
 80005a2:	469a      	mov	sl, r3
 80005a4:	1a3f      	subs	r7, r7, r0
 80005a6:	e778      	b.n	800049a <__aeabi_fdiv+0x32>
 80005a8:	4640      	mov	r0, r8
 80005aa:	f000 fbf5 	bl	8000d98 <__clzsi2>
 80005ae:	4642      	mov	r2, r8
 80005b0:	1f43      	subs	r3, r0, #5
 80005b2:	409a      	lsls	r2, r3
 80005b4:	2376      	movs	r3, #118	; 0x76
 80005b6:	425b      	negs	r3, r3
 80005b8:	4690      	mov	r8, r2
 80005ba:	1a1b      	subs	r3, r3, r0
 80005bc:	2200      	movs	r2, #0
 80005be:	e77e      	b.n	80004be <__aeabi_fdiv+0x56>
 80005c0:	2303      	movs	r3, #3
 80005c2:	464a      	mov	r2, r9
 80005c4:	431a      	orrs	r2, r3
 80005c6:	4691      	mov	r9, r2
 80005c8:	33fc      	adds	r3, #252	; 0xfc
 80005ca:	2203      	movs	r2, #3
 80005cc:	e777      	b.n	80004be <__aeabi_fdiv+0x56>
 80005ce:	000e      	movs	r6, r1
 80005d0:	20ff      	movs	r0, #255	; 0xff
 80005d2:	2200      	movs	r2, #0
 80005d4:	e7a8      	b.n	8000528 <__aeabi_fdiv+0xc0>
 80005d6:	2201      	movs	r2, #1
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	2b1b      	cmp	r3, #27
 80005dc:	dca2      	bgt.n	8000524 <__aeabi_fdiv+0xbc>
 80005de:	379e      	adds	r7, #158	; 0x9e
 80005e0:	002a      	movs	r2, r5
 80005e2:	40bd      	lsls	r5, r7
 80005e4:	40da      	lsrs	r2, r3
 80005e6:	1e6b      	subs	r3, r5, #1
 80005e8:	419d      	sbcs	r5, r3
 80005ea:	4315      	orrs	r5, r2
 80005ec:	076a      	lsls	r2, r5, #29
 80005ee:	d004      	beq.n	80005fa <__aeabi_fdiv+0x192>
 80005f0:	220f      	movs	r2, #15
 80005f2:	402a      	ands	r2, r5
 80005f4:	2a04      	cmp	r2, #4
 80005f6:	d000      	beq.n	80005fa <__aeabi_fdiv+0x192>
 80005f8:	3504      	adds	r5, #4
 80005fa:	016a      	lsls	r2, r5, #5
 80005fc:	d544      	bpl.n	8000688 <__aeabi_fdiv+0x220>
 80005fe:	2001      	movs	r0, #1
 8000600:	2200      	movs	r2, #0
 8000602:	e791      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000604:	20ff      	movs	r0, #255	; 0xff
 8000606:	2200      	movs	r2, #0
 8000608:	e78e      	b.n	8000528 <__aeabi_fdiv+0xc0>
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	2600      	movs	r6, #0
 800060e:	20ff      	movs	r0, #255	; 0xff
 8000610:	03d2      	lsls	r2, r2, #15
 8000612:	e789      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000614:	2300      	movs	r3, #0
 8000616:	4698      	mov	r8, r3
 8000618:	2280      	movs	r2, #128	; 0x80
 800061a:	03d2      	lsls	r2, r2, #15
 800061c:	4215      	tst	r5, r2
 800061e:	d008      	beq.n	8000632 <__aeabi_fdiv+0x1ca>
 8000620:	4643      	mov	r3, r8
 8000622:	4213      	tst	r3, r2
 8000624:	d105      	bne.n	8000632 <__aeabi_fdiv+0x1ca>
 8000626:	431a      	orrs	r2, r3
 8000628:	0252      	lsls	r2, r2, #9
 800062a:	0026      	movs	r6, r4
 800062c:	20ff      	movs	r0, #255	; 0xff
 800062e:	0a52      	lsrs	r2, r2, #9
 8000630:	e77a      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	03d2      	lsls	r2, r2, #15
 8000636:	432a      	orrs	r2, r5
 8000638:	0252      	lsls	r2, r2, #9
 800063a:	20ff      	movs	r0, #255	; 0xff
 800063c:	0a52      	lsrs	r2, r2, #9
 800063e:	e773      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000640:	4642      	mov	r2, r8
 8000642:	016b      	lsls	r3, r5, #5
 8000644:	0155      	lsls	r5, r2, #5
 8000646:	42ab      	cmp	r3, r5
 8000648:	d21a      	bcs.n	8000680 <__aeabi_fdiv+0x218>
 800064a:	201b      	movs	r0, #27
 800064c:	2200      	movs	r2, #0
 800064e:	3f01      	subs	r7, #1
 8000650:	2601      	movs	r6, #1
 8000652:	001c      	movs	r4, r3
 8000654:	0052      	lsls	r2, r2, #1
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	2c00      	cmp	r4, #0
 800065a:	db01      	blt.n	8000660 <__aeabi_fdiv+0x1f8>
 800065c:	429d      	cmp	r5, r3
 800065e:	d801      	bhi.n	8000664 <__aeabi_fdiv+0x1fc>
 8000660:	1b5b      	subs	r3, r3, r5
 8000662:	4332      	orrs	r2, r6
 8000664:	3801      	subs	r0, #1
 8000666:	2800      	cmp	r0, #0
 8000668:	d1f3      	bne.n	8000652 <__aeabi_fdiv+0x1ea>
 800066a:	1e58      	subs	r0, r3, #1
 800066c:	4183      	sbcs	r3, r0
 800066e:	4313      	orrs	r3, r2
 8000670:	001d      	movs	r5, r3
 8000672:	003b      	movs	r3, r7
 8000674:	337f      	adds	r3, #127	; 0x7f
 8000676:	000e      	movs	r6, r1
 8000678:	2b00      	cmp	r3, #0
 800067a:	dd00      	ble.n	800067e <__aeabi_fdiv+0x216>
 800067c:	e73d      	b.n	80004fa <__aeabi_fdiv+0x92>
 800067e:	e7aa      	b.n	80005d6 <__aeabi_fdiv+0x16e>
 8000680:	201a      	movs	r0, #26
 8000682:	2201      	movs	r2, #1
 8000684:	1b5b      	subs	r3, r3, r5
 8000686:	e7e3      	b.n	8000650 <__aeabi_fdiv+0x1e8>
 8000688:	01aa      	lsls	r2, r5, #6
 800068a:	2000      	movs	r0, #0
 800068c:	0a52      	lsrs	r2, r2, #9
 800068e:	e74b      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000690:	080071f4 	.word	0x080071f4
 8000694:	f7ffffff 	.word	0xf7ffffff
 8000698:	08007234 	.word	0x08007234

0800069c <__aeabi_fmul>:
 800069c:	0243      	lsls	r3, r0, #9
 800069e:	0a5b      	lsrs	r3, r3, #9
 80006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a2:	464f      	mov	r7, r9
 80006a4:	4646      	mov	r6, r8
 80006a6:	4699      	mov	r9, r3
 80006a8:	46d6      	mov	lr, sl
 80006aa:	0fc3      	lsrs	r3, r0, #31
 80006ac:	0045      	lsls	r5, r0, #1
 80006ae:	4698      	mov	r8, r3
 80006b0:	b5c0      	push	{r6, r7, lr}
 80006b2:	464b      	mov	r3, r9
 80006b4:	1c0f      	adds	r7, r1, #0
 80006b6:	0e2d      	lsrs	r5, r5, #24
 80006b8:	d100      	bne.n	80006bc <__aeabi_fmul+0x20>
 80006ba:	e0cb      	b.n	8000854 <__aeabi_fmul+0x1b8>
 80006bc:	2dff      	cmp	r5, #255	; 0xff
 80006be:	d100      	bne.n	80006c2 <__aeabi_fmul+0x26>
 80006c0:	e0cf      	b.n	8000862 <__aeabi_fmul+0x1c6>
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	04d2      	lsls	r2, r2, #19
 80006c8:	431a      	orrs	r2, r3
 80006ca:	2300      	movs	r3, #0
 80006cc:	4691      	mov	r9, r2
 80006ce:	2600      	movs	r6, #0
 80006d0:	469a      	mov	sl, r3
 80006d2:	3d7f      	subs	r5, #127	; 0x7f
 80006d4:	027c      	lsls	r4, r7, #9
 80006d6:	007b      	lsls	r3, r7, #1
 80006d8:	0a64      	lsrs	r4, r4, #9
 80006da:	0e1b      	lsrs	r3, r3, #24
 80006dc:	0fff      	lsrs	r7, r7, #31
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fmul+0x48>
 80006e2:	e0a9      	b.n	8000838 <__aeabi_fmul+0x19c>
 80006e4:	2bff      	cmp	r3, #255	; 0xff
 80006e6:	d011      	beq.n	800070c <__aeabi_fmul+0x70>
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	00e4      	lsls	r4, r4, #3
 80006ec:	04d2      	lsls	r2, r2, #19
 80006ee:	4314      	orrs	r4, r2
 80006f0:	4642      	mov	r2, r8
 80006f2:	3b7f      	subs	r3, #127	; 0x7f
 80006f4:	195b      	adds	r3, r3, r5
 80006f6:	407a      	eors	r2, r7
 80006f8:	2000      	movs	r0, #0
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	1c5d      	adds	r5, r3, #1
 80006fe:	2e0a      	cmp	r6, #10
 8000700:	dd13      	ble.n	800072a <__aeabi_fmul+0x8e>
 8000702:	003a      	movs	r2, r7
 8000704:	2e0b      	cmp	r6, #11
 8000706:	d047      	beq.n	8000798 <__aeabi_fmul+0xfc>
 8000708:	4647      	mov	r7, r8
 800070a:	e03f      	b.n	800078c <__aeabi_fmul+0xf0>
 800070c:	002b      	movs	r3, r5
 800070e:	33ff      	adds	r3, #255	; 0xff
 8000710:	2c00      	cmp	r4, #0
 8000712:	d11e      	bne.n	8000752 <__aeabi_fmul+0xb6>
 8000714:	2202      	movs	r2, #2
 8000716:	4316      	orrs	r6, r2
 8000718:	4642      	mov	r2, r8
 800071a:	3501      	adds	r5, #1
 800071c:	407a      	eors	r2, r7
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	35ff      	adds	r5, #255	; 0xff
 8000722:	2e0a      	cmp	r6, #10
 8000724:	dd00      	ble.n	8000728 <__aeabi_fmul+0x8c>
 8000726:	e0e4      	b.n	80008f2 <__aeabi_fmul+0x256>
 8000728:	2002      	movs	r0, #2
 800072a:	2e02      	cmp	r6, #2
 800072c:	dc1c      	bgt.n	8000768 <__aeabi_fmul+0xcc>
 800072e:	3e01      	subs	r6, #1
 8000730:	2e01      	cmp	r6, #1
 8000732:	d842      	bhi.n	80007ba <__aeabi_fmul+0x11e>
 8000734:	2802      	cmp	r0, #2
 8000736:	d03d      	beq.n	80007b4 <__aeabi_fmul+0x118>
 8000738:	2801      	cmp	r0, #1
 800073a:	d166      	bne.n	800080a <__aeabi_fmul+0x16e>
 800073c:	2000      	movs	r0, #0
 800073e:	2100      	movs	r1, #0
 8000740:	05c0      	lsls	r0, r0, #23
 8000742:	4308      	orrs	r0, r1
 8000744:	07d2      	lsls	r2, r2, #31
 8000746:	4310      	orrs	r0, r2
 8000748:	bce0      	pop	{r5, r6, r7}
 800074a:	46ba      	mov	sl, r7
 800074c:	46b1      	mov	r9, r6
 800074e:	46a8      	mov	r8, r5
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	2203      	movs	r2, #3
 8000754:	4316      	orrs	r6, r2
 8000756:	4642      	mov	r2, r8
 8000758:	3501      	adds	r5, #1
 800075a:	407a      	eors	r2, r7
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	35ff      	adds	r5, #255	; 0xff
 8000760:	2e0a      	cmp	r6, #10
 8000762:	dd00      	ble.n	8000766 <__aeabi_fmul+0xca>
 8000764:	e0e4      	b.n	8000930 <__aeabi_fmul+0x294>
 8000766:	2003      	movs	r0, #3
 8000768:	2101      	movs	r1, #1
 800076a:	40b1      	lsls	r1, r6
 800076c:	26a6      	movs	r6, #166	; 0xa6
 800076e:	00f6      	lsls	r6, r6, #3
 8000770:	4231      	tst	r1, r6
 8000772:	d10a      	bne.n	800078a <__aeabi_fmul+0xee>
 8000774:	2690      	movs	r6, #144	; 0x90
 8000776:	00b6      	lsls	r6, r6, #2
 8000778:	4231      	tst	r1, r6
 800077a:	d116      	bne.n	80007aa <__aeabi_fmul+0x10e>
 800077c:	3eb9      	subs	r6, #185	; 0xb9
 800077e:	3eff      	subs	r6, #255	; 0xff
 8000780:	420e      	tst	r6, r1
 8000782:	d01a      	beq.n	80007ba <__aeabi_fmul+0x11e>
 8000784:	46a1      	mov	r9, r4
 8000786:	4682      	mov	sl, r0
 8000788:	e000      	b.n	800078c <__aeabi_fmul+0xf0>
 800078a:	0017      	movs	r7, r2
 800078c:	4653      	mov	r3, sl
 800078e:	003a      	movs	r2, r7
 8000790:	2b02      	cmp	r3, #2
 8000792:	d00f      	beq.n	80007b4 <__aeabi_fmul+0x118>
 8000794:	464c      	mov	r4, r9
 8000796:	4650      	mov	r0, sl
 8000798:	2803      	cmp	r0, #3
 800079a:	d1cd      	bne.n	8000738 <__aeabi_fmul+0x9c>
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	03c9      	lsls	r1, r1, #15
 80007a0:	4321      	orrs	r1, r4
 80007a2:	0249      	lsls	r1, r1, #9
 80007a4:	20ff      	movs	r0, #255	; 0xff
 80007a6:	0a49      	lsrs	r1, r1, #9
 80007a8:	e7ca      	b.n	8000740 <__aeabi_fmul+0xa4>
 80007aa:	2180      	movs	r1, #128	; 0x80
 80007ac:	2200      	movs	r2, #0
 80007ae:	20ff      	movs	r0, #255	; 0xff
 80007b0:	03c9      	lsls	r1, r1, #15
 80007b2:	e7c5      	b.n	8000740 <__aeabi_fmul+0xa4>
 80007b4:	20ff      	movs	r0, #255	; 0xff
 80007b6:	2100      	movs	r1, #0
 80007b8:	e7c2      	b.n	8000740 <__aeabi_fmul+0xa4>
 80007ba:	0c20      	lsrs	r0, r4, #16
 80007bc:	4649      	mov	r1, r9
 80007be:	0424      	lsls	r4, r4, #16
 80007c0:	0c24      	lsrs	r4, r4, #16
 80007c2:	0027      	movs	r7, r4
 80007c4:	0c0e      	lsrs	r6, r1, #16
 80007c6:	0409      	lsls	r1, r1, #16
 80007c8:	0c09      	lsrs	r1, r1, #16
 80007ca:	4374      	muls	r4, r6
 80007cc:	434f      	muls	r7, r1
 80007ce:	4346      	muls	r6, r0
 80007d0:	4348      	muls	r0, r1
 80007d2:	0c39      	lsrs	r1, r7, #16
 80007d4:	1900      	adds	r0, r0, r4
 80007d6:	1809      	adds	r1, r1, r0
 80007d8:	428c      	cmp	r4, r1
 80007da:	d903      	bls.n	80007e4 <__aeabi_fmul+0x148>
 80007dc:	2080      	movs	r0, #128	; 0x80
 80007de:	0240      	lsls	r0, r0, #9
 80007e0:	4684      	mov	ip, r0
 80007e2:	4466      	add	r6, ip
 80007e4:	043f      	lsls	r7, r7, #16
 80007e6:	0408      	lsls	r0, r1, #16
 80007e8:	0c3f      	lsrs	r7, r7, #16
 80007ea:	19c0      	adds	r0, r0, r7
 80007ec:	0184      	lsls	r4, r0, #6
 80007ee:	1e67      	subs	r7, r4, #1
 80007f0:	41bc      	sbcs	r4, r7
 80007f2:	0c09      	lsrs	r1, r1, #16
 80007f4:	0e80      	lsrs	r0, r0, #26
 80007f6:	1989      	adds	r1, r1, r6
 80007f8:	4304      	orrs	r4, r0
 80007fa:	0189      	lsls	r1, r1, #6
 80007fc:	430c      	orrs	r4, r1
 80007fe:	0109      	lsls	r1, r1, #4
 8000800:	d571      	bpl.n	80008e6 <__aeabi_fmul+0x24a>
 8000802:	2301      	movs	r3, #1
 8000804:	0861      	lsrs	r1, r4, #1
 8000806:	401c      	ands	r4, r3
 8000808:	430c      	orrs	r4, r1
 800080a:	002b      	movs	r3, r5
 800080c:	337f      	adds	r3, #127	; 0x7f
 800080e:	2b00      	cmp	r3, #0
 8000810:	dd51      	ble.n	80008b6 <__aeabi_fmul+0x21a>
 8000812:	0761      	lsls	r1, r4, #29
 8000814:	d004      	beq.n	8000820 <__aeabi_fmul+0x184>
 8000816:	210f      	movs	r1, #15
 8000818:	4021      	ands	r1, r4
 800081a:	2904      	cmp	r1, #4
 800081c:	d000      	beq.n	8000820 <__aeabi_fmul+0x184>
 800081e:	3404      	adds	r4, #4
 8000820:	0121      	lsls	r1, r4, #4
 8000822:	d503      	bpl.n	800082c <__aeabi_fmul+0x190>
 8000824:	4b43      	ldr	r3, [pc, #268]	; (8000934 <__aeabi_fmul+0x298>)
 8000826:	401c      	ands	r4, r3
 8000828:	002b      	movs	r3, r5
 800082a:	3380      	adds	r3, #128	; 0x80
 800082c:	2bfe      	cmp	r3, #254	; 0xfe
 800082e:	dcc1      	bgt.n	80007b4 <__aeabi_fmul+0x118>
 8000830:	01a1      	lsls	r1, r4, #6
 8000832:	0a49      	lsrs	r1, r1, #9
 8000834:	b2d8      	uxtb	r0, r3
 8000836:	e783      	b.n	8000740 <__aeabi_fmul+0xa4>
 8000838:	2c00      	cmp	r4, #0
 800083a:	d12c      	bne.n	8000896 <__aeabi_fmul+0x1fa>
 800083c:	2301      	movs	r3, #1
 800083e:	4642      	mov	r2, r8
 8000840:	431e      	orrs	r6, r3
 8000842:	002b      	movs	r3, r5
 8000844:	407a      	eors	r2, r7
 8000846:	2001      	movs	r0, #1
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	1c5d      	adds	r5, r3, #1
 800084c:	2e0a      	cmp	r6, #10
 800084e:	dd00      	ble.n	8000852 <__aeabi_fmul+0x1b6>
 8000850:	e757      	b.n	8000702 <__aeabi_fmul+0x66>
 8000852:	e76a      	b.n	800072a <__aeabi_fmul+0x8e>
 8000854:	2b00      	cmp	r3, #0
 8000856:	d110      	bne.n	800087a <__aeabi_fmul+0x1de>
 8000858:	2301      	movs	r3, #1
 800085a:	2604      	movs	r6, #4
 800085c:	2500      	movs	r5, #0
 800085e:	469a      	mov	sl, r3
 8000860:	e738      	b.n	80006d4 <__aeabi_fmul+0x38>
 8000862:	2b00      	cmp	r3, #0
 8000864:	d104      	bne.n	8000870 <__aeabi_fmul+0x1d4>
 8000866:	2302      	movs	r3, #2
 8000868:	2608      	movs	r6, #8
 800086a:	25ff      	movs	r5, #255	; 0xff
 800086c:	469a      	mov	sl, r3
 800086e:	e731      	b.n	80006d4 <__aeabi_fmul+0x38>
 8000870:	2303      	movs	r3, #3
 8000872:	260c      	movs	r6, #12
 8000874:	25ff      	movs	r5, #255	; 0xff
 8000876:	469a      	mov	sl, r3
 8000878:	e72c      	b.n	80006d4 <__aeabi_fmul+0x38>
 800087a:	4648      	mov	r0, r9
 800087c:	f000 fa8c 	bl	8000d98 <__clzsi2>
 8000880:	464a      	mov	r2, r9
 8000882:	1f43      	subs	r3, r0, #5
 8000884:	2576      	movs	r5, #118	; 0x76
 8000886:	409a      	lsls	r2, r3
 8000888:	2300      	movs	r3, #0
 800088a:	426d      	negs	r5, r5
 800088c:	4691      	mov	r9, r2
 800088e:	2600      	movs	r6, #0
 8000890:	469a      	mov	sl, r3
 8000892:	1a2d      	subs	r5, r5, r0
 8000894:	e71e      	b.n	80006d4 <__aeabi_fmul+0x38>
 8000896:	0020      	movs	r0, r4
 8000898:	f000 fa7e 	bl	8000d98 <__clzsi2>
 800089c:	4642      	mov	r2, r8
 800089e:	1f43      	subs	r3, r0, #5
 80008a0:	409c      	lsls	r4, r3
 80008a2:	1a2b      	subs	r3, r5, r0
 80008a4:	3b76      	subs	r3, #118	; 0x76
 80008a6:	407a      	eors	r2, r7
 80008a8:	2000      	movs	r0, #0
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	1c5d      	adds	r5, r3, #1
 80008ae:	2e0a      	cmp	r6, #10
 80008b0:	dd00      	ble.n	80008b4 <__aeabi_fmul+0x218>
 80008b2:	e726      	b.n	8000702 <__aeabi_fmul+0x66>
 80008b4:	e739      	b.n	800072a <__aeabi_fmul+0x8e>
 80008b6:	2101      	movs	r1, #1
 80008b8:	1acb      	subs	r3, r1, r3
 80008ba:	2b1b      	cmp	r3, #27
 80008bc:	dd00      	ble.n	80008c0 <__aeabi_fmul+0x224>
 80008be:	e73d      	b.n	800073c <__aeabi_fmul+0xa0>
 80008c0:	359e      	adds	r5, #158	; 0x9e
 80008c2:	0021      	movs	r1, r4
 80008c4:	40ac      	lsls	r4, r5
 80008c6:	40d9      	lsrs	r1, r3
 80008c8:	1e63      	subs	r3, r4, #1
 80008ca:	419c      	sbcs	r4, r3
 80008cc:	4321      	orrs	r1, r4
 80008ce:	074b      	lsls	r3, r1, #29
 80008d0:	d004      	beq.n	80008dc <__aeabi_fmul+0x240>
 80008d2:	230f      	movs	r3, #15
 80008d4:	400b      	ands	r3, r1
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d000      	beq.n	80008dc <__aeabi_fmul+0x240>
 80008da:	3104      	adds	r1, #4
 80008dc:	014b      	lsls	r3, r1, #5
 80008de:	d504      	bpl.n	80008ea <__aeabi_fmul+0x24e>
 80008e0:	2001      	movs	r0, #1
 80008e2:	2100      	movs	r1, #0
 80008e4:	e72c      	b.n	8000740 <__aeabi_fmul+0xa4>
 80008e6:	001d      	movs	r5, r3
 80008e8:	e78f      	b.n	800080a <__aeabi_fmul+0x16e>
 80008ea:	0189      	lsls	r1, r1, #6
 80008ec:	2000      	movs	r0, #0
 80008ee:	0a49      	lsrs	r1, r1, #9
 80008f0:	e726      	b.n	8000740 <__aeabi_fmul+0xa4>
 80008f2:	2302      	movs	r3, #2
 80008f4:	2e0f      	cmp	r6, #15
 80008f6:	d10c      	bne.n	8000912 <__aeabi_fmul+0x276>
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	464b      	mov	r3, r9
 80008fc:	03c9      	lsls	r1, r1, #15
 80008fe:	420b      	tst	r3, r1
 8000900:	d00d      	beq.n	800091e <__aeabi_fmul+0x282>
 8000902:	420c      	tst	r4, r1
 8000904:	d10b      	bne.n	800091e <__aeabi_fmul+0x282>
 8000906:	4321      	orrs	r1, r4
 8000908:	0249      	lsls	r1, r1, #9
 800090a:	003a      	movs	r2, r7
 800090c:	20ff      	movs	r0, #255	; 0xff
 800090e:	0a49      	lsrs	r1, r1, #9
 8000910:	e716      	b.n	8000740 <__aeabi_fmul+0xa4>
 8000912:	2e0b      	cmp	r6, #11
 8000914:	d000      	beq.n	8000918 <__aeabi_fmul+0x27c>
 8000916:	e6f7      	b.n	8000708 <__aeabi_fmul+0x6c>
 8000918:	46a1      	mov	r9, r4
 800091a:	469a      	mov	sl, r3
 800091c:	e736      	b.n	800078c <__aeabi_fmul+0xf0>
 800091e:	2180      	movs	r1, #128	; 0x80
 8000920:	464b      	mov	r3, r9
 8000922:	03c9      	lsls	r1, r1, #15
 8000924:	4319      	orrs	r1, r3
 8000926:	0249      	lsls	r1, r1, #9
 8000928:	4642      	mov	r2, r8
 800092a:	20ff      	movs	r0, #255	; 0xff
 800092c:	0a49      	lsrs	r1, r1, #9
 800092e:	e707      	b.n	8000740 <__aeabi_fmul+0xa4>
 8000930:	2303      	movs	r3, #3
 8000932:	e7df      	b.n	80008f4 <__aeabi_fmul+0x258>
 8000934:	f7ffffff 	.word	0xf7ffffff

08000938 <__aeabi_fsub>:
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	46c6      	mov	lr, r8
 800093c:	0243      	lsls	r3, r0, #9
 800093e:	0a5b      	lsrs	r3, r3, #9
 8000940:	0045      	lsls	r5, r0, #1
 8000942:	00da      	lsls	r2, r3, #3
 8000944:	0fc4      	lsrs	r4, r0, #31
 8000946:	0248      	lsls	r0, r1, #9
 8000948:	004f      	lsls	r7, r1, #1
 800094a:	4694      	mov	ip, r2
 800094c:	0a42      	lsrs	r2, r0, #9
 800094e:	001e      	movs	r6, r3
 8000950:	4690      	mov	r8, r2
 8000952:	b500      	push	{lr}
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0e3f      	lsrs	r7, r7, #24
 8000958:	0fc9      	lsrs	r1, r1, #31
 800095a:	0980      	lsrs	r0, r0, #6
 800095c:	2fff      	cmp	r7, #255	; 0xff
 800095e:	d059      	beq.n	8000a14 <__aeabi_fsub+0xdc>
 8000960:	2201      	movs	r2, #1
 8000962:	4051      	eors	r1, r2
 8000964:	428c      	cmp	r4, r1
 8000966:	d039      	beq.n	80009dc <__aeabi_fsub+0xa4>
 8000968:	1bea      	subs	r2, r5, r7
 800096a:	2a00      	cmp	r2, #0
 800096c:	dd58      	ble.n	8000a20 <__aeabi_fsub+0xe8>
 800096e:	2f00      	cmp	r7, #0
 8000970:	d068      	beq.n	8000a44 <__aeabi_fsub+0x10c>
 8000972:	2dff      	cmp	r5, #255	; 0xff
 8000974:	d100      	bne.n	8000978 <__aeabi_fsub+0x40>
 8000976:	e0d1      	b.n	8000b1c <__aeabi_fsub+0x1e4>
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	04db      	lsls	r3, r3, #19
 800097c:	4318      	orrs	r0, r3
 800097e:	2a1b      	cmp	r2, #27
 8000980:	dc00      	bgt.n	8000984 <__aeabi_fsub+0x4c>
 8000982:	e0e3      	b.n	8000b4c <__aeabi_fsub+0x214>
 8000984:	2301      	movs	r3, #1
 8000986:	4662      	mov	r2, ip
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	015a      	lsls	r2, r3, #5
 800098c:	d400      	bmi.n	8000990 <__aeabi_fsub+0x58>
 800098e:	e0ac      	b.n	8000aea <__aeabi_fsub+0x1b2>
 8000990:	019b      	lsls	r3, r3, #6
 8000992:	099e      	lsrs	r6, r3, #6
 8000994:	0030      	movs	r0, r6
 8000996:	f000 f9ff 	bl	8000d98 <__clzsi2>
 800099a:	0033      	movs	r3, r6
 800099c:	3805      	subs	r0, #5
 800099e:	4083      	lsls	r3, r0
 80009a0:	4285      	cmp	r5, r0
 80009a2:	dc00      	bgt.n	80009a6 <__aeabi_fsub+0x6e>
 80009a4:	e0c6      	b.n	8000b34 <__aeabi_fsub+0x1fc>
 80009a6:	4ab2      	ldr	r2, [pc, #712]	; (8000c70 <__aeabi_fsub+0x338>)
 80009a8:	1a2d      	subs	r5, r5, r0
 80009aa:	4013      	ands	r3, r2
 80009ac:	075a      	lsls	r2, r3, #29
 80009ae:	d004      	beq.n	80009ba <__aeabi_fsub+0x82>
 80009b0:	220f      	movs	r2, #15
 80009b2:	401a      	ands	r2, r3
 80009b4:	2a04      	cmp	r2, #4
 80009b6:	d000      	beq.n	80009ba <__aeabi_fsub+0x82>
 80009b8:	3304      	adds	r3, #4
 80009ba:	015a      	lsls	r2, r3, #5
 80009bc:	d400      	bmi.n	80009c0 <__aeabi_fsub+0x88>
 80009be:	e097      	b.n	8000af0 <__aeabi_fsub+0x1b8>
 80009c0:	1c6a      	adds	r2, r5, #1
 80009c2:	2dfe      	cmp	r5, #254	; 0xfe
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fsub+0x90>
 80009c6:	e084      	b.n	8000ad2 <__aeabi_fsub+0x19a>
 80009c8:	019b      	lsls	r3, r3, #6
 80009ca:	0a5e      	lsrs	r6, r3, #9
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	05d0      	lsls	r0, r2, #23
 80009d0:	4330      	orrs	r0, r6
 80009d2:	07e4      	lsls	r4, r4, #31
 80009d4:	4320      	orrs	r0, r4
 80009d6:	bc80      	pop	{r7}
 80009d8:	46b8      	mov	r8, r7
 80009da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009dc:	1bea      	subs	r2, r5, r7
 80009de:	2a00      	cmp	r2, #0
 80009e0:	dd41      	ble.n	8000a66 <__aeabi_fsub+0x12e>
 80009e2:	2f00      	cmp	r7, #0
 80009e4:	d06b      	beq.n	8000abe <__aeabi_fsub+0x186>
 80009e6:	2dff      	cmp	r5, #255	; 0xff
 80009e8:	d100      	bne.n	80009ec <__aeabi_fsub+0xb4>
 80009ea:	e097      	b.n	8000b1c <__aeabi_fsub+0x1e4>
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	04db      	lsls	r3, r3, #19
 80009f0:	4318      	orrs	r0, r3
 80009f2:	2a1b      	cmp	r2, #27
 80009f4:	dc00      	bgt.n	80009f8 <__aeabi_fsub+0xc0>
 80009f6:	e0cc      	b.n	8000b92 <__aeabi_fsub+0x25a>
 80009f8:	2301      	movs	r3, #1
 80009fa:	4463      	add	r3, ip
 80009fc:	015a      	lsls	r2, r3, #5
 80009fe:	d574      	bpl.n	8000aea <__aeabi_fsub+0x1b2>
 8000a00:	3501      	adds	r5, #1
 8000a02:	2dff      	cmp	r5, #255	; 0xff
 8000a04:	d065      	beq.n	8000ad2 <__aeabi_fsub+0x19a>
 8000a06:	2201      	movs	r2, #1
 8000a08:	499a      	ldr	r1, [pc, #616]	; (8000c74 <__aeabi_fsub+0x33c>)
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	085b      	lsrs	r3, r3, #1
 8000a0e:	400b      	ands	r3, r1
 8000a10:	4313      	orrs	r3, r2
 8000a12:	e7cb      	b.n	80009ac <__aeabi_fsub+0x74>
 8000a14:	2800      	cmp	r0, #0
 8000a16:	d01f      	beq.n	8000a58 <__aeabi_fsub+0x120>
 8000a18:	428c      	cmp	r4, r1
 8000a1a:	d022      	beq.n	8000a62 <__aeabi_fsub+0x12a>
 8000a1c:	002a      	movs	r2, r5
 8000a1e:	3aff      	subs	r2, #255	; 0xff
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	d035      	beq.n	8000a90 <__aeabi_fsub+0x158>
 8000a24:	1b7a      	subs	r2, r7, r5
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_fsub+0xf4>
 8000a2a:	e099      	b.n	8000b60 <__aeabi_fsub+0x228>
 8000a2c:	4663      	mov	r3, ip
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d100      	bne.n	8000a34 <__aeabi_fsub+0xfc>
 8000a32:	e0dd      	b.n	8000bf0 <__aeabi_fsub+0x2b8>
 8000a34:	1e53      	subs	r3, r2, #1
 8000a36:	2a01      	cmp	r2, #1
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x104>
 8000a3a:	e105      	b.n	8000c48 <__aeabi_fsub+0x310>
 8000a3c:	2aff      	cmp	r2, #255	; 0xff
 8000a3e:	d06b      	beq.n	8000b18 <__aeabi_fsub+0x1e0>
 8000a40:	001a      	movs	r2, r3
 8000a42:	e094      	b.n	8000b6e <__aeabi_fsub+0x236>
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d073      	beq.n	8000b30 <__aeabi_fsub+0x1f8>
 8000a48:	1e51      	subs	r1, r2, #1
 8000a4a:	2a01      	cmp	r2, #1
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fsub+0x118>
 8000a4e:	e0df      	b.n	8000c10 <__aeabi_fsub+0x2d8>
 8000a50:	2aff      	cmp	r2, #255	; 0xff
 8000a52:	d063      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000a54:	000a      	movs	r2, r1
 8000a56:	e792      	b.n	800097e <__aeabi_fsub+0x46>
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4051      	eors	r1, r2
 8000a5c:	42a1      	cmp	r1, r4
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_fsub+0x12a>
 8000a60:	e782      	b.n	8000968 <__aeabi_fsub+0x30>
 8000a62:	002a      	movs	r2, r5
 8000a64:	3aff      	subs	r2, #255	; 0xff
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	d036      	beq.n	8000ad8 <__aeabi_fsub+0x1a0>
 8000a6a:	1b7a      	subs	r2, r7, r5
 8000a6c:	2d00      	cmp	r5, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fsub+0x13a>
 8000a70:	e0aa      	b.n	8000bc8 <__aeabi_fsub+0x290>
 8000a72:	2fff      	cmp	r7, #255	; 0xff
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fsub+0x140>
 8000a76:	e0da      	b.n	8000c2e <__aeabi_fsub+0x2f6>
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	4661      	mov	r1, ip
 8000a7c:	04db      	lsls	r3, r3, #19
 8000a7e:	4319      	orrs	r1, r3
 8000a80:	468c      	mov	ip, r1
 8000a82:	2a1b      	cmp	r2, #27
 8000a84:	dc00      	bgt.n	8000a88 <__aeabi_fsub+0x150>
 8000a86:	e0d4      	b.n	8000c32 <__aeabi_fsub+0x2fa>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	003d      	movs	r5, r7
 8000a8c:	181b      	adds	r3, r3, r0
 8000a8e:	e7b5      	b.n	80009fc <__aeabi_fsub+0xc4>
 8000a90:	27fe      	movs	r7, #254	; 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4217      	tst	r7, r2
 8000a96:	d171      	bne.n	8000b7c <__aeabi_fsub+0x244>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_fsub+0x166>
 8000a9c:	e09e      	b.n	8000bdc <__aeabi_fsub+0x2a4>
 8000a9e:	4663      	mov	r3, ip
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fsub+0x16e>
 8000aa4:	e0d5      	b.n	8000c52 <__aeabi_fsub+0x31a>
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2800      	cmp	r0, #0
 8000aaa:	d100      	bne.n	8000aae <__aeabi_fsub+0x176>
 8000aac:	e78f      	b.n	80009ce <__aeabi_fsub+0x96>
 8000aae:	1a1b      	subs	r3, r3, r0
 8000ab0:	015e      	lsls	r6, r3, #5
 8000ab2:	d400      	bmi.n	8000ab6 <__aeabi_fsub+0x17e>
 8000ab4:	e0d6      	b.n	8000c64 <__aeabi_fsub+0x32c>
 8000ab6:	4663      	mov	r3, ip
 8000ab8:	000c      	movs	r4, r1
 8000aba:	1ac3      	subs	r3, r0, r3
 8000abc:	e776      	b.n	80009ac <__aeabi_fsub+0x74>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	d036      	beq.n	8000b30 <__aeabi_fsub+0x1f8>
 8000ac2:	1e51      	subs	r1, r2, #1
 8000ac4:	2a01      	cmp	r2, #1
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fsub+0x192>
 8000ac8:	e09a      	b.n	8000c00 <__aeabi_fsub+0x2c8>
 8000aca:	2aff      	cmp	r2, #255	; 0xff
 8000acc:	d026      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000ace:	000a      	movs	r2, r1
 8000ad0:	e78f      	b.n	80009f2 <__aeabi_fsub+0xba>
 8000ad2:	22ff      	movs	r2, #255	; 0xff
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	e77a      	b.n	80009ce <__aeabi_fsub+0x96>
 8000ad8:	27fe      	movs	r7, #254	; 0xfe
 8000ada:	1c6a      	adds	r2, r5, #1
 8000adc:	4217      	tst	r7, r2
 8000ade:	d062      	beq.n	8000ba6 <__aeabi_fsub+0x26e>
 8000ae0:	2aff      	cmp	r2, #255	; 0xff
 8000ae2:	d0f6      	beq.n	8000ad2 <__aeabi_fsub+0x19a>
 8000ae4:	0015      	movs	r5, r2
 8000ae6:	4460      	add	r0, ip
 8000ae8:	0843      	lsrs	r3, r0, #1
 8000aea:	075a      	lsls	r2, r3, #29
 8000aec:	d000      	beq.n	8000af0 <__aeabi_fsub+0x1b8>
 8000aee:	e75f      	b.n	80009b0 <__aeabi_fsub+0x78>
 8000af0:	08db      	lsrs	r3, r3, #3
 8000af2:	2dff      	cmp	r5, #255	; 0xff
 8000af4:	d012      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000af6:	025b      	lsls	r3, r3, #9
 8000af8:	0a5e      	lsrs	r6, r3, #9
 8000afa:	b2ea      	uxtb	r2, r5
 8000afc:	e767      	b.n	80009ce <__aeabi_fsub+0x96>
 8000afe:	4662      	mov	r2, ip
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	d100      	bne.n	8000b06 <__aeabi_fsub+0x1ce>
 8000b04:	e093      	b.n	8000c2e <__aeabi_fsub+0x2f6>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d008      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	03d2      	lsls	r2, r2, #15
 8000b0e:	4213      	tst	r3, r2
 8000b10:	d004      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000b12:	4640      	mov	r0, r8
 8000b14:	4210      	tst	r0, r2
 8000b16:	d101      	bne.n	8000b1c <__aeabi_fsub+0x1e4>
 8000b18:	000c      	movs	r4, r1
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0d8      	beq.n	8000ad2 <__aeabi_fsub+0x19a>
 8000b20:	2680      	movs	r6, #128	; 0x80
 8000b22:	03f6      	lsls	r6, r6, #15
 8000b24:	431e      	orrs	r6, r3
 8000b26:	0276      	lsls	r6, r6, #9
 8000b28:	22ff      	movs	r2, #255	; 0xff
 8000b2a:	0a76      	lsrs	r6, r6, #9
 8000b2c:	e74f      	b.n	80009ce <__aeabi_fsub+0x96>
 8000b2e:	4643      	mov	r3, r8
 8000b30:	0015      	movs	r5, r2
 8000b32:	e7de      	b.n	8000af2 <__aeabi_fsub+0x1ba>
 8000b34:	2220      	movs	r2, #32
 8000b36:	1b40      	subs	r0, r0, r5
 8000b38:	3001      	adds	r0, #1
 8000b3a:	1a12      	subs	r2, r2, r0
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	4093      	lsls	r3, r2
 8000b40:	40c1      	lsrs	r1, r0
 8000b42:	1e5a      	subs	r2, r3, #1
 8000b44:	4193      	sbcs	r3, r2
 8000b46:	2500      	movs	r5, #0
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	e72f      	b.n	80009ac <__aeabi_fsub+0x74>
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	1a9b      	subs	r3, r3, r2
 8000b50:	0001      	movs	r1, r0
 8000b52:	4098      	lsls	r0, r3
 8000b54:	0003      	movs	r3, r0
 8000b56:	40d1      	lsrs	r1, r2
 8000b58:	1e5a      	subs	r2, r3, #1
 8000b5a:	4193      	sbcs	r3, r2
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	e712      	b.n	8000986 <__aeabi_fsub+0x4e>
 8000b60:	2fff      	cmp	r7, #255	; 0xff
 8000b62:	d0d9      	beq.n	8000b18 <__aeabi_fsub+0x1e0>
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	4664      	mov	r4, ip
 8000b68:	04db      	lsls	r3, r3, #19
 8000b6a:	431c      	orrs	r4, r3
 8000b6c:	46a4      	mov	ip, r4
 8000b6e:	2a1b      	cmp	r2, #27
 8000b70:	dd52      	ble.n	8000c18 <__aeabi_fsub+0x2e0>
 8000b72:	2301      	movs	r3, #1
 8000b74:	000c      	movs	r4, r1
 8000b76:	003d      	movs	r5, r7
 8000b78:	1ac3      	subs	r3, r0, r3
 8000b7a:	e706      	b.n	800098a <__aeabi_fsub+0x52>
 8000b7c:	4663      	mov	r3, ip
 8000b7e:	1a1e      	subs	r6, r3, r0
 8000b80:	0173      	lsls	r3, r6, #5
 8000b82:	d439      	bmi.n	8000bf8 <__aeabi_fsub+0x2c0>
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d000      	beq.n	8000b8a <__aeabi_fsub+0x252>
 8000b88:	e704      	b.n	8000994 <__aeabi_fsub+0x5c>
 8000b8a:	2400      	movs	r4, #0
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2600      	movs	r6, #0
 8000b90:	e71d      	b.n	80009ce <__aeabi_fsub+0x96>
 8000b92:	2320      	movs	r3, #32
 8000b94:	1a9b      	subs	r3, r3, r2
 8000b96:	0001      	movs	r1, r0
 8000b98:	4098      	lsls	r0, r3
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	40d1      	lsrs	r1, r2
 8000b9e:	1e5a      	subs	r2, r3, #1
 8000ba0:	4193      	sbcs	r3, r2
 8000ba2:	430b      	orrs	r3, r1
 8000ba4:	e729      	b.n	80009fa <__aeabi_fsub+0xc2>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d1a9      	bne.n	8000afe <__aeabi_fsub+0x1c6>
 8000baa:	4663      	mov	r3, ip
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d056      	beq.n	8000c5e <__aeabi_fsub+0x326>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fsub+0x280>
 8000bb6:	e70a      	b.n	80009ce <__aeabi_fsub+0x96>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	4463      	add	r3, ip
 8000bbc:	015a      	lsls	r2, r3, #5
 8000bbe:	d594      	bpl.n	8000aea <__aeabi_fsub+0x1b2>
 8000bc0:	4a2b      	ldr	r2, [pc, #172]	; (8000c70 <__aeabi_fsub+0x338>)
 8000bc2:	3501      	adds	r5, #1
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	e790      	b.n	8000aea <__aeabi_fsub+0x1b2>
 8000bc8:	4663      	mov	r3, ip
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0af      	beq.n	8000b2e <__aeabi_fsub+0x1f6>
 8000bce:	1e53      	subs	r3, r2, #1
 8000bd0:	2a01      	cmp	r2, #1
 8000bd2:	d015      	beq.n	8000c00 <__aeabi_fsub+0x2c8>
 8000bd4:	2aff      	cmp	r2, #255	; 0xff
 8000bd6:	d02a      	beq.n	8000c2e <__aeabi_fsub+0x2f6>
 8000bd8:	001a      	movs	r2, r3
 8000bda:	e752      	b.n	8000a82 <__aeabi_fsub+0x14a>
 8000bdc:	4662      	mov	r2, ip
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	d191      	bne.n	8000b06 <__aeabi_fsub+0x1ce>
 8000be2:	2800      	cmp	r0, #0
 8000be4:	d198      	bne.n	8000b18 <__aeabi_fsub+0x1e0>
 8000be6:	2680      	movs	r6, #128	; 0x80
 8000be8:	2400      	movs	r4, #0
 8000bea:	22ff      	movs	r2, #255	; 0xff
 8000bec:	03f6      	lsls	r6, r6, #15
 8000bee:	e6ee      	b.n	80009ce <__aeabi_fsub+0x96>
 8000bf0:	000c      	movs	r4, r1
 8000bf2:	4643      	mov	r3, r8
 8000bf4:	0015      	movs	r5, r2
 8000bf6:	e77c      	b.n	8000af2 <__aeabi_fsub+0x1ba>
 8000bf8:	4663      	mov	r3, ip
 8000bfa:	000c      	movs	r4, r1
 8000bfc:	1ac6      	subs	r6, r0, r3
 8000bfe:	e6c9      	b.n	8000994 <__aeabi_fsub+0x5c>
 8000c00:	0003      	movs	r3, r0
 8000c02:	4463      	add	r3, ip
 8000c04:	2501      	movs	r5, #1
 8000c06:	015a      	lsls	r2, r3, #5
 8000c08:	d400      	bmi.n	8000c0c <__aeabi_fsub+0x2d4>
 8000c0a:	e76e      	b.n	8000aea <__aeabi_fsub+0x1b2>
 8000c0c:	2502      	movs	r5, #2
 8000c0e:	e6fa      	b.n	8000a06 <__aeabi_fsub+0xce>
 8000c10:	4663      	mov	r3, ip
 8000c12:	2501      	movs	r5, #1
 8000c14:	1a1b      	subs	r3, r3, r0
 8000c16:	e6b8      	b.n	800098a <__aeabi_fsub+0x52>
 8000c18:	4664      	mov	r4, ip
 8000c1a:	2320      	movs	r3, #32
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	1a9b      	subs	r3, r3, r2
 8000c20:	4662      	mov	r2, ip
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	1e5a      	subs	r2, r3, #1
 8000c28:	4193      	sbcs	r3, r2
 8000c2a:	4323      	orrs	r3, r4
 8000c2c:	e7a2      	b.n	8000b74 <__aeabi_fsub+0x23c>
 8000c2e:	4643      	mov	r3, r8
 8000c30:	e774      	b.n	8000b1c <__aeabi_fsub+0x1e4>
 8000c32:	4661      	mov	r1, ip
 8000c34:	2320      	movs	r3, #32
 8000c36:	40d1      	lsrs	r1, r2
 8000c38:	1a9b      	subs	r3, r3, r2
 8000c3a:	4662      	mov	r2, ip
 8000c3c:	409a      	lsls	r2, r3
 8000c3e:	0013      	movs	r3, r2
 8000c40:	1e5a      	subs	r2, r3, #1
 8000c42:	4193      	sbcs	r3, r2
 8000c44:	430b      	orrs	r3, r1
 8000c46:	e720      	b.n	8000a8a <__aeabi_fsub+0x152>
 8000c48:	4663      	mov	r3, ip
 8000c4a:	000c      	movs	r4, r1
 8000c4c:	2501      	movs	r5, #1
 8000c4e:	1ac3      	subs	r3, r0, r3
 8000c50:	e69b      	b.n	800098a <__aeabi_fsub+0x52>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d099      	beq.n	8000b8a <__aeabi_fsub+0x252>
 8000c56:	000c      	movs	r4, r1
 8000c58:	4646      	mov	r6, r8
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	e6b7      	b.n	80009ce <__aeabi_fsub+0x96>
 8000c5e:	4646      	mov	r6, r8
 8000c60:	2200      	movs	r2, #0
 8000c62:	e6b4      	b.n	80009ce <__aeabi_fsub+0x96>
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fsub+0x332>
 8000c68:	e73f      	b.n	8000aea <__aeabi_fsub+0x1b2>
 8000c6a:	2400      	movs	r4, #0
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	e6ae      	b.n	80009ce <__aeabi_fsub+0x96>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff

08000c78 <__aeabi_ui2f>:
 8000c78:	b570      	push	{r4, r5, r6, lr}
 8000c7a:	1e04      	subs	r4, r0, #0
 8000c7c:	d00e      	beq.n	8000c9c <__aeabi_ui2f+0x24>
 8000c7e:	f000 f88b 	bl	8000d98 <__clzsi2>
 8000c82:	239e      	movs	r3, #158	; 0x9e
 8000c84:	0001      	movs	r1, r0
 8000c86:	1a1b      	subs	r3, r3, r0
 8000c88:	2b96      	cmp	r3, #150	; 0x96
 8000c8a:	dc0c      	bgt.n	8000ca6 <__aeabi_ui2f+0x2e>
 8000c8c:	2808      	cmp	r0, #8
 8000c8e:	d02c      	beq.n	8000cea <__aeabi_ui2f+0x72>
 8000c90:	3908      	subs	r1, #8
 8000c92:	408c      	lsls	r4, r1
 8000c94:	0264      	lsls	r4, r4, #9
 8000c96:	0a64      	lsrs	r4, r4, #9
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	e001      	b.n	8000ca0 <__aeabi_ui2f+0x28>
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	2400      	movs	r4, #0
 8000ca0:	05c0      	lsls	r0, r0, #23
 8000ca2:	4320      	orrs	r0, r4
 8000ca4:	bd70      	pop	{r4, r5, r6, pc}
 8000ca6:	2b99      	cmp	r3, #153	; 0x99
 8000ca8:	dd0a      	ble.n	8000cc0 <__aeabi_ui2f+0x48>
 8000caa:	0002      	movs	r2, r0
 8000cac:	0020      	movs	r0, r4
 8000cae:	321b      	adds	r2, #27
 8000cb0:	4090      	lsls	r0, r2
 8000cb2:	0002      	movs	r2, r0
 8000cb4:	1e50      	subs	r0, r2, #1
 8000cb6:	4182      	sbcs	r2, r0
 8000cb8:	2005      	movs	r0, #5
 8000cba:	1a40      	subs	r0, r0, r1
 8000cbc:	40c4      	lsrs	r4, r0
 8000cbe:	4314      	orrs	r4, r2
 8000cc0:	2905      	cmp	r1, #5
 8000cc2:	dc16      	bgt.n	8000cf2 <__aeabi_ui2f+0x7a>
 8000cc4:	0022      	movs	r2, r4
 8000cc6:	480f      	ldr	r0, [pc, #60]	; (8000d04 <__aeabi_ui2f+0x8c>)
 8000cc8:	4002      	ands	r2, r0
 8000cca:	0765      	lsls	r5, r4, #29
 8000ccc:	d009      	beq.n	8000ce2 <__aeabi_ui2f+0x6a>
 8000cce:	250f      	movs	r5, #15
 8000cd0:	402c      	ands	r4, r5
 8000cd2:	2c04      	cmp	r4, #4
 8000cd4:	d005      	beq.n	8000ce2 <__aeabi_ui2f+0x6a>
 8000cd6:	3204      	adds	r2, #4
 8000cd8:	0154      	lsls	r4, r2, #5
 8000cda:	d502      	bpl.n	8000ce2 <__aeabi_ui2f+0x6a>
 8000cdc:	239f      	movs	r3, #159	; 0x9f
 8000cde:	4002      	ands	r2, r0
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	0192      	lsls	r2, r2, #6
 8000ce4:	0a54      	lsrs	r4, r2, #9
 8000ce6:	b2d8      	uxtb	r0, r3
 8000ce8:	e7da      	b.n	8000ca0 <__aeabi_ui2f+0x28>
 8000cea:	0264      	lsls	r4, r4, #9
 8000cec:	2096      	movs	r0, #150	; 0x96
 8000cee:	0a64      	lsrs	r4, r4, #9
 8000cf0:	e7d6      	b.n	8000ca0 <__aeabi_ui2f+0x28>
 8000cf2:	1f4a      	subs	r2, r1, #5
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	0022      	movs	r2, r4
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <__aeabi_ui2f+0x8c>)
 8000cfa:	4002      	ands	r2, r0
 8000cfc:	0765      	lsls	r5, r4, #29
 8000cfe:	d0f0      	beq.n	8000ce2 <__aeabi_ui2f+0x6a>
 8000d00:	e7e5      	b.n	8000cce <__aeabi_ui2f+0x56>
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	fbffffff 	.word	0xfbffffff

08000d08 <__aeabi_f2d>:
 8000d08:	b570      	push	{r4, r5, r6, lr}
 8000d0a:	0242      	lsls	r2, r0, #9
 8000d0c:	0043      	lsls	r3, r0, #1
 8000d0e:	0fc4      	lsrs	r4, r0, #31
 8000d10:	20fe      	movs	r0, #254	; 0xfe
 8000d12:	0e1b      	lsrs	r3, r3, #24
 8000d14:	1c59      	adds	r1, r3, #1
 8000d16:	0a55      	lsrs	r5, r2, #9
 8000d18:	4208      	tst	r0, r1
 8000d1a:	d00c      	beq.n	8000d36 <__aeabi_f2d+0x2e>
 8000d1c:	21e0      	movs	r1, #224	; 0xe0
 8000d1e:	0089      	lsls	r1, r1, #2
 8000d20:	468c      	mov	ip, r1
 8000d22:	076d      	lsls	r5, r5, #29
 8000d24:	0b12      	lsrs	r2, r2, #12
 8000d26:	4463      	add	r3, ip
 8000d28:	051b      	lsls	r3, r3, #20
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	07e4      	lsls	r4, r4, #31
 8000d2e:	4323      	orrs	r3, r4
 8000d30:	0028      	movs	r0, r5
 8000d32:	0019      	movs	r1, r3
 8000d34:	bd70      	pop	{r4, r5, r6, pc}
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d114      	bne.n	8000d64 <__aeabi_f2d+0x5c>
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d01b      	beq.n	8000d76 <__aeabi_f2d+0x6e>
 8000d3e:	0028      	movs	r0, r5
 8000d40:	f000 f82a 	bl	8000d98 <__clzsi2>
 8000d44:	280a      	cmp	r0, #10
 8000d46:	dc1c      	bgt.n	8000d82 <__aeabi_f2d+0x7a>
 8000d48:	230b      	movs	r3, #11
 8000d4a:	002a      	movs	r2, r5
 8000d4c:	1a1b      	subs	r3, r3, r0
 8000d4e:	40da      	lsrs	r2, r3
 8000d50:	0003      	movs	r3, r0
 8000d52:	3315      	adds	r3, #21
 8000d54:	409d      	lsls	r5, r3
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <__aeabi_f2d+0x88>)
 8000d58:	0312      	lsls	r2, r2, #12
 8000d5a:	1a1b      	subs	r3, r3, r0
 8000d5c:	055b      	lsls	r3, r3, #21
 8000d5e:	0b12      	lsrs	r2, r2, #12
 8000d60:	0d5b      	lsrs	r3, r3, #21
 8000d62:	e7e1      	b.n	8000d28 <__aeabi_f2d+0x20>
 8000d64:	2d00      	cmp	r5, #0
 8000d66:	d009      	beq.n	8000d7c <__aeabi_f2d+0x74>
 8000d68:	0b13      	lsrs	r3, r2, #12
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	0312      	lsls	r2, r2, #12
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	076d      	lsls	r5, r5, #29
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <__aeabi_f2d+0x8c>)
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_f2d+0x20>
 8000d76:	2300      	movs	r3, #0
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e7d5      	b.n	8000d28 <__aeabi_f2d+0x20>
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <__aeabi_f2d+0x8c>)
 8000d80:	e7d2      	b.n	8000d28 <__aeabi_f2d+0x20>
 8000d82:	0003      	movs	r3, r0
 8000d84:	002a      	movs	r2, r5
 8000d86:	3b0b      	subs	r3, #11
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	e7e3      	b.n	8000d56 <__aeabi_f2d+0x4e>
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	00000389 	.word	0x00000389
 8000d94:	000007ff 	.word	0x000007ff

08000d98 <__clzsi2>:
 8000d98:	211c      	movs	r1, #28
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	041b      	lsls	r3, r3, #16
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d301      	bcc.n	8000da6 <__clzsi2+0xe>
 8000da2:	0c00      	lsrs	r0, r0, #16
 8000da4:	3910      	subs	r1, #16
 8000da6:	0a1b      	lsrs	r3, r3, #8
 8000da8:	4298      	cmp	r0, r3
 8000daa:	d301      	bcc.n	8000db0 <__clzsi2+0x18>
 8000dac:	0a00      	lsrs	r0, r0, #8
 8000dae:	3908      	subs	r1, #8
 8000db0:	091b      	lsrs	r3, r3, #4
 8000db2:	4298      	cmp	r0, r3
 8000db4:	d301      	bcc.n	8000dba <__clzsi2+0x22>
 8000db6:	0900      	lsrs	r0, r0, #4
 8000db8:	3904      	subs	r1, #4
 8000dba:	a202      	add	r2, pc, #8	; (adr r2, 8000dc4 <__clzsi2+0x2c>)
 8000dbc:	5c10      	ldrb	r0, [r2, r0]
 8000dbe:	1840      	adds	r0, r0, r1
 8000dc0:	4770      	bx	lr
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	02020304 	.word	0x02020304
 8000dc8:	01010101 	.word	0x01010101
	...

08000dd4 <__clzdi2>:
 8000dd4:	b510      	push	{r4, lr}
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d103      	bne.n	8000de2 <__clzdi2+0xe>
 8000dda:	f7ff ffdd 	bl	8000d98 <__clzsi2>
 8000dde:	3020      	adds	r0, #32
 8000de0:	e002      	b.n	8000de8 <__clzdi2+0x14>
 8000de2:	0008      	movs	r0, r1
 8000de4:	f7ff ffd8 	bl	8000d98 <__clzsi2>
 8000de8:	bd10      	pop	{r4, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)

08000dec <AHT20_Master_Transmit>:
 */

#include "AHT20.h"

HAL_StatusTypeDef AHT20_Master_Transmit(uint8_t *data, uint16_t size)
{
 8000dec:	b5b0      	push	{r4, r5, r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	000a      	movs	r2, r1
 8000df6:	1cbb      	adds	r3, r7, #2
 8000df8:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDR, data, size, HAL_MAX_DELAY);
 8000dfa:	250f      	movs	r5, #15
 8000dfc:	197c      	adds	r4, r7, r5
 8000dfe:	1cbb      	adds	r3, r7, #2
 8000e00:	8819      	ldrh	r1, [r3, #0]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <AHT20_Master_Transmit+0x38>)
 8000e06:	2301      	movs	r3, #1
 8000e08:	425b      	negs	r3, r3
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	000b      	movs	r3, r1
 8000e0e:	2170      	movs	r1, #112	; 0x70
 8000e10:	f001 fe98 	bl	8002b44 <HAL_I2C_Master_Transmit>
 8000e14:	0003      	movs	r3, r0
 8000e16:	7023      	strb	r3, [r4, #0]

	return status;
 8000e18:	197b      	adds	r3, r7, r5
 8000e1a:	781b      	ldrb	r3, [r3, #0]
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b004      	add	sp, #16
 8000e22:	bdb0      	pop	{r4, r5, r7, pc}
 8000e24:	2000012c 	.word	0x2000012c

08000e28 <AHT20_Master_Receive>:

HAL_StatusTypeDef AHT20_Master_Receive(uint8_t *data, uint16_t size)
{
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	000a      	movs	r2, r1
 8000e32:	1cbb      	adds	r3, r7, #2
 8000e34:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Receive(&hi2c1, AHT20_READ_ADDR, data, size, HAL_MAX_DELAY);
 8000e36:	250f      	movs	r5, #15
 8000e38:	197c      	adds	r4, r7, r5
 8000e3a:	1cbb      	adds	r3, r7, #2
 8000e3c:	8819      	ldrh	r1, [r3, #0]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	4807      	ldr	r0, [pc, #28]	; (8000e60 <AHT20_Master_Receive+0x38>)
 8000e42:	2301      	movs	r3, #1
 8000e44:	425b      	negs	r3, r3
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	000b      	movs	r3, r1
 8000e4a:	2171      	movs	r1, #113	; 0x71
 8000e4c:	f001 ff82 	bl	8002d54 <HAL_I2C_Master_Receive>
 8000e50:	0003      	movs	r3, r0
 8000e52:	7023      	strb	r3, [r4, #0]

	return status;
 8000e54:	197b      	adds	r3, r7, r5
 8000e56:	781b      	ldrb	r3, [r3, #0]
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b004      	add	sp, #16
 8000e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e60:	2000012c 	.word	0x2000012c

08000e64 <AHT20_Init>:

	return read_value;
}

void AHT20_Init()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
	uint8_t init_cmd[] = {0xBE, 0x08, 0x00};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <AHT20_Init+0x70>)
 8000e6e:	8811      	ldrh	r1, [r2, #0]
 8000e70:	8019      	strh	r1, [r3, #0]
 8000e72:	7892      	ldrb	r2, [r2, #2]
 8000e74:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(init_cmd, sizeof(init_cmd)) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2103      	movs	r1, #3
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff ffb6 	bl	8000dec <AHT20_Master_Transmit>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d004      	beq.n	8000e8e <AHT20_Init+0x2a>
	{
		printf("AHT20 initialisation error\n");
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <AHT20_Init+0x74>)
 8000e86:	0018      	movs	r0, r3
 8000e88:	f005 faa8 	bl	80063dc <puts>
		else
		{
			printf("AHT20 not calibrated\n");
		}
	}
}
 8000e8c:	e01d      	b.n	8000eca <AHT20_Init+0x66>
		printf("AHT20 initialised\n");
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <AHT20_Init+0x78>)
 8000e90:	0018      	movs	r0, r3
 8000e92:	f005 faa3 	bl	80063dc <puts>
		uint8_t value = 0x00;
 8000e96:	1cfb      	adds	r3, r7, #3
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8000e9c:	200a      	movs	r0, #10
 8000e9e:	f000 ff55 	bl	8001d4c <HAL_Delay>
		AHT20_Master_Receive(&value, sizeof(value));
 8000ea2:	1cfb      	adds	r3, r7, #3
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff ffbe 	bl	8000e28 <AHT20_Master_Receive>
		if ((value & 0x08) != 0x00) // check calibration bit
 8000eac:	1cfb      	adds	r3, r7, #3
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d004      	beq.n	8000ec2 <AHT20_Init+0x5e>
			printf("AHT20 calibrated\n");
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <AHT20_Init+0x7c>)
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f005 fa8e 	bl	80063dc <puts>
}
 8000ec0:	e003      	b.n	8000eca <AHT20_Init+0x66>
			printf("AHT20 not calibrated\n");
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <AHT20_Init+0x80>)
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f005 fa89 	bl	80063dc <puts>
}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b002      	add	sp, #8
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	08007190 	.word	0x08007190
 8000ed8:	08007134 	.word	0x08007134
 8000edc:	08007150 	.word	0x08007150
 8000ee0:	08007164 	.word	0x08007164
 8000ee4:	08007178 	.word	0x08007178

08000ee8 <AHT20_Read>:

void AHT20_Read(volatile float *Temp, volatile float *Hum)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	uint8_t trig_measure_cmd[] = {0xAC, 0x33, 0x00};
 8000ef2:	2010      	movs	r0, #16
 8000ef4:	183b      	adds	r3, r7, r0
 8000ef6:	4a35      	ldr	r2, [pc, #212]	; (8000fcc <AHT20_Read+0xe4>)
 8000ef8:	8811      	ldrh	r1, [r2, #0]
 8000efa:	8019      	strh	r1, [r3, #0]
 8000efc:	7892      	ldrb	r2, [r2, #2]
 8000efe:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(trig_measure_cmd, sizeof(trig_measure_cmd)) != HAL_OK)
 8000f00:	183b      	adds	r3, r7, r0
 8000f02:	2103      	movs	r1, #3
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff ff71 	bl	8000dec <AHT20_Master_Transmit>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d004      	beq.n	8000f18 <AHT20_Read+0x30>
	{
		printf("AHT20 trigger measurement error\n");
 8000f0e:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <AHT20_Read+0xe8>)
 8000f10:	0018      	movs	r0, r3
 8000f12:	f005 fa63 	bl	80063dc <puts>

			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
			*Temp = data * 200.0f / (1 << 20) - 50;
		}
	}
}
 8000f16:	e054      	b.n	8000fc2 <AHT20_Read+0xda>
		HAL_Delay(80); // wait for the measurements to be completed
 8000f18:	2050      	movs	r0, #80	; 0x50
 8000f1a:	f000 ff17 	bl	8001d4c <HAL_Delay>
		AHT20_Master_Receive(read_buffer, sizeof(read_buffer));
 8000f1e:	2408      	movs	r4, #8
 8000f20:	193b      	adds	r3, r7, r4
 8000f22:	2106      	movs	r1, #6
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff ff7f 	bl	8000e28 <AHT20_Master_Receive>
		if(((read_buffer[0]) & 0x80) == 0x00)
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b25b      	sxtb	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db46      	blt.n	8000fc2 <AHT20_Read+0xda>
			uint32_t data = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
			data = (((uint32_t)read_buffer[3] >> 4) + ((uint32_t)read_buffer[2] << 4) + ((uint32_t)read_buffer[1] << 12));
 8000f38:	193b      	adds	r3, r7, r4
 8000f3a:	78db      	ldrb	r3, [r3, #3]
 8000f3c:	091b      	lsrs	r3, r3, #4
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	001a      	movs	r2, r3
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	789b      	ldrb	r3, [r3, #2]
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	18d2      	adds	r2, r2, r3
 8000f4a:	193b      	adds	r3, r7, r4
 8000f4c:	785b      	ldrb	r3, [r3, #1]
 8000f4e:	031b      	lsls	r3, r3, #12
 8000f50:	18d3      	adds	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
			*Hum = data * 100.0f / (1 << 20);
 8000f54:	6978      	ldr	r0, [r7, #20]
 8000f56:	f7ff fe8f 	bl	8000c78 <__aeabi_ui2f>
 8000f5a:	1c03      	adds	r3, r0, #0
 8000f5c:	491d      	ldr	r1, [pc, #116]	; (8000fd4 <AHT20_Read+0xec>)
 8000f5e:	1c18      	adds	r0, r3, #0
 8000f60:	f7ff fb9c 	bl	800069c <__aeabi_fmul>
 8000f64:	1c03      	adds	r3, r0, #0
 8000f66:	2193      	movs	r1, #147	; 0x93
 8000f68:	05c9      	lsls	r1, r1, #23
 8000f6a:	1c18      	adds	r0, r3, #0
 8000f6c:	f7ff fa7c 	bl	8000468 <__aeabi_fdiv>
 8000f70:	1c03      	adds	r3, r0, #0
 8000f72:	1c1a      	adds	r2, r3, #0
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	601a      	str	r2, [r3, #0]
			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	78db      	ldrb	r3, [r3, #3]
 8000f7c:	041a      	lsls	r2, r3, #16
 8000f7e:	23f0      	movs	r3, #240	; 0xf0
 8000f80:	031b      	lsls	r3, r3, #12
 8000f82:	401a      	ands	r2, r3
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	791b      	ldrb	r3, [r3, #4]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	18d3      	adds	r3, r2, r3
 8000f8c:	193a      	adds	r2, r7, r4
 8000f8e:	7952      	ldrb	r2, [r2, #5]
 8000f90:	189b      	adds	r3, r3, r2
 8000f92:	617b      	str	r3, [r7, #20]
			*Temp = data * 200.0f / (1 << 20) - 50;
 8000f94:	6978      	ldr	r0, [r7, #20]
 8000f96:	f7ff fe6f 	bl	8000c78 <__aeabi_ui2f>
 8000f9a:	1c03      	adds	r3, r0, #0
 8000f9c:	490e      	ldr	r1, [pc, #56]	; (8000fd8 <AHT20_Read+0xf0>)
 8000f9e:	1c18      	adds	r0, r3, #0
 8000fa0:	f7ff fb7c 	bl	800069c <__aeabi_fmul>
 8000fa4:	1c03      	adds	r3, r0, #0
 8000fa6:	2193      	movs	r1, #147	; 0x93
 8000fa8:	05c9      	lsls	r1, r1, #23
 8000faa:	1c18      	adds	r0, r3, #0
 8000fac:	f7ff fa5c 	bl	8000468 <__aeabi_fdiv>
 8000fb0:	1c03      	adds	r3, r0, #0
 8000fb2:	490a      	ldr	r1, [pc, #40]	; (8000fdc <AHT20_Read+0xf4>)
 8000fb4:	1c18      	adds	r0, r3, #0
 8000fb6:	f7ff fcbf 	bl	8000938 <__aeabi_fsub>
 8000fba:	1c03      	adds	r3, r0, #0
 8000fbc:	1c1a      	adds	r2, r3, #0
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b007      	add	sp, #28
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	080071b4 	.word	0x080071b4
 8000fd0:	08007194 	.word	0x08007194
 8000fd4:	42c80000 	.word	0x42c80000
 8000fd8:	43480000 	.word	0x43480000
 8000fdc:	42480000 	.word	0x42480000

08000fe0 <NEO6_ReceiveUartChar>:
  /* done */
  return token;
}

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	2382      	movs	r3, #130	; 0x82
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	5cd3      	ldrb	r3, [r2, r3]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a2b      	ldr	r2, [pc, #172]	; (80010a0 <NEO6_ReceiveUartChar+0xc0>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d503      	bpl.n	8001000 <NEO6_ReceiveUartChar+0x20>
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	4a2a      	ldr	r2, [pc, #168]	; (80010a4 <NEO6_ReceiveUartChar+0xc4>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	3301      	adds	r3, #1
 8001000:	001a      	movs	r2, r3
 8001002:	200f      	movs	r0, #15
 8001004:	183b      	adds	r3, r7, r0
 8001006:	701a      	strb	r2, [r3, #0]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	2306      	movs	r3, #6
 800100c:	33ff      	adds	r3, #255	; 0xff
 800100e:	5cd3      	ldrb	r3, [r2, r3]
 8001010:	183a      	adds	r2, r7, r0
 8001012:	7812      	ldrb	r2, [r2, #0]
 8001014:	429a      	cmp	r2, r3
 8001016:	d038      	beq.n	800108a <NEO6_ReceiveUartChar+0xaa>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <NEO6_ReceiveUartChar+0xc8>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b0d      	cmp	r3, #13
 8001020:	d119      	bne.n	8001056 <NEO6_ReceiveUartChar+0x76>
		{
			GpsStateHandler->UartBufferLines++;
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	2383      	movs	r3, #131	; 0x83
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	5cd3      	ldrb	r3, [r2, r3]
 800102a:	3301      	adds	r3, #1
 800102c:	b2d9      	uxtb	r1, r3
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	2383      	movs	r3, #131	; 0x83
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBufferHead = TempHead;
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	1839      	adds	r1, r7, r0
 800103a:	2382      	movs	r3, #130	; 0x82
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	7809      	ldrb	r1, [r1, #0]
 8001040:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8001042:	183b      	adds	r3, r7, r0
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <NEO6_ReceiveUartChar+0xc8>)
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	b2d1      	uxtb	r1, r2
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	18d3      	adds	r3, r2, r3
 8001050:	1c0a      	adds	r2, r1, #0
 8001052:	711a      	strb	r2, [r3, #4]
 8001054:	e019      	b.n	800108a <NEO6_ReceiveUartChar+0xaa>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <NEO6_ReceiveUartChar+0xc8>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d014      	beq.n	800108a <NEO6_ReceiveUartChar+0xaa>
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <NEO6_ReceiveUartChar+0xc8>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b0a      	cmp	r3, #10
 8001068:	d00f      	beq.n	800108a <NEO6_ReceiveUartChar+0xaa>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	200f      	movs	r0, #15
 800106e:	1839      	adds	r1, r7, r0
 8001070:	2382      	movs	r3, #130	; 0x82
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	7809      	ldrb	r1, [r1, #0]
 8001076:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8001078:	183b      	adds	r3, r7, r0
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <NEO6_ReceiveUartChar+0xc8>)
 800107e:	7812      	ldrb	r2, [r2, #0]
 8001080:	b2d1      	uxtb	r1, r2
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	18d3      	adds	r3, r2, r3
 8001086:	1c0a      	adds	r2, r1, #0
 8001088:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4906      	ldr	r1, [pc, #24]	; (80010a8 <NEO6_ReceiveUartChar+0xc8>)
 8001090:	2201      	movs	r2, #1
 8001092:	0018      	movs	r0, r3
 8001094:	f003 fd7c 	bl	8004b90 <HAL_UART_Receive_IT>
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b004      	add	sp, #16
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	800000ff 	.word	0x800000ff
 80010a4:	ffffff00 	.word	0xffffff00
 80010a8:	20000084 	.word	0x20000084

080010ac <NEO6_Init>:
		NEO6_ParseLine(GpsStateHandler);
	}
}

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	2382      	movs	r3, #130	; 0x82
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2100      	movs	r1, #0
 80010c4:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferTail = 0;
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	2306      	movs	r3, #6
 80010ca:	33ff      	adds	r3, #255	; 0xff
 80010cc:	2100      	movs	r1, #0
 80010ce:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferLines = 0;
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	2383      	movs	r3, #131	; 0x83
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2100      	movs	r1, #0
 80010d8:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Hour = 0;
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	2388      	movs	r3, #136	; 0x88
 80010de:	33ff      	adds	r3, #255	; 0xff
 80010e0:	2100      	movs	r1, #0
 80010e2:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Minute = 0;
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	23c4      	movs	r3, #196	; 0xc4
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2100      	movs	r1, #0
 80010ec:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Second = 0;
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	238a      	movs	r3, #138	; 0x8a
 80010f2:	33ff      	adds	r3, #255	; 0xff
 80010f4:	2100      	movs	r1, #0
 80010f6:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Day = 0;
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	23c5      	movs	r3, #197	; 0xc5
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2100      	movs	r1, #0
 8001100:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Month = 0;
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	238c      	movs	r3, #140	; 0x8c
 8001106:	33ff      	adds	r3, #255	; 0xff
 8001108:	2100      	movs	r1, #0
 800110a:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Year = 0;
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	23c6      	movs	r3, #198	; 0xc6
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2100      	movs	r1, #0
 8001114:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Latitude = 0;
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	23c8      	movs	r3, #200	; 0xc8
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	18d1      	adds	r1, r2, r3
 800111e:	2200      	movs	r2, #0
 8001120:	2300      	movs	r3, #0
 8001122:	600a      	str	r2, [r1, #0]
 8001124:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LatitudeDirection = '0';
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	23cc      	movs	r3, #204	; 0xcc
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2130      	movs	r1, #48	; 0x30
 800112e:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Longitude = 0;
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	23d0      	movs	r3, #208	; 0xd0
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	18d1      	adds	r1, r2, r3
 8001138:	2200      	movs	r2, #0
 800113a:	2300      	movs	r3, #0
 800113c:	600a      	str	r2, [r1, #0]
 800113e:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LongitudeDirection = '0';
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	23d4      	movs	r3, #212	; 0xd4
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2130      	movs	r1, #48	; 0x30
 8001148:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->SpeedKilometers = 0;
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	23e0      	movs	r3, #224	; 0xe0
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	18d1      	adds	r1, r2, r3
 8001152:	2200      	movs	r2, #0
 8001154:	2300      	movs	r3, #0
 8001156:	600a      	str	r2, [r1, #0]
 8001158:	604b      	str	r3, [r1, #4]
	GpsStateHandler->SpeedKnots = 0;
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	23dc      	movs	r3, #220	; 0xdc
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	18d1      	adds	r1, r2, r3
 8001162:	2200      	movs	r2, #0
 8001164:	2300      	movs	r3, #0
 8001166:	600a      	str	r2, [r1, #0]
 8001168:	604b      	str	r3, [r1, #4]

	GpsStateHandler->SatelitesNumber = 0;
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	23e4      	movs	r3, #228	; 0xe4
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2100      	movs	r1, #0
 8001172:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Quality = 0;
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	23ca      	movs	r3, #202	; 0xca
 8001178:	33ff      	adds	r3, #255	; 0xff
 800117a:	2100      	movs	r1, #0
 800117c:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Dop = 0;
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	23e8      	movs	r3, #232	; 0xe8
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	18d1      	adds	r1, r2, r3
 8001186:	2200      	movs	r2, #0
 8001188:	2300      	movs	r3, #0
 800118a:	600a      	str	r2, [r1, #0]
 800118c:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Hdop = 0;
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	23ec      	movs	r3, #236	; 0xec
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	18d1      	adds	r1, r2, r3
 8001196:	2200      	movs	r2, #0
 8001198:	2300      	movs	r3, #0
 800119a:	600a      	str	r2, [r1, #0]
 800119c:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Vdop = 0;
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	23f0      	movs	r3, #240	; 0xf0
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	18d1      	adds	r1, r2, r3
 80011a6:	2200      	movs	r2, #0
 80011a8:	2300      	movs	r3, #0
 80011aa:	600a      	str	r2, [r1, #0]
 80011ac:	604b      	str	r3, [r1, #4]

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4904      	ldr	r1, [pc, #16]	; (80011c4 <NEO6_Init+0x118>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	0018      	movs	r0, r3
 80011b8:	f003 fcea 	bl	8004b90 <HAL_UART_Receive_IT>
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b002      	add	sp, #8
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000084 	.word	0x20000084

080011c8 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ce:	003b      	movs	r3, r7
 80011d0:	0018      	movs	r0, r3
 80011d2:	2308      	movs	r3, #8
 80011d4:	001a      	movs	r2, r3
 80011d6:	2100      	movs	r1, #0
 80011d8:	f005 f9fc 	bl	80065d4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <MX_ADC_Init+0xc0>)
 80011de:	4a2b      	ldr	r2, [pc, #172]	; (800128c <MX_ADC_Init+0xc4>)
 80011e0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <MX_ADC_Init+0xc0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <MX_ADC_Init+0xc0>)
 80011ea:	2280      	movs	r2, #128	; 0x80
 80011ec:	05d2      	lsls	r2, r2, #23
 80011ee:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80011f0:	4b25      	ldr	r3, [pc, #148]	; (8001288 <MX_ADC_Init+0xc0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <MX_ADC_Init+0xc0>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <MX_ADC_Init+0xc0>)
 80011fe:	2201      	movs	r2, #1
 8001200:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <MX_ADC_Init+0xc0>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_ADC_Init+0xc0>)
 800120a:	2220      	movs	r2, #32
 800120c:	2101      	movs	r1, #1
 800120e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_ADC_Init+0xc0>)
 8001212:	2221      	movs	r2, #33	; 0x21
 8001214:	2100      	movs	r1, #0
 8001216:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_ADC_Init+0xc0>)
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_ADC_Init+0xc0>)
 8001220:	22c2      	movs	r2, #194	; 0xc2
 8001222:	32ff      	adds	r2, #255	; 0xff
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_ADC_Init+0xc0>)
 8001228:	222c      	movs	r2, #44	; 0x2c
 800122a:	2101      	movs	r1, #1
 800122c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_ADC_Init+0xc0>)
 8001230:	2204      	movs	r2, #4
 8001232:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_ADC_Init+0xc0>)
 8001236:	2200      	movs	r2, #0
 8001238:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_ADC_Init+0xc0>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_ADC_Init+0xc0>)
 8001242:	2200      	movs	r2, #0
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_ADC_Init+0xc0>)
 8001248:	2200      	movs	r2, #0
 800124a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_ADC_Init+0xc0>)
 800124e:	0018      	movs	r0, r3
 8001250:	f000 fda0 	bl	8001d94 <HAL_ADC_Init>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001258:	f000 fa92 	bl	8001780 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800125c:	003b      	movs	r3, r7
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001262:	003b      	movs	r3, r7
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	0152      	lsls	r2, r2, #5
 8001268:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800126a:	003a      	movs	r2, r7
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_ADC_Init+0xc0>)
 800126e:	0011      	movs	r1, r2
 8001270:	0018      	movs	r0, r3
 8001272:	f000 ff03 	bl	800207c <HAL_ADC_ConfigChannel>
 8001276:	1e03      	subs	r3, r0, #0
 8001278:	d001      	beq.n	800127e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800127a:	f000 fa81 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	20000088 	.word	0x20000088
 800128c:	40012400 	.word	0x40012400

08001290 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	240c      	movs	r4, #12
 800129a:	193b      	adds	r3, r7, r4
 800129c:	0018      	movs	r0, r3
 800129e:	2314      	movs	r3, #20
 80012a0:	001a      	movs	r2, r3
 80012a2:	2100      	movs	r1, #0
 80012a4:	f005 f996 	bl	80065d4 <memset>
  if(adcHandle->Instance==ADC1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a2a      	ldr	r2, [pc, #168]	; (8001358 <HAL_ADC_MspInit+0xc8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d14d      	bne.n	800134e <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012b2:	4b2a      	ldr	r3, [pc, #168]	; (800135c <HAL_ADC_MspInit+0xcc>)
 80012b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <HAL_ADC_MspInit+0xcc>)
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	0089      	lsls	r1, r1, #2
 80012bc:	430a      	orrs	r2, r1
 80012be:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <HAL_ADC_MspInit+0xcc>)
 80012c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c4:	4b25      	ldr	r3, [pc, #148]	; (800135c <HAL_ADC_MspInit+0xcc>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	430a      	orrs	r2, r1
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <HAL_ADC_MspInit+0xcc>)
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	2201      	movs	r2, #1
 80012d2:	4013      	ands	r3, r2
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d8:	193b      	adds	r3, r7, r4
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012de:	193b      	adds	r3, r7, r4
 80012e0:	2203      	movs	r2, #3
 80012e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	193b      	adds	r3, r7, r4
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	193a      	adds	r2, r7, r4
 80012ec:	23a0      	movs	r3, #160	; 0xa0
 80012ee:	05db      	lsls	r3, r3, #23
 80012f0:	0011      	movs	r1, r2
 80012f2:	0018      	movs	r0, r3
 80012f4:	f001 f9f4 	bl	80026e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 80012fa:	4a1a      	ldr	r2, [pc, #104]	; (8001364 <HAL_ADC_MspInit+0xd4>)
 80012fc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001312:	2280      	movs	r2, #128	; 0x80
 8001314:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001328:	2220      	movs	r2, #32
 800132a:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001334:	0018      	movs	r0, r3
 8001336:	f001 f825 	bl	8002384 <HAL_DMA_Init>
 800133a:	1e03      	subs	r3, r0, #0
 800133c:	d001      	beq.n	8001342 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800133e:	f000 fa1f 	bl	8001780 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001346:	64da      	str	r2, [r3, #76]	; 0x4c
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b009      	add	sp, #36	; 0x24
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	40012400 	.word	0x40012400
 800135c:	40021000 	.word	0x40021000
 8001360:	200000e4 	.word	0x200000e4
 8001364:	40020008 	.word	0x40020008

08001368 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_DMA_Init+0x38>)
 8001370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_DMA_Init+0x38>)
 8001374:	2101      	movs	r1, #1
 8001376:	430a      	orrs	r2, r1
 8001378:	631a      	str	r2, [r3, #48]	; 0x30
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_DMA_Init+0x38>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	2201      	movs	r2, #1
 8001380:	4013      	ands	r3, r2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2009      	movs	r0, #9
 800138c:	f000 ffc8 	bl	8002320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001390:	2009      	movs	r0, #9
 8001392:	f000 ffda 	bl	800234a <HAL_NVIC_EnableIRQ>

}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	40021000 	.word	0x40021000

080013a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	240c      	movs	r4, #12
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	0018      	movs	r0, r3
 80013b0:	2314      	movs	r3, #20
 80013b2:	001a      	movs	r2, r3
 80013b4:	2100      	movs	r1, #0
 80013b6:	f005 f90d 	bl	80065d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	4b30      	ldr	r3, [pc, #192]	; (800147c <MX_GPIO_Init+0xd8>)
 80013bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013be:	4b2f      	ldr	r3, [pc, #188]	; (800147c <MX_GPIO_Init+0xd8>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	430a      	orrs	r2, r1
 80013c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013c6:	4b2d      	ldr	r3, [pc, #180]	; (800147c <MX_GPIO_Init+0xd8>)
 80013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ca:	2201      	movs	r2, #1
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	4b2a      	ldr	r3, [pc, #168]	; (800147c <MX_GPIO_Init+0xd8>)
 80013d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d6:	4b29      	ldr	r3, [pc, #164]	; (800147c <MX_GPIO_Init+0xd8>)
 80013d8:	2102      	movs	r1, #2
 80013da:	430a      	orrs	r2, r1
 80013dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80013de:	4b27      	ldr	r3, [pc, #156]	; (800147c <MX_GPIO_Init+0xd8>)
 80013e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF24_CSN_Pin|USER_LED_Pin|I2C_EN_Pin|GPS_EN_Pin
 80013ea:	4925      	ldr	r1, [pc, #148]	; (8001480 <MX_GPIO_Init+0xdc>)
 80013ec:	23a0      	movs	r3, #160	; 0xa0
 80013ee:	05db      	lsls	r3, r3, #23
 80013f0:	2200      	movs	r2, #0
 80013f2:	0018      	movs	r0, r3
 80013f4:	f001 faf2 	bl	80029dc <HAL_GPIO_WritePin>
                          |ADC_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <MX_GPIO_Init+0xe0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	2110      	movs	r1, #16
 80013fe:	0018      	movs	r0, r3
 8001400:	f001 faec 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|USER_LED_Pin|I2C_EN_Pin|GPS_EN_Pin
 8001404:	193b      	adds	r3, r7, r4
 8001406:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <MX_GPIO_Init+0xdc>)
 8001408:	601a      	str	r2, [r3, #0]
                          |ADC_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	193b      	adds	r3, r7, r4
 800140c:	2201      	movs	r2, #1
 800140e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	193b      	adds	r3, r7, r4
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	193b      	adds	r3, r7, r4
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	193a      	adds	r2, r7, r4
 800141e:	23a0      	movs	r3, #160	; 0xa0
 8001420:	05db      	lsls	r3, r3, #23
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f001 f95b 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800142a:	193b      	adds	r3, r7, r4
 800142c:	2280      	movs	r2, #128	; 0x80
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001432:	193b      	adds	r3, r7, r4
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	193b      	adds	r3, r7, r4
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800143e:	193a      	adds	r2, r7, r4
 8001440:	23a0      	movs	r3, #160	; 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f001 f94a 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 800144c:	0021      	movs	r1, r4
 800144e:	187b      	adds	r3, r7, r1
 8001450:	2210      	movs	r2, #16
 8001452:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	187b      	adds	r3, r7, r1
 8001456:	2201      	movs	r2, #1
 8001458:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	187b      	adds	r3, r7, r1
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	187b      	adds	r3, r7, r1
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001466:	187b      	adds	r3, r7, r1
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <MX_GPIO_Init+0xe0>)
 800146a:	0019      	movs	r1, r3
 800146c:	0010      	movs	r0, r2
 800146e:	f001 f937 	bl	80026e0 <HAL_GPIO_Init>

}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b009      	add	sp, #36	; 0x24
 8001478:	bd90      	pop	{r4, r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	40021000 	.word	0x40021000
 8001480:	00001d02 	.word	0x00001d02
 8001484:	50000400 	.word	0x50000400

08001488 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <MX_I2C1_Init+0x74>)
 800148e:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <MX_I2C1_Init+0x78>)
 8001490:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_I2C1_Init+0x74>)
 8001494:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <MX_I2C1_Init+0x7c>)
 8001496:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_I2C1_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_I2C1_Init+0x74>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_I2C1_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_I2C1_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_I2C1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_I2C1_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_I2C1_Init+0x74>)
 80014c4:	0018      	movs	r0, r3
 80014c6:	f001 faa7 	bl	8002a18 <HAL_I2C_Init>
 80014ca:	1e03      	subs	r3, r0, #0
 80014cc:	d001      	beq.n	80014d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014ce:	f000 f957 	bl	8001780 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <MX_I2C1_Init+0x74>)
 80014d4:	2100      	movs	r1, #0
 80014d6:	0018      	movs	r0, r3
 80014d8:	f001 fffa 	bl	80034d0 <HAL_I2CEx_ConfigAnalogFilter>
 80014dc:	1e03      	subs	r3, r0, #0
 80014de:	d001      	beq.n	80014e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014e0:	f000 f94e 	bl	8001780 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <MX_I2C1_Init+0x74>)
 80014e6:	2100      	movs	r1, #0
 80014e8:	0018      	movs	r0, r3
 80014ea:	f002 f83d 	bl	8003568 <HAL_I2CEx_ConfigDigitalFilter>
 80014ee:	1e03      	subs	r3, r0, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014f2:	f000 f945 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	2000012c 	.word	0x2000012c
 8001500:	40005400 	.word	0x40005400
 8001504:	00707cbb 	.word	0x00707cbb

08001508 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	240c      	movs	r4, #12
 8001512:	193b      	adds	r3, r7, r4
 8001514:	0018      	movs	r0, r3
 8001516:	2314      	movs	r3, #20
 8001518:	001a      	movs	r2, r3
 800151a:	2100      	movs	r1, #0
 800151c:	f005 f85a 	bl	80065d4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <HAL_I2C_MspInit+0x7c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d128      	bne.n	800157c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_I2C_MspInit+0x80>)
 800152c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_I2C_MspInit+0x80>)
 8001530:	2102      	movs	r1, #2
 8001532:	430a      	orrs	r2, r1
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_I2C_MspInit+0x80>)
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001542:	0021      	movs	r1, r4
 8001544:	187b      	adds	r3, r7, r1
 8001546:	22c0      	movs	r2, #192	; 0xc0
 8001548:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2212      	movs	r2, #18
 800154e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	187b      	adds	r3, r7, r1
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	187b      	adds	r3, r7, r1
 8001558:	2203      	movs	r2, #3
 800155a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800155c:	187b      	adds	r3, r7, r1
 800155e:	2201      	movs	r2, #1
 8001560:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	187b      	adds	r3, r7, r1
 8001564:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_I2C_MspInit+0x84>)
 8001566:	0019      	movs	r1, r3
 8001568:	0010      	movs	r0, r2
 800156a:	f001 f8b9 	bl	80026e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_I2C_MspInit+0x80>)
 8001570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_I2C_MspInit+0x80>)
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	0389      	lsls	r1, r1, #14
 8001578:	430a      	orrs	r2, r1
 800157a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800157c:	46c0      	nop			; (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b009      	add	sp, #36	; 0x24
 8001582:	bd90      	pop	{r4, r7, pc}
 8001584:	40005400 	.word	0x40005400
 8001588:	40021000 	.word	0x40021000
 800158c:	50000400 	.word	0x50000400

08001590 <HAL_UART_RxCpltCallback>:
volatile float Temp = 0.0f;
volatile float Hum = 0.0f;
volatile uint32_t HeartBeatValue;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if(huart == GpsState.neo6_huart)
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_UART_RxCpltCallback+0x24>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d103      	bne.n	80015aa <HAL_UART_RxCpltCallback+0x1a>
  {
    NEO6_ReceiveUartChar(&GpsState);
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <HAL_UART_RxCpltCallback+0x24>)
 80015a4:	0018      	movs	r0, r3
 80015a6:	f7ff fd1b 	bl	8000fe0 <NEO6_ReceiveUartChar>
  }
}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	20000180 	.word	0x20000180

080015b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af02      	add	r7, sp, #8
 80015be:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d11b      	bne.n	8001600 <HAL_TIM_PeriodElapsedCallback+0x48>
    AHT20_Read(&Temp, &Hum); // reads AHT20 measurements every second
 80015c8:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015cc:	0011      	movs	r1, r2
 80015ce:	0018      	movs	r0, r3
 80015d0:	f7ff fc8a 	bl	8000ee8 <AHT20_Read>
    printf("Temperature = %.1fC\n Hum = %.1f\n", Temp, Hum);
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	1c18      	adds	r0, r3, #0
 80015da:	f7ff fb95 	bl	8000d08 <__aeabi_f2d>
 80015de:	0004      	movs	r4, r0
 80015e0:	000d      	movs	r5, r1
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	1c18      	adds	r0, r3, #0
 80015e8:	f7ff fb8e 	bl	8000d08 <__aeabi_f2d>
 80015ec:	0002      	movs	r2, r0
 80015ee:	000b      	movs	r3, r1
 80015f0:	4908      	ldr	r1, [pc, #32]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80015f2:	9200      	str	r2, [sp, #0]
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	0022      	movs	r2, r4
 80015f8:	002b      	movs	r3, r5
 80015fa:	0008      	movs	r0, r1
 80015fc:	f004 fe88 	bl	8006310 <iprintf>
  }
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b002      	add	sp, #8
 8001606:	bdb0      	pop	{r4, r5, r7, pc}
 8001608:	200003cc 	.word	0x200003cc
 800160c:	2000036c 	.word	0x2000036c
 8001610:	20000368 	.word	0x20000368
 8001614:	080071b8 	.word	0x080071b8

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161e:	f000 fb25 	bl	8001c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001622:	f000 f837 	bl	8001694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001626:	f7ff febd 	bl	80013a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800162a:	f7ff fe9d 	bl	8001368 <MX_DMA_Init>
  MX_ADC_Init();
 800162e:	f7ff fdcb 	bl	80011c8 <MX_ADC_Init>
  MX_I2C1_Init();
 8001632:	f7ff ff29 	bl	8001488 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001636:	f000 fa75 	bl	8001b24 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 800163a:	f000 f8a7 	bl	800178c <MX_SPI1_Init>
  MX_TIM6_Init();
 800163e:	f000 fa13 	bl	8001a68 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  AHT20_Init();
 8001642:	f7ff fc0f 	bl	8000e64 <AHT20_Init>
  NEO6_Init(&GpsState, &hlpuart1);
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <main+0x6c>)
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <main+0x70>)
 800164a:	0011      	movs	r1, r2
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff fd2d 	bl	80010ac <NEO6_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <main+0x74>)
 8001654:	0018      	movs	r0, r3
 8001656:	f002 ff91 	bl	800457c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint8_t message[] = "UART over ST-Link \n\r";
 800165a:	003b      	movs	r3, r7
 800165c:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <main+0x78>)
 800165e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001660:	c313      	stmia	r3!, {r0, r1, r4}
 8001662:	ca03      	ldmia	r2!, {r0, r1}
 8001664:	c303      	stmia	r3!, {r0, r1}
 8001666:	7812      	ldrb	r2, [r2, #0]
 8001668:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&hlpuart1, message, sizeof(message)-1, 100);
 800166a:	0039      	movs	r1, r7
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <main+0x6c>)
 800166e:	2364      	movs	r3, #100	; 0x64
 8001670:	2214      	movs	r2, #20
 8001672:	f003 f9ed 	bl	8004a50 <HAL_UART_Transmit>

	  // print("Semihosting test \n");
	  HAL_Delay(2000);
 8001676:	23fa      	movs	r3, #250	; 0xfa
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	0018      	movs	r0, r3
 800167c:	f000 fb66 	bl	8001d4c <HAL_Delay>
  {
 8001680:	e7eb      	b.n	800165a <main+0x42>
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	2000040c 	.word	0x2000040c
 8001688:	20000180 	.word	0x20000180
 800168c:	200003cc 	.word	0x200003cc
 8001690:	080071dc 	.word	0x080071dc

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b09b      	sub	sp, #108	; 0x6c
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	2434      	movs	r4, #52	; 0x34
 800169c:	193b      	adds	r3, r7, r4
 800169e:	0018      	movs	r0, r3
 80016a0:	2334      	movs	r3, #52	; 0x34
 80016a2:	001a      	movs	r2, r3
 80016a4:	2100      	movs	r1, #0
 80016a6:	f004 ff95 	bl	80065d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016aa:	2320      	movs	r3, #32
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	0018      	movs	r0, r3
 80016b0:	2314      	movs	r3, #20
 80016b2:	001a      	movs	r2, r3
 80016b4:	2100      	movs	r1, #0
 80016b6:	f004 ff8d 	bl	80065d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ba:	003b      	movs	r3, r7
 80016bc:	0018      	movs	r0, r3
 80016be:	2320      	movs	r3, #32
 80016c0:	001a      	movs	r2, r3
 80016c2:	2100      	movs	r1, #0
 80016c4:	f004 ff86 	bl	80065d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <SystemClock_Config+0xe4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a2b      	ldr	r2, [pc, #172]	; (800177c <SystemClock_Config+0xe8>)
 80016ce:	401a      	ands	r2, r3
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <SystemClock_Config+0xe4>)
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	0109      	lsls	r1, r1, #4
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016da:	0021      	movs	r1, r4
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	2202      	movs	r2, #2
 80016e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e2:	187b      	adds	r3, r7, r1
 80016e4:	2201      	movs	r2, #1
 80016e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2210      	movs	r2, #16
 80016ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2202      	movs	r2, #2
 80016f2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2200      	movs	r2, #0
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	2280      	movs	r2, #128	; 0x80
 80016fe:	02d2      	lsls	r2, r2, #11
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001702:	187b      	adds	r3, r7, r1
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	03d2      	lsls	r2, r2, #15
 8001708:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170a:	187b      	adds	r3, r7, r1
 800170c:	0018      	movs	r0, r3
 800170e:	f001 ff77 	bl	8003600 <HAL_RCC_OscConfig>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001716:	f000 f833 	bl	8001780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171a:	2120      	movs	r1, #32
 800171c:	187b      	adds	r3, r7, r1
 800171e:	220f      	movs	r2, #15
 8001720:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001722:	187b      	adds	r3, r7, r1
 8001724:	2203      	movs	r2, #3
 8001726:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001728:	187b      	adds	r3, r7, r1
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800172e:	187b      	adds	r3, r7, r1
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001734:	187b      	adds	r3, r7, r1
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800173a:	187b      	adds	r3, r7, r1
 800173c:	2101      	movs	r1, #1
 800173e:	0018      	movs	r0, r3
 8001740:	f002 fada 	bl	8003cf8 <HAL_RCC_ClockConfig>
 8001744:	1e03      	subs	r3, r0, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001748:	f000 f81a 	bl	8001780 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 800174c:	003b      	movs	r3, r7
 800174e:	220c      	movs	r2, #12
 8001750:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001752:	003b      	movs	r3, r7
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001758:	003b      	movs	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800175e:	003b      	movs	r3, r7
 8001760:	0018      	movs	r0, r3
 8001762:	f002 fced 	bl	8004140 <HAL_RCCEx_PeriphCLKConfig>
 8001766:	1e03      	subs	r3, r0, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800176a:	f000 f809 	bl	8001780 <Error_Handler>
  }
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	b01b      	add	sp, #108	; 0x6c
 8001774:	bd90      	pop	{r4, r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	40007000 	.word	0x40007000
 800177c:	ffffe7ff 	.word	0xffffe7ff

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
}
 8001786:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001788:	e7fe      	b.n	8001788 <Error_Handler+0x8>
	...

0800178c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001790:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <MX_SPI1_Init+0x68>)
 8001792:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <MX_SPI1_Init+0x6c>)
 8001794:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_SPI1_Init+0x68>)
 8001798:	2282      	movs	r2, #130	; 0x82
 800179a:	0052      	lsls	r2, r2, #1
 800179c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_SPI1_Init+0x68>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <MX_SPI1_Init+0x68>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_SPI1_Init+0x68>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <MX_SPI1_Init+0x68>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_SPI1_Init+0x68>)
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <MX_SPI1_Init+0x68>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_SPI1_Init+0x68>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <MX_SPI1_Init+0x68>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <MX_SPI1_Init+0x68>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <MX_SPI1_Init+0x68>)
 80017d8:	2207      	movs	r2, #7
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <MX_SPI1_Init+0x68>)
 80017de:	0018      	movs	r0, r3
 80017e0:	f002 fdf8 	bl	80043d4 <HAL_SPI_Init>
 80017e4:	1e03      	subs	r3, r0, #0
 80017e6:	d001      	beq.n	80017ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017e8:	f7ff ffca 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	20000370 	.word	0x20000370
 80017f8:	40013000 	.word	0x40013000

080017fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	240c      	movs	r4, #12
 8001806:	193b      	adds	r3, r7, r4
 8001808:	0018      	movs	r0, r3
 800180a:	2314      	movs	r3, #20
 800180c:	001a      	movs	r2, r3
 800180e:	2100      	movs	r1, #0
 8001810:	f004 fee0 	bl	80065d4 <memset>
  if(spiHandle->Instance==SPI1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a18      	ldr	r2, [pc, #96]	; (800187c <HAL_SPI_MspInit+0x80>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d129      	bne.n	8001872 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <HAL_SPI_MspInit+0x84>)
 8001820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_SPI_MspInit+0x84>)
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	0149      	lsls	r1, r1, #5
 8001828:	430a      	orrs	r2, r1
 800182a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_SPI_MspInit+0x84>)
 800182e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_SPI_MspInit+0x84>)
 8001832:	2101      	movs	r1, #1
 8001834:	430a      	orrs	r2, r1
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_SPI_MspInit+0x84>)
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	2201      	movs	r2, #1
 800183e:	4013      	ands	r3, r2
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001844:	0021      	movs	r1, r4
 8001846:	187b      	adds	r3, r7, r1
 8001848:	22e0      	movs	r2, #224	; 0xe0
 800184a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	187b      	adds	r3, r7, r1
 800184e:	2202      	movs	r2, #2
 8001850:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	187b      	adds	r3, r7, r1
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001858:	187b      	adds	r3, r7, r1
 800185a:	2203      	movs	r2, #3
 800185c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800185e:	187b      	adds	r3, r7, r1
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	187a      	adds	r2, r7, r1
 8001866:	23a0      	movs	r3, #160	; 0xa0
 8001868:	05db      	lsls	r3, r3, #23
 800186a:	0011      	movs	r1, r2
 800186c:	0018      	movs	r0, r3
 800186e:	f000 ff37 	bl	80026e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b009      	add	sp, #36	; 0x24
 8001878:	bd90      	pop	{r4, r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	40013000 	.word	0x40013000
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_MspInit+0x24>)
 800188a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_MspInit+0x24>)
 800188e:	2101      	movs	r1, #1
 8001890:	430a      	orrs	r2, r1
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_MspInit+0x24>)
 8001896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_MspInit+0x24>)
 800189a:	2180      	movs	r1, #128	; 0x80
 800189c:	0549      	lsls	r1, r1, #21
 800189e:	430a      	orrs	r2, r1
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40021000 	.word	0x40021000

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b0:	e7fe      	b.n	80018b0 <NMI_Handler+0x4>

080018b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <HardFault_Handler+0x4>

080018b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d0:	f000 fa20 	bl	8001d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <DMA1_Channel1_IRQHandler+0x14>)
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 fe4d 	bl	8002582 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	200000e4 	.word	0x200000e4

080018f4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <TIM6_IRQHandler+0x14>)
 80018fa:	0018      	movs	r0, r3
 80018fc:	f002 fe90 	bl	8004620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	200003cc 	.word	0x200003cc

0800190c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <LPUART1_IRQHandler+0x14>)
 8001912:	0018      	movs	r0, r3
 8001914:	f003 f99a 	bl	8004c4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	2000040c 	.word	0x2000040c

08001924 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e00a      	b.n	800194c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001936:	e000      	b.n	800193a <_read+0x16>
 8001938:	bf00      	nop
 800193a:	0001      	movs	r1, r0
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	b2ca      	uxtb	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbf0      	blt.n	8001936 <_read+0x12>
  }

  return len;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	0018      	movs	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	b006      	add	sp, #24
 800195c:	bd80      	pop	{r7, pc}

0800195e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e009      	b.n	8001984 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	60ba      	str	r2, [r7, #8]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	0018      	movs	r0, r3
 800197a:	e000      	b.n	800197e <_write+0x20>
 800197c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbf1      	blt.n	8001970 <_write+0x12>
  }
  return len;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b006      	add	sp, #24
 8001994:	bd80      	pop	{r7, pc}

08001996 <_close>:

int _close(int file)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800199e:	2301      	movs	r3, #1
 80019a0:	425b      	negs	r3, r3
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b002      	add	sp, #8
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	0192      	lsls	r2, r2, #6
 80019ba:	605a      	str	r2, [r3, #4]
  return 0;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_isatty>:

int _isatty(int file)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b002      	add	sp, #8
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b004      	add	sp, #16
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f8:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <_sbrk+0x5c>)
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <_sbrk+0x60>)
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <_sbrk+0x64>)
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <_sbrk+0x68>)
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	18d3      	adds	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d207      	bcs.n	8001a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a20:	f004 fe2e 	bl	8006680 <__errno>
 8001a24:	0003      	movs	r3, r0
 8001a26:	220c      	movs	r2, #12
 8001a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	425b      	negs	r3, r3
 8001a2e:	e009      	b.n	8001a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	18d2      	adds	r2, r2, r3
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <_sbrk+0x64>)
 8001a40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b006      	add	sp, #24
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20005000 	.word	0x20005000
 8001a50:	00000400 	.word	0x00000400
 8001a54:	200003c8 	.word	0x200003c8
 8001a58:	200005e8 	.word	0x200005e8

08001a5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a60:	46c0      	nop			; (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6e:	003b      	movs	r3, r7
 8001a70:	0018      	movs	r0, r3
 8001a72:	2308      	movs	r3, #8
 8001a74:	001a      	movs	r2, r3
 8001a76:	2100      	movs	r1, #0
 8001a78:	f004 fdac 	bl	80065d4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_TIM6_Init+0x6c>)
 8001a7e:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <MX_TIM6_Init+0x70>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_TIM6_Init+0x6c>)
 8001a84:	4a15      	ldr	r2, [pc, #84]	; (8001adc <MX_TIM6_Init+0x74>)
 8001a86:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <MX_TIM6_Init+0x6c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_TIM6_Init+0x6c>)
 8001a90:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <MX_TIM6_Init+0x78>)
 8001a92:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_TIM6_Init+0x6c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_TIM6_Init+0x6c>)
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f002 fd2d 	bl	80044fc <HAL_TIM_Base_Init>
 8001aa2:	1e03      	subs	r3, r0, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001aa6:	f7ff fe6b 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aaa:	003b      	movs	r3, r7
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab0:	003b      	movs	r3, r7
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ab6:	003a      	movs	r2, r7
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_TIM6_Init+0x6c>)
 8001aba:	0011      	movs	r1, r2
 8001abc:	0018      	movs	r0, r3
 8001abe:	f002 ff15 	bl	80048ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ac2:	1e03      	subs	r3, r0, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001ac6:	f7ff fe5b 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b002      	add	sp, #8
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	200003cc 	.word	0x200003cc
 8001ad8:	40001000 	.word	0x40001000
 8001adc:	00000c7f 	.word	0x00000c7f
 8001ae0:	0000270f 	.word	0x0000270f

08001ae4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_TIM_Base_MspInit+0x38>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10d      	bne.n	8001b12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_TIM_Base_MspInit+0x3c>)
 8001af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_TIM_Base_MspInit+0x3c>)
 8001afc:	2110      	movs	r1, #16
 8001afe:	430a      	orrs	r2, r1
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2011      	movs	r0, #17
 8001b08:	f000 fc0a 	bl	8002320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001b0c:	2011      	movs	r0, #17
 8001b0e:	f000 fc1c 	bl	800234a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	40001000 	.word	0x40001000
 8001b20:	40021000 	.word	0x40021000

08001b24 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <MX_LPUART1_UART_Init+0x54>)
 8001b2a:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <MX_LPUART1_UART_Init+0x58>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_LPUART1_UART_Init+0x54>)
 8001b30:	2296      	movs	r2, #150	; 0x96
 8001b32:	0192      	lsls	r2, r2, #6
 8001b34:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_LPUART1_UART_Init+0x54>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_LPUART1_UART_Init+0x54>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <MX_LPUART1_UART_Init+0x54>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_LPUART1_UART_Init+0x54>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <MX_LPUART1_UART_Init+0x54>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_LPUART1_UART_Init+0x54>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <MX_LPUART1_UART_Init+0x54>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <MX_LPUART1_UART_Init+0x54>)
 8001b62:	0018      	movs	r0, r3
 8001b64:	f002 ff20 	bl	80049a8 <HAL_UART_Init>
 8001b68:	1e03      	subs	r3, r0, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001b6c:	f7ff fe08 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	2000040c 	.word	0x2000040c
 8001b7c:	40004800 	.word	0x40004800

08001b80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	240c      	movs	r4, #12
 8001b8a:	193b      	adds	r3, r7, r4
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	2314      	movs	r3, #20
 8001b90:	001a      	movs	r2, r3
 8001b92:	2100      	movs	r1, #0
 8001b94:	f004 fd1e 	bl	80065d4 <memset>
  if(uartHandle->Instance==LPUART1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <HAL_UART_MspInit+0x90>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d131      	bne.n	8001c06 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <HAL_UART_MspInit+0x94>)
 8001ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_UART_MspInit+0x94>)
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	02c9      	lsls	r1, r1, #11
 8001bac:	430a      	orrs	r2, r1
 8001bae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_UART_MspInit+0x94>)
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_UART_MspInit+0x94>)
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_UART_MspInit+0x94>)
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bc8:	0021      	movs	r1, r4
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	220c      	movs	r2, #12
 8001bce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	2203      	movs	r2, #3
 8001be0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	2206      	movs	r2, #6
 8001be6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	187a      	adds	r2, r7, r1
 8001bea:	23a0      	movs	r3, #160	; 0xa0
 8001bec:	05db      	lsls	r3, r3, #23
 8001bee:	0011      	movs	r1, r2
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f000 fd75 	bl	80026e0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	201d      	movs	r0, #29
 8001bfc:	f000 fb90 	bl	8002320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001c00:	201d      	movs	r0, #29
 8001c02:	f000 fba2 	bl	800234a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b009      	add	sp, #36	; 0x24
 8001c0c:	bd90      	pop	{r4, r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	40004800 	.word	0x40004800
 8001c14:	40021000 	.word	0x40021000

08001c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001c18:	480d      	ldr	r0, [pc, #52]	; (8001c50 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001c1a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c1c:	f7ff ff1e 	bl	8001a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c20:	480c      	ldr	r0, [pc, #48]	; (8001c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c22:	490d      	ldr	r1, [pc, #52]	; (8001c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c24:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <LoopForever+0xe>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c28:	e002      	b.n	8001c30 <LoopCopyDataInit>

08001c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2e:	3304      	adds	r3, #4

08001c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c34:	d3f9      	bcc.n	8001c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c38:	4c0a      	ldr	r4, [pc, #40]	; (8001c64 <LoopForever+0x16>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c3c:	e001      	b.n	8001c42 <LoopFillZerobss>

08001c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c40:	3204      	adds	r2, #4

08001c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c44:	d3fb      	bcc.n	8001c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c46:	f004 fd21 	bl	800668c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c4a:	f7ff fce5 	bl	8001618 <main>

08001c4e <LoopForever>:

LoopForever:
    b LoopForever
 8001c4e:	e7fe      	b.n	8001c4e <LoopForever>
   ldr   r0, =_estack
 8001c50:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c58:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c5c:	08007324 	.word	0x08007324
  ldr r2, =_sbss
 8001c60:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c64:	200005e4 	.word	0x200005e4

08001c68 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c68:	e7fe      	b.n	8001c68 <ADC1_COMP_IRQHandler>
	...

08001c6c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_Init+0x3c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_Init+0x3c>)
 8001c7e:	2140      	movs	r1, #64	; 0x40
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c84:	2003      	movs	r0, #3
 8001c86:	f000 f811 	bl	8001cac <HAL_InitTick>
 8001c8a:	1e03      	subs	r3, r0, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
 8001c94:	e001      	b.n	8001c9a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c96:	f7ff fdf5 	bl	8001884 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c9a:	1dfb      	adds	r3, r7, #7
 8001c9c:	781b      	ldrb	r3, [r3, #0]
}
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b002      	add	sp, #8
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	40022000 	.word	0x40022000

08001cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <HAL_InitTick+0x5c>)
 8001cb6:	681c      	ldr	r4, [r3, #0]
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_InitTick+0x60>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	23fa      	movs	r3, #250	; 0xfa
 8001cc0:	0098      	lsls	r0, r3, #2
 8001cc2:	f7fe fa2b 	bl	800011c <__udivsi3>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	0019      	movs	r1, r3
 8001cca:	0020      	movs	r0, r4
 8001ccc:	f7fe fa26 	bl	800011c <__udivsi3>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f000 fb49 	bl	800236a <HAL_SYSTICK_Config>
 8001cd8:	1e03      	subs	r3, r0, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e00f      	b.n	8001d00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d80b      	bhi.n	8001cfe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	2301      	movs	r3, #1
 8001cea:	425b      	negs	r3, r3
 8001cec:	2200      	movs	r2, #0
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f000 fb16 	bl	8002320 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_InitTick+0x64>)
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b003      	add	sp, #12
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	20000004 	.word	0x20000004

08001d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_IncTick+0x1c>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	001a      	movs	r2, r3
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_IncTick+0x20>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	18d2      	adds	r2, r2, r3
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <HAL_IncTick+0x20>)
 8001d26:	601a      	str	r2, [r3, #0]
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	20000008 	.word	0x20000008
 8001d34:	20000494 	.word	0x20000494

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b02      	ldr	r3, [pc, #8]	; (8001d48 <HAL_GetTick+0x10>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	20000494 	.word	0x20000494

08001d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3301      	adds	r3, #1
 8001d64:	d005      	beq.n	8001d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_Delay+0x44>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	001a      	movs	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	189b      	adds	r3, r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	f7ff ffe0 	bl	8001d38 <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d8f7      	bhi.n	8001d74 <HAL_Delay+0x28>
  {
  }
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b004      	add	sp, #16
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	20000008 	.word	0x20000008

08001d94 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e159      	b.n	800205a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10a      	bne.n	8001dc4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2250      	movs	r2, #80	; 0x50
 8001db8:	2100      	movs	r1, #0
 8001dba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f7ff fa66 	bl	8001290 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc8:	2210      	movs	r2, #16
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d005      	beq.n	8001ddc <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001dda:	d00b      	beq.n	8001df4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de0:	2210      	movs	r2, #16
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2250      	movs	r2, #80	; 0x50
 8001dec:	2100      	movs	r1, #0
 8001dee:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e132      	b.n	800205a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df8:	4a9a      	ldr	r2, [pc, #616]	; (8002064 <HAL_ADC_Init+0x2d0>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d108      	bne.n	8001e24 <HAL_ADC_Init+0x90>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_Init+0x90>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <HAL_ADC_Init+0x92>
 8001e24:	2300      	movs	r3, #0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d149      	bne.n	8001ebe <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	23c0      	movs	r3, #192	; 0xc0
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d00b      	beq.n	8001e4e <HAL_ADC_Init+0xba>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	05db      	lsls	r3, r3, #23
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d005      	beq.n	8001e4e <HAL_ADC_Init+0xba>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d111      	bne.n	8001e72 <HAL_ADC_Init+0xde>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	0892      	lsrs	r2, r2, #2
 8001e5c:	611a      	str	r2, [r3, #16]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6919      	ldr	r1, [r3, #16]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	611a      	str	r2, [r3, #16]
 8001e70:	e014      	b.n	8001e9c <HAL_ADC_Init+0x108>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	0892      	lsrs	r2, r2, #2
 8001e80:	611a      	str	r2, [r3, #16]
 8001e82:	4b79      	ldr	r3, [pc, #484]	; (8002068 <HAL_ADC_Init+0x2d4>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4b78      	ldr	r3, [pc, #480]	; (8002068 <HAL_ADC_Init+0x2d4>)
 8001e88:	4978      	ldr	r1, [pc, #480]	; (800206c <HAL_ADC_Init+0x2d8>)
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_ADC_Init+0x2d4>)
 8001e90:	6819      	ldr	r1, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	4b74      	ldr	r3, [pc, #464]	; (8002068 <HAL_ADC_Init+0x2d4>)
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2118      	movs	r1, #24
 8001ea8:	438a      	bics	r2, r1
 8001eaa:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68d9      	ldr	r1, [r3, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001ebe:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_ADC_Init+0x2d4>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4b69      	ldr	r3, [pc, #420]	; (8002068 <HAL_ADC_Init+0x2d4>)
 8001ec4:	496a      	ldr	r1, [pc, #424]	; (8002070 <HAL_ADC_Init+0x2dc>)
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001eca:	4b67      	ldr	r3, [pc, #412]	; (8002068 <HAL_ADC_Init+0x2d4>)
 8001ecc:	6819      	ldr	r1, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed2:	065a      	lsls	r2, r3, #25
 8001ed4:	4b64      	ldr	r3, [pc, #400]	; (8002068 <HAL_ADC_Init+0x2d4>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	055b      	lsls	r3, r3, #21
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d108      	bne.n	8001efa <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	0549      	lsls	r1, r1, #21
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	495b      	ldr	r1, [pc, #364]	; (8002074 <HAL_ADC_Init+0x2e0>)
 8001f06:	400a      	ands	r2, r1
 8001f08:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68d9      	ldr	r1, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d101      	bne.n	8001f20 <HAL_ADC_Init+0x18c>
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	e000      	b.n	8001f22 <HAL_ADC_Init+0x18e>
 8001f20:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001f22:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2020      	movs	r0, #32
 8001f28:	5c1b      	ldrb	r3, [r3, r0]
 8001f2a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001f2c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	202c      	movs	r0, #44	; 0x2c
 8001f32:	5c1b      	ldrb	r3, [r3, r0]
 8001f34:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f36:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001f3c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001f44:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001f4c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f5a:	23c2      	movs	r3, #194	; 0xc2
 8001f5c:	33ff      	adds	r3, #255	; 0xff
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d00b      	beq.n	8001f7a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68d9      	ldr	r1, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2221      	movs	r2, #33	; 0x21
 8001f7e:	5c9b      	ldrb	r3, [r3, r2]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d11a      	bne.n	8001fba <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	5c9b      	ldrb	r3, [r3, r2]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2180      	movs	r1, #128	; 0x80
 8001f9a:	0249      	lsls	r1, r1, #9
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	60da      	str	r2, [r3, #12]
 8001fa0:	e00b      	b.n	8001fba <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d11f      	bne.n	8002002 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	492a      	ldr	r1, [pc, #168]	; (8002078 <HAL_ADC_Init+0x2e4>)
 8001fce:	400a      	ands	r2, r1
 8001fd0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6919      	ldr	r1, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001fe0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001fe6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	611a      	str	r2, [r3, #16]
 8002000:	e00e      	b.n	8002020 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	2b01      	cmp	r3, #1
 800200e:	d107      	bne.n	8002020 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2101      	movs	r1, #1
 800201c:	438a      	bics	r2, r1
 800201e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2107      	movs	r1, #7
 800202c:	438a      	bics	r2, r1
 800202e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6959      	ldr	r1, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204c:	2203      	movs	r2, #3
 800204e:	4393      	bics	r3, r2
 8002050:	2201      	movs	r2, #1
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	0018      	movs	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	b002      	add	sp, #8
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	fffffefd 	.word	0xfffffefd
 8002068:	40012708 	.word	0x40012708
 800206c:	ffc3ffff 	.word	0xffc3ffff
 8002070:	fdffffff 	.word	0xfdffffff
 8002074:	fffe0219 	.word	0xfffe0219
 8002078:	fffffc03 	.word	0xfffffc03

0800207c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2250      	movs	r2, #80	; 0x50
 800208a:	5c9b      	ldrb	r3, [r3, r2]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x18>
 8002090:	2302      	movs	r3, #2
 8002092:	e06c      	b.n	800216e <HAL_ADC_ConfigChannel+0xf2>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2250      	movs	r2, #80	; 0x50
 8002098:	2101      	movs	r1, #1
 800209a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2204      	movs	r2, #4
 80020a4:	4013      	ands	r3, r2
 80020a6:	d00b      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	2220      	movs	r2, #32
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2250      	movs	r2, #80	; 0x50
 80020b8:	2100      	movs	r1, #0
 80020ba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e056      	b.n	800216e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a2c      	ldr	r2, [pc, #176]	; (8002178 <HAL_ADC_ConfigChannel+0xfc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d028      	beq.n	800211c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	035b      	lsls	r3, r3, #13
 80020d6:	0b5a      	lsrs	r2, r3, #13
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	02db      	lsls	r3, r3, #11
 80020e8:	4013      	ands	r3, r2
 80020ea:	d009      	beq.n	8002100 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80020ec:	4b23      	ldr	r3, [pc, #140]	; (800217c <HAL_ADC_ConfigChannel+0x100>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_ADC_ConfigChannel+0x100>)
 80020f2:	2180      	movs	r1, #128	; 0x80
 80020f4:	0409      	lsls	r1, r1, #16
 80020f6:	430a      	orrs	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80020fa:	200a      	movs	r0, #10
 80020fc:	f000 f844 	bl	8002188 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	029b      	lsls	r3, r3, #10
 8002108:	4013      	ands	r3, r2
 800210a:	d02b      	beq.n	8002164 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_ADC_ConfigChannel+0x100>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_ADC_ConfigChannel+0x100>)
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	03c9      	lsls	r1, r1, #15
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e023      	b.n	8002164 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	035b      	lsls	r3, r3, #13
 8002128:	0b5b      	lsrs	r3, r3, #13
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	400a      	ands	r2, r1
 8002132:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	02db      	lsls	r3, r3, #11
 800213c:	4013      	ands	r3, r2
 800213e:	d005      	beq.n	800214c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <HAL_ADC_ConfigChannel+0x100>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <HAL_ADC_ConfigChannel+0x100>)
 8002146:	490e      	ldr	r1, [pc, #56]	; (8002180 <HAL_ADC_ConfigChannel+0x104>)
 8002148:	400a      	ands	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	029b      	lsls	r3, r3, #10
 8002154:	4013      	ands	r3, r2
 8002156:	d005      	beq.n	8002164 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_ADC_ConfigChannel+0x100>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <HAL_ADC_ConfigChannel+0x100>)
 800215e:	4909      	ldr	r1, [pc, #36]	; (8002184 <HAL_ADC_ConfigChannel+0x108>)
 8002160:	400a      	ands	r2, r1
 8002162:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2250      	movs	r2, #80	; 0x50
 8002168:	2100      	movs	r1, #0
 800216a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	b002      	add	sp, #8
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	00001001 	.word	0x00001001
 800217c:	40012708 	.word	0x40012708
 8002180:	ff7fffff 	.word	0xff7fffff
 8002184:	ffbfffff 	.word	0xffbfffff

08002188 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <ADC_DelayMicroSecond+0x38>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	490b      	ldr	r1, [pc, #44]	; (80021c4 <ADC_DelayMicroSecond+0x3c>)
 8002196:	0018      	movs	r0, r3
 8002198:	f7fd ffc0 	bl	800011c <__udivsi3>
 800219c:	0003      	movs	r3, r0
 800219e:	001a      	movs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4353      	muls	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80021a6:	e002      	b.n	80021ae <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f9      	bne.n	80021a8 <ADC_DelayMicroSecond+0x20>
  }
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b004      	add	sp, #16
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	20000000 	.word	0x20000000
 80021c4:	000f4240 	.word	0x000f4240

080021c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	0002      	movs	r2, r0
 80021d0:	1dfb      	adds	r3, r7, #7
 80021d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b7f      	cmp	r3, #127	; 0x7f
 80021da:	d809      	bhi.n	80021f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021dc:	1dfb      	adds	r3, r7, #7
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	001a      	movs	r2, r3
 80021e2:	231f      	movs	r3, #31
 80021e4:	401a      	ands	r2, r3
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <__NVIC_EnableIRQ+0x30>)
 80021e8:	2101      	movs	r1, #1
 80021ea:	4091      	lsls	r1, r2
 80021ec:	000a      	movs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
  }
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b002      	add	sp, #8
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	e000e100 	.word	0xe000e100

080021fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	0002      	movs	r2, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	1dfb      	adds	r3, r7, #7
 8002208:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800220a:	1dfb      	adds	r3, r7, #7
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b7f      	cmp	r3, #127	; 0x7f
 8002210:	d828      	bhi.n	8002264 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002212:	4a2f      	ldr	r2, [pc, #188]	; (80022d0 <__NVIC_SetPriority+0xd4>)
 8002214:	1dfb      	adds	r3, r7, #7
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b25b      	sxtb	r3, r3
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	33c0      	adds	r3, #192	; 0xc0
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	589b      	ldr	r3, [r3, r2]
 8002222:	1dfa      	adds	r2, r7, #7
 8002224:	7812      	ldrb	r2, [r2, #0]
 8002226:	0011      	movs	r1, r2
 8002228:	2203      	movs	r2, #3
 800222a:	400a      	ands	r2, r1
 800222c:	00d2      	lsls	r2, r2, #3
 800222e:	21ff      	movs	r1, #255	; 0xff
 8002230:	4091      	lsls	r1, r2
 8002232:	000a      	movs	r2, r1
 8002234:	43d2      	mvns	r2, r2
 8002236:	401a      	ands	r2, r3
 8002238:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	019b      	lsls	r3, r3, #6
 800223e:	22ff      	movs	r2, #255	; 0xff
 8002240:	401a      	ands	r2, r3
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	0018      	movs	r0, r3
 8002248:	2303      	movs	r3, #3
 800224a:	4003      	ands	r3, r0
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002250:	481f      	ldr	r0, [pc, #124]	; (80022d0 <__NVIC_SetPriority+0xd4>)
 8002252:	1dfb      	adds	r3, r7, #7
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b25b      	sxtb	r3, r3
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	430a      	orrs	r2, r1
 800225c:	33c0      	adds	r3, #192	; 0xc0
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002262:	e031      	b.n	80022c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002264:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <__NVIC_SetPriority+0xd8>)
 8002266:	1dfb      	adds	r3, r7, #7
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	0019      	movs	r1, r3
 800226c:	230f      	movs	r3, #15
 800226e:	400b      	ands	r3, r1
 8002270:	3b08      	subs	r3, #8
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3306      	adds	r3, #6
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	18d3      	adds	r3, r2, r3
 800227a:	3304      	adds	r3, #4
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1dfa      	adds	r2, r7, #7
 8002280:	7812      	ldrb	r2, [r2, #0]
 8002282:	0011      	movs	r1, r2
 8002284:	2203      	movs	r2, #3
 8002286:	400a      	ands	r2, r1
 8002288:	00d2      	lsls	r2, r2, #3
 800228a:	21ff      	movs	r1, #255	; 0xff
 800228c:	4091      	lsls	r1, r2
 800228e:	000a      	movs	r2, r1
 8002290:	43d2      	mvns	r2, r2
 8002292:	401a      	ands	r2, r3
 8002294:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	019b      	lsls	r3, r3, #6
 800229a:	22ff      	movs	r2, #255	; 0xff
 800229c:	401a      	ands	r2, r3
 800229e:	1dfb      	adds	r3, r7, #7
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	0018      	movs	r0, r3
 80022a4:	2303      	movs	r3, #3
 80022a6:	4003      	ands	r3, r0
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ac:	4809      	ldr	r0, [pc, #36]	; (80022d4 <__NVIC_SetPriority+0xd8>)
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	001c      	movs	r4, r3
 80022b4:	230f      	movs	r3, #15
 80022b6:	4023      	ands	r3, r4
 80022b8:	3b08      	subs	r3, #8
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	430a      	orrs	r2, r1
 80022be:	3306      	adds	r3, #6
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	18c3      	adds	r3, r0, r3
 80022c4:	3304      	adds	r3, #4
 80022c6:	601a      	str	r2, [r3, #0]
}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b003      	add	sp, #12
 80022ce:	bd90      	pop	{r4, r7, pc}
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1e5a      	subs	r2, r3, #1
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	045b      	lsls	r3, r3, #17
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d301      	bcc.n	80022f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ec:	2301      	movs	r3, #1
 80022ee:	e010      	b.n	8002312 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <SysTick_Config+0x44>)
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	3a01      	subs	r2, #1
 80022f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f8:	2301      	movs	r3, #1
 80022fa:	425b      	negs	r3, r3
 80022fc:	2103      	movs	r1, #3
 80022fe:	0018      	movs	r0, r3
 8002300:	f7ff ff7c 	bl	80021fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <SysTick_Config+0x44>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <SysTick_Config+0x44>)
 800230c:	2207      	movs	r2, #7
 800230e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002310:	2300      	movs	r3, #0
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b002      	add	sp, #8
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	e000e010 	.word	0xe000e010

08002320 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	210f      	movs	r1, #15
 800232c:	187b      	adds	r3, r7, r1
 800232e:	1c02      	adds	r2, r0, #0
 8002330:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	187b      	adds	r3, r7, r1
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	b25b      	sxtb	r3, r3
 800233a:	0011      	movs	r1, r2
 800233c:	0018      	movs	r0, r3
 800233e:	f7ff ff5d 	bl	80021fc <__NVIC_SetPriority>
}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	46bd      	mov	sp, r7
 8002346:	b004      	add	sp, #16
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	0002      	movs	r2, r0
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002356:	1dfb      	adds	r3, r7, #7
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b25b      	sxtb	r3, r3
 800235c:	0018      	movs	r0, r3
 800235e:	f7ff ff33 	bl	80021c8 <__NVIC_EnableIRQ>
}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	46bd      	mov	sp, r7
 8002366:	b002      	add	sp, #8
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0018      	movs	r0, r3
 8002376:	f7ff ffaf 	bl	80022d8 <SysTick_Config>
 800237a:	0003      	movs	r3, r0
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e061      	b.n	800245a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a32      	ldr	r2, [pc, #200]	; (8002464 <HAL_DMA_Init+0xe0>)
 800239c:	4694      	mov	ip, r2
 800239e:	4463      	add	r3, ip
 80023a0:	2114      	movs	r1, #20
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7fd feba 	bl	800011c <__udivsi3>
 80023a8:	0003      	movs	r3, r0
 80023aa:	009a      	lsls	r2, r3, #2
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a2d      	ldr	r2, [pc, #180]	; (8002468 <HAL_DMA_Init+0xe4>)
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2225      	movs	r2, #37	; 0x25
 80023ba:	2102      	movs	r1, #2
 80023bc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4a28      	ldr	r2, [pc, #160]	; (800246c <HAL_DMA_Init+0xe8>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	01db      	lsls	r3, r3, #7
 800240c:	429a      	cmp	r2, r3
 800240e:	d018      	beq.n	8002442 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <HAL_DMA_Init+0xec>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	211c      	movs	r1, #28
 800241a:	400b      	ands	r3, r1
 800241c:	210f      	movs	r1, #15
 800241e:	4099      	lsls	r1, r3
 8002420:	000b      	movs	r3, r1
 8002422:	43d9      	mvns	r1, r3
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_DMA_Init+0xec>)
 8002426:	400a      	ands	r2, r1
 8002428:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_DMA_Init+0xec>)
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	201c      	movs	r0, #28
 8002438:	4003      	ands	r3, r0
 800243a:	409a      	lsls	r2, r3
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <HAL_DMA_Init+0xec>)
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2225      	movs	r2, #37	; 0x25
 800244c:	2101      	movs	r1, #1
 800244e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2224      	movs	r2, #36	; 0x24
 8002454:	2100      	movs	r1, #0
 8002456:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b004      	add	sp, #16
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	bffdfff8 	.word	0xbffdfff8
 8002468:	40020000 	.word	0x40020000
 800246c:	ffff800f 	.word	0xffff800f
 8002470:	400200a8 	.word	0x400200a8

08002474 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800247c:	230f      	movs	r3, #15
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2225      	movs	r2, #37	; 0x25
 8002488:	5c9b      	ldrb	r3, [r3, r2]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d008      	beq.n	80024a2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2204      	movs	r2, #4
 8002494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2224      	movs	r2, #36	; 0x24
 800249a:	2100      	movs	r1, #0
 800249c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e024      	b.n	80024ec <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	210e      	movs	r1, #14
 80024ae:	438a      	bics	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	438a      	bics	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	221c      	movs	r2, #28
 80024c8:	401a      	ands	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	2101      	movs	r1, #1
 80024d0:	4091      	lsls	r1, r2
 80024d2:	000a      	movs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2225      	movs	r2, #37	; 0x25
 80024da:	2101      	movs	r1, #1
 80024dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2224      	movs	r2, #36	; 0x24
 80024e2:	2100      	movs	r1, #0
 80024e4:	5499      	strb	r1, [r3, r2]

    return status;
 80024e6:	230f      	movs	r3, #15
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	210f      	movs	r1, #15
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2225      	movs	r2, #37	; 0x25
 8002508:	5c9b      	ldrb	r3, [r3, r2]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d006      	beq.n	800251e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2204      	movs	r2, #4
 8002514:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002516:	187b      	adds	r3, r7, r1
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
 800251c:	e02a      	b.n	8002574 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	210e      	movs	r1, #14
 800252a:	438a      	bics	r2, r1
 800252c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2101      	movs	r1, #1
 800253a:	438a      	bics	r2, r1
 800253c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	221c      	movs	r2, #28
 8002544:	401a      	ands	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2101      	movs	r1, #1
 800254c:	4091      	lsls	r1, r2
 800254e:	000a      	movs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2225      	movs	r2, #37	; 0x25
 8002556:	2101      	movs	r1, #1
 8002558:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2224      	movs	r2, #36	; 0x24
 800255e:	2100      	movs	r1, #0
 8002560:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	0010      	movs	r0, r2
 8002572:	4798      	blx	r3
    }
  }
  return status;
 8002574:	230f      	movs	r3, #15
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	781b      	ldrb	r3, [r3, #0]
}
 800257a:	0018      	movs	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	b004      	add	sp, #16
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	221c      	movs	r2, #28
 80025a0:	4013      	ands	r3, r2
 80025a2:	2204      	movs	r2, #4
 80025a4:	409a      	lsls	r2, r3
 80025a6:	0013      	movs	r3, r2
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4013      	ands	r3, r2
 80025ac:	d026      	beq.n	80025fc <HAL_DMA_IRQHandler+0x7a>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2204      	movs	r2, #4
 80025b2:	4013      	ands	r3, r2
 80025b4:	d022      	beq.n	80025fc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2220      	movs	r2, #32
 80025be:	4013      	ands	r3, r2
 80025c0:	d107      	bne.n	80025d2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2104      	movs	r1, #4
 80025ce:	438a      	bics	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	221c      	movs	r2, #28
 80025d8:	401a      	ands	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2104      	movs	r1, #4
 80025e0:	4091      	lsls	r1, r2
 80025e2:	000a      	movs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d100      	bne.n	80025f0 <HAL_DMA_IRQHandler+0x6e>
 80025ee:	e071      	b.n	80026d4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	0010      	movs	r0, r2
 80025f8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80025fa:	e06b      	b.n	80026d4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002600:	221c      	movs	r2, #28
 8002602:	4013      	ands	r3, r2
 8002604:	2202      	movs	r2, #2
 8002606:	409a      	lsls	r2, r3
 8002608:	0013      	movs	r3, r2
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	d02d      	beq.n	800266c <HAL_DMA_IRQHandler+0xea>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2202      	movs	r2, #2
 8002614:	4013      	ands	r3, r2
 8002616:	d029      	beq.n	800266c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2220      	movs	r2, #32
 8002620:	4013      	ands	r3, r2
 8002622:	d10b      	bne.n	800263c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	210a      	movs	r1, #10
 8002630:	438a      	bics	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2225      	movs	r2, #37	; 0x25
 8002638:	2101      	movs	r1, #1
 800263a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002640:	221c      	movs	r2, #28
 8002642:	401a      	ands	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	2102      	movs	r1, #2
 800264a:	4091      	lsls	r1, r2
 800264c:	000a      	movs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2224      	movs	r2, #36	; 0x24
 8002654:	2100      	movs	r1, #0
 8002656:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d039      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	0010      	movs	r0, r2
 8002668:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800266a:	e033      	b.n	80026d4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	221c      	movs	r2, #28
 8002672:	4013      	ands	r3, r2
 8002674:	2208      	movs	r2, #8
 8002676:	409a      	lsls	r2, r3
 8002678:	0013      	movs	r3, r2
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4013      	ands	r3, r2
 800267e:	d02a      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x154>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2208      	movs	r2, #8
 8002684:	4013      	ands	r3, r2
 8002686:	d026      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	210e      	movs	r1, #14
 8002694:	438a      	bics	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	221c      	movs	r2, #28
 800269e:	401a      	ands	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	2101      	movs	r1, #1
 80026a6:	4091      	lsls	r1, r2
 80026a8:	000a      	movs	r2, r1
 80026aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2225      	movs	r2, #37	; 0x25
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2224      	movs	r2, #36	; 0x24
 80026be:	2100      	movs	r1, #0
 80026c0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	0010      	movs	r0, r2
 80026d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46c0      	nop			; (mov r8, r8)
}
 80026d8:	46bd      	mov	sp, r7
 80026da:	b004      	add	sp, #16
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80026f6:	e155      	b.n	80029a4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2101      	movs	r1, #1
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4091      	lsls	r1, r2
 8002702:	000a      	movs	r2, r1
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d100      	bne.n	8002710 <HAL_GPIO_Init+0x30>
 800270e:	e146      	b.n	800299e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2203      	movs	r2, #3
 8002716:	4013      	ands	r3, r2
 8002718:	2b01      	cmp	r3, #1
 800271a:	d005      	beq.n	8002728 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2203      	movs	r2, #3
 8002722:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002724:	2b02      	cmp	r3, #2
 8002726:	d130      	bne.n	800278a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	409a      	lsls	r2, r3
 8002736:	0013      	movs	r3, r2
 8002738:	43da      	mvns	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	409a      	lsls	r2, r3
 800274a:	0013      	movs	r3, r2
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800275e:	2201      	movs	r2, #1
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	409a      	lsls	r2, r3
 8002764:	0013      	movs	r3, r2
 8002766:	43da      	mvns	r2, r3
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	2201      	movs	r2, #1
 8002776:	401a      	ands	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
 800277c:	0013      	movs	r3, r2
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2203      	movs	r2, #3
 8002790:	4013      	ands	r3, r2
 8002792:	2b03      	cmp	r3, #3
 8002794:	d017      	beq.n	80027c6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	2203      	movs	r2, #3
 80027a2:	409a      	lsls	r2, r3
 80027a4:	0013      	movs	r3, r2
 80027a6:	43da      	mvns	r2, r3
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	409a      	lsls	r2, r3
 80027b8:	0013      	movs	r3, r2
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2203      	movs	r2, #3
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d123      	bne.n	800281a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	08da      	lsrs	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3208      	adds	r2, #8
 80027da:	0092      	lsls	r2, r2, #2
 80027dc:	58d3      	ldr	r3, [r2, r3]
 80027de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2207      	movs	r2, #7
 80027e4:	4013      	ands	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	220f      	movs	r2, #15
 80027ea:	409a      	lsls	r2, r3
 80027ec:	0013      	movs	r3, r2
 80027ee:	43da      	mvns	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2107      	movs	r1, #7
 80027fe:	400b      	ands	r3, r1
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	409a      	lsls	r2, r3
 8002804:	0013      	movs	r3, r2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	08da      	lsrs	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3208      	adds	r2, #8
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	6939      	ldr	r1, [r7, #16]
 8002818:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	409a      	lsls	r2, r3
 8002828:	0013      	movs	r3, r2
 800282a:	43da      	mvns	r2, r3
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2203      	movs	r2, #3
 8002838:	401a      	ands	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	409a      	lsls	r2, r3
 8002840:	0013      	movs	r3, r2
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	23c0      	movs	r3, #192	; 0xc0
 8002854:	029b      	lsls	r3, r3, #10
 8002856:	4013      	ands	r3, r2
 8002858:	d100      	bne.n	800285c <HAL_GPIO_Init+0x17c>
 800285a:	e0a0      	b.n	800299e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285c:	4b57      	ldr	r3, [pc, #348]	; (80029bc <HAL_GPIO_Init+0x2dc>)
 800285e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002860:	4b56      	ldr	r3, [pc, #344]	; (80029bc <HAL_GPIO_Init+0x2dc>)
 8002862:	2101      	movs	r1, #1
 8002864:	430a      	orrs	r2, r1
 8002866:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002868:	4a55      	ldr	r2, [pc, #340]	; (80029c0 <HAL_GPIO_Init+0x2e0>)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	3302      	adds	r3, #2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	589b      	ldr	r3, [r3, r2]
 8002874:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2203      	movs	r2, #3
 800287a:	4013      	ands	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	409a      	lsls	r2, r3
 8002882:	0013      	movs	r3, r2
 8002884:	43da      	mvns	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	23a0      	movs	r3, #160	; 0xa0
 8002890:	05db      	lsls	r3, r3, #23
 8002892:	429a      	cmp	r2, r3
 8002894:	d01f      	beq.n	80028d6 <HAL_GPIO_Init+0x1f6>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4a      	ldr	r2, [pc, #296]	; (80029c4 <HAL_GPIO_Init+0x2e4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d019      	beq.n	80028d2 <HAL_GPIO_Init+0x1f2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a49      	ldr	r2, [pc, #292]	; (80029c8 <HAL_GPIO_Init+0x2e8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_GPIO_Init+0x1ee>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a48      	ldr	r2, [pc, #288]	; (80029cc <HAL_GPIO_Init+0x2ec>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00d      	beq.n	80028ca <HAL_GPIO_Init+0x1ea>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a47      	ldr	r2, [pc, #284]	; (80029d0 <HAL_GPIO_Init+0x2f0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <HAL_GPIO_Init+0x1e6>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a46      	ldr	r2, [pc, #280]	; (80029d4 <HAL_GPIO_Init+0x2f4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_GPIO_Init+0x1e2>
 80028be:	2305      	movs	r3, #5
 80028c0:	e00a      	b.n	80028d8 <HAL_GPIO_Init+0x1f8>
 80028c2:	2306      	movs	r3, #6
 80028c4:	e008      	b.n	80028d8 <HAL_GPIO_Init+0x1f8>
 80028c6:	2304      	movs	r3, #4
 80028c8:	e006      	b.n	80028d8 <HAL_GPIO_Init+0x1f8>
 80028ca:	2303      	movs	r3, #3
 80028cc:	e004      	b.n	80028d8 <HAL_GPIO_Init+0x1f8>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e002      	b.n	80028d8 <HAL_GPIO_Init+0x1f8>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_GPIO_Init+0x1f8>
 80028d6:	2300      	movs	r3, #0
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	2103      	movs	r1, #3
 80028dc:	400a      	ands	r2, r1
 80028de:	0092      	lsls	r2, r2, #2
 80028e0:	4093      	lsls	r3, r2
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e8:	4935      	ldr	r1, [pc, #212]	; (80029c0 <HAL_GPIO_Init+0x2e0>)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	3302      	adds	r3, #2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <HAL_GPIO_Init+0x2f8>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43da      	mvns	r2, r3
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	035b      	lsls	r3, r3, #13
 800290e:	4013      	ands	r3, r2
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <HAL_GPIO_Init+0x2f8>)
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002920:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <HAL_GPIO_Init+0x2f8>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	43da      	mvns	r2, r3
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	039b      	lsls	r3, r3, #14
 8002938:	4013      	ands	r3, r2
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002944:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <HAL_GPIO_Init+0x2f8>)
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800294a:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <HAL_GPIO_Init+0x2f8>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43da      	mvns	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	029b      	lsls	r3, r3, #10
 8002962:	4013      	ands	r3, r2
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <HAL_GPIO_Init+0x2f8>)
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002974:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_GPIO_Init+0x2f8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	43da      	mvns	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	025b      	lsls	r3, r3, #9
 800298c:	4013      	ands	r3, r2
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002998:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <HAL_GPIO_Init+0x2f8>)
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3301      	adds	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	40da      	lsrs	r2, r3
 80029ac:	1e13      	subs	r3, r2, #0
 80029ae:	d000      	beq.n	80029b2 <HAL_GPIO_Init+0x2d2>
 80029b0:	e6a2      	b.n	80026f8 <HAL_GPIO_Init+0x18>
  }
}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b006      	add	sp, #24
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010000 	.word	0x40010000
 80029c4:	50000400 	.word	0x50000400
 80029c8:	50000800 	.word	0x50000800
 80029cc:	50000c00 	.word	0x50000c00
 80029d0:	50001000 	.word	0x50001000
 80029d4:	50001c00 	.word	0x50001c00
 80029d8:	40010400 	.word	0x40010400

080029dc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	0008      	movs	r0, r1
 80029e6:	0011      	movs	r1, r2
 80029e8:	1cbb      	adds	r3, r7, #2
 80029ea:	1c02      	adds	r2, r0, #0
 80029ec:	801a      	strh	r2, [r3, #0]
 80029ee:	1c7b      	adds	r3, r7, #1
 80029f0:	1c0a      	adds	r2, r1, #0
 80029f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029f4:	1c7b      	adds	r3, r7, #1
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029fc:	1cbb      	adds	r3, r7, #2
 80029fe:	881a      	ldrh	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002a04:	e003      	b.n	8002a0e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002a06:	1cbb      	adds	r3, r7, #2
 8002a08:	881a      	ldrh	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b002      	add	sp, #8
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e082      	b.n	8002b30 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2241      	movs	r2, #65	; 0x41
 8002a2e:	5c9b      	ldrb	r3, [r3, r2]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d107      	bne.n	8002a46 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2240      	movs	r2, #64	; 0x40
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7fe fd61 	bl	8001508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2241      	movs	r2, #65	; 0x41
 8002a4a:	2124      	movs	r1, #36	; 0x24
 8002a4c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2101      	movs	r1, #1
 8002a5a:	438a      	bics	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4934      	ldr	r1, [pc, #208]	; (8002b38 <HAL_I2C_Init+0x120>)
 8002a68:	400a      	ands	r2, r1
 8002a6a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4931      	ldr	r1, [pc, #196]	; (8002b3c <HAL_I2C_Init+0x124>)
 8002a78:	400a      	ands	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d108      	bne.n	8002a96 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2180      	movs	r1, #128	; 0x80
 8002a8e:	0209      	lsls	r1, r1, #8
 8002a90:	430a      	orrs	r2, r1
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	e007      	b.n	8002aa6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2184      	movs	r1, #132	; 0x84
 8002aa0:	0209      	lsls	r1, r1, #8
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d104      	bne.n	8002ab8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	491f      	ldr	r1, [pc, #124]	; (8002b40 <HAL_I2C_Init+0x128>)
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	491a      	ldr	r1, [pc, #104]	; (8002b3c <HAL_I2C_Init+0x124>)
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69d9      	ldr	r1, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1a      	ldr	r2, [r3, #32]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2241      	movs	r2, #65	; 0x41
 8002b1c:	2120      	movs	r1, #32
 8002b1e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2242      	movs	r2, #66	; 0x42
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	f0ffffff 	.word	0xf0ffffff
 8002b3c:	ffff7fff 	.word	0xffff7fff
 8002b40:	02008000 	.word	0x02008000

08002b44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b44:	b590      	push	{r4, r7, lr}
 8002b46:	b089      	sub	sp, #36	; 0x24
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	0008      	movs	r0, r1
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	0019      	movs	r1, r3
 8002b52:	230a      	movs	r3, #10
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	1c02      	adds	r2, r0, #0
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	2308      	movs	r3, #8
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	1c0a      	adds	r2, r1, #0
 8002b60:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2241      	movs	r2, #65	; 0x41
 8002b66:	5c9b      	ldrb	r3, [r3, r2]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	d000      	beq.n	8002b70 <HAL_I2C_Master_Transmit+0x2c>
 8002b6e:	e0e7      	b.n	8002d40 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2240      	movs	r2, #64	; 0x40
 8002b74:	5c9b      	ldrb	r3, [r3, r2]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_I2C_Master_Transmit+0x3a>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e0e1      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1fe>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2240      	movs	r2, #64	; 0x40
 8002b82:	2101      	movs	r1, #1
 8002b84:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b86:	f7ff f8d7 	bl	8001d38 <HAL_GetTick>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	0219      	lsls	r1, r3, #8
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2319      	movs	r3, #25
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f000 fa04 	bl	8002fa8 <I2C_WaitOnFlagUntilTimeout>
 8002ba0:	1e03      	subs	r3, r0, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0cc      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2241      	movs	r2, #65	; 0x41
 8002bac:	2121      	movs	r1, #33	; 0x21
 8002bae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2242      	movs	r2, #66	; 0x42
 8002bb4:	2110      	movs	r1, #16
 8002bb6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	18ba      	adds	r2, r7, r2
 8002bca:	8812      	ldrh	r2, [r2, #0]
 8002bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2bff      	cmp	r3, #255	; 0xff
 8002bdc:	d911      	bls.n	8002c02 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	22ff      	movs	r2, #255	; 0xff
 8002be2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	045c      	lsls	r4, r3, #17
 8002bee:	230a      	movs	r3, #10
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	8819      	ldrh	r1, [r3, #0]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	4b55      	ldr	r3, [pc, #340]	; (8002d4c <HAL_I2C_Master_Transmit+0x208>)
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	0023      	movs	r3, r4
 8002bfc:	f000 fc2e 	bl	800345c <I2C_TransferConfig>
 8002c00:	e075      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	049c      	lsls	r4, r3, #18
 8002c16:	230a      	movs	r3, #10
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	8819      	ldrh	r1, [r3, #0]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <HAL_I2C_Master_Transmit+0x208>)
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	0023      	movs	r3, r4
 8002c24:	f000 fc1a 	bl	800345c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c28:	e061      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f000 fa07 	bl	8003044 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c36:	1e03      	subs	r3, r0, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e081      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d03a      	beq.n	8002cee <HAL_I2C_Master_Transmit+0x1aa>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d136      	bne.n	8002cee <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	0013      	movs	r3, r2
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	f000 f98b 	bl	8002fa8 <I2C_WaitOnFlagUntilTimeout>
 8002c92:	1e03      	subs	r3, r0, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e053      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2bff      	cmp	r3, #255	; 0xff
 8002ca2:	d911      	bls.n	8002cc8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	22ff      	movs	r2, #255	; 0xff
 8002ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	045c      	lsls	r4, r3, #17
 8002cb4:	230a      	movs	r3, #10
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	8819      	ldrh	r1, [r3, #0]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	0023      	movs	r3, r4
 8002cc2:	f000 fbcb 	bl	800345c <I2C_TransferConfig>
 8002cc6:	e012      	b.n	8002cee <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	049c      	lsls	r4, r3, #18
 8002cdc:	230a      	movs	r3, #10
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	8819      	ldrh	r1, [r3, #0]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	0023      	movs	r3, r4
 8002cea:	f000 fbb7 	bl	800345c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d198      	bne.n	8002c2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 f9e6 	bl	80030d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d04:	1e03      	subs	r3, r0, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e01a      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2220      	movs	r2, #32
 8002d12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	490c      	ldr	r1, [pc, #48]	; (8002d50 <HAL_I2C_Master_Transmit+0x20c>)
 8002d20:	400a      	ands	r2, r1
 8002d22:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2241      	movs	r2, #65	; 0x41
 8002d28:	2120      	movs	r1, #32
 8002d2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2242      	movs	r2, #66	; 0x42
 8002d30:	2100      	movs	r1, #0
 8002d32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2240      	movs	r2, #64	; 0x40
 8002d38:	2100      	movs	r1, #0
 8002d3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
  }
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b007      	add	sp, #28
 8002d48:	bd90      	pop	{r4, r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	80002000 	.word	0x80002000
 8002d50:	fe00e800 	.word	0xfe00e800

08002d54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b089      	sub	sp, #36	; 0x24
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	0008      	movs	r0, r1
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	0019      	movs	r1, r3
 8002d62:	230a      	movs	r3, #10
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	1c02      	adds	r2, r0, #0
 8002d68:	801a      	strh	r2, [r3, #0]
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	1c0a      	adds	r2, r1, #0
 8002d70:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2241      	movs	r2, #65	; 0x41
 8002d76:	5c9b      	ldrb	r3, [r3, r2]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d000      	beq.n	8002d80 <HAL_I2C_Master_Receive+0x2c>
 8002d7e:	e0e8      	b.n	8002f52 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2240      	movs	r2, #64	; 0x40
 8002d84:	5c9b      	ldrb	r3, [r3, r2]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_I2C_Master_Receive+0x3a>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e0e2      	b.n	8002f54 <HAL_I2C_Master_Receive+0x200>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2240      	movs	r2, #64	; 0x40
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d96:	f7fe ffcf 	bl	8001d38 <HAL_GetTick>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	0219      	lsls	r1, r3, #8
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2319      	movs	r3, #25
 8002daa:	2201      	movs	r2, #1
 8002dac:	f000 f8fc 	bl	8002fa8 <I2C_WaitOnFlagUntilTimeout>
 8002db0:	1e03      	subs	r3, r0, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0cd      	b.n	8002f54 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2241      	movs	r2, #65	; 0x41
 8002dbc:	2122      	movs	r1, #34	; 0x22
 8002dbe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2242      	movs	r2, #66	; 0x42
 8002dc4:	2110      	movs	r1, #16
 8002dc6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2208      	movs	r2, #8
 8002dd8:	18ba      	adds	r2, r7, r2
 8002dda:	8812      	ldrh	r2, [r2, #0]
 8002ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2bff      	cmp	r3, #255	; 0xff
 8002dec:	d911      	bls.n	8002e12 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	22ff      	movs	r2, #255	; 0xff
 8002df2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	045c      	lsls	r4, r3, #17
 8002dfe:	230a      	movs	r3, #10
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	8819      	ldrh	r1, [r3, #0]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	4b55      	ldr	r3, [pc, #340]	; (8002f5c <HAL_I2C_Master_Receive+0x208>)
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	0023      	movs	r3, r4
 8002e0c:	f000 fb26 	bl	800345c <I2C_TransferConfig>
 8002e10:	e076      	b.n	8002f00 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	049c      	lsls	r4, r3, #18
 8002e26:	230a      	movs	r3, #10
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	8819      	ldrh	r1, [r3, #0]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	4b4b      	ldr	r3, [pc, #300]	; (8002f5c <HAL_I2C_Master_Receive+0x208>)
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	0023      	movs	r3, r4
 8002e34:	f000 fb12 	bl	800345c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002e38:	e062      	b.n	8002f00 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	0018      	movs	r0, r3
 8002e42:	f000 f989 	bl	8003158 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e46:	1e03      	subs	r3, r0, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e082      	b.n	8002f54 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d03a      	beq.n	8002f00 <HAL_I2C_Master_Receive+0x1ac>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d136      	bne.n	8002f00 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	0013      	movs	r3, r2
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2180      	movs	r1, #128	; 0x80
 8002ea0:	f000 f882 	bl	8002fa8 <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	1e03      	subs	r3, r0, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e053      	b.n	8002f54 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2bff      	cmp	r3, #255	; 0xff
 8002eb4:	d911      	bls.n	8002eda <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	22ff      	movs	r2, #255	; 0xff
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	045c      	lsls	r4, r3, #17
 8002ec6:	230a      	movs	r3, #10
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	8819      	ldrh	r1, [r3, #0]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	0023      	movs	r3, r4
 8002ed4:	f000 fac2 	bl	800345c <I2C_TransferConfig>
 8002ed8:	e012      	b.n	8002f00 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	049c      	lsls	r4, r3, #18
 8002eee:	230a      	movs	r3, #10
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	8819      	ldrh	r1, [r3, #0]
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	0023      	movs	r3, r4
 8002efc:	f000 faae 	bl	800345c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d197      	bne.n	8002e3a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f000 f8dd 	bl	80030d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f16:	1e03      	subs	r3, r0, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e01a      	b.n	8002f54 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2220      	movs	r2, #32
 8002f24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	490b      	ldr	r1, [pc, #44]	; (8002f60 <HAL_I2C_Master_Receive+0x20c>)
 8002f32:	400a      	ands	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2241      	movs	r2, #65	; 0x41
 8002f3a:	2120      	movs	r1, #32
 8002f3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2242      	movs	r2, #66	; 0x42
 8002f42:	2100      	movs	r1, #0
 8002f44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2240      	movs	r2, #64	; 0x40
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e000      	b.n	8002f54 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002f52:	2302      	movs	r3, #2
  }
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b007      	add	sp, #28
 8002f5a:	bd90      	pop	{r4, r7, pc}
 8002f5c:	80002400 	.word	0x80002400
 8002f60:	fe00e800 	.word	0xfe00e800

08002f64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2202      	movs	r2, #2
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d103      	bne.n	8002f82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d007      	beq.n	8002fa0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	619a      	str	r2, [r3, #24]
  }
}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b002      	add	sp, #8
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	1dfb      	adds	r3, r7, #7
 8002fb6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fb8:	e030      	b.n	800301c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	d02d      	beq.n	800301c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc0:	f7fe feba 	bl	8001d38 <HAL_GetTick>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d302      	bcc.n	8002fd6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d122      	bne.n	800301c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	425a      	negs	r2, r3
 8002fe6:	4153      	adcs	r3, r2
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	001a      	movs	r2, r3
 8002fec:	1dfb      	adds	r3, r7, #7
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d113      	bne.n	800301c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2241      	movs	r2, #65	; 0x41
 8003004:	2120      	movs	r1, #32
 8003006:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2242      	movs	r2, #66	; 0x42
 800300c:	2100      	movs	r1, #0
 800300e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2240      	movs	r2, #64	; 0x40
 8003014:	2100      	movs	r1, #0
 8003016:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e00f      	b.n	800303c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	4013      	ands	r3, r2
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	425a      	negs	r2, r3
 800302c:	4153      	adcs	r3, r2
 800302e:	b2db      	uxtb	r3, r3
 8003030:	001a      	movs	r2, r3
 8003032:	1dfb      	adds	r3, r7, #7
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d0bf      	beq.n	8002fba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}

08003044 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003050:	e032      	b.n	80030b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	0018      	movs	r0, r3
 800305a:	f000 f8ff 	bl	800325c <I2C_IsErrorOccurred>
 800305e:	1e03      	subs	r3, r0, #0
 8003060:	d001      	beq.n	8003066 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e030      	b.n	80030c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3301      	adds	r3, #1
 800306a:	d025      	beq.n	80030b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306c:	f7fe fe64 	bl	8001d38 <HAL_GetTick>
 8003070:	0002      	movs	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	429a      	cmp	r2, r3
 800307a:	d302      	bcc.n	8003082 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11a      	bne.n	80030b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2202      	movs	r2, #2
 800308a:	4013      	ands	r3, r2
 800308c:	2b02      	cmp	r3, #2
 800308e:	d013      	beq.n	80030b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	2220      	movs	r2, #32
 8003096:	431a      	orrs	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2241      	movs	r2, #65	; 0x41
 80030a0:	2120      	movs	r1, #32
 80030a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2242      	movs	r2, #66	; 0x42
 80030a8:	2100      	movs	r1, #0
 80030aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2240      	movs	r2, #64	; 0x40
 80030b0:	2100      	movs	r1, #0
 80030b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e007      	b.n	80030c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2202      	movs	r2, #2
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d1c5      	bne.n	8003052 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b004      	add	sp, #16
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030dc:	e02f      	b.n	800313e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 f8b9 	bl	800325c <I2C_IsErrorOccurred>
 80030ea:	1e03      	subs	r3, r0, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e02d      	b.n	800314e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f2:	f7fe fe21 	bl	8001d38 <HAL_GetTick>
 80030f6:	0002      	movs	r2, r0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d302      	bcc.n	8003108 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d11a      	bne.n	800313e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2220      	movs	r2, #32
 8003110:	4013      	ands	r3, r2
 8003112:	2b20      	cmp	r3, #32
 8003114:	d013      	beq.n	800313e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	2220      	movs	r2, #32
 800311c:	431a      	orrs	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2241      	movs	r2, #65	; 0x41
 8003126:	2120      	movs	r1, #32
 8003128:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2242      	movs	r2, #66	; 0x42
 800312e:	2100      	movs	r1, #0
 8003130:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2240      	movs	r2, #64	; 0x40
 8003136:	2100      	movs	r1, #0
 8003138:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e007      	b.n	800314e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2220      	movs	r2, #32
 8003146:	4013      	ands	r3, r2
 8003148:	2b20      	cmp	r3, #32
 800314a:	d1c8      	bne.n	80030de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b004      	add	sp, #16
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003164:	e06b      	b.n	800323e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	0018      	movs	r0, r3
 800316e:	f000 f875 	bl	800325c <I2C_IsErrorOccurred>
 8003172:	1e03      	subs	r3, r0, #0
 8003174:	d001      	beq.n	800317a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e069      	b.n	800324e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2220      	movs	r2, #32
 8003182:	4013      	ands	r3, r2
 8003184:	2b20      	cmp	r3, #32
 8003186:	d138      	bne.n	80031fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2204      	movs	r2, #4
 8003190:	4013      	ands	r3, r2
 8003192:	2b04      	cmp	r3, #4
 8003194:	d105      	bne.n	80031a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e055      	b.n	800324e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	2210      	movs	r2, #16
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d107      	bne.n	80031c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2210      	movs	r2, #16
 80031b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2204      	movs	r2, #4
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
 80031be:	e002      	b.n	80031c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2220      	movs	r2, #32
 80031cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	491f      	ldr	r1, [pc, #124]	; (8003258 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80031da:	400a      	ands	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2241      	movs	r2, #65	; 0x41
 80031e2:	2120      	movs	r1, #32
 80031e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2242      	movs	r2, #66	; 0x42
 80031ea:	2100      	movs	r1, #0
 80031ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2240      	movs	r2, #64	; 0x40
 80031f2:	2100      	movs	r1, #0
 80031f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e029      	b.n	800324e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fa:	f7fe fd9d 	bl	8001d38 <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d116      	bne.n	800323e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2204      	movs	r2, #4
 8003218:	4013      	ands	r3, r2
 800321a:	2b04      	cmp	r3, #4
 800321c:	d00f      	beq.n	800323e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	2220      	movs	r2, #32
 8003224:	431a      	orrs	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2241      	movs	r2, #65	; 0x41
 800322e:	2120      	movs	r1, #32
 8003230:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2240      	movs	r2, #64	; 0x40
 8003236:	2100      	movs	r1, #0
 8003238:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e007      	b.n	800324e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	2204      	movs	r2, #4
 8003246:	4013      	ands	r3, r2
 8003248:	2b04      	cmp	r3, #4
 800324a:	d18c      	bne.n	8003166 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	0018      	movs	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	b004      	add	sp, #16
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	fe00e800 	.word	0xfe00e800

0800325c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b590      	push	{r4, r7, lr}
 800325e:	b08b      	sub	sp, #44	; 0x2c
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003268:	2327      	movs	r3, #39	; 0x27
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2210      	movs	r2, #16
 8003284:	4013      	ands	r3, r2
 8003286:	d100      	bne.n	800328a <I2C_IsErrorOccurred+0x2e>
 8003288:	e082      	b.n	8003390 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2210      	movs	r2, #16
 8003290:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003292:	e060      	b.n	8003356 <I2C_IsErrorOccurred+0xfa>
 8003294:	2427      	movs	r4, #39	; 0x27
 8003296:	193b      	adds	r3, r7, r4
 8003298:	193a      	adds	r2, r7, r4
 800329a:	7812      	ldrb	r2, [r2, #0]
 800329c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	3301      	adds	r3, #1
 80032a2:	d058      	beq.n	8003356 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032a4:	f7fe fd48 	bl	8001d38 <HAL_GetTick>
 80032a8:	0002      	movs	r2, r0
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d306      	bcc.n	80032c2 <I2C_IsErrorOccurred+0x66>
 80032b4:	193b      	adds	r3, r7, r4
 80032b6:	193a      	adds	r2, r7, r4
 80032b8:	7812      	ldrb	r2, [r2, #0]
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d149      	bne.n	8003356 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	01db      	lsls	r3, r3, #7
 80032cc:	4013      	ands	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032d0:	2013      	movs	r0, #19
 80032d2:	183b      	adds	r3, r7, r0
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	2142      	movs	r1, #66	; 0x42
 80032d8:	5c52      	ldrb	r2, [r2, r1]
 80032da:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	401a      	ands	r2, r3
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d126      	bne.n	800333e <I2C_IsErrorOccurred+0xe2>
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	01db      	lsls	r3, r3, #7
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d021      	beq.n	800333e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80032fa:	183b      	adds	r3, r7, r0
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d01d      	beq.n	800333e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	01c9      	lsls	r1, r1, #7
 8003310:	430a      	orrs	r2, r1
 8003312:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003314:	f7fe fd10 	bl	8001d38 <HAL_GetTick>
 8003318:	0003      	movs	r3, r0
 800331a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800331c:	e00f      	b.n	800333e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800331e:	f7fe fd0b 	bl	8001d38 <HAL_GetTick>
 8003322:	0002      	movs	r2, r0
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b19      	cmp	r3, #25
 800332a:	d908      	bls.n	800333e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	2220      	movs	r2, #32
 8003330:	4313      	orrs	r3, r2
 8003332:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003334:	2327      	movs	r3, #39	; 0x27
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]

              break;
 800333c:	e00b      	b.n	8003356 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2220      	movs	r2, #32
 8003346:	4013      	ands	r3, r2
 8003348:	2127      	movs	r1, #39	; 0x27
 800334a:	187a      	adds	r2, r7, r1
 800334c:	1879      	adds	r1, r7, r1
 800334e:	7809      	ldrb	r1, [r1, #0]
 8003350:	7011      	strb	r1, [r2, #0]
 8003352:	2b20      	cmp	r3, #32
 8003354:	d1e3      	bne.n	800331e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	2220      	movs	r2, #32
 800335e:	4013      	ands	r3, r2
 8003360:	2b20      	cmp	r3, #32
 8003362:	d004      	beq.n	800336e <I2C_IsErrorOccurred+0x112>
 8003364:	2327      	movs	r3, #39	; 0x27
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d092      	beq.n	8003294 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800336e:	2327      	movs	r3, #39	; 0x27
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d103      	bne.n	8003380 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2220      	movs	r2, #32
 800337e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	2204      	movs	r2, #4
 8003384:	4313      	orrs	r3, r2
 8003386:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003388:	2327      	movs	r3, #39	; 0x27
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4013      	ands	r3, r2
 80033a0:	d00c      	beq.n	80033bc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	2201      	movs	r2, #1
 80033a6:	4313      	orrs	r3, r2
 80033a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2280      	movs	r2, #128	; 0x80
 80033b0:	0052      	lsls	r2, r2, #1
 80033b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033b4:	2327      	movs	r3, #39	; 0x27
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4013      	ands	r3, r2
 80033c4:	d00c      	beq.n	80033e0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	2208      	movs	r2, #8
 80033ca:	4313      	orrs	r3, r2
 80033cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	00d2      	lsls	r2, r2, #3
 80033d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033d8:	2327      	movs	r3, #39	; 0x27
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4013      	ands	r3, r2
 80033e8:	d00c      	beq.n	8003404 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	2202      	movs	r2, #2
 80033ee:	4313      	orrs	r3, r2
 80033f0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2280      	movs	r2, #128	; 0x80
 80033f8:	0092      	lsls	r2, r2, #2
 80033fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033fc:	2327      	movs	r3, #39	; 0x27
 80033fe:	18fb      	adds	r3, r7, r3
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003404:	2327      	movs	r3, #39	; 0x27
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01d      	beq.n	800344a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff fda7 	bl	8002f64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	490d      	ldr	r1, [pc, #52]	; (8003458 <I2C_IsErrorOccurred+0x1fc>)
 8003422:	400a      	ands	r2, r1
 8003424:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	431a      	orrs	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2241      	movs	r2, #65	; 0x41
 8003436:	2120      	movs	r1, #32
 8003438:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2242      	movs	r2, #66	; 0x42
 800343e:	2100      	movs	r1, #0
 8003440:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2240      	movs	r2, #64	; 0x40
 8003446:	2100      	movs	r1, #0
 8003448:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800344a:	2327      	movs	r3, #39	; 0x27
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	781b      	ldrb	r3, [r3, #0]
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b00b      	add	sp, #44	; 0x2c
 8003456:	bd90      	pop	{r4, r7, pc}
 8003458:	fe00e800 	.word	0xfe00e800

0800345c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	0008      	movs	r0, r1
 8003466:	0011      	movs	r1, r2
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	240a      	movs	r4, #10
 800346c:	193b      	adds	r3, r7, r4
 800346e:	1c02      	adds	r2, r0, #0
 8003470:	801a      	strh	r2, [r3, #0]
 8003472:	2009      	movs	r0, #9
 8003474:	183b      	adds	r3, r7, r0
 8003476:	1c0a      	adds	r2, r1, #0
 8003478:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800347a:	193b      	adds	r3, r7, r4
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	059b      	lsls	r3, r3, #22
 8003480:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003482:	183b      	adds	r3, r7, r0
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	0419      	lsls	r1, r3, #16
 8003488:	23ff      	movs	r3, #255	; 0xff
 800348a:	041b      	lsls	r3, r3, #16
 800348c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800348e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	4313      	orrs	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	085b      	lsrs	r3, r3, #1
 800349c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034a6:	0d51      	lsrs	r1, r2, #21
 80034a8:	2280      	movs	r2, #128	; 0x80
 80034aa:	00d2      	lsls	r2, r2, #3
 80034ac:	400a      	ands	r2, r1
 80034ae:	4907      	ldr	r1, [pc, #28]	; (80034cc <I2C_TransferConfig+0x70>)
 80034b0:	430a      	orrs	r2, r1
 80034b2:	43d2      	mvns	r2, r2
 80034b4:	401a      	ands	r2, r3
 80034b6:	0011      	movs	r1, r2
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b007      	add	sp, #28
 80034c8:	bd90      	pop	{r4, r7, pc}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	03ff63ff 	.word	0x03ff63ff

080034d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2241      	movs	r2, #65	; 0x41
 80034de:	5c9b      	ldrb	r3, [r3, r2]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d138      	bne.n	8003558 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2240      	movs	r2, #64	; 0x40
 80034ea:	5c9b      	ldrb	r3, [r3, r2]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e032      	b.n	800355a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2240      	movs	r2, #64	; 0x40
 80034f8:	2101      	movs	r1, #1
 80034fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2241      	movs	r2, #65	; 0x41
 8003500:	2124      	movs	r1, #36	; 0x24
 8003502:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2101      	movs	r1, #1
 8003510:	438a      	bics	r2, r1
 8003512:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4911      	ldr	r1, [pc, #68]	; (8003564 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003520:	400a      	ands	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6819      	ldr	r1, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2101      	movs	r1, #1
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2241      	movs	r2, #65	; 0x41
 8003548:	2120      	movs	r1, #32
 800354a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2240      	movs	r2, #64	; 0x40
 8003550:	2100      	movs	r1, #0
 8003552:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	e000      	b.n	800355a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003558:	2302      	movs	r3, #2
  }
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	ffffefff 	.word	0xffffefff

08003568 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2241      	movs	r2, #65	; 0x41
 8003576:	5c9b      	ldrb	r3, [r3, r2]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b20      	cmp	r3, #32
 800357c:	d139      	bne.n	80035f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2240      	movs	r2, #64	; 0x40
 8003582:	5c9b      	ldrb	r3, [r3, r2]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003588:	2302      	movs	r3, #2
 800358a:	e033      	b.n	80035f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2240      	movs	r2, #64	; 0x40
 8003590:	2101      	movs	r1, #1
 8003592:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2241      	movs	r2, #65	; 0x41
 8003598:	2124      	movs	r1, #36	; 0x24
 800359a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2101      	movs	r1, #1
 80035a8:	438a      	bics	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a11      	ldr	r2, [pc, #68]	; (80035fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2101      	movs	r1, #1
 80035da:	430a      	orrs	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2241      	movs	r2, #65	; 0x41
 80035e2:	2120      	movs	r1, #32
 80035e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2240      	movs	r2, #64	; 0x40
 80035ea:	2100      	movs	r1, #0
 80035ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	e000      	b.n	80035f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035f2:	2302      	movs	r3, #2
  }
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b004      	add	sp, #16
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	fffff0ff 	.word	0xfffff0ff

08003600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003600:	b5b0      	push	{r4, r5, r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	f000 fb6c 	bl	8003cec <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003614:	4bc8      	ldr	r3, [pc, #800]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	220c      	movs	r2, #12
 800361a:	4013      	ands	r3, r2
 800361c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800361e:	4bc6      	ldr	r3, [pc, #792]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	025b      	lsls	r3, r3, #9
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2201      	movs	r2, #1
 8003630:	4013      	ands	r3, r2
 8003632:	d100      	bne.n	8003636 <HAL_RCC_OscConfig+0x36>
 8003634:	e07d      	b.n	8003732 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d007      	beq.n	800364c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d112      	bne.n	8003668 <HAL_RCC_OscConfig+0x68>
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	025b      	lsls	r3, r3, #9
 8003648:	429a      	cmp	r2, r3
 800364a:	d10d      	bne.n	8003668 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	4bba      	ldr	r3, [pc, #744]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	029b      	lsls	r3, r3, #10
 8003654:	4013      	ands	r3, r2
 8003656:	d100      	bne.n	800365a <HAL_RCC_OscConfig+0x5a>
 8003658:	e06a      	b.n	8003730 <HAL_RCC_OscConfig+0x130>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d166      	bne.n	8003730 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f000 fb42 	bl	8003cec <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	2380      	movs	r3, #128	; 0x80
 800366e:	025b      	lsls	r3, r3, #9
 8003670:	429a      	cmp	r2, r3
 8003672:	d107      	bne.n	8003684 <HAL_RCC_OscConfig+0x84>
 8003674:	4bb0      	ldr	r3, [pc, #704]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4baf      	ldr	r3, [pc, #700]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 800367a:	2180      	movs	r1, #128	; 0x80
 800367c:	0249      	lsls	r1, r1, #9
 800367e:	430a      	orrs	r2, r1
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	e027      	b.n	80036d4 <HAL_RCC_OscConfig+0xd4>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	23a0      	movs	r3, #160	; 0xa0
 800368a:	02db      	lsls	r3, r3, #11
 800368c:	429a      	cmp	r2, r3
 800368e:	d10e      	bne.n	80036ae <HAL_RCC_OscConfig+0xae>
 8003690:	4ba9      	ldr	r3, [pc, #676]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4ba8      	ldr	r3, [pc, #672]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003696:	2180      	movs	r1, #128	; 0x80
 8003698:	02c9      	lsls	r1, r1, #11
 800369a:	430a      	orrs	r2, r1
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	4ba6      	ldr	r3, [pc, #664]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4ba5      	ldr	r3, [pc, #660]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80036a4:	2180      	movs	r1, #128	; 0x80
 80036a6:	0249      	lsls	r1, r1, #9
 80036a8:	430a      	orrs	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	e012      	b.n	80036d4 <HAL_RCC_OscConfig+0xd4>
 80036ae:	4ba2      	ldr	r3, [pc, #648]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4ba1      	ldr	r3, [pc, #644]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80036b4:	49a1      	ldr	r1, [pc, #644]	; (800393c <HAL_RCC_OscConfig+0x33c>)
 80036b6:	400a      	ands	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	4b9f      	ldr	r3, [pc, #636]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	025b      	lsls	r3, r3, #9
 80036c2:	4013      	ands	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4b9b      	ldr	r3, [pc, #620]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b9a      	ldr	r3, [pc, #616]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80036ce:	499c      	ldr	r1, [pc, #624]	; (8003940 <HAL_RCC_OscConfig+0x340>)
 80036d0:	400a      	ands	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d014      	beq.n	8003706 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fe fb2c 	bl	8001d38 <HAL_GetTick>
 80036e0:	0003      	movs	r3, r0
 80036e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e6:	f7fe fb27 	bl	8001d38 <HAL_GetTick>
 80036ea:	0002      	movs	r2, r0
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b64      	cmp	r3, #100	; 0x64
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e2f9      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036f8:	4b8f      	ldr	r3, [pc, #572]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	029b      	lsls	r3, r3, #10
 8003700:	4013      	ands	r3, r2
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0xe6>
 8003704:	e015      	b.n	8003732 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7fe fb17 	bl	8001d38 <HAL_GetTick>
 800370a:	0003      	movs	r3, r0
 800370c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003710:	f7fe fb12 	bl	8001d38 <HAL_GetTick>
 8003714:	0002      	movs	r2, r0
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e2e4      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003722:	4b85      	ldr	r3, [pc, #532]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	029b      	lsls	r3, r3, #10
 800372a:	4013      	ands	r3, r2
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x110>
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003730:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2202      	movs	r2, #2
 8003738:	4013      	ands	r3, r2
 800373a:	d100      	bne.n	800373e <HAL_RCC_OscConfig+0x13e>
 800373c:	e099      	b.n	8003872 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	2220      	movs	r2, #32
 8003748:	4013      	ands	r3, r2
 800374a:	d009      	beq.n	8003760 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800374c:	4b7a      	ldr	r3, [pc, #488]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b79      	ldr	r3, [pc, #484]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003752:	2120      	movs	r1, #32
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	2220      	movs	r2, #32
 800375c:	4393      	bics	r3, r2
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	2b04      	cmp	r3, #4
 8003764:	d005      	beq.n	8003772 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	2b0c      	cmp	r3, #12
 800376a:	d13e      	bne.n	80037ea <HAL_RCC_OscConfig+0x1ea>
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d13b      	bne.n	80037ea <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003772:	4b71      	ldr	r3, [pc, #452]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2204      	movs	r2, #4
 8003778:	4013      	ands	r3, r2
 800377a:	d004      	beq.n	8003786 <HAL_RCC_OscConfig+0x186>
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e2b2      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003786:	4b6c      	ldr	r3, [pc, #432]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4a6e      	ldr	r2, [pc, #440]	; (8003944 <HAL_RCC_OscConfig+0x344>)
 800378c:	4013      	ands	r3, r2
 800378e:	0019      	movs	r1, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	021a      	lsls	r2, r3, #8
 8003796:	4b68      	ldr	r3, [pc, #416]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003798:	430a      	orrs	r2, r1
 800379a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800379c:	4b66      	ldr	r3, [pc, #408]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2209      	movs	r2, #9
 80037a2:	4393      	bics	r3, r2
 80037a4:	0019      	movs	r1, r3
 80037a6:	4b64      	ldr	r3, [pc, #400]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80037a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037aa:	430a      	orrs	r2, r1
 80037ac:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ae:	f000 fbeb 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 80037b2:	0001      	movs	r1, r0
 80037b4:	4b60      	ldr	r3, [pc, #384]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	220f      	movs	r2, #15
 80037bc:	4013      	ands	r3, r2
 80037be:	4a62      	ldr	r2, [pc, #392]	; (8003948 <HAL_RCC_OscConfig+0x348>)
 80037c0:	5cd3      	ldrb	r3, [r2, r3]
 80037c2:	000a      	movs	r2, r1
 80037c4:	40da      	lsrs	r2, r3
 80037c6:	4b61      	ldr	r3, [pc, #388]	; (800394c <HAL_RCC_OscConfig+0x34c>)
 80037c8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80037ca:	4b61      	ldr	r3, [pc, #388]	; (8003950 <HAL_RCC_OscConfig+0x350>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2513      	movs	r5, #19
 80037d0:	197c      	adds	r4, r7, r5
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7fe fa6a 	bl	8001cac <HAL_InitTick>
 80037d8:	0003      	movs	r3, r0
 80037da:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80037dc:	197b      	adds	r3, r7, r5
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d046      	beq.n	8003872 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80037e4:	197b      	adds	r3, r7, r5
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	e280      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d027      	beq.n	8003840 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80037f0:	4b51      	ldr	r3, [pc, #324]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2209      	movs	r2, #9
 80037f6:	4393      	bics	r3, r2
 80037f8:	0019      	movs	r1, r3
 80037fa:	4b4f      	ldr	r3, [pc, #316]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80037fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fe:	430a      	orrs	r2, r1
 8003800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7fe fa99 	bl	8001d38 <HAL_GetTick>
 8003806:	0003      	movs	r3, r0
 8003808:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380c:	f7fe fa94 	bl	8001d38 <HAL_GetTick>
 8003810:	0002      	movs	r2, r0
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e266      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800381e:	4b46      	ldr	r3, [pc, #280]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2204      	movs	r2, #4
 8003824:	4013      	ands	r3, r2
 8003826:	d0f1      	beq.n	800380c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003828:	4b43      	ldr	r3, [pc, #268]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a45      	ldr	r2, [pc, #276]	; (8003944 <HAL_RCC_OscConfig+0x344>)
 800382e:	4013      	ands	r3, r2
 8003830:	0019      	movs	r1, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	021a      	lsls	r2, r3, #8
 8003838:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	e018      	b.n	8003872 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003840:	4b3d      	ldr	r3, [pc, #244]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	4b3c      	ldr	r3, [pc, #240]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003846:	2101      	movs	r1, #1
 8003848:	438a      	bics	r2, r1
 800384a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe fa74 	bl	8001d38 <HAL_GetTick>
 8003850:	0003      	movs	r3, r0
 8003852:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003856:	f7fe fa6f 	bl	8001d38 <HAL_GetTick>
 800385a:	0002      	movs	r2, r0
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e241      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003868:	4b33      	ldr	r3, [pc, #204]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2204      	movs	r2, #4
 800386e:	4013      	ands	r3, r2
 8003870:	d1f1      	bne.n	8003856 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2210      	movs	r2, #16
 8003878:	4013      	ands	r3, r2
 800387a:	d100      	bne.n	800387e <HAL_RCC_OscConfig+0x27e>
 800387c:	e0a1      	b.n	80039c2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d140      	bne.n	8003906 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003884:	4b2c      	ldr	r3, [pc, #176]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4013      	ands	r3, r2
 800388e:	d005      	beq.n	800389c <HAL_RCC_OscConfig+0x29c>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e227      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800389c:	4b26      	ldr	r3, [pc, #152]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4a2c      	ldr	r2, [pc, #176]	; (8003954 <HAL_RCC_OscConfig+0x354>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	0019      	movs	r1, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1a      	ldr	r2, [r3, #32]
 80038aa:	4b23      	ldr	r3, [pc, #140]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038b0:	4b21      	ldr	r3, [pc, #132]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	0a19      	lsrs	r1, r3, #8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	061a      	lsls	r2, r3, #24
 80038be:	4b1e      	ldr	r3, [pc, #120]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	0b5b      	lsrs	r3, r3, #13
 80038ca:	3301      	adds	r3, #1
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	0212      	lsls	r2, r2, #8
 80038d0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80038d2:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	210f      	movs	r1, #15
 80038da:	400b      	ands	r3, r1
 80038dc:	491a      	ldr	r1, [pc, #104]	; (8003948 <HAL_RCC_OscConfig+0x348>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80038e2:	4b1a      	ldr	r3, [pc, #104]	; (800394c <HAL_RCC_OscConfig+0x34c>)
 80038e4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80038e6:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <HAL_RCC_OscConfig+0x350>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2513      	movs	r5, #19
 80038ec:	197c      	adds	r4, r7, r5
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7fe f9dc 	bl	8001cac <HAL_InitTick>
 80038f4:	0003      	movs	r3, r0
 80038f6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80038f8:	197b      	adds	r3, r7, r5
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d060      	beq.n	80039c2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8003900:	197b      	adds	r3, r7, r5
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	e1f2      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d03f      	beq.n	800398e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800390e:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <HAL_RCC_OscConfig+0x338>)
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	0049      	lsls	r1, r1, #1
 8003918:	430a      	orrs	r2, r1
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fe fa0c 	bl	8001d38 <HAL_GetTick>
 8003920:	0003      	movs	r3, r0
 8003922:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003924:	e018      	b.n	8003958 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003926:	f7fe fa07 	bl	8001d38 <HAL_GetTick>
 800392a:	0002      	movs	r2, r0
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d911      	bls.n	8003958 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e1d9      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
 8003938:	40021000 	.word	0x40021000
 800393c:	fffeffff 	.word	0xfffeffff
 8003940:	fffbffff 	.word	0xfffbffff
 8003944:	ffffe0ff 	.word	0xffffe0ff
 8003948:	08007274 	.word	0x08007274
 800394c:	20000000 	.word	0x20000000
 8003950:	20000004 	.word	0x20000004
 8003954:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003958:	4bc9      	ldr	r3, [pc, #804]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4013      	ands	r3, r2
 8003962:	d0e0      	beq.n	8003926 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003964:	4bc6      	ldr	r3, [pc, #792]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4ac6      	ldr	r2, [pc, #792]	; (8003c84 <HAL_RCC_OscConfig+0x684>)
 800396a:	4013      	ands	r3, r2
 800396c:	0019      	movs	r1, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1a      	ldr	r2, [r3, #32]
 8003972:	4bc3      	ldr	r3, [pc, #780]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003978:	4bc1      	ldr	r3, [pc, #772]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	0a19      	lsrs	r1, r3, #8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	061a      	lsls	r2, r3, #24
 8003986:	4bbe      	ldr	r3, [pc, #760]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	e019      	b.n	80039c2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800398e:	4bbc      	ldr	r3, [pc, #752]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4bbb      	ldr	r3, [pc, #748]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003994:	49bc      	ldr	r1, [pc, #752]	; (8003c88 <HAL_RCC_OscConfig+0x688>)
 8003996:	400a      	ands	r2, r1
 8003998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399a:	f7fe f9cd 	bl	8001d38 <HAL_GetTick>
 800399e:	0003      	movs	r3, r0
 80039a0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039a4:	f7fe f9c8 	bl	8001d38 <HAL_GetTick>
 80039a8:	0002      	movs	r2, r0
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e19a      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80039b6:	4bb2      	ldr	r3, [pc, #712]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4013      	ands	r3, r2
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2208      	movs	r2, #8
 80039c8:	4013      	ands	r3, r2
 80039ca:	d036      	beq.n	8003a3a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d019      	beq.n	8003a08 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d4:	4baa      	ldr	r3, [pc, #680]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 80039d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039d8:	4ba9      	ldr	r3, [pc, #676]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 80039da:	2101      	movs	r1, #1
 80039dc:	430a      	orrs	r2, r1
 80039de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e0:	f7fe f9aa 	bl	8001d38 <HAL_GetTick>
 80039e4:	0003      	movs	r3, r0
 80039e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ea:	f7fe f9a5 	bl	8001d38 <HAL_GetTick>
 80039ee:	0002      	movs	r2, r0
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e177      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039fc:	4ba0      	ldr	r3, [pc, #640]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 80039fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a00:	2202      	movs	r2, #2
 8003a02:	4013      	ands	r3, r2
 8003a04:	d0f1      	beq.n	80039ea <HAL_RCC_OscConfig+0x3ea>
 8003a06:	e018      	b.n	8003a3a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a08:	4b9d      	ldr	r3, [pc, #628]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003a0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a0c:	4b9c      	ldr	r3, [pc, #624]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003a0e:	2101      	movs	r1, #1
 8003a10:	438a      	bics	r2, r1
 8003a12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a14:	f7fe f990 	bl	8001d38 <HAL_GetTick>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fe f98b 	bl	8001d38 <HAL_GetTick>
 8003a22:	0002      	movs	r2, r0
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e15d      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a30:	4b93      	ldr	r3, [pc, #588]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a34:	2202      	movs	r2, #2
 8003a36:	4013      	ands	r3, r2
 8003a38:	d1f1      	bne.n	8003a1e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2204      	movs	r2, #4
 8003a40:	4013      	ands	r3, r2
 8003a42:	d100      	bne.n	8003a46 <HAL_RCC_OscConfig+0x446>
 8003a44:	e0ae      	b.n	8003ba4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a46:	2023      	movs	r0, #35	; 0x23
 8003a48:	183b      	adds	r3, r7, r0
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4e:	4b8c      	ldr	r3, [pc, #560]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	055b      	lsls	r3, r3, #21
 8003a56:	4013      	ands	r3, r2
 8003a58:	d109      	bne.n	8003a6e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5a:	4b89      	ldr	r3, [pc, #548]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a5e:	4b88      	ldr	r3, [pc, #544]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003a60:	2180      	movs	r1, #128	; 0x80
 8003a62:	0549      	lsls	r1, r1, #21
 8003a64:	430a      	orrs	r2, r1
 8003a66:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003a68:	183b      	adds	r3, r7, r0
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6e:	4b87      	ldr	r3, [pc, #540]	; (8003c8c <HAL_RCC_OscConfig+0x68c>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	2380      	movs	r3, #128	; 0x80
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4013      	ands	r3, r2
 8003a78:	d11a      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a7a:	4b84      	ldr	r3, [pc, #528]	; (8003c8c <HAL_RCC_OscConfig+0x68c>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4b83      	ldr	r3, [pc, #524]	; (8003c8c <HAL_RCC_OscConfig+0x68c>)
 8003a80:	2180      	movs	r1, #128	; 0x80
 8003a82:	0049      	lsls	r1, r1, #1
 8003a84:	430a      	orrs	r2, r1
 8003a86:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a88:	f7fe f956 	bl	8001d38 <HAL_GetTick>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7fe f951 	bl	8001d38 <HAL_GetTick>
 8003a96:	0002      	movs	r2, r0
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b64      	cmp	r3, #100	; 0x64
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e123      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	4b79      	ldr	r3, [pc, #484]	; (8003c8c <HAL_RCC_OscConfig+0x68c>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4013      	ands	r3, r2
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	2380      	movs	r3, #128	; 0x80
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d107      	bne.n	8003acc <HAL_RCC_OscConfig+0x4cc>
 8003abc:	4b70      	ldr	r3, [pc, #448]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ac0:	4b6f      	ldr	r3, [pc, #444]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003ac2:	2180      	movs	r1, #128	; 0x80
 8003ac4:	0049      	lsls	r1, r1, #1
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	651a      	str	r2, [r3, #80]	; 0x50
 8003aca:	e031      	b.n	8003b30 <HAL_RCC_OscConfig+0x530>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10c      	bne.n	8003aee <HAL_RCC_OscConfig+0x4ee>
 8003ad4:	4b6a      	ldr	r3, [pc, #424]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003ad6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ad8:	4b69      	ldr	r3, [pc, #420]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003ada:	496b      	ldr	r1, [pc, #428]	; (8003c88 <HAL_RCC_OscConfig+0x688>)
 8003adc:	400a      	ands	r2, r1
 8003ade:	651a      	str	r2, [r3, #80]	; 0x50
 8003ae0:	4b67      	ldr	r3, [pc, #412]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003ae2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ae4:	4b66      	ldr	r3, [pc, #408]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003ae6:	496a      	ldr	r1, [pc, #424]	; (8003c90 <HAL_RCC_OscConfig+0x690>)
 8003ae8:	400a      	ands	r2, r1
 8003aea:	651a      	str	r2, [r3, #80]	; 0x50
 8003aec:	e020      	b.n	8003b30 <HAL_RCC_OscConfig+0x530>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	23a0      	movs	r3, #160	; 0xa0
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d10e      	bne.n	8003b18 <HAL_RCC_OscConfig+0x518>
 8003afa:	4b61      	ldr	r3, [pc, #388]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003afe:	4b60      	ldr	r3, [pc, #384]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003b00:	2180      	movs	r1, #128	; 0x80
 8003b02:	00c9      	lsls	r1, r1, #3
 8003b04:	430a      	orrs	r2, r1
 8003b06:	651a      	str	r2, [r3, #80]	; 0x50
 8003b08:	4b5d      	ldr	r3, [pc, #372]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003b0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b0c:	4b5c      	ldr	r3, [pc, #368]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003b0e:	2180      	movs	r1, #128	; 0x80
 8003b10:	0049      	lsls	r1, r1, #1
 8003b12:	430a      	orrs	r2, r1
 8003b14:	651a      	str	r2, [r3, #80]	; 0x50
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0x530>
 8003b18:	4b59      	ldr	r3, [pc, #356]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003b1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b1c:	4b58      	ldr	r3, [pc, #352]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003b1e:	495a      	ldr	r1, [pc, #360]	; (8003c88 <HAL_RCC_OscConfig+0x688>)
 8003b20:	400a      	ands	r2, r1
 8003b22:	651a      	str	r2, [r3, #80]	; 0x50
 8003b24:	4b56      	ldr	r3, [pc, #344]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003b26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b28:	4b55      	ldr	r3, [pc, #340]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003b2a:	4959      	ldr	r1, [pc, #356]	; (8003c90 <HAL_RCC_OscConfig+0x690>)
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b38:	f7fe f8fe 	bl	8001d38 <HAL_GetTick>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b40:	e009      	b.n	8003b56 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b42:	f7fe f8f9 	bl	8001d38 <HAL_GetTick>
 8003b46:	0002      	movs	r2, r0
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	4a51      	ldr	r2, [pc, #324]	; (8003c94 <HAL_RCC_OscConfig+0x694>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e0ca      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b56:	4b4a      	ldr	r3, [pc, #296]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d0ef      	beq.n	8003b42 <HAL_RCC_OscConfig+0x542>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b64:	f7fe f8e8 	bl	8001d38 <HAL_GetTick>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b6c:	e009      	b.n	8003b82 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7fe f8e3 	bl	8001d38 <HAL_GetTick>
 8003b72:	0002      	movs	r2, r0
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	4a46      	ldr	r2, [pc, #280]	; (8003c94 <HAL_RCC_OscConfig+0x694>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e0b4      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b82:	4b3f      	ldr	r3, [pc, #252]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003b84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d1ef      	bne.n	8003b6e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b8e:	2323      	movs	r3, #35	; 0x23
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b98:	4b39      	ldr	r3, [pc, #228]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b9c:	4b38      	ldr	r3, [pc, #224]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003b9e:	493e      	ldr	r1, [pc, #248]	; (8003c98 <HAL_RCC_OscConfig+0x698>)
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d100      	bne.n	8003bae <HAL_RCC_OscConfig+0x5ae>
 8003bac:	e09d      	b.n	8003cea <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	2b0c      	cmp	r3, #12
 8003bb2:	d100      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x5b6>
 8003bb4:	e076      	b.n	8003ca4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d145      	bne.n	8003c4a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b2f      	ldr	r3, [pc, #188]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003bc4:	4935      	ldr	r1, [pc, #212]	; (8003c9c <HAL_RCC_OscConfig+0x69c>)
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bca:	f7fe f8b5 	bl	8001d38 <HAL_GetTick>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fe f8b0 	bl	8001d38 <HAL_GetTick>
 8003bd8:	0002      	movs	r2, r0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e082      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003be6:	4b26      	ldr	r3, [pc, #152]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	049b      	lsls	r3, r3, #18
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf2:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	4a2a      	ldr	r2, [pc, #168]	; (8003ca0 <HAL_RCC_OscConfig+0x6a0>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4b1a      	ldr	r3, [pc, #104]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003c18:	2180      	movs	r1, #128	; 0x80
 8003c1a:	0449      	lsls	r1, r1, #17
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fe f88a 	bl	8001d38 <HAL_GetTick>
 8003c24:	0003      	movs	r3, r0
 8003c26:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7fe f885 	bl	8001d38 <HAL_GetTick>
 8003c2e:	0002      	movs	r2, r0
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e057      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c3c:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	049b      	lsls	r3, r3, #18
 8003c44:	4013      	ands	r3, r2
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x62a>
 8003c48:	e04f      	b.n	8003cea <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003c50:	4912      	ldr	r1, [pc, #72]	; (8003c9c <HAL_RCC_OscConfig+0x69c>)
 8003c52:	400a      	ands	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fe f86f 	bl	8001d38 <HAL_GetTick>
 8003c5a:	0003      	movs	r3, r0
 8003c5c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c60:	f7fe f86a 	bl	8001d38 <HAL_GetTick>
 8003c64:	0002      	movs	r2, r0
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e03c      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c72:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_RCC_OscConfig+0x680>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	2380      	movs	r3, #128	; 0x80
 8003c78:	049b      	lsls	r3, r3, #18
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x660>
 8003c7e:	e034      	b.n	8003cea <HAL_RCC_OscConfig+0x6ea>
 8003c80:	40021000 	.word	0x40021000
 8003c84:	ffff1fff 	.word	0xffff1fff
 8003c88:	fffffeff 	.word	0xfffffeff
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	fffffbff 	.word	0xfffffbff
 8003c94:	00001388 	.word	0x00001388
 8003c98:	efffffff 	.word	0xefffffff
 8003c9c:	feffffff 	.word	0xfeffffff
 8003ca0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e01d      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <HAL_RCC_OscConfig+0x6f4>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	025b      	lsls	r3, r3, #9
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d10f      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	23f0      	movs	r3, #240	; 0xf0
 8003cca:	039b      	lsls	r3, r3, #14
 8003ccc:	401a      	ands	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d107      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	23c0      	movs	r3, #192	; 0xc0
 8003cda:	041b      	lsls	r3, r3, #16
 8003cdc:	401a      	ands	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d001      	beq.n	8003cea <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b00a      	add	sp, #40	; 0x28
 8003cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8003cf4:	40021000 	.word	0x40021000

08003cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf8:	b5b0      	push	{r4, r5, r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e128      	b.n	8003f5e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b96      	ldr	r3, [pc, #600]	; (8003f68 <HAL_RCC_ClockConfig+0x270>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2201      	movs	r2, #1
 8003d12:	4013      	ands	r3, r2
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d91e      	bls.n	8003d58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b93      	ldr	r3, [pc, #588]	; (8003f68 <HAL_RCC_ClockConfig+0x270>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4393      	bics	r3, r2
 8003d22:	0019      	movs	r1, r3
 8003d24:	4b90      	ldr	r3, [pc, #576]	; (8003f68 <HAL_RCC_ClockConfig+0x270>)
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d2c:	f7fe f804 	bl	8001d38 <HAL_GetTick>
 8003d30:	0003      	movs	r3, r0
 8003d32:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d34:	e009      	b.n	8003d4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d36:	f7fd ffff 	bl	8001d38 <HAL_GetTick>
 8003d3a:	0002      	movs	r2, r0
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	4a8a      	ldr	r2, [pc, #552]	; (8003f6c <HAL_RCC_ClockConfig+0x274>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e109      	b.n	8003f5e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b87      	ldr	r3, [pc, #540]	; (8003f68 <HAL_RCC_ClockConfig+0x270>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	4013      	ands	r3, r2
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d1ee      	bne.n	8003d36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d009      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d62:	4b83      	ldr	r3, [pc, #524]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	22f0      	movs	r2, #240	; 0xf0
 8003d68:	4393      	bics	r3, r2
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	4b7f      	ldr	r3, [pc, #508]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003d72:	430a      	orrs	r2, r1
 8003d74:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d100      	bne.n	8003d82 <HAL_RCC_ClockConfig+0x8a>
 8003d80:	e089      	b.n	8003e96 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d107      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d8a:	4b79      	ldr	r3, [pc, #484]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	029b      	lsls	r3, r3, #10
 8003d92:	4013      	ands	r3, r2
 8003d94:	d120      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e0e1      	b.n	8003f5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003da2:	4b73      	ldr	r3, [pc, #460]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	2380      	movs	r3, #128	; 0x80
 8003da8:	049b      	lsls	r3, r3, #18
 8003daa:	4013      	ands	r3, r2
 8003dac:	d114      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e0d5      	b.n	8003f5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d106      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dba:	4b6d      	ldr	r3, [pc, #436]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d109      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0ca      	b.n	8003f5e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003dc8:	4b69      	ldr	r3, [pc, #420]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0c2      	b.n	8003f5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dd8:	4b65      	ldr	r3, [pc, #404]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2203      	movs	r2, #3
 8003dde:	4393      	bics	r3, r2
 8003de0:	0019      	movs	r1, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	4b62      	ldr	r3, [pc, #392]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003de8:	430a      	orrs	r2, r1
 8003dea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dec:	f7fd ffa4 	bl	8001d38 <HAL_GetTick>
 8003df0:	0003      	movs	r3, r0
 8003df2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d111      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dfc:	e009      	b.n	8003e12 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dfe:	f7fd ff9b 	bl	8001d38 <HAL_GetTick>
 8003e02:	0002      	movs	r2, r0
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	4a58      	ldr	r2, [pc, #352]	; (8003f6c <HAL_RCC_ClockConfig+0x274>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e0a5      	b.n	8003f5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e12:	4b57      	ldr	r3, [pc, #348]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	220c      	movs	r2, #12
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d1ef      	bne.n	8003dfe <HAL_RCC_ClockConfig+0x106>
 8003e1e:	e03a      	b.n	8003e96 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d111      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e28:	e009      	b.n	8003e3e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2a:	f7fd ff85 	bl	8001d38 <HAL_GetTick>
 8003e2e:	0002      	movs	r2, r0
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	4a4d      	ldr	r2, [pc, #308]	; (8003f6c <HAL_RCC_ClockConfig+0x274>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e08f      	b.n	8003f5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e3e:	4b4c      	ldr	r3, [pc, #304]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	220c      	movs	r2, #12
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d1ef      	bne.n	8003e2a <HAL_RCC_ClockConfig+0x132>
 8003e4a:	e024      	b.n	8003e96 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d11b      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e54:	e009      	b.n	8003e6a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e56:	f7fd ff6f 	bl	8001d38 <HAL_GetTick>
 8003e5a:	0002      	movs	r2, r0
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	4a42      	ldr	r2, [pc, #264]	; (8003f6c <HAL_RCC_ClockConfig+0x274>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e079      	b.n	8003f5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e6a:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	220c      	movs	r2, #12
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d1ef      	bne.n	8003e56 <HAL_RCC_ClockConfig+0x15e>
 8003e76:	e00e      	b.n	8003e96 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e78:	f7fd ff5e 	bl	8001d38 <HAL_GetTick>
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	4a3a      	ldr	r2, [pc, #232]	; (8003f6c <HAL_RCC_ClockConfig+0x274>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e068      	b.n	8003f5e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e8c:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	220c      	movs	r2, #12
 8003e92:	4013      	ands	r3, r2
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e96:	4b34      	ldr	r3, [pc, #208]	; (8003f68 <HAL_RCC_ClockConfig+0x270>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d21e      	bcs.n	8003ee2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea4:	4b30      	ldr	r3, [pc, #192]	; (8003f68 <HAL_RCC_ClockConfig+0x270>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	4393      	bics	r3, r2
 8003eac:	0019      	movs	r1, r3
 8003eae:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <HAL_RCC_ClockConfig+0x270>)
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003eb6:	f7fd ff3f 	bl	8001d38 <HAL_GetTick>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	e009      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec0:	f7fd ff3a 	bl	8001d38 <HAL_GetTick>
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <HAL_RCC_ClockConfig+0x274>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e044      	b.n	8003f5e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed4:	4b24      	ldr	r3, [pc, #144]	; (8003f68 <HAL_RCC_ClockConfig+0x270>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	4013      	ands	r3, r2
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d1ee      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d009      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eec:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <HAL_RCC_ClockConfig+0x27c>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003efc:	430a      	orrs	r2, r1
 8003efe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2208      	movs	r2, #8
 8003f06:	4013      	ands	r3, r2
 8003f08:	d00a      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f0a:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4a1a      	ldr	r2, [pc, #104]	; (8003f78 <HAL_RCC_ClockConfig+0x280>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	0019      	movs	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	00da      	lsls	r2, r3, #3
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f20:	f000 f832 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8003f24:	0001      	movs	r1, r0
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_RCC_ClockConfig+0x278>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	220f      	movs	r2, #15
 8003f2e:	4013      	ands	r3, r2
 8003f30:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <HAL_RCC_ClockConfig+0x284>)
 8003f32:	5cd3      	ldrb	r3, [r2, r3]
 8003f34:	000a      	movs	r2, r1
 8003f36:	40da      	lsrs	r2, r3
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <HAL_RCC_ClockConfig+0x288>)
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f3c:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <HAL_RCC_ClockConfig+0x28c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	250b      	movs	r5, #11
 8003f42:	197c      	adds	r4, r7, r5
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7fd feb1 	bl	8001cac <HAL_InitTick>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003f4e:	197b      	adds	r3, r7, r5
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003f56:	197b      	adds	r3, r7, r5
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	e000      	b.n	8003f5e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b004      	add	sp, #16
 8003f64:	bdb0      	pop	{r4, r5, r7, pc}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	40022000 	.word	0x40022000
 8003f6c:	00001388 	.word	0x00001388
 8003f70:	40021000 	.word	0x40021000
 8003f74:	fffff8ff 	.word	0xfffff8ff
 8003f78:	ffffc7ff 	.word	0xffffc7ff
 8003f7c:	08007274 	.word	0x08007274
 8003f80:	20000000 	.word	0x20000000
 8003f84:	20000004 	.word	0x20000004

08003f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f88:	b5b0      	push	{r4, r5, r7, lr}
 8003f8a:	b08e      	sub	sp, #56	; 0x38
 8003f8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003f8e:	4b4c      	ldr	r3, [pc, #304]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f96:	230c      	movs	r3, #12
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b0c      	cmp	r3, #12
 8003f9c:	d014      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003f9e:	d900      	bls.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x1a>
 8003fa0:	e07b      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x112>
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d002      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0x24>
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003faa:	e076      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003fac:	4b44      	ldr	r3, [pc, #272]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2210      	movs	r2, #16
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d002      	beq.n	8003fbc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003fb6:	4b43      	ldr	r3, [pc, #268]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003fb8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003fba:	e07c      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003fbc:	4b42      	ldr	r3, [pc, #264]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x140>)
 8003fbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fc0:	e079      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fc2:	4b42      	ldr	r3, [pc, #264]	; (80040cc <HAL_RCC_GetSysClockFreq+0x144>)
 8003fc4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fc6:	e076      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fca:	0c9a      	lsrs	r2, r3, #18
 8003fcc:	230f      	movs	r3, #15
 8003fce:	401a      	ands	r2, r3
 8003fd0:	4b3f      	ldr	r3, [pc, #252]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x148>)
 8003fd2:	5c9b      	ldrb	r3, [r3, r2]
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd8:	0d9a      	lsrs	r2, r3, #22
 8003fda:	2303      	movs	r3, #3
 8003fdc:	4013      	ands	r3, r2
 8003fde:	3301      	adds	r3, #1
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fe2:	4b37      	ldr	r3, [pc, #220]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	025b      	lsls	r3, r3, #9
 8003fea:	4013      	ands	r3, r2
 8003fec:	d01a      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	4a35      	ldr	r2, [pc, #212]	; (80040cc <HAL_RCC_GetSysClockFreq+0x144>)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	69b8      	ldr	r0, [r7, #24]
 8003ffc:	69f9      	ldr	r1, [r7, #28]
 8003ffe:	f7fc f939 	bl	8000274 <__aeabi_lmul>
 8004002:	0002      	movs	r2, r0
 8004004:	000b      	movs	r3, r1
 8004006:	0010      	movs	r0, r2
 8004008:	0019      	movs	r1, r3
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	613b      	str	r3, [r7, #16]
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f7fc f90d 	bl	8000234 <__aeabi_uldivmod>
 800401a:	0002      	movs	r2, r0
 800401c:	000b      	movs	r3, r1
 800401e:	0013      	movs	r3, r2
 8004020:	637b      	str	r3, [r7, #52]	; 0x34
 8004022:	e037      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004024:	4b26      	ldr	r3, [pc, #152]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2210      	movs	r2, #16
 800402a:	4013      	ands	r3, r2
 800402c:	d01a      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	4a23      	ldr	r2, [pc, #140]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004038:	2300      	movs	r3, #0
 800403a:	68b8      	ldr	r0, [r7, #8]
 800403c:	68f9      	ldr	r1, [r7, #12]
 800403e:	f7fc f919 	bl	8000274 <__aeabi_lmul>
 8004042:	0002      	movs	r2, r0
 8004044:	000b      	movs	r3, r1
 8004046:	0010      	movs	r0, r2
 8004048:	0019      	movs	r1, r3
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	2300      	movs	r3, #0
 8004050:	607b      	str	r3, [r7, #4]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f7fc f8ed 	bl	8000234 <__aeabi_uldivmod>
 800405a:	0002      	movs	r2, r0
 800405c:	000b      	movs	r3, r1
 800405e:	0013      	movs	r3, r2
 8004060:	637b      	str	r3, [r7, #52]	; 0x34
 8004062:	e017      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	0018      	movs	r0, r3
 8004068:	2300      	movs	r3, #0
 800406a:	0019      	movs	r1, r3
 800406c:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x140>)
 800406e:	2300      	movs	r3, #0
 8004070:	f7fc f900 	bl	8000274 <__aeabi_lmul>
 8004074:	0002      	movs	r2, r0
 8004076:	000b      	movs	r3, r1
 8004078:	0010      	movs	r0, r2
 800407a:	0019      	movs	r1, r3
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	001c      	movs	r4, r3
 8004080:	2300      	movs	r3, #0
 8004082:	001d      	movs	r5, r3
 8004084:	0022      	movs	r2, r4
 8004086:	002b      	movs	r3, r5
 8004088:	f7fc f8d4 	bl	8000234 <__aeabi_uldivmod>
 800408c:	0002      	movs	r2, r0
 800408e:	000b      	movs	r3, r1
 8004090:	0013      	movs	r3, r2
 8004092:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004096:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004098:	e00d      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800409a:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	0b5b      	lsrs	r3, r3, #13
 80040a0:	2207      	movs	r2, #7
 80040a2:	4013      	ands	r3, r2
 80040a4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	3301      	adds	r3, #1
 80040aa:	2280      	movs	r2, #128	; 0x80
 80040ac:	0212      	lsls	r2, r2, #8
 80040ae:	409a      	lsls	r2, r3
 80040b0:	0013      	movs	r3, r2
 80040b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040b4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80040b8:	0018      	movs	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b00e      	add	sp, #56	; 0x38
 80040be:	bdb0      	pop	{r4, r5, r7, pc}
 80040c0:	40021000 	.word	0x40021000
 80040c4:	003d0900 	.word	0x003d0900
 80040c8:	00f42400 	.word	0x00f42400
 80040cc:	007a1200 	.word	0x007a1200
 80040d0:	0800728c 	.word	0x0800728c

080040d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d8:	4b02      	ldr	r3, [pc, #8]	; (80040e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80040da:	681b      	ldr	r3, [r3, #0]
}
 80040dc:	0018      	movs	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	20000000 	.word	0x20000000

080040e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040ec:	f7ff fff2 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 80040f0:	0001      	movs	r1, r0
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	2207      	movs	r2, #7
 80040fa:	4013      	ands	r3, r2
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040fe:	5cd3      	ldrb	r3, [r2, r3]
 8004100:	40d9      	lsrs	r1, r3
 8004102:	000b      	movs	r3, r1
}
 8004104:	0018      	movs	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	40021000 	.word	0x40021000
 8004110:	08007284 	.word	0x08007284

08004114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004118:	f7ff ffdc 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 800411c:	0001      	movs	r1, r0
 800411e:	4b06      	ldr	r3, [pc, #24]	; (8004138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	0adb      	lsrs	r3, r3, #11
 8004124:	2207      	movs	r2, #7
 8004126:	4013      	ands	r3, r2
 8004128:	4a04      	ldr	r2, [pc, #16]	; (800413c <HAL_RCC_GetPCLK2Freq+0x28>)
 800412a:	5cd3      	ldrb	r3, [r2, r3]
 800412c:	40d9      	lsrs	r1, r3
 800412e:	000b      	movs	r3, r1
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	40021000 	.word	0x40021000
 800413c:	08007284 	.word	0x08007284

08004140 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004148:	2017      	movs	r0, #23
 800414a:	183b      	adds	r3, r7, r0
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2220      	movs	r2, #32
 8004156:	4013      	ands	r3, r2
 8004158:	d100      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800415a:	e0c7      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415c:	4b93      	ldr	r3, [pc, #588]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800415e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	055b      	lsls	r3, r3, #21
 8004164:	4013      	ands	r3, r2
 8004166:	d109      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004168:	4b90      	ldr	r3, [pc, #576]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800416a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800416c:	4b8f      	ldr	r3, [pc, #572]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800416e:	2180      	movs	r1, #128	; 0x80
 8004170:	0549      	lsls	r1, r1, #21
 8004172:	430a      	orrs	r2, r1
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004176:	183b      	adds	r3, r7, r0
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417c:	4b8c      	ldr	r3, [pc, #560]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	4013      	ands	r3, r2
 8004186:	d11a      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004188:	4b89      	ldr	r3, [pc, #548]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b88      	ldr	r3, [pc, #544]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800418e:	2180      	movs	r1, #128	; 0x80
 8004190:	0049      	lsls	r1, r1, #1
 8004192:	430a      	orrs	r2, r1
 8004194:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004196:	f7fd fdcf 	bl	8001d38 <HAL_GetTick>
 800419a:	0003      	movs	r3, r0
 800419c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	e008      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a0:	f7fd fdca 	bl	8001d38 <HAL_GetTick>
 80041a4:	0002      	movs	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b64      	cmp	r3, #100	; 0x64
 80041ac:	d901      	bls.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e0f8      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b2:	4b7f      	ldr	r3, [pc, #508]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	2380      	movs	r3, #128	; 0x80
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	4013      	ands	r3, r2
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80041be:	4b7b      	ldr	r3, [pc, #492]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	23c0      	movs	r3, #192	; 0xc0
 80041c4:	039b      	lsls	r3, r3, #14
 80041c6:	4013      	ands	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	23c0      	movs	r3, #192	; 0xc0
 80041d0:	039b      	lsls	r3, r3, #14
 80041d2:	4013      	ands	r3, r2
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d013      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	23c0      	movs	r3, #192	; 0xc0
 80041e0:	029b      	lsls	r3, r3, #10
 80041e2:	401a      	ands	r2, r3
 80041e4:	23c0      	movs	r3, #192	; 0xc0
 80041e6:	029b      	lsls	r3, r3, #10
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d10a      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80041ec:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	029b      	lsls	r3, r3, #10
 80041f4:	401a      	ands	r2, r3
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	029b      	lsls	r3, r3, #10
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d101      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e0d0      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x264>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004202:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004204:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004206:	23c0      	movs	r3, #192	; 0xc0
 8004208:	029b      	lsls	r3, r3, #10
 800420a:	4013      	ands	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d03b      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	23c0      	movs	r3, #192	; 0xc0
 800421a:	029b      	lsls	r3, r3, #10
 800421c:	4013      	ands	r3, r2
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	429a      	cmp	r2, r3
 8004222:	d033      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2220      	movs	r2, #32
 800422a:	4013      	ands	r3, r2
 800422c:	d02e      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800422e:	4b5f      	ldr	r3, [pc, #380]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004232:	4a60      	ldr	r2, [pc, #384]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004234:	4013      	ands	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004238:	4b5c      	ldr	r3, [pc, #368]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800423a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800423c:	4b5b      	ldr	r3, [pc, #364]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800423e:	2180      	movs	r1, #128	; 0x80
 8004240:	0309      	lsls	r1, r1, #12
 8004242:	430a      	orrs	r2, r1
 8004244:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004246:	4b59      	ldr	r3, [pc, #356]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800424a:	4b58      	ldr	r3, [pc, #352]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800424c:	495a      	ldr	r1, [pc, #360]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800424e:	400a      	ands	r2, r1
 8004250:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004252:	4b56      	ldr	r3, [pc, #344]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	4013      	ands	r3, r2
 8004260:	d014      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004262:	f7fd fd69 	bl	8001d38 <HAL_GetTick>
 8004266:	0003      	movs	r3, r0
 8004268:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800426a:	e009      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426c:	f7fd fd64 	bl	8001d38 <HAL_GetTick>
 8004270:	0002      	movs	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	4a51      	ldr	r2, [pc, #324]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d901      	bls.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e091      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x264>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004280:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4013      	ands	r3, r2
 800428a:	d0ef      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2220      	movs	r2, #32
 8004292:	4013      	ands	r3, r2
 8004294:	d01f      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	23c0      	movs	r3, #192	; 0xc0
 800429c:	029b      	lsls	r3, r3, #10
 800429e:	401a      	ands	r2, r3
 80042a0:	23c0      	movs	r3, #192	; 0xc0
 80042a2:	029b      	lsls	r3, r3, #10
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d10c      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80042a8:	4b40      	ldr	r3, [pc, #256]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a44      	ldr	r2, [pc, #272]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	0019      	movs	r1, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	23c0      	movs	r3, #192	; 0xc0
 80042b8:	039b      	lsls	r3, r3, #14
 80042ba:	401a      	ands	r2, r3
 80042bc:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042be:	430a      	orrs	r2, r1
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	4b3a      	ldr	r3, [pc, #232]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	23c0      	movs	r3, #192	; 0xc0
 80042cc:	029b      	lsls	r3, r3, #10
 80042ce:	401a      	ands	r2, r3
 80042d0:	4b36      	ldr	r3, [pc, #216]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042d2:	430a      	orrs	r2, r1
 80042d4:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042d6:	2317      	movs	r3, #23
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d105      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e0:	4b32      	ldr	r3, [pc, #200]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042e4:	4b31      	ldr	r3, [pc, #196]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042e6:	4937      	ldr	r1, [pc, #220]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80042e8:	400a      	ands	r2, r1
 80042ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2201      	movs	r2, #1
 80042f2:	4013      	ands	r3, r2
 80042f4:	d009      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042f6:	4b2d      	ldr	r3, [pc, #180]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fa:	2203      	movs	r2, #3
 80042fc:	4393      	bics	r3, r2
 80042fe:	0019      	movs	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	4b29      	ldr	r3, [pc, #164]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004306:	430a      	orrs	r2, r1
 8004308:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2202      	movs	r2, #2
 8004310:	4013      	ands	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004314:	4b25      	ldr	r3, [pc, #148]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004318:	220c      	movs	r2, #12
 800431a:	4393      	bics	r3, r2
 800431c:	0019      	movs	r1, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	4b22      	ldr	r3, [pc, #136]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004324:	430a      	orrs	r2, r1
 8004326:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2204      	movs	r2, #4
 800432e:	4013      	ands	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004332:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004336:	4a24      	ldr	r2, [pc, #144]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004338:	4013      	ands	r3, r2
 800433a:	0019      	movs	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004342:	430a      	orrs	r2, r1
 8004344:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2208      	movs	r2, #8
 800434c:	4013      	ands	r3, r2
 800434e:	d009      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004350:	4b16      	ldr	r3, [pc, #88]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004354:	4a1d      	ldr	r2, [pc, #116]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004356:	4013      	ands	r3, r2
 8004358:	0019      	movs	r1, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695a      	ldr	r2, [r3, #20]
 800435e:	4b13      	ldr	r3, [pc, #76]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004360:	430a      	orrs	r2, r1
 8004362:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	2380      	movs	r3, #128	; 0x80
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4013      	ands	r3, r2
 800436e:	d009      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004370:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004374:	4a0f      	ldr	r2, [pc, #60]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004376:	4013      	ands	r3, r2
 8004378:	0019      	movs	r1, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004380:	430a      	orrs	r2, r1
 8004382:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2280      	movs	r2, #128	; 0x80
 800438a:	4013      	ands	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800438e:	4b07      	ldr	r3, [pc, #28]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004392:	4a0f      	ldr	r2, [pc, #60]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004394:	4013      	ands	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800439e:	430a      	orrs	r2, r1
 80043a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	0018      	movs	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b006      	add	sp, #24
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40007000 	.word	0x40007000
 80043b4:	fffcffff 	.word	0xfffcffff
 80043b8:	fff7ffff 	.word	0xfff7ffff
 80043bc:	00001388 	.word	0x00001388
 80043c0:	ffcfffff 	.word	0xffcfffff
 80043c4:	efffffff 	.word	0xefffffff
 80043c8:	fffff3ff 	.word	0xfffff3ff
 80043cc:	ffffcfff 	.word	0xffffcfff
 80043d0:	fff3ffff 	.word	0xfff3ffff

080043d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e083      	b.n	80044ee <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	2382      	movs	r3, #130	; 0x82
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d009      	beq.n	800440e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	61da      	str	r2, [r3, #28]
 8004400:	e005      	b.n	800440e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2251      	movs	r2, #81	; 0x51
 8004418:	5c9b      	ldrb	r3, [r3, r2]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d107      	bne.n	8004430 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2250      	movs	r2, #80	; 0x50
 8004424:	2100      	movs	r1, #0
 8004426:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	0018      	movs	r0, r3
 800442c:	f7fd f9e6 	bl	80017fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2251      	movs	r2, #81	; 0x51
 8004434:	2102      	movs	r1, #2
 8004436:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2140      	movs	r1, #64	; 0x40
 8004444:	438a      	bics	r2, r1
 8004446:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	2382      	movs	r3, #130	; 0x82
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	401a      	ands	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6899      	ldr	r1, [r3, #8]
 8004456:	2384      	movs	r3, #132	; 0x84
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	400b      	ands	r3, r1
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68d9      	ldr	r1, [r3, #12]
 8004462:	2380      	movs	r3, #128	; 0x80
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	400b      	ands	r3, r1
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2102      	movs	r1, #2
 8004470:	400b      	ands	r3, r1
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	2101      	movs	r1, #1
 800447a:	400b      	ands	r3, r1
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6999      	ldr	r1, [r3, #24]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	400b      	ands	r3, r1
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	2138      	movs	r1, #56	; 0x38
 8004490:	400b      	ands	r3, r1
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	2180      	movs	r1, #128	; 0x80
 800449a:	400b      	ands	r3, r1
 800449c:	431a      	orrs	r2, r3
 800449e:	0011      	movs	r1, r2
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	019b      	lsls	r3, r3, #6
 80044a8:	401a      	ands	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	0c1b      	lsrs	r3, r3, #16
 80044b8:	2204      	movs	r2, #4
 80044ba:	4013      	ands	r3, r2
 80044bc:	0019      	movs	r1, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2210      	movs	r2, #16
 80044c4:	401a      	ands	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4907      	ldr	r1, [pc, #28]	; (80044f8 <HAL_SPI_Init+0x124>)
 80044da:	400a      	ands	r2, r1
 80044dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2251      	movs	r2, #81	; 0x51
 80044e8:	2101      	movs	r1, #1
 80044ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	0018      	movs	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b002      	add	sp, #8
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	fffff7ff 	.word	0xfffff7ff

080044fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e032      	b.n	8004574 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2239      	movs	r2, #57	; 0x39
 8004512:	5c9b      	ldrb	r3, [r3, r2]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d107      	bne.n	800452a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2238      	movs	r2, #56	; 0x38
 800451e:	2100      	movs	r1, #0
 8004520:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0018      	movs	r0, r3
 8004526:	f7fd fadd 	bl	8001ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2239      	movs	r2, #57	; 0x39
 800452e:	2102      	movs	r1, #2
 8004530:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3304      	adds	r3, #4
 800453a:	0019      	movs	r1, r3
 800453c:	0010      	movs	r0, r2
 800453e:	f000 f977 	bl	8004830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	223e      	movs	r2, #62	; 0x3e
 8004546:	2101      	movs	r1, #1
 8004548:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	223a      	movs	r2, #58	; 0x3a
 800454e:	2101      	movs	r1, #1
 8004550:	5499      	strb	r1, [r3, r2]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	223b      	movs	r2, #59	; 0x3b
 8004556:	2101      	movs	r1, #1
 8004558:	5499      	strb	r1, [r3, r2]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	223c      	movs	r2, #60	; 0x3c
 800455e:	2101      	movs	r1, #1
 8004560:	5499      	strb	r1, [r3, r2]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	223d      	movs	r2, #61	; 0x3d
 8004566:	2101      	movs	r1, #1
 8004568:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2239      	movs	r2, #57	; 0x39
 800456e:	2101      	movs	r1, #1
 8004570:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b002      	add	sp, #8
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2239      	movs	r2, #57	; 0x39
 8004588:	5c9b      	ldrb	r3, [r3, r2]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	d001      	beq.n	8004594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e03b      	b.n	800460c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2239      	movs	r2, #57	; 0x39
 8004598:	2102      	movs	r1, #2
 800459a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2101      	movs	r1, #1
 80045a8:	430a      	orrs	r2, r1
 80045aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	05db      	lsls	r3, r3, #23
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d00e      	beq.n	80045d6 <HAL_TIM_Base_Start_IT+0x5a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a15      	ldr	r2, [pc, #84]	; (8004614 <HAL_TIM_Base_Start_IT+0x98>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_TIM_Base_Start_IT+0x5a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a14      	ldr	r2, [pc, #80]	; (8004618 <HAL_TIM_Base_Start_IT+0x9c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_TIM_Base_Start_IT+0x5a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a12      	ldr	r2, [pc, #72]	; (800461c <HAL_TIM_Base_Start_IT+0xa0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d111      	bne.n	80045fa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2207      	movs	r2, #7
 80045de:	4013      	ands	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b06      	cmp	r3, #6
 80045e6:	d010      	beq.n	800460a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2101      	movs	r1, #1
 80045f4:	430a      	orrs	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f8:	e007      	b.n	800460a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2101      	movs	r1, #1
 8004606:	430a      	orrs	r2, r1
 8004608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	0018      	movs	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	b004      	add	sp, #16
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40000400 	.word	0x40000400
 8004618:	40010800 	.word	0x40010800
 800461c:	40011400 	.word	0x40011400

08004620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2202      	movs	r2, #2
 8004630:	4013      	ands	r3, r2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d124      	bne.n	8004680 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2202      	movs	r2, #2
 800463e:	4013      	ands	r3, r2
 8004640:	2b02      	cmp	r3, #2
 8004642:	d11d      	bne.n	8004680 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2203      	movs	r2, #3
 800464a:	4252      	negs	r2, r2
 800464c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2203      	movs	r2, #3
 800465c:	4013      	ands	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	0018      	movs	r0, r3
 8004664:	f000 f8cc 	bl	8004800 <HAL_TIM_IC_CaptureCallback>
 8004668:	e007      	b.n	800467a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0018      	movs	r0, r3
 800466e:	f000 f8bf 	bl	80047f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	0018      	movs	r0, r3
 8004676:	f000 f8cb 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2204      	movs	r2, #4
 8004688:	4013      	ands	r3, r2
 800468a:	2b04      	cmp	r3, #4
 800468c:	d125      	bne.n	80046da <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2204      	movs	r2, #4
 8004696:	4013      	ands	r3, r2
 8004698:	2b04      	cmp	r3, #4
 800469a:	d11e      	bne.n	80046da <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2205      	movs	r2, #5
 80046a2:	4252      	negs	r2, r2
 80046a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	23c0      	movs	r3, #192	; 0xc0
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4013      	ands	r3, r2
 80046b8:	d004      	beq.n	80046c4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0018      	movs	r0, r3
 80046be:	f000 f89f 	bl	8004800 <HAL_TIM_IC_CaptureCallback>
 80046c2:	e007      	b.n	80046d4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	0018      	movs	r0, r3
 80046c8:	f000 f892 	bl	80047f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	0018      	movs	r0, r3
 80046d0:	f000 f89e 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2208      	movs	r2, #8
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d124      	bne.n	8004732 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	2208      	movs	r2, #8
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d11d      	bne.n	8004732 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2209      	movs	r2, #9
 80046fc:	4252      	negs	r2, r2
 80046fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2204      	movs	r2, #4
 8004704:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	2203      	movs	r2, #3
 800470e:	4013      	ands	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f000 f873 	bl	8004800 <HAL_TIM_IC_CaptureCallback>
 800471a:	e007      	b.n	800472c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	0018      	movs	r0, r3
 8004720:	f000 f866 	bl	80047f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	0018      	movs	r0, r3
 8004728:	f000 f872 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2210      	movs	r2, #16
 800473a:	4013      	ands	r3, r2
 800473c:	2b10      	cmp	r3, #16
 800473e:	d125      	bne.n	800478c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2210      	movs	r2, #16
 8004748:	4013      	ands	r3, r2
 800474a:	2b10      	cmp	r3, #16
 800474c:	d11e      	bne.n	800478c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2211      	movs	r2, #17
 8004754:	4252      	negs	r2, r2
 8004756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2208      	movs	r2, #8
 800475c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	23c0      	movs	r3, #192	; 0xc0
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4013      	ands	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	0018      	movs	r0, r3
 8004770:	f000 f846 	bl	8004800 <HAL_TIM_IC_CaptureCallback>
 8004774:	e007      	b.n	8004786 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0018      	movs	r0, r3
 800477a:	f000 f839 	bl	80047f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	0018      	movs	r0, r3
 8004782:	f000 f845 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2201      	movs	r2, #1
 8004794:	4013      	ands	r3, r2
 8004796:	2b01      	cmp	r3, #1
 8004798:	d10f      	bne.n	80047ba <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d108      	bne.n	80047ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2202      	movs	r2, #2
 80047ae:	4252      	negs	r2, r2
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f7fc feff 	bl	80015b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2240      	movs	r2, #64	; 0x40
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d10f      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2240      	movs	r2, #64	; 0x40
 80047d0:	4013      	ands	r3, r2
 80047d2:	2b40      	cmp	r3, #64	; 0x40
 80047d4:	d108      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2241      	movs	r2, #65	; 0x41
 80047dc:	4252      	negs	r2, r2
 80047de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	0018      	movs	r0, r3
 80047e4:	f000 f81c 	bl	8004820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b002      	add	sp, #8
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b002      	add	sp, #8
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004808:	46c0      	nop			; (mov r8, r8)
 800480a:	46bd      	mov	sp, r7
 800480c:	b002      	add	sp, #8
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004818:	46c0      	nop			; (mov r8, r8)
 800481a:	46bd      	mov	sp, r7
 800481c:	b002      	add	sp, #8
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	46bd      	mov	sp, r7
 800482c:	b002      	add	sp, #8
 800482e:	bd80      	pop	{r7, pc}

08004830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	05db      	lsls	r3, r3, #23
 8004846:	429a      	cmp	r2, r3
 8004848:	d00b      	beq.n	8004862 <TIM_Base_SetConfig+0x32>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a23      	ldr	r2, [pc, #140]	; (80048dc <TIM_Base_SetConfig+0xac>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <TIM_Base_SetConfig+0x32>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <TIM_Base_SetConfig+0xb0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d003      	beq.n	8004862 <TIM_Base_SetConfig+0x32>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <TIM_Base_SetConfig+0xb4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d108      	bne.n	8004874 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2270      	movs	r2, #112	; 0x70
 8004866:	4393      	bics	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	2380      	movs	r3, #128	; 0x80
 8004878:	05db      	lsls	r3, r3, #23
 800487a:	429a      	cmp	r2, r3
 800487c:	d00b      	beq.n	8004896 <TIM_Base_SetConfig+0x66>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a16      	ldr	r2, [pc, #88]	; (80048dc <TIM_Base_SetConfig+0xac>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d007      	beq.n	8004896 <TIM_Base_SetConfig+0x66>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <TIM_Base_SetConfig+0xb0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d003      	beq.n	8004896 <TIM_Base_SetConfig+0x66>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a14      	ldr	r2, [pc, #80]	; (80048e4 <TIM_Base_SetConfig+0xb4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d108      	bne.n	80048a8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4a13      	ldr	r2, [pc, #76]	; (80048e8 <TIM_Base_SetConfig+0xb8>)
 800489a:	4013      	ands	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2280      	movs	r2, #128	; 0x80
 80048ac:	4393      	bics	r3, r2
 80048ae:	001a      	movs	r2, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	615a      	str	r2, [r3, #20]
}
 80048d4:	46c0      	nop			; (mov r8, r8)
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b004      	add	sp, #16
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40010800 	.word	0x40010800
 80048e4:	40011400 	.word	0x40011400
 80048e8:	fffffcff 	.word	0xfffffcff

080048ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2238      	movs	r2, #56	; 0x38
 80048fa:	5c9b      	ldrb	r3, [r3, r2]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004900:	2302      	movs	r3, #2
 8004902:	e047      	b.n	8004994 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2238      	movs	r2, #56	; 0x38
 8004908:	2101      	movs	r1, #1
 800490a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2239      	movs	r2, #57	; 0x39
 8004910:	2102      	movs	r1, #2
 8004912:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2270      	movs	r2, #112	; 0x70
 8004928:	4393      	bics	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	2380      	movs	r3, #128	; 0x80
 8004944:	05db      	lsls	r3, r3, #23
 8004946:	429a      	cmp	r2, r3
 8004948:	d00e      	beq.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a13      	ldr	r2, [pc, #76]	; (800499c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d009      	beq.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a11      	ldr	r2, [pc, #68]	; (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a10      	ldr	r2, [pc, #64]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d10c      	bne.n	8004982 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2280      	movs	r2, #128	; 0x80
 800496c:	4393      	bics	r3, r2
 800496e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	4313      	orrs	r3, r2
 8004978:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2239      	movs	r2, #57	; 0x39
 8004986:	2101      	movs	r1, #1
 8004988:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2238      	movs	r2, #56	; 0x38
 800498e:	2100      	movs	r1, #0
 8004990:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	0018      	movs	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	b004      	add	sp, #16
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40000400 	.word	0x40000400
 80049a0:	40010800 	.word	0x40010800
 80049a4:	40011400 	.word	0x40011400

080049a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e044      	b.n	8004a44 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d107      	bne.n	80049d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2278      	movs	r2, #120	; 0x78
 80049c6:	2100      	movs	r1, #0
 80049c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f7fd f8d7 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2224      	movs	r2, #36	; 0x24
 80049d6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2101      	movs	r1, #1
 80049e4:	438a      	bics	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	0018      	movs	r0, r3
 80049ec:	f000 fc2c 	bl	8005248 <UART_SetConfig>
 80049f0:	0003      	movs	r3, r0
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e024      	b.n	8004a44 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	0018      	movs	r0, r3
 8004a06:	f000 febd 	bl	8005784 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	490d      	ldr	r1, [pc, #52]	; (8004a4c <HAL_UART_Init+0xa4>)
 8004a16:	400a      	ands	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	212a      	movs	r1, #42	; 0x2a
 8004a26:	438a      	bics	r2, r1
 8004a28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2101      	movs	r1, #1
 8004a36:	430a      	orrs	r2, r1
 8004a38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f000 ff55 	bl	80058ec <UART_CheckIdleState>
 8004a42:	0003      	movs	r3, r0
}
 8004a44:	0018      	movs	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b002      	add	sp, #8
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	ffffb7ff 	.word	0xffffb7ff

08004a50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08a      	sub	sp, #40	; 0x28
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	1dbb      	adds	r3, r7, #6
 8004a5e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d000      	beq.n	8004a6a <HAL_UART_Transmit+0x1a>
 8004a68:	e08c      	b.n	8004b84 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_UART_Transmit+0x28>
 8004a70:	1dbb      	adds	r3, r7, #6
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e084      	b.n	8004b86 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	015b      	lsls	r3, r3, #5
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d109      	bne.n	8004a9c <HAL_UART_Transmit+0x4c>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d105      	bne.n	8004a9c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2201      	movs	r2, #1
 8004a94:	4013      	ands	r3, r2
 8004a96:	d001      	beq.n	8004a9c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e074      	b.n	8004b86 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2284      	movs	r2, #132	; 0x84
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2221      	movs	r2, #33	; 0x21
 8004aa8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aaa:	f7fd f945 	bl	8001d38 <HAL_GetTick>
 8004aae:	0003      	movs	r3, r0
 8004ab0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1dba      	adds	r2, r7, #6
 8004ab6:	2150      	movs	r1, #80	; 0x50
 8004ab8:	8812      	ldrh	r2, [r2, #0]
 8004aba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1dba      	adds	r2, r7, #6
 8004ac0:	2152      	movs	r1, #82	; 0x52
 8004ac2:	8812      	ldrh	r2, [r2, #0]
 8004ac4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	015b      	lsls	r3, r3, #5
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d108      	bne.n	8004ae4 <HAL_UART_Transmit+0x94>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d104      	bne.n	8004ae4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	e003      	b.n	8004aec <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004aec:	e02f      	b.n	8004b4e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	0013      	movs	r3, r2
 8004af8:	2200      	movs	r2, #0
 8004afa:	2180      	movs	r1, #128	; 0x80
 8004afc:	f000 ff9e 	bl	8005a3c <UART_WaitOnFlagUntilTimeout>
 8004b00:	1e03      	subs	r3, r0, #0
 8004b02:	d004      	beq.n	8004b0e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e03b      	b.n	8004b86 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	001a      	movs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	05d2      	lsls	r2, r2, #23
 8004b20:	0dd2      	lsrs	r2, r2, #23
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	3302      	adds	r3, #2
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	e007      	b.n	8004b3c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	781a      	ldrb	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2252      	movs	r2, #82	; 0x52
 8004b40:	5a9b      	ldrh	r3, [r3, r2]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b299      	uxth	r1, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2252      	movs	r2, #82	; 0x52
 8004b4c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2252      	movs	r2, #82	; 0x52
 8004b52:	5a9b      	ldrh	r3, [r3, r2]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1c9      	bne.n	8004aee <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	0013      	movs	r3, r2
 8004b64:	2200      	movs	r2, #0
 8004b66:	2140      	movs	r1, #64	; 0x40
 8004b68:	f000 ff68 	bl	8005a3c <UART_WaitOnFlagUntilTimeout>
 8004b6c:	1e03      	subs	r3, r0, #0
 8004b6e:	d004      	beq.n	8004b7a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e005      	b.n	8004b86 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e000      	b.n	8004b86 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004b84:	2302      	movs	r3, #2
  }
}
 8004b86:	0018      	movs	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b008      	add	sp, #32
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	1dbb      	adds	r3, r7, #6
 8004b9c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2280      	movs	r2, #128	; 0x80
 8004ba2:	589b      	ldr	r3, [r3, r2]
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d14a      	bne.n	8004c3e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_UART_Receive_IT+0x26>
 8004bae:	1dbb      	adds	r3, r7, #6
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e042      	b.n	8004c40 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	2380      	movs	r3, #128	; 0x80
 8004bc0:	015b      	lsls	r3, r3, #5
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d109      	bne.n	8004bda <HAL_UART_Receive_IT+0x4a>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d105      	bne.n	8004bda <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d001      	beq.n	8004bda <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e032      	b.n	8004c40 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <HAL_UART_Receive_IT+0xb8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d020      	beq.n	8004c2c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	2380      	movs	r3, #128	; 0x80
 8004bf2:	041b      	lsls	r3, r3, #16
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d019      	beq.n	8004c2c <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfc:	613b      	str	r3, [r7, #16]
  return(result);
 8004bfe:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	2301      	movs	r3, #1
 8004c04:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f383 8810 	msr	PRIMASK, r3
}
 8004c0c:	46c0      	nop			; (mov r8, r8)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2180      	movs	r1, #128	; 0x80
 8004c1a:	04c9      	lsls	r1, r1, #19
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	f383 8810 	msr	PRIMASK, r3
}
 8004c2a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c2c:	1dbb      	adds	r3, r7, #6
 8004c2e:	881a      	ldrh	r2, [r3, #0]
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	0018      	movs	r0, r3
 8004c36:	f000 ff6b 	bl	8005b10 <UART_Start_Receive_IT>
 8004c3a:	0003      	movs	r3, r0
 8004c3c:	e000      	b.n	8004c40 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
  }
}
 8004c40:	0018      	movs	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b008      	add	sp, #32
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40004800 	.word	0x40004800

08004c4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b0ab      	sub	sp, #172	; 0xac
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	22a4      	movs	r2, #164	; 0xa4
 8004c5c:	18b9      	adds	r1, r7, r2
 8004c5e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	20a0      	movs	r0, #160	; 0xa0
 8004c68:	1839      	adds	r1, r7, r0
 8004c6a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	219c      	movs	r1, #156	; 0x9c
 8004c74:	1879      	adds	r1, r7, r1
 8004c76:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c78:	0011      	movs	r1, r2
 8004c7a:	18bb      	adds	r3, r7, r2
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a99      	ldr	r2, [pc, #612]	; (8004ee4 <HAL_UART_IRQHandler+0x298>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	2298      	movs	r2, #152	; 0x98
 8004c84:	18bc      	adds	r4, r7, r2
 8004c86:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004c88:	18bb      	adds	r3, r7, r2
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d114      	bne.n	8004cba <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c90:	187b      	adds	r3, r7, r1
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2220      	movs	r2, #32
 8004c96:	4013      	ands	r3, r2
 8004c98:	d00f      	beq.n	8004cba <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c9a:	183b      	adds	r3, r7, r0
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d00a      	beq.n	8004cba <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d100      	bne.n	8004cae <HAL_UART_IRQHandler+0x62>
 8004cac:	e2a0      	b.n	80051f0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	0010      	movs	r0, r2
 8004cb6:	4798      	blx	r3
      }
      return;
 8004cb8:	e29a      	b.n	80051f0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004cba:	2398      	movs	r3, #152	; 0x98
 8004cbc:	18fb      	adds	r3, r7, r3
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d100      	bne.n	8004cc6 <HAL_UART_IRQHandler+0x7a>
 8004cc4:	e114      	b.n	8004ef0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004cc6:	239c      	movs	r3, #156	; 0x9c
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d106      	bne.n	8004ce0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004cd2:	23a0      	movs	r3, #160	; 0xa0
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a83      	ldr	r2, [pc, #524]	; (8004ee8 <HAL_UART_IRQHandler+0x29c>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d100      	bne.n	8004ce0 <HAL_UART_IRQHandler+0x94>
 8004cde:	e107      	b.n	8004ef0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ce0:	23a4      	movs	r3, #164	; 0xa4
 8004ce2:	18fb      	adds	r3, r7, r3
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d012      	beq.n	8004d12 <HAL_UART_IRQHandler+0xc6>
 8004cec:	23a0      	movs	r3, #160	; 0xa0
 8004cee:	18fb      	adds	r3, r7, r3
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	2380      	movs	r3, #128	; 0x80
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d00b      	beq.n	8004d12 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2284      	movs	r2, #132	; 0x84
 8004d06:	589b      	ldr	r3, [r3, r2]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2184      	movs	r1, #132	; 0x84
 8004d10:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d12:	23a4      	movs	r3, #164	; 0xa4
 8004d14:	18fb      	adds	r3, r7, r3
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d011      	beq.n	8004d42 <HAL_UART_IRQHandler+0xf6>
 8004d1e:	239c      	movs	r3, #156	; 0x9c
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2201      	movs	r2, #1
 8004d26:	4013      	ands	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2284      	movs	r2, #132	; 0x84
 8004d36:	589b      	ldr	r3, [r3, r2]
 8004d38:	2204      	movs	r2, #4
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2184      	movs	r1, #132	; 0x84
 8004d40:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d42:	23a4      	movs	r3, #164	; 0xa4
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d011      	beq.n	8004d72 <HAL_UART_IRQHandler+0x126>
 8004d4e:	239c      	movs	r3, #156	; 0x9c
 8004d50:	18fb      	adds	r3, r7, r3
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2201      	movs	r2, #1
 8004d56:	4013      	ands	r3, r2
 8004d58:	d00b      	beq.n	8004d72 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2204      	movs	r2, #4
 8004d60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2284      	movs	r2, #132	; 0x84
 8004d66:	589b      	ldr	r3, [r3, r2]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2184      	movs	r1, #132	; 0x84
 8004d70:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d72:	23a4      	movs	r3, #164	; 0xa4
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2208      	movs	r2, #8
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d017      	beq.n	8004dae <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d7e:	23a0      	movs	r3, #160	; 0xa0
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2220      	movs	r2, #32
 8004d86:	4013      	ands	r3, r2
 8004d88:	d105      	bne.n	8004d96 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d8a:	239c      	movs	r3, #156	; 0x9c
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2201      	movs	r2, #1
 8004d92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d94:	d00b      	beq.n	8004dae <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2208      	movs	r2, #8
 8004d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2284      	movs	r2, #132	; 0x84
 8004da2:	589b      	ldr	r3, [r3, r2]
 8004da4:	2208      	movs	r2, #8
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2184      	movs	r1, #132	; 0x84
 8004dac:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004dae:	23a4      	movs	r3, #164	; 0xa4
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	4013      	ands	r3, r2
 8004dba:	d013      	beq.n	8004de4 <HAL_UART_IRQHandler+0x198>
 8004dbc:	23a0      	movs	r3, #160	; 0xa0
 8004dbe:	18fb      	adds	r3, r7, r3
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	2380      	movs	r3, #128	; 0x80
 8004dc4:	04db      	lsls	r3, r3, #19
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d00c      	beq.n	8004de4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2280      	movs	r2, #128	; 0x80
 8004dd0:	0112      	lsls	r2, r2, #4
 8004dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2284      	movs	r2, #132	; 0x84
 8004dd8:	589b      	ldr	r3, [r3, r2]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2184      	movs	r1, #132	; 0x84
 8004de2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2284      	movs	r2, #132	; 0x84
 8004de8:	589b      	ldr	r3, [r3, r2]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d100      	bne.n	8004df0 <HAL_UART_IRQHandler+0x1a4>
 8004dee:	e201      	b.n	80051f4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004df0:	23a4      	movs	r3, #164	; 0xa4
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2220      	movs	r2, #32
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d00e      	beq.n	8004e1a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dfc:	23a0      	movs	r3, #160	; 0xa0
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2220      	movs	r2, #32
 8004e04:	4013      	ands	r3, r2
 8004e06:	d008      	beq.n	8004e1a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	0010      	movs	r0, r2
 8004e18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2284      	movs	r2, #132	; 0x84
 8004e1e:	589b      	ldr	r3, [r3, r2]
 8004e20:	2194      	movs	r1, #148	; 0x94
 8004e22:	187a      	adds	r2, r7, r1
 8004e24:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2240      	movs	r2, #64	; 0x40
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d004      	beq.n	8004e3e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e34:	187b      	adds	r3, r7, r1
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2228      	movs	r2, #40	; 0x28
 8004e3a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e3c:	d047      	beq.n	8004ece <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	0018      	movs	r0, r3
 8004e42:	f000 ff2f 	bl	8005ca4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2240      	movs	r2, #64	; 0x40
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	d137      	bne.n	8004ec4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e54:	f3ef 8310 	mrs	r3, PRIMASK
 8004e58:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e5c:	2090      	movs	r0, #144	; 0x90
 8004e5e:	183a      	adds	r2, r7, r0
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	2301      	movs	r3, #1
 8004e64:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e68:	f383 8810 	msr	PRIMASK, r3
}
 8004e6c:	46c0      	nop			; (mov r8, r8)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2140      	movs	r1, #64	; 0x40
 8004e7a:	438a      	bics	r2, r1
 8004e7c:	609a      	str	r2, [r3, #8]
 8004e7e:	183b      	adds	r3, r7, r0
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e86:	f383 8810 	msr	PRIMASK, r3
}
 8004e8a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d012      	beq.n	8004eba <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e98:	4a14      	ldr	r2, [pc, #80]	; (8004eec <HAL_UART_IRQHandler+0x2a0>)
 8004e9a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f7fd fb27 	bl	80024f4 <HAL_DMA_Abort_IT>
 8004ea6:	1e03      	subs	r3, r0, #0
 8004ea8:	d01a      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb8:	e012      	b.n	8004ee0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f000 f9af 	bl	8005220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec2:	e00d      	b.n	8004ee0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f000 f9aa 	bl	8005220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ecc:	e008      	b.n	8004ee0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f000 f9a5 	bl	8005220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2284      	movs	r2, #132	; 0x84
 8004eda:	2100      	movs	r1, #0
 8004edc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004ede:	e189      	b.n	80051f4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee0:	46c0      	nop			; (mov r8, r8)
    return;
 8004ee2:	e187      	b.n	80051f4 <HAL_UART_IRQHandler+0x5a8>
 8004ee4:	0000080f 	.word	0x0000080f
 8004ee8:	04000120 	.word	0x04000120
 8004eec:	08005d6d 	.word	0x08005d6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d000      	beq.n	8004efa <HAL_UART_IRQHandler+0x2ae>
 8004ef8:	e13b      	b.n	8005172 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004efa:	23a4      	movs	r3, #164	; 0xa4
 8004efc:	18fb      	adds	r3, r7, r3
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2210      	movs	r2, #16
 8004f02:	4013      	ands	r3, r2
 8004f04:	d100      	bne.n	8004f08 <HAL_UART_IRQHandler+0x2bc>
 8004f06:	e134      	b.n	8005172 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f08:	23a0      	movs	r3, #160	; 0xa0
 8004f0a:	18fb      	adds	r3, r7, r3
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2210      	movs	r2, #16
 8004f10:	4013      	ands	r3, r2
 8004f12:	d100      	bne.n	8004f16 <HAL_UART_IRQHandler+0x2ca>
 8004f14:	e12d      	b.n	8005172 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2210      	movs	r2, #16
 8004f1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2240      	movs	r2, #64	; 0x40
 8004f26:	4013      	ands	r3, r2
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d000      	beq.n	8004f2e <HAL_UART_IRQHandler+0x2e2>
 8004f2c:	e0a1      	b.n	8005072 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	217e      	movs	r1, #126	; 0x7e
 8004f38:	187b      	adds	r3, r7, r1
 8004f3a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004f3c:	187b      	adds	r3, r7, r1
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d100      	bne.n	8004f46 <HAL_UART_IRQHandler+0x2fa>
 8004f44:	e158      	b.n	80051f8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2258      	movs	r2, #88	; 0x58
 8004f4a:	5a9b      	ldrh	r3, [r3, r2]
 8004f4c:	187a      	adds	r2, r7, r1
 8004f4e:	8812      	ldrh	r2, [r2, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d300      	bcc.n	8004f56 <HAL_UART_IRQHandler+0x30a>
 8004f54:	e150      	b.n	80051f8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	187a      	adds	r2, r7, r1
 8004f5a:	215a      	movs	r1, #90	; 0x5a
 8004f5c:	8812      	ldrh	r2, [r2, #0]
 8004f5e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d16f      	bne.n	800504e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f72:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f76:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f78:	2301      	movs	r3, #1
 8004f7a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7e:	f383 8810 	msr	PRIMASK, r3
}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	499e      	ldr	r1, [pc, #632]	; (8005208 <HAL_UART_IRQHandler+0x5bc>)
 8004f90:	400a      	ands	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f96:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9a:	f383 8810 	msr	PRIMASK, r3
}
 8004f9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa8:	677b      	str	r3, [r7, #116]	; 0x74
 8004faa:	2301      	movs	r3, #1
 8004fac:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb0:	f383 8810 	msr	PRIMASK, r3
}
 8004fb4:	46c0      	nop			; (mov r8, r8)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	438a      	bics	r2, r1
 8004fc4:	609a      	str	r2, [r3, #8]
 8004fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fcc:	f383 8810 	msr	PRIMASK, r3
}
 8004fd0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fda:	673b      	str	r3, [r7, #112]	; 0x70
 8004fdc:	2301      	movs	r3, #1
 8004fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe2:	f383 8810 	msr	PRIMASK, r3
}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2140      	movs	r1, #64	; 0x40
 8004ff4:	438a      	bics	r2, r1
 8004ff6:	609a      	str	r2, [r3, #8]
 8004ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ffa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ffe:	f383 8810 	msr	PRIMASK, r3
}
 8005002:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2280      	movs	r2, #128	; 0x80
 8005008:	2120      	movs	r1, #32
 800500a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005012:	f3ef 8310 	mrs	r3, PRIMASK
 8005016:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005018:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800501c:	2301      	movs	r3, #1
 800501e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005022:	f383 8810 	msr	PRIMASK, r3
}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2110      	movs	r1, #16
 8005034:	438a      	bics	r2, r1
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800503e:	f383 8810 	msr	PRIMASK, r3
}
 8005042:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005048:	0018      	movs	r0, r3
 800504a:	f7fd fa13 	bl	8002474 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2258      	movs	r2, #88	; 0x58
 8005058:	5a9a      	ldrh	r2, [r3, r2]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	215a      	movs	r1, #90	; 0x5a
 800505e:	5a5b      	ldrh	r3, [r3, r1]
 8005060:	b29b      	uxth	r3, r3
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	b29a      	uxth	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	0011      	movs	r1, r2
 800506a:	0018      	movs	r0, r3
 800506c:	f000 f8e0 	bl	8005230 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005070:	e0c2      	b.n	80051f8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2258      	movs	r2, #88	; 0x58
 8005076:	5a99      	ldrh	r1, [r3, r2]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	225a      	movs	r2, #90	; 0x5a
 800507c:	5a9b      	ldrh	r3, [r3, r2]
 800507e:	b29a      	uxth	r2, r3
 8005080:	208e      	movs	r0, #142	; 0x8e
 8005082:	183b      	adds	r3, r7, r0
 8005084:	1a8a      	subs	r2, r1, r2
 8005086:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	225a      	movs	r2, #90	; 0x5a
 800508c:	5a9b      	ldrh	r3, [r3, r2]
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d100      	bne.n	8005096 <HAL_UART_IRQHandler+0x44a>
 8005094:	e0b2      	b.n	80051fc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005096:	183b      	adds	r3, r7, r0
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d100      	bne.n	80050a0 <HAL_UART_IRQHandler+0x454>
 800509e:	e0ad      	b.n	80051fc <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a0:	f3ef 8310 	mrs	r3, PRIMASK
 80050a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80050a6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a8:	2488      	movs	r4, #136	; 0x88
 80050aa:	193a      	adds	r2, r7, r4
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	2301      	movs	r3, #1
 80050b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f383 8810 	msr	PRIMASK, r3
}
 80050b8:	46c0      	nop			; (mov r8, r8)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4951      	ldr	r1, [pc, #324]	; (800520c <HAL_UART_IRQHandler+0x5c0>)
 80050c6:	400a      	ands	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	193b      	adds	r3, r7, r4
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f383 8810 	msr	PRIMASK, r3
}
 80050d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d8:	f3ef 8310 	mrs	r3, PRIMASK
 80050dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80050de:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e0:	2484      	movs	r4, #132	; 0x84
 80050e2:	193a      	adds	r2, r7, r4
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	2301      	movs	r3, #1
 80050e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	f383 8810 	msr	PRIMASK, r3
}
 80050f0:	46c0      	nop			; (mov r8, r8)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2101      	movs	r1, #1
 80050fe:	438a      	bics	r2, r1
 8005100:	609a      	str	r2, [r3, #8]
 8005102:	193b      	adds	r3, r7, r4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	f383 8810 	msr	PRIMASK, r3
}
 800510e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2280      	movs	r2, #128	; 0x80
 8005114:	2120      	movs	r1, #32
 8005116:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005124:	f3ef 8310 	mrs	r3, PRIMASK
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512c:	2480      	movs	r4, #128	; 0x80
 800512e:	193a      	adds	r2, r7, r4
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	2301      	movs	r3, #1
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	f383 8810 	msr	PRIMASK, r3
}
 800513c:	46c0      	nop			; (mov r8, r8)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2110      	movs	r1, #16
 800514a:	438a      	bics	r2, r1
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	193b      	adds	r3, r7, r4
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005156:	f383 8810 	msr	PRIMASK, r3
}
 800515a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005162:	183b      	adds	r3, r7, r0
 8005164:	881a      	ldrh	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	0011      	movs	r1, r2
 800516a:	0018      	movs	r0, r3
 800516c:	f000 f860 	bl	8005230 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005170:	e044      	b.n	80051fc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005172:	23a4      	movs	r3, #164	; 0xa4
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	035b      	lsls	r3, r3, #13
 800517c:	4013      	ands	r3, r2
 800517e:	d010      	beq.n	80051a2 <HAL_UART_IRQHandler+0x556>
 8005180:	239c      	movs	r3, #156	; 0x9c
 8005182:	18fb      	adds	r3, r7, r3
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	2380      	movs	r3, #128	; 0x80
 8005188:	03db      	lsls	r3, r3, #15
 800518a:	4013      	ands	r3, r2
 800518c:	d009      	beq.n	80051a2 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2280      	movs	r2, #128	; 0x80
 8005194:	0352      	lsls	r2, r2, #13
 8005196:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	0018      	movs	r0, r3
 800519c:	f000 ffec 	bl	8006178 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051a0:	e02f      	b.n	8005202 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80051a2:	23a4      	movs	r3, #164	; 0xa4
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2280      	movs	r2, #128	; 0x80
 80051aa:	4013      	ands	r3, r2
 80051ac:	d00f      	beq.n	80051ce <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051ae:	23a0      	movs	r3, #160	; 0xa0
 80051b0:	18fb      	adds	r3, r7, r3
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2280      	movs	r2, #128	; 0x80
 80051b6:	4013      	ands	r3, r2
 80051b8:	d009      	beq.n	80051ce <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01e      	beq.n	8005200 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	0010      	movs	r0, r2
 80051ca:	4798      	blx	r3
    }
    return;
 80051cc:	e018      	b.n	8005200 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051ce:	23a4      	movs	r3, #164	; 0xa4
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2240      	movs	r2, #64	; 0x40
 80051d6:	4013      	ands	r3, r2
 80051d8:	d013      	beq.n	8005202 <HAL_UART_IRQHandler+0x5b6>
 80051da:	23a0      	movs	r3, #160	; 0xa0
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2240      	movs	r2, #64	; 0x40
 80051e2:	4013      	ands	r3, r2
 80051e4:	d00d      	beq.n	8005202 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	0018      	movs	r0, r3
 80051ea:	f000 fdd6 	bl	8005d9a <UART_EndTransmit_IT>
    return;
 80051ee:	e008      	b.n	8005202 <HAL_UART_IRQHandler+0x5b6>
      return;
 80051f0:	46c0      	nop			; (mov r8, r8)
 80051f2:	e006      	b.n	8005202 <HAL_UART_IRQHandler+0x5b6>
    return;
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	e004      	b.n	8005202 <HAL_UART_IRQHandler+0x5b6>
      return;
 80051f8:	46c0      	nop			; (mov r8, r8)
 80051fa:	e002      	b.n	8005202 <HAL_UART_IRQHandler+0x5b6>
      return;
 80051fc:	46c0      	nop			; (mov r8, r8)
 80051fe:	e000      	b.n	8005202 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005200:	46c0      	nop			; (mov r8, r8)
  }

}
 8005202:	46bd      	mov	sp, r7
 8005204:	b02b      	add	sp, #172	; 0xac
 8005206:	bd90      	pop	{r4, r7, pc}
 8005208:	fffffeff 	.word	0xfffffeff
 800520c:	fffffedf 	.word	0xfffffedf

08005210 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	46bd      	mov	sp, r7
 800521c:	b002      	add	sp, #8
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005228:	46c0      	nop			; (mov r8, r8)
 800522a:	46bd      	mov	sp, r7
 800522c:	b002      	add	sp, #8
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	000a      	movs	r2, r1
 800523a:	1cbb      	adds	r3, r7, #2
 800523c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	46bd      	mov	sp, r7
 8005242:	b002      	add	sp, #8
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005248:	b5b0      	push	{r4, r5, r7, lr}
 800524a:	b08e      	sub	sp, #56	; 0x38
 800524c:	af00      	add	r7, sp, #0
 800524e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005250:	231a      	movs	r3, #26
 8005252:	2218      	movs	r2, #24
 8005254:	189b      	adds	r3, r3, r2
 8005256:	19db      	adds	r3, r3, r7
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	431a      	orrs	r2, r3
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	431a      	orrs	r2, r3
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	4313      	orrs	r3, r2
 8005272:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4ac3      	ldr	r2, [pc, #780]	; (8005588 <UART_SetConfig+0x340>)
 800527c:	4013      	ands	r3, r2
 800527e:	0019      	movs	r1, r3
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005286:	430a      	orrs	r2, r1
 8005288:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	4abe      	ldr	r2, [pc, #760]	; (800558c <UART_SetConfig+0x344>)
 8005292:	4013      	ands	r3, r2
 8005294:	0019      	movs	r1, r3
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4ab8      	ldr	r2, [pc, #736]	; (8005590 <UART_SetConfig+0x348>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052b8:	4313      	orrs	r3, r2
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	4ab4      	ldr	r2, [pc, #720]	; (8005594 <UART_SetConfig+0x34c>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	0019      	movs	r1, r3
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052ce:	430a      	orrs	r2, r1
 80052d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4ab0      	ldr	r2, [pc, #704]	; (8005598 <UART_SetConfig+0x350>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d131      	bne.n	8005340 <UART_SetConfig+0xf8>
 80052dc:	4baf      	ldr	r3, [pc, #700]	; (800559c <UART_SetConfig+0x354>)
 80052de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e0:	2203      	movs	r2, #3
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d01d      	beq.n	8005324 <UART_SetConfig+0xdc>
 80052e8:	d823      	bhi.n	8005332 <UART_SetConfig+0xea>
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d00c      	beq.n	8005308 <UART_SetConfig+0xc0>
 80052ee:	d820      	bhi.n	8005332 <UART_SetConfig+0xea>
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <UART_SetConfig+0xb2>
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d00e      	beq.n	8005316 <UART_SetConfig+0xce>
 80052f8:	e01b      	b.n	8005332 <UART_SetConfig+0xea>
 80052fa:	231b      	movs	r3, #27
 80052fc:	2218      	movs	r2, #24
 80052fe:	189b      	adds	r3, r3, r2
 8005300:	19db      	adds	r3, r3, r7
 8005302:	2201      	movs	r2, #1
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e0b4      	b.n	8005472 <UART_SetConfig+0x22a>
 8005308:	231b      	movs	r3, #27
 800530a:	2218      	movs	r2, #24
 800530c:	189b      	adds	r3, r3, r2
 800530e:	19db      	adds	r3, r3, r7
 8005310:	2202      	movs	r2, #2
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	e0ad      	b.n	8005472 <UART_SetConfig+0x22a>
 8005316:	231b      	movs	r3, #27
 8005318:	2218      	movs	r2, #24
 800531a:	189b      	adds	r3, r3, r2
 800531c:	19db      	adds	r3, r3, r7
 800531e:	2204      	movs	r2, #4
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	e0a6      	b.n	8005472 <UART_SetConfig+0x22a>
 8005324:	231b      	movs	r3, #27
 8005326:	2218      	movs	r2, #24
 8005328:	189b      	adds	r3, r3, r2
 800532a:	19db      	adds	r3, r3, r7
 800532c:	2208      	movs	r2, #8
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	e09f      	b.n	8005472 <UART_SetConfig+0x22a>
 8005332:	231b      	movs	r3, #27
 8005334:	2218      	movs	r2, #24
 8005336:	189b      	adds	r3, r3, r2
 8005338:	19db      	adds	r3, r3, r7
 800533a:	2210      	movs	r2, #16
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e098      	b.n	8005472 <UART_SetConfig+0x22a>
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a96      	ldr	r2, [pc, #600]	; (80055a0 <UART_SetConfig+0x358>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d131      	bne.n	80053ae <UART_SetConfig+0x166>
 800534a:	4b94      	ldr	r3, [pc, #592]	; (800559c <UART_SetConfig+0x354>)
 800534c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534e:	220c      	movs	r2, #12
 8005350:	4013      	ands	r3, r2
 8005352:	2b0c      	cmp	r3, #12
 8005354:	d01d      	beq.n	8005392 <UART_SetConfig+0x14a>
 8005356:	d823      	bhi.n	80053a0 <UART_SetConfig+0x158>
 8005358:	2b08      	cmp	r3, #8
 800535a:	d00c      	beq.n	8005376 <UART_SetConfig+0x12e>
 800535c:	d820      	bhi.n	80053a0 <UART_SetConfig+0x158>
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <UART_SetConfig+0x120>
 8005362:	2b04      	cmp	r3, #4
 8005364:	d00e      	beq.n	8005384 <UART_SetConfig+0x13c>
 8005366:	e01b      	b.n	80053a0 <UART_SetConfig+0x158>
 8005368:	231b      	movs	r3, #27
 800536a:	2218      	movs	r2, #24
 800536c:	189b      	adds	r3, r3, r2
 800536e:	19db      	adds	r3, r3, r7
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	e07d      	b.n	8005472 <UART_SetConfig+0x22a>
 8005376:	231b      	movs	r3, #27
 8005378:	2218      	movs	r2, #24
 800537a:	189b      	adds	r3, r3, r2
 800537c:	19db      	adds	r3, r3, r7
 800537e:	2202      	movs	r2, #2
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e076      	b.n	8005472 <UART_SetConfig+0x22a>
 8005384:	231b      	movs	r3, #27
 8005386:	2218      	movs	r2, #24
 8005388:	189b      	adds	r3, r3, r2
 800538a:	19db      	adds	r3, r3, r7
 800538c:	2204      	movs	r2, #4
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	e06f      	b.n	8005472 <UART_SetConfig+0x22a>
 8005392:	231b      	movs	r3, #27
 8005394:	2218      	movs	r2, #24
 8005396:	189b      	adds	r3, r3, r2
 8005398:	19db      	adds	r3, r3, r7
 800539a:	2208      	movs	r2, #8
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e068      	b.n	8005472 <UART_SetConfig+0x22a>
 80053a0:	231b      	movs	r3, #27
 80053a2:	2218      	movs	r2, #24
 80053a4:	189b      	adds	r3, r3, r2
 80053a6:	19db      	adds	r3, r3, r7
 80053a8:	2210      	movs	r2, #16
 80053aa:	701a      	strb	r2, [r3, #0]
 80053ac:	e061      	b.n	8005472 <UART_SetConfig+0x22a>
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a7c      	ldr	r2, [pc, #496]	; (80055a4 <UART_SetConfig+0x35c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d106      	bne.n	80053c6 <UART_SetConfig+0x17e>
 80053b8:	231b      	movs	r3, #27
 80053ba:	2218      	movs	r2, #24
 80053bc:	189b      	adds	r3, r3, r2
 80053be:	19db      	adds	r3, r3, r7
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
 80053c4:	e055      	b.n	8005472 <UART_SetConfig+0x22a>
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a77      	ldr	r2, [pc, #476]	; (80055a8 <UART_SetConfig+0x360>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d106      	bne.n	80053de <UART_SetConfig+0x196>
 80053d0:	231b      	movs	r3, #27
 80053d2:	2218      	movs	r2, #24
 80053d4:	189b      	adds	r3, r3, r2
 80053d6:	19db      	adds	r3, r3, r7
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e049      	b.n	8005472 <UART_SetConfig+0x22a>
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a6b      	ldr	r2, [pc, #428]	; (8005590 <UART_SetConfig+0x348>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d13e      	bne.n	8005466 <UART_SetConfig+0x21e>
 80053e8:	4b6c      	ldr	r3, [pc, #432]	; (800559c <UART_SetConfig+0x354>)
 80053ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053ec:	23c0      	movs	r3, #192	; 0xc0
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	4013      	ands	r3, r2
 80053f2:	22c0      	movs	r2, #192	; 0xc0
 80053f4:	0112      	lsls	r2, r2, #4
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d027      	beq.n	800544a <UART_SetConfig+0x202>
 80053fa:	22c0      	movs	r2, #192	; 0xc0
 80053fc:	0112      	lsls	r2, r2, #4
 80053fe:	4293      	cmp	r3, r2
 8005400:	d82a      	bhi.n	8005458 <UART_SetConfig+0x210>
 8005402:	2280      	movs	r2, #128	; 0x80
 8005404:	0112      	lsls	r2, r2, #4
 8005406:	4293      	cmp	r3, r2
 8005408:	d011      	beq.n	800542e <UART_SetConfig+0x1e6>
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	0112      	lsls	r2, r2, #4
 800540e:	4293      	cmp	r3, r2
 8005410:	d822      	bhi.n	8005458 <UART_SetConfig+0x210>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d004      	beq.n	8005420 <UART_SetConfig+0x1d8>
 8005416:	2280      	movs	r2, #128	; 0x80
 8005418:	00d2      	lsls	r2, r2, #3
 800541a:	4293      	cmp	r3, r2
 800541c:	d00e      	beq.n	800543c <UART_SetConfig+0x1f4>
 800541e:	e01b      	b.n	8005458 <UART_SetConfig+0x210>
 8005420:	231b      	movs	r3, #27
 8005422:	2218      	movs	r2, #24
 8005424:	189b      	adds	r3, r3, r2
 8005426:	19db      	adds	r3, r3, r7
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	e021      	b.n	8005472 <UART_SetConfig+0x22a>
 800542e:	231b      	movs	r3, #27
 8005430:	2218      	movs	r2, #24
 8005432:	189b      	adds	r3, r3, r2
 8005434:	19db      	adds	r3, r3, r7
 8005436:	2202      	movs	r2, #2
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	e01a      	b.n	8005472 <UART_SetConfig+0x22a>
 800543c:	231b      	movs	r3, #27
 800543e:	2218      	movs	r2, #24
 8005440:	189b      	adds	r3, r3, r2
 8005442:	19db      	adds	r3, r3, r7
 8005444:	2204      	movs	r2, #4
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	e013      	b.n	8005472 <UART_SetConfig+0x22a>
 800544a:	231b      	movs	r3, #27
 800544c:	2218      	movs	r2, #24
 800544e:	189b      	adds	r3, r3, r2
 8005450:	19db      	adds	r3, r3, r7
 8005452:	2208      	movs	r2, #8
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	e00c      	b.n	8005472 <UART_SetConfig+0x22a>
 8005458:	231b      	movs	r3, #27
 800545a:	2218      	movs	r2, #24
 800545c:	189b      	adds	r3, r3, r2
 800545e:	19db      	adds	r3, r3, r7
 8005460:	2210      	movs	r2, #16
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	e005      	b.n	8005472 <UART_SetConfig+0x22a>
 8005466:	231b      	movs	r3, #27
 8005468:	2218      	movs	r2, #24
 800546a:	189b      	adds	r3, r3, r2
 800546c:	19db      	adds	r3, r3, r7
 800546e:	2210      	movs	r2, #16
 8005470:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a46      	ldr	r2, [pc, #280]	; (8005590 <UART_SetConfig+0x348>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d000      	beq.n	800547e <UART_SetConfig+0x236>
 800547c:	e09a      	b.n	80055b4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800547e:	231b      	movs	r3, #27
 8005480:	2218      	movs	r2, #24
 8005482:	189b      	adds	r3, r3, r2
 8005484:	19db      	adds	r3, r3, r7
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b08      	cmp	r3, #8
 800548a:	d01d      	beq.n	80054c8 <UART_SetConfig+0x280>
 800548c:	dc20      	bgt.n	80054d0 <UART_SetConfig+0x288>
 800548e:	2b04      	cmp	r3, #4
 8005490:	d015      	beq.n	80054be <UART_SetConfig+0x276>
 8005492:	dc1d      	bgt.n	80054d0 <UART_SetConfig+0x288>
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <UART_SetConfig+0x256>
 8005498:	2b02      	cmp	r3, #2
 800549a:	d005      	beq.n	80054a8 <UART_SetConfig+0x260>
 800549c:	e018      	b.n	80054d0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800549e:	f7fe fe23 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 80054a2:	0003      	movs	r3, r0
 80054a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054a6:	e01c      	b.n	80054e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a8:	4b3c      	ldr	r3, [pc, #240]	; (800559c <UART_SetConfig+0x354>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2210      	movs	r2, #16
 80054ae:	4013      	ands	r3, r2
 80054b0:	d002      	beq.n	80054b8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80054b2:	4b3e      	ldr	r3, [pc, #248]	; (80055ac <UART_SetConfig+0x364>)
 80054b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054b6:	e014      	b.n	80054e2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80054b8:	4b3d      	ldr	r3, [pc, #244]	; (80055b0 <UART_SetConfig+0x368>)
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054bc:	e011      	b.n	80054e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054be:	f7fe fd63 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 80054c2:	0003      	movs	r3, r0
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054c6:	e00c      	b.n	80054e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054ce:	e008      	b.n	80054e2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80054d4:	231a      	movs	r3, #26
 80054d6:	2218      	movs	r2, #24
 80054d8:	189b      	adds	r3, r3, r2
 80054da:	19db      	adds	r3, r3, r7
 80054dc:	2201      	movs	r2, #1
 80054de:	701a      	strb	r2, [r3, #0]
        break;
 80054e0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d100      	bne.n	80054ea <UART_SetConfig+0x2a2>
 80054e8:	e133      	b.n	8005752 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	0013      	movs	r3, r2
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	189b      	adds	r3, r3, r2
 80054f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d305      	bcc.n	8005506 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005502:	429a      	cmp	r2, r3
 8005504:	d906      	bls.n	8005514 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005506:	231a      	movs	r3, #26
 8005508:	2218      	movs	r2, #24
 800550a:	189b      	adds	r3, r3, r2
 800550c:	19db      	adds	r3, r3, r7
 800550e:	2201      	movs	r2, #1
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e11e      	b.n	8005752 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	6939      	ldr	r1, [r7, #16]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	000b      	movs	r3, r1
 8005522:	0e1b      	lsrs	r3, r3, #24
 8005524:	0010      	movs	r0, r2
 8005526:	0205      	lsls	r5, r0, #8
 8005528:	431d      	orrs	r5, r3
 800552a:	000b      	movs	r3, r1
 800552c:	021c      	lsls	r4, r3, #8
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	085b      	lsrs	r3, r3, #1
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	68b8      	ldr	r0, [r7, #8]
 800553c:	68f9      	ldr	r1, [r7, #12]
 800553e:	1900      	adds	r0, r0, r4
 8005540:	4169      	adcs	r1, r5
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	2300      	movs	r3, #0
 800554a:	607b      	str	r3, [r7, #4]
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f7fa fe70 	bl	8000234 <__aeabi_uldivmod>
 8005554:	0002      	movs	r2, r0
 8005556:	000b      	movs	r3, r1
 8005558:	0013      	movs	r3, r2
 800555a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800555c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800555e:	23c0      	movs	r3, #192	; 0xc0
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	429a      	cmp	r2, r3
 8005564:	d309      	bcc.n	800557a <UART_SetConfig+0x332>
 8005566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	035b      	lsls	r3, r3, #13
 800556c:	429a      	cmp	r2, r3
 800556e:	d204      	bcs.n	800557a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005576:	60da      	str	r2, [r3, #12]
 8005578:	e0eb      	b.n	8005752 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800557a:	231a      	movs	r3, #26
 800557c:	2218      	movs	r2, #24
 800557e:	189b      	adds	r3, r3, r2
 8005580:	19db      	adds	r3, r3, r7
 8005582:	2201      	movs	r2, #1
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	e0e4      	b.n	8005752 <UART_SetConfig+0x50a>
 8005588:	efff69f3 	.word	0xefff69f3
 800558c:	ffffcfff 	.word	0xffffcfff
 8005590:	40004800 	.word	0x40004800
 8005594:	fffff4ff 	.word	0xfffff4ff
 8005598:	40013800 	.word	0x40013800
 800559c:	40021000 	.word	0x40021000
 80055a0:	40004400 	.word	0x40004400
 80055a4:	40004c00 	.word	0x40004c00
 80055a8:	40005000 	.word	0x40005000
 80055ac:	003d0900 	.word	0x003d0900
 80055b0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	69da      	ldr	r2, [r3, #28]
 80055b8:	2380      	movs	r3, #128	; 0x80
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	429a      	cmp	r2, r3
 80055be:	d000      	beq.n	80055c2 <UART_SetConfig+0x37a>
 80055c0:	e070      	b.n	80056a4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80055c2:	231b      	movs	r3, #27
 80055c4:	2218      	movs	r2, #24
 80055c6:	189b      	adds	r3, r3, r2
 80055c8:	19db      	adds	r3, r3, r7
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d822      	bhi.n	8005616 <UART_SetConfig+0x3ce>
 80055d0:	009a      	lsls	r2, r3, #2
 80055d2:	4b67      	ldr	r3, [pc, #412]	; (8005770 <UART_SetConfig+0x528>)
 80055d4:	18d3      	adds	r3, r2, r3
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055da:	f7fe fd85 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 80055de:	0003      	movs	r3, r0
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055e2:	e021      	b.n	8005628 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e4:	f7fe fd96 	bl	8004114 <HAL_RCC_GetPCLK2Freq>
 80055e8:	0003      	movs	r3, r0
 80055ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055ec:	e01c      	b.n	8005628 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055ee:	4b61      	ldr	r3, [pc, #388]	; (8005774 <UART_SetConfig+0x52c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2210      	movs	r2, #16
 80055f4:	4013      	ands	r3, r2
 80055f6:	d002      	beq.n	80055fe <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80055f8:	4b5f      	ldr	r3, [pc, #380]	; (8005778 <UART_SetConfig+0x530>)
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055fc:	e014      	b.n	8005628 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80055fe:	4b5f      	ldr	r3, [pc, #380]	; (800577c <UART_SetConfig+0x534>)
 8005600:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005602:	e011      	b.n	8005628 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005604:	f7fe fcc0 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8005608:	0003      	movs	r3, r0
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800560c:	e00c      	b.n	8005628 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800560e:	2380      	movs	r3, #128	; 0x80
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005614:	e008      	b.n	8005628 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800561a:	231a      	movs	r3, #26
 800561c:	2218      	movs	r2, #24
 800561e:	189b      	adds	r3, r3, r2
 8005620:	19db      	adds	r3, r3, r7
 8005622:	2201      	movs	r2, #1
 8005624:	701a      	strb	r2, [r3, #0]
        break;
 8005626:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562a:	2b00      	cmp	r3, #0
 800562c:	d100      	bne.n	8005630 <UART_SetConfig+0x3e8>
 800562e:	e090      	b.n	8005752 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	005a      	lsls	r2, r3, #1
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	085b      	lsrs	r3, r3, #1
 800563a:	18d2      	adds	r2, r2, r3
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	0019      	movs	r1, r3
 8005642:	0010      	movs	r0, r2
 8005644:	f7fa fd6a 	bl	800011c <__udivsi3>
 8005648:	0003      	movs	r3, r0
 800564a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	2b0f      	cmp	r3, #15
 8005650:	d921      	bls.n	8005696 <UART_SetConfig+0x44e>
 8005652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	025b      	lsls	r3, r3, #9
 8005658:	429a      	cmp	r2, r3
 800565a:	d21c      	bcs.n	8005696 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	b29a      	uxth	r2, r3
 8005660:	200e      	movs	r0, #14
 8005662:	2418      	movs	r4, #24
 8005664:	1903      	adds	r3, r0, r4
 8005666:	19db      	adds	r3, r3, r7
 8005668:	210f      	movs	r1, #15
 800566a:	438a      	bics	r2, r1
 800566c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	085b      	lsrs	r3, r3, #1
 8005672:	b29b      	uxth	r3, r3
 8005674:	2207      	movs	r2, #7
 8005676:	4013      	ands	r3, r2
 8005678:	b299      	uxth	r1, r3
 800567a:	1903      	adds	r3, r0, r4
 800567c:	19db      	adds	r3, r3, r7
 800567e:	1902      	adds	r2, r0, r4
 8005680:	19d2      	adds	r2, r2, r7
 8005682:	8812      	ldrh	r2, [r2, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	1902      	adds	r2, r0, r4
 800568e:	19d2      	adds	r2, r2, r7
 8005690:	8812      	ldrh	r2, [r2, #0]
 8005692:	60da      	str	r2, [r3, #12]
 8005694:	e05d      	b.n	8005752 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005696:	231a      	movs	r3, #26
 8005698:	2218      	movs	r2, #24
 800569a:	189b      	adds	r3, r3, r2
 800569c:	19db      	adds	r3, r3, r7
 800569e:	2201      	movs	r2, #1
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	e056      	b.n	8005752 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056a4:	231b      	movs	r3, #27
 80056a6:	2218      	movs	r2, #24
 80056a8:	189b      	adds	r3, r3, r2
 80056aa:	19db      	adds	r3, r3, r7
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d822      	bhi.n	80056f8 <UART_SetConfig+0x4b0>
 80056b2:	009a      	lsls	r2, r3, #2
 80056b4:	4b32      	ldr	r3, [pc, #200]	; (8005780 <UART_SetConfig+0x538>)
 80056b6:	18d3      	adds	r3, r2, r3
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056bc:	f7fe fd14 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 80056c0:	0003      	movs	r3, r0
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056c4:	e021      	b.n	800570a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056c6:	f7fe fd25 	bl	8004114 <HAL_RCC_GetPCLK2Freq>
 80056ca:	0003      	movs	r3, r0
 80056cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056ce:	e01c      	b.n	800570a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056d0:	4b28      	ldr	r3, [pc, #160]	; (8005774 <UART_SetConfig+0x52c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2210      	movs	r2, #16
 80056d6:	4013      	ands	r3, r2
 80056d8:	d002      	beq.n	80056e0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80056da:	4b27      	ldr	r3, [pc, #156]	; (8005778 <UART_SetConfig+0x530>)
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056de:	e014      	b.n	800570a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80056e0:	4b26      	ldr	r3, [pc, #152]	; (800577c <UART_SetConfig+0x534>)
 80056e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056e4:	e011      	b.n	800570a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056e6:	f7fe fc4f 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 80056ea:	0003      	movs	r3, r0
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056ee:	e00c      	b.n	800570a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	021b      	lsls	r3, r3, #8
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056f6:	e008      	b.n	800570a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80056fc:	231a      	movs	r3, #26
 80056fe:	2218      	movs	r2, #24
 8005700:	189b      	adds	r3, r3, r2
 8005702:	19db      	adds	r3, r3, r7
 8005704:	2201      	movs	r2, #1
 8005706:	701a      	strb	r2, [r3, #0]
        break;
 8005708:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d020      	beq.n	8005752 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	085a      	lsrs	r2, r3, #1
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	18d2      	adds	r2, r2, r3
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	0019      	movs	r1, r3
 8005720:	0010      	movs	r0, r2
 8005722:	f7fa fcfb 	bl	800011c <__udivsi3>
 8005726:	0003      	movs	r3, r0
 8005728:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	2b0f      	cmp	r3, #15
 800572e:	d90a      	bls.n	8005746 <UART_SetConfig+0x4fe>
 8005730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005732:	2380      	movs	r3, #128	; 0x80
 8005734:	025b      	lsls	r3, r3, #9
 8005736:	429a      	cmp	r2, r3
 8005738:	d205      	bcs.n	8005746 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	b29a      	uxth	r2, r3
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60da      	str	r2, [r3, #12]
 8005744:	e005      	b.n	8005752 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005746:	231a      	movs	r3, #26
 8005748:	2218      	movs	r2, #24
 800574a:	189b      	adds	r3, r3, r2
 800574c:	19db      	adds	r3, r3, r7
 800574e:	2201      	movs	r2, #1
 8005750:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	2200      	movs	r2, #0
 8005756:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	2200      	movs	r2, #0
 800575c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800575e:	231a      	movs	r3, #26
 8005760:	2218      	movs	r2, #24
 8005762:	189b      	adds	r3, r3, r2
 8005764:	19db      	adds	r3, r3, r7
 8005766:	781b      	ldrb	r3, [r3, #0]
}
 8005768:	0018      	movs	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	b00e      	add	sp, #56	; 0x38
 800576e:	bdb0      	pop	{r4, r5, r7, pc}
 8005770:	08007298 	.word	0x08007298
 8005774:	40021000 	.word	0x40021000
 8005778:	003d0900 	.word	0x003d0900
 800577c:	00f42400 	.word	0x00f42400
 8005780:	080072bc 	.word	0x080072bc

08005784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	2201      	movs	r2, #1
 8005792:	4013      	ands	r3, r2
 8005794:	d00b      	beq.n	80057ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4a4a      	ldr	r2, [pc, #296]	; (80058c8 <UART_AdvFeatureConfig+0x144>)
 800579e:	4013      	ands	r3, r2
 80057a0:	0019      	movs	r1, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	2202      	movs	r2, #2
 80057b4:	4013      	ands	r3, r2
 80057b6:	d00b      	beq.n	80057d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4a43      	ldr	r2, [pc, #268]	; (80058cc <UART_AdvFeatureConfig+0x148>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	0019      	movs	r1, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	2204      	movs	r2, #4
 80057d6:	4013      	ands	r3, r2
 80057d8:	d00b      	beq.n	80057f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	4a3b      	ldr	r2, [pc, #236]	; (80058d0 <UART_AdvFeatureConfig+0x14c>)
 80057e2:	4013      	ands	r3, r2
 80057e4:	0019      	movs	r1, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	2208      	movs	r2, #8
 80057f8:	4013      	ands	r3, r2
 80057fa:	d00b      	beq.n	8005814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	4a34      	ldr	r2, [pc, #208]	; (80058d4 <UART_AdvFeatureConfig+0x150>)
 8005804:	4013      	ands	r3, r2
 8005806:	0019      	movs	r1, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	2210      	movs	r2, #16
 800581a:	4013      	ands	r3, r2
 800581c:	d00b      	beq.n	8005836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	4a2c      	ldr	r2, [pc, #176]	; (80058d8 <UART_AdvFeatureConfig+0x154>)
 8005826:	4013      	ands	r3, r2
 8005828:	0019      	movs	r1, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2220      	movs	r2, #32
 800583c:	4013      	ands	r3, r2
 800583e:	d00b      	beq.n	8005858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	4a25      	ldr	r2, [pc, #148]	; (80058dc <UART_AdvFeatureConfig+0x158>)
 8005848:	4013      	ands	r3, r2
 800584a:	0019      	movs	r1, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	2240      	movs	r2, #64	; 0x40
 800585e:	4013      	ands	r3, r2
 8005860:	d01d      	beq.n	800589e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	4a1d      	ldr	r2, [pc, #116]	; (80058e0 <UART_AdvFeatureConfig+0x15c>)
 800586a:	4013      	ands	r3, r2
 800586c:	0019      	movs	r1, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800587e:	2380      	movs	r3, #128	; 0x80
 8005880:	035b      	lsls	r3, r3, #13
 8005882:	429a      	cmp	r2, r3
 8005884:	d10b      	bne.n	800589e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	4a15      	ldr	r2, [pc, #84]	; (80058e4 <UART_AdvFeatureConfig+0x160>)
 800588e:	4013      	ands	r3, r2
 8005890:	0019      	movs	r1, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2280      	movs	r2, #128	; 0x80
 80058a4:	4013      	ands	r3, r2
 80058a6:	d00b      	beq.n	80058c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4a0e      	ldr	r2, [pc, #56]	; (80058e8 <UART_AdvFeatureConfig+0x164>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	0019      	movs	r1, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
  }
}
 80058c0:	46c0      	nop			; (mov r8, r8)
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b002      	add	sp, #8
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	fffdffff 	.word	0xfffdffff
 80058cc:	fffeffff 	.word	0xfffeffff
 80058d0:	fffbffff 	.word	0xfffbffff
 80058d4:	ffff7fff 	.word	0xffff7fff
 80058d8:	ffffefff 	.word	0xffffefff
 80058dc:	ffffdfff 	.word	0xffffdfff
 80058e0:	ffefffff 	.word	0xffefffff
 80058e4:	ff9fffff 	.word	0xff9fffff
 80058e8:	fff7ffff 	.word	0xfff7ffff

080058ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b092      	sub	sp, #72	; 0x48
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2284      	movs	r2, #132	; 0x84
 80058f8:	2100      	movs	r1, #0
 80058fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058fc:	f7fc fa1c 	bl	8001d38 <HAL_GetTick>
 8005900:	0003      	movs	r3, r0
 8005902:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2208      	movs	r2, #8
 800590c:	4013      	ands	r3, r2
 800590e:	2b08      	cmp	r3, #8
 8005910:	d12c      	bne.n	800596c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005914:	2280      	movs	r2, #128	; 0x80
 8005916:	0391      	lsls	r1, r2, #14
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4a46      	ldr	r2, [pc, #280]	; (8005a34 <UART_CheckIdleState+0x148>)
 800591c:	9200      	str	r2, [sp, #0]
 800591e:	2200      	movs	r2, #0
 8005920:	f000 f88c 	bl	8005a3c <UART_WaitOnFlagUntilTimeout>
 8005924:	1e03      	subs	r3, r0, #0
 8005926:	d021      	beq.n	800596c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005928:	f3ef 8310 	mrs	r3, PRIMASK
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005930:	63bb      	str	r3, [r7, #56]	; 0x38
 8005932:	2301      	movs	r3, #1
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005938:	f383 8810 	msr	PRIMASK, r3
}
 800593c:	46c0      	nop			; (mov r8, r8)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2180      	movs	r1, #128	; 0x80
 800594a:	438a      	bics	r2, r1
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	f383 8810 	msr	PRIMASK, r3
}
 8005958:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2278      	movs	r2, #120	; 0x78
 8005964:	2100      	movs	r1, #0
 8005966:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e05f      	b.n	8005a2c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2204      	movs	r2, #4
 8005974:	4013      	ands	r3, r2
 8005976:	2b04      	cmp	r3, #4
 8005978:	d146      	bne.n	8005a08 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800597a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597c:	2280      	movs	r2, #128	; 0x80
 800597e:	03d1      	lsls	r1, r2, #15
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	4a2c      	ldr	r2, [pc, #176]	; (8005a34 <UART_CheckIdleState+0x148>)
 8005984:	9200      	str	r2, [sp, #0]
 8005986:	2200      	movs	r2, #0
 8005988:	f000 f858 	bl	8005a3c <UART_WaitOnFlagUntilTimeout>
 800598c:	1e03      	subs	r3, r0, #0
 800598e:	d03b      	beq.n	8005a08 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005990:	f3ef 8310 	mrs	r3, PRIMASK
 8005994:	60fb      	str	r3, [r7, #12]
  return(result);
 8005996:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005998:	637b      	str	r3, [r7, #52]	; 0x34
 800599a:	2301      	movs	r3, #1
 800599c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f383 8810 	msr	PRIMASK, r3
}
 80059a4:	46c0      	nop			; (mov r8, r8)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4921      	ldr	r1, [pc, #132]	; (8005a38 <UART_CheckIdleState+0x14c>)
 80059b2:	400a      	ands	r2, r1
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f383 8810 	msr	PRIMASK, r3
}
 80059c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c2:	f3ef 8310 	mrs	r3, PRIMASK
 80059c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80059c8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ca:	633b      	str	r3, [r7, #48]	; 0x30
 80059cc:	2301      	movs	r3, #1
 80059ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f383 8810 	msr	PRIMASK, r3
}
 80059d6:	46c0      	nop			; (mov r8, r8)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2101      	movs	r1, #1
 80059e4:	438a      	bics	r2, r1
 80059e6:	609a      	str	r2, [r3, #8]
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	f383 8810 	msr	PRIMASK, r3
}
 80059f2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2280      	movs	r2, #128	; 0x80
 80059f8:	2120      	movs	r1, #32
 80059fa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2278      	movs	r2, #120	; 0x78
 8005a00:	2100      	movs	r1, #0
 8005a02:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e011      	b.n	8005a2c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2280      	movs	r2, #128	; 0x80
 8005a12:	2120      	movs	r1, #32
 8005a14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2278      	movs	r2, #120	; 0x78
 8005a26:	2100      	movs	r1, #0
 8005a28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b010      	add	sp, #64	; 0x40
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	01ffffff 	.word	0x01ffffff
 8005a38:	fffffedf 	.word	0xfffffedf

08005a3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	603b      	str	r3, [r7, #0]
 8005a48:	1dfb      	adds	r3, r7, #7
 8005a4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4c:	e04b      	b.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	3301      	adds	r3, #1
 8005a52:	d048      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a54:	f7fc f970 	bl	8001d38 <HAL_GetTick>
 8005a58:	0002      	movs	r2, r0
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d302      	bcc.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e04b      	b.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2204      	movs	r2, #4
 8005a76:	4013      	ands	r3, r2
 8005a78:	d035      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	2208      	movs	r2, #8
 8005a82:	4013      	ands	r3, r2
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d111      	bne.n	8005aac <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2208      	movs	r2, #8
 8005a8e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	0018      	movs	r0, r3
 8005a94:	f000 f906 	bl	8005ca4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2284      	movs	r2, #132	; 0x84
 8005a9c:	2108      	movs	r1, #8
 8005a9e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2278      	movs	r2, #120	; 0x78
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e02c      	b.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69da      	ldr	r2, [r3, #28]
 8005ab2:	2380      	movs	r3, #128	; 0x80
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	401a      	ands	r2, r3
 8005ab8:	2380      	movs	r3, #128	; 0x80
 8005aba:	011b      	lsls	r3, r3, #4
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d112      	bne.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2280      	movs	r2, #128	; 0x80
 8005ac6:	0112      	lsls	r2, r2, #4
 8005ac8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	0018      	movs	r0, r3
 8005ace:	f000 f8e9 	bl	8005ca4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2284      	movs	r2, #132	; 0x84
 8005ad6:	2120      	movs	r1, #32
 8005ad8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2278      	movs	r2, #120	; 0x78
 8005ade:	2100      	movs	r1, #0
 8005ae0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e00f      	b.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	4013      	ands	r3, r2
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	425a      	negs	r2, r3
 8005af6:	4153      	adcs	r3, r2
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	001a      	movs	r2, r3
 8005afc:	1dfb      	adds	r3, r7, #7
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d0a4      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	0018      	movs	r0, r3
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	b004      	add	sp, #16
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b090      	sub	sp, #64	; 0x40
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	1dbb      	adds	r3, r7, #6
 8005b1c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	1dba      	adds	r2, r7, #6
 8005b28:	2158      	movs	r1, #88	; 0x58
 8005b2a:	8812      	ldrh	r2, [r2, #0]
 8005b2c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1dba      	adds	r2, r7, #6
 8005b32:	215a      	movs	r1, #90	; 0x5a
 8005b34:	8812      	ldrh	r2, [r2, #0]
 8005b36:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	2380      	movs	r3, #128	; 0x80
 8005b44:	015b      	lsls	r3, r3, #5
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d10d      	bne.n	8005b66 <UART_Start_Receive_IT+0x56>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d104      	bne.n	8005b5c <UART_Start_Receive_IT+0x4c>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	225c      	movs	r2, #92	; 0x5c
 8005b56:	4950      	ldr	r1, [pc, #320]	; (8005c98 <UART_Start_Receive_IT+0x188>)
 8005b58:	5299      	strh	r1, [r3, r2]
 8005b5a:	e02e      	b.n	8005bba <UART_Start_Receive_IT+0xaa>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	225c      	movs	r2, #92	; 0x5c
 8005b60:	21ff      	movs	r1, #255	; 0xff
 8005b62:	5299      	strh	r1, [r3, r2]
 8005b64:	e029      	b.n	8005bba <UART_Start_Receive_IT+0xaa>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10d      	bne.n	8005b8a <UART_Start_Receive_IT+0x7a>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d104      	bne.n	8005b80 <UART_Start_Receive_IT+0x70>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	225c      	movs	r2, #92	; 0x5c
 8005b7a:	21ff      	movs	r1, #255	; 0xff
 8005b7c:	5299      	strh	r1, [r3, r2]
 8005b7e:	e01c      	b.n	8005bba <UART_Start_Receive_IT+0xaa>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	225c      	movs	r2, #92	; 0x5c
 8005b84:	217f      	movs	r1, #127	; 0x7f
 8005b86:	5299      	strh	r1, [r3, r2]
 8005b88:	e017      	b.n	8005bba <UART_Start_Receive_IT+0xaa>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	2380      	movs	r3, #128	; 0x80
 8005b90:	055b      	lsls	r3, r3, #21
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d10d      	bne.n	8005bb2 <UART_Start_Receive_IT+0xa2>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d104      	bne.n	8005ba8 <UART_Start_Receive_IT+0x98>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	225c      	movs	r2, #92	; 0x5c
 8005ba2:	217f      	movs	r1, #127	; 0x7f
 8005ba4:	5299      	strh	r1, [r3, r2]
 8005ba6:	e008      	b.n	8005bba <UART_Start_Receive_IT+0xaa>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	225c      	movs	r2, #92	; 0x5c
 8005bac:	213f      	movs	r1, #63	; 0x3f
 8005bae:	5299      	strh	r1, [r3, r2]
 8005bb0:	e003      	b.n	8005bba <UART_Start_Receive_IT+0xaa>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	225c      	movs	r2, #92	; 0x5c
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2284      	movs	r2, #132	; 0x84
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2280      	movs	r2, #128	; 0x80
 8005bc6:	2122      	movs	r1, #34	; 0x22
 8005bc8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bca:	f3ef 8310 	mrs	r3, PRIMASK
 8005bce:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	f383 8810 	msr	PRIMASK, r3
}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2101      	movs	r1, #1
 8005bec:	430a      	orrs	r2, r1
 8005bee:	609a      	str	r2, [r3, #8]
 8005bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	f383 8810 	msr	PRIMASK, r3
}
 8005bfa:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	015b      	lsls	r3, r3, #5
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d107      	bne.n	8005c18 <UART_Start_Receive_IT+0x108>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d103      	bne.n	8005c18 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4a22      	ldr	r2, [pc, #136]	; (8005c9c <UART_Start_Receive_IT+0x18c>)
 8005c14:	669a      	str	r2, [r3, #104]	; 0x68
 8005c16:	e002      	b.n	8005c1e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4a21      	ldr	r2, [pc, #132]	; (8005ca0 <UART_Start_Receive_IT+0x190>)
 8005c1c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d019      	beq.n	8005c5a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c26:	f3ef 8310 	mrs	r3, PRIMASK
 8005c2a:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c2c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c30:	2301      	movs	r3, #1
 8005c32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	f383 8810 	msr	PRIMASK, r3
}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2190      	movs	r1, #144	; 0x90
 8005c48:	0049      	lsls	r1, r1, #1
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	f383 8810 	msr	PRIMASK, r3
}
 8005c58:	e018      	b.n	8005c8c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c5e:	613b      	str	r3, [r7, #16]
  return(result);
 8005c60:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c64:	2301      	movs	r3, #1
 8005c66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f383 8810 	msr	PRIMASK, r3
}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2120      	movs	r1, #32
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	f383 8810 	msr	PRIMASK, r3
}
 8005c8a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	0018      	movs	r0, r3
 8005c90:	46bd      	mov	sp, r7
 8005c92:	b010      	add	sp, #64	; 0x40
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	000001ff 	.word	0x000001ff
 8005c9c:	08005fb5 	.word	0x08005fb5
 8005ca0:	08005df1 	.word	0x08005df1

08005ca4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08e      	sub	sp, #56	; 0x38
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cac:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb0:	617b      	str	r3, [r7, #20]
  return(result);
 8005cb2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	f383 8810 	msr	PRIMASK, r3
}
 8005cc0:	46c0      	nop			; (mov r8, r8)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4926      	ldr	r1, [pc, #152]	; (8005d68 <UART_EndRxTransfer+0xc4>)
 8005cce:	400a      	ands	r2, r1
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	f383 8810 	msr	PRIMASK, r3
}
 8005cdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cde:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce2:	623b      	str	r3, [r7, #32]
  return(result);
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ce8:	2301      	movs	r3, #1
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	f383 8810 	msr	PRIMASK, r3
}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2101      	movs	r1, #1
 8005d00:	438a      	bics	r2, r1
 8005d02:	609a      	str	r2, [r3, #8]
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	f383 8810 	msr	PRIMASK, r3
}
 8005d0e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d118      	bne.n	8005d4a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d18:	f3ef 8310 	mrs	r3, PRIMASK
 8005d1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d22:	2301      	movs	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f383 8810 	msr	PRIMASK, r3
}
 8005d2c:	46c0      	nop			; (mov r8, r8)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2110      	movs	r1, #16
 8005d3a:	438a      	bics	r2, r1
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f383 8810 	msr	PRIMASK, r3
}
 8005d48:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2280      	movs	r2, #128	; 0x80
 8005d4e:	2120      	movs	r1, #32
 8005d50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	46bd      	mov	sp, r7
 8005d62:	b00e      	add	sp, #56	; 0x38
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	fffffedf 	.word	0xfffffedf

08005d6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	225a      	movs	r2, #90	; 0x5a
 8005d7e:	2100      	movs	r1, #0
 8005d80:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2252      	movs	r2, #82	; 0x52
 8005d86:	2100      	movs	r1, #0
 8005d88:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f7ff fa47 	bl	8005220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d92:	46c0      	nop			; (mov r8, r8)
 8005d94:	46bd      	mov	sp, r7
 8005d96:	b004      	add	sp, #16
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b086      	sub	sp, #24
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da2:	f3ef 8310 	mrs	r3, PRIMASK
 8005da6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005da8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	2301      	movs	r3, #1
 8005dae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f383 8810 	msr	PRIMASK, r3
}
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2140      	movs	r1, #64	; 0x40
 8005dc4:	438a      	bics	r2, r1
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f383 8810 	msr	PRIMASK, r3
}
 8005dd2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	0018      	movs	r0, r3
 8005de4:	f7ff fa14 	bl	8005210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de8:	46c0      	nop			; (mov r8, r8)
 8005dea:	46bd      	mov	sp, r7
 8005dec:	b006      	add	sp, #24
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b094      	sub	sp, #80	; 0x50
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005df8:	204e      	movs	r0, #78	; 0x4e
 8005dfa:	183b      	adds	r3, r7, r0
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	215c      	movs	r1, #92	; 0x5c
 8005e00:	5a52      	ldrh	r2, [r2, r1]
 8005e02:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2280      	movs	r2, #128	; 0x80
 8005e08:	589b      	ldr	r3, [r3, r2]
 8005e0a:	2b22      	cmp	r3, #34	; 0x22
 8005e0c:	d000      	beq.n	8005e10 <UART_RxISR_8BIT+0x20>
 8005e0e:	e0bf      	b.n	8005f90 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e16:	214c      	movs	r1, #76	; 0x4c
 8005e18:	187b      	adds	r3, r7, r1
 8005e1a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e1c:	187b      	adds	r3, r7, r1
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	183b      	adds	r3, r7, r0
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b2d9      	uxtb	r1, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2c:	400a      	ands	r2, r1
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	225a      	movs	r2, #90	; 0x5a
 8005e40:	5a9b      	ldrh	r3, [r3, r2]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b299      	uxth	r1, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	225a      	movs	r2, #90	; 0x5a
 8005e4c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	225a      	movs	r2, #90	; 0x5a
 8005e52:	5a9b      	ldrh	r3, [r3, r2]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d000      	beq.n	8005e5c <UART_RxISR_8BIT+0x6c>
 8005e5a:	e0a1      	b.n	8005fa0 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e64:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e66:	2301      	movs	r3, #1
 8005e68:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	f383 8810 	msr	PRIMASK, r3
}
 8005e70:	46c0      	nop			; (mov r8, r8)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	494a      	ldr	r1, [pc, #296]	; (8005fa8 <UART_RxISR_8BIT+0x1b8>)
 8005e7e:	400a      	ands	r2, r1
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	f383 8810 	msr	PRIMASK, r3
}
 8005e8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e92:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e96:	647b      	str	r3, [r7, #68]	; 0x44
 8005e98:	2301      	movs	r3, #1
 8005e9a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9e:	f383 8810 	msr	PRIMASK, r3
}
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2101      	movs	r1, #1
 8005eb0:	438a      	bics	r2, r1
 8005eb2:	609a      	str	r2, [r3, #8]
 8005eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	f383 8810 	msr	PRIMASK, r3
}
 8005ebe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2280      	movs	r2, #128	; 0x80
 8005ec4:	2120      	movs	r1, #32
 8005ec6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a34      	ldr	r2, [pc, #208]	; (8005fac <UART_RxISR_8BIT+0x1bc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d01f      	beq.n	8005f1e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	2380      	movs	r3, #128	; 0x80
 8005ee6:	041b      	lsls	r3, r3, #16
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d018      	beq.n	8005f1e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eec:	f3ef 8310 	mrs	r3, PRIMASK
 8005ef0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ef2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	f383 8810 	msr	PRIMASK, r3
}
 8005f00:	46c0      	nop			; (mov r8, r8)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4928      	ldr	r1, [pc, #160]	; (8005fb0 <UART_RxISR_8BIT+0x1c0>)
 8005f0e:	400a      	ands	r2, r1
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	f383 8810 	msr	PRIMASK, r3
}
 8005f1c:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d12f      	bne.n	8005f86 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f30:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f32:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f36:	2301      	movs	r3, #1
 8005f38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f383 8810 	msr	PRIMASK, r3
}
 8005f40:	46c0      	nop			; (mov r8, r8)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2110      	movs	r1, #16
 8005f4e:	438a      	bics	r2, r1
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f383 8810 	msr	PRIMASK, r3
}
 8005f5c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	2210      	movs	r2, #16
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b10      	cmp	r3, #16
 8005f6a:	d103      	bne.n	8005f74 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2210      	movs	r2, #16
 8005f72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2258      	movs	r2, #88	; 0x58
 8005f78:	5a9a      	ldrh	r2, [r3, r2]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	0011      	movs	r1, r2
 8005f7e:	0018      	movs	r0, r3
 8005f80:	f7ff f956 	bl	8005230 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f84:	e00c      	b.n	8005fa0 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f7fb fb01 	bl	8001590 <HAL_UART_RxCpltCallback>
}
 8005f8e:	e007      	b.n	8005fa0 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2108      	movs	r1, #8
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	619a      	str	r2, [r3, #24]
}
 8005fa0:	46c0      	nop			; (mov r8, r8)
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b014      	add	sp, #80	; 0x50
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	fffffedf 	.word	0xfffffedf
 8005fac:	40004800 	.word	0x40004800
 8005fb0:	fbffffff 	.word	0xfbffffff

08005fb4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b094      	sub	sp, #80	; 0x50
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005fbc:	204e      	movs	r0, #78	; 0x4e
 8005fbe:	183b      	adds	r3, r7, r0
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	215c      	movs	r1, #92	; 0x5c
 8005fc4:	5a52      	ldrh	r2, [r2, r1]
 8005fc6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2280      	movs	r2, #128	; 0x80
 8005fcc:	589b      	ldr	r3, [r3, r2]
 8005fce:	2b22      	cmp	r3, #34	; 0x22
 8005fd0:	d000      	beq.n	8005fd4 <UART_RxISR_16BIT+0x20>
 8005fd2:	e0bf      	b.n	8006154 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fda:	214c      	movs	r1, #76	; 0x4c
 8005fdc:	187b      	adds	r3, r7, r1
 8005fde:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe4:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005fe6:	187b      	adds	r3, r7, r1
 8005fe8:	183a      	adds	r2, r7, r0
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	8812      	ldrh	r2, [r2, #0]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffa:	1c9a      	adds	r2, r3, #2
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	225a      	movs	r2, #90	; 0x5a
 8006004:	5a9b      	ldrh	r3, [r3, r2]
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b299      	uxth	r1, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	225a      	movs	r2, #90	; 0x5a
 8006010:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	225a      	movs	r2, #90	; 0x5a
 8006016:	5a9b      	ldrh	r3, [r3, r2]
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d000      	beq.n	8006020 <UART_RxISR_16BIT+0x6c>
 800601e:	e0a1      	b.n	8006164 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006020:	f3ef 8310 	mrs	r3, PRIMASK
 8006024:	623b      	str	r3, [r7, #32]
  return(result);
 8006026:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006028:	647b      	str	r3, [r7, #68]	; 0x44
 800602a:	2301      	movs	r3, #1
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	f383 8810 	msr	PRIMASK, r3
}
 8006034:	46c0      	nop			; (mov r8, r8)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	494a      	ldr	r1, [pc, #296]	; (800616c <UART_RxISR_16BIT+0x1b8>)
 8006042:	400a      	ands	r2, r1
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006048:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	f383 8810 	msr	PRIMASK, r3
}
 8006050:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006052:	f3ef 8310 	mrs	r3, PRIMASK
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605a:	643b      	str	r3, [r7, #64]	; 0x40
 800605c:	2301      	movs	r3, #1
 800605e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	f383 8810 	msr	PRIMASK, r3
}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2101      	movs	r1, #1
 8006074:	438a      	bics	r2, r1
 8006076:	609a      	str	r2, [r3, #8]
 8006078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800607a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800607c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607e:	f383 8810 	msr	PRIMASK, r3
}
 8006082:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2280      	movs	r2, #128	; 0x80
 8006088:	2120      	movs	r1, #32
 800608a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a34      	ldr	r2, [pc, #208]	; (8006170 <UART_RxISR_16BIT+0x1bc>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01f      	beq.n	80060e2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	041b      	lsls	r3, r3, #16
 80060ac:	4013      	ands	r3, r2
 80060ae:	d018      	beq.n	80060e2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060b0:	f3ef 8310 	mrs	r3, PRIMASK
 80060b4:	617b      	str	r3, [r7, #20]
  return(result);
 80060b6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060ba:	2301      	movs	r3, #1
 80060bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	f383 8810 	msr	PRIMASK, r3
}
 80060c4:	46c0      	nop			; (mov r8, r8)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4928      	ldr	r1, [pc, #160]	; (8006174 <UART_RxISR_16BIT+0x1c0>)
 80060d2:	400a      	ands	r2, r1
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	f383 8810 	msr	PRIMASK, r3
}
 80060e0:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d12f      	bne.n	800614a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060f0:	f3ef 8310 	mrs	r3, PRIMASK
 80060f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80060f6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80060fa:	2301      	movs	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f383 8810 	msr	PRIMASK, r3
}
 8006104:	46c0      	nop			; (mov r8, r8)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2110      	movs	r1, #16
 8006112:	438a      	bics	r2, r1
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f383 8810 	msr	PRIMASK, r3
}
 8006120:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	2210      	movs	r2, #16
 800612a:	4013      	ands	r3, r2
 800612c:	2b10      	cmp	r3, #16
 800612e:	d103      	bne.n	8006138 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2210      	movs	r2, #16
 8006136:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2258      	movs	r2, #88	; 0x58
 800613c:	5a9a      	ldrh	r2, [r3, r2]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	0011      	movs	r1, r2
 8006142:	0018      	movs	r0, r3
 8006144:	f7ff f874 	bl	8005230 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006148:	e00c      	b.n	8006164 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	0018      	movs	r0, r3
 800614e:	f7fb fa1f 	bl	8001590 <HAL_UART_RxCpltCallback>
}
 8006152:	e007      	b.n	8006164 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2108      	movs	r1, #8
 8006160:	430a      	orrs	r2, r1
 8006162:	619a      	str	r2, [r3, #24]
}
 8006164:	46c0      	nop			; (mov r8, r8)
 8006166:	46bd      	mov	sp, r7
 8006168:	b014      	add	sp, #80	; 0x50
 800616a:	bd80      	pop	{r7, pc}
 800616c:	fffffedf 	.word	0xfffffedf
 8006170:	40004800 	.word	0x40004800
 8006174:	fbffffff 	.word	0xfbffffff

08006178 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006180:	46c0      	nop			; (mov r8, r8)
 8006182:	46bd      	mov	sp, r7
 8006184:	b002      	add	sp, #8
 8006186:	bd80      	pop	{r7, pc}

08006188 <std>:
 8006188:	2300      	movs	r3, #0
 800618a:	b510      	push	{r4, lr}
 800618c:	0004      	movs	r4, r0
 800618e:	6003      	str	r3, [r0, #0]
 8006190:	6043      	str	r3, [r0, #4]
 8006192:	6083      	str	r3, [r0, #8]
 8006194:	8181      	strh	r1, [r0, #12]
 8006196:	6643      	str	r3, [r0, #100]	; 0x64
 8006198:	81c2      	strh	r2, [r0, #14]
 800619a:	6103      	str	r3, [r0, #16]
 800619c:	6143      	str	r3, [r0, #20]
 800619e:	6183      	str	r3, [r0, #24]
 80061a0:	0019      	movs	r1, r3
 80061a2:	2208      	movs	r2, #8
 80061a4:	305c      	adds	r0, #92	; 0x5c
 80061a6:	f000 fa15 	bl	80065d4 <memset>
 80061aa:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <std+0x50>)
 80061ac:	6224      	str	r4, [r4, #32]
 80061ae:	6263      	str	r3, [r4, #36]	; 0x24
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <std+0x54>)
 80061b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80061b4:	4b0a      	ldr	r3, [pc, #40]	; (80061e0 <std+0x58>)
 80061b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <std+0x5c>)
 80061ba:	6323      	str	r3, [r4, #48]	; 0x30
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <std+0x60>)
 80061be:	429c      	cmp	r4, r3
 80061c0:	d005      	beq.n	80061ce <std+0x46>
 80061c2:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <std+0x64>)
 80061c4:	429c      	cmp	r4, r3
 80061c6:	d002      	beq.n	80061ce <std+0x46>
 80061c8:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <std+0x68>)
 80061ca:	429c      	cmp	r4, r3
 80061cc:	d103      	bne.n	80061d6 <std+0x4e>
 80061ce:	0020      	movs	r0, r4
 80061d0:	3058      	adds	r0, #88	; 0x58
 80061d2:	f000 fa7f 	bl	80066d4 <__retarget_lock_init_recursive>
 80061d6:	bd10      	pop	{r4, pc}
 80061d8:	080063f1 	.word	0x080063f1
 80061dc:	08006419 	.word	0x08006419
 80061e0:	08006451 	.word	0x08006451
 80061e4:	0800647d 	.word	0x0800647d
 80061e8:	20000498 	.word	0x20000498
 80061ec:	20000500 	.word	0x20000500
 80061f0:	20000568 	.word	0x20000568

080061f4 <stdio_exit_handler>:
 80061f4:	b510      	push	{r4, lr}
 80061f6:	4a03      	ldr	r2, [pc, #12]	; (8006204 <stdio_exit_handler+0x10>)
 80061f8:	4903      	ldr	r1, [pc, #12]	; (8006208 <stdio_exit_handler+0x14>)
 80061fa:	4804      	ldr	r0, [pc, #16]	; (800620c <stdio_exit_handler+0x18>)
 80061fc:	f000 f86c 	bl	80062d8 <_fwalk_sglue>
 8006200:	bd10      	pop	{r4, pc}
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	2000000c 	.word	0x2000000c
 8006208:	08006f75 	.word	0x08006f75
 800620c:	20000018 	.word	0x20000018

08006210 <cleanup_stdio>:
 8006210:	6841      	ldr	r1, [r0, #4]
 8006212:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <cleanup_stdio+0x30>)
 8006214:	b510      	push	{r4, lr}
 8006216:	0004      	movs	r4, r0
 8006218:	4299      	cmp	r1, r3
 800621a:	d001      	beq.n	8006220 <cleanup_stdio+0x10>
 800621c:	f000 feaa 	bl	8006f74 <_fflush_r>
 8006220:	68a1      	ldr	r1, [r4, #8]
 8006222:	4b08      	ldr	r3, [pc, #32]	; (8006244 <cleanup_stdio+0x34>)
 8006224:	4299      	cmp	r1, r3
 8006226:	d002      	beq.n	800622e <cleanup_stdio+0x1e>
 8006228:	0020      	movs	r0, r4
 800622a:	f000 fea3 	bl	8006f74 <_fflush_r>
 800622e:	68e1      	ldr	r1, [r4, #12]
 8006230:	4b05      	ldr	r3, [pc, #20]	; (8006248 <cleanup_stdio+0x38>)
 8006232:	4299      	cmp	r1, r3
 8006234:	d002      	beq.n	800623c <cleanup_stdio+0x2c>
 8006236:	0020      	movs	r0, r4
 8006238:	f000 fe9c 	bl	8006f74 <_fflush_r>
 800623c:	bd10      	pop	{r4, pc}
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	20000498 	.word	0x20000498
 8006244:	20000500 	.word	0x20000500
 8006248:	20000568 	.word	0x20000568

0800624c <global_stdio_init.part.0>:
 800624c:	b510      	push	{r4, lr}
 800624e:	4b09      	ldr	r3, [pc, #36]	; (8006274 <global_stdio_init.part.0+0x28>)
 8006250:	4a09      	ldr	r2, [pc, #36]	; (8006278 <global_stdio_init.part.0+0x2c>)
 8006252:	2104      	movs	r1, #4
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	4809      	ldr	r0, [pc, #36]	; (800627c <global_stdio_init.part.0+0x30>)
 8006258:	2200      	movs	r2, #0
 800625a:	f7ff ff95 	bl	8006188 <std>
 800625e:	2201      	movs	r2, #1
 8006260:	2109      	movs	r1, #9
 8006262:	4807      	ldr	r0, [pc, #28]	; (8006280 <global_stdio_init.part.0+0x34>)
 8006264:	f7ff ff90 	bl	8006188 <std>
 8006268:	2202      	movs	r2, #2
 800626a:	2112      	movs	r1, #18
 800626c:	4805      	ldr	r0, [pc, #20]	; (8006284 <global_stdio_init.part.0+0x38>)
 800626e:	f7ff ff8b 	bl	8006188 <std>
 8006272:	bd10      	pop	{r4, pc}
 8006274:	200005d0 	.word	0x200005d0
 8006278:	080061f5 	.word	0x080061f5
 800627c:	20000498 	.word	0x20000498
 8006280:	20000500 	.word	0x20000500
 8006284:	20000568 	.word	0x20000568

08006288 <__sfp_lock_acquire>:
 8006288:	b510      	push	{r4, lr}
 800628a:	4802      	ldr	r0, [pc, #8]	; (8006294 <__sfp_lock_acquire+0xc>)
 800628c:	f000 fa23 	bl	80066d6 <__retarget_lock_acquire_recursive>
 8006290:	bd10      	pop	{r4, pc}
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	200005d9 	.word	0x200005d9

08006298 <__sfp_lock_release>:
 8006298:	b510      	push	{r4, lr}
 800629a:	4802      	ldr	r0, [pc, #8]	; (80062a4 <__sfp_lock_release+0xc>)
 800629c:	f000 fa1c 	bl	80066d8 <__retarget_lock_release_recursive>
 80062a0:	bd10      	pop	{r4, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	200005d9 	.word	0x200005d9

080062a8 <__sinit>:
 80062a8:	b510      	push	{r4, lr}
 80062aa:	0004      	movs	r4, r0
 80062ac:	f7ff ffec 	bl	8006288 <__sfp_lock_acquire>
 80062b0:	6a23      	ldr	r3, [r4, #32]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <__sinit+0x14>
 80062b6:	f7ff ffef 	bl	8006298 <__sfp_lock_release>
 80062ba:	bd10      	pop	{r4, pc}
 80062bc:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <__sinit+0x28>)
 80062be:	6223      	str	r3, [r4, #32]
 80062c0:	4b04      	ldr	r3, [pc, #16]	; (80062d4 <__sinit+0x2c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1f6      	bne.n	80062b6 <__sinit+0xe>
 80062c8:	f7ff ffc0 	bl	800624c <global_stdio_init.part.0>
 80062cc:	e7f3      	b.n	80062b6 <__sinit+0xe>
 80062ce:	46c0      	nop			; (mov r8, r8)
 80062d0:	08006211 	.word	0x08006211
 80062d4:	200005d0 	.word	0x200005d0

080062d8 <_fwalk_sglue>:
 80062d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062da:	0014      	movs	r4, r2
 80062dc:	2600      	movs	r6, #0
 80062de:	9000      	str	r0, [sp, #0]
 80062e0:	9101      	str	r1, [sp, #4]
 80062e2:	68a5      	ldr	r5, [r4, #8]
 80062e4:	6867      	ldr	r7, [r4, #4]
 80062e6:	3f01      	subs	r7, #1
 80062e8:	d504      	bpl.n	80062f4 <_fwalk_sglue+0x1c>
 80062ea:	6824      	ldr	r4, [r4, #0]
 80062ec:	2c00      	cmp	r4, #0
 80062ee:	d1f8      	bne.n	80062e2 <_fwalk_sglue+0xa>
 80062f0:	0030      	movs	r0, r6
 80062f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062f4:	89ab      	ldrh	r3, [r5, #12]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d908      	bls.n	800630c <_fwalk_sglue+0x34>
 80062fa:	220e      	movs	r2, #14
 80062fc:	5eab      	ldrsh	r3, [r5, r2]
 80062fe:	3301      	adds	r3, #1
 8006300:	d004      	beq.n	800630c <_fwalk_sglue+0x34>
 8006302:	0029      	movs	r1, r5
 8006304:	9800      	ldr	r0, [sp, #0]
 8006306:	9b01      	ldr	r3, [sp, #4]
 8006308:	4798      	blx	r3
 800630a:	4306      	orrs	r6, r0
 800630c:	3568      	adds	r5, #104	; 0x68
 800630e:	e7ea      	b.n	80062e6 <_fwalk_sglue+0xe>

08006310 <iprintf>:
 8006310:	b40f      	push	{r0, r1, r2, r3}
 8006312:	b507      	push	{r0, r1, r2, lr}
 8006314:	4905      	ldr	r1, [pc, #20]	; (800632c <iprintf+0x1c>)
 8006316:	ab04      	add	r3, sp, #16
 8006318:	6808      	ldr	r0, [r1, #0]
 800631a:	cb04      	ldmia	r3!, {r2}
 800631c:	6881      	ldr	r1, [r0, #8]
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	f000 fb02 	bl	8006928 <_vfiprintf_r>
 8006324:	b003      	add	sp, #12
 8006326:	bc08      	pop	{r3}
 8006328:	b004      	add	sp, #16
 800632a:	4718      	bx	r3
 800632c:	20000064 	.word	0x20000064

08006330 <_puts_r>:
 8006330:	6a03      	ldr	r3, [r0, #32]
 8006332:	b570      	push	{r4, r5, r6, lr}
 8006334:	0005      	movs	r5, r0
 8006336:	000e      	movs	r6, r1
 8006338:	6884      	ldr	r4, [r0, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <_puts_r+0x12>
 800633e:	f7ff ffb3 	bl	80062a8 <__sinit>
 8006342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006344:	07db      	lsls	r3, r3, #31
 8006346:	d405      	bmi.n	8006354 <_puts_r+0x24>
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	059b      	lsls	r3, r3, #22
 800634c:	d402      	bmi.n	8006354 <_puts_r+0x24>
 800634e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006350:	f000 f9c1 	bl	80066d6 <__retarget_lock_acquire_recursive>
 8006354:	89a3      	ldrh	r3, [r4, #12]
 8006356:	071b      	lsls	r3, r3, #28
 8006358:	d502      	bpl.n	8006360 <_puts_r+0x30>
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d11f      	bne.n	80063a0 <_puts_r+0x70>
 8006360:	0021      	movs	r1, r4
 8006362:	0028      	movs	r0, r5
 8006364:	f000 f8d2 	bl	800650c <__swsetup_r>
 8006368:	2800      	cmp	r0, #0
 800636a:	d019      	beq.n	80063a0 <_puts_r+0x70>
 800636c:	2501      	movs	r5, #1
 800636e:	426d      	negs	r5, r5
 8006370:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006372:	07db      	lsls	r3, r3, #31
 8006374:	d405      	bmi.n	8006382 <_puts_r+0x52>
 8006376:	89a3      	ldrh	r3, [r4, #12]
 8006378:	059b      	lsls	r3, r3, #22
 800637a:	d402      	bmi.n	8006382 <_puts_r+0x52>
 800637c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800637e:	f000 f9ab 	bl	80066d8 <__retarget_lock_release_recursive>
 8006382:	0028      	movs	r0, r5
 8006384:	bd70      	pop	{r4, r5, r6, pc}
 8006386:	3601      	adds	r6, #1
 8006388:	60a3      	str	r3, [r4, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	da04      	bge.n	8006398 <_puts_r+0x68>
 800638e:	69a2      	ldr	r2, [r4, #24]
 8006390:	429a      	cmp	r2, r3
 8006392:	dc16      	bgt.n	80063c2 <_puts_r+0x92>
 8006394:	290a      	cmp	r1, #10
 8006396:	d014      	beq.n	80063c2 <_puts_r+0x92>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	6022      	str	r2, [r4, #0]
 800639e:	7019      	strb	r1, [r3, #0]
 80063a0:	68a3      	ldr	r3, [r4, #8]
 80063a2:	7831      	ldrb	r1, [r6, #0]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	2900      	cmp	r1, #0
 80063a8:	d1ed      	bne.n	8006386 <_puts_r+0x56>
 80063aa:	60a3      	str	r3, [r4, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	da0f      	bge.n	80063d0 <_puts_r+0xa0>
 80063b0:	0028      	movs	r0, r5
 80063b2:	0022      	movs	r2, r4
 80063b4:	310a      	adds	r1, #10
 80063b6:	f000 f867 	bl	8006488 <__swbuf_r>
 80063ba:	250a      	movs	r5, #10
 80063bc:	3001      	adds	r0, #1
 80063be:	d1d7      	bne.n	8006370 <_puts_r+0x40>
 80063c0:	e7d4      	b.n	800636c <_puts_r+0x3c>
 80063c2:	0022      	movs	r2, r4
 80063c4:	0028      	movs	r0, r5
 80063c6:	f000 f85f 	bl	8006488 <__swbuf_r>
 80063ca:	3001      	adds	r0, #1
 80063cc:	d1e8      	bne.n	80063a0 <_puts_r+0x70>
 80063ce:	e7cd      	b.n	800636c <_puts_r+0x3c>
 80063d0:	250a      	movs	r5, #10
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	6022      	str	r2, [r4, #0]
 80063d8:	701d      	strb	r5, [r3, #0]
 80063da:	e7c9      	b.n	8006370 <_puts_r+0x40>

080063dc <puts>:
 80063dc:	b510      	push	{r4, lr}
 80063de:	4b03      	ldr	r3, [pc, #12]	; (80063ec <puts+0x10>)
 80063e0:	0001      	movs	r1, r0
 80063e2:	6818      	ldr	r0, [r3, #0]
 80063e4:	f7ff ffa4 	bl	8006330 <_puts_r>
 80063e8:	bd10      	pop	{r4, pc}
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	20000064 	.word	0x20000064

080063f0 <__sread>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	000c      	movs	r4, r1
 80063f4:	250e      	movs	r5, #14
 80063f6:	5f49      	ldrsh	r1, [r1, r5]
 80063f8:	f000 f91a 	bl	8006630 <_read_r>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	db03      	blt.n	8006408 <__sread+0x18>
 8006400:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006402:	181b      	adds	r3, r3, r0
 8006404:	6563      	str	r3, [r4, #84]	; 0x54
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	4a02      	ldr	r2, [pc, #8]	; (8006414 <__sread+0x24>)
 800640c:	4013      	ands	r3, r2
 800640e:	81a3      	strh	r3, [r4, #12]
 8006410:	e7f9      	b.n	8006406 <__sread+0x16>
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	ffffefff 	.word	0xffffefff

08006418 <__swrite>:
 8006418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641a:	001f      	movs	r7, r3
 800641c:	898b      	ldrh	r3, [r1, #12]
 800641e:	0005      	movs	r5, r0
 8006420:	000c      	movs	r4, r1
 8006422:	0016      	movs	r6, r2
 8006424:	05db      	lsls	r3, r3, #23
 8006426:	d505      	bpl.n	8006434 <__swrite+0x1c>
 8006428:	230e      	movs	r3, #14
 800642a:	5ec9      	ldrsh	r1, [r1, r3]
 800642c:	2200      	movs	r2, #0
 800642e:	2302      	movs	r3, #2
 8006430:	f000 f8ea 	bl	8006608 <_lseek_r>
 8006434:	89a3      	ldrh	r3, [r4, #12]
 8006436:	4a05      	ldr	r2, [pc, #20]	; (800644c <__swrite+0x34>)
 8006438:	0028      	movs	r0, r5
 800643a:	4013      	ands	r3, r2
 800643c:	81a3      	strh	r3, [r4, #12]
 800643e:	0032      	movs	r2, r6
 8006440:	230e      	movs	r3, #14
 8006442:	5ee1      	ldrsh	r1, [r4, r3]
 8006444:	003b      	movs	r3, r7
 8006446:	f000 f907 	bl	8006658 <_write_r>
 800644a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800644c:	ffffefff 	.word	0xffffefff

08006450 <__sseek>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	000c      	movs	r4, r1
 8006454:	250e      	movs	r5, #14
 8006456:	5f49      	ldrsh	r1, [r1, r5]
 8006458:	f000 f8d6 	bl	8006608 <_lseek_r>
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	1c42      	adds	r2, r0, #1
 8006460:	d103      	bne.n	800646a <__sseek+0x1a>
 8006462:	4a05      	ldr	r2, [pc, #20]	; (8006478 <__sseek+0x28>)
 8006464:	4013      	ands	r3, r2
 8006466:	81a3      	strh	r3, [r4, #12]
 8006468:	bd70      	pop	{r4, r5, r6, pc}
 800646a:	2280      	movs	r2, #128	; 0x80
 800646c:	0152      	lsls	r2, r2, #5
 800646e:	4313      	orrs	r3, r2
 8006470:	81a3      	strh	r3, [r4, #12]
 8006472:	6560      	str	r0, [r4, #84]	; 0x54
 8006474:	e7f8      	b.n	8006468 <__sseek+0x18>
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	ffffefff 	.word	0xffffefff

0800647c <__sclose>:
 800647c:	b510      	push	{r4, lr}
 800647e:	230e      	movs	r3, #14
 8006480:	5ec9      	ldrsh	r1, [r1, r3]
 8006482:	f000 f8af 	bl	80065e4 <_close_r>
 8006486:	bd10      	pop	{r4, pc}

08006488 <__swbuf_r>:
 8006488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648a:	0006      	movs	r6, r0
 800648c:	000d      	movs	r5, r1
 800648e:	0014      	movs	r4, r2
 8006490:	2800      	cmp	r0, #0
 8006492:	d004      	beq.n	800649e <__swbuf_r+0x16>
 8006494:	6a03      	ldr	r3, [r0, #32]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <__swbuf_r+0x16>
 800649a:	f7ff ff05 	bl	80062a8 <__sinit>
 800649e:	69a3      	ldr	r3, [r4, #24]
 80064a0:	60a3      	str	r3, [r4, #8]
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	071b      	lsls	r3, r3, #28
 80064a6:	d528      	bpl.n	80064fa <__swbuf_r+0x72>
 80064a8:	6923      	ldr	r3, [r4, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d025      	beq.n	80064fa <__swbuf_r+0x72>
 80064ae:	6923      	ldr	r3, [r4, #16]
 80064b0:	6820      	ldr	r0, [r4, #0]
 80064b2:	b2ef      	uxtb	r7, r5
 80064b4:	1ac0      	subs	r0, r0, r3
 80064b6:	6963      	ldr	r3, [r4, #20]
 80064b8:	b2ed      	uxtb	r5, r5
 80064ba:	4283      	cmp	r3, r0
 80064bc:	dc05      	bgt.n	80064ca <__swbuf_r+0x42>
 80064be:	0021      	movs	r1, r4
 80064c0:	0030      	movs	r0, r6
 80064c2:	f000 fd57 	bl	8006f74 <_fflush_r>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d11d      	bne.n	8006506 <__swbuf_r+0x7e>
 80064ca:	68a3      	ldr	r3, [r4, #8]
 80064cc:	3001      	adds	r0, #1
 80064ce:	3b01      	subs	r3, #1
 80064d0:	60a3      	str	r3, [r4, #8]
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	6022      	str	r2, [r4, #0]
 80064d8:	701f      	strb	r7, [r3, #0]
 80064da:	6963      	ldr	r3, [r4, #20]
 80064dc:	4283      	cmp	r3, r0
 80064de:	d004      	beq.n	80064ea <__swbuf_r+0x62>
 80064e0:	89a3      	ldrh	r3, [r4, #12]
 80064e2:	07db      	lsls	r3, r3, #31
 80064e4:	d507      	bpl.n	80064f6 <__swbuf_r+0x6e>
 80064e6:	2d0a      	cmp	r5, #10
 80064e8:	d105      	bne.n	80064f6 <__swbuf_r+0x6e>
 80064ea:	0021      	movs	r1, r4
 80064ec:	0030      	movs	r0, r6
 80064ee:	f000 fd41 	bl	8006f74 <_fflush_r>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d107      	bne.n	8006506 <__swbuf_r+0x7e>
 80064f6:	0028      	movs	r0, r5
 80064f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064fa:	0021      	movs	r1, r4
 80064fc:	0030      	movs	r0, r6
 80064fe:	f000 f805 	bl	800650c <__swsetup_r>
 8006502:	2800      	cmp	r0, #0
 8006504:	d0d3      	beq.n	80064ae <__swbuf_r+0x26>
 8006506:	2501      	movs	r5, #1
 8006508:	426d      	negs	r5, r5
 800650a:	e7f4      	b.n	80064f6 <__swbuf_r+0x6e>

0800650c <__swsetup_r>:
 800650c:	4b30      	ldr	r3, [pc, #192]	; (80065d0 <__swsetup_r+0xc4>)
 800650e:	b570      	push	{r4, r5, r6, lr}
 8006510:	0005      	movs	r5, r0
 8006512:	6818      	ldr	r0, [r3, #0]
 8006514:	000c      	movs	r4, r1
 8006516:	2800      	cmp	r0, #0
 8006518:	d004      	beq.n	8006524 <__swsetup_r+0x18>
 800651a:	6a03      	ldr	r3, [r0, #32]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <__swsetup_r+0x18>
 8006520:	f7ff fec2 	bl	80062a8 <__sinit>
 8006524:	230c      	movs	r3, #12
 8006526:	5ee2      	ldrsh	r2, [r4, r3]
 8006528:	b293      	uxth	r3, r2
 800652a:	0711      	lsls	r1, r2, #28
 800652c:	d423      	bmi.n	8006576 <__swsetup_r+0x6a>
 800652e:	06d9      	lsls	r1, r3, #27
 8006530:	d407      	bmi.n	8006542 <__swsetup_r+0x36>
 8006532:	2309      	movs	r3, #9
 8006534:	2001      	movs	r0, #1
 8006536:	602b      	str	r3, [r5, #0]
 8006538:	3337      	adds	r3, #55	; 0x37
 800653a:	4313      	orrs	r3, r2
 800653c:	81a3      	strh	r3, [r4, #12]
 800653e:	4240      	negs	r0, r0
 8006540:	bd70      	pop	{r4, r5, r6, pc}
 8006542:	075b      	lsls	r3, r3, #29
 8006544:	d513      	bpl.n	800656e <__swsetup_r+0x62>
 8006546:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006548:	2900      	cmp	r1, #0
 800654a:	d008      	beq.n	800655e <__swsetup_r+0x52>
 800654c:	0023      	movs	r3, r4
 800654e:	3344      	adds	r3, #68	; 0x44
 8006550:	4299      	cmp	r1, r3
 8006552:	d002      	beq.n	800655a <__swsetup_r+0x4e>
 8006554:	0028      	movs	r0, r5
 8006556:	f000 f8c1 	bl	80066dc <_free_r>
 800655a:	2300      	movs	r3, #0
 800655c:	6363      	str	r3, [r4, #52]	; 0x34
 800655e:	2224      	movs	r2, #36	; 0x24
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	4393      	bics	r3, r2
 8006564:	81a3      	strh	r3, [r4, #12]
 8006566:	2300      	movs	r3, #0
 8006568:	6063      	str	r3, [r4, #4]
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	2308      	movs	r3, #8
 8006570:	89a2      	ldrh	r2, [r4, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	81a3      	strh	r3, [r4, #12]
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10b      	bne.n	8006594 <__swsetup_r+0x88>
 800657c:	21a0      	movs	r1, #160	; 0xa0
 800657e:	2280      	movs	r2, #128	; 0x80
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	0089      	lsls	r1, r1, #2
 8006584:	0092      	lsls	r2, r2, #2
 8006586:	400b      	ands	r3, r1
 8006588:	4293      	cmp	r3, r2
 800658a:	d003      	beq.n	8006594 <__swsetup_r+0x88>
 800658c:	0021      	movs	r1, r4
 800658e:	0028      	movs	r0, r5
 8006590:	f000 fd44 	bl	800701c <__smakebuf_r>
 8006594:	220c      	movs	r2, #12
 8006596:	5ea3      	ldrsh	r3, [r4, r2]
 8006598:	2001      	movs	r0, #1
 800659a:	001a      	movs	r2, r3
 800659c:	b299      	uxth	r1, r3
 800659e:	4002      	ands	r2, r0
 80065a0:	4203      	tst	r3, r0
 80065a2:	d00f      	beq.n	80065c4 <__swsetup_r+0xb8>
 80065a4:	2200      	movs	r2, #0
 80065a6:	60a2      	str	r2, [r4, #8]
 80065a8:	6962      	ldr	r2, [r4, #20]
 80065aa:	4252      	negs	r2, r2
 80065ac:	61a2      	str	r2, [r4, #24]
 80065ae:	2000      	movs	r0, #0
 80065b0:	6922      	ldr	r2, [r4, #16]
 80065b2:	4282      	cmp	r2, r0
 80065b4:	d1c4      	bne.n	8006540 <__swsetup_r+0x34>
 80065b6:	0609      	lsls	r1, r1, #24
 80065b8:	d5c2      	bpl.n	8006540 <__swsetup_r+0x34>
 80065ba:	2240      	movs	r2, #64	; 0x40
 80065bc:	4313      	orrs	r3, r2
 80065be:	81a3      	strh	r3, [r4, #12]
 80065c0:	3801      	subs	r0, #1
 80065c2:	e7bd      	b.n	8006540 <__swsetup_r+0x34>
 80065c4:	0788      	lsls	r0, r1, #30
 80065c6:	d400      	bmi.n	80065ca <__swsetup_r+0xbe>
 80065c8:	6962      	ldr	r2, [r4, #20]
 80065ca:	60a2      	str	r2, [r4, #8]
 80065cc:	e7ef      	b.n	80065ae <__swsetup_r+0xa2>
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	20000064 	.word	0x20000064

080065d4 <memset>:
 80065d4:	0003      	movs	r3, r0
 80065d6:	1882      	adds	r2, r0, r2
 80065d8:	4293      	cmp	r3, r2
 80065da:	d100      	bne.n	80065de <memset+0xa>
 80065dc:	4770      	bx	lr
 80065de:	7019      	strb	r1, [r3, #0]
 80065e0:	3301      	adds	r3, #1
 80065e2:	e7f9      	b.n	80065d8 <memset+0x4>

080065e4 <_close_r>:
 80065e4:	2300      	movs	r3, #0
 80065e6:	b570      	push	{r4, r5, r6, lr}
 80065e8:	4d06      	ldr	r5, [pc, #24]	; (8006604 <_close_r+0x20>)
 80065ea:	0004      	movs	r4, r0
 80065ec:	0008      	movs	r0, r1
 80065ee:	602b      	str	r3, [r5, #0]
 80065f0:	f7fb f9d1 	bl	8001996 <_close>
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	d103      	bne.n	8006600 <_close_r+0x1c>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d000      	beq.n	8006600 <_close_r+0x1c>
 80065fe:	6023      	str	r3, [r4, #0]
 8006600:	bd70      	pop	{r4, r5, r6, pc}
 8006602:	46c0      	nop			; (mov r8, r8)
 8006604:	200005d4 	.word	0x200005d4

08006608 <_lseek_r>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	0004      	movs	r4, r0
 800660c:	0008      	movs	r0, r1
 800660e:	0011      	movs	r1, r2
 8006610:	001a      	movs	r2, r3
 8006612:	2300      	movs	r3, #0
 8006614:	4d05      	ldr	r5, [pc, #20]	; (800662c <_lseek_r+0x24>)
 8006616:	602b      	str	r3, [r5, #0]
 8006618:	f7fb f9de 	bl	80019d8 <_lseek>
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	d103      	bne.n	8006628 <_lseek_r+0x20>
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d000      	beq.n	8006628 <_lseek_r+0x20>
 8006626:	6023      	str	r3, [r4, #0]
 8006628:	bd70      	pop	{r4, r5, r6, pc}
 800662a:	46c0      	nop			; (mov r8, r8)
 800662c:	200005d4 	.word	0x200005d4

08006630 <_read_r>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	0004      	movs	r4, r0
 8006634:	0008      	movs	r0, r1
 8006636:	0011      	movs	r1, r2
 8006638:	001a      	movs	r2, r3
 800663a:	2300      	movs	r3, #0
 800663c:	4d05      	ldr	r5, [pc, #20]	; (8006654 <_read_r+0x24>)
 800663e:	602b      	str	r3, [r5, #0]
 8006640:	f7fb f970 	bl	8001924 <_read>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d103      	bne.n	8006650 <_read_r+0x20>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d000      	beq.n	8006650 <_read_r+0x20>
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	bd70      	pop	{r4, r5, r6, pc}
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	200005d4 	.word	0x200005d4

08006658 <_write_r>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	0004      	movs	r4, r0
 800665c:	0008      	movs	r0, r1
 800665e:	0011      	movs	r1, r2
 8006660:	001a      	movs	r2, r3
 8006662:	2300      	movs	r3, #0
 8006664:	4d05      	ldr	r5, [pc, #20]	; (800667c <_write_r+0x24>)
 8006666:	602b      	str	r3, [r5, #0]
 8006668:	f7fb f979 	bl	800195e <_write>
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	d103      	bne.n	8006678 <_write_r+0x20>
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d000      	beq.n	8006678 <_write_r+0x20>
 8006676:	6023      	str	r3, [r4, #0]
 8006678:	bd70      	pop	{r4, r5, r6, pc}
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	200005d4 	.word	0x200005d4

08006680 <__errno>:
 8006680:	4b01      	ldr	r3, [pc, #4]	; (8006688 <__errno+0x8>)
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	4770      	bx	lr
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	20000064 	.word	0x20000064

0800668c <__libc_init_array>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	2600      	movs	r6, #0
 8006690:	4c0c      	ldr	r4, [pc, #48]	; (80066c4 <__libc_init_array+0x38>)
 8006692:	4d0d      	ldr	r5, [pc, #52]	; (80066c8 <__libc_init_array+0x3c>)
 8006694:	1b64      	subs	r4, r4, r5
 8006696:	10a4      	asrs	r4, r4, #2
 8006698:	42a6      	cmp	r6, r4
 800669a:	d109      	bne.n	80066b0 <__libc_init_array+0x24>
 800669c:	2600      	movs	r6, #0
 800669e:	f000 fd3d 	bl	800711c <_init>
 80066a2:	4c0a      	ldr	r4, [pc, #40]	; (80066cc <__libc_init_array+0x40>)
 80066a4:	4d0a      	ldr	r5, [pc, #40]	; (80066d0 <__libc_init_array+0x44>)
 80066a6:	1b64      	subs	r4, r4, r5
 80066a8:	10a4      	asrs	r4, r4, #2
 80066aa:	42a6      	cmp	r6, r4
 80066ac:	d105      	bne.n	80066ba <__libc_init_array+0x2e>
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	00b3      	lsls	r3, r6, #2
 80066b2:	58eb      	ldr	r3, [r5, r3]
 80066b4:	4798      	blx	r3
 80066b6:	3601      	adds	r6, #1
 80066b8:	e7ee      	b.n	8006698 <__libc_init_array+0xc>
 80066ba:	00b3      	lsls	r3, r6, #2
 80066bc:	58eb      	ldr	r3, [r5, r3]
 80066be:	4798      	blx	r3
 80066c0:	3601      	adds	r6, #1
 80066c2:	e7f2      	b.n	80066aa <__libc_init_array+0x1e>
 80066c4:	0800731c 	.word	0x0800731c
 80066c8:	0800731c 	.word	0x0800731c
 80066cc:	08007320 	.word	0x08007320
 80066d0:	0800731c 	.word	0x0800731c

080066d4 <__retarget_lock_init_recursive>:
 80066d4:	4770      	bx	lr

080066d6 <__retarget_lock_acquire_recursive>:
 80066d6:	4770      	bx	lr

080066d8 <__retarget_lock_release_recursive>:
 80066d8:	4770      	bx	lr
	...

080066dc <_free_r>:
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	0005      	movs	r5, r0
 80066e0:	2900      	cmp	r1, #0
 80066e2:	d010      	beq.n	8006706 <_free_r+0x2a>
 80066e4:	1f0c      	subs	r4, r1, #4
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	da00      	bge.n	80066ee <_free_r+0x12>
 80066ec:	18e4      	adds	r4, r4, r3
 80066ee:	0028      	movs	r0, r5
 80066f0:	f000 f8e2 	bl	80068b8 <__malloc_lock>
 80066f4:	4a1d      	ldr	r2, [pc, #116]	; (800676c <_free_r+0x90>)
 80066f6:	6813      	ldr	r3, [r2, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d105      	bne.n	8006708 <_free_r+0x2c>
 80066fc:	6063      	str	r3, [r4, #4]
 80066fe:	6014      	str	r4, [r2, #0]
 8006700:	0028      	movs	r0, r5
 8006702:	f000 f8e1 	bl	80068c8 <__malloc_unlock>
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	42a3      	cmp	r3, r4
 800670a:	d908      	bls.n	800671e <_free_r+0x42>
 800670c:	6820      	ldr	r0, [r4, #0]
 800670e:	1821      	adds	r1, r4, r0
 8006710:	428b      	cmp	r3, r1
 8006712:	d1f3      	bne.n	80066fc <_free_r+0x20>
 8006714:	6819      	ldr	r1, [r3, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	1809      	adds	r1, r1, r0
 800671a:	6021      	str	r1, [r4, #0]
 800671c:	e7ee      	b.n	80066fc <_free_r+0x20>
 800671e:	001a      	movs	r2, r3
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <_free_r+0x4e>
 8006726:	42a3      	cmp	r3, r4
 8006728:	d9f9      	bls.n	800671e <_free_r+0x42>
 800672a:	6811      	ldr	r1, [r2, #0]
 800672c:	1850      	adds	r0, r2, r1
 800672e:	42a0      	cmp	r0, r4
 8006730:	d10b      	bne.n	800674a <_free_r+0x6e>
 8006732:	6820      	ldr	r0, [r4, #0]
 8006734:	1809      	adds	r1, r1, r0
 8006736:	1850      	adds	r0, r2, r1
 8006738:	6011      	str	r1, [r2, #0]
 800673a:	4283      	cmp	r3, r0
 800673c:	d1e0      	bne.n	8006700 <_free_r+0x24>
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	1841      	adds	r1, r0, r1
 8006744:	6011      	str	r1, [r2, #0]
 8006746:	6053      	str	r3, [r2, #4]
 8006748:	e7da      	b.n	8006700 <_free_r+0x24>
 800674a:	42a0      	cmp	r0, r4
 800674c:	d902      	bls.n	8006754 <_free_r+0x78>
 800674e:	230c      	movs	r3, #12
 8006750:	602b      	str	r3, [r5, #0]
 8006752:	e7d5      	b.n	8006700 <_free_r+0x24>
 8006754:	6820      	ldr	r0, [r4, #0]
 8006756:	1821      	adds	r1, r4, r0
 8006758:	428b      	cmp	r3, r1
 800675a:	d103      	bne.n	8006764 <_free_r+0x88>
 800675c:	6819      	ldr	r1, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	1809      	adds	r1, r1, r0
 8006762:	6021      	str	r1, [r4, #0]
 8006764:	6063      	str	r3, [r4, #4]
 8006766:	6054      	str	r4, [r2, #4]
 8006768:	e7ca      	b.n	8006700 <_free_r+0x24>
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	200005dc 	.word	0x200005dc

08006770 <sbrk_aligned>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	4e0f      	ldr	r6, [pc, #60]	; (80067b0 <sbrk_aligned+0x40>)
 8006774:	000d      	movs	r5, r1
 8006776:	6831      	ldr	r1, [r6, #0]
 8006778:	0004      	movs	r4, r0
 800677a:	2900      	cmp	r1, #0
 800677c:	d102      	bne.n	8006784 <sbrk_aligned+0x14>
 800677e:	f000 fcaf 	bl	80070e0 <_sbrk_r>
 8006782:	6030      	str	r0, [r6, #0]
 8006784:	0029      	movs	r1, r5
 8006786:	0020      	movs	r0, r4
 8006788:	f000 fcaa 	bl	80070e0 <_sbrk_r>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	d00a      	beq.n	80067a6 <sbrk_aligned+0x36>
 8006790:	2303      	movs	r3, #3
 8006792:	1cc5      	adds	r5, r0, #3
 8006794:	439d      	bics	r5, r3
 8006796:	42a8      	cmp	r0, r5
 8006798:	d007      	beq.n	80067aa <sbrk_aligned+0x3a>
 800679a:	1a29      	subs	r1, r5, r0
 800679c:	0020      	movs	r0, r4
 800679e:	f000 fc9f 	bl	80070e0 <_sbrk_r>
 80067a2:	3001      	adds	r0, #1
 80067a4:	d101      	bne.n	80067aa <sbrk_aligned+0x3a>
 80067a6:	2501      	movs	r5, #1
 80067a8:	426d      	negs	r5, r5
 80067aa:	0028      	movs	r0, r5
 80067ac:	bd70      	pop	{r4, r5, r6, pc}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	200005e0 	.word	0x200005e0

080067b4 <_malloc_r>:
 80067b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067b6:	2203      	movs	r2, #3
 80067b8:	1ccb      	adds	r3, r1, #3
 80067ba:	4393      	bics	r3, r2
 80067bc:	3308      	adds	r3, #8
 80067be:	0006      	movs	r6, r0
 80067c0:	001f      	movs	r7, r3
 80067c2:	2b0c      	cmp	r3, #12
 80067c4:	d238      	bcs.n	8006838 <_malloc_r+0x84>
 80067c6:	270c      	movs	r7, #12
 80067c8:	42b9      	cmp	r1, r7
 80067ca:	d837      	bhi.n	800683c <_malloc_r+0x88>
 80067cc:	0030      	movs	r0, r6
 80067ce:	f000 f873 	bl	80068b8 <__malloc_lock>
 80067d2:	4b38      	ldr	r3, [pc, #224]	; (80068b4 <_malloc_r+0x100>)
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	001c      	movs	r4, r3
 80067da:	2c00      	cmp	r4, #0
 80067dc:	d133      	bne.n	8006846 <_malloc_r+0x92>
 80067de:	0039      	movs	r1, r7
 80067e0:	0030      	movs	r0, r6
 80067e2:	f7ff ffc5 	bl	8006770 <sbrk_aligned>
 80067e6:	0004      	movs	r4, r0
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d15e      	bne.n	80068aa <_malloc_r+0xf6>
 80067ec:	9b00      	ldr	r3, [sp, #0]
 80067ee:	681c      	ldr	r4, [r3, #0]
 80067f0:	0025      	movs	r5, r4
 80067f2:	2d00      	cmp	r5, #0
 80067f4:	d14e      	bne.n	8006894 <_malloc_r+0xe0>
 80067f6:	2c00      	cmp	r4, #0
 80067f8:	d051      	beq.n	800689e <_malloc_r+0xea>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	0029      	movs	r1, r5
 80067fe:	18e3      	adds	r3, r4, r3
 8006800:	0030      	movs	r0, r6
 8006802:	9301      	str	r3, [sp, #4]
 8006804:	f000 fc6c 	bl	80070e0 <_sbrk_r>
 8006808:	9b01      	ldr	r3, [sp, #4]
 800680a:	4283      	cmp	r3, r0
 800680c:	d147      	bne.n	800689e <_malloc_r+0xea>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	0030      	movs	r0, r6
 8006812:	1aff      	subs	r7, r7, r3
 8006814:	0039      	movs	r1, r7
 8006816:	f7ff ffab 	bl	8006770 <sbrk_aligned>
 800681a:	3001      	adds	r0, #1
 800681c:	d03f      	beq.n	800689e <_malloc_r+0xea>
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	19db      	adds	r3, r3, r7
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	9b00      	ldr	r3, [sp, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d040      	beq.n	80068ae <_malloc_r+0xfa>
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	42a2      	cmp	r2, r4
 8006830:	d133      	bne.n	800689a <_malloc_r+0xe6>
 8006832:	2200      	movs	r2, #0
 8006834:	605a      	str	r2, [r3, #4]
 8006836:	e014      	b.n	8006862 <_malloc_r+0xae>
 8006838:	2b00      	cmp	r3, #0
 800683a:	dac5      	bge.n	80067c8 <_malloc_r+0x14>
 800683c:	230c      	movs	r3, #12
 800683e:	2500      	movs	r5, #0
 8006840:	6033      	str	r3, [r6, #0]
 8006842:	0028      	movs	r0, r5
 8006844:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006846:	6821      	ldr	r1, [r4, #0]
 8006848:	1bc9      	subs	r1, r1, r7
 800684a:	d420      	bmi.n	800688e <_malloc_r+0xda>
 800684c:	290b      	cmp	r1, #11
 800684e:	d918      	bls.n	8006882 <_malloc_r+0xce>
 8006850:	19e2      	adds	r2, r4, r7
 8006852:	6027      	str	r7, [r4, #0]
 8006854:	42a3      	cmp	r3, r4
 8006856:	d112      	bne.n	800687e <_malloc_r+0xca>
 8006858:	9b00      	ldr	r3, [sp, #0]
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	6863      	ldr	r3, [r4, #4]
 800685e:	6011      	str	r1, [r2, #0]
 8006860:	6053      	str	r3, [r2, #4]
 8006862:	0030      	movs	r0, r6
 8006864:	0025      	movs	r5, r4
 8006866:	f000 f82f 	bl	80068c8 <__malloc_unlock>
 800686a:	2207      	movs	r2, #7
 800686c:	350b      	adds	r5, #11
 800686e:	1d23      	adds	r3, r4, #4
 8006870:	4395      	bics	r5, r2
 8006872:	1aea      	subs	r2, r5, r3
 8006874:	429d      	cmp	r5, r3
 8006876:	d0e4      	beq.n	8006842 <_malloc_r+0x8e>
 8006878:	1b5b      	subs	r3, r3, r5
 800687a:	50a3      	str	r3, [r4, r2]
 800687c:	e7e1      	b.n	8006842 <_malloc_r+0x8e>
 800687e:	605a      	str	r2, [r3, #4]
 8006880:	e7ec      	b.n	800685c <_malloc_r+0xa8>
 8006882:	6862      	ldr	r2, [r4, #4]
 8006884:	42a3      	cmp	r3, r4
 8006886:	d1d5      	bne.n	8006834 <_malloc_r+0x80>
 8006888:	9b00      	ldr	r3, [sp, #0]
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	e7e9      	b.n	8006862 <_malloc_r+0xae>
 800688e:	0023      	movs	r3, r4
 8006890:	6864      	ldr	r4, [r4, #4]
 8006892:	e7a2      	b.n	80067da <_malloc_r+0x26>
 8006894:	002c      	movs	r4, r5
 8006896:	686d      	ldr	r5, [r5, #4]
 8006898:	e7ab      	b.n	80067f2 <_malloc_r+0x3e>
 800689a:	0013      	movs	r3, r2
 800689c:	e7c4      	b.n	8006828 <_malloc_r+0x74>
 800689e:	230c      	movs	r3, #12
 80068a0:	0030      	movs	r0, r6
 80068a2:	6033      	str	r3, [r6, #0]
 80068a4:	f000 f810 	bl	80068c8 <__malloc_unlock>
 80068a8:	e7cb      	b.n	8006842 <_malloc_r+0x8e>
 80068aa:	6027      	str	r7, [r4, #0]
 80068ac:	e7d9      	b.n	8006862 <_malloc_r+0xae>
 80068ae:	605b      	str	r3, [r3, #4]
 80068b0:	deff      	udf	#255	; 0xff
 80068b2:	46c0      	nop			; (mov r8, r8)
 80068b4:	200005dc 	.word	0x200005dc

080068b8 <__malloc_lock>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	4802      	ldr	r0, [pc, #8]	; (80068c4 <__malloc_lock+0xc>)
 80068bc:	f7ff ff0b 	bl	80066d6 <__retarget_lock_acquire_recursive>
 80068c0:	bd10      	pop	{r4, pc}
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	200005d8 	.word	0x200005d8

080068c8 <__malloc_unlock>:
 80068c8:	b510      	push	{r4, lr}
 80068ca:	4802      	ldr	r0, [pc, #8]	; (80068d4 <__malloc_unlock+0xc>)
 80068cc:	f7ff ff04 	bl	80066d8 <__retarget_lock_release_recursive>
 80068d0:	bd10      	pop	{r4, pc}
 80068d2:	46c0      	nop			; (mov r8, r8)
 80068d4:	200005d8 	.word	0x200005d8

080068d8 <__sfputc_r>:
 80068d8:	6893      	ldr	r3, [r2, #8]
 80068da:	b510      	push	{r4, lr}
 80068dc:	3b01      	subs	r3, #1
 80068de:	6093      	str	r3, [r2, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	da04      	bge.n	80068ee <__sfputc_r+0x16>
 80068e4:	6994      	ldr	r4, [r2, #24]
 80068e6:	42a3      	cmp	r3, r4
 80068e8:	db07      	blt.n	80068fa <__sfputc_r+0x22>
 80068ea:	290a      	cmp	r1, #10
 80068ec:	d005      	beq.n	80068fa <__sfputc_r+0x22>
 80068ee:	6813      	ldr	r3, [r2, #0]
 80068f0:	1c58      	adds	r0, r3, #1
 80068f2:	6010      	str	r0, [r2, #0]
 80068f4:	7019      	strb	r1, [r3, #0]
 80068f6:	0008      	movs	r0, r1
 80068f8:	bd10      	pop	{r4, pc}
 80068fa:	f7ff fdc5 	bl	8006488 <__swbuf_r>
 80068fe:	0001      	movs	r1, r0
 8006900:	e7f9      	b.n	80068f6 <__sfputc_r+0x1e>

08006902 <__sfputs_r>:
 8006902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006904:	0006      	movs	r6, r0
 8006906:	000f      	movs	r7, r1
 8006908:	0014      	movs	r4, r2
 800690a:	18d5      	adds	r5, r2, r3
 800690c:	42ac      	cmp	r4, r5
 800690e:	d101      	bne.n	8006914 <__sfputs_r+0x12>
 8006910:	2000      	movs	r0, #0
 8006912:	e007      	b.n	8006924 <__sfputs_r+0x22>
 8006914:	7821      	ldrb	r1, [r4, #0]
 8006916:	003a      	movs	r2, r7
 8006918:	0030      	movs	r0, r6
 800691a:	f7ff ffdd 	bl	80068d8 <__sfputc_r>
 800691e:	3401      	adds	r4, #1
 8006920:	1c43      	adds	r3, r0, #1
 8006922:	d1f3      	bne.n	800690c <__sfputs_r+0xa>
 8006924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006928 <_vfiprintf_r>:
 8006928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800692a:	b0a1      	sub	sp, #132	; 0x84
 800692c:	000f      	movs	r7, r1
 800692e:	0015      	movs	r5, r2
 8006930:	001e      	movs	r6, r3
 8006932:	9003      	str	r0, [sp, #12]
 8006934:	2800      	cmp	r0, #0
 8006936:	d004      	beq.n	8006942 <_vfiprintf_r+0x1a>
 8006938:	6a03      	ldr	r3, [r0, #32]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <_vfiprintf_r+0x1a>
 800693e:	f7ff fcb3 	bl	80062a8 <__sinit>
 8006942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006944:	07db      	lsls	r3, r3, #31
 8006946:	d405      	bmi.n	8006954 <_vfiprintf_r+0x2c>
 8006948:	89bb      	ldrh	r3, [r7, #12]
 800694a:	059b      	lsls	r3, r3, #22
 800694c:	d402      	bmi.n	8006954 <_vfiprintf_r+0x2c>
 800694e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006950:	f7ff fec1 	bl	80066d6 <__retarget_lock_acquire_recursive>
 8006954:	89bb      	ldrh	r3, [r7, #12]
 8006956:	071b      	lsls	r3, r3, #28
 8006958:	d502      	bpl.n	8006960 <_vfiprintf_r+0x38>
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d113      	bne.n	8006988 <_vfiprintf_r+0x60>
 8006960:	0039      	movs	r1, r7
 8006962:	9803      	ldr	r0, [sp, #12]
 8006964:	f7ff fdd2 	bl	800650c <__swsetup_r>
 8006968:	2800      	cmp	r0, #0
 800696a:	d00d      	beq.n	8006988 <_vfiprintf_r+0x60>
 800696c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800696e:	07db      	lsls	r3, r3, #31
 8006970:	d503      	bpl.n	800697a <_vfiprintf_r+0x52>
 8006972:	2001      	movs	r0, #1
 8006974:	4240      	negs	r0, r0
 8006976:	b021      	add	sp, #132	; 0x84
 8006978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800697a:	89bb      	ldrh	r3, [r7, #12]
 800697c:	059b      	lsls	r3, r3, #22
 800697e:	d4f8      	bmi.n	8006972 <_vfiprintf_r+0x4a>
 8006980:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006982:	f7ff fea9 	bl	80066d8 <__retarget_lock_release_recursive>
 8006986:	e7f4      	b.n	8006972 <_vfiprintf_r+0x4a>
 8006988:	2300      	movs	r3, #0
 800698a:	ac08      	add	r4, sp, #32
 800698c:	6163      	str	r3, [r4, #20]
 800698e:	3320      	adds	r3, #32
 8006990:	7663      	strb	r3, [r4, #25]
 8006992:	3310      	adds	r3, #16
 8006994:	76a3      	strb	r3, [r4, #26]
 8006996:	9607      	str	r6, [sp, #28]
 8006998:	002e      	movs	r6, r5
 800699a:	7833      	ldrb	r3, [r6, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <_vfiprintf_r+0x7c>
 80069a0:	2b25      	cmp	r3, #37	; 0x25
 80069a2:	d148      	bne.n	8006a36 <_vfiprintf_r+0x10e>
 80069a4:	1b73      	subs	r3, r6, r5
 80069a6:	9305      	str	r3, [sp, #20]
 80069a8:	42ae      	cmp	r6, r5
 80069aa:	d00b      	beq.n	80069c4 <_vfiprintf_r+0x9c>
 80069ac:	002a      	movs	r2, r5
 80069ae:	0039      	movs	r1, r7
 80069b0:	9803      	ldr	r0, [sp, #12]
 80069b2:	f7ff ffa6 	bl	8006902 <__sfputs_r>
 80069b6:	3001      	adds	r0, #1
 80069b8:	d100      	bne.n	80069bc <_vfiprintf_r+0x94>
 80069ba:	e0af      	b.n	8006b1c <_vfiprintf_r+0x1f4>
 80069bc:	6963      	ldr	r3, [r4, #20]
 80069be:	9a05      	ldr	r2, [sp, #20]
 80069c0:	189b      	adds	r3, r3, r2
 80069c2:	6163      	str	r3, [r4, #20]
 80069c4:	7833      	ldrb	r3, [r6, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d100      	bne.n	80069cc <_vfiprintf_r+0xa4>
 80069ca:	e0a7      	b.n	8006b1c <_vfiprintf_r+0x1f4>
 80069cc:	2201      	movs	r2, #1
 80069ce:	2300      	movs	r3, #0
 80069d0:	4252      	negs	r2, r2
 80069d2:	6062      	str	r2, [r4, #4]
 80069d4:	a904      	add	r1, sp, #16
 80069d6:	3254      	adds	r2, #84	; 0x54
 80069d8:	1852      	adds	r2, r2, r1
 80069da:	1c75      	adds	r5, r6, #1
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	60e3      	str	r3, [r4, #12]
 80069e0:	60a3      	str	r3, [r4, #8]
 80069e2:	7013      	strb	r3, [r2, #0]
 80069e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80069e6:	4b59      	ldr	r3, [pc, #356]	; (8006b4c <_vfiprintf_r+0x224>)
 80069e8:	2205      	movs	r2, #5
 80069ea:	0018      	movs	r0, r3
 80069ec:	7829      	ldrb	r1, [r5, #0]
 80069ee:	9305      	str	r3, [sp, #20]
 80069f0:	f000 fb88 	bl	8007104 <memchr>
 80069f4:	1c6e      	adds	r6, r5, #1
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d11f      	bne.n	8006a3a <_vfiprintf_r+0x112>
 80069fa:	6822      	ldr	r2, [r4, #0]
 80069fc:	06d3      	lsls	r3, r2, #27
 80069fe:	d504      	bpl.n	8006a0a <_vfiprintf_r+0xe2>
 8006a00:	2353      	movs	r3, #83	; 0x53
 8006a02:	a904      	add	r1, sp, #16
 8006a04:	185b      	adds	r3, r3, r1
 8006a06:	2120      	movs	r1, #32
 8006a08:	7019      	strb	r1, [r3, #0]
 8006a0a:	0713      	lsls	r3, r2, #28
 8006a0c:	d504      	bpl.n	8006a18 <_vfiprintf_r+0xf0>
 8006a0e:	2353      	movs	r3, #83	; 0x53
 8006a10:	a904      	add	r1, sp, #16
 8006a12:	185b      	adds	r3, r3, r1
 8006a14:	212b      	movs	r1, #43	; 0x2b
 8006a16:	7019      	strb	r1, [r3, #0]
 8006a18:	782b      	ldrb	r3, [r5, #0]
 8006a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a1c:	d016      	beq.n	8006a4c <_vfiprintf_r+0x124>
 8006a1e:	002e      	movs	r6, r5
 8006a20:	2100      	movs	r1, #0
 8006a22:	200a      	movs	r0, #10
 8006a24:	68e3      	ldr	r3, [r4, #12]
 8006a26:	7832      	ldrb	r2, [r6, #0]
 8006a28:	1c75      	adds	r5, r6, #1
 8006a2a:	3a30      	subs	r2, #48	; 0x30
 8006a2c:	2a09      	cmp	r2, #9
 8006a2e:	d94e      	bls.n	8006ace <_vfiprintf_r+0x1a6>
 8006a30:	2900      	cmp	r1, #0
 8006a32:	d111      	bne.n	8006a58 <_vfiprintf_r+0x130>
 8006a34:	e017      	b.n	8006a66 <_vfiprintf_r+0x13e>
 8006a36:	3601      	adds	r6, #1
 8006a38:	e7af      	b.n	800699a <_vfiprintf_r+0x72>
 8006a3a:	9b05      	ldr	r3, [sp, #20]
 8006a3c:	6822      	ldr	r2, [r4, #0]
 8006a3e:	1ac0      	subs	r0, r0, r3
 8006a40:	2301      	movs	r3, #1
 8006a42:	4083      	lsls	r3, r0
 8006a44:	4313      	orrs	r3, r2
 8006a46:	0035      	movs	r5, r6
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	e7cc      	b.n	80069e6 <_vfiprintf_r+0xbe>
 8006a4c:	9b07      	ldr	r3, [sp, #28]
 8006a4e:	1d19      	adds	r1, r3, #4
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	9107      	str	r1, [sp, #28]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	db01      	blt.n	8006a5c <_vfiprintf_r+0x134>
 8006a58:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a5a:	e004      	b.n	8006a66 <_vfiprintf_r+0x13e>
 8006a5c:	425b      	negs	r3, r3
 8006a5e:	60e3      	str	r3, [r4, #12]
 8006a60:	2302      	movs	r3, #2
 8006a62:	4313      	orrs	r3, r2
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	7833      	ldrb	r3, [r6, #0]
 8006a68:	2b2e      	cmp	r3, #46	; 0x2e
 8006a6a:	d10a      	bne.n	8006a82 <_vfiprintf_r+0x15a>
 8006a6c:	7873      	ldrb	r3, [r6, #1]
 8006a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a70:	d135      	bne.n	8006ade <_vfiprintf_r+0x1b6>
 8006a72:	9b07      	ldr	r3, [sp, #28]
 8006a74:	3602      	adds	r6, #2
 8006a76:	1d1a      	adds	r2, r3, #4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	9207      	str	r2, [sp, #28]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	db2b      	blt.n	8006ad8 <_vfiprintf_r+0x1b0>
 8006a80:	9309      	str	r3, [sp, #36]	; 0x24
 8006a82:	4d33      	ldr	r5, [pc, #204]	; (8006b50 <_vfiprintf_r+0x228>)
 8006a84:	2203      	movs	r2, #3
 8006a86:	0028      	movs	r0, r5
 8006a88:	7831      	ldrb	r1, [r6, #0]
 8006a8a:	f000 fb3b 	bl	8007104 <memchr>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d006      	beq.n	8006aa0 <_vfiprintf_r+0x178>
 8006a92:	2340      	movs	r3, #64	; 0x40
 8006a94:	1b40      	subs	r0, r0, r5
 8006a96:	4083      	lsls	r3, r0
 8006a98:	6822      	ldr	r2, [r4, #0]
 8006a9a:	3601      	adds	r6, #1
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	6023      	str	r3, [r4, #0]
 8006aa0:	7831      	ldrb	r1, [r6, #0]
 8006aa2:	2206      	movs	r2, #6
 8006aa4:	482b      	ldr	r0, [pc, #172]	; (8006b54 <_vfiprintf_r+0x22c>)
 8006aa6:	1c75      	adds	r5, r6, #1
 8006aa8:	7621      	strb	r1, [r4, #24]
 8006aaa:	f000 fb2b 	bl	8007104 <memchr>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d043      	beq.n	8006b3a <_vfiprintf_r+0x212>
 8006ab2:	4b29      	ldr	r3, [pc, #164]	; (8006b58 <_vfiprintf_r+0x230>)
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d125      	bne.n	8006b04 <_vfiprintf_r+0x1dc>
 8006ab8:	2207      	movs	r2, #7
 8006aba:	9b07      	ldr	r3, [sp, #28]
 8006abc:	3307      	adds	r3, #7
 8006abe:	4393      	bics	r3, r2
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	9307      	str	r3, [sp, #28]
 8006ac4:	6963      	ldr	r3, [r4, #20]
 8006ac6:	9a04      	ldr	r2, [sp, #16]
 8006ac8:	189b      	adds	r3, r3, r2
 8006aca:	6163      	str	r3, [r4, #20]
 8006acc:	e764      	b.n	8006998 <_vfiprintf_r+0x70>
 8006ace:	4343      	muls	r3, r0
 8006ad0:	002e      	movs	r6, r5
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	189b      	adds	r3, r3, r2
 8006ad6:	e7a6      	b.n	8006a26 <_vfiprintf_r+0xfe>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	425b      	negs	r3, r3
 8006adc:	e7d0      	b.n	8006a80 <_vfiprintf_r+0x158>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	200a      	movs	r0, #10
 8006ae2:	001a      	movs	r2, r3
 8006ae4:	3601      	adds	r6, #1
 8006ae6:	6063      	str	r3, [r4, #4]
 8006ae8:	7831      	ldrb	r1, [r6, #0]
 8006aea:	1c75      	adds	r5, r6, #1
 8006aec:	3930      	subs	r1, #48	; 0x30
 8006aee:	2909      	cmp	r1, #9
 8006af0:	d903      	bls.n	8006afa <_vfiprintf_r+0x1d2>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0c5      	beq.n	8006a82 <_vfiprintf_r+0x15a>
 8006af6:	9209      	str	r2, [sp, #36]	; 0x24
 8006af8:	e7c3      	b.n	8006a82 <_vfiprintf_r+0x15a>
 8006afa:	4342      	muls	r2, r0
 8006afc:	002e      	movs	r6, r5
 8006afe:	2301      	movs	r3, #1
 8006b00:	1852      	adds	r2, r2, r1
 8006b02:	e7f1      	b.n	8006ae8 <_vfiprintf_r+0x1c0>
 8006b04:	aa07      	add	r2, sp, #28
 8006b06:	9200      	str	r2, [sp, #0]
 8006b08:	0021      	movs	r1, r4
 8006b0a:	003a      	movs	r2, r7
 8006b0c:	4b13      	ldr	r3, [pc, #76]	; (8006b5c <_vfiprintf_r+0x234>)
 8006b0e:	9803      	ldr	r0, [sp, #12]
 8006b10:	e000      	b.n	8006b14 <_vfiprintf_r+0x1ec>
 8006b12:	bf00      	nop
 8006b14:	9004      	str	r0, [sp, #16]
 8006b16:	9b04      	ldr	r3, [sp, #16]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	d1d3      	bne.n	8006ac4 <_vfiprintf_r+0x19c>
 8006b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b1e:	07db      	lsls	r3, r3, #31
 8006b20:	d405      	bmi.n	8006b2e <_vfiprintf_r+0x206>
 8006b22:	89bb      	ldrh	r3, [r7, #12]
 8006b24:	059b      	lsls	r3, r3, #22
 8006b26:	d402      	bmi.n	8006b2e <_vfiprintf_r+0x206>
 8006b28:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006b2a:	f7ff fdd5 	bl	80066d8 <__retarget_lock_release_recursive>
 8006b2e:	89bb      	ldrh	r3, [r7, #12]
 8006b30:	065b      	lsls	r3, r3, #25
 8006b32:	d500      	bpl.n	8006b36 <_vfiprintf_r+0x20e>
 8006b34:	e71d      	b.n	8006972 <_vfiprintf_r+0x4a>
 8006b36:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006b38:	e71d      	b.n	8006976 <_vfiprintf_r+0x4e>
 8006b3a:	aa07      	add	r2, sp, #28
 8006b3c:	9200      	str	r2, [sp, #0]
 8006b3e:	0021      	movs	r1, r4
 8006b40:	003a      	movs	r2, r7
 8006b42:	4b06      	ldr	r3, [pc, #24]	; (8006b5c <_vfiprintf_r+0x234>)
 8006b44:	9803      	ldr	r0, [sp, #12]
 8006b46:	f000 f87b 	bl	8006c40 <_printf_i>
 8006b4a:	e7e3      	b.n	8006b14 <_vfiprintf_r+0x1ec>
 8006b4c:	080072e0 	.word	0x080072e0
 8006b50:	080072e6 	.word	0x080072e6
 8006b54:	080072ea 	.word	0x080072ea
 8006b58:	00000000 	.word	0x00000000
 8006b5c:	08006903 	.word	0x08006903

08006b60 <_printf_common>:
 8006b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b62:	0016      	movs	r6, r2
 8006b64:	9301      	str	r3, [sp, #4]
 8006b66:	688a      	ldr	r2, [r1, #8]
 8006b68:	690b      	ldr	r3, [r1, #16]
 8006b6a:	000c      	movs	r4, r1
 8006b6c:	9000      	str	r0, [sp, #0]
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	da00      	bge.n	8006b74 <_printf_common+0x14>
 8006b72:	0013      	movs	r3, r2
 8006b74:	0022      	movs	r2, r4
 8006b76:	6033      	str	r3, [r6, #0]
 8006b78:	3243      	adds	r2, #67	; 0x43
 8006b7a:	7812      	ldrb	r2, [r2, #0]
 8006b7c:	2a00      	cmp	r2, #0
 8006b7e:	d001      	beq.n	8006b84 <_printf_common+0x24>
 8006b80:	3301      	adds	r3, #1
 8006b82:	6033      	str	r3, [r6, #0]
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	069b      	lsls	r3, r3, #26
 8006b88:	d502      	bpl.n	8006b90 <_printf_common+0x30>
 8006b8a:	6833      	ldr	r3, [r6, #0]
 8006b8c:	3302      	adds	r3, #2
 8006b8e:	6033      	str	r3, [r6, #0]
 8006b90:	6822      	ldr	r2, [r4, #0]
 8006b92:	2306      	movs	r3, #6
 8006b94:	0015      	movs	r5, r2
 8006b96:	401d      	ands	r5, r3
 8006b98:	421a      	tst	r2, r3
 8006b9a:	d027      	beq.n	8006bec <_printf_common+0x8c>
 8006b9c:	0023      	movs	r3, r4
 8006b9e:	3343      	adds	r3, #67	; 0x43
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	1e5a      	subs	r2, r3, #1
 8006ba4:	4193      	sbcs	r3, r2
 8006ba6:	6822      	ldr	r2, [r4, #0]
 8006ba8:	0692      	lsls	r2, r2, #26
 8006baa:	d430      	bmi.n	8006c0e <_printf_common+0xae>
 8006bac:	0022      	movs	r2, r4
 8006bae:	9901      	ldr	r1, [sp, #4]
 8006bb0:	9800      	ldr	r0, [sp, #0]
 8006bb2:	9d08      	ldr	r5, [sp, #32]
 8006bb4:	3243      	adds	r2, #67	; 0x43
 8006bb6:	47a8      	blx	r5
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d025      	beq.n	8006c08 <_printf_common+0xa8>
 8006bbc:	2206      	movs	r2, #6
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	2500      	movs	r5, #0
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d105      	bne.n	8006bd4 <_printf_common+0x74>
 8006bc8:	6833      	ldr	r3, [r6, #0]
 8006bca:	68e5      	ldr	r5, [r4, #12]
 8006bcc:	1aed      	subs	r5, r5, r3
 8006bce:	43eb      	mvns	r3, r5
 8006bd0:	17db      	asrs	r3, r3, #31
 8006bd2:	401d      	ands	r5, r3
 8006bd4:	68a3      	ldr	r3, [r4, #8]
 8006bd6:	6922      	ldr	r2, [r4, #16]
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	dd01      	ble.n	8006be0 <_printf_common+0x80>
 8006bdc:	1a9b      	subs	r3, r3, r2
 8006bde:	18ed      	adds	r5, r5, r3
 8006be0:	2600      	movs	r6, #0
 8006be2:	42b5      	cmp	r5, r6
 8006be4:	d120      	bne.n	8006c28 <_printf_common+0xc8>
 8006be6:	2000      	movs	r0, #0
 8006be8:	e010      	b.n	8006c0c <_printf_common+0xac>
 8006bea:	3501      	adds	r5, #1
 8006bec:	68e3      	ldr	r3, [r4, #12]
 8006bee:	6832      	ldr	r2, [r6, #0]
 8006bf0:	1a9b      	subs	r3, r3, r2
 8006bf2:	42ab      	cmp	r3, r5
 8006bf4:	ddd2      	ble.n	8006b9c <_printf_common+0x3c>
 8006bf6:	0022      	movs	r2, r4
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	9901      	ldr	r1, [sp, #4]
 8006bfc:	9800      	ldr	r0, [sp, #0]
 8006bfe:	9f08      	ldr	r7, [sp, #32]
 8006c00:	3219      	adds	r2, #25
 8006c02:	47b8      	blx	r7
 8006c04:	3001      	adds	r0, #1
 8006c06:	d1f0      	bne.n	8006bea <_printf_common+0x8a>
 8006c08:	2001      	movs	r0, #1
 8006c0a:	4240      	negs	r0, r0
 8006c0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c0e:	2030      	movs	r0, #48	; 0x30
 8006c10:	18e1      	adds	r1, r4, r3
 8006c12:	3143      	adds	r1, #67	; 0x43
 8006c14:	7008      	strb	r0, [r1, #0]
 8006c16:	0021      	movs	r1, r4
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	3145      	adds	r1, #69	; 0x45
 8006c1c:	7809      	ldrb	r1, [r1, #0]
 8006c1e:	18a2      	adds	r2, r4, r2
 8006c20:	3243      	adds	r2, #67	; 0x43
 8006c22:	3302      	adds	r3, #2
 8006c24:	7011      	strb	r1, [r2, #0]
 8006c26:	e7c1      	b.n	8006bac <_printf_common+0x4c>
 8006c28:	0022      	movs	r2, r4
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	9901      	ldr	r1, [sp, #4]
 8006c2e:	9800      	ldr	r0, [sp, #0]
 8006c30:	9f08      	ldr	r7, [sp, #32]
 8006c32:	321a      	adds	r2, #26
 8006c34:	47b8      	blx	r7
 8006c36:	3001      	adds	r0, #1
 8006c38:	d0e6      	beq.n	8006c08 <_printf_common+0xa8>
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7d1      	b.n	8006be2 <_printf_common+0x82>
	...

08006c40 <_printf_i>:
 8006c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c42:	b08b      	sub	sp, #44	; 0x2c
 8006c44:	9206      	str	r2, [sp, #24]
 8006c46:	000a      	movs	r2, r1
 8006c48:	3243      	adds	r2, #67	; 0x43
 8006c4a:	9307      	str	r3, [sp, #28]
 8006c4c:	9005      	str	r0, [sp, #20]
 8006c4e:	9204      	str	r2, [sp, #16]
 8006c50:	7e0a      	ldrb	r2, [r1, #24]
 8006c52:	000c      	movs	r4, r1
 8006c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c56:	2a78      	cmp	r2, #120	; 0x78
 8006c58:	d809      	bhi.n	8006c6e <_printf_i+0x2e>
 8006c5a:	2a62      	cmp	r2, #98	; 0x62
 8006c5c:	d80b      	bhi.n	8006c76 <_printf_i+0x36>
 8006c5e:	2a00      	cmp	r2, #0
 8006c60:	d100      	bne.n	8006c64 <_printf_i+0x24>
 8006c62:	e0be      	b.n	8006de2 <_printf_i+0x1a2>
 8006c64:	497c      	ldr	r1, [pc, #496]	; (8006e58 <_printf_i+0x218>)
 8006c66:	9103      	str	r1, [sp, #12]
 8006c68:	2a58      	cmp	r2, #88	; 0x58
 8006c6a:	d100      	bne.n	8006c6e <_printf_i+0x2e>
 8006c6c:	e093      	b.n	8006d96 <_printf_i+0x156>
 8006c6e:	0026      	movs	r6, r4
 8006c70:	3642      	adds	r6, #66	; 0x42
 8006c72:	7032      	strb	r2, [r6, #0]
 8006c74:	e022      	b.n	8006cbc <_printf_i+0x7c>
 8006c76:	0010      	movs	r0, r2
 8006c78:	3863      	subs	r0, #99	; 0x63
 8006c7a:	2815      	cmp	r0, #21
 8006c7c:	d8f7      	bhi.n	8006c6e <_printf_i+0x2e>
 8006c7e:	f7f9 fa43 	bl	8000108 <__gnu_thumb1_case_shi>
 8006c82:	0016      	.short	0x0016
 8006c84:	fff6001f 	.word	0xfff6001f
 8006c88:	fff6fff6 	.word	0xfff6fff6
 8006c8c:	001ffff6 	.word	0x001ffff6
 8006c90:	fff6fff6 	.word	0xfff6fff6
 8006c94:	fff6fff6 	.word	0xfff6fff6
 8006c98:	003600a3 	.word	0x003600a3
 8006c9c:	fff60083 	.word	0xfff60083
 8006ca0:	00b4fff6 	.word	0x00b4fff6
 8006ca4:	0036fff6 	.word	0x0036fff6
 8006ca8:	fff6fff6 	.word	0xfff6fff6
 8006cac:	0087      	.short	0x0087
 8006cae:	0026      	movs	r6, r4
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	3642      	adds	r6, #66	; 0x42
 8006cb4:	1d11      	adds	r1, r2, #4
 8006cb6:	6019      	str	r1, [r3, #0]
 8006cb8:	6813      	ldr	r3, [r2, #0]
 8006cba:	7033      	strb	r3, [r6, #0]
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e0a2      	b.n	8006e06 <_printf_i+0x1c6>
 8006cc0:	6818      	ldr	r0, [r3, #0]
 8006cc2:	6809      	ldr	r1, [r1, #0]
 8006cc4:	1d02      	adds	r2, r0, #4
 8006cc6:	060d      	lsls	r5, r1, #24
 8006cc8:	d50b      	bpl.n	8006ce2 <_printf_i+0xa2>
 8006cca:	6805      	ldr	r5, [r0, #0]
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	2d00      	cmp	r5, #0
 8006cd0:	da03      	bge.n	8006cda <_printf_i+0x9a>
 8006cd2:	232d      	movs	r3, #45	; 0x2d
 8006cd4:	9a04      	ldr	r2, [sp, #16]
 8006cd6:	426d      	negs	r5, r5
 8006cd8:	7013      	strb	r3, [r2, #0]
 8006cda:	4b5f      	ldr	r3, [pc, #380]	; (8006e58 <_printf_i+0x218>)
 8006cdc:	270a      	movs	r7, #10
 8006cde:	9303      	str	r3, [sp, #12]
 8006ce0:	e01b      	b.n	8006d1a <_printf_i+0xda>
 8006ce2:	6805      	ldr	r5, [r0, #0]
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	0649      	lsls	r1, r1, #25
 8006ce8:	d5f1      	bpl.n	8006cce <_printf_i+0x8e>
 8006cea:	b22d      	sxth	r5, r5
 8006cec:	e7ef      	b.n	8006cce <_printf_i+0x8e>
 8006cee:	680d      	ldr	r5, [r1, #0]
 8006cf0:	6819      	ldr	r1, [r3, #0]
 8006cf2:	1d08      	adds	r0, r1, #4
 8006cf4:	6018      	str	r0, [r3, #0]
 8006cf6:	062e      	lsls	r6, r5, #24
 8006cf8:	d501      	bpl.n	8006cfe <_printf_i+0xbe>
 8006cfa:	680d      	ldr	r5, [r1, #0]
 8006cfc:	e003      	b.n	8006d06 <_printf_i+0xc6>
 8006cfe:	066d      	lsls	r5, r5, #25
 8006d00:	d5fb      	bpl.n	8006cfa <_printf_i+0xba>
 8006d02:	680d      	ldr	r5, [r1, #0]
 8006d04:	b2ad      	uxth	r5, r5
 8006d06:	4b54      	ldr	r3, [pc, #336]	; (8006e58 <_printf_i+0x218>)
 8006d08:	2708      	movs	r7, #8
 8006d0a:	9303      	str	r3, [sp, #12]
 8006d0c:	2a6f      	cmp	r2, #111	; 0x6f
 8006d0e:	d000      	beq.n	8006d12 <_printf_i+0xd2>
 8006d10:	3702      	adds	r7, #2
 8006d12:	0023      	movs	r3, r4
 8006d14:	2200      	movs	r2, #0
 8006d16:	3343      	adds	r3, #67	; 0x43
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	6863      	ldr	r3, [r4, #4]
 8006d1c:	60a3      	str	r3, [r4, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	db03      	blt.n	8006d2a <_printf_i+0xea>
 8006d22:	2104      	movs	r1, #4
 8006d24:	6822      	ldr	r2, [r4, #0]
 8006d26:	438a      	bics	r2, r1
 8006d28:	6022      	str	r2, [r4, #0]
 8006d2a:	2d00      	cmp	r5, #0
 8006d2c:	d102      	bne.n	8006d34 <_printf_i+0xf4>
 8006d2e:	9e04      	ldr	r6, [sp, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00c      	beq.n	8006d4e <_printf_i+0x10e>
 8006d34:	9e04      	ldr	r6, [sp, #16]
 8006d36:	0028      	movs	r0, r5
 8006d38:	0039      	movs	r1, r7
 8006d3a:	f7f9 fa75 	bl	8000228 <__aeabi_uidivmod>
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	3e01      	subs	r6, #1
 8006d42:	5c5b      	ldrb	r3, [r3, r1]
 8006d44:	7033      	strb	r3, [r6, #0]
 8006d46:	002b      	movs	r3, r5
 8006d48:	0005      	movs	r5, r0
 8006d4a:	429f      	cmp	r7, r3
 8006d4c:	d9f3      	bls.n	8006d36 <_printf_i+0xf6>
 8006d4e:	2f08      	cmp	r7, #8
 8006d50:	d109      	bne.n	8006d66 <_printf_i+0x126>
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	07db      	lsls	r3, r3, #31
 8006d56:	d506      	bpl.n	8006d66 <_printf_i+0x126>
 8006d58:	6862      	ldr	r2, [r4, #4]
 8006d5a:	6923      	ldr	r3, [r4, #16]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	dc02      	bgt.n	8006d66 <_printf_i+0x126>
 8006d60:	2330      	movs	r3, #48	; 0x30
 8006d62:	3e01      	subs	r6, #1
 8006d64:	7033      	strb	r3, [r6, #0]
 8006d66:	9b04      	ldr	r3, [sp, #16]
 8006d68:	1b9b      	subs	r3, r3, r6
 8006d6a:	6123      	str	r3, [r4, #16]
 8006d6c:	9b07      	ldr	r3, [sp, #28]
 8006d6e:	0021      	movs	r1, r4
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	9805      	ldr	r0, [sp, #20]
 8006d74:	9b06      	ldr	r3, [sp, #24]
 8006d76:	aa09      	add	r2, sp, #36	; 0x24
 8006d78:	f7ff fef2 	bl	8006b60 <_printf_common>
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	d147      	bne.n	8006e10 <_printf_i+0x1d0>
 8006d80:	2001      	movs	r0, #1
 8006d82:	4240      	negs	r0, r0
 8006d84:	b00b      	add	sp, #44	; 0x2c
 8006d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d88:	2220      	movs	r2, #32
 8006d8a:	6809      	ldr	r1, [r1, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	6022      	str	r2, [r4, #0]
 8006d90:	2278      	movs	r2, #120	; 0x78
 8006d92:	4932      	ldr	r1, [pc, #200]	; (8006e5c <_printf_i+0x21c>)
 8006d94:	9103      	str	r1, [sp, #12]
 8006d96:	0021      	movs	r1, r4
 8006d98:	3145      	adds	r1, #69	; 0x45
 8006d9a:	700a      	strb	r2, [r1, #0]
 8006d9c:	6819      	ldr	r1, [r3, #0]
 8006d9e:	6822      	ldr	r2, [r4, #0]
 8006da0:	c920      	ldmia	r1!, {r5}
 8006da2:	0610      	lsls	r0, r2, #24
 8006da4:	d402      	bmi.n	8006dac <_printf_i+0x16c>
 8006da6:	0650      	lsls	r0, r2, #25
 8006da8:	d500      	bpl.n	8006dac <_printf_i+0x16c>
 8006daa:	b2ad      	uxth	r5, r5
 8006dac:	6019      	str	r1, [r3, #0]
 8006dae:	07d3      	lsls	r3, r2, #31
 8006db0:	d502      	bpl.n	8006db8 <_printf_i+0x178>
 8006db2:	2320      	movs	r3, #32
 8006db4:	4313      	orrs	r3, r2
 8006db6:	6023      	str	r3, [r4, #0]
 8006db8:	2710      	movs	r7, #16
 8006dba:	2d00      	cmp	r5, #0
 8006dbc:	d1a9      	bne.n	8006d12 <_printf_i+0xd2>
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	4393      	bics	r3, r2
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	e7a4      	b.n	8006d12 <_printf_i+0xd2>
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	680d      	ldr	r5, [r1, #0]
 8006dcc:	1d10      	adds	r0, r2, #4
 8006dce:	6949      	ldr	r1, [r1, #20]
 8006dd0:	6018      	str	r0, [r3, #0]
 8006dd2:	6813      	ldr	r3, [r2, #0]
 8006dd4:	062e      	lsls	r6, r5, #24
 8006dd6:	d501      	bpl.n	8006ddc <_printf_i+0x19c>
 8006dd8:	6019      	str	r1, [r3, #0]
 8006dda:	e002      	b.n	8006de2 <_printf_i+0x1a2>
 8006ddc:	066d      	lsls	r5, r5, #25
 8006dde:	d5fb      	bpl.n	8006dd8 <_printf_i+0x198>
 8006de0:	8019      	strh	r1, [r3, #0]
 8006de2:	2300      	movs	r3, #0
 8006de4:	9e04      	ldr	r6, [sp, #16]
 8006de6:	6123      	str	r3, [r4, #16]
 8006de8:	e7c0      	b.n	8006d6c <_printf_i+0x12c>
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	1d11      	adds	r1, r2, #4
 8006dee:	6019      	str	r1, [r3, #0]
 8006df0:	6816      	ldr	r6, [r2, #0]
 8006df2:	2100      	movs	r1, #0
 8006df4:	0030      	movs	r0, r6
 8006df6:	6862      	ldr	r2, [r4, #4]
 8006df8:	f000 f984 	bl	8007104 <memchr>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d001      	beq.n	8006e04 <_printf_i+0x1c4>
 8006e00:	1b80      	subs	r0, r0, r6
 8006e02:	6060      	str	r0, [r4, #4]
 8006e04:	6863      	ldr	r3, [r4, #4]
 8006e06:	6123      	str	r3, [r4, #16]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	9a04      	ldr	r2, [sp, #16]
 8006e0c:	7013      	strb	r3, [r2, #0]
 8006e0e:	e7ad      	b.n	8006d6c <_printf_i+0x12c>
 8006e10:	0032      	movs	r2, r6
 8006e12:	6923      	ldr	r3, [r4, #16]
 8006e14:	9906      	ldr	r1, [sp, #24]
 8006e16:	9805      	ldr	r0, [sp, #20]
 8006e18:	9d07      	ldr	r5, [sp, #28]
 8006e1a:	47a8      	blx	r5
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d0af      	beq.n	8006d80 <_printf_i+0x140>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	079b      	lsls	r3, r3, #30
 8006e24:	d415      	bmi.n	8006e52 <_printf_i+0x212>
 8006e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e28:	68e0      	ldr	r0, [r4, #12]
 8006e2a:	4298      	cmp	r0, r3
 8006e2c:	daaa      	bge.n	8006d84 <_printf_i+0x144>
 8006e2e:	0018      	movs	r0, r3
 8006e30:	e7a8      	b.n	8006d84 <_printf_i+0x144>
 8006e32:	0022      	movs	r2, r4
 8006e34:	2301      	movs	r3, #1
 8006e36:	9906      	ldr	r1, [sp, #24]
 8006e38:	9805      	ldr	r0, [sp, #20]
 8006e3a:	9e07      	ldr	r6, [sp, #28]
 8006e3c:	3219      	adds	r2, #25
 8006e3e:	47b0      	blx	r6
 8006e40:	3001      	adds	r0, #1
 8006e42:	d09d      	beq.n	8006d80 <_printf_i+0x140>
 8006e44:	3501      	adds	r5, #1
 8006e46:	68e3      	ldr	r3, [r4, #12]
 8006e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	42ab      	cmp	r3, r5
 8006e4e:	dcf0      	bgt.n	8006e32 <_printf_i+0x1f2>
 8006e50:	e7e9      	b.n	8006e26 <_printf_i+0x1e6>
 8006e52:	2500      	movs	r5, #0
 8006e54:	e7f7      	b.n	8006e46 <_printf_i+0x206>
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	080072f1 	.word	0x080072f1
 8006e5c:	08007302 	.word	0x08007302

08006e60 <__sflush_r>:
 8006e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e62:	898b      	ldrh	r3, [r1, #12]
 8006e64:	0005      	movs	r5, r0
 8006e66:	000c      	movs	r4, r1
 8006e68:	071a      	lsls	r2, r3, #28
 8006e6a:	d45c      	bmi.n	8006f26 <__sflush_r+0xc6>
 8006e6c:	684a      	ldr	r2, [r1, #4]
 8006e6e:	2a00      	cmp	r2, #0
 8006e70:	dc04      	bgt.n	8006e7c <__sflush_r+0x1c>
 8006e72:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006e74:	2a00      	cmp	r2, #0
 8006e76:	dc01      	bgt.n	8006e7c <__sflush_r+0x1c>
 8006e78:	2000      	movs	r0, #0
 8006e7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e7c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006e7e:	2f00      	cmp	r7, #0
 8006e80:	d0fa      	beq.n	8006e78 <__sflush_r+0x18>
 8006e82:	2200      	movs	r2, #0
 8006e84:	2080      	movs	r0, #128	; 0x80
 8006e86:	682e      	ldr	r6, [r5, #0]
 8006e88:	602a      	str	r2, [r5, #0]
 8006e8a:	001a      	movs	r2, r3
 8006e8c:	0140      	lsls	r0, r0, #5
 8006e8e:	6a21      	ldr	r1, [r4, #32]
 8006e90:	4002      	ands	r2, r0
 8006e92:	4203      	tst	r3, r0
 8006e94:	d034      	beq.n	8006f00 <__sflush_r+0xa0>
 8006e96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	075b      	lsls	r3, r3, #29
 8006e9c:	d506      	bpl.n	8006eac <__sflush_r+0x4c>
 8006e9e:	6863      	ldr	r3, [r4, #4]
 8006ea0:	1ac0      	subs	r0, r0, r3
 8006ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <__sflush_r+0x4c>
 8006ea8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006eaa:	1ac0      	subs	r0, r0, r3
 8006eac:	0002      	movs	r2, r0
 8006eae:	2300      	movs	r3, #0
 8006eb0:	0028      	movs	r0, r5
 8006eb2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006eb4:	6a21      	ldr	r1, [r4, #32]
 8006eb6:	47b8      	blx	r7
 8006eb8:	89a2      	ldrh	r2, [r4, #12]
 8006eba:	1c43      	adds	r3, r0, #1
 8006ebc:	d106      	bne.n	8006ecc <__sflush_r+0x6c>
 8006ebe:	6829      	ldr	r1, [r5, #0]
 8006ec0:	291d      	cmp	r1, #29
 8006ec2:	d82c      	bhi.n	8006f1e <__sflush_r+0xbe>
 8006ec4:	4b2a      	ldr	r3, [pc, #168]	; (8006f70 <__sflush_r+0x110>)
 8006ec6:	410b      	asrs	r3, r1
 8006ec8:	07db      	lsls	r3, r3, #31
 8006eca:	d428      	bmi.n	8006f1e <__sflush_r+0xbe>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	6063      	str	r3, [r4, #4]
 8006ed0:	6923      	ldr	r3, [r4, #16]
 8006ed2:	6023      	str	r3, [r4, #0]
 8006ed4:	04d2      	lsls	r2, r2, #19
 8006ed6:	d505      	bpl.n	8006ee4 <__sflush_r+0x84>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <__sflush_r+0x82>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d100      	bne.n	8006ee4 <__sflush_r+0x84>
 8006ee2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ee6:	602e      	str	r6, [r5, #0]
 8006ee8:	2900      	cmp	r1, #0
 8006eea:	d0c5      	beq.n	8006e78 <__sflush_r+0x18>
 8006eec:	0023      	movs	r3, r4
 8006eee:	3344      	adds	r3, #68	; 0x44
 8006ef0:	4299      	cmp	r1, r3
 8006ef2:	d002      	beq.n	8006efa <__sflush_r+0x9a>
 8006ef4:	0028      	movs	r0, r5
 8006ef6:	f7ff fbf1 	bl	80066dc <_free_r>
 8006efa:	2000      	movs	r0, #0
 8006efc:	6360      	str	r0, [r4, #52]	; 0x34
 8006efe:	e7bc      	b.n	8006e7a <__sflush_r+0x1a>
 8006f00:	2301      	movs	r3, #1
 8006f02:	0028      	movs	r0, r5
 8006f04:	47b8      	blx	r7
 8006f06:	1c43      	adds	r3, r0, #1
 8006f08:	d1c6      	bne.n	8006e98 <__sflush_r+0x38>
 8006f0a:	682b      	ldr	r3, [r5, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0c3      	beq.n	8006e98 <__sflush_r+0x38>
 8006f10:	2b1d      	cmp	r3, #29
 8006f12:	d001      	beq.n	8006f18 <__sflush_r+0xb8>
 8006f14:	2b16      	cmp	r3, #22
 8006f16:	d101      	bne.n	8006f1c <__sflush_r+0xbc>
 8006f18:	602e      	str	r6, [r5, #0]
 8006f1a:	e7ad      	b.n	8006e78 <__sflush_r+0x18>
 8006f1c:	89a2      	ldrh	r2, [r4, #12]
 8006f1e:	2340      	movs	r3, #64	; 0x40
 8006f20:	4313      	orrs	r3, r2
 8006f22:	81a3      	strh	r3, [r4, #12]
 8006f24:	e7a9      	b.n	8006e7a <__sflush_r+0x1a>
 8006f26:	690e      	ldr	r6, [r1, #16]
 8006f28:	2e00      	cmp	r6, #0
 8006f2a:	d0a5      	beq.n	8006e78 <__sflush_r+0x18>
 8006f2c:	680f      	ldr	r7, [r1, #0]
 8006f2e:	600e      	str	r6, [r1, #0]
 8006f30:	1bba      	subs	r2, r7, r6
 8006f32:	9201      	str	r2, [sp, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	079b      	lsls	r3, r3, #30
 8006f38:	d100      	bne.n	8006f3c <__sflush_r+0xdc>
 8006f3a:	694a      	ldr	r2, [r1, #20]
 8006f3c:	60a2      	str	r2, [r4, #8]
 8006f3e:	9b01      	ldr	r3, [sp, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	dd99      	ble.n	8006e78 <__sflush_r+0x18>
 8006f44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f46:	0032      	movs	r2, r6
 8006f48:	001f      	movs	r7, r3
 8006f4a:	0028      	movs	r0, r5
 8006f4c:	9b01      	ldr	r3, [sp, #4]
 8006f4e:	6a21      	ldr	r1, [r4, #32]
 8006f50:	47b8      	blx	r7
 8006f52:	2800      	cmp	r0, #0
 8006f54:	dc06      	bgt.n	8006f64 <__sflush_r+0x104>
 8006f56:	2340      	movs	r3, #64	; 0x40
 8006f58:	2001      	movs	r0, #1
 8006f5a:	89a2      	ldrh	r2, [r4, #12]
 8006f5c:	4240      	negs	r0, r0
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	81a3      	strh	r3, [r4, #12]
 8006f62:	e78a      	b.n	8006e7a <__sflush_r+0x1a>
 8006f64:	9b01      	ldr	r3, [sp, #4]
 8006f66:	1836      	adds	r6, r6, r0
 8006f68:	1a1b      	subs	r3, r3, r0
 8006f6a:	9301      	str	r3, [sp, #4]
 8006f6c:	e7e7      	b.n	8006f3e <__sflush_r+0xde>
 8006f6e:	46c0      	nop			; (mov r8, r8)
 8006f70:	dfbffffe 	.word	0xdfbffffe

08006f74 <_fflush_r>:
 8006f74:	690b      	ldr	r3, [r1, #16]
 8006f76:	b570      	push	{r4, r5, r6, lr}
 8006f78:	0005      	movs	r5, r0
 8006f7a:	000c      	movs	r4, r1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d102      	bne.n	8006f86 <_fflush_r+0x12>
 8006f80:	2500      	movs	r5, #0
 8006f82:	0028      	movs	r0, r5
 8006f84:	bd70      	pop	{r4, r5, r6, pc}
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d004      	beq.n	8006f94 <_fflush_r+0x20>
 8006f8a:	6a03      	ldr	r3, [r0, #32]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <_fflush_r+0x20>
 8006f90:	f7ff f98a 	bl	80062a8 <__sinit>
 8006f94:	220c      	movs	r2, #12
 8006f96:	5ea3      	ldrsh	r3, [r4, r2]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0f1      	beq.n	8006f80 <_fflush_r+0xc>
 8006f9c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f9e:	07d2      	lsls	r2, r2, #31
 8006fa0:	d404      	bmi.n	8006fac <_fflush_r+0x38>
 8006fa2:	059b      	lsls	r3, r3, #22
 8006fa4:	d402      	bmi.n	8006fac <_fflush_r+0x38>
 8006fa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fa8:	f7ff fb95 	bl	80066d6 <__retarget_lock_acquire_recursive>
 8006fac:	0028      	movs	r0, r5
 8006fae:	0021      	movs	r1, r4
 8006fb0:	f7ff ff56 	bl	8006e60 <__sflush_r>
 8006fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fb6:	0005      	movs	r5, r0
 8006fb8:	07db      	lsls	r3, r3, #31
 8006fba:	d4e2      	bmi.n	8006f82 <_fflush_r+0xe>
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	059b      	lsls	r3, r3, #22
 8006fc0:	d4df      	bmi.n	8006f82 <_fflush_r+0xe>
 8006fc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fc4:	f7ff fb88 	bl	80066d8 <__retarget_lock_release_recursive>
 8006fc8:	e7db      	b.n	8006f82 <_fflush_r+0xe>
	...

08006fcc <__swhatbuf_r>:
 8006fcc:	b570      	push	{r4, r5, r6, lr}
 8006fce:	000e      	movs	r6, r1
 8006fd0:	001d      	movs	r5, r3
 8006fd2:	230e      	movs	r3, #14
 8006fd4:	5ec9      	ldrsh	r1, [r1, r3]
 8006fd6:	0014      	movs	r4, r2
 8006fd8:	b096      	sub	sp, #88	; 0x58
 8006fda:	2900      	cmp	r1, #0
 8006fdc:	da0c      	bge.n	8006ff8 <__swhatbuf_r+0x2c>
 8006fde:	89b2      	ldrh	r2, [r6, #12]
 8006fe0:	2380      	movs	r3, #128	; 0x80
 8006fe2:	0011      	movs	r1, r2
 8006fe4:	4019      	ands	r1, r3
 8006fe6:	421a      	tst	r2, r3
 8006fe8:	d013      	beq.n	8007012 <__swhatbuf_r+0x46>
 8006fea:	2100      	movs	r1, #0
 8006fec:	3b40      	subs	r3, #64	; 0x40
 8006fee:	2000      	movs	r0, #0
 8006ff0:	6029      	str	r1, [r5, #0]
 8006ff2:	6023      	str	r3, [r4, #0]
 8006ff4:	b016      	add	sp, #88	; 0x58
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	466a      	mov	r2, sp
 8006ffa:	f000 f84d 	bl	8007098 <_fstat_r>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	dbed      	blt.n	8006fde <__swhatbuf_r+0x12>
 8007002:	23f0      	movs	r3, #240	; 0xf0
 8007004:	9901      	ldr	r1, [sp, #4]
 8007006:	021b      	lsls	r3, r3, #8
 8007008:	4019      	ands	r1, r3
 800700a:	4b03      	ldr	r3, [pc, #12]	; (8007018 <__swhatbuf_r+0x4c>)
 800700c:	18c9      	adds	r1, r1, r3
 800700e:	424b      	negs	r3, r1
 8007010:	4159      	adcs	r1, r3
 8007012:	2380      	movs	r3, #128	; 0x80
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	e7ea      	b.n	8006fee <__swhatbuf_r+0x22>
 8007018:	ffffe000 	.word	0xffffe000

0800701c <__smakebuf_r>:
 800701c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800701e:	2602      	movs	r6, #2
 8007020:	898b      	ldrh	r3, [r1, #12]
 8007022:	0005      	movs	r5, r0
 8007024:	000c      	movs	r4, r1
 8007026:	4233      	tst	r3, r6
 8007028:	d006      	beq.n	8007038 <__smakebuf_r+0x1c>
 800702a:	0023      	movs	r3, r4
 800702c:	3347      	adds	r3, #71	; 0x47
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	6123      	str	r3, [r4, #16]
 8007032:	2301      	movs	r3, #1
 8007034:	6163      	str	r3, [r4, #20]
 8007036:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007038:	466a      	mov	r2, sp
 800703a:	ab01      	add	r3, sp, #4
 800703c:	f7ff ffc6 	bl	8006fcc <__swhatbuf_r>
 8007040:	9900      	ldr	r1, [sp, #0]
 8007042:	0007      	movs	r7, r0
 8007044:	0028      	movs	r0, r5
 8007046:	f7ff fbb5 	bl	80067b4 <_malloc_r>
 800704a:	2800      	cmp	r0, #0
 800704c:	d108      	bne.n	8007060 <__smakebuf_r+0x44>
 800704e:	220c      	movs	r2, #12
 8007050:	5ea3      	ldrsh	r3, [r4, r2]
 8007052:	059a      	lsls	r2, r3, #22
 8007054:	d4ef      	bmi.n	8007036 <__smakebuf_r+0x1a>
 8007056:	2203      	movs	r2, #3
 8007058:	4393      	bics	r3, r2
 800705a:	431e      	orrs	r6, r3
 800705c:	81a6      	strh	r6, [r4, #12]
 800705e:	e7e4      	b.n	800702a <__smakebuf_r+0xe>
 8007060:	2380      	movs	r3, #128	; 0x80
 8007062:	89a2      	ldrh	r2, [r4, #12]
 8007064:	6020      	str	r0, [r4, #0]
 8007066:	4313      	orrs	r3, r2
 8007068:	81a3      	strh	r3, [r4, #12]
 800706a:	9b00      	ldr	r3, [sp, #0]
 800706c:	6120      	str	r0, [r4, #16]
 800706e:	6163      	str	r3, [r4, #20]
 8007070:	9b01      	ldr	r3, [sp, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00c      	beq.n	8007090 <__smakebuf_r+0x74>
 8007076:	0028      	movs	r0, r5
 8007078:	230e      	movs	r3, #14
 800707a:	5ee1      	ldrsh	r1, [r4, r3]
 800707c:	f000 f81e 	bl	80070bc <_isatty_r>
 8007080:	2800      	cmp	r0, #0
 8007082:	d005      	beq.n	8007090 <__smakebuf_r+0x74>
 8007084:	2303      	movs	r3, #3
 8007086:	89a2      	ldrh	r2, [r4, #12]
 8007088:	439a      	bics	r2, r3
 800708a:	3b02      	subs	r3, #2
 800708c:	4313      	orrs	r3, r2
 800708e:	81a3      	strh	r3, [r4, #12]
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	433b      	orrs	r3, r7
 8007094:	81a3      	strh	r3, [r4, #12]
 8007096:	e7ce      	b.n	8007036 <__smakebuf_r+0x1a>

08007098 <_fstat_r>:
 8007098:	2300      	movs	r3, #0
 800709a:	b570      	push	{r4, r5, r6, lr}
 800709c:	4d06      	ldr	r5, [pc, #24]	; (80070b8 <_fstat_r+0x20>)
 800709e:	0004      	movs	r4, r0
 80070a0:	0008      	movs	r0, r1
 80070a2:	0011      	movs	r1, r2
 80070a4:	602b      	str	r3, [r5, #0]
 80070a6:	f7fa fc80 	bl	80019aa <_fstat>
 80070aa:	1c43      	adds	r3, r0, #1
 80070ac:	d103      	bne.n	80070b6 <_fstat_r+0x1e>
 80070ae:	682b      	ldr	r3, [r5, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d000      	beq.n	80070b6 <_fstat_r+0x1e>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
 80070b8:	200005d4 	.word	0x200005d4

080070bc <_isatty_r>:
 80070bc:	2300      	movs	r3, #0
 80070be:	b570      	push	{r4, r5, r6, lr}
 80070c0:	4d06      	ldr	r5, [pc, #24]	; (80070dc <_isatty_r+0x20>)
 80070c2:	0004      	movs	r4, r0
 80070c4:	0008      	movs	r0, r1
 80070c6:	602b      	str	r3, [r5, #0]
 80070c8:	f7fa fc7d 	bl	80019c6 <_isatty>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d103      	bne.n	80070d8 <_isatty_r+0x1c>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d000      	beq.n	80070d8 <_isatty_r+0x1c>
 80070d6:	6023      	str	r3, [r4, #0]
 80070d8:	bd70      	pop	{r4, r5, r6, pc}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	200005d4 	.word	0x200005d4

080070e0 <_sbrk_r>:
 80070e0:	2300      	movs	r3, #0
 80070e2:	b570      	push	{r4, r5, r6, lr}
 80070e4:	4d06      	ldr	r5, [pc, #24]	; (8007100 <_sbrk_r+0x20>)
 80070e6:	0004      	movs	r4, r0
 80070e8:	0008      	movs	r0, r1
 80070ea:	602b      	str	r3, [r5, #0]
 80070ec:	f7fa fc80 	bl	80019f0 <_sbrk>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d103      	bne.n	80070fc <_sbrk_r+0x1c>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d000      	beq.n	80070fc <_sbrk_r+0x1c>
 80070fa:	6023      	str	r3, [r4, #0]
 80070fc:	bd70      	pop	{r4, r5, r6, pc}
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	200005d4 	.word	0x200005d4

08007104 <memchr>:
 8007104:	b2c9      	uxtb	r1, r1
 8007106:	1882      	adds	r2, r0, r2
 8007108:	4290      	cmp	r0, r2
 800710a:	d101      	bne.n	8007110 <memchr+0xc>
 800710c:	2000      	movs	r0, #0
 800710e:	4770      	bx	lr
 8007110:	7803      	ldrb	r3, [r0, #0]
 8007112:	428b      	cmp	r3, r1
 8007114:	d0fb      	beq.n	800710e <memchr+0xa>
 8007116:	3001      	adds	r0, #1
 8007118:	e7f6      	b.n	8007108 <memchr+0x4>
	...

0800711c <_init>:
 800711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007122:	bc08      	pop	{r3}
 8007124:	469e      	mov	lr, r3
 8007126:	4770      	bx	lr

08007128 <_fini>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	46c0      	nop			; (mov r8, r8)
 800712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712e:	bc08      	pop	{r3}
 8007130:	469e      	mov	lr, r3
 8007132:	4770      	bx	lr
