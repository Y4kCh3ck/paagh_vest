
sensory_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008550  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08008610  08008610  00018610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008834  08008834  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008834  08008834  00018834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800883c  0800883c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800883c  0800883c  0001883c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008840  08008840  00018840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000068  080088ac  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  080088ac  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001738c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e12  00000000  00000000  0003745f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  0003b278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001089  00000000  00000000  0003c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016df3  00000000  00000000  0003d861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c7b1  00000000  00000000  00054654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081b95  00000000  00000000  00070e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000546c  00000000  00000000  000f299c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f7e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080085f8 	.word	0x080085f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080085f8 	.word	0x080085f8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 fd70 	bl	8000dd4 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 fd6b 	bl	8000dd4 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__aeabi_fdiv>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	464f      	mov	r7, r9
 800046c:	4646      	mov	r6, r8
 800046e:	46d6      	mov	lr, sl
 8000470:	0245      	lsls	r5, r0, #9
 8000472:	b5c0      	push	{r6, r7, lr}
 8000474:	0047      	lsls	r7, r0, #1
 8000476:	1c0c      	adds	r4, r1, #0
 8000478:	0a6d      	lsrs	r5, r5, #9
 800047a:	0e3f      	lsrs	r7, r7, #24
 800047c:	0fc6      	lsrs	r6, r0, #31
 800047e:	2f00      	cmp	r7, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_fdiv+0x1c>
 8000482:	e06f      	b.n	8000564 <__aeabi_fdiv+0xfc>
 8000484:	2fff      	cmp	r7, #255	; 0xff
 8000486:	d100      	bne.n	800048a <__aeabi_fdiv+0x22>
 8000488:	e074      	b.n	8000574 <__aeabi_fdiv+0x10c>
 800048a:	2300      	movs	r3, #0
 800048c:	2280      	movs	r2, #128	; 0x80
 800048e:	4699      	mov	r9, r3
 8000490:	469a      	mov	sl, r3
 8000492:	00ed      	lsls	r5, r5, #3
 8000494:	04d2      	lsls	r2, r2, #19
 8000496:	4315      	orrs	r5, r2
 8000498:	3f7f      	subs	r7, #127	; 0x7f
 800049a:	0263      	lsls	r3, r4, #9
 800049c:	0a5b      	lsrs	r3, r3, #9
 800049e:	4698      	mov	r8, r3
 80004a0:	0063      	lsls	r3, r4, #1
 80004a2:	0e1b      	lsrs	r3, r3, #24
 80004a4:	0fe4      	lsrs	r4, r4, #31
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d04d      	beq.n	8000546 <__aeabi_fdiv+0xde>
 80004aa:	2bff      	cmp	r3, #255	; 0xff
 80004ac:	d045      	beq.n	800053a <__aeabi_fdiv+0xd2>
 80004ae:	4642      	mov	r2, r8
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	00d2      	lsls	r2, r2, #3
 80004b4:	04c9      	lsls	r1, r1, #19
 80004b6:	4311      	orrs	r1, r2
 80004b8:	4688      	mov	r8, r1
 80004ba:	2200      	movs	r2, #0
 80004bc:	3b7f      	subs	r3, #127	; 0x7f
 80004be:	0031      	movs	r1, r6
 80004c0:	1aff      	subs	r7, r7, r3
 80004c2:	464b      	mov	r3, r9
 80004c4:	4061      	eors	r1, r4
 80004c6:	b2c9      	uxtb	r1, r1
 80004c8:	2b0f      	cmp	r3, #15
 80004ca:	d900      	bls.n	80004ce <__aeabi_fdiv+0x66>
 80004cc:	e0b8      	b.n	8000640 <__aeabi_fdiv+0x1d8>
 80004ce:	4870      	ldr	r0, [pc, #448]	; (8000690 <__aeabi_fdiv+0x228>)
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	58c3      	ldr	r3, [r0, r3]
 80004d4:	469f      	mov	pc, r3
 80004d6:	2300      	movs	r3, #0
 80004d8:	4698      	mov	r8, r3
 80004da:	0026      	movs	r6, r4
 80004dc:	4645      	mov	r5, r8
 80004de:	4692      	mov	sl, r2
 80004e0:	4653      	mov	r3, sl
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	d100      	bne.n	80004e8 <__aeabi_fdiv+0x80>
 80004e6:	e08d      	b.n	8000604 <__aeabi_fdiv+0x19c>
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d100      	bne.n	80004ee <__aeabi_fdiv+0x86>
 80004ec:	e0a1      	b.n	8000632 <__aeabi_fdiv+0x1ca>
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d018      	beq.n	8000524 <__aeabi_fdiv+0xbc>
 80004f2:	003b      	movs	r3, r7
 80004f4:	337f      	adds	r3, #127	; 0x7f
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	dd6d      	ble.n	80005d6 <__aeabi_fdiv+0x16e>
 80004fa:	076a      	lsls	r2, r5, #29
 80004fc:	d004      	beq.n	8000508 <__aeabi_fdiv+0xa0>
 80004fe:	220f      	movs	r2, #15
 8000500:	402a      	ands	r2, r5
 8000502:	2a04      	cmp	r2, #4
 8000504:	d000      	beq.n	8000508 <__aeabi_fdiv+0xa0>
 8000506:	3504      	adds	r5, #4
 8000508:	012a      	lsls	r2, r5, #4
 800050a:	d503      	bpl.n	8000514 <__aeabi_fdiv+0xac>
 800050c:	4b61      	ldr	r3, [pc, #388]	; (8000694 <__aeabi_fdiv+0x22c>)
 800050e:	401d      	ands	r5, r3
 8000510:	003b      	movs	r3, r7
 8000512:	3380      	adds	r3, #128	; 0x80
 8000514:	2bfe      	cmp	r3, #254	; 0xfe
 8000516:	dd00      	ble.n	800051a <__aeabi_fdiv+0xb2>
 8000518:	e074      	b.n	8000604 <__aeabi_fdiv+0x19c>
 800051a:	01aa      	lsls	r2, r5, #6
 800051c:	0a52      	lsrs	r2, r2, #9
 800051e:	b2d8      	uxtb	r0, r3
 8000520:	e002      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000522:	000e      	movs	r6, r1
 8000524:	2000      	movs	r0, #0
 8000526:	2200      	movs	r2, #0
 8000528:	05c0      	lsls	r0, r0, #23
 800052a:	07f6      	lsls	r6, r6, #31
 800052c:	4310      	orrs	r0, r2
 800052e:	4330      	orrs	r0, r6
 8000530:	bce0      	pop	{r5, r6, r7}
 8000532:	46ba      	mov	sl, r7
 8000534:	46b1      	mov	r9, r6
 8000536:	46a8      	mov	r8, r5
 8000538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053a:	4643      	mov	r3, r8
 800053c:	2b00      	cmp	r3, #0
 800053e:	d13f      	bne.n	80005c0 <__aeabi_fdiv+0x158>
 8000540:	2202      	movs	r2, #2
 8000542:	3fff      	subs	r7, #255	; 0xff
 8000544:	e003      	b.n	800054e <__aeabi_fdiv+0xe6>
 8000546:	4643      	mov	r3, r8
 8000548:	2b00      	cmp	r3, #0
 800054a:	d12d      	bne.n	80005a8 <__aeabi_fdiv+0x140>
 800054c:	2201      	movs	r2, #1
 800054e:	0031      	movs	r1, r6
 8000550:	464b      	mov	r3, r9
 8000552:	4061      	eors	r1, r4
 8000554:	b2c9      	uxtb	r1, r1
 8000556:	4313      	orrs	r3, r2
 8000558:	2b0f      	cmp	r3, #15
 800055a:	d838      	bhi.n	80005ce <__aeabi_fdiv+0x166>
 800055c:	484e      	ldr	r0, [pc, #312]	; (8000698 <__aeabi_fdiv+0x230>)
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	58c3      	ldr	r3, [r0, r3]
 8000562:	469f      	mov	pc, r3
 8000564:	2d00      	cmp	r5, #0
 8000566:	d113      	bne.n	8000590 <__aeabi_fdiv+0x128>
 8000568:	2304      	movs	r3, #4
 800056a:	4699      	mov	r9, r3
 800056c:	3b03      	subs	r3, #3
 800056e:	2700      	movs	r7, #0
 8000570:	469a      	mov	sl, r3
 8000572:	e792      	b.n	800049a <__aeabi_fdiv+0x32>
 8000574:	2d00      	cmp	r5, #0
 8000576:	d105      	bne.n	8000584 <__aeabi_fdiv+0x11c>
 8000578:	2308      	movs	r3, #8
 800057a:	4699      	mov	r9, r3
 800057c:	3b06      	subs	r3, #6
 800057e:	27ff      	movs	r7, #255	; 0xff
 8000580:	469a      	mov	sl, r3
 8000582:	e78a      	b.n	800049a <__aeabi_fdiv+0x32>
 8000584:	230c      	movs	r3, #12
 8000586:	4699      	mov	r9, r3
 8000588:	3b09      	subs	r3, #9
 800058a:	27ff      	movs	r7, #255	; 0xff
 800058c:	469a      	mov	sl, r3
 800058e:	e784      	b.n	800049a <__aeabi_fdiv+0x32>
 8000590:	0028      	movs	r0, r5
 8000592:	f000 fc01 	bl	8000d98 <__clzsi2>
 8000596:	2776      	movs	r7, #118	; 0x76
 8000598:	1f43      	subs	r3, r0, #5
 800059a:	409d      	lsls	r5, r3
 800059c:	2300      	movs	r3, #0
 800059e:	427f      	negs	r7, r7
 80005a0:	4699      	mov	r9, r3
 80005a2:	469a      	mov	sl, r3
 80005a4:	1a3f      	subs	r7, r7, r0
 80005a6:	e778      	b.n	800049a <__aeabi_fdiv+0x32>
 80005a8:	4640      	mov	r0, r8
 80005aa:	f000 fbf5 	bl	8000d98 <__clzsi2>
 80005ae:	4642      	mov	r2, r8
 80005b0:	1f43      	subs	r3, r0, #5
 80005b2:	409a      	lsls	r2, r3
 80005b4:	2376      	movs	r3, #118	; 0x76
 80005b6:	425b      	negs	r3, r3
 80005b8:	4690      	mov	r8, r2
 80005ba:	1a1b      	subs	r3, r3, r0
 80005bc:	2200      	movs	r2, #0
 80005be:	e77e      	b.n	80004be <__aeabi_fdiv+0x56>
 80005c0:	2303      	movs	r3, #3
 80005c2:	464a      	mov	r2, r9
 80005c4:	431a      	orrs	r2, r3
 80005c6:	4691      	mov	r9, r2
 80005c8:	33fc      	adds	r3, #252	; 0xfc
 80005ca:	2203      	movs	r2, #3
 80005cc:	e777      	b.n	80004be <__aeabi_fdiv+0x56>
 80005ce:	000e      	movs	r6, r1
 80005d0:	20ff      	movs	r0, #255	; 0xff
 80005d2:	2200      	movs	r2, #0
 80005d4:	e7a8      	b.n	8000528 <__aeabi_fdiv+0xc0>
 80005d6:	2201      	movs	r2, #1
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	2b1b      	cmp	r3, #27
 80005dc:	dca2      	bgt.n	8000524 <__aeabi_fdiv+0xbc>
 80005de:	379e      	adds	r7, #158	; 0x9e
 80005e0:	002a      	movs	r2, r5
 80005e2:	40bd      	lsls	r5, r7
 80005e4:	40da      	lsrs	r2, r3
 80005e6:	1e6b      	subs	r3, r5, #1
 80005e8:	419d      	sbcs	r5, r3
 80005ea:	4315      	orrs	r5, r2
 80005ec:	076a      	lsls	r2, r5, #29
 80005ee:	d004      	beq.n	80005fa <__aeabi_fdiv+0x192>
 80005f0:	220f      	movs	r2, #15
 80005f2:	402a      	ands	r2, r5
 80005f4:	2a04      	cmp	r2, #4
 80005f6:	d000      	beq.n	80005fa <__aeabi_fdiv+0x192>
 80005f8:	3504      	adds	r5, #4
 80005fa:	016a      	lsls	r2, r5, #5
 80005fc:	d544      	bpl.n	8000688 <__aeabi_fdiv+0x220>
 80005fe:	2001      	movs	r0, #1
 8000600:	2200      	movs	r2, #0
 8000602:	e791      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000604:	20ff      	movs	r0, #255	; 0xff
 8000606:	2200      	movs	r2, #0
 8000608:	e78e      	b.n	8000528 <__aeabi_fdiv+0xc0>
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	2600      	movs	r6, #0
 800060e:	20ff      	movs	r0, #255	; 0xff
 8000610:	03d2      	lsls	r2, r2, #15
 8000612:	e789      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000614:	2300      	movs	r3, #0
 8000616:	4698      	mov	r8, r3
 8000618:	2280      	movs	r2, #128	; 0x80
 800061a:	03d2      	lsls	r2, r2, #15
 800061c:	4215      	tst	r5, r2
 800061e:	d008      	beq.n	8000632 <__aeabi_fdiv+0x1ca>
 8000620:	4643      	mov	r3, r8
 8000622:	4213      	tst	r3, r2
 8000624:	d105      	bne.n	8000632 <__aeabi_fdiv+0x1ca>
 8000626:	431a      	orrs	r2, r3
 8000628:	0252      	lsls	r2, r2, #9
 800062a:	0026      	movs	r6, r4
 800062c:	20ff      	movs	r0, #255	; 0xff
 800062e:	0a52      	lsrs	r2, r2, #9
 8000630:	e77a      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	03d2      	lsls	r2, r2, #15
 8000636:	432a      	orrs	r2, r5
 8000638:	0252      	lsls	r2, r2, #9
 800063a:	20ff      	movs	r0, #255	; 0xff
 800063c:	0a52      	lsrs	r2, r2, #9
 800063e:	e773      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000640:	4642      	mov	r2, r8
 8000642:	016b      	lsls	r3, r5, #5
 8000644:	0155      	lsls	r5, r2, #5
 8000646:	42ab      	cmp	r3, r5
 8000648:	d21a      	bcs.n	8000680 <__aeabi_fdiv+0x218>
 800064a:	201b      	movs	r0, #27
 800064c:	2200      	movs	r2, #0
 800064e:	3f01      	subs	r7, #1
 8000650:	2601      	movs	r6, #1
 8000652:	001c      	movs	r4, r3
 8000654:	0052      	lsls	r2, r2, #1
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	2c00      	cmp	r4, #0
 800065a:	db01      	blt.n	8000660 <__aeabi_fdiv+0x1f8>
 800065c:	429d      	cmp	r5, r3
 800065e:	d801      	bhi.n	8000664 <__aeabi_fdiv+0x1fc>
 8000660:	1b5b      	subs	r3, r3, r5
 8000662:	4332      	orrs	r2, r6
 8000664:	3801      	subs	r0, #1
 8000666:	2800      	cmp	r0, #0
 8000668:	d1f3      	bne.n	8000652 <__aeabi_fdiv+0x1ea>
 800066a:	1e58      	subs	r0, r3, #1
 800066c:	4183      	sbcs	r3, r0
 800066e:	4313      	orrs	r3, r2
 8000670:	001d      	movs	r5, r3
 8000672:	003b      	movs	r3, r7
 8000674:	337f      	adds	r3, #127	; 0x7f
 8000676:	000e      	movs	r6, r1
 8000678:	2b00      	cmp	r3, #0
 800067a:	dd00      	ble.n	800067e <__aeabi_fdiv+0x216>
 800067c:	e73d      	b.n	80004fa <__aeabi_fdiv+0x92>
 800067e:	e7aa      	b.n	80005d6 <__aeabi_fdiv+0x16e>
 8000680:	201a      	movs	r0, #26
 8000682:	2201      	movs	r2, #1
 8000684:	1b5b      	subs	r3, r3, r5
 8000686:	e7e3      	b.n	8000650 <__aeabi_fdiv+0x1e8>
 8000688:	01aa      	lsls	r2, r5, #6
 800068a:	2000      	movs	r0, #0
 800068c:	0a52      	lsrs	r2, r2, #9
 800068e:	e74b      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000690:	080086fc 	.word	0x080086fc
 8000694:	f7ffffff 	.word	0xf7ffffff
 8000698:	0800873c 	.word	0x0800873c

0800069c <__aeabi_fmul>:
 800069c:	0243      	lsls	r3, r0, #9
 800069e:	0a5b      	lsrs	r3, r3, #9
 80006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a2:	464f      	mov	r7, r9
 80006a4:	4646      	mov	r6, r8
 80006a6:	4699      	mov	r9, r3
 80006a8:	46d6      	mov	lr, sl
 80006aa:	0fc3      	lsrs	r3, r0, #31
 80006ac:	0045      	lsls	r5, r0, #1
 80006ae:	4698      	mov	r8, r3
 80006b0:	b5c0      	push	{r6, r7, lr}
 80006b2:	464b      	mov	r3, r9
 80006b4:	1c0f      	adds	r7, r1, #0
 80006b6:	0e2d      	lsrs	r5, r5, #24
 80006b8:	d100      	bne.n	80006bc <__aeabi_fmul+0x20>
 80006ba:	e0cb      	b.n	8000854 <__aeabi_fmul+0x1b8>
 80006bc:	2dff      	cmp	r5, #255	; 0xff
 80006be:	d100      	bne.n	80006c2 <__aeabi_fmul+0x26>
 80006c0:	e0cf      	b.n	8000862 <__aeabi_fmul+0x1c6>
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	04d2      	lsls	r2, r2, #19
 80006c8:	431a      	orrs	r2, r3
 80006ca:	2300      	movs	r3, #0
 80006cc:	4691      	mov	r9, r2
 80006ce:	2600      	movs	r6, #0
 80006d0:	469a      	mov	sl, r3
 80006d2:	3d7f      	subs	r5, #127	; 0x7f
 80006d4:	027c      	lsls	r4, r7, #9
 80006d6:	007b      	lsls	r3, r7, #1
 80006d8:	0a64      	lsrs	r4, r4, #9
 80006da:	0e1b      	lsrs	r3, r3, #24
 80006dc:	0fff      	lsrs	r7, r7, #31
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fmul+0x48>
 80006e2:	e0a9      	b.n	8000838 <__aeabi_fmul+0x19c>
 80006e4:	2bff      	cmp	r3, #255	; 0xff
 80006e6:	d011      	beq.n	800070c <__aeabi_fmul+0x70>
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	00e4      	lsls	r4, r4, #3
 80006ec:	04d2      	lsls	r2, r2, #19
 80006ee:	4314      	orrs	r4, r2
 80006f0:	4642      	mov	r2, r8
 80006f2:	3b7f      	subs	r3, #127	; 0x7f
 80006f4:	195b      	adds	r3, r3, r5
 80006f6:	407a      	eors	r2, r7
 80006f8:	2000      	movs	r0, #0
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	1c5d      	adds	r5, r3, #1
 80006fe:	2e0a      	cmp	r6, #10
 8000700:	dd13      	ble.n	800072a <__aeabi_fmul+0x8e>
 8000702:	003a      	movs	r2, r7
 8000704:	2e0b      	cmp	r6, #11
 8000706:	d047      	beq.n	8000798 <__aeabi_fmul+0xfc>
 8000708:	4647      	mov	r7, r8
 800070a:	e03f      	b.n	800078c <__aeabi_fmul+0xf0>
 800070c:	002b      	movs	r3, r5
 800070e:	33ff      	adds	r3, #255	; 0xff
 8000710:	2c00      	cmp	r4, #0
 8000712:	d11e      	bne.n	8000752 <__aeabi_fmul+0xb6>
 8000714:	2202      	movs	r2, #2
 8000716:	4316      	orrs	r6, r2
 8000718:	4642      	mov	r2, r8
 800071a:	3501      	adds	r5, #1
 800071c:	407a      	eors	r2, r7
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	35ff      	adds	r5, #255	; 0xff
 8000722:	2e0a      	cmp	r6, #10
 8000724:	dd00      	ble.n	8000728 <__aeabi_fmul+0x8c>
 8000726:	e0e4      	b.n	80008f2 <__aeabi_fmul+0x256>
 8000728:	2002      	movs	r0, #2
 800072a:	2e02      	cmp	r6, #2
 800072c:	dc1c      	bgt.n	8000768 <__aeabi_fmul+0xcc>
 800072e:	3e01      	subs	r6, #1
 8000730:	2e01      	cmp	r6, #1
 8000732:	d842      	bhi.n	80007ba <__aeabi_fmul+0x11e>
 8000734:	2802      	cmp	r0, #2
 8000736:	d03d      	beq.n	80007b4 <__aeabi_fmul+0x118>
 8000738:	2801      	cmp	r0, #1
 800073a:	d166      	bne.n	800080a <__aeabi_fmul+0x16e>
 800073c:	2000      	movs	r0, #0
 800073e:	2100      	movs	r1, #0
 8000740:	05c0      	lsls	r0, r0, #23
 8000742:	4308      	orrs	r0, r1
 8000744:	07d2      	lsls	r2, r2, #31
 8000746:	4310      	orrs	r0, r2
 8000748:	bce0      	pop	{r5, r6, r7}
 800074a:	46ba      	mov	sl, r7
 800074c:	46b1      	mov	r9, r6
 800074e:	46a8      	mov	r8, r5
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	2203      	movs	r2, #3
 8000754:	4316      	orrs	r6, r2
 8000756:	4642      	mov	r2, r8
 8000758:	3501      	adds	r5, #1
 800075a:	407a      	eors	r2, r7
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	35ff      	adds	r5, #255	; 0xff
 8000760:	2e0a      	cmp	r6, #10
 8000762:	dd00      	ble.n	8000766 <__aeabi_fmul+0xca>
 8000764:	e0e4      	b.n	8000930 <__aeabi_fmul+0x294>
 8000766:	2003      	movs	r0, #3
 8000768:	2101      	movs	r1, #1
 800076a:	40b1      	lsls	r1, r6
 800076c:	26a6      	movs	r6, #166	; 0xa6
 800076e:	00f6      	lsls	r6, r6, #3
 8000770:	4231      	tst	r1, r6
 8000772:	d10a      	bne.n	800078a <__aeabi_fmul+0xee>
 8000774:	2690      	movs	r6, #144	; 0x90
 8000776:	00b6      	lsls	r6, r6, #2
 8000778:	4231      	tst	r1, r6
 800077a:	d116      	bne.n	80007aa <__aeabi_fmul+0x10e>
 800077c:	3eb9      	subs	r6, #185	; 0xb9
 800077e:	3eff      	subs	r6, #255	; 0xff
 8000780:	420e      	tst	r6, r1
 8000782:	d01a      	beq.n	80007ba <__aeabi_fmul+0x11e>
 8000784:	46a1      	mov	r9, r4
 8000786:	4682      	mov	sl, r0
 8000788:	e000      	b.n	800078c <__aeabi_fmul+0xf0>
 800078a:	0017      	movs	r7, r2
 800078c:	4653      	mov	r3, sl
 800078e:	003a      	movs	r2, r7
 8000790:	2b02      	cmp	r3, #2
 8000792:	d00f      	beq.n	80007b4 <__aeabi_fmul+0x118>
 8000794:	464c      	mov	r4, r9
 8000796:	4650      	mov	r0, sl
 8000798:	2803      	cmp	r0, #3
 800079a:	d1cd      	bne.n	8000738 <__aeabi_fmul+0x9c>
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	03c9      	lsls	r1, r1, #15
 80007a0:	4321      	orrs	r1, r4
 80007a2:	0249      	lsls	r1, r1, #9
 80007a4:	20ff      	movs	r0, #255	; 0xff
 80007a6:	0a49      	lsrs	r1, r1, #9
 80007a8:	e7ca      	b.n	8000740 <__aeabi_fmul+0xa4>
 80007aa:	2180      	movs	r1, #128	; 0x80
 80007ac:	2200      	movs	r2, #0
 80007ae:	20ff      	movs	r0, #255	; 0xff
 80007b0:	03c9      	lsls	r1, r1, #15
 80007b2:	e7c5      	b.n	8000740 <__aeabi_fmul+0xa4>
 80007b4:	20ff      	movs	r0, #255	; 0xff
 80007b6:	2100      	movs	r1, #0
 80007b8:	e7c2      	b.n	8000740 <__aeabi_fmul+0xa4>
 80007ba:	0c20      	lsrs	r0, r4, #16
 80007bc:	4649      	mov	r1, r9
 80007be:	0424      	lsls	r4, r4, #16
 80007c0:	0c24      	lsrs	r4, r4, #16
 80007c2:	0027      	movs	r7, r4
 80007c4:	0c0e      	lsrs	r6, r1, #16
 80007c6:	0409      	lsls	r1, r1, #16
 80007c8:	0c09      	lsrs	r1, r1, #16
 80007ca:	4374      	muls	r4, r6
 80007cc:	434f      	muls	r7, r1
 80007ce:	4346      	muls	r6, r0
 80007d0:	4348      	muls	r0, r1
 80007d2:	0c39      	lsrs	r1, r7, #16
 80007d4:	1900      	adds	r0, r0, r4
 80007d6:	1809      	adds	r1, r1, r0
 80007d8:	428c      	cmp	r4, r1
 80007da:	d903      	bls.n	80007e4 <__aeabi_fmul+0x148>
 80007dc:	2080      	movs	r0, #128	; 0x80
 80007de:	0240      	lsls	r0, r0, #9
 80007e0:	4684      	mov	ip, r0
 80007e2:	4466      	add	r6, ip
 80007e4:	043f      	lsls	r7, r7, #16
 80007e6:	0408      	lsls	r0, r1, #16
 80007e8:	0c3f      	lsrs	r7, r7, #16
 80007ea:	19c0      	adds	r0, r0, r7
 80007ec:	0184      	lsls	r4, r0, #6
 80007ee:	1e67      	subs	r7, r4, #1
 80007f0:	41bc      	sbcs	r4, r7
 80007f2:	0c09      	lsrs	r1, r1, #16
 80007f4:	0e80      	lsrs	r0, r0, #26
 80007f6:	1989      	adds	r1, r1, r6
 80007f8:	4304      	orrs	r4, r0
 80007fa:	0189      	lsls	r1, r1, #6
 80007fc:	430c      	orrs	r4, r1
 80007fe:	0109      	lsls	r1, r1, #4
 8000800:	d571      	bpl.n	80008e6 <__aeabi_fmul+0x24a>
 8000802:	2301      	movs	r3, #1
 8000804:	0861      	lsrs	r1, r4, #1
 8000806:	401c      	ands	r4, r3
 8000808:	430c      	orrs	r4, r1
 800080a:	002b      	movs	r3, r5
 800080c:	337f      	adds	r3, #127	; 0x7f
 800080e:	2b00      	cmp	r3, #0
 8000810:	dd51      	ble.n	80008b6 <__aeabi_fmul+0x21a>
 8000812:	0761      	lsls	r1, r4, #29
 8000814:	d004      	beq.n	8000820 <__aeabi_fmul+0x184>
 8000816:	210f      	movs	r1, #15
 8000818:	4021      	ands	r1, r4
 800081a:	2904      	cmp	r1, #4
 800081c:	d000      	beq.n	8000820 <__aeabi_fmul+0x184>
 800081e:	3404      	adds	r4, #4
 8000820:	0121      	lsls	r1, r4, #4
 8000822:	d503      	bpl.n	800082c <__aeabi_fmul+0x190>
 8000824:	4b43      	ldr	r3, [pc, #268]	; (8000934 <__aeabi_fmul+0x298>)
 8000826:	401c      	ands	r4, r3
 8000828:	002b      	movs	r3, r5
 800082a:	3380      	adds	r3, #128	; 0x80
 800082c:	2bfe      	cmp	r3, #254	; 0xfe
 800082e:	dcc1      	bgt.n	80007b4 <__aeabi_fmul+0x118>
 8000830:	01a1      	lsls	r1, r4, #6
 8000832:	0a49      	lsrs	r1, r1, #9
 8000834:	b2d8      	uxtb	r0, r3
 8000836:	e783      	b.n	8000740 <__aeabi_fmul+0xa4>
 8000838:	2c00      	cmp	r4, #0
 800083a:	d12c      	bne.n	8000896 <__aeabi_fmul+0x1fa>
 800083c:	2301      	movs	r3, #1
 800083e:	4642      	mov	r2, r8
 8000840:	431e      	orrs	r6, r3
 8000842:	002b      	movs	r3, r5
 8000844:	407a      	eors	r2, r7
 8000846:	2001      	movs	r0, #1
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	1c5d      	adds	r5, r3, #1
 800084c:	2e0a      	cmp	r6, #10
 800084e:	dd00      	ble.n	8000852 <__aeabi_fmul+0x1b6>
 8000850:	e757      	b.n	8000702 <__aeabi_fmul+0x66>
 8000852:	e76a      	b.n	800072a <__aeabi_fmul+0x8e>
 8000854:	2b00      	cmp	r3, #0
 8000856:	d110      	bne.n	800087a <__aeabi_fmul+0x1de>
 8000858:	2301      	movs	r3, #1
 800085a:	2604      	movs	r6, #4
 800085c:	2500      	movs	r5, #0
 800085e:	469a      	mov	sl, r3
 8000860:	e738      	b.n	80006d4 <__aeabi_fmul+0x38>
 8000862:	2b00      	cmp	r3, #0
 8000864:	d104      	bne.n	8000870 <__aeabi_fmul+0x1d4>
 8000866:	2302      	movs	r3, #2
 8000868:	2608      	movs	r6, #8
 800086a:	25ff      	movs	r5, #255	; 0xff
 800086c:	469a      	mov	sl, r3
 800086e:	e731      	b.n	80006d4 <__aeabi_fmul+0x38>
 8000870:	2303      	movs	r3, #3
 8000872:	260c      	movs	r6, #12
 8000874:	25ff      	movs	r5, #255	; 0xff
 8000876:	469a      	mov	sl, r3
 8000878:	e72c      	b.n	80006d4 <__aeabi_fmul+0x38>
 800087a:	4648      	mov	r0, r9
 800087c:	f000 fa8c 	bl	8000d98 <__clzsi2>
 8000880:	464a      	mov	r2, r9
 8000882:	1f43      	subs	r3, r0, #5
 8000884:	2576      	movs	r5, #118	; 0x76
 8000886:	409a      	lsls	r2, r3
 8000888:	2300      	movs	r3, #0
 800088a:	426d      	negs	r5, r5
 800088c:	4691      	mov	r9, r2
 800088e:	2600      	movs	r6, #0
 8000890:	469a      	mov	sl, r3
 8000892:	1a2d      	subs	r5, r5, r0
 8000894:	e71e      	b.n	80006d4 <__aeabi_fmul+0x38>
 8000896:	0020      	movs	r0, r4
 8000898:	f000 fa7e 	bl	8000d98 <__clzsi2>
 800089c:	4642      	mov	r2, r8
 800089e:	1f43      	subs	r3, r0, #5
 80008a0:	409c      	lsls	r4, r3
 80008a2:	1a2b      	subs	r3, r5, r0
 80008a4:	3b76      	subs	r3, #118	; 0x76
 80008a6:	407a      	eors	r2, r7
 80008a8:	2000      	movs	r0, #0
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	1c5d      	adds	r5, r3, #1
 80008ae:	2e0a      	cmp	r6, #10
 80008b0:	dd00      	ble.n	80008b4 <__aeabi_fmul+0x218>
 80008b2:	e726      	b.n	8000702 <__aeabi_fmul+0x66>
 80008b4:	e739      	b.n	800072a <__aeabi_fmul+0x8e>
 80008b6:	2101      	movs	r1, #1
 80008b8:	1acb      	subs	r3, r1, r3
 80008ba:	2b1b      	cmp	r3, #27
 80008bc:	dd00      	ble.n	80008c0 <__aeabi_fmul+0x224>
 80008be:	e73d      	b.n	800073c <__aeabi_fmul+0xa0>
 80008c0:	359e      	adds	r5, #158	; 0x9e
 80008c2:	0021      	movs	r1, r4
 80008c4:	40ac      	lsls	r4, r5
 80008c6:	40d9      	lsrs	r1, r3
 80008c8:	1e63      	subs	r3, r4, #1
 80008ca:	419c      	sbcs	r4, r3
 80008cc:	4321      	orrs	r1, r4
 80008ce:	074b      	lsls	r3, r1, #29
 80008d0:	d004      	beq.n	80008dc <__aeabi_fmul+0x240>
 80008d2:	230f      	movs	r3, #15
 80008d4:	400b      	ands	r3, r1
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d000      	beq.n	80008dc <__aeabi_fmul+0x240>
 80008da:	3104      	adds	r1, #4
 80008dc:	014b      	lsls	r3, r1, #5
 80008de:	d504      	bpl.n	80008ea <__aeabi_fmul+0x24e>
 80008e0:	2001      	movs	r0, #1
 80008e2:	2100      	movs	r1, #0
 80008e4:	e72c      	b.n	8000740 <__aeabi_fmul+0xa4>
 80008e6:	001d      	movs	r5, r3
 80008e8:	e78f      	b.n	800080a <__aeabi_fmul+0x16e>
 80008ea:	0189      	lsls	r1, r1, #6
 80008ec:	2000      	movs	r0, #0
 80008ee:	0a49      	lsrs	r1, r1, #9
 80008f0:	e726      	b.n	8000740 <__aeabi_fmul+0xa4>
 80008f2:	2302      	movs	r3, #2
 80008f4:	2e0f      	cmp	r6, #15
 80008f6:	d10c      	bne.n	8000912 <__aeabi_fmul+0x276>
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	464b      	mov	r3, r9
 80008fc:	03c9      	lsls	r1, r1, #15
 80008fe:	420b      	tst	r3, r1
 8000900:	d00d      	beq.n	800091e <__aeabi_fmul+0x282>
 8000902:	420c      	tst	r4, r1
 8000904:	d10b      	bne.n	800091e <__aeabi_fmul+0x282>
 8000906:	4321      	orrs	r1, r4
 8000908:	0249      	lsls	r1, r1, #9
 800090a:	003a      	movs	r2, r7
 800090c:	20ff      	movs	r0, #255	; 0xff
 800090e:	0a49      	lsrs	r1, r1, #9
 8000910:	e716      	b.n	8000740 <__aeabi_fmul+0xa4>
 8000912:	2e0b      	cmp	r6, #11
 8000914:	d000      	beq.n	8000918 <__aeabi_fmul+0x27c>
 8000916:	e6f7      	b.n	8000708 <__aeabi_fmul+0x6c>
 8000918:	46a1      	mov	r9, r4
 800091a:	469a      	mov	sl, r3
 800091c:	e736      	b.n	800078c <__aeabi_fmul+0xf0>
 800091e:	2180      	movs	r1, #128	; 0x80
 8000920:	464b      	mov	r3, r9
 8000922:	03c9      	lsls	r1, r1, #15
 8000924:	4319      	orrs	r1, r3
 8000926:	0249      	lsls	r1, r1, #9
 8000928:	4642      	mov	r2, r8
 800092a:	20ff      	movs	r0, #255	; 0xff
 800092c:	0a49      	lsrs	r1, r1, #9
 800092e:	e707      	b.n	8000740 <__aeabi_fmul+0xa4>
 8000930:	2303      	movs	r3, #3
 8000932:	e7df      	b.n	80008f4 <__aeabi_fmul+0x258>
 8000934:	f7ffffff 	.word	0xf7ffffff

08000938 <__aeabi_fsub>:
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	46c6      	mov	lr, r8
 800093c:	0243      	lsls	r3, r0, #9
 800093e:	0a5b      	lsrs	r3, r3, #9
 8000940:	0045      	lsls	r5, r0, #1
 8000942:	00da      	lsls	r2, r3, #3
 8000944:	0fc4      	lsrs	r4, r0, #31
 8000946:	0248      	lsls	r0, r1, #9
 8000948:	004f      	lsls	r7, r1, #1
 800094a:	4694      	mov	ip, r2
 800094c:	0a42      	lsrs	r2, r0, #9
 800094e:	001e      	movs	r6, r3
 8000950:	4690      	mov	r8, r2
 8000952:	b500      	push	{lr}
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0e3f      	lsrs	r7, r7, #24
 8000958:	0fc9      	lsrs	r1, r1, #31
 800095a:	0980      	lsrs	r0, r0, #6
 800095c:	2fff      	cmp	r7, #255	; 0xff
 800095e:	d059      	beq.n	8000a14 <__aeabi_fsub+0xdc>
 8000960:	2201      	movs	r2, #1
 8000962:	4051      	eors	r1, r2
 8000964:	428c      	cmp	r4, r1
 8000966:	d039      	beq.n	80009dc <__aeabi_fsub+0xa4>
 8000968:	1bea      	subs	r2, r5, r7
 800096a:	2a00      	cmp	r2, #0
 800096c:	dd58      	ble.n	8000a20 <__aeabi_fsub+0xe8>
 800096e:	2f00      	cmp	r7, #0
 8000970:	d068      	beq.n	8000a44 <__aeabi_fsub+0x10c>
 8000972:	2dff      	cmp	r5, #255	; 0xff
 8000974:	d100      	bne.n	8000978 <__aeabi_fsub+0x40>
 8000976:	e0d1      	b.n	8000b1c <__aeabi_fsub+0x1e4>
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	04db      	lsls	r3, r3, #19
 800097c:	4318      	orrs	r0, r3
 800097e:	2a1b      	cmp	r2, #27
 8000980:	dc00      	bgt.n	8000984 <__aeabi_fsub+0x4c>
 8000982:	e0e3      	b.n	8000b4c <__aeabi_fsub+0x214>
 8000984:	2301      	movs	r3, #1
 8000986:	4662      	mov	r2, ip
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	015a      	lsls	r2, r3, #5
 800098c:	d400      	bmi.n	8000990 <__aeabi_fsub+0x58>
 800098e:	e0ac      	b.n	8000aea <__aeabi_fsub+0x1b2>
 8000990:	019b      	lsls	r3, r3, #6
 8000992:	099e      	lsrs	r6, r3, #6
 8000994:	0030      	movs	r0, r6
 8000996:	f000 f9ff 	bl	8000d98 <__clzsi2>
 800099a:	0033      	movs	r3, r6
 800099c:	3805      	subs	r0, #5
 800099e:	4083      	lsls	r3, r0
 80009a0:	4285      	cmp	r5, r0
 80009a2:	dc00      	bgt.n	80009a6 <__aeabi_fsub+0x6e>
 80009a4:	e0c6      	b.n	8000b34 <__aeabi_fsub+0x1fc>
 80009a6:	4ab2      	ldr	r2, [pc, #712]	; (8000c70 <__aeabi_fsub+0x338>)
 80009a8:	1a2d      	subs	r5, r5, r0
 80009aa:	4013      	ands	r3, r2
 80009ac:	075a      	lsls	r2, r3, #29
 80009ae:	d004      	beq.n	80009ba <__aeabi_fsub+0x82>
 80009b0:	220f      	movs	r2, #15
 80009b2:	401a      	ands	r2, r3
 80009b4:	2a04      	cmp	r2, #4
 80009b6:	d000      	beq.n	80009ba <__aeabi_fsub+0x82>
 80009b8:	3304      	adds	r3, #4
 80009ba:	015a      	lsls	r2, r3, #5
 80009bc:	d400      	bmi.n	80009c0 <__aeabi_fsub+0x88>
 80009be:	e097      	b.n	8000af0 <__aeabi_fsub+0x1b8>
 80009c0:	1c6a      	adds	r2, r5, #1
 80009c2:	2dfe      	cmp	r5, #254	; 0xfe
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fsub+0x90>
 80009c6:	e084      	b.n	8000ad2 <__aeabi_fsub+0x19a>
 80009c8:	019b      	lsls	r3, r3, #6
 80009ca:	0a5e      	lsrs	r6, r3, #9
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	05d0      	lsls	r0, r2, #23
 80009d0:	4330      	orrs	r0, r6
 80009d2:	07e4      	lsls	r4, r4, #31
 80009d4:	4320      	orrs	r0, r4
 80009d6:	bc80      	pop	{r7}
 80009d8:	46b8      	mov	r8, r7
 80009da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009dc:	1bea      	subs	r2, r5, r7
 80009de:	2a00      	cmp	r2, #0
 80009e0:	dd41      	ble.n	8000a66 <__aeabi_fsub+0x12e>
 80009e2:	2f00      	cmp	r7, #0
 80009e4:	d06b      	beq.n	8000abe <__aeabi_fsub+0x186>
 80009e6:	2dff      	cmp	r5, #255	; 0xff
 80009e8:	d100      	bne.n	80009ec <__aeabi_fsub+0xb4>
 80009ea:	e097      	b.n	8000b1c <__aeabi_fsub+0x1e4>
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	04db      	lsls	r3, r3, #19
 80009f0:	4318      	orrs	r0, r3
 80009f2:	2a1b      	cmp	r2, #27
 80009f4:	dc00      	bgt.n	80009f8 <__aeabi_fsub+0xc0>
 80009f6:	e0cc      	b.n	8000b92 <__aeabi_fsub+0x25a>
 80009f8:	2301      	movs	r3, #1
 80009fa:	4463      	add	r3, ip
 80009fc:	015a      	lsls	r2, r3, #5
 80009fe:	d574      	bpl.n	8000aea <__aeabi_fsub+0x1b2>
 8000a00:	3501      	adds	r5, #1
 8000a02:	2dff      	cmp	r5, #255	; 0xff
 8000a04:	d065      	beq.n	8000ad2 <__aeabi_fsub+0x19a>
 8000a06:	2201      	movs	r2, #1
 8000a08:	499a      	ldr	r1, [pc, #616]	; (8000c74 <__aeabi_fsub+0x33c>)
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	085b      	lsrs	r3, r3, #1
 8000a0e:	400b      	ands	r3, r1
 8000a10:	4313      	orrs	r3, r2
 8000a12:	e7cb      	b.n	80009ac <__aeabi_fsub+0x74>
 8000a14:	2800      	cmp	r0, #0
 8000a16:	d01f      	beq.n	8000a58 <__aeabi_fsub+0x120>
 8000a18:	428c      	cmp	r4, r1
 8000a1a:	d022      	beq.n	8000a62 <__aeabi_fsub+0x12a>
 8000a1c:	002a      	movs	r2, r5
 8000a1e:	3aff      	subs	r2, #255	; 0xff
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	d035      	beq.n	8000a90 <__aeabi_fsub+0x158>
 8000a24:	1b7a      	subs	r2, r7, r5
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_fsub+0xf4>
 8000a2a:	e099      	b.n	8000b60 <__aeabi_fsub+0x228>
 8000a2c:	4663      	mov	r3, ip
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d100      	bne.n	8000a34 <__aeabi_fsub+0xfc>
 8000a32:	e0dd      	b.n	8000bf0 <__aeabi_fsub+0x2b8>
 8000a34:	1e53      	subs	r3, r2, #1
 8000a36:	2a01      	cmp	r2, #1
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x104>
 8000a3a:	e105      	b.n	8000c48 <__aeabi_fsub+0x310>
 8000a3c:	2aff      	cmp	r2, #255	; 0xff
 8000a3e:	d06b      	beq.n	8000b18 <__aeabi_fsub+0x1e0>
 8000a40:	001a      	movs	r2, r3
 8000a42:	e094      	b.n	8000b6e <__aeabi_fsub+0x236>
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d073      	beq.n	8000b30 <__aeabi_fsub+0x1f8>
 8000a48:	1e51      	subs	r1, r2, #1
 8000a4a:	2a01      	cmp	r2, #1
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fsub+0x118>
 8000a4e:	e0df      	b.n	8000c10 <__aeabi_fsub+0x2d8>
 8000a50:	2aff      	cmp	r2, #255	; 0xff
 8000a52:	d063      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000a54:	000a      	movs	r2, r1
 8000a56:	e792      	b.n	800097e <__aeabi_fsub+0x46>
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4051      	eors	r1, r2
 8000a5c:	42a1      	cmp	r1, r4
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_fsub+0x12a>
 8000a60:	e782      	b.n	8000968 <__aeabi_fsub+0x30>
 8000a62:	002a      	movs	r2, r5
 8000a64:	3aff      	subs	r2, #255	; 0xff
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	d036      	beq.n	8000ad8 <__aeabi_fsub+0x1a0>
 8000a6a:	1b7a      	subs	r2, r7, r5
 8000a6c:	2d00      	cmp	r5, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fsub+0x13a>
 8000a70:	e0aa      	b.n	8000bc8 <__aeabi_fsub+0x290>
 8000a72:	2fff      	cmp	r7, #255	; 0xff
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fsub+0x140>
 8000a76:	e0da      	b.n	8000c2e <__aeabi_fsub+0x2f6>
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	4661      	mov	r1, ip
 8000a7c:	04db      	lsls	r3, r3, #19
 8000a7e:	4319      	orrs	r1, r3
 8000a80:	468c      	mov	ip, r1
 8000a82:	2a1b      	cmp	r2, #27
 8000a84:	dc00      	bgt.n	8000a88 <__aeabi_fsub+0x150>
 8000a86:	e0d4      	b.n	8000c32 <__aeabi_fsub+0x2fa>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	003d      	movs	r5, r7
 8000a8c:	181b      	adds	r3, r3, r0
 8000a8e:	e7b5      	b.n	80009fc <__aeabi_fsub+0xc4>
 8000a90:	27fe      	movs	r7, #254	; 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4217      	tst	r7, r2
 8000a96:	d171      	bne.n	8000b7c <__aeabi_fsub+0x244>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_fsub+0x166>
 8000a9c:	e09e      	b.n	8000bdc <__aeabi_fsub+0x2a4>
 8000a9e:	4663      	mov	r3, ip
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fsub+0x16e>
 8000aa4:	e0d5      	b.n	8000c52 <__aeabi_fsub+0x31a>
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2800      	cmp	r0, #0
 8000aaa:	d100      	bne.n	8000aae <__aeabi_fsub+0x176>
 8000aac:	e78f      	b.n	80009ce <__aeabi_fsub+0x96>
 8000aae:	1a1b      	subs	r3, r3, r0
 8000ab0:	015e      	lsls	r6, r3, #5
 8000ab2:	d400      	bmi.n	8000ab6 <__aeabi_fsub+0x17e>
 8000ab4:	e0d6      	b.n	8000c64 <__aeabi_fsub+0x32c>
 8000ab6:	4663      	mov	r3, ip
 8000ab8:	000c      	movs	r4, r1
 8000aba:	1ac3      	subs	r3, r0, r3
 8000abc:	e776      	b.n	80009ac <__aeabi_fsub+0x74>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	d036      	beq.n	8000b30 <__aeabi_fsub+0x1f8>
 8000ac2:	1e51      	subs	r1, r2, #1
 8000ac4:	2a01      	cmp	r2, #1
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fsub+0x192>
 8000ac8:	e09a      	b.n	8000c00 <__aeabi_fsub+0x2c8>
 8000aca:	2aff      	cmp	r2, #255	; 0xff
 8000acc:	d026      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000ace:	000a      	movs	r2, r1
 8000ad0:	e78f      	b.n	80009f2 <__aeabi_fsub+0xba>
 8000ad2:	22ff      	movs	r2, #255	; 0xff
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	e77a      	b.n	80009ce <__aeabi_fsub+0x96>
 8000ad8:	27fe      	movs	r7, #254	; 0xfe
 8000ada:	1c6a      	adds	r2, r5, #1
 8000adc:	4217      	tst	r7, r2
 8000ade:	d062      	beq.n	8000ba6 <__aeabi_fsub+0x26e>
 8000ae0:	2aff      	cmp	r2, #255	; 0xff
 8000ae2:	d0f6      	beq.n	8000ad2 <__aeabi_fsub+0x19a>
 8000ae4:	0015      	movs	r5, r2
 8000ae6:	4460      	add	r0, ip
 8000ae8:	0843      	lsrs	r3, r0, #1
 8000aea:	075a      	lsls	r2, r3, #29
 8000aec:	d000      	beq.n	8000af0 <__aeabi_fsub+0x1b8>
 8000aee:	e75f      	b.n	80009b0 <__aeabi_fsub+0x78>
 8000af0:	08db      	lsrs	r3, r3, #3
 8000af2:	2dff      	cmp	r5, #255	; 0xff
 8000af4:	d012      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000af6:	025b      	lsls	r3, r3, #9
 8000af8:	0a5e      	lsrs	r6, r3, #9
 8000afa:	b2ea      	uxtb	r2, r5
 8000afc:	e767      	b.n	80009ce <__aeabi_fsub+0x96>
 8000afe:	4662      	mov	r2, ip
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	d100      	bne.n	8000b06 <__aeabi_fsub+0x1ce>
 8000b04:	e093      	b.n	8000c2e <__aeabi_fsub+0x2f6>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d008      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	03d2      	lsls	r2, r2, #15
 8000b0e:	4213      	tst	r3, r2
 8000b10:	d004      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000b12:	4640      	mov	r0, r8
 8000b14:	4210      	tst	r0, r2
 8000b16:	d101      	bne.n	8000b1c <__aeabi_fsub+0x1e4>
 8000b18:	000c      	movs	r4, r1
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0d8      	beq.n	8000ad2 <__aeabi_fsub+0x19a>
 8000b20:	2680      	movs	r6, #128	; 0x80
 8000b22:	03f6      	lsls	r6, r6, #15
 8000b24:	431e      	orrs	r6, r3
 8000b26:	0276      	lsls	r6, r6, #9
 8000b28:	22ff      	movs	r2, #255	; 0xff
 8000b2a:	0a76      	lsrs	r6, r6, #9
 8000b2c:	e74f      	b.n	80009ce <__aeabi_fsub+0x96>
 8000b2e:	4643      	mov	r3, r8
 8000b30:	0015      	movs	r5, r2
 8000b32:	e7de      	b.n	8000af2 <__aeabi_fsub+0x1ba>
 8000b34:	2220      	movs	r2, #32
 8000b36:	1b40      	subs	r0, r0, r5
 8000b38:	3001      	adds	r0, #1
 8000b3a:	1a12      	subs	r2, r2, r0
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	4093      	lsls	r3, r2
 8000b40:	40c1      	lsrs	r1, r0
 8000b42:	1e5a      	subs	r2, r3, #1
 8000b44:	4193      	sbcs	r3, r2
 8000b46:	2500      	movs	r5, #0
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	e72f      	b.n	80009ac <__aeabi_fsub+0x74>
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	1a9b      	subs	r3, r3, r2
 8000b50:	0001      	movs	r1, r0
 8000b52:	4098      	lsls	r0, r3
 8000b54:	0003      	movs	r3, r0
 8000b56:	40d1      	lsrs	r1, r2
 8000b58:	1e5a      	subs	r2, r3, #1
 8000b5a:	4193      	sbcs	r3, r2
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	e712      	b.n	8000986 <__aeabi_fsub+0x4e>
 8000b60:	2fff      	cmp	r7, #255	; 0xff
 8000b62:	d0d9      	beq.n	8000b18 <__aeabi_fsub+0x1e0>
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	4664      	mov	r4, ip
 8000b68:	04db      	lsls	r3, r3, #19
 8000b6a:	431c      	orrs	r4, r3
 8000b6c:	46a4      	mov	ip, r4
 8000b6e:	2a1b      	cmp	r2, #27
 8000b70:	dd52      	ble.n	8000c18 <__aeabi_fsub+0x2e0>
 8000b72:	2301      	movs	r3, #1
 8000b74:	000c      	movs	r4, r1
 8000b76:	003d      	movs	r5, r7
 8000b78:	1ac3      	subs	r3, r0, r3
 8000b7a:	e706      	b.n	800098a <__aeabi_fsub+0x52>
 8000b7c:	4663      	mov	r3, ip
 8000b7e:	1a1e      	subs	r6, r3, r0
 8000b80:	0173      	lsls	r3, r6, #5
 8000b82:	d439      	bmi.n	8000bf8 <__aeabi_fsub+0x2c0>
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d000      	beq.n	8000b8a <__aeabi_fsub+0x252>
 8000b88:	e704      	b.n	8000994 <__aeabi_fsub+0x5c>
 8000b8a:	2400      	movs	r4, #0
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2600      	movs	r6, #0
 8000b90:	e71d      	b.n	80009ce <__aeabi_fsub+0x96>
 8000b92:	2320      	movs	r3, #32
 8000b94:	1a9b      	subs	r3, r3, r2
 8000b96:	0001      	movs	r1, r0
 8000b98:	4098      	lsls	r0, r3
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	40d1      	lsrs	r1, r2
 8000b9e:	1e5a      	subs	r2, r3, #1
 8000ba0:	4193      	sbcs	r3, r2
 8000ba2:	430b      	orrs	r3, r1
 8000ba4:	e729      	b.n	80009fa <__aeabi_fsub+0xc2>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d1a9      	bne.n	8000afe <__aeabi_fsub+0x1c6>
 8000baa:	4663      	mov	r3, ip
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d056      	beq.n	8000c5e <__aeabi_fsub+0x326>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fsub+0x280>
 8000bb6:	e70a      	b.n	80009ce <__aeabi_fsub+0x96>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	4463      	add	r3, ip
 8000bbc:	015a      	lsls	r2, r3, #5
 8000bbe:	d594      	bpl.n	8000aea <__aeabi_fsub+0x1b2>
 8000bc0:	4a2b      	ldr	r2, [pc, #172]	; (8000c70 <__aeabi_fsub+0x338>)
 8000bc2:	3501      	adds	r5, #1
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	e790      	b.n	8000aea <__aeabi_fsub+0x1b2>
 8000bc8:	4663      	mov	r3, ip
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0af      	beq.n	8000b2e <__aeabi_fsub+0x1f6>
 8000bce:	1e53      	subs	r3, r2, #1
 8000bd0:	2a01      	cmp	r2, #1
 8000bd2:	d015      	beq.n	8000c00 <__aeabi_fsub+0x2c8>
 8000bd4:	2aff      	cmp	r2, #255	; 0xff
 8000bd6:	d02a      	beq.n	8000c2e <__aeabi_fsub+0x2f6>
 8000bd8:	001a      	movs	r2, r3
 8000bda:	e752      	b.n	8000a82 <__aeabi_fsub+0x14a>
 8000bdc:	4662      	mov	r2, ip
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	d191      	bne.n	8000b06 <__aeabi_fsub+0x1ce>
 8000be2:	2800      	cmp	r0, #0
 8000be4:	d198      	bne.n	8000b18 <__aeabi_fsub+0x1e0>
 8000be6:	2680      	movs	r6, #128	; 0x80
 8000be8:	2400      	movs	r4, #0
 8000bea:	22ff      	movs	r2, #255	; 0xff
 8000bec:	03f6      	lsls	r6, r6, #15
 8000bee:	e6ee      	b.n	80009ce <__aeabi_fsub+0x96>
 8000bf0:	000c      	movs	r4, r1
 8000bf2:	4643      	mov	r3, r8
 8000bf4:	0015      	movs	r5, r2
 8000bf6:	e77c      	b.n	8000af2 <__aeabi_fsub+0x1ba>
 8000bf8:	4663      	mov	r3, ip
 8000bfa:	000c      	movs	r4, r1
 8000bfc:	1ac6      	subs	r6, r0, r3
 8000bfe:	e6c9      	b.n	8000994 <__aeabi_fsub+0x5c>
 8000c00:	0003      	movs	r3, r0
 8000c02:	4463      	add	r3, ip
 8000c04:	2501      	movs	r5, #1
 8000c06:	015a      	lsls	r2, r3, #5
 8000c08:	d400      	bmi.n	8000c0c <__aeabi_fsub+0x2d4>
 8000c0a:	e76e      	b.n	8000aea <__aeabi_fsub+0x1b2>
 8000c0c:	2502      	movs	r5, #2
 8000c0e:	e6fa      	b.n	8000a06 <__aeabi_fsub+0xce>
 8000c10:	4663      	mov	r3, ip
 8000c12:	2501      	movs	r5, #1
 8000c14:	1a1b      	subs	r3, r3, r0
 8000c16:	e6b8      	b.n	800098a <__aeabi_fsub+0x52>
 8000c18:	4664      	mov	r4, ip
 8000c1a:	2320      	movs	r3, #32
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	1a9b      	subs	r3, r3, r2
 8000c20:	4662      	mov	r2, ip
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	1e5a      	subs	r2, r3, #1
 8000c28:	4193      	sbcs	r3, r2
 8000c2a:	4323      	orrs	r3, r4
 8000c2c:	e7a2      	b.n	8000b74 <__aeabi_fsub+0x23c>
 8000c2e:	4643      	mov	r3, r8
 8000c30:	e774      	b.n	8000b1c <__aeabi_fsub+0x1e4>
 8000c32:	4661      	mov	r1, ip
 8000c34:	2320      	movs	r3, #32
 8000c36:	40d1      	lsrs	r1, r2
 8000c38:	1a9b      	subs	r3, r3, r2
 8000c3a:	4662      	mov	r2, ip
 8000c3c:	409a      	lsls	r2, r3
 8000c3e:	0013      	movs	r3, r2
 8000c40:	1e5a      	subs	r2, r3, #1
 8000c42:	4193      	sbcs	r3, r2
 8000c44:	430b      	orrs	r3, r1
 8000c46:	e720      	b.n	8000a8a <__aeabi_fsub+0x152>
 8000c48:	4663      	mov	r3, ip
 8000c4a:	000c      	movs	r4, r1
 8000c4c:	2501      	movs	r5, #1
 8000c4e:	1ac3      	subs	r3, r0, r3
 8000c50:	e69b      	b.n	800098a <__aeabi_fsub+0x52>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d099      	beq.n	8000b8a <__aeabi_fsub+0x252>
 8000c56:	000c      	movs	r4, r1
 8000c58:	4646      	mov	r6, r8
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	e6b7      	b.n	80009ce <__aeabi_fsub+0x96>
 8000c5e:	4646      	mov	r6, r8
 8000c60:	2200      	movs	r2, #0
 8000c62:	e6b4      	b.n	80009ce <__aeabi_fsub+0x96>
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fsub+0x332>
 8000c68:	e73f      	b.n	8000aea <__aeabi_fsub+0x1b2>
 8000c6a:	2400      	movs	r4, #0
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	e6ae      	b.n	80009ce <__aeabi_fsub+0x96>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff

08000c78 <__aeabi_ui2f>:
 8000c78:	b570      	push	{r4, r5, r6, lr}
 8000c7a:	1e04      	subs	r4, r0, #0
 8000c7c:	d00e      	beq.n	8000c9c <__aeabi_ui2f+0x24>
 8000c7e:	f000 f88b 	bl	8000d98 <__clzsi2>
 8000c82:	239e      	movs	r3, #158	; 0x9e
 8000c84:	0001      	movs	r1, r0
 8000c86:	1a1b      	subs	r3, r3, r0
 8000c88:	2b96      	cmp	r3, #150	; 0x96
 8000c8a:	dc0c      	bgt.n	8000ca6 <__aeabi_ui2f+0x2e>
 8000c8c:	2808      	cmp	r0, #8
 8000c8e:	d02c      	beq.n	8000cea <__aeabi_ui2f+0x72>
 8000c90:	3908      	subs	r1, #8
 8000c92:	408c      	lsls	r4, r1
 8000c94:	0264      	lsls	r4, r4, #9
 8000c96:	0a64      	lsrs	r4, r4, #9
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	e001      	b.n	8000ca0 <__aeabi_ui2f+0x28>
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	2400      	movs	r4, #0
 8000ca0:	05c0      	lsls	r0, r0, #23
 8000ca2:	4320      	orrs	r0, r4
 8000ca4:	bd70      	pop	{r4, r5, r6, pc}
 8000ca6:	2b99      	cmp	r3, #153	; 0x99
 8000ca8:	dd0a      	ble.n	8000cc0 <__aeabi_ui2f+0x48>
 8000caa:	0002      	movs	r2, r0
 8000cac:	0020      	movs	r0, r4
 8000cae:	321b      	adds	r2, #27
 8000cb0:	4090      	lsls	r0, r2
 8000cb2:	0002      	movs	r2, r0
 8000cb4:	1e50      	subs	r0, r2, #1
 8000cb6:	4182      	sbcs	r2, r0
 8000cb8:	2005      	movs	r0, #5
 8000cba:	1a40      	subs	r0, r0, r1
 8000cbc:	40c4      	lsrs	r4, r0
 8000cbe:	4314      	orrs	r4, r2
 8000cc0:	2905      	cmp	r1, #5
 8000cc2:	dc16      	bgt.n	8000cf2 <__aeabi_ui2f+0x7a>
 8000cc4:	0022      	movs	r2, r4
 8000cc6:	480f      	ldr	r0, [pc, #60]	; (8000d04 <__aeabi_ui2f+0x8c>)
 8000cc8:	4002      	ands	r2, r0
 8000cca:	0765      	lsls	r5, r4, #29
 8000ccc:	d009      	beq.n	8000ce2 <__aeabi_ui2f+0x6a>
 8000cce:	250f      	movs	r5, #15
 8000cd0:	402c      	ands	r4, r5
 8000cd2:	2c04      	cmp	r4, #4
 8000cd4:	d005      	beq.n	8000ce2 <__aeabi_ui2f+0x6a>
 8000cd6:	3204      	adds	r2, #4
 8000cd8:	0154      	lsls	r4, r2, #5
 8000cda:	d502      	bpl.n	8000ce2 <__aeabi_ui2f+0x6a>
 8000cdc:	239f      	movs	r3, #159	; 0x9f
 8000cde:	4002      	ands	r2, r0
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	0192      	lsls	r2, r2, #6
 8000ce4:	0a54      	lsrs	r4, r2, #9
 8000ce6:	b2d8      	uxtb	r0, r3
 8000ce8:	e7da      	b.n	8000ca0 <__aeabi_ui2f+0x28>
 8000cea:	0264      	lsls	r4, r4, #9
 8000cec:	2096      	movs	r0, #150	; 0x96
 8000cee:	0a64      	lsrs	r4, r4, #9
 8000cf0:	e7d6      	b.n	8000ca0 <__aeabi_ui2f+0x28>
 8000cf2:	1f4a      	subs	r2, r1, #5
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	0022      	movs	r2, r4
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <__aeabi_ui2f+0x8c>)
 8000cfa:	4002      	ands	r2, r0
 8000cfc:	0765      	lsls	r5, r4, #29
 8000cfe:	d0f0      	beq.n	8000ce2 <__aeabi_ui2f+0x6a>
 8000d00:	e7e5      	b.n	8000cce <__aeabi_ui2f+0x56>
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	fbffffff 	.word	0xfbffffff

08000d08 <__aeabi_f2d>:
 8000d08:	b570      	push	{r4, r5, r6, lr}
 8000d0a:	0242      	lsls	r2, r0, #9
 8000d0c:	0043      	lsls	r3, r0, #1
 8000d0e:	0fc4      	lsrs	r4, r0, #31
 8000d10:	20fe      	movs	r0, #254	; 0xfe
 8000d12:	0e1b      	lsrs	r3, r3, #24
 8000d14:	1c59      	adds	r1, r3, #1
 8000d16:	0a55      	lsrs	r5, r2, #9
 8000d18:	4208      	tst	r0, r1
 8000d1a:	d00c      	beq.n	8000d36 <__aeabi_f2d+0x2e>
 8000d1c:	21e0      	movs	r1, #224	; 0xe0
 8000d1e:	0089      	lsls	r1, r1, #2
 8000d20:	468c      	mov	ip, r1
 8000d22:	076d      	lsls	r5, r5, #29
 8000d24:	0b12      	lsrs	r2, r2, #12
 8000d26:	4463      	add	r3, ip
 8000d28:	051b      	lsls	r3, r3, #20
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	07e4      	lsls	r4, r4, #31
 8000d2e:	4323      	orrs	r3, r4
 8000d30:	0028      	movs	r0, r5
 8000d32:	0019      	movs	r1, r3
 8000d34:	bd70      	pop	{r4, r5, r6, pc}
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d114      	bne.n	8000d64 <__aeabi_f2d+0x5c>
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d01b      	beq.n	8000d76 <__aeabi_f2d+0x6e>
 8000d3e:	0028      	movs	r0, r5
 8000d40:	f000 f82a 	bl	8000d98 <__clzsi2>
 8000d44:	280a      	cmp	r0, #10
 8000d46:	dc1c      	bgt.n	8000d82 <__aeabi_f2d+0x7a>
 8000d48:	230b      	movs	r3, #11
 8000d4a:	002a      	movs	r2, r5
 8000d4c:	1a1b      	subs	r3, r3, r0
 8000d4e:	40da      	lsrs	r2, r3
 8000d50:	0003      	movs	r3, r0
 8000d52:	3315      	adds	r3, #21
 8000d54:	409d      	lsls	r5, r3
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <__aeabi_f2d+0x88>)
 8000d58:	0312      	lsls	r2, r2, #12
 8000d5a:	1a1b      	subs	r3, r3, r0
 8000d5c:	055b      	lsls	r3, r3, #21
 8000d5e:	0b12      	lsrs	r2, r2, #12
 8000d60:	0d5b      	lsrs	r3, r3, #21
 8000d62:	e7e1      	b.n	8000d28 <__aeabi_f2d+0x20>
 8000d64:	2d00      	cmp	r5, #0
 8000d66:	d009      	beq.n	8000d7c <__aeabi_f2d+0x74>
 8000d68:	0b13      	lsrs	r3, r2, #12
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	0312      	lsls	r2, r2, #12
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	076d      	lsls	r5, r5, #29
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <__aeabi_f2d+0x8c>)
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_f2d+0x20>
 8000d76:	2300      	movs	r3, #0
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e7d5      	b.n	8000d28 <__aeabi_f2d+0x20>
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <__aeabi_f2d+0x8c>)
 8000d80:	e7d2      	b.n	8000d28 <__aeabi_f2d+0x20>
 8000d82:	0003      	movs	r3, r0
 8000d84:	002a      	movs	r2, r5
 8000d86:	3b0b      	subs	r3, #11
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	e7e3      	b.n	8000d56 <__aeabi_f2d+0x4e>
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	00000389 	.word	0x00000389
 8000d94:	000007ff 	.word	0x000007ff

08000d98 <__clzsi2>:
 8000d98:	211c      	movs	r1, #28
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	041b      	lsls	r3, r3, #16
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d301      	bcc.n	8000da6 <__clzsi2+0xe>
 8000da2:	0c00      	lsrs	r0, r0, #16
 8000da4:	3910      	subs	r1, #16
 8000da6:	0a1b      	lsrs	r3, r3, #8
 8000da8:	4298      	cmp	r0, r3
 8000daa:	d301      	bcc.n	8000db0 <__clzsi2+0x18>
 8000dac:	0a00      	lsrs	r0, r0, #8
 8000dae:	3908      	subs	r1, #8
 8000db0:	091b      	lsrs	r3, r3, #4
 8000db2:	4298      	cmp	r0, r3
 8000db4:	d301      	bcc.n	8000dba <__clzsi2+0x22>
 8000db6:	0900      	lsrs	r0, r0, #4
 8000db8:	3904      	subs	r1, #4
 8000dba:	a202      	add	r2, pc, #8	; (adr r2, 8000dc4 <__clzsi2+0x2c>)
 8000dbc:	5c10      	ldrb	r0, [r2, r0]
 8000dbe:	1840      	adds	r0, r0, r1
 8000dc0:	4770      	bx	lr
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	02020304 	.word	0x02020304
 8000dc8:	01010101 	.word	0x01010101
	...

08000dd4 <__clzdi2>:
 8000dd4:	b510      	push	{r4, lr}
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d103      	bne.n	8000de2 <__clzdi2+0xe>
 8000dda:	f7ff ffdd 	bl	8000d98 <__clzsi2>
 8000dde:	3020      	adds	r0, #32
 8000de0:	e002      	b.n	8000de8 <__clzdi2+0x14>
 8000de2:	0008      	movs	r0, r1
 8000de4:	f7ff ffd8 	bl	8000d98 <__clzsi2>
 8000de8:	bd10      	pop	{r4, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)

08000dec <AHT20_Master_Transmit>:
 */

#include "AHT20.h"

HAL_StatusTypeDef AHT20_Master_Transmit(uint8_t *data, uint16_t size)
{
 8000dec:	b5b0      	push	{r4, r5, r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	000a      	movs	r2, r1
 8000df6:	1cbb      	adds	r3, r7, #2
 8000df8:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDR, data, size, HAL_MAX_DELAY);
 8000dfa:	250f      	movs	r5, #15
 8000dfc:	197c      	adds	r4, r7, r5
 8000dfe:	1cbb      	adds	r3, r7, #2
 8000e00:	8819      	ldrh	r1, [r3, #0]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <AHT20_Master_Transmit+0x38>)
 8000e06:	2301      	movs	r3, #1
 8000e08:	425b      	negs	r3, r3
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	000b      	movs	r3, r1
 8000e0e:	2170      	movs	r1, #112	; 0x70
 8000e10:	f002 fc10 	bl	8003634 <HAL_I2C_Master_Transmit>
 8000e14:	0003      	movs	r3, r0
 8000e16:	7023      	strb	r3, [r4, #0]

	return status;
 8000e18:	197b      	adds	r3, r7, r5
 8000e1a:	781b      	ldrb	r3, [r3, #0]
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b004      	add	sp, #16
 8000e22:	bdb0      	pop	{r4, r5, r7, pc}
 8000e24:	2000012c 	.word	0x2000012c

08000e28 <AHT20_Master_Receive>:

HAL_StatusTypeDef AHT20_Master_Receive(uint8_t *data, uint16_t size)
{
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	000a      	movs	r2, r1
 8000e32:	1cbb      	adds	r3, r7, #2
 8000e34:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Receive(&hi2c1, AHT20_READ_ADDR, data, size, HAL_MAX_DELAY);
 8000e36:	250f      	movs	r5, #15
 8000e38:	197c      	adds	r4, r7, r5
 8000e3a:	1cbb      	adds	r3, r7, #2
 8000e3c:	8819      	ldrh	r1, [r3, #0]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	4807      	ldr	r0, [pc, #28]	; (8000e60 <AHT20_Master_Receive+0x38>)
 8000e42:	2301      	movs	r3, #1
 8000e44:	425b      	negs	r3, r3
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	000b      	movs	r3, r1
 8000e4a:	2171      	movs	r1, #113	; 0x71
 8000e4c:	f002 fcfa 	bl	8003844 <HAL_I2C_Master_Receive>
 8000e50:	0003      	movs	r3, r0
 8000e52:	7023      	strb	r3, [r4, #0]

	return status;
 8000e54:	197b      	adds	r3, r7, r5
 8000e56:	781b      	ldrb	r3, [r3, #0]
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b004      	add	sp, #16
 8000e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e60:	2000012c 	.word	0x2000012c

08000e64 <AHT20_Init>:

	return read_value;
}

void AHT20_Init()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
	uint8_t init_cmd[] = {0xBE, 0x08, 0x00};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <AHT20_Init+0x70>)
 8000e6e:	8811      	ldrh	r1, [r2, #0]
 8000e70:	8019      	strh	r1, [r3, #0]
 8000e72:	7892      	ldrb	r2, [r2, #2]
 8000e74:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(init_cmd, sizeof(init_cmd)) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2103      	movs	r1, #3
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff ffb6 	bl	8000dec <AHT20_Master_Transmit>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d004      	beq.n	8000e8e <AHT20_Init+0x2a>
	{
		printf("AHT20 initialisation error\n");
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <AHT20_Init+0x74>)
 8000e86:	0018      	movs	r0, r3
 8000e88:	f006 fd16 	bl	80078b8 <puts>
		else
		{
			printf("AHT20 not calibrated\n");
		}
	}
}
 8000e8c:	e01d      	b.n	8000eca <AHT20_Init+0x66>
		printf("AHT20 initialised\n");
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <AHT20_Init+0x78>)
 8000e90:	0018      	movs	r0, r3
 8000e92:	f006 fd11 	bl	80078b8 <puts>
		uint8_t value = 0x00;
 8000e96:	1cfb      	adds	r3, r7, #3
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8000e9c:	200a      	movs	r0, #10
 8000e9e:	f001 fca7 	bl	80027f0 <HAL_Delay>
		AHT20_Master_Receive(&value, sizeof(value));
 8000ea2:	1cfb      	adds	r3, r7, #3
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff ffbe 	bl	8000e28 <AHT20_Master_Receive>
		if ((value & 0x08) != 0x00) // check calibration bit
 8000eac:	1cfb      	adds	r3, r7, #3
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d004      	beq.n	8000ec2 <AHT20_Init+0x5e>
			printf("AHT20 calibrated\n");
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <AHT20_Init+0x7c>)
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f006 fcfc 	bl	80078b8 <puts>
}
 8000ec0:	e003      	b.n	8000eca <AHT20_Init+0x66>
			printf("AHT20 not calibrated\n");
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <AHT20_Init+0x80>)
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f006 fcf7 	bl	80078b8 <puts>
}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b002      	add	sp, #8
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	0800866c 	.word	0x0800866c
 8000ed8:	08008610 	.word	0x08008610
 8000edc:	0800862c 	.word	0x0800862c
 8000ee0:	08008640 	.word	0x08008640
 8000ee4:	08008654 	.word	0x08008654

08000ee8 <AHT20_Read>:

void AHT20_Read(volatile float *Temp, volatile float *Hum)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	uint8_t trig_measure_cmd[] = {0xAC, 0x33, 0x00};
 8000ef2:	2010      	movs	r0, #16
 8000ef4:	183b      	adds	r3, r7, r0
 8000ef6:	4a35      	ldr	r2, [pc, #212]	; (8000fcc <AHT20_Read+0xe4>)
 8000ef8:	8811      	ldrh	r1, [r2, #0]
 8000efa:	8019      	strh	r1, [r3, #0]
 8000efc:	7892      	ldrb	r2, [r2, #2]
 8000efe:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(trig_measure_cmd, sizeof(trig_measure_cmd)) != HAL_OK)
 8000f00:	183b      	adds	r3, r7, r0
 8000f02:	2103      	movs	r1, #3
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff ff71 	bl	8000dec <AHT20_Master_Transmit>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d004      	beq.n	8000f18 <AHT20_Read+0x30>
	{
		printf("AHT20 trigger measurement error\n");
 8000f0e:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <AHT20_Read+0xe8>)
 8000f10:	0018      	movs	r0, r3
 8000f12:	f006 fcd1 	bl	80078b8 <puts>

			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
			*Temp = data * 200.0f / (1 << 20) - 50;
		}
	}
}
 8000f16:	e054      	b.n	8000fc2 <AHT20_Read+0xda>
		HAL_Delay(80); // wait for the measurements to be completed
 8000f18:	2050      	movs	r0, #80	; 0x50
 8000f1a:	f001 fc69 	bl	80027f0 <HAL_Delay>
		AHT20_Master_Receive(read_buffer, sizeof(read_buffer));
 8000f1e:	2408      	movs	r4, #8
 8000f20:	193b      	adds	r3, r7, r4
 8000f22:	2106      	movs	r1, #6
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff ff7f 	bl	8000e28 <AHT20_Master_Receive>
		if(((read_buffer[0]) & 0x80) == 0x00)
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b25b      	sxtb	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db46      	blt.n	8000fc2 <AHT20_Read+0xda>
			uint32_t data = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
			data = (((uint32_t)read_buffer[3] >> 4) + ((uint32_t)read_buffer[2] << 4) + ((uint32_t)read_buffer[1] << 12));
 8000f38:	193b      	adds	r3, r7, r4
 8000f3a:	78db      	ldrb	r3, [r3, #3]
 8000f3c:	091b      	lsrs	r3, r3, #4
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	001a      	movs	r2, r3
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	789b      	ldrb	r3, [r3, #2]
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	18d2      	adds	r2, r2, r3
 8000f4a:	193b      	adds	r3, r7, r4
 8000f4c:	785b      	ldrb	r3, [r3, #1]
 8000f4e:	031b      	lsls	r3, r3, #12
 8000f50:	18d3      	adds	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
			*Hum = data * 100.0f / (1 << 20);
 8000f54:	6978      	ldr	r0, [r7, #20]
 8000f56:	f7ff fe8f 	bl	8000c78 <__aeabi_ui2f>
 8000f5a:	1c03      	adds	r3, r0, #0
 8000f5c:	491d      	ldr	r1, [pc, #116]	; (8000fd4 <AHT20_Read+0xec>)
 8000f5e:	1c18      	adds	r0, r3, #0
 8000f60:	f7ff fb9c 	bl	800069c <__aeabi_fmul>
 8000f64:	1c03      	adds	r3, r0, #0
 8000f66:	2193      	movs	r1, #147	; 0x93
 8000f68:	05c9      	lsls	r1, r1, #23
 8000f6a:	1c18      	adds	r0, r3, #0
 8000f6c:	f7ff fa7c 	bl	8000468 <__aeabi_fdiv>
 8000f70:	1c03      	adds	r3, r0, #0
 8000f72:	1c1a      	adds	r2, r3, #0
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	601a      	str	r2, [r3, #0]
			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	78db      	ldrb	r3, [r3, #3]
 8000f7c:	041a      	lsls	r2, r3, #16
 8000f7e:	23f0      	movs	r3, #240	; 0xf0
 8000f80:	031b      	lsls	r3, r3, #12
 8000f82:	401a      	ands	r2, r3
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	791b      	ldrb	r3, [r3, #4]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	18d3      	adds	r3, r2, r3
 8000f8c:	193a      	adds	r2, r7, r4
 8000f8e:	7952      	ldrb	r2, [r2, #5]
 8000f90:	189b      	adds	r3, r3, r2
 8000f92:	617b      	str	r3, [r7, #20]
			*Temp = data * 200.0f / (1 << 20) - 50;
 8000f94:	6978      	ldr	r0, [r7, #20]
 8000f96:	f7ff fe6f 	bl	8000c78 <__aeabi_ui2f>
 8000f9a:	1c03      	adds	r3, r0, #0
 8000f9c:	490e      	ldr	r1, [pc, #56]	; (8000fd8 <AHT20_Read+0xf0>)
 8000f9e:	1c18      	adds	r0, r3, #0
 8000fa0:	f7ff fb7c 	bl	800069c <__aeabi_fmul>
 8000fa4:	1c03      	adds	r3, r0, #0
 8000fa6:	2193      	movs	r1, #147	; 0x93
 8000fa8:	05c9      	lsls	r1, r1, #23
 8000faa:	1c18      	adds	r0, r3, #0
 8000fac:	f7ff fa5c 	bl	8000468 <__aeabi_fdiv>
 8000fb0:	1c03      	adds	r3, r0, #0
 8000fb2:	490a      	ldr	r1, [pc, #40]	; (8000fdc <AHT20_Read+0xf4>)
 8000fb4:	1c18      	adds	r0, r3, #0
 8000fb6:	f7ff fcbf 	bl	8000938 <__aeabi_fsub>
 8000fba:	1c03      	adds	r3, r0, #0
 8000fbc:	1c1a      	adds	r2, r3, #0
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b007      	add	sp, #28
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	08008690 	.word	0x08008690
 8000fd0:	08008670 	.word	0x08008670
 8000fd4:	42c80000 	.word	0x42c80000
 8000fd8:	43480000 	.word	0x43480000
 8000fdc:	42480000 	.word	0x42480000

08000fe0 <NEO6_ReceiveUartChar>:
  /* done */
  return token;
}

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	2382      	movs	r3, #130	; 0x82
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	5cd3      	ldrb	r3, [r2, r3]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a2b      	ldr	r2, [pc, #172]	; (80010a0 <NEO6_ReceiveUartChar+0xc0>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d503      	bpl.n	8001000 <NEO6_ReceiveUartChar+0x20>
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	4a2a      	ldr	r2, [pc, #168]	; (80010a4 <NEO6_ReceiveUartChar+0xc4>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	3301      	adds	r3, #1
 8001000:	001a      	movs	r2, r3
 8001002:	200f      	movs	r0, #15
 8001004:	183b      	adds	r3, r7, r0
 8001006:	701a      	strb	r2, [r3, #0]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	2306      	movs	r3, #6
 800100c:	33ff      	adds	r3, #255	; 0xff
 800100e:	5cd3      	ldrb	r3, [r2, r3]
 8001010:	183a      	adds	r2, r7, r0
 8001012:	7812      	ldrb	r2, [r2, #0]
 8001014:	429a      	cmp	r2, r3
 8001016:	d038      	beq.n	800108a <NEO6_ReceiveUartChar+0xaa>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <NEO6_ReceiveUartChar+0xc8>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b0d      	cmp	r3, #13
 8001020:	d119      	bne.n	8001056 <NEO6_ReceiveUartChar+0x76>
		{
			GpsStateHandler->UartBufferLines++;
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	2383      	movs	r3, #131	; 0x83
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	5cd3      	ldrb	r3, [r2, r3]
 800102a:	3301      	adds	r3, #1
 800102c:	b2d9      	uxtb	r1, r3
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	2383      	movs	r3, #131	; 0x83
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBufferHead = TempHead;
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	1839      	adds	r1, r7, r0
 800103a:	2382      	movs	r3, #130	; 0x82
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	7809      	ldrb	r1, [r1, #0]
 8001040:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8001042:	183b      	adds	r3, r7, r0
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <NEO6_ReceiveUartChar+0xc8>)
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	b2d1      	uxtb	r1, r2
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	18d3      	adds	r3, r2, r3
 8001050:	1c0a      	adds	r2, r1, #0
 8001052:	711a      	strb	r2, [r3, #4]
 8001054:	e019      	b.n	800108a <NEO6_ReceiveUartChar+0xaa>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <NEO6_ReceiveUartChar+0xc8>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d014      	beq.n	800108a <NEO6_ReceiveUartChar+0xaa>
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <NEO6_ReceiveUartChar+0xc8>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b0a      	cmp	r3, #10
 8001068:	d00f      	beq.n	800108a <NEO6_ReceiveUartChar+0xaa>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	200f      	movs	r0, #15
 800106e:	1839      	adds	r1, r7, r0
 8001070:	2382      	movs	r3, #130	; 0x82
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	7809      	ldrb	r1, [r1, #0]
 8001076:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8001078:	183b      	adds	r3, r7, r0
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <NEO6_ReceiveUartChar+0xc8>)
 800107e:	7812      	ldrb	r2, [r2, #0]
 8001080:	b2d1      	uxtb	r1, r2
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	18d3      	adds	r3, r2, r3
 8001086:	1c0a      	adds	r2, r1, #0
 8001088:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4906      	ldr	r1, [pc, #24]	; (80010a8 <NEO6_ReceiveUartChar+0xc8>)
 8001090:	2201      	movs	r2, #1
 8001092:	0018      	movs	r0, r3
 8001094:	f004 ffea 	bl	800606c <HAL_UART_Receive_IT>
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b004      	add	sp, #16
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	800000ff 	.word	0x800000ff
 80010a4:	ffffff00 	.word	0xffffff00
 80010a8:	20000084 	.word	0x20000084

080010ac <NEO6_Init>:
		NEO6_ParseLine(GpsStateHandler);
	}
}

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	2382      	movs	r3, #130	; 0x82
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2100      	movs	r1, #0
 80010c4:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferTail = 0;
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	2306      	movs	r3, #6
 80010ca:	33ff      	adds	r3, #255	; 0xff
 80010cc:	2100      	movs	r1, #0
 80010ce:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferLines = 0;
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	2383      	movs	r3, #131	; 0x83
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2100      	movs	r1, #0
 80010d8:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Hour = 0;
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	2388      	movs	r3, #136	; 0x88
 80010de:	33ff      	adds	r3, #255	; 0xff
 80010e0:	2100      	movs	r1, #0
 80010e2:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Minute = 0;
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	23c4      	movs	r3, #196	; 0xc4
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2100      	movs	r1, #0
 80010ec:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Second = 0;
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	238a      	movs	r3, #138	; 0x8a
 80010f2:	33ff      	adds	r3, #255	; 0xff
 80010f4:	2100      	movs	r1, #0
 80010f6:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Day = 0;
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	23c5      	movs	r3, #197	; 0xc5
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2100      	movs	r1, #0
 8001100:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Month = 0;
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	238c      	movs	r3, #140	; 0x8c
 8001106:	33ff      	adds	r3, #255	; 0xff
 8001108:	2100      	movs	r1, #0
 800110a:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Year = 0;
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	23c6      	movs	r3, #198	; 0xc6
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2100      	movs	r1, #0
 8001114:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Latitude = 0;
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	23c8      	movs	r3, #200	; 0xc8
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	18d1      	adds	r1, r2, r3
 800111e:	2200      	movs	r2, #0
 8001120:	2300      	movs	r3, #0
 8001122:	600a      	str	r2, [r1, #0]
 8001124:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LatitudeDirection = '0';
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	23cc      	movs	r3, #204	; 0xcc
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2130      	movs	r1, #48	; 0x30
 800112e:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Longitude = 0;
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	23d0      	movs	r3, #208	; 0xd0
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	18d1      	adds	r1, r2, r3
 8001138:	2200      	movs	r2, #0
 800113a:	2300      	movs	r3, #0
 800113c:	600a      	str	r2, [r1, #0]
 800113e:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LongitudeDirection = '0';
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	23d4      	movs	r3, #212	; 0xd4
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2130      	movs	r1, #48	; 0x30
 8001148:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->SpeedKilometers = 0;
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	23e0      	movs	r3, #224	; 0xe0
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	18d1      	adds	r1, r2, r3
 8001152:	2200      	movs	r2, #0
 8001154:	2300      	movs	r3, #0
 8001156:	600a      	str	r2, [r1, #0]
 8001158:	604b      	str	r3, [r1, #4]
	GpsStateHandler->SpeedKnots = 0;
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	23dc      	movs	r3, #220	; 0xdc
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	18d1      	adds	r1, r2, r3
 8001162:	2200      	movs	r2, #0
 8001164:	2300      	movs	r3, #0
 8001166:	600a      	str	r2, [r1, #0]
 8001168:	604b      	str	r3, [r1, #4]

	GpsStateHandler->SatelitesNumber = 0;
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	23e4      	movs	r3, #228	; 0xe4
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2100      	movs	r1, #0
 8001172:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Quality = 0;
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	23ca      	movs	r3, #202	; 0xca
 8001178:	33ff      	adds	r3, #255	; 0xff
 800117a:	2100      	movs	r1, #0
 800117c:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Dop = 0;
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	23e8      	movs	r3, #232	; 0xe8
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	18d1      	adds	r1, r2, r3
 8001186:	2200      	movs	r2, #0
 8001188:	2300      	movs	r3, #0
 800118a:	600a      	str	r2, [r1, #0]
 800118c:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Hdop = 0;
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	23ec      	movs	r3, #236	; 0xec
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	18d1      	adds	r1, r2, r3
 8001196:	2200      	movs	r2, #0
 8001198:	2300      	movs	r3, #0
 800119a:	600a      	str	r2, [r1, #0]
 800119c:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Vdop = 0;
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	23f0      	movs	r3, #240	; 0xf0
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	18d1      	adds	r1, r2, r3
 80011a6:	2200      	movs	r2, #0
 80011a8:	2300      	movs	r3, #0
 80011aa:	600a      	str	r2, [r1, #0]
 80011ac:	604b      	str	r3, [r1, #4]

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4904      	ldr	r1, [pc, #16]	; (80011c4 <NEO6_Init+0x118>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	0018      	movs	r0, r3
 80011b8:	f004 ff58 	bl	800606c <HAL_UART_Receive_IT>
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b002      	add	sp, #8
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000084 	.word	0x20000084

080011c8 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ce:	003b      	movs	r3, r7
 80011d0:	0018      	movs	r0, r3
 80011d2:	2308      	movs	r3, #8
 80011d4:	001a      	movs	r2, r3
 80011d6:	2100      	movs	r1, #0
 80011d8:	f006 fc6a 	bl	8007ab0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <MX_ADC_Init+0xc0>)
 80011de:	4a2b      	ldr	r2, [pc, #172]	; (800128c <MX_ADC_Init+0xc4>)
 80011e0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <MX_ADC_Init+0xc0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <MX_ADC_Init+0xc0>)
 80011ea:	2280      	movs	r2, #128	; 0x80
 80011ec:	05d2      	lsls	r2, r2, #23
 80011ee:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80011f0:	4b25      	ldr	r3, [pc, #148]	; (8001288 <MX_ADC_Init+0xc0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <MX_ADC_Init+0xc0>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <MX_ADC_Init+0xc0>)
 80011fe:	2201      	movs	r2, #1
 8001200:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <MX_ADC_Init+0xc0>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_ADC_Init+0xc0>)
 800120a:	2220      	movs	r2, #32
 800120c:	2101      	movs	r1, #1
 800120e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_ADC_Init+0xc0>)
 8001212:	2221      	movs	r2, #33	; 0x21
 8001214:	2100      	movs	r1, #0
 8001216:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_ADC_Init+0xc0>)
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_ADC_Init+0xc0>)
 8001220:	22c2      	movs	r2, #194	; 0xc2
 8001222:	32ff      	adds	r2, #255	; 0xff
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_ADC_Init+0xc0>)
 8001228:	222c      	movs	r2, #44	; 0x2c
 800122a:	2101      	movs	r1, #1
 800122c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_ADC_Init+0xc0>)
 8001230:	2204      	movs	r2, #4
 8001232:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_ADC_Init+0xc0>)
 8001236:	2200      	movs	r2, #0
 8001238:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_ADC_Init+0xc0>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_ADC_Init+0xc0>)
 8001242:	2200      	movs	r2, #0
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_ADC_Init+0xc0>)
 8001248:	2200      	movs	r2, #0
 800124a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_ADC_Init+0xc0>)
 800124e:	0018      	movs	r0, r3
 8001250:	f001 faf2 	bl	8002838 <HAL_ADC_Init>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001258:	f000 faaa 	bl	80017b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800125c:	003b      	movs	r3, r7
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001262:	003b      	movs	r3, r7
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	0152      	lsls	r2, r2, #5
 8001268:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800126a:	003a      	movs	r2, r7
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_ADC_Init+0xc0>)
 800126e:	0011      	movs	r1, r2
 8001270:	0018      	movs	r0, r3
 8001272:	f001 fc55 	bl	8002b20 <HAL_ADC_ConfigChannel>
 8001276:	1e03      	subs	r3, r0, #0
 8001278:	d001      	beq.n	800127e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800127a:	f000 fa99 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	20000088 	.word	0x20000088
 800128c:	40012400 	.word	0x40012400

08001290 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	240c      	movs	r4, #12
 800129a:	193b      	adds	r3, r7, r4
 800129c:	0018      	movs	r0, r3
 800129e:	2314      	movs	r3, #20
 80012a0:	001a      	movs	r2, r3
 80012a2:	2100      	movs	r1, #0
 80012a4:	f006 fc04 	bl	8007ab0 <memset>
  if(adcHandle->Instance==ADC1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a2a      	ldr	r2, [pc, #168]	; (8001358 <HAL_ADC_MspInit+0xc8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d14d      	bne.n	800134e <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012b2:	4b2a      	ldr	r3, [pc, #168]	; (800135c <HAL_ADC_MspInit+0xcc>)
 80012b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <HAL_ADC_MspInit+0xcc>)
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	0089      	lsls	r1, r1, #2
 80012bc:	430a      	orrs	r2, r1
 80012be:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <HAL_ADC_MspInit+0xcc>)
 80012c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c4:	4b25      	ldr	r3, [pc, #148]	; (800135c <HAL_ADC_MspInit+0xcc>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	430a      	orrs	r2, r1
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <HAL_ADC_MspInit+0xcc>)
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	2201      	movs	r2, #1
 80012d2:	4013      	ands	r3, r2
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d8:	193b      	adds	r3, r7, r4
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012de:	193b      	adds	r3, r7, r4
 80012e0:	2203      	movs	r2, #3
 80012e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	193b      	adds	r3, r7, r4
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	193a      	adds	r2, r7, r4
 80012ec:	23a0      	movs	r3, #160	; 0xa0
 80012ee:	05db      	lsls	r3, r3, #23
 80012f0:	0011      	movs	r1, r2
 80012f2:	0018      	movs	r0, r3
 80012f4:	f001 ff46 	bl	8003184 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 80012fa:	4a1a      	ldr	r2, [pc, #104]	; (8001364 <HAL_ADC_MspInit+0xd4>)
 80012fc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001312:	2280      	movs	r2, #128	; 0x80
 8001314:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001328:	2220      	movs	r2, #32
 800132a:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001334:	0018      	movs	r0, r3
 8001336:	f001 fd77 	bl	8002e28 <HAL_DMA_Init>
 800133a:	1e03      	subs	r3, r0, #0
 800133c:	d001      	beq.n	8001342 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800133e:	f000 fa37 	bl	80017b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 8001346:	64da      	str	r2, [r3, #76]	; 0x4c
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_ADC_MspInit+0xd0>)
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b009      	add	sp, #36	; 0x24
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	40012400 	.word	0x40012400
 800135c:	40021000 	.word	0x40021000
 8001360:	200000e4 	.word	0x200000e4
 8001364:	40020008 	.word	0x40020008

08001368 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_DMA_Init+0x38>)
 8001370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_DMA_Init+0x38>)
 8001374:	2101      	movs	r1, #1
 8001376:	430a      	orrs	r2, r1
 8001378:	631a      	str	r2, [r3, #48]	; 0x30
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_DMA_Init+0x38>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	2201      	movs	r2, #1
 8001380:	4013      	ands	r3, r2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2009      	movs	r0, #9
 800138c:	f001 fd1a 	bl	8002dc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001390:	2009      	movs	r0, #9
 8001392:	f001 fd2c 	bl	8002dee <HAL_NVIC_EnableIRQ>

}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	40021000 	.word	0x40021000

080013a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	240c      	movs	r4, #12
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	0018      	movs	r0, r3
 80013b0:	2314      	movs	r3, #20
 80013b2:	001a      	movs	r2, r3
 80013b4:	2100      	movs	r1, #0
 80013b6:	f006 fb7b 	bl	8007ab0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <MX_GPIO_Init+0x108>)
 80013bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013be:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <MX_GPIO_Init+0x108>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	430a      	orrs	r2, r1
 80013c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <MX_GPIO_Init+0x108>)
 80013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ca:	2201      	movs	r2, #1
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	4b36      	ldr	r3, [pc, #216]	; (80014ac <MX_GPIO_Init+0x108>)
 80013d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d6:	4b35      	ldr	r3, [pc, #212]	; (80014ac <MX_GPIO_Init+0x108>)
 80013d8:	2102      	movs	r1, #2
 80013da:	430a      	orrs	r2, r1
 80013dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80013de:	4b33      	ldr	r3, [pc, #204]	; (80014ac <MX_GPIO_Init+0x108>)
 80013e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF24_CSN_Pin|USER_LED_Pin|I2C_EN_Pin|GPS_EN_Pin
 80013ea:	4931      	ldr	r1, [pc, #196]	; (80014b0 <MX_GPIO_Init+0x10c>)
 80013ec:	23a0      	movs	r3, #160	; 0xa0
 80013ee:	05db      	lsls	r3, r3, #23
 80013f0:	2200      	movs	r2, #0
 80013f2:	0018      	movs	r0, r3
 80013f4:	f002 f844 	bl	8003480 <HAL_GPIO_WritePin>
                          |ADC_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 80013f8:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <MX_GPIO_Init+0x110>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	2110      	movs	r1, #16
 80013fe:	0018      	movs	r0, r3
 8001400:	f002 f83e 	bl	8003480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|USER_LED_Pin|I2C_EN_Pin|GPS_EN_Pin
 8001404:	193b      	adds	r3, r7, r4
 8001406:	4a2a      	ldr	r2, [pc, #168]	; (80014b0 <MX_GPIO_Init+0x10c>)
 8001408:	601a      	str	r2, [r3, #0]
                          |ADC_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	193b      	adds	r3, r7, r4
 800140c:	2201      	movs	r2, #1
 800140e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	193b      	adds	r3, r7, r4
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	193b      	adds	r3, r7, r4
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	193a      	adds	r2, r7, r4
 800141e:	23a0      	movs	r3, #160	; 0xa0
 8001420:	05db      	lsls	r3, r3, #23
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f001 fead 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800142a:	193b      	adds	r3, r7, r4
 800142c:	2280      	movs	r2, #128	; 0x80
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001432:	193b      	adds	r3, r7, r4
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	193b      	adds	r3, r7, r4
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800143e:	193a      	adds	r2, r7, r4
 8001440:	23a0      	movs	r3, #160	; 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f001 fe9c 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 800144c:	193b      	adds	r3, r7, r4
 800144e:	2210      	movs	r2, #16
 8001450:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	193b      	adds	r3, r7, r4
 8001454:	2201      	movs	r2, #1
 8001456:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	193b      	adds	r3, r7, r4
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	193b      	adds	r3, r7, r4
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001464:	193b      	adds	r3, r7, r4
 8001466:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <MX_GPIO_Init+0x110>)
 8001468:	0019      	movs	r1, r3
 800146a:	0010      	movs	r0, r2
 800146c:	f001 fe8a 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001470:	0021      	movs	r1, r4
 8001472:	187b      	adds	r3, r7, r1
 8001474:	2220      	movs	r2, #32
 8001476:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001478:	187b      	adds	r3, r7, r1
 800147a:	2288      	movs	r2, #136	; 0x88
 800147c:	0352      	lsls	r2, r2, #13
 800147e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	187b      	adds	r3, r7, r1
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001486:	187b      	adds	r3, r7, r1
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <MX_GPIO_Init+0x110>)
 800148a:	0019      	movs	r1, r3
 800148c:	0010      	movs	r0, r2
 800148e:	f001 fe79 	bl	8003184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2007      	movs	r0, #7
 8001498:	f001 fc94 	bl	8002dc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800149c:	2007      	movs	r0, #7
 800149e:	f001 fca6 	bl	8002dee <HAL_NVIC_EnableIRQ>

}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b009      	add	sp, #36	; 0x24
 80014a8:	bd90      	pop	{r4, r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	40021000 	.word	0x40021000
 80014b0:	00001d02 	.word	0x00001d02
 80014b4:	50000400 	.word	0x50000400

080014b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <MX_I2C1_Init+0x74>)
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <MX_I2C1_Init+0x78>)
 80014c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_I2C1_Init+0x74>)
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <MX_I2C1_Init+0x7c>)
 80014c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <MX_I2C1_Init+0x74>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_I2C1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_I2C1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_I2C1_Init+0x74>)
 80014f4:	0018      	movs	r0, r3
 80014f6:	f002 f807 	bl	8003508 <HAL_I2C_Init>
 80014fa:	1e03      	subs	r3, r0, #0
 80014fc:	d001      	beq.n	8001502 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014fe:	f000 f957 	bl	80017b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <MX_I2C1_Init+0x74>)
 8001504:	2100      	movs	r1, #0
 8001506:	0018      	movs	r0, r3
 8001508:	f002 fd5a 	bl	8003fc0 <HAL_I2CEx_ConfigAnalogFilter>
 800150c:	1e03      	subs	r3, r0, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001510:	f000 f94e 	bl	80017b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <MX_I2C1_Init+0x74>)
 8001516:	2100      	movs	r1, #0
 8001518:	0018      	movs	r0, r3
 800151a:	f002 fd9d 	bl	8004058 <HAL_I2CEx_ConfigDigitalFilter>
 800151e:	1e03      	subs	r3, r0, #0
 8001520:	d001      	beq.n	8001526 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001522:	f000 f945 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000012c 	.word	0x2000012c
 8001530:	40005400 	.word	0x40005400
 8001534:	00707cbb 	.word	0x00707cbb

08001538 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	240c      	movs	r4, #12
 8001542:	193b      	adds	r3, r7, r4
 8001544:	0018      	movs	r0, r3
 8001546:	2314      	movs	r3, #20
 8001548:	001a      	movs	r2, r3
 800154a:	2100      	movs	r1, #0
 800154c:	f006 fab0 	bl	8007ab0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_I2C_MspInit+0x7c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d128      	bne.n	80015ac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 800155c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 8001560:	2102      	movs	r1, #2
 8001562:	430a      	orrs	r2, r1
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001572:	0021      	movs	r1, r4
 8001574:	187b      	adds	r3, r7, r1
 8001576:	22c0      	movs	r2, #192	; 0xc0
 8001578:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2212      	movs	r2, #18
 800157e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	187b      	adds	r3, r7, r1
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2203      	movs	r2, #3
 800158a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800158c:	187b      	adds	r3, r7, r1
 800158e:	2201      	movs	r2, #1
 8001590:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	187b      	adds	r3, r7, r1
 8001594:	4a09      	ldr	r2, [pc, #36]	; (80015bc <HAL_I2C_MspInit+0x84>)
 8001596:	0019      	movs	r1, r3
 8001598:	0010      	movs	r0, r2
 800159a:	f001 fdf3 	bl	8003184 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 80015a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	0389      	lsls	r1, r1, #14
 80015a8:	430a      	orrs	r2, r1
 80015aa:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b009      	add	sp, #36	; 0x24
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	40005400 	.word	0x40005400
 80015b8:	40021000 	.word	0x40021000
 80015bc:	50000400 	.word	0x50000400

080015c0 <HAL_UART_RxCpltCallback>:
uint8_t Nrf24_Message[NRF24_PAYLOAD_SIZE];
uint8_t Message[32];
uint8_t MessageLength;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if(huart == GpsState.neo6_huart)
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_UART_RxCpltCallback+0x24>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d103      	bne.n	80015da <HAL_UART_RxCpltCallback+0x1a>
  {
    NEO6_ReceiveUartChar(&GpsState);
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <HAL_UART_RxCpltCallback+0x24>)
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff fd03 	bl	8000fe0 <NEO6_ReceiveUartChar>
  }
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	20000180 	.word	0x20000180

080015e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d11b      	bne.n	8001630 <HAL_TIM_PeriodElapsedCallback+0x48>
    AHT20_Read(&Temp, &Hum); // reads AHT20 measurements every second
 80015f8:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015fc:	0011      	movs	r1, r2
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff fc72 	bl	8000ee8 <AHT20_Read>
    printf("Temperature = %.1fC\n Hum = %.1f\n", Temp, Hum);
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	1c18      	adds	r0, r3, #0
 800160a:	f7ff fb7d 	bl	8000d08 <__aeabi_f2d>
 800160e:	0004      	movs	r4, r0
 8001610:	000d      	movs	r5, r1
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	1c18      	adds	r0, r3, #0
 8001618:	f7ff fb76 	bl	8000d08 <__aeabi_f2d>
 800161c:	0002      	movs	r2, r0
 800161e:	000b      	movs	r3, r1
 8001620:	4908      	ldr	r1, [pc, #32]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001622:	9200      	str	r2, [sp, #0]
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	0022      	movs	r2, r4
 8001628:	002b      	movs	r3, r5
 800162a:	0008      	movs	r0, r1
 800162c:	f006 f8de 	bl	80077ec <iprintf>
  }
}
 8001630:	46c0      	nop			; (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	b002      	add	sp, #8
 8001636:	bdb0      	pop	{r4, r5, r7, pc}
 8001638:	200003d4 	.word	0x200003d4
 800163c:	2000036c 	.word	0x2000036c
 8001640:	20000368 	.word	0x20000368
 8001644:	08008694 	.word	0x08008694

08001648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164c:	f001 f860 	bl	8002710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001650:	f000 f838 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001654:	f7ff fea6 	bl	80013a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001658:	f7ff fe86 	bl	8001368 <MX_DMA_Init>
  MX_ADC_Init();
 800165c:	f7ff fdb4 	bl	80011c8 <MX_ADC_Init>
  MX_I2C1_Init();
 8001660:	f7ff ff2a 	bl	80014b8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001664:	f000 ffb0 	bl	80025c8 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8001668:	f000 fdda 	bl	8002220 <MX_SPI1_Init>
  MX_TIM6_Init();
 800166c:	f000 ff4e 	bl	800250c <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  AHT20_Init();
 8001670:	f7ff fbf8 	bl	8000e64 <AHT20_Init>
  NEO6_Init(&GpsState, &hlpuart1);
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <main+0x64>)
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <main+0x68>)
 8001678:	0011      	movs	r1, r2
 800167a:	0018      	movs	r0, r3
 800167c:	f7ff fd16 	bl	80010ac <NEO6_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <main+0x6c>)
 8001682:	0018      	movs	r0, r3
 8001684:	f004 fa88 	bl	8005b98 <HAL_TIM_Base_Start_IT>


  // TRANSMITER
  nRF24_Init(&hspi1);
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <main+0x70>)
 800168a:	0018      	movs	r0, r3
 800168c:	f000 fcf6 	bl	800207c <nRF24_Init>
  nRF24_SetRXAddress(0, "Nad");
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <main+0x74>)
 8001692:	0019      	movs	r1, r3
 8001694:	2000      	movs	r0, #0
 8001696:	f000 fbc6 	bl	8001e26 <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Odb");
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <main+0x78>)
 800169c:	0018      	movs	r0, r3
 800169e:	f000 fc09 	bl	8001eb4 <nRF24_SetTXAddress>
  nRF24_TX_Mode();
 80016a2:	f000 f979 	bl	8001998 <nRF24_TX_Mode>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  pv_run();
 80016a6:	f000 fda7 	bl	80021f8 <pv_run>
 80016aa:	e7fc      	b.n	80016a6 <main+0x5e>
 80016ac:	20000414 	.word	0x20000414
 80016b0:	20000180 	.word	0x20000180
 80016b4:	200003d4 	.word	0x200003d4
 80016b8:	20000378 	.word	0x20000378
 80016bc:	080086b8 	.word	0x080086b8
 80016c0:	080086bc 	.word	0x080086bc

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b09b      	sub	sp, #108	; 0x6c
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	2434      	movs	r4, #52	; 0x34
 80016cc:	193b      	adds	r3, r7, r4
 80016ce:	0018      	movs	r0, r3
 80016d0:	2334      	movs	r3, #52	; 0x34
 80016d2:	001a      	movs	r2, r3
 80016d4:	2100      	movs	r1, #0
 80016d6:	f006 f9eb 	bl	8007ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016da:	2320      	movs	r3, #32
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	0018      	movs	r0, r3
 80016e0:	2314      	movs	r3, #20
 80016e2:	001a      	movs	r2, r3
 80016e4:	2100      	movs	r1, #0
 80016e6:	f006 f9e3 	bl	8007ab0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ea:	003b      	movs	r3, r7
 80016ec:	0018      	movs	r0, r3
 80016ee:	2320      	movs	r3, #32
 80016f0:	001a      	movs	r2, r3
 80016f2:	2100      	movs	r1, #0
 80016f4:	f006 f9dc 	bl	8007ab0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <SystemClock_Config+0xe4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a2b      	ldr	r2, [pc, #172]	; (80017ac <SystemClock_Config+0xe8>)
 80016fe:	401a      	ands	r2, r3
 8001700:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <SystemClock_Config+0xe4>)
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	0109      	lsls	r1, r1, #4
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800170a:	0021      	movs	r1, r4
 800170c:	187b      	adds	r3, r7, r1
 800170e:	2202      	movs	r2, #2
 8001710:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001712:	187b      	adds	r3, r7, r1
 8001714:	2201      	movs	r2, #1
 8001716:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001718:	187b      	adds	r3, r7, r1
 800171a:	2210      	movs	r2, #16
 800171c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171e:	187b      	adds	r3, r7, r1
 8001720:	2202      	movs	r2, #2
 8001722:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001724:	187b      	adds	r3, r7, r1
 8001726:	2200      	movs	r2, #0
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800172a:	187b      	adds	r3, r7, r1
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	02d2      	lsls	r2, r2, #11
 8001730:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	03d2      	lsls	r2, r2, #15
 8001738:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173a:	187b      	adds	r3, r7, r1
 800173c:	0018      	movs	r0, r3
 800173e:	f002 fcd7 	bl	80040f0 <HAL_RCC_OscConfig>
 8001742:	1e03      	subs	r3, r0, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001746:	f000 f833 	bl	80017b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174a:	2120      	movs	r1, #32
 800174c:	187b      	adds	r3, r7, r1
 800174e:	220f      	movs	r2, #15
 8001750:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001752:	187b      	adds	r3, r7, r1
 8001754:	2203      	movs	r2, #3
 8001756:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001758:	187b      	adds	r3, r7, r1
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800175e:	187b      	adds	r3, r7, r1
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	187b      	adds	r3, r7, r1
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800176a:	187b      	adds	r3, r7, r1
 800176c:	2101      	movs	r1, #1
 800176e:	0018      	movs	r0, r3
 8001770:	f003 f83a 	bl	80047e8 <HAL_RCC_ClockConfig>
 8001774:	1e03      	subs	r3, r0, #0
 8001776:	d001      	beq.n	800177c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001778:	f000 f81a 	bl	80017b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 800177c:	003b      	movs	r3, r7
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001782:	003b      	movs	r3, r7
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001788:	003b      	movs	r3, r7
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178e:	003b      	movs	r3, r7
 8001790:	0018      	movs	r0, r3
 8001792:	f003 fa4d 	bl	8004c30 <HAL_RCCEx_PeriphCLKConfig>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800179a:	f000 f809 	bl	80017b0 <Error_Handler>
  }
}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b01b      	add	sp, #108	; 0x6c
 80017a4:	bd90      	pop	{r4, r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	40007000 	.word	0x40007000
 80017ac:	ffffe7ff 	.word	0xffffe7ff

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <Error_Handler+0x8>

080017ba <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	0002      	movs	r2, r0
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f001 f812 	bl	80027f0 <HAL_Delay>
}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b002      	add	sp, #8
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	000a      	movs	r2, r1
 80017de:	1cfb      	adds	r3, r7, #3
 80017e0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <nRF24_SendSpi+0x2c>)
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	1cfb      	adds	r3, r7, #3
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	23fa      	movs	r3, #250	; 0xfa
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	f003 fbfb 	bl	8004fec <HAL_SPI_Transmit>
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	20000370 	.word	0x20000370

08001804 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	000a      	movs	r2, r1
 800180e:	1cfb      	adds	r3, r7, #3
 8001810:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <nRF24_ReadSpi+0x2c>)
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	1cfb      	adds	r3, r7, #3
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b29a      	uxth	r2, r3
 800181c:	23fa      	movs	r3, #250	; 0xfa
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	f003 fd41 	bl	80052a8 <HAL_SPI_Receive>
}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	46bd      	mov	sp, r7
 800182a:	b002      	add	sp, #8
 800182c:	bd80      	pop	{r7, pc}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	20000370 	.word	0x20000370

08001834 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	0002      	movs	r2, r0
 800183c:	1dfb      	adds	r3, r7, #7
 800183e:	701a      	strb	r2, [r3, #0]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001840:	1dfb      	adds	r3, r7, #7
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8001848:	23a0      	movs	r3, #160	; 0xa0
 800184a:	05db      	lsls	r3, r3, #23
 800184c:	2200      	movs	r2, #0
 800184e:	2102      	movs	r1, #2
 8001850:	0018      	movs	r0, r3
 8001852:	f001 fe15 	bl	8003480 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	2101      	movs	r1, #1
 800185a:	0018      	movs	r0, r3
 800185c:	f7ff ffba 	bl	80017d4 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001860:	240f      	movs	r4, #15
 8001862:	193b      	adds	r3, r7, r4
 8001864:	2101      	movs	r1, #1
 8001866:	0018      	movs	r0, r3
 8001868:	f7ff ffcc 	bl	8001804 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 800186c:	23a0      	movs	r3, #160	; 0xa0
 800186e:	05db      	lsls	r3, r3, #23
 8001870:	2201      	movs	r2, #1
 8001872:	2102      	movs	r1, #2
 8001874:	0018      	movs	r0, r3
 8001876:	f001 fe03 	bl	8003480 <HAL_GPIO_WritePin>

	return result;
 800187a:	193b      	adds	r3, r7, r4
 800187c:	781b      	ldrb	r3, [r3, #0]
}
 800187e:	0018      	movs	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	b005      	add	sp, #20
 8001884:	bd90      	pop	{r4, r7, pc}

08001886 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	0011      	movs	r1, r2
 8001890:	1dfb      	adds	r3, r7, #7
 8001892:	1c02      	adds	r2, r0, #0
 8001894:	701a      	strb	r2, [r3, #0]
 8001896:	1dbb      	adds	r3, r7, #6
 8001898:	1c0a      	adds	r2, r1, #0
 800189a:	701a      	strb	r2, [r3, #0]
	reg = NRF24_CMD_R_REGISTER | reg;
 800189c:	1dfb      	adds	r3, r7, #7
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	1dfb      	adds	r3, r7, #7
 80018a2:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 80018a4:	23a0      	movs	r3, #160	; 0xa0
 80018a6:	05db      	lsls	r3, r3, #23
 80018a8:	2200      	movs	r2, #0
 80018aa:	2102      	movs	r1, #2
 80018ac:	0018      	movs	r0, r3
 80018ae:	f001 fde7 	bl	8003480 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	2101      	movs	r1, #1
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7ff ff8c 	bl	80017d4 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 80018bc:	1dbb      	adds	r3, r7, #6
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	0011      	movs	r1, r2
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff ff9d 	bl	8001804 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80018ca:	23a0      	movs	r3, #160	; 0xa0
 80018cc:	05db      	lsls	r3, r3, #23
 80018ce:	2201      	movs	r2, #1
 80018d0:	2102      	movs	r1, #2
 80018d2:	0018      	movs	r0, r3
 80018d4:	f001 fdd4 	bl	8003480 <HAL_GPIO_WritePin>
}
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b002      	add	sp, #8
 80018de:	bd80      	pop	{r7, pc}

080018e0 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	0002      	movs	r2, r0
 80018e8:	1dfb      	adds	r3, r7, #7
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	1dbb      	adds	r3, r7, #6
 80018ee:	1c0a      	adds	r2, r1, #0
 80018f0:	701a      	strb	r2, [r3, #0]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 80018f2:	1dfb      	adds	r3, r7, #7
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2220      	movs	r2, #32
 80018f8:	4313      	orrs	r3, r2
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	240c      	movs	r4, #12
 80018fe:	193b      	adds	r3, r7, r4
 8001900:	701a      	strb	r2, [r3, #0]
	tmp[1] = val;
 8001902:	193b      	adds	r3, r7, r4
 8001904:	1dba      	adds	r2, r7, #6
 8001906:	7812      	ldrb	r2, [r2, #0]
 8001908:	705a      	strb	r2, [r3, #1]

	NRF24_CSN_LOW;
 800190a:	23a0      	movs	r3, #160	; 0xa0
 800190c:	05db      	lsls	r3, r3, #23
 800190e:	2200      	movs	r2, #0
 8001910:	2102      	movs	r1, #2
 8001912:	0018      	movs	r0, r3
 8001914:	f001 fdb4 	bl	8003480 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001918:	193b      	adds	r3, r7, r4
 800191a:	2102      	movs	r1, #2
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff ff59 	bl	80017d4 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001922:	23a0      	movs	r3, #160	; 0xa0
 8001924:	05db      	lsls	r3, r3, #23
 8001926:	2201      	movs	r2, #1
 8001928:	2102      	movs	r1, #2
 800192a:	0018      	movs	r0, r3
 800192c:	f001 fda8 	bl	8003480 <HAL_GPIO_WritePin>
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b005      	add	sp, #20
 8001936:	bd90      	pop	{r4, r7, pc}

08001938 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6039      	str	r1, [r7, #0]
 8001940:	0011      	movs	r1, r2
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	1c02      	adds	r2, r0, #0
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	1dbb      	adds	r3, r7, #6
 800194a:	1c0a      	adds	r2, r1, #0
 800194c:	701a      	strb	r2, [r3, #0]
	reg = NRF24_CMD_W_REGISTER | reg;
 800194e:	1dfb      	adds	r3, r7, #7
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2220      	movs	r2, #32
 8001954:	4313      	orrs	r3, r2
 8001956:	b2da      	uxtb	r2, r3
 8001958:	1dfb      	adds	r3, r7, #7
 800195a:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 800195c:	23a0      	movs	r3, #160	; 0xa0
 800195e:	05db      	lsls	r3, r3, #23
 8001960:	2200      	movs	r2, #0
 8001962:	2102      	movs	r1, #2
 8001964:	0018      	movs	r0, r3
 8001966:	f001 fd8b 	bl	8003480 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	2101      	movs	r1, #1
 800196e:	0018      	movs	r0, r3
 8001970:	f7ff ff30 	bl	80017d4 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001974:	1dbb      	adds	r3, r7, #6
 8001976:	781a      	ldrb	r2, [r3, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	0011      	movs	r1, r2
 800197c:	0018      	movs	r0, r3
 800197e:	f7ff ff29 	bl	80017d4 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001982:	23a0      	movs	r3, #160	; 0xa0
 8001984:	05db      	lsls	r3, r3, #23
 8001986:	2201      	movs	r2, #1
 8001988:	2102      	movs	r1, #2
 800198a:	0018      	movs	r0, r3
 800198c:	f001 fd78 	bl	8003480 <HAL_GPIO_WritePin>
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b002      	add	sp, #8
 8001996:	bd80      	pop	{r7, pc}

08001998 <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay(1);
}

void nRF24_TX_Mode(void)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <nRF24_TX_Mode+0x5c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	2110      	movs	r1, #16
 80019a4:	0018      	movs	r0, r3
 80019a6:	f001 fd6b 	bl	8003480 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 80019aa:	1dfc      	adds	r4, r7, #7
 80019ac:	f000 f824 	bl	80019f8 <nRF24_ReadConfig>
 80019b0:	0003      	movs	r3, r0
 80019b2:	7023      	strb	r3, [r4, #0]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 80019b4:	1dfb      	adds	r3, r7, #7
 80019b6:	1dfa      	adds	r2, r7, #7
 80019b8:	7812      	ldrb	r2, [r2, #0]
 80019ba:	2102      	movs	r1, #2
 80019bc:	430a      	orrs	r2, r1
 80019be:	701a      	strb	r2, [r3, #0]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 80019c0:	1dfb      	adds	r3, r7, #7
 80019c2:	1dfa      	adds	r2, r7, #7
 80019c4:	7812      	ldrb	r2, [r2, #0]
 80019c6:	2101      	movs	r1, #1
 80019c8:	438a      	bics	r2, r1
 80019ca:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 80019cc:	1dfb      	adds	r3, r7, #7
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	0018      	movs	r0, r3
 80019d2:	f000 f81a 	bl	8001a0a <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80019d6:	2070      	movs	r0, #112	; 0x70
 80019d8:	f000 f88e 	bl	8001af8 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 80019dc:	f000 f89c 	bl	8001b18 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80019e0:	f000 f8b7 	bl	8001b52 <nRF24_FlushTX>

	nRF24_Delay(1);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff fee8 	bl	80017ba <nRF24_Delay>
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b003      	add	sp, #12
 80019f0:	bd90      	pop	{r4, r7, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	50000400 	.word	0x50000400

080019f8 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff ff19 	bl	8001834 <nRF24_ReadRegister>
 8001a02:	0003      	movs	r3, r0
}
 8001a04:	0018      	movs	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	0002      	movs	r2, r0
 8001a12:	1dfb      	adds	r3, r7, #7
 8001a14:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff ff5f 	bl	80018e0 <nRF24_WriteRegister>
}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b002      	add	sp, #8
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001a2a:	b5b0      	push	{r4, r5, r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	0002      	movs	r2, r0
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	701a      	strb	r2, [r3, #0]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001a36:	250f      	movs	r5, #15
 8001a38:	197c      	adds	r4, r7, r5
 8001a3a:	2006      	movs	r0, #6
 8001a3c:	f7ff fefa 	bl	8001834 <nRF24_ReadRegister>
 8001a40:	0003      	movs	r3, r0
 8001a42:	7023      	strb	r3, [r4, #0]
	rf_setup &= 0xF8; // Clear PWR bits
 8001a44:	0028      	movs	r0, r5
 8001a46:	183b      	adds	r3, r7, r0
 8001a48:	183a      	adds	r2, r7, r0
 8001a4a:	7812      	ldrb	r2, [r2, #0]
 8001a4c:	2107      	movs	r1, #7
 8001a4e:	438a      	bics	r2, r1
 8001a50:	701a      	strb	r2, [r3, #0]
	rf_setup |= (lev<<1);
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	b25a      	sxtb	r2, r3
 8001a5a:	183b      	adds	r3, r7, r0
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b25a      	sxtb	r2, r3
 8001a64:	183b      	adds	r3, r7, r0
 8001a66:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001a68:	183b      	adds	r3, r7, r0
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	2006      	movs	r0, #6
 8001a70:	f7ff ff36 	bl	80018e0 <nRF24_WriteRegister>
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b004      	add	sp, #16
 8001a7a:	bdb0      	pop	{r4, r5, r7, pc}

08001a7c <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8001a7c:	b5b0      	push	{r4, r5, r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	0002      	movs	r2, r0
 8001a84:	1dfb      	adds	r3, r7, #7
 8001a86:	701a      	strb	r2, [r3, #0]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001a88:	250f      	movs	r5, #15
 8001a8a:	197c      	adds	r4, r7, r5
 8001a8c:	2006      	movs	r0, #6
 8001a8e:	f7ff fed1 	bl	8001834 <nRF24_ReadRegister>
 8001a92:	0003      	movs	r3, r0
 8001a94:	7023      	strb	r3, [r4, #0]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8001a96:	0028      	movs	r0, r5
 8001a98:	183b      	adds	r3, r7, r0
 8001a9a:	183a      	adds	r2, r7, r0
 8001a9c:	7812      	ldrb	r2, [r2, #0]
 8001a9e:	2128      	movs	r1, #40	; 0x28
 8001aa0:	438a      	bics	r2, r1
 8001aa2:	701a      	strb	r2, [r3, #0]
	if(dr == NRF24_RF_DR_250KBPS)
 8001aa4:	1dfb      	adds	r3, r7, #7
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d106      	bne.n	8001aba <nRF24_SetDataRate+0x3e>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8001aac:	183b      	adds	r3, r7, r0
 8001aae:	183a      	adds	r2, r7, r0
 8001ab0:	7812      	ldrb	r2, [r2, #0]
 8001ab2:	2120      	movs	r1, #32
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	e00a      	b.n	8001ad0 <nRF24_SetDataRate+0x54>
	else if(dr == NRF24_RF_DR_2MBPS)
 8001aba:	1dfb      	adds	r3, r7, #7
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d106      	bne.n	8001ad0 <nRF24_SetDataRate+0x54>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	18bb      	adds	r3, r7, r2
 8001ac6:	18ba      	adds	r2, r7, r2
 8001ac8:	7812      	ldrb	r2, [r2, #0]
 8001aca:	2108      	movs	r1, #8
 8001acc:	430a      	orrs	r2, r1
 8001ace:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001ad0:	230f      	movs	r3, #15
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	2006      	movs	r0, #6
 8001ada:	f7ff ff01 	bl	80018e0 <nRF24_WriteRegister>
}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b004      	add	sp, #16
 8001ae4:	bdb0      	pop	{r4, r5, r7, pc}

08001ae6 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8001aea:	2007      	movs	r0, #7
 8001aec:	f7ff fea2 	bl	8001834 <nRF24_ReadRegister>
 8001af0:	0003      	movs	r3, r0
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	0002      	movs	r2, r0
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8001b04:	1dfb      	adds	r3, r7, #7
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	0019      	movs	r1, r3
 8001b0a:	2007      	movs	r0, #7
 8001b0c:	f7ff fee8 	bl	80018e0 <nRF24_WriteRegister>
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8001b1e:	1dfb      	adds	r3, r7, #7
 8001b20:	22e2      	movs	r2, #226	; 0xe2
 8001b22:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8001b24:	23a0      	movs	r3, #160	; 0xa0
 8001b26:	05db      	lsls	r3, r3, #23
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f001 fca7 	bl	8003480 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	2101      	movs	r1, #1
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff fe4c 	bl	80017d4 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001b3c:	23a0      	movs	r3, #160	; 0xa0
 8001b3e:	05db      	lsls	r3, r3, #23
 8001b40:	2201      	movs	r2, #1
 8001b42:	2102      	movs	r1, #2
 8001b44:	0018      	movs	r0, r3
 8001b46:	f001 fc9b 	bl	8003480 <HAL_GPIO_WritePin>
}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b002      	add	sp, #8
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8001b58:	1dfb      	adds	r3, r7, #7
 8001b5a:	22e1      	movs	r2, #225	; 0xe1
 8001b5c:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8001b5e:	23a0      	movs	r3, #160	; 0xa0
 8001b60:	05db      	lsls	r3, r3, #23
 8001b62:	2200      	movs	r2, #0
 8001b64:	2102      	movs	r1, #2
 8001b66:	0018      	movs	r0, r3
 8001b68:	f001 fc8a 	bl	8003480 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001b6c:	1dfb      	adds	r3, r7, #7
 8001b6e:	2101      	movs	r1, #1
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff fe2f 	bl	80017d4 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001b76:	23a0      	movs	r3, #160	; 0xa0
 8001b78:	05db      	lsls	r3, r3, #23
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f001 fc7e 	bl	8003480 <HAL_GPIO_WritePin>
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b002      	add	sp, #8
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8001b8c:	b5b0      	push	{r4, r5, r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	0002      	movs	r2, r0
 8001b94:	1dfb      	adds	r3, r7, #7
 8001b96:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8001b98:	250f      	movs	r5, #15
 8001b9a:	197c      	adds	r4, r7, r5
 8001b9c:	f7ff ff2c 	bl	80019f8 <nRF24_ReadConfig>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	7023      	strb	r3, [r4, #0]

	if(onoff)
 8001ba4:	1dfb      	adds	r3, r7, #7
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <nRF24_EnableCRC+0x2e>
		config |= (1<<NRF24_EN_CRC);
 8001bac:	197b      	adds	r3, r7, r5
 8001bae:	197a      	adds	r2, r7, r5
 8001bb0:	7812      	ldrb	r2, [r2, #0]
 8001bb2:	2108      	movs	r1, #8
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	e006      	b.n	8001bc8 <nRF24_EnableCRC+0x3c>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8001bba:	220f      	movs	r2, #15
 8001bbc:	18bb      	adds	r3, r7, r2
 8001bbe:	18ba      	adds	r2, r7, r2
 8001bc0:	7812      	ldrb	r2, [r2, #0]
 8001bc2:	2108      	movs	r1, #8
 8001bc4:	438a      	bics	r2, r1
 8001bc6:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 8001bc8:	230f      	movs	r3, #15
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f7ff ff1b 	bl	8001a0a <nRF24_WriteConfig>
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b004      	add	sp, #16
 8001bda:	bdb0      	pop	{r4, r5, r7, pc}

08001bdc <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	0002      	movs	r2, r0
 8001be4:	1dfb      	adds	r3, r7, #7
 8001be6:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8001be8:	250f      	movs	r5, #15
 8001bea:	197c      	adds	r4, r7, r5
 8001bec:	f7ff ff04 	bl	80019f8 <nRF24_ReadConfig>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	7023      	strb	r3, [r4, #0]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8001bf4:	1dfb      	adds	r3, r7, #7
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d106      	bne.n	8001c0a <nRF24_SetCRCLength+0x2e>
		config |= (1<<NRF24_CRCO);
 8001bfc:	197b      	adds	r3, r7, r5
 8001bfe:	197a      	adds	r2, r7, r5
 8001c00:	7812      	ldrb	r2, [r2, #0]
 8001c02:	2104      	movs	r1, #4
 8001c04:	430a      	orrs	r2, r1
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	e006      	b.n	8001c18 <nRF24_SetCRCLength+0x3c>
	else
		config &= ~(1<<NRF24_CRCO);
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	18bb      	adds	r3, r7, r2
 8001c0e:	18ba      	adds	r2, r7, r2
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	2104      	movs	r1, #4
 8001c14:	438a      	bics	r2, r1
 8001c16:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 8001c18:	230f      	movs	r3, #15
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f7ff fef3 	bl	8001a0a <nRF24_WriteConfig>
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b004      	add	sp, #16
 8001c2a:	bdb0      	pop	{r4, r5, r7, pc}

08001c2c <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	0002      	movs	r2, r0
 8001c34:	1dfb      	adds	r3, r7, #7
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	1dbb      	adds	r3, r7, #6
 8001c3a:	1c0a      	adds	r2, r1, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	b25a      	sxtb	r2, r3
 8001c46:	1dbb      	adds	r3, r7, #6
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	b25b      	sxtb	r3, r3
 8001c4c:	210f      	movs	r1, #15
 8001c4e:	400b      	ands	r3, r1
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b25b      	sxtb	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	0019      	movs	r1, r3
 8001c5a:	2004      	movs	r0, #4
 8001c5c:	f7ff fe40 	bl	80018e0 <nRF24_WriteRegister>
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b002      	add	sp, #8
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	0002      	movs	r2, r0
 8001c70:	1dfb      	adds	r3, r7, #7
 8001c72:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8001c74:	1dfb      	adds	r3, r7, #7
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	227f      	movs	r2, #127	; 0x7f
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	0019      	movs	r1, r3
 8001c80:	2005      	movs	r0, #5
 8001c82:	f7ff fe2d 	bl	80018e0 <nRF24_WriteRegister>
}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b002      	add	sp, #8
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	0002      	movs	r2, r0
 8001c96:	1dfb      	adds	r3, r7, #7
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	1dbb      	adds	r3, r7, #6
 8001c9c:	1c0a      	adds	r2, r1, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
	if(pipe > 5)
 8001ca0:	1dfb      	adds	r3, r7, #7
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b05      	cmp	r3, #5
 8001ca6:	d902      	bls.n	8001cae <nRF24_SetPayloadSize+0x20>
		pipe = 5; // Block too high pipe number
 8001ca8:	1dfb      	adds	r3, r7, #7
 8001caa:	2205      	movs	r2, #5
 8001cac:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	3311      	adds	r3, #17
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	1dbb      	adds	r3, r7, #6
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	213f      	movs	r1, #63	; 0x3f
 8001cbc:	400b      	ands	r3, r1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	0010      	movs	r0, r2
 8001cc4:	f7ff fe0c 	bl	80018e0 <nRF24_WriteRegister>
}
 8001cc8:	46c0      	nop			; (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b002      	add	sp, #8
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8001cd0:	b5b0      	push	{r4, r5, r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	1dfb      	adds	r3, r7, #7
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	1dbb      	adds	r3, r7, #6
 8001cde:	1c0a      	adds	r2, r1, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
	if(pipe > 5)
 8001ce2:	1dfb      	adds	r3, r7, #7
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	d902      	bls.n	8001cf0 <nRF24_EnablePipe+0x20>
		pipe = 5; // Block too high pipe number
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	2205      	movs	r2, #5
 8001cee:	701a      	strb	r2, [r3, #0]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8001cf0:	250f      	movs	r5, #15
 8001cf2:	197c      	adds	r4, r7, r5
 8001cf4:	2002      	movs	r0, #2
 8001cf6:	f7ff fd9d 	bl	8001834 <nRF24_ReadRegister>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	7023      	strb	r3, [r4, #0]
	if(onoff == 1)
 8001cfe:	1dbb      	adds	r3, r7, #6
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d10d      	bne.n	8001d22 <nRF24_EnablePipe+0x52>
		enable_pipe |= (1<<pipe);
 8001d06:	1dfb      	adds	r3, r7, #7
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	0013      	movs	r3, r2
 8001d10:	b25a      	sxtb	r2, r3
 8001d12:	197b      	adds	r3, r7, r5
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b25a      	sxtb	r2, r3
 8001d1c:	197b      	adds	r3, r7, r5
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	e00f      	b.n	8001d42 <nRF24_EnablePipe+0x72>
	else
		enable_pipe &= ~(1<<pipe);
 8001d22:	1dfb      	adds	r3, r7, #7
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2201      	movs	r2, #1
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	0013      	movs	r3, r2
 8001d2c:	b25b      	sxtb	r3, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	b25b      	sxtb	r3, r3
 8001d32:	210f      	movs	r1, #15
 8001d34:	187a      	adds	r2, r7, r1
 8001d36:	7812      	ldrb	r2, [r2, #0]
 8001d38:	b252      	sxtb	r2, r2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	b25a      	sxtb	r2, r3
 8001d3e:	187b      	adds	r3, r7, r1
 8001d40:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8001d42:	230f      	movs	r3, #15
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	0019      	movs	r1, r3
 8001d4a:	2002      	movs	r0, #2
 8001d4c:	f7ff fdc8 	bl	80018e0 <nRF24_WriteRegister>
}
 8001d50:	46c0      	nop			; (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b004      	add	sp, #16
 8001d56:	bdb0      	pop	{r4, r5, r7, pc}

08001d58 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	0002      	movs	r2, r0
 8001d60:	1dfb      	adds	r3, r7, #7
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	1dbb      	adds	r3, r7, #6
 8001d66:	1c0a      	adds	r2, r1, #0
 8001d68:	701a      	strb	r2, [r3, #0]
	if(pipe > 5)
 8001d6a:	1dfb      	adds	r3, r7, #7
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d902      	bls.n	8001d78 <nRF24_AutoACK+0x20>
		pipe = 5; // Block too high pipe number
 8001d72:	1dfb      	adds	r3, r7, #7
 8001d74:	2205      	movs	r2, #5
 8001d76:	701a      	strb	r2, [r3, #0]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8001d78:	250f      	movs	r5, #15
 8001d7a:	197c      	adds	r4, r7, r5
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff fd59 	bl	8001834 <nRF24_ReadRegister>
 8001d82:	0003      	movs	r3, r0
 8001d84:	7023      	strb	r3, [r4, #0]
	if(onoff == 1)
 8001d86:	1dbb      	adds	r3, r7, #6
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d10d      	bne.n	8001daa <nRF24_AutoACK+0x52>
		enaa |= (1<<pipe);
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2201      	movs	r2, #1
 8001d94:	409a      	lsls	r2, r3
 8001d96:	0013      	movs	r3, r2
 8001d98:	b25a      	sxtb	r2, r3
 8001d9a:	197b      	adds	r3, r7, r5
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b25b      	sxtb	r3, r3
 8001da0:	4313      	orrs	r3, r2
 8001da2:	b25a      	sxtb	r2, r3
 8001da4:	197b      	adds	r3, r7, r5
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e00f      	b.n	8001dca <nRF24_AutoACK+0x72>
	else
		enaa &= ~(1<<pipe);
 8001daa:	1dfb      	adds	r3, r7, #7
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2201      	movs	r2, #1
 8001db0:	409a      	lsls	r2, r3
 8001db2:	0013      	movs	r3, r2
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	b25b      	sxtb	r3, r3
 8001dba:	210f      	movs	r1, #15
 8001dbc:	187a      	adds	r2, r7, r1
 8001dbe:	7812      	ldrb	r2, [r2, #0]
 8001dc0:	b252      	sxtb	r2, r2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	b25a      	sxtb	r2, r3
 8001dc6:	187b      	adds	r3, r7, r1
 8001dc8:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8001dca:	230f      	movs	r3, #15
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f7ff fd84 	bl	80018e0 <nRF24_WriteRegister>
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b004      	add	sp, #16
 8001dde:	bdb0      	pop	{r4, r5, r7, pc}

08001de0 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	0002      	movs	r2, r0
 8001de8:	1dfb      	adds	r3, r7, #7
 8001dea:	701a      	strb	r2, [r3, #0]
	if(size > 5)
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d902      	bls.n	8001dfa <nRF24_SetAddressWidth+0x1a>
		size = 5; // Maximum are 5 bytes
 8001df4:	1dfb      	adds	r3, r7, #7
 8001df6:	2205      	movs	r2, #5
 8001df8:	701a      	strb	r2, [r3, #0]
	if(size < 3)
 8001dfa:	1dfb      	adds	r3, r7, #7
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d802      	bhi.n	8001e08 <nRF24_SetAddressWidth+0x28>
		size = 3; // Minimum are 3 bytes
 8001e02:	1dfb      	adds	r3, r7, #7
 8001e04:	2203      	movs	r2, #3
 8001e06:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8001e08:	1dfb      	adds	r3, r7, #7
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	3b02      	subs	r3, #2
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2203      	movs	r2, #3
 8001e12:	4013      	ands	r3, r2
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	0019      	movs	r1, r3
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f7ff fd61 	bl	80018e0 <nRF24_WriteRegister>
}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b002      	add	sp, #8
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	6039      	str	r1, [r7, #0]
 8001e30:	1dfb      	adds	r3, r7, #7
 8001e32:	701a      	strb	r2, [r3, #0]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8001e34:	1dfb      	adds	r3, r7, #7
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <nRF24_SetRXAddress+0x1e>
 8001e3c:	1dfb      	adds	r3, r7, #7
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d126      	bne.n	8001e92 <nRF24_SetRXAddress+0x6c>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001e44:	230f      	movs	r3, #15
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	e011      	b.n	8001e72 <nRF24_SetRXAddress+0x4c>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001e4e:	200f      	movs	r0, #15
 8001e50:	183b      	adds	r3, r7, r0
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	18d2      	adds	r2, r2, r3
 8001e58:	183b      	adds	r3, r7, r0
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	1acb      	subs	r3, r1, r3
 8001e60:	7811      	ldrb	r1, [r2, #0]
 8001e62:	220c      	movs	r2, #12
 8001e64:	18ba      	adds	r2, r7, r2
 8001e66:	54d1      	strb	r1, [r2, r3]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001e68:	183b      	adds	r3, r7, r0
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	183b      	adds	r3, r7, r0
 8001e6e:	3201      	adds	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	230f      	movs	r3, #15
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d9e8      	bls.n	8001e4e <nRF24_SetRXAddress+0x28>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8001e7c:	1dfb      	adds	r3, r7, #7
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	330a      	adds	r3, #10
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	220c      	movs	r2, #12
 8001e86:	18b9      	adds	r1, r7, r2
 8001e88:	2203      	movs	r2, #3
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f7ff fd54 	bl	8001938 <nRF24_WriteRegisters>
	{
 8001e90:	e00b      	b.n	8001eaa <nRF24_SetRXAddress+0x84>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001e92:	1dfb      	adds	r3, r7, #7
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	330a      	adds	r3, #10
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	0010      	movs	r0, r2
 8001ea4:	f7ff fd1c 	bl	80018e0 <nRF24_WriteRegister>
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b004      	add	sp, #16
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8001ebc:	230c      	movs	r3, #12
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	200a      	movs	r0, #10
 8001ec6:	f7ff fcde 	bl	8001886 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001eca:	230f      	movs	r3, #15
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
 8001ed2:	e010      	b.n	8001ef6 <nRF24_SetTXAddress+0x42>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001ed4:	200f      	movs	r0, #15
 8001ed6:	183b      	adds	r3, r7, r0
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	183b      	adds	r3, r7, r0
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2102      	movs	r1, #2
 8001ee0:	1acb      	subs	r3, r1, r3
 8001ee2:	210c      	movs	r1, #12
 8001ee4:	1879      	adds	r1, r7, r1
 8001ee6:	5c89      	ldrb	r1, [r1, r2]
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	; (8001f58 <nRF24_SetTXAddress+0xa4>)
 8001eea:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001eec:	183b      	adds	r3, r7, r0
 8001eee:	781a      	ldrb	r2, [r3, #0]
 8001ef0:	183b      	adds	r3, r7, r0
 8001ef2:	3201      	adds	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	220f      	movs	r2, #15
 8001ef8:	18bb      	adds	r3, r7, r2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d9e9      	bls.n	8001ed4 <nRF24_SetTXAddress+0x20>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001f00:	18bb      	adds	r3, r7, r2
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	e011      	b.n	8001f2c <nRF24_SetTXAddress+0x78>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001f08:	200f      	movs	r0, #15
 8001f0a:	183b      	adds	r3, r7, r0
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	18d2      	adds	r2, r2, r3
 8001f12:	183b      	adds	r3, r7, r0
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2102      	movs	r1, #2
 8001f18:	1acb      	subs	r3, r1, r3
 8001f1a:	7811      	ldrb	r1, [r2, #0]
 8001f1c:	220c      	movs	r2, #12
 8001f1e:	18ba      	adds	r2, r7, r2
 8001f20:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001f22:	183b      	adds	r3, r7, r0
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	183b      	adds	r3, r7, r0
 8001f28:	3201      	adds	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
 8001f2c:	230f      	movs	r3, #15
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d9e8      	bls.n	8001f08 <nRF24_SetTXAddress+0x54>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001f36:	240c      	movs	r4, #12
 8001f38:	193b      	adds	r3, r7, r4
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	200a      	movs	r0, #10
 8001f40:	f7ff fcfa 	bl	8001938 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8001f44:	193b      	adds	r3, r7, r4
 8001f46:	2203      	movs	r2, #3
 8001f48:	0019      	movs	r1, r3
 8001f4a:	2010      	movs	r0, #16
 8001f4c:	f7ff fcf4 	bl	8001938 <nRF24_WriteRegisters>

}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b005      	add	sp, #20
 8001f56:	bd90      	pop	{r4, r7, pc}
 8001f58:	20000374 	.word	0x20000374

08001f5c <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8001f62:	1dfc      	adds	r4, r7, #7
 8001f64:	f7ff fdbf 	bl	8001ae6 <nRF24_ReadStatus>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	7023      	strb	r3, [r4, #0]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8001f6c:	1dfb      	adds	r3, r7, #7
 8001f6e:	1dfa      	adds	r2, r7, #7
 8001f70:	7812      	ldrb	r2, [r2, #0]
 8001f72:	2170      	movs	r1, #112	; 0x70
 8001f74:	430a      	orrs	r2, r1
 8001f76:	701a      	strb	r2, [r3, #0]
	nRF24_WriteStatus(status);
 8001f78:	1dfb      	adds	r3, r7, #7
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7ff fdbb 	bl	8001af8 <nRF24_WriteStatus>
}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b003      	add	sp, #12
 8001f88:	bd90      	pop	{r4, r7, pc}

08001f8a <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8001f8a:	b5b0      	push	{r4, r5, r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	0002      	movs	r2, r0
 8001f92:	1dfb      	adds	r3, r7, #7
 8001f94:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8001f96:	250f      	movs	r5, #15
 8001f98:	197c      	adds	r4, r7, r5
 8001f9a:	f7ff fd2d 	bl	80019f8 <nRF24_ReadConfig>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <nRF24_EnableRXDataReadyIRQ+0x2e>
		config |= (1<<NRF24_RX_DR);
 8001faa:	197b      	adds	r3, r7, r5
 8001fac:	197a      	adds	r2, r7, r5
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	2140      	movs	r1, #64	; 0x40
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e006      	b.n	8001fc6 <nRF24_EnableRXDataReadyIRQ+0x3c>
	else
		config &= ~(1<<NRF24_RX_DR);
 8001fb8:	220f      	movs	r2, #15
 8001fba:	18bb      	adds	r3, r7, r2
 8001fbc:	18ba      	adds	r2, r7, r2
 8001fbe:	7812      	ldrb	r2, [r2, #0]
 8001fc0:	2140      	movs	r1, #64	; 0x40
 8001fc2:	438a      	bics	r2, r1
 8001fc4:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 8001fc6:	230f      	movs	r3, #15
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7ff fd1c 	bl	8001a0a <nRF24_WriteConfig>
}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b004      	add	sp, #16
 8001fd8:	bdb0      	pop	{r4, r5, r7, pc}

08001fda <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001fda:	b5b0      	push	{r4, r5, r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	1dfb      	adds	r3, r7, #7
 8001fe4:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8001fe6:	250f      	movs	r5, #15
 8001fe8:	197c      	adds	r4, r7, r5
 8001fea:	f7ff fd05 	bl	80019f8 <nRF24_ReadConfig>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 8001ff2:	1dfb      	adds	r3, r7, #7
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <nRF24_EnableTXDataSentIRQ+0x2e>
		config |= (1<<NRF24_TX_DS);
 8001ffa:	197b      	adds	r3, r7, r5
 8001ffc:	197a      	adds	r2, r7, r5
 8001ffe:	7812      	ldrb	r2, [r2, #0]
 8002000:	2120      	movs	r1, #32
 8002002:	430a      	orrs	r2, r1
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	e006      	b.n	8002016 <nRF24_EnableTXDataSentIRQ+0x3c>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002008:	220f      	movs	r2, #15
 800200a:	18bb      	adds	r3, r7, r2
 800200c:	18ba      	adds	r2, r7, r2
 800200e:	7812      	ldrb	r2, [r2, #0]
 8002010:	2120      	movs	r1, #32
 8002012:	438a      	bics	r2, r1
 8002014:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 8002016:	230f      	movs	r3, #15
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff fcf4 	bl	8001a0a <nRF24_WriteConfig>
}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	b004      	add	sp, #16
 8002028:	bdb0      	pop	{r4, r5, r7, pc}

0800202a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800202a:	b5b0      	push	{r4, r5, r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	0002      	movs	r2, r0
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8002036:	250f      	movs	r5, #15
 8002038:	197c      	adds	r4, r7, r5
 800203a:	f7ff fcdd 	bl	80019f8 <nRF24_ReadConfig>
 800203e:	0003      	movs	r3, r0
 8002040:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 8002042:	1dfb      	adds	r3, r7, #7
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d106      	bne.n	8002058 <nRF24_EnableMaxRetransmitIRQ+0x2e>
		config |= (1<<NRF24_MAX_RT);
 800204a:	197b      	adds	r3, r7, r5
 800204c:	197a      	adds	r2, r7, r5
 800204e:	7812      	ldrb	r2, [r2, #0]
 8002050:	2110      	movs	r1, #16
 8002052:	430a      	orrs	r2, r1
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e006      	b.n	8002066 <nRF24_EnableMaxRetransmitIRQ+0x3c>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8002058:	220f      	movs	r2, #15
 800205a:	18bb      	adds	r3, r7, r2
 800205c:	18ba      	adds	r2, r7, r2
 800205e:	7812      	ldrb	r2, [r2, #0]
 8002060:	2110      	movs	r1, #16
 8002062:	438a      	bics	r2, r1
 8002064:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 8002066:	230f      	movs	r3, #15
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	0018      	movs	r0, r3
 800206e:	f7ff fccc 	bl	8001a0a <nRF24_WriteConfig>
}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	46bd      	mov	sp, r7
 8002076:	b004      	add	sp, #16
 8002078:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800207c <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <nRF24_Init+0xa4>)
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	601a      	str	r2, [r3, #0]

	NRF24_CE_LOW;
 800208a:	4b26      	ldr	r3, [pc, #152]	; (8002124 <nRF24_Init+0xa8>)
 800208c:	2200      	movs	r2, #0
 800208e:	2110      	movs	r1, #16
 8002090:	0018      	movs	r0, r3
 8002092:	f001 f9f5 	bl	8003480 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8002096:	23a0      	movs	r3, #160	; 0xa0
 8002098:	05db      	lsls	r3, r3, #23
 800209a:	2201      	movs	r2, #1
 800209c:	2102      	movs	r1, #2
 800209e:	0018      	movs	r0, r3
 80020a0:	f001 f9ee 	bl	8003480 <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 80020a4:	2005      	movs	r0, #5
 80020a6:	f7ff fb88 	bl	80017ba <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80020aa:	2003      	movs	r0, #3
 80020ac:	f7ff fcbd 	bl	8001a2a <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 80020b0:	2002      	movs	r0, #2
 80020b2:	f7ff fce3 	bl	8001a7c <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80020b6:	2001      	movs	r0, #1
 80020b8:	f7ff fd68 	bl	8001b8c <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80020bc:	2000      	movs	r0, #0
 80020be:	f7ff fd8d 	bl	8001bdc <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 80020c2:	2107      	movs	r1, #7
 80020c4:	2004      	movs	r0, #4
 80020c6:	f7ff fdb1 	bl	8001c2c <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 80020ca:	2100      	movs	r1, #0
 80020cc:	201c      	movs	r0, #28
 80020ce:	f7ff fc07 	bl	80018e0 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 80020d2:	200a      	movs	r0, #10
 80020d4:	f7ff fdc8 	bl	8001c68 <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 80020d8:	2101      	movs	r1, #1
 80020da:	2000      	movs	r0, #0
 80020dc:	f7ff fdd7 	bl	8001c8e <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80020e0:	2101      	movs	r1, #1
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff fdf4 	bl	8001cd0 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80020e8:	2101      	movs	r1, #1
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7ff fe34 	bl	8001d58 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80020f0:	2003      	movs	r0, #3
 80020f2:	f7ff fe75 	bl	8001de0 <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 80020f6:	2014      	movs	r0, #20
 80020f8:	f7ff fb5f 	bl	80017ba <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff ff44 	bl	8001f8a <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002102:	2000      	movs	r0, #0
 8002104:	f7ff ff69 	bl	8001fda <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8002108:	2000      	movs	r0, #0
 800210a:	f7ff ff8e 	bl	800202a <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 800210e:	2014      	movs	r0, #20
 8002110:	f7ff fb53 	bl	80017ba <nRF24_Delay>

	nRF24_ClearInterrupts();
 8002114:	f7ff ff22 	bl	8001f5c <nRF24_ClearInterrupts>
}
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b002      	add	sp, #8
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000370 	.word	0x20000370
 8002124:	50000400 	.word	0x50000400

08002128 <do_state_init>:

typedef state_t state_func_t( instance_data_t *data );


// State functions
state_t do_state_init( instance_data_t *data ) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
    printf("state init\n");
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <do_state_init+0x1c>)
 8002132:	0018      	movs	r0, r3
 8002134:	f005 fbc0 	bl	80078b8 <puts>

    // SENSOR INIT?

    return STATE_STANDBY;
 8002138:	2301      	movs	r3, #1

}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b002      	add	sp, #8
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	080086c0 	.word	0x080086c0

08002148 <do_state_standby>:

state_t do_state_standby( instance_data_t *data ) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

    printf("state standby\n");
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <do_state_standby+0x1c>)
 8002152:	0018      	movs	r0, r3
 8002154:	f005 fbb0 	bl	80078b8 <puts>
        if( temperature < 10 )
            return STATE_RESCUE;

    }
    */
    return STATE_RESCUE;
 8002158:	2302      	movs	r3, #2
}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	080086cc 	.word	0x080086cc

08002168 <do_state_rescue>:

state_t do_state_rescue( instance_data_t *data ) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
    printf("state rescue\n");
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <do_state_rescue+0x1c>)
 8002172:	0018      	movs	r0, r3
 8002174:	f005 fba0 	bl	80078b8 <puts>
    // Low freq LED
    // Pulse read, pulsoximeter read? Time measurement, send SOS using NRF
    // If low pulse and low temperature go to EMERGENCY
    // If button held go to STANDBY

    return STATE_EMERGENCY;
 8002178:	2303      	movs	r3, #3
}
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b002      	add	sp, #8
 8002180:	bd80      	pop	{r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	080086dc 	.word	0x080086dc

08002188 <do_state_emergency>:

state_t do_state_emergency( instance_data_t *data ) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
    // High freq LED
    // Activate Petlier
    // Try to send SOS over NRF
    // If button held goto STANDBY

    printf("state emergency\n");
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <do_state_emergency+0x1c>)
 8002192:	0018      	movs	r0, r3
 8002194:	f005 fb90 	bl	80078b8 <puts>
    return STATE_INIT;
 8002198:	2300      	movs	r3, #0
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b002      	add	sp, #8
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	080086ec 	.word	0x080086ec

080021a8 <do_state_test>:

state_t do_state_test( instance_data_t *data ) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
    // Simulation of other stated without GPS and Petlie
    // Low freq led?
    // If button held go to STANDBY
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	0018      	movs	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b002      	add	sp, #8
 80021b8:	bd80      	pop	{r7, pc}

080021ba <do_state_error>:

state_t do_state_error( instance_data_t *data ) {
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
    // Constant LED
    // printf("state error");
    // Maybe something will come up later...
//    printf()
//    while
}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b002      	add	sp, #8
 80021ca:	bd80      	pop	{r7, pc}

080021cc <run_state>:
    do_state_emergency,
    do_state_test,
    do_state_error,
};

state_t run_state( state_t current_state, instance_data_t *data ) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	0002      	movs	r2, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	701a      	strb	r2, [r3, #0]
    return state_table[ current_state ](data);
 80021da:	1dfb      	adds	r3, r7, #7
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <run_state+0x28>)
 80021e0:	0092      	lsls	r2, r2, #2
 80021e2:	58d3      	ldr	r3, [r2, r3]
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	0010      	movs	r0, r2
 80021e8:	4798      	blx	r3
 80021ea:	0003      	movs	r3, r0
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b002      	add	sp, #8
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	0800877c 	.word	0x0800877c

080021f8 <pv_run>:


// Main loop
void pv_run() {
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0

    state_t current_state = STATE_INIT;
 80021fe:	1dfb      	adds	r3, r7, #7
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
    instance_data_t data = { NULL };
 8002204:	2300      	movs	r3, #0
 8002206:	603b      	str	r3, [r7, #0]
    while( 1 ) {
        current_state = run_state( current_state, &data );
 8002208:	1dfc      	adds	r4, r7, #7
 800220a:	003a      	movs	r2, r7
 800220c:	1dfb      	adds	r3, r7, #7
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	0011      	movs	r1, r2
 8002212:	0018      	movs	r0, r3
 8002214:	f7ff ffda 	bl	80021cc <run_state>
 8002218:	0003      	movs	r3, r0
 800221a:	7023      	strb	r3, [r4, #0]
 800221c:	e7f4      	b.n	8002208 <pv_run+0x10>
	...

08002220 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MX_SPI1_Init+0x68>)
 8002226:	4a19      	ldr	r2, [pc, #100]	; (800228c <MX_SPI1_Init+0x6c>)
 8002228:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_SPI1_Init+0x68>)
 800222c:	2282      	movs	r2, #130	; 0x82
 800222e:	0052      	lsls	r2, r2, #1
 8002230:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <MX_SPI1_Init+0x68>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <MX_SPI1_Init+0x68>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <MX_SPI1_Init+0x68>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <MX_SPI1_Init+0x68>)
 8002246:	2200      	movs	r2, #0
 8002248:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_SPI1_Init+0x68>)
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <MX_SPI1_Init+0x68>)
 8002254:	2200      	movs	r2, #0
 8002256:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <MX_SPI1_Init+0x68>)
 800225a:	2200      	movs	r2, #0
 800225c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <MX_SPI1_Init+0x68>)
 8002260:	2200      	movs	r2, #0
 8002262:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <MX_SPI1_Init+0x68>)
 8002266:	2200      	movs	r2, #0
 8002268:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800226a:	4b07      	ldr	r3, [pc, #28]	; (8002288 <MX_SPI1_Init+0x68>)
 800226c:	2207      	movs	r2, #7
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <MX_SPI1_Init+0x68>)
 8002272:	0018      	movs	r0, r3
 8002274:	f002 fe26 	bl	8004ec4 <HAL_SPI_Init>
 8002278:	1e03      	subs	r3, r0, #0
 800227a:	d001      	beq.n	8002280 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800227c:	f7ff fa98 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	20000378 	.word	0x20000378
 800228c:	40013000 	.word	0x40013000

08002290 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	240c      	movs	r4, #12
 800229a:	193b      	adds	r3, r7, r4
 800229c:	0018      	movs	r0, r3
 800229e:	2314      	movs	r3, #20
 80022a0:	001a      	movs	r2, r3
 80022a2:	2100      	movs	r1, #0
 80022a4:	f005 fc04 	bl	8007ab0 <memset>
  if(spiHandle->Instance==SPI1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_SPI_MspInit+0x80>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d129      	bne.n	8002306 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_SPI_MspInit+0x84>)
 80022b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_SPI_MspInit+0x84>)
 80022b8:	2180      	movs	r1, #128	; 0x80
 80022ba:	0149      	lsls	r1, r1, #5
 80022bc:	430a      	orrs	r2, r1
 80022be:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c0:	4b14      	ldr	r3, [pc, #80]	; (8002314 <HAL_SPI_MspInit+0x84>)
 80022c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c4:	4b13      	ldr	r3, [pc, #76]	; (8002314 <HAL_SPI_MspInit+0x84>)
 80022c6:	2101      	movs	r1, #1
 80022c8:	430a      	orrs	r2, r1
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_SPI_MspInit+0x84>)
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	2201      	movs	r2, #1
 80022d2:	4013      	ands	r3, r2
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022d8:	0021      	movs	r1, r4
 80022da:	187b      	adds	r3, r7, r1
 80022dc:	22e0      	movs	r2, #224	; 0xe0
 80022de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	187b      	adds	r3, r7, r1
 80022e2:	2202      	movs	r2, #2
 80022e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	187b      	adds	r3, r7, r1
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	2203      	movs	r2, #3
 80022f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80022f2:	187b      	adds	r3, r7, r1
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	187a      	adds	r2, r7, r1
 80022fa:	23a0      	movs	r3, #160	; 0xa0
 80022fc:	05db      	lsls	r3, r3, #23
 80022fe:	0011      	movs	r1, r2
 8002300:	0018      	movs	r0, r3
 8002302:	f000 ff3f 	bl	8003184 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	46bd      	mov	sp, r7
 800230a:	b009      	add	sp, #36	; 0x24
 800230c:	bd90      	pop	{r4, r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	40013000 	.word	0x40013000
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231c:	4b07      	ldr	r3, [pc, #28]	; (800233c <HAL_MspInit+0x24>)
 800231e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_MspInit+0x24>)
 8002322:	2101      	movs	r1, #1
 8002324:	430a      	orrs	r2, r1
 8002326:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <HAL_MspInit+0x24>)
 800232a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_MspInit+0x24>)
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	0549      	lsls	r1, r1, #21
 8002332:	430a      	orrs	r2, r1
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000

08002340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002344:	e7fe      	b.n	8002344 <NMI_Handler+0x4>

08002346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234a:	e7fe      	b.n	800234a <HardFault_Handler+0x4>

0800234c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002364:	f000 fa28 	bl	80027b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002368:	46c0      	nop			; (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8002372:	2020      	movs	r0, #32
 8002374:	f001 f8a2 	bl	80034bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <DMA1_Channel1_IRQHandler+0x14>)
 8002386:	0018      	movs	r0, r3
 8002388:	f000 fe4d 	bl	8003026 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	200000e4 	.word	0x200000e4

08002398 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <TIM6_IRQHandler+0x14>)
 800239e:	0018      	movs	r0, r3
 80023a0:	f003 fc4c 	bl	8005c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	200003d4 	.word	0x200003d4

080023b0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <LPUART1_IRQHandler+0x14>)
 80023b6:	0018      	movs	r0, r3
 80023b8:	f003 feb6 	bl	8006128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	20000414 	.word	0x20000414

080023c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	e00a      	b.n	80023f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023da:	e000      	b.n	80023de <_read+0x16>
 80023dc:	bf00      	nop
 80023de:	0001      	movs	r1, r0
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	60ba      	str	r2, [r7, #8]
 80023e6:	b2ca      	uxtb	r2, r1
 80023e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dbf0      	blt.n	80023da <_read+0x12>
  }

  return len;
 80023f8:	687b      	ldr	r3, [r7, #4]
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b006      	add	sp, #24
 8002400:	bd80      	pop	{r7, pc}

08002402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	e009      	b.n	8002428 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	60ba      	str	r2, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	0018      	movs	r0, r3
 800241e:	e000      	b.n	8002422 <_write+0x20>
 8002420:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3301      	adds	r3, #1
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	dbf1      	blt.n	8002414 <_write+0x12>
  }
  return len;
 8002430:	687b      	ldr	r3, [r7, #4]
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b006      	add	sp, #24
 8002438:	bd80      	pop	{r7, pc}

0800243a <_close>:

int _close(int file)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002442:	2301      	movs	r3, #1
 8002444:	425b      	negs	r3, r3
}
 8002446:	0018      	movs	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	b002      	add	sp, #8
 800244c:	bd80      	pop	{r7, pc}

0800244e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	0192      	lsls	r2, r2, #6
 800245e:	605a      	str	r2, [r3, #4]
  return 0;
 8002460:	2300      	movs	r3, #0
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b002      	add	sp, #8
 8002468:	bd80      	pop	{r7, pc}

0800246a <_isatty>:

int _isatty(int file)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002472:	2301      	movs	r3, #1
}
 8002474:	0018      	movs	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	b002      	add	sp, #8
 800247a:	bd80      	pop	{r7, pc}

0800247c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002488:	2300      	movs	r3, #0
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b004      	add	sp, #16
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <_sbrk+0x5c>)
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <_sbrk+0x60>)
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <_sbrk+0x64>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <_sbrk+0x64>)
 80024b2:	4a12      	ldr	r2, [pc, #72]	; (80024fc <_sbrk+0x68>)
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <_sbrk+0x64>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	18d3      	adds	r3, r2, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d207      	bcs.n	80024d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c4:	f005 fb4a 	bl	8007b5c <__errno>
 80024c8:	0003      	movs	r3, r0
 80024ca:	220c      	movs	r2, #12
 80024cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	425b      	negs	r3, r3
 80024d2:	e009      	b.n	80024e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <_sbrk+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024da:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <_sbrk+0x64>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	18d2      	adds	r2, r2, r3
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <_sbrk+0x64>)
 80024e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80024e6:	68fb      	ldr	r3, [r7, #12]
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b006      	add	sp, #24
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20005000 	.word	0x20005000
 80024f4:	00000400 	.word	0x00000400
 80024f8:	200003d0 	.word	0x200003d0
 80024fc:	200005f0 	.word	0x200005f0

08002500 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002504:	46c0      	nop			; (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002512:	003b      	movs	r3, r7
 8002514:	0018      	movs	r0, r3
 8002516:	2308      	movs	r3, #8
 8002518:	001a      	movs	r2, r3
 800251a:	2100      	movs	r1, #0
 800251c:	f005 fac8 	bl	8007ab0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002520:	4b15      	ldr	r3, [pc, #84]	; (8002578 <MX_TIM6_Init+0x6c>)
 8002522:	4a16      	ldr	r2, [pc, #88]	; (800257c <MX_TIM6_Init+0x70>)
 8002524:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 8002526:	4b14      	ldr	r3, [pc, #80]	; (8002578 <MX_TIM6_Init+0x6c>)
 8002528:	4a15      	ldr	r2, [pc, #84]	; (8002580 <MX_TIM6_Init+0x74>)
 800252a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <MX_TIM6_Init+0x6c>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <MX_TIM6_Init+0x6c>)
 8002534:	4a13      	ldr	r2, [pc, #76]	; (8002584 <MX_TIM6_Init+0x78>)
 8002536:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <MX_TIM6_Init+0x6c>)
 800253a:	2200      	movs	r2, #0
 800253c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_TIM6_Init+0x6c>)
 8002540:	0018      	movs	r0, r3
 8002542:	f003 fae9 	bl	8005b18 <HAL_TIM_Base_Init>
 8002546:	1e03      	subs	r3, r0, #0
 8002548:	d001      	beq.n	800254e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800254a:	f7ff f931 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254e:	003b      	movs	r3, r7
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002554:	003b      	movs	r3, r7
 8002556:	2200      	movs	r2, #0
 8002558:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800255a:	003a      	movs	r2, r7
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <MX_TIM6_Init+0x6c>)
 800255e:	0011      	movs	r1, r2
 8002560:	0018      	movs	r0, r3
 8002562:	f003 fcd1 	bl	8005f08 <HAL_TIMEx_MasterConfigSynchronization>
 8002566:	1e03      	subs	r3, r0, #0
 8002568:	d001      	beq.n	800256e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800256a:	f7ff f921 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b002      	add	sp, #8
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	200003d4 	.word	0x200003d4
 800257c:	40001000 	.word	0x40001000
 8002580:	00000c7f 	.word	0x00000c7f
 8002584:	0000270f 	.word	0x0000270f

08002588 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <HAL_TIM_Base_MspInit+0x38>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d10d      	bne.n	80025b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_TIM_Base_MspInit+0x3c>)
 800259c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_TIM_Base_MspInit+0x3c>)
 80025a0:	2110      	movs	r1, #16
 80025a2:	430a      	orrs	r2, r1
 80025a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	2011      	movs	r0, #17
 80025ac:	f000 fc0a 	bl	8002dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80025b0:	2011      	movs	r0, #17
 80025b2:	f000 fc1c 	bl	8002dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b002      	add	sp, #8
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	40001000 	.word	0x40001000
 80025c4:	40021000 	.word	0x40021000

080025c8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <MX_LPUART1_UART_Init+0x54>)
 80025ce:	4a14      	ldr	r2, [pc, #80]	; (8002620 <MX_LPUART1_UART_Init+0x58>)
 80025d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <MX_LPUART1_UART_Init+0x54>)
 80025d4:	2296      	movs	r2, #150	; 0x96
 80025d6:	0192      	lsls	r2, r2, #6
 80025d8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <MX_LPUART1_UART_Init+0x54>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <MX_LPUART1_UART_Init+0x54>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <MX_LPUART1_UART_Init+0x54>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <MX_LPUART1_UART_Init+0x54>)
 80025ee:	220c      	movs	r2, #12
 80025f0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <MX_LPUART1_UART_Init+0x54>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <MX_LPUART1_UART_Init+0x54>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <MX_LPUART1_UART_Init+0x54>)
 8002600:	2200      	movs	r2, #0
 8002602:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <MX_LPUART1_UART_Init+0x54>)
 8002606:	0018      	movs	r0, r3
 8002608:	f003 fcdc 	bl	8005fc4 <HAL_UART_Init>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d001      	beq.n	8002614 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002610:	f7ff f8ce 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	20000414 	.word	0x20000414
 8002620:	40004800 	.word	0x40004800

08002624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	240c      	movs	r4, #12
 800262e:	193b      	adds	r3, r7, r4
 8002630:	0018      	movs	r0, r3
 8002632:	2314      	movs	r3, #20
 8002634:	001a      	movs	r2, r3
 8002636:	2100      	movs	r1, #0
 8002638:	f005 fa3a 	bl	8007ab0 <memset>
  if(uartHandle->Instance==LPUART1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <HAL_UART_MspInit+0x90>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d131      	bne.n	80026aa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002646:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <HAL_UART_MspInit+0x94>)
 8002648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264a:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_UART_MspInit+0x94>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	02c9      	lsls	r1, r1, #11
 8002650:	430a      	orrs	r2, r1
 8002652:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002654:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <HAL_UART_MspInit+0x94>)
 8002656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002658:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <HAL_UART_MspInit+0x94>)
 800265a:	2101      	movs	r1, #1
 800265c:	430a      	orrs	r2, r1
 800265e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002660:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_UART_MspInit+0x94>)
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	2201      	movs	r2, #1
 8002666:	4013      	ands	r3, r2
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800266c:	0021      	movs	r1, r4
 800266e:	187b      	adds	r3, r7, r1
 8002670:	220c      	movs	r2, #12
 8002672:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	187b      	adds	r3, r7, r1
 8002676:	2202      	movs	r2, #2
 8002678:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	187b      	adds	r3, r7, r1
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	187b      	adds	r3, r7, r1
 8002682:	2203      	movs	r2, #3
 8002684:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002686:	187b      	adds	r3, r7, r1
 8002688:	2206      	movs	r2, #6
 800268a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	187a      	adds	r2, r7, r1
 800268e:	23a0      	movs	r3, #160	; 0xa0
 8002690:	05db      	lsls	r3, r3, #23
 8002692:	0011      	movs	r1, r2
 8002694:	0018      	movs	r0, r3
 8002696:	f000 fd75 	bl	8003184 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	201d      	movs	r0, #29
 80026a0:	f000 fb90 	bl	8002dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80026a4:	201d      	movs	r0, #29
 80026a6:	f000 fba2 	bl	8002dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b009      	add	sp, #36	; 0x24
 80026b0:	bd90      	pop	{r4, r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	40004800 	.word	0x40004800
 80026b8:	40021000 	.word	0x40021000

080026bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80026bc:	480d      	ldr	r0, [pc, #52]	; (80026f4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80026be:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026c0:	f7ff ff1e 	bl	8002500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c4:	480c      	ldr	r0, [pc, #48]	; (80026f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80026c6:	490d      	ldr	r1, [pc, #52]	; (80026fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80026c8:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <LoopForever+0xe>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026cc:	e002      	b.n	80026d4 <LoopCopyDataInit>

080026ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d2:	3304      	adds	r3, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d8:	d3f9      	bcc.n	80026ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026dc:	4c0a      	ldr	r4, [pc, #40]	; (8002708 <LoopForever+0x16>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e0:	e001      	b.n	80026e6 <LoopFillZerobss>

080026e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e4:	3204      	adds	r2, #4

080026e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e8:	d3fb      	bcc.n	80026e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ea:	f005 fa3d 	bl	8007b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ee:	f7fe ffab 	bl	8001648 <main>

080026f2 <LoopForever>:

LoopForever:
    b LoopForever
 80026f2:	e7fe      	b.n	80026f2 <LoopForever>
   ldr   r0, =_estack
 80026f4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80026f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002700:	08008844 	.word	0x08008844
  ldr r2, =_sbss
 8002704:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002708:	200005ec 	.word	0x200005ec

0800270c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800270c:	e7fe      	b.n	800270c <ADC1_COMP_IRQHandler>
	...

08002710 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002716:	1dfb      	adds	r3, r7, #7
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_Init+0x3c>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_Init+0x3c>)
 8002722:	2140      	movs	r1, #64	; 0x40
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002728:	2003      	movs	r0, #3
 800272a:	f000 f811 	bl	8002750 <HAL_InitTick>
 800272e:	1e03      	subs	r3, r0, #0
 8002730:	d003      	beq.n	800273a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002732:	1dfb      	adds	r3, r7, #7
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	e001      	b.n	800273e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800273a:	f7ff fded 	bl	8002318 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800273e:	1dfb      	adds	r3, r7, #7
 8002740:	781b      	ldrb	r3, [r3, #0]
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b002      	add	sp, #8
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	40022000 	.word	0x40022000

08002750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002758:	4b14      	ldr	r3, [pc, #80]	; (80027ac <HAL_InitTick+0x5c>)
 800275a:	681c      	ldr	r4, [r3, #0]
 800275c:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_InitTick+0x60>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	0019      	movs	r1, r3
 8002762:	23fa      	movs	r3, #250	; 0xfa
 8002764:	0098      	lsls	r0, r3, #2
 8002766:	f7fd fcd9 	bl	800011c <__udivsi3>
 800276a:	0003      	movs	r3, r0
 800276c:	0019      	movs	r1, r3
 800276e:	0020      	movs	r0, r4
 8002770:	f7fd fcd4 	bl	800011c <__udivsi3>
 8002774:	0003      	movs	r3, r0
 8002776:	0018      	movs	r0, r3
 8002778:	f000 fb49 	bl	8002e0e <HAL_SYSTICK_Config>
 800277c:	1e03      	subs	r3, r0, #0
 800277e:	d001      	beq.n	8002784 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e00f      	b.n	80027a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d80b      	bhi.n	80027a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	2301      	movs	r3, #1
 800278e:	425b      	negs	r3, r3
 8002790:	2200      	movs	r2, #0
 8002792:	0018      	movs	r0, r3
 8002794:	f000 fb16 	bl	8002dc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_InitTick+0x64>)
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b003      	add	sp, #12
 80027aa:	bd90      	pop	{r4, r7, pc}
 80027ac:	20000000 	.word	0x20000000
 80027b0:	20000008 	.word	0x20000008
 80027b4:	20000004 	.word	0x20000004

080027b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_IncTick+0x1c>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	001a      	movs	r2, r3
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_IncTick+0x20>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	18d2      	adds	r2, r2, r3
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_IncTick+0x20>)
 80027ca:	601a      	str	r2, [r3, #0]
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	20000008 	.word	0x20000008
 80027d8:	2000049c 	.word	0x2000049c

080027dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  return uwTick;
 80027e0:	4b02      	ldr	r3, [pc, #8]	; (80027ec <HAL_GetTick+0x10>)
 80027e2:	681b      	ldr	r3, [r3, #0]
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	2000049c 	.word	0x2000049c

080027f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f8:	f7ff fff0 	bl	80027dc <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3301      	adds	r3, #1
 8002808:	d005      	beq.n	8002816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_Delay+0x44>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	001a      	movs	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	189b      	adds	r3, r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	f7ff ffe0 	bl	80027dc <HAL_GetTick>
 800281c:	0002      	movs	r2, r0
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	429a      	cmp	r2, r3
 8002826:	d8f7      	bhi.n	8002818 <HAL_Delay+0x28>
  {
  }
}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	b004      	add	sp, #16
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	20000008 	.word	0x20000008

08002838 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e159      	b.n	8002afe <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2250      	movs	r2, #80	; 0x50
 800285c:	2100      	movs	r1, #0
 800285e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	0018      	movs	r0, r3
 8002864:	f7fe fd14 	bl	8001290 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286c:	2210      	movs	r2, #16
 800286e:	4013      	ands	r3, r2
 8002870:	2b10      	cmp	r3, #16
 8002872:	d005      	beq.n	8002880 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2204      	movs	r2, #4
 800287c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800287e:	d00b      	beq.n	8002898 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	2210      	movs	r2, #16
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2250      	movs	r2, #80	; 0x50
 8002890:	2100      	movs	r1, #0
 8002892:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e132      	b.n	8002afe <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	4a9a      	ldr	r2, [pc, #616]	; (8002b08 <HAL_ADC_Init+0x2d0>)
 800289e:	4013      	ands	r3, r2
 80028a0:	2202      	movs	r2, #2
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2203      	movs	r2, #3
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d108      	bne.n	80028c8 <HAL_ADC_Init+0x90>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2201      	movs	r2, #1
 80028be:	4013      	ands	r3, r2
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_Init+0x90>
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <HAL_ADC_Init+0x92>
 80028c8:	2300      	movs	r3, #0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d149      	bne.n	8002962 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	23c0      	movs	r3, #192	; 0xc0
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d00b      	beq.n	80028f2 <HAL_ADC_Init+0xba>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	05db      	lsls	r3, r3, #23
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d005      	beq.n	80028f2 <HAL_ADC_Init+0xba>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	061b      	lsls	r3, r3, #24
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d111      	bne.n	8002916 <HAL_ADC_Init+0xde>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	0892      	lsrs	r2, r2, #2
 8002900:	611a      	str	r2, [r3, #16]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6919      	ldr	r1, [r3, #16]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	611a      	str	r2, [r3, #16]
 8002914:	e014      	b.n	8002940 <HAL_ADC_Init+0x108>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0092      	lsls	r2, r2, #2
 8002922:	0892      	lsrs	r2, r2, #2
 8002924:	611a      	str	r2, [r3, #16]
 8002926:	4b79      	ldr	r3, [pc, #484]	; (8002b0c <HAL_ADC_Init+0x2d4>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b78      	ldr	r3, [pc, #480]	; (8002b0c <HAL_ADC_Init+0x2d4>)
 800292c:	4978      	ldr	r1, [pc, #480]	; (8002b10 <HAL_ADC_Init+0x2d8>)
 800292e:	400a      	ands	r2, r1
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	4b76      	ldr	r3, [pc, #472]	; (8002b0c <HAL_ADC_Init+0x2d4>)
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4b74      	ldr	r3, [pc, #464]	; (8002b0c <HAL_ADC_Init+0x2d4>)
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2118      	movs	r1, #24
 800294c:	438a      	bics	r2, r1
 800294e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68d9      	ldr	r1, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002962:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <HAL_ADC_Init+0x2d4>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4b69      	ldr	r3, [pc, #420]	; (8002b0c <HAL_ADC_Init+0x2d4>)
 8002968:	496a      	ldr	r1, [pc, #424]	; (8002b14 <HAL_ADC_Init+0x2dc>)
 800296a:	400a      	ands	r2, r1
 800296c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800296e:	4b67      	ldr	r3, [pc, #412]	; (8002b0c <HAL_ADC_Init+0x2d4>)
 8002970:	6819      	ldr	r1, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002976:	065a      	lsls	r2, r3, #25
 8002978:	4b64      	ldr	r3, [pc, #400]	; (8002b0c <HAL_ADC_Init+0x2d4>)
 800297a:	430a      	orrs	r2, r1
 800297c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	055b      	lsls	r3, r3, #21
 8002988:	4013      	ands	r3, r2
 800298a:	d108      	bne.n	800299e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2180      	movs	r1, #128	; 0x80
 8002998:	0549      	lsls	r1, r1, #21
 800299a:	430a      	orrs	r2, r1
 800299c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	495b      	ldr	r1, [pc, #364]	; (8002b18 <HAL_ADC_Init+0x2e0>)
 80029aa:	400a      	ands	r2, r1
 80029ac:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68d9      	ldr	r1, [r3, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_Init+0x18c>
 80029c0:	2304      	movs	r3, #4
 80029c2:	e000      	b.n	80029c6 <HAL_ADC_Init+0x18e>
 80029c4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80029c6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2020      	movs	r0, #32
 80029cc:	5c1b      	ldrb	r3, [r3, r0]
 80029ce:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80029d0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	202c      	movs	r0, #44	; 0x2c
 80029d6:	5c1b      	ldrb	r3, [r3, r0]
 80029d8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029da:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80029e0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80029e8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80029f0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fe:	23c2      	movs	r3, #194	; 0xc2
 8002a00:	33ff      	adds	r3, #255	; 0xff
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d00b      	beq.n	8002a1e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68d9      	ldr	r1, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2221      	movs	r2, #33	; 0x21
 8002a22:	5c9b      	ldrb	r3, [r3, r2]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d11a      	bne.n	8002a5e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	5c9b      	ldrb	r3, [r3, r2]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2180      	movs	r1, #128	; 0x80
 8002a3e:	0249      	lsls	r1, r1, #9
 8002a40:	430a      	orrs	r2, r1
 8002a42:	60da      	str	r2, [r3, #12]
 8002a44:	e00b      	b.n	8002a5e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	2201      	movs	r2, #1
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d11f      	bne.n	8002aa6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	492a      	ldr	r1, [pc, #168]	; (8002b1c <HAL_ADC_Init+0x2e4>)
 8002a72:	400a      	ands	r2, r1
 8002a74:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6919      	ldr	r1, [r3, #16]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002a84:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8002a8a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	611a      	str	r2, [r3, #16]
 8002aa4:	e00e      	b.n	8002ac4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2201      	movs	r2, #1
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	438a      	bics	r2, r1
 8002ac2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2107      	movs	r1, #7
 8002ad0:	438a      	bics	r2, r1
 8002ad2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6959      	ldr	r1, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	2203      	movs	r2, #3
 8002af2:	4393      	bics	r3, r2
 8002af4:	2201      	movs	r2, #1
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b002      	add	sp, #8
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	fffffefd 	.word	0xfffffefd
 8002b0c:	40012708 	.word	0x40012708
 8002b10:	ffc3ffff 	.word	0xffc3ffff
 8002b14:	fdffffff 	.word	0xfdffffff
 8002b18:	fffe0219 	.word	0xfffe0219
 8002b1c:	fffffc03 	.word	0xfffffc03

08002b20 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2250      	movs	r2, #80	; 0x50
 8002b2e:	5c9b      	ldrb	r3, [r3, r2]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x18>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e06c      	b.n	8002c12 <HAL_ADC_ConfigChannel+0xf2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2250      	movs	r2, #80	; 0x50
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2204      	movs	r2, #4
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d00b      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b50:	2220      	movs	r2, #32
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2250      	movs	r2, #80	; 0x50
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e056      	b.n	8002c12 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4a2c      	ldr	r2, [pc, #176]	; (8002c1c <HAL_ADC_ConfigChannel+0xfc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d028      	beq.n	8002bc0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	035b      	lsls	r3, r3, #13
 8002b7a:	0b5a      	lsrs	r2, r3, #13
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	02db      	lsls	r3, r3, #11
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d009      	beq.n	8002ba4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002b90:	4b23      	ldr	r3, [pc, #140]	; (8002c20 <HAL_ADC_ConfigChannel+0x100>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <HAL_ADC_ConfigChannel+0x100>)
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	0409      	lsls	r1, r1, #16
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002b9e:	200a      	movs	r0, #10
 8002ba0:	f000 f844 	bl	8002c2c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	029b      	lsls	r3, r3, #10
 8002bac:	4013      	ands	r3, r2
 8002bae:	d02b      	beq.n	8002c08 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_ADC_ConfigChannel+0x100>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <HAL_ADC_ConfigChannel+0x100>)
 8002bb6:	2180      	movs	r1, #128	; 0x80
 8002bb8:	03c9      	lsls	r1, r1, #15
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e023      	b.n	8002c08 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	035b      	lsls	r3, r3, #13
 8002bcc:	0b5b      	lsrs	r3, r3, #13
 8002bce:	43d9      	mvns	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	400a      	ands	r2, r1
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	02db      	lsls	r3, r3, #11
 8002be0:	4013      	ands	r3, r2
 8002be2:	d005      	beq.n	8002bf0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002be4:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <HAL_ADC_ConfigChannel+0x100>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <HAL_ADC_ConfigChannel+0x100>)
 8002bea:	490e      	ldr	r1, [pc, #56]	; (8002c24 <HAL_ADC_ConfigChannel+0x104>)
 8002bec:	400a      	ands	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	029b      	lsls	r3, r3, #10
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d005      	beq.n	8002c08 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <HAL_ADC_ConfigChannel+0x100>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <HAL_ADC_ConfigChannel+0x100>)
 8002c02:	4909      	ldr	r1, [pc, #36]	; (8002c28 <HAL_ADC_ConfigChannel+0x108>)
 8002c04:	400a      	ands	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2250      	movs	r2, #80	; 0x50
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b002      	add	sp, #8
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	00001001 	.word	0x00001001
 8002c20:	40012708 	.word	0x40012708
 8002c24:	ff7fffff 	.word	0xff7fffff
 8002c28:	ffbfffff 	.word	0xffbfffff

08002c2c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <ADC_DelayMicroSecond+0x38>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	490b      	ldr	r1, [pc, #44]	; (8002c68 <ADC_DelayMicroSecond+0x3c>)
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f7fd fa6e 	bl	800011c <__udivsi3>
 8002c40:	0003      	movs	r3, r0
 8002c42:	001a      	movs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4353      	muls	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8002c4a:	e002      	b.n	8002c52 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f9      	bne.n	8002c4c <ADC_DelayMicroSecond+0x20>
  }
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	20000000 	.word	0x20000000
 8002c68:	000f4240 	.word	0x000f4240

08002c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	0002      	movs	r2, r0
 8002c74:	1dfb      	adds	r3, r7, #7
 8002c76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c78:	1dfb      	adds	r3, r7, #7
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c7e:	d809      	bhi.n	8002c94 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c80:	1dfb      	adds	r3, r7, #7
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	001a      	movs	r2, r3
 8002c86:	231f      	movs	r3, #31
 8002c88:	401a      	ands	r2, r3
 8002c8a:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <__NVIC_EnableIRQ+0x30>)
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	4091      	lsls	r1, r2
 8002c90:	000a      	movs	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]
  }
}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b002      	add	sp, #8
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	e000e100 	.word	0xe000e100

08002ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	1dfb      	adds	r3, r7, #7
 8002cac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002cae:	1dfb      	adds	r3, r7, #7
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8002cb4:	d828      	bhi.n	8002d08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cb6:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <__NVIC_SetPriority+0xd4>)
 8002cb8:	1dfb      	adds	r3, r7, #7
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	b25b      	sxtb	r3, r3
 8002cbe:	089b      	lsrs	r3, r3, #2
 8002cc0:	33c0      	adds	r3, #192	; 0xc0
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	589b      	ldr	r3, [r3, r2]
 8002cc6:	1dfa      	adds	r2, r7, #7
 8002cc8:	7812      	ldrb	r2, [r2, #0]
 8002cca:	0011      	movs	r1, r2
 8002ccc:	2203      	movs	r2, #3
 8002cce:	400a      	ands	r2, r1
 8002cd0:	00d2      	lsls	r2, r2, #3
 8002cd2:	21ff      	movs	r1, #255	; 0xff
 8002cd4:	4091      	lsls	r1, r2
 8002cd6:	000a      	movs	r2, r1
 8002cd8:	43d2      	mvns	r2, r2
 8002cda:	401a      	ands	r2, r3
 8002cdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	019b      	lsls	r3, r3, #6
 8002ce2:	22ff      	movs	r2, #255	; 0xff
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	0018      	movs	r0, r3
 8002cec:	2303      	movs	r3, #3
 8002cee:	4003      	ands	r3, r0
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cf4:	481f      	ldr	r0, [pc, #124]	; (8002d74 <__NVIC_SetPriority+0xd4>)
 8002cf6:	1dfb      	adds	r3, r7, #7
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	b25b      	sxtb	r3, r3
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	33c0      	adds	r3, #192	; 0xc0
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d06:	e031      	b.n	8002d6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d08:	4a1b      	ldr	r2, [pc, #108]	; (8002d78 <__NVIC_SetPriority+0xd8>)
 8002d0a:	1dfb      	adds	r3, r7, #7
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	0019      	movs	r1, r3
 8002d10:	230f      	movs	r3, #15
 8002d12:	400b      	ands	r3, r1
 8002d14:	3b08      	subs	r3, #8
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3306      	adds	r3, #6
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	18d3      	adds	r3, r2, r3
 8002d1e:	3304      	adds	r3, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	1dfa      	adds	r2, r7, #7
 8002d24:	7812      	ldrb	r2, [r2, #0]
 8002d26:	0011      	movs	r1, r2
 8002d28:	2203      	movs	r2, #3
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	00d2      	lsls	r2, r2, #3
 8002d2e:	21ff      	movs	r1, #255	; 0xff
 8002d30:	4091      	lsls	r1, r2
 8002d32:	000a      	movs	r2, r1
 8002d34:	43d2      	mvns	r2, r2
 8002d36:	401a      	ands	r2, r3
 8002d38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	019b      	lsls	r3, r3, #6
 8002d3e:	22ff      	movs	r2, #255	; 0xff
 8002d40:	401a      	ands	r2, r3
 8002d42:	1dfb      	adds	r3, r7, #7
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	0018      	movs	r0, r3
 8002d48:	2303      	movs	r3, #3
 8002d4a:	4003      	ands	r3, r0
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d50:	4809      	ldr	r0, [pc, #36]	; (8002d78 <__NVIC_SetPriority+0xd8>)
 8002d52:	1dfb      	adds	r3, r7, #7
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	001c      	movs	r4, r3
 8002d58:	230f      	movs	r3, #15
 8002d5a:	4023      	ands	r3, r4
 8002d5c:	3b08      	subs	r3, #8
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	430a      	orrs	r2, r1
 8002d62:	3306      	adds	r3, #6
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	18c3      	adds	r3, r0, r3
 8002d68:	3304      	adds	r3, #4
 8002d6a:	601a      	str	r2, [r3, #0]
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b003      	add	sp, #12
 8002d72:	bd90      	pop	{r4, r7, pc}
 8002d74:	e000e100 	.word	0xe000e100
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	1e5a      	subs	r2, r3, #1
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	045b      	lsls	r3, r3, #17
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d301      	bcc.n	8002d94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d90:	2301      	movs	r3, #1
 8002d92:	e010      	b.n	8002db6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <SysTick_Config+0x44>)
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	3a01      	subs	r2, #1
 8002d9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	425b      	negs	r3, r3
 8002da0:	2103      	movs	r1, #3
 8002da2:	0018      	movs	r0, r3
 8002da4:	f7ff ff7c 	bl	8002ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <SysTick_Config+0x44>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dae:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <SysTick_Config+0x44>)
 8002db0:	2207      	movs	r2, #7
 8002db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	0018      	movs	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b002      	add	sp, #8
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	e000e010 	.word	0xe000e010

08002dc4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	210f      	movs	r1, #15
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	1c02      	adds	r2, r0, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	b25b      	sxtb	r3, r3
 8002dde:	0011      	movs	r1, r2
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7ff ff5d 	bl	8002ca0 <__NVIC_SetPriority>
}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b004      	add	sp, #16
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	0002      	movs	r2, r0
 8002df6:	1dfb      	adds	r3, r7, #7
 8002df8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dfa:	1dfb      	adds	r3, r7, #7
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	b25b      	sxtb	r3, r3
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7ff ff33 	bl	8002c6c <__NVIC_EnableIRQ>
}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b002      	add	sp, #8
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7ff ffaf 	bl	8002d7c <SysTick_Config>
 8002e1e:	0003      	movs	r3, r0
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b002      	add	sp, #8
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e061      	b.n	8002efe <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a32      	ldr	r2, [pc, #200]	; (8002f08 <HAL_DMA_Init+0xe0>)
 8002e40:	4694      	mov	ip, r2
 8002e42:	4463      	add	r3, ip
 8002e44:	2114      	movs	r1, #20
 8002e46:	0018      	movs	r0, r3
 8002e48:	f7fd f968 	bl	800011c <__udivsi3>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	009a      	lsls	r2, r3, #2
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a2d      	ldr	r2, [pc, #180]	; (8002f0c <HAL_DMA_Init+0xe4>)
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2225      	movs	r2, #37	; 0x25
 8002e5e:	2102      	movs	r1, #2
 8002e60:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4a28      	ldr	r2, [pc, #160]	; (8002f10 <HAL_DMA_Init+0xe8>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	01db      	lsls	r3, r3, #7
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d018      	beq.n	8002ee6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002eb4:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <HAL_DMA_Init+0xec>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	211c      	movs	r1, #28
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	210f      	movs	r1, #15
 8002ec2:	4099      	lsls	r1, r3
 8002ec4:	000b      	movs	r3, r1
 8002ec6:	43d9      	mvns	r1, r3
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_DMA_Init+0xec>)
 8002eca:	400a      	ands	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <HAL_DMA_Init+0xec>)
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	201c      	movs	r0, #28
 8002edc:	4003      	ands	r3, r0
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <HAL_DMA_Init+0xec>)
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2225      	movs	r2, #37	; 0x25
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2224      	movs	r2, #36	; 0x24
 8002ef8:	2100      	movs	r1, #0
 8002efa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	0018      	movs	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b004      	add	sp, #16
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	bffdfff8 	.word	0xbffdfff8
 8002f0c:	40020000 	.word	0x40020000
 8002f10:	ffff800f 	.word	0xffff800f
 8002f14:	400200a8 	.word	0x400200a8

08002f18 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	230f      	movs	r3, #15
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2225      	movs	r2, #37	; 0x25
 8002f2c:	5c9b      	ldrb	r3, [r3, r2]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d008      	beq.n	8002f46 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2204      	movs	r2, #4
 8002f38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2224      	movs	r2, #36	; 0x24
 8002f3e:	2100      	movs	r1, #0
 8002f40:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e024      	b.n	8002f90 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	210e      	movs	r1, #14
 8002f52:	438a      	bics	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2101      	movs	r1, #1
 8002f62:	438a      	bics	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	221c      	movs	r2, #28
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	2101      	movs	r1, #1
 8002f74:	4091      	lsls	r1, r2
 8002f76:	000a      	movs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2225      	movs	r2, #37	; 0x25
 8002f7e:	2101      	movs	r1, #1
 8002f80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2224      	movs	r2, #36	; 0x24
 8002f86:	2100      	movs	r1, #0
 8002f88:	5499      	strb	r1, [r3, r2]

    return status;
 8002f8a:	230f      	movs	r3, #15
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b004      	add	sp, #16
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa0:	210f      	movs	r1, #15
 8002fa2:	187b      	adds	r3, r7, r1
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2225      	movs	r2, #37	; 0x25
 8002fac:	5c9b      	ldrb	r3, [r3, r2]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d006      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002fba:	187b      	adds	r3, r7, r1
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
 8002fc0:	e02a      	b.n	8003018 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	210e      	movs	r1, #14
 8002fce:	438a      	bics	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	438a      	bics	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	221c      	movs	r2, #28
 8002fe8:	401a      	ands	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2101      	movs	r1, #1
 8002ff0:	4091      	lsls	r1, r2
 8002ff2:	000a      	movs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2225      	movs	r2, #37	; 0x25
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2224      	movs	r2, #36	; 0x24
 8003002:	2100      	movs	r1, #0
 8003004:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	0010      	movs	r0, r2
 8003016:	4798      	blx	r3
    }
  }
  return status;
 8003018:	230f      	movs	r3, #15
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	781b      	ldrb	r3, [r3, #0]
}
 800301e:	0018      	movs	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	b004      	add	sp, #16
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	221c      	movs	r2, #28
 8003044:	4013      	ands	r3, r2
 8003046:	2204      	movs	r2, #4
 8003048:	409a      	lsls	r2, r3
 800304a:	0013      	movs	r3, r2
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4013      	ands	r3, r2
 8003050:	d026      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x7a>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2204      	movs	r2, #4
 8003056:	4013      	ands	r3, r2
 8003058:	d022      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2220      	movs	r2, #32
 8003062:	4013      	ands	r3, r2
 8003064:	d107      	bne.n	8003076 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2104      	movs	r1, #4
 8003072:	438a      	bics	r2, r1
 8003074:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	221c      	movs	r2, #28
 800307c:	401a      	ands	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2104      	movs	r1, #4
 8003084:	4091      	lsls	r1, r2
 8003086:	000a      	movs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	2b00      	cmp	r3, #0
 8003090:	d100      	bne.n	8003094 <HAL_DMA_IRQHandler+0x6e>
 8003092:	e071      	b.n	8003178 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	0010      	movs	r0, r2
 800309c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800309e:	e06b      	b.n	8003178 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	221c      	movs	r2, #28
 80030a6:	4013      	ands	r3, r2
 80030a8:	2202      	movs	r2, #2
 80030aa:	409a      	lsls	r2, r3
 80030ac:	0013      	movs	r3, r2
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4013      	ands	r3, r2
 80030b2:	d02d      	beq.n	8003110 <HAL_DMA_IRQHandler+0xea>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2202      	movs	r2, #2
 80030b8:	4013      	ands	r3, r2
 80030ba:	d029      	beq.n	8003110 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2220      	movs	r2, #32
 80030c4:	4013      	ands	r3, r2
 80030c6:	d10b      	bne.n	80030e0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	210a      	movs	r1, #10
 80030d4:	438a      	bics	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2225      	movs	r2, #37	; 0x25
 80030dc:	2101      	movs	r1, #1
 80030de:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	221c      	movs	r2, #28
 80030e6:	401a      	ands	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	2102      	movs	r1, #2
 80030ee:	4091      	lsls	r1, r2
 80030f0:	000a      	movs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2224      	movs	r2, #36	; 0x24
 80030f8:	2100      	movs	r1, #0
 80030fa:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d039      	beq.n	8003178 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	0010      	movs	r0, r2
 800310c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800310e:	e033      	b.n	8003178 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	221c      	movs	r2, #28
 8003116:	4013      	ands	r3, r2
 8003118:	2208      	movs	r2, #8
 800311a:	409a      	lsls	r2, r3
 800311c:	0013      	movs	r3, r2
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4013      	ands	r3, r2
 8003122:	d02a      	beq.n	800317a <HAL_DMA_IRQHandler+0x154>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2208      	movs	r2, #8
 8003128:	4013      	ands	r3, r2
 800312a:	d026      	beq.n	800317a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	210e      	movs	r1, #14
 8003138:	438a      	bics	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	221c      	movs	r2, #28
 8003142:	401a      	ands	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	2101      	movs	r1, #1
 800314a:	4091      	lsls	r1, r2
 800314c:	000a      	movs	r2, r1
 800314e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2225      	movs	r2, #37	; 0x25
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2224      	movs	r2, #36	; 0x24
 8003162:	2100      	movs	r1, #0
 8003164:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	0010      	movs	r0, r2
 8003176:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46c0      	nop			; (mov r8, r8)
}
 800317c:	46bd      	mov	sp, r7
 800317e:	b004      	add	sp, #16
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800319a:	e155      	b.n	8003448 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2101      	movs	r1, #1
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4091      	lsls	r1, r2
 80031a6:	000a      	movs	r2, r1
 80031a8:	4013      	ands	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d100      	bne.n	80031b4 <HAL_GPIO_Init+0x30>
 80031b2:	e146      	b.n	8003442 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2203      	movs	r2, #3
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d005      	beq.n	80031cc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2203      	movs	r2, #3
 80031c6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d130      	bne.n	800322e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	2203      	movs	r2, #3
 80031d8:	409a      	lsls	r2, r3
 80031da:	0013      	movs	r3, r2
 80031dc:	43da      	mvns	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	409a      	lsls	r2, r3
 80031ee:	0013      	movs	r3, r2
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003202:	2201      	movs	r2, #1
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	409a      	lsls	r2, r3
 8003208:	0013      	movs	r3, r2
 800320a:	43da      	mvns	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	2201      	movs	r2, #1
 800321a:	401a      	ands	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	409a      	lsls	r2, r3
 8003220:	0013      	movs	r3, r2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2203      	movs	r2, #3
 8003234:	4013      	ands	r3, r2
 8003236:	2b03      	cmp	r3, #3
 8003238:	d017      	beq.n	800326a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	2203      	movs	r2, #3
 8003246:	409a      	lsls	r2, r3
 8003248:	0013      	movs	r3, r2
 800324a:	43da      	mvns	r2, r3
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4013      	ands	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	409a      	lsls	r2, r3
 800325c:	0013      	movs	r3, r2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2203      	movs	r2, #3
 8003270:	4013      	ands	r3, r2
 8003272:	2b02      	cmp	r3, #2
 8003274:	d123      	bne.n	80032be <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	08da      	lsrs	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3208      	adds	r2, #8
 800327e:	0092      	lsls	r2, r2, #2
 8003280:	58d3      	ldr	r3, [r2, r3]
 8003282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2207      	movs	r2, #7
 8003288:	4013      	ands	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	220f      	movs	r2, #15
 800328e:	409a      	lsls	r2, r3
 8003290:	0013      	movs	r3, r2
 8003292:	43da      	mvns	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2107      	movs	r1, #7
 80032a2:	400b      	ands	r3, r1
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	409a      	lsls	r2, r3
 80032a8:	0013      	movs	r3, r2
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	08da      	lsrs	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3208      	adds	r2, #8
 80032b8:	0092      	lsls	r2, r2, #2
 80032ba:	6939      	ldr	r1, [r7, #16]
 80032bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	2203      	movs	r2, #3
 80032ca:	409a      	lsls	r2, r3
 80032cc:	0013      	movs	r3, r2
 80032ce:	43da      	mvns	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2203      	movs	r2, #3
 80032dc:	401a      	ands	r2, r3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	409a      	lsls	r2, r3
 80032e4:	0013      	movs	r3, r2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	23c0      	movs	r3, #192	; 0xc0
 80032f8:	029b      	lsls	r3, r3, #10
 80032fa:	4013      	ands	r3, r2
 80032fc:	d100      	bne.n	8003300 <HAL_GPIO_Init+0x17c>
 80032fe:	e0a0      	b.n	8003442 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003300:	4b57      	ldr	r3, [pc, #348]	; (8003460 <HAL_GPIO_Init+0x2dc>)
 8003302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003304:	4b56      	ldr	r3, [pc, #344]	; (8003460 <HAL_GPIO_Init+0x2dc>)
 8003306:	2101      	movs	r1, #1
 8003308:	430a      	orrs	r2, r1
 800330a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800330c:	4a55      	ldr	r2, [pc, #340]	; (8003464 <HAL_GPIO_Init+0x2e0>)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	3302      	adds	r3, #2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	589b      	ldr	r3, [r3, r2]
 8003318:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2203      	movs	r2, #3
 800331e:	4013      	ands	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	220f      	movs	r2, #15
 8003324:	409a      	lsls	r2, r3
 8003326:	0013      	movs	r3, r2
 8003328:	43da      	mvns	r2, r3
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	23a0      	movs	r3, #160	; 0xa0
 8003334:	05db      	lsls	r3, r3, #23
 8003336:	429a      	cmp	r2, r3
 8003338:	d01f      	beq.n	800337a <HAL_GPIO_Init+0x1f6>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4a      	ldr	r2, [pc, #296]	; (8003468 <HAL_GPIO_Init+0x2e4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d019      	beq.n	8003376 <HAL_GPIO_Init+0x1f2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a49      	ldr	r2, [pc, #292]	; (800346c <HAL_GPIO_Init+0x2e8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <HAL_GPIO_Init+0x1ee>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a48      	ldr	r2, [pc, #288]	; (8003470 <HAL_GPIO_Init+0x2ec>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00d      	beq.n	800336e <HAL_GPIO_Init+0x1ea>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a47      	ldr	r2, [pc, #284]	; (8003474 <HAL_GPIO_Init+0x2f0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d007      	beq.n	800336a <HAL_GPIO_Init+0x1e6>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a46      	ldr	r2, [pc, #280]	; (8003478 <HAL_GPIO_Init+0x2f4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d101      	bne.n	8003366 <HAL_GPIO_Init+0x1e2>
 8003362:	2305      	movs	r3, #5
 8003364:	e00a      	b.n	800337c <HAL_GPIO_Init+0x1f8>
 8003366:	2306      	movs	r3, #6
 8003368:	e008      	b.n	800337c <HAL_GPIO_Init+0x1f8>
 800336a:	2304      	movs	r3, #4
 800336c:	e006      	b.n	800337c <HAL_GPIO_Init+0x1f8>
 800336e:	2303      	movs	r3, #3
 8003370:	e004      	b.n	800337c <HAL_GPIO_Init+0x1f8>
 8003372:	2302      	movs	r3, #2
 8003374:	e002      	b.n	800337c <HAL_GPIO_Init+0x1f8>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_GPIO_Init+0x1f8>
 800337a:	2300      	movs	r3, #0
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	2103      	movs	r1, #3
 8003380:	400a      	ands	r2, r1
 8003382:	0092      	lsls	r2, r2, #2
 8003384:	4093      	lsls	r3, r2
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800338c:	4935      	ldr	r1, [pc, #212]	; (8003464 <HAL_GPIO_Init+0x2e0>)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	089b      	lsrs	r3, r3, #2
 8003392:	3302      	adds	r3, #2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800339a:	4b38      	ldr	r3, [pc, #224]	; (800347c <HAL_GPIO_Init+0x2f8>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	43da      	mvns	r2, r3
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	035b      	lsls	r3, r3, #13
 80033b2:	4013      	ands	r3, r2
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033be:	4b2f      	ldr	r3, [pc, #188]	; (800347c <HAL_GPIO_Init+0x2f8>)
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80033c4:	4b2d      	ldr	r3, [pc, #180]	; (800347c <HAL_GPIO_Init+0x2f8>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	43da      	mvns	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	039b      	lsls	r3, r3, #14
 80033dc:	4013      	ands	r3, r2
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033e8:	4b24      	ldr	r3, [pc, #144]	; (800347c <HAL_GPIO_Init+0x2f8>)
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80033ee:	4b23      	ldr	r3, [pc, #140]	; (800347c <HAL_GPIO_Init+0x2f8>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	43da      	mvns	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	029b      	lsls	r3, r3, #10
 8003406:	4013      	ands	r3, r2
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003412:	4b1a      	ldr	r3, [pc, #104]	; (800347c <HAL_GPIO_Init+0x2f8>)
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003418:	4b18      	ldr	r3, [pc, #96]	; (800347c <HAL_GPIO_Init+0x2f8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	43da      	mvns	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	025b      	lsls	r3, r3, #9
 8003430:	4013      	ands	r3, r2
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <HAL_GPIO_Init+0x2f8>)
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	3301      	adds	r3, #1
 8003446:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	40da      	lsrs	r2, r3
 8003450:	1e13      	subs	r3, r2, #0
 8003452:	d000      	beq.n	8003456 <HAL_GPIO_Init+0x2d2>
 8003454:	e6a2      	b.n	800319c <HAL_GPIO_Init+0x18>
  }
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	46c0      	nop			; (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	b006      	add	sp, #24
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000
 8003464:	40010000 	.word	0x40010000
 8003468:	50000400 	.word	0x50000400
 800346c:	50000800 	.word	0x50000800
 8003470:	50000c00 	.word	0x50000c00
 8003474:	50001000 	.word	0x50001000
 8003478:	50001c00 	.word	0x50001c00
 800347c:	40010400 	.word	0x40010400

08003480 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	0008      	movs	r0, r1
 800348a:	0011      	movs	r1, r2
 800348c:	1cbb      	adds	r3, r7, #2
 800348e:	1c02      	adds	r2, r0, #0
 8003490:	801a      	strh	r2, [r3, #0]
 8003492:	1c7b      	adds	r3, r7, #1
 8003494:	1c0a      	adds	r2, r1, #0
 8003496:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003498:	1c7b      	adds	r3, r7, #1
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034a0:	1cbb      	adds	r3, r7, #2
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80034a8:	e003      	b.n	80034b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80034aa:	1cbb      	adds	r3, r7, #2
 80034ac:	881a      	ldrh	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b002      	add	sp, #8
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	0002      	movs	r2, r0
 80034c4:	1dbb      	adds	r3, r7, #6
 80034c6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	1dba      	adds	r2, r7, #6
 80034ce:	8812      	ldrh	r2, [r2, #0]
 80034d0:	4013      	ands	r3, r2
 80034d2:	d008      	beq.n	80034e6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80034d6:	1dba      	adds	r2, r7, #6
 80034d8:	8812      	ldrh	r2, [r2, #0]
 80034da:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034dc:	1dbb      	adds	r3, r7, #6
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f000 f807 	bl	80034f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b002      	add	sp, #8
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	40010400 	.word	0x40010400

080034f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	0002      	movs	r2, r0
 80034fc:	1dbb      	adds	r3, r7, #6
 80034fe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003500:	46c0      	nop			; (mov r8, r8)
 8003502:	46bd      	mov	sp, r7
 8003504:	b002      	add	sp, #8
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e082      	b.n	8003620 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2241      	movs	r2, #65	; 0x41
 800351e:	5c9b      	ldrb	r3, [r3, r2]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d107      	bne.n	8003536 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2240      	movs	r2, #64	; 0x40
 800352a:	2100      	movs	r1, #0
 800352c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	0018      	movs	r0, r3
 8003532:	f7fe f801 	bl	8001538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2241      	movs	r2, #65	; 0x41
 800353a:	2124      	movs	r1, #36	; 0x24
 800353c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2101      	movs	r1, #1
 800354a:	438a      	bics	r2, r1
 800354c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4934      	ldr	r1, [pc, #208]	; (8003628 <HAL_I2C_Init+0x120>)
 8003558:	400a      	ands	r2, r1
 800355a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4931      	ldr	r1, [pc, #196]	; (800362c <HAL_I2C_Init+0x124>)
 8003568:	400a      	ands	r2, r1
 800356a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d108      	bne.n	8003586 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2180      	movs	r1, #128	; 0x80
 800357e:	0209      	lsls	r1, r1, #8
 8003580:	430a      	orrs	r2, r1
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	e007      	b.n	8003596 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2184      	movs	r1, #132	; 0x84
 8003590:	0209      	lsls	r1, r1, #8
 8003592:	430a      	orrs	r2, r1
 8003594:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d104      	bne.n	80035a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2280      	movs	r2, #128	; 0x80
 80035a4:	0112      	lsls	r2, r2, #4
 80035a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	491f      	ldr	r1, [pc, #124]	; (8003630 <HAL_I2C_Init+0x128>)
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	491a      	ldr	r1, [pc, #104]	; (800362c <HAL_I2C_Init+0x124>)
 80035c4:	400a      	ands	r2, r1
 80035c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69d9      	ldr	r1, [r3, #28]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1a      	ldr	r2, [r3, #32]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2101      	movs	r1, #1
 80035fe:	430a      	orrs	r2, r1
 8003600:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2241      	movs	r2, #65	; 0x41
 800360c:	2120      	movs	r1, #32
 800360e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2242      	movs	r2, #66	; 0x42
 800361a:	2100      	movs	r1, #0
 800361c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}
 8003628:	f0ffffff 	.word	0xf0ffffff
 800362c:	ffff7fff 	.word	0xffff7fff
 8003630:	02008000 	.word	0x02008000

08003634 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003634:	b590      	push	{r4, r7, lr}
 8003636:	b089      	sub	sp, #36	; 0x24
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	0008      	movs	r0, r1
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	0019      	movs	r1, r3
 8003642:	230a      	movs	r3, #10
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	1c02      	adds	r2, r0, #0
 8003648:	801a      	strh	r2, [r3, #0]
 800364a:	2308      	movs	r3, #8
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	1c0a      	adds	r2, r1, #0
 8003650:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2241      	movs	r2, #65	; 0x41
 8003656:	5c9b      	ldrb	r3, [r3, r2]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b20      	cmp	r3, #32
 800365c:	d000      	beq.n	8003660 <HAL_I2C_Master_Transmit+0x2c>
 800365e:	e0e7      	b.n	8003830 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2240      	movs	r2, #64	; 0x40
 8003664:	5c9b      	ldrb	r3, [r3, r2]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_I2C_Master_Transmit+0x3a>
 800366a:	2302      	movs	r3, #2
 800366c:	e0e1      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1fe>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2240      	movs	r2, #64	; 0x40
 8003672:	2101      	movs	r1, #1
 8003674:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003676:	f7ff f8b1 	bl	80027dc <HAL_GetTick>
 800367a:	0003      	movs	r3, r0
 800367c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	0219      	lsls	r1, r3, #8
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	2319      	movs	r3, #25
 800368a:	2201      	movs	r2, #1
 800368c:	f000 fa04 	bl	8003a98 <I2C_WaitOnFlagUntilTimeout>
 8003690:	1e03      	subs	r3, r0, #0
 8003692:	d001      	beq.n	8003698 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0cc      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2241      	movs	r2, #65	; 0x41
 800369c:	2121      	movs	r1, #33	; 0x21
 800369e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2242      	movs	r2, #66	; 0x42
 80036a4:	2110      	movs	r1, #16
 80036a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2208      	movs	r2, #8
 80036b8:	18ba      	adds	r2, r7, r2
 80036ba:	8812      	ldrh	r2, [r2, #0]
 80036bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2bff      	cmp	r3, #255	; 0xff
 80036cc:	d911      	bls.n	80036f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	22ff      	movs	r2, #255	; 0xff
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	045c      	lsls	r4, r3, #17
 80036de:	230a      	movs	r3, #10
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	8819      	ldrh	r1, [r3, #0]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	4b55      	ldr	r3, [pc, #340]	; (800383c <HAL_I2C_Master_Transmit+0x208>)
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	0023      	movs	r3, r4
 80036ec:	f000 fc2e 	bl	8003f4c <I2C_TransferConfig>
 80036f0:	e075      	b.n	80037de <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003700:	b2da      	uxtb	r2, r3
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	049c      	lsls	r4, r3, #18
 8003706:	230a      	movs	r3, #10
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	8819      	ldrh	r1, [r3, #0]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	4b4b      	ldr	r3, [pc, #300]	; (800383c <HAL_I2C_Master_Transmit+0x208>)
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	0023      	movs	r3, r4
 8003714:	f000 fc1a 	bl	8003f4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003718:	e061      	b.n	80037de <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	0018      	movs	r0, r3
 8003722:	f000 fa07 	bl	8003b34 <I2C_WaitOnTXISFlagUntilTimeout>
 8003726:	1e03      	subs	r3, r0, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e081      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	781a      	ldrb	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d03a      	beq.n	80037de <HAL_I2C_Master_Transmit+0x1aa>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	2b00      	cmp	r3, #0
 800376e:	d136      	bne.n	80037de <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	0013      	movs	r3, r2
 800377a:	2200      	movs	r2, #0
 800377c:	2180      	movs	r1, #128	; 0x80
 800377e:	f000 f98b 	bl	8003a98 <I2C_WaitOnFlagUntilTimeout>
 8003782:	1e03      	subs	r3, r0, #0
 8003784:	d001      	beq.n	800378a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e053      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	2bff      	cmp	r3, #255	; 0xff
 8003792:	d911      	bls.n	80037b8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	22ff      	movs	r2, #255	; 0xff
 8003798:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	045c      	lsls	r4, r3, #17
 80037a4:	230a      	movs	r3, #10
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	8819      	ldrh	r1, [r3, #0]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	2300      	movs	r3, #0
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	0023      	movs	r3, r4
 80037b2:	f000 fbcb 	bl	8003f4c <I2C_TransferConfig>
 80037b6:	e012      	b.n	80037de <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	049c      	lsls	r4, r3, #18
 80037cc:	230a      	movs	r3, #10
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	8819      	ldrh	r1, [r3, #0]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	2300      	movs	r3, #0
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	0023      	movs	r3, r4
 80037da:	f000 fbb7 	bl	8003f4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d198      	bne.n	800371a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	0018      	movs	r0, r3
 80037f0:	f000 f9e6 	bl	8003bc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037f4:	1e03      	subs	r3, r0, #0
 80037f6:	d001      	beq.n	80037fc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e01a      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2220      	movs	r2, #32
 8003802:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	490c      	ldr	r1, [pc, #48]	; (8003840 <HAL_I2C_Master_Transmit+0x20c>)
 8003810:	400a      	ands	r2, r1
 8003812:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2241      	movs	r2, #65	; 0x41
 8003818:	2120      	movs	r1, #32
 800381a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2242      	movs	r2, #66	; 0x42
 8003820:	2100      	movs	r1, #0
 8003822:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2240      	movs	r2, #64	; 0x40
 8003828:	2100      	movs	r1, #0
 800382a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	e000      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
  }
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b007      	add	sp, #28
 8003838:	bd90      	pop	{r4, r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	80002000 	.word	0x80002000
 8003840:	fe00e800 	.word	0xfe00e800

08003844 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	0008      	movs	r0, r1
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	0019      	movs	r1, r3
 8003852:	230a      	movs	r3, #10
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	1c02      	adds	r2, r0, #0
 8003858:	801a      	strh	r2, [r3, #0]
 800385a:	2308      	movs	r3, #8
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	1c0a      	adds	r2, r1, #0
 8003860:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2241      	movs	r2, #65	; 0x41
 8003866:	5c9b      	ldrb	r3, [r3, r2]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b20      	cmp	r3, #32
 800386c:	d000      	beq.n	8003870 <HAL_I2C_Master_Receive+0x2c>
 800386e:	e0e8      	b.n	8003a42 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2240      	movs	r2, #64	; 0x40
 8003874:	5c9b      	ldrb	r3, [r3, r2]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_I2C_Master_Receive+0x3a>
 800387a:	2302      	movs	r3, #2
 800387c:	e0e2      	b.n	8003a44 <HAL_I2C_Master_Receive+0x200>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2240      	movs	r2, #64	; 0x40
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003886:	f7fe ffa9 	bl	80027dc <HAL_GetTick>
 800388a:	0003      	movs	r3, r0
 800388c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	0219      	lsls	r1, r3, #8
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2319      	movs	r3, #25
 800389a:	2201      	movs	r2, #1
 800389c:	f000 f8fc 	bl	8003a98 <I2C_WaitOnFlagUntilTimeout>
 80038a0:	1e03      	subs	r3, r0, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0cd      	b.n	8003a44 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2241      	movs	r2, #65	; 0x41
 80038ac:	2122      	movs	r1, #34	; 0x22
 80038ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2242      	movs	r2, #66	; 0x42
 80038b4:	2110      	movs	r1, #16
 80038b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2208      	movs	r2, #8
 80038c8:	18ba      	adds	r2, r7, r2
 80038ca:	8812      	ldrh	r2, [r2, #0]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2bff      	cmp	r3, #255	; 0xff
 80038dc:	d911      	bls.n	8003902 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	22ff      	movs	r2, #255	; 0xff
 80038e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	045c      	lsls	r4, r3, #17
 80038ee:	230a      	movs	r3, #10
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	8819      	ldrh	r1, [r3, #0]
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	4b55      	ldr	r3, [pc, #340]	; (8003a4c <HAL_I2C_Master_Receive+0x208>)
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	0023      	movs	r3, r4
 80038fc:	f000 fb26 	bl	8003f4c <I2C_TransferConfig>
 8003900:	e076      	b.n	80039f0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	b2da      	uxtb	r2, r3
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	049c      	lsls	r4, r3, #18
 8003916:	230a      	movs	r3, #10
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	8819      	ldrh	r1, [r3, #0]
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	4b4b      	ldr	r3, [pc, #300]	; (8003a4c <HAL_I2C_Master_Receive+0x208>)
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	0023      	movs	r3, r4
 8003924:	f000 fb12 	bl	8003f4c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003928:	e062      	b.n	80039f0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	0018      	movs	r0, r3
 8003932:	f000 f989 	bl	8003c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003936:	1e03      	subs	r3, r0, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e082      	b.n	8003a44 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d03a      	beq.n	80039f0 <HAL_I2C_Master_Receive+0x1ac>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397e:	2b00      	cmp	r3, #0
 8003980:	d136      	bne.n	80039f0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	0013      	movs	r3, r2
 800398c:	2200      	movs	r2, #0
 800398e:	2180      	movs	r1, #128	; 0x80
 8003990:	f000 f882 	bl	8003a98 <I2C_WaitOnFlagUntilTimeout>
 8003994:	1e03      	subs	r3, r0, #0
 8003996:	d001      	beq.n	800399c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e053      	b.n	8003a44 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2bff      	cmp	r3, #255	; 0xff
 80039a4:	d911      	bls.n	80039ca <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	22ff      	movs	r2, #255	; 0xff
 80039aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	045c      	lsls	r4, r3, #17
 80039b6:	230a      	movs	r3, #10
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	8819      	ldrh	r1, [r3, #0]
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	2300      	movs	r3, #0
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	0023      	movs	r3, r4
 80039c4:	f000 fac2 	bl	8003f4c <I2C_TransferConfig>
 80039c8:	e012      	b.n	80039f0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	2380      	movs	r3, #128	; 0x80
 80039dc:	049c      	lsls	r4, r3, #18
 80039de:	230a      	movs	r3, #10
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	8819      	ldrh	r1, [r3, #0]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	2300      	movs	r3, #0
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	0023      	movs	r3, r4
 80039ec:	f000 faae 	bl	8003f4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d197      	bne.n	800392a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f000 f8dd 	bl	8003bc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a06:	1e03      	subs	r3, r0, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e01a      	b.n	8003a44 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2220      	movs	r2, #32
 8003a14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	490b      	ldr	r1, [pc, #44]	; (8003a50 <HAL_I2C_Master_Receive+0x20c>)
 8003a22:	400a      	ands	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2241      	movs	r2, #65	; 0x41
 8003a2a:	2120      	movs	r1, #32
 8003a2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2242      	movs	r2, #66	; 0x42
 8003a32:	2100      	movs	r1, #0
 8003a34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2240      	movs	r2, #64	; 0x40
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e000      	b.n	8003a44 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
  }
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b007      	add	sp, #28
 8003a4a:	bd90      	pop	{r4, r7, pc}
 8003a4c:	80002400 	.word	0x80002400
 8003a50:	fe00e800 	.word	0xfe00e800

08003a54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2202      	movs	r2, #2
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d103      	bne.n	8003a72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d007      	beq.n	8003a90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	619a      	str	r2, [r3, #24]
  }
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	1dfb      	adds	r3, r7, #7
 8003aa6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa8:	e030      	b.n	8003b0c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	d02d      	beq.n	8003b0c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab0:	f7fe fe94 	bl	80027dc <HAL_GetTick>
 8003ab4:	0002      	movs	r2, r0
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d302      	bcc.n	8003ac6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d122      	bne.n	8003b0c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	425a      	negs	r2, r3
 8003ad6:	4153      	adcs	r3, r2
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	001a      	movs	r2, r3
 8003adc:	1dfb      	adds	r3, r7, #7
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d113      	bne.n	8003b0c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	2220      	movs	r2, #32
 8003aea:	431a      	orrs	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2241      	movs	r2, #65	; 0x41
 8003af4:	2120      	movs	r1, #32
 8003af6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2242      	movs	r2, #66	; 0x42
 8003afc:	2100      	movs	r1, #0
 8003afe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2240      	movs	r2, #64	; 0x40
 8003b04:	2100      	movs	r1, #0
 8003b06:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e00f      	b.n	8003b2c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	4013      	ands	r3, r2
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	425a      	negs	r2, r3
 8003b1c:	4153      	adcs	r3, r2
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	001a      	movs	r2, r3
 8003b22:	1dfb      	adds	r3, r7, #7
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d0bf      	beq.n	8003aaa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b004      	add	sp, #16
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b40:	e032      	b.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f000 f8ff 	bl	8003d4c <I2C_IsErrorOccurred>
 8003b4e:	1e03      	subs	r3, r0, #0
 8003b50:	d001      	beq.n	8003b56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e030      	b.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	d025      	beq.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5c:	f7fe fe3e 	bl	80027dc <HAL_GetTick>
 8003b60:	0002      	movs	r2, r0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d302      	bcc.n	8003b72 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11a      	bne.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d013      	beq.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	2220      	movs	r2, #32
 8003b86:	431a      	orrs	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2241      	movs	r2, #65	; 0x41
 8003b90:	2120      	movs	r1, #32
 8003b92:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2242      	movs	r2, #66	; 0x42
 8003b98:	2100      	movs	r1, #0
 8003b9a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2240      	movs	r2, #64	; 0x40
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e007      	b.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d1c5      	bne.n	8003b42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b004      	add	sp, #16
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bcc:	e02f      	b.n	8003c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f000 f8b9 	bl	8003d4c <I2C_IsErrorOccurred>
 8003bda:	1e03      	subs	r3, r0, #0
 8003bdc:	d001      	beq.n	8003be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e02d      	b.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be2:	f7fe fdfb 	bl	80027dc <HAL_GetTick>
 8003be6:	0002      	movs	r2, r0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d302      	bcc.n	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d11a      	bne.n	8003c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d013      	beq.n	8003c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2241      	movs	r2, #65	; 0x41
 8003c16:	2120      	movs	r1, #32
 8003c18:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2242      	movs	r2, #66	; 0x42
 8003c1e:	2100      	movs	r1, #0
 8003c20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2240      	movs	r2, #64	; 0x40
 8003c26:	2100      	movs	r1, #0
 8003c28:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e007      	b.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2220      	movs	r2, #32
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d1c8      	bne.n	8003bce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	0018      	movs	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b004      	add	sp, #16
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c54:	e06b      	b.n	8003d2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f000 f875 	bl	8003d4c <I2C_IsErrorOccurred>
 8003c62:	1e03      	subs	r3, r0, #0
 8003c64:	d001      	beq.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e069      	b.n	8003d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	2220      	movs	r2, #32
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d138      	bne.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2204      	movs	r2, #4
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d105      	bne.n	8003c92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e055      	b.n	8003d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2210      	movs	r2, #16
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d107      	bne.n	8003cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2204      	movs	r2, #4
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44
 8003cae:	e002      	b.n	8003cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	491f      	ldr	r1, [pc, #124]	; (8003d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003cca:	400a      	ands	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2241      	movs	r2, #65	; 0x41
 8003cd2:	2120      	movs	r1, #32
 8003cd4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2242      	movs	r2, #66	; 0x42
 8003cda:	2100      	movs	r1, #0
 8003cdc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2240      	movs	r2, #64	; 0x40
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e029      	b.n	8003d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	f7fe fd77 	bl	80027dc <HAL_GetTick>
 8003cee:	0002      	movs	r2, r0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d116      	bne.n	8003d2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2204      	movs	r2, #4
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d00f      	beq.n	8003d2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	2220      	movs	r2, #32
 8003d14:	431a      	orrs	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2241      	movs	r2, #65	; 0x41
 8003d1e:	2120      	movs	r1, #32
 8003d20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2240      	movs	r2, #64	; 0x40
 8003d26:	2100      	movs	r1, #0
 8003d28:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e007      	b.n	8003d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2204      	movs	r2, #4
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d18c      	bne.n	8003c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b004      	add	sp, #16
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	fe00e800 	.word	0xfe00e800

08003d4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b590      	push	{r4, r7, lr}
 8003d4e:	b08b      	sub	sp, #44	; 0x2c
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d58:	2327      	movs	r3, #39	; 0x27
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2210      	movs	r2, #16
 8003d74:	4013      	ands	r3, r2
 8003d76:	d100      	bne.n	8003d7a <I2C_IsErrorOccurred+0x2e>
 8003d78:	e082      	b.n	8003e80 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2210      	movs	r2, #16
 8003d80:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d82:	e060      	b.n	8003e46 <I2C_IsErrorOccurred+0xfa>
 8003d84:	2427      	movs	r4, #39	; 0x27
 8003d86:	193b      	adds	r3, r7, r4
 8003d88:	193a      	adds	r2, r7, r4
 8003d8a:	7812      	ldrb	r2, [r2, #0]
 8003d8c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	3301      	adds	r3, #1
 8003d92:	d058      	beq.n	8003e46 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d94:	f7fe fd22 	bl	80027dc <HAL_GetTick>
 8003d98:	0002      	movs	r2, r0
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d306      	bcc.n	8003db2 <I2C_IsErrorOccurred+0x66>
 8003da4:	193b      	adds	r3, r7, r4
 8003da6:	193a      	adds	r2, r7, r4
 8003da8:	7812      	ldrb	r2, [r2, #0]
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d149      	bne.n	8003e46 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	01db      	lsls	r3, r3, #7
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003dc0:	2013      	movs	r0, #19
 8003dc2:	183b      	adds	r3, r7, r0
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	2142      	movs	r1, #66	; 0x42
 8003dc8:	5c52      	ldrb	r2, [r2, r1]
 8003dca:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d126      	bne.n	8003e2e <I2C_IsErrorOccurred+0xe2>
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	2380      	movs	r3, #128	; 0x80
 8003de4:	01db      	lsls	r3, r3, #7
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d021      	beq.n	8003e2e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003dea:	183b      	adds	r3, r7, r0
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d01d      	beq.n	8003e2e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2180      	movs	r1, #128	; 0x80
 8003dfe:	01c9      	lsls	r1, r1, #7
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e04:	f7fe fcea 	bl	80027dc <HAL_GetTick>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e0c:	e00f      	b.n	8003e2e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e0e:	f7fe fce5 	bl	80027dc <HAL_GetTick>
 8003e12:	0002      	movs	r2, r0
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b19      	cmp	r3, #25
 8003e1a:	d908      	bls.n	8003e2e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	4313      	orrs	r3, r2
 8003e22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e24:	2327      	movs	r3, #39	; 0x27
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]

              break;
 8003e2c:	e00b      	b.n	8003e46 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2220      	movs	r2, #32
 8003e36:	4013      	ands	r3, r2
 8003e38:	2127      	movs	r1, #39	; 0x27
 8003e3a:	187a      	adds	r2, r7, r1
 8003e3c:	1879      	adds	r1, r7, r1
 8003e3e:	7809      	ldrb	r1, [r1, #0]
 8003e40:	7011      	strb	r1, [r2, #0]
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d1e3      	bne.n	8003e0e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d004      	beq.n	8003e5e <I2C_IsErrorOccurred+0x112>
 8003e54:	2327      	movs	r3, #39	; 0x27
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d092      	beq.n	8003d84 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e5e:	2327      	movs	r3, #39	; 0x27
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d103      	bne.n	8003e70 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	2204      	movs	r2, #4
 8003e74:	4313      	orrs	r3, r2
 8003e76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e78:	2327      	movs	r3, #39	; 0x27
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	2380      	movs	r3, #128	; 0x80
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d00c      	beq.n	8003eac <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	2201      	movs	r2, #1
 8003e96:	4313      	orrs	r3, r2
 8003e98:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2280      	movs	r2, #128	; 0x80
 8003ea0:	0052      	lsls	r2, r2, #1
 8003ea2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ea4:	2327      	movs	r3, #39	; 0x27
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d00c      	beq.n	8003ed0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	2208      	movs	r2, #8
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2280      	movs	r2, #128	; 0x80
 8003ec4:	00d2      	lsls	r2, r2, #3
 8003ec6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ec8:	2327      	movs	r3, #39	; 0x27
 8003eca:	18fb      	adds	r3, r7, r3
 8003ecc:	2201      	movs	r2, #1
 8003ece:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d00c      	beq.n	8003ef4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	2202      	movs	r2, #2
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2280      	movs	r2, #128	; 0x80
 8003ee8:	0092      	lsls	r2, r2, #2
 8003eea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003eec:	2327      	movs	r3, #39	; 0x27
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003ef4:	2327      	movs	r3, #39	; 0x27
 8003ef6:	18fb      	adds	r3, r7, r3
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01d      	beq.n	8003f3a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7ff fda7 	bl	8003a54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	490d      	ldr	r1, [pc, #52]	; (8003f48 <I2C_IsErrorOccurred+0x1fc>)
 8003f12:	400a      	ands	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2241      	movs	r2, #65	; 0x41
 8003f26:	2120      	movs	r1, #32
 8003f28:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2242      	movs	r2, #66	; 0x42
 8003f2e:	2100      	movs	r1, #0
 8003f30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2240      	movs	r2, #64	; 0x40
 8003f36:	2100      	movs	r1, #0
 8003f38:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003f3a:	2327      	movs	r3, #39	; 0x27
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	781b      	ldrb	r3, [r3, #0]
}
 8003f40:	0018      	movs	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b00b      	add	sp, #44	; 0x2c
 8003f46:	bd90      	pop	{r4, r7, pc}
 8003f48:	fe00e800 	.word	0xfe00e800

08003f4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	0008      	movs	r0, r1
 8003f56:	0011      	movs	r1, r2
 8003f58:	607b      	str	r3, [r7, #4]
 8003f5a:	240a      	movs	r4, #10
 8003f5c:	193b      	adds	r3, r7, r4
 8003f5e:	1c02      	adds	r2, r0, #0
 8003f60:	801a      	strh	r2, [r3, #0]
 8003f62:	2009      	movs	r0, #9
 8003f64:	183b      	adds	r3, r7, r0
 8003f66:	1c0a      	adds	r2, r1, #0
 8003f68:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f6a:	193b      	adds	r3, r7, r4
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	059b      	lsls	r3, r3, #22
 8003f70:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f72:	183b      	adds	r3, r7, r0
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	0419      	lsls	r1, r3, #16
 8003f78:	23ff      	movs	r3, #255	; 0xff
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f7e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	4313      	orrs	r3, r2
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f96:	0d51      	lsrs	r1, r2, #21
 8003f98:	2280      	movs	r2, #128	; 0x80
 8003f9a:	00d2      	lsls	r2, r2, #3
 8003f9c:	400a      	ands	r2, r1
 8003f9e:	4907      	ldr	r1, [pc, #28]	; (8003fbc <I2C_TransferConfig+0x70>)
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	43d2      	mvns	r2, r2
 8003fa4:	401a      	ands	r2, r3
 8003fa6:	0011      	movs	r1, r2
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b007      	add	sp, #28
 8003fb8:	bd90      	pop	{r4, r7, pc}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	03ff63ff 	.word	0x03ff63ff

08003fc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2241      	movs	r2, #65	; 0x41
 8003fce:	5c9b      	ldrb	r3, [r3, r2]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d138      	bne.n	8004048 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2240      	movs	r2, #64	; 0x40
 8003fda:	5c9b      	ldrb	r3, [r3, r2]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e032      	b.n	800404a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2240      	movs	r2, #64	; 0x40
 8003fe8:	2101      	movs	r1, #1
 8003fea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2241      	movs	r2, #65	; 0x41
 8003ff0:	2124      	movs	r1, #36	; 0x24
 8003ff2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2101      	movs	r1, #1
 8004000:	438a      	bics	r2, r1
 8004002:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4911      	ldr	r1, [pc, #68]	; (8004054 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004010:	400a      	ands	r2, r1
 8004012:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6819      	ldr	r1, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2101      	movs	r1, #1
 8004030:	430a      	orrs	r2, r1
 8004032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2241      	movs	r2, #65	; 0x41
 8004038:	2120      	movs	r1, #32
 800403a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2240      	movs	r2, #64	; 0x40
 8004040:	2100      	movs	r1, #0
 8004042:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e000      	b.n	800404a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
  }
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	b002      	add	sp, #8
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	ffffefff 	.word	0xffffefff

08004058 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2241      	movs	r2, #65	; 0x41
 8004066:	5c9b      	ldrb	r3, [r3, r2]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b20      	cmp	r3, #32
 800406c:	d139      	bne.n	80040e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2240      	movs	r2, #64	; 0x40
 8004072:	5c9b      	ldrb	r3, [r3, r2]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004078:	2302      	movs	r3, #2
 800407a:	e033      	b.n	80040e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2240      	movs	r2, #64	; 0x40
 8004080:	2101      	movs	r1, #1
 8004082:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2241      	movs	r2, #65	; 0x41
 8004088:	2124      	movs	r1, #36	; 0x24
 800408a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2101      	movs	r1, #1
 8004098:	438a      	bics	r2, r1
 800409a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a11      	ldr	r2, [pc, #68]	; (80040ec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2101      	movs	r1, #1
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2241      	movs	r2, #65	; 0x41
 80040d2:	2120      	movs	r1, #32
 80040d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2240      	movs	r2, #64	; 0x40
 80040da:	2100      	movs	r1, #0
 80040dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	e000      	b.n	80040e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040e2:	2302      	movs	r3, #2
  }
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b004      	add	sp, #16
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	fffff0ff 	.word	0xfffff0ff

080040f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f0:	b5b0      	push	{r4, r5, r7, lr}
 80040f2:	b08a      	sub	sp, #40	; 0x28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f000 fb6c 	bl	80047dc <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004104:	4bc8      	ldr	r3, [pc, #800]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	220c      	movs	r2, #12
 800410a:	4013      	ands	r3, r2
 800410c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800410e:	4bc6      	ldr	r3, [pc, #792]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	2380      	movs	r3, #128	; 0x80
 8004114:	025b      	lsls	r3, r3, #9
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2201      	movs	r2, #1
 8004120:	4013      	ands	r3, r2
 8004122:	d100      	bne.n	8004126 <HAL_RCC_OscConfig+0x36>
 8004124:	e07d      	b.n	8004222 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2b08      	cmp	r3, #8
 800412a:	d007      	beq.n	800413c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b0c      	cmp	r3, #12
 8004130:	d112      	bne.n	8004158 <HAL_RCC_OscConfig+0x68>
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	025b      	lsls	r3, r3, #9
 8004138:	429a      	cmp	r2, r3
 800413a:	d10d      	bne.n	8004158 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413c:	4bba      	ldr	r3, [pc, #744]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	029b      	lsls	r3, r3, #10
 8004144:	4013      	ands	r3, r2
 8004146:	d100      	bne.n	800414a <HAL_RCC_OscConfig+0x5a>
 8004148:	e06a      	b.n	8004220 <HAL_RCC_OscConfig+0x130>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d166      	bne.n	8004220 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	f000 fb42 	bl	80047dc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	025b      	lsls	r3, r3, #9
 8004160:	429a      	cmp	r2, r3
 8004162:	d107      	bne.n	8004174 <HAL_RCC_OscConfig+0x84>
 8004164:	4bb0      	ldr	r3, [pc, #704]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4baf      	ldr	r3, [pc, #700]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800416a:	2180      	movs	r1, #128	; 0x80
 800416c:	0249      	lsls	r1, r1, #9
 800416e:	430a      	orrs	r2, r1
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e027      	b.n	80041c4 <HAL_RCC_OscConfig+0xd4>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	23a0      	movs	r3, #160	; 0xa0
 800417a:	02db      	lsls	r3, r3, #11
 800417c:	429a      	cmp	r2, r3
 800417e:	d10e      	bne.n	800419e <HAL_RCC_OscConfig+0xae>
 8004180:	4ba9      	ldr	r3, [pc, #676]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4ba8      	ldr	r3, [pc, #672]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004186:	2180      	movs	r1, #128	; 0x80
 8004188:	02c9      	lsls	r1, r1, #11
 800418a:	430a      	orrs	r2, r1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	4ba6      	ldr	r3, [pc, #664]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4ba5      	ldr	r3, [pc, #660]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004194:	2180      	movs	r1, #128	; 0x80
 8004196:	0249      	lsls	r1, r1, #9
 8004198:	430a      	orrs	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e012      	b.n	80041c4 <HAL_RCC_OscConfig+0xd4>
 800419e:	4ba2      	ldr	r3, [pc, #648]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4ba1      	ldr	r3, [pc, #644]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80041a4:	49a1      	ldr	r1, [pc, #644]	; (800442c <HAL_RCC_OscConfig+0x33c>)
 80041a6:	400a      	ands	r2, r1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	4b9f      	ldr	r3, [pc, #636]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	025b      	lsls	r3, r3, #9
 80041b2:	4013      	ands	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4b9b      	ldr	r3, [pc, #620]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b9a      	ldr	r3, [pc, #616]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80041be:	499c      	ldr	r1, [pc, #624]	; (8004430 <HAL_RCC_OscConfig+0x340>)
 80041c0:	400a      	ands	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d014      	beq.n	80041f6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fe fb06 	bl	80027dc <HAL_GetTick>
 80041d0:	0003      	movs	r3, r0
 80041d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d6:	f7fe fb01 	bl	80027dc <HAL_GetTick>
 80041da:	0002      	movs	r2, r0
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b64      	cmp	r3, #100	; 0x64
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e2f9      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041e8:	4b8f      	ldr	r3, [pc, #572]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	029b      	lsls	r3, r3, #10
 80041f0:	4013      	ands	r3, r2
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0xe6>
 80041f4:	e015      	b.n	8004222 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f6:	f7fe faf1 	bl	80027dc <HAL_GetTick>
 80041fa:	0003      	movs	r3, r0
 80041fc:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004200:	f7fe faec 	bl	80027dc <HAL_GetTick>
 8004204:	0002      	movs	r2, r0
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e2e4      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004212:	4b85      	ldr	r3, [pc, #532]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	029b      	lsls	r3, r3, #10
 800421a:	4013      	ands	r3, r2
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x110>
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2202      	movs	r2, #2
 8004228:	4013      	ands	r3, r2
 800422a:	d100      	bne.n	800422e <HAL_RCC_OscConfig+0x13e>
 800422c:	e099      	b.n	8004362 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	2220      	movs	r2, #32
 8004238:	4013      	ands	r3, r2
 800423a:	d009      	beq.n	8004250 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800423c:	4b7a      	ldr	r3, [pc, #488]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b79      	ldr	r3, [pc, #484]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004242:	2120      	movs	r1, #32
 8004244:	430a      	orrs	r2, r1
 8004246:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	2220      	movs	r2, #32
 800424c:	4393      	bics	r3, r2
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2b04      	cmp	r3, #4
 8004254:	d005      	beq.n	8004262 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	2b0c      	cmp	r3, #12
 800425a:	d13e      	bne.n	80042da <HAL_RCC_OscConfig+0x1ea>
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d13b      	bne.n	80042da <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004262:	4b71      	ldr	r3, [pc, #452]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2204      	movs	r2, #4
 8004268:	4013      	ands	r3, r2
 800426a:	d004      	beq.n	8004276 <HAL_RCC_OscConfig+0x186>
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e2b2      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004276:	4b6c      	ldr	r3, [pc, #432]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	4a6e      	ldr	r2, [pc, #440]	; (8004434 <HAL_RCC_OscConfig+0x344>)
 800427c:	4013      	ands	r3, r2
 800427e:	0019      	movs	r1, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	021a      	lsls	r2, r3, #8
 8004286:	4b68      	ldr	r3, [pc, #416]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004288:	430a      	orrs	r2, r1
 800428a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800428c:	4b66      	ldr	r3, [pc, #408]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2209      	movs	r2, #9
 8004292:	4393      	bics	r3, r2
 8004294:	0019      	movs	r1, r3
 8004296:	4b64      	ldr	r3, [pc, #400]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429a:	430a      	orrs	r2, r1
 800429c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800429e:	f000 fbeb 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 80042a2:	0001      	movs	r1, r0
 80042a4:	4b60      	ldr	r3, [pc, #384]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	220f      	movs	r2, #15
 80042ac:	4013      	ands	r3, r2
 80042ae:	4a62      	ldr	r2, [pc, #392]	; (8004438 <HAL_RCC_OscConfig+0x348>)
 80042b0:	5cd3      	ldrb	r3, [r2, r3]
 80042b2:	000a      	movs	r2, r1
 80042b4:	40da      	lsrs	r2, r3
 80042b6:	4b61      	ldr	r3, [pc, #388]	; (800443c <HAL_RCC_OscConfig+0x34c>)
 80042b8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80042ba:	4b61      	ldr	r3, [pc, #388]	; (8004440 <HAL_RCC_OscConfig+0x350>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2513      	movs	r5, #19
 80042c0:	197c      	adds	r4, r7, r5
 80042c2:	0018      	movs	r0, r3
 80042c4:	f7fe fa44 	bl	8002750 <HAL_InitTick>
 80042c8:	0003      	movs	r3, r0
 80042ca:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80042cc:	197b      	adds	r3, r7, r5
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d046      	beq.n	8004362 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80042d4:	197b      	adds	r3, r7, r5
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	e280      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d027      	beq.n	8004330 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80042e0:	4b51      	ldr	r3, [pc, #324]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2209      	movs	r2, #9
 80042e6:	4393      	bics	r3, r2
 80042e8:	0019      	movs	r1, r3
 80042ea:	4b4f      	ldr	r3, [pc, #316]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80042ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ee:	430a      	orrs	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f2:	f7fe fa73 	bl	80027dc <HAL_GetTick>
 80042f6:	0003      	movs	r3, r0
 80042f8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042fc:	f7fe fa6e 	bl	80027dc <HAL_GetTick>
 8004300:	0002      	movs	r2, r0
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e266      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800430e:	4b46      	ldr	r3, [pc, #280]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2204      	movs	r2, #4
 8004314:	4013      	ands	r3, r2
 8004316:	d0f1      	beq.n	80042fc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004318:	4b43      	ldr	r3, [pc, #268]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	4a45      	ldr	r2, [pc, #276]	; (8004434 <HAL_RCC_OscConfig+0x344>)
 800431e:	4013      	ands	r3, r2
 8004320:	0019      	movs	r1, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	021a      	lsls	r2, r3, #8
 8004328:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	e018      	b.n	8004362 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004330:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4b3c      	ldr	r3, [pc, #240]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004336:	2101      	movs	r1, #1
 8004338:	438a      	bics	r2, r1
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fe fa4e 	bl	80027dc <HAL_GetTick>
 8004340:	0003      	movs	r3, r0
 8004342:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004346:	f7fe fa49 	bl	80027dc <HAL_GetTick>
 800434a:	0002      	movs	r2, r0
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e241      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004358:	4b33      	ldr	r3, [pc, #204]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2204      	movs	r2, #4
 800435e:	4013      	ands	r3, r2
 8004360:	d1f1      	bne.n	8004346 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2210      	movs	r2, #16
 8004368:	4013      	ands	r3, r2
 800436a:	d100      	bne.n	800436e <HAL_RCC_OscConfig+0x27e>
 800436c:	e0a1      	b.n	80044b2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d140      	bne.n	80043f6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004374:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	2380      	movs	r3, #128	; 0x80
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4013      	ands	r3, r2
 800437e:	d005      	beq.n	800438c <HAL_RCC_OscConfig+0x29c>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e227      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800438c:	4b26      	ldr	r3, [pc, #152]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4a2c      	ldr	r2, [pc, #176]	; (8004444 <HAL_RCC_OscConfig+0x354>)
 8004392:	4013      	ands	r3, r2
 8004394:	0019      	movs	r1, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1a      	ldr	r2, [r3, #32]
 800439a:	4b23      	ldr	r3, [pc, #140]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800439c:	430a      	orrs	r2, r1
 800439e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043a0:	4b21      	ldr	r3, [pc, #132]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	0a19      	lsrs	r1, r3, #8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	061a      	lsls	r2, r3, #24
 80043ae:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80043b0:	430a      	orrs	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	0b5b      	lsrs	r3, r3, #13
 80043ba:	3301      	adds	r3, #1
 80043bc:	2280      	movs	r2, #128	; 0x80
 80043be:	0212      	lsls	r2, r2, #8
 80043c0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80043c2:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	091b      	lsrs	r3, r3, #4
 80043c8:	210f      	movs	r1, #15
 80043ca:	400b      	ands	r3, r1
 80043cc:	491a      	ldr	r1, [pc, #104]	; (8004438 <HAL_RCC_OscConfig+0x348>)
 80043ce:	5ccb      	ldrb	r3, [r1, r3]
 80043d0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80043d2:	4b1a      	ldr	r3, [pc, #104]	; (800443c <HAL_RCC_OscConfig+0x34c>)
 80043d4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80043d6:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <HAL_RCC_OscConfig+0x350>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2513      	movs	r5, #19
 80043dc:	197c      	adds	r4, r7, r5
 80043de:	0018      	movs	r0, r3
 80043e0:	f7fe f9b6 	bl	8002750 <HAL_InitTick>
 80043e4:	0003      	movs	r3, r0
 80043e6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80043e8:	197b      	adds	r3, r7, r5
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d060      	beq.n	80044b2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80043f0:	197b      	adds	r3, r7, r5
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	e1f2      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d03f      	beq.n	800447e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043fe:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004404:	2180      	movs	r1, #128	; 0x80
 8004406:	0049      	lsls	r1, r1, #1
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fe f9e6 	bl	80027dc <HAL_GetTick>
 8004410:	0003      	movs	r3, r0
 8004412:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004414:	e018      	b.n	8004448 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004416:	f7fe f9e1 	bl	80027dc <HAL_GetTick>
 800441a:	0002      	movs	r2, r0
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d911      	bls.n	8004448 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e1d9      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
 8004428:	40021000 	.word	0x40021000
 800442c:	fffeffff 	.word	0xfffeffff
 8004430:	fffbffff 	.word	0xfffbffff
 8004434:	ffffe0ff 	.word	0xffffe0ff
 8004438:	08008794 	.word	0x08008794
 800443c:	20000000 	.word	0x20000000
 8004440:	20000004 	.word	0x20000004
 8004444:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004448:	4bc9      	ldr	r3, [pc, #804]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4013      	ands	r3, r2
 8004452:	d0e0      	beq.n	8004416 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004454:	4bc6      	ldr	r3, [pc, #792]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4ac6      	ldr	r2, [pc, #792]	; (8004774 <HAL_RCC_OscConfig+0x684>)
 800445a:	4013      	ands	r3, r2
 800445c:	0019      	movs	r1, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1a      	ldr	r2, [r3, #32]
 8004462:	4bc3      	ldr	r3, [pc, #780]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004468:	4bc1      	ldr	r3, [pc, #772]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	0a19      	lsrs	r1, r3, #8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	061a      	lsls	r2, r3, #24
 8004476:	4bbe      	ldr	r3, [pc, #760]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
 800447c:	e019      	b.n	80044b2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800447e:	4bbc      	ldr	r3, [pc, #752]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4bbb      	ldr	r3, [pc, #748]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004484:	49bc      	ldr	r1, [pc, #752]	; (8004778 <HAL_RCC_OscConfig+0x688>)
 8004486:	400a      	ands	r2, r1
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448a:	f7fe f9a7 	bl	80027dc <HAL_GetTick>
 800448e:	0003      	movs	r3, r0
 8004490:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004494:	f7fe f9a2 	bl	80027dc <HAL_GetTick>
 8004498:	0002      	movs	r2, r0
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e19a      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80044a6:	4bb2      	ldr	r3, [pc, #712]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	2380      	movs	r3, #128	; 0x80
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4013      	ands	r3, r2
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2208      	movs	r2, #8
 80044b8:	4013      	ands	r3, r2
 80044ba:	d036      	beq.n	800452a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d019      	beq.n	80044f8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044c4:	4baa      	ldr	r3, [pc, #680]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80044c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044c8:	4ba9      	ldr	r3, [pc, #676]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80044ca:	2101      	movs	r1, #1
 80044cc:	430a      	orrs	r2, r1
 80044ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d0:	f7fe f984 	bl	80027dc <HAL_GetTick>
 80044d4:	0003      	movs	r3, r0
 80044d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044da:	f7fe f97f 	bl	80027dc <HAL_GetTick>
 80044de:	0002      	movs	r2, r0
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e177      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044ec:	4ba0      	ldr	r3, [pc, #640]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	2202      	movs	r2, #2
 80044f2:	4013      	ands	r3, r2
 80044f4:	d0f1      	beq.n	80044da <HAL_RCC_OscConfig+0x3ea>
 80044f6:	e018      	b.n	800452a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044f8:	4b9d      	ldr	r3, [pc, #628]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80044fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044fc:	4b9c      	ldr	r3, [pc, #624]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80044fe:	2101      	movs	r1, #1
 8004500:	438a      	bics	r2, r1
 8004502:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004504:	f7fe f96a 	bl	80027dc <HAL_GetTick>
 8004508:	0003      	movs	r3, r0
 800450a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800450e:	f7fe f965 	bl	80027dc <HAL_GetTick>
 8004512:	0002      	movs	r2, r0
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e15d      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004520:	4b93      	ldr	r3, [pc, #588]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004524:	2202      	movs	r2, #2
 8004526:	4013      	ands	r3, r2
 8004528:	d1f1      	bne.n	800450e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2204      	movs	r2, #4
 8004530:	4013      	ands	r3, r2
 8004532:	d100      	bne.n	8004536 <HAL_RCC_OscConfig+0x446>
 8004534:	e0ae      	b.n	8004694 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004536:	2023      	movs	r0, #35	; 0x23
 8004538:	183b      	adds	r3, r7, r0
 800453a:	2200      	movs	r2, #0
 800453c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800453e:	4b8c      	ldr	r3, [pc, #560]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	055b      	lsls	r3, r3, #21
 8004546:	4013      	ands	r3, r2
 8004548:	d109      	bne.n	800455e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800454a:	4b89      	ldr	r3, [pc, #548]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 800454c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800454e:	4b88      	ldr	r3, [pc, #544]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004550:	2180      	movs	r1, #128	; 0x80
 8004552:	0549      	lsls	r1, r1, #21
 8004554:	430a      	orrs	r2, r1
 8004556:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004558:	183b      	adds	r3, r7, r0
 800455a:	2201      	movs	r2, #1
 800455c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455e:	4b87      	ldr	r3, [pc, #540]	; (800477c <HAL_RCC_OscConfig+0x68c>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	2380      	movs	r3, #128	; 0x80
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	4013      	ands	r3, r2
 8004568:	d11a      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456a:	4b84      	ldr	r3, [pc, #528]	; (800477c <HAL_RCC_OscConfig+0x68c>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4b83      	ldr	r3, [pc, #524]	; (800477c <HAL_RCC_OscConfig+0x68c>)
 8004570:	2180      	movs	r1, #128	; 0x80
 8004572:	0049      	lsls	r1, r1, #1
 8004574:	430a      	orrs	r2, r1
 8004576:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004578:	f7fe f930 	bl	80027dc <HAL_GetTick>
 800457c:	0003      	movs	r3, r0
 800457e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004582:	f7fe f92b 	bl	80027dc <HAL_GetTick>
 8004586:	0002      	movs	r2, r0
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b64      	cmp	r3, #100	; 0x64
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e123      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004594:	4b79      	ldr	r3, [pc, #484]	; (800477c <HAL_RCC_OscConfig+0x68c>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	4013      	ands	r3, r2
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	2380      	movs	r3, #128	; 0x80
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_OscConfig+0x4cc>
 80045ac:	4b70      	ldr	r3, [pc, #448]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80045ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045b0:	4b6f      	ldr	r3, [pc, #444]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80045b2:	2180      	movs	r1, #128	; 0x80
 80045b4:	0049      	lsls	r1, r1, #1
 80045b6:	430a      	orrs	r2, r1
 80045b8:	651a      	str	r2, [r3, #80]	; 0x50
 80045ba:	e031      	b.n	8004620 <HAL_RCC_OscConfig+0x530>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10c      	bne.n	80045de <HAL_RCC_OscConfig+0x4ee>
 80045c4:	4b6a      	ldr	r3, [pc, #424]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80045c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045c8:	4b69      	ldr	r3, [pc, #420]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80045ca:	496b      	ldr	r1, [pc, #428]	; (8004778 <HAL_RCC_OscConfig+0x688>)
 80045cc:	400a      	ands	r2, r1
 80045ce:	651a      	str	r2, [r3, #80]	; 0x50
 80045d0:	4b67      	ldr	r3, [pc, #412]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80045d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045d4:	4b66      	ldr	r3, [pc, #408]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80045d6:	496a      	ldr	r1, [pc, #424]	; (8004780 <HAL_RCC_OscConfig+0x690>)
 80045d8:	400a      	ands	r2, r1
 80045da:	651a      	str	r2, [r3, #80]	; 0x50
 80045dc:	e020      	b.n	8004620 <HAL_RCC_OscConfig+0x530>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	23a0      	movs	r3, #160	; 0xa0
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d10e      	bne.n	8004608 <HAL_RCC_OscConfig+0x518>
 80045ea:	4b61      	ldr	r3, [pc, #388]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80045ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045ee:	4b60      	ldr	r3, [pc, #384]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80045f0:	2180      	movs	r1, #128	; 0x80
 80045f2:	00c9      	lsls	r1, r1, #3
 80045f4:	430a      	orrs	r2, r1
 80045f6:	651a      	str	r2, [r3, #80]	; 0x50
 80045f8:	4b5d      	ldr	r3, [pc, #372]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80045fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045fc:	4b5c      	ldr	r3, [pc, #368]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80045fe:	2180      	movs	r1, #128	; 0x80
 8004600:	0049      	lsls	r1, r1, #1
 8004602:	430a      	orrs	r2, r1
 8004604:	651a      	str	r2, [r3, #80]	; 0x50
 8004606:	e00b      	b.n	8004620 <HAL_RCC_OscConfig+0x530>
 8004608:	4b59      	ldr	r3, [pc, #356]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 800460a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800460c:	4b58      	ldr	r3, [pc, #352]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 800460e:	495a      	ldr	r1, [pc, #360]	; (8004778 <HAL_RCC_OscConfig+0x688>)
 8004610:	400a      	ands	r2, r1
 8004612:	651a      	str	r2, [r3, #80]	; 0x50
 8004614:	4b56      	ldr	r3, [pc, #344]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004616:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004618:	4b55      	ldr	r3, [pc, #340]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 800461a:	4959      	ldr	r1, [pc, #356]	; (8004780 <HAL_RCC_OscConfig+0x690>)
 800461c:	400a      	ands	r2, r1
 800461e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d015      	beq.n	8004654 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004628:	f7fe f8d8 	bl	80027dc <HAL_GetTick>
 800462c:	0003      	movs	r3, r0
 800462e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004630:	e009      	b.n	8004646 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004632:	f7fe f8d3 	bl	80027dc <HAL_GetTick>
 8004636:	0002      	movs	r2, r0
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	4a51      	ldr	r2, [pc, #324]	; (8004784 <HAL_RCC_OscConfig+0x694>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e0ca      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004646:	4b4a      	ldr	r3, [pc, #296]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4013      	ands	r3, r2
 8004650:	d0ef      	beq.n	8004632 <HAL_RCC_OscConfig+0x542>
 8004652:	e014      	b.n	800467e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004654:	f7fe f8c2 	bl	80027dc <HAL_GetTick>
 8004658:	0003      	movs	r3, r0
 800465a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800465c:	e009      	b.n	8004672 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800465e:	f7fe f8bd 	bl	80027dc <HAL_GetTick>
 8004662:	0002      	movs	r2, r0
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	4a46      	ldr	r2, [pc, #280]	; (8004784 <HAL_RCC_OscConfig+0x694>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e0b4      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004672:	4b3f      	ldr	r3, [pc, #252]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004676:	2380      	movs	r3, #128	; 0x80
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4013      	ands	r3, r2
 800467c:	d1ef      	bne.n	800465e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800467e:	2323      	movs	r3, #35	; 0x23
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d105      	bne.n	8004694 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004688:	4b39      	ldr	r3, [pc, #228]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 800468a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468c:	4b38      	ldr	r3, [pc, #224]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 800468e:	493e      	ldr	r1, [pc, #248]	; (8004788 <HAL_RCC_OscConfig+0x698>)
 8004690:	400a      	ands	r2, r1
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	d100      	bne.n	800469e <HAL_RCC_OscConfig+0x5ae>
 800469c:	e09d      	b.n	80047da <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d100      	bne.n	80046a6 <HAL_RCC_OscConfig+0x5b6>
 80046a4:	e076      	b.n	8004794 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d145      	bne.n	800473a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ae:	4b30      	ldr	r3, [pc, #192]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b2f      	ldr	r3, [pc, #188]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80046b4:	4935      	ldr	r1, [pc, #212]	; (800478c <HAL_RCC_OscConfig+0x69c>)
 80046b6:	400a      	ands	r2, r1
 80046b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ba:	f7fe f88f 	bl	80027dc <HAL_GetTick>
 80046be:	0003      	movs	r3, r0
 80046c0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fe f88a 	bl	80027dc <HAL_GetTick>
 80046c8:	0002      	movs	r2, r0
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e082      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046d6:	4b26      	ldr	r3, [pc, #152]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	049b      	lsls	r3, r3, #18
 80046de:	4013      	ands	r3, r2
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e2:	4b23      	ldr	r3, [pc, #140]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	4a2a      	ldr	r2, [pc, #168]	; (8004790 <HAL_RCC_OscConfig+0x6a0>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	0019      	movs	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	431a      	orrs	r2, r3
 80046fc:	4b1c      	ldr	r3, [pc, #112]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80046fe:	430a      	orrs	r2, r1
 8004700:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004708:	2180      	movs	r1, #128	; 0x80
 800470a:	0449      	lsls	r1, r1, #17
 800470c:	430a      	orrs	r2, r1
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fe f864 	bl	80027dc <HAL_GetTick>
 8004714:	0003      	movs	r3, r0
 8004716:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800471a:	f7fe f85f 	bl	80027dc <HAL_GetTick>
 800471e:	0002      	movs	r2, r0
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e057      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800472c:	4b10      	ldr	r3, [pc, #64]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	049b      	lsls	r3, r3, #18
 8004734:	4013      	ands	r3, r2
 8004736:	d0f0      	beq.n	800471a <HAL_RCC_OscConfig+0x62a>
 8004738:	e04f      	b.n	80047da <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473a:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004740:	4912      	ldr	r1, [pc, #72]	; (800478c <HAL_RCC_OscConfig+0x69c>)
 8004742:	400a      	ands	r2, r1
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fe f849 	bl	80027dc <HAL_GetTick>
 800474a:	0003      	movs	r3, r0
 800474c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004750:	f7fe f844 	bl	80027dc <HAL_GetTick>
 8004754:	0002      	movs	r2, r0
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e03c      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004762:	4b03      	ldr	r3, [pc, #12]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	049b      	lsls	r3, r3, #18
 800476a:	4013      	ands	r3, r2
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x660>
 800476e:	e034      	b.n	80047da <HAL_RCC_OscConfig+0x6ea>
 8004770:	40021000 	.word	0x40021000
 8004774:	ffff1fff 	.word	0xffff1fff
 8004778:	fffffeff 	.word	0xfffffeff
 800477c:	40007000 	.word	0x40007000
 8004780:	fffffbff 	.word	0xfffffbff
 8004784:	00001388 	.word	0x00001388
 8004788:	efffffff 	.word	0xefffffff
 800478c:	feffffff 	.word	0xfeffffff
 8004790:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e01d      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047a0:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_RCC_OscConfig+0x6f4>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	2380      	movs	r3, #128	; 0x80
 80047aa:	025b      	lsls	r3, r3, #9
 80047ac:	401a      	ands	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d10f      	bne.n	80047d6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	23f0      	movs	r3, #240	; 0xf0
 80047ba:	039b      	lsls	r3, r3, #14
 80047bc:	401a      	ands	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	23c0      	movs	r3, #192	; 0xc0
 80047ca:	041b      	lsls	r3, r3, #16
 80047cc:	401a      	ands	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d001      	beq.n	80047da <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	b00a      	add	sp, #40	; 0x28
 80047e2:	bdb0      	pop	{r4, r5, r7, pc}
 80047e4:	40021000 	.word	0x40021000

080047e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e8:	b5b0      	push	{r4, r5, r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e128      	b.n	8004a4e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047fc:	4b96      	ldr	r3, [pc, #600]	; (8004a58 <HAL_RCC_ClockConfig+0x270>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2201      	movs	r2, #1
 8004802:	4013      	ands	r3, r2
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d91e      	bls.n	8004848 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b93      	ldr	r3, [pc, #588]	; (8004a58 <HAL_RCC_ClockConfig+0x270>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2201      	movs	r2, #1
 8004810:	4393      	bics	r3, r2
 8004812:	0019      	movs	r1, r3
 8004814:	4b90      	ldr	r3, [pc, #576]	; (8004a58 <HAL_RCC_ClockConfig+0x270>)
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800481c:	f7fd ffde 	bl	80027dc <HAL_GetTick>
 8004820:	0003      	movs	r3, r0
 8004822:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004824:	e009      	b.n	800483a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004826:	f7fd ffd9 	bl	80027dc <HAL_GetTick>
 800482a:	0002      	movs	r2, r0
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	4a8a      	ldr	r2, [pc, #552]	; (8004a5c <HAL_RCC_ClockConfig+0x274>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e109      	b.n	8004a4e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b87      	ldr	r3, [pc, #540]	; (8004a58 <HAL_RCC_ClockConfig+0x270>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2201      	movs	r2, #1
 8004840:	4013      	ands	r3, r2
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d1ee      	bne.n	8004826 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2202      	movs	r2, #2
 800484e:	4013      	ands	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004852:	4b83      	ldr	r3, [pc, #524]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	22f0      	movs	r2, #240	; 0xf0
 8004858:	4393      	bics	r3, r2
 800485a:	0019      	movs	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	4b7f      	ldr	r3, [pc, #508]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 8004862:	430a      	orrs	r2, r1
 8004864:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2201      	movs	r2, #1
 800486c:	4013      	ands	r3, r2
 800486e:	d100      	bne.n	8004872 <HAL_RCC_ClockConfig+0x8a>
 8004870:	e089      	b.n	8004986 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d107      	bne.n	800488a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800487a:	4b79      	ldr	r3, [pc, #484]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	029b      	lsls	r3, r3, #10
 8004882:	4013      	ands	r3, r2
 8004884:	d120      	bne.n	80048c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e0e1      	b.n	8004a4e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b03      	cmp	r3, #3
 8004890:	d107      	bne.n	80048a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004892:	4b73      	ldr	r3, [pc, #460]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	2380      	movs	r3, #128	; 0x80
 8004898:	049b      	lsls	r3, r3, #18
 800489a:	4013      	ands	r3, r2
 800489c:	d114      	bne.n	80048c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e0d5      	b.n	8004a4e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d106      	bne.n	80048b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048aa:	4b6d      	ldr	r3, [pc, #436]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2204      	movs	r2, #4
 80048b0:	4013      	ands	r3, r2
 80048b2:	d109      	bne.n	80048c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0ca      	b.n	8004a4e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80048b8:	4b69      	ldr	r3, [pc, #420]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4013      	ands	r3, r2
 80048c2:	d101      	bne.n	80048c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0c2      	b.n	8004a4e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048c8:	4b65      	ldr	r3, [pc, #404]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2203      	movs	r2, #3
 80048ce:	4393      	bics	r3, r2
 80048d0:	0019      	movs	r1, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	4b62      	ldr	r3, [pc, #392]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 80048d8:	430a      	orrs	r2, r1
 80048da:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048dc:	f7fd ff7e 	bl	80027dc <HAL_GetTick>
 80048e0:	0003      	movs	r3, r0
 80048e2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d111      	bne.n	8004910 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80048ec:	e009      	b.n	8004902 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ee:	f7fd ff75 	bl	80027dc <HAL_GetTick>
 80048f2:	0002      	movs	r2, r0
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	4a58      	ldr	r2, [pc, #352]	; (8004a5c <HAL_RCC_ClockConfig+0x274>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e0a5      	b.n	8004a4e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004902:	4b57      	ldr	r3, [pc, #348]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	220c      	movs	r2, #12
 8004908:	4013      	ands	r3, r2
 800490a:	2b08      	cmp	r3, #8
 800490c:	d1ef      	bne.n	80048ee <HAL_RCC_ClockConfig+0x106>
 800490e:	e03a      	b.n	8004986 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b03      	cmp	r3, #3
 8004916:	d111      	bne.n	800493c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004918:	e009      	b.n	800492e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491a:	f7fd ff5f 	bl	80027dc <HAL_GetTick>
 800491e:	0002      	movs	r2, r0
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	4a4d      	ldr	r2, [pc, #308]	; (8004a5c <HAL_RCC_ClockConfig+0x274>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e08f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800492e:	4b4c      	ldr	r3, [pc, #304]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	220c      	movs	r2, #12
 8004934:	4013      	ands	r3, r2
 8004936:	2b0c      	cmp	r3, #12
 8004938:	d1ef      	bne.n	800491a <HAL_RCC_ClockConfig+0x132>
 800493a:	e024      	b.n	8004986 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d11b      	bne.n	800497c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004944:	e009      	b.n	800495a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004946:	f7fd ff49 	bl	80027dc <HAL_GetTick>
 800494a:	0002      	movs	r2, r0
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	4a42      	ldr	r2, [pc, #264]	; (8004a5c <HAL_RCC_ClockConfig+0x274>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e079      	b.n	8004a4e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800495a:	4b41      	ldr	r3, [pc, #260]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	220c      	movs	r2, #12
 8004960:	4013      	ands	r3, r2
 8004962:	2b04      	cmp	r3, #4
 8004964:	d1ef      	bne.n	8004946 <HAL_RCC_ClockConfig+0x15e>
 8004966:	e00e      	b.n	8004986 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004968:	f7fd ff38 	bl	80027dc <HAL_GetTick>
 800496c:	0002      	movs	r2, r0
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	4a3a      	ldr	r2, [pc, #232]	; (8004a5c <HAL_RCC_ClockConfig+0x274>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d901      	bls.n	800497c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e068      	b.n	8004a4e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800497c:	4b38      	ldr	r3, [pc, #224]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	220c      	movs	r2, #12
 8004982:	4013      	ands	r3, r2
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004986:	4b34      	ldr	r3, [pc, #208]	; (8004a58 <HAL_RCC_ClockConfig+0x270>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2201      	movs	r2, #1
 800498c:	4013      	ands	r3, r2
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d21e      	bcs.n	80049d2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004994:	4b30      	ldr	r3, [pc, #192]	; (8004a58 <HAL_RCC_ClockConfig+0x270>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2201      	movs	r2, #1
 800499a:	4393      	bics	r3, r2
 800499c:	0019      	movs	r1, r3
 800499e:	4b2e      	ldr	r3, [pc, #184]	; (8004a58 <HAL_RCC_ClockConfig+0x270>)
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049a6:	f7fd ff19 	bl	80027dc <HAL_GetTick>
 80049aa:	0003      	movs	r3, r0
 80049ac:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	e009      	b.n	80049c4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b0:	f7fd ff14 	bl	80027dc <HAL_GetTick>
 80049b4:	0002      	movs	r2, r0
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	4a28      	ldr	r2, [pc, #160]	; (8004a5c <HAL_RCC_ClockConfig+0x274>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e044      	b.n	8004a4e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c4:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <HAL_RCC_ClockConfig+0x270>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2201      	movs	r2, #1
 80049ca:	4013      	ands	r3, r2
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d1ee      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2204      	movs	r2, #4
 80049d8:	4013      	ands	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049dc:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4a20      	ldr	r2, [pc, #128]	; (8004a64 <HAL_RCC_ClockConfig+0x27c>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	0019      	movs	r1, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 80049ec:	430a      	orrs	r2, r1
 80049ee:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2208      	movs	r2, #8
 80049f6:	4013      	ands	r3, r2
 80049f8:	d00a      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049fa:	4b19      	ldr	r3, [pc, #100]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	4a1a      	ldr	r2, [pc, #104]	; (8004a68 <HAL_RCC_ClockConfig+0x280>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	0019      	movs	r1, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	00da      	lsls	r2, r3, #3
 8004a0a:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a10:	f000 f832 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8004a14:	0001      	movs	r1, r0
 8004a16:	4b12      	ldr	r3, [pc, #72]	; (8004a60 <HAL_RCC_ClockConfig+0x278>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	220f      	movs	r2, #15
 8004a1e:	4013      	ands	r3, r2
 8004a20:	4a12      	ldr	r2, [pc, #72]	; (8004a6c <HAL_RCC_ClockConfig+0x284>)
 8004a22:	5cd3      	ldrb	r3, [r2, r3]
 8004a24:	000a      	movs	r2, r1
 8004a26:	40da      	lsrs	r2, r3
 8004a28:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <HAL_RCC_ClockConfig+0x288>)
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a2c:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <HAL_RCC_ClockConfig+0x28c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	250b      	movs	r5, #11
 8004a32:	197c      	adds	r4, r7, r5
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7fd fe8b 	bl	8002750 <HAL_InitTick>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004a3e:	197b      	adds	r3, r7, r5
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004a46:	197b      	adds	r3, r7, r5
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	e000      	b.n	8004a4e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	0018      	movs	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b004      	add	sp, #16
 8004a54:	bdb0      	pop	{r4, r5, r7, pc}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	40022000 	.word	0x40022000
 8004a5c:	00001388 	.word	0x00001388
 8004a60:	40021000 	.word	0x40021000
 8004a64:	fffff8ff 	.word	0xfffff8ff
 8004a68:	ffffc7ff 	.word	0xffffc7ff
 8004a6c:	08008794 	.word	0x08008794
 8004a70:	20000000 	.word	0x20000000
 8004a74:	20000004 	.word	0x20000004

08004a78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a78:	b5b0      	push	{r4, r5, r7, lr}
 8004a7a:	b08e      	sub	sp, #56	; 0x38
 8004a7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004a7e:	4b4c      	ldr	r3, [pc, #304]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a86:	230c      	movs	r3, #12
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b0c      	cmp	r3, #12
 8004a8c:	d014      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8004a8e:	d900      	bls.n	8004a92 <HAL_RCC_GetSysClockFreq+0x1a>
 8004a90:	e07b      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x112>
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d002      	beq.n	8004a9c <HAL_RCC_GetSysClockFreq+0x24>
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d00b      	beq.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a9a:	e076      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004a9c:	4b44      	ldr	r3, [pc, #272]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2210      	movs	r2, #16
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d002      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004aa6:	4b43      	ldr	r3, [pc, #268]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004aa8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004aaa:	e07c      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004aac:	4b42      	ldr	r3, [pc, #264]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x140>)
 8004aae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ab0:	e079      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ab2:	4b42      	ldr	r3, [pc, #264]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x144>)
 8004ab4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ab6:	e076      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	0c9a      	lsrs	r2, r3, #18
 8004abc:	230f      	movs	r3, #15
 8004abe:	401a      	ands	r2, r3
 8004ac0:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x148>)
 8004ac2:	5c9b      	ldrb	r3, [r3, r2]
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	0d9a      	lsrs	r2, r3, #22
 8004aca:	2303      	movs	r3, #3
 8004acc:	4013      	ands	r3, r2
 8004ace:	3301      	adds	r3, #1
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ad2:	4b37      	ldr	r3, [pc, #220]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	2380      	movs	r3, #128	; 0x80
 8004ad8:	025b      	lsls	r3, r3, #9
 8004ada:	4013      	ands	r3, r2
 8004adc:	d01a      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	4a35      	ldr	r2, [pc, #212]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x144>)
 8004ae8:	2300      	movs	r3, #0
 8004aea:	69b8      	ldr	r0, [r7, #24]
 8004aec:	69f9      	ldr	r1, [r7, #28]
 8004aee:	f7fb fbc1 	bl	8000274 <__aeabi_lmul>
 8004af2:	0002      	movs	r2, r0
 8004af4:	000b      	movs	r3, r1
 8004af6:	0010      	movs	r0, r2
 8004af8:	0019      	movs	r1, r3
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f7fb fb95 	bl	8000234 <__aeabi_uldivmod>
 8004b0a:	0002      	movs	r2, r0
 8004b0c:	000b      	movs	r3, r1
 8004b0e:	0013      	movs	r3, r2
 8004b10:	637b      	str	r3, [r7, #52]	; 0x34
 8004b12:	e037      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004b14:	4b26      	ldr	r3, [pc, #152]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2210      	movs	r2, #16
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d01a      	beq.n	8004b54 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	4a23      	ldr	r2, [pc, #140]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004b28:	2300      	movs	r3, #0
 8004b2a:	68b8      	ldr	r0, [r7, #8]
 8004b2c:	68f9      	ldr	r1, [r7, #12]
 8004b2e:	f7fb fba1 	bl	8000274 <__aeabi_lmul>
 8004b32:	0002      	movs	r2, r0
 8004b34:	000b      	movs	r3, r1
 8004b36:	0010      	movs	r0, r2
 8004b38:	0019      	movs	r1, r3
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	603b      	str	r3, [r7, #0]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f7fb fb75 	bl	8000234 <__aeabi_uldivmod>
 8004b4a:	0002      	movs	r2, r0
 8004b4c:	000b      	movs	r3, r1
 8004b4e:	0013      	movs	r3, r2
 8004b50:	637b      	str	r3, [r7, #52]	; 0x34
 8004b52:	e017      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	0018      	movs	r0, r3
 8004b58:	2300      	movs	r3, #0
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	4a16      	ldr	r2, [pc, #88]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x140>)
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f7fb fb88 	bl	8000274 <__aeabi_lmul>
 8004b64:	0002      	movs	r2, r0
 8004b66:	000b      	movs	r3, r1
 8004b68:	0010      	movs	r0, r2
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	001c      	movs	r4, r3
 8004b70:	2300      	movs	r3, #0
 8004b72:	001d      	movs	r5, r3
 8004b74:	0022      	movs	r2, r4
 8004b76:	002b      	movs	r3, r5
 8004b78:	f7fb fb5c 	bl	8000234 <__aeabi_uldivmod>
 8004b7c:	0002      	movs	r2, r0
 8004b7e:	000b      	movs	r3, r1
 8004b80:	0013      	movs	r3, r2
 8004b82:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b88:	e00d      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004b8a:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	0b5b      	lsrs	r3, r3, #13
 8004b90:	2207      	movs	r2, #7
 8004b92:	4013      	ands	r3, r2
 8004b94:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	2280      	movs	r2, #128	; 0x80
 8004b9c:	0212      	lsls	r2, r2, #8
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	0013      	movs	r3, r2
 8004ba2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ba4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b00e      	add	sp, #56	; 0x38
 8004bae:	bdb0      	pop	{r4, r5, r7, pc}
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	003d0900 	.word	0x003d0900
 8004bb8:	00f42400 	.word	0x00f42400
 8004bbc:	007a1200 	.word	0x007a1200
 8004bc0:	080087ac 	.word	0x080087ac

08004bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bc8:	4b02      	ldr	r3, [pc, #8]	; (8004bd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bca:	681b      	ldr	r3, [r3, #0]
}
 8004bcc:	0018      	movs	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	20000000 	.word	0x20000000

08004bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bdc:	f7ff fff2 	bl	8004bc4 <HAL_RCC_GetHCLKFreq>
 8004be0:	0001      	movs	r1, r0
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	0a1b      	lsrs	r3, r3, #8
 8004be8:	2207      	movs	r2, #7
 8004bea:	4013      	ands	r3, r2
 8004bec:	4a04      	ldr	r2, [pc, #16]	; (8004c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bee:	5cd3      	ldrb	r3, [r2, r3]
 8004bf0:	40d9      	lsrs	r1, r3
 8004bf2:	000b      	movs	r3, r1
}
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	080087a4 	.word	0x080087a4

08004c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c08:	f7ff ffdc 	bl	8004bc4 <HAL_RCC_GetHCLKFreq>
 8004c0c:	0001      	movs	r1, r0
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	0adb      	lsrs	r3, r3, #11
 8004c14:	2207      	movs	r2, #7
 8004c16:	4013      	ands	r3, r2
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c1a:	5cd3      	ldrb	r3, [r2, r3]
 8004c1c:	40d9      	lsrs	r1, r3
 8004c1e:	000b      	movs	r3, r1
}
 8004c20:	0018      	movs	r0, r3
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	080087a4 	.word	0x080087a4

08004c30 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004c38:	2017      	movs	r0, #23
 8004c3a:	183b      	adds	r3, r7, r0
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2220      	movs	r2, #32
 8004c46:	4013      	ands	r3, r2
 8004c48:	d100      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004c4a:	e0c7      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c4c:	4b93      	ldr	r3, [pc, #588]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c50:	2380      	movs	r3, #128	; 0x80
 8004c52:	055b      	lsls	r3, r3, #21
 8004c54:	4013      	ands	r3, r2
 8004c56:	d109      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c58:	4b90      	ldr	r3, [pc, #576]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5c:	4b8f      	ldr	r3, [pc, #572]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c5e:	2180      	movs	r1, #128	; 0x80
 8004c60:	0549      	lsls	r1, r1, #21
 8004c62:	430a      	orrs	r2, r1
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004c66:	183b      	adds	r3, r7, r0
 8004c68:	2201      	movs	r2, #1
 8004c6a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6c:	4b8c      	ldr	r3, [pc, #560]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	2380      	movs	r3, #128	; 0x80
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	4013      	ands	r3, r2
 8004c76:	d11a      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c78:	4b89      	ldr	r3, [pc, #548]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4b88      	ldr	r3, [pc, #544]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004c7e:	2180      	movs	r1, #128	; 0x80
 8004c80:	0049      	lsls	r1, r1, #1
 8004c82:	430a      	orrs	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c86:	f7fd fda9 	bl	80027dc <HAL_GetTick>
 8004c8a:	0003      	movs	r3, r0
 8004c8c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c90:	f7fd fda4 	bl	80027dc <HAL_GetTick>
 8004c94:	0002      	movs	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b64      	cmp	r3, #100	; 0x64
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e0f8      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca2:	4b7f      	ldr	r3, [pc, #508]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	4013      	ands	r3, r2
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004cae:	4b7b      	ldr	r3, [pc, #492]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	23c0      	movs	r3, #192	; 0xc0
 8004cb4:	039b      	lsls	r3, r3, #14
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	23c0      	movs	r3, #192	; 0xc0
 8004cc0:	039b      	lsls	r3, r3, #14
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d013      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	23c0      	movs	r3, #192	; 0xc0
 8004cd0:	029b      	lsls	r3, r3, #10
 8004cd2:	401a      	ands	r2, r3
 8004cd4:	23c0      	movs	r3, #192	; 0xc0
 8004cd6:	029b      	lsls	r3, r3, #10
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d10a      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004cdc:	4b6f      	ldr	r3, [pc, #444]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	2380      	movs	r3, #128	; 0x80
 8004ce2:	029b      	lsls	r3, r3, #10
 8004ce4:	401a      	ands	r2, r3
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	029b      	lsls	r3, r3, #10
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e0d0      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x264>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004cf2:	4b6a      	ldr	r3, [pc, #424]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004cf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cf6:	23c0      	movs	r3, #192	; 0xc0
 8004cf8:	029b      	lsls	r3, r3, #10
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d03b      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	23c0      	movs	r3, #192	; 0xc0
 8004d0a:	029b      	lsls	r3, r3, #10
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d033      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d02e      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004d1e:	4b5f      	ldr	r3, [pc, #380]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d22:	4a60      	ldr	r2, [pc, #384]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d28:	4b5c      	ldr	r3, [pc, #368]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d2c:	4b5b      	ldr	r3, [pc, #364]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d2e:	2180      	movs	r1, #128	; 0x80
 8004d30:	0309      	lsls	r1, r1, #12
 8004d32:	430a      	orrs	r2, r1
 8004d34:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d36:	4b59      	ldr	r3, [pc, #356]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d3a:	4b58      	ldr	r3, [pc, #352]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d3c:	495a      	ldr	r1, [pc, #360]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004d3e:	400a      	ands	r2, r1
 8004d40:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004d42:	4b56      	ldr	r3, [pc, #344]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d014      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d52:	f7fd fd43 	bl	80027dc <HAL_GetTick>
 8004d56:	0003      	movs	r3, r0
 8004d58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d5a:	e009      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d5c:	f7fd fd3e 	bl	80027dc <HAL_GetTick>
 8004d60:	0002      	movs	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	4a51      	ldr	r2, [pc, #324]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e091      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x264>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d70:	4b4a      	ldr	r3, [pc, #296]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d0ef      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2220      	movs	r2, #32
 8004d82:	4013      	ands	r3, r2
 8004d84:	d01f      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	23c0      	movs	r3, #192	; 0xc0
 8004d8c:	029b      	lsls	r3, r3, #10
 8004d8e:	401a      	ands	r2, r3
 8004d90:	23c0      	movs	r3, #192	; 0xc0
 8004d92:	029b      	lsls	r3, r3, #10
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d10c      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004d98:	4b40      	ldr	r3, [pc, #256]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a44      	ldr	r2, [pc, #272]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	0019      	movs	r1, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	23c0      	movs	r3, #192	; 0xc0
 8004da8:	039b      	lsls	r3, r3, #14
 8004daa:	401a      	ands	r2, r3
 8004dac:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004dae:	430a      	orrs	r2, r1
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	4b3a      	ldr	r3, [pc, #232]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004db4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	23c0      	movs	r3, #192	; 0xc0
 8004dbc:	029b      	lsls	r3, r3, #10
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	4b36      	ldr	r3, [pc, #216]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dc6:	2317      	movs	r3, #23
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d105      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd0:	4b32      	ldr	r3, [pc, #200]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd4:	4b31      	ldr	r3, [pc, #196]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004dd6:	4937      	ldr	r1, [pc, #220]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004dd8:	400a      	ands	r2, r1
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2201      	movs	r2, #1
 8004de2:	4013      	ands	r3, r2
 8004de4:	d009      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004de6:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dea:	2203      	movs	r2, #3
 8004dec:	4393      	bics	r3, r2
 8004dee:	0019      	movs	r1, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	4b29      	ldr	r3, [pc, #164]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004df6:	430a      	orrs	r2, r1
 8004df8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	4013      	ands	r3, r2
 8004e02:	d009      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e04:	4b25      	ldr	r3, [pc, #148]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e08:	220c      	movs	r2, #12
 8004e0a:	4393      	bics	r3, r2
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e14:	430a      	orrs	r2, r1
 8004e16:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e22:	4b1e      	ldr	r3, [pc, #120]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e26:	4a24      	ldr	r2, [pc, #144]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	0019      	movs	r1, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e32:	430a      	orrs	r2, r1
 8004e34:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2208      	movs	r2, #8
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d009      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e40:	4b16      	ldr	r3, [pc, #88]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e44:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	0019      	movs	r1, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e50:	430a      	orrs	r2, r1
 8004e52:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	2380      	movs	r3, #128	; 0x80
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e60:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e64:	4a0f      	ldr	r2, [pc, #60]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	0019      	movs	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e70:	430a      	orrs	r2, r1
 8004e72:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2280      	movs	r2, #128	; 0x80
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d009      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e82:	4a0f      	ldr	r2, [pc, #60]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	0019      	movs	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	4b03      	ldr	r3, [pc, #12]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	0018      	movs	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b006      	add	sp, #24
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	40007000 	.word	0x40007000
 8004ea4:	fffcffff 	.word	0xfffcffff
 8004ea8:	fff7ffff 	.word	0xfff7ffff
 8004eac:	00001388 	.word	0x00001388
 8004eb0:	ffcfffff 	.word	0xffcfffff
 8004eb4:	efffffff 	.word	0xefffffff
 8004eb8:	fffff3ff 	.word	0xfffff3ff
 8004ebc:	ffffcfff 	.word	0xffffcfff
 8004ec0:	fff3ffff 	.word	0xfff3ffff

08004ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e083      	b.n	8004fde <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	2382      	movs	r3, #130	; 0x82
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d009      	beq.n	8004efe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	61da      	str	r2, [r3, #28]
 8004ef0:	e005      	b.n	8004efe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2251      	movs	r2, #81	; 0x51
 8004f08:	5c9b      	ldrb	r3, [r3, r2]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d107      	bne.n	8004f20 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2250      	movs	r2, #80	; 0x50
 8004f14:	2100      	movs	r1, #0
 8004f16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f7fd f9b8 	bl	8002290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2251      	movs	r2, #81	; 0x51
 8004f24:	2102      	movs	r1, #2
 8004f26:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2140      	movs	r1, #64	; 0x40
 8004f34:	438a      	bics	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	2382      	movs	r3, #130	; 0x82
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	401a      	ands	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6899      	ldr	r1, [r3, #8]
 8004f46:	2384      	movs	r3, #132	; 0x84
 8004f48:	021b      	lsls	r3, r3, #8
 8004f4a:	400b      	ands	r3, r1
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68d9      	ldr	r1, [r3, #12]
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	400b      	ands	r3, r1
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2102      	movs	r1, #2
 8004f60:	400b      	ands	r3, r1
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	2101      	movs	r1, #1
 8004f6a:	400b      	ands	r3, r1
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6999      	ldr	r1, [r3, #24]
 8004f72:	2380      	movs	r3, #128	; 0x80
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	400b      	ands	r3, r1
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	2138      	movs	r1, #56	; 0x38
 8004f80:	400b      	ands	r3, r1
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	2180      	movs	r1, #128	; 0x80
 8004f8a:	400b      	ands	r3, r1
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	0011      	movs	r1, r2
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f94:	2380      	movs	r3, #128	; 0x80
 8004f96:	019b      	lsls	r3, r3, #6
 8004f98:	401a      	ands	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	0c1b      	lsrs	r3, r3, #16
 8004fa8:	2204      	movs	r2, #4
 8004faa:	4013      	ands	r3, r2
 8004fac:	0019      	movs	r1, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	2210      	movs	r2, #16
 8004fb4:	401a      	ands	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4907      	ldr	r1, [pc, #28]	; (8004fe8 <HAL_SPI_Init+0x124>)
 8004fca:	400a      	ands	r2, r1
 8004fcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2251      	movs	r2, #81	; 0x51
 8004fd8:	2101      	movs	r1, #1
 8004fda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	0018      	movs	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b002      	add	sp, #8
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	fffff7ff 	.word	0xfffff7ff

08004fec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	1dbb      	adds	r3, r7, #6
 8004ffa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ffc:	231f      	movs	r3, #31
 8004ffe:	18fb      	adds	r3, r7, r3
 8005000:	2200      	movs	r2, #0
 8005002:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2250      	movs	r2, #80	; 0x50
 8005008:	5c9b      	ldrb	r3, [r3, r2]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <HAL_SPI_Transmit+0x26>
 800500e:	2302      	movs	r3, #2
 8005010:	e145      	b.n	800529e <HAL_SPI_Transmit+0x2b2>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2250      	movs	r2, #80	; 0x50
 8005016:	2101      	movs	r1, #1
 8005018:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800501a:	f7fd fbdf 	bl	80027dc <HAL_GetTick>
 800501e:	0003      	movs	r3, r0
 8005020:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005022:	2316      	movs	r3, #22
 8005024:	18fb      	adds	r3, r7, r3
 8005026:	1dba      	adds	r2, r7, #6
 8005028:	8812      	ldrh	r2, [r2, #0]
 800502a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2251      	movs	r2, #81	; 0x51
 8005030:	5c9b      	ldrb	r3, [r3, r2]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d004      	beq.n	8005042 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005038:	231f      	movs	r3, #31
 800503a:	18fb      	adds	r3, r7, r3
 800503c:	2202      	movs	r2, #2
 800503e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005040:	e126      	b.n	8005290 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_SPI_Transmit+0x64>
 8005048:	1dbb      	adds	r3, r7, #6
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005050:	231f      	movs	r3, #31
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
    goto error;
 8005058:	e11a      	b.n	8005290 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2251      	movs	r2, #81	; 0x51
 800505e:	2103      	movs	r1, #3
 8005060:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1dba      	adds	r2, r7, #6
 8005072:	8812      	ldrh	r2, [r2, #0]
 8005074:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1dba      	adds	r2, r7, #6
 800507a:	8812      	ldrh	r2, [r2, #0]
 800507c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	2380      	movs	r3, #128	; 0x80
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d110      	bne.n	80050ca <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2140      	movs	r1, #64	; 0x40
 80050b4:	438a      	bics	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2180      	movs	r1, #128	; 0x80
 80050c4:	01c9      	lsls	r1, r1, #7
 80050c6:	430a      	orrs	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2240      	movs	r2, #64	; 0x40
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d007      	beq.n	80050e8 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2140      	movs	r1, #64	; 0x40
 80050e4:	430a      	orrs	r2, r1
 80050e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	2380      	movs	r3, #128	; 0x80
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d152      	bne.n	800519a <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <HAL_SPI_Transmit+0x11a>
 80050fc:	2316      	movs	r3, #22
 80050fe:	18fb      	adds	r3, r7, r3
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d143      	bne.n	800518e <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510a:	881a      	ldrh	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005116:	1c9a      	adds	r2, r3, #2
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800512a:	e030      	b.n	800518e <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2202      	movs	r2, #2
 8005134:	4013      	ands	r3, r2
 8005136:	2b02      	cmp	r3, #2
 8005138:	d112      	bne.n	8005160 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	881a      	ldrh	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	1c9a      	adds	r2, r3, #2
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	86da      	strh	r2, [r3, #54]	; 0x36
 800515e:	e016      	b.n	800518e <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005160:	f7fd fb3c 	bl	80027dc <HAL_GetTick>
 8005164:	0002      	movs	r2, r0
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d802      	bhi.n	8005176 <HAL_SPI_Transmit+0x18a>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	3301      	adds	r3, #1
 8005174:	d102      	bne.n	800517c <HAL_SPI_Transmit+0x190>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d108      	bne.n	800518e <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 800517c:	231f      	movs	r3, #31
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	2203      	movs	r2, #3
 8005182:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2251      	movs	r2, #81	; 0x51
 8005188:	2101      	movs	r1, #1
 800518a:	5499      	strb	r1, [r3, r2]
          goto error;
 800518c:	e080      	b.n	8005290 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1c9      	bne.n	800512c <HAL_SPI_Transmit+0x140>
 8005198:	e053      	b.n	8005242 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d004      	beq.n	80051ac <HAL_SPI_Transmit+0x1c0>
 80051a2:	2316      	movs	r3, #22
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d145      	bne.n	8005238 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	7812      	ldrb	r2, [r2, #0]
 80051b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051d2:	e031      	b.n	8005238 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2202      	movs	r2, #2
 80051dc:	4013      	ands	r3, r2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d113      	bne.n	800520a <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	330c      	adds	r3, #12
 80051ec:	7812      	ldrb	r2, [r2, #0]
 80051ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	86da      	strh	r2, [r3, #54]	; 0x36
 8005208:	e016      	b.n	8005238 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800520a:	f7fd fae7 	bl	80027dc <HAL_GetTick>
 800520e:	0002      	movs	r2, r0
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d802      	bhi.n	8005220 <HAL_SPI_Transmit+0x234>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	3301      	adds	r3, #1
 800521e:	d102      	bne.n	8005226 <HAL_SPI_Transmit+0x23a>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d108      	bne.n	8005238 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8005226:	231f      	movs	r3, #31
 8005228:	18fb      	adds	r3, r7, r3
 800522a:	2203      	movs	r2, #3
 800522c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2251      	movs	r2, #81	; 0x51
 8005232:	2101      	movs	r1, #1
 8005234:	5499      	strb	r1, [r3, r2]
          goto error;
 8005236:	e02b      	b.n	8005290 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1c8      	bne.n	80051d4 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	6839      	ldr	r1, [r7, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	0018      	movs	r0, r3
 800524a:	f000 fc1f 	bl	8005a8c <SPI_EndRxTxTransaction>
 800524e:	1e03      	subs	r3, r0, #0
 8005250:	d002      	beq.n	8005258 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10a      	bne.n	8005276 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005260:	2300      	movs	r3, #0
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527a:	2b00      	cmp	r3, #0
 800527c:	d004      	beq.n	8005288 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 800527e:	231f      	movs	r3, #31
 8005280:	18fb      	adds	r3, r7, r3
 8005282:	2201      	movs	r2, #1
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	e003      	b.n	8005290 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2251      	movs	r2, #81	; 0x51
 800528c:	2101      	movs	r1, #1
 800528e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2250      	movs	r2, #80	; 0x50
 8005294:	2100      	movs	r1, #0
 8005296:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005298:	231f      	movs	r3, #31
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	781b      	ldrb	r3, [r3, #0]
}
 800529e:	0018      	movs	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b008      	add	sp, #32
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a8:	b590      	push	{r4, r7, lr}
 80052aa:	b089      	sub	sp, #36	; 0x24
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	1dbb      	adds	r3, r7, #6
 80052b6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052b8:	2117      	movs	r1, #23
 80052ba:	187b      	adds	r3, r7, r1
 80052bc:	2200      	movs	r2, #0
 80052be:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2251      	movs	r2, #81	; 0x51
 80052c4:	5c9b      	ldrb	r3, [r3, r2]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d003      	beq.n	80052d4 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80052cc:	187b      	adds	r3, r7, r1
 80052ce:	2202      	movs	r2, #2
 80052d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80052d2:	e109      	b.n	80054e8 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	2382      	movs	r3, #130	; 0x82
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	429a      	cmp	r2, r3
 80052de:	d113      	bne.n	8005308 <HAL_SPI_Receive+0x60>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10f      	bne.n	8005308 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2251      	movs	r2, #81	; 0x51
 80052ec:	2104      	movs	r1, #4
 80052ee:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052f0:	1dbb      	adds	r3, r7, #6
 80052f2:	881c      	ldrh	r4, [r3, #0]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	68b9      	ldr	r1, [r7, #8]
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	0023      	movs	r3, r4
 8005300:	f000 f900 	bl	8005504 <HAL_SPI_TransmitReceive>
 8005304:	0003      	movs	r3, r0
 8005306:	e0f6      	b.n	80054f6 <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2250      	movs	r2, #80	; 0x50
 800530c:	5c9b      	ldrb	r3, [r3, r2]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_SPI_Receive+0x6e>
 8005312:	2302      	movs	r3, #2
 8005314:	e0ef      	b.n	80054f6 <HAL_SPI_Receive+0x24e>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2250      	movs	r2, #80	; 0x50
 800531a:	2101      	movs	r1, #1
 800531c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800531e:	f7fd fa5d 	bl	80027dc <HAL_GetTick>
 8005322:	0003      	movs	r3, r0
 8005324:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_SPI_Receive+0x8c>
 800532c:	1dbb      	adds	r3, r7, #6
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8005334:	2317      	movs	r3, #23
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	2201      	movs	r2, #1
 800533a:	701a      	strb	r2, [r3, #0]
    goto error;
 800533c:	e0d4      	b.n	80054e8 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2251      	movs	r2, #81	; 0x51
 8005342:	2104      	movs	r1, #4
 8005344:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1dba      	adds	r2, r7, #6
 8005356:	8812      	ldrh	r2, [r2, #0]
 8005358:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1dba      	adds	r2, r7, #6
 800535e:	8812      	ldrh	r2, [r2, #0]
 8005360:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	2380      	movs	r3, #128	; 0x80
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	429a      	cmp	r2, r3
 800538a:	d10f      	bne.n	80053ac <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2140      	movs	r1, #64	; 0x40
 8005398:	438a      	bics	r2, r1
 800539a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4956      	ldr	r1, [pc, #344]	; (8005500 <HAL_SPI_Receive+0x258>)
 80053a8:	400a      	ands	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2240      	movs	r2, #64	; 0x40
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b40      	cmp	r3, #64	; 0x40
 80053b8:	d007      	beq.n	80053ca <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2140      	movs	r1, #64	; 0x40
 80053c6:	430a      	orrs	r2, r1
 80053c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d000      	beq.n	80053d4 <HAL_SPI_Receive+0x12c>
 80053d2:	e06c      	b.n	80054ae <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053d4:	e033      	b.n	800543e <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2201      	movs	r2, #1
 80053de:	4013      	ands	r3, r2
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d115      	bne.n	8005410 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	330c      	adds	r3, #12
 80053ea:	001a      	movs	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800540e:	e016      	b.n	800543e <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005410:	f7fd f9e4 	bl	80027dc <HAL_GetTick>
 8005414:	0002      	movs	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d802      	bhi.n	8005426 <HAL_SPI_Receive+0x17e>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	3301      	adds	r3, #1
 8005424:	d102      	bne.n	800542c <HAL_SPI_Receive+0x184>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d108      	bne.n	800543e <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 800542c:	2317      	movs	r3, #23
 800542e:	18fb      	adds	r3, r7, r3
 8005430:	2203      	movs	r2, #3
 8005432:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2251      	movs	r2, #81	; 0x51
 8005438:	2101      	movs	r1, #1
 800543a:	5499      	strb	r1, [r3, r2]
          goto error;
 800543c:	e054      	b.n	80054e8 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1c6      	bne.n	80053d6 <HAL_SPI_Receive+0x12e>
 8005448:	e036      	b.n	80054b8 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2201      	movs	r2, #1
 8005452:	4013      	ands	r3, r2
 8005454:	2b01      	cmp	r3, #1
 8005456:	d113      	bne.n	8005480 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	b292      	uxth	r2, r2
 8005464:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	1c9a      	adds	r2, r3, #2
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800547e:	e016      	b.n	80054ae <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005480:	f7fd f9ac 	bl	80027dc <HAL_GetTick>
 8005484:	0002      	movs	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d802      	bhi.n	8005496 <HAL_SPI_Receive+0x1ee>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	3301      	adds	r3, #1
 8005494:	d102      	bne.n	800549c <HAL_SPI_Receive+0x1f4>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d108      	bne.n	80054ae <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 800549c:	2317      	movs	r3, #23
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	2203      	movs	r2, #3
 80054a2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2251      	movs	r2, #81	; 0x51
 80054a8:	2101      	movs	r1, #1
 80054aa:	5499      	strb	r1, [r3, r2]
          goto error;
 80054ac:	e01c      	b.n	80054e8 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1c8      	bne.n	800544a <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	0018      	movs	r0, r3
 80054c0:	f000 fa7a 	bl	80059b8 <SPI_EndRxTransaction>
 80054c4:	1e03      	subs	r3, r0, #0
 80054c6:	d002      	beq.n	80054ce <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 80054d6:	2317      	movs	r3, #23
 80054d8:	18fb      	adds	r3, r7, r3
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e003      	b.n	80054e8 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2251      	movs	r2, #81	; 0x51
 80054e4:	2101      	movs	r1, #1
 80054e6:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2250      	movs	r2, #80	; 0x50
 80054ec:	2100      	movs	r1, #0
 80054ee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80054f0:	2317      	movs	r3, #23
 80054f2:	18fb      	adds	r3, r7, r3
 80054f4:	781b      	ldrb	r3, [r3, #0]
}
 80054f6:	0018      	movs	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b007      	add	sp, #28
 80054fc:	bd90      	pop	{r4, r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	ffffbfff 	.word	0xffffbfff

08005504 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08c      	sub	sp, #48	; 0x30
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	001a      	movs	r2, r3
 8005512:	1cbb      	adds	r3, r7, #2
 8005514:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005516:	2301      	movs	r3, #1
 8005518:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800551a:	232b      	movs	r3, #43	; 0x2b
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2250      	movs	r2, #80	; 0x50
 8005526:	5c9b      	ldrb	r3, [r3, r2]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_SPI_TransmitReceive+0x2c>
 800552c:	2302      	movs	r3, #2
 800552e:	e1b0      	b.n	8005892 <HAL_SPI_TransmitReceive+0x38e>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2250      	movs	r2, #80	; 0x50
 8005534:	2101      	movs	r1, #1
 8005536:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005538:	f7fd f950 	bl	80027dc <HAL_GetTick>
 800553c:	0003      	movs	r3, r0
 800553e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005540:	2023      	movs	r0, #35	; 0x23
 8005542:	183b      	adds	r3, r7, r0
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	2151      	movs	r1, #81	; 0x51
 8005548:	5c52      	ldrb	r2, [r2, r1]
 800554a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005552:	231a      	movs	r3, #26
 8005554:	18fb      	adds	r3, r7, r3
 8005556:	1cba      	adds	r2, r7, #2
 8005558:	8812      	ldrh	r2, [r2, #0]
 800555a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800555c:	183b      	adds	r3, r7, r0
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d011      	beq.n	8005588 <HAL_SPI_TransmitReceive+0x84>
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	2382      	movs	r3, #130	; 0x82
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	429a      	cmp	r2, r3
 800556c:	d107      	bne.n	800557e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d103      	bne.n	800557e <HAL_SPI_TransmitReceive+0x7a>
 8005576:	183b      	adds	r3, r7, r0
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b04      	cmp	r3, #4
 800557c:	d004      	beq.n	8005588 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800557e:	232b      	movs	r3, #43	; 0x2b
 8005580:	18fb      	adds	r3, r7, r3
 8005582:	2202      	movs	r2, #2
 8005584:	701a      	strb	r2, [r3, #0]
    goto error;
 8005586:	e17d      	b.n	8005884 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d006      	beq.n	800559c <HAL_SPI_TransmitReceive+0x98>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_SPI_TransmitReceive+0x98>
 8005594:	1cbb      	adds	r3, r7, #2
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d104      	bne.n	80055a6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800559c:	232b      	movs	r3, #43	; 0x2b
 800559e:	18fb      	adds	r3, r7, r3
 80055a0:	2201      	movs	r2, #1
 80055a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80055a4:	e16e      	b.n	8005884 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2251      	movs	r2, #81	; 0x51
 80055aa:	5c9b      	ldrb	r3, [r3, r2]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d003      	beq.n	80055ba <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2251      	movs	r2, #81	; 0x51
 80055b6:	2105      	movs	r1, #5
 80055b8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1cba      	adds	r2, r7, #2
 80055ca:	8812      	ldrh	r2, [r2, #0]
 80055cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1cba      	adds	r2, r7, #2
 80055d2:	8812      	ldrh	r2, [r2, #0]
 80055d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	1cba      	adds	r2, r7, #2
 80055e0:	8812      	ldrh	r2, [r2, #0]
 80055e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	1cba      	adds	r2, r7, #2
 80055e8:	8812      	ldrh	r2, [r2, #0]
 80055ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2240      	movs	r2, #64	; 0x40
 8005600:	4013      	ands	r3, r2
 8005602:	2b40      	cmp	r3, #64	; 0x40
 8005604:	d007      	beq.n	8005616 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2140      	movs	r1, #64	; 0x40
 8005612:	430a      	orrs	r2, r1
 8005614:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	2380      	movs	r3, #128	; 0x80
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	429a      	cmp	r2, r3
 8005620:	d000      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x120>
 8005622:	e07f      	b.n	8005724 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_SPI_TransmitReceive+0x134>
 800562c:	231a      	movs	r3, #26
 800562e:	18fb      	adds	r3, r7, r3
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d000      	beq.n	8005638 <HAL_SPI_TransmitReceive+0x134>
 8005636:	e06a      	b.n	800570e <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563c:	881a      	ldrh	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	1c9a      	adds	r2, r3, #2
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005652:	b29b      	uxth	r3, r3
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800565c:	e057      	b.n	800570e <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2202      	movs	r2, #2
 8005666:	4013      	ands	r3, r2
 8005668:	2b02      	cmp	r3, #2
 800566a:	d11b      	bne.n	80056a4 <HAL_SPI_TransmitReceive+0x1a0>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d016      	beq.n	80056a4 <HAL_SPI_TransmitReceive+0x1a0>
 8005676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005678:	2b01      	cmp	r3, #1
 800567a:	d113      	bne.n	80056a4 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	881a      	ldrh	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	1c9a      	adds	r2, r3, #2
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005696:	b29b      	uxth	r3, r3
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2201      	movs	r2, #1
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d119      	bne.n	80056e6 <HAL_SPI_TransmitReceive+0x1e2>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d014      	beq.n	80056e6 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	b292      	uxth	r2, r2
 80056c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	1c9a      	adds	r2, r3, #2
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056e2:	2301      	movs	r3, #1
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056e6:	f7fd f879 	bl	80027dc <HAL_GetTick>
 80056ea:	0002      	movs	r2, r0
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d80b      	bhi.n	800570e <HAL_SPI_TransmitReceive+0x20a>
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	3301      	adds	r3, #1
 80056fa:	d008      	beq.n	800570e <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 80056fc:	232b      	movs	r3, #43	; 0x2b
 80056fe:	18fb      	adds	r3, r7, r3
 8005700:	2203      	movs	r2, #3
 8005702:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2251      	movs	r2, #81	; 0x51
 8005708:	2101      	movs	r1, #1
 800570a:	5499      	strb	r1, [r3, r2]
        goto error;
 800570c:	e0ba      	b.n	8005884 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1a2      	bne.n	800565e <HAL_SPI_TransmitReceive+0x15a>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d19d      	bne.n	800565e <HAL_SPI_TransmitReceive+0x15a>
 8005722:	e083      	b.n	800582c <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <HAL_SPI_TransmitReceive+0x234>
 800572c:	231a      	movs	r3, #26
 800572e:	18fb      	adds	r3, r7, r3
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d000      	beq.n	8005738 <HAL_SPI_TransmitReceive+0x234>
 8005736:	e06f      	b.n	8005818 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	7812      	ldrb	r2, [r2, #0]
 8005744:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800575e:	e05b      	b.n	8005818 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2202      	movs	r2, #2
 8005768:	4013      	ands	r3, r2
 800576a:	2b02      	cmp	r3, #2
 800576c:	d11c      	bne.n	80057a8 <HAL_SPI_TransmitReceive+0x2a4>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d017      	beq.n	80057a8 <HAL_SPI_TransmitReceive+0x2a4>
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d114      	bne.n	80057a8 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	330c      	adds	r3, #12
 8005788:	7812      	ldrb	r2, [r2, #0]
 800578a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2201      	movs	r2, #1
 80057b0:	4013      	ands	r3, r2
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d119      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x2e6>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d014      	beq.n	80057ea <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057e6:	2301      	movs	r3, #1
 80057e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057ea:	f7fc fff7 	bl	80027dc <HAL_GetTick>
 80057ee:	0002      	movs	r2, r0
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d802      	bhi.n	8005800 <HAL_SPI_TransmitReceive+0x2fc>
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	3301      	adds	r3, #1
 80057fe:	d102      	bne.n	8005806 <HAL_SPI_TransmitReceive+0x302>
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	2b00      	cmp	r3, #0
 8005804:	d108      	bne.n	8005818 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8005806:	232b      	movs	r3, #43	; 0x2b
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	2203      	movs	r2, #3
 800580c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2251      	movs	r2, #81	; 0x51
 8005812:	2101      	movs	r1, #1
 8005814:	5499      	strb	r1, [r3, r2]
        goto error;
 8005816:	e035      	b.n	8005884 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d19e      	bne.n	8005760 <HAL_SPI_TransmitReceive+0x25c>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005826:	b29b      	uxth	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d199      	bne.n	8005760 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800582c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800582e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	0018      	movs	r0, r3
 8005834:	f000 f92a 	bl	8005a8c <SPI_EndRxTxTransaction>
 8005838:	1e03      	subs	r3, r0, #0
 800583a:	d007      	beq.n	800584c <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 800583c:	232b      	movs	r3, #43	; 0x2b
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	2201      	movs	r2, #1
 8005842:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800584a:	e01b      	b.n	8005884 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8005872:	232b      	movs	r3, #43	; 0x2b
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	2201      	movs	r2, #1
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	e003      	b.n	8005884 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2251      	movs	r2, #81	; 0x51
 8005880:	2101      	movs	r1, #1
 8005882:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2250      	movs	r2, #80	; 0x50
 8005888:	2100      	movs	r1, #0
 800588a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800588c:	232b      	movs	r3, #43	; 0x2b
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	781b      	ldrb	r3, [r3, #0]
}
 8005892:	0018      	movs	r0, r3
 8005894:	46bd      	mov	sp, r7
 8005896:	b00c      	add	sp, #48	; 0x30
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	1dfb      	adds	r3, r7, #7
 80058aa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058ac:	f7fc ff96 	bl	80027dc <HAL_GetTick>
 80058b0:	0002      	movs	r2, r0
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	1a9b      	subs	r3, r3, r2
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	18d3      	adds	r3, r2, r3
 80058ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058bc:	f7fc ff8e 	bl	80027dc <HAL_GetTick>
 80058c0:	0003      	movs	r3, r0
 80058c2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058c4:	4b3a      	ldr	r3, [pc, #232]	; (80059b0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	015b      	lsls	r3, r3, #5
 80058ca:	0d1b      	lsrs	r3, r3, #20
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	4353      	muls	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058d2:	e058      	b.n	8005986 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	3301      	adds	r3, #1
 80058d8:	d055      	beq.n	8005986 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058da:	f7fc ff7f 	bl	80027dc <HAL_GetTick>
 80058de:	0002      	movs	r2, r0
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d902      	bls.n	80058f0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d142      	bne.n	8005976 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	21e0      	movs	r1, #224	; 0xe0
 80058fc:	438a      	bics	r2, r1
 80058fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	2382      	movs	r3, #130	; 0x82
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	429a      	cmp	r2, r3
 800590a:	d113      	bne.n	8005934 <SPI_WaitFlagStateUntilTimeout+0x98>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	2380      	movs	r3, #128	; 0x80
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	429a      	cmp	r2, r3
 8005916:	d005      	beq.n	8005924 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	2380      	movs	r3, #128	; 0x80
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	429a      	cmp	r2, r3
 8005922:	d107      	bne.n	8005934 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2140      	movs	r1, #64	; 0x40
 8005930:	438a      	bics	r2, r1
 8005932:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005938:	2380      	movs	r3, #128	; 0x80
 800593a:	019b      	lsls	r3, r3, #6
 800593c:	429a      	cmp	r2, r3
 800593e:	d110      	bne.n	8005962 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	491a      	ldr	r1, [pc, #104]	; (80059b4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800594c:	400a      	ands	r2, r1
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2180      	movs	r1, #128	; 0x80
 800595c:	0189      	lsls	r1, r1, #6
 800595e:	430a      	orrs	r2, r1
 8005960:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2251      	movs	r2, #81	; 0x51
 8005966:	2101      	movs	r1, #1
 8005968:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2250      	movs	r2, #80	; 0x50
 800596e:	2100      	movs	r1, #0
 8005970:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e017      	b.n	80059a6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	3b01      	subs	r3, #1
 8005984:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	4013      	ands	r3, r2
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	425a      	negs	r2, r3
 8005996:	4153      	adcs	r3, r2
 8005998:	b2db      	uxtb	r3, r3
 800599a:	001a      	movs	r2, r3
 800599c:	1dfb      	adds	r3, r7, #7
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d197      	bne.n	80058d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	0018      	movs	r0, r3
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b008      	add	sp, #32
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	20000000 	.word	0x20000000
 80059b4:	ffffdfff 	.word	0xffffdfff

080059b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	2382      	movs	r3, #130	; 0x82
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d113      	bne.n	80059f8 <SPI_EndRxTransaction+0x40>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	429a      	cmp	r2, r3
 80059da:	d005      	beq.n	80059e8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	2380      	movs	r3, #128	; 0x80
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d107      	bne.n	80059f8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2140      	movs	r1, #64	; 0x40
 80059f4:	438a      	bics	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	2382      	movs	r3, #130	; 0x82
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d12b      	bne.n	8005a5c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	2380      	movs	r3, #128	; 0x80
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d012      	beq.n	8005a36 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	0013      	movs	r3, r2
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2180      	movs	r1, #128	; 0x80
 8005a1e:	f7ff ff3d 	bl	800589c <SPI_WaitFlagStateUntilTimeout>
 8005a22:	1e03      	subs	r3, r0, #0
 8005a24:	d02d      	beq.n	8005a82 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e026      	b.n	8005a84 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	0013      	movs	r3, r2
 8005a40:	2200      	movs	r2, #0
 8005a42:	2101      	movs	r1, #1
 8005a44:	f7ff ff2a 	bl	800589c <SPI_WaitFlagStateUntilTimeout>
 8005a48:	1e03      	subs	r3, r0, #0
 8005a4a:	d01a      	beq.n	8005a82 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a50:	2220      	movs	r2, #32
 8005a52:	431a      	orrs	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e013      	b.n	8005a84 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	0013      	movs	r3, r2
 8005a66:	2200      	movs	r2, #0
 8005a68:	2101      	movs	r1, #1
 8005a6a:	f7ff ff17 	bl	800589c <SPI_WaitFlagStateUntilTimeout>
 8005a6e:	1e03      	subs	r3, r0, #0
 8005a70:	d007      	beq.n	8005a82 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a76:	2220      	movs	r2, #32
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e000      	b.n	8005a84 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	0018      	movs	r0, r3
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b004      	add	sp, #16
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a98:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <SPI_EndRxTxTransaction+0x84>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	491d      	ldr	r1, [pc, #116]	; (8005b14 <SPI_EndRxTxTransaction+0x88>)
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f7fa fb3c 	bl	800011c <__udivsi3>
 8005aa4:	0003      	movs	r3, r0
 8005aa6:	001a      	movs	r2, r3
 8005aa8:	0013      	movs	r3, r2
 8005aaa:	015b      	lsls	r3, r3, #5
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	189b      	adds	r3, r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	2382      	movs	r3, #130	; 0x82
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d112      	bne.n	8005ae8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	0013      	movs	r3, r2
 8005acc:	2200      	movs	r2, #0
 8005ace:	2180      	movs	r1, #128	; 0x80
 8005ad0:	f7ff fee4 	bl	800589c <SPI_WaitFlagStateUntilTimeout>
 8005ad4:	1e03      	subs	r3, r0, #0
 8005ad6:	d016      	beq.n	8005b06 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005adc:	2220      	movs	r2, #32
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e00f      	b.n	8005b08 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	3b01      	subs	r3, #1
 8005af2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2280      	movs	r2, #128	; 0x80
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b80      	cmp	r3, #128	; 0x80
 8005b00:	d0f2      	beq.n	8005ae8 <SPI_EndRxTxTransaction+0x5c>
 8005b02:	e000      	b.n	8005b06 <SPI_EndRxTxTransaction+0x7a>
        break;
 8005b04:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	0018      	movs	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b006      	add	sp, #24
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20000000 	.word	0x20000000
 8005b14:	016e3600 	.word	0x016e3600

08005b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e032      	b.n	8005b90 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2239      	movs	r2, #57	; 0x39
 8005b2e:	5c9b      	ldrb	r3, [r3, r2]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d107      	bne.n	8005b46 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2238      	movs	r2, #56	; 0x38
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	0018      	movs	r0, r3
 8005b42:	f7fc fd21 	bl	8002588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2239      	movs	r2, #57	; 0x39
 8005b4a:	2102      	movs	r1, #2
 8005b4c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3304      	adds	r3, #4
 8005b56:	0019      	movs	r1, r3
 8005b58:	0010      	movs	r0, r2
 8005b5a:	f000 f977 	bl	8005e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	223e      	movs	r2, #62	; 0x3e
 8005b62:	2101      	movs	r1, #1
 8005b64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	223a      	movs	r2, #58	; 0x3a
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	5499      	strb	r1, [r3, r2]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	223b      	movs	r2, #59	; 0x3b
 8005b72:	2101      	movs	r1, #1
 8005b74:	5499      	strb	r1, [r3, r2]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	223c      	movs	r2, #60	; 0x3c
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	5499      	strb	r1, [r3, r2]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	223d      	movs	r2, #61	; 0x3d
 8005b82:	2101      	movs	r1, #1
 8005b84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2239      	movs	r2, #57	; 0x39
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	0018      	movs	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	b002      	add	sp, #8
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2239      	movs	r2, #57	; 0x39
 8005ba4:	5c9b      	ldrb	r3, [r3, r2]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d001      	beq.n	8005bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e03b      	b.n	8005c28 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2239      	movs	r2, #57	; 0x39
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	2380      	movs	r3, #128	; 0x80
 8005bce:	05db      	lsls	r3, r3, #23
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d00e      	beq.n	8005bf2 <HAL_TIM_Base_Start_IT+0x5a>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a15      	ldr	r2, [pc, #84]	; (8005c30 <HAL_TIM_Base_Start_IT+0x98>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d009      	beq.n	8005bf2 <HAL_TIM_Base_Start_IT+0x5a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a14      	ldr	r2, [pc, #80]	; (8005c34 <HAL_TIM_Base_Start_IT+0x9c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d004      	beq.n	8005bf2 <HAL_TIM_Base_Start_IT+0x5a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a12      	ldr	r2, [pc, #72]	; (8005c38 <HAL_TIM_Base_Start_IT+0xa0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d111      	bne.n	8005c16 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2207      	movs	r2, #7
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b06      	cmp	r3, #6
 8005c02:	d010      	beq.n	8005c26 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2101      	movs	r1, #1
 8005c10:	430a      	orrs	r2, r1
 8005c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c14:	e007      	b.n	8005c26 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2101      	movs	r1, #1
 8005c22:	430a      	orrs	r2, r1
 8005c24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	0018      	movs	r0, r3
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	b004      	add	sp, #16
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40010800 	.word	0x40010800
 8005c38:	40011400 	.word	0x40011400

08005c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d124      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d11d      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2203      	movs	r2, #3
 8005c66:	4252      	negs	r2, r2
 8005c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	2203      	movs	r2, #3
 8005c78:	4013      	ands	r3, r2
 8005c7a:	d004      	beq.n	8005c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f000 f8cc 	bl	8005e1c <HAL_TIM_IC_CaptureCallback>
 8005c84:	e007      	b.n	8005c96 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f000 f8bf 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	0018      	movs	r0, r3
 8005c92:	f000 f8cb 	bl	8005e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2204      	movs	r2, #4
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d125      	bne.n	8005cf6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	2204      	movs	r2, #4
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d11e      	bne.n	8005cf6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2205      	movs	r2, #5
 8005cbe:	4252      	negs	r2, r2
 8005cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	23c0      	movs	r3, #192	; 0xc0
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f000 f89f 	bl	8005e1c <HAL_TIM_IC_CaptureCallback>
 8005cde:	e007      	b.n	8005cf0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f000 f892 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	0018      	movs	r0, r3
 8005cec:	f000 f89e 	bl	8005e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2208      	movs	r2, #8
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d124      	bne.n	8005d4e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	2208      	movs	r2, #8
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d11d      	bne.n	8005d4e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2209      	movs	r2, #9
 8005d18:	4252      	negs	r2, r2
 8005d1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2204      	movs	r2, #4
 8005d20:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	2203      	movs	r2, #3
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	0018      	movs	r0, r3
 8005d32:	f000 f873 	bl	8005e1c <HAL_TIM_IC_CaptureCallback>
 8005d36:	e007      	b.n	8005d48 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f000 f866 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	0018      	movs	r0, r3
 8005d44:	f000 f872 	bl	8005e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	2210      	movs	r2, #16
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b10      	cmp	r3, #16
 8005d5a:	d125      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	2210      	movs	r2, #16
 8005d64:	4013      	ands	r3, r2
 8005d66:	2b10      	cmp	r3, #16
 8005d68:	d11e      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2211      	movs	r2, #17
 8005d70:	4252      	negs	r2, r2
 8005d72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2208      	movs	r2, #8
 8005d78:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	23c0      	movs	r3, #192	; 0xc0
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4013      	ands	r3, r2
 8005d86:	d004      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f000 f846 	bl	8005e1c <HAL_TIM_IC_CaptureCallback>
 8005d90:	e007      	b.n	8005da2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	0018      	movs	r0, r3
 8005d96:	f000 f839 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f000 f845 	bl	8005e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2201      	movs	r2, #1
 8005db0:	4013      	ands	r3, r2
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d10f      	bne.n	8005dd6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d108      	bne.n	8005dd6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	4252      	negs	r2, r2
 8005dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f7fb fc09 	bl	80015e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	2240      	movs	r2, #64	; 0x40
 8005dde:	4013      	ands	r3, r2
 8005de0:	2b40      	cmp	r3, #64	; 0x40
 8005de2:	d10f      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	2240      	movs	r2, #64	; 0x40
 8005dec:	4013      	ands	r3, r2
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	d108      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2241      	movs	r2, #65	; 0x41
 8005df8:	4252      	negs	r2, r2
 8005dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f000 f81c 	bl	8005e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e04:	46c0      	nop			; (mov r8, r8)
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b002      	add	sp, #8
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e14:	46c0      	nop			; (mov r8, r8)
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b002      	add	sp, #8
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e24:	46c0      	nop			; (mov r8, r8)
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b002      	add	sp, #8
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e34:	46c0      	nop			; (mov r8, r8)
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b002      	add	sp, #8
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e44:	46c0      	nop			; (mov r8, r8)
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b002      	add	sp, #8
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	2380      	movs	r3, #128	; 0x80
 8005e60:	05db      	lsls	r3, r3, #23
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d00b      	beq.n	8005e7e <TIM_Base_SetConfig+0x32>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a23      	ldr	r2, [pc, #140]	; (8005ef8 <TIM_Base_SetConfig+0xac>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d007      	beq.n	8005e7e <TIM_Base_SetConfig+0x32>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a22      	ldr	r2, [pc, #136]	; (8005efc <TIM_Base_SetConfig+0xb0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d003      	beq.n	8005e7e <TIM_Base_SetConfig+0x32>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a21      	ldr	r2, [pc, #132]	; (8005f00 <TIM_Base_SetConfig+0xb4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d108      	bne.n	8005e90 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2270      	movs	r2, #112	; 0x70
 8005e82:	4393      	bics	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	2380      	movs	r3, #128	; 0x80
 8005e94:	05db      	lsls	r3, r3, #23
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d00b      	beq.n	8005eb2 <TIM_Base_SetConfig+0x66>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a16      	ldr	r2, [pc, #88]	; (8005ef8 <TIM_Base_SetConfig+0xac>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d007      	beq.n	8005eb2 <TIM_Base_SetConfig+0x66>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a15      	ldr	r2, [pc, #84]	; (8005efc <TIM_Base_SetConfig+0xb0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d003      	beq.n	8005eb2 <TIM_Base_SetConfig+0x66>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a14      	ldr	r2, [pc, #80]	; (8005f00 <TIM_Base_SetConfig+0xb4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d108      	bne.n	8005ec4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4a13      	ldr	r2, [pc, #76]	; (8005f04 <TIM_Base_SetConfig+0xb8>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2280      	movs	r2, #128	; 0x80
 8005ec8:	4393      	bics	r3, r2
 8005eca:	001a      	movs	r2, r3
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	615a      	str	r2, [r3, #20]
}
 8005ef0:	46c0      	nop			; (mov r8, r8)
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	b004      	add	sp, #16
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40010800 	.word	0x40010800
 8005f00:	40011400 	.word	0x40011400
 8005f04:	fffffcff 	.word	0xfffffcff

08005f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2238      	movs	r2, #56	; 0x38
 8005f16:	5c9b      	ldrb	r3, [r3, r2]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e047      	b.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2238      	movs	r2, #56	; 0x38
 8005f24:	2101      	movs	r1, #1
 8005f26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2239      	movs	r2, #57	; 0x39
 8005f2c:	2102      	movs	r1, #2
 8005f2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2270      	movs	r2, #112	; 0x70
 8005f44:	4393      	bics	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	2380      	movs	r3, #128	; 0x80
 8005f60:	05db      	lsls	r3, r3, #23
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d00e      	beq.n	8005f84 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d009      	beq.n	8005f84 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a11      	ldr	r2, [pc, #68]	; (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d004      	beq.n	8005f84 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a10      	ldr	r2, [pc, #64]	; (8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d10c      	bne.n	8005f9e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2280      	movs	r2, #128	; 0x80
 8005f88:	4393      	bics	r3, r2
 8005f8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2239      	movs	r2, #57	; 0x39
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2238      	movs	r2, #56	; 0x38
 8005faa:	2100      	movs	r1, #0
 8005fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b004      	add	sp, #16
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	40000400 	.word	0x40000400
 8005fbc:	40010800 	.word	0x40010800
 8005fc0:	40011400 	.word	0x40011400

08005fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e044      	b.n	8006060 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d107      	bne.n	8005fee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2278      	movs	r2, #120	; 0x78
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f7fc fb1b 	bl	8002624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2224      	movs	r2, #36	; 0x24
 8005ff2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2101      	movs	r1, #1
 8006000:	438a      	bics	r2, r1
 8006002:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	0018      	movs	r0, r3
 8006008:	f000 fb8c 	bl	8006724 <UART_SetConfig>
 800600c:	0003      	movs	r3, r0
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e024      	b.n	8006060 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	0018      	movs	r0, r3
 8006022:	f000 fe1d 	bl	8006c60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	490d      	ldr	r1, [pc, #52]	; (8006068 <HAL_UART_Init+0xa4>)
 8006032:	400a      	ands	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	212a      	movs	r1, #42	; 0x2a
 8006042:	438a      	bics	r2, r1
 8006044:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2101      	movs	r1, #1
 8006052:	430a      	orrs	r2, r1
 8006054:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	0018      	movs	r0, r3
 800605a:	f000 feb5 	bl	8006dc8 <UART_CheckIdleState>
 800605e:	0003      	movs	r3, r0
}
 8006060:	0018      	movs	r0, r3
 8006062:	46bd      	mov	sp, r7
 8006064:	b002      	add	sp, #8
 8006066:	bd80      	pop	{r7, pc}
 8006068:	ffffb7ff 	.word	0xffffb7ff

0800606c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	1dbb      	adds	r3, r7, #6
 8006078:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2280      	movs	r2, #128	; 0x80
 800607e:	589b      	ldr	r3, [r3, r2]
 8006080:	2b20      	cmp	r3, #32
 8006082:	d14a      	bne.n	800611a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_UART_Receive_IT+0x26>
 800608a:	1dbb      	adds	r3, r7, #6
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e042      	b.n	800611c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	015b      	lsls	r3, r3, #5
 800609e:	429a      	cmp	r2, r3
 80060a0:	d109      	bne.n	80060b6 <HAL_UART_Receive_IT+0x4a>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d105      	bne.n	80060b6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2201      	movs	r2, #1
 80060ae:	4013      	ands	r3, r2
 80060b0:	d001      	beq.n	80060b6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e032      	b.n	800611c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a18      	ldr	r2, [pc, #96]	; (8006124 <HAL_UART_Receive_IT+0xb8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d020      	beq.n	8006108 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	2380      	movs	r3, #128	; 0x80
 80060ce:	041b      	lsls	r3, r3, #16
 80060d0:	4013      	ands	r3, r2
 80060d2:	d019      	beq.n	8006108 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060d4:	f3ef 8310 	mrs	r3, PRIMASK
 80060d8:	613b      	str	r3, [r7, #16]
  return(result);
 80060da:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	2301      	movs	r3, #1
 80060e0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f383 8810 	msr	PRIMASK, r3
}
 80060e8:	46c0      	nop			; (mov r8, r8)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2180      	movs	r1, #128	; 0x80
 80060f6:	04c9      	lsls	r1, r1, #19
 80060f8:	430a      	orrs	r2, r1
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	f383 8810 	msr	PRIMASK, r3
}
 8006106:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006108:	1dbb      	adds	r3, r7, #6
 800610a:	881a      	ldrh	r2, [r3, #0]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	0018      	movs	r0, r3
 8006112:	f000 ff6b 	bl	8006fec <UART_Start_Receive_IT>
 8006116:	0003      	movs	r3, r0
 8006118:	e000      	b.n	800611c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800611a:	2302      	movs	r3, #2
  }
}
 800611c:	0018      	movs	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	b008      	add	sp, #32
 8006122:	bd80      	pop	{r7, pc}
 8006124:	40004800 	.word	0x40004800

08006128 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006128:	b590      	push	{r4, r7, lr}
 800612a:	b0ab      	sub	sp, #172	; 0xac
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	22a4      	movs	r2, #164	; 0xa4
 8006138:	18b9      	adds	r1, r7, r2
 800613a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	20a0      	movs	r0, #160	; 0xa0
 8006144:	1839      	adds	r1, r7, r0
 8006146:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	219c      	movs	r1, #156	; 0x9c
 8006150:	1879      	adds	r1, r7, r1
 8006152:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006154:	0011      	movs	r1, r2
 8006156:	18bb      	adds	r3, r7, r2
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a99      	ldr	r2, [pc, #612]	; (80063c0 <HAL_UART_IRQHandler+0x298>)
 800615c:	4013      	ands	r3, r2
 800615e:	2298      	movs	r2, #152	; 0x98
 8006160:	18bc      	adds	r4, r7, r2
 8006162:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006164:	18bb      	adds	r3, r7, r2
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d114      	bne.n	8006196 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800616c:	187b      	adds	r3, r7, r1
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2220      	movs	r2, #32
 8006172:	4013      	ands	r3, r2
 8006174:	d00f      	beq.n	8006196 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006176:	183b      	adds	r3, r7, r0
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2220      	movs	r2, #32
 800617c:	4013      	ands	r3, r2
 800617e:	d00a      	beq.n	8006196 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006184:	2b00      	cmp	r3, #0
 8006186:	d100      	bne.n	800618a <HAL_UART_IRQHandler+0x62>
 8006188:	e2a0      	b.n	80066cc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	0010      	movs	r0, r2
 8006192:	4798      	blx	r3
      }
      return;
 8006194:	e29a      	b.n	80066cc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006196:	2398      	movs	r3, #152	; 0x98
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d100      	bne.n	80061a2 <HAL_UART_IRQHandler+0x7a>
 80061a0:	e114      	b.n	80063cc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80061a2:	239c      	movs	r3, #156	; 0x9c
 80061a4:	18fb      	adds	r3, r7, r3
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2201      	movs	r2, #1
 80061aa:	4013      	ands	r3, r2
 80061ac:	d106      	bne.n	80061bc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80061ae:	23a0      	movs	r3, #160	; 0xa0
 80061b0:	18fb      	adds	r3, r7, r3
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a83      	ldr	r2, [pc, #524]	; (80063c4 <HAL_UART_IRQHandler+0x29c>)
 80061b6:	4013      	ands	r3, r2
 80061b8:	d100      	bne.n	80061bc <HAL_UART_IRQHandler+0x94>
 80061ba:	e107      	b.n	80063cc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061bc:	23a4      	movs	r3, #164	; 0xa4
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2201      	movs	r2, #1
 80061c4:	4013      	ands	r3, r2
 80061c6:	d012      	beq.n	80061ee <HAL_UART_IRQHandler+0xc6>
 80061c8:	23a0      	movs	r3, #160	; 0xa0
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	2380      	movs	r3, #128	; 0x80
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	4013      	ands	r3, r2
 80061d4:	d00b      	beq.n	80061ee <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2201      	movs	r2, #1
 80061dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2284      	movs	r2, #132	; 0x84
 80061e2:	589b      	ldr	r3, [r3, r2]
 80061e4:	2201      	movs	r2, #1
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2184      	movs	r1, #132	; 0x84
 80061ec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061ee:	23a4      	movs	r3, #164	; 0xa4
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2202      	movs	r2, #2
 80061f6:	4013      	ands	r3, r2
 80061f8:	d011      	beq.n	800621e <HAL_UART_IRQHandler+0xf6>
 80061fa:	239c      	movs	r3, #156	; 0x9c
 80061fc:	18fb      	adds	r3, r7, r3
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2201      	movs	r2, #1
 8006202:	4013      	ands	r3, r2
 8006204:	d00b      	beq.n	800621e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2202      	movs	r2, #2
 800620c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2284      	movs	r2, #132	; 0x84
 8006212:	589b      	ldr	r3, [r3, r2]
 8006214:	2204      	movs	r2, #4
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2184      	movs	r1, #132	; 0x84
 800621c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800621e:	23a4      	movs	r3, #164	; 0xa4
 8006220:	18fb      	adds	r3, r7, r3
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2204      	movs	r2, #4
 8006226:	4013      	ands	r3, r2
 8006228:	d011      	beq.n	800624e <HAL_UART_IRQHandler+0x126>
 800622a:	239c      	movs	r3, #156	; 0x9c
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2201      	movs	r2, #1
 8006232:	4013      	ands	r3, r2
 8006234:	d00b      	beq.n	800624e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2204      	movs	r2, #4
 800623c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2284      	movs	r2, #132	; 0x84
 8006242:	589b      	ldr	r3, [r3, r2]
 8006244:	2202      	movs	r2, #2
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2184      	movs	r1, #132	; 0x84
 800624c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800624e:	23a4      	movs	r3, #164	; 0xa4
 8006250:	18fb      	adds	r3, r7, r3
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2208      	movs	r2, #8
 8006256:	4013      	ands	r3, r2
 8006258:	d017      	beq.n	800628a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800625a:	23a0      	movs	r3, #160	; 0xa0
 800625c:	18fb      	adds	r3, r7, r3
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2220      	movs	r2, #32
 8006262:	4013      	ands	r3, r2
 8006264:	d105      	bne.n	8006272 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006266:	239c      	movs	r3, #156	; 0x9c
 8006268:	18fb      	adds	r3, r7, r3
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2201      	movs	r2, #1
 800626e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006270:	d00b      	beq.n	800628a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2208      	movs	r2, #8
 8006278:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2284      	movs	r2, #132	; 0x84
 800627e:	589b      	ldr	r3, [r3, r2]
 8006280:	2208      	movs	r2, #8
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2184      	movs	r1, #132	; 0x84
 8006288:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800628a:	23a4      	movs	r3, #164	; 0xa4
 800628c:	18fb      	adds	r3, r7, r3
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	2380      	movs	r3, #128	; 0x80
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	4013      	ands	r3, r2
 8006296:	d013      	beq.n	80062c0 <HAL_UART_IRQHandler+0x198>
 8006298:	23a0      	movs	r3, #160	; 0xa0
 800629a:	18fb      	adds	r3, r7, r3
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	2380      	movs	r3, #128	; 0x80
 80062a0:	04db      	lsls	r3, r3, #19
 80062a2:	4013      	ands	r3, r2
 80062a4:	d00c      	beq.n	80062c0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2280      	movs	r2, #128	; 0x80
 80062ac:	0112      	lsls	r2, r2, #4
 80062ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2284      	movs	r2, #132	; 0x84
 80062b4:	589b      	ldr	r3, [r3, r2]
 80062b6:	2220      	movs	r2, #32
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2184      	movs	r1, #132	; 0x84
 80062be:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2284      	movs	r2, #132	; 0x84
 80062c4:	589b      	ldr	r3, [r3, r2]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d100      	bne.n	80062cc <HAL_UART_IRQHandler+0x1a4>
 80062ca:	e201      	b.n	80066d0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062cc:	23a4      	movs	r3, #164	; 0xa4
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2220      	movs	r2, #32
 80062d4:	4013      	ands	r3, r2
 80062d6:	d00e      	beq.n	80062f6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062d8:	23a0      	movs	r3, #160	; 0xa0
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2220      	movs	r2, #32
 80062e0:	4013      	ands	r3, r2
 80062e2:	d008      	beq.n	80062f6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	0010      	movs	r0, r2
 80062f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2284      	movs	r2, #132	; 0x84
 80062fa:	589b      	ldr	r3, [r3, r2]
 80062fc:	2194      	movs	r1, #148	; 0x94
 80062fe:	187a      	adds	r2, r7, r1
 8006300:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	2240      	movs	r2, #64	; 0x40
 800630a:	4013      	ands	r3, r2
 800630c:	2b40      	cmp	r3, #64	; 0x40
 800630e:	d004      	beq.n	800631a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006310:	187b      	adds	r3, r7, r1
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2228      	movs	r2, #40	; 0x28
 8006316:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006318:	d047      	beq.n	80063aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	0018      	movs	r0, r3
 800631e:	f000 ff2f 	bl	8007180 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	2240      	movs	r2, #64	; 0x40
 800632a:	4013      	ands	r3, r2
 800632c:	2b40      	cmp	r3, #64	; 0x40
 800632e:	d137      	bne.n	80063a0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006330:	f3ef 8310 	mrs	r3, PRIMASK
 8006334:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006338:	2090      	movs	r0, #144	; 0x90
 800633a:	183a      	adds	r2, r7, r0
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	2301      	movs	r3, #1
 8006340:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006342:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006344:	f383 8810 	msr	PRIMASK, r3
}
 8006348:	46c0      	nop			; (mov r8, r8)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2140      	movs	r1, #64	; 0x40
 8006356:	438a      	bics	r2, r1
 8006358:	609a      	str	r2, [r3, #8]
 800635a:	183b      	adds	r3, r7, r0
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006360:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006362:	f383 8810 	msr	PRIMASK, r3
}
 8006366:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800636c:	2b00      	cmp	r3, #0
 800636e:	d012      	beq.n	8006396 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006374:	4a14      	ldr	r2, [pc, #80]	; (80063c8 <HAL_UART_IRQHandler+0x2a0>)
 8006376:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800637c:	0018      	movs	r0, r3
 800637e:	f7fc fe0b 	bl	8002f98 <HAL_DMA_Abort_IT>
 8006382:	1e03      	subs	r3, r0, #0
 8006384:	d01a      	beq.n	80063bc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800638a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006390:	0018      	movs	r0, r3
 8006392:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006394:	e012      	b.n	80063bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	0018      	movs	r0, r3
 800639a:	f000 f9af 	bl	80066fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800639e:	e00d      	b.n	80063bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	0018      	movs	r0, r3
 80063a4:	f000 f9aa 	bl	80066fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a8:	e008      	b.n	80063bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	0018      	movs	r0, r3
 80063ae:	f000 f9a5 	bl	80066fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2284      	movs	r2, #132	; 0x84
 80063b6:	2100      	movs	r1, #0
 80063b8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80063ba:	e189      	b.n	80066d0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063bc:	46c0      	nop			; (mov r8, r8)
    return;
 80063be:	e187      	b.n	80066d0 <HAL_UART_IRQHandler+0x5a8>
 80063c0:	0000080f 	.word	0x0000080f
 80063c4:	04000120 	.word	0x04000120
 80063c8:	08007249 	.word	0x08007249

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d000      	beq.n	80063d6 <HAL_UART_IRQHandler+0x2ae>
 80063d4:	e13b      	b.n	800664e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063d6:	23a4      	movs	r3, #164	; 0xa4
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2210      	movs	r2, #16
 80063de:	4013      	ands	r3, r2
 80063e0:	d100      	bne.n	80063e4 <HAL_UART_IRQHandler+0x2bc>
 80063e2:	e134      	b.n	800664e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063e4:	23a0      	movs	r3, #160	; 0xa0
 80063e6:	18fb      	adds	r3, r7, r3
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2210      	movs	r2, #16
 80063ec:	4013      	ands	r3, r2
 80063ee:	d100      	bne.n	80063f2 <HAL_UART_IRQHandler+0x2ca>
 80063f0:	e12d      	b.n	800664e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2210      	movs	r2, #16
 80063f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2240      	movs	r2, #64	; 0x40
 8006402:	4013      	ands	r3, r2
 8006404:	2b40      	cmp	r3, #64	; 0x40
 8006406:	d000      	beq.n	800640a <HAL_UART_IRQHandler+0x2e2>
 8006408:	e0a1      	b.n	800654e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	217e      	movs	r1, #126	; 0x7e
 8006414:	187b      	adds	r3, r7, r1
 8006416:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006418:	187b      	adds	r3, r7, r1
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d100      	bne.n	8006422 <HAL_UART_IRQHandler+0x2fa>
 8006420:	e158      	b.n	80066d4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2258      	movs	r2, #88	; 0x58
 8006426:	5a9b      	ldrh	r3, [r3, r2]
 8006428:	187a      	adds	r2, r7, r1
 800642a:	8812      	ldrh	r2, [r2, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d300      	bcc.n	8006432 <HAL_UART_IRQHandler+0x30a>
 8006430:	e150      	b.n	80066d4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	187a      	adds	r2, r7, r1
 8006436:	215a      	movs	r1, #90	; 0x5a
 8006438:	8812      	ldrh	r2, [r2, #0]
 800643a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2220      	movs	r2, #32
 8006446:	4013      	ands	r3, r2
 8006448:	d16f      	bne.n	800652a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800644a:	f3ef 8310 	mrs	r3, PRIMASK
 800644e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006452:	67bb      	str	r3, [r7, #120]	; 0x78
 8006454:	2301      	movs	r3, #1
 8006456:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645a:	f383 8810 	msr	PRIMASK, r3
}
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	499e      	ldr	r1, [pc, #632]	; (80066e4 <HAL_UART_IRQHandler+0x5bc>)
 800646c:	400a      	ands	r2, r1
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006472:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	f383 8810 	msr	PRIMASK, r3
}
 800647a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800647c:	f3ef 8310 	mrs	r3, PRIMASK
 8006480:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006484:	677b      	str	r3, [r7, #116]	; 0x74
 8006486:	2301      	movs	r3, #1
 8006488:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800648a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800648c:	f383 8810 	msr	PRIMASK, r3
}
 8006490:	46c0      	nop			; (mov r8, r8)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2101      	movs	r1, #1
 800649e:	438a      	bics	r2, r1
 80064a0:	609a      	str	r2, [r3, #8]
 80064a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064a4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064a8:	f383 8810 	msr	PRIMASK, r3
}
 80064ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ae:	f3ef 8310 	mrs	r3, PRIMASK
 80064b2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80064b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b6:	673b      	str	r3, [r7, #112]	; 0x70
 80064b8:	2301      	movs	r3, #1
 80064ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064be:	f383 8810 	msr	PRIMASK, r3
}
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2140      	movs	r1, #64	; 0x40
 80064d0:	438a      	bics	r2, r1
 80064d2:	609a      	str	r2, [r3, #8]
 80064d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064d6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064da:	f383 8810 	msr	PRIMASK, r3
}
 80064de:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2280      	movs	r2, #128	; 0x80
 80064e4:	2120      	movs	r1, #32
 80064e6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ee:	f3ef 8310 	mrs	r3, PRIMASK
 80064f2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80064f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064f8:	2301      	movs	r3, #1
 80064fa:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064fe:	f383 8810 	msr	PRIMASK, r3
}
 8006502:	46c0      	nop			; (mov r8, r8)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2110      	movs	r1, #16
 8006510:	438a      	bics	r2, r1
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006516:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800651a:	f383 8810 	msr	PRIMASK, r3
}
 800651e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006524:	0018      	movs	r0, r3
 8006526:	f7fc fcf7 	bl	8002f18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2202      	movs	r2, #2
 800652e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2258      	movs	r2, #88	; 0x58
 8006534:	5a9a      	ldrh	r2, [r3, r2]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	215a      	movs	r1, #90	; 0x5a
 800653a:	5a5b      	ldrh	r3, [r3, r1]
 800653c:	b29b      	uxth	r3, r3
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	b29a      	uxth	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	0011      	movs	r1, r2
 8006546:	0018      	movs	r0, r3
 8006548:	f000 f8e0 	bl	800670c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800654c:	e0c2      	b.n	80066d4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2258      	movs	r2, #88	; 0x58
 8006552:	5a99      	ldrh	r1, [r3, r2]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	225a      	movs	r2, #90	; 0x5a
 8006558:	5a9b      	ldrh	r3, [r3, r2]
 800655a:	b29a      	uxth	r2, r3
 800655c:	208e      	movs	r0, #142	; 0x8e
 800655e:	183b      	adds	r3, r7, r0
 8006560:	1a8a      	subs	r2, r1, r2
 8006562:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	225a      	movs	r2, #90	; 0x5a
 8006568:	5a9b      	ldrh	r3, [r3, r2]
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d100      	bne.n	8006572 <HAL_UART_IRQHandler+0x44a>
 8006570:	e0b2      	b.n	80066d8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8006572:	183b      	adds	r3, r7, r0
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d100      	bne.n	800657c <HAL_UART_IRQHandler+0x454>
 800657a:	e0ad      	b.n	80066d8 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800657c:	f3ef 8310 	mrs	r3, PRIMASK
 8006580:	60fb      	str	r3, [r7, #12]
  return(result);
 8006582:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006584:	2488      	movs	r4, #136	; 0x88
 8006586:	193a      	adds	r2, r7, r4
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	2301      	movs	r3, #1
 800658c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f383 8810 	msr	PRIMASK, r3
}
 8006594:	46c0      	nop			; (mov r8, r8)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4951      	ldr	r1, [pc, #324]	; (80066e8 <HAL_UART_IRQHandler+0x5c0>)
 80065a2:	400a      	ands	r2, r1
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	193b      	adds	r3, r7, r4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f383 8810 	msr	PRIMASK, r3
}
 80065b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065b4:	f3ef 8310 	mrs	r3, PRIMASK
 80065b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80065ba:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065bc:	2484      	movs	r4, #132	; 0x84
 80065be:	193a      	adds	r2, r7, r4
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	2301      	movs	r3, #1
 80065c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	f383 8810 	msr	PRIMASK, r3
}
 80065cc:	46c0      	nop			; (mov r8, r8)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2101      	movs	r1, #1
 80065da:	438a      	bics	r2, r1
 80065dc:	609a      	str	r2, [r3, #8]
 80065de:	193b      	adds	r3, r7, r4
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	f383 8810 	msr	PRIMASK, r3
}
 80065ea:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2280      	movs	r2, #128	; 0x80
 80065f0:	2120      	movs	r1, #32
 80065f2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006600:	f3ef 8310 	mrs	r3, PRIMASK
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006608:	2480      	movs	r4, #128	; 0x80
 800660a:	193a      	adds	r2, r7, r4
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	2301      	movs	r3, #1
 8006610:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	f383 8810 	msr	PRIMASK, r3
}
 8006618:	46c0      	nop			; (mov r8, r8)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2110      	movs	r1, #16
 8006626:	438a      	bics	r2, r1
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	193b      	adds	r3, r7, r4
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006632:	f383 8810 	msr	PRIMASK, r3
}
 8006636:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800663e:	183b      	adds	r3, r7, r0
 8006640:	881a      	ldrh	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	0011      	movs	r1, r2
 8006646:	0018      	movs	r0, r3
 8006648:	f000 f860 	bl	800670c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800664c:	e044      	b.n	80066d8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800664e:	23a4      	movs	r3, #164	; 0xa4
 8006650:	18fb      	adds	r3, r7, r3
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	2380      	movs	r3, #128	; 0x80
 8006656:	035b      	lsls	r3, r3, #13
 8006658:	4013      	ands	r3, r2
 800665a:	d010      	beq.n	800667e <HAL_UART_IRQHandler+0x556>
 800665c:	239c      	movs	r3, #156	; 0x9c
 800665e:	18fb      	adds	r3, r7, r3
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	2380      	movs	r3, #128	; 0x80
 8006664:	03db      	lsls	r3, r3, #15
 8006666:	4013      	ands	r3, r2
 8006668:	d009      	beq.n	800667e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2280      	movs	r2, #128	; 0x80
 8006670:	0352      	lsls	r2, r2, #13
 8006672:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	0018      	movs	r0, r3
 8006678:	f000 ffec 	bl	8007654 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800667c:	e02f      	b.n	80066de <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800667e:	23a4      	movs	r3, #164	; 0xa4
 8006680:	18fb      	adds	r3, r7, r3
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2280      	movs	r2, #128	; 0x80
 8006686:	4013      	ands	r3, r2
 8006688:	d00f      	beq.n	80066aa <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800668a:	23a0      	movs	r3, #160	; 0xa0
 800668c:	18fb      	adds	r3, r7, r3
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2280      	movs	r2, #128	; 0x80
 8006692:	4013      	ands	r3, r2
 8006694:	d009      	beq.n	80066aa <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01e      	beq.n	80066dc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	0010      	movs	r0, r2
 80066a6:	4798      	blx	r3
    }
    return;
 80066a8:	e018      	b.n	80066dc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066aa:	23a4      	movs	r3, #164	; 0xa4
 80066ac:	18fb      	adds	r3, r7, r3
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2240      	movs	r2, #64	; 0x40
 80066b2:	4013      	ands	r3, r2
 80066b4:	d013      	beq.n	80066de <HAL_UART_IRQHandler+0x5b6>
 80066b6:	23a0      	movs	r3, #160	; 0xa0
 80066b8:	18fb      	adds	r3, r7, r3
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2240      	movs	r2, #64	; 0x40
 80066be:	4013      	ands	r3, r2
 80066c0:	d00d      	beq.n	80066de <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	0018      	movs	r0, r3
 80066c6:	f000 fdd6 	bl	8007276 <UART_EndTransmit_IT>
    return;
 80066ca:	e008      	b.n	80066de <HAL_UART_IRQHandler+0x5b6>
      return;
 80066cc:	46c0      	nop			; (mov r8, r8)
 80066ce:	e006      	b.n	80066de <HAL_UART_IRQHandler+0x5b6>
    return;
 80066d0:	46c0      	nop			; (mov r8, r8)
 80066d2:	e004      	b.n	80066de <HAL_UART_IRQHandler+0x5b6>
      return;
 80066d4:	46c0      	nop			; (mov r8, r8)
 80066d6:	e002      	b.n	80066de <HAL_UART_IRQHandler+0x5b6>
      return;
 80066d8:	46c0      	nop			; (mov r8, r8)
 80066da:	e000      	b.n	80066de <HAL_UART_IRQHandler+0x5b6>
    return;
 80066dc:	46c0      	nop			; (mov r8, r8)
  }

}
 80066de:	46bd      	mov	sp, r7
 80066e0:	b02b      	add	sp, #172	; 0xac
 80066e2:	bd90      	pop	{r4, r7, pc}
 80066e4:	fffffeff 	.word	0xfffffeff
 80066e8:	fffffedf 	.word	0xfffffedf

080066ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066f4:	46c0      	nop			; (mov r8, r8)
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b002      	add	sp, #8
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006704:	46c0      	nop			; (mov r8, r8)
 8006706:	46bd      	mov	sp, r7
 8006708:	b002      	add	sp, #8
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	000a      	movs	r2, r1
 8006716:	1cbb      	adds	r3, r7, #2
 8006718:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800671a:	46c0      	nop			; (mov r8, r8)
 800671c:	46bd      	mov	sp, r7
 800671e:	b002      	add	sp, #8
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006724:	b5b0      	push	{r4, r5, r7, lr}
 8006726:	b08e      	sub	sp, #56	; 0x38
 8006728:	af00      	add	r7, sp, #0
 800672a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800672c:	231a      	movs	r3, #26
 800672e:	2218      	movs	r2, #24
 8006730:	189b      	adds	r3, r3, r2
 8006732:	19db      	adds	r3, r3, r7
 8006734:	2200      	movs	r2, #0
 8006736:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	431a      	orrs	r2, r3
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	431a      	orrs	r2, r3
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	4313      	orrs	r3, r2
 800674e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4ac3      	ldr	r2, [pc, #780]	; (8006a64 <UART_SetConfig+0x340>)
 8006758:	4013      	ands	r3, r2
 800675a:	0019      	movs	r1, r3
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006762:	430a      	orrs	r2, r1
 8006764:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	4abe      	ldr	r2, [pc, #760]	; (8006a68 <UART_SetConfig+0x344>)
 800676e:	4013      	ands	r3, r2
 8006770:	0019      	movs	r1, r3
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4ab8      	ldr	r2, [pc, #736]	; (8006a6c <UART_SetConfig+0x348>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d004      	beq.n	8006798 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006794:	4313      	orrs	r3, r2
 8006796:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	4ab4      	ldr	r2, [pc, #720]	; (8006a70 <UART_SetConfig+0x34c>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	0019      	movs	r1, r3
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067aa:	430a      	orrs	r2, r1
 80067ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4ab0      	ldr	r2, [pc, #704]	; (8006a74 <UART_SetConfig+0x350>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d131      	bne.n	800681c <UART_SetConfig+0xf8>
 80067b8:	4baf      	ldr	r3, [pc, #700]	; (8006a78 <UART_SetConfig+0x354>)
 80067ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067bc:	2203      	movs	r2, #3
 80067be:	4013      	ands	r3, r2
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d01d      	beq.n	8006800 <UART_SetConfig+0xdc>
 80067c4:	d823      	bhi.n	800680e <UART_SetConfig+0xea>
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d00c      	beq.n	80067e4 <UART_SetConfig+0xc0>
 80067ca:	d820      	bhi.n	800680e <UART_SetConfig+0xea>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <UART_SetConfig+0xb2>
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d00e      	beq.n	80067f2 <UART_SetConfig+0xce>
 80067d4:	e01b      	b.n	800680e <UART_SetConfig+0xea>
 80067d6:	231b      	movs	r3, #27
 80067d8:	2218      	movs	r2, #24
 80067da:	189b      	adds	r3, r3, r2
 80067dc:	19db      	adds	r3, r3, r7
 80067de:	2201      	movs	r2, #1
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	e0b4      	b.n	800694e <UART_SetConfig+0x22a>
 80067e4:	231b      	movs	r3, #27
 80067e6:	2218      	movs	r2, #24
 80067e8:	189b      	adds	r3, r3, r2
 80067ea:	19db      	adds	r3, r3, r7
 80067ec:	2202      	movs	r2, #2
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	e0ad      	b.n	800694e <UART_SetConfig+0x22a>
 80067f2:	231b      	movs	r3, #27
 80067f4:	2218      	movs	r2, #24
 80067f6:	189b      	adds	r3, r3, r2
 80067f8:	19db      	adds	r3, r3, r7
 80067fa:	2204      	movs	r2, #4
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	e0a6      	b.n	800694e <UART_SetConfig+0x22a>
 8006800:	231b      	movs	r3, #27
 8006802:	2218      	movs	r2, #24
 8006804:	189b      	adds	r3, r3, r2
 8006806:	19db      	adds	r3, r3, r7
 8006808:	2208      	movs	r2, #8
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	e09f      	b.n	800694e <UART_SetConfig+0x22a>
 800680e:	231b      	movs	r3, #27
 8006810:	2218      	movs	r2, #24
 8006812:	189b      	adds	r3, r3, r2
 8006814:	19db      	adds	r3, r3, r7
 8006816:	2210      	movs	r2, #16
 8006818:	701a      	strb	r2, [r3, #0]
 800681a:	e098      	b.n	800694e <UART_SetConfig+0x22a>
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a96      	ldr	r2, [pc, #600]	; (8006a7c <UART_SetConfig+0x358>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d131      	bne.n	800688a <UART_SetConfig+0x166>
 8006826:	4b94      	ldr	r3, [pc, #592]	; (8006a78 <UART_SetConfig+0x354>)
 8006828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682a:	220c      	movs	r2, #12
 800682c:	4013      	ands	r3, r2
 800682e:	2b0c      	cmp	r3, #12
 8006830:	d01d      	beq.n	800686e <UART_SetConfig+0x14a>
 8006832:	d823      	bhi.n	800687c <UART_SetConfig+0x158>
 8006834:	2b08      	cmp	r3, #8
 8006836:	d00c      	beq.n	8006852 <UART_SetConfig+0x12e>
 8006838:	d820      	bhi.n	800687c <UART_SetConfig+0x158>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <UART_SetConfig+0x120>
 800683e:	2b04      	cmp	r3, #4
 8006840:	d00e      	beq.n	8006860 <UART_SetConfig+0x13c>
 8006842:	e01b      	b.n	800687c <UART_SetConfig+0x158>
 8006844:	231b      	movs	r3, #27
 8006846:	2218      	movs	r2, #24
 8006848:	189b      	adds	r3, r3, r2
 800684a:	19db      	adds	r3, r3, r7
 800684c:	2200      	movs	r2, #0
 800684e:	701a      	strb	r2, [r3, #0]
 8006850:	e07d      	b.n	800694e <UART_SetConfig+0x22a>
 8006852:	231b      	movs	r3, #27
 8006854:	2218      	movs	r2, #24
 8006856:	189b      	adds	r3, r3, r2
 8006858:	19db      	adds	r3, r3, r7
 800685a:	2202      	movs	r2, #2
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e076      	b.n	800694e <UART_SetConfig+0x22a>
 8006860:	231b      	movs	r3, #27
 8006862:	2218      	movs	r2, #24
 8006864:	189b      	adds	r3, r3, r2
 8006866:	19db      	adds	r3, r3, r7
 8006868:	2204      	movs	r2, #4
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	e06f      	b.n	800694e <UART_SetConfig+0x22a>
 800686e:	231b      	movs	r3, #27
 8006870:	2218      	movs	r2, #24
 8006872:	189b      	adds	r3, r3, r2
 8006874:	19db      	adds	r3, r3, r7
 8006876:	2208      	movs	r2, #8
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	e068      	b.n	800694e <UART_SetConfig+0x22a>
 800687c:	231b      	movs	r3, #27
 800687e:	2218      	movs	r2, #24
 8006880:	189b      	adds	r3, r3, r2
 8006882:	19db      	adds	r3, r3, r7
 8006884:	2210      	movs	r2, #16
 8006886:	701a      	strb	r2, [r3, #0]
 8006888:	e061      	b.n	800694e <UART_SetConfig+0x22a>
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a7c      	ldr	r2, [pc, #496]	; (8006a80 <UART_SetConfig+0x35c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d106      	bne.n	80068a2 <UART_SetConfig+0x17e>
 8006894:	231b      	movs	r3, #27
 8006896:	2218      	movs	r2, #24
 8006898:	189b      	adds	r3, r3, r2
 800689a:	19db      	adds	r3, r3, r7
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	e055      	b.n	800694e <UART_SetConfig+0x22a>
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a77      	ldr	r2, [pc, #476]	; (8006a84 <UART_SetConfig+0x360>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d106      	bne.n	80068ba <UART_SetConfig+0x196>
 80068ac:	231b      	movs	r3, #27
 80068ae:	2218      	movs	r2, #24
 80068b0:	189b      	adds	r3, r3, r2
 80068b2:	19db      	adds	r3, r3, r7
 80068b4:	2200      	movs	r2, #0
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	e049      	b.n	800694e <UART_SetConfig+0x22a>
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a6b      	ldr	r2, [pc, #428]	; (8006a6c <UART_SetConfig+0x348>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d13e      	bne.n	8006942 <UART_SetConfig+0x21e>
 80068c4:	4b6c      	ldr	r3, [pc, #432]	; (8006a78 <UART_SetConfig+0x354>)
 80068c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068c8:	23c0      	movs	r3, #192	; 0xc0
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	4013      	ands	r3, r2
 80068ce:	22c0      	movs	r2, #192	; 0xc0
 80068d0:	0112      	lsls	r2, r2, #4
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d027      	beq.n	8006926 <UART_SetConfig+0x202>
 80068d6:	22c0      	movs	r2, #192	; 0xc0
 80068d8:	0112      	lsls	r2, r2, #4
 80068da:	4293      	cmp	r3, r2
 80068dc:	d82a      	bhi.n	8006934 <UART_SetConfig+0x210>
 80068de:	2280      	movs	r2, #128	; 0x80
 80068e0:	0112      	lsls	r2, r2, #4
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d011      	beq.n	800690a <UART_SetConfig+0x1e6>
 80068e6:	2280      	movs	r2, #128	; 0x80
 80068e8:	0112      	lsls	r2, r2, #4
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d822      	bhi.n	8006934 <UART_SetConfig+0x210>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d004      	beq.n	80068fc <UART_SetConfig+0x1d8>
 80068f2:	2280      	movs	r2, #128	; 0x80
 80068f4:	00d2      	lsls	r2, r2, #3
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00e      	beq.n	8006918 <UART_SetConfig+0x1f4>
 80068fa:	e01b      	b.n	8006934 <UART_SetConfig+0x210>
 80068fc:	231b      	movs	r3, #27
 80068fe:	2218      	movs	r2, #24
 8006900:	189b      	adds	r3, r3, r2
 8006902:	19db      	adds	r3, r3, r7
 8006904:	2200      	movs	r2, #0
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	e021      	b.n	800694e <UART_SetConfig+0x22a>
 800690a:	231b      	movs	r3, #27
 800690c:	2218      	movs	r2, #24
 800690e:	189b      	adds	r3, r3, r2
 8006910:	19db      	adds	r3, r3, r7
 8006912:	2202      	movs	r2, #2
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	e01a      	b.n	800694e <UART_SetConfig+0x22a>
 8006918:	231b      	movs	r3, #27
 800691a:	2218      	movs	r2, #24
 800691c:	189b      	adds	r3, r3, r2
 800691e:	19db      	adds	r3, r3, r7
 8006920:	2204      	movs	r2, #4
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	e013      	b.n	800694e <UART_SetConfig+0x22a>
 8006926:	231b      	movs	r3, #27
 8006928:	2218      	movs	r2, #24
 800692a:	189b      	adds	r3, r3, r2
 800692c:	19db      	adds	r3, r3, r7
 800692e:	2208      	movs	r2, #8
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	e00c      	b.n	800694e <UART_SetConfig+0x22a>
 8006934:	231b      	movs	r3, #27
 8006936:	2218      	movs	r2, #24
 8006938:	189b      	adds	r3, r3, r2
 800693a:	19db      	adds	r3, r3, r7
 800693c:	2210      	movs	r2, #16
 800693e:	701a      	strb	r2, [r3, #0]
 8006940:	e005      	b.n	800694e <UART_SetConfig+0x22a>
 8006942:	231b      	movs	r3, #27
 8006944:	2218      	movs	r2, #24
 8006946:	189b      	adds	r3, r3, r2
 8006948:	19db      	adds	r3, r3, r7
 800694a:	2210      	movs	r2, #16
 800694c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a46      	ldr	r2, [pc, #280]	; (8006a6c <UART_SetConfig+0x348>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d000      	beq.n	800695a <UART_SetConfig+0x236>
 8006958:	e09a      	b.n	8006a90 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800695a:	231b      	movs	r3, #27
 800695c:	2218      	movs	r2, #24
 800695e:	189b      	adds	r3, r3, r2
 8006960:	19db      	adds	r3, r3, r7
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b08      	cmp	r3, #8
 8006966:	d01d      	beq.n	80069a4 <UART_SetConfig+0x280>
 8006968:	dc20      	bgt.n	80069ac <UART_SetConfig+0x288>
 800696a:	2b04      	cmp	r3, #4
 800696c:	d015      	beq.n	800699a <UART_SetConfig+0x276>
 800696e:	dc1d      	bgt.n	80069ac <UART_SetConfig+0x288>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <UART_SetConfig+0x256>
 8006974:	2b02      	cmp	r3, #2
 8006976:	d005      	beq.n	8006984 <UART_SetConfig+0x260>
 8006978:	e018      	b.n	80069ac <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800697a:	f7fe f92d 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
 800697e:	0003      	movs	r3, r0
 8006980:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006982:	e01c      	b.n	80069be <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006984:	4b3c      	ldr	r3, [pc, #240]	; (8006a78 <UART_SetConfig+0x354>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2210      	movs	r2, #16
 800698a:	4013      	ands	r3, r2
 800698c:	d002      	beq.n	8006994 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800698e:	4b3e      	ldr	r3, [pc, #248]	; (8006a88 <UART_SetConfig+0x364>)
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006992:	e014      	b.n	80069be <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006994:	4b3d      	ldr	r3, [pc, #244]	; (8006a8c <UART_SetConfig+0x368>)
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006998:	e011      	b.n	80069be <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800699a:	f7fe f86d 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 800699e:	0003      	movs	r3, r0
 80069a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069a2:	e00c      	b.n	80069be <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069a4:	2380      	movs	r3, #128	; 0x80
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069aa:	e008      	b.n	80069be <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80069b0:	231a      	movs	r3, #26
 80069b2:	2218      	movs	r2, #24
 80069b4:	189b      	adds	r3, r3, r2
 80069b6:	19db      	adds	r3, r3, r7
 80069b8:	2201      	movs	r2, #1
 80069ba:	701a      	strb	r2, [r3, #0]
        break;
 80069bc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d100      	bne.n	80069c6 <UART_SetConfig+0x2a2>
 80069c4:	e133      	b.n	8006c2e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	0013      	movs	r3, r2
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	189b      	adds	r3, r3, r2
 80069d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d305      	bcc.n	80069e2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069de:	429a      	cmp	r2, r3
 80069e0:	d906      	bls.n	80069f0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80069e2:	231a      	movs	r3, #26
 80069e4:	2218      	movs	r2, #24
 80069e6:	189b      	adds	r3, r3, r2
 80069e8:	19db      	adds	r3, r3, r7
 80069ea:	2201      	movs	r2, #1
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	e11e      	b.n	8006c2e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	2300      	movs	r3, #0
 80069f6:	617b      	str	r3, [r7, #20]
 80069f8:	6939      	ldr	r1, [r7, #16]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	000b      	movs	r3, r1
 80069fe:	0e1b      	lsrs	r3, r3, #24
 8006a00:	0010      	movs	r0, r2
 8006a02:	0205      	lsls	r5, r0, #8
 8006a04:	431d      	orrs	r5, r3
 8006a06:	000b      	movs	r3, r1
 8006a08:	021c      	lsls	r4, r3, #8
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	085b      	lsrs	r3, r3, #1
 8006a10:	60bb      	str	r3, [r7, #8]
 8006a12:	2300      	movs	r3, #0
 8006a14:	60fb      	str	r3, [r7, #12]
 8006a16:	68b8      	ldr	r0, [r7, #8]
 8006a18:	68f9      	ldr	r1, [r7, #12]
 8006a1a:	1900      	adds	r0, r0, r4
 8006a1c:	4169      	adcs	r1, r5
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	2300      	movs	r3, #0
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f7f9 fc02 	bl	8000234 <__aeabi_uldivmod>
 8006a30:	0002      	movs	r2, r0
 8006a32:	000b      	movs	r3, r1
 8006a34:	0013      	movs	r3, r2
 8006a36:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a3a:	23c0      	movs	r3, #192	; 0xc0
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d309      	bcc.n	8006a56 <UART_SetConfig+0x332>
 8006a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a44:	2380      	movs	r3, #128	; 0x80
 8006a46:	035b      	lsls	r3, r3, #13
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d204      	bcs.n	8006a56 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a52:	60da      	str	r2, [r3, #12]
 8006a54:	e0eb      	b.n	8006c2e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006a56:	231a      	movs	r3, #26
 8006a58:	2218      	movs	r2, #24
 8006a5a:	189b      	adds	r3, r3, r2
 8006a5c:	19db      	adds	r3, r3, r7
 8006a5e:	2201      	movs	r2, #1
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	e0e4      	b.n	8006c2e <UART_SetConfig+0x50a>
 8006a64:	efff69f3 	.word	0xefff69f3
 8006a68:	ffffcfff 	.word	0xffffcfff
 8006a6c:	40004800 	.word	0x40004800
 8006a70:	fffff4ff 	.word	0xfffff4ff
 8006a74:	40013800 	.word	0x40013800
 8006a78:	40021000 	.word	0x40021000
 8006a7c:	40004400 	.word	0x40004400
 8006a80:	40004c00 	.word	0x40004c00
 8006a84:	40005000 	.word	0x40005000
 8006a88:	003d0900 	.word	0x003d0900
 8006a8c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	2380      	movs	r3, #128	; 0x80
 8006a96:	021b      	lsls	r3, r3, #8
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d000      	beq.n	8006a9e <UART_SetConfig+0x37a>
 8006a9c:	e070      	b.n	8006b80 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8006a9e:	231b      	movs	r3, #27
 8006aa0:	2218      	movs	r2, #24
 8006aa2:	189b      	adds	r3, r3, r2
 8006aa4:	19db      	adds	r3, r3, r7
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d822      	bhi.n	8006af2 <UART_SetConfig+0x3ce>
 8006aac:	009a      	lsls	r2, r3, #2
 8006aae:	4b67      	ldr	r3, [pc, #412]	; (8006c4c <UART_SetConfig+0x528>)
 8006ab0:	18d3      	adds	r3, r2, r3
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab6:	f7fe f88f 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
 8006aba:	0003      	movs	r3, r0
 8006abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006abe:	e021      	b.n	8006b04 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ac0:	f7fe f8a0 	bl	8004c04 <HAL_RCC_GetPCLK2Freq>
 8006ac4:	0003      	movs	r3, r0
 8006ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ac8:	e01c      	b.n	8006b04 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aca:	4b61      	ldr	r3, [pc, #388]	; (8006c50 <UART_SetConfig+0x52c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2210      	movs	r2, #16
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	d002      	beq.n	8006ada <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006ad4:	4b5f      	ldr	r3, [pc, #380]	; (8006c54 <UART_SetConfig+0x530>)
 8006ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ad8:	e014      	b.n	8006b04 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006ada:	4b5f      	ldr	r3, [pc, #380]	; (8006c58 <UART_SetConfig+0x534>)
 8006adc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ade:	e011      	b.n	8006b04 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ae0:	f7fd ffca 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8006ae4:	0003      	movs	r3, r0
 8006ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ae8:	e00c      	b.n	8006b04 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aea:	2380      	movs	r3, #128	; 0x80
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006af0:	e008      	b.n	8006b04 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006af6:	231a      	movs	r3, #26
 8006af8:	2218      	movs	r2, #24
 8006afa:	189b      	adds	r3, r3, r2
 8006afc:	19db      	adds	r3, r3, r7
 8006afe:	2201      	movs	r2, #1
 8006b00:	701a      	strb	r2, [r3, #0]
        break;
 8006b02:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d100      	bne.n	8006b0c <UART_SetConfig+0x3e8>
 8006b0a:	e090      	b.n	8006c2e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	005a      	lsls	r2, r3, #1
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	085b      	lsrs	r3, r3, #1
 8006b16:	18d2      	adds	r2, r2, r3
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	0019      	movs	r1, r3
 8006b1e:	0010      	movs	r0, r2
 8006b20:	f7f9 fafc 	bl	800011c <__udivsi3>
 8006b24:	0003      	movs	r3, r0
 8006b26:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	2b0f      	cmp	r3, #15
 8006b2c:	d921      	bls.n	8006b72 <UART_SetConfig+0x44e>
 8006b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b30:	2380      	movs	r3, #128	; 0x80
 8006b32:	025b      	lsls	r3, r3, #9
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d21c      	bcs.n	8006b72 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	200e      	movs	r0, #14
 8006b3e:	2418      	movs	r4, #24
 8006b40:	1903      	adds	r3, r0, r4
 8006b42:	19db      	adds	r3, r3, r7
 8006b44:	210f      	movs	r1, #15
 8006b46:	438a      	bics	r2, r1
 8006b48:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2207      	movs	r2, #7
 8006b52:	4013      	ands	r3, r2
 8006b54:	b299      	uxth	r1, r3
 8006b56:	1903      	adds	r3, r0, r4
 8006b58:	19db      	adds	r3, r3, r7
 8006b5a:	1902      	adds	r2, r0, r4
 8006b5c:	19d2      	adds	r2, r2, r7
 8006b5e:	8812      	ldrh	r2, [r2, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	1902      	adds	r2, r0, r4
 8006b6a:	19d2      	adds	r2, r2, r7
 8006b6c:	8812      	ldrh	r2, [r2, #0]
 8006b6e:	60da      	str	r2, [r3, #12]
 8006b70:	e05d      	b.n	8006c2e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006b72:	231a      	movs	r3, #26
 8006b74:	2218      	movs	r2, #24
 8006b76:	189b      	adds	r3, r3, r2
 8006b78:	19db      	adds	r3, r3, r7
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	e056      	b.n	8006c2e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b80:	231b      	movs	r3, #27
 8006b82:	2218      	movs	r2, #24
 8006b84:	189b      	adds	r3, r3, r2
 8006b86:	19db      	adds	r3, r3, r7
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b08      	cmp	r3, #8
 8006b8c:	d822      	bhi.n	8006bd4 <UART_SetConfig+0x4b0>
 8006b8e:	009a      	lsls	r2, r3, #2
 8006b90:	4b32      	ldr	r3, [pc, #200]	; (8006c5c <UART_SetConfig+0x538>)
 8006b92:	18d3      	adds	r3, r2, r3
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b98:	f7fe f81e 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
 8006b9c:	0003      	movs	r3, r0
 8006b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ba0:	e021      	b.n	8006be6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ba2:	f7fe f82f 	bl	8004c04 <HAL_RCC_GetPCLK2Freq>
 8006ba6:	0003      	movs	r3, r0
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006baa:	e01c      	b.n	8006be6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bac:	4b28      	ldr	r3, [pc, #160]	; (8006c50 <UART_SetConfig+0x52c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2210      	movs	r2, #16
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	d002      	beq.n	8006bbc <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006bb6:	4b27      	ldr	r3, [pc, #156]	; (8006c54 <UART_SetConfig+0x530>)
 8006bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bba:	e014      	b.n	8006be6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006bbc:	4b26      	ldr	r3, [pc, #152]	; (8006c58 <UART_SetConfig+0x534>)
 8006bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bc0:	e011      	b.n	8006be6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bc2:	f7fd ff59 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8006bc6:	0003      	movs	r3, r0
 8006bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bca:	e00c      	b.n	8006be6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bcc:	2380      	movs	r3, #128	; 0x80
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bd2:	e008      	b.n	8006be6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006bd8:	231a      	movs	r3, #26
 8006bda:	2218      	movs	r2, #24
 8006bdc:	189b      	adds	r3, r3, r2
 8006bde:	19db      	adds	r3, r3, r7
 8006be0:	2201      	movs	r2, #1
 8006be2:	701a      	strb	r2, [r3, #0]
        break;
 8006be4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d020      	beq.n	8006c2e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	085a      	lsrs	r2, r3, #1
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	18d2      	adds	r2, r2, r3
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	0019      	movs	r1, r3
 8006bfc:	0010      	movs	r0, r2
 8006bfe:	f7f9 fa8d 	bl	800011c <__udivsi3>
 8006c02:	0003      	movs	r3, r0
 8006c04:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	2b0f      	cmp	r3, #15
 8006c0a:	d90a      	bls.n	8006c22 <UART_SetConfig+0x4fe>
 8006c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c0e:	2380      	movs	r3, #128	; 0x80
 8006c10:	025b      	lsls	r3, r3, #9
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d205      	bcs.n	8006c22 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60da      	str	r2, [r3, #12]
 8006c20:	e005      	b.n	8006c2e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006c22:	231a      	movs	r3, #26
 8006c24:	2218      	movs	r2, #24
 8006c26:	189b      	adds	r3, r3, r2
 8006c28:	19db      	adds	r3, r3, r7
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	2200      	movs	r2, #0
 8006c32:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	2200      	movs	r2, #0
 8006c38:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c3a:	231a      	movs	r3, #26
 8006c3c:	2218      	movs	r2, #24
 8006c3e:	189b      	adds	r3, r3, r2
 8006c40:	19db      	adds	r3, r3, r7
 8006c42:	781b      	ldrb	r3, [r3, #0]
}
 8006c44:	0018      	movs	r0, r3
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b00e      	add	sp, #56	; 0x38
 8006c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8006c4c:	080087b8 	.word	0x080087b8
 8006c50:	40021000 	.word	0x40021000
 8006c54:	003d0900 	.word	0x003d0900
 8006c58:	00f42400 	.word	0x00f42400
 8006c5c:	080087dc 	.word	0x080087dc

08006c60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	4013      	ands	r3, r2
 8006c70:	d00b      	beq.n	8006c8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	4a4a      	ldr	r2, [pc, #296]	; (8006da4 <UART_AdvFeatureConfig+0x144>)
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	0019      	movs	r1, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2202      	movs	r2, #2
 8006c90:	4013      	ands	r3, r2
 8006c92:	d00b      	beq.n	8006cac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	4a43      	ldr	r2, [pc, #268]	; (8006da8 <UART_AdvFeatureConfig+0x148>)
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	0019      	movs	r1, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	2204      	movs	r2, #4
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	d00b      	beq.n	8006cce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	4a3b      	ldr	r2, [pc, #236]	; (8006dac <UART_AdvFeatureConfig+0x14c>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	0019      	movs	r1, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	2208      	movs	r2, #8
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	d00b      	beq.n	8006cf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	4a34      	ldr	r2, [pc, #208]	; (8006db0 <UART_AdvFeatureConfig+0x150>)
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	0019      	movs	r1, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	2210      	movs	r2, #16
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	d00b      	beq.n	8006d12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	4a2c      	ldr	r2, [pc, #176]	; (8006db4 <UART_AdvFeatureConfig+0x154>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	0019      	movs	r1, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	2220      	movs	r2, #32
 8006d18:	4013      	ands	r3, r2
 8006d1a:	d00b      	beq.n	8006d34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	4a25      	ldr	r2, [pc, #148]	; (8006db8 <UART_AdvFeatureConfig+0x158>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	0019      	movs	r1, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	2240      	movs	r2, #64	; 0x40
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	d01d      	beq.n	8006d7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	4a1d      	ldr	r2, [pc, #116]	; (8006dbc <UART_AdvFeatureConfig+0x15c>)
 8006d46:	4013      	ands	r3, r2
 8006d48:	0019      	movs	r1, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d5a:	2380      	movs	r3, #128	; 0x80
 8006d5c:	035b      	lsls	r3, r3, #13
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d10b      	bne.n	8006d7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	4a15      	ldr	r2, [pc, #84]	; (8006dc0 <UART_AdvFeatureConfig+0x160>)
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	0019      	movs	r1, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	2280      	movs	r2, #128	; 0x80
 8006d80:	4013      	ands	r3, r2
 8006d82:	d00b      	beq.n	8006d9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	4a0e      	ldr	r2, [pc, #56]	; (8006dc4 <UART_AdvFeatureConfig+0x164>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	0019      	movs	r1, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	605a      	str	r2, [r3, #4]
  }
}
 8006d9c:	46c0      	nop			; (mov r8, r8)
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	b002      	add	sp, #8
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	fffdffff 	.word	0xfffdffff
 8006da8:	fffeffff 	.word	0xfffeffff
 8006dac:	fffbffff 	.word	0xfffbffff
 8006db0:	ffff7fff 	.word	0xffff7fff
 8006db4:	ffffefff 	.word	0xffffefff
 8006db8:	ffffdfff 	.word	0xffffdfff
 8006dbc:	ffefffff 	.word	0xffefffff
 8006dc0:	ff9fffff 	.word	0xff9fffff
 8006dc4:	fff7ffff 	.word	0xfff7ffff

08006dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b092      	sub	sp, #72	; 0x48
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2284      	movs	r2, #132	; 0x84
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dd8:	f7fb fd00 	bl	80027dc <HAL_GetTick>
 8006ddc:	0003      	movs	r3, r0
 8006dde:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2208      	movs	r2, #8
 8006de8:	4013      	ands	r3, r2
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d12c      	bne.n	8006e48 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df0:	2280      	movs	r2, #128	; 0x80
 8006df2:	0391      	lsls	r1, r2, #14
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	4a46      	ldr	r2, [pc, #280]	; (8006f10 <UART_CheckIdleState+0x148>)
 8006df8:	9200      	str	r2, [sp, #0]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f000 f88c 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8006e00:	1e03      	subs	r3, r0, #0
 8006e02:	d021      	beq.n	8006e48 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e04:	f3ef 8310 	mrs	r3, PRIMASK
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e0e:	2301      	movs	r3, #1
 8006e10:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	f383 8810 	msr	PRIMASK, r3
}
 8006e18:	46c0      	nop			; (mov r8, r8)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2180      	movs	r1, #128	; 0x80
 8006e26:	438a      	bics	r2, r1
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	f383 8810 	msr	PRIMASK, r3
}
 8006e34:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2278      	movs	r2, #120	; 0x78
 8006e40:	2100      	movs	r1, #0
 8006e42:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e05f      	b.n	8006f08 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2204      	movs	r2, #4
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d146      	bne.n	8006ee4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e58:	2280      	movs	r2, #128	; 0x80
 8006e5a:	03d1      	lsls	r1, r2, #15
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	4a2c      	ldr	r2, [pc, #176]	; (8006f10 <UART_CheckIdleState+0x148>)
 8006e60:	9200      	str	r2, [sp, #0]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f000 f858 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8006e68:	1e03      	subs	r3, r0, #0
 8006e6a:	d03b      	beq.n	8006ee4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e70:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e72:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e74:	637b      	str	r3, [r7, #52]	; 0x34
 8006e76:	2301      	movs	r3, #1
 8006e78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f383 8810 	msr	PRIMASK, r3
}
 8006e80:	46c0      	nop			; (mov r8, r8)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4921      	ldr	r1, [pc, #132]	; (8006f14 <UART_CheckIdleState+0x14c>)
 8006e8e:	400a      	ands	r2, r1
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f383 8810 	msr	PRIMASK, r3
}
 8006e9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea2:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ea4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	f383 8810 	msr	PRIMASK, r3
}
 8006eb2:	46c0      	nop			; (mov r8, r8)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	438a      	bics	r2, r1
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	f383 8810 	msr	PRIMASK, r3
}
 8006ece:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2280      	movs	r2, #128	; 0x80
 8006ed4:	2120      	movs	r1, #32
 8006ed6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2278      	movs	r2, #120	; 0x78
 8006edc:	2100      	movs	r1, #0
 8006ede:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e011      	b.n	8006f08 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2280      	movs	r2, #128	; 0x80
 8006eee:	2120      	movs	r1, #32
 8006ef0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2278      	movs	r2, #120	; 0x78
 8006f02:	2100      	movs	r1, #0
 8006f04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	0018      	movs	r0, r3
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	b010      	add	sp, #64	; 0x40
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	01ffffff 	.word	0x01ffffff
 8006f14:	fffffedf 	.word	0xfffffedf

08006f18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	1dfb      	adds	r3, r7, #7
 8006f26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f28:	e04b      	b.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	d048      	beq.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f30:	f7fb fc54 	bl	80027dc <HAL_GetTick>
 8006f34:	0002      	movs	r2, r0
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d302      	bcc.n	8006f46 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e04b      	b.n	8006fe2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2204      	movs	r2, #4
 8006f52:	4013      	ands	r3, r2
 8006f54:	d035      	beq.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	2208      	movs	r2, #8
 8006f5e:	4013      	ands	r3, r2
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d111      	bne.n	8006f88 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2208      	movs	r2, #8
 8006f6a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f000 f906 	bl	8007180 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2284      	movs	r2, #132	; 0x84
 8006f78:	2108      	movs	r1, #8
 8006f7a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2278      	movs	r2, #120	; 0x78
 8006f80:	2100      	movs	r1, #0
 8006f82:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e02c      	b.n	8006fe2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	69da      	ldr	r2, [r3, #28]
 8006f8e:	2380      	movs	r3, #128	; 0x80
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	401a      	ands	r2, r3
 8006f94:	2380      	movs	r3, #128	; 0x80
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d112      	bne.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2280      	movs	r2, #128	; 0x80
 8006fa2:	0112      	lsls	r2, r2, #4
 8006fa4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	0018      	movs	r0, r3
 8006faa:	f000 f8e9 	bl	8007180 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2284      	movs	r2, #132	; 0x84
 8006fb2:	2120      	movs	r1, #32
 8006fb4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2278      	movs	r2, #120	; 0x78
 8006fba:	2100      	movs	r1, #0
 8006fbc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e00f      	b.n	8006fe2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	425a      	negs	r2, r3
 8006fd2:	4153      	adcs	r3, r2
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	001a      	movs	r2, r3
 8006fd8:	1dfb      	adds	r3, r7, #7
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d0a4      	beq.n	8006f2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	b004      	add	sp, #16
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b090      	sub	sp, #64	; 0x40
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	1dbb      	adds	r3, r7, #6
 8006ff8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	1dba      	adds	r2, r7, #6
 8007004:	2158      	movs	r1, #88	; 0x58
 8007006:	8812      	ldrh	r2, [r2, #0]
 8007008:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	1dba      	adds	r2, r7, #6
 800700e:	215a      	movs	r1, #90	; 0x5a
 8007010:	8812      	ldrh	r2, [r2, #0]
 8007012:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	2380      	movs	r3, #128	; 0x80
 8007020:	015b      	lsls	r3, r3, #5
 8007022:	429a      	cmp	r2, r3
 8007024:	d10d      	bne.n	8007042 <UART_Start_Receive_IT+0x56>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d104      	bne.n	8007038 <UART_Start_Receive_IT+0x4c>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	225c      	movs	r2, #92	; 0x5c
 8007032:	4950      	ldr	r1, [pc, #320]	; (8007174 <UART_Start_Receive_IT+0x188>)
 8007034:	5299      	strh	r1, [r3, r2]
 8007036:	e02e      	b.n	8007096 <UART_Start_Receive_IT+0xaa>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	225c      	movs	r2, #92	; 0x5c
 800703c:	21ff      	movs	r1, #255	; 0xff
 800703e:	5299      	strh	r1, [r3, r2]
 8007040:	e029      	b.n	8007096 <UART_Start_Receive_IT+0xaa>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10d      	bne.n	8007066 <UART_Start_Receive_IT+0x7a>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d104      	bne.n	800705c <UART_Start_Receive_IT+0x70>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	225c      	movs	r2, #92	; 0x5c
 8007056:	21ff      	movs	r1, #255	; 0xff
 8007058:	5299      	strh	r1, [r3, r2]
 800705a:	e01c      	b.n	8007096 <UART_Start_Receive_IT+0xaa>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	225c      	movs	r2, #92	; 0x5c
 8007060:	217f      	movs	r1, #127	; 0x7f
 8007062:	5299      	strh	r1, [r3, r2]
 8007064:	e017      	b.n	8007096 <UART_Start_Receive_IT+0xaa>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	2380      	movs	r3, #128	; 0x80
 800706c:	055b      	lsls	r3, r3, #21
 800706e:	429a      	cmp	r2, r3
 8007070:	d10d      	bne.n	800708e <UART_Start_Receive_IT+0xa2>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d104      	bne.n	8007084 <UART_Start_Receive_IT+0x98>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	225c      	movs	r2, #92	; 0x5c
 800707e:	217f      	movs	r1, #127	; 0x7f
 8007080:	5299      	strh	r1, [r3, r2]
 8007082:	e008      	b.n	8007096 <UART_Start_Receive_IT+0xaa>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	225c      	movs	r2, #92	; 0x5c
 8007088:	213f      	movs	r1, #63	; 0x3f
 800708a:	5299      	strh	r1, [r3, r2]
 800708c:	e003      	b.n	8007096 <UART_Start_Receive_IT+0xaa>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	225c      	movs	r2, #92	; 0x5c
 8007092:	2100      	movs	r1, #0
 8007094:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2284      	movs	r2, #132	; 0x84
 800709a:	2100      	movs	r1, #0
 800709c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2280      	movs	r2, #128	; 0x80
 80070a2:	2122      	movs	r1, #34	; 0x22
 80070a4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a6:	f3ef 8310 	mrs	r3, PRIMASK
 80070aa:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b0:	2301      	movs	r3, #1
 80070b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b6:	f383 8810 	msr	PRIMASK, r3
}
 80070ba:	46c0      	nop			; (mov r8, r8)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2101      	movs	r1, #1
 80070c8:	430a      	orrs	r2, r1
 80070ca:	609a      	str	r2, [r3, #8]
 80070cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ce:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	f383 8810 	msr	PRIMASK, r3
}
 80070d6:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	2380      	movs	r3, #128	; 0x80
 80070de:	015b      	lsls	r3, r3, #5
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d107      	bne.n	80070f4 <UART_Start_Receive_IT+0x108>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d103      	bne.n	80070f4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4a22      	ldr	r2, [pc, #136]	; (8007178 <UART_Start_Receive_IT+0x18c>)
 80070f0:	669a      	str	r2, [r3, #104]	; 0x68
 80070f2:	e002      	b.n	80070fa <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4a21      	ldr	r2, [pc, #132]	; (800717c <UART_Start_Receive_IT+0x190>)
 80070f8:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d019      	beq.n	8007136 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007102:	f3ef 8310 	mrs	r3, PRIMASK
 8007106:	61fb      	str	r3, [r7, #28]
  return(result);
 8007108:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800710a:	637b      	str	r3, [r7, #52]	; 0x34
 800710c:	2301      	movs	r3, #1
 800710e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	f383 8810 	msr	PRIMASK, r3
}
 8007116:	46c0      	nop			; (mov r8, r8)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2190      	movs	r1, #144	; 0x90
 8007124:	0049      	lsls	r1, r1, #1
 8007126:	430a      	orrs	r2, r1
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	f383 8810 	msr	PRIMASK, r3
}
 8007134:	e018      	b.n	8007168 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007136:	f3ef 8310 	mrs	r3, PRIMASK
 800713a:	613b      	str	r3, [r7, #16]
  return(result);
 800713c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800713e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007140:	2301      	movs	r3, #1
 8007142:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f383 8810 	msr	PRIMASK, r3
}
 800714a:	46c0      	nop			; (mov r8, r8)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2120      	movs	r1, #32
 8007158:	430a      	orrs	r2, r1
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	f383 8810 	msr	PRIMASK, r3
}
 8007166:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	0018      	movs	r0, r3
 800716c:	46bd      	mov	sp, r7
 800716e:	b010      	add	sp, #64	; 0x40
 8007170:	bd80      	pop	{r7, pc}
 8007172:	46c0      	nop			; (mov r8, r8)
 8007174:	000001ff 	.word	0x000001ff
 8007178:	08007491 	.word	0x08007491
 800717c:	080072cd 	.word	0x080072cd

08007180 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08e      	sub	sp, #56	; 0x38
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007188:	f3ef 8310 	mrs	r3, PRIMASK
 800718c:	617b      	str	r3, [r7, #20]
  return(result);
 800718e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007190:	637b      	str	r3, [r7, #52]	; 0x34
 8007192:	2301      	movs	r3, #1
 8007194:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	f383 8810 	msr	PRIMASK, r3
}
 800719c:	46c0      	nop			; (mov r8, r8)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4926      	ldr	r1, [pc, #152]	; (8007244 <UART_EndRxTransfer+0xc4>)
 80071aa:	400a      	ands	r2, r1
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	f383 8810 	msr	PRIMASK, r3
}
 80071b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ba:	f3ef 8310 	mrs	r3, PRIMASK
 80071be:	623b      	str	r3, [r7, #32]
  return(result);
 80071c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c2:	633b      	str	r3, [r7, #48]	; 0x30
 80071c4:	2301      	movs	r3, #1
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	f383 8810 	msr	PRIMASK, r3
}
 80071ce:	46c0      	nop			; (mov r8, r8)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689a      	ldr	r2, [r3, #8]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2101      	movs	r1, #1
 80071dc:	438a      	bics	r2, r1
 80071de:	609a      	str	r2, [r3, #8]
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	f383 8810 	msr	PRIMASK, r3
}
 80071ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d118      	bne.n	8007226 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071f4:	f3ef 8310 	mrs	r3, PRIMASK
 80071f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80071fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071fe:	2301      	movs	r3, #1
 8007200:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f383 8810 	msr	PRIMASK, r3
}
 8007208:	46c0      	nop			; (mov r8, r8)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2110      	movs	r1, #16
 8007216:	438a      	bics	r2, r1
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f383 8810 	msr	PRIMASK, r3
}
 8007224:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2280      	movs	r2, #128	; 0x80
 800722a:	2120      	movs	r1, #32
 800722c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	669a      	str	r2, [r3, #104]	; 0x68
}
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	46bd      	mov	sp, r7
 800723e:	b00e      	add	sp, #56	; 0x38
 8007240:	bd80      	pop	{r7, pc}
 8007242:	46c0      	nop			; (mov r8, r8)
 8007244:	fffffedf 	.word	0xfffffedf

08007248 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007254:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	225a      	movs	r2, #90	; 0x5a
 800725a:	2100      	movs	r1, #0
 800725c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2252      	movs	r2, #82	; 0x52
 8007262:	2100      	movs	r1, #0
 8007264:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	0018      	movs	r0, r3
 800726a:	f7ff fa47 	bl	80066fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800726e:	46c0      	nop			; (mov r8, r8)
 8007270:	46bd      	mov	sp, r7
 8007272:	b004      	add	sp, #16
 8007274:	bd80      	pop	{r7, pc}

08007276 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b086      	sub	sp, #24
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800727e:	f3ef 8310 	mrs	r3, PRIMASK
 8007282:	60bb      	str	r3, [r7, #8]
  return(result);
 8007284:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	2301      	movs	r3, #1
 800728a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f383 8810 	msr	PRIMASK, r3
}
 8007292:	46c0      	nop			; (mov r8, r8)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2140      	movs	r1, #64	; 0x40
 80072a0:	438a      	bics	r2, r1
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f383 8810 	msr	PRIMASK, r3
}
 80072ae:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	0018      	movs	r0, r3
 80072c0:	f7ff fa14 	bl	80066ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072c4:	46c0      	nop			; (mov r8, r8)
 80072c6:	46bd      	mov	sp, r7
 80072c8:	b006      	add	sp, #24
 80072ca:	bd80      	pop	{r7, pc}

080072cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b094      	sub	sp, #80	; 0x50
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80072d4:	204e      	movs	r0, #78	; 0x4e
 80072d6:	183b      	adds	r3, r7, r0
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	215c      	movs	r1, #92	; 0x5c
 80072dc:	5a52      	ldrh	r2, [r2, r1]
 80072de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2280      	movs	r2, #128	; 0x80
 80072e4:	589b      	ldr	r3, [r3, r2]
 80072e6:	2b22      	cmp	r3, #34	; 0x22
 80072e8:	d000      	beq.n	80072ec <UART_RxISR_8BIT+0x20>
 80072ea:	e0bf      	b.n	800746c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072f2:	214c      	movs	r1, #76	; 0x4c
 80072f4:	187b      	adds	r3, r7, r1
 80072f6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072f8:	187b      	adds	r3, r7, r1
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	183b      	adds	r3, r7, r0
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	b2d9      	uxtb	r1, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007308:	400a      	ands	r2, r1
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	225a      	movs	r2, #90	; 0x5a
 800731c:	5a9b      	ldrh	r3, [r3, r2]
 800731e:	b29b      	uxth	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	b299      	uxth	r1, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	225a      	movs	r2, #90	; 0x5a
 8007328:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	225a      	movs	r2, #90	; 0x5a
 800732e:	5a9b      	ldrh	r3, [r3, r2]
 8007330:	b29b      	uxth	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d000      	beq.n	8007338 <UART_RxISR_8BIT+0x6c>
 8007336:	e0a1      	b.n	800747c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007338:	f3ef 8310 	mrs	r3, PRIMASK
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007340:	64bb      	str	r3, [r7, #72]	; 0x48
 8007342:	2301      	movs	r3, #1
 8007344:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	f383 8810 	msr	PRIMASK, r3
}
 800734c:	46c0      	nop			; (mov r8, r8)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	494a      	ldr	r1, [pc, #296]	; (8007484 <UART_RxISR_8BIT+0x1b8>)
 800735a:	400a      	ands	r2, r1
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007360:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	f383 8810 	msr	PRIMASK, r3
}
 8007368:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800736a:	f3ef 8310 	mrs	r3, PRIMASK
 800736e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007372:	647b      	str	r3, [r7, #68]	; 0x44
 8007374:	2301      	movs	r3, #1
 8007376:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737a:	f383 8810 	msr	PRIMASK, r3
}
 800737e:	46c0      	nop			; (mov r8, r8)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689a      	ldr	r2, [r3, #8]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2101      	movs	r1, #1
 800738c:	438a      	bics	r2, r1
 800738e:	609a      	str	r2, [r3, #8]
 8007390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007392:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007396:	f383 8810 	msr	PRIMASK, r3
}
 800739a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2280      	movs	r2, #128	; 0x80
 80073a0:	2120      	movs	r1, #32
 80073a2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a34      	ldr	r2, [pc, #208]	; (8007488 <UART_RxISR_8BIT+0x1bc>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d01f      	beq.n	80073fa <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	2380      	movs	r3, #128	; 0x80
 80073c2:	041b      	lsls	r3, r3, #16
 80073c4:	4013      	ands	r3, r2
 80073c6:	d018      	beq.n	80073fa <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c8:	f3ef 8310 	mrs	r3, PRIMASK
 80073cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80073ce:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073d0:	643b      	str	r3, [r7, #64]	; 0x40
 80073d2:	2301      	movs	r3, #1
 80073d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	f383 8810 	msr	PRIMASK, r3
}
 80073dc:	46c0      	nop			; (mov r8, r8)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4928      	ldr	r1, [pc, #160]	; (800748c <UART_RxISR_8BIT+0x1c0>)
 80073ea:	400a      	ands	r2, r1
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	f383 8810 	msr	PRIMASK, r3
}
 80073f8:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d12f      	bne.n	8007462 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007408:	f3ef 8310 	mrs	r3, PRIMASK
 800740c:	60fb      	str	r3, [r7, #12]
  return(result);
 800740e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007412:	2301      	movs	r3, #1
 8007414:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f383 8810 	msr	PRIMASK, r3
}
 800741c:	46c0      	nop			; (mov r8, r8)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2110      	movs	r1, #16
 800742a:	438a      	bics	r2, r1
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007430:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f383 8810 	msr	PRIMASK, r3
}
 8007438:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	2210      	movs	r2, #16
 8007442:	4013      	ands	r3, r2
 8007444:	2b10      	cmp	r3, #16
 8007446:	d103      	bne.n	8007450 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2210      	movs	r2, #16
 800744e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2258      	movs	r2, #88	; 0x58
 8007454:	5a9a      	ldrh	r2, [r3, r2]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	0011      	movs	r1, r2
 800745a:	0018      	movs	r0, r3
 800745c:	f7ff f956 	bl	800670c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007460:	e00c      	b.n	800747c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	0018      	movs	r0, r3
 8007466:	f7fa f8ab 	bl	80015c0 <HAL_UART_RxCpltCallback>
}
 800746a:	e007      	b.n	800747c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699a      	ldr	r2, [r3, #24]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2108      	movs	r1, #8
 8007478:	430a      	orrs	r2, r1
 800747a:	619a      	str	r2, [r3, #24]
}
 800747c:	46c0      	nop			; (mov r8, r8)
 800747e:	46bd      	mov	sp, r7
 8007480:	b014      	add	sp, #80	; 0x50
 8007482:	bd80      	pop	{r7, pc}
 8007484:	fffffedf 	.word	0xfffffedf
 8007488:	40004800 	.word	0x40004800
 800748c:	fbffffff 	.word	0xfbffffff

08007490 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b094      	sub	sp, #80	; 0x50
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007498:	204e      	movs	r0, #78	; 0x4e
 800749a:	183b      	adds	r3, r7, r0
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	215c      	movs	r1, #92	; 0x5c
 80074a0:	5a52      	ldrh	r2, [r2, r1]
 80074a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2280      	movs	r2, #128	; 0x80
 80074a8:	589b      	ldr	r3, [r3, r2]
 80074aa:	2b22      	cmp	r3, #34	; 0x22
 80074ac:	d000      	beq.n	80074b0 <UART_RxISR_16BIT+0x20>
 80074ae:	e0bf      	b.n	8007630 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074b6:	214c      	movs	r1, #76	; 0x4c
 80074b8:	187b      	adds	r3, r7, r1
 80074ba:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80074c2:	187b      	adds	r3, r7, r1
 80074c4:	183a      	adds	r2, r7, r0
 80074c6:	881b      	ldrh	r3, [r3, #0]
 80074c8:	8812      	ldrh	r2, [r2, #0]
 80074ca:	4013      	ands	r3, r2
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d6:	1c9a      	adds	r2, r3, #2
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	225a      	movs	r2, #90	; 0x5a
 80074e0:	5a9b      	ldrh	r3, [r3, r2]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	3b01      	subs	r3, #1
 80074e6:	b299      	uxth	r1, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	225a      	movs	r2, #90	; 0x5a
 80074ec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	225a      	movs	r2, #90	; 0x5a
 80074f2:	5a9b      	ldrh	r3, [r3, r2]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d000      	beq.n	80074fc <UART_RxISR_16BIT+0x6c>
 80074fa:	e0a1      	b.n	8007640 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007500:	623b      	str	r3, [r7, #32]
  return(result);
 8007502:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007504:	647b      	str	r3, [r7, #68]	; 0x44
 8007506:	2301      	movs	r3, #1
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	f383 8810 	msr	PRIMASK, r3
}
 8007510:	46c0      	nop			; (mov r8, r8)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	494a      	ldr	r1, [pc, #296]	; (8007648 <UART_RxISR_16BIT+0x1b8>)
 800751e:	400a      	ands	r2, r1
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007524:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	f383 8810 	msr	PRIMASK, r3
}
 800752c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800752e:	f3ef 8310 	mrs	r3, PRIMASK
 8007532:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007536:	643b      	str	r3, [r7, #64]	; 0x40
 8007538:	2301      	movs	r3, #1
 800753a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753e:	f383 8810 	msr	PRIMASK, r3
}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689a      	ldr	r2, [r3, #8]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2101      	movs	r1, #1
 8007550:	438a      	bics	r2, r1
 8007552:	609a      	str	r2, [r3, #8]
 8007554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007556:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755a:	f383 8810 	msr	PRIMASK, r3
}
 800755e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2280      	movs	r2, #128	; 0x80
 8007564:	2120      	movs	r1, #32
 8007566:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a34      	ldr	r2, [pc, #208]	; (800764c <UART_RxISR_16BIT+0x1bc>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d01f      	beq.n	80075be <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	2380      	movs	r3, #128	; 0x80
 8007586:	041b      	lsls	r3, r3, #16
 8007588:	4013      	ands	r3, r2
 800758a:	d018      	beq.n	80075be <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800758c:	f3ef 8310 	mrs	r3, PRIMASK
 8007590:	617b      	str	r3, [r7, #20]
  return(result);
 8007592:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007596:	2301      	movs	r3, #1
 8007598:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	f383 8810 	msr	PRIMASK, r3
}
 80075a0:	46c0      	nop			; (mov r8, r8)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4928      	ldr	r1, [pc, #160]	; (8007650 <UART_RxISR_16BIT+0x1c0>)
 80075ae:	400a      	ands	r2, r1
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	f383 8810 	msr	PRIMASK, r3
}
 80075bc:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d12f      	bne.n	8007626 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075cc:	f3ef 8310 	mrs	r3, PRIMASK
 80075d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80075d2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80075d6:	2301      	movs	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f383 8810 	msr	PRIMASK, r3
}
 80075e0:	46c0      	nop			; (mov r8, r8)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2110      	movs	r1, #16
 80075ee:	438a      	bics	r2, r1
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f383 8810 	msr	PRIMASK, r3
}
 80075fc:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	2210      	movs	r2, #16
 8007606:	4013      	ands	r3, r2
 8007608:	2b10      	cmp	r3, #16
 800760a:	d103      	bne.n	8007614 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2210      	movs	r2, #16
 8007612:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2258      	movs	r2, #88	; 0x58
 8007618:	5a9a      	ldrh	r2, [r3, r2]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	0011      	movs	r1, r2
 800761e:	0018      	movs	r0, r3
 8007620:	f7ff f874 	bl	800670c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007624:	e00c      	b.n	8007640 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	0018      	movs	r0, r3
 800762a:	f7f9 ffc9 	bl	80015c0 <HAL_UART_RxCpltCallback>
}
 800762e:	e007      	b.n	8007640 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	699a      	ldr	r2, [r3, #24]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2108      	movs	r1, #8
 800763c:	430a      	orrs	r2, r1
 800763e:	619a      	str	r2, [r3, #24]
}
 8007640:	46c0      	nop			; (mov r8, r8)
 8007642:	46bd      	mov	sp, r7
 8007644:	b014      	add	sp, #80	; 0x50
 8007646:	bd80      	pop	{r7, pc}
 8007648:	fffffedf 	.word	0xfffffedf
 800764c:	40004800 	.word	0x40004800
 8007650:	fbffffff 	.word	0xfbffffff

08007654 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800765c:	46c0      	nop			; (mov r8, r8)
 800765e:	46bd      	mov	sp, r7
 8007660:	b002      	add	sp, #8
 8007662:	bd80      	pop	{r7, pc}

08007664 <std>:
 8007664:	2300      	movs	r3, #0
 8007666:	b510      	push	{r4, lr}
 8007668:	0004      	movs	r4, r0
 800766a:	6003      	str	r3, [r0, #0]
 800766c:	6043      	str	r3, [r0, #4]
 800766e:	6083      	str	r3, [r0, #8]
 8007670:	8181      	strh	r1, [r0, #12]
 8007672:	6643      	str	r3, [r0, #100]	; 0x64
 8007674:	81c2      	strh	r2, [r0, #14]
 8007676:	6103      	str	r3, [r0, #16]
 8007678:	6143      	str	r3, [r0, #20]
 800767a:	6183      	str	r3, [r0, #24]
 800767c:	0019      	movs	r1, r3
 800767e:	2208      	movs	r2, #8
 8007680:	305c      	adds	r0, #92	; 0x5c
 8007682:	f000 fa15 	bl	8007ab0 <memset>
 8007686:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <std+0x50>)
 8007688:	6224      	str	r4, [r4, #32]
 800768a:	6263      	str	r3, [r4, #36]	; 0x24
 800768c:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <std+0x54>)
 800768e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007690:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <std+0x58>)
 8007692:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007694:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <std+0x5c>)
 8007696:	6323      	str	r3, [r4, #48]	; 0x30
 8007698:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <std+0x60>)
 800769a:	429c      	cmp	r4, r3
 800769c:	d005      	beq.n	80076aa <std+0x46>
 800769e:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <std+0x64>)
 80076a0:	429c      	cmp	r4, r3
 80076a2:	d002      	beq.n	80076aa <std+0x46>
 80076a4:	4b09      	ldr	r3, [pc, #36]	; (80076cc <std+0x68>)
 80076a6:	429c      	cmp	r4, r3
 80076a8:	d103      	bne.n	80076b2 <std+0x4e>
 80076aa:	0020      	movs	r0, r4
 80076ac:	3058      	adds	r0, #88	; 0x58
 80076ae:	f000 fa7f 	bl	8007bb0 <__retarget_lock_init_recursive>
 80076b2:	bd10      	pop	{r4, pc}
 80076b4:	080078cd 	.word	0x080078cd
 80076b8:	080078f5 	.word	0x080078f5
 80076bc:	0800792d 	.word	0x0800792d
 80076c0:	08007959 	.word	0x08007959
 80076c4:	200004a0 	.word	0x200004a0
 80076c8:	20000508 	.word	0x20000508
 80076cc:	20000570 	.word	0x20000570

080076d0 <stdio_exit_handler>:
 80076d0:	b510      	push	{r4, lr}
 80076d2:	4a03      	ldr	r2, [pc, #12]	; (80076e0 <stdio_exit_handler+0x10>)
 80076d4:	4903      	ldr	r1, [pc, #12]	; (80076e4 <stdio_exit_handler+0x14>)
 80076d6:	4804      	ldr	r0, [pc, #16]	; (80076e8 <stdio_exit_handler+0x18>)
 80076d8:	f000 f86c 	bl	80077b4 <_fwalk_sglue>
 80076dc:	bd10      	pop	{r4, pc}
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	2000000c 	.word	0x2000000c
 80076e4:	08008451 	.word	0x08008451
 80076e8:	20000018 	.word	0x20000018

080076ec <cleanup_stdio>:
 80076ec:	6841      	ldr	r1, [r0, #4]
 80076ee:	4b0b      	ldr	r3, [pc, #44]	; (800771c <cleanup_stdio+0x30>)
 80076f0:	b510      	push	{r4, lr}
 80076f2:	0004      	movs	r4, r0
 80076f4:	4299      	cmp	r1, r3
 80076f6:	d001      	beq.n	80076fc <cleanup_stdio+0x10>
 80076f8:	f000 feaa 	bl	8008450 <_fflush_r>
 80076fc:	68a1      	ldr	r1, [r4, #8]
 80076fe:	4b08      	ldr	r3, [pc, #32]	; (8007720 <cleanup_stdio+0x34>)
 8007700:	4299      	cmp	r1, r3
 8007702:	d002      	beq.n	800770a <cleanup_stdio+0x1e>
 8007704:	0020      	movs	r0, r4
 8007706:	f000 fea3 	bl	8008450 <_fflush_r>
 800770a:	68e1      	ldr	r1, [r4, #12]
 800770c:	4b05      	ldr	r3, [pc, #20]	; (8007724 <cleanup_stdio+0x38>)
 800770e:	4299      	cmp	r1, r3
 8007710:	d002      	beq.n	8007718 <cleanup_stdio+0x2c>
 8007712:	0020      	movs	r0, r4
 8007714:	f000 fe9c 	bl	8008450 <_fflush_r>
 8007718:	bd10      	pop	{r4, pc}
 800771a:	46c0      	nop			; (mov r8, r8)
 800771c:	200004a0 	.word	0x200004a0
 8007720:	20000508 	.word	0x20000508
 8007724:	20000570 	.word	0x20000570

08007728 <global_stdio_init.part.0>:
 8007728:	b510      	push	{r4, lr}
 800772a:	4b09      	ldr	r3, [pc, #36]	; (8007750 <global_stdio_init.part.0+0x28>)
 800772c:	4a09      	ldr	r2, [pc, #36]	; (8007754 <global_stdio_init.part.0+0x2c>)
 800772e:	2104      	movs	r1, #4
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	4809      	ldr	r0, [pc, #36]	; (8007758 <global_stdio_init.part.0+0x30>)
 8007734:	2200      	movs	r2, #0
 8007736:	f7ff ff95 	bl	8007664 <std>
 800773a:	2201      	movs	r2, #1
 800773c:	2109      	movs	r1, #9
 800773e:	4807      	ldr	r0, [pc, #28]	; (800775c <global_stdio_init.part.0+0x34>)
 8007740:	f7ff ff90 	bl	8007664 <std>
 8007744:	2202      	movs	r2, #2
 8007746:	2112      	movs	r1, #18
 8007748:	4805      	ldr	r0, [pc, #20]	; (8007760 <global_stdio_init.part.0+0x38>)
 800774a:	f7ff ff8b 	bl	8007664 <std>
 800774e:	bd10      	pop	{r4, pc}
 8007750:	200005d8 	.word	0x200005d8
 8007754:	080076d1 	.word	0x080076d1
 8007758:	200004a0 	.word	0x200004a0
 800775c:	20000508 	.word	0x20000508
 8007760:	20000570 	.word	0x20000570

08007764 <__sfp_lock_acquire>:
 8007764:	b510      	push	{r4, lr}
 8007766:	4802      	ldr	r0, [pc, #8]	; (8007770 <__sfp_lock_acquire+0xc>)
 8007768:	f000 fa23 	bl	8007bb2 <__retarget_lock_acquire_recursive>
 800776c:	bd10      	pop	{r4, pc}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	200005e1 	.word	0x200005e1

08007774 <__sfp_lock_release>:
 8007774:	b510      	push	{r4, lr}
 8007776:	4802      	ldr	r0, [pc, #8]	; (8007780 <__sfp_lock_release+0xc>)
 8007778:	f000 fa1c 	bl	8007bb4 <__retarget_lock_release_recursive>
 800777c:	bd10      	pop	{r4, pc}
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	200005e1 	.word	0x200005e1

08007784 <__sinit>:
 8007784:	b510      	push	{r4, lr}
 8007786:	0004      	movs	r4, r0
 8007788:	f7ff ffec 	bl	8007764 <__sfp_lock_acquire>
 800778c:	6a23      	ldr	r3, [r4, #32]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <__sinit+0x14>
 8007792:	f7ff ffef 	bl	8007774 <__sfp_lock_release>
 8007796:	bd10      	pop	{r4, pc}
 8007798:	4b04      	ldr	r3, [pc, #16]	; (80077ac <__sinit+0x28>)
 800779a:	6223      	str	r3, [r4, #32]
 800779c:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <__sinit+0x2c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1f6      	bne.n	8007792 <__sinit+0xe>
 80077a4:	f7ff ffc0 	bl	8007728 <global_stdio_init.part.0>
 80077a8:	e7f3      	b.n	8007792 <__sinit+0xe>
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	080076ed 	.word	0x080076ed
 80077b0:	200005d8 	.word	0x200005d8

080077b4 <_fwalk_sglue>:
 80077b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077b6:	0014      	movs	r4, r2
 80077b8:	2600      	movs	r6, #0
 80077ba:	9000      	str	r0, [sp, #0]
 80077bc:	9101      	str	r1, [sp, #4]
 80077be:	68a5      	ldr	r5, [r4, #8]
 80077c0:	6867      	ldr	r7, [r4, #4]
 80077c2:	3f01      	subs	r7, #1
 80077c4:	d504      	bpl.n	80077d0 <_fwalk_sglue+0x1c>
 80077c6:	6824      	ldr	r4, [r4, #0]
 80077c8:	2c00      	cmp	r4, #0
 80077ca:	d1f8      	bne.n	80077be <_fwalk_sglue+0xa>
 80077cc:	0030      	movs	r0, r6
 80077ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077d0:	89ab      	ldrh	r3, [r5, #12]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d908      	bls.n	80077e8 <_fwalk_sglue+0x34>
 80077d6:	220e      	movs	r2, #14
 80077d8:	5eab      	ldrsh	r3, [r5, r2]
 80077da:	3301      	adds	r3, #1
 80077dc:	d004      	beq.n	80077e8 <_fwalk_sglue+0x34>
 80077de:	0029      	movs	r1, r5
 80077e0:	9800      	ldr	r0, [sp, #0]
 80077e2:	9b01      	ldr	r3, [sp, #4]
 80077e4:	4798      	blx	r3
 80077e6:	4306      	orrs	r6, r0
 80077e8:	3568      	adds	r5, #104	; 0x68
 80077ea:	e7ea      	b.n	80077c2 <_fwalk_sglue+0xe>

080077ec <iprintf>:
 80077ec:	b40f      	push	{r0, r1, r2, r3}
 80077ee:	b507      	push	{r0, r1, r2, lr}
 80077f0:	4905      	ldr	r1, [pc, #20]	; (8007808 <iprintf+0x1c>)
 80077f2:	ab04      	add	r3, sp, #16
 80077f4:	6808      	ldr	r0, [r1, #0]
 80077f6:	cb04      	ldmia	r3!, {r2}
 80077f8:	6881      	ldr	r1, [r0, #8]
 80077fa:	9301      	str	r3, [sp, #4]
 80077fc:	f000 fb02 	bl	8007e04 <_vfiprintf_r>
 8007800:	b003      	add	sp, #12
 8007802:	bc08      	pop	{r3}
 8007804:	b004      	add	sp, #16
 8007806:	4718      	bx	r3
 8007808:	20000064 	.word	0x20000064

0800780c <_puts_r>:
 800780c:	6a03      	ldr	r3, [r0, #32]
 800780e:	b570      	push	{r4, r5, r6, lr}
 8007810:	0005      	movs	r5, r0
 8007812:	000e      	movs	r6, r1
 8007814:	6884      	ldr	r4, [r0, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <_puts_r+0x12>
 800781a:	f7ff ffb3 	bl	8007784 <__sinit>
 800781e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007820:	07db      	lsls	r3, r3, #31
 8007822:	d405      	bmi.n	8007830 <_puts_r+0x24>
 8007824:	89a3      	ldrh	r3, [r4, #12]
 8007826:	059b      	lsls	r3, r3, #22
 8007828:	d402      	bmi.n	8007830 <_puts_r+0x24>
 800782a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800782c:	f000 f9c1 	bl	8007bb2 <__retarget_lock_acquire_recursive>
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	071b      	lsls	r3, r3, #28
 8007834:	d502      	bpl.n	800783c <_puts_r+0x30>
 8007836:	6923      	ldr	r3, [r4, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d11f      	bne.n	800787c <_puts_r+0x70>
 800783c:	0021      	movs	r1, r4
 800783e:	0028      	movs	r0, r5
 8007840:	f000 f8d2 	bl	80079e8 <__swsetup_r>
 8007844:	2800      	cmp	r0, #0
 8007846:	d019      	beq.n	800787c <_puts_r+0x70>
 8007848:	2501      	movs	r5, #1
 800784a:	426d      	negs	r5, r5
 800784c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800784e:	07db      	lsls	r3, r3, #31
 8007850:	d405      	bmi.n	800785e <_puts_r+0x52>
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	059b      	lsls	r3, r3, #22
 8007856:	d402      	bmi.n	800785e <_puts_r+0x52>
 8007858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800785a:	f000 f9ab 	bl	8007bb4 <__retarget_lock_release_recursive>
 800785e:	0028      	movs	r0, r5
 8007860:	bd70      	pop	{r4, r5, r6, pc}
 8007862:	3601      	adds	r6, #1
 8007864:	60a3      	str	r3, [r4, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	da04      	bge.n	8007874 <_puts_r+0x68>
 800786a:	69a2      	ldr	r2, [r4, #24]
 800786c:	429a      	cmp	r2, r3
 800786e:	dc16      	bgt.n	800789e <_puts_r+0x92>
 8007870:	290a      	cmp	r1, #10
 8007872:	d014      	beq.n	800789e <_puts_r+0x92>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	6022      	str	r2, [r4, #0]
 800787a:	7019      	strb	r1, [r3, #0]
 800787c:	68a3      	ldr	r3, [r4, #8]
 800787e:	7831      	ldrb	r1, [r6, #0]
 8007880:	3b01      	subs	r3, #1
 8007882:	2900      	cmp	r1, #0
 8007884:	d1ed      	bne.n	8007862 <_puts_r+0x56>
 8007886:	60a3      	str	r3, [r4, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	da0f      	bge.n	80078ac <_puts_r+0xa0>
 800788c:	0028      	movs	r0, r5
 800788e:	0022      	movs	r2, r4
 8007890:	310a      	adds	r1, #10
 8007892:	f000 f867 	bl	8007964 <__swbuf_r>
 8007896:	250a      	movs	r5, #10
 8007898:	3001      	adds	r0, #1
 800789a:	d1d7      	bne.n	800784c <_puts_r+0x40>
 800789c:	e7d4      	b.n	8007848 <_puts_r+0x3c>
 800789e:	0022      	movs	r2, r4
 80078a0:	0028      	movs	r0, r5
 80078a2:	f000 f85f 	bl	8007964 <__swbuf_r>
 80078a6:	3001      	adds	r0, #1
 80078a8:	d1e8      	bne.n	800787c <_puts_r+0x70>
 80078aa:	e7cd      	b.n	8007848 <_puts_r+0x3c>
 80078ac:	250a      	movs	r5, #10
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	6022      	str	r2, [r4, #0]
 80078b4:	701d      	strb	r5, [r3, #0]
 80078b6:	e7c9      	b.n	800784c <_puts_r+0x40>

080078b8 <puts>:
 80078b8:	b510      	push	{r4, lr}
 80078ba:	4b03      	ldr	r3, [pc, #12]	; (80078c8 <puts+0x10>)
 80078bc:	0001      	movs	r1, r0
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	f7ff ffa4 	bl	800780c <_puts_r>
 80078c4:	bd10      	pop	{r4, pc}
 80078c6:	46c0      	nop			; (mov r8, r8)
 80078c8:	20000064 	.word	0x20000064

080078cc <__sread>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	000c      	movs	r4, r1
 80078d0:	250e      	movs	r5, #14
 80078d2:	5f49      	ldrsh	r1, [r1, r5]
 80078d4:	f000 f91a 	bl	8007b0c <_read_r>
 80078d8:	2800      	cmp	r0, #0
 80078da:	db03      	blt.n	80078e4 <__sread+0x18>
 80078dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80078de:	181b      	adds	r3, r3, r0
 80078e0:	6563      	str	r3, [r4, #84]	; 0x54
 80078e2:	bd70      	pop	{r4, r5, r6, pc}
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	4a02      	ldr	r2, [pc, #8]	; (80078f0 <__sread+0x24>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	81a3      	strh	r3, [r4, #12]
 80078ec:	e7f9      	b.n	80078e2 <__sread+0x16>
 80078ee:	46c0      	nop			; (mov r8, r8)
 80078f0:	ffffefff 	.word	0xffffefff

080078f4 <__swrite>:
 80078f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f6:	001f      	movs	r7, r3
 80078f8:	898b      	ldrh	r3, [r1, #12]
 80078fa:	0005      	movs	r5, r0
 80078fc:	000c      	movs	r4, r1
 80078fe:	0016      	movs	r6, r2
 8007900:	05db      	lsls	r3, r3, #23
 8007902:	d505      	bpl.n	8007910 <__swrite+0x1c>
 8007904:	230e      	movs	r3, #14
 8007906:	5ec9      	ldrsh	r1, [r1, r3]
 8007908:	2200      	movs	r2, #0
 800790a:	2302      	movs	r3, #2
 800790c:	f000 f8ea 	bl	8007ae4 <_lseek_r>
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	4a05      	ldr	r2, [pc, #20]	; (8007928 <__swrite+0x34>)
 8007914:	0028      	movs	r0, r5
 8007916:	4013      	ands	r3, r2
 8007918:	81a3      	strh	r3, [r4, #12]
 800791a:	0032      	movs	r2, r6
 800791c:	230e      	movs	r3, #14
 800791e:	5ee1      	ldrsh	r1, [r4, r3]
 8007920:	003b      	movs	r3, r7
 8007922:	f000 f907 	bl	8007b34 <_write_r>
 8007926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007928:	ffffefff 	.word	0xffffefff

0800792c <__sseek>:
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	000c      	movs	r4, r1
 8007930:	250e      	movs	r5, #14
 8007932:	5f49      	ldrsh	r1, [r1, r5]
 8007934:	f000 f8d6 	bl	8007ae4 <_lseek_r>
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	1c42      	adds	r2, r0, #1
 800793c:	d103      	bne.n	8007946 <__sseek+0x1a>
 800793e:	4a05      	ldr	r2, [pc, #20]	; (8007954 <__sseek+0x28>)
 8007940:	4013      	ands	r3, r2
 8007942:	81a3      	strh	r3, [r4, #12]
 8007944:	bd70      	pop	{r4, r5, r6, pc}
 8007946:	2280      	movs	r2, #128	; 0x80
 8007948:	0152      	lsls	r2, r2, #5
 800794a:	4313      	orrs	r3, r2
 800794c:	81a3      	strh	r3, [r4, #12]
 800794e:	6560      	str	r0, [r4, #84]	; 0x54
 8007950:	e7f8      	b.n	8007944 <__sseek+0x18>
 8007952:	46c0      	nop			; (mov r8, r8)
 8007954:	ffffefff 	.word	0xffffefff

08007958 <__sclose>:
 8007958:	b510      	push	{r4, lr}
 800795a:	230e      	movs	r3, #14
 800795c:	5ec9      	ldrsh	r1, [r1, r3]
 800795e:	f000 f8af 	bl	8007ac0 <_close_r>
 8007962:	bd10      	pop	{r4, pc}

08007964 <__swbuf_r>:
 8007964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007966:	0006      	movs	r6, r0
 8007968:	000d      	movs	r5, r1
 800796a:	0014      	movs	r4, r2
 800796c:	2800      	cmp	r0, #0
 800796e:	d004      	beq.n	800797a <__swbuf_r+0x16>
 8007970:	6a03      	ldr	r3, [r0, #32]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <__swbuf_r+0x16>
 8007976:	f7ff ff05 	bl	8007784 <__sinit>
 800797a:	69a3      	ldr	r3, [r4, #24]
 800797c:	60a3      	str	r3, [r4, #8]
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	071b      	lsls	r3, r3, #28
 8007982:	d528      	bpl.n	80079d6 <__swbuf_r+0x72>
 8007984:	6923      	ldr	r3, [r4, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d025      	beq.n	80079d6 <__swbuf_r+0x72>
 800798a:	6923      	ldr	r3, [r4, #16]
 800798c:	6820      	ldr	r0, [r4, #0]
 800798e:	b2ef      	uxtb	r7, r5
 8007990:	1ac0      	subs	r0, r0, r3
 8007992:	6963      	ldr	r3, [r4, #20]
 8007994:	b2ed      	uxtb	r5, r5
 8007996:	4283      	cmp	r3, r0
 8007998:	dc05      	bgt.n	80079a6 <__swbuf_r+0x42>
 800799a:	0021      	movs	r1, r4
 800799c:	0030      	movs	r0, r6
 800799e:	f000 fd57 	bl	8008450 <_fflush_r>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d11d      	bne.n	80079e2 <__swbuf_r+0x7e>
 80079a6:	68a3      	ldr	r3, [r4, #8]
 80079a8:	3001      	adds	r0, #1
 80079aa:	3b01      	subs	r3, #1
 80079ac:	60a3      	str	r3, [r4, #8]
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	6022      	str	r2, [r4, #0]
 80079b4:	701f      	strb	r7, [r3, #0]
 80079b6:	6963      	ldr	r3, [r4, #20]
 80079b8:	4283      	cmp	r3, r0
 80079ba:	d004      	beq.n	80079c6 <__swbuf_r+0x62>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	07db      	lsls	r3, r3, #31
 80079c0:	d507      	bpl.n	80079d2 <__swbuf_r+0x6e>
 80079c2:	2d0a      	cmp	r5, #10
 80079c4:	d105      	bne.n	80079d2 <__swbuf_r+0x6e>
 80079c6:	0021      	movs	r1, r4
 80079c8:	0030      	movs	r0, r6
 80079ca:	f000 fd41 	bl	8008450 <_fflush_r>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d107      	bne.n	80079e2 <__swbuf_r+0x7e>
 80079d2:	0028      	movs	r0, r5
 80079d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d6:	0021      	movs	r1, r4
 80079d8:	0030      	movs	r0, r6
 80079da:	f000 f805 	bl	80079e8 <__swsetup_r>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d0d3      	beq.n	800798a <__swbuf_r+0x26>
 80079e2:	2501      	movs	r5, #1
 80079e4:	426d      	negs	r5, r5
 80079e6:	e7f4      	b.n	80079d2 <__swbuf_r+0x6e>

080079e8 <__swsetup_r>:
 80079e8:	4b30      	ldr	r3, [pc, #192]	; (8007aac <__swsetup_r+0xc4>)
 80079ea:	b570      	push	{r4, r5, r6, lr}
 80079ec:	0005      	movs	r5, r0
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	000c      	movs	r4, r1
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d004      	beq.n	8007a00 <__swsetup_r+0x18>
 80079f6:	6a03      	ldr	r3, [r0, #32]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <__swsetup_r+0x18>
 80079fc:	f7ff fec2 	bl	8007784 <__sinit>
 8007a00:	230c      	movs	r3, #12
 8007a02:	5ee2      	ldrsh	r2, [r4, r3]
 8007a04:	b293      	uxth	r3, r2
 8007a06:	0711      	lsls	r1, r2, #28
 8007a08:	d423      	bmi.n	8007a52 <__swsetup_r+0x6a>
 8007a0a:	06d9      	lsls	r1, r3, #27
 8007a0c:	d407      	bmi.n	8007a1e <__swsetup_r+0x36>
 8007a0e:	2309      	movs	r3, #9
 8007a10:	2001      	movs	r0, #1
 8007a12:	602b      	str	r3, [r5, #0]
 8007a14:	3337      	adds	r3, #55	; 0x37
 8007a16:	4313      	orrs	r3, r2
 8007a18:	81a3      	strh	r3, [r4, #12]
 8007a1a:	4240      	negs	r0, r0
 8007a1c:	bd70      	pop	{r4, r5, r6, pc}
 8007a1e:	075b      	lsls	r3, r3, #29
 8007a20:	d513      	bpl.n	8007a4a <__swsetup_r+0x62>
 8007a22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a24:	2900      	cmp	r1, #0
 8007a26:	d008      	beq.n	8007a3a <__swsetup_r+0x52>
 8007a28:	0023      	movs	r3, r4
 8007a2a:	3344      	adds	r3, #68	; 0x44
 8007a2c:	4299      	cmp	r1, r3
 8007a2e:	d002      	beq.n	8007a36 <__swsetup_r+0x4e>
 8007a30:	0028      	movs	r0, r5
 8007a32:	f000 f8c1 	bl	8007bb8 <_free_r>
 8007a36:	2300      	movs	r3, #0
 8007a38:	6363      	str	r3, [r4, #52]	; 0x34
 8007a3a:	2224      	movs	r2, #36	; 0x24
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	4393      	bics	r3, r2
 8007a40:	81a3      	strh	r3, [r4, #12]
 8007a42:	2300      	movs	r3, #0
 8007a44:	6063      	str	r3, [r4, #4]
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	2308      	movs	r3, #8
 8007a4c:	89a2      	ldrh	r2, [r4, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	81a3      	strh	r3, [r4, #12]
 8007a52:	6923      	ldr	r3, [r4, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10b      	bne.n	8007a70 <__swsetup_r+0x88>
 8007a58:	21a0      	movs	r1, #160	; 0xa0
 8007a5a:	2280      	movs	r2, #128	; 0x80
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	0089      	lsls	r1, r1, #2
 8007a60:	0092      	lsls	r2, r2, #2
 8007a62:	400b      	ands	r3, r1
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d003      	beq.n	8007a70 <__swsetup_r+0x88>
 8007a68:	0021      	movs	r1, r4
 8007a6a:	0028      	movs	r0, r5
 8007a6c:	f000 fd44 	bl	80084f8 <__smakebuf_r>
 8007a70:	220c      	movs	r2, #12
 8007a72:	5ea3      	ldrsh	r3, [r4, r2]
 8007a74:	2001      	movs	r0, #1
 8007a76:	001a      	movs	r2, r3
 8007a78:	b299      	uxth	r1, r3
 8007a7a:	4002      	ands	r2, r0
 8007a7c:	4203      	tst	r3, r0
 8007a7e:	d00f      	beq.n	8007aa0 <__swsetup_r+0xb8>
 8007a80:	2200      	movs	r2, #0
 8007a82:	60a2      	str	r2, [r4, #8]
 8007a84:	6962      	ldr	r2, [r4, #20]
 8007a86:	4252      	negs	r2, r2
 8007a88:	61a2      	str	r2, [r4, #24]
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	6922      	ldr	r2, [r4, #16]
 8007a8e:	4282      	cmp	r2, r0
 8007a90:	d1c4      	bne.n	8007a1c <__swsetup_r+0x34>
 8007a92:	0609      	lsls	r1, r1, #24
 8007a94:	d5c2      	bpl.n	8007a1c <__swsetup_r+0x34>
 8007a96:	2240      	movs	r2, #64	; 0x40
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	81a3      	strh	r3, [r4, #12]
 8007a9c:	3801      	subs	r0, #1
 8007a9e:	e7bd      	b.n	8007a1c <__swsetup_r+0x34>
 8007aa0:	0788      	lsls	r0, r1, #30
 8007aa2:	d400      	bmi.n	8007aa6 <__swsetup_r+0xbe>
 8007aa4:	6962      	ldr	r2, [r4, #20]
 8007aa6:	60a2      	str	r2, [r4, #8]
 8007aa8:	e7ef      	b.n	8007a8a <__swsetup_r+0xa2>
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	20000064 	.word	0x20000064

08007ab0 <memset>:
 8007ab0:	0003      	movs	r3, r0
 8007ab2:	1882      	adds	r2, r0, r2
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d100      	bne.n	8007aba <memset+0xa>
 8007ab8:	4770      	bx	lr
 8007aba:	7019      	strb	r1, [r3, #0]
 8007abc:	3301      	adds	r3, #1
 8007abe:	e7f9      	b.n	8007ab4 <memset+0x4>

08007ac0 <_close_r>:
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	b570      	push	{r4, r5, r6, lr}
 8007ac4:	4d06      	ldr	r5, [pc, #24]	; (8007ae0 <_close_r+0x20>)
 8007ac6:	0004      	movs	r4, r0
 8007ac8:	0008      	movs	r0, r1
 8007aca:	602b      	str	r3, [r5, #0]
 8007acc:	f7fa fcb5 	bl	800243a <_close>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d103      	bne.n	8007adc <_close_r+0x1c>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d000      	beq.n	8007adc <_close_r+0x1c>
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	bd70      	pop	{r4, r5, r6, pc}
 8007ade:	46c0      	nop			; (mov r8, r8)
 8007ae0:	200005dc 	.word	0x200005dc

08007ae4 <_lseek_r>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	0004      	movs	r4, r0
 8007ae8:	0008      	movs	r0, r1
 8007aea:	0011      	movs	r1, r2
 8007aec:	001a      	movs	r2, r3
 8007aee:	2300      	movs	r3, #0
 8007af0:	4d05      	ldr	r5, [pc, #20]	; (8007b08 <_lseek_r+0x24>)
 8007af2:	602b      	str	r3, [r5, #0]
 8007af4:	f7fa fcc2 	bl	800247c <_lseek>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d103      	bne.n	8007b04 <_lseek_r+0x20>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d000      	beq.n	8007b04 <_lseek_r+0x20>
 8007b02:	6023      	str	r3, [r4, #0]
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
 8007b06:	46c0      	nop			; (mov r8, r8)
 8007b08:	200005dc 	.word	0x200005dc

08007b0c <_read_r>:
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	0004      	movs	r4, r0
 8007b10:	0008      	movs	r0, r1
 8007b12:	0011      	movs	r1, r2
 8007b14:	001a      	movs	r2, r3
 8007b16:	2300      	movs	r3, #0
 8007b18:	4d05      	ldr	r5, [pc, #20]	; (8007b30 <_read_r+0x24>)
 8007b1a:	602b      	str	r3, [r5, #0]
 8007b1c:	f7fa fc54 	bl	80023c8 <_read>
 8007b20:	1c43      	adds	r3, r0, #1
 8007b22:	d103      	bne.n	8007b2c <_read_r+0x20>
 8007b24:	682b      	ldr	r3, [r5, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d000      	beq.n	8007b2c <_read_r+0x20>
 8007b2a:	6023      	str	r3, [r4, #0]
 8007b2c:	bd70      	pop	{r4, r5, r6, pc}
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	200005dc 	.word	0x200005dc

08007b34 <_write_r>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	0004      	movs	r4, r0
 8007b38:	0008      	movs	r0, r1
 8007b3a:	0011      	movs	r1, r2
 8007b3c:	001a      	movs	r2, r3
 8007b3e:	2300      	movs	r3, #0
 8007b40:	4d05      	ldr	r5, [pc, #20]	; (8007b58 <_write_r+0x24>)
 8007b42:	602b      	str	r3, [r5, #0]
 8007b44:	f7fa fc5d 	bl	8002402 <_write>
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	d103      	bne.n	8007b54 <_write_r+0x20>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d000      	beq.n	8007b54 <_write_r+0x20>
 8007b52:	6023      	str	r3, [r4, #0]
 8007b54:	bd70      	pop	{r4, r5, r6, pc}
 8007b56:	46c0      	nop			; (mov r8, r8)
 8007b58:	200005dc 	.word	0x200005dc

08007b5c <__errno>:
 8007b5c:	4b01      	ldr	r3, [pc, #4]	; (8007b64 <__errno+0x8>)
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	4770      	bx	lr
 8007b62:	46c0      	nop			; (mov r8, r8)
 8007b64:	20000064 	.word	0x20000064

08007b68 <__libc_init_array>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	2600      	movs	r6, #0
 8007b6c:	4c0c      	ldr	r4, [pc, #48]	; (8007ba0 <__libc_init_array+0x38>)
 8007b6e:	4d0d      	ldr	r5, [pc, #52]	; (8007ba4 <__libc_init_array+0x3c>)
 8007b70:	1b64      	subs	r4, r4, r5
 8007b72:	10a4      	asrs	r4, r4, #2
 8007b74:	42a6      	cmp	r6, r4
 8007b76:	d109      	bne.n	8007b8c <__libc_init_array+0x24>
 8007b78:	2600      	movs	r6, #0
 8007b7a:	f000 fd3d 	bl	80085f8 <_init>
 8007b7e:	4c0a      	ldr	r4, [pc, #40]	; (8007ba8 <__libc_init_array+0x40>)
 8007b80:	4d0a      	ldr	r5, [pc, #40]	; (8007bac <__libc_init_array+0x44>)
 8007b82:	1b64      	subs	r4, r4, r5
 8007b84:	10a4      	asrs	r4, r4, #2
 8007b86:	42a6      	cmp	r6, r4
 8007b88:	d105      	bne.n	8007b96 <__libc_init_array+0x2e>
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	00b3      	lsls	r3, r6, #2
 8007b8e:	58eb      	ldr	r3, [r5, r3]
 8007b90:	4798      	blx	r3
 8007b92:	3601      	adds	r6, #1
 8007b94:	e7ee      	b.n	8007b74 <__libc_init_array+0xc>
 8007b96:	00b3      	lsls	r3, r6, #2
 8007b98:	58eb      	ldr	r3, [r5, r3]
 8007b9a:	4798      	blx	r3
 8007b9c:	3601      	adds	r6, #1
 8007b9e:	e7f2      	b.n	8007b86 <__libc_init_array+0x1e>
 8007ba0:	0800883c 	.word	0x0800883c
 8007ba4:	0800883c 	.word	0x0800883c
 8007ba8:	08008840 	.word	0x08008840
 8007bac:	0800883c 	.word	0x0800883c

08007bb0 <__retarget_lock_init_recursive>:
 8007bb0:	4770      	bx	lr

08007bb2 <__retarget_lock_acquire_recursive>:
 8007bb2:	4770      	bx	lr

08007bb4 <__retarget_lock_release_recursive>:
 8007bb4:	4770      	bx	lr
	...

08007bb8 <_free_r>:
 8007bb8:	b570      	push	{r4, r5, r6, lr}
 8007bba:	0005      	movs	r5, r0
 8007bbc:	2900      	cmp	r1, #0
 8007bbe:	d010      	beq.n	8007be2 <_free_r+0x2a>
 8007bc0:	1f0c      	subs	r4, r1, #4
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	da00      	bge.n	8007bca <_free_r+0x12>
 8007bc8:	18e4      	adds	r4, r4, r3
 8007bca:	0028      	movs	r0, r5
 8007bcc:	f000 f8e2 	bl	8007d94 <__malloc_lock>
 8007bd0:	4a1d      	ldr	r2, [pc, #116]	; (8007c48 <_free_r+0x90>)
 8007bd2:	6813      	ldr	r3, [r2, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d105      	bne.n	8007be4 <_free_r+0x2c>
 8007bd8:	6063      	str	r3, [r4, #4]
 8007bda:	6014      	str	r4, [r2, #0]
 8007bdc:	0028      	movs	r0, r5
 8007bde:	f000 f8e1 	bl	8007da4 <__malloc_unlock>
 8007be2:	bd70      	pop	{r4, r5, r6, pc}
 8007be4:	42a3      	cmp	r3, r4
 8007be6:	d908      	bls.n	8007bfa <_free_r+0x42>
 8007be8:	6820      	ldr	r0, [r4, #0]
 8007bea:	1821      	adds	r1, r4, r0
 8007bec:	428b      	cmp	r3, r1
 8007bee:	d1f3      	bne.n	8007bd8 <_free_r+0x20>
 8007bf0:	6819      	ldr	r1, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	1809      	adds	r1, r1, r0
 8007bf6:	6021      	str	r1, [r4, #0]
 8007bf8:	e7ee      	b.n	8007bd8 <_free_r+0x20>
 8007bfa:	001a      	movs	r2, r3
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <_free_r+0x4e>
 8007c02:	42a3      	cmp	r3, r4
 8007c04:	d9f9      	bls.n	8007bfa <_free_r+0x42>
 8007c06:	6811      	ldr	r1, [r2, #0]
 8007c08:	1850      	adds	r0, r2, r1
 8007c0a:	42a0      	cmp	r0, r4
 8007c0c:	d10b      	bne.n	8007c26 <_free_r+0x6e>
 8007c0e:	6820      	ldr	r0, [r4, #0]
 8007c10:	1809      	adds	r1, r1, r0
 8007c12:	1850      	adds	r0, r2, r1
 8007c14:	6011      	str	r1, [r2, #0]
 8007c16:	4283      	cmp	r3, r0
 8007c18:	d1e0      	bne.n	8007bdc <_free_r+0x24>
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	1841      	adds	r1, r0, r1
 8007c20:	6011      	str	r1, [r2, #0]
 8007c22:	6053      	str	r3, [r2, #4]
 8007c24:	e7da      	b.n	8007bdc <_free_r+0x24>
 8007c26:	42a0      	cmp	r0, r4
 8007c28:	d902      	bls.n	8007c30 <_free_r+0x78>
 8007c2a:	230c      	movs	r3, #12
 8007c2c:	602b      	str	r3, [r5, #0]
 8007c2e:	e7d5      	b.n	8007bdc <_free_r+0x24>
 8007c30:	6820      	ldr	r0, [r4, #0]
 8007c32:	1821      	adds	r1, r4, r0
 8007c34:	428b      	cmp	r3, r1
 8007c36:	d103      	bne.n	8007c40 <_free_r+0x88>
 8007c38:	6819      	ldr	r1, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	1809      	adds	r1, r1, r0
 8007c3e:	6021      	str	r1, [r4, #0]
 8007c40:	6063      	str	r3, [r4, #4]
 8007c42:	6054      	str	r4, [r2, #4]
 8007c44:	e7ca      	b.n	8007bdc <_free_r+0x24>
 8007c46:	46c0      	nop			; (mov r8, r8)
 8007c48:	200005e4 	.word	0x200005e4

08007c4c <sbrk_aligned>:
 8007c4c:	b570      	push	{r4, r5, r6, lr}
 8007c4e:	4e0f      	ldr	r6, [pc, #60]	; (8007c8c <sbrk_aligned+0x40>)
 8007c50:	000d      	movs	r5, r1
 8007c52:	6831      	ldr	r1, [r6, #0]
 8007c54:	0004      	movs	r4, r0
 8007c56:	2900      	cmp	r1, #0
 8007c58:	d102      	bne.n	8007c60 <sbrk_aligned+0x14>
 8007c5a:	f000 fcaf 	bl	80085bc <_sbrk_r>
 8007c5e:	6030      	str	r0, [r6, #0]
 8007c60:	0029      	movs	r1, r5
 8007c62:	0020      	movs	r0, r4
 8007c64:	f000 fcaa 	bl	80085bc <_sbrk_r>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d00a      	beq.n	8007c82 <sbrk_aligned+0x36>
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	1cc5      	adds	r5, r0, #3
 8007c70:	439d      	bics	r5, r3
 8007c72:	42a8      	cmp	r0, r5
 8007c74:	d007      	beq.n	8007c86 <sbrk_aligned+0x3a>
 8007c76:	1a29      	subs	r1, r5, r0
 8007c78:	0020      	movs	r0, r4
 8007c7a:	f000 fc9f 	bl	80085bc <_sbrk_r>
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d101      	bne.n	8007c86 <sbrk_aligned+0x3a>
 8007c82:	2501      	movs	r5, #1
 8007c84:	426d      	negs	r5, r5
 8007c86:	0028      	movs	r0, r5
 8007c88:	bd70      	pop	{r4, r5, r6, pc}
 8007c8a:	46c0      	nop			; (mov r8, r8)
 8007c8c:	200005e8 	.word	0x200005e8

08007c90 <_malloc_r>:
 8007c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c92:	2203      	movs	r2, #3
 8007c94:	1ccb      	adds	r3, r1, #3
 8007c96:	4393      	bics	r3, r2
 8007c98:	3308      	adds	r3, #8
 8007c9a:	0006      	movs	r6, r0
 8007c9c:	001f      	movs	r7, r3
 8007c9e:	2b0c      	cmp	r3, #12
 8007ca0:	d238      	bcs.n	8007d14 <_malloc_r+0x84>
 8007ca2:	270c      	movs	r7, #12
 8007ca4:	42b9      	cmp	r1, r7
 8007ca6:	d837      	bhi.n	8007d18 <_malloc_r+0x88>
 8007ca8:	0030      	movs	r0, r6
 8007caa:	f000 f873 	bl	8007d94 <__malloc_lock>
 8007cae:	4b38      	ldr	r3, [pc, #224]	; (8007d90 <_malloc_r+0x100>)
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	001c      	movs	r4, r3
 8007cb6:	2c00      	cmp	r4, #0
 8007cb8:	d133      	bne.n	8007d22 <_malloc_r+0x92>
 8007cba:	0039      	movs	r1, r7
 8007cbc:	0030      	movs	r0, r6
 8007cbe:	f7ff ffc5 	bl	8007c4c <sbrk_aligned>
 8007cc2:	0004      	movs	r4, r0
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d15e      	bne.n	8007d86 <_malloc_r+0xf6>
 8007cc8:	9b00      	ldr	r3, [sp, #0]
 8007cca:	681c      	ldr	r4, [r3, #0]
 8007ccc:	0025      	movs	r5, r4
 8007cce:	2d00      	cmp	r5, #0
 8007cd0:	d14e      	bne.n	8007d70 <_malloc_r+0xe0>
 8007cd2:	2c00      	cmp	r4, #0
 8007cd4:	d051      	beq.n	8007d7a <_malloc_r+0xea>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	0029      	movs	r1, r5
 8007cda:	18e3      	adds	r3, r4, r3
 8007cdc:	0030      	movs	r0, r6
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	f000 fc6c 	bl	80085bc <_sbrk_r>
 8007ce4:	9b01      	ldr	r3, [sp, #4]
 8007ce6:	4283      	cmp	r3, r0
 8007ce8:	d147      	bne.n	8007d7a <_malloc_r+0xea>
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	0030      	movs	r0, r6
 8007cee:	1aff      	subs	r7, r7, r3
 8007cf0:	0039      	movs	r1, r7
 8007cf2:	f7ff ffab 	bl	8007c4c <sbrk_aligned>
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d03f      	beq.n	8007d7a <_malloc_r+0xea>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	19db      	adds	r3, r3, r7
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	9b00      	ldr	r3, [sp, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d040      	beq.n	8007d8a <_malloc_r+0xfa>
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	42a2      	cmp	r2, r4
 8007d0c:	d133      	bne.n	8007d76 <_malloc_r+0xe6>
 8007d0e:	2200      	movs	r2, #0
 8007d10:	605a      	str	r2, [r3, #4]
 8007d12:	e014      	b.n	8007d3e <_malloc_r+0xae>
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	dac5      	bge.n	8007ca4 <_malloc_r+0x14>
 8007d18:	230c      	movs	r3, #12
 8007d1a:	2500      	movs	r5, #0
 8007d1c:	6033      	str	r3, [r6, #0]
 8007d1e:	0028      	movs	r0, r5
 8007d20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d22:	6821      	ldr	r1, [r4, #0]
 8007d24:	1bc9      	subs	r1, r1, r7
 8007d26:	d420      	bmi.n	8007d6a <_malloc_r+0xda>
 8007d28:	290b      	cmp	r1, #11
 8007d2a:	d918      	bls.n	8007d5e <_malloc_r+0xce>
 8007d2c:	19e2      	adds	r2, r4, r7
 8007d2e:	6027      	str	r7, [r4, #0]
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	d112      	bne.n	8007d5a <_malloc_r+0xca>
 8007d34:	9b00      	ldr	r3, [sp, #0]
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	6863      	ldr	r3, [r4, #4]
 8007d3a:	6011      	str	r1, [r2, #0]
 8007d3c:	6053      	str	r3, [r2, #4]
 8007d3e:	0030      	movs	r0, r6
 8007d40:	0025      	movs	r5, r4
 8007d42:	f000 f82f 	bl	8007da4 <__malloc_unlock>
 8007d46:	2207      	movs	r2, #7
 8007d48:	350b      	adds	r5, #11
 8007d4a:	1d23      	adds	r3, r4, #4
 8007d4c:	4395      	bics	r5, r2
 8007d4e:	1aea      	subs	r2, r5, r3
 8007d50:	429d      	cmp	r5, r3
 8007d52:	d0e4      	beq.n	8007d1e <_malloc_r+0x8e>
 8007d54:	1b5b      	subs	r3, r3, r5
 8007d56:	50a3      	str	r3, [r4, r2]
 8007d58:	e7e1      	b.n	8007d1e <_malloc_r+0x8e>
 8007d5a:	605a      	str	r2, [r3, #4]
 8007d5c:	e7ec      	b.n	8007d38 <_malloc_r+0xa8>
 8007d5e:	6862      	ldr	r2, [r4, #4]
 8007d60:	42a3      	cmp	r3, r4
 8007d62:	d1d5      	bne.n	8007d10 <_malloc_r+0x80>
 8007d64:	9b00      	ldr	r3, [sp, #0]
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	e7e9      	b.n	8007d3e <_malloc_r+0xae>
 8007d6a:	0023      	movs	r3, r4
 8007d6c:	6864      	ldr	r4, [r4, #4]
 8007d6e:	e7a2      	b.n	8007cb6 <_malloc_r+0x26>
 8007d70:	002c      	movs	r4, r5
 8007d72:	686d      	ldr	r5, [r5, #4]
 8007d74:	e7ab      	b.n	8007cce <_malloc_r+0x3e>
 8007d76:	0013      	movs	r3, r2
 8007d78:	e7c4      	b.n	8007d04 <_malloc_r+0x74>
 8007d7a:	230c      	movs	r3, #12
 8007d7c:	0030      	movs	r0, r6
 8007d7e:	6033      	str	r3, [r6, #0]
 8007d80:	f000 f810 	bl	8007da4 <__malloc_unlock>
 8007d84:	e7cb      	b.n	8007d1e <_malloc_r+0x8e>
 8007d86:	6027      	str	r7, [r4, #0]
 8007d88:	e7d9      	b.n	8007d3e <_malloc_r+0xae>
 8007d8a:	605b      	str	r3, [r3, #4]
 8007d8c:	deff      	udf	#255	; 0xff
 8007d8e:	46c0      	nop			; (mov r8, r8)
 8007d90:	200005e4 	.word	0x200005e4

08007d94 <__malloc_lock>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	4802      	ldr	r0, [pc, #8]	; (8007da0 <__malloc_lock+0xc>)
 8007d98:	f7ff ff0b 	bl	8007bb2 <__retarget_lock_acquire_recursive>
 8007d9c:	bd10      	pop	{r4, pc}
 8007d9e:	46c0      	nop			; (mov r8, r8)
 8007da0:	200005e0 	.word	0x200005e0

08007da4 <__malloc_unlock>:
 8007da4:	b510      	push	{r4, lr}
 8007da6:	4802      	ldr	r0, [pc, #8]	; (8007db0 <__malloc_unlock+0xc>)
 8007da8:	f7ff ff04 	bl	8007bb4 <__retarget_lock_release_recursive>
 8007dac:	bd10      	pop	{r4, pc}
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	200005e0 	.word	0x200005e0

08007db4 <__sfputc_r>:
 8007db4:	6893      	ldr	r3, [r2, #8]
 8007db6:	b510      	push	{r4, lr}
 8007db8:	3b01      	subs	r3, #1
 8007dba:	6093      	str	r3, [r2, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	da04      	bge.n	8007dca <__sfputc_r+0x16>
 8007dc0:	6994      	ldr	r4, [r2, #24]
 8007dc2:	42a3      	cmp	r3, r4
 8007dc4:	db07      	blt.n	8007dd6 <__sfputc_r+0x22>
 8007dc6:	290a      	cmp	r1, #10
 8007dc8:	d005      	beq.n	8007dd6 <__sfputc_r+0x22>
 8007dca:	6813      	ldr	r3, [r2, #0]
 8007dcc:	1c58      	adds	r0, r3, #1
 8007dce:	6010      	str	r0, [r2, #0]
 8007dd0:	7019      	strb	r1, [r3, #0]
 8007dd2:	0008      	movs	r0, r1
 8007dd4:	bd10      	pop	{r4, pc}
 8007dd6:	f7ff fdc5 	bl	8007964 <__swbuf_r>
 8007dda:	0001      	movs	r1, r0
 8007ddc:	e7f9      	b.n	8007dd2 <__sfputc_r+0x1e>

08007dde <__sfputs_r>:
 8007dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de0:	0006      	movs	r6, r0
 8007de2:	000f      	movs	r7, r1
 8007de4:	0014      	movs	r4, r2
 8007de6:	18d5      	adds	r5, r2, r3
 8007de8:	42ac      	cmp	r4, r5
 8007dea:	d101      	bne.n	8007df0 <__sfputs_r+0x12>
 8007dec:	2000      	movs	r0, #0
 8007dee:	e007      	b.n	8007e00 <__sfputs_r+0x22>
 8007df0:	7821      	ldrb	r1, [r4, #0]
 8007df2:	003a      	movs	r2, r7
 8007df4:	0030      	movs	r0, r6
 8007df6:	f7ff ffdd 	bl	8007db4 <__sfputc_r>
 8007dfa:	3401      	adds	r4, #1
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d1f3      	bne.n	8007de8 <__sfputs_r+0xa>
 8007e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e04 <_vfiprintf_r>:
 8007e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e06:	b0a1      	sub	sp, #132	; 0x84
 8007e08:	000f      	movs	r7, r1
 8007e0a:	0015      	movs	r5, r2
 8007e0c:	001e      	movs	r6, r3
 8007e0e:	9003      	str	r0, [sp, #12]
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d004      	beq.n	8007e1e <_vfiprintf_r+0x1a>
 8007e14:	6a03      	ldr	r3, [r0, #32]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <_vfiprintf_r+0x1a>
 8007e1a:	f7ff fcb3 	bl	8007784 <__sinit>
 8007e1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e20:	07db      	lsls	r3, r3, #31
 8007e22:	d405      	bmi.n	8007e30 <_vfiprintf_r+0x2c>
 8007e24:	89bb      	ldrh	r3, [r7, #12]
 8007e26:	059b      	lsls	r3, r3, #22
 8007e28:	d402      	bmi.n	8007e30 <_vfiprintf_r+0x2c>
 8007e2a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007e2c:	f7ff fec1 	bl	8007bb2 <__retarget_lock_acquire_recursive>
 8007e30:	89bb      	ldrh	r3, [r7, #12]
 8007e32:	071b      	lsls	r3, r3, #28
 8007e34:	d502      	bpl.n	8007e3c <_vfiprintf_r+0x38>
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d113      	bne.n	8007e64 <_vfiprintf_r+0x60>
 8007e3c:	0039      	movs	r1, r7
 8007e3e:	9803      	ldr	r0, [sp, #12]
 8007e40:	f7ff fdd2 	bl	80079e8 <__swsetup_r>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d00d      	beq.n	8007e64 <_vfiprintf_r+0x60>
 8007e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e4a:	07db      	lsls	r3, r3, #31
 8007e4c:	d503      	bpl.n	8007e56 <_vfiprintf_r+0x52>
 8007e4e:	2001      	movs	r0, #1
 8007e50:	4240      	negs	r0, r0
 8007e52:	b021      	add	sp, #132	; 0x84
 8007e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e56:	89bb      	ldrh	r3, [r7, #12]
 8007e58:	059b      	lsls	r3, r3, #22
 8007e5a:	d4f8      	bmi.n	8007e4e <_vfiprintf_r+0x4a>
 8007e5c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007e5e:	f7ff fea9 	bl	8007bb4 <__retarget_lock_release_recursive>
 8007e62:	e7f4      	b.n	8007e4e <_vfiprintf_r+0x4a>
 8007e64:	2300      	movs	r3, #0
 8007e66:	ac08      	add	r4, sp, #32
 8007e68:	6163      	str	r3, [r4, #20]
 8007e6a:	3320      	adds	r3, #32
 8007e6c:	7663      	strb	r3, [r4, #25]
 8007e6e:	3310      	adds	r3, #16
 8007e70:	76a3      	strb	r3, [r4, #26]
 8007e72:	9607      	str	r6, [sp, #28]
 8007e74:	002e      	movs	r6, r5
 8007e76:	7833      	ldrb	r3, [r6, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <_vfiprintf_r+0x7c>
 8007e7c:	2b25      	cmp	r3, #37	; 0x25
 8007e7e:	d148      	bne.n	8007f12 <_vfiprintf_r+0x10e>
 8007e80:	1b73      	subs	r3, r6, r5
 8007e82:	9305      	str	r3, [sp, #20]
 8007e84:	42ae      	cmp	r6, r5
 8007e86:	d00b      	beq.n	8007ea0 <_vfiprintf_r+0x9c>
 8007e88:	002a      	movs	r2, r5
 8007e8a:	0039      	movs	r1, r7
 8007e8c:	9803      	ldr	r0, [sp, #12]
 8007e8e:	f7ff ffa6 	bl	8007dde <__sfputs_r>
 8007e92:	3001      	adds	r0, #1
 8007e94:	d100      	bne.n	8007e98 <_vfiprintf_r+0x94>
 8007e96:	e0af      	b.n	8007ff8 <_vfiprintf_r+0x1f4>
 8007e98:	6963      	ldr	r3, [r4, #20]
 8007e9a:	9a05      	ldr	r2, [sp, #20]
 8007e9c:	189b      	adds	r3, r3, r2
 8007e9e:	6163      	str	r3, [r4, #20]
 8007ea0:	7833      	ldrb	r3, [r6, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d100      	bne.n	8007ea8 <_vfiprintf_r+0xa4>
 8007ea6:	e0a7      	b.n	8007ff8 <_vfiprintf_r+0x1f4>
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	2300      	movs	r3, #0
 8007eac:	4252      	negs	r2, r2
 8007eae:	6062      	str	r2, [r4, #4]
 8007eb0:	a904      	add	r1, sp, #16
 8007eb2:	3254      	adds	r2, #84	; 0x54
 8007eb4:	1852      	adds	r2, r2, r1
 8007eb6:	1c75      	adds	r5, r6, #1
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	60e3      	str	r3, [r4, #12]
 8007ebc:	60a3      	str	r3, [r4, #8]
 8007ebe:	7013      	strb	r3, [r2, #0]
 8007ec0:	65a3      	str	r3, [r4, #88]	; 0x58
 8007ec2:	4b59      	ldr	r3, [pc, #356]	; (8008028 <_vfiprintf_r+0x224>)
 8007ec4:	2205      	movs	r2, #5
 8007ec6:	0018      	movs	r0, r3
 8007ec8:	7829      	ldrb	r1, [r5, #0]
 8007eca:	9305      	str	r3, [sp, #20]
 8007ecc:	f000 fb88 	bl	80085e0 <memchr>
 8007ed0:	1c6e      	adds	r6, r5, #1
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d11f      	bne.n	8007f16 <_vfiprintf_r+0x112>
 8007ed6:	6822      	ldr	r2, [r4, #0]
 8007ed8:	06d3      	lsls	r3, r2, #27
 8007eda:	d504      	bpl.n	8007ee6 <_vfiprintf_r+0xe2>
 8007edc:	2353      	movs	r3, #83	; 0x53
 8007ede:	a904      	add	r1, sp, #16
 8007ee0:	185b      	adds	r3, r3, r1
 8007ee2:	2120      	movs	r1, #32
 8007ee4:	7019      	strb	r1, [r3, #0]
 8007ee6:	0713      	lsls	r3, r2, #28
 8007ee8:	d504      	bpl.n	8007ef4 <_vfiprintf_r+0xf0>
 8007eea:	2353      	movs	r3, #83	; 0x53
 8007eec:	a904      	add	r1, sp, #16
 8007eee:	185b      	adds	r3, r3, r1
 8007ef0:	212b      	movs	r1, #43	; 0x2b
 8007ef2:	7019      	strb	r1, [r3, #0]
 8007ef4:	782b      	ldrb	r3, [r5, #0]
 8007ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef8:	d016      	beq.n	8007f28 <_vfiprintf_r+0x124>
 8007efa:	002e      	movs	r6, r5
 8007efc:	2100      	movs	r1, #0
 8007efe:	200a      	movs	r0, #10
 8007f00:	68e3      	ldr	r3, [r4, #12]
 8007f02:	7832      	ldrb	r2, [r6, #0]
 8007f04:	1c75      	adds	r5, r6, #1
 8007f06:	3a30      	subs	r2, #48	; 0x30
 8007f08:	2a09      	cmp	r2, #9
 8007f0a:	d94e      	bls.n	8007faa <_vfiprintf_r+0x1a6>
 8007f0c:	2900      	cmp	r1, #0
 8007f0e:	d111      	bne.n	8007f34 <_vfiprintf_r+0x130>
 8007f10:	e017      	b.n	8007f42 <_vfiprintf_r+0x13e>
 8007f12:	3601      	adds	r6, #1
 8007f14:	e7af      	b.n	8007e76 <_vfiprintf_r+0x72>
 8007f16:	9b05      	ldr	r3, [sp, #20]
 8007f18:	6822      	ldr	r2, [r4, #0]
 8007f1a:	1ac0      	subs	r0, r0, r3
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	4083      	lsls	r3, r0
 8007f20:	4313      	orrs	r3, r2
 8007f22:	0035      	movs	r5, r6
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	e7cc      	b.n	8007ec2 <_vfiprintf_r+0xbe>
 8007f28:	9b07      	ldr	r3, [sp, #28]
 8007f2a:	1d19      	adds	r1, r3, #4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	9107      	str	r1, [sp, #28]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	db01      	blt.n	8007f38 <_vfiprintf_r+0x134>
 8007f34:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f36:	e004      	b.n	8007f42 <_vfiprintf_r+0x13e>
 8007f38:	425b      	negs	r3, r3
 8007f3a:	60e3      	str	r3, [r4, #12]
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	7833      	ldrb	r3, [r6, #0]
 8007f44:	2b2e      	cmp	r3, #46	; 0x2e
 8007f46:	d10a      	bne.n	8007f5e <_vfiprintf_r+0x15a>
 8007f48:	7873      	ldrb	r3, [r6, #1]
 8007f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f4c:	d135      	bne.n	8007fba <_vfiprintf_r+0x1b6>
 8007f4e:	9b07      	ldr	r3, [sp, #28]
 8007f50:	3602      	adds	r6, #2
 8007f52:	1d1a      	adds	r2, r3, #4
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	9207      	str	r2, [sp, #28]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	db2b      	blt.n	8007fb4 <_vfiprintf_r+0x1b0>
 8007f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f5e:	4d33      	ldr	r5, [pc, #204]	; (800802c <_vfiprintf_r+0x228>)
 8007f60:	2203      	movs	r2, #3
 8007f62:	0028      	movs	r0, r5
 8007f64:	7831      	ldrb	r1, [r6, #0]
 8007f66:	f000 fb3b 	bl	80085e0 <memchr>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d006      	beq.n	8007f7c <_vfiprintf_r+0x178>
 8007f6e:	2340      	movs	r3, #64	; 0x40
 8007f70:	1b40      	subs	r0, r0, r5
 8007f72:	4083      	lsls	r3, r0
 8007f74:	6822      	ldr	r2, [r4, #0]
 8007f76:	3601      	adds	r6, #1
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	6023      	str	r3, [r4, #0]
 8007f7c:	7831      	ldrb	r1, [r6, #0]
 8007f7e:	2206      	movs	r2, #6
 8007f80:	482b      	ldr	r0, [pc, #172]	; (8008030 <_vfiprintf_r+0x22c>)
 8007f82:	1c75      	adds	r5, r6, #1
 8007f84:	7621      	strb	r1, [r4, #24]
 8007f86:	f000 fb2b 	bl	80085e0 <memchr>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d043      	beq.n	8008016 <_vfiprintf_r+0x212>
 8007f8e:	4b29      	ldr	r3, [pc, #164]	; (8008034 <_vfiprintf_r+0x230>)
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d125      	bne.n	8007fe0 <_vfiprintf_r+0x1dc>
 8007f94:	2207      	movs	r2, #7
 8007f96:	9b07      	ldr	r3, [sp, #28]
 8007f98:	3307      	adds	r3, #7
 8007f9a:	4393      	bics	r3, r2
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	9307      	str	r3, [sp, #28]
 8007fa0:	6963      	ldr	r3, [r4, #20]
 8007fa2:	9a04      	ldr	r2, [sp, #16]
 8007fa4:	189b      	adds	r3, r3, r2
 8007fa6:	6163      	str	r3, [r4, #20]
 8007fa8:	e764      	b.n	8007e74 <_vfiprintf_r+0x70>
 8007faa:	4343      	muls	r3, r0
 8007fac:	002e      	movs	r6, r5
 8007fae:	2101      	movs	r1, #1
 8007fb0:	189b      	adds	r3, r3, r2
 8007fb2:	e7a6      	b.n	8007f02 <_vfiprintf_r+0xfe>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	425b      	negs	r3, r3
 8007fb8:	e7d0      	b.n	8007f5c <_vfiprintf_r+0x158>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	200a      	movs	r0, #10
 8007fbe:	001a      	movs	r2, r3
 8007fc0:	3601      	adds	r6, #1
 8007fc2:	6063      	str	r3, [r4, #4]
 8007fc4:	7831      	ldrb	r1, [r6, #0]
 8007fc6:	1c75      	adds	r5, r6, #1
 8007fc8:	3930      	subs	r1, #48	; 0x30
 8007fca:	2909      	cmp	r1, #9
 8007fcc:	d903      	bls.n	8007fd6 <_vfiprintf_r+0x1d2>
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0c5      	beq.n	8007f5e <_vfiprintf_r+0x15a>
 8007fd2:	9209      	str	r2, [sp, #36]	; 0x24
 8007fd4:	e7c3      	b.n	8007f5e <_vfiprintf_r+0x15a>
 8007fd6:	4342      	muls	r2, r0
 8007fd8:	002e      	movs	r6, r5
 8007fda:	2301      	movs	r3, #1
 8007fdc:	1852      	adds	r2, r2, r1
 8007fde:	e7f1      	b.n	8007fc4 <_vfiprintf_r+0x1c0>
 8007fe0:	aa07      	add	r2, sp, #28
 8007fe2:	9200      	str	r2, [sp, #0]
 8007fe4:	0021      	movs	r1, r4
 8007fe6:	003a      	movs	r2, r7
 8007fe8:	4b13      	ldr	r3, [pc, #76]	; (8008038 <_vfiprintf_r+0x234>)
 8007fea:	9803      	ldr	r0, [sp, #12]
 8007fec:	e000      	b.n	8007ff0 <_vfiprintf_r+0x1ec>
 8007fee:	bf00      	nop
 8007ff0:	9004      	str	r0, [sp, #16]
 8007ff2:	9b04      	ldr	r3, [sp, #16]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	d1d3      	bne.n	8007fa0 <_vfiprintf_r+0x19c>
 8007ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ffa:	07db      	lsls	r3, r3, #31
 8007ffc:	d405      	bmi.n	800800a <_vfiprintf_r+0x206>
 8007ffe:	89bb      	ldrh	r3, [r7, #12]
 8008000:	059b      	lsls	r3, r3, #22
 8008002:	d402      	bmi.n	800800a <_vfiprintf_r+0x206>
 8008004:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008006:	f7ff fdd5 	bl	8007bb4 <__retarget_lock_release_recursive>
 800800a:	89bb      	ldrh	r3, [r7, #12]
 800800c:	065b      	lsls	r3, r3, #25
 800800e:	d500      	bpl.n	8008012 <_vfiprintf_r+0x20e>
 8008010:	e71d      	b.n	8007e4e <_vfiprintf_r+0x4a>
 8008012:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008014:	e71d      	b.n	8007e52 <_vfiprintf_r+0x4e>
 8008016:	aa07      	add	r2, sp, #28
 8008018:	9200      	str	r2, [sp, #0]
 800801a:	0021      	movs	r1, r4
 800801c:	003a      	movs	r2, r7
 800801e:	4b06      	ldr	r3, [pc, #24]	; (8008038 <_vfiprintf_r+0x234>)
 8008020:	9803      	ldr	r0, [sp, #12]
 8008022:	f000 f87b 	bl	800811c <_printf_i>
 8008026:	e7e3      	b.n	8007ff0 <_vfiprintf_r+0x1ec>
 8008028:	08008800 	.word	0x08008800
 800802c:	08008806 	.word	0x08008806
 8008030:	0800880a 	.word	0x0800880a
 8008034:	00000000 	.word	0x00000000
 8008038:	08007ddf 	.word	0x08007ddf

0800803c <_printf_common>:
 800803c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800803e:	0016      	movs	r6, r2
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	688a      	ldr	r2, [r1, #8]
 8008044:	690b      	ldr	r3, [r1, #16]
 8008046:	000c      	movs	r4, r1
 8008048:	9000      	str	r0, [sp, #0]
 800804a:	4293      	cmp	r3, r2
 800804c:	da00      	bge.n	8008050 <_printf_common+0x14>
 800804e:	0013      	movs	r3, r2
 8008050:	0022      	movs	r2, r4
 8008052:	6033      	str	r3, [r6, #0]
 8008054:	3243      	adds	r2, #67	; 0x43
 8008056:	7812      	ldrb	r2, [r2, #0]
 8008058:	2a00      	cmp	r2, #0
 800805a:	d001      	beq.n	8008060 <_printf_common+0x24>
 800805c:	3301      	adds	r3, #1
 800805e:	6033      	str	r3, [r6, #0]
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	069b      	lsls	r3, r3, #26
 8008064:	d502      	bpl.n	800806c <_printf_common+0x30>
 8008066:	6833      	ldr	r3, [r6, #0]
 8008068:	3302      	adds	r3, #2
 800806a:	6033      	str	r3, [r6, #0]
 800806c:	6822      	ldr	r2, [r4, #0]
 800806e:	2306      	movs	r3, #6
 8008070:	0015      	movs	r5, r2
 8008072:	401d      	ands	r5, r3
 8008074:	421a      	tst	r2, r3
 8008076:	d027      	beq.n	80080c8 <_printf_common+0x8c>
 8008078:	0023      	movs	r3, r4
 800807a:	3343      	adds	r3, #67	; 0x43
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	1e5a      	subs	r2, r3, #1
 8008080:	4193      	sbcs	r3, r2
 8008082:	6822      	ldr	r2, [r4, #0]
 8008084:	0692      	lsls	r2, r2, #26
 8008086:	d430      	bmi.n	80080ea <_printf_common+0xae>
 8008088:	0022      	movs	r2, r4
 800808a:	9901      	ldr	r1, [sp, #4]
 800808c:	9800      	ldr	r0, [sp, #0]
 800808e:	9d08      	ldr	r5, [sp, #32]
 8008090:	3243      	adds	r2, #67	; 0x43
 8008092:	47a8      	blx	r5
 8008094:	3001      	adds	r0, #1
 8008096:	d025      	beq.n	80080e4 <_printf_common+0xa8>
 8008098:	2206      	movs	r2, #6
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	2500      	movs	r5, #0
 800809e:	4013      	ands	r3, r2
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d105      	bne.n	80080b0 <_printf_common+0x74>
 80080a4:	6833      	ldr	r3, [r6, #0]
 80080a6:	68e5      	ldr	r5, [r4, #12]
 80080a8:	1aed      	subs	r5, r5, r3
 80080aa:	43eb      	mvns	r3, r5
 80080ac:	17db      	asrs	r3, r3, #31
 80080ae:	401d      	ands	r5, r3
 80080b0:	68a3      	ldr	r3, [r4, #8]
 80080b2:	6922      	ldr	r2, [r4, #16]
 80080b4:	4293      	cmp	r3, r2
 80080b6:	dd01      	ble.n	80080bc <_printf_common+0x80>
 80080b8:	1a9b      	subs	r3, r3, r2
 80080ba:	18ed      	adds	r5, r5, r3
 80080bc:	2600      	movs	r6, #0
 80080be:	42b5      	cmp	r5, r6
 80080c0:	d120      	bne.n	8008104 <_printf_common+0xc8>
 80080c2:	2000      	movs	r0, #0
 80080c4:	e010      	b.n	80080e8 <_printf_common+0xac>
 80080c6:	3501      	adds	r5, #1
 80080c8:	68e3      	ldr	r3, [r4, #12]
 80080ca:	6832      	ldr	r2, [r6, #0]
 80080cc:	1a9b      	subs	r3, r3, r2
 80080ce:	42ab      	cmp	r3, r5
 80080d0:	ddd2      	ble.n	8008078 <_printf_common+0x3c>
 80080d2:	0022      	movs	r2, r4
 80080d4:	2301      	movs	r3, #1
 80080d6:	9901      	ldr	r1, [sp, #4]
 80080d8:	9800      	ldr	r0, [sp, #0]
 80080da:	9f08      	ldr	r7, [sp, #32]
 80080dc:	3219      	adds	r2, #25
 80080de:	47b8      	blx	r7
 80080e0:	3001      	adds	r0, #1
 80080e2:	d1f0      	bne.n	80080c6 <_printf_common+0x8a>
 80080e4:	2001      	movs	r0, #1
 80080e6:	4240      	negs	r0, r0
 80080e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80080ea:	2030      	movs	r0, #48	; 0x30
 80080ec:	18e1      	adds	r1, r4, r3
 80080ee:	3143      	adds	r1, #67	; 0x43
 80080f0:	7008      	strb	r0, [r1, #0]
 80080f2:	0021      	movs	r1, r4
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	3145      	adds	r1, #69	; 0x45
 80080f8:	7809      	ldrb	r1, [r1, #0]
 80080fa:	18a2      	adds	r2, r4, r2
 80080fc:	3243      	adds	r2, #67	; 0x43
 80080fe:	3302      	adds	r3, #2
 8008100:	7011      	strb	r1, [r2, #0]
 8008102:	e7c1      	b.n	8008088 <_printf_common+0x4c>
 8008104:	0022      	movs	r2, r4
 8008106:	2301      	movs	r3, #1
 8008108:	9901      	ldr	r1, [sp, #4]
 800810a:	9800      	ldr	r0, [sp, #0]
 800810c:	9f08      	ldr	r7, [sp, #32]
 800810e:	321a      	adds	r2, #26
 8008110:	47b8      	blx	r7
 8008112:	3001      	adds	r0, #1
 8008114:	d0e6      	beq.n	80080e4 <_printf_common+0xa8>
 8008116:	3601      	adds	r6, #1
 8008118:	e7d1      	b.n	80080be <_printf_common+0x82>
	...

0800811c <_printf_i>:
 800811c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800811e:	b08b      	sub	sp, #44	; 0x2c
 8008120:	9206      	str	r2, [sp, #24]
 8008122:	000a      	movs	r2, r1
 8008124:	3243      	adds	r2, #67	; 0x43
 8008126:	9307      	str	r3, [sp, #28]
 8008128:	9005      	str	r0, [sp, #20]
 800812a:	9204      	str	r2, [sp, #16]
 800812c:	7e0a      	ldrb	r2, [r1, #24]
 800812e:	000c      	movs	r4, r1
 8008130:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008132:	2a78      	cmp	r2, #120	; 0x78
 8008134:	d809      	bhi.n	800814a <_printf_i+0x2e>
 8008136:	2a62      	cmp	r2, #98	; 0x62
 8008138:	d80b      	bhi.n	8008152 <_printf_i+0x36>
 800813a:	2a00      	cmp	r2, #0
 800813c:	d100      	bne.n	8008140 <_printf_i+0x24>
 800813e:	e0be      	b.n	80082be <_printf_i+0x1a2>
 8008140:	497c      	ldr	r1, [pc, #496]	; (8008334 <_printf_i+0x218>)
 8008142:	9103      	str	r1, [sp, #12]
 8008144:	2a58      	cmp	r2, #88	; 0x58
 8008146:	d100      	bne.n	800814a <_printf_i+0x2e>
 8008148:	e093      	b.n	8008272 <_printf_i+0x156>
 800814a:	0026      	movs	r6, r4
 800814c:	3642      	adds	r6, #66	; 0x42
 800814e:	7032      	strb	r2, [r6, #0]
 8008150:	e022      	b.n	8008198 <_printf_i+0x7c>
 8008152:	0010      	movs	r0, r2
 8008154:	3863      	subs	r0, #99	; 0x63
 8008156:	2815      	cmp	r0, #21
 8008158:	d8f7      	bhi.n	800814a <_printf_i+0x2e>
 800815a:	f7f7 ffd5 	bl	8000108 <__gnu_thumb1_case_shi>
 800815e:	0016      	.short	0x0016
 8008160:	fff6001f 	.word	0xfff6001f
 8008164:	fff6fff6 	.word	0xfff6fff6
 8008168:	001ffff6 	.word	0x001ffff6
 800816c:	fff6fff6 	.word	0xfff6fff6
 8008170:	fff6fff6 	.word	0xfff6fff6
 8008174:	003600a3 	.word	0x003600a3
 8008178:	fff60083 	.word	0xfff60083
 800817c:	00b4fff6 	.word	0x00b4fff6
 8008180:	0036fff6 	.word	0x0036fff6
 8008184:	fff6fff6 	.word	0xfff6fff6
 8008188:	0087      	.short	0x0087
 800818a:	0026      	movs	r6, r4
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	3642      	adds	r6, #66	; 0x42
 8008190:	1d11      	adds	r1, r2, #4
 8008192:	6019      	str	r1, [r3, #0]
 8008194:	6813      	ldr	r3, [r2, #0]
 8008196:	7033      	strb	r3, [r6, #0]
 8008198:	2301      	movs	r3, #1
 800819a:	e0a2      	b.n	80082e2 <_printf_i+0x1c6>
 800819c:	6818      	ldr	r0, [r3, #0]
 800819e:	6809      	ldr	r1, [r1, #0]
 80081a0:	1d02      	adds	r2, r0, #4
 80081a2:	060d      	lsls	r5, r1, #24
 80081a4:	d50b      	bpl.n	80081be <_printf_i+0xa2>
 80081a6:	6805      	ldr	r5, [r0, #0]
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	2d00      	cmp	r5, #0
 80081ac:	da03      	bge.n	80081b6 <_printf_i+0x9a>
 80081ae:	232d      	movs	r3, #45	; 0x2d
 80081b0:	9a04      	ldr	r2, [sp, #16]
 80081b2:	426d      	negs	r5, r5
 80081b4:	7013      	strb	r3, [r2, #0]
 80081b6:	4b5f      	ldr	r3, [pc, #380]	; (8008334 <_printf_i+0x218>)
 80081b8:	270a      	movs	r7, #10
 80081ba:	9303      	str	r3, [sp, #12]
 80081bc:	e01b      	b.n	80081f6 <_printf_i+0xda>
 80081be:	6805      	ldr	r5, [r0, #0]
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	0649      	lsls	r1, r1, #25
 80081c4:	d5f1      	bpl.n	80081aa <_printf_i+0x8e>
 80081c6:	b22d      	sxth	r5, r5
 80081c8:	e7ef      	b.n	80081aa <_printf_i+0x8e>
 80081ca:	680d      	ldr	r5, [r1, #0]
 80081cc:	6819      	ldr	r1, [r3, #0]
 80081ce:	1d08      	adds	r0, r1, #4
 80081d0:	6018      	str	r0, [r3, #0]
 80081d2:	062e      	lsls	r6, r5, #24
 80081d4:	d501      	bpl.n	80081da <_printf_i+0xbe>
 80081d6:	680d      	ldr	r5, [r1, #0]
 80081d8:	e003      	b.n	80081e2 <_printf_i+0xc6>
 80081da:	066d      	lsls	r5, r5, #25
 80081dc:	d5fb      	bpl.n	80081d6 <_printf_i+0xba>
 80081de:	680d      	ldr	r5, [r1, #0]
 80081e0:	b2ad      	uxth	r5, r5
 80081e2:	4b54      	ldr	r3, [pc, #336]	; (8008334 <_printf_i+0x218>)
 80081e4:	2708      	movs	r7, #8
 80081e6:	9303      	str	r3, [sp, #12]
 80081e8:	2a6f      	cmp	r2, #111	; 0x6f
 80081ea:	d000      	beq.n	80081ee <_printf_i+0xd2>
 80081ec:	3702      	adds	r7, #2
 80081ee:	0023      	movs	r3, r4
 80081f0:	2200      	movs	r2, #0
 80081f2:	3343      	adds	r3, #67	; 0x43
 80081f4:	701a      	strb	r2, [r3, #0]
 80081f6:	6863      	ldr	r3, [r4, #4]
 80081f8:	60a3      	str	r3, [r4, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	db03      	blt.n	8008206 <_printf_i+0xea>
 80081fe:	2104      	movs	r1, #4
 8008200:	6822      	ldr	r2, [r4, #0]
 8008202:	438a      	bics	r2, r1
 8008204:	6022      	str	r2, [r4, #0]
 8008206:	2d00      	cmp	r5, #0
 8008208:	d102      	bne.n	8008210 <_printf_i+0xf4>
 800820a:	9e04      	ldr	r6, [sp, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00c      	beq.n	800822a <_printf_i+0x10e>
 8008210:	9e04      	ldr	r6, [sp, #16]
 8008212:	0028      	movs	r0, r5
 8008214:	0039      	movs	r1, r7
 8008216:	f7f8 f807 	bl	8000228 <__aeabi_uidivmod>
 800821a:	9b03      	ldr	r3, [sp, #12]
 800821c:	3e01      	subs	r6, #1
 800821e:	5c5b      	ldrb	r3, [r3, r1]
 8008220:	7033      	strb	r3, [r6, #0]
 8008222:	002b      	movs	r3, r5
 8008224:	0005      	movs	r5, r0
 8008226:	429f      	cmp	r7, r3
 8008228:	d9f3      	bls.n	8008212 <_printf_i+0xf6>
 800822a:	2f08      	cmp	r7, #8
 800822c:	d109      	bne.n	8008242 <_printf_i+0x126>
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	07db      	lsls	r3, r3, #31
 8008232:	d506      	bpl.n	8008242 <_printf_i+0x126>
 8008234:	6862      	ldr	r2, [r4, #4]
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	429a      	cmp	r2, r3
 800823a:	dc02      	bgt.n	8008242 <_printf_i+0x126>
 800823c:	2330      	movs	r3, #48	; 0x30
 800823e:	3e01      	subs	r6, #1
 8008240:	7033      	strb	r3, [r6, #0]
 8008242:	9b04      	ldr	r3, [sp, #16]
 8008244:	1b9b      	subs	r3, r3, r6
 8008246:	6123      	str	r3, [r4, #16]
 8008248:	9b07      	ldr	r3, [sp, #28]
 800824a:	0021      	movs	r1, r4
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	9805      	ldr	r0, [sp, #20]
 8008250:	9b06      	ldr	r3, [sp, #24]
 8008252:	aa09      	add	r2, sp, #36	; 0x24
 8008254:	f7ff fef2 	bl	800803c <_printf_common>
 8008258:	3001      	adds	r0, #1
 800825a:	d147      	bne.n	80082ec <_printf_i+0x1d0>
 800825c:	2001      	movs	r0, #1
 800825e:	4240      	negs	r0, r0
 8008260:	b00b      	add	sp, #44	; 0x2c
 8008262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008264:	2220      	movs	r2, #32
 8008266:	6809      	ldr	r1, [r1, #0]
 8008268:	430a      	orrs	r2, r1
 800826a:	6022      	str	r2, [r4, #0]
 800826c:	2278      	movs	r2, #120	; 0x78
 800826e:	4932      	ldr	r1, [pc, #200]	; (8008338 <_printf_i+0x21c>)
 8008270:	9103      	str	r1, [sp, #12]
 8008272:	0021      	movs	r1, r4
 8008274:	3145      	adds	r1, #69	; 0x45
 8008276:	700a      	strb	r2, [r1, #0]
 8008278:	6819      	ldr	r1, [r3, #0]
 800827a:	6822      	ldr	r2, [r4, #0]
 800827c:	c920      	ldmia	r1!, {r5}
 800827e:	0610      	lsls	r0, r2, #24
 8008280:	d402      	bmi.n	8008288 <_printf_i+0x16c>
 8008282:	0650      	lsls	r0, r2, #25
 8008284:	d500      	bpl.n	8008288 <_printf_i+0x16c>
 8008286:	b2ad      	uxth	r5, r5
 8008288:	6019      	str	r1, [r3, #0]
 800828a:	07d3      	lsls	r3, r2, #31
 800828c:	d502      	bpl.n	8008294 <_printf_i+0x178>
 800828e:	2320      	movs	r3, #32
 8008290:	4313      	orrs	r3, r2
 8008292:	6023      	str	r3, [r4, #0]
 8008294:	2710      	movs	r7, #16
 8008296:	2d00      	cmp	r5, #0
 8008298:	d1a9      	bne.n	80081ee <_printf_i+0xd2>
 800829a:	2220      	movs	r2, #32
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	4393      	bics	r3, r2
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	e7a4      	b.n	80081ee <_printf_i+0xd2>
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	680d      	ldr	r5, [r1, #0]
 80082a8:	1d10      	adds	r0, r2, #4
 80082aa:	6949      	ldr	r1, [r1, #20]
 80082ac:	6018      	str	r0, [r3, #0]
 80082ae:	6813      	ldr	r3, [r2, #0]
 80082b0:	062e      	lsls	r6, r5, #24
 80082b2:	d501      	bpl.n	80082b8 <_printf_i+0x19c>
 80082b4:	6019      	str	r1, [r3, #0]
 80082b6:	e002      	b.n	80082be <_printf_i+0x1a2>
 80082b8:	066d      	lsls	r5, r5, #25
 80082ba:	d5fb      	bpl.n	80082b4 <_printf_i+0x198>
 80082bc:	8019      	strh	r1, [r3, #0]
 80082be:	2300      	movs	r3, #0
 80082c0:	9e04      	ldr	r6, [sp, #16]
 80082c2:	6123      	str	r3, [r4, #16]
 80082c4:	e7c0      	b.n	8008248 <_printf_i+0x12c>
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	1d11      	adds	r1, r2, #4
 80082ca:	6019      	str	r1, [r3, #0]
 80082cc:	6816      	ldr	r6, [r2, #0]
 80082ce:	2100      	movs	r1, #0
 80082d0:	0030      	movs	r0, r6
 80082d2:	6862      	ldr	r2, [r4, #4]
 80082d4:	f000 f984 	bl	80085e0 <memchr>
 80082d8:	2800      	cmp	r0, #0
 80082da:	d001      	beq.n	80082e0 <_printf_i+0x1c4>
 80082dc:	1b80      	subs	r0, r0, r6
 80082de:	6060      	str	r0, [r4, #4]
 80082e0:	6863      	ldr	r3, [r4, #4]
 80082e2:	6123      	str	r3, [r4, #16]
 80082e4:	2300      	movs	r3, #0
 80082e6:	9a04      	ldr	r2, [sp, #16]
 80082e8:	7013      	strb	r3, [r2, #0]
 80082ea:	e7ad      	b.n	8008248 <_printf_i+0x12c>
 80082ec:	0032      	movs	r2, r6
 80082ee:	6923      	ldr	r3, [r4, #16]
 80082f0:	9906      	ldr	r1, [sp, #24]
 80082f2:	9805      	ldr	r0, [sp, #20]
 80082f4:	9d07      	ldr	r5, [sp, #28]
 80082f6:	47a8      	blx	r5
 80082f8:	3001      	adds	r0, #1
 80082fa:	d0af      	beq.n	800825c <_printf_i+0x140>
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	079b      	lsls	r3, r3, #30
 8008300:	d415      	bmi.n	800832e <_printf_i+0x212>
 8008302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008304:	68e0      	ldr	r0, [r4, #12]
 8008306:	4298      	cmp	r0, r3
 8008308:	daaa      	bge.n	8008260 <_printf_i+0x144>
 800830a:	0018      	movs	r0, r3
 800830c:	e7a8      	b.n	8008260 <_printf_i+0x144>
 800830e:	0022      	movs	r2, r4
 8008310:	2301      	movs	r3, #1
 8008312:	9906      	ldr	r1, [sp, #24]
 8008314:	9805      	ldr	r0, [sp, #20]
 8008316:	9e07      	ldr	r6, [sp, #28]
 8008318:	3219      	adds	r2, #25
 800831a:	47b0      	blx	r6
 800831c:	3001      	adds	r0, #1
 800831e:	d09d      	beq.n	800825c <_printf_i+0x140>
 8008320:	3501      	adds	r5, #1
 8008322:	68e3      	ldr	r3, [r4, #12]
 8008324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008326:	1a9b      	subs	r3, r3, r2
 8008328:	42ab      	cmp	r3, r5
 800832a:	dcf0      	bgt.n	800830e <_printf_i+0x1f2>
 800832c:	e7e9      	b.n	8008302 <_printf_i+0x1e6>
 800832e:	2500      	movs	r5, #0
 8008330:	e7f7      	b.n	8008322 <_printf_i+0x206>
 8008332:	46c0      	nop			; (mov r8, r8)
 8008334:	08008811 	.word	0x08008811
 8008338:	08008822 	.word	0x08008822

0800833c <__sflush_r>:
 800833c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800833e:	898b      	ldrh	r3, [r1, #12]
 8008340:	0005      	movs	r5, r0
 8008342:	000c      	movs	r4, r1
 8008344:	071a      	lsls	r2, r3, #28
 8008346:	d45c      	bmi.n	8008402 <__sflush_r+0xc6>
 8008348:	684a      	ldr	r2, [r1, #4]
 800834a:	2a00      	cmp	r2, #0
 800834c:	dc04      	bgt.n	8008358 <__sflush_r+0x1c>
 800834e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008350:	2a00      	cmp	r2, #0
 8008352:	dc01      	bgt.n	8008358 <__sflush_r+0x1c>
 8008354:	2000      	movs	r0, #0
 8008356:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008358:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800835a:	2f00      	cmp	r7, #0
 800835c:	d0fa      	beq.n	8008354 <__sflush_r+0x18>
 800835e:	2200      	movs	r2, #0
 8008360:	2080      	movs	r0, #128	; 0x80
 8008362:	682e      	ldr	r6, [r5, #0]
 8008364:	602a      	str	r2, [r5, #0]
 8008366:	001a      	movs	r2, r3
 8008368:	0140      	lsls	r0, r0, #5
 800836a:	6a21      	ldr	r1, [r4, #32]
 800836c:	4002      	ands	r2, r0
 800836e:	4203      	tst	r3, r0
 8008370:	d034      	beq.n	80083dc <__sflush_r+0xa0>
 8008372:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	075b      	lsls	r3, r3, #29
 8008378:	d506      	bpl.n	8008388 <__sflush_r+0x4c>
 800837a:	6863      	ldr	r3, [r4, #4]
 800837c:	1ac0      	subs	r0, r0, r3
 800837e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <__sflush_r+0x4c>
 8008384:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008386:	1ac0      	subs	r0, r0, r3
 8008388:	0002      	movs	r2, r0
 800838a:	2300      	movs	r3, #0
 800838c:	0028      	movs	r0, r5
 800838e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008390:	6a21      	ldr	r1, [r4, #32]
 8008392:	47b8      	blx	r7
 8008394:	89a2      	ldrh	r2, [r4, #12]
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	d106      	bne.n	80083a8 <__sflush_r+0x6c>
 800839a:	6829      	ldr	r1, [r5, #0]
 800839c:	291d      	cmp	r1, #29
 800839e:	d82c      	bhi.n	80083fa <__sflush_r+0xbe>
 80083a0:	4b2a      	ldr	r3, [pc, #168]	; (800844c <__sflush_r+0x110>)
 80083a2:	410b      	asrs	r3, r1
 80083a4:	07db      	lsls	r3, r3, #31
 80083a6:	d428      	bmi.n	80083fa <__sflush_r+0xbe>
 80083a8:	2300      	movs	r3, #0
 80083aa:	6063      	str	r3, [r4, #4]
 80083ac:	6923      	ldr	r3, [r4, #16]
 80083ae:	6023      	str	r3, [r4, #0]
 80083b0:	04d2      	lsls	r2, r2, #19
 80083b2:	d505      	bpl.n	80083c0 <__sflush_r+0x84>
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	d102      	bne.n	80083be <__sflush_r+0x82>
 80083b8:	682b      	ldr	r3, [r5, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d100      	bne.n	80083c0 <__sflush_r+0x84>
 80083be:	6560      	str	r0, [r4, #84]	; 0x54
 80083c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083c2:	602e      	str	r6, [r5, #0]
 80083c4:	2900      	cmp	r1, #0
 80083c6:	d0c5      	beq.n	8008354 <__sflush_r+0x18>
 80083c8:	0023      	movs	r3, r4
 80083ca:	3344      	adds	r3, #68	; 0x44
 80083cc:	4299      	cmp	r1, r3
 80083ce:	d002      	beq.n	80083d6 <__sflush_r+0x9a>
 80083d0:	0028      	movs	r0, r5
 80083d2:	f7ff fbf1 	bl	8007bb8 <_free_r>
 80083d6:	2000      	movs	r0, #0
 80083d8:	6360      	str	r0, [r4, #52]	; 0x34
 80083da:	e7bc      	b.n	8008356 <__sflush_r+0x1a>
 80083dc:	2301      	movs	r3, #1
 80083de:	0028      	movs	r0, r5
 80083e0:	47b8      	blx	r7
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d1c6      	bne.n	8008374 <__sflush_r+0x38>
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d0c3      	beq.n	8008374 <__sflush_r+0x38>
 80083ec:	2b1d      	cmp	r3, #29
 80083ee:	d001      	beq.n	80083f4 <__sflush_r+0xb8>
 80083f0:	2b16      	cmp	r3, #22
 80083f2:	d101      	bne.n	80083f8 <__sflush_r+0xbc>
 80083f4:	602e      	str	r6, [r5, #0]
 80083f6:	e7ad      	b.n	8008354 <__sflush_r+0x18>
 80083f8:	89a2      	ldrh	r2, [r4, #12]
 80083fa:	2340      	movs	r3, #64	; 0x40
 80083fc:	4313      	orrs	r3, r2
 80083fe:	81a3      	strh	r3, [r4, #12]
 8008400:	e7a9      	b.n	8008356 <__sflush_r+0x1a>
 8008402:	690e      	ldr	r6, [r1, #16]
 8008404:	2e00      	cmp	r6, #0
 8008406:	d0a5      	beq.n	8008354 <__sflush_r+0x18>
 8008408:	680f      	ldr	r7, [r1, #0]
 800840a:	600e      	str	r6, [r1, #0]
 800840c:	1bba      	subs	r2, r7, r6
 800840e:	9201      	str	r2, [sp, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	079b      	lsls	r3, r3, #30
 8008414:	d100      	bne.n	8008418 <__sflush_r+0xdc>
 8008416:	694a      	ldr	r2, [r1, #20]
 8008418:	60a2      	str	r2, [r4, #8]
 800841a:	9b01      	ldr	r3, [sp, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	dd99      	ble.n	8008354 <__sflush_r+0x18>
 8008420:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008422:	0032      	movs	r2, r6
 8008424:	001f      	movs	r7, r3
 8008426:	0028      	movs	r0, r5
 8008428:	9b01      	ldr	r3, [sp, #4]
 800842a:	6a21      	ldr	r1, [r4, #32]
 800842c:	47b8      	blx	r7
 800842e:	2800      	cmp	r0, #0
 8008430:	dc06      	bgt.n	8008440 <__sflush_r+0x104>
 8008432:	2340      	movs	r3, #64	; 0x40
 8008434:	2001      	movs	r0, #1
 8008436:	89a2      	ldrh	r2, [r4, #12]
 8008438:	4240      	negs	r0, r0
 800843a:	4313      	orrs	r3, r2
 800843c:	81a3      	strh	r3, [r4, #12]
 800843e:	e78a      	b.n	8008356 <__sflush_r+0x1a>
 8008440:	9b01      	ldr	r3, [sp, #4]
 8008442:	1836      	adds	r6, r6, r0
 8008444:	1a1b      	subs	r3, r3, r0
 8008446:	9301      	str	r3, [sp, #4]
 8008448:	e7e7      	b.n	800841a <__sflush_r+0xde>
 800844a:	46c0      	nop			; (mov r8, r8)
 800844c:	dfbffffe 	.word	0xdfbffffe

08008450 <_fflush_r>:
 8008450:	690b      	ldr	r3, [r1, #16]
 8008452:	b570      	push	{r4, r5, r6, lr}
 8008454:	0005      	movs	r5, r0
 8008456:	000c      	movs	r4, r1
 8008458:	2b00      	cmp	r3, #0
 800845a:	d102      	bne.n	8008462 <_fflush_r+0x12>
 800845c:	2500      	movs	r5, #0
 800845e:	0028      	movs	r0, r5
 8008460:	bd70      	pop	{r4, r5, r6, pc}
 8008462:	2800      	cmp	r0, #0
 8008464:	d004      	beq.n	8008470 <_fflush_r+0x20>
 8008466:	6a03      	ldr	r3, [r0, #32]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <_fflush_r+0x20>
 800846c:	f7ff f98a 	bl	8007784 <__sinit>
 8008470:	220c      	movs	r2, #12
 8008472:	5ea3      	ldrsh	r3, [r4, r2]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0f1      	beq.n	800845c <_fflush_r+0xc>
 8008478:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800847a:	07d2      	lsls	r2, r2, #31
 800847c:	d404      	bmi.n	8008488 <_fflush_r+0x38>
 800847e:	059b      	lsls	r3, r3, #22
 8008480:	d402      	bmi.n	8008488 <_fflush_r+0x38>
 8008482:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008484:	f7ff fb95 	bl	8007bb2 <__retarget_lock_acquire_recursive>
 8008488:	0028      	movs	r0, r5
 800848a:	0021      	movs	r1, r4
 800848c:	f7ff ff56 	bl	800833c <__sflush_r>
 8008490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008492:	0005      	movs	r5, r0
 8008494:	07db      	lsls	r3, r3, #31
 8008496:	d4e2      	bmi.n	800845e <_fflush_r+0xe>
 8008498:	89a3      	ldrh	r3, [r4, #12]
 800849a:	059b      	lsls	r3, r3, #22
 800849c:	d4df      	bmi.n	800845e <_fflush_r+0xe>
 800849e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084a0:	f7ff fb88 	bl	8007bb4 <__retarget_lock_release_recursive>
 80084a4:	e7db      	b.n	800845e <_fflush_r+0xe>
	...

080084a8 <__swhatbuf_r>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	000e      	movs	r6, r1
 80084ac:	001d      	movs	r5, r3
 80084ae:	230e      	movs	r3, #14
 80084b0:	5ec9      	ldrsh	r1, [r1, r3]
 80084b2:	0014      	movs	r4, r2
 80084b4:	b096      	sub	sp, #88	; 0x58
 80084b6:	2900      	cmp	r1, #0
 80084b8:	da0c      	bge.n	80084d4 <__swhatbuf_r+0x2c>
 80084ba:	89b2      	ldrh	r2, [r6, #12]
 80084bc:	2380      	movs	r3, #128	; 0x80
 80084be:	0011      	movs	r1, r2
 80084c0:	4019      	ands	r1, r3
 80084c2:	421a      	tst	r2, r3
 80084c4:	d013      	beq.n	80084ee <__swhatbuf_r+0x46>
 80084c6:	2100      	movs	r1, #0
 80084c8:	3b40      	subs	r3, #64	; 0x40
 80084ca:	2000      	movs	r0, #0
 80084cc:	6029      	str	r1, [r5, #0]
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	b016      	add	sp, #88	; 0x58
 80084d2:	bd70      	pop	{r4, r5, r6, pc}
 80084d4:	466a      	mov	r2, sp
 80084d6:	f000 f84d 	bl	8008574 <_fstat_r>
 80084da:	2800      	cmp	r0, #0
 80084dc:	dbed      	blt.n	80084ba <__swhatbuf_r+0x12>
 80084de:	23f0      	movs	r3, #240	; 0xf0
 80084e0:	9901      	ldr	r1, [sp, #4]
 80084e2:	021b      	lsls	r3, r3, #8
 80084e4:	4019      	ands	r1, r3
 80084e6:	4b03      	ldr	r3, [pc, #12]	; (80084f4 <__swhatbuf_r+0x4c>)
 80084e8:	18c9      	adds	r1, r1, r3
 80084ea:	424b      	negs	r3, r1
 80084ec:	4159      	adcs	r1, r3
 80084ee:	2380      	movs	r3, #128	; 0x80
 80084f0:	00db      	lsls	r3, r3, #3
 80084f2:	e7ea      	b.n	80084ca <__swhatbuf_r+0x22>
 80084f4:	ffffe000 	.word	0xffffe000

080084f8 <__smakebuf_r>:
 80084f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084fa:	2602      	movs	r6, #2
 80084fc:	898b      	ldrh	r3, [r1, #12]
 80084fe:	0005      	movs	r5, r0
 8008500:	000c      	movs	r4, r1
 8008502:	4233      	tst	r3, r6
 8008504:	d006      	beq.n	8008514 <__smakebuf_r+0x1c>
 8008506:	0023      	movs	r3, r4
 8008508:	3347      	adds	r3, #71	; 0x47
 800850a:	6023      	str	r3, [r4, #0]
 800850c:	6123      	str	r3, [r4, #16]
 800850e:	2301      	movs	r3, #1
 8008510:	6163      	str	r3, [r4, #20]
 8008512:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008514:	466a      	mov	r2, sp
 8008516:	ab01      	add	r3, sp, #4
 8008518:	f7ff ffc6 	bl	80084a8 <__swhatbuf_r>
 800851c:	9900      	ldr	r1, [sp, #0]
 800851e:	0007      	movs	r7, r0
 8008520:	0028      	movs	r0, r5
 8008522:	f7ff fbb5 	bl	8007c90 <_malloc_r>
 8008526:	2800      	cmp	r0, #0
 8008528:	d108      	bne.n	800853c <__smakebuf_r+0x44>
 800852a:	220c      	movs	r2, #12
 800852c:	5ea3      	ldrsh	r3, [r4, r2]
 800852e:	059a      	lsls	r2, r3, #22
 8008530:	d4ef      	bmi.n	8008512 <__smakebuf_r+0x1a>
 8008532:	2203      	movs	r2, #3
 8008534:	4393      	bics	r3, r2
 8008536:	431e      	orrs	r6, r3
 8008538:	81a6      	strh	r6, [r4, #12]
 800853a:	e7e4      	b.n	8008506 <__smakebuf_r+0xe>
 800853c:	2380      	movs	r3, #128	; 0x80
 800853e:	89a2      	ldrh	r2, [r4, #12]
 8008540:	6020      	str	r0, [r4, #0]
 8008542:	4313      	orrs	r3, r2
 8008544:	81a3      	strh	r3, [r4, #12]
 8008546:	9b00      	ldr	r3, [sp, #0]
 8008548:	6120      	str	r0, [r4, #16]
 800854a:	6163      	str	r3, [r4, #20]
 800854c:	9b01      	ldr	r3, [sp, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00c      	beq.n	800856c <__smakebuf_r+0x74>
 8008552:	0028      	movs	r0, r5
 8008554:	230e      	movs	r3, #14
 8008556:	5ee1      	ldrsh	r1, [r4, r3]
 8008558:	f000 f81e 	bl	8008598 <_isatty_r>
 800855c:	2800      	cmp	r0, #0
 800855e:	d005      	beq.n	800856c <__smakebuf_r+0x74>
 8008560:	2303      	movs	r3, #3
 8008562:	89a2      	ldrh	r2, [r4, #12]
 8008564:	439a      	bics	r2, r3
 8008566:	3b02      	subs	r3, #2
 8008568:	4313      	orrs	r3, r2
 800856a:	81a3      	strh	r3, [r4, #12]
 800856c:	89a3      	ldrh	r3, [r4, #12]
 800856e:	433b      	orrs	r3, r7
 8008570:	81a3      	strh	r3, [r4, #12]
 8008572:	e7ce      	b.n	8008512 <__smakebuf_r+0x1a>

08008574 <_fstat_r>:
 8008574:	2300      	movs	r3, #0
 8008576:	b570      	push	{r4, r5, r6, lr}
 8008578:	4d06      	ldr	r5, [pc, #24]	; (8008594 <_fstat_r+0x20>)
 800857a:	0004      	movs	r4, r0
 800857c:	0008      	movs	r0, r1
 800857e:	0011      	movs	r1, r2
 8008580:	602b      	str	r3, [r5, #0]
 8008582:	f7f9 ff64 	bl	800244e <_fstat>
 8008586:	1c43      	adds	r3, r0, #1
 8008588:	d103      	bne.n	8008592 <_fstat_r+0x1e>
 800858a:	682b      	ldr	r3, [r5, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d000      	beq.n	8008592 <_fstat_r+0x1e>
 8008590:	6023      	str	r3, [r4, #0]
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	200005dc 	.word	0x200005dc

08008598 <_isatty_r>:
 8008598:	2300      	movs	r3, #0
 800859a:	b570      	push	{r4, r5, r6, lr}
 800859c:	4d06      	ldr	r5, [pc, #24]	; (80085b8 <_isatty_r+0x20>)
 800859e:	0004      	movs	r4, r0
 80085a0:	0008      	movs	r0, r1
 80085a2:	602b      	str	r3, [r5, #0]
 80085a4:	f7f9 ff61 	bl	800246a <_isatty>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d103      	bne.n	80085b4 <_isatty_r+0x1c>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d000      	beq.n	80085b4 <_isatty_r+0x1c>
 80085b2:	6023      	str	r3, [r4, #0]
 80085b4:	bd70      	pop	{r4, r5, r6, pc}
 80085b6:	46c0      	nop			; (mov r8, r8)
 80085b8:	200005dc 	.word	0x200005dc

080085bc <_sbrk_r>:
 80085bc:	2300      	movs	r3, #0
 80085be:	b570      	push	{r4, r5, r6, lr}
 80085c0:	4d06      	ldr	r5, [pc, #24]	; (80085dc <_sbrk_r+0x20>)
 80085c2:	0004      	movs	r4, r0
 80085c4:	0008      	movs	r0, r1
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	f7f9 ff64 	bl	8002494 <_sbrk>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d103      	bne.n	80085d8 <_sbrk_r+0x1c>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d000      	beq.n	80085d8 <_sbrk_r+0x1c>
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	bd70      	pop	{r4, r5, r6, pc}
 80085da:	46c0      	nop			; (mov r8, r8)
 80085dc:	200005dc 	.word	0x200005dc

080085e0 <memchr>:
 80085e0:	b2c9      	uxtb	r1, r1
 80085e2:	1882      	adds	r2, r0, r2
 80085e4:	4290      	cmp	r0, r2
 80085e6:	d101      	bne.n	80085ec <memchr+0xc>
 80085e8:	2000      	movs	r0, #0
 80085ea:	4770      	bx	lr
 80085ec:	7803      	ldrb	r3, [r0, #0]
 80085ee:	428b      	cmp	r3, r1
 80085f0:	d0fb      	beq.n	80085ea <memchr+0xa>
 80085f2:	3001      	adds	r0, #1
 80085f4:	e7f6      	b.n	80085e4 <memchr+0x4>
	...

080085f8 <_init>:
 80085f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fe:	bc08      	pop	{r3}
 8008600:	469e      	mov	lr, r3
 8008602:	4770      	bx	lr

08008604 <_fini>:
 8008604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008606:	46c0      	nop			; (mov r8, r8)
 8008608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800860a:	bc08      	pop	{r3}
 800860c:	469e      	mov	lr, r3
 800860e:	4770      	bx	lr
