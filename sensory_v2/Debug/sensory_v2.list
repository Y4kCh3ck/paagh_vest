
sensory_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001009c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  08010160  08010160  00020160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801095c  0801095c  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801095c  0801095c  0002095c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010964  08010964  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010964  08010964  00020964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010968  08010968  00020968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0801096c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a9c  200001d8  08010b40  000301d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000c74  08010b40  00030c74  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019af7  00000000  00000000  0003023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045ea  00000000  00000000  00049d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  0004e320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011b6  00000000  00000000  0004fa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017bb5  00000000  00000000  00050bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f29b  00000000  00000000  0006878b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000821eb  00000000  00000000  00087a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006834  00000000  00000000  00109c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00110448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08010144 	.word	0x08010144

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	08010144 	.word	0x08010144

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 ff15 	bl	8002280 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fe65 	bl	8002130 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 ff07 	bl	8002280 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fefd 	bl	8002280 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe8d 	bl	80021b4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fe83 	bl	80021b4 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	0008      	movs	r0, r1
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	; (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	ffffff5d 	.word	0xffffff5d
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f8a4 	bl	8000638 <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			; (mov r8, r8)

080004fc <__aeabi_lmul>:
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	46ce      	mov	lr, r9
 8000500:	4699      	mov	r9, r3
 8000502:	0c03      	lsrs	r3, r0, #16
 8000504:	469c      	mov	ip, r3
 8000506:	0413      	lsls	r3, r2, #16
 8000508:	4647      	mov	r7, r8
 800050a:	0c1b      	lsrs	r3, r3, #16
 800050c:	001d      	movs	r5, r3
 800050e:	000e      	movs	r6, r1
 8000510:	4661      	mov	r1, ip
 8000512:	0404      	lsls	r4, r0, #16
 8000514:	0c24      	lsrs	r4, r4, #16
 8000516:	b580      	push	{r7, lr}
 8000518:	0007      	movs	r7, r0
 800051a:	0c10      	lsrs	r0, r2, #16
 800051c:	434b      	muls	r3, r1
 800051e:	4365      	muls	r5, r4
 8000520:	4341      	muls	r1, r0
 8000522:	4360      	muls	r0, r4
 8000524:	0c2c      	lsrs	r4, r5, #16
 8000526:	18c0      	adds	r0, r0, r3
 8000528:	1820      	adds	r0, r4, r0
 800052a:	468c      	mov	ip, r1
 800052c:	4283      	cmp	r3, r0
 800052e:	d903      	bls.n	8000538 <__aeabi_lmul+0x3c>
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	025b      	lsls	r3, r3, #9
 8000534:	4698      	mov	r8, r3
 8000536:	44c4      	add	ip, r8
 8000538:	4649      	mov	r1, r9
 800053a:	4379      	muls	r1, r7
 800053c:	4356      	muls	r6, r2
 800053e:	0c03      	lsrs	r3, r0, #16
 8000540:	042d      	lsls	r5, r5, #16
 8000542:	0c2d      	lsrs	r5, r5, #16
 8000544:	1989      	adds	r1, r1, r6
 8000546:	4463      	add	r3, ip
 8000548:	0400      	lsls	r0, r0, #16
 800054a:	1940      	adds	r0, r0, r5
 800054c:	18c9      	adds	r1, r1, r3
 800054e:	bcc0      	pop	{r6, r7}
 8000550:	46b9      	mov	r9, r7
 8000552:	46b0      	mov	r8, r6
 8000554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ffa1 	bl	80004a8 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f002 fd4d 	bl	800300c <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f002 f9a6 	bl	80028cc <__aeabi_dsub>
 8000580:	f002 fd44 	bl	800300c <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__aeabi_d2lz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	0005      	movs	r5, r0
 8000598:	000c      	movs	r4, r1
 800059a:	2200      	movs	r2, #0
 800059c:	2300      	movs	r3, #0
 800059e:	0028      	movs	r0, r5
 80005a0:	0021      	movs	r1, r4
 80005a2:	f7ff ff63 	bl	800046c <__aeabi_dcmplt>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d108      	bne.n	80005bc <__aeabi_d2lz+0x28>
 80005aa:	0028      	movs	r0, r5
 80005ac:	0021      	movs	r1, r4
 80005ae:	f000 f80f 	bl	80005d0 <__aeabi_d2ulz>
 80005b2:	0002      	movs	r2, r0
 80005b4:	000b      	movs	r3, r1
 80005b6:	0010      	movs	r0, r2
 80005b8:	0019      	movs	r1, r3
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	061b      	lsls	r3, r3, #24
 80005c0:	18e1      	adds	r1, r4, r3
 80005c2:	0028      	movs	r0, r5
 80005c4:	f000 f804 	bl	80005d0 <__aeabi_d2ulz>
 80005c8:	2300      	movs	r3, #0
 80005ca:	4242      	negs	r2, r0
 80005cc:	418b      	sbcs	r3, r1
 80005ce:	e7f2      	b.n	80005b6 <__aeabi_d2lz+0x22>

080005d0 <__aeabi_d2ulz>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	2200      	movs	r2, #0
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <__aeabi_d2ulz+0x34>)
 80005d6:	000d      	movs	r5, r1
 80005d8:	0004      	movs	r4, r0
 80005da:	f001 feb5 	bl	8002348 <__aeabi_dmul>
 80005de:	f7ff ffbb 	bl	8000558 <__aeabi_d2uiz>
 80005e2:	0006      	movs	r6, r0
 80005e4:	f002 fd78 	bl	80030d8 <__aeabi_ui2d>
 80005e8:	2200      	movs	r2, #0
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <__aeabi_d2ulz+0x38>)
 80005ec:	f001 feac 	bl	8002348 <__aeabi_dmul>
 80005f0:	0002      	movs	r2, r0
 80005f2:	000b      	movs	r3, r1
 80005f4:	0020      	movs	r0, r4
 80005f6:	0029      	movs	r1, r5
 80005f8:	f002 f968 	bl	80028cc <__aeabi_dsub>
 80005fc:	f7ff ffac 	bl	8000558 <__aeabi_d2uiz>
 8000600:	0031      	movs	r1, r6
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	3df00000 	.word	0x3df00000
 8000608:	41f00000 	.word	0x41f00000

0800060c <__aeabi_l2d>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	0006      	movs	r6, r0
 8000610:	0008      	movs	r0, r1
 8000612:	f002 fd31 	bl	8003078 <__aeabi_i2d>
 8000616:	2200      	movs	r2, #0
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <__aeabi_l2d+0x28>)
 800061a:	f001 fe95 	bl	8002348 <__aeabi_dmul>
 800061e:	000d      	movs	r5, r1
 8000620:	0004      	movs	r4, r0
 8000622:	0030      	movs	r0, r6
 8000624:	f002 fd58 	bl	80030d8 <__aeabi_ui2d>
 8000628:	002b      	movs	r3, r5
 800062a:	0022      	movs	r2, r4
 800062c:	f000 ff32 	bl	8001494 <__aeabi_dadd>
 8000630:	bd70      	pop	{r4, r5, r6, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	41f00000 	.word	0x41f00000

08000638 <__udivmoddi4>:
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	4657      	mov	r7, sl
 800063c:	464e      	mov	r6, r9
 800063e:	4645      	mov	r5, r8
 8000640:	46de      	mov	lr, fp
 8000642:	b5e0      	push	{r5, r6, r7, lr}
 8000644:	0004      	movs	r4, r0
 8000646:	000d      	movs	r5, r1
 8000648:	4692      	mov	sl, r2
 800064a:	4699      	mov	r9, r3
 800064c:	b083      	sub	sp, #12
 800064e:	428b      	cmp	r3, r1
 8000650:	d830      	bhi.n	80006b4 <__udivmoddi4+0x7c>
 8000652:	d02d      	beq.n	80006b0 <__udivmoddi4+0x78>
 8000654:	4649      	mov	r1, r9
 8000656:	4650      	mov	r0, sl
 8000658:	f002 fe50 	bl	80032fc <__clzdi2>
 800065c:	0029      	movs	r1, r5
 800065e:	0006      	movs	r6, r0
 8000660:	0020      	movs	r0, r4
 8000662:	f002 fe4b 	bl	80032fc <__clzdi2>
 8000666:	1a33      	subs	r3, r6, r0
 8000668:	4698      	mov	r8, r3
 800066a:	3b20      	subs	r3, #32
 800066c:	d434      	bmi.n	80006d8 <__udivmoddi4+0xa0>
 800066e:	469b      	mov	fp, r3
 8000670:	4653      	mov	r3, sl
 8000672:	465a      	mov	r2, fp
 8000674:	4093      	lsls	r3, r2
 8000676:	4642      	mov	r2, r8
 8000678:	001f      	movs	r7, r3
 800067a:	4653      	mov	r3, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	001e      	movs	r6, r3
 8000680:	42af      	cmp	r7, r5
 8000682:	d83b      	bhi.n	80006fc <__udivmoddi4+0xc4>
 8000684:	42af      	cmp	r7, r5
 8000686:	d100      	bne.n	800068a <__udivmoddi4+0x52>
 8000688:	e079      	b.n	800077e <__udivmoddi4+0x146>
 800068a:	465b      	mov	r3, fp
 800068c:	1ba4      	subs	r4, r4, r6
 800068e:	41bd      	sbcs	r5, r7
 8000690:	2b00      	cmp	r3, #0
 8000692:	da00      	bge.n	8000696 <__udivmoddi4+0x5e>
 8000694:	e076      	b.n	8000784 <__udivmoddi4+0x14c>
 8000696:	2200      	movs	r2, #0
 8000698:	2300      	movs	r3, #0
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2301      	movs	r3, #1
 80006a0:	465a      	mov	r2, fp
 80006a2:	4093      	lsls	r3, r2
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2301      	movs	r3, #1
 80006a8:	4642      	mov	r2, r8
 80006aa:	4093      	lsls	r3, r2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	e029      	b.n	8000704 <__udivmoddi4+0xcc>
 80006b0:	4282      	cmp	r2, r0
 80006b2:	d9cf      	bls.n	8000654 <__udivmoddi4+0x1c>
 80006b4:	2200      	movs	r2, #0
 80006b6:	2300      	movs	r3, #0
 80006b8:	9200      	str	r2, [sp, #0]
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <__udivmoddi4+0x8e>
 80006c2:	601c      	str	r4, [r3, #0]
 80006c4:	605d      	str	r5, [r3, #4]
 80006c6:	9800      	ldr	r0, [sp, #0]
 80006c8:	9901      	ldr	r1, [sp, #4]
 80006ca:	b003      	add	sp, #12
 80006cc:	bcf0      	pop	{r4, r5, r6, r7}
 80006ce:	46bb      	mov	fp, r7
 80006d0:	46b2      	mov	sl, r6
 80006d2:	46a9      	mov	r9, r5
 80006d4:	46a0      	mov	r8, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	4642      	mov	r2, r8
 80006da:	469b      	mov	fp, r3
 80006dc:	2320      	movs	r3, #32
 80006de:	1a9b      	subs	r3, r3, r2
 80006e0:	4652      	mov	r2, sl
 80006e2:	40da      	lsrs	r2, r3
 80006e4:	4641      	mov	r1, r8
 80006e6:	0013      	movs	r3, r2
 80006e8:	464a      	mov	r2, r9
 80006ea:	408a      	lsls	r2, r1
 80006ec:	0017      	movs	r7, r2
 80006ee:	4642      	mov	r2, r8
 80006f0:	431f      	orrs	r7, r3
 80006f2:	4653      	mov	r3, sl
 80006f4:	4093      	lsls	r3, r2
 80006f6:	001e      	movs	r6, r3
 80006f8:	42af      	cmp	r7, r5
 80006fa:	d9c3      	bls.n	8000684 <__udivmoddi4+0x4c>
 80006fc:	2200      	movs	r2, #0
 80006fe:	2300      	movs	r3, #0
 8000700:	9200      	str	r2, [sp, #0]
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	4643      	mov	r3, r8
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0d8      	beq.n	80006bc <__udivmoddi4+0x84>
 800070a:	07fb      	lsls	r3, r7, #31
 800070c:	0872      	lsrs	r2, r6, #1
 800070e:	431a      	orrs	r2, r3
 8000710:	4646      	mov	r6, r8
 8000712:	087b      	lsrs	r3, r7, #1
 8000714:	e00e      	b.n	8000734 <__udivmoddi4+0xfc>
 8000716:	42ab      	cmp	r3, r5
 8000718:	d101      	bne.n	800071e <__udivmoddi4+0xe6>
 800071a:	42a2      	cmp	r2, r4
 800071c:	d80c      	bhi.n	8000738 <__udivmoddi4+0x100>
 800071e:	1aa4      	subs	r4, r4, r2
 8000720:	419d      	sbcs	r5, r3
 8000722:	2001      	movs	r0, #1
 8000724:	1924      	adds	r4, r4, r4
 8000726:	416d      	adcs	r5, r5
 8000728:	2100      	movs	r1, #0
 800072a:	3e01      	subs	r6, #1
 800072c:	1824      	adds	r4, r4, r0
 800072e:	414d      	adcs	r5, r1
 8000730:	2e00      	cmp	r6, #0
 8000732:	d006      	beq.n	8000742 <__udivmoddi4+0x10a>
 8000734:	42ab      	cmp	r3, r5
 8000736:	d9ee      	bls.n	8000716 <__udivmoddi4+0xde>
 8000738:	3e01      	subs	r6, #1
 800073a:	1924      	adds	r4, r4, r4
 800073c:	416d      	adcs	r5, r5
 800073e:	2e00      	cmp	r6, #0
 8000740:	d1f8      	bne.n	8000734 <__udivmoddi4+0xfc>
 8000742:	9800      	ldr	r0, [sp, #0]
 8000744:	9901      	ldr	r1, [sp, #4]
 8000746:	465b      	mov	r3, fp
 8000748:	1900      	adds	r0, r0, r4
 800074a:	4169      	adcs	r1, r5
 800074c:	2b00      	cmp	r3, #0
 800074e:	db24      	blt.n	800079a <__udivmoddi4+0x162>
 8000750:	002b      	movs	r3, r5
 8000752:	465a      	mov	r2, fp
 8000754:	4644      	mov	r4, r8
 8000756:	40d3      	lsrs	r3, r2
 8000758:	002a      	movs	r2, r5
 800075a:	40e2      	lsrs	r2, r4
 800075c:	001c      	movs	r4, r3
 800075e:	465b      	mov	r3, fp
 8000760:	0015      	movs	r5, r2
 8000762:	2b00      	cmp	r3, #0
 8000764:	db2a      	blt.n	80007bc <__udivmoddi4+0x184>
 8000766:	0026      	movs	r6, r4
 8000768:	409e      	lsls	r6, r3
 800076a:	0033      	movs	r3, r6
 800076c:	0026      	movs	r6, r4
 800076e:	4647      	mov	r7, r8
 8000770:	40be      	lsls	r6, r7
 8000772:	0032      	movs	r2, r6
 8000774:	1a80      	subs	r0, r0, r2
 8000776:	4199      	sbcs	r1, r3
 8000778:	9000      	str	r0, [sp, #0]
 800077a:	9101      	str	r1, [sp, #4]
 800077c:	e79e      	b.n	80006bc <__udivmoddi4+0x84>
 800077e:	42a3      	cmp	r3, r4
 8000780:	d8bc      	bhi.n	80006fc <__udivmoddi4+0xc4>
 8000782:	e782      	b.n	800068a <__udivmoddi4+0x52>
 8000784:	4642      	mov	r2, r8
 8000786:	2320      	movs	r3, #32
 8000788:	2100      	movs	r1, #0
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	2200      	movs	r2, #0
 800078e:	9100      	str	r1, [sp, #0]
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	2201      	movs	r2, #1
 8000794:	40da      	lsrs	r2, r3
 8000796:	9201      	str	r2, [sp, #4]
 8000798:	e785      	b.n	80006a6 <__udivmoddi4+0x6e>
 800079a:	4642      	mov	r2, r8
 800079c:	2320      	movs	r3, #32
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	002a      	movs	r2, r5
 80007a2:	4646      	mov	r6, r8
 80007a4:	409a      	lsls	r2, r3
 80007a6:	0023      	movs	r3, r4
 80007a8:	40f3      	lsrs	r3, r6
 80007aa:	4644      	mov	r4, r8
 80007ac:	4313      	orrs	r3, r2
 80007ae:	002a      	movs	r2, r5
 80007b0:	40e2      	lsrs	r2, r4
 80007b2:	001c      	movs	r4, r3
 80007b4:	465b      	mov	r3, fp
 80007b6:	0015      	movs	r5, r2
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dad4      	bge.n	8000766 <__udivmoddi4+0x12e>
 80007bc:	4642      	mov	r2, r8
 80007be:	002f      	movs	r7, r5
 80007c0:	2320      	movs	r3, #32
 80007c2:	0026      	movs	r6, r4
 80007c4:	4097      	lsls	r7, r2
 80007c6:	1a9b      	subs	r3, r3, r2
 80007c8:	40de      	lsrs	r6, r3
 80007ca:	003b      	movs	r3, r7
 80007cc:	4333      	orrs	r3, r6
 80007ce:	e7cd      	b.n	800076c <__udivmoddi4+0x134>

080007d0 <__aeabi_fadd>:
 80007d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d2:	4647      	mov	r7, r8
 80007d4:	46ce      	mov	lr, r9
 80007d6:	024a      	lsls	r2, r1, #9
 80007d8:	0243      	lsls	r3, r0, #9
 80007da:	0045      	lsls	r5, r0, #1
 80007dc:	0fc4      	lsrs	r4, r0, #31
 80007de:	0a50      	lsrs	r0, r2, #9
 80007e0:	4680      	mov	r8, r0
 80007e2:	0048      	lsls	r0, r1, #1
 80007e4:	0a5b      	lsrs	r3, r3, #9
 80007e6:	0e00      	lsrs	r0, r0, #24
 80007e8:	0992      	lsrs	r2, r2, #6
 80007ea:	4694      	mov	ip, r2
 80007ec:	b580      	push	{r7, lr}
 80007ee:	001e      	movs	r6, r3
 80007f0:	4681      	mov	r9, r0
 80007f2:	0002      	movs	r2, r0
 80007f4:	0e2d      	lsrs	r5, r5, #24
 80007f6:	00df      	lsls	r7, r3, #3
 80007f8:	0fc9      	lsrs	r1, r1, #31
 80007fa:	428c      	cmp	r4, r1
 80007fc:	d024      	beq.n	8000848 <__aeabi_fadd+0x78>
 80007fe:	1a28      	subs	r0, r5, r0
 8000800:	2800      	cmp	r0, #0
 8000802:	dd0e      	ble.n	8000822 <__aeabi_fadd+0x52>
 8000804:	2a00      	cmp	r2, #0
 8000806:	d13e      	bne.n	8000886 <__aeabi_fadd+0xb6>
 8000808:	4662      	mov	r2, ip
 800080a:	2a00      	cmp	r2, #0
 800080c:	d100      	bne.n	8000810 <__aeabi_fadd+0x40>
 800080e:	e0fd      	b.n	8000a0c <__aeabi_fadd+0x23c>
 8000810:	1e42      	subs	r2, r0, #1
 8000812:	2801      	cmp	r0, #1
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x48>
 8000816:	e137      	b.n	8000a88 <__aeabi_fadd+0x2b8>
 8000818:	28ff      	cmp	r0, #255	; 0xff
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x4e>
 800081c:	e0a9      	b.n	8000972 <__aeabi_fadd+0x1a2>
 800081e:	0010      	movs	r0, r2
 8000820:	e039      	b.n	8000896 <__aeabi_fadd+0xc6>
 8000822:	2800      	cmp	r0, #0
 8000824:	d063      	beq.n	80008ee <__aeabi_fadd+0x11e>
 8000826:	464b      	mov	r3, r9
 8000828:	1b52      	subs	r2, r2, r5
 800082a:	2d00      	cmp	r5, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_fadd+0x60>
 800082e:	e0e0      	b.n	80009f2 <__aeabi_fadd+0x222>
 8000830:	2f00      	cmp	r7, #0
 8000832:	d100      	bne.n	8000836 <__aeabi_fadd+0x66>
 8000834:	e0ce      	b.n	80009d4 <__aeabi_fadd+0x204>
 8000836:	1e53      	subs	r3, r2, #1
 8000838:	2a01      	cmp	r2, #1
 800083a:	d100      	bne.n	800083e <__aeabi_fadd+0x6e>
 800083c:	e155      	b.n	8000aea <__aeabi_fadd+0x31a>
 800083e:	2aff      	cmp	r2, #255	; 0xff
 8000840:	d100      	bne.n	8000844 <__aeabi_fadd+0x74>
 8000842:	e094      	b.n	800096e <__aeabi_fadd+0x19e>
 8000844:	001a      	movs	r2, r3
 8000846:	e0d9      	b.n	80009fc <__aeabi_fadd+0x22c>
 8000848:	1a2a      	subs	r2, r5, r0
 800084a:	2a00      	cmp	r2, #0
 800084c:	dc00      	bgt.n	8000850 <__aeabi_fadd+0x80>
 800084e:	e099      	b.n	8000984 <__aeabi_fadd+0x1b4>
 8000850:	2800      	cmp	r0, #0
 8000852:	d062      	beq.n	800091a <__aeabi_fadd+0x14a>
 8000854:	2dff      	cmp	r5, #255	; 0xff
 8000856:	d100      	bne.n	800085a <__aeabi_fadd+0x8a>
 8000858:	e08b      	b.n	8000972 <__aeabi_fadd+0x1a2>
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	4661      	mov	r1, ip
 800085e:	04db      	lsls	r3, r3, #19
 8000860:	4319      	orrs	r1, r3
 8000862:	468c      	mov	ip, r1
 8000864:	2a1b      	cmp	r2, #27
 8000866:	dc00      	bgt.n	800086a <__aeabi_fadd+0x9a>
 8000868:	e0d2      	b.n	8000a10 <__aeabi_fadd+0x240>
 800086a:	2301      	movs	r3, #1
 800086c:	19db      	adds	r3, r3, r7
 800086e:	015a      	lsls	r2, r3, #5
 8000870:	d56a      	bpl.n	8000948 <__aeabi_fadd+0x178>
 8000872:	3501      	adds	r5, #1
 8000874:	2dff      	cmp	r5, #255	; 0xff
 8000876:	d05b      	beq.n	8000930 <__aeabi_fadd+0x160>
 8000878:	2201      	movs	r2, #1
 800087a:	49a3      	ldr	r1, [pc, #652]	; (8000b08 <__aeabi_fadd+0x338>)
 800087c:	401a      	ands	r2, r3
 800087e:	085b      	lsrs	r3, r3, #1
 8000880:	400b      	ands	r3, r1
 8000882:	4313      	orrs	r3, r2
 8000884:	e01c      	b.n	80008c0 <__aeabi_fadd+0xf0>
 8000886:	2dff      	cmp	r5, #255	; 0xff
 8000888:	d100      	bne.n	800088c <__aeabi_fadd+0xbc>
 800088a:	e072      	b.n	8000972 <__aeabi_fadd+0x1a2>
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	4662      	mov	r2, ip
 8000890:	04db      	lsls	r3, r3, #19
 8000892:	431a      	orrs	r2, r3
 8000894:	4694      	mov	ip, r2
 8000896:	281b      	cmp	r0, #27
 8000898:	dc00      	bgt.n	800089c <__aeabi_fadd+0xcc>
 800089a:	e090      	b.n	80009be <__aeabi_fadd+0x1ee>
 800089c:	2301      	movs	r3, #1
 800089e:	1afb      	subs	r3, r7, r3
 80008a0:	015a      	lsls	r2, r3, #5
 80008a2:	d551      	bpl.n	8000948 <__aeabi_fadd+0x178>
 80008a4:	019b      	lsls	r3, r3, #6
 80008a6:	099e      	lsrs	r6, r3, #6
 80008a8:	0030      	movs	r0, r6
 80008aa:	f002 fd09 	bl	80032c0 <__clzsi2>
 80008ae:	0033      	movs	r3, r6
 80008b0:	3805      	subs	r0, #5
 80008b2:	4083      	lsls	r3, r0
 80008b4:	4285      	cmp	r5, r0
 80008b6:	dc00      	bgt.n	80008ba <__aeabi_fadd+0xea>
 80008b8:	e075      	b.n	80009a6 <__aeabi_fadd+0x1d6>
 80008ba:	4a94      	ldr	r2, [pc, #592]	; (8000b0c <__aeabi_fadd+0x33c>)
 80008bc:	1a2d      	subs	r5, r5, r0
 80008be:	4013      	ands	r3, r2
 80008c0:	075a      	lsls	r2, r3, #29
 80008c2:	d004      	beq.n	80008ce <__aeabi_fadd+0xfe>
 80008c4:	220f      	movs	r2, #15
 80008c6:	401a      	ands	r2, r3
 80008c8:	2a04      	cmp	r2, #4
 80008ca:	d000      	beq.n	80008ce <__aeabi_fadd+0xfe>
 80008cc:	3304      	adds	r3, #4
 80008ce:	015a      	lsls	r2, r3, #5
 80008d0:	d53c      	bpl.n	800094c <__aeabi_fadd+0x17c>
 80008d2:	1c68      	adds	r0, r5, #1
 80008d4:	2dfe      	cmp	r5, #254	; 0xfe
 80008d6:	d02b      	beq.n	8000930 <__aeabi_fadd+0x160>
 80008d8:	019b      	lsls	r3, r3, #6
 80008da:	0a5e      	lsrs	r6, r3, #9
 80008dc:	b2c0      	uxtb	r0, r0
 80008de:	05c0      	lsls	r0, r0, #23
 80008e0:	4330      	orrs	r0, r6
 80008e2:	07e4      	lsls	r4, r4, #31
 80008e4:	4320      	orrs	r0, r4
 80008e6:	bcc0      	pop	{r6, r7}
 80008e8:	46b9      	mov	r9, r7
 80008ea:	46b0      	mov	r8, r6
 80008ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ee:	20fe      	movs	r0, #254	; 0xfe
 80008f0:	1c6a      	adds	r2, r5, #1
 80008f2:	4210      	tst	r0, r2
 80008f4:	d172      	bne.n	80009dc <__aeabi_fadd+0x20c>
 80008f6:	2d00      	cmp	r5, #0
 80008f8:	d000      	beq.n	80008fc <__aeabi_fadd+0x12c>
 80008fa:	e0ae      	b.n	8000a5a <__aeabi_fadd+0x28a>
 80008fc:	2f00      	cmp	r7, #0
 80008fe:	d100      	bne.n	8000902 <__aeabi_fadd+0x132>
 8000900:	e0ec      	b.n	8000adc <__aeabi_fadd+0x30c>
 8000902:	4663      	mov	r3, ip
 8000904:	2000      	movs	r0, #0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0e9      	beq.n	80008de <__aeabi_fadd+0x10e>
 800090a:	1afb      	subs	r3, r7, r3
 800090c:	015a      	lsls	r2, r3, #5
 800090e:	d400      	bmi.n	8000912 <__aeabi_fadd+0x142>
 8000910:	e0f3      	b.n	8000afa <__aeabi_fadd+0x32a>
 8000912:	4663      	mov	r3, ip
 8000914:	000c      	movs	r4, r1
 8000916:	1bdb      	subs	r3, r3, r7
 8000918:	e7d2      	b.n	80008c0 <__aeabi_fadd+0xf0>
 800091a:	4661      	mov	r1, ip
 800091c:	2900      	cmp	r1, #0
 800091e:	d05b      	beq.n	80009d8 <__aeabi_fadd+0x208>
 8000920:	1e51      	subs	r1, r2, #1
 8000922:	2a01      	cmp	r2, #1
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x158>
 8000926:	e0a7      	b.n	8000a78 <__aeabi_fadd+0x2a8>
 8000928:	2aff      	cmp	r2, #255	; 0xff
 800092a:	d022      	beq.n	8000972 <__aeabi_fadd+0x1a2>
 800092c:	000a      	movs	r2, r1
 800092e:	e799      	b.n	8000864 <__aeabi_fadd+0x94>
 8000930:	20ff      	movs	r0, #255	; 0xff
 8000932:	2600      	movs	r6, #0
 8000934:	e7d3      	b.n	80008de <__aeabi_fadd+0x10e>
 8000936:	21fe      	movs	r1, #254	; 0xfe
 8000938:	1c6a      	adds	r2, r5, #1
 800093a:	4211      	tst	r1, r2
 800093c:	d073      	beq.n	8000a26 <__aeabi_fadd+0x256>
 800093e:	2aff      	cmp	r2, #255	; 0xff
 8000940:	d0f6      	beq.n	8000930 <__aeabi_fadd+0x160>
 8000942:	0015      	movs	r5, r2
 8000944:	4467      	add	r7, ip
 8000946:	087b      	lsrs	r3, r7, #1
 8000948:	075a      	lsls	r2, r3, #29
 800094a:	d1bb      	bne.n	80008c4 <__aeabi_fadd+0xf4>
 800094c:	08db      	lsrs	r3, r3, #3
 800094e:	2dff      	cmp	r5, #255	; 0xff
 8000950:	d00f      	beq.n	8000972 <__aeabi_fadd+0x1a2>
 8000952:	025b      	lsls	r3, r3, #9
 8000954:	0a5e      	lsrs	r6, r3, #9
 8000956:	b2e8      	uxtb	r0, r5
 8000958:	e7c1      	b.n	80008de <__aeabi_fadd+0x10e>
 800095a:	4662      	mov	r2, ip
 800095c:	2a00      	cmp	r2, #0
 800095e:	d008      	beq.n	8000972 <__aeabi_fadd+0x1a2>
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	03d2      	lsls	r2, r2, #15
 8000964:	4213      	tst	r3, r2
 8000966:	d004      	beq.n	8000972 <__aeabi_fadd+0x1a2>
 8000968:	4640      	mov	r0, r8
 800096a:	4210      	tst	r0, r2
 800096c:	d101      	bne.n	8000972 <__aeabi_fadd+0x1a2>
 800096e:	000c      	movs	r4, r1
 8000970:	4643      	mov	r3, r8
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0dc      	beq.n	8000930 <__aeabi_fadd+0x160>
 8000976:	2680      	movs	r6, #128	; 0x80
 8000978:	03f6      	lsls	r6, r6, #15
 800097a:	431e      	orrs	r6, r3
 800097c:	0276      	lsls	r6, r6, #9
 800097e:	20ff      	movs	r0, #255	; 0xff
 8000980:	0a76      	lsrs	r6, r6, #9
 8000982:	e7ac      	b.n	80008de <__aeabi_fadd+0x10e>
 8000984:	2a00      	cmp	r2, #0
 8000986:	d0d6      	beq.n	8000936 <__aeabi_fadd+0x166>
 8000988:	1b42      	subs	r2, r0, r5
 800098a:	2d00      	cmp	r5, #0
 800098c:	d05c      	beq.n	8000a48 <__aeabi_fadd+0x278>
 800098e:	28ff      	cmp	r0, #255	; 0xff
 8000990:	d0ee      	beq.n	8000970 <__aeabi_fadd+0x1a0>
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	04db      	lsls	r3, r3, #19
 8000996:	431f      	orrs	r7, r3
 8000998:	2a1b      	cmp	r2, #27
 800099a:	dc00      	bgt.n	800099e <__aeabi_fadd+0x1ce>
 800099c:	e082      	b.n	8000aa4 <__aeabi_fadd+0x2d4>
 800099e:	2301      	movs	r3, #1
 80009a0:	464d      	mov	r5, r9
 80009a2:	4463      	add	r3, ip
 80009a4:	e763      	b.n	800086e <__aeabi_fadd+0x9e>
 80009a6:	2220      	movs	r2, #32
 80009a8:	1b40      	subs	r0, r0, r5
 80009aa:	3001      	adds	r0, #1
 80009ac:	1a12      	subs	r2, r2, r0
 80009ae:	0019      	movs	r1, r3
 80009b0:	4093      	lsls	r3, r2
 80009b2:	40c1      	lsrs	r1, r0
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	4193      	sbcs	r3, r2
 80009b8:	2500      	movs	r5, #0
 80009ba:	430b      	orrs	r3, r1
 80009bc:	e780      	b.n	80008c0 <__aeabi_fadd+0xf0>
 80009be:	2320      	movs	r3, #32
 80009c0:	4661      	mov	r1, ip
 80009c2:	1a1b      	subs	r3, r3, r0
 80009c4:	4099      	lsls	r1, r3
 80009c6:	4662      	mov	r2, ip
 80009c8:	000b      	movs	r3, r1
 80009ca:	40c2      	lsrs	r2, r0
 80009cc:	1e59      	subs	r1, r3, #1
 80009ce:	418b      	sbcs	r3, r1
 80009d0:	4313      	orrs	r3, r2
 80009d2:	e764      	b.n	800089e <__aeabi_fadd+0xce>
 80009d4:	000c      	movs	r4, r1
 80009d6:	4643      	mov	r3, r8
 80009d8:	0015      	movs	r5, r2
 80009da:	e7b8      	b.n	800094e <__aeabi_fadd+0x17e>
 80009dc:	4663      	mov	r3, ip
 80009de:	1afe      	subs	r6, r7, r3
 80009e0:	0173      	lsls	r3, r6, #5
 80009e2:	d445      	bmi.n	8000a70 <__aeabi_fadd+0x2a0>
 80009e4:	2e00      	cmp	r6, #0
 80009e6:	d000      	beq.n	80009ea <__aeabi_fadd+0x21a>
 80009e8:	e75e      	b.n	80008a8 <__aeabi_fadd+0xd8>
 80009ea:	2400      	movs	r4, #0
 80009ec:	2000      	movs	r0, #0
 80009ee:	2600      	movs	r6, #0
 80009f0:	e775      	b.n	80008de <__aeabi_fadd+0x10e>
 80009f2:	2bff      	cmp	r3, #255	; 0xff
 80009f4:	d0bb      	beq.n	800096e <__aeabi_fadd+0x19e>
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	04db      	lsls	r3, r3, #19
 80009fa:	431f      	orrs	r7, r3
 80009fc:	2a1b      	cmp	r2, #27
 80009fe:	dd47      	ble.n	8000a90 <__aeabi_fadd+0x2c0>
 8000a00:	2301      	movs	r3, #1
 8000a02:	4662      	mov	r2, ip
 8000a04:	000c      	movs	r4, r1
 8000a06:	464d      	mov	r5, r9
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	e749      	b.n	80008a0 <__aeabi_fadd+0xd0>
 8000a0c:	0005      	movs	r5, r0
 8000a0e:	e79e      	b.n	800094e <__aeabi_fadd+0x17e>
 8000a10:	4661      	mov	r1, ip
 8000a12:	2320      	movs	r3, #32
 8000a14:	40d1      	lsrs	r1, r2
 8000a16:	1a9b      	subs	r3, r3, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	0013      	movs	r3, r2
 8000a1e:	1e5a      	subs	r2, r3, #1
 8000a20:	4193      	sbcs	r3, r2
 8000a22:	430b      	orrs	r3, r1
 8000a24:	e722      	b.n	800086c <__aeabi_fadd+0x9c>
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d146      	bne.n	8000ab8 <__aeabi_fadd+0x2e8>
 8000a2a:	2f00      	cmp	r7, #0
 8000a2c:	d062      	beq.n	8000af4 <__aeabi_fadd+0x324>
 8000a2e:	4663      	mov	r3, ip
 8000a30:	2000      	movs	r0, #0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fadd+0x268>
 8000a36:	e752      	b.n	80008de <__aeabi_fadd+0x10e>
 8000a38:	003b      	movs	r3, r7
 8000a3a:	4463      	add	r3, ip
 8000a3c:	015a      	lsls	r2, r3, #5
 8000a3e:	d583      	bpl.n	8000948 <__aeabi_fadd+0x178>
 8000a40:	4a32      	ldr	r2, [pc, #200]	; (8000b0c <__aeabi_fadd+0x33c>)
 8000a42:	3501      	adds	r5, #1
 8000a44:	4013      	ands	r3, r2
 8000a46:	e77f      	b.n	8000948 <__aeabi_fadd+0x178>
 8000a48:	2f00      	cmp	r7, #0
 8000a4a:	d0c4      	beq.n	80009d6 <__aeabi_fadd+0x206>
 8000a4c:	1e53      	subs	r3, r2, #1
 8000a4e:	2a01      	cmp	r2, #1
 8000a50:	d012      	beq.n	8000a78 <__aeabi_fadd+0x2a8>
 8000a52:	2aff      	cmp	r2, #255	; 0xff
 8000a54:	d08c      	beq.n	8000970 <__aeabi_fadd+0x1a0>
 8000a56:	001a      	movs	r2, r3
 8000a58:	e79e      	b.n	8000998 <__aeabi_fadd+0x1c8>
 8000a5a:	2f00      	cmp	r7, #0
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_fadd+0x290>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x18a>
 8000a60:	4663      	mov	r3, ip
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d183      	bne.n	800096e <__aeabi_fadd+0x19e>
 8000a66:	2680      	movs	r6, #128	; 0x80
 8000a68:	2400      	movs	r4, #0
 8000a6a:	20ff      	movs	r0, #255	; 0xff
 8000a6c:	03f6      	lsls	r6, r6, #15
 8000a6e:	e736      	b.n	80008de <__aeabi_fadd+0x10e>
 8000a70:	4663      	mov	r3, ip
 8000a72:	000c      	movs	r4, r1
 8000a74:	1bde      	subs	r6, r3, r7
 8000a76:	e717      	b.n	80008a8 <__aeabi_fadd+0xd8>
 8000a78:	003b      	movs	r3, r7
 8000a7a:	4463      	add	r3, ip
 8000a7c:	2501      	movs	r5, #1
 8000a7e:	015a      	lsls	r2, r3, #5
 8000a80:	d400      	bmi.n	8000a84 <__aeabi_fadd+0x2b4>
 8000a82:	e761      	b.n	8000948 <__aeabi_fadd+0x178>
 8000a84:	2502      	movs	r5, #2
 8000a86:	e6f7      	b.n	8000878 <__aeabi_fadd+0xa8>
 8000a88:	4663      	mov	r3, ip
 8000a8a:	2501      	movs	r5, #1
 8000a8c:	1afb      	subs	r3, r7, r3
 8000a8e:	e707      	b.n	80008a0 <__aeabi_fadd+0xd0>
 8000a90:	2320      	movs	r3, #32
 8000a92:	1a9b      	subs	r3, r3, r2
 8000a94:	0038      	movs	r0, r7
 8000a96:	409f      	lsls	r7, r3
 8000a98:	003b      	movs	r3, r7
 8000a9a:	40d0      	lsrs	r0, r2
 8000a9c:	1e5a      	subs	r2, r3, #1
 8000a9e:	4193      	sbcs	r3, r2
 8000aa0:	4303      	orrs	r3, r0
 8000aa2:	e7ae      	b.n	8000a02 <__aeabi_fadd+0x232>
 8000aa4:	2320      	movs	r3, #32
 8000aa6:	1a9b      	subs	r3, r3, r2
 8000aa8:	0039      	movs	r1, r7
 8000aaa:	409f      	lsls	r7, r3
 8000aac:	003b      	movs	r3, r7
 8000aae:	40d1      	lsrs	r1, r2
 8000ab0:	1e5a      	subs	r2, r3, #1
 8000ab2:	4193      	sbcs	r3, r2
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	e773      	b.n	80009a0 <__aeabi_fadd+0x1d0>
 8000ab8:	2f00      	cmp	r7, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_fadd+0x2ee>
 8000abc:	e758      	b.n	8000970 <__aeabi_fadd+0x1a0>
 8000abe:	4662      	mov	r2, ip
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fadd+0x2f6>
 8000ac4:	e755      	b.n	8000972 <__aeabi_fadd+0x1a2>
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	03d2      	lsls	r2, r2, #15
 8000aca:	4213      	tst	r3, r2
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fadd+0x300>
 8000ace:	e750      	b.n	8000972 <__aeabi_fadd+0x1a2>
 8000ad0:	4641      	mov	r1, r8
 8000ad2:	4211      	tst	r1, r2
 8000ad4:	d000      	beq.n	8000ad8 <__aeabi_fadd+0x308>
 8000ad6:	e74c      	b.n	8000972 <__aeabi_fadd+0x1a2>
 8000ad8:	4643      	mov	r3, r8
 8000ada:	e74a      	b.n	8000972 <__aeabi_fadd+0x1a2>
 8000adc:	4663      	mov	r3, ip
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d083      	beq.n	80009ea <__aeabi_fadd+0x21a>
 8000ae2:	000c      	movs	r4, r1
 8000ae4:	4646      	mov	r6, r8
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	e6f9      	b.n	80008de <__aeabi_fadd+0x10e>
 8000aea:	4663      	mov	r3, ip
 8000aec:	000c      	movs	r4, r1
 8000aee:	1bdb      	subs	r3, r3, r7
 8000af0:	3501      	adds	r5, #1
 8000af2:	e6d5      	b.n	80008a0 <__aeabi_fadd+0xd0>
 8000af4:	4646      	mov	r6, r8
 8000af6:	2000      	movs	r0, #0
 8000af8:	e6f1      	b.n	80008de <__aeabi_fadd+0x10e>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d000      	beq.n	8000b00 <__aeabi_fadd+0x330>
 8000afe:	e723      	b.n	8000948 <__aeabi_fadd+0x178>
 8000b00:	2400      	movs	r4, #0
 8000b02:	2600      	movs	r6, #0
 8000b04:	e6eb      	b.n	80008de <__aeabi_fadd+0x10e>
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	7dffffff 	.word	0x7dffffff
 8000b0c:	fbffffff 	.word	0xfbffffff

08000b10 <__aeabi_fdiv>:
 8000b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b12:	464f      	mov	r7, r9
 8000b14:	4646      	mov	r6, r8
 8000b16:	46d6      	mov	lr, sl
 8000b18:	0245      	lsls	r5, r0, #9
 8000b1a:	b5c0      	push	{r6, r7, lr}
 8000b1c:	0047      	lsls	r7, r0, #1
 8000b1e:	1c0c      	adds	r4, r1, #0
 8000b20:	0a6d      	lsrs	r5, r5, #9
 8000b22:	0e3f      	lsrs	r7, r7, #24
 8000b24:	0fc6      	lsrs	r6, r0, #31
 8000b26:	2f00      	cmp	r7, #0
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fdiv+0x1c>
 8000b2a:	e06f      	b.n	8000c0c <__aeabi_fdiv+0xfc>
 8000b2c:	2fff      	cmp	r7, #255	; 0xff
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_fdiv+0x22>
 8000b30:	e074      	b.n	8000c1c <__aeabi_fdiv+0x10c>
 8000b32:	2300      	movs	r3, #0
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	4699      	mov	r9, r3
 8000b38:	469a      	mov	sl, r3
 8000b3a:	00ed      	lsls	r5, r5, #3
 8000b3c:	04d2      	lsls	r2, r2, #19
 8000b3e:	4315      	orrs	r5, r2
 8000b40:	3f7f      	subs	r7, #127	; 0x7f
 8000b42:	0263      	lsls	r3, r4, #9
 8000b44:	0a5b      	lsrs	r3, r3, #9
 8000b46:	4698      	mov	r8, r3
 8000b48:	0063      	lsls	r3, r4, #1
 8000b4a:	0e1b      	lsrs	r3, r3, #24
 8000b4c:	0fe4      	lsrs	r4, r4, #31
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d04d      	beq.n	8000bee <__aeabi_fdiv+0xde>
 8000b52:	2bff      	cmp	r3, #255	; 0xff
 8000b54:	d045      	beq.n	8000be2 <__aeabi_fdiv+0xd2>
 8000b56:	4642      	mov	r2, r8
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	00d2      	lsls	r2, r2, #3
 8000b5c:	04c9      	lsls	r1, r1, #19
 8000b5e:	4311      	orrs	r1, r2
 8000b60:	4688      	mov	r8, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	3b7f      	subs	r3, #127	; 0x7f
 8000b66:	0031      	movs	r1, r6
 8000b68:	1aff      	subs	r7, r7, r3
 8000b6a:	464b      	mov	r3, r9
 8000b6c:	4061      	eors	r1, r4
 8000b6e:	b2c9      	uxtb	r1, r1
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d900      	bls.n	8000b76 <__aeabi_fdiv+0x66>
 8000b74:	e0b8      	b.n	8000ce8 <__aeabi_fdiv+0x1d8>
 8000b76:	4870      	ldr	r0, [pc, #448]	; (8000d38 <__aeabi_fdiv+0x228>)
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	58c3      	ldr	r3, [r0, r3]
 8000b7c:	469f      	mov	pc, r3
 8000b7e:	2300      	movs	r3, #0
 8000b80:	4698      	mov	r8, r3
 8000b82:	0026      	movs	r6, r4
 8000b84:	4645      	mov	r5, r8
 8000b86:	4692      	mov	sl, r2
 8000b88:	4653      	mov	r3, sl
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_fdiv+0x80>
 8000b8e:	e08d      	b.n	8000cac <__aeabi_fdiv+0x19c>
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d100      	bne.n	8000b96 <__aeabi_fdiv+0x86>
 8000b94:	e0a1      	b.n	8000cda <__aeabi_fdiv+0x1ca>
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d018      	beq.n	8000bcc <__aeabi_fdiv+0xbc>
 8000b9a:	003b      	movs	r3, r7
 8000b9c:	337f      	adds	r3, #127	; 0x7f
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	dd6d      	ble.n	8000c7e <__aeabi_fdiv+0x16e>
 8000ba2:	076a      	lsls	r2, r5, #29
 8000ba4:	d004      	beq.n	8000bb0 <__aeabi_fdiv+0xa0>
 8000ba6:	220f      	movs	r2, #15
 8000ba8:	402a      	ands	r2, r5
 8000baa:	2a04      	cmp	r2, #4
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_fdiv+0xa0>
 8000bae:	3504      	adds	r5, #4
 8000bb0:	012a      	lsls	r2, r5, #4
 8000bb2:	d503      	bpl.n	8000bbc <__aeabi_fdiv+0xac>
 8000bb4:	4b61      	ldr	r3, [pc, #388]	; (8000d3c <__aeabi_fdiv+0x22c>)
 8000bb6:	401d      	ands	r5, r3
 8000bb8:	003b      	movs	r3, r7
 8000bba:	3380      	adds	r3, #128	; 0x80
 8000bbc:	2bfe      	cmp	r3, #254	; 0xfe
 8000bbe:	dd00      	ble.n	8000bc2 <__aeabi_fdiv+0xb2>
 8000bc0:	e074      	b.n	8000cac <__aeabi_fdiv+0x19c>
 8000bc2:	01aa      	lsls	r2, r5, #6
 8000bc4:	0a52      	lsrs	r2, r2, #9
 8000bc6:	b2d8      	uxtb	r0, r3
 8000bc8:	e002      	b.n	8000bd0 <__aeabi_fdiv+0xc0>
 8000bca:	000e      	movs	r6, r1
 8000bcc:	2000      	movs	r0, #0
 8000bce:	2200      	movs	r2, #0
 8000bd0:	05c0      	lsls	r0, r0, #23
 8000bd2:	07f6      	lsls	r6, r6, #31
 8000bd4:	4310      	orrs	r0, r2
 8000bd6:	4330      	orrs	r0, r6
 8000bd8:	bce0      	pop	{r5, r6, r7}
 8000bda:	46ba      	mov	sl, r7
 8000bdc:	46b1      	mov	r9, r6
 8000bde:	46a8      	mov	r8, r5
 8000be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be2:	4643      	mov	r3, r8
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d13f      	bne.n	8000c68 <__aeabi_fdiv+0x158>
 8000be8:	2202      	movs	r2, #2
 8000bea:	3fff      	subs	r7, #255	; 0xff
 8000bec:	e003      	b.n	8000bf6 <__aeabi_fdiv+0xe6>
 8000bee:	4643      	mov	r3, r8
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d12d      	bne.n	8000c50 <__aeabi_fdiv+0x140>
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	0031      	movs	r1, r6
 8000bf8:	464b      	mov	r3, r9
 8000bfa:	4061      	eors	r1, r4
 8000bfc:	b2c9      	uxtb	r1, r1
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d838      	bhi.n	8000c76 <__aeabi_fdiv+0x166>
 8000c04:	484e      	ldr	r0, [pc, #312]	; (8000d40 <__aeabi_fdiv+0x230>)
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	58c3      	ldr	r3, [r0, r3]
 8000c0a:	469f      	mov	pc, r3
 8000c0c:	2d00      	cmp	r5, #0
 8000c0e:	d113      	bne.n	8000c38 <__aeabi_fdiv+0x128>
 8000c10:	2304      	movs	r3, #4
 8000c12:	4699      	mov	r9, r3
 8000c14:	3b03      	subs	r3, #3
 8000c16:	2700      	movs	r7, #0
 8000c18:	469a      	mov	sl, r3
 8000c1a:	e792      	b.n	8000b42 <__aeabi_fdiv+0x32>
 8000c1c:	2d00      	cmp	r5, #0
 8000c1e:	d105      	bne.n	8000c2c <__aeabi_fdiv+0x11c>
 8000c20:	2308      	movs	r3, #8
 8000c22:	4699      	mov	r9, r3
 8000c24:	3b06      	subs	r3, #6
 8000c26:	27ff      	movs	r7, #255	; 0xff
 8000c28:	469a      	mov	sl, r3
 8000c2a:	e78a      	b.n	8000b42 <__aeabi_fdiv+0x32>
 8000c2c:	230c      	movs	r3, #12
 8000c2e:	4699      	mov	r9, r3
 8000c30:	3b09      	subs	r3, #9
 8000c32:	27ff      	movs	r7, #255	; 0xff
 8000c34:	469a      	mov	sl, r3
 8000c36:	e784      	b.n	8000b42 <__aeabi_fdiv+0x32>
 8000c38:	0028      	movs	r0, r5
 8000c3a:	f002 fb41 	bl	80032c0 <__clzsi2>
 8000c3e:	2776      	movs	r7, #118	; 0x76
 8000c40:	1f43      	subs	r3, r0, #5
 8000c42:	409d      	lsls	r5, r3
 8000c44:	2300      	movs	r3, #0
 8000c46:	427f      	negs	r7, r7
 8000c48:	4699      	mov	r9, r3
 8000c4a:	469a      	mov	sl, r3
 8000c4c:	1a3f      	subs	r7, r7, r0
 8000c4e:	e778      	b.n	8000b42 <__aeabi_fdiv+0x32>
 8000c50:	4640      	mov	r0, r8
 8000c52:	f002 fb35 	bl	80032c0 <__clzsi2>
 8000c56:	4642      	mov	r2, r8
 8000c58:	1f43      	subs	r3, r0, #5
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	2376      	movs	r3, #118	; 0x76
 8000c5e:	425b      	negs	r3, r3
 8000c60:	4690      	mov	r8, r2
 8000c62:	1a1b      	subs	r3, r3, r0
 8000c64:	2200      	movs	r2, #0
 8000c66:	e77e      	b.n	8000b66 <__aeabi_fdiv+0x56>
 8000c68:	2303      	movs	r3, #3
 8000c6a:	464a      	mov	r2, r9
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	4691      	mov	r9, r2
 8000c70:	33fc      	adds	r3, #252	; 0xfc
 8000c72:	2203      	movs	r2, #3
 8000c74:	e777      	b.n	8000b66 <__aeabi_fdiv+0x56>
 8000c76:	000e      	movs	r6, r1
 8000c78:	20ff      	movs	r0, #255	; 0xff
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	e7a8      	b.n	8000bd0 <__aeabi_fdiv+0xc0>
 8000c7e:	2201      	movs	r2, #1
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b1b      	cmp	r3, #27
 8000c84:	dca2      	bgt.n	8000bcc <__aeabi_fdiv+0xbc>
 8000c86:	379e      	adds	r7, #158	; 0x9e
 8000c88:	002a      	movs	r2, r5
 8000c8a:	40bd      	lsls	r5, r7
 8000c8c:	40da      	lsrs	r2, r3
 8000c8e:	1e6b      	subs	r3, r5, #1
 8000c90:	419d      	sbcs	r5, r3
 8000c92:	4315      	orrs	r5, r2
 8000c94:	076a      	lsls	r2, r5, #29
 8000c96:	d004      	beq.n	8000ca2 <__aeabi_fdiv+0x192>
 8000c98:	220f      	movs	r2, #15
 8000c9a:	402a      	ands	r2, r5
 8000c9c:	2a04      	cmp	r2, #4
 8000c9e:	d000      	beq.n	8000ca2 <__aeabi_fdiv+0x192>
 8000ca0:	3504      	adds	r5, #4
 8000ca2:	016a      	lsls	r2, r5, #5
 8000ca4:	d544      	bpl.n	8000d30 <__aeabi_fdiv+0x220>
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e791      	b.n	8000bd0 <__aeabi_fdiv+0xc0>
 8000cac:	20ff      	movs	r0, #255	; 0xff
 8000cae:	2200      	movs	r2, #0
 8000cb0:	e78e      	b.n	8000bd0 <__aeabi_fdiv+0xc0>
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	20ff      	movs	r0, #255	; 0xff
 8000cb8:	03d2      	lsls	r2, r2, #15
 8000cba:	e789      	b.n	8000bd0 <__aeabi_fdiv+0xc0>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4698      	mov	r8, r3
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	03d2      	lsls	r2, r2, #15
 8000cc4:	4215      	tst	r5, r2
 8000cc6:	d008      	beq.n	8000cda <__aeabi_fdiv+0x1ca>
 8000cc8:	4643      	mov	r3, r8
 8000cca:	4213      	tst	r3, r2
 8000ccc:	d105      	bne.n	8000cda <__aeabi_fdiv+0x1ca>
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	0252      	lsls	r2, r2, #9
 8000cd2:	0026      	movs	r6, r4
 8000cd4:	20ff      	movs	r0, #255	; 0xff
 8000cd6:	0a52      	lsrs	r2, r2, #9
 8000cd8:	e77a      	b.n	8000bd0 <__aeabi_fdiv+0xc0>
 8000cda:	2280      	movs	r2, #128	; 0x80
 8000cdc:	03d2      	lsls	r2, r2, #15
 8000cde:	432a      	orrs	r2, r5
 8000ce0:	0252      	lsls	r2, r2, #9
 8000ce2:	20ff      	movs	r0, #255	; 0xff
 8000ce4:	0a52      	lsrs	r2, r2, #9
 8000ce6:	e773      	b.n	8000bd0 <__aeabi_fdiv+0xc0>
 8000ce8:	4642      	mov	r2, r8
 8000cea:	016b      	lsls	r3, r5, #5
 8000cec:	0155      	lsls	r5, r2, #5
 8000cee:	42ab      	cmp	r3, r5
 8000cf0:	d21a      	bcs.n	8000d28 <__aeabi_fdiv+0x218>
 8000cf2:	201b      	movs	r0, #27
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	3f01      	subs	r7, #1
 8000cf8:	2601      	movs	r6, #1
 8000cfa:	001c      	movs	r4, r3
 8000cfc:	0052      	lsls	r2, r2, #1
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2c00      	cmp	r4, #0
 8000d02:	db01      	blt.n	8000d08 <__aeabi_fdiv+0x1f8>
 8000d04:	429d      	cmp	r5, r3
 8000d06:	d801      	bhi.n	8000d0c <__aeabi_fdiv+0x1fc>
 8000d08:	1b5b      	subs	r3, r3, r5
 8000d0a:	4332      	orrs	r2, r6
 8000d0c:	3801      	subs	r0, #1
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	d1f3      	bne.n	8000cfa <__aeabi_fdiv+0x1ea>
 8000d12:	1e58      	subs	r0, r3, #1
 8000d14:	4183      	sbcs	r3, r0
 8000d16:	4313      	orrs	r3, r2
 8000d18:	001d      	movs	r5, r3
 8000d1a:	003b      	movs	r3, r7
 8000d1c:	337f      	adds	r3, #127	; 0x7f
 8000d1e:	000e      	movs	r6, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	dd00      	ble.n	8000d26 <__aeabi_fdiv+0x216>
 8000d24:	e73d      	b.n	8000ba2 <__aeabi_fdiv+0x92>
 8000d26:	e7aa      	b.n	8000c7e <__aeabi_fdiv+0x16e>
 8000d28:	201a      	movs	r0, #26
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	1b5b      	subs	r3, r3, r5
 8000d2e:	e7e3      	b.n	8000cf8 <__aeabi_fdiv+0x1e8>
 8000d30:	01aa      	lsls	r2, r5, #6
 8000d32:	2000      	movs	r0, #0
 8000d34:	0a52      	lsrs	r2, r2, #9
 8000d36:	e74b      	b.n	8000bd0 <__aeabi_fdiv+0xc0>
 8000d38:	080103ec 	.word	0x080103ec
 8000d3c:	f7ffffff 	.word	0xf7ffffff
 8000d40:	0801042c 	.word	0x0801042c

08000d44 <__aeabi_fmul>:
 8000d44:	0243      	lsls	r3, r0, #9
 8000d46:	0a5b      	lsrs	r3, r3, #9
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	464f      	mov	r7, r9
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	4699      	mov	r9, r3
 8000d50:	46d6      	mov	lr, sl
 8000d52:	0fc3      	lsrs	r3, r0, #31
 8000d54:	0045      	lsls	r5, r0, #1
 8000d56:	4698      	mov	r8, r3
 8000d58:	b5c0      	push	{r6, r7, lr}
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	1c0f      	adds	r7, r1, #0
 8000d5e:	0e2d      	lsrs	r5, r5, #24
 8000d60:	d100      	bne.n	8000d64 <__aeabi_fmul+0x20>
 8000d62:	e0cb      	b.n	8000efc <__aeabi_fmul+0x1b8>
 8000d64:	2dff      	cmp	r5, #255	; 0xff
 8000d66:	d100      	bne.n	8000d6a <__aeabi_fmul+0x26>
 8000d68:	e0cf      	b.n	8000f0a <__aeabi_fmul+0x1c6>
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	04d2      	lsls	r2, r2, #19
 8000d70:	431a      	orrs	r2, r3
 8000d72:	2300      	movs	r3, #0
 8000d74:	4691      	mov	r9, r2
 8000d76:	2600      	movs	r6, #0
 8000d78:	469a      	mov	sl, r3
 8000d7a:	3d7f      	subs	r5, #127	; 0x7f
 8000d7c:	027c      	lsls	r4, r7, #9
 8000d7e:	007b      	lsls	r3, r7, #1
 8000d80:	0a64      	lsrs	r4, r4, #9
 8000d82:	0e1b      	lsrs	r3, r3, #24
 8000d84:	0fff      	lsrs	r7, r7, #31
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_fmul+0x48>
 8000d8a:	e0a9      	b.n	8000ee0 <__aeabi_fmul+0x19c>
 8000d8c:	2bff      	cmp	r3, #255	; 0xff
 8000d8e:	d011      	beq.n	8000db4 <__aeabi_fmul+0x70>
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	00e4      	lsls	r4, r4, #3
 8000d94:	04d2      	lsls	r2, r2, #19
 8000d96:	4314      	orrs	r4, r2
 8000d98:	4642      	mov	r2, r8
 8000d9a:	3b7f      	subs	r3, #127	; 0x7f
 8000d9c:	195b      	adds	r3, r3, r5
 8000d9e:	407a      	eors	r2, r7
 8000da0:	2000      	movs	r0, #0
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	1c5d      	adds	r5, r3, #1
 8000da6:	2e0a      	cmp	r6, #10
 8000da8:	dd13      	ble.n	8000dd2 <__aeabi_fmul+0x8e>
 8000daa:	003a      	movs	r2, r7
 8000dac:	2e0b      	cmp	r6, #11
 8000dae:	d047      	beq.n	8000e40 <__aeabi_fmul+0xfc>
 8000db0:	4647      	mov	r7, r8
 8000db2:	e03f      	b.n	8000e34 <__aeabi_fmul+0xf0>
 8000db4:	002b      	movs	r3, r5
 8000db6:	33ff      	adds	r3, #255	; 0xff
 8000db8:	2c00      	cmp	r4, #0
 8000dba:	d11e      	bne.n	8000dfa <__aeabi_fmul+0xb6>
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	4316      	orrs	r6, r2
 8000dc0:	4642      	mov	r2, r8
 8000dc2:	3501      	adds	r5, #1
 8000dc4:	407a      	eors	r2, r7
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	35ff      	adds	r5, #255	; 0xff
 8000dca:	2e0a      	cmp	r6, #10
 8000dcc:	dd00      	ble.n	8000dd0 <__aeabi_fmul+0x8c>
 8000dce:	e0e4      	b.n	8000f9a <__aeabi_fmul+0x256>
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	2e02      	cmp	r6, #2
 8000dd4:	dc1c      	bgt.n	8000e10 <__aeabi_fmul+0xcc>
 8000dd6:	3e01      	subs	r6, #1
 8000dd8:	2e01      	cmp	r6, #1
 8000dda:	d842      	bhi.n	8000e62 <__aeabi_fmul+0x11e>
 8000ddc:	2802      	cmp	r0, #2
 8000dde:	d03d      	beq.n	8000e5c <__aeabi_fmul+0x118>
 8000de0:	2801      	cmp	r0, #1
 8000de2:	d166      	bne.n	8000eb2 <__aeabi_fmul+0x16e>
 8000de4:	2000      	movs	r0, #0
 8000de6:	2100      	movs	r1, #0
 8000de8:	05c0      	lsls	r0, r0, #23
 8000dea:	4308      	orrs	r0, r1
 8000dec:	07d2      	lsls	r2, r2, #31
 8000dee:	4310      	orrs	r0, r2
 8000df0:	bce0      	pop	{r5, r6, r7}
 8000df2:	46ba      	mov	sl, r7
 8000df4:	46b1      	mov	r9, r6
 8000df6:	46a8      	mov	r8, r5
 8000df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	4316      	orrs	r6, r2
 8000dfe:	4642      	mov	r2, r8
 8000e00:	3501      	adds	r5, #1
 8000e02:	407a      	eors	r2, r7
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	35ff      	adds	r5, #255	; 0xff
 8000e08:	2e0a      	cmp	r6, #10
 8000e0a:	dd00      	ble.n	8000e0e <__aeabi_fmul+0xca>
 8000e0c:	e0e4      	b.n	8000fd8 <__aeabi_fmul+0x294>
 8000e0e:	2003      	movs	r0, #3
 8000e10:	2101      	movs	r1, #1
 8000e12:	40b1      	lsls	r1, r6
 8000e14:	26a6      	movs	r6, #166	; 0xa6
 8000e16:	00f6      	lsls	r6, r6, #3
 8000e18:	4231      	tst	r1, r6
 8000e1a:	d10a      	bne.n	8000e32 <__aeabi_fmul+0xee>
 8000e1c:	2690      	movs	r6, #144	; 0x90
 8000e1e:	00b6      	lsls	r6, r6, #2
 8000e20:	4231      	tst	r1, r6
 8000e22:	d116      	bne.n	8000e52 <__aeabi_fmul+0x10e>
 8000e24:	3eb9      	subs	r6, #185	; 0xb9
 8000e26:	3eff      	subs	r6, #255	; 0xff
 8000e28:	420e      	tst	r6, r1
 8000e2a:	d01a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e2c:	46a1      	mov	r9, r4
 8000e2e:	4682      	mov	sl, r0
 8000e30:	e000      	b.n	8000e34 <__aeabi_fmul+0xf0>
 8000e32:	0017      	movs	r7, r2
 8000e34:	4653      	mov	r3, sl
 8000e36:	003a      	movs	r2, r7
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d00f      	beq.n	8000e5c <__aeabi_fmul+0x118>
 8000e3c:	464c      	mov	r4, r9
 8000e3e:	4650      	mov	r0, sl
 8000e40:	2803      	cmp	r0, #3
 8000e42:	d1cd      	bne.n	8000de0 <__aeabi_fmul+0x9c>
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	03c9      	lsls	r1, r1, #15
 8000e48:	4321      	orrs	r1, r4
 8000e4a:	0249      	lsls	r1, r1, #9
 8000e4c:	20ff      	movs	r0, #255	; 0xff
 8000e4e:	0a49      	lsrs	r1, r1, #9
 8000e50:	e7ca      	b.n	8000de8 <__aeabi_fmul+0xa4>
 8000e52:	2180      	movs	r1, #128	; 0x80
 8000e54:	2200      	movs	r2, #0
 8000e56:	20ff      	movs	r0, #255	; 0xff
 8000e58:	03c9      	lsls	r1, r1, #15
 8000e5a:	e7c5      	b.n	8000de8 <__aeabi_fmul+0xa4>
 8000e5c:	20ff      	movs	r0, #255	; 0xff
 8000e5e:	2100      	movs	r1, #0
 8000e60:	e7c2      	b.n	8000de8 <__aeabi_fmul+0xa4>
 8000e62:	0c20      	lsrs	r0, r4, #16
 8000e64:	4649      	mov	r1, r9
 8000e66:	0424      	lsls	r4, r4, #16
 8000e68:	0c24      	lsrs	r4, r4, #16
 8000e6a:	0027      	movs	r7, r4
 8000e6c:	0c0e      	lsrs	r6, r1, #16
 8000e6e:	0409      	lsls	r1, r1, #16
 8000e70:	0c09      	lsrs	r1, r1, #16
 8000e72:	4374      	muls	r4, r6
 8000e74:	434f      	muls	r7, r1
 8000e76:	4346      	muls	r6, r0
 8000e78:	4348      	muls	r0, r1
 8000e7a:	0c39      	lsrs	r1, r7, #16
 8000e7c:	1900      	adds	r0, r0, r4
 8000e7e:	1809      	adds	r1, r1, r0
 8000e80:	428c      	cmp	r4, r1
 8000e82:	d903      	bls.n	8000e8c <__aeabi_fmul+0x148>
 8000e84:	2080      	movs	r0, #128	; 0x80
 8000e86:	0240      	lsls	r0, r0, #9
 8000e88:	4684      	mov	ip, r0
 8000e8a:	4466      	add	r6, ip
 8000e8c:	043f      	lsls	r7, r7, #16
 8000e8e:	0408      	lsls	r0, r1, #16
 8000e90:	0c3f      	lsrs	r7, r7, #16
 8000e92:	19c0      	adds	r0, r0, r7
 8000e94:	0184      	lsls	r4, r0, #6
 8000e96:	1e67      	subs	r7, r4, #1
 8000e98:	41bc      	sbcs	r4, r7
 8000e9a:	0c09      	lsrs	r1, r1, #16
 8000e9c:	0e80      	lsrs	r0, r0, #26
 8000e9e:	1989      	adds	r1, r1, r6
 8000ea0:	4304      	orrs	r4, r0
 8000ea2:	0189      	lsls	r1, r1, #6
 8000ea4:	430c      	orrs	r4, r1
 8000ea6:	0109      	lsls	r1, r1, #4
 8000ea8:	d571      	bpl.n	8000f8e <__aeabi_fmul+0x24a>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	0861      	lsrs	r1, r4, #1
 8000eae:	401c      	ands	r4, r3
 8000eb0:	430c      	orrs	r4, r1
 8000eb2:	002b      	movs	r3, r5
 8000eb4:	337f      	adds	r3, #127	; 0x7f
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	dd51      	ble.n	8000f5e <__aeabi_fmul+0x21a>
 8000eba:	0761      	lsls	r1, r4, #29
 8000ebc:	d004      	beq.n	8000ec8 <__aeabi_fmul+0x184>
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	4021      	ands	r1, r4
 8000ec2:	2904      	cmp	r1, #4
 8000ec4:	d000      	beq.n	8000ec8 <__aeabi_fmul+0x184>
 8000ec6:	3404      	adds	r4, #4
 8000ec8:	0121      	lsls	r1, r4, #4
 8000eca:	d503      	bpl.n	8000ed4 <__aeabi_fmul+0x190>
 8000ecc:	4b43      	ldr	r3, [pc, #268]	; (8000fdc <__aeabi_fmul+0x298>)
 8000ece:	401c      	ands	r4, r3
 8000ed0:	002b      	movs	r3, r5
 8000ed2:	3380      	adds	r3, #128	; 0x80
 8000ed4:	2bfe      	cmp	r3, #254	; 0xfe
 8000ed6:	dcc1      	bgt.n	8000e5c <__aeabi_fmul+0x118>
 8000ed8:	01a1      	lsls	r1, r4, #6
 8000eda:	0a49      	lsrs	r1, r1, #9
 8000edc:	b2d8      	uxtb	r0, r3
 8000ede:	e783      	b.n	8000de8 <__aeabi_fmul+0xa4>
 8000ee0:	2c00      	cmp	r4, #0
 8000ee2:	d12c      	bne.n	8000f3e <__aeabi_fmul+0x1fa>
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	4642      	mov	r2, r8
 8000ee8:	431e      	orrs	r6, r3
 8000eea:	002b      	movs	r3, r5
 8000eec:	407a      	eors	r2, r7
 8000eee:	2001      	movs	r0, #1
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	1c5d      	adds	r5, r3, #1
 8000ef4:	2e0a      	cmp	r6, #10
 8000ef6:	dd00      	ble.n	8000efa <__aeabi_fmul+0x1b6>
 8000ef8:	e757      	b.n	8000daa <__aeabi_fmul+0x66>
 8000efa:	e76a      	b.n	8000dd2 <__aeabi_fmul+0x8e>
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d110      	bne.n	8000f22 <__aeabi_fmul+0x1de>
 8000f00:	2301      	movs	r3, #1
 8000f02:	2604      	movs	r6, #4
 8000f04:	2500      	movs	r5, #0
 8000f06:	469a      	mov	sl, r3
 8000f08:	e738      	b.n	8000d7c <__aeabi_fmul+0x38>
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d104      	bne.n	8000f18 <__aeabi_fmul+0x1d4>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	2608      	movs	r6, #8
 8000f12:	25ff      	movs	r5, #255	; 0xff
 8000f14:	469a      	mov	sl, r3
 8000f16:	e731      	b.n	8000d7c <__aeabi_fmul+0x38>
 8000f18:	2303      	movs	r3, #3
 8000f1a:	260c      	movs	r6, #12
 8000f1c:	25ff      	movs	r5, #255	; 0xff
 8000f1e:	469a      	mov	sl, r3
 8000f20:	e72c      	b.n	8000d7c <__aeabi_fmul+0x38>
 8000f22:	4648      	mov	r0, r9
 8000f24:	f002 f9cc 	bl	80032c0 <__clzsi2>
 8000f28:	464a      	mov	r2, r9
 8000f2a:	1f43      	subs	r3, r0, #5
 8000f2c:	2576      	movs	r5, #118	; 0x76
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	2300      	movs	r3, #0
 8000f32:	426d      	negs	r5, r5
 8000f34:	4691      	mov	r9, r2
 8000f36:	2600      	movs	r6, #0
 8000f38:	469a      	mov	sl, r3
 8000f3a:	1a2d      	subs	r5, r5, r0
 8000f3c:	e71e      	b.n	8000d7c <__aeabi_fmul+0x38>
 8000f3e:	0020      	movs	r0, r4
 8000f40:	f002 f9be 	bl	80032c0 <__clzsi2>
 8000f44:	4642      	mov	r2, r8
 8000f46:	1f43      	subs	r3, r0, #5
 8000f48:	409c      	lsls	r4, r3
 8000f4a:	1a2b      	subs	r3, r5, r0
 8000f4c:	3b76      	subs	r3, #118	; 0x76
 8000f4e:	407a      	eors	r2, r7
 8000f50:	2000      	movs	r0, #0
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	1c5d      	adds	r5, r3, #1
 8000f56:	2e0a      	cmp	r6, #10
 8000f58:	dd00      	ble.n	8000f5c <__aeabi_fmul+0x218>
 8000f5a:	e726      	b.n	8000daa <__aeabi_fmul+0x66>
 8000f5c:	e739      	b.n	8000dd2 <__aeabi_fmul+0x8e>
 8000f5e:	2101      	movs	r1, #1
 8000f60:	1acb      	subs	r3, r1, r3
 8000f62:	2b1b      	cmp	r3, #27
 8000f64:	dd00      	ble.n	8000f68 <__aeabi_fmul+0x224>
 8000f66:	e73d      	b.n	8000de4 <__aeabi_fmul+0xa0>
 8000f68:	359e      	adds	r5, #158	; 0x9e
 8000f6a:	0021      	movs	r1, r4
 8000f6c:	40ac      	lsls	r4, r5
 8000f6e:	40d9      	lsrs	r1, r3
 8000f70:	1e63      	subs	r3, r4, #1
 8000f72:	419c      	sbcs	r4, r3
 8000f74:	4321      	orrs	r1, r4
 8000f76:	074b      	lsls	r3, r1, #29
 8000f78:	d004      	beq.n	8000f84 <__aeabi_fmul+0x240>
 8000f7a:	230f      	movs	r3, #15
 8000f7c:	400b      	ands	r3, r1
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d000      	beq.n	8000f84 <__aeabi_fmul+0x240>
 8000f82:	3104      	adds	r1, #4
 8000f84:	014b      	lsls	r3, r1, #5
 8000f86:	d504      	bpl.n	8000f92 <__aeabi_fmul+0x24e>
 8000f88:	2001      	movs	r0, #1
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	e72c      	b.n	8000de8 <__aeabi_fmul+0xa4>
 8000f8e:	001d      	movs	r5, r3
 8000f90:	e78f      	b.n	8000eb2 <__aeabi_fmul+0x16e>
 8000f92:	0189      	lsls	r1, r1, #6
 8000f94:	2000      	movs	r0, #0
 8000f96:	0a49      	lsrs	r1, r1, #9
 8000f98:	e726      	b.n	8000de8 <__aeabi_fmul+0xa4>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	2e0f      	cmp	r6, #15
 8000f9e:	d10c      	bne.n	8000fba <__aeabi_fmul+0x276>
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	464b      	mov	r3, r9
 8000fa4:	03c9      	lsls	r1, r1, #15
 8000fa6:	420b      	tst	r3, r1
 8000fa8:	d00d      	beq.n	8000fc6 <__aeabi_fmul+0x282>
 8000faa:	420c      	tst	r4, r1
 8000fac:	d10b      	bne.n	8000fc6 <__aeabi_fmul+0x282>
 8000fae:	4321      	orrs	r1, r4
 8000fb0:	0249      	lsls	r1, r1, #9
 8000fb2:	003a      	movs	r2, r7
 8000fb4:	20ff      	movs	r0, #255	; 0xff
 8000fb6:	0a49      	lsrs	r1, r1, #9
 8000fb8:	e716      	b.n	8000de8 <__aeabi_fmul+0xa4>
 8000fba:	2e0b      	cmp	r6, #11
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_fmul+0x27c>
 8000fbe:	e6f7      	b.n	8000db0 <__aeabi_fmul+0x6c>
 8000fc0:	46a1      	mov	r9, r4
 8000fc2:	469a      	mov	sl, r3
 8000fc4:	e736      	b.n	8000e34 <__aeabi_fmul+0xf0>
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	464b      	mov	r3, r9
 8000fca:	03c9      	lsls	r1, r1, #15
 8000fcc:	4319      	orrs	r1, r3
 8000fce:	0249      	lsls	r1, r1, #9
 8000fd0:	4642      	mov	r2, r8
 8000fd2:	20ff      	movs	r0, #255	; 0xff
 8000fd4:	0a49      	lsrs	r1, r1, #9
 8000fd6:	e707      	b.n	8000de8 <__aeabi_fmul+0xa4>
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e7df      	b.n	8000f9c <__aeabi_fmul+0x258>
 8000fdc:	f7ffffff 	.word	0xf7ffffff

08000fe0 <__aeabi_fsub>:
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	46c6      	mov	lr, r8
 8000fe4:	0243      	lsls	r3, r0, #9
 8000fe6:	0a5b      	lsrs	r3, r3, #9
 8000fe8:	0045      	lsls	r5, r0, #1
 8000fea:	00da      	lsls	r2, r3, #3
 8000fec:	0fc4      	lsrs	r4, r0, #31
 8000fee:	0248      	lsls	r0, r1, #9
 8000ff0:	004f      	lsls	r7, r1, #1
 8000ff2:	4694      	mov	ip, r2
 8000ff4:	0a42      	lsrs	r2, r0, #9
 8000ff6:	001e      	movs	r6, r3
 8000ff8:	4690      	mov	r8, r2
 8000ffa:	b500      	push	{lr}
 8000ffc:	0e2d      	lsrs	r5, r5, #24
 8000ffe:	0e3f      	lsrs	r7, r7, #24
 8001000:	0fc9      	lsrs	r1, r1, #31
 8001002:	0980      	lsrs	r0, r0, #6
 8001004:	2fff      	cmp	r7, #255	; 0xff
 8001006:	d059      	beq.n	80010bc <__aeabi_fsub+0xdc>
 8001008:	2201      	movs	r2, #1
 800100a:	4051      	eors	r1, r2
 800100c:	428c      	cmp	r4, r1
 800100e:	d039      	beq.n	8001084 <__aeabi_fsub+0xa4>
 8001010:	1bea      	subs	r2, r5, r7
 8001012:	2a00      	cmp	r2, #0
 8001014:	dd58      	ble.n	80010c8 <__aeabi_fsub+0xe8>
 8001016:	2f00      	cmp	r7, #0
 8001018:	d068      	beq.n	80010ec <__aeabi_fsub+0x10c>
 800101a:	2dff      	cmp	r5, #255	; 0xff
 800101c:	d100      	bne.n	8001020 <__aeabi_fsub+0x40>
 800101e:	e0d1      	b.n	80011c4 <__aeabi_fsub+0x1e4>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	04db      	lsls	r3, r3, #19
 8001024:	4318      	orrs	r0, r3
 8001026:	2a1b      	cmp	r2, #27
 8001028:	dc00      	bgt.n	800102c <__aeabi_fsub+0x4c>
 800102a:	e0e3      	b.n	80011f4 <__aeabi_fsub+0x214>
 800102c:	2301      	movs	r3, #1
 800102e:	4662      	mov	r2, ip
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	015a      	lsls	r2, r3, #5
 8001034:	d400      	bmi.n	8001038 <__aeabi_fsub+0x58>
 8001036:	e0ac      	b.n	8001192 <__aeabi_fsub+0x1b2>
 8001038:	019b      	lsls	r3, r3, #6
 800103a:	099e      	lsrs	r6, r3, #6
 800103c:	0030      	movs	r0, r6
 800103e:	f002 f93f 	bl	80032c0 <__clzsi2>
 8001042:	0033      	movs	r3, r6
 8001044:	3805      	subs	r0, #5
 8001046:	4083      	lsls	r3, r0
 8001048:	4285      	cmp	r5, r0
 800104a:	dc00      	bgt.n	800104e <__aeabi_fsub+0x6e>
 800104c:	e0c6      	b.n	80011dc <__aeabi_fsub+0x1fc>
 800104e:	4ab2      	ldr	r2, [pc, #712]	; (8001318 <__aeabi_fsub+0x338>)
 8001050:	1a2d      	subs	r5, r5, r0
 8001052:	4013      	ands	r3, r2
 8001054:	075a      	lsls	r2, r3, #29
 8001056:	d004      	beq.n	8001062 <__aeabi_fsub+0x82>
 8001058:	220f      	movs	r2, #15
 800105a:	401a      	ands	r2, r3
 800105c:	2a04      	cmp	r2, #4
 800105e:	d000      	beq.n	8001062 <__aeabi_fsub+0x82>
 8001060:	3304      	adds	r3, #4
 8001062:	015a      	lsls	r2, r3, #5
 8001064:	d400      	bmi.n	8001068 <__aeabi_fsub+0x88>
 8001066:	e097      	b.n	8001198 <__aeabi_fsub+0x1b8>
 8001068:	1c6a      	adds	r2, r5, #1
 800106a:	2dfe      	cmp	r5, #254	; 0xfe
 800106c:	d100      	bne.n	8001070 <__aeabi_fsub+0x90>
 800106e:	e084      	b.n	800117a <__aeabi_fsub+0x19a>
 8001070:	019b      	lsls	r3, r3, #6
 8001072:	0a5e      	lsrs	r6, r3, #9
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	05d0      	lsls	r0, r2, #23
 8001078:	4330      	orrs	r0, r6
 800107a:	07e4      	lsls	r4, r4, #31
 800107c:	4320      	orrs	r0, r4
 800107e:	bc80      	pop	{r7}
 8001080:	46b8      	mov	r8, r7
 8001082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001084:	1bea      	subs	r2, r5, r7
 8001086:	2a00      	cmp	r2, #0
 8001088:	dd41      	ble.n	800110e <__aeabi_fsub+0x12e>
 800108a:	2f00      	cmp	r7, #0
 800108c:	d06b      	beq.n	8001166 <__aeabi_fsub+0x186>
 800108e:	2dff      	cmp	r5, #255	; 0xff
 8001090:	d100      	bne.n	8001094 <__aeabi_fsub+0xb4>
 8001092:	e097      	b.n	80011c4 <__aeabi_fsub+0x1e4>
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	04db      	lsls	r3, r3, #19
 8001098:	4318      	orrs	r0, r3
 800109a:	2a1b      	cmp	r2, #27
 800109c:	dc00      	bgt.n	80010a0 <__aeabi_fsub+0xc0>
 800109e:	e0cc      	b.n	800123a <__aeabi_fsub+0x25a>
 80010a0:	2301      	movs	r3, #1
 80010a2:	4463      	add	r3, ip
 80010a4:	015a      	lsls	r2, r3, #5
 80010a6:	d574      	bpl.n	8001192 <__aeabi_fsub+0x1b2>
 80010a8:	3501      	adds	r5, #1
 80010aa:	2dff      	cmp	r5, #255	; 0xff
 80010ac:	d065      	beq.n	800117a <__aeabi_fsub+0x19a>
 80010ae:	2201      	movs	r2, #1
 80010b0:	499a      	ldr	r1, [pc, #616]	; (800131c <__aeabi_fsub+0x33c>)
 80010b2:	401a      	ands	r2, r3
 80010b4:	085b      	lsrs	r3, r3, #1
 80010b6:	400b      	ands	r3, r1
 80010b8:	4313      	orrs	r3, r2
 80010ba:	e7cb      	b.n	8001054 <__aeabi_fsub+0x74>
 80010bc:	2800      	cmp	r0, #0
 80010be:	d01f      	beq.n	8001100 <__aeabi_fsub+0x120>
 80010c0:	428c      	cmp	r4, r1
 80010c2:	d022      	beq.n	800110a <__aeabi_fsub+0x12a>
 80010c4:	002a      	movs	r2, r5
 80010c6:	3aff      	subs	r2, #255	; 0xff
 80010c8:	2a00      	cmp	r2, #0
 80010ca:	d035      	beq.n	8001138 <__aeabi_fsub+0x158>
 80010cc:	1b7a      	subs	r2, r7, r5
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	d000      	beq.n	80010d4 <__aeabi_fsub+0xf4>
 80010d2:	e099      	b.n	8001208 <__aeabi_fsub+0x228>
 80010d4:	4663      	mov	r3, ip
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d100      	bne.n	80010dc <__aeabi_fsub+0xfc>
 80010da:	e0dd      	b.n	8001298 <__aeabi_fsub+0x2b8>
 80010dc:	1e53      	subs	r3, r2, #1
 80010de:	2a01      	cmp	r2, #1
 80010e0:	d100      	bne.n	80010e4 <__aeabi_fsub+0x104>
 80010e2:	e105      	b.n	80012f0 <__aeabi_fsub+0x310>
 80010e4:	2aff      	cmp	r2, #255	; 0xff
 80010e6:	d06b      	beq.n	80011c0 <__aeabi_fsub+0x1e0>
 80010e8:	001a      	movs	r2, r3
 80010ea:	e094      	b.n	8001216 <__aeabi_fsub+0x236>
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d073      	beq.n	80011d8 <__aeabi_fsub+0x1f8>
 80010f0:	1e51      	subs	r1, r2, #1
 80010f2:	2a01      	cmp	r2, #1
 80010f4:	d100      	bne.n	80010f8 <__aeabi_fsub+0x118>
 80010f6:	e0df      	b.n	80012b8 <__aeabi_fsub+0x2d8>
 80010f8:	2aff      	cmp	r2, #255	; 0xff
 80010fa:	d063      	beq.n	80011c4 <__aeabi_fsub+0x1e4>
 80010fc:	000a      	movs	r2, r1
 80010fe:	e792      	b.n	8001026 <__aeabi_fsub+0x46>
 8001100:	2201      	movs	r2, #1
 8001102:	4051      	eors	r1, r2
 8001104:	42a1      	cmp	r1, r4
 8001106:	d000      	beq.n	800110a <__aeabi_fsub+0x12a>
 8001108:	e782      	b.n	8001010 <__aeabi_fsub+0x30>
 800110a:	002a      	movs	r2, r5
 800110c:	3aff      	subs	r2, #255	; 0xff
 800110e:	2a00      	cmp	r2, #0
 8001110:	d036      	beq.n	8001180 <__aeabi_fsub+0x1a0>
 8001112:	1b7a      	subs	r2, r7, r5
 8001114:	2d00      	cmp	r5, #0
 8001116:	d100      	bne.n	800111a <__aeabi_fsub+0x13a>
 8001118:	e0aa      	b.n	8001270 <__aeabi_fsub+0x290>
 800111a:	2fff      	cmp	r7, #255	; 0xff
 800111c:	d100      	bne.n	8001120 <__aeabi_fsub+0x140>
 800111e:	e0da      	b.n	80012d6 <__aeabi_fsub+0x2f6>
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	4661      	mov	r1, ip
 8001124:	04db      	lsls	r3, r3, #19
 8001126:	4319      	orrs	r1, r3
 8001128:	468c      	mov	ip, r1
 800112a:	2a1b      	cmp	r2, #27
 800112c:	dc00      	bgt.n	8001130 <__aeabi_fsub+0x150>
 800112e:	e0d4      	b.n	80012da <__aeabi_fsub+0x2fa>
 8001130:	2301      	movs	r3, #1
 8001132:	003d      	movs	r5, r7
 8001134:	181b      	adds	r3, r3, r0
 8001136:	e7b5      	b.n	80010a4 <__aeabi_fsub+0xc4>
 8001138:	27fe      	movs	r7, #254	; 0xfe
 800113a:	1c6a      	adds	r2, r5, #1
 800113c:	4217      	tst	r7, r2
 800113e:	d171      	bne.n	8001224 <__aeabi_fsub+0x244>
 8001140:	2d00      	cmp	r5, #0
 8001142:	d000      	beq.n	8001146 <__aeabi_fsub+0x166>
 8001144:	e09e      	b.n	8001284 <__aeabi_fsub+0x2a4>
 8001146:	4663      	mov	r3, ip
 8001148:	2b00      	cmp	r3, #0
 800114a:	d100      	bne.n	800114e <__aeabi_fsub+0x16e>
 800114c:	e0d5      	b.n	80012fa <__aeabi_fsub+0x31a>
 800114e:	2200      	movs	r2, #0
 8001150:	2800      	cmp	r0, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_fsub+0x176>
 8001154:	e78f      	b.n	8001076 <__aeabi_fsub+0x96>
 8001156:	1a1b      	subs	r3, r3, r0
 8001158:	015e      	lsls	r6, r3, #5
 800115a:	d400      	bmi.n	800115e <__aeabi_fsub+0x17e>
 800115c:	e0d6      	b.n	800130c <__aeabi_fsub+0x32c>
 800115e:	4663      	mov	r3, ip
 8001160:	000c      	movs	r4, r1
 8001162:	1ac3      	subs	r3, r0, r3
 8001164:	e776      	b.n	8001054 <__aeabi_fsub+0x74>
 8001166:	2800      	cmp	r0, #0
 8001168:	d036      	beq.n	80011d8 <__aeabi_fsub+0x1f8>
 800116a:	1e51      	subs	r1, r2, #1
 800116c:	2a01      	cmp	r2, #1
 800116e:	d100      	bne.n	8001172 <__aeabi_fsub+0x192>
 8001170:	e09a      	b.n	80012a8 <__aeabi_fsub+0x2c8>
 8001172:	2aff      	cmp	r2, #255	; 0xff
 8001174:	d026      	beq.n	80011c4 <__aeabi_fsub+0x1e4>
 8001176:	000a      	movs	r2, r1
 8001178:	e78f      	b.n	800109a <__aeabi_fsub+0xba>
 800117a:	22ff      	movs	r2, #255	; 0xff
 800117c:	2600      	movs	r6, #0
 800117e:	e77a      	b.n	8001076 <__aeabi_fsub+0x96>
 8001180:	27fe      	movs	r7, #254	; 0xfe
 8001182:	1c6a      	adds	r2, r5, #1
 8001184:	4217      	tst	r7, r2
 8001186:	d062      	beq.n	800124e <__aeabi_fsub+0x26e>
 8001188:	2aff      	cmp	r2, #255	; 0xff
 800118a:	d0f6      	beq.n	800117a <__aeabi_fsub+0x19a>
 800118c:	0015      	movs	r5, r2
 800118e:	4460      	add	r0, ip
 8001190:	0843      	lsrs	r3, r0, #1
 8001192:	075a      	lsls	r2, r3, #29
 8001194:	d000      	beq.n	8001198 <__aeabi_fsub+0x1b8>
 8001196:	e75f      	b.n	8001058 <__aeabi_fsub+0x78>
 8001198:	08db      	lsrs	r3, r3, #3
 800119a:	2dff      	cmp	r5, #255	; 0xff
 800119c:	d012      	beq.n	80011c4 <__aeabi_fsub+0x1e4>
 800119e:	025b      	lsls	r3, r3, #9
 80011a0:	0a5e      	lsrs	r6, r3, #9
 80011a2:	b2ea      	uxtb	r2, r5
 80011a4:	e767      	b.n	8001076 <__aeabi_fsub+0x96>
 80011a6:	4662      	mov	r2, ip
 80011a8:	2a00      	cmp	r2, #0
 80011aa:	d100      	bne.n	80011ae <__aeabi_fsub+0x1ce>
 80011ac:	e093      	b.n	80012d6 <__aeabi_fsub+0x2f6>
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d008      	beq.n	80011c4 <__aeabi_fsub+0x1e4>
 80011b2:	2280      	movs	r2, #128	; 0x80
 80011b4:	03d2      	lsls	r2, r2, #15
 80011b6:	4213      	tst	r3, r2
 80011b8:	d004      	beq.n	80011c4 <__aeabi_fsub+0x1e4>
 80011ba:	4640      	mov	r0, r8
 80011bc:	4210      	tst	r0, r2
 80011be:	d101      	bne.n	80011c4 <__aeabi_fsub+0x1e4>
 80011c0:	000c      	movs	r4, r1
 80011c2:	4643      	mov	r3, r8
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0d8      	beq.n	800117a <__aeabi_fsub+0x19a>
 80011c8:	2680      	movs	r6, #128	; 0x80
 80011ca:	03f6      	lsls	r6, r6, #15
 80011cc:	431e      	orrs	r6, r3
 80011ce:	0276      	lsls	r6, r6, #9
 80011d0:	22ff      	movs	r2, #255	; 0xff
 80011d2:	0a76      	lsrs	r6, r6, #9
 80011d4:	e74f      	b.n	8001076 <__aeabi_fsub+0x96>
 80011d6:	4643      	mov	r3, r8
 80011d8:	0015      	movs	r5, r2
 80011da:	e7de      	b.n	800119a <__aeabi_fsub+0x1ba>
 80011dc:	2220      	movs	r2, #32
 80011de:	1b40      	subs	r0, r0, r5
 80011e0:	3001      	adds	r0, #1
 80011e2:	1a12      	subs	r2, r2, r0
 80011e4:	0019      	movs	r1, r3
 80011e6:	4093      	lsls	r3, r2
 80011e8:	40c1      	lsrs	r1, r0
 80011ea:	1e5a      	subs	r2, r3, #1
 80011ec:	4193      	sbcs	r3, r2
 80011ee:	2500      	movs	r5, #0
 80011f0:	430b      	orrs	r3, r1
 80011f2:	e72f      	b.n	8001054 <__aeabi_fsub+0x74>
 80011f4:	2320      	movs	r3, #32
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	0001      	movs	r1, r0
 80011fa:	4098      	lsls	r0, r3
 80011fc:	0003      	movs	r3, r0
 80011fe:	40d1      	lsrs	r1, r2
 8001200:	1e5a      	subs	r2, r3, #1
 8001202:	4193      	sbcs	r3, r2
 8001204:	430b      	orrs	r3, r1
 8001206:	e712      	b.n	800102e <__aeabi_fsub+0x4e>
 8001208:	2fff      	cmp	r7, #255	; 0xff
 800120a:	d0d9      	beq.n	80011c0 <__aeabi_fsub+0x1e0>
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	4664      	mov	r4, ip
 8001210:	04db      	lsls	r3, r3, #19
 8001212:	431c      	orrs	r4, r3
 8001214:	46a4      	mov	ip, r4
 8001216:	2a1b      	cmp	r2, #27
 8001218:	dd52      	ble.n	80012c0 <__aeabi_fsub+0x2e0>
 800121a:	2301      	movs	r3, #1
 800121c:	000c      	movs	r4, r1
 800121e:	003d      	movs	r5, r7
 8001220:	1ac3      	subs	r3, r0, r3
 8001222:	e706      	b.n	8001032 <__aeabi_fsub+0x52>
 8001224:	4663      	mov	r3, ip
 8001226:	1a1e      	subs	r6, r3, r0
 8001228:	0173      	lsls	r3, r6, #5
 800122a:	d439      	bmi.n	80012a0 <__aeabi_fsub+0x2c0>
 800122c:	2e00      	cmp	r6, #0
 800122e:	d000      	beq.n	8001232 <__aeabi_fsub+0x252>
 8001230:	e704      	b.n	800103c <__aeabi_fsub+0x5c>
 8001232:	2400      	movs	r4, #0
 8001234:	2200      	movs	r2, #0
 8001236:	2600      	movs	r6, #0
 8001238:	e71d      	b.n	8001076 <__aeabi_fsub+0x96>
 800123a:	2320      	movs	r3, #32
 800123c:	1a9b      	subs	r3, r3, r2
 800123e:	0001      	movs	r1, r0
 8001240:	4098      	lsls	r0, r3
 8001242:	0003      	movs	r3, r0
 8001244:	40d1      	lsrs	r1, r2
 8001246:	1e5a      	subs	r2, r3, #1
 8001248:	4193      	sbcs	r3, r2
 800124a:	430b      	orrs	r3, r1
 800124c:	e729      	b.n	80010a2 <__aeabi_fsub+0xc2>
 800124e:	2d00      	cmp	r5, #0
 8001250:	d1a9      	bne.n	80011a6 <__aeabi_fsub+0x1c6>
 8001252:	4663      	mov	r3, ip
 8001254:	2b00      	cmp	r3, #0
 8001256:	d056      	beq.n	8001306 <__aeabi_fsub+0x326>
 8001258:	2200      	movs	r2, #0
 800125a:	2800      	cmp	r0, #0
 800125c:	d100      	bne.n	8001260 <__aeabi_fsub+0x280>
 800125e:	e70a      	b.n	8001076 <__aeabi_fsub+0x96>
 8001260:	0003      	movs	r3, r0
 8001262:	4463      	add	r3, ip
 8001264:	015a      	lsls	r2, r3, #5
 8001266:	d594      	bpl.n	8001192 <__aeabi_fsub+0x1b2>
 8001268:	4a2b      	ldr	r2, [pc, #172]	; (8001318 <__aeabi_fsub+0x338>)
 800126a:	3501      	adds	r5, #1
 800126c:	4013      	ands	r3, r2
 800126e:	e790      	b.n	8001192 <__aeabi_fsub+0x1b2>
 8001270:	4663      	mov	r3, ip
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0af      	beq.n	80011d6 <__aeabi_fsub+0x1f6>
 8001276:	1e53      	subs	r3, r2, #1
 8001278:	2a01      	cmp	r2, #1
 800127a:	d015      	beq.n	80012a8 <__aeabi_fsub+0x2c8>
 800127c:	2aff      	cmp	r2, #255	; 0xff
 800127e:	d02a      	beq.n	80012d6 <__aeabi_fsub+0x2f6>
 8001280:	001a      	movs	r2, r3
 8001282:	e752      	b.n	800112a <__aeabi_fsub+0x14a>
 8001284:	4662      	mov	r2, ip
 8001286:	2a00      	cmp	r2, #0
 8001288:	d191      	bne.n	80011ae <__aeabi_fsub+0x1ce>
 800128a:	2800      	cmp	r0, #0
 800128c:	d198      	bne.n	80011c0 <__aeabi_fsub+0x1e0>
 800128e:	2680      	movs	r6, #128	; 0x80
 8001290:	2400      	movs	r4, #0
 8001292:	22ff      	movs	r2, #255	; 0xff
 8001294:	03f6      	lsls	r6, r6, #15
 8001296:	e6ee      	b.n	8001076 <__aeabi_fsub+0x96>
 8001298:	000c      	movs	r4, r1
 800129a:	4643      	mov	r3, r8
 800129c:	0015      	movs	r5, r2
 800129e:	e77c      	b.n	800119a <__aeabi_fsub+0x1ba>
 80012a0:	4663      	mov	r3, ip
 80012a2:	000c      	movs	r4, r1
 80012a4:	1ac6      	subs	r6, r0, r3
 80012a6:	e6c9      	b.n	800103c <__aeabi_fsub+0x5c>
 80012a8:	0003      	movs	r3, r0
 80012aa:	4463      	add	r3, ip
 80012ac:	2501      	movs	r5, #1
 80012ae:	015a      	lsls	r2, r3, #5
 80012b0:	d400      	bmi.n	80012b4 <__aeabi_fsub+0x2d4>
 80012b2:	e76e      	b.n	8001192 <__aeabi_fsub+0x1b2>
 80012b4:	2502      	movs	r5, #2
 80012b6:	e6fa      	b.n	80010ae <__aeabi_fsub+0xce>
 80012b8:	4663      	mov	r3, ip
 80012ba:	2501      	movs	r5, #1
 80012bc:	1a1b      	subs	r3, r3, r0
 80012be:	e6b8      	b.n	8001032 <__aeabi_fsub+0x52>
 80012c0:	4664      	mov	r4, ip
 80012c2:	2320      	movs	r3, #32
 80012c4:	40d4      	lsrs	r4, r2
 80012c6:	1a9b      	subs	r3, r3, r2
 80012c8:	4662      	mov	r2, ip
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	1e5a      	subs	r2, r3, #1
 80012d0:	4193      	sbcs	r3, r2
 80012d2:	4323      	orrs	r3, r4
 80012d4:	e7a2      	b.n	800121c <__aeabi_fsub+0x23c>
 80012d6:	4643      	mov	r3, r8
 80012d8:	e774      	b.n	80011c4 <__aeabi_fsub+0x1e4>
 80012da:	4661      	mov	r1, ip
 80012dc:	2320      	movs	r3, #32
 80012de:	40d1      	lsrs	r1, r2
 80012e0:	1a9b      	subs	r3, r3, r2
 80012e2:	4662      	mov	r2, ip
 80012e4:	409a      	lsls	r2, r3
 80012e6:	0013      	movs	r3, r2
 80012e8:	1e5a      	subs	r2, r3, #1
 80012ea:	4193      	sbcs	r3, r2
 80012ec:	430b      	orrs	r3, r1
 80012ee:	e720      	b.n	8001132 <__aeabi_fsub+0x152>
 80012f0:	4663      	mov	r3, ip
 80012f2:	000c      	movs	r4, r1
 80012f4:	2501      	movs	r5, #1
 80012f6:	1ac3      	subs	r3, r0, r3
 80012f8:	e69b      	b.n	8001032 <__aeabi_fsub+0x52>
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d099      	beq.n	8001232 <__aeabi_fsub+0x252>
 80012fe:	000c      	movs	r4, r1
 8001300:	4646      	mov	r6, r8
 8001302:	2200      	movs	r2, #0
 8001304:	e6b7      	b.n	8001076 <__aeabi_fsub+0x96>
 8001306:	4646      	mov	r6, r8
 8001308:	2200      	movs	r2, #0
 800130a:	e6b4      	b.n	8001076 <__aeabi_fsub+0x96>
 800130c:	2b00      	cmp	r3, #0
 800130e:	d000      	beq.n	8001312 <__aeabi_fsub+0x332>
 8001310:	e73f      	b.n	8001192 <__aeabi_fsub+0x1b2>
 8001312:	2400      	movs	r4, #0
 8001314:	2600      	movs	r6, #0
 8001316:	e6ae      	b.n	8001076 <__aeabi_fsub+0x96>
 8001318:	fbffffff 	.word	0xfbffffff
 800131c:	7dffffff 	.word	0x7dffffff

08001320 <__aeabi_f2iz>:
 8001320:	0241      	lsls	r1, r0, #9
 8001322:	0042      	lsls	r2, r0, #1
 8001324:	0fc3      	lsrs	r3, r0, #31
 8001326:	0a49      	lsrs	r1, r1, #9
 8001328:	2000      	movs	r0, #0
 800132a:	0e12      	lsrs	r2, r2, #24
 800132c:	2a7e      	cmp	r2, #126	; 0x7e
 800132e:	dd03      	ble.n	8001338 <__aeabi_f2iz+0x18>
 8001330:	2a9d      	cmp	r2, #157	; 0x9d
 8001332:	dd02      	ble.n	800133a <__aeabi_f2iz+0x1a>
 8001334:	4a09      	ldr	r2, [pc, #36]	; (800135c <__aeabi_f2iz+0x3c>)
 8001336:	1898      	adds	r0, r3, r2
 8001338:	4770      	bx	lr
 800133a:	2080      	movs	r0, #128	; 0x80
 800133c:	0400      	lsls	r0, r0, #16
 800133e:	4301      	orrs	r1, r0
 8001340:	2a95      	cmp	r2, #149	; 0x95
 8001342:	dc07      	bgt.n	8001354 <__aeabi_f2iz+0x34>
 8001344:	2096      	movs	r0, #150	; 0x96
 8001346:	1a82      	subs	r2, r0, r2
 8001348:	40d1      	lsrs	r1, r2
 800134a:	4248      	negs	r0, r1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f3      	bne.n	8001338 <__aeabi_f2iz+0x18>
 8001350:	0008      	movs	r0, r1
 8001352:	e7f1      	b.n	8001338 <__aeabi_f2iz+0x18>
 8001354:	3a96      	subs	r2, #150	; 0x96
 8001356:	4091      	lsls	r1, r2
 8001358:	e7f7      	b.n	800134a <__aeabi_f2iz+0x2a>
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	7fffffff 	.word	0x7fffffff

08001360 <__aeabi_i2f>:
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	2800      	cmp	r0, #0
 8001364:	d013      	beq.n	800138e <__aeabi_i2f+0x2e>
 8001366:	17c3      	asrs	r3, r0, #31
 8001368:	18c5      	adds	r5, r0, r3
 800136a:	405d      	eors	r5, r3
 800136c:	0fc4      	lsrs	r4, r0, #31
 800136e:	0028      	movs	r0, r5
 8001370:	f001 ffa6 	bl	80032c0 <__clzsi2>
 8001374:	239e      	movs	r3, #158	; 0x9e
 8001376:	0001      	movs	r1, r0
 8001378:	1a1b      	subs	r3, r3, r0
 800137a:	2b96      	cmp	r3, #150	; 0x96
 800137c:	dc0f      	bgt.n	800139e <__aeabi_i2f+0x3e>
 800137e:	2808      	cmp	r0, #8
 8001380:	d031      	beq.n	80013e6 <__aeabi_i2f+0x86>
 8001382:	3908      	subs	r1, #8
 8001384:	408d      	lsls	r5, r1
 8001386:	026d      	lsls	r5, r5, #9
 8001388:	0a6d      	lsrs	r5, r5, #9
 800138a:	b2d8      	uxtb	r0, r3
 800138c:	e002      	b.n	8001394 <__aeabi_i2f+0x34>
 800138e:	2400      	movs	r4, #0
 8001390:	2000      	movs	r0, #0
 8001392:	2500      	movs	r5, #0
 8001394:	05c0      	lsls	r0, r0, #23
 8001396:	4328      	orrs	r0, r5
 8001398:	07e4      	lsls	r4, r4, #31
 800139a:	4320      	orrs	r0, r4
 800139c:	bd70      	pop	{r4, r5, r6, pc}
 800139e:	2b99      	cmp	r3, #153	; 0x99
 80013a0:	dd0c      	ble.n	80013bc <__aeabi_i2f+0x5c>
 80013a2:	2205      	movs	r2, #5
 80013a4:	1a12      	subs	r2, r2, r0
 80013a6:	0028      	movs	r0, r5
 80013a8:	40d0      	lsrs	r0, r2
 80013aa:	0002      	movs	r2, r0
 80013ac:	0008      	movs	r0, r1
 80013ae:	301b      	adds	r0, #27
 80013b0:	4085      	lsls	r5, r0
 80013b2:	0028      	movs	r0, r5
 80013b4:	1e45      	subs	r5, r0, #1
 80013b6:	41a8      	sbcs	r0, r5
 80013b8:	4302      	orrs	r2, r0
 80013ba:	0015      	movs	r5, r2
 80013bc:	2905      	cmp	r1, #5
 80013be:	dc16      	bgt.n	80013ee <__aeabi_i2f+0x8e>
 80013c0:	002a      	movs	r2, r5
 80013c2:	480f      	ldr	r0, [pc, #60]	; (8001400 <__aeabi_i2f+0xa0>)
 80013c4:	4002      	ands	r2, r0
 80013c6:	076e      	lsls	r6, r5, #29
 80013c8:	d009      	beq.n	80013de <__aeabi_i2f+0x7e>
 80013ca:	260f      	movs	r6, #15
 80013cc:	4035      	ands	r5, r6
 80013ce:	2d04      	cmp	r5, #4
 80013d0:	d005      	beq.n	80013de <__aeabi_i2f+0x7e>
 80013d2:	3204      	adds	r2, #4
 80013d4:	0155      	lsls	r5, r2, #5
 80013d6:	d502      	bpl.n	80013de <__aeabi_i2f+0x7e>
 80013d8:	239f      	movs	r3, #159	; 0x9f
 80013da:	4002      	ands	r2, r0
 80013dc:	1a5b      	subs	r3, r3, r1
 80013de:	0192      	lsls	r2, r2, #6
 80013e0:	0a55      	lsrs	r5, r2, #9
 80013e2:	b2d8      	uxtb	r0, r3
 80013e4:	e7d6      	b.n	8001394 <__aeabi_i2f+0x34>
 80013e6:	026d      	lsls	r5, r5, #9
 80013e8:	2096      	movs	r0, #150	; 0x96
 80013ea:	0a6d      	lsrs	r5, r5, #9
 80013ec:	e7d2      	b.n	8001394 <__aeabi_i2f+0x34>
 80013ee:	1f4a      	subs	r2, r1, #5
 80013f0:	4095      	lsls	r5, r2
 80013f2:	002a      	movs	r2, r5
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <__aeabi_i2f+0xa0>)
 80013f6:	4002      	ands	r2, r0
 80013f8:	076e      	lsls	r6, r5, #29
 80013fa:	d0f0      	beq.n	80013de <__aeabi_i2f+0x7e>
 80013fc:	e7e5      	b.n	80013ca <__aeabi_i2f+0x6a>
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	fbffffff 	.word	0xfbffffff

08001404 <__aeabi_ui2f>:
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	1e04      	subs	r4, r0, #0
 8001408:	d00e      	beq.n	8001428 <__aeabi_ui2f+0x24>
 800140a:	f001 ff59 	bl	80032c0 <__clzsi2>
 800140e:	239e      	movs	r3, #158	; 0x9e
 8001410:	0001      	movs	r1, r0
 8001412:	1a1b      	subs	r3, r3, r0
 8001414:	2b96      	cmp	r3, #150	; 0x96
 8001416:	dc0c      	bgt.n	8001432 <__aeabi_ui2f+0x2e>
 8001418:	2808      	cmp	r0, #8
 800141a:	d02c      	beq.n	8001476 <__aeabi_ui2f+0x72>
 800141c:	3908      	subs	r1, #8
 800141e:	408c      	lsls	r4, r1
 8001420:	0264      	lsls	r4, r4, #9
 8001422:	0a64      	lsrs	r4, r4, #9
 8001424:	b2d8      	uxtb	r0, r3
 8001426:	e001      	b.n	800142c <__aeabi_ui2f+0x28>
 8001428:	2000      	movs	r0, #0
 800142a:	2400      	movs	r4, #0
 800142c:	05c0      	lsls	r0, r0, #23
 800142e:	4320      	orrs	r0, r4
 8001430:	bd70      	pop	{r4, r5, r6, pc}
 8001432:	2b99      	cmp	r3, #153	; 0x99
 8001434:	dd0a      	ble.n	800144c <__aeabi_ui2f+0x48>
 8001436:	0002      	movs	r2, r0
 8001438:	0020      	movs	r0, r4
 800143a:	321b      	adds	r2, #27
 800143c:	4090      	lsls	r0, r2
 800143e:	0002      	movs	r2, r0
 8001440:	1e50      	subs	r0, r2, #1
 8001442:	4182      	sbcs	r2, r0
 8001444:	2005      	movs	r0, #5
 8001446:	1a40      	subs	r0, r0, r1
 8001448:	40c4      	lsrs	r4, r0
 800144a:	4314      	orrs	r4, r2
 800144c:	2905      	cmp	r1, #5
 800144e:	dc16      	bgt.n	800147e <__aeabi_ui2f+0x7a>
 8001450:	0022      	movs	r2, r4
 8001452:	480f      	ldr	r0, [pc, #60]	; (8001490 <__aeabi_ui2f+0x8c>)
 8001454:	4002      	ands	r2, r0
 8001456:	0765      	lsls	r5, r4, #29
 8001458:	d009      	beq.n	800146e <__aeabi_ui2f+0x6a>
 800145a:	250f      	movs	r5, #15
 800145c:	402c      	ands	r4, r5
 800145e:	2c04      	cmp	r4, #4
 8001460:	d005      	beq.n	800146e <__aeabi_ui2f+0x6a>
 8001462:	3204      	adds	r2, #4
 8001464:	0154      	lsls	r4, r2, #5
 8001466:	d502      	bpl.n	800146e <__aeabi_ui2f+0x6a>
 8001468:	239f      	movs	r3, #159	; 0x9f
 800146a:	4002      	ands	r2, r0
 800146c:	1a5b      	subs	r3, r3, r1
 800146e:	0192      	lsls	r2, r2, #6
 8001470:	0a54      	lsrs	r4, r2, #9
 8001472:	b2d8      	uxtb	r0, r3
 8001474:	e7da      	b.n	800142c <__aeabi_ui2f+0x28>
 8001476:	0264      	lsls	r4, r4, #9
 8001478:	2096      	movs	r0, #150	; 0x96
 800147a:	0a64      	lsrs	r4, r4, #9
 800147c:	e7d6      	b.n	800142c <__aeabi_ui2f+0x28>
 800147e:	1f4a      	subs	r2, r1, #5
 8001480:	4094      	lsls	r4, r2
 8001482:	0022      	movs	r2, r4
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <__aeabi_ui2f+0x8c>)
 8001486:	4002      	ands	r2, r0
 8001488:	0765      	lsls	r5, r4, #29
 800148a:	d0f0      	beq.n	800146e <__aeabi_ui2f+0x6a>
 800148c:	e7e5      	b.n	800145a <__aeabi_ui2f+0x56>
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	fbffffff 	.word	0xfbffffff

08001494 <__aeabi_dadd>:
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	464f      	mov	r7, r9
 8001498:	4646      	mov	r6, r8
 800149a:	46d6      	mov	lr, sl
 800149c:	0004      	movs	r4, r0
 800149e:	b5c0      	push	{r6, r7, lr}
 80014a0:	001f      	movs	r7, r3
 80014a2:	030b      	lsls	r3, r1, #12
 80014a4:	0010      	movs	r0, r2
 80014a6:	004e      	lsls	r6, r1, #1
 80014a8:	0a5b      	lsrs	r3, r3, #9
 80014aa:	0fcd      	lsrs	r5, r1, #31
 80014ac:	0f61      	lsrs	r1, r4, #29
 80014ae:	007a      	lsls	r2, r7, #1
 80014b0:	4319      	orrs	r1, r3
 80014b2:	00e3      	lsls	r3, r4, #3
 80014b4:	033c      	lsls	r4, r7, #12
 80014b6:	0fff      	lsrs	r7, r7, #31
 80014b8:	46bc      	mov	ip, r7
 80014ba:	0a64      	lsrs	r4, r4, #9
 80014bc:	0f47      	lsrs	r7, r0, #29
 80014be:	4327      	orrs	r7, r4
 80014c0:	0d76      	lsrs	r6, r6, #21
 80014c2:	0d52      	lsrs	r2, r2, #21
 80014c4:	00c0      	lsls	r0, r0, #3
 80014c6:	46b9      	mov	r9, r7
 80014c8:	4680      	mov	r8, r0
 80014ca:	1ab7      	subs	r7, r6, r2
 80014cc:	4565      	cmp	r5, ip
 80014ce:	d100      	bne.n	80014d2 <__aeabi_dadd+0x3e>
 80014d0:	e09b      	b.n	800160a <__aeabi_dadd+0x176>
 80014d2:	2f00      	cmp	r7, #0
 80014d4:	dc00      	bgt.n	80014d8 <__aeabi_dadd+0x44>
 80014d6:	e084      	b.n	80015e2 <__aeabi_dadd+0x14e>
 80014d8:	2a00      	cmp	r2, #0
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x4a>
 80014dc:	e0be      	b.n	800165c <__aeabi_dadd+0x1c8>
 80014de:	4ac8      	ldr	r2, [pc, #800]	; (8001800 <__aeabi_dadd+0x36c>)
 80014e0:	4296      	cmp	r6, r2
 80014e2:	d100      	bne.n	80014e6 <__aeabi_dadd+0x52>
 80014e4:	e124      	b.n	8001730 <__aeabi_dadd+0x29c>
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	464c      	mov	r4, r9
 80014ea:	0412      	lsls	r2, r2, #16
 80014ec:	4314      	orrs	r4, r2
 80014ee:	46a1      	mov	r9, r4
 80014f0:	2f38      	cmp	r7, #56	; 0x38
 80014f2:	dd00      	ble.n	80014f6 <__aeabi_dadd+0x62>
 80014f4:	e167      	b.n	80017c6 <__aeabi_dadd+0x332>
 80014f6:	2f1f      	cmp	r7, #31
 80014f8:	dd00      	ble.n	80014fc <__aeabi_dadd+0x68>
 80014fa:	e1d6      	b.n	80018aa <__aeabi_dadd+0x416>
 80014fc:	2220      	movs	r2, #32
 80014fe:	464c      	mov	r4, r9
 8001500:	1bd2      	subs	r2, r2, r7
 8001502:	4094      	lsls	r4, r2
 8001504:	46a2      	mov	sl, r4
 8001506:	4644      	mov	r4, r8
 8001508:	40fc      	lsrs	r4, r7
 800150a:	0020      	movs	r0, r4
 800150c:	4654      	mov	r4, sl
 800150e:	4304      	orrs	r4, r0
 8001510:	4640      	mov	r0, r8
 8001512:	4090      	lsls	r0, r2
 8001514:	1e42      	subs	r2, r0, #1
 8001516:	4190      	sbcs	r0, r2
 8001518:	464a      	mov	r2, r9
 800151a:	40fa      	lsrs	r2, r7
 800151c:	4304      	orrs	r4, r0
 800151e:	1a89      	subs	r1, r1, r2
 8001520:	1b1c      	subs	r4, r3, r4
 8001522:	42a3      	cmp	r3, r4
 8001524:	4192      	sbcs	r2, r2
 8001526:	4252      	negs	r2, r2
 8001528:	1a8b      	subs	r3, r1, r2
 800152a:	469a      	mov	sl, r3
 800152c:	4653      	mov	r3, sl
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	d400      	bmi.n	8001534 <__aeabi_dadd+0xa0>
 8001532:	e0d4      	b.n	80016de <__aeabi_dadd+0x24a>
 8001534:	4653      	mov	r3, sl
 8001536:	025a      	lsls	r2, r3, #9
 8001538:	0a53      	lsrs	r3, r2, #9
 800153a:	469a      	mov	sl, r3
 800153c:	4653      	mov	r3, sl
 800153e:	2b00      	cmp	r3, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_dadd+0xb0>
 8001542:	e104      	b.n	800174e <__aeabi_dadd+0x2ba>
 8001544:	4650      	mov	r0, sl
 8001546:	f001 febb 	bl	80032c0 <__clzsi2>
 800154a:	0003      	movs	r3, r0
 800154c:	3b08      	subs	r3, #8
 800154e:	2220      	movs	r2, #32
 8001550:	0020      	movs	r0, r4
 8001552:	1ad2      	subs	r2, r2, r3
 8001554:	4651      	mov	r1, sl
 8001556:	40d0      	lsrs	r0, r2
 8001558:	4099      	lsls	r1, r3
 800155a:	0002      	movs	r2, r0
 800155c:	409c      	lsls	r4, r3
 800155e:	430a      	orrs	r2, r1
 8001560:	42b3      	cmp	r3, r6
 8001562:	da00      	bge.n	8001566 <__aeabi_dadd+0xd2>
 8001564:	e102      	b.n	800176c <__aeabi_dadd+0x2d8>
 8001566:	1b9b      	subs	r3, r3, r6
 8001568:	1c59      	adds	r1, r3, #1
 800156a:	291f      	cmp	r1, #31
 800156c:	dd00      	ble.n	8001570 <__aeabi_dadd+0xdc>
 800156e:	e0a7      	b.n	80016c0 <__aeabi_dadd+0x22c>
 8001570:	2320      	movs	r3, #32
 8001572:	0010      	movs	r0, r2
 8001574:	0026      	movs	r6, r4
 8001576:	1a5b      	subs	r3, r3, r1
 8001578:	409c      	lsls	r4, r3
 800157a:	4098      	lsls	r0, r3
 800157c:	40ce      	lsrs	r6, r1
 800157e:	40ca      	lsrs	r2, r1
 8001580:	1e63      	subs	r3, r4, #1
 8001582:	419c      	sbcs	r4, r3
 8001584:	4330      	orrs	r0, r6
 8001586:	4692      	mov	sl, r2
 8001588:	2600      	movs	r6, #0
 800158a:	4304      	orrs	r4, r0
 800158c:	0763      	lsls	r3, r4, #29
 800158e:	d009      	beq.n	80015a4 <__aeabi_dadd+0x110>
 8001590:	230f      	movs	r3, #15
 8001592:	4023      	ands	r3, r4
 8001594:	2b04      	cmp	r3, #4
 8001596:	d005      	beq.n	80015a4 <__aeabi_dadd+0x110>
 8001598:	1d23      	adds	r3, r4, #4
 800159a:	42a3      	cmp	r3, r4
 800159c:	41a4      	sbcs	r4, r4
 800159e:	4264      	negs	r4, r4
 80015a0:	44a2      	add	sl, r4
 80015a2:	001c      	movs	r4, r3
 80015a4:	4653      	mov	r3, sl
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	d400      	bmi.n	80015ac <__aeabi_dadd+0x118>
 80015aa:	e09b      	b.n	80016e4 <__aeabi_dadd+0x250>
 80015ac:	4b94      	ldr	r3, [pc, #592]	; (8001800 <__aeabi_dadd+0x36c>)
 80015ae:	3601      	adds	r6, #1
 80015b0:	429e      	cmp	r6, r3
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dadd+0x122>
 80015b4:	e0b8      	b.n	8001728 <__aeabi_dadd+0x294>
 80015b6:	4653      	mov	r3, sl
 80015b8:	4992      	ldr	r1, [pc, #584]	; (8001804 <__aeabi_dadd+0x370>)
 80015ba:	08e4      	lsrs	r4, r4, #3
 80015bc:	400b      	ands	r3, r1
 80015be:	0019      	movs	r1, r3
 80015c0:	075b      	lsls	r3, r3, #29
 80015c2:	4323      	orrs	r3, r4
 80015c4:	0572      	lsls	r2, r6, #21
 80015c6:	024c      	lsls	r4, r1, #9
 80015c8:	0b24      	lsrs	r4, r4, #12
 80015ca:	0d52      	lsrs	r2, r2, #21
 80015cc:	0512      	lsls	r2, r2, #20
 80015ce:	07ed      	lsls	r5, r5, #31
 80015d0:	4322      	orrs	r2, r4
 80015d2:	432a      	orrs	r2, r5
 80015d4:	0018      	movs	r0, r3
 80015d6:	0011      	movs	r1, r2
 80015d8:	bce0      	pop	{r5, r6, r7}
 80015da:	46ba      	mov	sl, r7
 80015dc:	46b1      	mov	r9, r6
 80015de:	46a8      	mov	r8, r5
 80015e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e2:	2f00      	cmp	r7, #0
 80015e4:	d048      	beq.n	8001678 <__aeabi_dadd+0x1e4>
 80015e6:	1b97      	subs	r7, r2, r6
 80015e8:	2e00      	cmp	r6, #0
 80015ea:	d000      	beq.n	80015ee <__aeabi_dadd+0x15a>
 80015ec:	e10e      	b.n	800180c <__aeabi_dadd+0x378>
 80015ee:	000c      	movs	r4, r1
 80015f0:	431c      	orrs	r4, r3
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dadd+0x162>
 80015f4:	e1b7      	b.n	8001966 <__aeabi_dadd+0x4d2>
 80015f6:	1e7c      	subs	r4, r7, #1
 80015f8:	2f01      	cmp	r7, #1
 80015fa:	d100      	bne.n	80015fe <__aeabi_dadd+0x16a>
 80015fc:	e226      	b.n	8001a4c <__aeabi_dadd+0x5b8>
 80015fe:	4d80      	ldr	r5, [pc, #512]	; (8001800 <__aeabi_dadd+0x36c>)
 8001600:	42af      	cmp	r7, r5
 8001602:	d100      	bne.n	8001606 <__aeabi_dadd+0x172>
 8001604:	e1d5      	b.n	80019b2 <__aeabi_dadd+0x51e>
 8001606:	0027      	movs	r7, r4
 8001608:	e107      	b.n	800181a <__aeabi_dadd+0x386>
 800160a:	2f00      	cmp	r7, #0
 800160c:	dc00      	bgt.n	8001610 <__aeabi_dadd+0x17c>
 800160e:	e0b2      	b.n	8001776 <__aeabi_dadd+0x2e2>
 8001610:	2a00      	cmp	r2, #0
 8001612:	d047      	beq.n	80016a4 <__aeabi_dadd+0x210>
 8001614:	4a7a      	ldr	r2, [pc, #488]	; (8001800 <__aeabi_dadd+0x36c>)
 8001616:	4296      	cmp	r6, r2
 8001618:	d100      	bne.n	800161c <__aeabi_dadd+0x188>
 800161a:	e089      	b.n	8001730 <__aeabi_dadd+0x29c>
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	464c      	mov	r4, r9
 8001620:	0412      	lsls	r2, r2, #16
 8001622:	4314      	orrs	r4, r2
 8001624:	46a1      	mov	r9, r4
 8001626:	2f38      	cmp	r7, #56	; 0x38
 8001628:	dc6b      	bgt.n	8001702 <__aeabi_dadd+0x26e>
 800162a:	2f1f      	cmp	r7, #31
 800162c:	dc00      	bgt.n	8001630 <__aeabi_dadd+0x19c>
 800162e:	e16e      	b.n	800190e <__aeabi_dadd+0x47a>
 8001630:	003a      	movs	r2, r7
 8001632:	4648      	mov	r0, r9
 8001634:	3a20      	subs	r2, #32
 8001636:	40d0      	lsrs	r0, r2
 8001638:	4684      	mov	ip, r0
 800163a:	2f20      	cmp	r7, #32
 800163c:	d007      	beq.n	800164e <__aeabi_dadd+0x1ba>
 800163e:	2240      	movs	r2, #64	; 0x40
 8001640:	4648      	mov	r0, r9
 8001642:	1bd2      	subs	r2, r2, r7
 8001644:	4090      	lsls	r0, r2
 8001646:	0002      	movs	r2, r0
 8001648:	4640      	mov	r0, r8
 800164a:	4310      	orrs	r0, r2
 800164c:	4680      	mov	r8, r0
 800164e:	4640      	mov	r0, r8
 8001650:	1e42      	subs	r2, r0, #1
 8001652:	4190      	sbcs	r0, r2
 8001654:	4662      	mov	r2, ip
 8001656:	0004      	movs	r4, r0
 8001658:	4314      	orrs	r4, r2
 800165a:	e057      	b.n	800170c <__aeabi_dadd+0x278>
 800165c:	464a      	mov	r2, r9
 800165e:	4302      	orrs	r2, r0
 8001660:	d100      	bne.n	8001664 <__aeabi_dadd+0x1d0>
 8001662:	e103      	b.n	800186c <__aeabi_dadd+0x3d8>
 8001664:	1e7a      	subs	r2, r7, #1
 8001666:	2f01      	cmp	r7, #1
 8001668:	d100      	bne.n	800166c <__aeabi_dadd+0x1d8>
 800166a:	e193      	b.n	8001994 <__aeabi_dadd+0x500>
 800166c:	4c64      	ldr	r4, [pc, #400]	; (8001800 <__aeabi_dadd+0x36c>)
 800166e:	42a7      	cmp	r7, r4
 8001670:	d100      	bne.n	8001674 <__aeabi_dadd+0x1e0>
 8001672:	e18a      	b.n	800198a <__aeabi_dadd+0x4f6>
 8001674:	0017      	movs	r7, r2
 8001676:	e73b      	b.n	80014f0 <__aeabi_dadd+0x5c>
 8001678:	4c63      	ldr	r4, [pc, #396]	; (8001808 <__aeabi_dadd+0x374>)
 800167a:	1c72      	adds	r2, r6, #1
 800167c:	4222      	tst	r2, r4
 800167e:	d000      	beq.n	8001682 <__aeabi_dadd+0x1ee>
 8001680:	e0e0      	b.n	8001844 <__aeabi_dadd+0x3b0>
 8001682:	000a      	movs	r2, r1
 8001684:	431a      	orrs	r2, r3
 8001686:	2e00      	cmp	r6, #0
 8001688:	d000      	beq.n	800168c <__aeabi_dadd+0x1f8>
 800168a:	e174      	b.n	8001976 <__aeabi_dadd+0x4e2>
 800168c:	2a00      	cmp	r2, #0
 800168e:	d100      	bne.n	8001692 <__aeabi_dadd+0x1fe>
 8001690:	e1d0      	b.n	8001a34 <__aeabi_dadd+0x5a0>
 8001692:	464a      	mov	r2, r9
 8001694:	4302      	orrs	r2, r0
 8001696:	d000      	beq.n	800169a <__aeabi_dadd+0x206>
 8001698:	e1e3      	b.n	8001a62 <__aeabi_dadd+0x5ce>
 800169a:	074a      	lsls	r2, r1, #29
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	4313      	orrs	r3, r2
 80016a0:	08c9      	lsrs	r1, r1, #3
 80016a2:	e029      	b.n	80016f8 <__aeabi_dadd+0x264>
 80016a4:	464a      	mov	r2, r9
 80016a6:	4302      	orrs	r2, r0
 80016a8:	d100      	bne.n	80016ac <__aeabi_dadd+0x218>
 80016aa:	e17d      	b.n	80019a8 <__aeabi_dadd+0x514>
 80016ac:	1e7a      	subs	r2, r7, #1
 80016ae:	2f01      	cmp	r7, #1
 80016b0:	d100      	bne.n	80016b4 <__aeabi_dadd+0x220>
 80016b2:	e0e0      	b.n	8001876 <__aeabi_dadd+0x3e2>
 80016b4:	4c52      	ldr	r4, [pc, #328]	; (8001800 <__aeabi_dadd+0x36c>)
 80016b6:	42a7      	cmp	r7, r4
 80016b8:	d100      	bne.n	80016bc <__aeabi_dadd+0x228>
 80016ba:	e166      	b.n	800198a <__aeabi_dadd+0x4f6>
 80016bc:	0017      	movs	r7, r2
 80016be:	e7b2      	b.n	8001626 <__aeabi_dadd+0x192>
 80016c0:	0010      	movs	r0, r2
 80016c2:	3b1f      	subs	r3, #31
 80016c4:	40d8      	lsrs	r0, r3
 80016c6:	2920      	cmp	r1, #32
 80016c8:	d003      	beq.n	80016d2 <__aeabi_dadd+0x23e>
 80016ca:	2340      	movs	r3, #64	; 0x40
 80016cc:	1a5b      	subs	r3, r3, r1
 80016ce:	409a      	lsls	r2, r3
 80016d0:	4314      	orrs	r4, r2
 80016d2:	1e63      	subs	r3, r4, #1
 80016d4:	419c      	sbcs	r4, r3
 80016d6:	2300      	movs	r3, #0
 80016d8:	2600      	movs	r6, #0
 80016da:	469a      	mov	sl, r3
 80016dc:	4304      	orrs	r4, r0
 80016de:	0763      	lsls	r3, r4, #29
 80016e0:	d000      	beq.n	80016e4 <__aeabi_dadd+0x250>
 80016e2:	e755      	b.n	8001590 <__aeabi_dadd+0xfc>
 80016e4:	4652      	mov	r2, sl
 80016e6:	08e3      	lsrs	r3, r4, #3
 80016e8:	0752      	lsls	r2, r2, #29
 80016ea:	4313      	orrs	r3, r2
 80016ec:	4652      	mov	r2, sl
 80016ee:	0037      	movs	r7, r6
 80016f0:	08d1      	lsrs	r1, r2, #3
 80016f2:	4a43      	ldr	r2, [pc, #268]	; (8001800 <__aeabi_dadd+0x36c>)
 80016f4:	4297      	cmp	r7, r2
 80016f6:	d01f      	beq.n	8001738 <__aeabi_dadd+0x2a4>
 80016f8:	0309      	lsls	r1, r1, #12
 80016fa:	057a      	lsls	r2, r7, #21
 80016fc:	0b0c      	lsrs	r4, r1, #12
 80016fe:	0d52      	lsrs	r2, r2, #21
 8001700:	e764      	b.n	80015cc <__aeabi_dadd+0x138>
 8001702:	4642      	mov	r2, r8
 8001704:	464c      	mov	r4, r9
 8001706:	4314      	orrs	r4, r2
 8001708:	1e62      	subs	r2, r4, #1
 800170a:	4194      	sbcs	r4, r2
 800170c:	18e4      	adds	r4, r4, r3
 800170e:	429c      	cmp	r4, r3
 8001710:	4192      	sbcs	r2, r2
 8001712:	4252      	negs	r2, r2
 8001714:	4692      	mov	sl, r2
 8001716:	448a      	add	sl, r1
 8001718:	4653      	mov	r3, sl
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	d5df      	bpl.n	80016de <__aeabi_dadd+0x24a>
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <__aeabi_dadd+0x36c>)
 8001720:	3601      	adds	r6, #1
 8001722:	429e      	cmp	r6, r3
 8001724:	d000      	beq.n	8001728 <__aeabi_dadd+0x294>
 8001726:	e0b3      	b.n	8001890 <__aeabi_dadd+0x3fc>
 8001728:	0032      	movs	r2, r6
 800172a:	2400      	movs	r4, #0
 800172c:	2300      	movs	r3, #0
 800172e:	e74d      	b.n	80015cc <__aeabi_dadd+0x138>
 8001730:	074a      	lsls	r2, r1, #29
 8001732:	08db      	lsrs	r3, r3, #3
 8001734:	4313      	orrs	r3, r2
 8001736:	08c9      	lsrs	r1, r1, #3
 8001738:	001a      	movs	r2, r3
 800173a:	430a      	orrs	r2, r1
 800173c:	d100      	bne.n	8001740 <__aeabi_dadd+0x2ac>
 800173e:	e200      	b.n	8001b42 <__aeabi_dadd+0x6ae>
 8001740:	2480      	movs	r4, #128	; 0x80
 8001742:	0324      	lsls	r4, r4, #12
 8001744:	430c      	orrs	r4, r1
 8001746:	0324      	lsls	r4, r4, #12
 8001748:	4a2d      	ldr	r2, [pc, #180]	; (8001800 <__aeabi_dadd+0x36c>)
 800174a:	0b24      	lsrs	r4, r4, #12
 800174c:	e73e      	b.n	80015cc <__aeabi_dadd+0x138>
 800174e:	0020      	movs	r0, r4
 8001750:	f001 fdb6 	bl	80032c0 <__clzsi2>
 8001754:	0003      	movs	r3, r0
 8001756:	3318      	adds	r3, #24
 8001758:	2b1f      	cmp	r3, #31
 800175a:	dc00      	bgt.n	800175e <__aeabi_dadd+0x2ca>
 800175c:	e6f7      	b.n	800154e <__aeabi_dadd+0xba>
 800175e:	0022      	movs	r2, r4
 8001760:	3808      	subs	r0, #8
 8001762:	4082      	lsls	r2, r0
 8001764:	2400      	movs	r4, #0
 8001766:	42b3      	cmp	r3, r6
 8001768:	db00      	blt.n	800176c <__aeabi_dadd+0x2d8>
 800176a:	e6fc      	b.n	8001566 <__aeabi_dadd+0xd2>
 800176c:	1af6      	subs	r6, r6, r3
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <__aeabi_dadd+0x370>)
 8001770:	401a      	ands	r2, r3
 8001772:	4692      	mov	sl, r2
 8001774:	e70a      	b.n	800158c <__aeabi_dadd+0xf8>
 8001776:	2f00      	cmp	r7, #0
 8001778:	d02b      	beq.n	80017d2 <__aeabi_dadd+0x33e>
 800177a:	1b97      	subs	r7, r2, r6
 800177c:	2e00      	cmp	r6, #0
 800177e:	d100      	bne.n	8001782 <__aeabi_dadd+0x2ee>
 8001780:	e0b8      	b.n	80018f4 <__aeabi_dadd+0x460>
 8001782:	4c1f      	ldr	r4, [pc, #124]	; (8001800 <__aeabi_dadd+0x36c>)
 8001784:	42a2      	cmp	r2, r4
 8001786:	d100      	bne.n	800178a <__aeabi_dadd+0x2f6>
 8001788:	e11c      	b.n	80019c4 <__aeabi_dadd+0x530>
 800178a:	2480      	movs	r4, #128	; 0x80
 800178c:	0424      	lsls	r4, r4, #16
 800178e:	4321      	orrs	r1, r4
 8001790:	2f38      	cmp	r7, #56	; 0x38
 8001792:	dd00      	ble.n	8001796 <__aeabi_dadd+0x302>
 8001794:	e11e      	b.n	80019d4 <__aeabi_dadd+0x540>
 8001796:	2f1f      	cmp	r7, #31
 8001798:	dd00      	ble.n	800179c <__aeabi_dadd+0x308>
 800179a:	e19e      	b.n	8001ada <__aeabi_dadd+0x646>
 800179c:	2620      	movs	r6, #32
 800179e:	000c      	movs	r4, r1
 80017a0:	1bf6      	subs	r6, r6, r7
 80017a2:	0018      	movs	r0, r3
 80017a4:	40b3      	lsls	r3, r6
 80017a6:	40b4      	lsls	r4, r6
 80017a8:	40f8      	lsrs	r0, r7
 80017aa:	1e5e      	subs	r6, r3, #1
 80017ac:	41b3      	sbcs	r3, r6
 80017ae:	40f9      	lsrs	r1, r7
 80017b0:	4304      	orrs	r4, r0
 80017b2:	431c      	orrs	r4, r3
 80017b4:	4489      	add	r9, r1
 80017b6:	4444      	add	r4, r8
 80017b8:	4544      	cmp	r4, r8
 80017ba:	419b      	sbcs	r3, r3
 80017bc:	425b      	negs	r3, r3
 80017be:	444b      	add	r3, r9
 80017c0:	469a      	mov	sl, r3
 80017c2:	0016      	movs	r6, r2
 80017c4:	e7a8      	b.n	8001718 <__aeabi_dadd+0x284>
 80017c6:	4642      	mov	r2, r8
 80017c8:	464c      	mov	r4, r9
 80017ca:	4314      	orrs	r4, r2
 80017cc:	1e62      	subs	r2, r4, #1
 80017ce:	4194      	sbcs	r4, r2
 80017d0:	e6a6      	b.n	8001520 <__aeabi_dadd+0x8c>
 80017d2:	4c0d      	ldr	r4, [pc, #52]	; (8001808 <__aeabi_dadd+0x374>)
 80017d4:	1c72      	adds	r2, r6, #1
 80017d6:	4222      	tst	r2, r4
 80017d8:	d000      	beq.n	80017dc <__aeabi_dadd+0x348>
 80017da:	e0a8      	b.n	800192e <__aeabi_dadd+0x49a>
 80017dc:	000a      	movs	r2, r1
 80017de:	431a      	orrs	r2, r3
 80017e0:	2e00      	cmp	r6, #0
 80017e2:	d000      	beq.n	80017e6 <__aeabi_dadd+0x352>
 80017e4:	e10a      	b.n	80019fc <__aeabi_dadd+0x568>
 80017e6:	2a00      	cmp	r2, #0
 80017e8:	d100      	bne.n	80017ec <__aeabi_dadd+0x358>
 80017ea:	e15e      	b.n	8001aaa <__aeabi_dadd+0x616>
 80017ec:	464a      	mov	r2, r9
 80017ee:	4302      	orrs	r2, r0
 80017f0:	d000      	beq.n	80017f4 <__aeabi_dadd+0x360>
 80017f2:	e161      	b.n	8001ab8 <__aeabi_dadd+0x624>
 80017f4:	074a      	lsls	r2, r1, #29
 80017f6:	08db      	lsrs	r3, r3, #3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	08c9      	lsrs	r1, r1, #3
 80017fc:	e77c      	b.n	80016f8 <__aeabi_dadd+0x264>
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	000007ff 	.word	0x000007ff
 8001804:	ff7fffff 	.word	0xff7fffff
 8001808:	000007fe 	.word	0x000007fe
 800180c:	4ccf      	ldr	r4, [pc, #828]	; (8001b4c <__aeabi_dadd+0x6b8>)
 800180e:	42a2      	cmp	r2, r4
 8001810:	d100      	bne.n	8001814 <__aeabi_dadd+0x380>
 8001812:	e0ce      	b.n	80019b2 <__aeabi_dadd+0x51e>
 8001814:	2480      	movs	r4, #128	; 0x80
 8001816:	0424      	lsls	r4, r4, #16
 8001818:	4321      	orrs	r1, r4
 800181a:	2f38      	cmp	r7, #56	; 0x38
 800181c:	dc5b      	bgt.n	80018d6 <__aeabi_dadd+0x442>
 800181e:	2f1f      	cmp	r7, #31
 8001820:	dd00      	ble.n	8001824 <__aeabi_dadd+0x390>
 8001822:	e0dc      	b.n	80019de <__aeabi_dadd+0x54a>
 8001824:	2520      	movs	r5, #32
 8001826:	000c      	movs	r4, r1
 8001828:	1bed      	subs	r5, r5, r7
 800182a:	001e      	movs	r6, r3
 800182c:	40ab      	lsls	r3, r5
 800182e:	40ac      	lsls	r4, r5
 8001830:	40fe      	lsrs	r6, r7
 8001832:	1e5d      	subs	r5, r3, #1
 8001834:	41ab      	sbcs	r3, r5
 8001836:	4334      	orrs	r4, r6
 8001838:	40f9      	lsrs	r1, r7
 800183a:	431c      	orrs	r4, r3
 800183c:	464b      	mov	r3, r9
 800183e:	1a5b      	subs	r3, r3, r1
 8001840:	4699      	mov	r9, r3
 8001842:	e04c      	b.n	80018de <__aeabi_dadd+0x44a>
 8001844:	464a      	mov	r2, r9
 8001846:	1a1c      	subs	r4, r3, r0
 8001848:	1a88      	subs	r0, r1, r2
 800184a:	42a3      	cmp	r3, r4
 800184c:	4192      	sbcs	r2, r2
 800184e:	4252      	negs	r2, r2
 8001850:	4692      	mov	sl, r2
 8001852:	0002      	movs	r2, r0
 8001854:	4650      	mov	r0, sl
 8001856:	1a12      	subs	r2, r2, r0
 8001858:	4692      	mov	sl, r2
 800185a:	0212      	lsls	r2, r2, #8
 800185c:	d478      	bmi.n	8001950 <__aeabi_dadd+0x4bc>
 800185e:	4653      	mov	r3, sl
 8001860:	4323      	orrs	r3, r4
 8001862:	d000      	beq.n	8001866 <__aeabi_dadd+0x3d2>
 8001864:	e66a      	b.n	800153c <__aeabi_dadd+0xa8>
 8001866:	2100      	movs	r1, #0
 8001868:	2500      	movs	r5, #0
 800186a:	e745      	b.n	80016f8 <__aeabi_dadd+0x264>
 800186c:	074a      	lsls	r2, r1, #29
 800186e:	08db      	lsrs	r3, r3, #3
 8001870:	4313      	orrs	r3, r2
 8001872:	08c9      	lsrs	r1, r1, #3
 8001874:	e73d      	b.n	80016f2 <__aeabi_dadd+0x25e>
 8001876:	181c      	adds	r4, r3, r0
 8001878:	429c      	cmp	r4, r3
 800187a:	419b      	sbcs	r3, r3
 800187c:	4449      	add	r1, r9
 800187e:	468a      	mov	sl, r1
 8001880:	425b      	negs	r3, r3
 8001882:	449a      	add	sl, r3
 8001884:	4653      	mov	r3, sl
 8001886:	2601      	movs	r6, #1
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	d400      	bmi.n	800188e <__aeabi_dadd+0x3fa>
 800188c:	e727      	b.n	80016de <__aeabi_dadd+0x24a>
 800188e:	2602      	movs	r6, #2
 8001890:	4652      	mov	r2, sl
 8001892:	4baf      	ldr	r3, [pc, #700]	; (8001b50 <__aeabi_dadd+0x6bc>)
 8001894:	2101      	movs	r1, #1
 8001896:	401a      	ands	r2, r3
 8001898:	0013      	movs	r3, r2
 800189a:	4021      	ands	r1, r4
 800189c:	0862      	lsrs	r2, r4, #1
 800189e:	430a      	orrs	r2, r1
 80018a0:	07dc      	lsls	r4, r3, #31
 80018a2:	085b      	lsrs	r3, r3, #1
 80018a4:	469a      	mov	sl, r3
 80018a6:	4314      	orrs	r4, r2
 80018a8:	e670      	b.n	800158c <__aeabi_dadd+0xf8>
 80018aa:	003a      	movs	r2, r7
 80018ac:	464c      	mov	r4, r9
 80018ae:	3a20      	subs	r2, #32
 80018b0:	40d4      	lsrs	r4, r2
 80018b2:	46a4      	mov	ip, r4
 80018b4:	2f20      	cmp	r7, #32
 80018b6:	d007      	beq.n	80018c8 <__aeabi_dadd+0x434>
 80018b8:	2240      	movs	r2, #64	; 0x40
 80018ba:	4648      	mov	r0, r9
 80018bc:	1bd2      	subs	r2, r2, r7
 80018be:	4090      	lsls	r0, r2
 80018c0:	0002      	movs	r2, r0
 80018c2:	4640      	mov	r0, r8
 80018c4:	4310      	orrs	r0, r2
 80018c6:	4680      	mov	r8, r0
 80018c8:	4640      	mov	r0, r8
 80018ca:	1e42      	subs	r2, r0, #1
 80018cc:	4190      	sbcs	r0, r2
 80018ce:	4662      	mov	r2, ip
 80018d0:	0004      	movs	r4, r0
 80018d2:	4314      	orrs	r4, r2
 80018d4:	e624      	b.n	8001520 <__aeabi_dadd+0x8c>
 80018d6:	4319      	orrs	r1, r3
 80018d8:	000c      	movs	r4, r1
 80018da:	1e63      	subs	r3, r4, #1
 80018dc:	419c      	sbcs	r4, r3
 80018de:	4643      	mov	r3, r8
 80018e0:	1b1c      	subs	r4, r3, r4
 80018e2:	45a0      	cmp	r8, r4
 80018e4:	419b      	sbcs	r3, r3
 80018e6:	4649      	mov	r1, r9
 80018e8:	425b      	negs	r3, r3
 80018ea:	1acb      	subs	r3, r1, r3
 80018ec:	469a      	mov	sl, r3
 80018ee:	4665      	mov	r5, ip
 80018f0:	0016      	movs	r6, r2
 80018f2:	e61b      	b.n	800152c <__aeabi_dadd+0x98>
 80018f4:	000c      	movs	r4, r1
 80018f6:	431c      	orrs	r4, r3
 80018f8:	d100      	bne.n	80018fc <__aeabi_dadd+0x468>
 80018fa:	e0c7      	b.n	8001a8c <__aeabi_dadd+0x5f8>
 80018fc:	1e7c      	subs	r4, r7, #1
 80018fe:	2f01      	cmp	r7, #1
 8001900:	d100      	bne.n	8001904 <__aeabi_dadd+0x470>
 8001902:	e0f9      	b.n	8001af8 <__aeabi_dadd+0x664>
 8001904:	4e91      	ldr	r6, [pc, #580]	; (8001b4c <__aeabi_dadd+0x6b8>)
 8001906:	42b7      	cmp	r7, r6
 8001908:	d05c      	beq.n	80019c4 <__aeabi_dadd+0x530>
 800190a:	0027      	movs	r7, r4
 800190c:	e740      	b.n	8001790 <__aeabi_dadd+0x2fc>
 800190e:	2220      	movs	r2, #32
 8001910:	464c      	mov	r4, r9
 8001912:	4640      	mov	r0, r8
 8001914:	1bd2      	subs	r2, r2, r7
 8001916:	4094      	lsls	r4, r2
 8001918:	40f8      	lsrs	r0, r7
 800191a:	4304      	orrs	r4, r0
 800191c:	4640      	mov	r0, r8
 800191e:	4090      	lsls	r0, r2
 8001920:	1e42      	subs	r2, r0, #1
 8001922:	4190      	sbcs	r0, r2
 8001924:	464a      	mov	r2, r9
 8001926:	40fa      	lsrs	r2, r7
 8001928:	4304      	orrs	r4, r0
 800192a:	1889      	adds	r1, r1, r2
 800192c:	e6ee      	b.n	800170c <__aeabi_dadd+0x278>
 800192e:	4c87      	ldr	r4, [pc, #540]	; (8001b4c <__aeabi_dadd+0x6b8>)
 8001930:	42a2      	cmp	r2, r4
 8001932:	d100      	bne.n	8001936 <__aeabi_dadd+0x4a2>
 8001934:	e6f9      	b.n	800172a <__aeabi_dadd+0x296>
 8001936:	1818      	adds	r0, r3, r0
 8001938:	4298      	cmp	r0, r3
 800193a:	419b      	sbcs	r3, r3
 800193c:	4449      	add	r1, r9
 800193e:	425b      	negs	r3, r3
 8001940:	18cb      	adds	r3, r1, r3
 8001942:	07dc      	lsls	r4, r3, #31
 8001944:	0840      	lsrs	r0, r0, #1
 8001946:	085b      	lsrs	r3, r3, #1
 8001948:	469a      	mov	sl, r3
 800194a:	0016      	movs	r6, r2
 800194c:	4304      	orrs	r4, r0
 800194e:	e6c6      	b.n	80016de <__aeabi_dadd+0x24a>
 8001950:	4642      	mov	r2, r8
 8001952:	1ad4      	subs	r4, r2, r3
 8001954:	45a0      	cmp	r8, r4
 8001956:	4180      	sbcs	r0, r0
 8001958:	464b      	mov	r3, r9
 800195a:	4240      	negs	r0, r0
 800195c:	1a59      	subs	r1, r3, r1
 800195e:	1a0b      	subs	r3, r1, r0
 8001960:	469a      	mov	sl, r3
 8001962:	4665      	mov	r5, ip
 8001964:	e5ea      	b.n	800153c <__aeabi_dadd+0xa8>
 8001966:	464b      	mov	r3, r9
 8001968:	464a      	mov	r2, r9
 800196a:	08c0      	lsrs	r0, r0, #3
 800196c:	075b      	lsls	r3, r3, #29
 800196e:	4665      	mov	r5, ip
 8001970:	4303      	orrs	r3, r0
 8001972:	08d1      	lsrs	r1, r2, #3
 8001974:	e6bd      	b.n	80016f2 <__aeabi_dadd+0x25e>
 8001976:	2a00      	cmp	r2, #0
 8001978:	d000      	beq.n	800197c <__aeabi_dadd+0x4e8>
 800197a:	e08e      	b.n	8001a9a <__aeabi_dadd+0x606>
 800197c:	464b      	mov	r3, r9
 800197e:	4303      	orrs	r3, r0
 8001980:	d117      	bne.n	80019b2 <__aeabi_dadd+0x51e>
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	2500      	movs	r5, #0
 8001986:	0309      	lsls	r1, r1, #12
 8001988:	e6da      	b.n	8001740 <__aeabi_dadd+0x2ac>
 800198a:	074a      	lsls	r2, r1, #29
 800198c:	08db      	lsrs	r3, r3, #3
 800198e:	4313      	orrs	r3, r2
 8001990:	08c9      	lsrs	r1, r1, #3
 8001992:	e6d1      	b.n	8001738 <__aeabi_dadd+0x2a4>
 8001994:	1a1c      	subs	r4, r3, r0
 8001996:	464a      	mov	r2, r9
 8001998:	42a3      	cmp	r3, r4
 800199a:	419b      	sbcs	r3, r3
 800199c:	1a89      	subs	r1, r1, r2
 800199e:	425b      	negs	r3, r3
 80019a0:	1acb      	subs	r3, r1, r3
 80019a2:	469a      	mov	sl, r3
 80019a4:	2601      	movs	r6, #1
 80019a6:	e5c1      	b.n	800152c <__aeabi_dadd+0x98>
 80019a8:	074a      	lsls	r2, r1, #29
 80019aa:	08db      	lsrs	r3, r3, #3
 80019ac:	4313      	orrs	r3, r2
 80019ae:	08c9      	lsrs	r1, r1, #3
 80019b0:	e69f      	b.n	80016f2 <__aeabi_dadd+0x25e>
 80019b2:	4643      	mov	r3, r8
 80019b4:	08d8      	lsrs	r0, r3, #3
 80019b6:	464b      	mov	r3, r9
 80019b8:	464a      	mov	r2, r9
 80019ba:	075b      	lsls	r3, r3, #29
 80019bc:	4665      	mov	r5, ip
 80019be:	4303      	orrs	r3, r0
 80019c0:	08d1      	lsrs	r1, r2, #3
 80019c2:	e6b9      	b.n	8001738 <__aeabi_dadd+0x2a4>
 80019c4:	4643      	mov	r3, r8
 80019c6:	08d8      	lsrs	r0, r3, #3
 80019c8:	464b      	mov	r3, r9
 80019ca:	464a      	mov	r2, r9
 80019cc:	075b      	lsls	r3, r3, #29
 80019ce:	4303      	orrs	r3, r0
 80019d0:	08d1      	lsrs	r1, r2, #3
 80019d2:	e6b1      	b.n	8001738 <__aeabi_dadd+0x2a4>
 80019d4:	4319      	orrs	r1, r3
 80019d6:	000c      	movs	r4, r1
 80019d8:	1e63      	subs	r3, r4, #1
 80019da:	419c      	sbcs	r4, r3
 80019dc:	e6eb      	b.n	80017b6 <__aeabi_dadd+0x322>
 80019de:	003c      	movs	r4, r7
 80019e0:	000d      	movs	r5, r1
 80019e2:	3c20      	subs	r4, #32
 80019e4:	40e5      	lsrs	r5, r4
 80019e6:	2f20      	cmp	r7, #32
 80019e8:	d003      	beq.n	80019f2 <__aeabi_dadd+0x55e>
 80019ea:	2440      	movs	r4, #64	; 0x40
 80019ec:	1be4      	subs	r4, r4, r7
 80019ee:	40a1      	lsls	r1, r4
 80019f0:	430b      	orrs	r3, r1
 80019f2:	001c      	movs	r4, r3
 80019f4:	1e63      	subs	r3, r4, #1
 80019f6:	419c      	sbcs	r4, r3
 80019f8:	432c      	orrs	r4, r5
 80019fa:	e770      	b.n	80018de <__aeabi_dadd+0x44a>
 80019fc:	2a00      	cmp	r2, #0
 80019fe:	d0e1      	beq.n	80019c4 <__aeabi_dadd+0x530>
 8001a00:	464a      	mov	r2, r9
 8001a02:	4302      	orrs	r2, r0
 8001a04:	d0c1      	beq.n	800198a <__aeabi_dadd+0x4f6>
 8001a06:	074a      	lsls	r2, r1, #29
 8001a08:	08db      	lsrs	r3, r3, #3
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	08c9      	lsrs	r1, r1, #3
 8001a10:	0312      	lsls	r2, r2, #12
 8001a12:	4211      	tst	r1, r2
 8001a14:	d008      	beq.n	8001a28 <__aeabi_dadd+0x594>
 8001a16:	4648      	mov	r0, r9
 8001a18:	08c4      	lsrs	r4, r0, #3
 8001a1a:	4214      	tst	r4, r2
 8001a1c:	d104      	bne.n	8001a28 <__aeabi_dadd+0x594>
 8001a1e:	4643      	mov	r3, r8
 8001a20:	0021      	movs	r1, r4
 8001a22:	08db      	lsrs	r3, r3, #3
 8001a24:	0742      	lsls	r2, r0, #29
 8001a26:	4313      	orrs	r3, r2
 8001a28:	0f5a      	lsrs	r2, r3, #29
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	0752      	lsls	r2, r2, #29
 8001a2e:	08db      	lsrs	r3, r3, #3
 8001a30:	4313      	orrs	r3, r2
 8001a32:	e681      	b.n	8001738 <__aeabi_dadd+0x2a4>
 8001a34:	464b      	mov	r3, r9
 8001a36:	4303      	orrs	r3, r0
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dadd+0x5a8>
 8001a3a:	e714      	b.n	8001866 <__aeabi_dadd+0x3d2>
 8001a3c:	464b      	mov	r3, r9
 8001a3e:	464a      	mov	r2, r9
 8001a40:	08c0      	lsrs	r0, r0, #3
 8001a42:	075b      	lsls	r3, r3, #29
 8001a44:	4665      	mov	r5, ip
 8001a46:	4303      	orrs	r3, r0
 8001a48:	08d1      	lsrs	r1, r2, #3
 8001a4a:	e655      	b.n	80016f8 <__aeabi_dadd+0x264>
 8001a4c:	1ac4      	subs	r4, r0, r3
 8001a4e:	45a0      	cmp	r8, r4
 8001a50:	4180      	sbcs	r0, r0
 8001a52:	464b      	mov	r3, r9
 8001a54:	4240      	negs	r0, r0
 8001a56:	1a59      	subs	r1, r3, r1
 8001a58:	1a0b      	subs	r3, r1, r0
 8001a5a:	469a      	mov	sl, r3
 8001a5c:	4665      	mov	r5, ip
 8001a5e:	2601      	movs	r6, #1
 8001a60:	e564      	b.n	800152c <__aeabi_dadd+0x98>
 8001a62:	1a1c      	subs	r4, r3, r0
 8001a64:	464a      	mov	r2, r9
 8001a66:	42a3      	cmp	r3, r4
 8001a68:	4180      	sbcs	r0, r0
 8001a6a:	1a8a      	subs	r2, r1, r2
 8001a6c:	4240      	negs	r0, r0
 8001a6e:	1a12      	subs	r2, r2, r0
 8001a70:	4692      	mov	sl, r2
 8001a72:	0212      	lsls	r2, r2, #8
 8001a74:	d549      	bpl.n	8001b0a <__aeabi_dadd+0x676>
 8001a76:	4642      	mov	r2, r8
 8001a78:	1ad4      	subs	r4, r2, r3
 8001a7a:	45a0      	cmp	r8, r4
 8001a7c:	4180      	sbcs	r0, r0
 8001a7e:	464b      	mov	r3, r9
 8001a80:	4240      	negs	r0, r0
 8001a82:	1a59      	subs	r1, r3, r1
 8001a84:	1a0b      	subs	r3, r1, r0
 8001a86:	469a      	mov	sl, r3
 8001a88:	4665      	mov	r5, ip
 8001a8a:	e57f      	b.n	800158c <__aeabi_dadd+0xf8>
 8001a8c:	464b      	mov	r3, r9
 8001a8e:	464a      	mov	r2, r9
 8001a90:	08c0      	lsrs	r0, r0, #3
 8001a92:	075b      	lsls	r3, r3, #29
 8001a94:	4303      	orrs	r3, r0
 8001a96:	08d1      	lsrs	r1, r2, #3
 8001a98:	e62b      	b.n	80016f2 <__aeabi_dadd+0x25e>
 8001a9a:	464a      	mov	r2, r9
 8001a9c:	08db      	lsrs	r3, r3, #3
 8001a9e:	4302      	orrs	r2, r0
 8001aa0:	d138      	bne.n	8001b14 <__aeabi_dadd+0x680>
 8001aa2:	074a      	lsls	r2, r1, #29
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	08c9      	lsrs	r1, r1, #3
 8001aa8:	e646      	b.n	8001738 <__aeabi_dadd+0x2a4>
 8001aaa:	464b      	mov	r3, r9
 8001aac:	464a      	mov	r2, r9
 8001aae:	08c0      	lsrs	r0, r0, #3
 8001ab0:	075b      	lsls	r3, r3, #29
 8001ab2:	4303      	orrs	r3, r0
 8001ab4:	08d1      	lsrs	r1, r2, #3
 8001ab6:	e61f      	b.n	80016f8 <__aeabi_dadd+0x264>
 8001ab8:	181c      	adds	r4, r3, r0
 8001aba:	429c      	cmp	r4, r3
 8001abc:	419b      	sbcs	r3, r3
 8001abe:	4449      	add	r1, r9
 8001ac0:	468a      	mov	sl, r1
 8001ac2:	425b      	negs	r3, r3
 8001ac4:	449a      	add	sl, r3
 8001ac6:	4653      	mov	r3, sl
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	d400      	bmi.n	8001ace <__aeabi_dadd+0x63a>
 8001acc:	e607      	b.n	80016de <__aeabi_dadd+0x24a>
 8001ace:	4652      	mov	r2, sl
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <__aeabi_dadd+0x6bc>)
 8001ad2:	2601      	movs	r6, #1
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	4692      	mov	sl, r2
 8001ad8:	e601      	b.n	80016de <__aeabi_dadd+0x24a>
 8001ada:	003c      	movs	r4, r7
 8001adc:	000e      	movs	r6, r1
 8001ade:	3c20      	subs	r4, #32
 8001ae0:	40e6      	lsrs	r6, r4
 8001ae2:	2f20      	cmp	r7, #32
 8001ae4:	d003      	beq.n	8001aee <__aeabi_dadd+0x65a>
 8001ae6:	2440      	movs	r4, #64	; 0x40
 8001ae8:	1be4      	subs	r4, r4, r7
 8001aea:	40a1      	lsls	r1, r4
 8001aec:	430b      	orrs	r3, r1
 8001aee:	001c      	movs	r4, r3
 8001af0:	1e63      	subs	r3, r4, #1
 8001af2:	419c      	sbcs	r4, r3
 8001af4:	4334      	orrs	r4, r6
 8001af6:	e65e      	b.n	80017b6 <__aeabi_dadd+0x322>
 8001af8:	4443      	add	r3, r8
 8001afa:	4283      	cmp	r3, r0
 8001afc:	4180      	sbcs	r0, r0
 8001afe:	4449      	add	r1, r9
 8001b00:	468a      	mov	sl, r1
 8001b02:	4240      	negs	r0, r0
 8001b04:	001c      	movs	r4, r3
 8001b06:	4482      	add	sl, r0
 8001b08:	e6bc      	b.n	8001884 <__aeabi_dadd+0x3f0>
 8001b0a:	4653      	mov	r3, sl
 8001b0c:	4323      	orrs	r3, r4
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dadd+0x67e>
 8001b10:	e6a9      	b.n	8001866 <__aeabi_dadd+0x3d2>
 8001b12:	e5e4      	b.n	80016de <__aeabi_dadd+0x24a>
 8001b14:	074a      	lsls	r2, r1, #29
 8001b16:	4313      	orrs	r3, r2
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	08c9      	lsrs	r1, r1, #3
 8001b1c:	0312      	lsls	r2, r2, #12
 8001b1e:	4211      	tst	r1, r2
 8001b20:	d009      	beq.n	8001b36 <__aeabi_dadd+0x6a2>
 8001b22:	4648      	mov	r0, r9
 8001b24:	08c4      	lsrs	r4, r0, #3
 8001b26:	4214      	tst	r4, r2
 8001b28:	d105      	bne.n	8001b36 <__aeabi_dadd+0x6a2>
 8001b2a:	4643      	mov	r3, r8
 8001b2c:	4665      	mov	r5, ip
 8001b2e:	0021      	movs	r1, r4
 8001b30:	08db      	lsrs	r3, r3, #3
 8001b32:	0742      	lsls	r2, r0, #29
 8001b34:	4313      	orrs	r3, r2
 8001b36:	0f5a      	lsrs	r2, r3, #29
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	08db      	lsrs	r3, r3, #3
 8001b3c:	0752      	lsls	r2, r2, #29
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	e5fa      	b.n	8001738 <__aeabi_dadd+0x2a4>
 8001b42:	2300      	movs	r3, #0
 8001b44:	4a01      	ldr	r2, [pc, #4]	; (8001b4c <__aeabi_dadd+0x6b8>)
 8001b46:	001c      	movs	r4, r3
 8001b48:	e540      	b.n	80015cc <__aeabi_dadd+0x138>
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	000007ff 	.word	0x000007ff
 8001b50:	ff7fffff 	.word	0xff7fffff

08001b54 <__aeabi_ddiv>:
 8001b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b56:	4657      	mov	r7, sl
 8001b58:	464e      	mov	r6, r9
 8001b5a:	4645      	mov	r5, r8
 8001b5c:	46de      	mov	lr, fp
 8001b5e:	b5e0      	push	{r5, r6, r7, lr}
 8001b60:	030c      	lsls	r4, r1, #12
 8001b62:	001f      	movs	r7, r3
 8001b64:	004b      	lsls	r3, r1, #1
 8001b66:	4681      	mov	r9, r0
 8001b68:	4692      	mov	sl, r2
 8001b6a:	0005      	movs	r5, r0
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	0b24      	lsrs	r4, r4, #12
 8001b70:	0d5b      	lsrs	r3, r3, #21
 8001b72:	0fce      	lsrs	r6, r1, #31
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d100      	bne.n	8001b7a <__aeabi_ddiv+0x26>
 8001b78:	e152      	b.n	8001e20 <__aeabi_ddiv+0x2cc>
 8001b7a:	4ad2      	ldr	r2, [pc, #840]	; (8001ec4 <__aeabi_ddiv+0x370>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0x2e>
 8001b80:	e16e      	b.n	8001e60 <__aeabi_ddiv+0x30c>
 8001b82:	0f42      	lsrs	r2, r0, #29
 8001b84:	00e4      	lsls	r4, r4, #3
 8001b86:	4314      	orrs	r4, r2
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	0412      	lsls	r2, r2, #16
 8001b8c:	4322      	orrs	r2, r4
 8001b8e:	4690      	mov	r8, r2
 8001b90:	4acd      	ldr	r2, [pc, #820]	; (8001ec8 <__aeabi_ddiv+0x374>)
 8001b92:	00c5      	lsls	r5, r0, #3
 8001b94:	4693      	mov	fp, r2
 8001b96:	449b      	add	fp, r3
 8001b98:	2300      	movs	r3, #0
 8001b9a:	4699      	mov	r9, r3
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	033c      	lsls	r4, r7, #12
 8001ba0:	007b      	lsls	r3, r7, #1
 8001ba2:	4650      	mov	r0, sl
 8001ba4:	0b24      	lsrs	r4, r4, #12
 8001ba6:	0d5b      	lsrs	r3, r3, #21
 8001ba8:	0fff      	lsrs	r7, r7, #31
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_ddiv+0x5c>
 8001bae:	e11a      	b.n	8001de6 <__aeabi_ddiv+0x292>
 8001bb0:	4ac4      	ldr	r2, [pc, #784]	; (8001ec4 <__aeabi_ddiv+0x370>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_ddiv+0x64>
 8001bb6:	e15e      	b.n	8001e76 <__aeabi_ddiv+0x322>
 8001bb8:	0f42      	lsrs	r2, r0, #29
 8001bba:	00e4      	lsls	r4, r4, #3
 8001bbc:	4322      	orrs	r2, r4
 8001bbe:	2480      	movs	r4, #128	; 0x80
 8001bc0:	0424      	lsls	r4, r4, #16
 8001bc2:	4314      	orrs	r4, r2
 8001bc4:	4ac0      	ldr	r2, [pc, #768]	; (8001ec8 <__aeabi_ddiv+0x374>)
 8001bc6:	00c1      	lsls	r1, r0, #3
 8001bc8:	4694      	mov	ip, r2
 8001bca:	465a      	mov	r2, fp
 8001bcc:	4463      	add	r3, ip
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	469b      	mov	fp, r3
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	0033      	movs	r3, r6
 8001bd6:	407b      	eors	r3, r7
 8001bd8:	469a      	mov	sl, r3
 8001bda:	464b      	mov	r3, r9
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d827      	bhi.n	8001c30 <__aeabi_ddiv+0xdc>
 8001be0:	4aba      	ldr	r2, [pc, #744]	; (8001ecc <__aeabi_ddiv+0x378>)
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	58d3      	ldr	r3, [r2, r3]
 8001be6:	469f      	mov	pc, r3
 8001be8:	46b2      	mov	sl, r6
 8001bea:	9b00      	ldr	r3, [sp, #0]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d016      	beq.n	8001c1e <__aeabi_ddiv+0xca>
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_ddiv+0xa2>
 8001bf4:	e287      	b.n	8002106 <__aeabi_ddiv+0x5b2>
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_ddiv+0xa8>
 8001bfa:	e0d5      	b.n	8001da8 <__aeabi_ddiv+0x254>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2500      	movs	r5, #0
 8001c02:	051b      	lsls	r3, r3, #20
 8001c04:	4313      	orrs	r3, r2
 8001c06:	4652      	mov	r2, sl
 8001c08:	07d2      	lsls	r2, r2, #31
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	0028      	movs	r0, r5
 8001c0e:	0019      	movs	r1, r3
 8001c10:	b005      	add	sp, #20
 8001c12:	bcf0      	pop	{r4, r5, r6, r7}
 8001c14:	46bb      	mov	fp, r7
 8001c16:	46b2      	mov	sl, r6
 8001c18:	46a9      	mov	r9, r5
 8001c1a:	46a0      	mov	r8, r4
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2500      	movs	r5, #0
 8001c22:	4ba8      	ldr	r3, [pc, #672]	; (8001ec4 <__aeabi_ddiv+0x370>)
 8001c24:	e7ed      	b.n	8001c02 <__aeabi_ddiv+0xae>
 8001c26:	46ba      	mov	sl, r7
 8001c28:	46a0      	mov	r8, r4
 8001c2a:	000d      	movs	r5, r1
 8001c2c:	9000      	str	r0, [sp, #0]
 8001c2e:	e7dc      	b.n	8001bea <__aeabi_ddiv+0x96>
 8001c30:	4544      	cmp	r4, r8
 8001c32:	d200      	bcs.n	8001c36 <__aeabi_ddiv+0xe2>
 8001c34:	e1c4      	b.n	8001fc0 <__aeabi_ddiv+0x46c>
 8001c36:	d100      	bne.n	8001c3a <__aeabi_ddiv+0xe6>
 8001c38:	e1bf      	b.n	8001fba <__aeabi_ddiv+0x466>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	425b      	negs	r3, r3
 8001c3e:	469c      	mov	ip, r3
 8001c40:	002e      	movs	r6, r5
 8001c42:	4640      	mov	r0, r8
 8001c44:	2500      	movs	r5, #0
 8001c46:	44e3      	add	fp, ip
 8001c48:	0223      	lsls	r3, r4, #8
 8001c4a:	0e0c      	lsrs	r4, r1, #24
 8001c4c:	431c      	orrs	r4, r3
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	4699      	mov	r9, r3
 8001c52:	0423      	lsls	r3, r4, #16
 8001c54:	020a      	lsls	r2, r1, #8
 8001c56:	0c1f      	lsrs	r7, r3, #16
 8001c58:	4649      	mov	r1, r9
 8001c5a:	9200      	str	r2, [sp, #0]
 8001c5c:	9701      	str	r7, [sp, #4]
 8001c5e:	f7fe faff 	bl	8000260 <__aeabi_uidivmod>
 8001c62:	0002      	movs	r2, r0
 8001c64:	437a      	muls	r2, r7
 8001c66:	040b      	lsls	r3, r1, #16
 8001c68:	0c31      	lsrs	r1, r6, #16
 8001c6a:	4680      	mov	r8, r0
 8001c6c:	4319      	orrs	r1, r3
 8001c6e:	428a      	cmp	r2, r1
 8001c70:	d907      	bls.n	8001c82 <__aeabi_ddiv+0x12e>
 8001c72:	2301      	movs	r3, #1
 8001c74:	425b      	negs	r3, r3
 8001c76:	469c      	mov	ip, r3
 8001c78:	1909      	adds	r1, r1, r4
 8001c7a:	44e0      	add	r8, ip
 8001c7c:	428c      	cmp	r4, r1
 8001c7e:	d800      	bhi.n	8001c82 <__aeabi_ddiv+0x12e>
 8001c80:	e201      	b.n	8002086 <__aeabi_ddiv+0x532>
 8001c82:	1a88      	subs	r0, r1, r2
 8001c84:	4649      	mov	r1, r9
 8001c86:	f7fe faeb 	bl	8000260 <__aeabi_uidivmod>
 8001c8a:	9a01      	ldr	r2, [sp, #4]
 8001c8c:	0436      	lsls	r6, r6, #16
 8001c8e:	4342      	muls	r2, r0
 8001c90:	0409      	lsls	r1, r1, #16
 8001c92:	0c36      	lsrs	r6, r6, #16
 8001c94:	0003      	movs	r3, r0
 8001c96:	430e      	orrs	r6, r1
 8001c98:	42b2      	cmp	r2, r6
 8001c9a:	d904      	bls.n	8001ca6 <__aeabi_ddiv+0x152>
 8001c9c:	1936      	adds	r6, r6, r4
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	42b4      	cmp	r4, r6
 8001ca2:	d800      	bhi.n	8001ca6 <__aeabi_ddiv+0x152>
 8001ca4:	e1e9      	b.n	800207a <__aeabi_ddiv+0x526>
 8001ca6:	1ab0      	subs	r0, r6, r2
 8001ca8:	4642      	mov	r2, r8
 8001caa:	9e00      	ldr	r6, [sp, #0]
 8001cac:	0412      	lsls	r2, r2, #16
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	0c33      	lsrs	r3, r6, #16
 8001cb2:	001f      	movs	r7, r3
 8001cb4:	0c11      	lsrs	r1, r2, #16
 8001cb6:	4690      	mov	r8, r2
 8001cb8:	9302      	str	r3, [sp, #8]
 8001cba:	0413      	lsls	r3, r2, #16
 8001cbc:	0432      	lsls	r2, r6, #16
 8001cbe:	0c16      	lsrs	r6, r2, #16
 8001cc0:	0032      	movs	r2, r6
 8001cc2:	0c1b      	lsrs	r3, r3, #16
 8001cc4:	435a      	muls	r2, r3
 8001cc6:	9603      	str	r6, [sp, #12]
 8001cc8:	437b      	muls	r3, r7
 8001cca:	434e      	muls	r6, r1
 8001ccc:	4379      	muls	r1, r7
 8001cce:	0c17      	lsrs	r7, r2, #16
 8001cd0:	46bc      	mov	ip, r7
 8001cd2:	199b      	adds	r3, r3, r6
 8001cd4:	4463      	add	r3, ip
 8001cd6:	429e      	cmp	r6, r3
 8001cd8:	d903      	bls.n	8001ce2 <__aeabi_ddiv+0x18e>
 8001cda:	2680      	movs	r6, #128	; 0x80
 8001cdc:	0276      	lsls	r6, r6, #9
 8001cde:	46b4      	mov	ip, r6
 8001ce0:	4461      	add	r1, ip
 8001ce2:	0c1e      	lsrs	r6, r3, #16
 8001ce4:	1871      	adds	r1, r6, r1
 8001ce6:	0416      	lsls	r6, r2, #16
 8001ce8:	041b      	lsls	r3, r3, #16
 8001cea:	0c36      	lsrs	r6, r6, #16
 8001cec:	199e      	adds	r6, r3, r6
 8001cee:	4288      	cmp	r0, r1
 8001cf0:	d302      	bcc.n	8001cf8 <__aeabi_ddiv+0x1a4>
 8001cf2:	d112      	bne.n	8001d1a <__aeabi_ddiv+0x1c6>
 8001cf4:	42b5      	cmp	r5, r6
 8001cf6:	d210      	bcs.n	8001d1a <__aeabi_ddiv+0x1c6>
 8001cf8:	4643      	mov	r3, r8
 8001cfa:	1e5a      	subs	r2, r3, #1
 8001cfc:	9b00      	ldr	r3, [sp, #0]
 8001cfe:	469c      	mov	ip, r3
 8001d00:	4465      	add	r5, ip
 8001d02:	001f      	movs	r7, r3
 8001d04:	429d      	cmp	r5, r3
 8001d06:	419b      	sbcs	r3, r3
 8001d08:	425b      	negs	r3, r3
 8001d0a:	191b      	adds	r3, r3, r4
 8001d0c:	18c0      	adds	r0, r0, r3
 8001d0e:	4284      	cmp	r4, r0
 8001d10:	d200      	bcs.n	8001d14 <__aeabi_ddiv+0x1c0>
 8001d12:	e19e      	b.n	8002052 <__aeabi_ddiv+0x4fe>
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x1c4>
 8001d16:	e199      	b.n	800204c <__aeabi_ddiv+0x4f8>
 8001d18:	4690      	mov	r8, r2
 8001d1a:	1bae      	subs	r6, r5, r6
 8001d1c:	42b5      	cmp	r5, r6
 8001d1e:	41ad      	sbcs	r5, r5
 8001d20:	1a40      	subs	r0, r0, r1
 8001d22:	426d      	negs	r5, r5
 8001d24:	1b40      	subs	r0, r0, r5
 8001d26:	4284      	cmp	r4, r0
 8001d28:	d100      	bne.n	8001d2c <__aeabi_ddiv+0x1d8>
 8001d2a:	e1d2      	b.n	80020d2 <__aeabi_ddiv+0x57e>
 8001d2c:	4649      	mov	r1, r9
 8001d2e:	f7fe fa97 	bl	8000260 <__aeabi_uidivmod>
 8001d32:	9a01      	ldr	r2, [sp, #4]
 8001d34:	040b      	lsls	r3, r1, #16
 8001d36:	4342      	muls	r2, r0
 8001d38:	0c31      	lsrs	r1, r6, #16
 8001d3a:	0005      	movs	r5, r0
 8001d3c:	4319      	orrs	r1, r3
 8001d3e:	428a      	cmp	r2, r1
 8001d40:	d900      	bls.n	8001d44 <__aeabi_ddiv+0x1f0>
 8001d42:	e16c      	b.n	800201e <__aeabi_ddiv+0x4ca>
 8001d44:	1a88      	subs	r0, r1, r2
 8001d46:	4649      	mov	r1, r9
 8001d48:	f7fe fa8a 	bl	8000260 <__aeabi_uidivmod>
 8001d4c:	9a01      	ldr	r2, [sp, #4]
 8001d4e:	0436      	lsls	r6, r6, #16
 8001d50:	4342      	muls	r2, r0
 8001d52:	0409      	lsls	r1, r1, #16
 8001d54:	0c36      	lsrs	r6, r6, #16
 8001d56:	0003      	movs	r3, r0
 8001d58:	430e      	orrs	r6, r1
 8001d5a:	42b2      	cmp	r2, r6
 8001d5c:	d900      	bls.n	8001d60 <__aeabi_ddiv+0x20c>
 8001d5e:	e153      	b.n	8002008 <__aeabi_ddiv+0x4b4>
 8001d60:	9803      	ldr	r0, [sp, #12]
 8001d62:	1ab6      	subs	r6, r6, r2
 8001d64:	0002      	movs	r2, r0
 8001d66:	042d      	lsls	r5, r5, #16
 8001d68:	431d      	orrs	r5, r3
 8001d6a:	9f02      	ldr	r7, [sp, #8]
 8001d6c:	042b      	lsls	r3, r5, #16
 8001d6e:	0c1b      	lsrs	r3, r3, #16
 8001d70:	435a      	muls	r2, r3
 8001d72:	437b      	muls	r3, r7
 8001d74:	469c      	mov	ip, r3
 8001d76:	0c29      	lsrs	r1, r5, #16
 8001d78:	4348      	muls	r0, r1
 8001d7a:	0c13      	lsrs	r3, r2, #16
 8001d7c:	4484      	add	ip, r0
 8001d7e:	4463      	add	r3, ip
 8001d80:	4379      	muls	r1, r7
 8001d82:	4298      	cmp	r0, r3
 8001d84:	d903      	bls.n	8001d8e <__aeabi_ddiv+0x23a>
 8001d86:	2080      	movs	r0, #128	; 0x80
 8001d88:	0240      	lsls	r0, r0, #9
 8001d8a:	4684      	mov	ip, r0
 8001d8c:	4461      	add	r1, ip
 8001d8e:	0c18      	lsrs	r0, r3, #16
 8001d90:	0412      	lsls	r2, r2, #16
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	0c12      	lsrs	r2, r2, #16
 8001d96:	1840      	adds	r0, r0, r1
 8001d98:	189b      	adds	r3, r3, r2
 8001d9a:	4286      	cmp	r6, r0
 8001d9c:	d200      	bcs.n	8001da0 <__aeabi_ddiv+0x24c>
 8001d9e:	e100      	b.n	8001fa2 <__aeabi_ddiv+0x44e>
 8001da0:	d100      	bne.n	8001da4 <__aeabi_ddiv+0x250>
 8001da2:	e0fb      	b.n	8001f9c <__aeabi_ddiv+0x448>
 8001da4:	2301      	movs	r3, #1
 8001da6:	431d      	orrs	r5, r3
 8001da8:	4b49      	ldr	r3, [pc, #292]	; (8001ed0 <__aeabi_ddiv+0x37c>)
 8001daa:	445b      	add	r3, fp
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	dc00      	bgt.n	8001db2 <__aeabi_ddiv+0x25e>
 8001db0:	e0aa      	b.n	8001f08 <__aeabi_ddiv+0x3b4>
 8001db2:	076a      	lsls	r2, r5, #29
 8001db4:	d000      	beq.n	8001db8 <__aeabi_ddiv+0x264>
 8001db6:	e13d      	b.n	8002034 <__aeabi_ddiv+0x4e0>
 8001db8:	08e9      	lsrs	r1, r5, #3
 8001dba:	4642      	mov	r2, r8
 8001dbc:	01d2      	lsls	r2, r2, #7
 8001dbe:	d506      	bpl.n	8001dce <__aeabi_ddiv+0x27a>
 8001dc0:	4642      	mov	r2, r8
 8001dc2:	4b44      	ldr	r3, [pc, #272]	; (8001ed4 <__aeabi_ddiv+0x380>)
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	4690      	mov	r8, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	445b      	add	r3, fp
 8001dce:	4a42      	ldr	r2, [pc, #264]	; (8001ed8 <__aeabi_ddiv+0x384>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	dd00      	ble.n	8001dd6 <__aeabi_ddiv+0x282>
 8001dd4:	e723      	b.n	8001c1e <__aeabi_ddiv+0xca>
 8001dd6:	4642      	mov	r2, r8
 8001dd8:	055b      	lsls	r3, r3, #21
 8001dda:	0755      	lsls	r5, r2, #29
 8001ddc:	0252      	lsls	r2, r2, #9
 8001dde:	430d      	orrs	r5, r1
 8001de0:	0b12      	lsrs	r2, r2, #12
 8001de2:	0d5b      	lsrs	r3, r3, #21
 8001de4:	e70d      	b.n	8001c02 <__aeabi_ddiv+0xae>
 8001de6:	4651      	mov	r1, sl
 8001de8:	4321      	orrs	r1, r4
 8001dea:	d100      	bne.n	8001dee <__aeabi_ddiv+0x29a>
 8001dec:	e07c      	b.n	8001ee8 <__aeabi_ddiv+0x394>
 8001dee:	2c00      	cmp	r4, #0
 8001df0:	d100      	bne.n	8001df4 <__aeabi_ddiv+0x2a0>
 8001df2:	e0fb      	b.n	8001fec <__aeabi_ddiv+0x498>
 8001df4:	0020      	movs	r0, r4
 8001df6:	f001 fa63 	bl	80032c0 <__clzsi2>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	3a0b      	subs	r2, #11
 8001dfe:	231d      	movs	r3, #29
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	4652      	mov	r2, sl
 8001e04:	0001      	movs	r1, r0
 8001e06:	40da      	lsrs	r2, r3
 8001e08:	4653      	mov	r3, sl
 8001e0a:	3908      	subs	r1, #8
 8001e0c:	408b      	lsls	r3, r1
 8001e0e:	408c      	lsls	r4, r1
 8001e10:	0019      	movs	r1, r3
 8001e12:	4314      	orrs	r4, r2
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <__aeabi_ddiv+0x388>)
 8001e16:	4458      	add	r0, fp
 8001e18:	469b      	mov	fp, r3
 8001e1a:	4483      	add	fp, r0
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	e6d9      	b.n	8001bd4 <__aeabi_ddiv+0x80>
 8001e20:	0003      	movs	r3, r0
 8001e22:	4323      	orrs	r3, r4
 8001e24:	4698      	mov	r8, r3
 8001e26:	d044      	beq.n	8001eb2 <__aeabi_ddiv+0x35e>
 8001e28:	2c00      	cmp	r4, #0
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_ddiv+0x2da>
 8001e2c:	e0cf      	b.n	8001fce <__aeabi_ddiv+0x47a>
 8001e2e:	0020      	movs	r0, r4
 8001e30:	f001 fa46 	bl	80032c0 <__clzsi2>
 8001e34:	0001      	movs	r1, r0
 8001e36:	0002      	movs	r2, r0
 8001e38:	390b      	subs	r1, #11
 8001e3a:	231d      	movs	r3, #29
 8001e3c:	1a5b      	subs	r3, r3, r1
 8001e3e:	4649      	mov	r1, r9
 8001e40:	0010      	movs	r0, r2
 8001e42:	40d9      	lsrs	r1, r3
 8001e44:	3808      	subs	r0, #8
 8001e46:	4084      	lsls	r4, r0
 8001e48:	000b      	movs	r3, r1
 8001e4a:	464d      	mov	r5, r9
 8001e4c:	4323      	orrs	r3, r4
 8001e4e:	4698      	mov	r8, r3
 8001e50:	4085      	lsls	r5, r0
 8001e52:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <__aeabi_ddiv+0x38c>)
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	469b      	mov	fp, r3
 8001e58:	2300      	movs	r3, #0
 8001e5a:	4699      	mov	r9, r3
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	e69e      	b.n	8001b9e <__aeabi_ddiv+0x4a>
 8001e60:	0002      	movs	r2, r0
 8001e62:	4322      	orrs	r2, r4
 8001e64:	4690      	mov	r8, r2
 8001e66:	d11d      	bne.n	8001ea4 <__aeabi_ddiv+0x350>
 8001e68:	2208      	movs	r2, #8
 8001e6a:	469b      	mov	fp, r3
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	2500      	movs	r5, #0
 8001e70:	4691      	mov	r9, r2
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	e693      	b.n	8001b9e <__aeabi_ddiv+0x4a>
 8001e76:	4651      	mov	r1, sl
 8001e78:	4321      	orrs	r1, r4
 8001e7a:	d109      	bne.n	8001e90 <__aeabi_ddiv+0x33c>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	464a      	mov	r2, r9
 8001e80:	431a      	orrs	r2, r3
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <__aeabi_ddiv+0x390>)
 8001e84:	4691      	mov	r9, r2
 8001e86:	469c      	mov	ip, r3
 8001e88:	2400      	movs	r4, #0
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	44e3      	add	fp, ip
 8001e8e:	e6a1      	b.n	8001bd4 <__aeabi_ddiv+0x80>
 8001e90:	2303      	movs	r3, #3
 8001e92:	464a      	mov	r2, r9
 8001e94:	431a      	orrs	r2, r3
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <__aeabi_ddiv+0x390>)
 8001e98:	4691      	mov	r9, r2
 8001e9a:	469c      	mov	ip, r3
 8001e9c:	4651      	mov	r1, sl
 8001e9e:	2003      	movs	r0, #3
 8001ea0:	44e3      	add	fp, ip
 8001ea2:	e697      	b.n	8001bd4 <__aeabi_ddiv+0x80>
 8001ea4:	220c      	movs	r2, #12
 8001ea6:	469b      	mov	fp, r3
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	46a0      	mov	r8, r4
 8001eac:	4691      	mov	r9, r2
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	e675      	b.n	8001b9e <__aeabi_ddiv+0x4a>
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	4699      	mov	r9, r3
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	469b      	mov	fp, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	2500      	movs	r5, #0
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	e66d      	b.n	8001b9e <__aeabi_ddiv+0x4a>
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	000007ff 	.word	0x000007ff
 8001ec8:	fffffc01 	.word	0xfffffc01
 8001ecc:	0801046c 	.word	0x0801046c
 8001ed0:	000003ff 	.word	0x000003ff
 8001ed4:	feffffff 	.word	0xfeffffff
 8001ed8:	000007fe 	.word	0x000007fe
 8001edc:	000003f3 	.word	0x000003f3
 8001ee0:	fffffc0d 	.word	0xfffffc0d
 8001ee4:	fffff801 	.word	0xfffff801
 8001ee8:	464a      	mov	r2, r9
 8001eea:	2301      	movs	r3, #1
 8001eec:	431a      	orrs	r2, r3
 8001eee:	4691      	mov	r9, r2
 8001ef0:	2400      	movs	r4, #0
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	e66e      	b.n	8001bd4 <__aeabi_ddiv+0x80>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2280      	movs	r2, #128	; 0x80
 8001efa:	469a      	mov	sl, r3
 8001efc:	2500      	movs	r5, #0
 8001efe:	4b88      	ldr	r3, [pc, #544]	; (8002120 <__aeabi_ddiv+0x5cc>)
 8001f00:	0312      	lsls	r2, r2, #12
 8001f02:	e67e      	b.n	8001c02 <__aeabi_ddiv+0xae>
 8001f04:	2501      	movs	r5, #1
 8001f06:	426d      	negs	r5, r5
 8001f08:	2201      	movs	r2, #1
 8001f0a:	1ad2      	subs	r2, r2, r3
 8001f0c:	2a38      	cmp	r2, #56	; 0x38
 8001f0e:	dd00      	ble.n	8001f12 <__aeabi_ddiv+0x3be>
 8001f10:	e674      	b.n	8001bfc <__aeabi_ddiv+0xa8>
 8001f12:	2a1f      	cmp	r2, #31
 8001f14:	dc00      	bgt.n	8001f18 <__aeabi_ddiv+0x3c4>
 8001f16:	e0bd      	b.n	8002094 <__aeabi_ddiv+0x540>
 8001f18:	211f      	movs	r1, #31
 8001f1a:	4249      	negs	r1, r1
 8001f1c:	1acb      	subs	r3, r1, r3
 8001f1e:	4641      	mov	r1, r8
 8001f20:	40d9      	lsrs	r1, r3
 8001f22:	000b      	movs	r3, r1
 8001f24:	2a20      	cmp	r2, #32
 8001f26:	d004      	beq.n	8001f32 <__aeabi_ddiv+0x3de>
 8001f28:	4641      	mov	r1, r8
 8001f2a:	4a7e      	ldr	r2, [pc, #504]	; (8002124 <__aeabi_ddiv+0x5d0>)
 8001f2c:	445a      	add	r2, fp
 8001f2e:	4091      	lsls	r1, r2
 8001f30:	430d      	orrs	r5, r1
 8001f32:	0029      	movs	r1, r5
 8001f34:	1e4a      	subs	r2, r1, #1
 8001f36:	4191      	sbcs	r1, r2
 8001f38:	4319      	orrs	r1, r3
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	001d      	movs	r5, r3
 8001f3e:	2200      	movs	r2, #0
 8001f40:	400d      	ands	r5, r1
 8001f42:	420b      	tst	r3, r1
 8001f44:	d100      	bne.n	8001f48 <__aeabi_ddiv+0x3f4>
 8001f46:	e0d0      	b.n	80020ea <__aeabi_ddiv+0x596>
 8001f48:	220f      	movs	r2, #15
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	2a04      	cmp	r2, #4
 8001f50:	d100      	bne.n	8001f54 <__aeabi_ddiv+0x400>
 8001f52:	e0c7      	b.n	80020e4 <__aeabi_ddiv+0x590>
 8001f54:	1d0a      	adds	r2, r1, #4
 8001f56:	428a      	cmp	r2, r1
 8001f58:	4189      	sbcs	r1, r1
 8001f5a:	4249      	negs	r1, r1
 8001f5c:	185b      	adds	r3, r3, r1
 8001f5e:	0011      	movs	r1, r2
 8001f60:	021a      	lsls	r2, r3, #8
 8001f62:	d400      	bmi.n	8001f66 <__aeabi_ddiv+0x412>
 8001f64:	e0be      	b.n	80020e4 <__aeabi_ddiv+0x590>
 8001f66:	2301      	movs	r3, #1
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2500      	movs	r5, #0
 8001f6c:	e649      	b.n	8001c02 <__aeabi_ddiv+0xae>
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	4643      	mov	r3, r8
 8001f72:	0312      	lsls	r2, r2, #12
 8001f74:	4213      	tst	r3, r2
 8001f76:	d008      	beq.n	8001f8a <__aeabi_ddiv+0x436>
 8001f78:	4214      	tst	r4, r2
 8001f7a:	d106      	bne.n	8001f8a <__aeabi_ddiv+0x436>
 8001f7c:	4322      	orrs	r2, r4
 8001f7e:	0312      	lsls	r2, r2, #12
 8001f80:	46ba      	mov	sl, r7
 8001f82:	000d      	movs	r5, r1
 8001f84:	4b66      	ldr	r3, [pc, #408]	; (8002120 <__aeabi_ddiv+0x5cc>)
 8001f86:	0b12      	lsrs	r2, r2, #12
 8001f88:	e63b      	b.n	8001c02 <__aeabi_ddiv+0xae>
 8001f8a:	2280      	movs	r2, #128	; 0x80
 8001f8c:	4643      	mov	r3, r8
 8001f8e:	0312      	lsls	r2, r2, #12
 8001f90:	431a      	orrs	r2, r3
 8001f92:	0312      	lsls	r2, r2, #12
 8001f94:	46b2      	mov	sl, r6
 8001f96:	4b62      	ldr	r3, [pc, #392]	; (8002120 <__aeabi_ddiv+0x5cc>)
 8001f98:	0b12      	lsrs	r2, r2, #12
 8001f9a:	e632      	b.n	8001c02 <__aeabi_ddiv+0xae>
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_ddiv+0x44e>
 8001fa0:	e702      	b.n	8001da8 <__aeabi_ddiv+0x254>
 8001fa2:	19a6      	adds	r6, r4, r6
 8001fa4:	1e6a      	subs	r2, r5, #1
 8001fa6:	42a6      	cmp	r6, r4
 8001fa8:	d200      	bcs.n	8001fac <__aeabi_ddiv+0x458>
 8001faa:	e089      	b.n	80020c0 <__aeabi_ddiv+0x56c>
 8001fac:	4286      	cmp	r6, r0
 8001fae:	d200      	bcs.n	8001fb2 <__aeabi_ddiv+0x45e>
 8001fb0:	e09f      	b.n	80020f2 <__aeabi_ddiv+0x59e>
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_ddiv+0x462>
 8001fb4:	e0af      	b.n	8002116 <__aeabi_ddiv+0x5c2>
 8001fb6:	0015      	movs	r5, r2
 8001fb8:	e6f4      	b.n	8001da4 <__aeabi_ddiv+0x250>
 8001fba:	42a9      	cmp	r1, r5
 8001fbc:	d900      	bls.n	8001fc0 <__aeabi_ddiv+0x46c>
 8001fbe:	e63c      	b.n	8001c3a <__aeabi_ddiv+0xe6>
 8001fc0:	4643      	mov	r3, r8
 8001fc2:	07de      	lsls	r6, r3, #31
 8001fc4:	0858      	lsrs	r0, r3, #1
 8001fc6:	086b      	lsrs	r3, r5, #1
 8001fc8:	431e      	orrs	r6, r3
 8001fca:	07ed      	lsls	r5, r5, #31
 8001fcc:	e63c      	b.n	8001c48 <__aeabi_ddiv+0xf4>
 8001fce:	f001 f977 	bl	80032c0 <__clzsi2>
 8001fd2:	0001      	movs	r1, r0
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	3115      	adds	r1, #21
 8001fd8:	3220      	adds	r2, #32
 8001fda:	291c      	cmp	r1, #28
 8001fdc:	dc00      	bgt.n	8001fe0 <__aeabi_ddiv+0x48c>
 8001fde:	e72c      	b.n	8001e3a <__aeabi_ddiv+0x2e6>
 8001fe0:	464b      	mov	r3, r9
 8001fe2:	3808      	subs	r0, #8
 8001fe4:	4083      	lsls	r3, r0
 8001fe6:	2500      	movs	r5, #0
 8001fe8:	4698      	mov	r8, r3
 8001fea:	e732      	b.n	8001e52 <__aeabi_ddiv+0x2fe>
 8001fec:	f001 f968 	bl	80032c0 <__clzsi2>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	001a      	movs	r2, r3
 8001ff4:	3215      	adds	r2, #21
 8001ff6:	3020      	adds	r0, #32
 8001ff8:	2a1c      	cmp	r2, #28
 8001ffa:	dc00      	bgt.n	8001ffe <__aeabi_ddiv+0x4aa>
 8001ffc:	e6ff      	b.n	8001dfe <__aeabi_ddiv+0x2aa>
 8001ffe:	4654      	mov	r4, sl
 8002000:	3b08      	subs	r3, #8
 8002002:	2100      	movs	r1, #0
 8002004:	409c      	lsls	r4, r3
 8002006:	e705      	b.n	8001e14 <__aeabi_ddiv+0x2c0>
 8002008:	1936      	adds	r6, r6, r4
 800200a:	3b01      	subs	r3, #1
 800200c:	42b4      	cmp	r4, r6
 800200e:	d900      	bls.n	8002012 <__aeabi_ddiv+0x4be>
 8002010:	e6a6      	b.n	8001d60 <__aeabi_ddiv+0x20c>
 8002012:	42b2      	cmp	r2, r6
 8002014:	d800      	bhi.n	8002018 <__aeabi_ddiv+0x4c4>
 8002016:	e6a3      	b.n	8001d60 <__aeabi_ddiv+0x20c>
 8002018:	1e83      	subs	r3, r0, #2
 800201a:	1936      	adds	r6, r6, r4
 800201c:	e6a0      	b.n	8001d60 <__aeabi_ddiv+0x20c>
 800201e:	1909      	adds	r1, r1, r4
 8002020:	3d01      	subs	r5, #1
 8002022:	428c      	cmp	r4, r1
 8002024:	d900      	bls.n	8002028 <__aeabi_ddiv+0x4d4>
 8002026:	e68d      	b.n	8001d44 <__aeabi_ddiv+0x1f0>
 8002028:	428a      	cmp	r2, r1
 800202a:	d800      	bhi.n	800202e <__aeabi_ddiv+0x4da>
 800202c:	e68a      	b.n	8001d44 <__aeabi_ddiv+0x1f0>
 800202e:	1e85      	subs	r5, r0, #2
 8002030:	1909      	adds	r1, r1, r4
 8002032:	e687      	b.n	8001d44 <__aeabi_ddiv+0x1f0>
 8002034:	220f      	movs	r2, #15
 8002036:	402a      	ands	r2, r5
 8002038:	2a04      	cmp	r2, #4
 800203a:	d100      	bne.n	800203e <__aeabi_ddiv+0x4ea>
 800203c:	e6bc      	b.n	8001db8 <__aeabi_ddiv+0x264>
 800203e:	1d29      	adds	r1, r5, #4
 8002040:	42a9      	cmp	r1, r5
 8002042:	41ad      	sbcs	r5, r5
 8002044:	426d      	negs	r5, r5
 8002046:	08c9      	lsrs	r1, r1, #3
 8002048:	44a8      	add	r8, r5
 800204a:	e6b6      	b.n	8001dba <__aeabi_ddiv+0x266>
 800204c:	42af      	cmp	r7, r5
 800204e:	d900      	bls.n	8002052 <__aeabi_ddiv+0x4fe>
 8002050:	e662      	b.n	8001d18 <__aeabi_ddiv+0x1c4>
 8002052:	4281      	cmp	r1, r0
 8002054:	d804      	bhi.n	8002060 <__aeabi_ddiv+0x50c>
 8002056:	d000      	beq.n	800205a <__aeabi_ddiv+0x506>
 8002058:	e65e      	b.n	8001d18 <__aeabi_ddiv+0x1c4>
 800205a:	42ae      	cmp	r6, r5
 800205c:	d800      	bhi.n	8002060 <__aeabi_ddiv+0x50c>
 800205e:	e65b      	b.n	8001d18 <__aeabi_ddiv+0x1c4>
 8002060:	2302      	movs	r3, #2
 8002062:	425b      	negs	r3, r3
 8002064:	469c      	mov	ip, r3
 8002066:	9b00      	ldr	r3, [sp, #0]
 8002068:	44e0      	add	r8, ip
 800206a:	469c      	mov	ip, r3
 800206c:	4465      	add	r5, ip
 800206e:	429d      	cmp	r5, r3
 8002070:	419b      	sbcs	r3, r3
 8002072:	425b      	negs	r3, r3
 8002074:	191b      	adds	r3, r3, r4
 8002076:	18c0      	adds	r0, r0, r3
 8002078:	e64f      	b.n	8001d1a <__aeabi_ddiv+0x1c6>
 800207a:	42b2      	cmp	r2, r6
 800207c:	d800      	bhi.n	8002080 <__aeabi_ddiv+0x52c>
 800207e:	e612      	b.n	8001ca6 <__aeabi_ddiv+0x152>
 8002080:	1e83      	subs	r3, r0, #2
 8002082:	1936      	adds	r6, r6, r4
 8002084:	e60f      	b.n	8001ca6 <__aeabi_ddiv+0x152>
 8002086:	428a      	cmp	r2, r1
 8002088:	d800      	bhi.n	800208c <__aeabi_ddiv+0x538>
 800208a:	e5fa      	b.n	8001c82 <__aeabi_ddiv+0x12e>
 800208c:	1e83      	subs	r3, r0, #2
 800208e:	4698      	mov	r8, r3
 8002090:	1909      	adds	r1, r1, r4
 8002092:	e5f6      	b.n	8001c82 <__aeabi_ddiv+0x12e>
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <__aeabi_ddiv+0x5d4>)
 8002096:	0028      	movs	r0, r5
 8002098:	445b      	add	r3, fp
 800209a:	4641      	mov	r1, r8
 800209c:	409d      	lsls	r5, r3
 800209e:	4099      	lsls	r1, r3
 80020a0:	40d0      	lsrs	r0, r2
 80020a2:	1e6b      	subs	r3, r5, #1
 80020a4:	419d      	sbcs	r5, r3
 80020a6:	4643      	mov	r3, r8
 80020a8:	4301      	orrs	r1, r0
 80020aa:	4329      	orrs	r1, r5
 80020ac:	40d3      	lsrs	r3, r2
 80020ae:	074a      	lsls	r2, r1, #29
 80020b0:	d100      	bne.n	80020b4 <__aeabi_ddiv+0x560>
 80020b2:	e755      	b.n	8001f60 <__aeabi_ddiv+0x40c>
 80020b4:	220f      	movs	r2, #15
 80020b6:	400a      	ands	r2, r1
 80020b8:	2a04      	cmp	r2, #4
 80020ba:	d000      	beq.n	80020be <__aeabi_ddiv+0x56a>
 80020bc:	e74a      	b.n	8001f54 <__aeabi_ddiv+0x400>
 80020be:	e74f      	b.n	8001f60 <__aeabi_ddiv+0x40c>
 80020c0:	0015      	movs	r5, r2
 80020c2:	4286      	cmp	r6, r0
 80020c4:	d000      	beq.n	80020c8 <__aeabi_ddiv+0x574>
 80020c6:	e66d      	b.n	8001da4 <__aeabi_ddiv+0x250>
 80020c8:	9a00      	ldr	r2, [sp, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d000      	beq.n	80020d0 <__aeabi_ddiv+0x57c>
 80020ce:	e669      	b.n	8001da4 <__aeabi_ddiv+0x250>
 80020d0:	e66a      	b.n	8001da8 <__aeabi_ddiv+0x254>
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <__aeabi_ddiv+0x5d8>)
 80020d4:	445b      	add	r3, fp
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	dc00      	bgt.n	80020dc <__aeabi_ddiv+0x588>
 80020da:	e713      	b.n	8001f04 <__aeabi_ddiv+0x3b0>
 80020dc:	2501      	movs	r5, #1
 80020de:	2100      	movs	r1, #0
 80020e0:	44a8      	add	r8, r5
 80020e2:	e66a      	b.n	8001dba <__aeabi_ddiv+0x266>
 80020e4:	075d      	lsls	r5, r3, #29
 80020e6:	025b      	lsls	r3, r3, #9
 80020e8:	0b1a      	lsrs	r2, r3, #12
 80020ea:	08c9      	lsrs	r1, r1, #3
 80020ec:	2300      	movs	r3, #0
 80020ee:	430d      	orrs	r5, r1
 80020f0:	e587      	b.n	8001c02 <__aeabi_ddiv+0xae>
 80020f2:	9900      	ldr	r1, [sp, #0]
 80020f4:	3d02      	subs	r5, #2
 80020f6:	004a      	lsls	r2, r1, #1
 80020f8:	428a      	cmp	r2, r1
 80020fa:	41bf      	sbcs	r7, r7
 80020fc:	427f      	negs	r7, r7
 80020fe:	193f      	adds	r7, r7, r4
 8002100:	19f6      	adds	r6, r6, r7
 8002102:	9200      	str	r2, [sp, #0]
 8002104:	e7dd      	b.n	80020c2 <__aeabi_ddiv+0x56e>
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	4643      	mov	r3, r8
 800210a:	0312      	lsls	r2, r2, #12
 800210c:	431a      	orrs	r2, r3
 800210e:	0312      	lsls	r2, r2, #12
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <__aeabi_ddiv+0x5cc>)
 8002112:	0b12      	lsrs	r2, r2, #12
 8002114:	e575      	b.n	8001c02 <__aeabi_ddiv+0xae>
 8002116:	9900      	ldr	r1, [sp, #0]
 8002118:	4299      	cmp	r1, r3
 800211a:	d3ea      	bcc.n	80020f2 <__aeabi_ddiv+0x59e>
 800211c:	0015      	movs	r5, r2
 800211e:	e7d3      	b.n	80020c8 <__aeabi_ddiv+0x574>
 8002120:	000007ff 	.word	0x000007ff
 8002124:	0000043e 	.word	0x0000043e
 8002128:	0000041e 	.word	0x0000041e
 800212c:	000003ff 	.word	0x000003ff

08002130 <__eqdf2>:
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002132:	464e      	mov	r6, r9
 8002134:	4645      	mov	r5, r8
 8002136:	46de      	mov	lr, fp
 8002138:	4657      	mov	r7, sl
 800213a:	4690      	mov	r8, r2
 800213c:	b5e0      	push	{r5, r6, r7, lr}
 800213e:	0017      	movs	r7, r2
 8002140:	031a      	lsls	r2, r3, #12
 8002142:	0b12      	lsrs	r2, r2, #12
 8002144:	0005      	movs	r5, r0
 8002146:	4684      	mov	ip, r0
 8002148:	4819      	ldr	r0, [pc, #100]	; (80021b0 <__eqdf2+0x80>)
 800214a:	030e      	lsls	r6, r1, #12
 800214c:	004c      	lsls	r4, r1, #1
 800214e:	4691      	mov	r9, r2
 8002150:	005a      	lsls	r2, r3, #1
 8002152:	0fdb      	lsrs	r3, r3, #31
 8002154:	469b      	mov	fp, r3
 8002156:	0b36      	lsrs	r6, r6, #12
 8002158:	0d64      	lsrs	r4, r4, #21
 800215a:	0fc9      	lsrs	r1, r1, #31
 800215c:	0d52      	lsrs	r2, r2, #21
 800215e:	4284      	cmp	r4, r0
 8002160:	d019      	beq.n	8002196 <__eqdf2+0x66>
 8002162:	4282      	cmp	r2, r0
 8002164:	d010      	beq.n	8002188 <__eqdf2+0x58>
 8002166:	2001      	movs	r0, #1
 8002168:	4294      	cmp	r4, r2
 800216a:	d10e      	bne.n	800218a <__eqdf2+0x5a>
 800216c:	454e      	cmp	r6, r9
 800216e:	d10c      	bne.n	800218a <__eqdf2+0x5a>
 8002170:	2001      	movs	r0, #1
 8002172:	45c4      	cmp	ip, r8
 8002174:	d109      	bne.n	800218a <__eqdf2+0x5a>
 8002176:	4559      	cmp	r1, fp
 8002178:	d017      	beq.n	80021aa <__eqdf2+0x7a>
 800217a:	2c00      	cmp	r4, #0
 800217c:	d105      	bne.n	800218a <__eqdf2+0x5a>
 800217e:	0030      	movs	r0, r6
 8002180:	4328      	orrs	r0, r5
 8002182:	1e43      	subs	r3, r0, #1
 8002184:	4198      	sbcs	r0, r3
 8002186:	e000      	b.n	800218a <__eqdf2+0x5a>
 8002188:	2001      	movs	r0, #1
 800218a:	bcf0      	pop	{r4, r5, r6, r7}
 800218c:	46bb      	mov	fp, r7
 800218e:	46b2      	mov	sl, r6
 8002190:	46a9      	mov	r9, r5
 8002192:	46a0      	mov	r8, r4
 8002194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002196:	0033      	movs	r3, r6
 8002198:	2001      	movs	r0, #1
 800219a:	432b      	orrs	r3, r5
 800219c:	d1f5      	bne.n	800218a <__eqdf2+0x5a>
 800219e:	42a2      	cmp	r2, r4
 80021a0:	d1f3      	bne.n	800218a <__eqdf2+0x5a>
 80021a2:	464b      	mov	r3, r9
 80021a4:	433b      	orrs	r3, r7
 80021a6:	d1f0      	bne.n	800218a <__eqdf2+0x5a>
 80021a8:	e7e2      	b.n	8002170 <__eqdf2+0x40>
 80021aa:	2000      	movs	r0, #0
 80021ac:	e7ed      	b.n	800218a <__eqdf2+0x5a>
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	000007ff 	.word	0x000007ff

080021b4 <__gedf2>:
 80021b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b6:	4647      	mov	r7, r8
 80021b8:	46ce      	mov	lr, r9
 80021ba:	0004      	movs	r4, r0
 80021bc:	0018      	movs	r0, r3
 80021be:	0016      	movs	r6, r2
 80021c0:	031b      	lsls	r3, r3, #12
 80021c2:	0b1b      	lsrs	r3, r3, #12
 80021c4:	4d2d      	ldr	r5, [pc, #180]	; (800227c <__gedf2+0xc8>)
 80021c6:	004a      	lsls	r2, r1, #1
 80021c8:	4699      	mov	r9, r3
 80021ca:	b580      	push	{r7, lr}
 80021cc:	0043      	lsls	r3, r0, #1
 80021ce:	030f      	lsls	r7, r1, #12
 80021d0:	46a4      	mov	ip, r4
 80021d2:	46b0      	mov	r8, r6
 80021d4:	0b3f      	lsrs	r7, r7, #12
 80021d6:	0d52      	lsrs	r2, r2, #21
 80021d8:	0fc9      	lsrs	r1, r1, #31
 80021da:	0d5b      	lsrs	r3, r3, #21
 80021dc:	0fc0      	lsrs	r0, r0, #31
 80021de:	42aa      	cmp	r2, r5
 80021e0:	d021      	beq.n	8002226 <__gedf2+0x72>
 80021e2:	42ab      	cmp	r3, r5
 80021e4:	d013      	beq.n	800220e <__gedf2+0x5a>
 80021e6:	2a00      	cmp	r2, #0
 80021e8:	d122      	bne.n	8002230 <__gedf2+0x7c>
 80021ea:	433c      	orrs	r4, r7
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <__gedf2+0x42>
 80021f0:	464d      	mov	r5, r9
 80021f2:	432e      	orrs	r6, r5
 80021f4:	d022      	beq.n	800223c <__gedf2+0x88>
 80021f6:	2c00      	cmp	r4, #0
 80021f8:	d010      	beq.n	800221c <__gedf2+0x68>
 80021fa:	4281      	cmp	r1, r0
 80021fc:	d022      	beq.n	8002244 <__gedf2+0x90>
 80021fe:	2002      	movs	r0, #2
 8002200:	3901      	subs	r1, #1
 8002202:	4008      	ands	r0, r1
 8002204:	3801      	subs	r0, #1
 8002206:	bcc0      	pop	{r6, r7}
 8002208:	46b9      	mov	r9, r7
 800220a:	46b0      	mov	r8, r6
 800220c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800220e:	464d      	mov	r5, r9
 8002210:	432e      	orrs	r6, r5
 8002212:	d129      	bne.n	8002268 <__gedf2+0xb4>
 8002214:	2a00      	cmp	r2, #0
 8002216:	d1f0      	bne.n	80021fa <__gedf2+0x46>
 8002218:	433c      	orrs	r4, r7
 800221a:	d1ee      	bne.n	80021fa <__gedf2+0x46>
 800221c:	2800      	cmp	r0, #0
 800221e:	d1f2      	bne.n	8002206 <__gedf2+0x52>
 8002220:	2001      	movs	r0, #1
 8002222:	4240      	negs	r0, r0
 8002224:	e7ef      	b.n	8002206 <__gedf2+0x52>
 8002226:	003d      	movs	r5, r7
 8002228:	4325      	orrs	r5, r4
 800222a:	d11d      	bne.n	8002268 <__gedf2+0xb4>
 800222c:	4293      	cmp	r3, r2
 800222e:	d0ee      	beq.n	800220e <__gedf2+0x5a>
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1e2      	bne.n	80021fa <__gedf2+0x46>
 8002234:	464c      	mov	r4, r9
 8002236:	4326      	orrs	r6, r4
 8002238:	d1df      	bne.n	80021fa <__gedf2+0x46>
 800223a:	e7e0      	b.n	80021fe <__gedf2+0x4a>
 800223c:	2000      	movs	r0, #0
 800223e:	2c00      	cmp	r4, #0
 8002240:	d0e1      	beq.n	8002206 <__gedf2+0x52>
 8002242:	e7dc      	b.n	80021fe <__gedf2+0x4a>
 8002244:	429a      	cmp	r2, r3
 8002246:	dc0a      	bgt.n	800225e <__gedf2+0xaa>
 8002248:	dbe8      	blt.n	800221c <__gedf2+0x68>
 800224a:	454f      	cmp	r7, r9
 800224c:	d8d7      	bhi.n	80021fe <__gedf2+0x4a>
 800224e:	d00e      	beq.n	800226e <__gedf2+0xba>
 8002250:	2000      	movs	r0, #0
 8002252:	454f      	cmp	r7, r9
 8002254:	d2d7      	bcs.n	8002206 <__gedf2+0x52>
 8002256:	2900      	cmp	r1, #0
 8002258:	d0e2      	beq.n	8002220 <__gedf2+0x6c>
 800225a:	0008      	movs	r0, r1
 800225c:	e7d3      	b.n	8002206 <__gedf2+0x52>
 800225e:	4243      	negs	r3, r0
 8002260:	4158      	adcs	r0, r3
 8002262:	0040      	lsls	r0, r0, #1
 8002264:	3801      	subs	r0, #1
 8002266:	e7ce      	b.n	8002206 <__gedf2+0x52>
 8002268:	2002      	movs	r0, #2
 800226a:	4240      	negs	r0, r0
 800226c:	e7cb      	b.n	8002206 <__gedf2+0x52>
 800226e:	45c4      	cmp	ip, r8
 8002270:	d8c5      	bhi.n	80021fe <__gedf2+0x4a>
 8002272:	2000      	movs	r0, #0
 8002274:	45c4      	cmp	ip, r8
 8002276:	d2c6      	bcs.n	8002206 <__gedf2+0x52>
 8002278:	e7ed      	b.n	8002256 <__gedf2+0xa2>
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	000007ff 	.word	0x000007ff

08002280 <__ledf2>:
 8002280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002282:	4647      	mov	r7, r8
 8002284:	46ce      	mov	lr, r9
 8002286:	0004      	movs	r4, r0
 8002288:	0018      	movs	r0, r3
 800228a:	0016      	movs	r6, r2
 800228c:	031b      	lsls	r3, r3, #12
 800228e:	0b1b      	lsrs	r3, r3, #12
 8002290:	4d2c      	ldr	r5, [pc, #176]	; (8002344 <__ledf2+0xc4>)
 8002292:	004a      	lsls	r2, r1, #1
 8002294:	4699      	mov	r9, r3
 8002296:	b580      	push	{r7, lr}
 8002298:	0043      	lsls	r3, r0, #1
 800229a:	030f      	lsls	r7, r1, #12
 800229c:	46a4      	mov	ip, r4
 800229e:	46b0      	mov	r8, r6
 80022a0:	0b3f      	lsrs	r7, r7, #12
 80022a2:	0d52      	lsrs	r2, r2, #21
 80022a4:	0fc9      	lsrs	r1, r1, #31
 80022a6:	0d5b      	lsrs	r3, r3, #21
 80022a8:	0fc0      	lsrs	r0, r0, #31
 80022aa:	42aa      	cmp	r2, r5
 80022ac:	d00d      	beq.n	80022ca <__ledf2+0x4a>
 80022ae:	42ab      	cmp	r3, r5
 80022b0:	d010      	beq.n	80022d4 <__ledf2+0x54>
 80022b2:	2a00      	cmp	r2, #0
 80022b4:	d127      	bne.n	8002306 <__ledf2+0x86>
 80022b6:	433c      	orrs	r4, r7
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d111      	bne.n	80022e0 <__ledf2+0x60>
 80022bc:	464d      	mov	r5, r9
 80022be:	432e      	orrs	r6, r5
 80022c0:	d10e      	bne.n	80022e0 <__ledf2+0x60>
 80022c2:	2000      	movs	r0, #0
 80022c4:	2c00      	cmp	r4, #0
 80022c6:	d015      	beq.n	80022f4 <__ledf2+0x74>
 80022c8:	e00e      	b.n	80022e8 <__ledf2+0x68>
 80022ca:	003d      	movs	r5, r7
 80022cc:	4325      	orrs	r5, r4
 80022ce:	d110      	bne.n	80022f2 <__ledf2+0x72>
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d118      	bne.n	8002306 <__ledf2+0x86>
 80022d4:	464d      	mov	r5, r9
 80022d6:	432e      	orrs	r6, r5
 80022d8:	d10b      	bne.n	80022f2 <__ledf2+0x72>
 80022da:	2a00      	cmp	r2, #0
 80022dc:	d102      	bne.n	80022e4 <__ledf2+0x64>
 80022de:	433c      	orrs	r4, r7
 80022e0:	2c00      	cmp	r4, #0
 80022e2:	d00b      	beq.n	80022fc <__ledf2+0x7c>
 80022e4:	4281      	cmp	r1, r0
 80022e6:	d014      	beq.n	8002312 <__ledf2+0x92>
 80022e8:	2002      	movs	r0, #2
 80022ea:	3901      	subs	r1, #1
 80022ec:	4008      	ands	r0, r1
 80022ee:	3801      	subs	r0, #1
 80022f0:	e000      	b.n	80022f4 <__ledf2+0x74>
 80022f2:	2002      	movs	r0, #2
 80022f4:	bcc0      	pop	{r6, r7}
 80022f6:	46b9      	mov	r9, r7
 80022f8:	46b0      	mov	r8, r6
 80022fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022fc:	2800      	cmp	r0, #0
 80022fe:	d1f9      	bne.n	80022f4 <__ledf2+0x74>
 8002300:	2001      	movs	r0, #1
 8002302:	4240      	negs	r0, r0
 8002304:	e7f6      	b.n	80022f4 <__ledf2+0x74>
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1ec      	bne.n	80022e4 <__ledf2+0x64>
 800230a:	464c      	mov	r4, r9
 800230c:	4326      	orrs	r6, r4
 800230e:	d1e9      	bne.n	80022e4 <__ledf2+0x64>
 8002310:	e7ea      	b.n	80022e8 <__ledf2+0x68>
 8002312:	429a      	cmp	r2, r3
 8002314:	dd04      	ble.n	8002320 <__ledf2+0xa0>
 8002316:	4243      	negs	r3, r0
 8002318:	4158      	adcs	r0, r3
 800231a:	0040      	lsls	r0, r0, #1
 800231c:	3801      	subs	r0, #1
 800231e:	e7e9      	b.n	80022f4 <__ledf2+0x74>
 8002320:	429a      	cmp	r2, r3
 8002322:	dbeb      	blt.n	80022fc <__ledf2+0x7c>
 8002324:	454f      	cmp	r7, r9
 8002326:	d8df      	bhi.n	80022e8 <__ledf2+0x68>
 8002328:	d006      	beq.n	8002338 <__ledf2+0xb8>
 800232a:	2000      	movs	r0, #0
 800232c:	454f      	cmp	r7, r9
 800232e:	d2e1      	bcs.n	80022f4 <__ledf2+0x74>
 8002330:	2900      	cmp	r1, #0
 8002332:	d0e5      	beq.n	8002300 <__ledf2+0x80>
 8002334:	0008      	movs	r0, r1
 8002336:	e7dd      	b.n	80022f4 <__ledf2+0x74>
 8002338:	45c4      	cmp	ip, r8
 800233a:	d8d5      	bhi.n	80022e8 <__ledf2+0x68>
 800233c:	2000      	movs	r0, #0
 800233e:	45c4      	cmp	ip, r8
 8002340:	d2d8      	bcs.n	80022f4 <__ledf2+0x74>
 8002342:	e7f5      	b.n	8002330 <__ledf2+0xb0>
 8002344:	000007ff 	.word	0x000007ff

08002348 <__aeabi_dmul>:
 8002348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800234a:	4645      	mov	r5, r8
 800234c:	46de      	mov	lr, fp
 800234e:	4657      	mov	r7, sl
 8002350:	464e      	mov	r6, r9
 8002352:	b5e0      	push	{r5, r6, r7, lr}
 8002354:	001f      	movs	r7, r3
 8002356:	030b      	lsls	r3, r1, #12
 8002358:	0b1b      	lsrs	r3, r3, #12
 800235a:	469b      	mov	fp, r3
 800235c:	004d      	lsls	r5, r1, #1
 800235e:	0fcb      	lsrs	r3, r1, #31
 8002360:	0004      	movs	r4, r0
 8002362:	4691      	mov	r9, r2
 8002364:	4698      	mov	r8, r3
 8002366:	b087      	sub	sp, #28
 8002368:	0d6d      	lsrs	r5, r5, #21
 800236a:	d100      	bne.n	800236e <__aeabi_dmul+0x26>
 800236c:	e1cd      	b.n	800270a <__aeabi_dmul+0x3c2>
 800236e:	4bce      	ldr	r3, [pc, #824]	; (80026a8 <__aeabi_dmul+0x360>)
 8002370:	429d      	cmp	r5, r3
 8002372:	d100      	bne.n	8002376 <__aeabi_dmul+0x2e>
 8002374:	e1e9      	b.n	800274a <__aeabi_dmul+0x402>
 8002376:	465a      	mov	r2, fp
 8002378:	0f43      	lsrs	r3, r0, #29
 800237a:	00d2      	lsls	r2, r2, #3
 800237c:	4313      	orrs	r3, r2
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	0412      	lsls	r2, r2, #16
 8002382:	431a      	orrs	r2, r3
 8002384:	00c3      	lsls	r3, r0, #3
 8002386:	469a      	mov	sl, r3
 8002388:	4bc8      	ldr	r3, [pc, #800]	; (80026ac <__aeabi_dmul+0x364>)
 800238a:	4693      	mov	fp, r2
 800238c:	469c      	mov	ip, r3
 800238e:	2300      	movs	r3, #0
 8002390:	2600      	movs	r6, #0
 8002392:	4465      	add	r5, ip
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	033c      	lsls	r4, r7, #12
 8002398:	007b      	lsls	r3, r7, #1
 800239a:	4648      	mov	r0, r9
 800239c:	0b24      	lsrs	r4, r4, #12
 800239e:	0d5b      	lsrs	r3, r3, #21
 80023a0:	0fff      	lsrs	r7, r7, #31
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dmul+0x60>
 80023a6:	e189      	b.n	80026bc <__aeabi_dmul+0x374>
 80023a8:	4abf      	ldr	r2, [pc, #764]	; (80026a8 <__aeabi_dmul+0x360>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d019      	beq.n	80023e2 <__aeabi_dmul+0x9a>
 80023ae:	0f42      	lsrs	r2, r0, #29
 80023b0:	00e4      	lsls	r4, r4, #3
 80023b2:	4322      	orrs	r2, r4
 80023b4:	2480      	movs	r4, #128	; 0x80
 80023b6:	0424      	lsls	r4, r4, #16
 80023b8:	4314      	orrs	r4, r2
 80023ba:	4abc      	ldr	r2, [pc, #752]	; (80026ac <__aeabi_dmul+0x364>)
 80023bc:	2100      	movs	r1, #0
 80023be:	4694      	mov	ip, r2
 80023c0:	4642      	mov	r2, r8
 80023c2:	4463      	add	r3, ip
 80023c4:	195b      	adds	r3, r3, r5
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	9b01      	ldr	r3, [sp, #4]
 80023ca:	407a      	eors	r2, r7
 80023cc:	3301      	adds	r3, #1
 80023ce:	00c0      	lsls	r0, r0, #3
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	9302      	str	r3, [sp, #8]
 80023d4:	2e0a      	cmp	r6, #10
 80023d6:	dd1c      	ble.n	8002412 <__aeabi_dmul+0xca>
 80023d8:	003a      	movs	r2, r7
 80023da:	2e0b      	cmp	r6, #11
 80023dc:	d05e      	beq.n	800249c <__aeabi_dmul+0x154>
 80023de:	4647      	mov	r7, r8
 80023e0:	e056      	b.n	8002490 <__aeabi_dmul+0x148>
 80023e2:	4649      	mov	r1, r9
 80023e4:	4bb0      	ldr	r3, [pc, #704]	; (80026a8 <__aeabi_dmul+0x360>)
 80023e6:	4321      	orrs	r1, r4
 80023e8:	18eb      	adds	r3, r5, r3
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	2900      	cmp	r1, #0
 80023ee:	d12a      	bne.n	8002446 <__aeabi_dmul+0xfe>
 80023f0:	2080      	movs	r0, #128	; 0x80
 80023f2:	2202      	movs	r2, #2
 80023f4:	0100      	lsls	r0, r0, #4
 80023f6:	002b      	movs	r3, r5
 80023f8:	4684      	mov	ip, r0
 80023fa:	4316      	orrs	r6, r2
 80023fc:	4642      	mov	r2, r8
 80023fe:	4463      	add	r3, ip
 8002400:	407a      	eors	r2, r7
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	9302      	str	r3, [sp, #8]
 8002406:	2e0a      	cmp	r6, #10
 8002408:	dd00      	ble.n	800240c <__aeabi_dmul+0xc4>
 800240a:	e231      	b.n	8002870 <__aeabi_dmul+0x528>
 800240c:	2000      	movs	r0, #0
 800240e:	2400      	movs	r4, #0
 8002410:	2102      	movs	r1, #2
 8002412:	2e02      	cmp	r6, #2
 8002414:	dc26      	bgt.n	8002464 <__aeabi_dmul+0x11c>
 8002416:	3e01      	subs	r6, #1
 8002418:	2e01      	cmp	r6, #1
 800241a:	d852      	bhi.n	80024c2 <__aeabi_dmul+0x17a>
 800241c:	2902      	cmp	r1, #2
 800241e:	d04c      	beq.n	80024ba <__aeabi_dmul+0x172>
 8002420:	2901      	cmp	r1, #1
 8002422:	d000      	beq.n	8002426 <__aeabi_dmul+0xde>
 8002424:	e118      	b.n	8002658 <__aeabi_dmul+0x310>
 8002426:	2300      	movs	r3, #0
 8002428:	2400      	movs	r4, #0
 800242a:	2500      	movs	r5, #0
 800242c:	051b      	lsls	r3, r3, #20
 800242e:	4323      	orrs	r3, r4
 8002430:	07d2      	lsls	r2, r2, #31
 8002432:	4313      	orrs	r3, r2
 8002434:	0028      	movs	r0, r5
 8002436:	0019      	movs	r1, r3
 8002438:	b007      	add	sp, #28
 800243a:	bcf0      	pop	{r4, r5, r6, r7}
 800243c:	46bb      	mov	fp, r7
 800243e:	46b2      	mov	sl, r6
 8002440:	46a9      	mov	r9, r5
 8002442:	46a0      	mov	r8, r4
 8002444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	2203      	movs	r2, #3
 800244a:	0109      	lsls	r1, r1, #4
 800244c:	002b      	movs	r3, r5
 800244e:	468c      	mov	ip, r1
 8002450:	4316      	orrs	r6, r2
 8002452:	4642      	mov	r2, r8
 8002454:	4463      	add	r3, ip
 8002456:	407a      	eors	r2, r7
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	9302      	str	r3, [sp, #8]
 800245c:	2e0a      	cmp	r6, #10
 800245e:	dd00      	ble.n	8002462 <__aeabi_dmul+0x11a>
 8002460:	e228      	b.n	80028b4 <__aeabi_dmul+0x56c>
 8002462:	2103      	movs	r1, #3
 8002464:	2501      	movs	r5, #1
 8002466:	40b5      	lsls	r5, r6
 8002468:	46ac      	mov	ip, r5
 800246a:	26a6      	movs	r6, #166	; 0xa6
 800246c:	4663      	mov	r3, ip
 800246e:	00f6      	lsls	r6, r6, #3
 8002470:	4035      	ands	r5, r6
 8002472:	4233      	tst	r3, r6
 8002474:	d10b      	bne.n	800248e <__aeabi_dmul+0x146>
 8002476:	2690      	movs	r6, #144	; 0x90
 8002478:	00b6      	lsls	r6, r6, #2
 800247a:	4233      	tst	r3, r6
 800247c:	d118      	bne.n	80024b0 <__aeabi_dmul+0x168>
 800247e:	3eb9      	subs	r6, #185	; 0xb9
 8002480:	3eff      	subs	r6, #255	; 0xff
 8002482:	421e      	tst	r6, r3
 8002484:	d01d      	beq.n	80024c2 <__aeabi_dmul+0x17a>
 8002486:	46a3      	mov	fp, r4
 8002488:	4682      	mov	sl, r0
 800248a:	9100      	str	r1, [sp, #0]
 800248c:	e000      	b.n	8002490 <__aeabi_dmul+0x148>
 800248e:	0017      	movs	r7, r2
 8002490:	9900      	ldr	r1, [sp, #0]
 8002492:	003a      	movs	r2, r7
 8002494:	2902      	cmp	r1, #2
 8002496:	d010      	beq.n	80024ba <__aeabi_dmul+0x172>
 8002498:	465c      	mov	r4, fp
 800249a:	4650      	mov	r0, sl
 800249c:	2903      	cmp	r1, #3
 800249e:	d1bf      	bne.n	8002420 <__aeabi_dmul+0xd8>
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	031b      	lsls	r3, r3, #12
 80024a4:	431c      	orrs	r4, r3
 80024a6:	0324      	lsls	r4, r4, #12
 80024a8:	0005      	movs	r5, r0
 80024aa:	4b7f      	ldr	r3, [pc, #508]	; (80026a8 <__aeabi_dmul+0x360>)
 80024ac:	0b24      	lsrs	r4, r4, #12
 80024ae:	e7bd      	b.n	800242c <__aeabi_dmul+0xe4>
 80024b0:	2480      	movs	r4, #128	; 0x80
 80024b2:	2200      	movs	r2, #0
 80024b4:	4b7c      	ldr	r3, [pc, #496]	; (80026a8 <__aeabi_dmul+0x360>)
 80024b6:	0324      	lsls	r4, r4, #12
 80024b8:	e7b8      	b.n	800242c <__aeabi_dmul+0xe4>
 80024ba:	2400      	movs	r4, #0
 80024bc:	2500      	movs	r5, #0
 80024be:	4b7a      	ldr	r3, [pc, #488]	; (80026a8 <__aeabi_dmul+0x360>)
 80024c0:	e7b4      	b.n	800242c <__aeabi_dmul+0xe4>
 80024c2:	4653      	mov	r3, sl
 80024c4:	041e      	lsls	r6, r3, #16
 80024c6:	0c36      	lsrs	r6, r6, #16
 80024c8:	0c1f      	lsrs	r7, r3, #16
 80024ca:	0033      	movs	r3, r6
 80024cc:	0c01      	lsrs	r1, r0, #16
 80024ce:	0400      	lsls	r0, r0, #16
 80024d0:	0c00      	lsrs	r0, r0, #16
 80024d2:	4343      	muls	r3, r0
 80024d4:	4698      	mov	r8, r3
 80024d6:	0003      	movs	r3, r0
 80024d8:	437b      	muls	r3, r7
 80024da:	4699      	mov	r9, r3
 80024dc:	0033      	movs	r3, r6
 80024de:	434b      	muls	r3, r1
 80024e0:	469c      	mov	ip, r3
 80024e2:	4643      	mov	r3, r8
 80024e4:	000d      	movs	r5, r1
 80024e6:	0c1b      	lsrs	r3, r3, #16
 80024e8:	469a      	mov	sl, r3
 80024ea:	437d      	muls	r5, r7
 80024ec:	44cc      	add	ip, r9
 80024ee:	44d4      	add	ip, sl
 80024f0:	9500      	str	r5, [sp, #0]
 80024f2:	45e1      	cmp	r9, ip
 80024f4:	d904      	bls.n	8002500 <__aeabi_dmul+0x1b8>
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	025b      	lsls	r3, r3, #9
 80024fa:	4699      	mov	r9, r3
 80024fc:	444d      	add	r5, r9
 80024fe:	9500      	str	r5, [sp, #0]
 8002500:	4663      	mov	r3, ip
 8002502:	0c1b      	lsrs	r3, r3, #16
 8002504:	001d      	movs	r5, r3
 8002506:	4663      	mov	r3, ip
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	469c      	mov	ip, r3
 800250c:	4643      	mov	r3, r8
 800250e:	041b      	lsls	r3, r3, #16
 8002510:	0c1b      	lsrs	r3, r3, #16
 8002512:	4698      	mov	r8, r3
 8002514:	4663      	mov	r3, ip
 8002516:	4443      	add	r3, r8
 8002518:	9303      	str	r3, [sp, #12]
 800251a:	0c23      	lsrs	r3, r4, #16
 800251c:	4698      	mov	r8, r3
 800251e:	0033      	movs	r3, r6
 8002520:	0424      	lsls	r4, r4, #16
 8002522:	0c24      	lsrs	r4, r4, #16
 8002524:	4363      	muls	r3, r4
 8002526:	469c      	mov	ip, r3
 8002528:	0023      	movs	r3, r4
 800252a:	437b      	muls	r3, r7
 800252c:	4699      	mov	r9, r3
 800252e:	4643      	mov	r3, r8
 8002530:	435e      	muls	r6, r3
 8002532:	435f      	muls	r7, r3
 8002534:	444e      	add	r6, r9
 8002536:	4663      	mov	r3, ip
 8002538:	46b2      	mov	sl, r6
 800253a:	0c1e      	lsrs	r6, r3, #16
 800253c:	4456      	add	r6, sl
 800253e:	45b1      	cmp	r9, r6
 8002540:	d903      	bls.n	800254a <__aeabi_dmul+0x202>
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	025b      	lsls	r3, r3, #9
 8002546:	4699      	mov	r9, r3
 8002548:	444f      	add	r7, r9
 800254a:	0c33      	lsrs	r3, r6, #16
 800254c:	4699      	mov	r9, r3
 800254e:	003b      	movs	r3, r7
 8002550:	444b      	add	r3, r9
 8002552:	9305      	str	r3, [sp, #20]
 8002554:	4663      	mov	r3, ip
 8002556:	46ac      	mov	ip, r5
 8002558:	041f      	lsls	r7, r3, #16
 800255a:	0c3f      	lsrs	r7, r7, #16
 800255c:	0436      	lsls	r6, r6, #16
 800255e:	19f6      	adds	r6, r6, r7
 8002560:	44b4      	add	ip, r6
 8002562:	4663      	mov	r3, ip
 8002564:	9304      	str	r3, [sp, #16]
 8002566:	465b      	mov	r3, fp
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	469c      	mov	ip, r3
 800256c:	465b      	mov	r3, fp
 800256e:	041f      	lsls	r7, r3, #16
 8002570:	0c3f      	lsrs	r7, r7, #16
 8002572:	003b      	movs	r3, r7
 8002574:	4343      	muls	r3, r0
 8002576:	4699      	mov	r9, r3
 8002578:	4663      	mov	r3, ip
 800257a:	4343      	muls	r3, r0
 800257c:	469a      	mov	sl, r3
 800257e:	464b      	mov	r3, r9
 8002580:	4660      	mov	r0, ip
 8002582:	0c1b      	lsrs	r3, r3, #16
 8002584:	469b      	mov	fp, r3
 8002586:	4348      	muls	r0, r1
 8002588:	4379      	muls	r1, r7
 800258a:	4451      	add	r1, sl
 800258c:	4459      	add	r1, fp
 800258e:	458a      	cmp	sl, r1
 8002590:	d903      	bls.n	800259a <__aeabi_dmul+0x252>
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	025b      	lsls	r3, r3, #9
 8002596:	469a      	mov	sl, r3
 8002598:	4450      	add	r0, sl
 800259a:	0c0b      	lsrs	r3, r1, #16
 800259c:	469a      	mov	sl, r3
 800259e:	464b      	mov	r3, r9
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	0c1b      	lsrs	r3, r3, #16
 80025a4:	4699      	mov	r9, r3
 80025a6:	003b      	movs	r3, r7
 80025a8:	4363      	muls	r3, r4
 80025aa:	0409      	lsls	r1, r1, #16
 80025ac:	4645      	mov	r5, r8
 80025ae:	4449      	add	r1, r9
 80025b0:	4699      	mov	r9, r3
 80025b2:	4663      	mov	r3, ip
 80025b4:	435c      	muls	r4, r3
 80025b6:	436b      	muls	r3, r5
 80025b8:	469c      	mov	ip, r3
 80025ba:	464b      	mov	r3, r9
 80025bc:	0c1b      	lsrs	r3, r3, #16
 80025be:	4698      	mov	r8, r3
 80025c0:	436f      	muls	r7, r5
 80025c2:	193f      	adds	r7, r7, r4
 80025c4:	4447      	add	r7, r8
 80025c6:	4450      	add	r0, sl
 80025c8:	42bc      	cmp	r4, r7
 80025ca:	d903      	bls.n	80025d4 <__aeabi_dmul+0x28c>
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	025b      	lsls	r3, r3, #9
 80025d0:	4698      	mov	r8, r3
 80025d2:	44c4      	add	ip, r8
 80025d4:	9b04      	ldr	r3, [sp, #16]
 80025d6:	9d00      	ldr	r5, [sp, #0]
 80025d8:	4698      	mov	r8, r3
 80025da:	4445      	add	r5, r8
 80025dc:	42b5      	cmp	r5, r6
 80025de:	41b6      	sbcs	r6, r6
 80025e0:	4273      	negs	r3, r6
 80025e2:	4698      	mov	r8, r3
 80025e4:	464b      	mov	r3, r9
 80025e6:	041e      	lsls	r6, r3, #16
 80025e8:	9b05      	ldr	r3, [sp, #20]
 80025ea:	043c      	lsls	r4, r7, #16
 80025ec:	4699      	mov	r9, r3
 80025ee:	0c36      	lsrs	r6, r6, #16
 80025f0:	19a4      	adds	r4, r4, r6
 80025f2:	444c      	add	r4, r9
 80025f4:	46a1      	mov	r9, r4
 80025f6:	4683      	mov	fp, r0
 80025f8:	186e      	adds	r6, r5, r1
 80025fa:	44c1      	add	r9, r8
 80025fc:	428e      	cmp	r6, r1
 80025fe:	4189      	sbcs	r1, r1
 8002600:	44cb      	add	fp, r9
 8002602:	465d      	mov	r5, fp
 8002604:	4249      	negs	r1, r1
 8002606:	186d      	adds	r5, r5, r1
 8002608:	429c      	cmp	r4, r3
 800260a:	41a4      	sbcs	r4, r4
 800260c:	45c1      	cmp	r9, r8
 800260e:	419b      	sbcs	r3, r3
 8002610:	4583      	cmp	fp, r0
 8002612:	4180      	sbcs	r0, r0
 8002614:	428d      	cmp	r5, r1
 8002616:	4189      	sbcs	r1, r1
 8002618:	425b      	negs	r3, r3
 800261a:	4264      	negs	r4, r4
 800261c:	431c      	orrs	r4, r3
 800261e:	4240      	negs	r0, r0
 8002620:	9b03      	ldr	r3, [sp, #12]
 8002622:	4249      	negs	r1, r1
 8002624:	4301      	orrs	r1, r0
 8002626:	0270      	lsls	r0, r6, #9
 8002628:	0c3f      	lsrs	r7, r7, #16
 800262a:	4318      	orrs	r0, r3
 800262c:	19e4      	adds	r4, r4, r7
 800262e:	1e47      	subs	r7, r0, #1
 8002630:	41b8      	sbcs	r0, r7
 8002632:	1864      	adds	r4, r4, r1
 8002634:	4464      	add	r4, ip
 8002636:	0df6      	lsrs	r6, r6, #23
 8002638:	0261      	lsls	r1, r4, #9
 800263a:	4330      	orrs	r0, r6
 800263c:	0dec      	lsrs	r4, r5, #23
 800263e:	026e      	lsls	r6, r5, #9
 8002640:	430c      	orrs	r4, r1
 8002642:	4330      	orrs	r0, r6
 8002644:	01c9      	lsls	r1, r1, #7
 8002646:	d400      	bmi.n	800264a <__aeabi_dmul+0x302>
 8002648:	e0f1      	b.n	800282e <__aeabi_dmul+0x4e6>
 800264a:	2101      	movs	r1, #1
 800264c:	0843      	lsrs	r3, r0, #1
 800264e:	4001      	ands	r1, r0
 8002650:	430b      	orrs	r3, r1
 8002652:	07e0      	lsls	r0, r4, #31
 8002654:	4318      	orrs	r0, r3
 8002656:	0864      	lsrs	r4, r4, #1
 8002658:	4915      	ldr	r1, [pc, #84]	; (80026b0 <__aeabi_dmul+0x368>)
 800265a:	9b02      	ldr	r3, [sp, #8]
 800265c:	468c      	mov	ip, r1
 800265e:	4463      	add	r3, ip
 8002660:	2b00      	cmp	r3, #0
 8002662:	dc00      	bgt.n	8002666 <__aeabi_dmul+0x31e>
 8002664:	e097      	b.n	8002796 <__aeabi_dmul+0x44e>
 8002666:	0741      	lsls	r1, r0, #29
 8002668:	d009      	beq.n	800267e <__aeabi_dmul+0x336>
 800266a:	210f      	movs	r1, #15
 800266c:	4001      	ands	r1, r0
 800266e:	2904      	cmp	r1, #4
 8002670:	d005      	beq.n	800267e <__aeabi_dmul+0x336>
 8002672:	1d01      	adds	r1, r0, #4
 8002674:	4281      	cmp	r1, r0
 8002676:	4180      	sbcs	r0, r0
 8002678:	4240      	negs	r0, r0
 800267a:	1824      	adds	r4, r4, r0
 800267c:	0008      	movs	r0, r1
 800267e:	01e1      	lsls	r1, r4, #7
 8002680:	d506      	bpl.n	8002690 <__aeabi_dmul+0x348>
 8002682:	2180      	movs	r1, #128	; 0x80
 8002684:	00c9      	lsls	r1, r1, #3
 8002686:	468c      	mov	ip, r1
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <__aeabi_dmul+0x36c>)
 800268a:	401c      	ands	r4, r3
 800268c:	9b02      	ldr	r3, [sp, #8]
 800268e:	4463      	add	r3, ip
 8002690:	4909      	ldr	r1, [pc, #36]	; (80026b8 <__aeabi_dmul+0x370>)
 8002692:	428b      	cmp	r3, r1
 8002694:	dd00      	ble.n	8002698 <__aeabi_dmul+0x350>
 8002696:	e710      	b.n	80024ba <__aeabi_dmul+0x172>
 8002698:	0761      	lsls	r1, r4, #29
 800269a:	08c5      	lsrs	r5, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	430d      	orrs	r5, r1
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e6c1      	b.n	800242c <__aeabi_dmul+0xe4>
 80026a8:	000007ff 	.word	0x000007ff
 80026ac:	fffffc01 	.word	0xfffffc01
 80026b0:	000003ff 	.word	0x000003ff
 80026b4:	feffffff 	.word	0xfeffffff
 80026b8:	000007fe 	.word	0x000007fe
 80026bc:	464b      	mov	r3, r9
 80026be:	4323      	orrs	r3, r4
 80026c0:	d059      	beq.n	8002776 <__aeabi_dmul+0x42e>
 80026c2:	2c00      	cmp	r4, #0
 80026c4:	d100      	bne.n	80026c8 <__aeabi_dmul+0x380>
 80026c6:	e0a3      	b.n	8002810 <__aeabi_dmul+0x4c8>
 80026c8:	0020      	movs	r0, r4
 80026ca:	f000 fdf9 	bl	80032c0 <__clzsi2>
 80026ce:	0001      	movs	r1, r0
 80026d0:	0003      	movs	r3, r0
 80026d2:	390b      	subs	r1, #11
 80026d4:	221d      	movs	r2, #29
 80026d6:	1a52      	subs	r2, r2, r1
 80026d8:	4649      	mov	r1, r9
 80026da:	0018      	movs	r0, r3
 80026dc:	40d1      	lsrs	r1, r2
 80026de:	464a      	mov	r2, r9
 80026e0:	3808      	subs	r0, #8
 80026e2:	4082      	lsls	r2, r0
 80026e4:	4084      	lsls	r4, r0
 80026e6:	0010      	movs	r0, r2
 80026e8:	430c      	orrs	r4, r1
 80026ea:	4a74      	ldr	r2, [pc, #464]	; (80028bc <__aeabi_dmul+0x574>)
 80026ec:	1aeb      	subs	r3, r5, r3
 80026ee:	4694      	mov	ip, r2
 80026f0:	4642      	mov	r2, r8
 80026f2:	4463      	add	r3, ip
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	9b01      	ldr	r3, [sp, #4]
 80026f8:	407a      	eors	r2, r7
 80026fa:	3301      	adds	r3, #1
 80026fc:	2100      	movs	r1, #0
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	9302      	str	r3, [sp, #8]
 8002702:	2e0a      	cmp	r6, #10
 8002704:	dd00      	ble.n	8002708 <__aeabi_dmul+0x3c0>
 8002706:	e667      	b.n	80023d8 <__aeabi_dmul+0x90>
 8002708:	e683      	b.n	8002412 <__aeabi_dmul+0xca>
 800270a:	465b      	mov	r3, fp
 800270c:	4303      	orrs	r3, r0
 800270e:	469a      	mov	sl, r3
 8002710:	d02a      	beq.n	8002768 <__aeabi_dmul+0x420>
 8002712:	465b      	mov	r3, fp
 8002714:	2b00      	cmp	r3, #0
 8002716:	d06d      	beq.n	80027f4 <__aeabi_dmul+0x4ac>
 8002718:	4658      	mov	r0, fp
 800271a:	f000 fdd1 	bl	80032c0 <__clzsi2>
 800271e:	0001      	movs	r1, r0
 8002720:	0003      	movs	r3, r0
 8002722:	390b      	subs	r1, #11
 8002724:	221d      	movs	r2, #29
 8002726:	1a52      	subs	r2, r2, r1
 8002728:	0021      	movs	r1, r4
 800272a:	0018      	movs	r0, r3
 800272c:	465d      	mov	r5, fp
 800272e:	40d1      	lsrs	r1, r2
 8002730:	3808      	subs	r0, #8
 8002732:	4085      	lsls	r5, r0
 8002734:	000a      	movs	r2, r1
 8002736:	4084      	lsls	r4, r0
 8002738:	432a      	orrs	r2, r5
 800273a:	4693      	mov	fp, r2
 800273c:	46a2      	mov	sl, r4
 800273e:	4d5f      	ldr	r5, [pc, #380]	; (80028bc <__aeabi_dmul+0x574>)
 8002740:	2600      	movs	r6, #0
 8002742:	1aed      	subs	r5, r5, r3
 8002744:	2300      	movs	r3, #0
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	e625      	b.n	8002396 <__aeabi_dmul+0x4e>
 800274a:	465b      	mov	r3, fp
 800274c:	4303      	orrs	r3, r0
 800274e:	469a      	mov	sl, r3
 8002750:	d105      	bne.n	800275e <__aeabi_dmul+0x416>
 8002752:	2300      	movs	r3, #0
 8002754:	469b      	mov	fp, r3
 8002756:	3302      	adds	r3, #2
 8002758:	2608      	movs	r6, #8
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	e61b      	b.n	8002396 <__aeabi_dmul+0x4e>
 800275e:	2303      	movs	r3, #3
 8002760:	4682      	mov	sl, r0
 8002762:	260c      	movs	r6, #12
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	e616      	b.n	8002396 <__aeabi_dmul+0x4e>
 8002768:	2300      	movs	r3, #0
 800276a:	469b      	mov	fp, r3
 800276c:	3301      	adds	r3, #1
 800276e:	2604      	movs	r6, #4
 8002770:	2500      	movs	r5, #0
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	e60f      	b.n	8002396 <__aeabi_dmul+0x4e>
 8002776:	4642      	mov	r2, r8
 8002778:	3301      	adds	r3, #1
 800277a:	9501      	str	r5, [sp, #4]
 800277c:	431e      	orrs	r6, r3
 800277e:	9b01      	ldr	r3, [sp, #4]
 8002780:	407a      	eors	r2, r7
 8002782:	3301      	adds	r3, #1
 8002784:	2400      	movs	r4, #0
 8002786:	2000      	movs	r0, #0
 8002788:	2101      	movs	r1, #1
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	9302      	str	r3, [sp, #8]
 800278e:	2e0a      	cmp	r6, #10
 8002790:	dd00      	ble.n	8002794 <__aeabi_dmul+0x44c>
 8002792:	e621      	b.n	80023d8 <__aeabi_dmul+0x90>
 8002794:	e63d      	b.n	8002412 <__aeabi_dmul+0xca>
 8002796:	2101      	movs	r1, #1
 8002798:	1ac9      	subs	r1, r1, r3
 800279a:	2938      	cmp	r1, #56	; 0x38
 800279c:	dd00      	ble.n	80027a0 <__aeabi_dmul+0x458>
 800279e:	e642      	b.n	8002426 <__aeabi_dmul+0xde>
 80027a0:	291f      	cmp	r1, #31
 80027a2:	dd47      	ble.n	8002834 <__aeabi_dmul+0x4ec>
 80027a4:	261f      	movs	r6, #31
 80027a6:	0025      	movs	r5, r4
 80027a8:	4276      	negs	r6, r6
 80027aa:	1af3      	subs	r3, r6, r3
 80027ac:	40dd      	lsrs	r5, r3
 80027ae:	002b      	movs	r3, r5
 80027b0:	2920      	cmp	r1, #32
 80027b2:	d005      	beq.n	80027c0 <__aeabi_dmul+0x478>
 80027b4:	4942      	ldr	r1, [pc, #264]	; (80028c0 <__aeabi_dmul+0x578>)
 80027b6:	9d02      	ldr	r5, [sp, #8]
 80027b8:	468c      	mov	ip, r1
 80027ba:	4465      	add	r5, ip
 80027bc:	40ac      	lsls	r4, r5
 80027be:	4320      	orrs	r0, r4
 80027c0:	1e41      	subs	r1, r0, #1
 80027c2:	4188      	sbcs	r0, r1
 80027c4:	4318      	orrs	r0, r3
 80027c6:	2307      	movs	r3, #7
 80027c8:	001d      	movs	r5, r3
 80027ca:	2400      	movs	r4, #0
 80027cc:	4005      	ands	r5, r0
 80027ce:	4203      	tst	r3, r0
 80027d0:	d04a      	beq.n	8002868 <__aeabi_dmul+0x520>
 80027d2:	230f      	movs	r3, #15
 80027d4:	2400      	movs	r4, #0
 80027d6:	4003      	ands	r3, r0
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d042      	beq.n	8002862 <__aeabi_dmul+0x51a>
 80027dc:	1d03      	adds	r3, r0, #4
 80027de:	4283      	cmp	r3, r0
 80027e0:	4180      	sbcs	r0, r0
 80027e2:	4240      	negs	r0, r0
 80027e4:	1824      	adds	r4, r4, r0
 80027e6:	0018      	movs	r0, r3
 80027e8:	0223      	lsls	r3, r4, #8
 80027ea:	d53a      	bpl.n	8002862 <__aeabi_dmul+0x51a>
 80027ec:	2301      	movs	r3, #1
 80027ee:	2400      	movs	r4, #0
 80027f0:	2500      	movs	r5, #0
 80027f2:	e61b      	b.n	800242c <__aeabi_dmul+0xe4>
 80027f4:	f000 fd64 	bl	80032c0 <__clzsi2>
 80027f8:	0001      	movs	r1, r0
 80027fa:	0003      	movs	r3, r0
 80027fc:	3115      	adds	r1, #21
 80027fe:	3320      	adds	r3, #32
 8002800:	291c      	cmp	r1, #28
 8002802:	dd8f      	ble.n	8002724 <__aeabi_dmul+0x3dc>
 8002804:	3808      	subs	r0, #8
 8002806:	2200      	movs	r2, #0
 8002808:	4084      	lsls	r4, r0
 800280a:	4692      	mov	sl, r2
 800280c:	46a3      	mov	fp, r4
 800280e:	e796      	b.n	800273e <__aeabi_dmul+0x3f6>
 8002810:	f000 fd56 	bl	80032c0 <__clzsi2>
 8002814:	0001      	movs	r1, r0
 8002816:	0003      	movs	r3, r0
 8002818:	3115      	adds	r1, #21
 800281a:	3320      	adds	r3, #32
 800281c:	291c      	cmp	r1, #28
 800281e:	dc00      	bgt.n	8002822 <__aeabi_dmul+0x4da>
 8002820:	e758      	b.n	80026d4 <__aeabi_dmul+0x38c>
 8002822:	0002      	movs	r2, r0
 8002824:	464c      	mov	r4, r9
 8002826:	3a08      	subs	r2, #8
 8002828:	2000      	movs	r0, #0
 800282a:	4094      	lsls	r4, r2
 800282c:	e75d      	b.n	80026ea <__aeabi_dmul+0x3a2>
 800282e:	9b01      	ldr	r3, [sp, #4]
 8002830:	9302      	str	r3, [sp, #8]
 8002832:	e711      	b.n	8002658 <__aeabi_dmul+0x310>
 8002834:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <__aeabi_dmul+0x57c>)
 8002836:	0026      	movs	r6, r4
 8002838:	469c      	mov	ip, r3
 800283a:	0003      	movs	r3, r0
 800283c:	9d02      	ldr	r5, [sp, #8]
 800283e:	40cb      	lsrs	r3, r1
 8002840:	4465      	add	r5, ip
 8002842:	40ae      	lsls	r6, r5
 8002844:	431e      	orrs	r6, r3
 8002846:	0003      	movs	r3, r0
 8002848:	40ab      	lsls	r3, r5
 800284a:	1e58      	subs	r0, r3, #1
 800284c:	4183      	sbcs	r3, r0
 800284e:	0030      	movs	r0, r6
 8002850:	4318      	orrs	r0, r3
 8002852:	40cc      	lsrs	r4, r1
 8002854:	0743      	lsls	r3, r0, #29
 8002856:	d0c7      	beq.n	80027e8 <__aeabi_dmul+0x4a0>
 8002858:	230f      	movs	r3, #15
 800285a:	4003      	ands	r3, r0
 800285c:	2b04      	cmp	r3, #4
 800285e:	d1bd      	bne.n	80027dc <__aeabi_dmul+0x494>
 8002860:	e7c2      	b.n	80027e8 <__aeabi_dmul+0x4a0>
 8002862:	0765      	lsls	r5, r4, #29
 8002864:	0264      	lsls	r4, r4, #9
 8002866:	0b24      	lsrs	r4, r4, #12
 8002868:	08c0      	lsrs	r0, r0, #3
 800286a:	2300      	movs	r3, #0
 800286c:	4305      	orrs	r5, r0
 800286e:	e5dd      	b.n	800242c <__aeabi_dmul+0xe4>
 8002870:	2500      	movs	r5, #0
 8002872:	2302      	movs	r3, #2
 8002874:	2e0f      	cmp	r6, #15
 8002876:	d10c      	bne.n	8002892 <__aeabi_dmul+0x54a>
 8002878:	2480      	movs	r4, #128	; 0x80
 800287a:	465b      	mov	r3, fp
 800287c:	0324      	lsls	r4, r4, #12
 800287e:	4223      	tst	r3, r4
 8002880:	d00e      	beq.n	80028a0 <__aeabi_dmul+0x558>
 8002882:	4221      	tst	r1, r4
 8002884:	d10c      	bne.n	80028a0 <__aeabi_dmul+0x558>
 8002886:	430c      	orrs	r4, r1
 8002888:	0324      	lsls	r4, r4, #12
 800288a:	003a      	movs	r2, r7
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <__aeabi_dmul+0x580>)
 800288e:	0b24      	lsrs	r4, r4, #12
 8002890:	e5cc      	b.n	800242c <__aeabi_dmul+0xe4>
 8002892:	2e0b      	cmp	r6, #11
 8002894:	d000      	beq.n	8002898 <__aeabi_dmul+0x550>
 8002896:	e5a2      	b.n	80023de <__aeabi_dmul+0x96>
 8002898:	468b      	mov	fp, r1
 800289a:	46aa      	mov	sl, r5
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	e5f7      	b.n	8002490 <__aeabi_dmul+0x148>
 80028a0:	2480      	movs	r4, #128	; 0x80
 80028a2:	465b      	mov	r3, fp
 80028a4:	0324      	lsls	r4, r4, #12
 80028a6:	431c      	orrs	r4, r3
 80028a8:	0324      	lsls	r4, r4, #12
 80028aa:	4642      	mov	r2, r8
 80028ac:	4655      	mov	r5, sl
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <__aeabi_dmul+0x580>)
 80028b0:	0b24      	lsrs	r4, r4, #12
 80028b2:	e5bb      	b.n	800242c <__aeabi_dmul+0xe4>
 80028b4:	464d      	mov	r5, r9
 80028b6:	0021      	movs	r1, r4
 80028b8:	2303      	movs	r3, #3
 80028ba:	e7db      	b.n	8002874 <__aeabi_dmul+0x52c>
 80028bc:	fffffc0d 	.word	0xfffffc0d
 80028c0:	0000043e 	.word	0x0000043e
 80028c4:	0000041e 	.word	0x0000041e
 80028c8:	000007ff 	.word	0x000007ff

080028cc <__aeabi_dsub>:
 80028cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ce:	4657      	mov	r7, sl
 80028d0:	464e      	mov	r6, r9
 80028d2:	4645      	mov	r5, r8
 80028d4:	46de      	mov	lr, fp
 80028d6:	b5e0      	push	{r5, r6, r7, lr}
 80028d8:	000d      	movs	r5, r1
 80028da:	0004      	movs	r4, r0
 80028dc:	0019      	movs	r1, r3
 80028de:	0010      	movs	r0, r2
 80028e0:	032b      	lsls	r3, r5, #12
 80028e2:	0a5b      	lsrs	r3, r3, #9
 80028e4:	0f62      	lsrs	r2, r4, #29
 80028e6:	431a      	orrs	r2, r3
 80028e8:	00e3      	lsls	r3, r4, #3
 80028ea:	030c      	lsls	r4, r1, #12
 80028ec:	0a64      	lsrs	r4, r4, #9
 80028ee:	0f47      	lsrs	r7, r0, #29
 80028f0:	4327      	orrs	r7, r4
 80028f2:	4cd0      	ldr	r4, [pc, #832]	; (8002c34 <__aeabi_dsub+0x368>)
 80028f4:	006e      	lsls	r6, r5, #1
 80028f6:	4691      	mov	r9, r2
 80028f8:	b083      	sub	sp, #12
 80028fa:	004a      	lsls	r2, r1, #1
 80028fc:	00c0      	lsls	r0, r0, #3
 80028fe:	4698      	mov	r8, r3
 8002900:	46a2      	mov	sl, r4
 8002902:	0d76      	lsrs	r6, r6, #21
 8002904:	0fed      	lsrs	r5, r5, #31
 8002906:	0d52      	lsrs	r2, r2, #21
 8002908:	0fc9      	lsrs	r1, r1, #31
 800290a:	9001      	str	r0, [sp, #4]
 800290c:	42a2      	cmp	r2, r4
 800290e:	d100      	bne.n	8002912 <__aeabi_dsub+0x46>
 8002910:	e0b9      	b.n	8002a86 <__aeabi_dsub+0x1ba>
 8002912:	2401      	movs	r4, #1
 8002914:	4061      	eors	r1, r4
 8002916:	468b      	mov	fp, r1
 8002918:	428d      	cmp	r5, r1
 800291a:	d100      	bne.n	800291e <__aeabi_dsub+0x52>
 800291c:	e08d      	b.n	8002a3a <__aeabi_dsub+0x16e>
 800291e:	1ab4      	subs	r4, r6, r2
 8002920:	46a4      	mov	ip, r4
 8002922:	2c00      	cmp	r4, #0
 8002924:	dc00      	bgt.n	8002928 <__aeabi_dsub+0x5c>
 8002926:	e0b7      	b.n	8002a98 <__aeabi_dsub+0x1cc>
 8002928:	2a00      	cmp	r2, #0
 800292a:	d100      	bne.n	800292e <__aeabi_dsub+0x62>
 800292c:	e0cb      	b.n	8002ac6 <__aeabi_dsub+0x1fa>
 800292e:	4ac1      	ldr	r2, [pc, #772]	; (8002c34 <__aeabi_dsub+0x368>)
 8002930:	4296      	cmp	r6, r2
 8002932:	d100      	bne.n	8002936 <__aeabi_dsub+0x6a>
 8002934:	e186      	b.n	8002c44 <__aeabi_dsub+0x378>
 8002936:	2280      	movs	r2, #128	; 0x80
 8002938:	0412      	lsls	r2, r2, #16
 800293a:	4317      	orrs	r7, r2
 800293c:	4662      	mov	r2, ip
 800293e:	2a38      	cmp	r2, #56	; 0x38
 8002940:	dd00      	ble.n	8002944 <__aeabi_dsub+0x78>
 8002942:	e1a4      	b.n	8002c8e <__aeabi_dsub+0x3c2>
 8002944:	2a1f      	cmp	r2, #31
 8002946:	dd00      	ble.n	800294a <__aeabi_dsub+0x7e>
 8002948:	e21d      	b.n	8002d86 <__aeabi_dsub+0x4ba>
 800294a:	4661      	mov	r1, ip
 800294c:	2220      	movs	r2, #32
 800294e:	003c      	movs	r4, r7
 8002950:	1a52      	subs	r2, r2, r1
 8002952:	0001      	movs	r1, r0
 8002954:	4090      	lsls	r0, r2
 8002956:	4094      	lsls	r4, r2
 8002958:	1e42      	subs	r2, r0, #1
 800295a:	4190      	sbcs	r0, r2
 800295c:	4662      	mov	r2, ip
 800295e:	46a0      	mov	r8, r4
 8002960:	4664      	mov	r4, ip
 8002962:	40d7      	lsrs	r7, r2
 8002964:	464a      	mov	r2, r9
 8002966:	40e1      	lsrs	r1, r4
 8002968:	4644      	mov	r4, r8
 800296a:	1bd2      	subs	r2, r2, r7
 800296c:	4691      	mov	r9, r2
 800296e:	430c      	orrs	r4, r1
 8002970:	4304      	orrs	r4, r0
 8002972:	1b1c      	subs	r4, r3, r4
 8002974:	42a3      	cmp	r3, r4
 8002976:	4192      	sbcs	r2, r2
 8002978:	464b      	mov	r3, r9
 800297a:	4252      	negs	r2, r2
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	469a      	mov	sl, r3
 8002980:	4653      	mov	r3, sl
 8002982:	021b      	lsls	r3, r3, #8
 8002984:	d400      	bmi.n	8002988 <__aeabi_dsub+0xbc>
 8002986:	e12b      	b.n	8002be0 <__aeabi_dsub+0x314>
 8002988:	4653      	mov	r3, sl
 800298a:	025a      	lsls	r2, r3, #9
 800298c:	0a53      	lsrs	r3, r2, #9
 800298e:	469a      	mov	sl, r3
 8002990:	4653      	mov	r3, sl
 8002992:	2b00      	cmp	r3, #0
 8002994:	d100      	bne.n	8002998 <__aeabi_dsub+0xcc>
 8002996:	e166      	b.n	8002c66 <__aeabi_dsub+0x39a>
 8002998:	4650      	mov	r0, sl
 800299a:	f000 fc91 	bl	80032c0 <__clzsi2>
 800299e:	0003      	movs	r3, r0
 80029a0:	3b08      	subs	r3, #8
 80029a2:	2220      	movs	r2, #32
 80029a4:	0020      	movs	r0, r4
 80029a6:	1ad2      	subs	r2, r2, r3
 80029a8:	4651      	mov	r1, sl
 80029aa:	40d0      	lsrs	r0, r2
 80029ac:	4099      	lsls	r1, r3
 80029ae:	0002      	movs	r2, r0
 80029b0:	409c      	lsls	r4, r3
 80029b2:	430a      	orrs	r2, r1
 80029b4:	429e      	cmp	r6, r3
 80029b6:	dd00      	ble.n	80029ba <__aeabi_dsub+0xee>
 80029b8:	e164      	b.n	8002c84 <__aeabi_dsub+0x3b8>
 80029ba:	1b9b      	subs	r3, r3, r6
 80029bc:	1c59      	adds	r1, r3, #1
 80029be:	291f      	cmp	r1, #31
 80029c0:	dd00      	ble.n	80029c4 <__aeabi_dsub+0xf8>
 80029c2:	e0fe      	b.n	8002bc2 <__aeabi_dsub+0x2f6>
 80029c4:	2320      	movs	r3, #32
 80029c6:	0010      	movs	r0, r2
 80029c8:	0026      	movs	r6, r4
 80029ca:	1a5b      	subs	r3, r3, r1
 80029cc:	409c      	lsls	r4, r3
 80029ce:	4098      	lsls	r0, r3
 80029d0:	40ce      	lsrs	r6, r1
 80029d2:	40ca      	lsrs	r2, r1
 80029d4:	1e63      	subs	r3, r4, #1
 80029d6:	419c      	sbcs	r4, r3
 80029d8:	4330      	orrs	r0, r6
 80029da:	4692      	mov	sl, r2
 80029dc:	2600      	movs	r6, #0
 80029de:	4304      	orrs	r4, r0
 80029e0:	0763      	lsls	r3, r4, #29
 80029e2:	d009      	beq.n	80029f8 <__aeabi_dsub+0x12c>
 80029e4:	230f      	movs	r3, #15
 80029e6:	4023      	ands	r3, r4
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d005      	beq.n	80029f8 <__aeabi_dsub+0x12c>
 80029ec:	1d23      	adds	r3, r4, #4
 80029ee:	42a3      	cmp	r3, r4
 80029f0:	41a4      	sbcs	r4, r4
 80029f2:	4264      	negs	r4, r4
 80029f4:	44a2      	add	sl, r4
 80029f6:	001c      	movs	r4, r3
 80029f8:	4653      	mov	r3, sl
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	d400      	bmi.n	8002a00 <__aeabi_dsub+0x134>
 80029fe:	e0f2      	b.n	8002be6 <__aeabi_dsub+0x31a>
 8002a00:	4b8c      	ldr	r3, [pc, #560]	; (8002c34 <__aeabi_dsub+0x368>)
 8002a02:	3601      	adds	r6, #1
 8002a04:	429e      	cmp	r6, r3
 8002a06:	d100      	bne.n	8002a0a <__aeabi_dsub+0x13e>
 8002a08:	e10f      	b.n	8002c2a <__aeabi_dsub+0x35e>
 8002a0a:	4653      	mov	r3, sl
 8002a0c:	498a      	ldr	r1, [pc, #552]	; (8002c38 <__aeabi_dsub+0x36c>)
 8002a0e:	08e4      	lsrs	r4, r4, #3
 8002a10:	400b      	ands	r3, r1
 8002a12:	0019      	movs	r1, r3
 8002a14:	075b      	lsls	r3, r3, #29
 8002a16:	4323      	orrs	r3, r4
 8002a18:	0572      	lsls	r2, r6, #21
 8002a1a:	024c      	lsls	r4, r1, #9
 8002a1c:	0b24      	lsrs	r4, r4, #12
 8002a1e:	0d52      	lsrs	r2, r2, #21
 8002a20:	0512      	lsls	r2, r2, #20
 8002a22:	4322      	orrs	r2, r4
 8002a24:	07ed      	lsls	r5, r5, #31
 8002a26:	432a      	orrs	r2, r5
 8002a28:	0018      	movs	r0, r3
 8002a2a:	0011      	movs	r1, r2
 8002a2c:	b003      	add	sp, #12
 8002a2e:	bcf0      	pop	{r4, r5, r6, r7}
 8002a30:	46bb      	mov	fp, r7
 8002a32:	46b2      	mov	sl, r6
 8002a34:	46a9      	mov	r9, r5
 8002a36:	46a0      	mov	r8, r4
 8002a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a3a:	1ab4      	subs	r4, r6, r2
 8002a3c:	46a4      	mov	ip, r4
 8002a3e:	2c00      	cmp	r4, #0
 8002a40:	dd59      	ble.n	8002af6 <__aeabi_dsub+0x22a>
 8002a42:	2a00      	cmp	r2, #0
 8002a44:	d100      	bne.n	8002a48 <__aeabi_dsub+0x17c>
 8002a46:	e0b0      	b.n	8002baa <__aeabi_dsub+0x2de>
 8002a48:	4556      	cmp	r6, sl
 8002a4a:	d100      	bne.n	8002a4e <__aeabi_dsub+0x182>
 8002a4c:	e0fa      	b.n	8002c44 <__aeabi_dsub+0x378>
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	0412      	lsls	r2, r2, #16
 8002a52:	4317      	orrs	r7, r2
 8002a54:	4662      	mov	r2, ip
 8002a56:	2a38      	cmp	r2, #56	; 0x38
 8002a58:	dd00      	ble.n	8002a5c <__aeabi_dsub+0x190>
 8002a5a:	e0d4      	b.n	8002c06 <__aeabi_dsub+0x33a>
 8002a5c:	2a1f      	cmp	r2, #31
 8002a5e:	dc00      	bgt.n	8002a62 <__aeabi_dsub+0x196>
 8002a60:	e1c0      	b.n	8002de4 <__aeabi_dsub+0x518>
 8002a62:	0039      	movs	r1, r7
 8002a64:	3a20      	subs	r2, #32
 8002a66:	40d1      	lsrs	r1, r2
 8002a68:	4662      	mov	r2, ip
 8002a6a:	2a20      	cmp	r2, #32
 8002a6c:	d006      	beq.n	8002a7c <__aeabi_dsub+0x1b0>
 8002a6e:	4664      	mov	r4, ip
 8002a70:	2240      	movs	r2, #64	; 0x40
 8002a72:	1b12      	subs	r2, r2, r4
 8002a74:	003c      	movs	r4, r7
 8002a76:	4094      	lsls	r4, r2
 8002a78:	4304      	orrs	r4, r0
 8002a7a:	9401      	str	r4, [sp, #4]
 8002a7c:	9c01      	ldr	r4, [sp, #4]
 8002a7e:	1e62      	subs	r2, r4, #1
 8002a80:	4194      	sbcs	r4, r2
 8002a82:	430c      	orrs	r4, r1
 8002a84:	e0c3      	b.n	8002c0e <__aeabi_dsub+0x342>
 8002a86:	003c      	movs	r4, r7
 8002a88:	4304      	orrs	r4, r0
 8002a8a:	d02b      	beq.n	8002ae4 <__aeabi_dsub+0x218>
 8002a8c:	468b      	mov	fp, r1
 8002a8e:	428d      	cmp	r5, r1
 8002a90:	d02e      	beq.n	8002af0 <__aeabi_dsub+0x224>
 8002a92:	4c6a      	ldr	r4, [pc, #424]	; (8002c3c <__aeabi_dsub+0x370>)
 8002a94:	46a4      	mov	ip, r4
 8002a96:	44b4      	add	ip, r6
 8002a98:	4664      	mov	r4, ip
 8002a9a:	2c00      	cmp	r4, #0
 8002a9c:	d05f      	beq.n	8002b5e <__aeabi_dsub+0x292>
 8002a9e:	1b94      	subs	r4, r2, r6
 8002aa0:	46a4      	mov	ip, r4
 8002aa2:	2e00      	cmp	r6, #0
 8002aa4:	d000      	beq.n	8002aa8 <__aeabi_dsub+0x1dc>
 8002aa6:	e120      	b.n	8002cea <__aeabi_dsub+0x41e>
 8002aa8:	464c      	mov	r4, r9
 8002aaa:	431c      	orrs	r4, r3
 8002aac:	d100      	bne.n	8002ab0 <__aeabi_dsub+0x1e4>
 8002aae:	e1c7      	b.n	8002e40 <__aeabi_dsub+0x574>
 8002ab0:	4661      	mov	r1, ip
 8002ab2:	1e4c      	subs	r4, r1, #1
 8002ab4:	2901      	cmp	r1, #1
 8002ab6:	d100      	bne.n	8002aba <__aeabi_dsub+0x1ee>
 8002ab8:	e223      	b.n	8002f02 <__aeabi_dsub+0x636>
 8002aba:	4d5e      	ldr	r5, [pc, #376]	; (8002c34 <__aeabi_dsub+0x368>)
 8002abc:	45ac      	cmp	ip, r5
 8002abe:	d100      	bne.n	8002ac2 <__aeabi_dsub+0x1f6>
 8002ac0:	e1d8      	b.n	8002e74 <__aeabi_dsub+0x5a8>
 8002ac2:	46a4      	mov	ip, r4
 8002ac4:	e11a      	b.n	8002cfc <__aeabi_dsub+0x430>
 8002ac6:	003a      	movs	r2, r7
 8002ac8:	4302      	orrs	r2, r0
 8002aca:	d100      	bne.n	8002ace <__aeabi_dsub+0x202>
 8002acc:	e0e4      	b.n	8002c98 <__aeabi_dsub+0x3cc>
 8002ace:	0022      	movs	r2, r4
 8002ad0:	3a01      	subs	r2, #1
 8002ad2:	2c01      	cmp	r4, #1
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_dsub+0x20c>
 8002ad6:	e1c3      	b.n	8002e60 <__aeabi_dsub+0x594>
 8002ad8:	4956      	ldr	r1, [pc, #344]	; (8002c34 <__aeabi_dsub+0x368>)
 8002ada:	428c      	cmp	r4, r1
 8002adc:	d100      	bne.n	8002ae0 <__aeabi_dsub+0x214>
 8002ade:	e0b1      	b.n	8002c44 <__aeabi_dsub+0x378>
 8002ae0:	4694      	mov	ip, r2
 8002ae2:	e72b      	b.n	800293c <__aeabi_dsub+0x70>
 8002ae4:	2401      	movs	r4, #1
 8002ae6:	4061      	eors	r1, r4
 8002ae8:	468b      	mov	fp, r1
 8002aea:	428d      	cmp	r5, r1
 8002aec:	d000      	beq.n	8002af0 <__aeabi_dsub+0x224>
 8002aee:	e716      	b.n	800291e <__aeabi_dsub+0x52>
 8002af0:	4952      	ldr	r1, [pc, #328]	; (8002c3c <__aeabi_dsub+0x370>)
 8002af2:	468c      	mov	ip, r1
 8002af4:	44b4      	add	ip, r6
 8002af6:	4664      	mov	r4, ip
 8002af8:	2c00      	cmp	r4, #0
 8002afa:	d100      	bne.n	8002afe <__aeabi_dsub+0x232>
 8002afc:	e0d3      	b.n	8002ca6 <__aeabi_dsub+0x3da>
 8002afe:	1b91      	subs	r1, r2, r6
 8002b00:	468c      	mov	ip, r1
 8002b02:	2e00      	cmp	r6, #0
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x23c>
 8002b06:	e15e      	b.n	8002dc6 <__aeabi_dsub+0x4fa>
 8002b08:	494a      	ldr	r1, [pc, #296]	; (8002c34 <__aeabi_dsub+0x368>)
 8002b0a:	428a      	cmp	r2, r1
 8002b0c:	d100      	bne.n	8002b10 <__aeabi_dsub+0x244>
 8002b0e:	e1be      	b.n	8002e8e <__aeabi_dsub+0x5c2>
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	464c      	mov	r4, r9
 8002b14:	0409      	lsls	r1, r1, #16
 8002b16:	430c      	orrs	r4, r1
 8002b18:	46a1      	mov	r9, r4
 8002b1a:	4661      	mov	r1, ip
 8002b1c:	2938      	cmp	r1, #56	; 0x38
 8002b1e:	dd00      	ble.n	8002b22 <__aeabi_dsub+0x256>
 8002b20:	e1ba      	b.n	8002e98 <__aeabi_dsub+0x5cc>
 8002b22:	291f      	cmp	r1, #31
 8002b24:	dd00      	ble.n	8002b28 <__aeabi_dsub+0x25c>
 8002b26:	e227      	b.n	8002f78 <__aeabi_dsub+0x6ac>
 8002b28:	2420      	movs	r4, #32
 8002b2a:	1a64      	subs	r4, r4, r1
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	40a1      	lsls	r1, r4
 8002b30:	001e      	movs	r6, r3
 8002b32:	4688      	mov	r8, r1
 8002b34:	4661      	mov	r1, ip
 8002b36:	40a3      	lsls	r3, r4
 8002b38:	40ce      	lsrs	r6, r1
 8002b3a:	4641      	mov	r1, r8
 8002b3c:	1e5c      	subs	r4, r3, #1
 8002b3e:	41a3      	sbcs	r3, r4
 8002b40:	4331      	orrs	r1, r6
 8002b42:	4319      	orrs	r1, r3
 8002b44:	000c      	movs	r4, r1
 8002b46:	4663      	mov	r3, ip
 8002b48:	4649      	mov	r1, r9
 8002b4a:	40d9      	lsrs	r1, r3
 8002b4c:	187f      	adds	r7, r7, r1
 8002b4e:	1824      	adds	r4, r4, r0
 8002b50:	4284      	cmp	r4, r0
 8002b52:	419b      	sbcs	r3, r3
 8002b54:	425b      	negs	r3, r3
 8002b56:	469a      	mov	sl, r3
 8002b58:	0016      	movs	r6, r2
 8002b5a:	44ba      	add	sl, r7
 8002b5c:	e05d      	b.n	8002c1a <__aeabi_dsub+0x34e>
 8002b5e:	4c38      	ldr	r4, [pc, #224]	; (8002c40 <__aeabi_dsub+0x374>)
 8002b60:	1c72      	adds	r2, r6, #1
 8002b62:	4222      	tst	r2, r4
 8002b64:	d000      	beq.n	8002b68 <__aeabi_dsub+0x29c>
 8002b66:	e0df      	b.n	8002d28 <__aeabi_dsub+0x45c>
 8002b68:	464a      	mov	r2, r9
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	2e00      	cmp	r6, #0
 8002b6e:	d000      	beq.n	8002b72 <__aeabi_dsub+0x2a6>
 8002b70:	e15c      	b.n	8002e2c <__aeabi_dsub+0x560>
 8002b72:	2a00      	cmp	r2, #0
 8002b74:	d100      	bne.n	8002b78 <__aeabi_dsub+0x2ac>
 8002b76:	e1cf      	b.n	8002f18 <__aeabi_dsub+0x64c>
 8002b78:	003a      	movs	r2, r7
 8002b7a:	4302      	orrs	r2, r0
 8002b7c:	d100      	bne.n	8002b80 <__aeabi_dsub+0x2b4>
 8002b7e:	e17f      	b.n	8002e80 <__aeabi_dsub+0x5b4>
 8002b80:	1a1c      	subs	r4, r3, r0
 8002b82:	464a      	mov	r2, r9
 8002b84:	42a3      	cmp	r3, r4
 8002b86:	4189      	sbcs	r1, r1
 8002b88:	1bd2      	subs	r2, r2, r7
 8002b8a:	4249      	negs	r1, r1
 8002b8c:	1a52      	subs	r2, r2, r1
 8002b8e:	4692      	mov	sl, r2
 8002b90:	0212      	lsls	r2, r2, #8
 8002b92:	d400      	bmi.n	8002b96 <__aeabi_dsub+0x2ca>
 8002b94:	e20a      	b.n	8002fac <__aeabi_dsub+0x6e0>
 8002b96:	1ac4      	subs	r4, r0, r3
 8002b98:	42a0      	cmp	r0, r4
 8002b9a:	4180      	sbcs	r0, r0
 8002b9c:	464b      	mov	r3, r9
 8002b9e:	4240      	negs	r0, r0
 8002ba0:	1aff      	subs	r7, r7, r3
 8002ba2:	1a3b      	subs	r3, r7, r0
 8002ba4:	469a      	mov	sl, r3
 8002ba6:	465d      	mov	r5, fp
 8002ba8:	e71a      	b.n	80029e0 <__aeabi_dsub+0x114>
 8002baa:	003a      	movs	r2, r7
 8002bac:	4302      	orrs	r2, r0
 8002bae:	d073      	beq.n	8002c98 <__aeabi_dsub+0x3cc>
 8002bb0:	0022      	movs	r2, r4
 8002bb2:	3a01      	subs	r2, #1
 8002bb4:	2c01      	cmp	r4, #1
 8002bb6:	d100      	bne.n	8002bba <__aeabi_dsub+0x2ee>
 8002bb8:	e0cb      	b.n	8002d52 <__aeabi_dsub+0x486>
 8002bba:	4554      	cmp	r4, sl
 8002bbc:	d042      	beq.n	8002c44 <__aeabi_dsub+0x378>
 8002bbe:	4694      	mov	ip, r2
 8002bc0:	e748      	b.n	8002a54 <__aeabi_dsub+0x188>
 8002bc2:	0010      	movs	r0, r2
 8002bc4:	3b1f      	subs	r3, #31
 8002bc6:	40d8      	lsrs	r0, r3
 8002bc8:	2920      	cmp	r1, #32
 8002bca:	d003      	beq.n	8002bd4 <__aeabi_dsub+0x308>
 8002bcc:	2340      	movs	r3, #64	; 0x40
 8002bce:	1a5b      	subs	r3, r3, r1
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	4314      	orrs	r4, r2
 8002bd4:	1e63      	subs	r3, r4, #1
 8002bd6:	419c      	sbcs	r4, r3
 8002bd8:	2300      	movs	r3, #0
 8002bda:	2600      	movs	r6, #0
 8002bdc:	469a      	mov	sl, r3
 8002bde:	4304      	orrs	r4, r0
 8002be0:	0763      	lsls	r3, r4, #29
 8002be2:	d000      	beq.n	8002be6 <__aeabi_dsub+0x31a>
 8002be4:	e6fe      	b.n	80029e4 <__aeabi_dsub+0x118>
 8002be6:	4652      	mov	r2, sl
 8002be8:	08e3      	lsrs	r3, r4, #3
 8002bea:	0752      	lsls	r2, r2, #29
 8002bec:	4313      	orrs	r3, r2
 8002bee:	4652      	mov	r2, sl
 8002bf0:	46b4      	mov	ip, r6
 8002bf2:	08d2      	lsrs	r2, r2, #3
 8002bf4:	490f      	ldr	r1, [pc, #60]	; (8002c34 <__aeabi_dsub+0x368>)
 8002bf6:	458c      	cmp	ip, r1
 8002bf8:	d02a      	beq.n	8002c50 <__aeabi_dsub+0x384>
 8002bfa:	0312      	lsls	r2, r2, #12
 8002bfc:	0b14      	lsrs	r4, r2, #12
 8002bfe:	4662      	mov	r2, ip
 8002c00:	0552      	lsls	r2, r2, #21
 8002c02:	0d52      	lsrs	r2, r2, #21
 8002c04:	e70c      	b.n	8002a20 <__aeabi_dsub+0x154>
 8002c06:	003c      	movs	r4, r7
 8002c08:	4304      	orrs	r4, r0
 8002c0a:	1e62      	subs	r2, r4, #1
 8002c0c:	4194      	sbcs	r4, r2
 8002c0e:	18e4      	adds	r4, r4, r3
 8002c10:	429c      	cmp	r4, r3
 8002c12:	4192      	sbcs	r2, r2
 8002c14:	4252      	negs	r2, r2
 8002c16:	444a      	add	r2, r9
 8002c18:	4692      	mov	sl, r2
 8002c1a:	4653      	mov	r3, sl
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	d5df      	bpl.n	8002be0 <__aeabi_dsub+0x314>
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <__aeabi_dsub+0x368>)
 8002c22:	3601      	adds	r6, #1
 8002c24:	429e      	cmp	r6, r3
 8002c26:	d000      	beq.n	8002c2a <__aeabi_dsub+0x35e>
 8002c28:	e0a0      	b.n	8002d6c <__aeabi_dsub+0x4a0>
 8002c2a:	0032      	movs	r2, r6
 8002c2c:	2400      	movs	r4, #0
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e6f6      	b.n	8002a20 <__aeabi_dsub+0x154>
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	000007ff 	.word	0x000007ff
 8002c38:	ff7fffff 	.word	0xff7fffff
 8002c3c:	fffff801 	.word	0xfffff801
 8002c40:	000007fe 	.word	0x000007fe
 8002c44:	08db      	lsrs	r3, r3, #3
 8002c46:	464a      	mov	r2, r9
 8002c48:	0752      	lsls	r2, r2, #29
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	464a      	mov	r2, r9
 8002c4e:	08d2      	lsrs	r2, r2, #3
 8002c50:	0019      	movs	r1, r3
 8002c52:	4311      	orrs	r1, r2
 8002c54:	d100      	bne.n	8002c58 <__aeabi_dsub+0x38c>
 8002c56:	e1b5      	b.n	8002fc4 <__aeabi_dsub+0x6f8>
 8002c58:	2480      	movs	r4, #128	; 0x80
 8002c5a:	0324      	lsls	r4, r4, #12
 8002c5c:	4314      	orrs	r4, r2
 8002c5e:	0324      	lsls	r4, r4, #12
 8002c60:	4ad5      	ldr	r2, [pc, #852]	; (8002fb8 <__aeabi_dsub+0x6ec>)
 8002c62:	0b24      	lsrs	r4, r4, #12
 8002c64:	e6dc      	b.n	8002a20 <__aeabi_dsub+0x154>
 8002c66:	0020      	movs	r0, r4
 8002c68:	f000 fb2a 	bl	80032c0 <__clzsi2>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	3318      	adds	r3, #24
 8002c70:	2b1f      	cmp	r3, #31
 8002c72:	dc00      	bgt.n	8002c76 <__aeabi_dsub+0x3aa>
 8002c74:	e695      	b.n	80029a2 <__aeabi_dsub+0xd6>
 8002c76:	0022      	movs	r2, r4
 8002c78:	3808      	subs	r0, #8
 8002c7a:	4082      	lsls	r2, r0
 8002c7c:	2400      	movs	r4, #0
 8002c7e:	429e      	cmp	r6, r3
 8002c80:	dc00      	bgt.n	8002c84 <__aeabi_dsub+0x3b8>
 8002c82:	e69a      	b.n	80029ba <__aeabi_dsub+0xee>
 8002c84:	1af6      	subs	r6, r6, r3
 8002c86:	4bcd      	ldr	r3, [pc, #820]	; (8002fbc <__aeabi_dsub+0x6f0>)
 8002c88:	401a      	ands	r2, r3
 8002c8a:	4692      	mov	sl, r2
 8002c8c:	e6a8      	b.n	80029e0 <__aeabi_dsub+0x114>
 8002c8e:	003c      	movs	r4, r7
 8002c90:	4304      	orrs	r4, r0
 8002c92:	1e62      	subs	r2, r4, #1
 8002c94:	4194      	sbcs	r4, r2
 8002c96:	e66c      	b.n	8002972 <__aeabi_dsub+0xa6>
 8002c98:	464a      	mov	r2, r9
 8002c9a:	08db      	lsrs	r3, r3, #3
 8002c9c:	0752      	lsls	r2, r2, #29
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	464a      	mov	r2, r9
 8002ca2:	08d2      	lsrs	r2, r2, #3
 8002ca4:	e7a6      	b.n	8002bf4 <__aeabi_dsub+0x328>
 8002ca6:	4cc6      	ldr	r4, [pc, #792]	; (8002fc0 <__aeabi_dsub+0x6f4>)
 8002ca8:	1c72      	adds	r2, r6, #1
 8002caa:	4222      	tst	r2, r4
 8002cac:	d000      	beq.n	8002cb0 <__aeabi_dsub+0x3e4>
 8002cae:	e0ac      	b.n	8002e0a <__aeabi_dsub+0x53e>
 8002cb0:	464a      	mov	r2, r9
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	2e00      	cmp	r6, #0
 8002cb6:	d000      	beq.n	8002cba <__aeabi_dsub+0x3ee>
 8002cb8:	e105      	b.n	8002ec6 <__aeabi_dsub+0x5fa>
 8002cba:	2a00      	cmp	r2, #0
 8002cbc:	d100      	bne.n	8002cc0 <__aeabi_dsub+0x3f4>
 8002cbe:	e156      	b.n	8002f6e <__aeabi_dsub+0x6a2>
 8002cc0:	003a      	movs	r2, r7
 8002cc2:	4302      	orrs	r2, r0
 8002cc4:	d100      	bne.n	8002cc8 <__aeabi_dsub+0x3fc>
 8002cc6:	e0db      	b.n	8002e80 <__aeabi_dsub+0x5b4>
 8002cc8:	181c      	adds	r4, r3, r0
 8002cca:	429c      	cmp	r4, r3
 8002ccc:	419b      	sbcs	r3, r3
 8002cce:	444f      	add	r7, r9
 8002cd0:	46ba      	mov	sl, r7
 8002cd2:	425b      	negs	r3, r3
 8002cd4:	449a      	add	sl, r3
 8002cd6:	4653      	mov	r3, sl
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	d400      	bmi.n	8002cde <__aeabi_dsub+0x412>
 8002cdc:	e780      	b.n	8002be0 <__aeabi_dsub+0x314>
 8002cde:	4652      	mov	r2, sl
 8002ce0:	4bb6      	ldr	r3, [pc, #728]	; (8002fbc <__aeabi_dsub+0x6f0>)
 8002ce2:	2601      	movs	r6, #1
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	4692      	mov	sl, r2
 8002ce8:	e77a      	b.n	8002be0 <__aeabi_dsub+0x314>
 8002cea:	4cb3      	ldr	r4, [pc, #716]	; (8002fb8 <__aeabi_dsub+0x6ec>)
 8002cec:	42a2      	cmp	r2, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x426>
 8002cf0:	e0c0      	b.n	8002e74 <__aeabi_dsub+0x5a8>
 8002cf2:	2480      	movs	r4, #128	; 0x80
 8002cf4:	464d      	mov	r5, r9
 8002cf6:	0424      	lsls	r4, r4, #16
 8002cf8:	4325      	orrs	r5, r4
 8002cfa:	46a9      	mov	r9, r5
 8002cfc:	4664      	mov	r4, ip
 8002cfe:	2c38      	cmp	r4, #56	; 0x38
 8002d00:	dc53      	bgt.n	8002daa <__aeabi_dsub+0x4de>
 8002d02:	4661      	mov	r1, ip
 8002d04:	2c1f      	cmp	r4, #31
 8002d06:	dd00      	ble.n	8002d0a <__aeabi_dsub+0x43e>
 8002d08:	e0cd      	b.n	8002ea6 <__aeabi_dsub+0x5da>
 8002d0a:	2520      	movs	r5, #32
 8002d0c:	001e      	movs	r6, r3
 8002d0e:	1b2d      	subs	r5, r5, r4
 8002d10:	464c      	mov	r4, r9
 8002d12:	40ab      	lsls	r3, r5
 8002d14:	40ac      	lsls	r4, r5
 8002d16:	40ce      	lsrs	r6, r1
 8002d18:	1e5d      	subs	r5, r3, #1
 8002d1a:	41ab      	sbcs	r3, r5
 8002d1c:	4334      	orrs	r4, r6
 8002d1e:	4323      	orrs	r3, r4
 8002d20:	464c      	mov	r4, r9
 8002d22:	40cc      	lsrs	r4, r1
 8002d24:	1b3f      	subs	r7, r7, r4
 8002d26:	e045      	b.n	8002db4 <__aeabi_dsub+0x4e8>
 8002d28:	464a      	mov	r2, r9
 8002d2a:	1a1c      	subs	r4, r3, r0
 8002d2c:	1bd1      	subs	r1, r2, r7
 8002d2e:	42a3      	cmp	r3, r4
 8002d30:	4192      	sbcs	r2, r2
 8002d32:	4252      	negs	r2, r2
 8002d34:	4692      	mov	sl, r2
 8002d36:	000a      	movs	r2, r1
 8002d38:	4651      	mov	r1, sl
 8002d3a:	1a52      	subs	r2, r2, r1
 8002d3c:	4692      	mov	sl, r2
 8002d3e:	0212      	lsls	r2, r2, #8
 8002d40:	d500      	bpl.n	8002d44 <__aeabi_dsub+0x478>
 8002d42:	e083      	b.n	8002e4c <__aeabi_dsub+0x580>
 8002d44:	4653      	mov	r3, sl
 8002d46:	4323      	orrs	r3, r4
 8002d48:	d000      	beq.n	8002d4c <__aeabi_dsub+0x480>
 8002d4a:	e621      	b.n	8002990 <__aeabi_dsub+0xc4>
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2500      	movs	r5, #0
 8002d50:	e753      	b.n	8002bfa <__aeabi_dsub+0x32e>
 8002d52:	181c      	adds	r4, r3, r0
 8002d54:	429c      	cmp	r4, r3
 8002d56:	419b      	sbcs	r3, r3
 8002d58:	444f      	add	r7, r9
 8002d5a:	46ba      	mov	sl, r7
 8002d5c:	425b      	negs	r3, r3
 8002d5e:	449a      	add	sl, r3
 8002d60:	4653      	mov	r3, sl
 8002d62:	2601      	movs	r6, #1
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	d400      	bmi.n	8002d6a <__aeabi_dsub+0x49e>
 8002d68:	e73a      	b.n	8002be0 <__aeabi_dsub+0x314>
 8002d6a:	2602      	movs	r6, #2
 8002d6c:	4652      	mov	r2, sl
 8002d6e:	4b93      	ldr	r3, [pc, #588]	; (8002fbc <__aeabi_dsub+0x6f0>)
 8002d70:	2101      	movs	r1, #1
 8002d72:	401a      	ands	r2, r3
 8002d74:	0013      	movs	r3, r2
 8002d76:	4021      	ands	r1, r4
 8002d78:	0862      	lsrs	r2, r4, #1
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	07dc      	lsls	r4, r3, #31
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	469a      	mov	sl, r3
 8002d82:	4314      	orrs	r4, r2
 8002d84:	e62c      	b.n	80029e0 <__aeabi_dsub+0x114>
 8002d86:	0039      	movs	r1, r7
 8002d88:	3a20      	subs	r2, #32
 8002d8a:	40d1      	lsrs	r1, r2
 8002d8c:	4662      	mov	r2, ip
 8002d8e:	2a20      	cmp	r2, #32
 8002d90:	d006      	beq.n	8002da0 <__aeabi_dsub+0x4d4>
 8002d92:	4664      	mov	r4, ip
 8002d94:	2240      	movs	r2, #64	; 0x40
 8002d96:	1b12      	subs	r2, r2, r4
 8002d98:	003c      	movs	r4, r7
 8002d9a:	4094      	lsls	r4, r2
 8002d9c:	4304      	orrs	r4, r0
 8002d9e:	9401      	str	r4, [sp, #4]
 8002da0:	9c01      	ldr	r4, [sp, #4]
 8002da2:	1e62      	subs	r2, r4, #1
 8002da4:	4194      	sbcs	r4, r2
 8002da6:	430c      	orrs	r4, r1
 8002da8:	e5e3      	b.n	8002972 <__aeabi_dsub+0xa6>
 8002daa:	4649      	mov	r1, r9
 8002dac:	4319      	orrs	r1, r3
 8002dae:	000b      	movs	r3, r1
 8002db0:	1e5c      	subs	r4, r3, #1
 8002db2:	41a3      	sbcs	r3, r4
 8002db4:	1ac4      	subs	r4, r0, r3
 8002db6:	42a0      	cmp	r0, r4
 8002db8:	419b      	sbcs	r3, r3
 8002dba:	425b      	negs	r3, r3
 8002dbc:	1afb      	subs	r3, r7, r3
 8002dbe:	469a      	mov	sl, r3
 8002dc0:	465d      	mov	r5, fp
 8002dc2:	0016      	movs	r6, r2
 8002dc4:	e5dc      	b.n	8002980 <__aeabi_dsub+0xb4>
 8002dc6:	4649      	mov	r1, r9
 8002dc8:	4319      	orrs	r1, r3
 8002dca:	d100      	bne.n	8002dce <__aeabi_dsub+0x502>
 8002dcc:	e0ae      	b.n	8002f2c <__aeabi_dsub+0x660>
 8002dce:	4661      	mov	r1, ip
 8002dd0:	4664      	mov	r4, ip
 8002dd2:	3901      	subs	r1, #1
 8002dd4:	2c01      	cmp	r4, #1
 8002dd6:	d100      	bne.n	8002dda <__aeabi_dsub+0x50e>
 8002dd8:	e0e0      	b.n	8002f9c <__aeabi_dsub+0x6d0>
 8002dda:	4c77      	ldr	r4, [pc, #476]	; (8002fb8 <__aeabi_dsub+0x6ec>)
 8002ddc:	45a4      	cmp	ip, r4
 8002dde:	d056      	beq.n	8002e8e <__aeabi_dsub+0x5c2>
 8002de0:	468c      	mov	ip, r1
 8002de2:	e69a      	b.n	8002b1a <__aeabi_dsub+0x24e>
 8002de4:	4661      	mov	r1, ip
 8002de6:	2220      	movs	r2, #32
 8002de8:	003c      	movs	r4, r7
 8002dea:	1a52      	subs	r2, r2, r1
 8002dec:	4094      	lsls	r4, r2
 8002dee:	0001      	movs	r1, r0
 8002df0:	4090      	lsls	r0, r2
 8002df2:	46a0      	mov	r8, r4
 8002df4:	4664      	mov	r4, ip
 8002df6:	1e42      	subs	r2, r0, #1
 8002df8:	4190      	sbcs	r0, r2
 8002dfa:	4662      	mov	r2, ip
 8002dfc:	40e1      	lsrs	r1, r4
 8002dfe:	4644      	mov	r4, r8
 8002e00:	40d7      	lsrs	r7, r2
 8002e02:	430c      	orrs	r4, r1
 8002e04:	4304      	orrs	r4, r0
 8002e06:	44b9      	add	r9, r7
 8002e08:	e701      	b.n	8002c0e <__aeabi_dsub+0x342>
 8002e0a:	496b      	ldr	r1, [pc, #428]	; (8002fb8 <__aeabi_dsub+0x6ec>)
 8002e0c:	428a      	cmp	r2, r1
 8002e0e:	d100      	bne.n	8002e12 <__aeabi_dsub+0x546>
 8002e10:	e70c      	b.n	8002c2c <__aeabi_dsub+0x360>
 8002e12:	1818      	adds	r0, r3, r0
 8002e14:	4298      	cmp	r0, r3
 8002e16:	419b      	sbcs	r3, r3
 8002e18:	444f      	add	r7, r9
 8002e1a:	425b      	negs	r3, r3
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	07dc      	lsls	r4, r3, #31
 8002e20:	0840      	lsrs	r0, r0, #1
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	469a      	mov	sl, r3
 8002e26:	0016      	movs	r6, r2
 8002e28:	4304      	orrs	r4, r0
 8002e2a:	e6d9      	b.n	8002be0 <__aeabi_dsub+0x314>
 8002e2c:	2a00      	cmp	r2, #0
 8002e2e:	d000      	beq.n	8002e32 <__aeabi_dsub+0x566>
 8002e30:	e081      	b.n	8002f36 <__aeabi_dsub+0x66a>
 8002e32:	003b      	movs	r3, r7
 8002e34:	4303      	orrs	r3, r0
 8002e36:	d11d      	bne.n	8002e74 <__aeabi_dsub+0x5a8>
 8002e38:	2280      	movs	r2, #128	; 0x80
 8002e3a:	2500      	movs	r5, #0
 8002e3c:	0312      	lsls	r2, r2, #12
 8002e3e:	e70b      	b.n	8002c58 <__aeabi_dsub+0x38c>
 8002e40:	08c0      	lsrs	r0, r0, #3
 8002e42:	077b      	lsls	r3, r7, #29
 8002e44:	465d      	mov	r5, fp
 8002e46:	4303      	orrs	r3, r0
 8002e48:	08fa      	lsrs	r2, r7, #3
 8002e4a:	e6d3      	b.n	8002bf4 <__aeabi_dsub+0x328>
 8002e4c:	1ac4      	subs	r4, r0, r3
 8002e4e:	42a0      	cmp	r0, r4
 8002e50:	4180      	sbcs	r0, r0
 8002e52:	464b      	mov	r3, r9
 8002e54:	4240      	negs	r0, r0
 8002e56:	1aff      	subs	r7, r7, r3
 8002e58:	1a3b      	subs	r3, r7, r0
 8002e5a:	469a      	mov	sl, r3
 8002e5c:	465d      	mov	r5, fp
 8002e5e:	e597      	b.n	8002990 <__aeabi_dsub+0xc4>
 8002e60:	1a1c      	subs	r4, r3, r0
 8002e62:	464a      	mov	r2, r9
 8002e64:	42a3      	cmp	r3, r4
 8002e66:	419b      	sbcs	r3, r3
 8002e68:	1bd7      	subs	r7, r2, r7
 8002e6a:	425b      	negs	r3, r3
 8002e6c:	1afb      	subs	r3, r7, r3
 8002e6e:	469a      	mov	sl, r3
 8002e70:	2601      	movs	r6, #1
 8002e72:	e585      	b.n	8002980 <__aeabi_dsub+0xb4>
 8002e74:	08c0      	lsrs	r0, r0, #3
 8002e76:	077b      	lsls	r3, r7, #29
 8002e78:	465d      	mov	r5, fp
 8002e7a:	4303      	orrs	r3, r0
 8002e7c:	08fa      	lsrs	r2, r7, #3
 8002e7e:	e6e7      	b.n	8002c50 <__aeabi_dsub+0x384>
 8002e80:	464a      	mov	r2, r9
 8002e82:	08db      	lsrs	r3, r3, #3
 8002e84:	0752      	lsls	r2, r2, #29
 8002e86:	4313      	orrs	r3, r2
 8002e88:	464a      	mov	r2, r9
 8002e8a:	08d2      	lsrs	r2, r2, #3
 8002e8c:	e6b5      	b.n	8002bfa <__aeabi_dsub+0x32e>
 8002e8e:	08c0      	lsrs	r0, r0, #3
 8002e90:	077b      	lsls	r3, r7, #29
 8002e92:	4303      	orrs	r3, r0
 8002e94:	08fa      	lsrs	r2, r7, #3
 8002e96:	e6db      	b.n	8002c50 <__aeabi_dsub+0x384>
 8002e98:	4649      	mov	r1, r9
 8002e9a:	4319      	orrs	r1, r3
 8002e9c:	000b      	movs	r3, r1
 8002e9e:	1e59      	subs	r1, r3, #1
 8002ea0:	418b      	sbcs	r3, r1
 8002ea2:	001c      	movs	r4, r3
 8002ea4:	e653      	b.n	8002b4e <__aeabi_dsub+0x282>
 8002ea6:	464d      	mov	r5, r9
 8002ea8:	3c20      	subs	r4, #32
 8002eaa:	40e5      	lsrs	r5, r4
 8002eac:	2920      	cmp	r1, #32
 8002eae:	d005      	beq.n	8002ebc <__aeabi_dsub+0x5f0>
 8002eb0:	2440      	movs	r4, #64	; 0x40
 8002eb2:	1a64      	subs	r4, r4, r1
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	40a1      	lsls	r1, r4
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	4698      	mov	r8, r3
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	1e5c      	subs	r4, r3, #1
 8002ec0:	41a3      	sbcs	r3, r4
 8002ec2:	432b      	orrs	r3, r5
 8002ec4:	e776      	b.n	8002db4 <__aeabi_dsub+0x4e8>
 8002ec6:	2a00      	cmp	r2, #0
 8002ec8:	d0e1      	beq.n	8002e8e <__aeabi_dsub+0x5c2>
 8002eca:	003a      	movs	r2, r7
 8002ecc:	08db      	lsrs	r3, r3, #3
 8002ece:	4302      	orrs	r2, r0
 8002ed0:	d100      	bne.n	8002ed4 <__aeabi_dsub+0x608>
 8002ed2:	e6b8      	b.n	8002c46 <__aeabi_dsub+0x37a>
 8002ed4:	464a      	mov	r2, r9
 8002ed6:	0752      	lsls	r2, r2, #29
 8002ed8:	2480      	movs	r4, #128	; 0x80
 8002eda:	4313      	orrs	r3, r2
 8002edc:	464a      	mov	r2, r9
 8002ede:	0324      	lsls	r4, r4, #12
 8002ee0:	08d2      	lsrs	r2, r2, #3
 8002ee2:	4222      	tst	r2, r4
 8002ee4:	d007      	beq.n	8002ef6 <__aeabi_dsub+0x62a>
 8002ee6:	08fe      	lsrs	r6, r7, #3
 8002ee8:	4226      	tst	r6, r4
 8002eea:	d104      	bne.n	8002ef6 <__aeabi_dsub+0x62a>
 8002eec:	465d      	mov	r5, fp
 8002eee:	0032      	movs	r2, r6
 8002ef0:	08c3      	lsrs	r3, r0, #3
 8002ef2:	077f      	lsls	r7, r7, #29
 8002ef4:	433b      	orrs	r3, r7
 8002ef6:	0f59      	lsrs	r1, r3, #29
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	0749      	lsls	r1, r1, #29
 8002efc:	08db      	lsrs	r3, r3, #3
 8002efe:	430b      	orrs	r3, r1
 8002f00:	e6a6      	b.n	8002c50 <__aeabi_dsub+0x384>
 8002f02:	1ac4      	subs	r4, r0, r3
 8002f04:	42a0      	cmp	r0, r4
 8002f06:	4180      	sbcs	r0, r0
 8002f08:	464b      	mov	r3, r9
 8002f0a:	4240      	negs	r0, r0
 8002f0c:	1aff      	subs	r7, r7, r3
 8002f0e:	1a3b      	subs	r3, r7, r0
 8002f10:	469a      	mov	sl, r3
 8002f12:	465d      	mov	r5, fp
 8002f14:	2601      	movs	r6, #1
 8002f16:	e533      	b.n	8002980 <__aeabi_dsub+0xb4>
 8002f18:	003b      	movs	r3, r7
 8002f1a:	4303      	orrs	r3, r0
 8002f1c:	d100      	bne.n	8002f20 <__aeabi_dsub+0x654>
 8002f1e:	e715      	b.n	8002d4c <__aeabi_dsub+0x480>
 8002f20:	08c0      	lsrs	r0, r0, #3
 8002f22:	077b      	lsls	r3, r7, #29
 8002f24:	465d      	mov	r5, fp
 8002f26:	4303      	orrs	r3, r0
 8002f28:	08fa      	lsrs	r2, r7, #3
 8002f2a:	e666      	b.n	8002bfa <__aeabi_dsub+0x32e>
 8002f2c:	08c0      	lsrs	r0, r0, #3
 8002f2e:	077b      	lsls	r3, r7, #29
 8002f30:	4303      	orrs	r3, r0
 8002f32:	08fa      	lsrs	r2, r7, #3
 8002f34:	e65e      	b.n	8002bf4 <__aeabi_dsub+0x328>
 8002f36:	003a      	movs	r2, r7
 8002f38:	08db      	lsrs	r3, r3, #3
 8002f3a:	4302      	orrs	r2, r0
 8002f3c:	d100      	bne.n	8002f40 <__aeabi_dsub+0x674>
 8002f3e:	e682      	b.n	8002c46 <__aeabi_dsub+0x37a>
 8002f40:	464a      	mov	r2, r9
 8002f42:	0752      	lsls	r2, r2, #29
 8002f44:	2480      	movs	r4, #128	; 0x80
 8002f46:	4313      	orrs	r3, r2
 8002f48:	464a      	mov	r2, r9
 8002f4a:	0324      	lsls	r4, r4, #12
 8002f4c:	08d2      	lsrs	r2, r2, #3
 8002f4e:	4222      	tst	r2, r4
 8002f50:	d007      	beq.n	8002f62 <__aeabi_dsub+0x696>
 8002f52:	08fe      	lsrs	r6, r7, #3
 8002f54:	4226      	tst	r6, r4
 8002f56:	d104      	bne.n	8002f62 <__aeabi_dsub+0x696>
 8002f58:	465d      	mov	r5, fp
 8002f5a:	0032      	movs	r2, r6
 8002f5c:	08c3      	lsrs	r3, r0, #3
 8002f5e:	077f      	lsls	r7, r7, #29
 8002f60:	433b      	orrs	r3, r7
 8002f62:	0f59      	lsrs	r1, r3, #29
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	08db      	lsrs	r3, r3, #3
 8002f68:	0749      	lsls	r1, r1, #29
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	e670      	b.n	8002c50 <__aeabi_dsub+0x384>
 8002f6e:	08c0      	lsrs	r0, r0, #3
 8002f70:	077b      	lsls	r3, r7, #29
 8002f72:	4303      	orrs	r3, r0
 8002f74:	08fa      	lsrs	r2, r7, #3
 8002f76:	e640      	b.n	8002bfa <__aeabi_dsub+0x32e>
 8002f78:	464c      	mov	r4, r9
 8002f7a:	3920      	subs	r1, #32
 8002f7c:	40cc      	lsrs	r4, r1
 8002f7e:	4661      	mov	r1, ip
 8002f80:	2920      	cmp	r1, #32
 8002f82:	d006      	beq.n	8002f92 <__aeabi_dsub+0x6c6>
 8002f84:	4666      	mov	r6, ip
 8002f86:	2140      	movs	r1, #64	; 0x40
 8002f88:	1b89      	subs	r1, r1, r6
 8002f8a:	464e      	mov	r6, r9
 8002f8c:	408e      	lsls	r6, r1
 8002f8e:	4333      	orrs	r3, r6
 8002f90:	4698      	mov	r8, r3
 8002f92:	4643      	mov	r3, r8
 8002f94:	1e59      	subs	r1, r3, #1
 8002f96:	418b      	sbcs	r3, r1
 8002f98:	431c      	orrs	r4, r3
 8002f9a:	e5d8      	b.n	8002b4e <__aeabi_dsub+0x282>
 8002f9c:	181c      	adds	r4, r3, r0
 8002f9e:	4284      	cmp	r4, r0
 8002fa0:	4180      	sbcs	r0, r0
 8002fa2:	444f      	add	r7, r9
 8002fa4:	46ba      	mov	sl, r7
 8002fa6:	4240      	negs	r0, r0
 8002fa8:	4482      	add	sl, r0
 8002faa:	e6d9      	b.n	8002d60 <__aeabi_dsub+0x494>
 8002fac:	4653      	mov	r3, sl
 8002fae:	4323      	orrs	r3, r4
 8002fb0:	d100      	bne.n	8002fb4 <__aeabi_dsub+0x6e8>
 8002fb2:	e6cb      	b.n	8002d4c <__aeabi_dsub+0x480>
 8002fb4:	e614      	b.n	8002be0 <__aeabi_dsub+0x314>
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	000007ff 	.word	0x000007ff
 8002fbc:	ff7fffff 	.word	0xff7fffff
 8002fc0:	000007fe 	.word	0x000007fe
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	4a01      	ldr	r2, [pc, #4]	; (8002fcc <__aeabi_dsub+0x700>)
 8002fc8:	001c      	movs	r4, r3
 8002fca:	e529      	b.n	8002a20 <__aeabi_dsub+0x154>
 8002fcc:	000007ff 	.word	0x000007ff

08002fd0 <__aeabi_dcmpun>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	0005      	movs	r5, r0
 8002fd4:	480c      	ldr	r0, [pc, #48]	; (8003008 <__aeabi_dcmpun+0x38>)
 8002fd6:	031c      	lsls	r4, r3, #12
 8002fd8:	0016      	movs	r6, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	030a      	lsls	r2, r1, #12
 8002fde:	0049      	lsls	r1, r1, #1
 8002fe0:	0b12      	lsrs	r2, r2, #12
 8002fe2:	0d49      	lsrs	r1, r1, #21
 8002fe4:	0b24      	lsrs	r4, r4, #12
 8002fe6:	0d5b      	lsrs	r3, r3, #21
 8002fe8:	4281      	cmp	r1, r0
 8002fea:	d008      	beq.n	8002ffe <__aeabi_dcmpun+0x2e>
 8002fec:	4a06      	ldr	r2, [pc, #24]	; (8003008 <__aeabi_dcmpun+0x38>)
 8002fee:	2000      	movs	r0, #0
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d103      	bne.n	8002ffc <__aeabi_dcmpun+0x2c>
 8002ff4:	0020      	movs	r0, r4
 8002ff6:	4330      	orrs	r0, r6
 8002ff8:	1e43      	subs	r3, r0, #1
 8002ffa:	4198      	sbcs	r0, r3
 8002ffc:	bd70      	pop	{r4, r5, r6, pc}
 8002ffe:	2001      	movs	r0, #1
 8003000:	432a      	orrs	r2, r5
 8003002:	d1fb      	bne.n	8002ffc <__aeabi_dcmpun+0x2c>
 8003004:	e7f2      	b.n	8002fec <__aeabi_dcmpun+0x1c>
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	000007ff 	.word	0x000007ff

0800300c <__aeabi_d2iz>:
 800300c:	000a      	movs	r2, r1
 800300e:	b530      	push	{r4, r5, lr}
 8003010:	4c13      	ldr	r4, [pc, #76]	; (8003060 <__aeabi_d2iz+0x54>)
 8003012:	0053      	lsls	r3, r2, #1
 8003014:	0309      	lsls	r1, r1, #12
 8003016:	0005      	movs	r5, r0
 8003018:	0b09      	lsrs	r1, r1, #12
 800301a:	2000      	movs	r0, #0
 800301c:	0d5b      	lsrs	r3, r3, #21
 800301e:	0fd2      	lsrs	r2, r2, #31
 8003020:	42a3      	cmp	r3, r4
 8003022:	dd04      	ble.n	800302e <__aeabi_d2iz+0x22>
 8003024:	480f      	ldr	r0, [pc, #60]	; (8003064 <__aeabi_d2iz+0x58>)
 8003026:	4283      	cmp	r3, r0
 8003028:	dd02      	ble.n	8003030 <__aeabi_d2iz+0x24>
 800302a:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <__aeabi_d2iz+0x5c>)
 800302c:	18d0      	adds	r0, r2, r3
 800302e:	bd30      	pop	{r4, r5, pc}
 8003030:	2080      	movs	r0, #128	; 0x80
 8003032:	0340      	lsls	r0, r0, #13
 8003034:	4301      	orrs	r1, r0
 8003036:	480d      	ldr	r0, [pc, #52]	; (800306c <__aeabi_d2iz+0x60>)
 8003038:	1ac0      	subs	r0, r0, r3
 800303a:	281f      	cmp	r0, #31
 800303c:	dd08      	ble.n	8003050 <__aeabi_d2iz+0x44>
 800303e:	480c      	ldr	r0, [pc, #48]	; (8003070 <__aeabi_d2iz+0x64>)
 8003040:	1ac3      	subs	r3, r0, r3
 8003042:	40d9      	lsrs	r1, r3
 8003044:	000b      	movs	r3, r1
 8003046:	4258      	negs	r0, r3
 8003048:	2a00      	cmp	r2, #0
 800304a:	d1f0      	bne.n	800302e <__aeabi_d2iz+0x22>
 800304c:	0018      	movs	r0, r3
 800304e:	e7ee      	b.n	800302e <__aeabi_d2iz+0x22>
 8003050:	4c08      	ldr	r4, [pc, #32]	; (8003074 <__aeabi_d2iz+0x68>)
 8003052:	40c5      	lsrs	r5, r0
 8003054:	46a4      	mov	ip, r4
 8003056:	4463      	add	r3, ip
 8003058:	4099      	lsls	r1, r3
 800305a:	000b      	movs	r3, r1
 800305c:	432b      	orrs	r3, r5
 800305e:	e7f2      	b.n	8003046 <__aeabi_d2iz+0x3a>
 8003060:	000003fe 	.word	0x000003fe
 8003064:	0000041d 	.word	0x0000041d
 8003068:	7fffffff 	.word	0x7fffffff
 800306c:	00000433 	.word	0x00000433
 8003070:	00000413 	.word	0x00000413
 8003074:	fffffbed 	.word	0xfffffbed

08003078 <__aeabi_i2d>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	2800      	cmp	r0, #0
 800307c:	d016      	beq.n	80030ac <__aeabi_i2d+0x34>
 800307e:	17c3      	asrs	r3, r0, #31
 8003080:	18c5      	adds	r5, r0, r3
 8003082:	405d      	eors	r5, r3
 8003084:	0fc4      	lsrs	r4, r0, #31
 8003086:	0028      	movs	r0, r5
 8003088:	f000 f91a 	bl	80032c0 <__clzsi2>
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <__aeabi_i2d+0x5c>)
 800308e:	1a1b      	subs	r3, r3, r0
 8003090:	280a      	cmp	r0, #10
 8003092:	dc16      	bgt.n	80030c2 <__aeabi_i2d+0x4a>
 8003094:	0002      	movs	r2, r0
 8003096:	002e      	movs	r6, r5
 8003098:	3215      	adds	r2, #21
 800309a:	4096      	lsls	r6, r2
 800309c:	220b      	movs	r2, #11
 800309e:	1a12      	subs	r2, r2, r0
 80030a0:	40d5      	lsrs	r5, r2
 80030a2:	055b      	lsls	r3, r3, #21
 80030a4:	032d      	lsls	r5, r5, #12
 80030a6:	0b2d      	lsrs	r5, r5, #12
 80030a8:	0d5b      	lsrs	r3, r3, #21
 80030aa:	e003      	b.n	80030b4 <__aeabi_i2d+0x3c>
 80030ac:	2400      	movs	r4, #0
 80030ae:	2300      	movs	r3, #0
 80030b0:	2500      	movs	r5, #0
 80030b2:	2600      	movs	r6, #0
 80030b4:	051b      	lsls	r3, r3, #20
 80030b6:	432b      	orrs	r3, r5
 80030b8:	07e4      	lsls	r4, r4, #31
 80030ba:	4323      	orrs	r3, r4
 80030bc:	0030      	movs	r0, r6
 80030be:	0019      	movs	r1, r3
 80030c0:	bd70      	pop	{r4, r5, r6, pc}
 80030c2:	380b      	subs	r0, #11
 80030c4:	4085      	lsls	r5, r0
 80030c6:	055b      	lsls	r3, r3, #21
 80030c8:	032d      	lsls	r5, r5, #12
 80030ca:	2600      	movs	r6, #0
 80030cc:	0b2d      	lsrs	r5, r5, #12
 80030ce:	0d5b      	lsrs	r3, r3, #21
 80030d0:	e7f0      	b.n	80030b4 <__aeabi_i2d+0x3c>
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	0000041e 	.word	0x0000041e

080030d8 <__aeabi_ui2d>:
 80030d8:	b510      	push	{r4, lr}
 80030da:	1e04      	subs	r4, r0, #0
 80030dc:	d010      	beq.n	8003100 <__aeabi_ui2d+0x28>
 80030de:	f000 f8ef 	bl	80032c0 <__clzsi2>
 80030e2:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <__aeabi_ui2d+0x48>)
 80030e4:	1a1b      	subs	r3, r3, r0
 80030e6:	280a      	cmp	r0, #10
 80030e8:	dc11      	bgt.n	800310e <__aeabi_ui2d+0x36>
 80030ea:	220b      	movs	r2, #11
 80030ec:	0021      	movs	r1, r4
 80030ee:	1a12      	subs	r2, r2, r0
 80030f0:	40d1      	lsrs	r1, r2
 80030f2:	3015      	adds	r0, #21
 80030f4:	030a      	lsls	r2, r1, #12
 80030f6:	055b      	lsls	r3, r3, #21
 80030f8:	4084      	lsls	r4, r0
 80030fa:	0b12      	lsrs	r2, r2, #12
 80030fc:	0d5b      	lsrs	r3, r3, #21
 80030fe:	e001      	b.n	8003104 <__aeabi_ui2d+0x2c>
 8003100:	2300      	movs	r3, #0
 8003102:	2200      	movs	r2, #0
 8003104:	051b      	lsls	r3, r3, #20
 8003106:	4313      	orrs	r3, r2
 8003108:	0020      	movs	r0, r4
 800310a:	0019      	movs	r1, r3
 800310c:	bd10      	pop	{r4, pc}
 800310e:	0022      	movs	r2, r4
 8003110:	380b      	subs	r0, #11
 8003112:	4082      	lsls	r2, r0
 8003114:	055b      	lsls	r3, r3, #21
 8003116:	0312      	lsls	r2, r2, #12
 8003118:	2400      	movs	r4, #0
 800311a:	0b12      	lsrs	r2, r2, #12
 800311c:	0d5b      	lsrs	r3, r3, #21
 800311e:	e7f1      	b.n	8003104 <__aeabi_ui2d+0x2c>
 8003120:	0000041e 	.word	0x0000041e

08003124 <__aeabi_f2d>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	0242      	lsls	r2, r0, #9
 8003128:	0043      	lsls	r3, r0, #1
 800312a:	0fc4      	lsrs	r4, r0, #31
 800312c:	20fe      	movs	r0, #254	; 0xfe
 800312e:	0e1b      	lsrs	r3, r3, #24
 8003130:	1c59      	adds	r1, r3, #1
 8003132:	0a55      	lsrs	r5, r2, #9
 8003134:	4208      	tst	r0, r1
 8003136:	d00c      	beq.n	8003152 <__aeabi_f2d+0x2e>
 8003138:	21e0      	movs	r1, #224	; 0xe0
 800313a:	0089      	lsls	r1, r1, #2
 800313c:	468c      	mov	ip, r1
 800313e:	076d      	lsls	r5, r5, #29
 8003140:	0b12      	lsrs	r2, r2, #12
 8003142:	4463      	add	r3, ip
 8003144:	051b      	lsls	r3, r3, #20
 8003146:	4313      	orrs	r3, r2
 8003148:	07e4      	lsls	r4, r4, #31
 800314a:	4323      	orrs	r3, r4
 800314c:	0028      	movs	r0, r5
 800314e:	0019      	movs	r1, r3
 8003150:	bd70      	pop	{r4, r5, r6, pc}
 8003152:	2b00      	cmp	r3, #0
 8003154:	d114      	bne.n	8003180 <__aeabi_f2d+0x5c>
 8003156:	2d00      	cmp	r5, #0
 8003158:	d01b      	beq.n	8003192 <__aeabi_f2d+0x6e>
 800315a:	0028      	movs	r0, r5
 800315c:	f000 f8b0 	bl	80032c0 <__clzsi2>
 8003160:	280a      	cmp	r0, #10
 8003162:	dc1c      	bgt.n	800319e <__aeabi_f2d+0x7a>
 8003164:	230b      	movs	r3, #11
 8003166:	002a      	movs	r2, r5
 8003168:	1a1b      	subs	r3, r3, r0
 800316a:	40da      	lsrs	r2, r3
 800316c:	0003      	movs	r3, r0
 800316e:	3315      	adds	r3, #21
 8003170:	409d      	lsls	r5, r3
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <__aeabi_f2d+0x88>)
 8003174:	0312      	lsls	r2, r2, #12
 8003176:	1a1b      	subs	r3, r3, r0
 8003178:	055b      	lsls	r3, r3, #21
 800317a:	0b12      	lsrs	r2, r2, #12
 800317c:	0d5b      	lsrs	r3, r3, #21
 800317e:	e7e1      	b.n	8003144 <__aeabi_f2d+0x20>
 8003180:	2d00      	cmp	r5, #0
 8003182:	d009      	beq.n	8003198 <__aeabi_f2d+0x74>
 8003184:	0b13      	lsrs	r3, r2, #12
 8003186:	2280      	movs	r2, #128	; 0x80
 8003188:	0312      	lsls	r2, r2, #12
 800318a:	431a      	orrs	r2, r3
 800318c:	076d      	lsls	r5, r5, #29
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <__aeabi_f2d+0x8c>)
 8003190:	e7d8      	b.n	8003144 <__aeabi_f2d+0x20>
 8003192:	2300      	movs	r3, #0
 8003194:	2200      	movs	r2, #0
 8003196:	e7d5      	b.n	8003144 <__aeabi_f2d+0x20>
 8003198:	2200      	movs	r2, #0
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <__aeabi_f2d+0x8c>)
 800319c:	e7d2      	b.n	8003144 <__aeabi_f2d+0x20>
 800319e:	0003      	movs	r3, r0
 80031a0:	002a      	movs	r2, r5
 80031a2:	3b0b      	subs	r3, #11
 80031a4:	409a      	lsls	r2, r3
 80031a6:	2500      	movs	r5, #0
 80031a8:	e7e3      	b.n	8003172 <__aeabi_f2d+0x4e>
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	00000389 	.word	0x00000389
 80031b0:	000007ff 	.word	0x000007ff

080031b4 <__aeabi_d2f>:
 80031b4:	0002      	movs	r2, r0
 80031b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031b8:	004b      	lsls	r3, r1, #1
 80031ba:	030d      	lsls	r5, r1, #12
 80031bc:	0f40      	lsrs	r0, r0, #29
 80031be:	0d5b      	lsrs	r3, r3, #21
 80031c0:	0fcc      	lsrs	r4, r1, #31
 80031c2:	0a6d      	lsrs	r5, r5, #9
 80031c4:	493a      	ldr	r1, [pc, #232]	; (80032b0 <__aeabi_d2f+0xfc>)
 80031c6:	4305      	orrs	r5, r0
 80031c8:	1c58      	adds	r0, r3, #1
 80031ca:	00d7      	lsls	r7, r2, #3
 80031cc:	4208      	tst	r0, r1
 80031ce:	d00a      	beq.n	80031e6 <__aeabi_d2f+0x32>
 80031d0:	4938      	ldr	r1, [pc, #224]	; (80032b4 <__aeabi_d2f+0x100>)
 80031d2:	1859      	adds	r1, r3, r1
 80031d4:	29fe      	cmp	r1, #254	; 0xfe
 80031d6:	dd16      	ble.n	8003206 <__aeabi_d2f+0x52>
 80031d8:	20ff      	movs	r0, #255	; 0xff
 80031da:	2200      	movs	r2, #0
 80031dc:	05c0      	lsls	r0, r0, #23
 80031de:	4310      	orrs	r0, r2
 80031e0:	07e4      	lsls	r4, r4, #31
 80031e2:	4320      	orrs	r0, r4
 80031e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <__aeabi_d2f+0x44>
 80031ea:	433d      	orrs	r5, r7
 80031ec:	d026      	beq.n	800323c <__aeabi_d2f+0x88>
 80031ee:	2205      	movs	r2, #5
 80031f0:	0192      	lsls	r2, r2, #6
 80031f2:	0a52      	lsrs	r2, r2, #9
 80031f4:	b2d8      	uxtb	r0, r3
 80031f6:	e7f1      	b.n	80031dc <__aeabi_d2f+0x28>
 80031f8:	432f      	orrs	r7, r5
 80031fa:	d0ed      	beq.n	80031d8 <__aeabi_d2f+0x24>
 80031fc:	2280      	movs	r2, #128	; 0x80
 80031fe:	03d2      	lsls	r2, r2, #15
 8003200:	20ff      	movs	r0, #255	; 0xff
 8003202:	432a      	orrs	r2, r5
 8003204:	e7ea      	b.n	80031dc <__aeabi_d2f+0x28>
 8003206:	2900      	cmp	r1, #0
 8003208:	dd1b      	ble.n	8003242 <__aeabi_d2f+0x8e>
 800320a:	0192      	lsls	r2, r2, #6
 800320c:	1e50      	subs	r0, r2, #1
 800320e:	4182      	sbcs	r2, r0
 8003210:	00ed      	lsls	r5, r5, #3
 8003212:	0f7f      	lsrs	r7, r7, #29
 8003214:	432a      	orrs	r2, r5
 8003216:	433a      	orrs	r2, r7
 8003218:	0753      	lsls	r3, r2, #29
 800321a:	d047      	beq.n	80032ac <__aeabi_d2f+0xf8>
 800321c:	230f      	movs	r3, #15
 800321e:	4013      	ands	r3, r2
 8003220:	2b04      	cmp	r3, #4
 8003222:	d000      	beq.n	8003226 <__aeabi_d2f+0x72>
 8003224:	3204      	adds	r2, #4
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	04db      	lsls	r3, r3, #19
 800322a:	4013      	ands	r3, r2
 800322c:	d03e      	beq.n	80032ac <__aeabi_d2f+0xf8>
 800322e:	1c48      	adds	r0, r1, #1
 8003230:	29fe      	cmp	r1, #254	; 0xfe
 8003232:	d0d1      	beq.n	80031d8 <__aeabi_d2f+0x24>
 8003234:	0192      	lsls	r2, r2, #6
 8003236:	0a52      	lsrs	r2, r2, #9
 8003238:	b2c0      	uxtb	r0, r0
 800323a:	e7cf      	b.n	80031dc <__aeabi_d2f+0x28>
 800323c:	2000      	movs	r0, #0
 800323e:	2200      	movs	r2, #0
 8003240:	e7cc      	b.n	80031dc <__aeabi_d2f+0x28>
 8003242:	000a      	movs	r2, r1
 8003244:	3217      	adds	r2, #23
 8003246:	db2f      	blt.n	80032a8 <__aeabi_d2f+0xf4>
 8003248:	2680      	movs	r6, #128	; 0x80
 800324a:	0436      	lsls	r6, r6, #16
 800324c:	432e      	orrs	r6, r5
 800324e:	251e      	movs	r5, #30
 8003250:	1a6d      	subs	r5, r5, r1
 8003252:	2d1f      	cmp	r5, #31
 8003254:	dd11      	ble.n	800327a <__aeabi_d2f+0xc6>
 8003256:	2202      	movs	r2, #2
 8003258:	4252      	negs	r2, r2
 800325a:	1a52      	subs	r2, r2, r1
 800325c:	0031      	movs	r1, r6
 800325e:	40d1      	lsrs	r1, r2
 8003260:	2d20      	cmp	r5, #32
 8003262:	d004      	beq.n	800326e <__aeabi_d2f+0xba>
 8003264:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <__aeabi_d2f+0x104>)
 8003266:	4694      	mov	ip, r2
 8003268:	4463      	add	r3, ip
 800326a:	409e      	lsls	r6, r3
 800326c:	4337      	orrs	r7, r6
 800326e:	003a      	movs	r2, r7
 8003270:	1e53      	subs	r3, r2, #1
 8003272:	419a      	sbcs	r2, r3
 8003274:	430a      	orrs	r2, r1
 8003276:	2100      	movs	r1, #0
 8003278:	e7ce      	b.n	8003218 <__aeabi_d2f+0x64>
 800327a:	4a10      	ldr	r2, [pc, #64]	; (80032bc <__aeabi_d2f+0x108>)
 800327c:	0038      	movs	r0, r7
 800327e:	4694      	mov	ip, r2
 8003280:	4463      	add	r3, ip
 8003282:	4098      	lsls	r0, r3
 8003284:	003a      	movs	r2, r7
 8003286:	1e41      	subs	r1, r0, #1
 8003288:	4188      	sbcs	r0, r1
 800328a:	409e      	lsls	r6, r3
 800328c:	40ea      	lsrs	r2, r5
 800328e:	4330      	orrs	r0, r6
 8003290:	4302      	orrs	r2, r0
 8003292:	2100      	movs	r1, #0
 8003294:	0753      	lsls	r3, r2, #29
 8003296:	d1c1      	bne.n	800321c <__aeabi_d2f+0x68>
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	0013      	movs	r3, r2
 800329c:	04c9      	lsls	r1, r1, #19
 800329e:	2001      	movs	r0, #1
 80032a0:	400b      	ands	r3, r1
 80032a2:	420a      	tst	r2, r1
 80032a4:	d1c6      	bne.n	8003234 <__aeabi_d2f+0x80>
 80032a6:	e7a3      	b.n	80031f0 <__aeabi_d2f+0x3c>
 80032a8:	2300      	movs	r3, #0
 80032aa:	e7a0      	b.n	80031ee <__aeabi_d2f+0x3a>
 80032ac:	000b      	movs	r3, r1
 80032ae:	e79f      	b.n	80031f0 <__aeabi_d2f+0x3c>
 80032b0:	000007fe 	.word	0x000007fe
 80032b4:	fffffc80 	.word	0xfffffc80
 80032b8:	fffffca2 	.word	0xfffffca2
 80032bc:	fffffc82 	.word	0xfffffc82

080032c0 <__clzsi2>:
 80032c0:	211c      	movs	r1, #28
 80032c2:	2301      	movs	r3, #1
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	4298      	cmp	r0, r3
 80032c8:	d301      	bcc.n	80032ce <__clzsi2+0xe>
 80032ca:	0c00      	lsrs	r0, r0, #16
 80032cc:	3910      	subs	r1, #16
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	4298      	cmp	r0, r3
 80032d2:	d301      	bcc.n	80032d8 <__clzsi2+0x18>
 80032d4:	0a00      	lsrs	r0, r0, #8
 80032d6:	3908      	subs	r1, #8
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	4298      	cmp	r0, r3
 80032dc:	d301      	bcc.n	80032e2 <__clzsi2+0x22>
 80032de:	0900      	lsrs	r0, r0, #4
 80032e0:	3904      	subs	r1, #4
 80032e2:	a202      	add	r2, pc, #8	; (adr r2, 80032ec <__clzsi2+0x2c>)
 80032e4:	5c10      	ldrb	r0, [r2, r0]
 80032e6:	1840      	adds	r0, r0, r1
 80032e8:	4770      	bx	lr
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	02020304 	.word	0x02020304
 80032f0:	01010101 	.word	0x01010101
	...

080032fc <__clzdi2>:
 80032fc:	b510      	push	{r4, lr}
 80032fe:	2900      	cmp	r1, #0
 8003300:	d103      	bne.n	800330a <__clzdi2+0xe>
 8003302:	f7ff ffdd 	bl	80032c0 <__clzsi2>
 8003306:	3020      	adds	r0, #32
 8003308:	e002      	b.n	8003310 <__clzdi2+0x14>
 800330a:	0008      	movs	r0, r1
 800330c:	f7ff ffd8 	bl	80032c0 <__clzsi2>
 8003310:	bd10      	pop	{r4, pc}
 8003312:	46c0      	nop			; (mov r8, r8)

08003314 <AHT20_Master_Transmit>:
 */

#include "App/AHT20.h"

HAL_StatusTypeDef AHT20_Master_Transmit(uint8_t *data, uint16_t size)
{
 8003314:	b5b0      	push	{r4, r5, r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af02      	add	r7, sp, #8
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	000a      	movs	r2, r1
 800331e:	1cbb      	adds	r3, r7, #2
 8003320:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDR, data, size, HAL_MAX_DELAY);
 8003322:	250f      	movs	r5, #15
 8003324:	197c      	adds	r4, r7, r5
 8003326:	1cbb      	adds	r3, r7, #2
 8003328:	8819      	ldrh	r1, [r3, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	4807      	ldr	r0, [pc, #28]	; (800334c <AHT20_Master_Transmit+0x38>)
 800332e:	2301      	movs	r3, #1
 8003330:	425b      	negs	r3, r3
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	000b      	movs	r3, r1
 8003336:	2170      	movs	r1, #112	; 0x70
 8003338:	f004 f908 	bl	800754c <HAL_I2C_Master_Transmit>
 800333c:	0003      	movs	r3, r0
 800333e:	7023      	strb	r3, [r4, #0]

	return status;
 8003340:	197b      	adds	r3, r7, r5
 8003342:	781b      	ldrb	r3, [r3, #0]
}
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	b004      	add	sp, #16
 800334a:	bdb0      	pop	{r4, r5, r7, pc}
 800334c:	200002bc 	.word	0x200002bc

08003350 <AHT20_Master_Receive>:

HAL_StatusTypeDef AHT20_Master_Receive(uint8_t *data, uint16_t size)
{
 8003350:	b5b0      	push	{r4, r5, r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af02      	add	r7, sp, #8
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	000a      	movs	r2, r1
 800335a:	1cbb      	adds	r3, r7, #2
 800335c:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Receive(&hi2c1, AHT20_READ_ADDR, data, size, HAL_MAX_DELAY);
 800335e:	250f      	movs	r5, #15
 8003360:	197c      	adds	r4, r7, r5
 8003362:	1cbb      	adds	r3, r7, #2
 8003364:	8819      	ldrh	r1, [r3, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	4807      	ldr	r0, [pc, #28]	; (8003388 <AHT20_Master_Receive+0x38>)
 800336a:	2301      	movs	r3, #1
 800336c:	425b      	negs	r3, r3
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	000b      	movs	r3, r1
 8003372:	2171      	movs	r1, #113	; 0x71
 8003374:	f004 f9f2 	bl	800775c <HAL_I2C_Master_Receive>
 8003378:	0003      	movs	r3, r0
 800337a:	7023      	strb	r3, [r4, #0]

	return status;
 800337c:	197b      	adds	r3, r7, r5
 800337e:	781b      	ldrb	r3, [r3, #0]
}
 8003380:	0018      	movs	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	b004      	add	sp, #16
 8003386:	bdb0      	pop	{r4, r5, r7, pc}
 8003388:	200002bc 	.word	0x200002bc

0800338c <AHT20_Init>:

	return read_value;
}

void AHT20_Init()
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
	uint8_t init_cmd[] = {0xBE, 0x08, 0x00};
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	4a19      	ldr	r2, [pc, #100]	; (80033fc <AHT20_Init+0x70>)
 8003396:	8811      	ldrh	r1, [r2, #0]
 8003398:	8019      	strh	r1, [r3, #0]
 800339a:	7892      	ldrb	r2, [r2, #2]
 800339c:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(init_cmd, sizeof(init_cmd)) != HAL_OK)
 800339e:	1d3b      	adds	r3, r7, #4
 80033a0:	2103      	movs	r1, #3
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7ff ffb6 	bl	8003314 <AHT20_Master_Transmit>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d004      	beq.n	80033b6 <AHT20_Init+0x2a>
	{
		printf("AHT20 initialisation error\n");
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <AHT20_Init+0x74>)
 80033ae:	0018      	movs	r0, r3
 80033b0:	f00a f80e 	bl	800d3d0 <puts>
		else
		{
			printf("AHT20 not calibrated\n");
		}
	}
}
 80033b4:	e01d      	b.n	80033f2 <AHT20_Init+0x66>
		printf("AHT20 initialised\n");
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <AHT20_Init+0x78>)
 80033b8:	0018      	movs	r0, r3
 80033ba:	f00a f809 	bl	800d3d0 <puts>
		uint8_t value = 0x00;
 80033be:	1cfb      	adds	r3, r7, #3
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 80033c4:	200a      	movs	r0, #10
 80033c6:	f002 feb7 	bl	8006138 <HAL_Delay>
		AHT20_Master_Receive(&value, sizeof(value));
 80033ca:	1cfb      	adds	r3, r7, #3
 80033cc:	2101      	movs	r1, #1
 80033ce:	0018      	movs	r0, r3
 80033d0:	f7ff ffbe 	bl	8003350 <AHT20_Master_Receive>
		if ((value & 0x08) != 0x00) // check calibration bit
 80033d4:	1cfb      	adds	r3, r7, #3
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	001a      	movs	r2, r3
 80033da:	2308      	movs	r3, #8
 80033dc:	4013      	ands	r3, r2
 80033de:	d004      	beq.n	80033ea <AHT20_Init+0x5e>
			printf("AHT20 calibrated\n");
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <AHT20_Init+0x7c>)
 80033e2:	0018      	movs	r0, r3
 80033e4:	f009 fff4 	bl	800d3d0 <puts>
}
 80033e8:	e003      	b.n	80033f2 <AHT20_Init+0x66>
			printf("AHT20 not calibrated\n");
 80033ea:	4b08      	ldr	r3, [pc, #32]	; (800340c <AHT20_Init+0x80>)
 80033ec:	0018      	movs	r0, r3
 80033ee:	f009 ffef 	bl	800d3d0 <puts>
}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b002      	add	sp, #8
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	080101bc 	.word	0x080101bc
 8003400:	08010160 	.word	0x08010160
 8003404:	0801017c 	.word	0x0801017c
 8003408:	08010190 	.word	0x08010190
 800340c:	080101a4 	.word	0x080101a4

08003410 <AHT20_Read>:

void AHT20_Read(volatile float *Temp, volatile float *Hum)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
	uint8_t trig_measure_cmd[] = {0xAC, 0x33, 0x00};
 800341a:	2010      	movs	r0, #16
 800341c:	183b      	adds	r3, r7, r0
 800341e:	4a35      	ldr	r2, [pc, #212]	; (80034f4 <AHT20_Read+0xe4>)
 8003420:	8811      	ldrh	r1, [r2, #0]
 8003422:	8019      	strh	r1, [r3, #0]
 8003424:	7892      	ldrb	r2, [r2, #2]
 8003426:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(trig_measure_cmd, sizeof(trig_measure_cmd)) != HAL_OK)
 8003428:	183b      	adds	r3, r7, r0
 800342a:	2103      	movs	r1, #3
 800342c:	0018      	movs	r0, r3
 800342e:	f7ff ff71 	bl	8003314 <AHT20_Master_Transmit>
 8003432:	1e03      	subs	r3, r0, #0
 8003434:	d004      	beq.n	8003440 <AHT20_Read+0x30>
	{
		printf("AHT20 trigger measurement error\n");
 8003436:	4b30      	ldr	r3, [pc, #192]	; (80034f8 <AHT20_Read+0xe8>)
 8003438:	0018      	movs	r0, r3
 800343a:	f009 ffc9 	bl	800d3d0 <puts>

			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
			*Temp = data * 200.0f / (1 << 20) - 50;
		}
	}
}
 800343e:	e054      	b.n	80034ea <AHT20_Read+0xda>
		HAL_Delay(80); // wait for the measurements to be completed
 8003440:	2050      	movs	r0, #80	; 0x50
 8003442:	f002 fe79 	bl	8006138 <HAL_Delay>
		AHT20_Master_Receive(read_buffer, sizeof(read_buffer));
 8003446:	2408      	movs	r4, #8
 8003448:	193b      	adds	r3, r7, r4
 800344a:	2106      	movs	r1, #6
 800344c:	0018      	movs	r0, r3
 800344e:	f7ff ff7f 	bl	8003350 <AHT20_Master_Receive>
		if(((read_buffer[0]) & 0x80) == 0x00)
 8003452:	193b      	adds	r3, r7, r4
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b25b      	sxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	db46      	blt.n	80034ea <AHT20_Read+0xda>
			uint32_t data = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
			data = (((uint32_t)read_buffer[3] >> 4) + ((uint32_t)read_buffer[2] << 4) + ((uint32_t)read_buffer[1] << 12));
 8003460:	193b      	adds	r3, r7, r4
 8003462:	78db      	ldrb	r3, [r3, #3]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	b2db      	uxtb	r3, r3
 8003468:	001a      	movs	r2, r3
 800346a:	193b      	adds	r3, r7, r4
 800346c:	789b      	ldrb	r3, [r3, #2]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	18d2      	adds	r2, r2, r3
 8003472:	193b      	adds	r3, r7, r4
 8003474:	785b      	ldrb	r3, [r3, #1]
 8003476:	031b      	lsls	r3, r3, #12
 8003478:	18d3      	adds	r3, r2, r3
 800347a:	617b      	str	r3, [r7, #20]
			*Hum = data * 100.0f / (1 << 20);
 800347c:	6978      	ldr	r0, [r7, #20]
 800347e:	f7fd ffc1 	bl	8001404 <__aeabi_ui2f>
 8003482:	1c03      	adds	r3, r0, #0
 8003484:	491d      	ldr	r1, [pc, #116]	; (80034fc <AHT20_Read+0xec>)
 8003486:	1c18      	adds	r0, r3, #0
 8003488:	f7fd fc5c 	bl	8000d44 <__aeabi_fmul>
 800348c:	1c03      	adds	r3, r0, #0
 800348e:	2193      	movs	r1, #147	; 0x93
 8003490:	05c9      	lsls	r1, r1, #23
 8003492:	1c18      	adds	r0, r3, #0
 8003494:	f7fd fb3c 	bl	8000b10 <__aeabi_fdiv>
 8003498:	1c03      	adds	r3, r0, #0
 800349a:	1c1a      	adds	r2, r3, #0
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	601a      	str	r2, [r3, #0]
			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
 80034a0:	193b      	adds	r3, r7, r4
 80034a2:	78db      	ldrb	r3, [r3, #3]
 80034a4:	041a      	lsls	r2, r3, #16
 80034a6:	23f0      	movs	r3, #240	; 0xf0
 80034a8:	031b      	lsls	r3, r3, #12
 80034aa:	401a      	ands	r2, r3
 80034ac:	193b      	adds	r3, r7, r4
 80034ae:	791b      	ldrb	r3, [r3, #4]
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	18d3      	adds	r3, r2, r3
 80034b4:	193a      	adds	r2, r7, r4
 80034b6:	7952      	ldrb	r2, [r2, #5]
 80034b8:	189b      	adds	r3, r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
			*Temp = data * 200.0f / (1 << 20) - 50;
 80034bc:	6978      	ldr	r0, [r7, #20]
 80034be:	f7fd ffa1 	bl	8001404 <__aeabi_ui2f>
 80034c2:	1c03      	adds	r3, r0, #0
 80034c4:	490e      	ldr	r1, [pc, #56]	; (8003500 <AHT20_Read+0xf0>)
 80034c6:	1c18      	adds	r0, r3, #0
 80034c8:	f7fd fc3c 	bl	8000d44 <__aeabi_fmul>
 80034cc:	1c03      	adds	r3, r0, #0
 80034ce:	2193      	movs	r1, #147	; 0x93
 80034d0:	05c9      	lsls	r1, r1, #23
 80034d2:	1c18      	adds	r0, r3, #0
 80034d4:	f7fd fb1c 	bl	8000b10 <__aeabi_fdiv>
 80034d8:	1c03      	adds	r3, r0, #0
 80034da:	490a      	ldr	r1, [pc, #40]	; (8003504 <AHT20_Read+0xf4>)
 80034dc:	1c18      	adds	r0, r3, #0
 80034de:	f7fd fd7f 	bl	8000fe0 <__aeabi_fsub>
 80034e2:	1c03      	adds	r3, r0, #0
 80034e4:	1c1a      	adds	r2, r3, #0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	601a      	str	r2, [r3, #0]
}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b007      	add	sp, #28
 80034f0:	bd90      	pop	{r4, r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	080101e0 	.word	0x080101e0
 80034f8:	080101c0 	.word	0x080101c0
 80034fc:	42c80000 	.word	0x42c80000
 8003500:	43480000 	.word	0x43480000
 8003504:	42480000 	.word	0x42480000

08003508 <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <strtoke+0x1a>
 800351c:	4b12      	ldr	r3, [pc, #72]	; (8003568 <strtoke+0x60>)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	601a      	str	r2, [r3, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <strtoke+0x60>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <strtoke+0x26>
 800352a:	2300      	movs	r3, #0
 800352c:	e018      	b.n	8003560 <strtoke+0x58>
  /* remember current start as found token */
  token = start;
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <strtoke+0x60>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <strtoke+0x60>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	0011      	movs	r1, r2
 800353c:	0018      	movs	r0, r3
 800353e:	f00a f87c 	bl	800d63a <strpbrk>
 8003542:	0002      	movs	r2, r0
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <strtoke+0x60>)
 8003546:	601a      	str	r2, [r3, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8003548:	4b07      	ldr	r3, [pc, #28]	; (8003568 <strtoke+0x60>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d006      	beq.n	800355e <strtoke+0x56>
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <strtoke+0x60>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	1c59      	adds	r1, r3, #1
 8003556:	4a04      	ldr	r2, [pc, #16]	; (8003568 <strtoke+0x60>)
 8003558:	6011      	str	r1, [r2, #0]
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 800355e:	68fb      	ldr	r3, [r7, #12]
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b004      	add	sp, #16
 8003566:	bd80      	pop	{r7, pc}
 8003568:	200001f8 	.word	0x200001f8

0800356c <NEO6_ReceiveUartChar>:

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	2382      	movs	r3, #130	; 0x82
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	5cd3      	ldrb	r3, [r2, r3]
 800357c:	3301      	adds	r3, #1
 800357e:	4a2b      	ldr	r2, [pc, #172]	; (800362c <NEO6_ReceiveUartChar+0xc0>)
 8003580:	4013      	ands	r3, r2
 8003582:	d503      	bpl.n	800358c <NEO6_ReceiveUartChar+0x20>
 8003584:	3b01      	subs	r3, #1
 8003586:	4a2a      	ldr	r2, [pc, #168]	; (8003630 <NEO6_ReceiveUartChar+0xc4>)
 8003588:	4313      	orrs	r3, r2
 800358a:	3301      	adds	r3, #1
 800358c:	001a      	movs	r2, r3
 800358e:	200f      	movs	r0, #15
 8003590:	183b      	adds	r3, r7, r0
 8003592:	701a      	strb	r2, [r3, #0]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	2306      	movs	r3, #6
 8003598:	33ff      	adds	r3, #255	; 0xff
 800359a:	5cd3      	ldrb	r3, [r2, r3]
 800359c:	183a      	adds	r2, r7, r0
 800359e:	7812      	ldrb	r2, [r2, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d038      	beq.n	8003616 <NEO6_ReceiveUartChar+0xaa>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 80035a4:	4b23      	ldr	r3, [pc, #140]	; (8003634 <NEO6_ReceiveUartChar+0xc8>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b0d      	cmp	r3, #13
 80035ac:	d119      	bne.n	80035e2 <NEO6_ReceiveUartChar+0x76>
		{
			GpsStateHandler->UartBufferLines++;
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	2383      	movs	r3, #131	; 0x83
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	5cd3      	ldrb	r3, [r2, r3]
 80035b6:	3301      	adds	r3, #1
 80035b8:	b2d9      	uxtb	r1, r3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	2383      	movs	r3, #131	; 0x83
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBufferHead = TempHead;
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	1839      	adds	r1, r7, r0
 80035c6:	2382      	movs	r3, #130	; 0x82
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	7809      	ldrb	r1, [r1, #0]
 80035cc:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 80035ce:	183b      	adds	r3, r7, r0
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	4a18      	ldr	r2, [pc, #96]	; (8003634 <NEO6_ReceiveUartChar+0xc8>)
 80035d4:	7812      	ldrb	r2, [r2, #0]
 80035d6:	b2d1      	uxtb	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	18d3      	adds	r3, r2, r3
 80035dc:	1c0a      	adds	r2, r1, #0
 80035de:	711a      	strb	r2, [r3, #4]
 80035e0:	e019      	b.n	8003616 <NEO6_ReceiveUartChar+0xaa>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 80035e2:	4b14      	ldr	r3, [pc, #80]	; (8003634 <NEO6_ReceiveUartChar+0xc8>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d014      	beq.n	8003616 <NEO6_ReceiveUartChar+0xaa>
 80035ec:	4b11      	ldr	r3, [pc, #68]	; (8003634 <NEO6_ReceiveUartChar+0xc8>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b0a      	cmp	r3, #10
 80035f4:	d00f      	beq.n	8003616 <NEO6_ReceiveUartChar+0xaa>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	200f      	movs	r0, #15
 80035fa:	1839      	adds	r1, r7, r0
 80035fc:	2382      	movs	r3, #130	; 0x82
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	7809      	ldrb	r1, [r1, #0]
 8003602:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8003604:	183b      	adds	r3, r7, r0
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <NEO6_ReceiveUartChar+0xc8>)
 800360a:	7812      	ldrb	r2, [r2, #0]
 800360c:	b2d1      	uxtb	r1, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	18d3      	adds	r3, r2, r3
 8003612:	1c0a      	adds	r2, r1, #0
 8003614:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4906      	ldr	r1, [pc, #24]	; (8003634 <NEO6_ReceiveUartChar+0xc8>)
 800361c:	2201      	movs	r2, #1
 800361e:	0018      	movs	r0, r3
 8003620:	f006 fd50 	bl	800a0c4 <HAL_UART_Receive_IT>
}
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b004      	add	sp, #16
 800362a:	bd80      	pop	{r7, pc}
 800362c:	800000ff 	.word	0x800000ff
 8003630:	ffffff00 	.word	0xffffff00
 8003634:	200001f4 	.word	0x200001f4

08003638 <NEO6_GetCharFromBuffer>:

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	2382      	movs	r3, #130	; 0x82
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	5cd2      	ldrb	r2, [r2, r3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	2306      	movs	r3, #6
 800364c:	33ff      	adds	r3, #255	; 0xff
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	429a      	cmp	r2, r3
 8003652:	d102      	bne.n	800365a <NEO6_GetCharFromBuffer+0x22>
	{
		return -1; // error - no char to return
 8003654:	2301      	movs	r3, #1
 8003656:	425b      	negs	r3, r3
 8003658:	e018      	b.n	800368c <NEO6_GetCharFromBuffer+0x54>
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	2306      	movs	r3, #6
 800365e:	33ff      	adds	r3, #255	; 0xff
 8003660:	5cd3      	ldrb	r3, [r2, r3]
 8003662:	3301      	adds	r3, #1
 8003664:	4a0b      	ldr	r2, [pc, #44]	; (8003694 <NEO6_GetCharFromBuffer+0x5c>)
 8003666:	4013      	ands	r3, r2
 8003668:	d503      	bpl.n	8003672 <NEO6_GetCharFromBuffer+0x3a>
 800366a:	3b01      	subs	r3, #1
 800366c:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <NEO6_GetCharFromBuffer+0x60>)
 800366e:	4313      	orrs	r3, r2
 8003670:	3301      	adds	r3, #1
 8003672:	b2d9      	uxtb	r1, r3
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	2306      	movs	r3, #6
 8003678:	33ff      	adds	r3, #255	; 0xff
 800367a:	54d1      	strb	r1, [r2, r3]

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	2306      	movs	r3, #6
 8003680:	33ff      	adds	r3, #255	; 0xff
 8003682:	5cd3      	ldrb	r3, [r2, r3]
 8003684:	001a      	movs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	189b      	adds	r3, r3, r2
 800368a:	791b      	ldrb	r3, [r3, #4]
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	b002      	add	sp, #8
 8003692:	bd80      	pop	{r7, pc}
 8003694:	800000ff 	.word	0x800000ff
 8003698:	ffffff00 	.word	0xffffff00

0800369c <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3308      	adds	r3, #8
 80036a8:	33ff      	adds	r3, #255	; 0xff
 80036aa:	60fb      	str	r3, [r7, #12]
	if(GpsStateHandler->UartBufferLines)
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	2383      	movs	r3, #131	; 0x83
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d027      	beq.n	8003708 <NEO6_GetLineFromBuffer+0x6c>
	{
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 80036b8:	e00b      	b.n	80036d2 <NEO6_GetLineFromBuffer+0x36>
		{
			if(TempChar == 13)
 80036ba:	220b      	movs	r2, #11
 80036bc:	18bb      	adds	r3, r7, r2
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b0d      	cmp	r3, #13
 80036c2:	d013      	beq.n	80036ec <NEO6_GetLineFromBuffer+0x50>
			{
				break;
			}
			*LinePointer = TempChar;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	18ba      	adds	r2, r7, r2
 80036c8:	7812      	ldrb	r2, [r2, #0]
 80036ca:	701a      	strb	r2, [r3, #0]
			LinePointer++;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3301      	adds	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	0018      	movs	r0, r3
 80036d6:	f7ff ffaf 	bl	8003638 <NEO6_GetCharFromBuffer>
 80036da:	0002      	movs	r2, r0
 80036dc:	210b      	movs	r1, #11
 80036de:	187b      	adds	r3, r7, r1
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	187b      	adds	r3, r7, r1
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e7      	bne.n	80036ba <NEO6_GetLineFromBuffer+0x1e>
 80036ea:	e000      	b.n	80036ee <NEO6_GetLineFromBuffer+0x52>
				break;
 80036ec:	46c0      	nop			; (mov r8, r8)
		}
		*LinePointer = 0; // end of cstring
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	2383      	movs	r3, #131	; 0x83
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	5cd3      	ldrb	r3, [r2, r3]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b2d9      	uxtb	r1, r3
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	2383      	movs	r3, #131	; 0x83
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	54d1      	strb	r1, [r2, r3]
	}
	return 0;
 8003708:	2300      	movs	r3, #0
}
 800370a:	0018      	movs	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 800371c:	4b70      	ldr	r3, [pc, #448]	; (80038e0 <NEO6_ParseGPRMC+0x1cc>)
 800371e:	0019      	movs	r1, r3
 8003720:	2000      	movs	r0, #0
 8003722:	f7ff fef1 	bl	8003508 <strtoke>
 8003726:	0003      	movs	r3, r0
 8003728:	60fb      	str	r3, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d030      	beq.n	8003794 <NEO6_ParseGPRMC+0x80>
	{
		Temp = atoi(ParsePoiner);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	0018      	movs	r0, r3
 8003736:	f007 ffc6 	bl	800b6c6 <atoi>
 800373a:	0003      	movs	r3, r0
 800373c:	60bb      	str	r3, [r7, #8]
		GpsStateHandler->Second = Temp % 100;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2164      	movs	r1, #100	; 0x64
 8003742:	0018      	movs	r0, r3
 8003744:	f7fc fd8c 	bl	8000260 <__aeabi_uidivmod>
 8003748:	000b      	movs	r3, r1
 800374a:	b2d9      	uxtb	r1, r3
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	238a      	movs	r3, #138	; 0x8a
 8003750:	33ff      	adds	r3, #255	; 0xff
 8003752:	54d1      	strb	r1, [r2, r3]
		GpsStateHandler->Minute = (Temp / 100) % 100;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2164      	movs	r1, #100	; 0x64
 8003758:	0018      	movs	r0, r3
 800375a:	f7fc fcfb 	bl	8000154 <__udivsi3>
 800375e:	0003      	movs	r3, r0
 8003760:	2164      	movs	r1, #100	; 0x64
 8003762:	0018      	movs	r0, r3
 8003764:	f7fc fd7c 	bl	8000260 <__aeabi_uidivmod>
 8003768:	000b      	movs	r3, r1
 800376a:	b2d9      	uxtb	r1, r3
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	23c4      	movs	r3, #196	; 0xc4
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	54d1      	strb	r1, [r2, r3]
		GpsStateHandler->Hour = (Temp / 10000) % 100;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	495b      	ldr	r1, [pc, #364]	; (80038e4 <NEO6_ParseGPRMC+0x1d0>)
 8003778:	0018      	movs	r0, r3
 800377a:	f7fc fceb 	bl	8000154 <__udivsi3>
 800377e:	0003      	movs	r3, r0
 8003780:	2164      	movs	r1, #100	; 0x64
 8003782:	0018      	movs	r0, r3
 8003784:	f7fc fd6c 	bl	8000260 <__aeabi_uidivmod>
 8003788:	000b      	movs	r3, r1
 800378a:	b2d9      	uxtb	r1, r3
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	2388      	movs	r3, #136	; 0x88
 8003790:	33ff      	adds	r3, #255	; 0xff
 8003792:	54d1      	strb	r1, [r2, r3]
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 8003794:	4b52      	ldr	r3, [pc, #328]	; (80038e0 <NEO6_ParseGPRMC+0x1cc>)
 8003796:	0019      	movs	r1, r3
 8003798:	2000      	movs	r0, #0
 800379a:	f7ff feb5 	bl	8003508 <strtoke>
 800379e:	0003      	movs	r3, r0
 80037a0:	60fb      	str	r3, [r7, #12]
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 80037a2:	4b4f      	ldr	r3, [pc, #316]	; (80038e0 <NEO6_ParseGPRMC+0x1cc>)
 80037a4:	0019      	movs	r1, r3
 80037a6:	2000      	movs	r0, #0
 80037a8:	f7ff feae 	bl	8003508 <strtoke>
 80037ac:	0003      	movs	r3, r0
 80037ae:	60fb      	str	r3, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00b      	beq.n	80037d0 <NEO6_ParseGPRMC+0xbc>
	{
		GpsStateHandler->Latitude = atof(ParsePoiner);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f007 ff7e 	bl	800b6bc <atof>
 80037c0:	0002      	movs	r2, r0
 80037c2:	000b      	movs	r3, r1
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	21c8      	movs	r1, #200	; 0xc8
 80037c8:	0049      	lsls	r1, r1, #1
 80037ca:	1841      	adds	r1, r0, r1
 80037cc:	600a      	str	r2, [r1, #0]
 80037ce:	604b      	str	r3, [r1, #4]
	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 80037d0:	4b43      	ldr	r3, [pc, #268]	; (80038e0 <NEO6_ParseGPRMC+0x1cc>)
 80037d2:	0019      	movs	r1, r3
 80037d4:	2000      	movs	r0, #0
 80037d6:	f7ff fe97 	bl	8003508 <strtoke>
 80037da:	0003      	movs	r3, r0
 80037dc:	60fb      	str	r3, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <NEO6_ParseGPRMC+0xde>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	7819      	ldrb	r1, [r3, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	23cc      	movs	r3, #204	; 0xcc
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	54d1      	strb	r1, [r2, r3]
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <NEO6_ParseGPRMC+0x1cc>)
 80037f4:	0019      	movs	r1, r3
 80037f6:	2000      	movs	r0, #0
 80037f8:	f7ff fe86 	bl	8003508 <strtoke>
 80037fc:	0003      	movs	r3, r0
 80037fe:	60fb      	str	r3, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <NEO6_ParseGPRMC+0x10c>
	{
		GpsStateHandler->Longitude = atof(ParsePoiner);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	0018      	movs	r0, r3
 800380c:	f007 ff56 	bl	800b6bc <atof>
 8003810:	0002      	movs	r2, r0
 8003812:	000b      	movs	r3, r1
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	21d0      	movs	r1, #208	; 0xd0
 8003818:	0049      	lsls	r1, r1, #1
 800381a:	1841      	adds	r1, r0, r1
 800381c:	600a      	str	r2, [r1, #0]
 800381e:	604b      	str	r3, [r1, #4]
	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8003820:	4b2f      	ldr	r3, [pc, #188]	; (80038e0 <NEO6_ParseGPRMC+0x1cc>)
 8003822:	0019      	movs	r1, r3
 8003824:	2000      	movs	r0, #0
 8003826:	f7ff fe6f 	bl	8003508 <strtoke>
 800382a:	0003      	movs	r3, r0
 800382c:	60fb      	str	r3, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <NEO6_ParseGPRMC+0x12e>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	7819      	ldrb	r1, [r3, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	23d4      	movs	r3, #212	; 0xd4
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	54d1      	strb	r1, [r2, r3]
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 8003842:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <NEO6_ParseGPRMC+0x1cc>)
 8003844:	0019      	movs	r1, r3
 8003846:	2000      	movs	r0, #0
 8003848:	f7ff fe5e 	bl	8003508 <strtoke>
 800384c:	0003      	movs	r3, r0
 800384e:	60fb      	str	r3, [r7, #12]
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 8003850:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <NEO6_ParseGPRMC+0x1cc>)
 8003852:	0019      	movs	r1, r3
 8003854:	2000      	movs	r0, #0
 8003856:	f7ff fe57 	bl	8003508 <strtoke>
 800385a:	0003      	movs	r3, r0
 800385c:	60fb      	str	r3, [r7, #12]
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <NEO6_ParseGPRMC+0x1cc>)
 8003860:	0019      	movs	r1, r3
 8003862:	2000      	movs	r0, #0
 8003864:	f7ff fe50 	bl	8003508 <strtoke>
 8003868:	0003      	movs	r3, r0
 800386a:	60fb      	str	r3, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d030      	beq.n	80038d6 <NEO6_ParseGPRMC+0x1c2>
	{
		Temp = atoi(ParsePoiner);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	0018      	movs	r0, r3
 8003878:	f007 ff25 	bl	800b6c6 <atoi>
 800387c:	0003      	movs	r3, r0
 800387e:	60bb      	str	r3, [r7, #8]
		GpsStateHandler->Year = Temp % 100;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2164      	movs	r1, #100	; 0x64
 8003884:	0018      	movs	r0, r3
 8003886:	f7fc fceb 	bl	8000260 <__aeabi_uidivmod>
 800388a:	000b      	movs	r3, r1
 800388c:	b2d9      	uxtb	r1, r3
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	23c6      	movs	r3, #198	; 0xc6
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	54d1      	strb	r1, [r2, r3]
		GpsStateHandler->Month = (Temp / 100) % 100;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2164      	movs	r1, #100	; 0x64
 800389a:	0018      	movs	r0, r3
 800389c:	f7fc fc5a 	bl	8000154 <__udivsi3>
 80038a0:	0003      	movs	r3, r0
 80038a2:	2164      	movs	r1, #100	; 0x64
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7fc fcdb 	bl	8000260 <__aeabi_uidivmod>
 80038aa:	000b      	movs	r3, r1
 80038ac:	b2d9      	uxtb	r1, r3
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	238c      	movs	r3, #140	; 0x8c
 80038b2:	33ff      	adds	r3, #255	; 0xff
 80038b4:	54d1      	strb	r1, [r2, r3]
		GpsStateHandler->Day = (Temp / 10000) % 100;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	490a      	ldr	r1, [pc, #40]	; (80038e4 <NEO6_ParseGPRMC+0x1d0>)
 80038ba:	0018      	movs	r0, r3
 80038bc:	f7fc fc4a 	bl	8000154 <__udivsi3>
 80038c0:	0003      	movs	r3, r0
 80038c2:	2164      	movs	r1, #100	; 0x64
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7fc fccb 	bl	8000260 <__aeabi_uidivmod>
 80038ca:	000b      	movs	r3, r1
 80038cc:	b2d9      	uxtb	r1, r3
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	23c5      	movs	r3, #197	; 0xc5
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	54d1      	strb	r1, [r2, r3]
	}
}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	46bd      	mov	sp, r7
 80038da:	b004      	add	sp, #16
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	080101e4 	.word	0x080101e4
 80038e4:	00002710 	.word	0x00002710

080038e8 <NEO6_ParseGPVTG>:

//
//	Track Made Good and Ground Speed.
//
void NEO6_ParseGPVTG(NEO6_State *GpsStateHandler)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	// eg2. $GPVTG,054.7,T,034.4,M,005.5,N,010.2,K

	char *ParsePoiner;

	// True track made good
	ParsePoiner = strtoke(NULL, ",");
 80038f0:	4b2a      	ldr	r3, [pc, #168]	; (800399c <NEO6_ParseGPVTG+0xb4>)
 80038f2:	0019      	movs	r1, r3
 80038f4:	2000      	movs	r0, #0
 80038f6:	f7ff fe07 	bl	8003508 <strtoke>
 80038fa:	0003      	movs	r3, r0
 80038fc:	60fb      	str	r3, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 80038fe:	4b27      	ldr	r3, [pc, #156]	; (800399c <NEO6_ParseGPVTG+0xb4>)
 8003900:	0019      	movs	r1, r3
 8003902:	2000      	movs	r0, #0
 8003904:	f7ff fe00 	bl	8003508 <strtoke>
 8003908:	0003      	movs	r3, r0
 800390a:	60fb      	str	r3, [r7, #12]
	// Magnetic track made good
	ParsePoiner = strtoke(NULL, ",");
 800390c:	4b23      	ldr	r3, [pc, #140]	; (800399c <NEO6_ParseGPVTG+0xb4>)
 800390e:	0019      	movs	r1, r3
 8003910:	2000      	movs	r0, #0
 8003912:	f7ff fdf9 	bl	8003508 <strtoke>
 8003916:	0003      	movs	r3, r0
 8003918:	60fb      	str	r3, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 800391a:	4b20      	ldr	r3, [pc, #128]	; (800399c <NEO6_ParseGPVTG+0xb4>)
 800391c:	0019      	movs	r1, r3
 800391e:	2000      	movs	r0, #0
 8003920:	f7ff fdf2 	bl	8003508 <strtoke>
 8003924:	0003      	movs	r3, r0
 8003926:	60fb      	str	r3, [r7, #12]
	// Ground speed, knots
	ParsePoiner = strtoke(NULL, ",");
 8003928:	4b1c      	ldr	r3, [pc, #112]	; (800399c <NEO6_ParseGPVTG+0xb4>)
 800392a:	0019      	movs	r1, r3
 800392c:	2000      	movs	r0, #0
 800392e:	f7ff fdeb 	bl	8003508 <strtoke>
 8003932:	0003      	movs	r3, r0
 8003934:	60fb      	str	r3, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00b      	beq.n	8003956 <NEO6_ParseGPVTG+0x6e>
	{
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	0018      	movs	r0, r3
 8003942:	f007 febb 	bl	800b6bc <atof>
 8003946:	0002      	movs	r2, r0
 8003948:	000b      	movs	r3, r1
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	21dc      	movs	r1, #220	; 0xdc
 800394e:	0049      	lsls	r1, r1, #1
 8003950:	1841      	adds	r1, r0, r1
 8003952:	600a      	str	r2, [r1, #0]
 8003954:	604b      	str	r3, [r1, #4]
	}
	ParsePoiner = strtoke(NULL, ",");
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <NEO6_ParseGPVTG+0xb4>)
 8003958:	0019      	movs	r1, r3
 800395a:	2000      	movs	r0, #0
 800395c:	f7ff fdd4 	bl	8003508 <strtoke>
 8003960:	0003      	movs	r3, r0
 8003962:	60fb      	str	r3, [r7, #12]
	// Ground speed, Kilometers per hour
	ParsePoiner = strtoke(NULL, ",");
 8003964:	4b0d      	ldr	r3, [pc, #52]	; (800399c <NEO6_ParseGPVTG+0xb4>)
 8003966:	0019      	movs	r1, r3
 8003968:	2000      	movs	r0, #0
 800396a:	f7ff fdcd 	bl	8003508 <strtoke>
 800396e:	0003      	movs	r3, r0
 8003970:	60fb      	str	r3, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <NEO6_ParseGPVTG+0xaa>
	{
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	0018      	movs	r0, r3
 800397e:	f007 fe9d 	bl	800b6bc <atof>
 8003982:	0002      	movs	r2, r0
 8003984:	000b      	movs	r3, r1
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	21e0      	movs	r1, #224	; 0xe0
 800398a:	0049      	lsls	r1, r1, #1
 800398c:	1841      	adds	r1, r0, r1
 800398e:	600a      	str	r2, [r1, #0]
 8003990:	604b      	str	r3, [r1, #4]
	}
}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b004      	add	sp, #16
 8003998:	bd80      	pop	{r7, pc}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	080101e4 	.word	0x080101e4

080039a0 <NEO6_ParseGPGGA>:

//
//	Global Positioning System Fix Data
//
void NEO6_ParseGPGGA(NEO6_State *GpsStateHandler)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	// eg. $GPGGA,212846.00,5025.81511,N,01639.92090,E,1,04,4.72,281.1,M,42.0,M,,*5F

	char *ParsePoiner;

	// UTC of Position
	ParsePoiner = strtoke(NULL, ",");
 80039a8:	4b37      	ldr	r3, [pc, #220]	; (8003a88 <NEO6_ParseGPGGA+0xe8>)
 80039aa:	0019      	movs	r1, r3
 80039ac:	2000      	movs	r0, #0
 80039ae:	f7ff fdab 	bl	8003508 <strtoke>
 80039b2:	0003      	movs	r3, r0
 80039b4:	60fb      	str	r3, [r7, #12]
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 80039b6:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <NEO6_ParseGPGGA+0xe8>)
 80039b8:	0019      	movs	r1, r3
 80039ba:	2000      	movs	r0, #0
 80039bc:	f7ff fda4 	bl	8003508 <strtoke>
 80039c0:	0003      	movs	r3, r0
 80039c2:	60fb      	str	r3, [r7, #12]
	// N or S
	ParsePoiner = strtoke(NULL, ",");
 80039c4:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <NEO6_ParseGPGGA+0xe8>)
 80039c6:	0019      	movs	r1, r3
 80039c8:	2000      	movs	r0, #0
 80039ca:	f7ff fd9d 	bl	8003508 <strtoke>
 80039ce:	0003      	movs	r3, r0
 80039d0:	60fb      	str	r3, [r7, #12]
	// Longitude
	ParsePoiner = strtoke(NULL, ",");
 80039d2:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <NEO6_ParseGPGGA+0xe8>)
 80039d4:	0019      	movs	r1, r3
 80039d6:	2000      	movs	r0, #0
 80039d8:	f7ff fd96 	bl	8003508 <strtoke>
 80039dc:	0003      	movs	r3, r0
 80039de:	60fb      	str	r3, [r7, #12]
	// E or W
	ParsePoiner = strtoke(NULL, ",");
 80039e0:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <NEO6_ParseGPGGA+0xe8>)
 80039e2:	0019      	movs	r1, r3
 80039e4:	2000      	movs	r0, #0
 80039e6:	f7ff fd8f 	bl	8003508 <strtoke>
 80039ea:	0003      	movs	r3, r0
 80039ec:	60fb      	str	r3, [r7, #12]
	// GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
	ParsePoiner = strtoke(NULL, ",");
 80039ee:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <NEO6_ParseGPGGA+0xe8>)
 80039f0:	0019      	movs	r1, r3
 80039f2:	2000      	movs	r0, #0
 80039f4:	f7ff fd88 	bl	8003508 <strtoke>
 80039f8:	0003      	movs	r3, r0
 80039fa:	60fb      	str	r3, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d009      	beq.n	8003a18 <NEO6_ParseGPGGA+0x78>
	{
		GpsStateHandler->Quality = atoi(ParsePoiner);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	0018      	movs	r0, r3
 8003a08:	f007 fe5d 	bl	800b6c6 <atoi>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	b2d9      	uxtb	r1, r3
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	23ca      	movs	r3, #202	; 0xca
 8003a14:	33ff      	adds	r3, #255	; 0xff
 8003a16:	54d1      	strb	r1, [r2, r3]
	}
	// Number of satellites in use [not those in view]
	ParsePoiner = strtoke(NULL, ",");
 8003a18:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <NEO6_ParseGPGGA+0xe8>)
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	f7ff fd73 	bl	8003508 <strtoke>
 8003a22:	0003      	movs	r3, r0
 8003a24:	60fb      	str	r3, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <NEO6_ParseGPGGA+0xa2>
	{
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f007 fe48 	bl	800b6c6 <atoi>
 8003a36:	0003      	movs	r3, r0
 8003a38:	b2d9      	uxtb	r1, r3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	23e4      	movs	r3, #228	; 0xe4
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	54d1      	strb	r1, [r2, r3]
	}
	// Horizontal dilution of position
	ParsePoiner = strtoke(NULL, ",");
 8003a42:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <NEO6_ParseGPGGA+0xe8>)
 8003a44:	0019      	movs	r1, r3
 8003a46:	2000      	movs	r0, #0
 8003a48:	f7ff fd5e 	bl	8003508 <strtoke>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	60fb      	str	r3, [r7, #12]
	// Antenna altitude above/below mean sea level (geoid)
	ParsePoiner = strtoke(NULL, ",");
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <NEO6_ParseGPGGA+0xe8>)
 8003a52:	0019      	movs	r1, r3
 8003a54:	2000      	movs	r0, #0
 8003a56:	f7ff fd57 	bl	8003508 <strtoke>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	60fb      	str	r3, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <NEO6_ParseGPGGA+0xde>
	{
		GpsStateHandler->Altitude = atof(ParsePoiner);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f007 fe27 	bl	800b6bc <atof>
 8003a6e:	0002      	movs	r2, r0
 8003a70:	000b      	movs	r3, r1
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	21d8      	movs	r1, #216	; 0xd8
 8003a76:	0049      	lsls	r1, r1, #1
 8003a78:	1841      	adds	r1, r0, r1
 8003a7a:	600a      	str	r2, [r1, #0]
 8003a7c:	604b      	str	r3, [r1, #4]
	}
}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b004      	add	sp, #16
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	080101e4 	.word	0x080101e4

08003a8c <NEO6_ParseGPGSA>:

//
//	GPS DOP and active satellites
//
void NEO6_ParseGPGSA(NEO6_State *GpsStateHandler)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	// eg2. $GPGSA,A,3,19,28,14,18,27,22,31,39,,,,,1.7,1.0,1.3*35

	char *ParsePoiner;

	// Mode
	ParsePoiner = strtoke(NULL, ",");
 8003a94:	4b3d      	ldr	r3, [pc, #244]	; (8003b8c <NEO6_ParseGPGSA+0x100>)
 8003a96:	0019      	movs	r1, r3
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f7ff fd35 	bl	8003508 <strtoke>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	60bb      	str	r3, [r7, #8]
	// 2D/3D Fix
	ParsePoiner = strtoke(NULL, ",");
 8003aa2:	4b3a      	ldr	r3, [pc, #232]	; (8003b8c <NEO6_ParseGPGSA+0x100>)
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	f7ff fd2e 	bl	8003508 <strtoke>
 8003aac:	0003      	movs	r3, r0
 8003aae:	60bb      	str	r3, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d009      	beq.n	8003acc <NEO6_ParseGPGSA+0x40>
	{
		GpsStateHandler->FixMode = atoi(ParsePoiner);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	0018      	movs	r0, r3
 8003abc:	f007 fe03 	bl	800b6c6 <atoi>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	b2d9      	uxtb	r1, r3
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	23e5      	movs	r3, #229	; 0xe5
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	54d1      	strb	r1, [r2, r3]
	}
	// IDs of SVs used in position fix (null for unused fields)
	for(uint8_t i=0; i < 12; i++)
 8003acc:	230f      	movs	r3, #15
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	e00c      	b.n	8003af0 <NEO6_ParseGPGSA+0x64>
	{
		ParsePoiner = strtoke(NULL, ",");
 8003ad6:	4b2d      	ldr	r3, [pc, #180]	; (8003b8c <NEO6_ParseGPGSA+0x100>)
 8003ad8:	0019      	movs	r1, r3
 8003ada:	2000      	movs	r0, #0
 8003adc:	f7ff fd14 	bl	8003508 <strtoke>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	60bb      	str	r3, [r7, #8]
	for(uint8_t i=0; i < 12; i++)
 8003ae4:	210f      	movs	r1, #15
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	781a      	ldrb	r2, [r3, #0]
 8003aea:	187b      	adds	r3, r7, r1
 8003aec:	3201      	adds	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	230f      	movs	r3, #15
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b0b      	cmp	r3, #11
 8003af8:	d9ed      	bls.n	8003ad6 <NEO6_ParseGPGSA+0x4a>
	}
	// PDOP
	ParsePoiner = strtoke(NULL, ",");
 8003afa:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <NEO6_ParseGPGSA+0x100>)
 8003afc:	0019      	movs	r1, r3
 8003afe:	2000      	movs	r0, #0
 8003b00:	f7ff fd02 	bl	8003508 <strtoke>
 8003b04:	0003      	movs	r3, r0
 8003b06:	60bb      	str	r3, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00b      	beq.n	8003b28 <NEO6_ParseGPGSA+0x9c>
	{
		GpsStateHandler->Dop = atof(ParsePoiner);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f007 fdd2 	bl	800b6bc <atof>
 8003b18:	0002      	movs	r2, r0
 8003b1a:	000b      	movs	r3, r1
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	21e8      	movs	r1, #232	; 0xe8
 8003b20:	0049      	lsls	r1, r1, #1
 8003b22:	1841      	adds	r1, r0, r1
 8003b24:	600a      	str	r2, [r1, #0]
 8003b26:	604b      	str	r3, [r1, #4]
	}
	// HDOP
	ParsePoiner = strtoke(NULL, ",");
 8003b28:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <NEO6_ParseGPGSA+0x100>)
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f7ff fceb 	bl	8003508 <strtoke>
 8003b32:	0003      	movs	r3, r0
 8003b34:	60bb      	str	r3, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <NEO6_ParseGPGSA+0xca>
	{
		GpsStateHandler->Hdop = atof(ParsePoiner);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f007 fdbb 	bl	800b6bc <atof>
 8003b46:	0002      	movs	r2, r0
 8003b48:	000b      	movs	r3, r1
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	21ec      	movs	r1, #236	; 0xec
 8003b4e:	0049      	lsls	r1, r1, #1
 8003b50:	1841      	adds	r1, r0, r1
 8003b52:	600a      	str	r2, [r1, #0]
 8003b54:	604b      	str	r3, [r1, #4]
	}
	// VDOP
	ParsePoiner = strtoke(NULL, ",");
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <NEO6_ParseGPGSA+0x100>)
 8003b58:	0019      	movs	r1, r3
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	f7ff fcd4 	bl	8003508 <strtoke>
 8003b60:	0003      	movs	r3, r0
 8003b62:	60bb      	str	r3, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00b      	beq.n	8003b84 <NEO6_ParseGPGSA+0xf8>
	{
		GpsStateHandler->Vdop = atof(ParsePoiner);
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f007 fda4 	bl	800b6bc <atof>
 8003b74:	0002      	movs	r2, r0
 8003b76:	000b      	movs	r3, r1
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	21f0      	movs	r1, #240	; 0xf0
 8003b7c:	0049      	lsls	r1, r1, #1
 8003b7e:	1841      	adds	r1, r0, r1
 8003b80:	600a      	str	r2, [r1, #0]
 8003b82:	604b      	str	r3, [r1, #4]
	}
}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b004      	add	sp, #16
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	080101e4 	.word	0x080101e4

08003b90 <NEO6_ParseLine>:

void NEO6_ParseLine(NEO6_State *GpsStateHandler)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	// Nice website with NMEA description
	//	http://aprs.gids.nl/nmea
	//

	// Header
	char* ParsePoiner = strtoke((char*)GpsStateHandler->WorkingBuffer, ",");
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	33ff      	adds	r3, #255	; 0xff
 8003b9e:	4a1f      	ldr	r2, [pc, #124]	; (8003c1c <NEO6_ParseLine+0x8c>)
 8003ba0:	0011      	movs	r1, r2
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f7ff fcb0 	bl	8003508 <strtoke>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	60fb      	str	r3, [r7, #12]

	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 8003bac:	4a1c      	ldr	r2, [pc, #112]	; (8003c20 <NEO6_ParseLine+0x90>)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	0011      	movs	r1, r2
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f7fc faa8 	bl	8000108 <strcmp>
 8003bb8:	1e03      	subs	r3, r0, #0
 8003bba:	d104      	bne.n	8003bc6 <NEO6_ParseLine+0x36>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f7ff fda8 	bl	8003714 <NEO6_ParseGPRMC>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
}
 8003bc4:	e025      	b.n	8003c12 <NEO6_ParseLine+0x82>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 8003bc6:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <NEO6_ParseLine+0x94>)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	0011      	movs	r1, r2
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f7fc fa9b 	bl	8000108 <strcmp>
 8003bd2:	1e03      	subs	r3, r0, #0
 8003bd4:	d104      	bne.n	8003be0 <NEO6_ParseLine+0x50>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7ff fe85 	bl	80038e8 <NEO6_ParseGPVTG>
}
 8003bde:	e018      	b.n	8003c12 <NEO6_ParseLine+0x82>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 8003be0:	4a11      	ldr	r2, [pc, #68]	; (8003c28 <NEO6_ParseLine+0x98>)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	0011      	movs	r1, r2
 8003be6:	0018      	movs	r0, r3
 8003be8:	f7fc fa8e 	bl	8000108 <strcmp>
 8003bec:	1e03      	subs	r3, r0, #0
 8003bee:	d104      	bne.n	8003bfa <NEO6_ParseLine+0x6a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f7ff fed4 	bl	80039a0 <NEO6_ParseGPGGA>
}
 8003bf8:	e00b      	b.n	8003c12 <NEO6_ParseLine+0x82>
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
 8003bfa:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <NEO6_ParseLine+0x9c>)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	0011      	movs	r1, r2
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7fc fa81 	bl	8000108 <strcmp>
 8003c06:	1e03      	subs	r3, r0, #0
 8003c08:	d103      	bne.n	8003c12 <NEO6_ParseLine+0x82>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f7ff ff3d 	bl	8003a8c <NEO6_ParseGPGSA>
}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b004      	add	sp, #16
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	080101e4 	.word	0x080101e4
 8003c20:	080101e8 	.word	0x080101e8
 8003c24:	080101f0 	.word	0x080101f0
 8003c28:	080101f8 	.word	0x080101f8
 8003c2c:	08010200 	.word	0x08010200

08003c30 <NEO6_IsFix>:

uint8_t NEO6_IsFix(NEO6_State *GpsStateHandler)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
	return GpsStateHandler->Quality;
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	23ca      	movs	r3, #202	; 0xca
 8003c3c:	33ff      	adds	r3, #255	; 0xff
 8003c3e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b002      	add	sp, #8
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <NEO6_Task>:

void NEO6_Task(NEO6_State *GpsStateHandler)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferLines)
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	2383      	movs	r3, #131	; 0x83
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	5cd3      	ldrb	r3, [r2, r3]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <NEO6_Task+0x24>
	{
		NEO6_GetLineFromBuffer(GpsStateHandler);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f7ff fd1c 	bl	800369c <NEO6_GetLineFromBuffer>
		NEO6_ParseLine(GpsStateHandler);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	0018      	movs	r0, r3
 8003c68:	f7ff ff92 	bl	8003b90 <NEO6_ParseLine>
	}
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b002      	add	sp, #8
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <NEO6_Init>:

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	2382      	movs	r3, #130	; 0x82
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferTail = 0;
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	2306      	movs	r3, #6
 8003c92:	33ff      	adds	r3, #255	; 0xff
 8003c94:	2100      	movs	r1, #0
 8003c96:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferLines = 0;
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	2383      	movs	r3, #131	; 0x83
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Hour = 0;
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	2388      	movs	r3, #136	; 0x88
 8003ca6:	33ff      	adds	r3, #255	; 0xff
 8003ca8:	2100      	movs	r1, #0
 8003caa:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Minute = 0;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	23c4      	movs	r3, #196	; 0xc4
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Second = 0;
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	238a      	movs	r3, #138	; 0x8a
 8003cba:	33ff      	adds	r3, #255	; 0xff
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Day = 0;
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	23c5      	movs	r3, #197	; 0xc5
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Month = 0;
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	238c      	movs	r3, #140	; 0x8c
 8003cce:	33ff      	adds	r3, #255	; 0xff
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Year = 0;
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	23c6      	movs	r3, #198	; 0xc6
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	2100      	movs	r1, #0
 8003cdc:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Latitude = 0;
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	23c8      	movs	r3, #200	; 0xc8
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	18d1      	adds	r1, r2, r3
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2300      	movs	r3, #0
 8003cea:	600a      	str	r2, [r1, #0]
 8003cec:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LatitudeDirection = '0';
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	23cc      	movs	r3, #204	; 0xcc
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	2130      	movs	r1, #48	; 0x30
 8003cf6:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Longitude = 0;
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	23d0      	movs	r3, #208	; 0xd0
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	18d1      	adds	r1, r2, r3
 8003d00:	2200      	movs	r2, #0
 8003d02:	2300      	movs	r3, #0
 8003d04:	600a      	str	r2, [r1, #0]
 8003d06:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LongitudeDirection = '0';
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	23d4      	movs	r3, #212	; 0xd4
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	2130      	movs	r1, #48	; 0x30
 8003d10:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->SpeedKilometers = 0;
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	23e0      	movs	r3, #224	; 0xe0
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	18d1      	adds	r1, r2, r3
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	600a      	str	r2, [r1, #0]
 8003d20:	604b      	str	r3, [r1, #4]
	GpsStateHandler->SpeedKnots = 0;
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	23dc      	movs	r3, #220	; 0xdc
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	18d1      	adds	r1, r2, r3
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	600a      	str	r2, [r1, #0]
 8003d30:	604b      	str	r3, [r1, #4]

	GpsStateHandler->SatelitesNumber = 0;
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	23e4      	movs	r3, #228	; 0xe4
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	2100      	movs	r1, #0
 8003d3a:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Quality = 0;
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	23ca      	movs	r3, #202	; 0xca
 8003d40:	33ff      	adds	r3, #255	; 0xff
 8003d42:	2100      	movs	r1, #0
 8003d44:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Dop = 0;
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	23e8      	movs	r3, #232	; 0xe8
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	18d1      	adds	r1, r2, r3
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2300      	movs	r3, #0
 8003d52:	600a      	str	r2, [r1, #0]
 8003d54:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Hdop = 0;
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	23ec      	movs	r3, #236	; 0xec
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	18d1      	adds	r1, r2, r3
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2300      	movs	r3, #0
 8003d62:	600a      	str	r2, [r1, #0]
 8003d64:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Vdop = 0;
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	23f0      	movs	r3, #240	; 0xf0
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	18d1      	adds	r1, r2, r3
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2300      	movs	r3, #0
 8003d72:	600a      	str	r2, [r1, #0]
 8003d74:	604b      	str	r3, [r1, #4]

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4904      	ldr	r1, [pc, #16]	; (8003d8c <NEO6_Init+0x118>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f006 f9a0 	bl	800a0c4 <HAL_UART_Receive_IT>
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b002      	add	sp, #8
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	200001f4 	.word	0x200001f4

08003d90 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH           HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW            HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	0002      	movs	r2, r0
 8003d98:	1dfb      	adds	r3, r7, #7
 8003d9a:	701a      	strb	r2, [r3, #0]
        HAL_Delay(Time);
 8003d9c:	1dfb      	adds	r3, r7, #7
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f002 f9c9 	bl	8006138 <HAL_Delay>
}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b002      	add	sp, #8
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	000a      	movs	r2, r1
 8003dba:	1cfb      	adds	r3, r7, #3
 8003dbc:	701a      	strb	r2, [r3, #0]
        HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <nRF24_SendSpi+0x2c>)
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	1cfb      	adds	r3, r7, #3
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	23fa      	movs	r3, #250	; 0xfa
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	f005 f899 	bl	8008f04 <HAL_SPI_Transmit>
}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	b002      	add	sp, #8
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	200001fc 	.word	0x200001fc

08003de0 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	000a      	movs	r2, r1
 8003dea:	1cfb      	adds	r3, r7, #3
 8003dec:	701a      	strb	r2, [r3, #0]
        HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8003dee:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <nRF24_ReadSpi+0x2c>)
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	1cfb      	adds	r3, r7, #3
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	23fa      	movs	r3, #250	; 0xfa
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	f005 f9df 	bl	80091c0 <HAL_SPI_Receive>
}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b002      	add	sp, #8
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	200001fc 	.word	0x200001fc

08003e10 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	0002      	movs	r2, r0
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	701a      	strb	r2, [r3, #0]
        uint8_t result;

        reg = NRF24_CMD_R_REGISTER | reg;
 8003e1c:	1dfb      	adds	r3, r7, #7
 8003e1e:	781a      	ldrb	r2, [r3, #0]
 8003e20:	1dfb      	adds	r3, r7, #7
 8003e22:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8003e24:	23a0      	movs	r3, #160	; 0xa0
 8003e26:	05db      	lsls	r3, r3, #23
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2102      	movs	r1, #2
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f003 fa98 	bl	8007362 <HAL_GPIO_WritePin>
        nRF24_SendSpi(&reg, 1);
 8003e32:	1dfb      	adds	r3, r7, #7
 8003e34:	2101      	movs	r1, #1
 8003e36:	0018      	movs	r0, r3
 8003e38:	f7ff ffba 	bl	8003db0 <nRF24_SendSpi>
        nRF24_ReadSpi(&result, 1);
 8003e3c:	240f      	movs	r4, #15
 8003e3e:	193b      	adds	r3, r7, r4
 8003e40:	2101      	movs	r1, #1
 8003e42:	0018      	movs	r0, r3
 8003e44:	f7ff ffcc 	bl	8003de0 <nRF24_ReadSpi>
        NRF24_CSN_HIGH;
 8003e48:	23a0      	movs	r3, #160	; 0xa0
 8003e4a:	05db      	lsls	r3, r3, #23
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	2102      	movs	r1, #2
 8003e50:	0018      	movs	r0, r3
 8003e52:	f003 fa86 	bl	8007362 <HAL_GPIO_WritePin>

        return result;
 8003e56:	193b      	adds	r3, r7, r4
 8003e58:	781b      	ldrb	r3, [r3, #0]
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b005      	add	sp, #20
 8003e60:	bd90      	pop	{r4, r7, pc}

08003e62 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	0011      	movs	r1, r2
 8003e6c:	1dfb      	adds	r3, r7, #7
 8003e6e:	1c02      	adds	r2, r0, #0
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	1dbb      	adds	r3, r7, #6
 8003e74:	1c0a      	adds	r2, r1, #0
 8003e76:	701a      	strb	r2, [r3, #0]
        reg = NRF24_CMD_R_REGISTER | reg;
 8003e78:	1dfb      	adds	r3, r7, #7
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	1dfb      	adds	r3, r7, #7
 8003e7e:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8003e80:	23a0      	movs	r3, #160	; 0xa0
 8003e82:	05db      	lsls	r3, r3, #23
 8003e84:	2200      	movs	r2, #0
 8003e86:	2102      	movs	r1, #2
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f003 fa6a 	bl	8007362 <HAL_GPIO_WritePin>

        nRF24_SendSpi(&reg, 1);
 8003e8e:	1dfb      	adds	r3, r7, #7
 8003e90:	2101      	movs	r1, #1
 8003e92:	0018      	movs	r0, r3
 8003e94:	f7ff ff8c 	bl	8003db0 <nRF24_SendSpi>
        nRF24_ReadSpi(ret, len);
 8003e98:	1dbb      	adds	r3, r7, #6
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	0011      	movs	r1, r2
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7ff ff9d 	bl	8003de0 <nRF24_ReadSpi>

        NRF24_CSN_HIGH;
 8003ea6:	23a0      	movs	r3, #160	; 0xa0
 8003ea8:	05db      	lsls	r3, r3, #23
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2102      	movs	r1, #2
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f003 fa57 	bl	8007362 <HAL_GPIO_WritePin>
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b002      	add	sp, #8
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8003ebc:	b590      	push	{r4, r7, lr}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	1dfb      	adds	r3, r7, #7
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	1dbb      	adds	r3, r7, #6
 8003eca:	1c0a      	adds	r2, r1, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
        uint8_t tmp[2];

        tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	240c      	movs	r4, #12
 8003eda:	193b      	adds	r3, r7, r4
 8003edc:	701a      	strb	r2, [r3, #0]
        tmp[1] = val;
 8003ede:	193b      	adds	r3, r7, r4
 8003ee0:	1dba      	adds	r2, r7, #6
 8003ee2:	7812      	ldrb	r2, [r2, #0]
 8003ee4:	705a      	strb	r2, [r3, #1]

        NRF24_CSN_LOW;
 8003ee6:	23a0      	movs	r3, #160	; 0xa0
 8003ee8:	05db      	lsls	r3, r3, #23
 8003eea:	2200      	movs	r2, #0
 8003eec:	2102      	movs	r1, #2
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f003 fa37 	bl	8007362 <HAL_GPIO_WritePin>

        nRF24_SendSpi(tmp, 2);
 8003ef4:	193b      	adds	r3, r7, r4
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7ff ff59 	bl	8003db0 <nRF24_SendSpi>

        NRF24_CSN_HIGH;
 8003efe:	23a0      	movs	r3, #160	; 0xa0
 8003f00:	05db      	lsls	r3, r3, #23
 8003f02:	2201      	movs	r2, #1
 8003f04:	2102      	movs	r1, #2
 8003f06:	0018      	movs	r0, r3
 8003f08:	f003 fa2b 	bl	8007362 <HAL_GPIO_WritePin>
}
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b005      	add	sp, #20
 8003f12:	bd90      	pop	{r4, r7, pc}

08003f14 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6039      	str	r1, [r7, #0]
 8003f1c:	0011      	movs	r1, r2
 8003f1e:	1dfb      	adds	r3, r7, #7
 8003f20:	1c02      	adds	r2, r0, #0
 8003f22:	701a      	strb	r2, [r3, #0]
 8003f24:	1dbb      	adds	r3, r7, #6
 8003f26:	1c0a      	adds	r2, r1, #0
 8003f28:	701a      	strb	r2, [r3, #0]
        reg = NRF24_CMD_W_REGISTER | reg;
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	4313      	orrs	r3, r2
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	1dfb      	adds	r3, r7, #7
 8003f36:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8003f38:	23a0      	movs	r3, #160	; 0xa0
 8003f3a:	05db      	lsls	r3, r3, #23
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2102      	movs	r1, #2
 8003f40:	0018      	movs	r0, r3
 8003f42:	f003 fa0e 	bl	8007362 <HAL_GPIO_WritePin>

        nRF24_SendSpi(&reg, 1);
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	2101      	movs	r1, #1
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7ff ff30 	bl	8003db0 <nRF24_SendSpi>
        nRF24_SendSpi(val, len);
 8003f50:	1dbb      	adds	r3, r7, #6
 8003f52:	781a      	ldrb	r2, [r3, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	0011      	movs	r1, r2
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff ff29 	bl	8003db0 <nRF24_SendSpi>

        NRF24_CSN_HIGH;
 8003f5e:	23a0      	movs	r3, #160	; 0xa0
 8003f60:	05db      	lsls	r3, r3, #23
 8003f62:	2201      	movs	r2, #1
 8003f64:	2102      	movs	r1, #2
 8003f66:	0018      	movs	r0, r3
 8003f68:	f003 f9fb 	bl	8007362 <HAL_GPIO_WritePin>
}
 8003f6c:	46c0      	nop			; (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b002      	add	sp, #8
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <nRF24_TX_Mode>:
        NRF24_CE_HIGH;
        nRF24_Delay_ms(1);
}

void nRF24_TX_Mode(void)
{
 8003f74:	b590      	push	{r4, r7, lr}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
        NRF24_CE_LOW;
 8003f7a:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <nRF24_TX_Mode+0x5c>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2110      	movs	r1, #16
 8003f80:	0018      	movs	r0, r3
 8003f82:	f003 f9ee 	bl	8007362 <HAL_GPIO_WritePin>

        uint8_t config = nRF24_ReadConfig();
 8003f86:	1dfc      	adds	r4, r7, #7
 8003f88:	f000 f824 	bl	8003fd4 <nRF24_ReadConfig>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	7023      	strb	r3, [r4, #0]
        // PWR_UP bit set
        config |= (1<<NRF24_PWR_UP);
 8003f90:	1dfb      	adds	r3, r7, #7
 8003f92:	1dfa      	adds	r2, r7, #7
 8003f94:	7812      	ldrb	r2, [r2, #0]
 8003f96:	2102      	movs	r1, #2
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	701a      	strb	r2, [r3, #0]
        // PRIM_RX bit low
        config &= ~(1<<NRF24_PRIM_RX);
 8003f9c:	1dfb      	adds	r3, r7, #7
 8003f9e:	1dfa      	adds	r2, r7, #7
 8003fa0:	7812      	ldrb	r2, [r2, #0]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	438a      	bics	r2, r1
 8003fa6:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 8003fa8:	1dfb      	adds	r3, r7, #7
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f000 f81a 	bl	8003fe6 <nRF24_WriteConfig>
        // Reset status
        nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8003fb2:	2070      	movs	r0, #112	; 0x70
 8003fb4:	f000 f88e 	bl	80040d4 <nRF24_WriteStatus>
        // Flush RX
        nRF24_FlushRX();
 8003fb8:	f000 f89c 	bl	80040f4 <nRF24_FlushRX>
        // Flush TX
        nRF24_FlushTX();
 8003fbc:	f000 f8b7 	bl	800412e <nRF24_FlushTX>

        nRF24_Delay_ms(1);
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	f7ff fee5 	bl	8003d90 <nRF24_Delay_ms>
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b003      	add	sp, #12
 8003fcc:	bd90      	pop	{r4, r7, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	50000400 	.word	0x50000400

08003fd4 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
        return (nRF24_ReadRegister(NRF24_CONFIG));
 8003fd8:	2000      	movs	r0, #0
 8003fda:	f7ff ff19 	bl	8003e10 <nRF24_ReadRegister>
 8003fde:	0003      	movs	r3, r0
}
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	0002      	movs	r2, r0
 8003fee:	1dfb      	adds	r3, r7, #7
 8003ff0:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_CONFIG, conf);
 8003ff2:	1dfb      	adds	r3, r7, #7
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f7ff ff5f 	bl	8003ebc <nRF24_WriteRegister>
}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	46bd      	mov	sp, r7
 8004002:	b002      	add	sp, #8
 8004004:	bd80      	pop	{r7, pc}

08004006 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8004006:	b5b0      	push	{r4, r5, r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	0002      	movs	r2, r0
 800400e:	1dfb      	adds	r3, r7, #7
 8004010:	701a      	strb	r2, [r3, #0]
        uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004012:	250f      	movs	r5, #15
 8004014:	197c      	adds	r4, r7, r5
 8004016:	2006      	movs	r0, #6
 8004018:	f7ff fefa 	bl	8003e10 <nRF24_ReadRegister>
 800401c:	0003      	movs	r3, r0
 800401e:	7023      	strb	r3, [r4, #0]
        rf_setup &= 0xF8; // Clear PWR bits
 8004020:	0028      	movs	r0, r5
 8004022:	183b      	adds	r3, r7, r0
 8004024:	183a      	adds	r2, r7, r0
 8004026:	7812      	ldrb	r2, [r2, #0]
 8004028:	2107      	movs	r1, #7
 800402a:	438a      	bics	r2, r1
 800402c:	701a      	strb	r2, [r3, #0]
        rf_setup |= (lev<<1);
 800402e:	1dfb      	adds	r3, r7, #7
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	b25a      	sxtb	r2, r3
 8004036:	183b      	adds	r3, r7, r0
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	b25b      	sxtb	r3, r3
 800403c:	4313      	orrs	r3, r2
 800403e:	b25a      	sxtb	r2, r3
 8004040:	183b      	adds	r3, r7, r0
 8004042:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004044:	183b      	adds	r3, r7, r0
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	0019      	movs	r1, r3
 800404a:	2006      	movs	r0, #6
 800404c:	f7ff ff36 	bl	8003ebc <nRF24_WriteRegister>
}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	46bd      	mov	sp, r7
 8004054:	b004      	add	sp, #16
 8004056:	bdb0      	pop	{r4, r5, r7, pc}

08004058 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8004058:	b5b0      	push	{r4, r5, r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	0002      	movs	r2, r0
 8004060:	1dfb      	adds	r3, r7, #7
 8004062:	701a      	strb	r2, [r3, #0]
        uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004064:	250f      	movs	r5, #15
 8004066:	197c      	adds	r4, r7, r5
 8004068:	2006      	movs	r0, #6
 800406a:	f7ff fed1 	bl	8003e10 <nRF24_ReadRegister>
 800406e:	0003      	movs	r3, r0
 8004070:	7023      	strb	r3, [r4, #0]
        rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8004072:	0028      	movs	r0, r5
 8004074:	183b      	adds	r3, r7, r0
 8004076:	183a      	adds	r2, r7, r0
 8004078:	7812      	ldrb	r2, [r2, #0]
 800407a:	2128      	movs	r1, #40	; 0x28
 800407c:	438a      	bics	r2, r1
 800407e:	701a      	strb	r2, [r3, #0]
        if(dr == NRF24_RF_DR_250KBPS)
 8004080:	1dfb      	adds	r3, r7, #7
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d106      	bne.n	8004096 <nRF24_SetDataRate+0x3e>
                rf_setup |= (1<<NRF24_RF_DR_LOW);
 8004088:	183b      	adds	r3, r7, r0
 800408a:	183a      	adds	r2, r7, r0
 800408c:	7812      	ldrb	r2, [r2, #0]
 800408e:	2120      	movs	r1, #32
 8004090:	430a      	orrs	r2, r1
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e00a      	b.n	80040ac <nRF24_SetDataRate+0x54>
        else if(dr == NRF24_RF_DR_2MBPS)
 8004096:	1dfb      	adds	r3, r7, #7
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d106      	bne.n	80040ac <nRF24_SetDataRate+0x54>
                rf_setup |= (1<<NRF24_RF_DR_HIGH);
 800409e:	220f      	movs	r2, #15
 80040a0:	18bb      	adds	r3, r7, r2
 80040a2:	18ba      	adds	r2, r7, r2
 80040a4:	7812      	ldrb	r2, [r2, #0]
 80040a6:	2108      	movs	r1, #8
 80040a8:	430a      	orrs	r2, r1
 80040aa:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80040ac:	230f      	movs	r3, #15
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	0019      	movs	r1, r3
 80040b4:	2006      	movs	r0, #6
 80040b6:	f7ff ff01 	bl	8003ebc <nRF24_WriteRegister>
}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	b004      	add	sp, #16
 80040c0:	bdb0      	pop	{r4, r5, r7, pc}

080040c2 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	af00      	add	r7, sp, #0
        return (nRF24_ReadRegister(NRF24_STATUS));
 80040c6:	2007      	movs	r0, #7
 80040c8:	f7ff fea2 	bl	8003e10 <nRF24_ReadRegister>
 80040cc:	0003      	movs	r3, r0
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	0002      	movs	r2, r0
 80040dc:	1dfb      	adds	r3, r7, #7
 80040de:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_STATUS, st);
 80040e0:	1dfb      	adds	r3, r7, #7
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	0019      	movs	r1, r3
 80040e6:	2007      	movs	r0, #7
 80040e8:	f7ff fee8 	bl	8003ebc <nRF24_WriteRegister>
}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b002      	add	sp, #8
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <nRF24_FlushRX>:
{
        return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
        uint8_t command = NRF24_CMD_FLUSH_RX;
 80040fa:	1dfb      	adds	r3, r7, #7
 80040fc:	22e2      	movs	r2, #226	; 0xe2
 80040fe:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8004100:	23a0      	movs	r3, #160	; 0xa0
 8004102:	05db      	lsls	r3, r3, #23
 8004104:	2200      	movs	r2, #0
 8004106:	2102      	movs	r1, #2
 8004108:	0018      	movs	r0, r3
 800410a:	f003 f92a 	bl	8007362 <HAL_GPIO_WritePin>
        nRF24_SendSpi(&command, 1);
 800410e:	1dfb      	adds	r3, r7, #7
 8004110:	2101      	movs	r1, #1
 8004112:	0018      	movs	r0, r3
 8004114:	f7ff fe4c 	bl	8003db0 <nRF24_SendSpi>
        NRF24_CSN_HIGH;
 8004118:	23a0      	movs	r3, #160	; 0xa0
 800411a:	05db      	lsls	r3, r3, #23
 800411c:	2201      	movs	r2, #1
 800411e:	2102      	movs	r1, #2
 8004120:	0018      	movs	r0, r3
 8004122:	f003 f91e 	bl	8007362 <HAL_GPIO_WritePin>
}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	46bd      	mov	sp, r7
 800412a:	b002      	add	sp, #8
 800412c:	bd80      	pop	{r7, pc}

0800412e <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
        uint8_t command = NRF24_CMD_FLUSH_TX;
 8004134:	1dfb      	adds	r3, r7, #7
 8004136:	22e1      	movs	r2, #225	; 0xe1
 8004138:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 800413a:	23a0      	movs	r3, #160	; 0xa0
 800413c:	05db      	lsls	r3, r3, #23
 800413e:	2200      	movs	r2, #0
 8004140:	2102      	movs	r1, #2
 8004142:	0018      	movs	r0, r3
 8004144:	f003 f90d 	bl	8007362 <HAL_GPIO_WritePin>
        nRF24_SendSpi(&command, 1);
 8004148:	1dfb      	adds	r3, r7, #7
 800414a:	2101      	movs	r1, #1
 800414c:	0018      	movs	r0, r3
 800414e:	f7ff fe2f 	bl	8003db0 <nRF24_SendSpi>
        NRF24_CSN_HIGH;
 8004152:	23a0      	movs	r3, #160	; 0xa0
 8004154:	05db      	lsls	r3, r3, #23
 8004156:	2201      	movs	r2, #1
 8004158:	2102      	movs	r1, #2
 800415a:	0018      	movs	r0, r3
 800415c:	f003 f901 	bl	8007362 <HAL_GPIO_WritePin>
}
 8004160:	46c0      	nop			; (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	b002      	add	sp, #8
 8004166:	bd80      	pop	{r7, pc}

08004168 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8004168:	b5b0      	push	{r4, r5, r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	0002      	movs	r2, r0
 8004170:	1dfb      	adds	r3, r7, #7
 8004172:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 8004174:	250f      	movs	r5, #15
 8004176:	197c      	adds	r4, r7, r5
 8004178:	f7ff ff2c 	bl	8003fd4 <nRF24_ReadConfig>
 800417c:	0003      	movs	r3, r0
 800417e:	7023      	strb	r3, [r4, #0]

        if(onoff)
 8004180:	1dfb      	adds	r3, r7, #7
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d006      	beq.n	8004196 <nRF24_EnableCRC+0x2e>
                config |= (1<<NRF24_EN_CRC);
 8004188:	197b      	adds	r3, r7, r5
 800418a:	197a      	adds	r2, r7, r5
 800418c:	7812      	ldrb	r2, [r2, #0]
 800418e:	2108      	movs	r1, #8
 8004190:	430a      	orrs	r2, r1
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	e006      	b.n	80041a4 <nRF24_EnableCRC+0x3c>
        else
                config &= ~(1<<NRF24_EN_CRC);
 8004196:	220f      	movs	r2, #15
 8004198:	18bb      	adds	r3, r7, r2
 800419a:	18ba      	adds	r2, r7, r2
 800419c:	7812      	ldrb	r2, [r2, #0]
 800419e:	2108      	movs	r1, #8
 80041a0:	438a      	bics	r2, r1
 80041a2:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 80041a4:	230f      	movs	r3, #15
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	0018      	movs	r0, r3
 80041ac:	f7ff ff1b 	bl	8003fe6 <nRF24_WriteConfig>
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b004      	add	sp, #16
 80041b6:	bdb0      	pop	{r4, r5, r7, pc}

080041b8 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80041b8:	b5b0      	push	{r4, r5, r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	0002      	movs	r2, r0
 80041c0:	1dfb      	adds	r3, r7, #7
 80041c2:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 80041c4:	250f      	movs	r5, #15
 80041c6:	197c      	adds	r4, r7, r5
 80041c8:	f7ff ff04 	bl	8003fd4 <nRF24_ReadConfig>
 80041cc:	0003      	movs	r3, r0
 80041ce:	7023      	strb	r3, [r4, #0]
        if(crcl == NRF24_CRC_WIDTH_2B)
 80041d0:	1dfb      	adds	r3, r7, #7
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d106      	bne.n	80041e6 <nRF24_SetCRCLength+0x2e>
                config |= (1<<NRF24_CRCO);
 80041d8:	197b      	adds	r3, r7, r5
 80041da:	197a      	adds	r2, r7, r5
 80041dc:	7812      	ldrb	r2, [r2, #0]
 80041de:	2104      	movs	r1, #4
 80041e0:	430a      	orrs	r2, r1
 80041e2:	701a      	strb	r2, [r3, #0]
 80041e4:	e006      	b.n	80041f4 <nRF24_SetCRCLength+0x3c>
        else
                config &= ~(1<<NRF24_CRCO);
 80041e6:	220f      	movs	r2, #15
 80041e8:	18bb      	adds	r3, r7, r2
 80041ea:	18ba      	adds	r2, r7, r2
 80041ec:	7812      	ldrb	r2, [r2, #0]
 80041ee:	2104      	movs	r1, #4
 80041f0:	438a      	bics	r2, r1
 80041f2:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 80041f4:	230f      	movs	r3, #15
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	0018      	movs	r0, r3
 80041fc:	f7ff fef3 	bl	8003fe6 <nRF24_WriteConfig>
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b004      	add	sp, #16
 8004206:	bdb0      	pop	{r4, r5, r7, pc}

08004208 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{ //ard = delay   arc = count (ilość i odległość czasowa
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	0002      	movs	r2, r0
 8004210:	1dfb      	adds	r3, r7, #7
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	1dbb      	adds	r3, r7, #6
 8004216:	1c0a      	adds	r2, r1, #0
 8004218:	701a      	strb	r2, [r3, #0]
        // ard * 250us, arc repeats
        nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 800421a:	1dfb      	adds	r3, r7, #7
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	b25a      	sxtb	r2, r3
 8004222:	1dbb      	adds	r3, r7, #6
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	b25b      	sxtb	r3, r3
 8004228:	210f      	movs	r1, #15
 800422a:	400b      	ands	r3, r1
 800422c:	b25b      	sxtb	r3, r3
 800422e:	4313      	orrs	r3, r2
 8004230:	b25b      	sxtb	r3, r3
 8004232:	b2db      	uxtb	r3, r3
 8004234:	0019      	movs	r1, r3
 8004236:	2004      	movs	r0, #4
 8004238:	f7ff fe40 	bl	8003ebc <nRF24_WriteRegister>
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	b002      	add	sp, #8
 8004242:	bd80      	pop	{r7, pc}

08004244 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	0002      	movs	r2, r0
 800424c:	1dfb      	adds	r3, r7, #7
 800424e:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8004250:	1dfb      	adds	r3, r7, #7
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	227f      	movs	r2, #127	; 0x7f
 8004256:	4013      	ands	r3, r2
 8004258:	b2db      	uxtb	r3, r3
 800425a:	0019      	movs	r1, r3
 800425c:	2005      	movs	r0, #5
 800425e:	f7ff fe2d 	bl	8003ebc <nRF24_WriteRegister>
}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	46bd      	mov	sp, r7
 8004266:	b002      	add	sp, #8
 8004268:	bd80      	pop	{r7, pc}

0800426a <nRF24_EnablePipe>:
                pipe = 5; // Block too high pipe number
        nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 800426a:	b5b0      	push	{r4, r5, r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	0002      	movs	r2, r0
 8004272:	1dfb      	adds	r3, r7, #7
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	1dbb      	adds	r3, r7, #6
 8004278:	1c0a      	adds	r2, r1, #0
 800427a:	701a      	strb	r2, [r3, #0]
        if(pipe > 5)
 800427c:	1dfb      	adds	r3, r7, #7
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b05      	cmp	r3, #5
 8004282:	d902      	bls.n	800428a <nRF24_EnablePipe+0x20>
                pipe = 5; // Block too high pipe number
 8004284:	1dfb      	adds	r3, r7, #7
 8004286:	2205      	movs	r2, #5
 8004288:	701a      	strb	r2, [r3, #0]
        uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800428a:	250f      	movs	r5, #15
 800428c:	197c      	adds	r4, r7, r5
 800428e:	2002      	movs	r0, #2
 8004290:	f7ff fdbe 	bl	8003e10 <nRF24_ReadRegister>
 8004294:	0003      	movs	r3, r0
 8004296:	7023      	strb	r3, [r4, #0]
        if(onoff == 1)
 8004298:	1dbb      	adds	r3, r7, #6
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10d      	bne.n	80042bc <nRF24_EnablePipe+0x52>
                enable_pipe |= (1<<pipe);
 80042a0:	1dfb      	adds	r3, r7, #7
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2201      	movs	r2, #1
 80042a6:	409a      	lsls	r2, r3
 80042a8:	0013      	movs	r3, r2
 80042aa:	b25a      	sxtb	r2, r3
 80042ac:	197b      	adds	r3, r7, r5
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	b25b      	sxtb	r3, r3
 80042b2:	4313      	orrs	r3, r2
 80042b4:	b25a      	sxtb	r2, r3
 80042b6:	197b      	adds	r3, r7, r5
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	e00f      	b.n	80042dc <nRF24_EnablePipe+0x72>
        else
                enable_pipe &= ~(1<<pipe);
 80042bc:	1dfb      	adds	r3, r7, #7
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2201      	movs	r2, #1
 80042c2:	409a      	lsls	r2, r3
 80042c4:	0013      	movs	r3, r2
 80042c6:	b25b      	sxtb	r3, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	b25b      	sxtb	r3, r3
 80042cc:	210f      	movs	r1, #15
 80042ce:	187a      	adds	r2, r7, r1
 80042d0:	7812      	ldrb	r2, [r2, #0]
 80042d2:	b252      	sxtb	r2, r2
 80042d4:	4013      	ands	r3, r2
 80042d6:	b25a      	sxtb	r2, r3
 80042d8:	187b      	adds	r3, r7, r1
 80042da:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 80042dc:	230f      	movs	r3, #15
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	0019      	movs	r1, r3
 80042e4:	2002      	movs	r0, #2
 80042e6:	f7ff fde9 	bl	8003ebc <nRF24_WriteRegister>
}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b004      	add	sp, #16
 80042f0:	bdb0      	pop	{r4, r5, r7, pc}

080042f2 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80042f2:	b5b0      	push	{r4, r5, r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	0002      	movs	r2, r0
 80042fa:	1dfb      	adds	r3, r7, #7
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	1dbb      	adds	r3, r7, #6
 8004300:	1c0a      	adds	r2, r1, #0
 8004302:	701a      	strb	r2, [r3, #0]
        if(pipe > 5)
 8004304:	1dfb      	adds	r3, r7, #7
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b05      	cmp	r3, #5
 800430a:	d902      	bls.n	8004312 <nRF24_AutoACK+0x20>
                pipe = 5; // Block too high pipe number
 800430c:	1dfb      	adds	r3, r7, #7
 800430e:	2205      	movs	r2, #5
 8004310:	701a      	strb	r2, [r3, #0]
        uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8004312:	250f      	movs	r5, #15
 8004314:	197c      	adds	r4, r7, r5
 8004316:	2001      	movs	r0, #1
 8004318:	f7ff fd7a 	bl	8003e10 <nRF24_ReadRegister>
 800431c:	0003      	movs	r3, r0
 800431e:	7023      	strb	r3, [r4, #0]
        if(onoff == 1)
 8004320:	1dbb      	adds	r3, r7, #6
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d10d      	bne.n	8004344 <nRF24_AutoACK+0x52>
                enaa |= (1<<pipe);
 8004328:	1dfb      	adds	r3, r7, #7
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2201      	movs	r2, #1
 800432e:	409a      	lsls	r2, r3
 8004330:	0013      	movs	r3, r2
 8004332:	b25a      	sxtb	r2, r3
 8004334:	197b      	adds	r3, r7, r5
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	b25b      	sxtb	r3, r3
 800433a:	4313      	orrs	r3, r2
 800433c:	b25a      	sxtb	r2, r3
 800433e:	197b      	adds	r3, r7, r5
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	e00f      	b.n	8004364 <nRF24_AutoACK+0x72>
        else
                enaa &= ~(1<<pipe);
 8004344:	1dfb      	adds	r3, r7, #7
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2201      	movs	r2, #1
 800434a:	409a      	lsls	r2, r3
 800434c:	0013      	movs	r3, r2
 800434e:	b25b      	sxtb	r3, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	b25b      	sxtb	r3, r3
 8004354:	210f      	movs	r1, #15
 8004356:	187a      	adds	r2, r7, r1
 8004358:	7812      	ldrb	r2, [r2, #0]
 800435a:	b252      	sxtb	r2, r2
 800435c:	4013      	ands	r3, r2
 800435e:	b25a      	sxtb	r2, r3
 8004360:	187b      	adds	r3, r7, r1
 8004362:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8004364:	230f      	movs	r3, #15
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	0019      	movs	r1, r3
 800436c:	2001      	movs	r0, #1
 800436e:	f7ff fda5 	bl	8003ebc <nRF24_WriteRegister>
}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	46bd      	mov	sp, r7
 8004376:	b004      	add	sp, #16
 8004378:	bdb0      	pop	{r4, r5, r7, pc}

0800437a <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	0002      	movs	r2, r0
 8004382:	1dfb      	adds	r3, r7, #7
 8004384:	701a      	strb	r2, [r3, #0]
        if(size > 5)
 8004386:	1dfb      	adds	r3, r7, #7
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b05      	cmp	r3, #5
 800438c:	d902      	bls.n	8004394 <nRF24_SetAddressWidth+0x1a>
                size = 5; // Maximum are 5 bytes
 800438e:	1dfb      	adds	r3, r7, #7
 8004390:	2205      	movs	r2, #5
 8004392:	701a      	strb	r2, [r3, #0]
        if(size < 3)
 8004394:	1dfb      	adds	r3, r7, #7
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d802      	bhi.n	80043a2 <nRF24_SetAddressWidth+0x28>
                size = 3; // Minimum are 3 bytes
 800439c:	1dfb      	adds	r3, r7, #7
 800439e:	2203      	movs	r2, #3
 80043a0:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80043a2:	1dfb      	adds	r3, r7, #7
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	3b02      	subs	r3, #2
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2203      	movs	r2, #3
 80043ac:	4013      	ands	r3, r2
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	0019      	movs	r1, r3
 80043b2:	2003      	movs	r0, #3
 80043b4:	f7ff fd82 	bl	8003ebc <nRF24_WriteRegister>
}
 80043b8:	46c0      	nop			; (mov r8, r8)
 80043ba:	46bd      	mov	sp, r7
 80043bc:	b002      	add	sp, #8
 80043be:	bd80      	pop	{r7, pc}

080043c0 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	0002      	movs	r2, r0
 80043c8:	6039      	str	r1, [r7, #0]
 80043ca:	1dfb      	adds	r3, r7, #7
 80043cc:	701a      	strb	r2, [r3, #0]
        // pipe 0 and pipe 1 are fully 40-bits storaged
        // pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
        // pipe 0 and 1 are LSByte first so they are needed to reverse address
        if((pipe == 0) || (pipe == 1))
 80043ce:	1dfb      	adds	r3, r7, #7
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <nRF24_SetRXAddress+0x1e>
 80043d6:	1dfb      	adds	r3, r7, #7
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d126      	bne.n	800442c <nRF24_SetRXAddress+0x6c>
        {
                uint8_t i;
                uint8_t address_rev[NRF24_ADDR_SIZE];
                for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80043de:	230f      	movs	r3, #15
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e011      	b.n	800440c <nRF24_SetRXAddress+0x4c>
                        address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80043e8:	200f      	movs	r0, #15
 80043ea:	183b      	adds	r3, r7, r0
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	18d2      	adds	r2, r2, r3
 80043f2:	183b      	adds	r3, r7, r0
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2102      	movs	r1, #2
 80043f8:	1acb      	subs	r3, r1, r3
 80043fa:	7811      	ldrb	r1, [r2, #0]
 80043fc:	220c      	movs	r2, #12
 80043fe:	18ba      	adds	r2, r7, r2
 8004400:	54d1      	strb	r1, [r2, r3]
                for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004402:	183b      	adds	r3, r7, r0
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	183b      	adds	r3, r7, r0
 8004408:	3201      	adds	r2, #1
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	230f      	movs	r3, #15
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d9e8      	bls.n	80043e8 <nRF24_SetRXAddress+0x28>
                nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8004416:	1dfb      	adds	r3, r7, #7
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	330a      	adds	r3, #10
 800441c:	b2db      	uxtb	r3, r3
 800441e:	220c      	movs	r2, #12
 8004420:	18b9      	adds	r1, r7, r2
 8004422:	2203      	movs	r2, #3
 8004424:	0018      	movs	r0, r3
 8004426:	f7ff fd75 	bl	8003f14 <nRF24_WriteRegisters>
        {
 800442a:	e00b      	b.n	8004444 <nRF24_SetRXAddress+0x84>
        }
        else
                nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 800442c:	1dfb      	adds	r3, r7, #7
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	330a      	adds	r3, #10
 8004432:	b2da      	uxtb	r2, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	3302      	adds	r3, #2
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	0019      	movs	r1, r3
 800443c:	0010      	movs	r0, r2
 800443e:	f7ff fd3d 	bl	8003ebc <nRF24_WriteRegister>
}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	46c0      	nop			; (mov r8, r8)
 8004446:	46bd      	mov	sp, r7
 8004448:	b004      	add	sp, #16
 800444a:	bd80      	pop	{r7, pc}

0800444c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
        // TX address is storaged similar to RX pipe 0 - LSByte first
        uint8_t i;
        uint8_t address_rev[NRF24_ADDR_SIZE];

        nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8004454:	230c      	movs	r3, #12
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	2203      	movs	r2, #3
 800445a:	0019      	movs	r1, r3
 800445c:	200a      	movs	r0, #10
 800445e:	f7ff fd00 	bl	8003e62 <nRF24_ReadRegisters>
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004462:	230f      	movs	r3, #15
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	2200      	movs	r2, #0
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e010      	b.n	800448e <nRF24_SetTXAddress+0x42>
                addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 800446c:	200f      	movs	r0, #15
 800446e:	183b      	adds	r3, r7, r0
 8004470:	781a      	ldrb	r2, [r3, #0]
 8004472:	183b      	adds	r3, r7, r0
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2102      	movs	r1, #2
 8004478:	1acb      	subs	r3, r1, r3
 800447a:	210c      	movs	r1, #12
 800447c:	1879      	adds	r1, r7, r1
 800447e:	5c89      	ldrb	r1, [r1, r2]
 8004480:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <nRF24_SetTXAddress+0xa4>)
 8004482:	54d1      	strb	r1, [r2, r3]
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004484:	183b      	adds	r3, r7, r0
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	183b      	adds	r3, r7, r0
 800448a:	3201      	adds	r2, #1
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	220f      	movs	r2, #15
 8004490:	18bb      	adds	r3, r7, r2
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d9e9      	bls.n	800446c <nRF24_SetTXAddress+0x20>

        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004498:	18bb      	adds	r3, r7, r2
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	e011      	b.n	80044c4 <nRF24_SetTXAddress+0x78>
                address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80044a0:	200f      	movs	r0, #15
 80044a2:	183b      	adds	r3, r7, r0
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	18d2      	adds	r2, r2, r3
 80044aa:	183b      	adds	r3, r7, r0
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2102      	movs	r1, #2
 80044b0:	1acb      	subs	r3, r1, r3
 80044b2:	7811      	ldrb	r1, [r2, #0]
 80044b4:	220c      	movs	r2, #12
 80044b6:	18ba      	adds	r2, r7, r2
 80044b8:	54d1      	strb	r1, [r2, r3]
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80044ba:	183b      	adds	r3, r7, r0
 80044bc:	781a      	ldrb	r2, [r3, #0]
 80044be:	183b      	adds	r3, r7, r0
 80044c0:	3201      	adds	r2, #1
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	230f      	movs	r3, #15
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d9e8      	bls.n	80044a0 <nRF24_SetTXAddress+0x54>
        //make pipe 0 address backup;

        nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80044ce:	240c      	movs	r4, #12
 80044d0:	193b      	adds	r3, r7, r4
 80044d2:	2203      	movs	r2, #3
 80044d4:	0019      	movs	r1, r3
 80044d6:	200a      	movs	r0, #10
 80044d8:	f7ff fd1c 	bl	8003f14 <nRF24_WriteRegisters>
        nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80044dc:	193b      	adds	r3, r7, r4
 80044de:	2203      	movs	r2, #3
 80044e0:	0019      	movs	r1, r3
 80044e2:	2010      	movs	r0, #16
 80044e4:	f7ff fd16 	bl	8003f14 <nRF24_WriteRegisters>

}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b005      	add	sp, #20
 80044ee:	bd90      	pop	{r4, r7, pc}
 80044f0:	20000200 	.word	0x20000200

080044f4 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80044f4:	b590      	push	{r4, r7, lr}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
        uint8_t status = nRF24_ReadStatus();
 80044fa:	1dfc      	adds	r4, r7, #7
 80044fc:	f7ff fde1 	bl	80040c2 <nRF24_ReadStatus>
 8004500:	0003      	movs	r3, r0
 8004502:	7023      	strb	r3, [r4, #0]
        status |= (7<<4); // Clear bits 4, 5, 6.
 8004504:	1dfb      	adds	r3, r7, #7
 8004506:	1dfa      	adds	r2, r7, #7
 8004508:	7812      	ldrb	r2, [r2, #0]
 800450a:	2170      	movs	r1, #112	; 0x70
 800450c:	430a      	orrs	r2, r1
 800450e:	701a      	strb	r2, [r3, #0]
        nRF24_WriteStatus(status);
 8004510:	1dfb      	adds	r3, r7, #7
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	0018      	movs	r0, r3
 8004516:	f7ff fddd 	bl	80040d4 <nRF24_WriteStatus>
}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	46bd      	mov	sp, r7
 800451e:	b003      	add	sp, #12
 8004520:	bd90      	pop	{r4, r7, pc}

08004522 <nRF24_EnableRXDataReadyIRQ>:
    }
    return result;
}

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8004522:	b5b0      	push	{r4, r5, r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	0002      	movs	r2, r0
 800452a:	1dfb      	adds	r3, r7, #7
 800452c:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 800452e:	250f      	movs	r5, #15
 8004530:	197c      	adds	r4, r7, r5
 8004532:	f7ff fd4f 	bl	8003fd4 <nRF24_ReadConfig>
 8004536:	0003      	movs	r3, r0
 8004538:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 800453a:	1dfb      	adds	r3, r7, #7
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <nRF24_EnableRXDataReadyIRQ+0x2e>
                config |= (1<<NRF24_RX_DR);
 8004542:	197b      	adds	r3, r7, r5
 8004544:	197a      	adds	r2, r7, r5
 8004546:	7812      	ldrb	r2, [r2, #0]
 8004548:	2140      	movs	r1, #64	; 0x40
 800454a:	430a      	orrs	r2, r1
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	e006      	b.n	800455e <nRF24_EnableRXDataReadyIRQ+0x3c>
        else
                config &= ~(1<<NRF24_RX_DR);
 8004550:	220f      	movs	r2, #15
 8004552:	18bb      	adds	r3, r7, r2
 8004554:	18ba      	adds	r2, r7, r2
 8004556:	7812      	ldrb	r2, [r2, #0]
 8004558:	2140      	movs	r1, #64	; 0x40
 800455a:	438a      	bics	r2, r1
 800455c:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 800455e:	230f      	movs	r3, #15
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	0018      	movs	r0, r3
 8004566:	f7ff fd3e 	bl	8003fe6 <nRF24_WriteConfig>
}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	46bd      	mov	sp, r7
 800456e:	b004      	add	sp, #16
 8004570:	bdb0      	pop	{r4, r5, r7, pc}

08004572 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8004572:	b5b0      	push	{r4, r5, r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	0002      	movs	r2, r0
 800457a:	1dfb      	adds	r3, r7, #7
 800457c:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 800457e:	250f      	movs	r5, #15
 8004580:	197c      	adds	r4, r7, r5
 8004582:	f7ff fd27 	bl	8003fd4 <nRF24_ReadConfig>
 8004586:	0003      	movs	r3, r0
 8004588:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 800458a:	1dfb      	adds	r3, r7, #7
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <nRF24_EnableTXDataSentIRQ+0x2e>
                config |= (1<<NRF24_TX_DS);
 8004592:	197b      	adds	r3, r7, r5
 8004594:	197a      	adds	r2, r7, r5
 8004596:	7812      	ldrb	r2, [r2, #0]
 8004598:	2120      	movs	r1, #32
 800459a:	430a      	orrs	r2, r1
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e006      	b.n	80045ae <nRF24_EnableTXDataSentIRQ+0x3c>
        else
                config &= ~(1<<NRF24_TX_DS);
 80045a0:	220f      	movs	r2, #15
 80045a2:	18bb      	adds	r3, r7, r2
 80045a4:	18ba      	adds	r2, r7, r2
 80045a6:	7812      	ldrb	r2, [r2, #0]
 80045a8:	2120      	movs	r1, #32
 80045aa:	438a      	bics	r2, r1
 80045ac:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 80045ae:	230f      	movs	r3, #15
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	0018      	movs	r0, r3
 80045b6:	f7ff fd16 	bl	8003fe6 <nRF24_WriteConfig>
}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	46bd      	mov	sp, r7
 80045be:	b004      	add	sp, #16
 80045c0:	bdb0      	pop	{r4, r5, r7, pc}

080045c2 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80045c2:	b5b0      	push	{r4, r5, r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	0002      	movs	r2, r0
 80045ca:	1dfb      	adds	r3, r7, #7
 80045cc:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 80045ce:	250f      	movs	r5, #15
 80045d0:	197c      	adds	r4, r7, r5
 80045d2:	f7ff fcff 	bl	8003fd4 <nRF24_ReadConfig>
 80045d6:	0003      	movs	r3, r0
 80045d8:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 80045da:	1dfb      	adds	r3, r7, #7
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <nRF24_EnableMaxRetransmitIRQ+0x2e>
                config |= (1<<NRF24_MAX_RT);
 80045e2:	197b      	adds	r3, r7, r5
 80045e4:	197a      	adds	r2, r7, r5
 80045e6:	7812      	ldrb	r2, [r2, #0]
 80045e8:	2110      	movs	r1, #16
 80045ea:	430a      	orrs	r2, r1
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e006      	b.n	80045fe <nRF24_EnableMaxRetransmitIRQ+0x3c>
        else
                config &= ~(1<<NRF24_MAX_RT);
 80045f0:	220f      	movs	r2, #15
 80045f2:	18bb      	adds	r3, r7, r2
 80045f4:	18ba      	adds	r2, r7, r2
 80045f6:	7812      	ldrb	r2, [r2, #0]
 80045f8:	2110      	movs	r1, #16
 80045fa:	438a      	bics	r2, r1
 80045fc:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 80045fe:	230f      	movs	r3, #15
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	0018      	movs	r0, r3
 8004606:	f7ff fcee 	bl	8003fe6 <nRF24_WriteConfig>
}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	46bd      	mov	sp, r7
 800460e:	b004      	add	sp, #16
 8004610:	bdb0      	pop	{r4, r5, r7, pc}

08004612 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	000a      	movs	r2, r1
 800461c:	1cfb      	adds	r3, r7, #3
 800461e:	701a      	strb	r2, [r3, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
        nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8004620:	1cfb      	adds	r3, r7, #3
 8004622:	781a      	ldrb	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	0019      	movs	r1, r3
 8004628:	20a0      	movs	r0, #160	; 0xa0
 800462a:	f7ff fc73 	bl	8003f14 <nRF24_WriteRegisters>
#else
        nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	46bd      	mov	sp, r7
 8004632:	b002      	add	sp, #8
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <nRF24_WaitTX>:

int nRF24_WaitTX()
{
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
        uint8_t status;
        NRF24_CE_HIGH;
 800463e:	4b14      	ldr	r3, [pc, #80]	; (8004690 <nRF24_WaitTX+0x58>)
 8004640:	2201      	movs	r2, #1
 8004642:	2110      	movs	r1, #16
 8004644:	0018      	movs	r0, r3
 8004646:	f002 fe8c 	bl	8007362 <HAL_GPIO_WritePin>
        nRF24_Delay_ms(1);
 800464a:	2001      	movs	r0, #1
 800464c:	f7ff fba0 	bl	8003d90 <nRF24_Delay_ms>
        NRF24_CE_LOW;
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <nRF24_WaitTX+0x58>)
 8004652:	2200      	movs	r2, #0
 8004654:	2110      	movs	r1, #16
 8004656:	0018      	movs	r0, r3
 8004658:	f002 fe83 	bl	8007362 <HAL_GPIO_WritePin>

		nRF24_Delay_ms(100);
 800465c:	2064      	movs	r0, #100	; 0x64
 800465e:	f7ff fb97 	bl	8003d90 <nRF24_Delay_ms>
		status = nRF24_ReadStatus();
 8004662:	1dfc      	adds	r4, r7, #7
 8004664:	f7ff fd2d 	bl	80040c2 <nRF24_ReadStatus>
 8004668:	0003      	movs	r3, r0
 800466a:	7023      	strb	r3, [r4, #0]
        if(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))))
 800466c:	1dfb      	adds	r3, r7, #7
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2210      	movs	r2, #16
 8004672:	4013      	ands	r3, r2
 8004674:	d106      	bne.n	8004684 <nRF24_WaitTX+0x4c>
 8004676:	1dfb      	adds	r3, r7, #7
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2220      	movs	r2, #32
 800467c:	4013      	ands	r3, r2
 800467e:	d101      	bne.n	8004684 <nRF24_WaitTX+0x4c>
        {
        	return 0;
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <nRF24_WaitTX+0x4e>
        }
        else
        {
        	return 1;
 8004684:	2301      	movs	r3, #1
        }

}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	b003      	add	sp, #12
 800468c:	bd90      	pop	{r4, r7, pc}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	50000400 	.word	0x50000400

08004694 <nRF24_SendPacket>:
                nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	000a      	movs	r2, r1
 800469e:	1cfb      	adds	r3, r7, #3
 80046a0:	701a      	strb	r2, [r3, #0]
        if(Size > 32)
 80046a2:	1cfb      	adds	r3, r7, #3
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d901      	bls.n	80046ae <nRF24_SendPacket+0x1a>
                return NRF24_NO_TRANSMITTED_PACKET;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e00d      	b.n	80046ca <nRF24_SendPacket+0x36>

        nRF24_WriteTXPayload(Data, Size);
 80046ae:	1cfb      	adds	r3, r7, #3
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0011      	movs	r1, r2
 80046b6:	0018      	movs	r0, r3
 80046b8:	f7ff ffab 	bl	8004612 <nRF24_WriteTXPayload>
        if(nRF24_WaitTX())
 80046bc:	f7ff ffbc 	bl	8004638 <nRF24_WaitTX>
 80046c0:	1e03      	subs	r3, r0, #0
 80046c2:	d001      	beq.n	80046c8 <nRF24_SendPacket+0x34>
        {
        	return NRF24_TRANSMITTED_PACKET;
 80046c4:	2300      	movs	r3, #0
 80046c6:	e000      	b.n	80046ca <nRF24_SendPacket+0x36>
        }
        else
        {
        	return NRF24_NO_TRANSMITTED_PACKET;
 80046c8:	2301      	movs	r3, #1
        }
}
 80046ca:	0018      	movs	r0, r3
 80046cc:	46bd      	mov	sp, r7
 80046ce:	b002      	add	sp, #8
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <nRF24_Init>:
                nrf24_mr_flag = 0;
        }
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
        hspi_nrf = hspi;
 80046dc:	4b31      	ldr	r3, [pc, #196]	; (80047a4 <nRF24_Init+0xd0>)
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	601a      	str	r2, [r3, #0]

        NRF24_CE_LOW;
 80046e2:	4b31      	ldr	r3, [pc, #196]	; (80047a8 <nRF24_Init+0xd4>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	2110      	movs	r1, #16
 80046e8:	0018      	movs	r0, r3
 80046ea:	f002 fe3a 	bl	8007362 <HAL_GPIO_WritePin>
        NRF24_CSN_HIGH;
 80046ee:	23a0      	movs	r3, #160	; 0xa0
 80046f0:	05db      	lsls	r3, r3, #23
 80046f2:	2201      	movs	r2, #1
 80046f4:	2102      	movs	r1, #2
 80046f6:	0018      	movs	r0, r3
 80046f8:	f002 fe33 	bl	8007362 <HAL_GPIO_WritePin>

        nRF24_Delay_ms(5); // Wait for radio power up
 80046fc:	2005      	movs	r0, #5
 80046fe:	f7ff fb47 	bl	8003d90 <nRF24_Delay_ms>

        nRF24_SetPALevel( NRF24_PA_PWR_0dBM); // Radio power NRF24_PA_PWR_0dBM
 8004702:	2003      	movs	r0, #3
 8004704:	f7ff fc7f 	bl	8004006 <nRF24_SetPALevel>
        nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8004708:	2002      	movs	r0, #2
 800470a:	f7ff fca5 	bl	8004058 <nRF24_SetDataRate>
        nRF24_EnableCRC(1); // Enable CRC
 800470e:	2001      	movs	r0, #1
 8004710:	f7ff fd2a 	bl	8004168 <nRF24_EnableCRC>
        nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B);//1==NRF24_CRC_WIDTH_2B); // CRC Length 1 byte _1B
 8004714:	2000      	movs	r0, #0
 8004716:	f7ff fd4f 	bl	80041b8 <nRF24_SetCRCLength>
//      nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
        nRF24_SetRetries(5, 15); // 1000us, 7 times //5,15 lub 4,7
 800471a:	210f      	movs	r1, #15
 800471c:	2005      	movs	r0, #5
 800471e:	f7ff fd73 	bl	8004208 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
        nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8004722:	201d      	movs	r0, #29
 8004724:	f7ff fb74 	bl	8003e10 <nRF24_ReadRegister>
 8004728:	0003      	movs	r3, r0
 800472a:	001a      	movs	r2, r3
 800472c:	2304      	movs	r3, #4
 800472e:	4313      	orrs	r3, r2
 8004730:	b2db      	uxtb	r3, r3
 8004732:	0019      	movs	r1, r3
 8004734:	201d      	movs	r0, #29
 8004736:	f7ff fbc1 	bl	8003ebc <nRF24_WriteRegister>
        nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 800473a:	213f      	movs	r1, #63	; 0x3f
 800473c:	201c      	movs	r0, #28
 800473e:	f7ff fbbd 	bl	8003ebc <nRF24_WriteRegister>
#else
        nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
        nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
        nRF24_SetRFChannel(0x4c); // Set RF channel for transmission 10
 8004742:	204c      	movs	r0, #76	; 0x4c
 8004744:	f7ff fd7e 	bl	8004244 <nRF24_SetRFChannel>
        nRF24_EnablePipe(0, 1); // Enable pipe 0
 8004748:	2101      	movs	r1, #1
 800474a:	2000      	movs	r0, #0
 800474c:	f7ff fd8d 	bl	800426a <nRF24_EnablePipe>
        nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8004750:	2003      	movs	r0, #3
 8004752:	f7ff fe12 	bl	800437a <nRF24_SetAddressWidth>
        nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8004756:	2101      	movs	r1, #1
 8004758:	2000      	movs	r0, #0
 800475a:	f7ff fdca 	bl	80042f2 <nRF24_AutoACK>

        nRF24_WriteRegister(NRF24_RF_SETUP,0x5); //skopiowane z RPi ustawienia rejestrów
 800475e:	2105      	movs	r1, #5
 8004760:	2006      	movs	r0, #6
 8004762:	f7ff fbab 	bl	8003ebc <nRF24_WriteRegister>
        nRF24_WriteRegister(NRF24_FEATURE,0x6); //skopiowane z RPi ustawienia rejestrów (ważne, aby były te same)
 8004766:	2106      	movs	r1, #6
 8004768:	201d      	movs	r0, #29
 800476a:	f7ff fba7 	bl	8003ebc <nRF24_WriteRegister>
        nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 800476e:	2002      	movs	r0, #2
 8004770:	f7ff fc72 	bl	8004058 <nRF24_SetDataRate>
    nRF24_SetAddressWidth(3); //adres 3 znaki a nie 5
 8004774:	2003      	movs	r0, #3
 8004776:	f7ff fe00 	bl	800437a <nRF24_SetAddressWidth>

        nRF24_Delay_ms(1);
 800477a:	2001      	movs	r0, #1
 800477c:	f7ff fb08 	bl	8003d90 <nRF24_Delay_ms>

        nRF24_EnableRXDataReadyIRQ(1); //receiver irq
 8004780:	2001      	movs	r0, #1
 8004782:	f7ff fece 	bl	8004522 <nRF24_EnableRXDataReadyIRQ>
        nRF24_EnableTXDataSentIRQ(0);
 8004786:	2000      	movs	r0, #0
 8004788:	f7ff fef3 	bl	8004572 <nRF24_EnableTXDataSentIRQ>
        nRF24_EnableMaxRetransmitIRQ(0);
 800478c:	2000      	movs	r0, #0
 800478e:	f7ff ff18 	bl	80045c2 <nRF24_EnableMaxRetransmitIRQ>

        nRF24_Delay_ms(1);
 8004792:	2001      	movs	r0, #1
 8004794:	f7ff fafc 	bl	8003d90 <nRF24_Delay_ms>

        nRF24_ClearInterrupts();
 8004798:	f7ff feac 	bl	80044f4 <nRF24_ClearInterrupts>
}
 800479c:	46c0      	nop			; (mov r8, r8)
 800479e:	46bd      	mov	sp, r7
 80047a0:	b002      	add	sp, #8
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	200001fc 	.word	0x200001fc
 80047a8:	50000400 	.word	0x50000400

080047ac <clear_terminal>:
} instance_data_t;

typedef state_t state_func_t( instance_data_t *data );

void clear_terminal()
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
//	  MessageLength = sprintf((char*)Message, "\033[2J\033[;H"); // Clear terminal and home cursor
//	  HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 1000);
}
 80047b0:	46c0      	nop			; (mov r8, r8)
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <GPS_print>:

void GPS_print(NEO6_State GpsState)
{
 80047b8:	b084      	sub	sp, #16
 80047ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047bc:	b083      	sub	sp, #12
 80047be:	af02      	add	r7, sp, #8
 80047c0:	2610      	movs	r6, #16
 80047c2:	2508      	movs	r5, #8
 80047c4:	1974      	adds	r4, r6, r5
 80047c6:	19e4      	adds	r4, r4, r7
 80047c8:	6020      	str	r0, [r4, #0]
 80047ca:	6061      	str	r1, [r4, #4]
 80047cc:	60a2      	str	r2, [r4, #8]
 80047ce:	60e3      	str	r3, [r4, #12]
	NEO6_Task(&GpsState);
 80047d0:	002c      	movs	r4, r5
 80047d2:	1933      	adds	r3, r6, r4
 80047d4:	19db      	adds	r3, r3, r7
 80047d6:	0018      	movs	r0, r3
 80047d8:	f7ff fa36 	bl	8003c48 <NEO6_Task>

	if(NEO6_IsFix(&GpsState))
 80047dc:	1933      	adds	r3, r6, r4
 80047de:	19db      	adds	r3, r3, r7
 80047e0:	0018      	movs	r0, r3
 80047e2:	f7ff fa25 	bl	8003c30 <NEO6_IsFix>
 80047e6:	1e03      	subs	r3, r0, #0
 80047e8:	d100      	bne.n	80047ec <GPS_print+0x34>
 80047ea:	e12a      	b.n	8004a42 <GPS_print+0x28a>
	{
		MessageLength = sprintf((char*)Message, "UTC Time: %02d:%02d:%02d\n\r", GpsState.Hour, GpsState.Minute, GpsState.Second);
 80047ec:	0021      	movs	r1, r4
 80047ee:	1873      	adds	r3, r6, r1
 80047f0:	19db      	adds	r3, r3, r7
 80047f2:	2288      	movs	r2, #136	; 0x88
 80047f4:	32ff      	adds	r2, #255	; 0xff
 80047f6:	5c9b      	ldrb	r3, [r3, r2]
 80047f8:	001c      	movs	r4, r3
 80047fa:	1873      	adds	r3, r6, r1
 80047fc:	19db      	adds	r3, r3, r7
 80047fe:	22c4      	movs	r2, #196	; 0xc4
 8004800:	0052      	lsls	r2, r2, #1
 8004802:	5c9b      	ldrb	r3, [r3, r2]
 8004804:	001d      	movs	r5, r3
 8004806:	1873      	adds	r3, r6, r1
 8004808:	19db      	adds	r3, r3, r7
 800480a:	228a      	movs	r2, #138	; 0x8a
 800480c:	32ff      	adds	r2, #255	; 0xff
 800480e:	5c9b      	ldrb	r3, [r3, r2]
 8004810:	4999      	ldr	r1, [pc, #612]	; (8004a78 <GPS_print+0x2c0>)
 8004812:	489a      	ldr	r0, [pc, #616]	; (8004a7c <GPS_print+0x2c4>)
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	002b      	movs	r3, r5
 8004818:	0022      	movs	r2, r4
 800481a:	f008 fde3 	bl	800d3e4 <siprintf>
 800481e:	0003      	movs	r3, r0
 8004820:	b2da      	uxtb	r2, r3
 8004822:	4b97      	ldr	r3, [pc, #604]	; (8004a80 <GPS_print+0x2c8>)
 8004824:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 1000);
 8004826:	4b96      	ldr	r3, [pc, #600]	; (8004a80 <GPS_print+0x2c8>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	b29a      	uxth	r2, r3
 800482c:	23fa      	movs	r3, #250	; 0xfa
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4992      	ldr	r1, [pc, #584]	; (8004a7c <GPS_print+0x2c4>)
 8004832:	4894      	ldr	r0, [pc, #592]	; (8004a84 <GPS_print+0x2cc>)
 8004834:	f005 fba6 	bl	8009f84 <HAL_UART_Transmit>

		MessageLength = sprintf((char*)Message, "Date: %02d.%02d.20%02d\n\r", GpsState.Day, GpsState.Month, GpsState.Year);
 8004838:	2108      	movs	r1, #8
 800483a:	1873      	adds	r3, r6, r1
 800483c:	19db      	adds	r3, r3, r7
 800483e:	22c5      	movs	r2, #197	; 0xc5
 8004840:	0052      	lsls	r2, r2, #1
 8004842:	5c9b      	ldrb	r3, [r3, r2]
 8004844:	001c      	movs	r4, r3
 8004846:	1873      	adds	r3, r6, r1
 8004848:	19db      	adds	r3, r3, r7
 800484a:	228c      	movs	r2, #140	; 0x8c
 800484c:	32ff      	adds	r2, #255	; 0xff
 800484e:	5c9b      	ldrb	r3, [r3, r2]
 8004850:	001d      	movs	r5, r3
 8004852:	1873      	adds	r3, r6, r1
 8004854:	19db      	adds	r3, r3, r7
 8004856:	22c6      	movs	r2, #198	; 0xc6
 8004858:	0052      	lsls	r2, r2, #1
 800485a:	5c9b      	ldrb	r3, [r3, r2]
 800485c:	498a      	ldr	r1, [pc, #552]	; (8004a88 <GPS_print+0x2d0>)
 800485e:	4887      	ldr	r0, [pc, #540]	; (8004a7c <GPS_print+0x2c4>)
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	002b      	movs	r3, r5
 8004864:	0022      	movs	r2, r4
 8004866:	f008 fdbd 	bl	800d3e4 <siprintf>
 800486a:	0003      	movs	r3, r0
 800486c:	b2da      	uxtb	r2, r3
 800486e:	4b84      	ldr	r3, [pc, #528]	; (8004a80 <GPS_print+0x2c8>)
 8004870:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 1000);
 8004872:	4b83      	ldr	r3, [pc, #524]	; (8004a80 <GPS_print+0x2c8>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	b29a      	uxth	r2, r3
 8004878:	23fa      	movs	r3, #250	; 0xfa
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	497f      	ldr	r1, [pc, #508]	; (8004a7c <GPS_print+0x2c4>)
 800487e:	4881      	ldr	r0, [pc, #516]	; (8004a84 <GPS_print+0x2cc>)
 8004880:	f005 fb80 	bl	8009f84 <HAL_UART_Transmit>

		MessageLength = sprintf((char*)Message, "Latitude: %.2f %c\n\r", GpsState.Latitude, GpsState.LatitudeDirection);
 8004884:	2508      	movs	r5, #8
 8004886:	1973      	adds	r3, r6, r5
 8004888:	19db      	adds	r3, r3, r7
 800488a:	22c8      	movs	r2, #200	; 0xc8
 800488c:	0052      	lsls	r2, r2, #1
 800488e:	189b      	adds	r3, r3, r2
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	1971      	adds	r1, r6, r5
 8004896:	19c9      	adds	r1, r1, r7
 8004898:	20cc      	movs	r0, #204	; 0xcc
 800489a:	0040      	lsls	r0, r0, #1
 800489c:	5c09      	ldrb	r1, [r1, r0]
 800489e:	000c      	movs	r4, r1
 80048a0:	497a      	ldr	r1, [pc, #488]	; (8004a8c <GPS_print+0x2d4>)
 80048a2:	4876      	ldr	r0, [pc, #472]	; (8004a7c <GPS_print+0x2c4>)
 80048a4:	9400      	str	r4, [sp, #0]
 80048a6:	f008 fd9d 	bl	800d3e4 <siprintf>
 80048aa:	0003      	movs	r3, r0
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	4b74      	ldr	r3, [pc, #464]	; (8004a80 <GPS_print+0x2c8>)
 80048b0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 1000);
 80048b2:	4b73      	ldr	r3, [pc, #460]	; (8004a80 <GPS_print+0x2c8>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	23fa      	movs	r3, #250	; 0xfa
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	496f      	ldr	r1, [pc, #444]	; (8004a7c <GPS_print+0x2c4>)
 80048be:	4871      	ldr	r0, [pc, #452]	; (8004a84 <GPS_print+0x2cc>)
 80048c0:	f005 fb60 	bl	8009f84 <HAL_UART_Transmit>

		MessageLength = sprintf((char*)Message, "Longitude: %.2f %c\n\r", GpsState.Longitude, GpsState.LongitudeDirection);
 80048c4:	1973      	adds	r3, r6, r5
 80048c6:	19db      	adds	r3, r3, r7
 80048c8:	22d0      	movs	r2, #208	; 0xd0
 80048ca:	0052      	lsls	r2, r2, #1
 80048cc:	189b      	adds	r3, r3, r2
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	1971      	adds	r1, r6, r5
 80048d4:	19c9      	adds	r1, r1, r7
 80048d6:	20d4      	movs	r0, #212	; 0xd4
 80048d8:	0040      	lsls	r0, r0, #1
 80048da:	5c09      	ldrb	r1, [r1, r0]
 80048dc:	000c      	movs	r4, r1
 80048de:	496c      	ldr	r1, [pc, #432]	; (8004a90 <GPS_print+0x2d8>)
 80048e0:	4866      	ldr	r0, [pc, #408]	; (8004a7c <GPS_print+0x2c4>)
 80048e2:	9400      	str	r4, [sp, #0]
 80048e4:	f008 fd7e 	bl	800d3e4 <siprintf>
 80048e8:	0003      	movs	r3, r0
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	4b64      	ldr	r3, [pc, #400]	; (8004a80 <GPS_print+0x2c8>)
 80048ee:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 1000);
 80048f0:	4b63      	ldr	r3, [pc, #396]	; (8004a80 <GPS_print+0x2c8>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	23fa      	movs	r3, #250	; 0xfa
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4960      	ldr	r1, [pc, #384]	; (8004a7c <GPS_print+0x2c4>)
 80048fc:	4861      	ldr	r0, [pc, #388]	; (8004a84 <GPS_print+0x2cc>)
 80048fe:	f005 fb41 	bl	8009f84 <HAL_UART_Transmit>

		MessageLength = sprintf((char*)Message, "Altitude: %.2f m above sea level\n\r", GpsState.Altitude);
 8004902:	1973      	adds	r3, r6, r5
 8004904:	19db      	adds	r3, r3, r7
 8004906:	22d8      	movs	r2, #216	; 0xd8
 8004908:	0052      	lsls	r2, r2, #1
 800490a:	189b      	adds	r3, r3, r2
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	4960      	ldr	r1, [pc, #384]	; (8004a94 <GPS_print+0x2dc>)
 8004912:	485a      	ldr	r0, [pc, #360]	; (8004a7c <GPS_print+0x2c4>)
 8004914:	f008 fd66 	bl	800d3e4 <siprintf>
 8004918:	0003      	movs	r3, r0
 800491a:	b2da      	uxtb	r2, r3
 800491c:	4b58      	ldr	r3, [pc, #352]	; (8004a80 <GPS_print+0x2c8>)
 800491e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 1000);
 8004920:	4b57      	ldr	r3, [pc, #348]	; (8004a80 <GPS_print+0x2c8>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	b29a      	uxth	r2, r3
 8004926:	23fa      	movs	r3, #250	; 0xfa
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4954      	ldr	r1, [pc, #336]	; (8004a7c <GPS_print+0x2c4>)
 800492c:	4855      	ldr	r0, [pc, #340]	; (8004a84 <GPS_print+0x2cc>)
 800492e:	f005 fb29 	bl	8009f84 <HAL_UART_Transmit>

		MessageLength = sprintf((char*)Message, "Speed: %.2f knots, %f km/h\n\r", GpsState.SpeedKnots, GpsState.SpeedKilometers);
 8004932:	1973      	adds	r3, r6, r5
 8004934:	19db      	adds	r3, r3, r7
 8004936:	22dc      	movs	r2, #220	; 0xdc
 8004938:	0052      	lsls	r2, r2, #1
 800493a:	189b      	adds	r3, r3, r2
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	1973      	adds	r3, r6, r5
 8004942:	19db      	adds	r3, r3, r7
 8004944:	22e0      	movs	r2, #224	; 0xe0
 8004946:	0052      	lsls	r2, r2, #1
 8004948:	189b      	adds	r3, r3, r2
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4d52      	ldr	r5, [pc, #328]	; (8004a98 <GPS_print+0x2e0>)
 8004950:	4c4a      	ldr	r4, [pc, #296]	; (8004a7c <GPS_print+0x2c4>)
 8004952:	9200      	str	r2, [sp, #0]
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	0002      	movs	r2, r0
 8004958:	000b      	movs	r3, r1
 800495a:	0029      	movs	r1, r5
 800495c:	0020      	movs	r0, r4
 800495e:	f008 fd41 	bl	800d3e4 <siprintf>
 8004962:	0003      	movs	r3, r0
 8004964:	b2da      	uxtb	r2, r3
 8004966:	4b46      	ldr	r3, [pc, #280]	; (8004a80 <GPS_print+0x2c8>)
 8004968:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 1000);
 800496a:	4b45      	ldr	r3, [pc, #276]	; (8004a80 <GPS_print+0x2c8>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	b29a      	uxth	r2, r3
 8004970:	23fa      	movs	r3, #250	; 0xfa
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4941      	ldr	r1, [pc, #260]	; (8004a7c <GPS_print+0x2c4>)
 8004976:	4843      	ldr	r0, [pc, #268]	; (8004a84 <GPS_print+0x2cc>)
 8004978:	f005 fb04 	bl	8009f84 <HAL_UART_Transmit>

		MessageLength = sprintf((char*)Message, "Satelites: %d\n\r", GpsState.SatelitesNumber);
 800497c:	0034      	movs	r4, r6
 800497e:	2508      	movs	r5, #8
 8004980:	1963      	adds	r3, r4, r5
 8004982:	19db      	adds	r3, r3, r7
 8004984:	22e4      	movs	r2, #228	; 0xe4
 8004986:	0052      	lsls	r2, r2, #1
 8004988:	5c9b      	ldrb	r3, [r3, r2]
 800498a:	001a      	movs	r2, r3
 800498c:	4943      	ldr	r1, [pc, #268]	; (8004a9c <GPS_print+0x2e4>)
 800498e:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <GPS_print+0x2c4>)
 8004990:	0018      	movs	r0, r3
 8004992:	f008 fd27 	bl	800d3e4 <siprintf>
 8004996:	0003      	movs	r3, r0
 8004998:	b2da      	uxtb	r2, r3
 800499a:	4b39      	ldr	r3, [pc, #228]	; (8004a80 <GPS_print+0x2c8>)
 800499c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 1000);
 800499e:	4b38      	ldr	r3, [pc, #224]	; (8004a80 <GPS_print+0x2c8>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	23fa      	movs	r3, #250	; 0xfa
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4934      	ldr	r1, [pc, #208]	; (8004a7c <GPS_print+0x2c4>)
 80049aa:	4836      	ldr	r0, [pc, #216]	; (8004a84 <GPS_print+0x2cc>)
 80049ac:	f005 faea 	bl	8009f84 <HAL_UART_Transmit>

		MessageLength = sprintf((char*)Message, "Dilution of precision: %.2f\n\r", GpsState.Dop);
 80049b0:	1963      	adds	r3, r4, r5
 80049b2:	19db      	adds	r3, r3, r7
 80049b4:	22e8      	movs	r2, #232	; 0xe8
 80049b6:	0052      	lsls	r2, r2, #1
 80049b8:	189b      	adds	r3, r3, r2
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4938      	ldr	r1, [pc, #224]	; (8004aa0 <GPS_print+0x2e8>)
 80049c0:	482e      	ldr	r0, [pc, #184]	; (8004a7c <GPS_print+0x2c4>)
 80049c2:	f008 fd0f 	bl	800d3e4 <siprintf>
 80049c6:	0003      	movs	r3, r0
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	4b2d      	ldr	r3, [pc, #180]	; (8004a80 <GPS_print+0x2c8>)
 80049cc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 1000);
 80049ce:	4b2c      	ldr	r3, [pc, #176]	; (8004a80 <GPS_print+0x2c8>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	23fa      	movs	r3, #250	; 0xfa
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4928      	ldr	r1, [pc, #160]	; (8004a7c <GPS_print+0x2c4>)
 80049da:	482a      	ldr	r0, [pc, #168]	; (8004a84 <GPS_print+0x2cc>)
 80049dc:	f005 fad2 	bl	8009f84 <HAL_UART_Transmit>

		MessageLength = sprintf((char*)Message, "Horizontal dilution of precision: %.2f\n\r", GpsState.Hdop);
 80049e0:	1963      	adds	r3, r4, r5
 80049e2:	19db      	adds	r3, r3, r7
 80049e4:	22ec      	movs	r2, #236	; 0xec
 80049e6:	0052      	lsls	r2, r2, #1
 80049e8:	189b      	adds	r3, r3, r2
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	492d      	ldr	r1, [pc, #180]	; (8004aa4 <GPS_print+0x2ec>)
 80049f0:	4822      	ldr	r0, [pc, #136]	; (8004a7c <GPS_print+0x2c4>)
 80049f2:	f008 fcf7 	bl	800d3e4 <siprintf>
 80049f6:	0003      	movs	r3, r0
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	4b21      	ldr	r3, [pc, #132]	; (8004a80 <GPS_print+0x2c8>)
 80049fc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 1000);
 80049fe:	4b20      	ldr	r3, [pc, #128]	; (8004a80 <GPS_print+0x2c8>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	23fa      	movs	r3, #250	; 0xfa
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	491c      	ldr	r1, [pc, #112]	; (8004a7c <GPS_print+0x2c4>)
 8004a0a:	481e      	ldr	r0, [pc, #120]	; (8004a84 <GPS_print+0x2cc>)
 8004a0c:	f005 faba 	bl	8009f84 <HAL_UART_Transmit>

		MessageLength = sprintf((char*)Message, "Vertical dilution of precision: %.2f\n\r", GpsState.Vdop);
 8004a10:	1963      	adds	r3, r4, r5
 8004a12:	19db      	adds	r3, r3, r7
 8004a14:	22f0      	movs	r2, #240	; 0xf0
 8004a16:	0052      	lsls	r2, r2, #1
 8004a18:	189b      	adds	r3, r3, r2
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4922      	ldr	r1, [pc, #136]	; (8004aa8 <GPS_print+0x2f0>)
 8004a20:	4816      	ldr	r0, [pc, #88]	; (8004a7c <GPS_print+0x2c4>)
 8004a22:	f008 fcdf 	bl	800d3e4 <siprintf>
 8004a26:	0003      	movs	r3, r0
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <GPS_print+0x2c8>)
 8004a2c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 1000);
 8004a2e:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <GPS_print+0x2c8>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	23fa      	movs	r3, #250	; 0xfa
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4910      	ldr	r1, [pc, #64]	; (8004a7c <GPS_print+0x2c4>)
 8004a3a:	4812      	ldr	r0, [pc, #72]	; (8004a84 <GPS_print+0x2cc>)
 8004a3c:	f005 faa2 	bl	8009f84 <HAL_UART_Transmit>
	else
	{
		MessageLength = sprintf((char*)Message, "GPS: No Fix\n\r");
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 1000);
	}
}
 8004a40:	e012      	b.n	8004a68 <GPS_print+0x2b0>
		MessageLength = sprintf((char*)Message, "GPS: No Fix\n\r");
 8004a42:	4a1a      	ldr	r2, [pc, #104]	; (8004aac <GPS_print+0x2f4>)
 8004a44:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <GPS_print+0x2c4>)
 8004a46:	0011      	movs	r1, r2
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f008 fccb 	bl	800d3e4 <siprintf>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <GPS_print+0x2c8>)
 8004a54:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 1000);
 8004a56:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <GPS_print+0x2c8>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	23fa      	movs	r3, #250	; 0xfa
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4906      	ldr	r1, [pc, #24]	; (8004a7c <GPS_print+0x2c4>)
 8004a62:	4808      	ldr	r0, [pc, #32]	; (8004a84 <GPS_print+0x2cc>)
 8004a64:	f005 fa8e 	bl	8009f84 <HAL_UART_Transmit>
}
 8004a68:	46c0      	nop			; (mov r8, r8)
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b001      	add	sp, #4
 8004a6e:	bcf0      	pop	{r4, r5, r6, r7}
 8004a70:	bc08      	pop	{r3}
 8004a72:	b004      	add	sp, #16
 8004a74:	4718      	bx	r3
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	08010208 	.word	0x08010208
 8004a7c:	200004fc 	.word	0x200004fc
 8004a80:	200004f8 	.word	0x200004f8
 8004a84:	20000a9c 	.word	0x20000a9c
 8004a88:	08010224 	.word	0x08010224
 8004a8c:	08010240 	.word	0x08010240
 8004a90:	08010254 	.word	0x08010254
 8004a94:	0801026c 	.word	0x0801026c
 8004a98:	08010290 	.word	0x08010290
 8004a9c:	080102b0 	.word	0x080102b0
 8004aa0:	080102c0 	.word	0x080102c0
 8004aa4:	080102e0 	.word	0x080102e0
 8004aa8:	0801030c 	.word	0x0801030c
 8004aac:	08010334 	.word	0x08010334

08004ab0 <do_state_init>:

// State functions
state_t do_state_init( instance_data_t *data )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	clear_terminal();
 8004ab8:	f7ff fe78 	bl	80047ac <clear_terminal>
	MessageLength = sprintf(Message, "\n\rstate init\n\r");
 8004abc:	4a17      	ldr	r2, [pc, #92]	; (8004b1c <do_state_init+0x6c>)
 8004abe:	4b18      	ldr	r3, [pc, #96]	; (8004b20 <do_state_init+0x70>)
 8004ac0:	0011      	movs	r1, r2
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f008 fc8e 	bl	800d3e4 <siprintf>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <do_state_init+0x74>)
 8004ace:	701a      	strb	r2, [r3, #0]
	if(NRF24_TRANSMITTED_PACKET != nRF24_SendPacket(Message, MessageLength))
 8004ad0:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <do_state_init+0x74>)
 8004ad2:	781a      	ldrb	r2, [r3, #0]
 8004ad4:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <do_state_init+0x70>)
 8004ad6:	0011      	movs	r1, r2
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f7ff fddb 	bl	8004694 <nRF24_SendPacket>
 8004ade:	1e03      	subs	r3, r0, #0
 8004ae0:	d007      	beq.n	8004af2 <do_state_init+0x42>
	{
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 100);
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <do_state_init+0x74>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	490d      	ldr	r1, [pc, #52]	; (8004b20 <do_state_init+0x70>)
 8004aea:	480f      	ldr	r0, [pc, #60]	; (8004b28 <do_state_init+0x78>)
 8004aec:	2364      	movs	r3, #100	; 0x64
 8004aee:	f005 fa49 	bl	8009f84 <HAL_UART_Transmit>
	}

    // Power manager setup
    hard_reset_gps();
 8004af2:	f000 f9b0 	bl	8004e56 <hard_reset_gps>
    hard_reset_adc_sens();
 8004af6:	f000 f9d4 	bl	8004ea2 <hard_reset_adc_sens>
    hard_reset_i2c_sens();
 8004afa:	f000 f9f8 	bl	8004eee <hard_reset_i2c_sens>
    power_off_heater();
 8004afe:	f000 fa0f 	bl	8004f20 <power_off_heater>

    // Sensor init
    sensor_init();
 8004b02:	f000 fc79 	bl	80053f8 <sensor_init>
    HAL_Delay(1000);
 8004b06:	23fa      	movs	r3, #250	; 0xfa
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	f001 fb14 	bl	8006138 <HAL_Delay>
    return STATE_STANDBY;
 8004b10:	2301      	movs	r3, #1

}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b002      	add	sp, #8
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	08010344 	.word	0x08010344
 8004b20:	200004fc 	.word	0x200004fc
 8004b24:	200004f8 	.word	0x200004f8
 8004b28:	20000a9c 	.word	0x20000a9c

08004b2c <do_state_standby>:

state_t do_state_standby( instance_data_t *data )
{
 8004b2c:	b5b0      	push	{r4, r5, r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	6078      	str	r0, [r7, #4]

    
    float humidity, temperature;

    while( 1 ) {
        humidity = get_humidity();
 8004b34:	f000 fc86 	bl	8005444 <get_humidity>
 8004b38:	1c03      	adds	r3, r0, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
        temperature = get_temperature();
 8004b3c:	f000 fcc4 	bl	80054c8 <get_temperature>
 8004b40:	1c03      	adds	r3, r0, #0
 8004b42:	60bb      	str	r3, [r7, #8]

    	clear_terminal();
 8004b44:	f7ff fe32 	bl	80047ac <clear_terminal>
    	MessageLength = sprintf(Message, "\n\rstate standby\n\r");
 8004b48:	4a21      	ldr	r2, [pc, #132]	; (8004bd0 <do_state_standby+0xa4>)
 8004b4a:	4b22      	ldr	r3, [pc, #136]	; (8004bd4 <do_state_standby+0xa8>)
 8004b4c:	0011      	movs	r1, r2
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f008 fc48 	bl	800d3e4 <siprintf>
 8004b54:	0003      	movs	r3, r0
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	4b1f      	ldr	r3, [pc, #124]	; (8004bd8 <do_state_standby+0xac>)
 8004b5a:	701a      	strb	r2, [r3, #0]
    	if(NRF24_TRANSMITTED_PACKET != nRF24_SendPacket(Message, MessageLength))
 8004b5c:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <do_state_standby+0xac>)
 8004b5e:	781a      	ldrb	r2, [r3, #0]
 8004b60:	4b1c      	ldr	r3, [pc, #112]	; (8004bd4 <do_state_standby+0xa8>)
 8004b62:	0011      	movs	r1, r2
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7ff fd95 	bl	8004694 <nRF24_SendPacket>
 8004b6a:	1e03      	subs	r3, r0, #0
 8004b6c:	d007      	beq.n	8004b7e <do_state_standby+0x52>
    	{
    		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 100);
 8004b6e:	4b1a      	ldr	r3, [pc, #104]	; (8004bd8 <do_state_standby+0xac>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	4917      	ldr	r1, [pc, #92]	; (8004bd4 <do_state_standby+0xa8>)
 8004b76:	4819      	ldr	r0, [pc, #100]	; (8004bdc <do_state_standby+0xb0>)
 8004b78:	2364      	movs	r3, #100	; 0x64
 8004b7a:	f005 fa03 	bl	8009f84 <HAL_UART_Transmit>
    	}

		MessageLength = sprintf(Message, "Temperature = %.1fC\n\rHum = %.1f\n\r", temperature, humidity);
 8004b7e:	68b8      	ldr	r0, [r7, #8]
 8004b80:	f7fe fad0 	bl	8003124 <__aeabi_f2d>
 8004b84:	0004      	movs	r4, r0
 8004b86:	000d      	movs	r5, r1
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7fe facb 	bl	8003124 <__aeabi_f2d>
 8004b8e:	0002      	movs	r2, r0
 8004b90:	000b      	movs	r3, r1
 8004b92:	4913      	ldr	r1, [pc, #76]	; (8004be0 <do_state_standby+0xb4>)
 8004b94:	480f      	ldr	r0, [pc, #60]	; (8004bd4 <do_state_standby+0xa8>)
 8004b96:	9200      	str	r2, [sp, #0]
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	0022      	movs	r2, r4
 8004b9c:	002b      	movs	r3, r5
 8004b9e:	f008 fc21 	bl	800d3e4 <siprintf>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <do_state_standby+0xac>)
 8004ba8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 100);
 8004baa:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <do_state_standby+0xac>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	4908      	ldr	r1, [pc, #32]	; (8004bd4 <do_state_standby+0xa8>)
 8004bb2:	480a      	ldr	r0, [pc, #40]	; (8004bdc <do_state_standby+0xb0>)
 8004bb4:	2364      	movs	r3, #100	; 0x64
 8004bb6:	f005 f9e5 	bl	8009f84 <HAL_UART_Transmit>

        //if( temperature < 10  || humidity > 80 ) // debug
        {
			HAL_Delay(1000);
 8004bba:	23fa      	movs	r3, #250	; 0xfa
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f001 faba 	bl	8006138 <HAL_Delay>
        	return STATE_RESCUE;
 8004bc4:	2302      	movs	r3, #2
        }
    }
    
    return STATE_STANDBY;
}
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b004      	add	sp, #16
 8004bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	08010354 	.word	0x08010354
 8004bd4:	200004fc 	.word	0x200004fc
 8004bd8:	200004f8 	.word	0x200004f8
 8004bdc:	20000a9c 	.word	0x20000a9c
 8004be0:	08010368 	.word	0x08010368

08004be4 <do_state_rescue>:

state_t do_state_rescue( instance_data_t *data )
{
 8004be4:	b590      	push	{r4, r7, lr}
 8004be6:	b0f9      	sub	sp, #484	; 0x1e4
 8004be8:	af76      	add	r7, sp, #472	; 0x1d8
 8004bea:	6078      	str	r0, [r7, #4]
    // Low freq LED
    // Pulse read, pulsoximeter read? Time measurement, send SOS using NRF
    // If low pulse and low temperature go to EMERGENCY
    // If button held go to STANDBY

	power_on_adc_sens();
 8004bec:	f000 f93f 	bl	8004e6e <power_on_adc_sens>
    HAL_ADC_Start_DMA(&hadc, &HeartBeatValue, 2);
 8004bf0:	4930      	ldr	r1, [pc, #192]	; (8004cb4 <do_state_rescue+0xd0>)
 8004bf2:	4b31      	ldr	r3, [pc, #196]	; (8004cb8 <do_state_rescue+0xd4>)
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f001 fc36 	bl	8006468 <HAL_ADC_Start_DMA>


    while( 1 )
    {
    	clear_terminal();
 8004bfc:	f7ff fdd6 	bl	80047ac <clear_terminal>
    	MessageLength = sprintf(Message, "\n\rstate rescue\n\r");
 8004c00:	4a2e      	ldr	r2, [pc, #184]	; (8004cbc <do_state_rescue+0xd8>)
 8004c02:	4b2f      	ldr	r3, [pc, #188]	; (8004cc0 <do_state_rescue+0xdc>)
 8004c04:	0011      	movs	r1, r2
 8004c06:	0018      	movs	r0, r3
 8004c08:	f008 fbec 	bl	800d3e4 <siprintf>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	4b2c      	ldr	r3, [pc, #176]	; (8004cc4 <do_state_rescue+0xe0>)
 8004c12:	701a      	strb	r2, [r3, #0]
    	if(NRF24_TRANSMITTED_PACKET != nRF24_SendPacket(Message, MessageLength))
 8004c14:	4b2b      	ldr	r3, [pc, #172]	; (8004cc4 <do_state_rescue+0xe0>)
 8004c16:	781a      	ldrb	r2, [r3, #0]
 8004c18:	4b29      	ldr	r3, [pc, #164]	; (8004cc0 <do_state_rescue+0xdc>)
 8004c1a:	0011      	movs	r1, r2
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f7ff fd39 	bl	8004694 <nRF24_SendPacket>
 8004c22:	1e03      	subs	r3, r0, #0
 8004c24:	d007      	beq.n	8004c36 <do_state_rescue+0x52>
    	{
    		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 100);
 8004c26:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <do_state_rescue+0xe0>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	4924      	ldr	r1, [pc, #144]	; (8004cc0 <do_state_rescue+0xdc>)
 8004c2e:	4826      	ldr	r0, [pc, #152]	; (8004cc8 <do_state_rescue+0xe4>)
 8004c30:	2364      	movs	r3, #100	; 0x64
 8004c32:	f005 f9a7 	bl	8009f84 <HAL_UART_Transmit>
    	}
    	GPS_print(GpsState);
 8004c36:	4c25      	ldr	r4, [pc, #148]	; (8004ccc <do_state_rescue+0xe8>)
 8004c38:	466b      	mov	r3, sp
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	0023      	movs	r3, r4
 8004c3e:	3310      	adds	r3, #16
 8004c40:	22ec      	movs	r2, #236	; 0xec
 8004c42:	0052      	lsls	r2, r2, #1
 8004c44:	0019      	movs	r1, r3
 8004c46:	f008 fd9d 	bl	800d784 <memcpy>
 8004c4a:	6820      	ldr	r0, [r4, #0]
 8004c4c:	6861      	ldr	r1, [r4, #4]
 8004c4e:	68a2      	ldr	r2, [r4, #8]
 8004c50:	68e3      	ldr	r3, [r4, #12]
 8004c52:	f7ff fdb1 	bl	80047b8 <GPS_print>
        HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	005a      	lsls	r2, r3, #1
 8004c5a:	23a0      	movs	r3, #160	; 0xa0
 8004c5c:	05db      	lsls	r3, r3, #23
 8004c5e:	0011      	movs	r1, r2
 8004c60:	0018      	movs	r0, r3
 8004c62:	f002 fb9b 	bl	800739c <HAL_GPIO_TogglePin>

        pulse = get_pulse((uint16_t*)HeartBeatArray, 255);
 8004c66:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <do_state_rescue+0xec>)
 8004c68:	21ff      	movs	r1, #255	; 0xff
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f000 f97c 	bl	8004f68 <get_pulse>
 8004c70:	0003      	movs	r3, r0
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <do_state_rescue+0xf0>)
 8004c76:	701a      	strb	r2, [r3, #0]
		MessageLength = sprintf(Message, "Pulse = %d\n\r", pulse);
 8004c78:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <do_state_rescue+0xf0>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	001a      	movs	r2, r3
 8004c7e:	4916      	ldr	r1, [pc, #88]	; (8004cd8 <do_state_rescue+0xf4>)
 8004c80:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <do_state_rescue+0xdc>)
 8004c82:	0018      	movs	r0, r3
 8004c84:	f008 fbae 	bl	800d3e4 <siprintf>
 8004c88:	0003      	movs	r3, r0
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <do_state_rescue+0xe0>)
 8004c8e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 100);
 8004c90:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <do_state_rescue+0xe0>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	490a      	ldr	r1, [pc, #40]	; (8004cc0 <do_state_rescue+0xdc>)
 8004c98:	480b      	ldr	r0, [pc, #44]	; (8004cc8 <do_state_rescue+0xe4>)
 8004c9a:	2364      	movs	r3, #100	; 0x64
 8004c9c:	f005 f972 	bl	8009f84 <HAL_UART_Transmit>

        //if( temperature < 10  || pulse < 40 ) // debug
        {
			HAL_Delay(1000);
 8004ca0:	23fa      	movs	r3, #250	; 0xfa
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f001 fa47 	bl	8006138 <HAL_Delay>
        	return STATE_EMERGENCY;
 8004caa:	2303      	movs	r3, #3
			return STATE_STANDBY;
		}
    }

    return STATE_EMERGENCY;
}
 8004cac:	0018      	movs	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b003      	add	sp, #12
 8004cb2:	bd90      	pop	{r4, r7, pc}
 8004cb4:	200005fc 	.word	0x200005fc
 8004cb8:	20000218 	.word	0x20000218
 8004cbc:	0801038c 	.word	0x0801038c
 8004cc0:	200004fc 	.word	0x200004fc
 8004cc4:	200004f8 	.word	0x200004f8
 8004cc8:	20000a9c 	.word	0x20000a9c
 8004ccc:	20000310 	.word	0x20000310
 8004cd0:	20000600 	.word	0x20000600
 8004cd4:	200005fb 	.word	0x200005fb
 8004cd8:	080103a0 	.word	0x080103a0

08004cdc <do_state_emergency>:

state_t do_state_emergency( instance_data_t *data )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
    // High freq LED
    // Activate Petlier
    // Try to send SOS over NRF
    // If button held goto STANDBY

    power_on_heater();
 8004ce4:	f000 f90f 	bl	8004f06 <power_on_heater>

    while( 1 )
    {
    	clear_terminal();
 8004ce8:	f7ff fd60 	bl	80047ac <clear_terminal>
    	MessageLength = sprintf(Message, "\n\rstate emergency\n\r");
 8004cec:	4a28      	ldr	r2, [pc, #160]	; (8004d90 <do_state_emergency+0xb4>)
 8004cee:	4b29      	ldr	r3, [pc, #164]	; (8004d94 <do_state_emergency+0xb8>)
 8004cf0:	0011      	movs	r1, r2
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f008 fb76 	bl	800d3e4 <siprintf>
 8004cf8:	0003      	movs	r3, r0
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	4b26      	ldr	r3, [pc, #152]	; (8004d98 <do_state_emergency+0xbc>)
 8004cfe:	701a      	strb	r2, [r3, #0]
    	if(NRF24_TRANSMITTED_PACKET != nRF24_SendPacket(Message, MessageLength))
 8004d00:	4b25      	ldr	r3, [pc, #148]	; (8004d98 <do_state_emergency+0xbc>)
 8004d02:	781a      	ldrb	r2, [r3, #0]
 8004d04:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <do_state_emergency+0xb8>)
 8004d06:	0011      	movs	r1, r2
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f7ff fcc3 	bl	8004694 <nRF24_SendPacket>
 8004d0e:	1e03      	subs	r3, r0, #0
 8004d10:	d007      	beq.n	8004d22 <do_state_emergency+0x46>
    	{
    		HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 100);
 8004d12:	4b21      	ldr	r3, [pc, #132]	; (8004d98 <do_state_emergency+0xbc>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	491e      	ldr	r1, [pc, #120]	; (8004d94 <do_state_emergency+0xb8>)
 8004d1a:	4820      	ldr	r0, [pc, #128]	; (8004d9c <do_state_emergency+0xc0>)
 8004d1c:	2364      	movs	r3, #100	; 0x64
 8004d1e:	f005 f931 	bl	8009f84 <HAL_UART_Transmit>
    	}

        HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8004d22:	2380      	movs	r3, #128	; 0x80
 8004d24:	005a      	lsls	r2, r3, #1
 8004d26:	23a0      	movs	r3, #160	; 0xa0
 8004d28:	05db      	lsls	r3, r3, #23
 8004d2a:	0011      	movs	r1, r2
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f002 fb35 	bl	800739c <HAL_GPIO_TogglePin>

		MessageLength = sprintf(Message, "      --SOS--      \n\r");
 8004d32:	4a1b      	ldr	r2, [pc, #108]	; (8004da0 <do_state_emergency+0xc4>)
 8004d34:	4b17      	ldr	r3, [pc, #92]	; (8004d94 <do_state_emergency+0xb8>)
 8004d36:	0011      	movs	r1, r2
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f008 fb53 	bl	800d3e4 <siprintf>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <do_state_emergency+0xbc>)
 8004d44:	701a      	strb	r2, [r3, #0]
		if(NRF24_TRANSMITTED_PACKET != nRF24_SendPacket(Message, MessageLength))
 8004d46:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <do_state_emergency+0xbc>)
 8004d48:	781a      	ldrb	r2, [r3, #0]
 8004d4a:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <do_state_emergency+0xb8>)
 8004d4c:	0011      	movs	r1, r2
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f7ff fca0 	bl	8004694 <nRF24_SendPacket>
 8004d54:	1e03      	subs	r3, r0, #0
 8004d56:	d007      	beq.n	8004d68 <do_state_emergency+0x8c>
		{
			HAL_UART_Transmit(&hlpuart1, Message, MessageLength, 100);
 8004d58:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <do_state_emergency+0xbc>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	490d      	ldr	r1, [pc, #52]	; (8004d94 <do_state_emergency+0xb8>)
 8004d60:	480e      	ldr	r0, [pc, #56]	; (8004d9c <do_state_emergency+0xc0>)
 8004d62:	2364      	movs	r3, #100	; 0x64
 8004d64:	f005 f90e 	bl	8009f84 <HAL_UART_Transmit>
		}
		HAL_Delay(1000);
 8004d68:	23fa      	movs	r3, #250	; 0xfa
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f001 f9e3 	bl	8006138 <HAL_Delay>
		if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	009a      	lsls	r2, r3, #2
 8004d76:	23a0      	movs	r3, #160	; 0xa0
 8004d78:	05db      	lsls	r3, r3, #23
 8004d7a:	0011      	movs	r1, r2
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f002 fad3 	bl	8007328 <HAL_GPIO_ReadPin>
 8004d82:	1e03      	subs	r3, r0, #0
 8004d84:	d1b0      	bne.n	8004ce8 <do_state_emergency+0xc>
		{
			return STATE_STANDBY;
 8004d86:	2301      	movs	r3, #1
		}
    }
    return STATE_INIT;
}
 8004d88:	0018      	movs	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b002      	add	sp, #8
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	080103b0 	.word	0x080103b0
 8004d94:	200004fc 	.word	0x200004fc
 8004d98:	200004f8 	.word	0x200004f8
 8004d9c:	20000a9c 	.word	0x20000a9c
 8004da0:	080103c4 	.word	0x080103c4

08004da4 <do_state_test>:

state_t do_state_test( instance_data_t *data )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
    // Simulation of other stated without GPS and Petlie
    // Low freq led?
    // If button held go to STANDBY
    
    return STATE_STANDBY;
 8004dac:	2301      	movs	r3, #1
}
 8004dae:	0018      	movs	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b002      	add	sp, #8
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <do_state_error>:

state_t do_state_error( instance_data_t *data )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
    // Well.. fuck
    // Constant LED
    // printf("state error");
    // Maybe something will come up later...

    printf("Error");
 8004dc0:	4b02      	ldr	r3, [pc, #8]	; (8004dcc <do_state_error+0x14>)
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f008 fa9e 	bl	800d304 <iprintf>
    while( 1 ) {
 8004dc8:	e7fe      	b.n	8004dc8 <do_state_error+0x10>
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	080103dc 	.word	0x080103dc

08004dd0 <run_state>:
    do_state_test,
    do_state_error,
};

state_t run_state( state_t current_state, instance_data_t *data )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	0002      	movs	r2, r0
 8004dd8:	6039      	str	r1, [r7, #0]
 8004dda:	1dfb      	adds	r3, r7, #7
 8004ddc:	701a      	strb	r2, [r3, #0]
    return state_table[ current_state ](data);
 8004dde:	1dfb      	adds	r3, r7, #7
 8004de0:	781a      	ldrb	r2, [r3, #0]
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <run_state+0x28>)
 8004de4:	0092      	lsls	r2, r2, #2
 8004de6:	58d3      	ldr	r3, [r2, r3]
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	0010      	movs	r0, r2
 8004dec:	4798      	blx	r3
 8004dee:	0003      	movs	r3, r0
}
 8004df0:	0018      	movs	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	b002      	add	sp, #8
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	080104ac 	.word	0x080104ac

08004dfc <pv_run>:


// Main loop
void pv_run()
{
 8004dfc:	b590      	push	{r4, r7, lr}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0

    state_t current_state = STATE_INIT;
 8004e02:	1dfb      	adds	r3, r7, #7
 8004e04:	2200      	movs	r2, #0
 8004e06:	701a      	strb	r2, [r3, #0]
    instance_data_t data = { NULL };
 8004e08:	2300      	movs	r3, #0
 8004e0a:	603b      	str	r3, [r7, #0]
    while( 1 ) {
        current_state = run_state( current_state, &data );
 8004e0c:	1dfc      	adds	r4, r7, #7
 8004e0e:	003a      	movs	r2, r7
 8004e10:	1dfb      	adds	r3, r7, #7
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	0011      	movs	r1, r2
 8004e16:	0018      	movs	r0, r3
 8004e18:	f7ff ffda 	bl	8004dd0 <run_state>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	7023      	strb	r3, [r4, #0]
 8004e20:	e7f4      	b.n	8004e0c <pv_run+0x10>

08004e22 <power_on_gps>:
#define HARD_RESET_TIME_MS 200

// NOTE: gps, i2c and adc sensors are connected to PMOS, set pin HIGH to disable, and LOW to enable


void power_on_gps() {
 8004e22:	b580      	push	{r7, lr}
 8004e24:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin( GPS_EN_GPIO_Port, GPS_EN_Pin , GPIO_PIN_RESET );
 8004e26:	2380      	movs	r3, #128	; 0x80
 8004e28:	0119      	lsls	r1, r3, #4
 8004e2a:	23a0      	movs	r3, #160	; 0xa0
 8004e2c:	05db      	lsls	r3, r3, #23
 8004e2e:	2200      	movs	r2, #0
 8004e30:	0018      	movs	r0, r3
 8004e32:	f002 fa96 	bl	8007362 <HAL_GPIO_WritePin>
}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <power_off_gps>:

void power_off_gps() {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin( GPS_EN_GPIO_Port, GPS_EN_Pin , GPIO_PIN_SET );
 8004e40:	2380      	movs	r3, #128	; 0x80
 8004e42:	0119      	lsls	r1, r3, #4
 8004e44:	23a0      	movs	r3, #160	; 0xa0
 8004e46:	05db      	lsls	r3, r3, #23
 8004e48:	2201      	movs	r2, #1
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f002 fa89 	bl	8007362 <HAL_GPIO_WritePin>
}
 8004e50:	46c0      	nop			; (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <hard_reset_gps>:

void hard_reset_gps() {
 8004e56:	b580      	push	{r7, lr}
 8004e58:	af00      	add	r7, sp, #0
    power_off_gps();
 8004e5a:	f7ff ffef 	bl	8004e3c <power_off_gps>
    HAL_Delay( HARD_RESET_TIME_MS );
 8004e5e:	20c8      	movs	r0, #200	; 0xc8
 8004e60:	f001 f96a 	bl	8006138 <HAL_Delay>
    power_on_gps();
 8004e64:	f7ff ffdd 	bl	8004e22 <power_on_gps>
}
 8004e68:	46c0      	nop			; (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <power_on_adc_sens>:


void power_on_adc_sens() {
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin( ADC_EN_GPIO_Port, ADC_EN_Pin, GPIO_PIN_RESET );
 8004e72:	2380      	movs	r3, #128	; 0x80
 8004e74:	0159      	lsls	r1, r3, #5
 8004e76:	23a0      	movs	r3, #160	; 0xa0
 8004e78:	05db      	lsls	r3, r3, #23
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f002 fa70 	bl	8007362 <HAL_GPIO_WritePin>
}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <power_off_adc_sens>:

void power_off_adc_sens() {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin( ADC_EN_GPIO_Port, ADC_EN_Pin, GPIO_PIN_SET );
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	0159      	lsls	r1, r3, #5
 8004e90:	23a0      	movs	r3, #160	; 0xa0
 8004e92:	05db      	lsls	r3, r3, #23
 8004e94:	2201      	movs	r2, #1
 8004e96:	0018      	movs	r0, r3
 8004e98:	f002 fa63 	bl	8007362 <HAL_GPIO_WritePin>
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <hard_reset_adc_sens>:

void hard_reset_adc_sens() {
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	af00      	add	r7, sp, #0
    power_off_adc_sens();
 8004ea6:	f7ff ffef 	bl	8004e88 <power_off_adc_sens>
    HAL_Delay( HARD_RESET_TIME_MS );
 8004eaa:	20c8      	movs	r0, #200	; 0xc8
 8004eac:	f001 f944 	bl	8006138 <HAL_Delay>
    power_on_adc_sens();
 8004eb0:	f7ff ffdd 	bl	8004e6e <power_on_adc_sens>
}
 8004eb4:	46c0      	nop			; (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <power_on_i2c_sens>:


void power_on_i2c_sens() {
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin( I2C_EN_GPIO_Port, I2C_EN_Pin, GPIO_PIN_RESET );
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	00d9      	lsls	r1, r3, #3
 8004ec2:	23a0      	movs	r3, #160	; 0xa0
 8004ec4:	05db      	lsls	r3, r3, #23
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f002 fa4a 	bl	8007362 <HAL_GPIO_WritePin>
}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <power_off_i2c_sens>:

void power_off_i2c_sens() {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin( I2C_EN_GPIO_Port, I2C_EN_Pin, GPIO_PIN_SET );
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	00d9      	lsls	r1, r3, #3
 8004edc:	23a0      	movs	r3, #160	; 0xa0
 8004ede:	05db      	lsls	r3, r3, #23
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f002 fa3d 	bl	8007362 <HAL_GPIO_WritePin>

}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <hard_reset_i2c_sens>:

void hard_reset_i2c_sens() {
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	af00      	add	r7, sp, #0
    power_off_i2c_sens();
 8004ef2:	f7ff ffef 	bl	8004ed4 <power_off_i2c_sens>
    HAL_Delay( HARD_RESET_TIME_MS );
 8004ef6:	20c8      	movs	r0, #200	; 0xc8
 8004ef8:	f001 f91e 	bl	8006138 <HAL_Delay>
    power_on_i2c_sens();
 8004efc:	f7ff ffdd 	bl	8004eba <power_on_i2c_sens>
}
 8004f00:	46c0      	nop			; (mov r8, r8)
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <power_on_heater>:


void power_on_heater() {
 8004f06:	b580      	push	{r7, lr}
 8004f08:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin( HEATER_EN_GPIO_Port, HEATER_EN_Pin, GPIO_PIN_RESET );
 8004f0a:	2380      	movs	r3, #128	; 0x80
 8004f0c:	0219      	lsls	r1, r3, #8
 8004f0e:	23a0      	movs	r3, #160	; 0xa0
 8004f10:	05db      	lsls	r3, r3, #23
 8004f12:	2200      	movs	r2, #0
 8004f14:	0018      	movs	r0, r3
 8004f16:	f002 fa24 	bl	8007362 <HAL_GPIO_WritePin>
}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <power_off_heater>:

void power_off_heater() {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin( HEATER_EN_GPIO_Port, HEATER_EN_Pin, GPIO_PIN_RESET );
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	0219      	lsls	r1, r3, #8
 8004f28:	23a0      	movs	r3, #160	; 0xa0
 8004f2a:	05db      	lsls	r3, r3, #23
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f002 fa17 	bl	8007362 <HAL_GPIO_WritePin>
}
 8004f34:	46c0      	nop			; (mov r8, r8)
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <adc_to_digital>:
#include "App/pv_pulse.h"

#include <stdint.h>
#include <string.h>

uint8_t adc_to_digital( uint16_t sample, uint16_t mean) {
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	0002      	movs	r2, r0
 8004f42:	1dbb      	adds	r3, r7, #6
 8004f44:	801a      	strh	r2, [r3, #0]
 8004f46:	1d3b      	adds	r3, r7, #4
 8004f48:	1c0a      	adds	r2, r1, #0
 8004f4a:	801a      	strh	r2, [r3, #0]
    if( sample >= mean ) return 1;
 8004f4c:	1dba      	adds	r2, r7, #6
 8004f4e:	1d3b      	adds	r3, r7, #4
 8004f50:	8812      	ldrh	r2, [r2, #0]
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d301      	bcc.n	8004f5c <adc_to_digital+0x22>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <adc_to_digital+0x24>
    return 0;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	0018      	movs	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b002      	add	sp, #8
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <get_pulse>:

int get_pulse( uint16_t* adc_buf, uint16_t arr_size) {
 8004f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6a:	4cd7      	ldr	r4, [pc, #860]	; (80052c8 <get_pulse+0x360>)
 8004f6c:	44a5      	add	sp, r4
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	61f8      	str	r0, [r7, #28]
 8004f72:	0008      	movs	r0, r1
 8004f74:	49d5      	ldr	r1, [pc, #852]	; (80052cc <get_pulse+0x364>)
 8004f76:	268c      	movs	r6, #140	; 0x8c
 8004f78:	00b6      	lsls	r6, r6, #2
 8004f7a:	0033      	movs	r3, r6
 8004f7c:	1989      	adds	r1, r1, r6
 8004f7e:	2218      	movs	r2, #24
 8004f80:	4694      	mov	ip, r2
 8004f82:	44bc      	add	ip, r7
 8004f84:	4461      	add	r1, ip
 8004f86:	8008      	strh	r0, [r1, #0]
 8004f88:	4669      	mov	r1, sp
 8004f8a:	000e      	movs	r6, r1

    uint16_t samples[arr_size];
 8004f8c:	49cf      	ldr	r1, [pc, #828]	; (80052cc <get_pulse+0x364>)
 8004f8e:	0018      	movs	r0, r3
 8004f90:	1809      	adds	r1, r1, r0
 8004f92:	2318      	movs	r3, #24
 8004f94:	469c      	mov	ip, r3
 8004f96:	44bc      	add	ip, r7
 8004f98:	4461      	add	r1, ip
 8004f9a:	8809      	ldrh	r1, [r1, #0]
 8004f9c:	0008      	movs	r0, r1
 8004f9e:	3801      	subs	r0, #1
 8004fa0:	2386      	movs	r3, #134	; 0x86
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	2218      	movs	r2, #24
 8004fa6:	189b      	adds	r3, r3, r2
 8004fa8:	19db      	adds	r3, r3, r7
 8004faa:	6018      	str	r0, [r3, #0]
 8004fac:	6139      	str	r1, [r7, #16]
 8004fae:	2000      	movs	r0, #0
 8004fb0:	6178      	str	r0, [r7, #20]
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	0f18      	lsrs	r0, r3, #28
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	011d      	lsls	r5, r3, #4
 8004fba:	4305      	orrs	r5, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	011c      	lsls	r4, r3, #4
 8004fc0:	6039      	str	r1, [r7, #0]
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	683c      	ldr	r4, [r7, #0]
 8004fc8:	687d      	ldr	r5, [r7, #4]
 8004fca:	0023      	movs	r3, r4
 8004fcc:	0f18      	lsrs	r0, r3, #28
 8004fce:	002b      	movs	r3, r5
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4303      	orrs	r3, r0
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	0023      	movs	r3, r4
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	000b      	movs	r3, r1
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	3307      	adds	r3, #7
 8004fe6:	08db      	lsrs	r3, r3, #3
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	466a      	mov	r2, sp
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	469d      	mov	sp, r3
 8004ff0:	466b      	mov	r3, sp
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	2485      	movs	r4, #133	; 0x85
 8004ffa:	00a4      	lsls	r4, r4, #2
 8004ffc:	2218      	movs	r2, #24
 8004ffe:	18a2      	adds	r2, r4, r2
 8005000:	19d2      	adds	r2, r2, r7
 8005002:	6013      	str	r3, [r2, #0]
    // __disable_irq();
    memcpy(&samples, adc_buf, arr_size*2);
 8005004:	4bb1      	ldr	r3, [pc, #708]	; (80052cc <get_pulse+0x364>)
 8005006:	208c      	movs	r0, #140	; 0x8c
 8005008:	0080      	lsls	r0, r0, #2
 800500a:	181b      	adds	r3, r3, r0
 800500c:	2218      	movs	r2, #24
 800500e:	4694      	mov	ip, r2
 8005010:	44bc      	add	ip, r7
 8005012:	4463      	add	r3, ip
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	001a      	movs	r2, r3
 800501a:	69f9      	ldr	r1, [r7, #28]
 800501c:	2318      	movs	r3, #24
 800501e:	18e3      	adds	r3, r4, r3
 8005020:	19db      	adds	r3, r3, r7
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	0018      	movs	r0, r3
 8005026:	f008 fbad 	bl	800d784 <memcpy>

    // Calculate pulse

    // Prescaler ADC_GET_CLOCK_PRESCALER
    // TODO: calculate period
    float period = 1;
 800502a:	23fe      	movs	r3, #254	; 0xfe
 800502c:	059b      	lsls	r3, r3, #22
 800502e:	2284      	movs	r2, #132	; 0x84
 8005030:	0092      	lsls	r2, r2, #2
 8005032:	2118      	movs	r1, #24
 8005034:	1852      	adds	r2, r2, r1
 8005036:	19d2      	adds	r2, r2, r7
 8005038:	6013      	str	r3, [r2, #0]


    // Calculate mean value
    uint16_t min = 0;
 800503a:	4ba5      	ldr	r3, [pc, #660]	; (80052d0 <get_pulse+0x368>)
 800503c:	2218      	movs	r2, #24
 800503e:	189b      	adds	r3, r3, r2
 8005040:	19db      	adds	r3, r3, r7
 8005042:	2200      	movs	r2, #0
 8005044:	801a      	strh	r2, [r3, #0]
    uint16_t max = 0;
 8005046:	238b      	movs	r3, #139	; 0x8b
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	2218      	movs	r2, #24
 800504c:	189b      	adds	r3, r3, r2
 800504e:	19db      	adds	r3, r3, r7
 8005050:	2200      	movs	r2, #0
 8005052:	801a      	strh	r2, [r3, #0]
    for( uint16_t i=0; i < arr_size; i++ ) {
 8005054:	4b9f      	ldr	r3, [pc, #636]	; (80052d4 <get_pulse+0x36c>)
 8005056:	2218      	movs	r2, #24
 8005058:	189b      	adds	r3, r3, r2
 800505a:	19db      	adds	r3, r3, r7
 800505c:	2200      	movs	r2, #0
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	e042      	b.n	80050e8 <get_pulse+0x180>
        // printf("%d %d\n", i, samples[i]);
		if( samples[i] > max)
 8005062:	499c      	ldr	r1, [pc, #624]	; (80052d4 <get_pulse+0x36c>)
 8005064:	2318      	movs	r3, #24
 8005066:	18cb      	adds	r3, r1, r3
 8005068:	19db      	adds	r3, r3, r7
 800506a:	881a      	ldrh	r2, [r3, #0]
 800506c:	2385      	movs	r3, #133	; 0x85
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	2018      	movs	r0, #24
 8005072:	181b      	adds	r3, r3, r0
 8005074:	19db      	adds	r3, r3, r7
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	0052      	lsls	r2, r2, #1
 800507a:	5ad3      	ldrh	r3, [r2, r3]
 800507c:	208b      	movs	r0, #139	; 0x8b
 800507e:	0080      	lsls	r0, r0, #2
 8005080:	2218      	movs	r2, #24
 8005082:	1882      	adds	r2, r0, r2
 8005084:	19d2      	adds	r2, r2, r7
 8005086:	8812      	ldrh	r2, [r2, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d207      	bcs.n	800509c <get_pulse+0x134>
            max = i;
 800508c:	2318      	movs	r3, #24
 800508e:	18c3      	adds	r3, r0, r3
 8005090:	19db      	adds	r3, r3, r7
 8005092:	2218      	movs	r2, #24
 8005094:	188a      	adds	r2, r1, r2
 8005096:	19d2      	adds	r2, r2, r7
 8005098:	8812      	ldrh	r2, [r2, #0]
 800509a:	801a      	strh	r2, [r3, #0]
        if(  samples[i] < min)
 800509c:	498d      	ldr	r1, [pc, #564]	; (80052d4 <get_pulse+0x36c>)
 800509e:	2318      	movs	r3, #24
 80050a0:	18cb      	adds	r3, r1, r3
 80050a2:	19db      	adds	r3, r3, r7
 80050a4:	881a      	ldrh	r2, [r3, #0]
 80050a6:	2385      	movs	r3, #133	; 0x85
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	2018      	movs	r0, #24
 80050ac:	181b      	adds	r3, r3, r0
 80050ae:	19db      	adds	r3, r3, r7
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	0052      	lsls	r2, r2, #1
 80050b4:	5ad3      	ldrh	r3, [r2, r3]
 80050b6:	4886      	ldr	r0, [pc, #536]	; (80052d0 <get_pulse+0x368>)
 80050b8:	2218      	movs	r2, #24
 80050ba:	1882      	adds	r2, r0, r2
 80050bc:	19d2      	adds	r2, r2, r7
 80050be:	8812      	ldrh	r2, [r2, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d907      	bls.n	80050d4 <get_pulse+0x16c>
            min = i;
 80050c4:	2318      	movs	r3, #24
 80050c6:	18c3      	adds	r3, r0, r3
 80050c8:	19db      	adds	r3, r3, r7
 80050ca:	2218      	movs	r2, #24
 80050cc:	188a      	adds	r2, r1, r2
 80050ce:	19d2      	adds	r2, r2, r7
 80050d0:	8812      	ldrh	r2, [r2, #0]
 80050d2:	801a      	strh	r2, [r3, #0]
    for( uint16_t i=0; i < arr_size; i++ ) {
 80050d4:	497f      	ldr	r1, [pc, #508]	; (80052d4 <get_pulse+0x36c>)
 80050d6:	2318      	movs	r3, #24
 80050d8:	18cb      	adds	r3, r1, r3
 80050da:	19db      	adds	r3, r3, r7
 80050dc:	881a      	ldrh	r2, [r3, #0]
 80050de:	2318      	movs	r3, #24
 80050e0:	18cb      	adds	r3, r1, r3
 80050e2:	19db      	adds	r3, r3, r7
 80050e4:	3201      	adds	r2, #1
 80050e6:	801a      	strh	r2, [r3, #0]
 80050e8:	4b7a      	ldr	r3, [pc, #488]	; (80052d4 <get_pulse+0x36c>)
 80050ea:	2218      	movs	r2, #24
 80050ec:	189b      	adds	r3, r3, r2
 80050ee:	19da      	adds	r2, r3, r7
 80050f0:	4b76      	ldr	r3, [pc, #472]	; (80052cc <get_pulse+0x364>)
 80050f2:	218c      	movs	r1, #140	; 0x8c
 80050f4:	0089      	lsls	r1, r1, #2
 80050f6:	185b      	adds	r3, r3, r1
 80050f8:	2118      	movs	r1, #24
 80050fa:	468c      	mov	ip, r1
 80050fc:	44bc      	add	ip, r7
 80050fe:	4463      	add	r3, ip
 8005100:	8812      	ldrh	r2, [r2, #0]
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d3ac      	bcc.n	8005062 <get_pulse+0xfa>
    }

    uint16_t mean = (max-min) / 2;
 8005108:	238b      	movs	r3, #139	; 0x8b
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	2218      	movs	r2, #24
 800510e:	189b      	adds	r3, r3, r2
 8005110:	19db      	adds	r3, r3, r7
 8005112:	881a      	ldrh	r2, [r3, #0]
 8005114:	4b6e      	ldr	r3, [pc, #440]	; (80052d0 <get_pulse+0x368>)
 8005116:	2118      	movs	r1, #24
 8005118:	185b      	adds	r3, r3, r1
 800511a:	19db      	adds	r3, r3, r7
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	d500      	bpl.n	8005124 <get_pulse+0x1bc>
 8005122:	3301      	adds	r3, #1
 8005124:	105b      	asrs	r3, r3, #1
 8005126:	001a      	movs	r2, r3
 8005128:	496b      	ldr	r1, [pc, #428]	; (80052d8 <get_pulse+0x370>)
 800512a:	2318      	movs	r3, #24
 800512c:	18cb      	adds	r3, r1, r3
 800512e:	19db      	adds	r3, r3, r7
 8005130:	801a      	strh	r2, [r3, #0]
	// printf("samples end\n max: %d min %d mean: %d\n", max, min, mean);

    // Calculate samples in period
    uint8_t prev = adc_to_digital(samples[0],mean);
 8005132:	2385      	movs	r3, #133	; 0x85
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	2218      	movs	r2, #24
 8005138:	189b      	adds	r3, r3, r2
 800513a:	19db      	adds	r3, r3, r7
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	881a      	ldrh	r2, [r3, #0]
 8005140:	4b66      	ldr	r3, [pc, #408]	; (80052dc <get_pulse+0x374>)
 8005142:	2018      	movs	r0, #24
 8005144:	181b      	adds	r3, r3, r0
 8005146:	19dc      	adds	r4, r3, r7
 8005148:	2318      	movs	r3, #24
 800514a:	18cb      	adds	r3, r1, r3
 800514c:	19db      	adds	r3, r3, r7
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	0019      	movs	r1, r3
 8005152:	0010      	movs	r0, r2
 8005154:	f7ff fef1 	bl	8004f3a <adc_to_digital>
 8005158:	0003      	movs	r3, r0
 800515a:	7023      	strb	r3, [r4, #0]
    uint8_t edge_count = 0;
 800515c:	4b60      	ldr	r3, [pc, #384]	; (80052e0 <get_pulse+0x378>)
 800515e:	2218      	movs	r2, #24
 8005160:	189b      	adds	r3, r3, r2
 8005162:	19db      	adds	r3, r3, r7
 8005164:	2200      	movs	r2, #0
 8005166:	701a      	strb	r2, [r3, #0]
    uint16_t sample_count = 0;
 8005168:	4b5e      	ldr	r3, [pc, #376]	; (80052e4 <get_pulse+0x37c>)
 800516a:	2218      	movs	r2, #24
 800516c:	189b      	adds	r3, r3, r2
 800516e:	19db      	adds	r3, r3, r7
 8005170:	2200      	movs	r2, #0
 8005172:	801a      	strh	r2, [r3, #0]
    uint16_t samples_per_period[255] = {0};
 8005174:	4b5c      	ldr	r3, [pc, #368]	; (80052e8 <get_pulse+0x380>)
 8005176:	228c      	movs	r2, #140	; 0x8c
 8005178:	0092      	lsls	r2, r2, #2
 800517a:	189b      	adds	r3, r3, r2
 800517c:	2218      	movs	r2, #24
 800517e:	4694      	mov	ip, r2
 8005180:	44bc      	add	ip, r7
 8005182:	4463      	add	r3, ip
 8005184:	0018      	movs	r0, r3
 8005186:	23ff      	movs	r3, #255	; 0xff
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	001a      	movs	r2, r3
 800518c:	2100      	movs	r1, #0
 800518e:	f008 fa3b 	bl	800d608 <memset>
    uint16_t samples_per_period_i = 0;
 8005192:	2389      	movs	r3, #137	; 0x89
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	2218      	movs	r2, #24
 8005198:	189b      	adds	r3, r3, r2
 800519a:	19db      	adds	r3, r3, r7
 800519c:	2200      	movs	r2, #0
 800519e:	801a      	strh	r2, [r3, #0]

    for( uint16_t i=0; i < arr_size; i++ ) {
 80051a0:	4b52      	ldr	r3, [pc, #328]	; (80052ec <get_pulse+0x384>)
 80051a2:	2218      	movs	r2, #24
 80051a4:	189b      	adds	r3, r3, r2
 80051a6:	19db      	adds	r3, r3, r7
 80051a8:	2200      	movs	r2, #0
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	e06c      	b.n	8005288 <get_pulse+0x320>
        if( prev != adc_to_digital(samples[i], mean) ) {
 80051ae:	4b4f      	ldr	r3, [pc, #316]	; (80052ec <get_pulse+0x384>)
 80051b0:	2218      	movs	r2, #24
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	19db      	adds	r3, r3, r7
 80051b6:	881a      	ldrh	r2, [r3, #0]
 80051b8:	2385      	movs	r3, #133	; 0x85
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	2118      	movs	r1, #24
 80051be:	185b      	adds	r3, r3, r1
 80051c0:	19db      	adds	r3, r3, r7
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	0052      	lsls	r2, r2, #1
 80051c6:	5ad2      	ldrh	r2, [r2, r3]
 80051c8:	4b43      	ldr	r3, [pc, #268]	; (80052d8 <get_pulse+0x370>)
 80051ca:	2118      	movs	r1, #24
 80051cc:	185b      	adds	r3, r3, r1
 80051ce:	19db      	adds	r3, r3, r7
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	0019      	movs	r1, r3
 80051d4:	0010      	movs	r0, r2
 80051d6:	f7ff feb0 	bl	8004f3a <adc_to_digital>
 80051da:	0003      	movs	r3, r0
 80051dc:	001a      	movs	r2, r3
 80051de:	4b3f      	ldr	r3, [pc, #252]	; (80052dc <get_pulse+0x374>)
 80051e0:	2118      	movs	r1, #24
 80051e2:	185b      	adds	r3, r3, r1
 80051e4:	19db      	adds	r3, r3, r7
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d039      	beq.n	8005260 <get_pulse+0x2f8>
            edge_count++;
 80051ec:	493c      	ldr	r1, [pc, #240]	; (80052e0 <get_pulse+0x378>)
 80051ee:	2318      	movs	r3, #24
 80051f0:	18cb      	adds	r3, r1, r3
 80051f2:	19db      	adds	r3, r3, r7
 80051f4:	781a      	ldrb	r2, [r3, #0]
 80051f6:	2318      	movs	r3, #24
 80051f8:	18cb      	adds	r3, r1, r3
 80051fa:	19db      	adds	r3, r3, r7
 80051fc:	3201      	adds	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]
            if( edge_count > 1 ) {
 8005200:	2318      	movs	r3, #24
 8005202:	18cb      	adds	r3, r1, r3
 8005204:	19db      	adds	r3, r3, r7
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d929      	bls.n	8005260 <get_pulse+0x2f8>
                samples_per_period[samples_per_period_i] = sample_count;
 800520c:	2089      	movs	r0, #137	; 0x89
 800520e:	0080      	lsls	r0, r0, #2
 8005210:	2318      	movs	r3, #24
 8005212:	18c3      	adds	r3, r0, r3
 8005214:	19db      	adds	r3, r3, r7
 8005216:	881a      	ldrh	r2, [r3, #0]
 8005218:	4b33      	ldr	r3, [pc, #204]	; (80052e8 <get_pulse+0x380>)
 800521a:	218c      	movs	r1, #140	; 0x8c
 800521c:	0089      	lsls	r1, r1, #2
 800521e:	185b      	adds	r3, r3, r1
 8005220:	2118      	movs	r1, #24
 8005222:	468c      	mov	ip, r1
 8005224:	44bc      	add	ip, r7
 8005226:	4463      	add	r3, ip
 8005228:	0052      	lsls	r2, r2, #1
 800522a:	492e      	ldr	r1, [pc, #184]	; (80052e4 <get_pulse+0x37c>)
 800522c:	2418      	movs	r4, #24
 800522e:	1909      	adds	r1, r1, r4
 8005230:	19c9      	adds	r1, r1, r7
 8005232:	8809      	ldrh	r1, [r1, #0]
 8005234:	52d1      	strh	r1, [r2, r3]
                if(samples_per_period_i < 254)
 8005236:	2318      	movs	r3, #24
 8005238:	18c3      	adds	r3, r0, r3
 800523a:	19db      	adds	r3, r3, r7
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	2bfd      	cmp	r3, #253	; 0xfd
 8005240:	d808      	bhi.n	8005254 <get_pulse+0x2ec>
                {
                	samples_per_period_i++;
 8005242:	2318      	movs	r3, #24
 8005244:	18c3      	adds	r3, r0, r3
 8005246:	19db      	adds	r3, r3, r7
 8005248:	881a      	ldrh	r2, [r3, #0]
 800524a:	2318      	movs	r3, #24
 800524c:	18c3      	adds	r3, r0, r3
 800524e:	19db      	adds	r3, r3, r7
 8005250:	3201      	adds	r2, #1
 8005252:	801a      	strh	r2, [r3, #0]
                }
                sample_count =0;
 8005254:	4b23      	ldr	r3, [pc, #140]	; (80052e4 <get_pulse+0x37c>)
 8005256:	2218      	movs	r2, #24
 8005258:	189b      	adds	r3, r3, r2
 800525a:	19db      	adds	r3, r3, r7
 800525c:	2200      	movs	r2, #0
 800525e:	801a      	strh	r2, [r3, #0]
            }
        } else {

        }
        sample_count++;
 8005260:	4920      	ldr	r1, [pc, #128]	; (80052e4 <get_pulse+0x37c>)
 8005262:	2318      	movs	r3, #24
 8005264:	18cb      	adds	r3, r1, r3
 8005266:	19db      	adds	r3, r3, r7
 8005268:	881a      	ldrh	r2, [r3, #0]
 800526a:	2318      	movs	r3, #24
 800526c:	18cb      	adds	r3, r1, r3
 800526e:	19db      	adds	r3, r3, r7
 8005270:	3201      	adds	r2, #1
 8005272:	801a      	strh	r2, [r3, #0]
    for( uint16_t i=0; i < arr_size; i++ ) {
 8005274:	491d      	ldr	r1, [pc, #116]	; (80052ec <get_pulse+0x384>)
 8005276:	2318      	movs	r3, #24
 8005278:	18cb      	adds	r3, r1, r3
 800527a:	19db      	adds	r3, r3, r7
 800527c:	881a      	ldrh	r2, [r3, #0]
 800527e:	2318      	movs	r3, #24
 8005280:	18cb      	adds	r3, r1, r3
 8005282:	19db      	adds	r3, r3, r7
 8005284:	3201      	adds	r2, #1
 8005286:	801a      	strh	r2, [r3, #0]
 8005288:	4b18      	ldr	r3, [pc, #96]	; (80052ec <get_pulse+0x384>)
 800528a:	2218      	movs	r2, #24
 800528c:	189b      	adds	r3, r3, r2
 800528e:	19da      	adds	r2, r3, r7
 8005290:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <get_pulse+0x364>)
 8005292:	218c      	movs	r1, #140	; 0x8c
 8005294:	0089      	lsls	r1, r1, #2
 8005296:	185b      	adds	r3, r3, r1
 8005298:	2118      	movs	r1, #24
 800529a:	468c      	mov	ip, r1
 800529c:	44bc      	add	ip, r7
 800529e:	4463      	add	r3, ip
 80052a0:	8812      	ldrh	r2, [r2, #0]
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d200      	bcs.n	80052aa <get_pulse+0x342>
 80052a8:	e781      	b.n	80051ae <get_pulse+0x246>
    }
	// printf("period 1: %d\n", samples_per_period[0]);


    uint16_t samples_per_period_sum = 0;
 80052aa:	2388      	movs	r3, #136	; 0x88
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	2218      	movs	r2, #24
 80052b0:	189b      	adds	r3, r3, r2
 80052b2:	19db      	adds	r3, r3, r7
 80052b4:	2200      	movs	r2, #0
 80052b6:	801a      	strh	r2, [r3, #0]

    for( uint16_t i=0; i<(sizeof(samples_per_period)/sizeof(samples_per_period[0])); i++) {
 80052b8:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <get_pulse+0x388>)
 80052ba:	2218      	movs	r2, #24
 80052bc:	189b      	adds	r3, r3, r2
 80052be:	19db      	adds	r3, r3, r7
 80052c0:	2200      	movs	r2, #0
 80052c2:	801a      	strh	r2, [r3, #0]
 80052c4:	e057      	b.n	8005376 <get_pulse+0x40e>
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	fffffdb4 	.word	0xfffffdb4
 80052cc:	fffffdd2 	.word	0xfffffdd2
 80052d0:	0000022e 	.word	0x0000022e
 80052d4:	0000022a 	.word	0x0000022a
 80052d8:	0000020e 	.word	0x0000020e
 80052dc:	0000020d 	.word	0x0000020d
 80052e0:	00000229 	.word	0x00000229
 80052e4:	00000226 	.word	0x00000226
 80052e8:	fffffddc 	.word	0xfffffddc
 80052ec:	00000222 	.word	0x00000222
 80052f0:	0000021e 	.word	0x0000021e
        if( i < samples_per_period_i ) {
 80052f4:	493d      	ldr	r1, [pc, #244]	; (80053ec <get_pulse+0x484>)
 80052f6:	2318      	movs	r3, #24
 80052f8:	18cb      	adds	r3, r1, r3
 80052fa:	19da      	adds	r2, r3, r7
 80052fc:	2389      	movs	r3, #137	; 0x89
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	2018      	movs	r0, #24
 8005302:	181b      	adds	r3, r3, r0
 8005304:	19db      	adds	r3, r3, r7
 8005306:	8812      	ldrh	r2, [r2, #0]
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d219      	bcs.n	8005342 <get_pulse+0x3da>
			samples_per_period_sum+=samples_per_period[i];
 800530e:	2318      	movs	r3, #24
 8005310:	18cb      	adds	r3, r1, r3
 8005312:	19db      	adds	r3, r3, r7
 8005314:	881a      	ldrh	r2, [r3, #0]
 8005316:	4b36      	ldr	r3, [pc, #216]	; (80053f0 <get_pulse+0x488>)
 8005318:	218c      	movs	r1, #140	; 0x8c
 800531a:	0089      	lsls	r1, r1, #2
 800531c:	185b      	adds	r3, r3, r1
 800531e:	2118      	movs	r1, #24
 8005320:	468c      	mov	ip, r1
 8005322:	44bc      	add	ip, r7
 8005324:	4463      	add	r3, ip
 8005326:	0052      	lsls	r2, r2, #1
 8005328:	5ad1      	ldrh	r1, [r2, r3]
 800532a:	2288      	movs	r2, #136	; 0x88
 800532c:	0092      	lsls	r2, r2, #2
 800532e:	2318      	movs	r3, #24
 8005330:	18d3      	adds	r3, r2, r3
 8005332:	19db      	adds	r3, r3, r7
 8005334:	2018      	movs	r0, #24
 8005336:	1812      	adds	r2, r2, r0
 8005338:	19d2      	adds	r2, r2, r7
 800533a:	8812      	ldrh	r2, [r2, #0]
 800533c:	188a      	adds	r2, r1, r2
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	e00f      	b.n	8005362 <get_pulse+0x3fa>
		} else {
			samples_per_period[i]=0;
 8005342:	4b2a      	ldr	r3, [pc, #168]	; (80053ec <get_pulse+0x484>)
 8005344:	2218      	movs	r2, #24
 8005346:	189b      	adds	r3, r3, r2
 8005348:	19db      	adds	r3, r3, r7
 800534a:	881a      	ldrh	r2, [r3, #0]
 800534c:	4b28      	ldr	r3, [pc, #160]	; (80053f0 <get_pulse+0x488>)
 800534e:	218c      	movs	r1, #140	; 0x8c
 8005350:	0089      	lsls	r1, r1, #2
 8005352:	185b      	adds	r3, r3, r1
 8005354:	2118      	movs	r1, #24
 8005356:	468c      	mov	ip, r1
 8005358:	44bc      	add	ip, r7
 800535a:	4463      	add	r3, ip
 800535c:	0052      	lsls	r2, r2, #1
 800535e:	2100      	movs	r1, #0
 8005360:	52d1      	strh	r1, [r2, r3]
    for( uint16_t i=0; i<(sizeof(samples_per_period)/sizeof(samples_per_period[0])); i++) {
 8005362:	4922      	ldr	r1, [pc, #136]	; (80053ec <get_pulse+0x484>)
 8005364:	2318      	movs	r3, #24
 8005366:	18cb      	adds	r3, r1, r3
 8005368:	19db      	adds	r3, r3, r7
 800536a:	881a      	ldrh	r2, [r3, #0]
 800536c:	2318      	movs	r3, #24
 800536e:	18cb      	adds	r3, r1, r3
 8005370:	19db      	adds	r3, r3, r7
 8005372:	3201      	adds	r2, #1
 8005374:	801a      	strh	r2, [r3, #0]
 8005376:	4b1d      	ldr	r3, [pc, #116]	; (80053ec <get_pulse+0x484>)
 8005378:	2218      	movs	r2, #24
 800537a:	189b      	adds	r3, r3, r2
 800537c:	19db      	adds	r3, r3, r7
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	2bfe      	cmp	r3, #254	; 0xfe
 8005382:	d9b7      	bls.n	80052f4 <get_pulse+0x38c>
		}
		// printf(" %ld ",samples_per_period[i] );
    }

	// printf("Done %d %d\n", samples_per_period_sum, samples_per_period_i);
	uint16_t samples_per_period_mean = samples_per_period_sum / samples_per_period_i;
 8005384:	4d1b      	ldr	r5, [pc, #108]	; (80053f4 <get_pulse+0x48c>)
 8005386:	2318      	movs	r3, #24
 8005388:	18eb      	adds	r3, r5, r3
 800538a:	19dc      	adds	r4, r3, r7
 800538c:	2388      	movs	r3, #136	; 0x88
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	2218      	movs	r2, #24
 8005392:	189b      	adds	r3, r3, r2
 8005394:	19da      	adds	r2, r3, r7
 8005396:	2389      	movs	r3, #137	; 0x89
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	2118      	movs	r1, #24
 800539c:	185b      	adds	r3, r3, r1
 800539e:	19db      	adds	r3, r3, r7
 80053a0:	8812      	ldrh	r2, [r2, #0]
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	0019      	movs	r1, r3
 80053a6:	0010      	movs	r0, r2
 80053a8:	f7fa fed4 	bl	8000154 <__udivsi3>
 80053ac:	0003      	movs	r3, r0
 80053ae:	8023      	strh	r3, [r4, #0]
    // printf("\n%d", samples_per_period_mean);
    return samples_per_period_mean * period;
 80053b0:	2318      	movs	r3, #24
 80053b2:	18eb      	adds	r3, r5, r3
 80053b4:	19db      	adds	r3, r3, r7
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	0018      	movs	r0, r3
 80053ba:	f7fb ffd1 	bl	8001360 <__aeabi_i2f>
 80053be:	1c03      	adds	r3, r0, #0
 80053c0:	2284      	movs	r2, #132	; 0x84
 80053c2:	0092      	lsls	r2, r2, #2
 80053c4:	2118      	movs	r1, #24
 80053c6:	1852      	adds	r2, r2, r1
 80053c8:	19d2      	adds	r2, r2, r7
 80053ca:	6811      	ldr	r1, [r2, #0]
 80053cc:	1c18      	adds	r0, r3, #0
 80053ce:	f7fb fcb9 	bl	8000d44 <__aeabi_fmul>
 80053d2:	1c03      	adds	r3, r0, #0
 80053d4:	1c18      	adds	r0, r3, #0
 80053d6:	f7fb ffa3 	bl	8001320 <__aeabi_f2iz>
 80053da:	0003      	movs	r3, r0
 80053dc:	46b5      	mov	sp, r6

}
 80053de:	0018      	movs	r0, r3
 80053e0:	46bd      	mov	sp, r7
 80053e2:	2393      	movs	r3, #147	; 0x93
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	449d      	add	sp, r3
 80053e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	0000021e 	.word	0x0000021e
 80053f0:	fffffddc 	.word	0xfffffddc
 80053f4:	0000020a 	.word	0x0000020a

080053f8 <sensor_init>:
float averageHumidity;
float humiditySum;

extern NEO6_State GpsState;

void sensor_init() {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
    AHT20_Init();
 80053fc:	f7fd ffc6 	bl	800338c <AHT20_Init>
    NEO6_Init(&GpsState, &hlpuart1);
 8005400:	4a0b      	ldr	r2, [pc, #44]	; (8005430 <sensor_init+0x38>)
 8005402:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <sensor_init+0x3c>)
 8005404:	0011      	movs	r1, r2
 8005406:	0018      	movs	r0, r3
 8005408:	f7fe fc34 	bl	8003c74 <NEO6_Init>

    // NRF TRANSMITER
    nRF24_Init(&hspi1);
 800540c:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <sensor_init+0x40>)
 800540e:	0018      	movs	r0, r3
 8005410:	f7ff f960 	bl	80046d4 <nRF24_Init>
    nRF24_SetRXAddress(0, "Nad");
 8005414:	4b09      	ldr	r3, [pc, #36]	; (800543c <sensor_init+0x44>)
 8005416:	0019      	movs	r1, r3
 8005418:	2000      	movs	r0, #0
 800541a:	f7fe ffd1 	bl	80043c0 <nRF24_SetRXAddress>
    nRF24_SetTXAddress("Odb");
 800541e:	4b08      	ldr	r3, [pc, #32]	; (8005440 <sensor_init+0x48>)
 8005420:	0018      	movs	r0, r3
 8005422:	f7ff f813 	bl	800444c <nRF24_SetTXAddress>
    nRF24_TX_Mode();
 8005426:	f7fe fda5 	bl	8003f74 <nRF24_TX_Mode>
}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20000a9c 	.word	0x20000a9c
 8005434:	20000310 	.word	0x20000310
 8005438:	20000a00 	.word	0x20000a00
 800543c:	080103e4 	.word	0x080103e4
 8005440:	080103e8 	.word	0x080103e8

08005444 <get_humidity>:

float get_humidity() {    
 8005444:	b590      	push	{r4, r7, lr}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
    float humidity = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	607b      	str	r3, [r7, #4]

    AHT20_Read( NULL, &humidity );
 800544e:	1d3b      	adds	r3, r7, #4
 8005450:	0019      	movs	r1, r3
 8005452:	2000      	movs	r0, #0
 8005454:	f7fd ffdc 	bl	8003410 <AHT20_Read>

    if (INTERRUPT_COUNTER <= humidityCounter)
 8005458:	4b18      	ldr	r3, [pc, #96]	; (80054bc <get_humidity+0x78>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b27      	cmp	r3, #39	; 0x27
 800545e:	d906      	bls.n	800546e <get_humidity+0x2a>
    {
        humiditySum = 0;
 8005460:	4b17      	ldr	r3, [pc, #92]	; (80054c0 <get_humidity+0x7c>)
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
        humidityCounter = 0;
 8005466:	4b15      	ldr	r3, [pc, #84]	; (80054bc <get_humidity+0x78>)
 8005468:	2200      	movs	r2, #0
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	e020      	b.n	80054b0 <get_humidity+0x6c>
    }
    else
    {
        humiditySum += humidity;
 800546e:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <get_humidity+0x7c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	1c11      	adds	r1, r2, #0
 8005476:	1c18      	adds	r0, r3, #0
 8005478:	f7fb f9aa 	bl	80007d0 <__aeabi_fadd>
 800547c:	1c03      	adds	r3, r0, #0
 800547e:	1c1a      	adds	r2, r3, #0
 8005480:	4b0f      	ldr	r3, [pc, #60]	; (80054c0 <get_humidity+0x7c>)
 8005482:	601a      	str	r2, [r3, #0]
        averageHumidity = humiditySum / humidityCounter;
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <get_humidity+0x7c>)
 8005486:	681c      	ldr	r4, [r3, #0]
 8005488:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <get_humidity+0x78>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	0018      	movs	r0, r3
 800548e:	f7fb ff67 	bl	8001360 <__aeabi_i2f>
 8005492:	1c03      	adds	r3, r0, #0
 8005494:	1c19      	adds	r1, r3, #0
 8005496:	1c20      	adds	r0, r4, #0
 8005498:	f7fb fb3a 	bl	8000b10 <__aeabi_fdiv>
 800549c:	1c03      	adds	r3, r0, #0
 800549e:	1c1a      	adds	r2, r3, #0
 80054a0:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <get_humidity+0x80>)
 80054a2:	601a      	str	r2, [r3, #0]
        humidityCounter++;
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <get_humidity+0x78>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	4b03      	ldr	r3, [pc, #12]	; (80054bc <get_humidity+0x78>)
 80054ae:	701a      	strb	r2, [r3, #0]
    }

    return averageHumidity;
 80054b0:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <get_humidity+0x80>)
 80054b2:	681b      	ldr	r3, [r3, #0]
}
 80054b4:	1c18      	adds	r0, r3, #0
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b003      	add	sp, #12
 80054ba:	bd90      	pop	{r4, r7, pc}
 80054bc:	20000204 	.word	0x20000204
 80054c0:	20000214 	.word	0x20000214
 80054c4:	20000210 	.word	0x20000210

080054c8 <get_temperature>:

float get_temperature() {    
 80054c8:	b590      	push	{r4, r7, lr}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
    float temp = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	607b      	str	r3, [r7, #4]

    AHT20_Read( &temp, NULL );
 80054d2:	1d3b      	adds	r3, r7, #4
 80054d4:	2100      	movs	r1, #0
 80054d6:	0018      	movs	r0, r3
 80054d8:	f7fd ff9a 	bl	8003410 <AHT20_Read>

    if (INTERRUPT_COUNTER <= tempCounter)
 80054dc:	4b18      	ldr	r3, [pc, #96]	; (8005540 <get_temperature+0x78>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b27      	cmp	r3, #39	; 0x27
 80054e2:	d906      	bls.n	80054f2 <get_temperature+0x2a>
    {
        tempSum = 0;
 80054e4:	4b17      	ldr	r3, [pc, #92]	; (8005544 <get_temperature+0x7c>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]
        tempCounter = 0;
 80054ea:	4b15      	ldr	r3, [pc, #84]	; (8005540 <get_temperature+0x78>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	e020      	b.n	8005534 <get_temperature+0x6c>
    }
    else
    {           
        tempSum += temp;
 80054f2:	4b14      	ldr	r3, [pc, #80]	; (8005544 <get_temperature+0x7c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	1c11      	adds	r1, r2, #0
 80054fa:	1c18      	adds	r0, r3, #0
 80054fc:	f7fb f968 	bl	80007d0 <__aeabi_fadd>
 8005500:	1c03      	adds	r3, r0, #0
 8005502:	1c1a      	adds	r2, r3, #0
 8005504:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <get_temperature+0x7c>)
 8005506:	601a      	str	r2, [r3, #0]
        averageTemp = tempSum / tempCounter;
 8005508:	4b0e      	ldr	r3, [pc, #56]	; (8005544 <get_temperature+0x7c>)
 800550a:	681c      	ldr	r4, [r3, #0]
 800550c:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <get_temperature+0x78>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	0018      	movs	r0, r3
 8005512:	f7fb ff25 	bl	8001360 <__aeabi_i2f>
 8005516:	1c03      	adds	r3, r0, #0
 8005518:	1c19      	adds	r1, r3, #0
 800551a:	1c20      	adds	r0, r4, #0
 800551c:	f7fb faf8 	bl	8000b10 <__aeabi_fdiv>
 8005520:	1c03      	adds	r3, r0, #0
 8005522:	1c1a      	adds	r2, r3, #0
 8005524:	4b08      	ldr	r3, [pc, #32]	; (8005548 <get_temperature+0x80>)
 8005526:	601a      	str	r2, [r3, #0]
        tempCounter++;
 8005528:	4b05      	ldr	r3, [pc, #20]	; (8005540 <get_temperature+0x78>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	3301      	adds	r3, #1
 800552e:	b2da      	uxtb	r2, r3
 8005530:	4b03      	ldr	r3, [pc, #12]	; (8005540 <get_temperature+0x78>)
 8005532:	701a      	strb	r2, [r3, #0]
    }

    return averageTemp;
 8005534:	4b04      	ldr	r3, [pc, #16]	; (8005548 <get_temperature+0x80>)
 8005536:	681b      	ldr	r3, [r3, #0]
}
 8005538:	1c18      	adds	r0, r3, #0
 800553a:	46bd      	mov	sp, r7
 800553c:	b003      	add	sp, #12
 800553e:	bd90      	pop	{r4, r7, pc}
 8005540:	20000203 	.word	0x20000203
 8005544:	2000020c 	.word	0x2000020c
 8005548:	20000208 	.word	0x20000208

0800554c <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005552:	003b      	movs	r3, r7
 8005554:	0018      	movs	r0, r3
 8005556:	2308      	movs	r3, #8
 8005558:	001a      	movs	r2, r3
 800555a:	2100      	movs	r1, #0
 800555c:	f008 f854 	bl	800d608 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8005560:	4b2a      	ldr	r3, [pc, #168]	; (800560c <MX_ADC_Init+0xc0>)
 8005562:	4a2b      	ldr	r2, [pc, #172]	; (8005610 <MX_ADC_Init+0xc4>)
 8005564:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8005566:	4b29      	ldr	r3, [pc, #164]	; (800560c <MX_ADC_Init+0xc0>)
 8005568:	2200      	movs	r2, #0
 800556a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800556c:	4b27      	ldr	r3, [pc, #156]	; (800560c <MX_ADC_Init+0xc0>)
 800556e:	2280      	movs	r2, #128	; 0x80
 8005570:	05d2      	lsls	r2, r2, #23
 8005572:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005574:	4b25      	ldr	r3, [pc, #148]	; (800560c <MX_ADC_Init+0xc0>)
 8005576:	2200      	movs	r2, #0
 8005578:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800557a:	4b24      	ldr	r3, [pc, #144]	; (800560c <MX_ADC_Init+0xc0>)
 800557c:	2207      	movs	r2, #7
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8005580:	4b22      	ldr	r3, [pc, #136]	; (800560c <MX_ADC_Init+0xc0>)
 8005582:	2201      	movs	r2, #1
 8005584:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005586:	4b21      	ldr	r3, [pc, #132]	; (800560c <MX_ADC_Init+0xc0>)
 8005588:	2200      	movs	r2, #0
 800558a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800558c:	4b1f      	ldr	r3, [pc, #124]	; (800560c <MX_ADC_Init+0xc0>)
 800558e:	2220      	movs	r2, #32
 8005590:	2101      	movs	r1, #1
 8005592:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8005594:	4b1d      	ldr	r3, [pc, #116]	; (800560c <MX_ADC_Init+0xc0>)
 8005596:	2221      	movs	r2, #33	; 0x21
 8005598:	2100      	movs	r1, #0
 800559a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800559c:	4b1b      	ldr	r3, [pc, #108]	; (800560c <MX_ADC_Init+0xc0>)
 800559e:	2200      	movs	r2, #0
 80055a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80055a2:	4b1a      	ldr	r3, [pc, #104]	; (800560c <MX_ADC_Init+0xc0>)
 80055a4:	22c2      	movs	r2, #194	; 0xc2
 80055a6:	32ff      	adds	r2, #255	; 0xff
 80055a8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80055aa:	4b18      	ldr	r3, [pc, #96]	; (800560c <MX_ADC_Init+0xc0>)
 80055ac:	222c      	movs	r2, #44	; 0x2c
 80055ae:	2101      	movs	r1, #1
 80055b0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80055b2:	4b16      	ldr	r3, [pc, #88]	; (800560c <MX_ADC_Init+0xc0>)
 80055b4:	2204      	movs	r2, #4
 80055b6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80055b8:	4b14      	ldr	r3, [pc, #80]	; (800560c <MX_ADC_Init+0xc0>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80055be:	4b13      	ldr	r3, [pc, #76]	; (800560c <MX_ADC_Init+0xc0>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80055c4:	4b11      	ldr	r3, [pc, #68]	; (800560c <MX_ADC_Init+0xc0>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80055ca:	4b10      	ldr	r3, [pc, #64]	; (800560c <MX_ADC_Init+0xc0>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80055d0:	4b0e      	ldr	r3, [pc, #56]	; (800560c <MX_ADC_Init+0xc0>)
 80055d2:	0018      	movs	r0, r3
 80055d4:	f000 fdd4 	bl	8006180 <HAL_ADC_Init>
 80055d8:	1e03      	subs	r3, r0, #0
 80055da:	d001      	beq.n	80055e0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80055dc:	f000 fa98 	bl	8005b10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80055e0:	003b      	movs	r3, r7
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80055e6:	003b      	movs	r3, r7
 80055e8:	2280      	movs	r2, #128	; 0x80
 80055ea:	0152      	lsls	r2, r2, #5
 80055ec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80055ee:	003a      	movs	r2, r7
 80055f0:	4b06      	ldr	r3, [pc, #24]	; (800560c <MX_ADC_Init+0xc0>)
 80055f2:	0011      	movs	r1, r2
 80055f4:	0018      	movs	r0, r3
 80055f6:	f000 ffc9 	bl	800658c <HAL_ADC_ConfigChannel>
 80055fa:	1e03      	subs	r3, r0, #0
 80055fc:	d001      	beq.n	8005602 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80055fe:	f000 fa87 	bl	8005b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	46bd      	mov	sp, r7
 8005606:	b002      	add	sp, #8
 8005608:	bd80      	pop	{r7, pc}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	20000218 	.word	0x20000218
 8005610:	40012400 	.word	0x40012400

08005614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005614:	b590      	push	{r4, r7, lr}
 8005616:	b089      	sub	sp, #36	; 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800561c:	240c      	movs	r4, #12
 800561e:	193b      	adds	r3, r7, r4
 8005620:	0018      	movs	r0, r3
 8005622:	2314      	movs	r3, #20
 8005624:	001a      	movs	r2, r3
 8005626:	2100      	movs	r1, #0
 8005628:	f007 ffee 	bl	800d608 <memset>
  if(adcHandle->Instance==ADC1)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a2a      	ldr	r2, [pc, #168]	; (80056dc <HAL_ADC_MspInit+0xc8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d14d      	bne.n	80056d2 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005636:	4b2a      	ldr	r3, [pc, #168]	; (80056e0 <HAL_ADC_MspInit+0xcc>)
 8005638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563a:	4b29      	ldr	r3, [pc, #164]	; (80056e0 <HAL_ADC_MspInit+0xcc>)
 800563c:	2180      	movs	r1, #128	; 0x80
 800563e:	0089      	lsls	r1, r1, #2
 8005640:	430a      	orrs	r2, r1
 8005642:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005644:	4b26      	ldr	r3, [pc, #152]	; (80056e0 <HAL_ADC_MspInit+0xcc>)
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	4b25      	ldr	r3, [pc, #148]	; (80056e0 <HAL_ADC_MspInit+0xcc>)
 800564a:	2101      	movs	r1, #1
 800564c:	430a      	orrs	r2, r1
 800564e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005650:	4b23      	ldr	r3, [pc, #140]	; (80056e0 <HAL_ADC_MspInit+0xcc>)
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	2201      	movs	r2, #1
 8005656:	4013      	ands	r3, r2
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800565c:	193b      	adds	r3, r7, r4
 800565e:	2201      	movs	r2, #1
 8005660:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005662:	193b      	adds	r3, r7, r4
 8005664:	2203      	movs	r2, #3
 8005666:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005668:	193b      	adds	r3, r7, r4
 800566a:	2200      	movs	r2, #0
 800566c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800566e:	193a      	adds	r2, r7, r4
 8005670:	23a0      	movs	r3, #160	; 0xa0
 8005672:	05db      	lsls	r3, r3, #23
 8005674:	0011      	movs	r1, r2
 8005676:	0018      	movs	r0, r3
 8005678:	f001 fcd8 	bl	800702c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800567c:	4b19      	ldr	r3, [pc, #100]	; (80056e4 <HAL_ADC_MspInit+0xd0>)
 800567e:	4a1a      	ldr	r2, [pc, #104]	; (80056e8 <HAL_ADC_MspInit+0xd4>)
 8005680:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8005682:	4b18      	ldr	r3, [pc, #96]	; (80056e4 <HAL_ADC_MspInit+0xd0>)
 8005684:	2200      	movs	r2, #0
 8005686:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005688:	4b16      	ldr	r3, [pc, #88]	; (80056e4 <HAL_ADC_MspInit+0xd0>)
 800568a:	2200      	movs	r2, #0
 800568c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800568e:	4b15      	ldr	r3, [pc, #84]	; (80056e4 <HAL_ADC_MspInit+0xd0>)
 8005690:	2200      	movs	r2, #0
 8005692:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8005694:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <HAL_ADC_MspInit+0xd0>)
 8005696:	2280      	movs	r2, #128	; 0x80
 8005698:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800569a:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <HAL_ADC_MspInit+0xd0>)
 800569c:	2280      	movs	r2, #128	; 0x80
 800569e:	0092      	lsls	r2, r2, #2
 80056a0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80056a2:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <HAL_ADC_MspInit+0xd0>)
 80056a4:	2280      	movs	r2, #128	; 0x80
 80056a6:	0112      	lsls	r2, r2, #4
 80056a8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80056aa:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <HAL_ADC_MspInit+0xd0>)
 80056ac:	2220      	movs	r2, #32
 80056ae:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80056b0:	4b0c      	ldr	r3, [pc, #48]	; (80056e4 <HAL_ADC_MspInit+0xd0>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80056b6:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <HAL_ADC_MspInit+0xd0>)
 80056b8:	0018      	movs	r0, r3
 80056ba:	f001 fa75 	bl	8006ba8 <HAL_DMA_Init>
 80056be:	1e03      	subs	r3, r0, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80056c2:	f000 fa25 	bl	8005b10 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a06      	ldr	r2, [pc, #24]	; (80056e4 <HAL_ADC_MspInit+0xd0>)
 80056ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <HAL_ADC_MspInit+0xd0>)
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b009      	add	sp, #36	; 0x24
 80056d8:	bd90      	pop	{r4, r7, pc}
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	40012400 	.word	0x40012400
 80056e0:	40021000 	.word	0x40021000
 80056e4:	20000274 	.word	0x20000274
 80056e8:	40020008 	.word	0x40020008

080056ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <MX_DMA_Init+0x38>)
 80056f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056f6:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <MX_DMA_Init+0x38>)
 80056f8:	2101      	movs	r1, #1
 80056fa:	430a      	orrs	r2, r1
 80056fc:	631a      	str	r2, [r3, #48]	; 0x30
 80056fe:	4b09      	ldr	r3, [pc, #36]	; (8005724 <MX_DMA_Init+0x38>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	2201      	movs	r2, #1
 8005704:	4013      	ands	r3, r2
 8005706:	607b      	str	r3, [r7, #4]
 8005708:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800570a:	2200      	movs	r2, #0
 800570c:	2100      	movs	r1, #0
 800570e:	2009      	movs	r0, #9
 8005710:	f001 fa18 	bl	8006b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005714:	2009      	movs	r0, #9
 8005716:	f001 fa2a 	bl	8006b6e <HAL_NVIC_EnableIRQ>

}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	46bd      	mov	sp, r7
 800571e:	b002      	add	sp, #8
 8005720:	bd80      	pop	{r7, pc}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	40021000 	.word	0x40021000

08005728 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005728:	b590      	push	{r4, r7, lr}
 800572a:	b089      	sub	sp, #36	; 0x24
 800572c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800572e:	240c      	movs	r4, #12
 8005730:	193b      	adds	r3, r7, r4
 8005732:	0018      	movs	r0, r3
 8005734:	2314      	movs	r3, #20
 8005736:	001a      	movs	r2, r3
 8005738:	2100      	movs	r1, #0
 800573a:	f007 ff65 	bl	800d608 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800573e:	4b3c      	ldr	r3, [pc, #240]	; (8005830 <MX_GPIO_Init+0x108>)
 8005740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005742:	4b3b      	ldr	r3, [pc, #236]	; (8005830 <MX_GPIO_Init+0x108>)
 8005744:	2101      	movs	r1, #1
 8005746:	430a      	orrs	r2, r1
 8005748:	62da      	str	r2, [r3, #44]	; 0x2c
 800574a:	4b39      	ldr	r3, [pc, #228]	; (8005830 <MX_GPIO_Init+0x108>)
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	2201      	movs	r2, #1
 8005750:	4013      	ands	r3, r2
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005756:	4b36      	ldr	r3, [pc, #216]	; (8005830 <MX_GPIO_Init+0x108>)
 8005758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575a:	4b35      	ldr	r3, [pc, #212]	; (8005830 <MX_GPIO_Init+0x108>)
 800575c:	2102      	movs	r1, #2
 800575e:	430a      	orrs	r2, r1
 8005760:	62da      	str	r2, [r3, #44]	; 0x2c
 8005762:	4b33      	ldr	r3, [pc, #204]	; (8005830 <MX_GPIO_Init+0x108>)
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	2202      	movs	r2, #2
 8005768:	4013      	ands	r3, r2
 800576a:	607b      	str	r3, [r7, #4]
 800576c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF24_CSN_Pin|USER_LED_Pin|I2C_EN_Pin|GPS_EN_Pin
 800576e:	4931      	ldr	r1, [pc, #196]	; (8005834 <MX_GPIO_Init+0x10c>)
 8005770:	23a0      	movs	r3, #160	; 0xa0
 8005772:	05db      	lsls	r3, r3, #23
 8005774:	2200      	movs	r2, #0
 8005776:	0018      	movs	r0, r3
 8005778:	f001 fdf3 	bl	8007362 <HAL_GPIO_WritePin>
                          |ADC_EN_Pin|HEATER_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 800577c:	4b2e      	ldr	r3, [pc, #184]	; (8005838 <MX_GPIO_Init+0x110>)
 800577e:	2200      	movs	r2, #0
 8005780:	2110      	movs	r1, #16
 8005782:	0018      	movs	r0, r3
 8005784:	f001 fded 	bl	8007362 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|USER_LED_Pin|I2C_EN_Pin|GPS_EN_Pin
 8005788:	193b      	adds	r3, r7, r4
 800578a:	4a2a      	ldr	r2, [pc, #168]	; (8005834 <MX_GPIO_Init+0x10c>)
 800578c:	601a      	str	r2, [r3, #0]
                          |ADC_EN_Pin|HEATER_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800578e:	193b      	adds	r3, r7, r4
 8005790:	2201      	movs	r2, #1
 8005792:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005794:	193b      	adds	r3, r7, r4
 8005796:	2200      	movs	r2, #0
 8005798:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800579a:	193b      	adds	r3, r7, r4
 800579c:	2200      	movs	r2, #0
 800579e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057a0:	193a      	adds	r2, r7, r4
 80057a2:	23a0      	movs	r3, #160	; 0xa0
 80057a4:	05db      	lsls	r3, r3, #23
 80057a6:	0011      	movs	r1, r2
 80057a8:	0018      	movs	r0, r3
 80057aa:	f001 fc3f 	bl	800702c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80057ae:	193b      	adds	r3, r7, r4
 80057b0:	2280      	movs	r2, #128	; 0x80
 80057b2:	0092      	lsls	r2, r2, #2
 80057b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057b6:	193b      	adds	r3, r7, r4
 80057b8:	2200      	movs	r2, #0
 80057ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057bc:	193b      	adds	r3, r7, r4
 80057be:	2200      	movs	r2, #0
 80057c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80057c2:	193a      	adds	r2, r7, r4
 80057c4:	23a0      	movs	r3, #160	; 0xa0
 80057c6:	05db      	lsls	r3, r3, #23
 80057c8:	0011      	movs	r1, r2
 80057ca:	0018      	movs	r0, r3
 80057cc:	f001 fc2e 	bl	800702c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 80057d0:	193b      	adds	r3, r7, r4
 80057d2:	2210      	movs	r2, #16
 80057d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057d6:	193b      	adds	r3, r7, r4
 80057d8:	2201      	movs	r2, #1
 80057da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057dc:	193b      	adds	r3, r7, r4
 80057de:	2200      	movs	r2, #0
 80057e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057e2:	193b      	adds	r3, r7, r4
 80057e4:	2200      	movs	r2, #0
 80057e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 80057e8:	193b      	adds	r3, r7, r4
 80057ea:	4a13      	ldr	r2, [pc, #76]	; (8005838 <MX_GPIO_Init+0x110>)
 80057ec:	0019      	movs	r1, r3
 80057ee:	0010      	movs	r0, r2
 80057f0:	f001 fc1c 	bl	800702c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 80057f4:	0021      	movs	r1, r4
 80057f6:	187b      	adds	r3, r7, r1
 80057f8:	2220      	movs	r2, #32
 80057fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80057fc:	187b      	adds	r3, r7, r1
 80057fe:	2288      	movs	r2, #136	; 0x88
 8005800:	0352      	lsls	r2, r2, #13
 8005802:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005804:	187b      	adds	r3, r7, r1
 8005806:	2200      	movs	r2, #0
 8005808:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 800580a:	187b      	adds	r3, r7, r1
 800580c:	4a0a      	ldr	r2, [pc, #40]	; (8005838 <MX_GPIO_Init+0x110>)
 800580e:	0019      	movs	r1, r3
 8005810:	0010      	movs	r0, r2
 8005812:	f001 fc0b 	bl	800702c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005816:	2200      	movs	r2, #0
 8005818:	2100      	movs	r1, #0
 800581a:	2007      	movs	r0, #7
 800581c:	f001 f992 	bl	8006b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8005820:	2007      	movs	r0, #7
 8005822:	f001 f9a4 	bl	8006b6e <HAL_NVIC_EnableIRQ>

}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	46bd      	mov	sp, r7
 800582a:	b009      	add	sp, #36	; 0x24
 800582c:	bd90      	pop	{r4, r7, pc}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	40021000 	.word	0x40021000
 8005834:	00009d02 	.word	0x00009d02
 8005838:	50000400 	.word	0x50000400

0800583c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005840:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <MX_I2C1_Init+0x78>)
 8005842:	4a1d      	ldr	r2, [pc, #116]	; (80058b8 <MX_I2C1_Init+0x7c>)
 8005844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000103;
 8005846:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <MX_I2C1_Init+0x78>)
 8005848:	2204      	movs	r2, #4
 800584a:	32ff      	adds	r2, #255	; 0xff
 800584c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800584e:	4b19      	ldr	r3, [pc, #100]	; (80058b4 <MX_I2C1_Init+0x78>)
 8005850:	2200      	movs	r2, #0
 8005852:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005854:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <MX_I2C1_Init+0x78>)
 8005856:	2201      	movs	r2, #1
 8005858:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800585a:	4b16      	ldr	r3, [pc, #88]	; (80058b4 <MX_I2C1_Init+0x78>)
 800585c:	2200      	movs	r2, #0
 800585e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005860:	4b14      	ldr	r3, [pc, #80]	; (80058b4 <MX_I2C1_Init+0x78>)
 8005862:	2200      	movs	r2, #0
 8005864:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005866:	4b13      	ldr	r3, [pc, #76]	; (80058b4 <MX_I2C1_Init+0x78>)
 8005868:	2200      	movs	r2, #0
 800586a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800586c:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <MX_I2C1_Init+0x78>)
 800586e:	2200      	movs	r2, #0
 8005870:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005872:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <MX_I2C1_Init+0x78>)
 8005874:	2200      	movs	r2, #0
 8005876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005878:	4b0e      	ldr	r3, [pc, #56]	; (80058b4 <MX_I2C1_Init+0x78>)
 800587a:	0018      	movs	r0, r3
 800587c:	f001 fdd0 	bl	8007420 <HAL_I2C_Init>
 8005880:	1e03      	subs	r3, r0, #0
 8005882:	d001      	beq.n	8005888 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005884:	f000 f944 	bl	8005b10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <MX_I2C1_Init+0x78>)
 800588a:	2100      	movs	r1, #0
 800588c:	0018      	movs	r0, r3
 800588e:	f002 fb23 	bl	8007ed8 <HAL_I2CEx_ConfigAnalogFilter>
 8005892:	1e03      	subs	r3, r0, #0
 8005894:	d001      	beq.n	800589a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8005896:	f000 f93b 	bl	8005b10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <MX_I2C1_Init+0x78>)
 800589c:	2100      	movs	r1, #0
 800589e:	0018      	movs	r0, r3
 80058a0:	f002 fb66 	bl	8007f70 <HAL_I2CEx_ConfigDigitalFilter>
 80058a4:	1e03      	subs	r3, r0, #0
 80058a6:	d001      	beq.n	80058ac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80058a8:	f000 f932 	bl	8005b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80058ac:	46c0      	nop			; (mov r8, r8)
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	200002bc 	.word	0x200002bc
 80058b8:	40005400 	.word	0x40005400

080058bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b089      	sub	sp, #36	; 0x24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058c4:	240c      	movs	r4, #12
 80058c6:	193b      	adds	r3, r7, r4
 80058c8:	0018      	movs	r0, r3
 80058ca:	2314      	movs	r3, #20
 80058cc:	001a      	movs	r2, r3
 80058ce:	2100      	movs	r1, #0
 80058d0:	f007 fe9a 	bl	800d608 <memset>
  if(i2cHandle->Instance==I2C1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a17      	ldr	r2, [pc, #92]	; (8005938 <HAL_I2C_MspInit+0x7c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d128      	bne.n	8005930 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058de:	4b17      	ldr	r3, [pc, #92]	; (800593c <HAL_I2C_MspInit+0x80>)
 80058e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e2:	4b16      	ldr	r3, [pc, #88]	; (800593c <HAL_I2C_MspInit+0x80>)
 80058e4:	2102      	movs	r1, #2
 80058e6:	430a      	orrs	r2, r1
 80058e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80058ea:	4b14      	ldr	r3, [pc, #80]	; (800593c <HAL_I2C_MspInit+0x80>)
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	2202      	movs	r2, #2
 80058f0:	4013      	ands	r3, r2
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80058f6:	0021      	movs	r1, r4
 80058f8:	187b      	adds	r3, r7, r1
 80058fa:	22c0      	movs	r2, #192	; 0xc0
 80058fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058fe:	187b      	adds	r3, r7, r1
 8005900:	2212      	movs	r2, #18
 8005902:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005904:	187b      	adds	r3, r7, r1
 8005906:	2200      	movs	r2, #0
 8005908:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800590a:	187b      	adds	r3, r7, r1
 800590c:	2203      	movs	r2, #3
 800590e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8005910:	187b      	adds	r3, r7, r1
 8005912:	2201      	movs	r2, #1
 8005914:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005916:	187b      	adds	r3, r7, r1
 8005918:	4a09      	ldr	r2, [pc, #36]	; (8005940 <HAL_I2C_MspInit+0x84>)
 800591a:	0019      	movs	r1, r3
 800591c:	0010      	movs	r0, r2
 800591e:	f001 fb85 	bl	800702c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <HAL_I2C_MspInit+0x80>)
 8005924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <HAL_I2C_MspInit+0x80>)
 8005928:	2180      	movs	r1, #128	; 0x80
 800592a:	0389      	lsls	r1, r1, #14
 800592c:	430a      	orrs	r2, r1
 800592e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005930:	46c0      	nop			; (mov r8, r8)
 8005932:	46bd      	mov	sp, r7
 8005934:	b009      	add	sp, #36	; 0x24
 8005936:	bd90      	pop	{r4, r7, pc}
 8005938:	40005400 	.word	0x40005400
 800593c:	40021000 	.word	0x40021000
 8005940:	50000400 	.word	0x50000400

08005944 <HAL_UART_RxCpltCallback>:
volatile uint32_t HeartBeatValue;
volatile uint32_t HeartBeatArray[255] = {0};
volatile uint8_t HeartBeatIndex = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  if(huart == GpsState.neo6_huart)
 800594c:	4b06      	ldr	r3, [pc, #24]	; (8005968 <HAL_UART_RxCpltCallback+0x24>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	429a      	cmp	r2, r3
 8005954:	d103      	bne.n	800595e <HAL_UART_RxCpltCallback+0x1a>
  {
    NEO6_ReceiveUartChar(&GpsState);
 8005956:	4b04      	ldr	r3, [pc, #16]	; (8005968 <HAL_UART_RxCpltCallback+0x24>)
 8005958:	0018      	movs	r0, r3
 800595a:	f7fd fe07 	bl	800356c <NEO6_ReceiveUartChar>
  }
}
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	46bd      	mov	sp, r7
 8005962:	b002      	add	sp, #8
 8005964:	bd80      	pop	{r7, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	20000310 	.word	0x20000310

0800596c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  if (htim == &htim6)
  {


  }
}
 8005974:	46c0      	nop			; (mov r8, r8)
 8005976:	46bd      	mov	sp, r7
 8005978:	b002      	add	sp, #8
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
	if(HeartBeatIndex > 254)
 8005984:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <HAL_ADC_ConvCpltCallback+0x40>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2bff      	cmp	r3, #255	; 0xff
 800598c:	d102      	bne.n	8005994 <HAL_ADC_ConvCpltCallback+0x18>
	{
		HeartBeatIndex = 0;
 800598e:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <HAL_ADC_ConvCpltCallback+0x40>)
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]
	}
	HeartBeatArray[HeartBeatIndex] = HeartBeatValue;
 8005994:	4b09      	ldr	r3, [pc, #36]	; (80059bc <HAL_ADC_ConvCpltCallback+0x40>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	001a      	movs	r2, r3
 800599c:	4b08      	ldr	r3, [pc, #32]	; (80059c0 <HAL_ADC_ConvCpltCallback+0x44>)
 800599e:	6819      	ldr	r1, [r3, #0]
 80059a0:	4b08      	ldr	r3, [pc, #32]	; (80059c4 <HAL_ADC_ConvCpltCallback+0x48>)
 80059a2:	0092      	lsls	r2, r2, #2
 80059a4:	50d1      	str	r1, [r2, r3]
	HeartBeatIndex++;
 80059a6:	4b05      	ldr	r3, [pc, #20]	; (80059bc <HAL_ADC_ConvCpltCallback+0x40>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	3301      	adds	r3, #1
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	4b02      	ldr	r3, [pc, #8]	; (80059bc <HAL_ADC_ConvCpltCallback+0x40>)
 80059b2:	701a      	strb	r2, [r3, #0]
}
 80059b4:	46c0      	nop			; (mov r8, r8)
 80059b6:	46bd      	mov	sp, r7
 80059b8:	b002      	add	sp, #8
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	200009fc 	.word	0x200009fc
 80059c0:	200005fc 	.word	0x200005fc
 80059c4:	20000600 	.word	0x20000600

080059c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80059ce:	f000 fb43 	bl	8006058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80059d2:	f000 f829 	bl	8005a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80059d6:	f7ff fea7 	bl	8005728 <MX_GPIO_Init>
  MX_DMA_Init();
 80059da:	f7ff fe87 	bl	80056ec <MX_DMA_Init>
  MX_ADC_Init();
 80059de:	f7ff fdb5 	bl	800554c <MX_ADC_Init>
  MX_I2C1_Init();
 80059e2:	f7ff ff2b 	bl	800583c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80059e6:	f000 fa8f 	bl	8005f08 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 80059ea:	f000 f897 	bl	8005b1c <MX_SPI1_Init>
  MX_TIM6_Init();
 80059ee:	f000 fa2d 	bl	8005e4c <MX_TIM6_Init>
  /* USER CODE BEGIN WHILE */

//  AHT20_Init();
//  NEO6_Init(&GpsState, &hlpuart1);

  HAL_TIM_Base_Start_IT(&htim6);
 80059f2:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <main+0x54>)
 80059f4:	0018      	movs	r0, r3
 80059f6:	f004 f85b 	bl	8009ab0 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80059fa:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <main+0x58>)
 80059fc:	2100      	movs	r1, #0
 80059fe:	0018      	movs	r0, r3
 8005a00:	f000 ff56 	bl	80068b0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, &HeartBeatValue, 2);
 8005a04:	4907      	ldr	r1, [pc, #28]	; (8005a24 <main+0x5c>)
 8005a06:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <main+0x58>)
 8005a08:	2202      	movs	r2, #2
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f000 fd2c 	bl	8006468 <HAL_ADC_Start_DMA>

//  uint32_t Timer = HAL_GetTick();
  int pulse = 0;
 8005a10:	2300      	movs	r3, #0
 8005a12:	607b      	str	r3, [r7, #4]
//	MessageLength = sprintf(Message, "pulse = %d\n\r", pulse);
//	HAL_UART_Transmit_IT(&hlpuart1, Message, MessageLength);
//
//	HAL_Delay(100);

	 pv_run();
 8005a14:	f7ff f9f2 	bl	8004dfc <pv_run>
 8005a18:	e7fc      	b.n	8005a14 <main+0x4c>
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	20000a5c 	.word	0x20000a5c
 8005a20:	20000218 	.word	0x20000218
 8005a24:	200005fc 	.word	0x200005fc

08005a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a28:	b590      	push	{r4, r7, lr}
 8005a2a:	b09b      	sub	sp, #108	; 0x6c
 8005a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a2e:	2434      	movs	r4, #52	; 0x34
 8005a30:	193b      	adds	r3, r7, r4
 8005a32:	0018      	movs	r0, r3
 8005a34:	2334      	movs	r3, #52	; 0x34
 8005a36:	001a      	movs	r2, r3
 8005a38:	2100      	movs	r1, #0
 8005a3a:	f007 fde5 	bl	800d608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a3e:	2320      	movs	r3, #32
 8005a40:	18fb      	adds	r3, r7, r3
 8005a42:	0018      	movs	r0, r3
 8005a44:	2314      	movs	r3, #20
 8005a46:	001a      	movs	r2, r3
 8005a48:	2100      	movs	r1, #0
 8005a4a:	f007 fddd 	bl	800d608 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a4e:	003b      	movs	r3, r7
 8005a50:	0018      	movs	r0, r3
 8005a52:	2320      	movs	r3, #32
 8005a54:	001a      	movs	r2, r3
 8005a56:	2100      	movs	r1, #0
 8005a58:	f007 fdd6 	bl	800d608 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a5c:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <SystemClock_Config+0xe0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a2a      	ldr	r2, [pc, #168]	; (8005b0c <SystemClock_Config+0xe4>)
 8005a62:	401a      	ands	r2, r3
 8005a64:	4b28      	ldr	r3, [pc, #160]	; (8005b08 <SystemClock_Config+0xe0>)
 8005a66:	2180      	movs	r1, #128	; 0x80
 8005a68:	0109      	lsls	r1, r1, #4
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005a6e:	0021      	movs	r1, r4
 8005a70:	187b      	adds	r3, r7, r1
 8005a72:	2202      	movs	r2, #2
 8005a74:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a76:	187b      	adds	r3, r7, r1
 8005a78:	2201      	movs	r2, #1
 8005a7a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a7c:	187b      	adds	r3, r7, r1
 8005a7e:	2210      	movs	r2, #16
 8005a80:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a82:	187b      	adds	r3, r7, r1
 8005a84:	2202      	movs	r2, #2
 8005a86:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005a88:	187b      	adds	r3, r7, r1
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8005a8e:	187b      	adds	r3, r7, r1
 8005a90:	2200      	movs	r2, #0
 8005a92:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8005a94:	187b      	adds	r3, r7, r1
 8005a96:	2280      	movs	r2, #128	; 0x80
 8005a98:	0412      	lsls	r2, r2, #16
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a9c:	187b      	adds	r3, r7, r1
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f002 fab2 	bl	8008008 <HAL_RCC_OscConfig>
 8005aa4:	1e03      	subs	r3, r0, #0
 8005aa6:	d001      	beq.n	8005aac <SystemClock_Config+0x84>
  {
    Error_Handler();
 8005aa8:	f000 f832 	bl	8005b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005aac:	2120      	movs	r1, #32
 8005aae:	187b      	adds	r3, r7, r1
 8005ab0:	220f      	movs	r2, #15
 8005ab2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ab4:	187b      	adds	r3, r7, r1
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8005aba:	187b      	adds	r3, r7, r1
 8005abc:	22b0      	movs	r2, #176	; 0xb0
 8005abe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005ac0:	187b      	adds	r3, r7, r1
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	2200      	movs	r2, #0
 8005aca:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005acc:	187b      	adds	r3, r7, r1
 8005ace:	2100      	movs	r1, #0
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f002 fe15 	bl	8008700 <HAL_RCC_ClockConfig>
 8005ad6:	1e03      	subs	r3, r0, #0
 8005ad8:	d001      	beq.n	8005ade <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8005ada:	f000 f819 	bl	8005b10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8005ade:	003b      	movs	r3, r7
 8005ae0:	220c      	movs	r2, #12
 8005ae2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005ae4:	003b      	movs	r3, r7
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005aea:	003b      	movs	r3, r7
 8005aec:	2200      	movs	r2, #0
 8005aee:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005af0:	003b      	movs	r3, r7
 8005af2:	0018      	movs	r0, r3
 8005af4:	f003 f828 	bl	8008b48 <HAL_RCCEx_PeriphCLKConfig>
 8005af8:	1e03      	subs	r3, r0, #0
 8005afa:	d001      	beq.n	8005b00 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005afc:	f000 f808 	bl	8005b10 <Error_Handler>
  }
}
 8005b00:	46c0      	nop			; (mov r8, r8)
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b01b      	add	sp, #108	; 0x6c
 8005b06:	bd90      	pop	{r4, r7, pc}
 8005b08:	40007000 	.word	0x40007000
 8005b0c:	ffffe7ff 	.word	0xffffe7ff

08005b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b14:	b672      	cpsid	i
}
 8005b16:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b18:	e7fe      	b.n	8005b18 <Error_Handler+0x8>
	...

08005b1c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005b20:	4b18      	ldr	r3, [pc, #96]	; (8005b84 <MX_SPI1_Init+0x68>)
 8005b22:	4a19      	ldr	r2, [pc, #100]	; (8005b88 <MX_SPI1_Init+0x6c>)
 8005b24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005b26:	4b17      	ldr	r3, [pc, #92]	; (8005b84 <MX_SPI1_Init+0x68>)
 8005b28:	2282      	movs	r2, #130	; 0x82
 8005b2a:	0052      	lsls	r2, r2, #1
 8005b2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <MX_SPI1_Init+0x68>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b34:	4b13      	ldr	r3, [pc, #76]	; (8005b84 <MX_SPI1_Init+0x68>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b3a:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <MX_SPI1_Init+0x68>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005b40:	4b10      	ldr	r3, [pc, #64]	; (8005b84 <MX_SPI1_Init+0x68>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005b46:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <MX_SPI1_Init+0x68>)
 8005b48:	2280      	movs	r2, #128	; 0x80
 8005b4a:	0092      	lsls	r2, r2, #2
 8005b4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <MX_SPI1_Init+0x68>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b54:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <MX_SPI1_Init+0x68>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <MX_SPI1_Init+0x68>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b60:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <MX_SPI1_Init+0x68>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005b66:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <MX_SPI1_Init+0x68>)
 8005b68:	2207      	movs	r2, #7
 8005b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005b6c:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <MX_SPI1_Init+0x68>)
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f003 f934 	bl	8008ddc <HAL_SPI_Init>
 8005b74:	1e03      	subs	r3, r0, #0
 8005b76:	d001      	beq.n	8005b7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005b78:	f7ff ffca 	bl	8005b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005b7c:	46c0      	nop			; (mov r8, r8)
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	20000a00 	.word	0x20000a00
 8005b88:	40013000 	.word	0x40013000

08005b8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005b8c:	b590      	push	{r4, r7, lr}
 8005b8e:	b089      	sub	sp, #36	; 0x24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b94:	240c      	movs	r4, #12
 8005b96:	193b      	adds	r3, r7, r4
 8005b98:	0018      	movs	r0, r3
 8005b9a:	2314      	movs	r3, #20
 8005b9c:	001a      	movs	r2, r3
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	f007 fd32 	bl	800d608 <memset>
  if(spiHandle->Instance==SPI1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <HAL_SPI_MspInit+0x80>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d129      	bne.n	8005c02 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005bae:	4b18      	ldr	r3, [pc, #96]	; (8005c10 <HAL_SPI_MspInit+0x84>)
 8005bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bb2:	4b17      	ldr	r3, [pc, #92]	; (8005c10 <HAL_SPI_MspInit+0x84>)
 8005bb4:	2180      	movs	r1, #128	; 0x80
 8005bb6:	0149      	lsls	r1, r1, #5
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bbc:	4b14      	ldr	r3, [pc, #80]	; (8005c10 <HAL_SPI_MspInit+0x84>)
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <HAL_SPI_MspInit+0x84>)
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bc8:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <HAL_SPI_MspInit+0x84>)
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	2201      	movs	r2, #1
 8005bce:	4013      	ands	r3, r2
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005bd4:	0021      	movs	r1, r4
 8005bd6:	187b      	adds	r3, r7, r1
 8005bd8:	22e0      	movs	r2, #224	; 0xe0
 8005bda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bdc:	187b      	adds	r3, r7, r1
 8005bde:	2202      	movs	r2, #2
 8005be0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be2:	187b      	adds	r3, r7, r1
 8005be4:	2200      	movs	r2, #0
 8005be6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be8:	187b      	adds	r3, r7, r1
 8005bea:	2203      	movs	r2, #3
 8005bec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005bee:	187b      	adds	r3, r7, r1
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bf4:	187a      	adds	r2, r7, r1
 8005bf6:	23a0      	movs	r3, #160	; 0xa0
 8005bf8:	05db      	lsls	r3, r3, #23
 8005bfa:	0011      	movs	r1, r2
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f001 fa15 	bl	800702c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	46bd      	mov	sp, r7
 8005c06:	b009      	add	sp, #36	; 0x24
 8005c08:	bd90      	pop	{r4, r7, pc}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	40013000 	.word	0x40013000
 8005c10:	40021000 	.word	0x40021000

08005c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c18:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <HAL_MspInit+0x24>)
 8005c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1c:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <HAL_MspInit+0x24>)
 8005c1e:	2101      	movs	r1, #1
 8005c20:	430a      	orrs	r2, r1
 8005c22:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c24:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <HAL_MspInit+0x24>)
 8005c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c28:	4b03      	ldr	r3, [pc, #12]	; (8005c38 <HAL_MspInit+0x24>)
 8005c2a:	2180      	movs	r1, #128	; 0x80
 8005c2c:	0549      	lsls	r1, r1, #21
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40021000 	.word	0x40021000

08005c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005c40:	e7fe      	b.n	8005c40 <NMI_Handler+0x4>

08005c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c46:	e7fe      	b.n	8005c46 <HardFault_Handler+0x4>

08005c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005c4c:	46c0      	nop			; (mov r8, r8)
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c60:	f000 fa4e 	bl	8006100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c64:	46c0      	nop			; (mov r8, r8)
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8005c6e:	2020      	movs	r0, #32
 8005c70:	f001 fbb0 	bl	80073d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005c74:	46c0      	nop			; (mov r8, r8)
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
	...

08005c7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8005c80:	4b03      	ldr	r3, [pc, #12]	; (8005c90 <DMA1_Channel1_IRQHandler+0x14>)
 8005c82:	0018      	movs	r0, r3
 8005c84:	f001 f8f5 	bl	8006e72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005c88:	46c0      	nop			; (mov r8, r8)
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	20000274 	.word	0x20000274

08005c94 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005c98:	4b03      	ldr	r3, [pc, #12]	; (8005ca8 <TIM6_IRQHandler+0x14>)
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f003 ff5a 	bl	8009b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8005ca0:	46c0      	nop			; (mov r8, r8)
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	20000a5c 	.word	0x20000a5c

08005cac <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005cb0:	4b03      	ldr	r3, [pc, #12]	; (8005cc0 <LPUART1_IRQHandler+0x14>)
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	f004 fa64 	bl	800a180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8005cb8:	46c0      	nop			; (mov r8, r8)
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	20000a9c 	.word	0x20000a9c

08005cc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  return 1;
 8005cc8:	2301      	movs	r3, #1
}
 8005cca:	0018      	movs	r0, r3
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <_kill>:

int _kill(int pid, int sig)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005cda:	f007 fd1b 	bl	800d714 <__errno>
 8005cde:	0003      	movs	r3, r0
 8005ce0:	2216      	movs	r2, #22
 8005ce2:	601a      	str	r2, [r3, #0]
  return -1;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	425b      	negs	r3, r3
}
 8005ce8:	0018      	movs	r0, r3
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b002      	add	sp, #8
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <_exit>:

void _exit (int status)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	425a      	negs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	0011      	movs	r1, r2
 8005d00:	0018      	movs	r0, r3
 8005d02:	f7ff ffe5 	bl	8005cd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005d06:	e7fe      	b.n	8005d06 <_exit+0x16>

08005d08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d14:	2300      	movs	r3, #0
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	e00a      	b.n	8005d30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005d1a:	e000      	b.n	8005d1e <_read+0x16>
 8005d1c:	bf00      	nop
 8005d1e:	0001      	movs	r1, r0
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	60ba      	str	r2, [r7, #8]
 8005d26:	b2ca      	uxtb	r2, r1
 8005d28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	dbf0      	blt.n	8005d1a <_read+0x12>
  }

  return len;
 8005d38:	687b      	ldr	r3, [r7, #4]
}
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	b006      	add	sp, #24
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b086      	sub	sp, #24
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	e009      	b.n	8005d68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	60ba      	str	r2, [r7, #8]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	e000      	b.n	8005d62 <_write+0x20>
 8005d60:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	3301      	adds	r3, #1
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	dbf1      	blt.n	8005d54 <_write+0x12>
  }
  return len;
 8005d70:	687b      	ldr	r3, [r7, #4]
}
 8005d72:	0018      	movs	r0, r3
 8005d74:	46bd      	mov	sp, r7
 8005d76:	b006      	add	sp, #24
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <_close>:

int _close(int file)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005d82:	2301      	movs	r3, #1
 8005d84:	425b      	negs	r3, r3
}
 8005d86:	0018      	movs	r0, r3
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	b002      	add	sp, #8
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2280      	movs	r2, #128	; 0x80
 8005d9c:	0192      	lsls	r2, r2, #6
 8005d9e:	605a      	str	r2, [r3, #4]
  return 0;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	0018      	movs	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b002      	add	sp, #8
 8005da8:	bd80      	pop	{r7, pc}

08005daa <_isatty>:

int _isatty(int file)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005db2:	2301      	movs	r3, #1
}
 8005db4:	0018      	movs	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b002      	add	sp, #8
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	0018      	movs	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	b004      	add	sp, #16
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ddc:	4a14      	ldr	r2, [pc, #80]	; (8005e30 <_sbrk+0x5c>)
 8005dde:	4b15      	ldr	r3, [pc, #84]	; (8005e34 <_sbrk+0x60>)
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005de8:	4b13      	ldr	r3, [pc, #76]	; (8005e38 <_sbrk+0x64>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005df0:	4b11      	ldr	r3, [pc, #68]	; (8005e38 <_sbrk+0x64>)
 8005df2:	4a12      	ldr	r2, [pc, #72]	; (8005e3c <_sbrk+0x68>)
 8005df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005df6:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <_sbrk+0x64>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	18d3      	adds	r3, r2, r3
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d207      	bcs.n	8005e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e04:	f007 fc86 	bl	800d714 <__errno>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	220c      	movs	r2, #12
 8005e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	425b      	negs	r3, r3
 8005e12:	e009      	b.n	8005e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e14:	4b08      	ldr	r3, [pc, #32]	; (8005e38 <_sbrk+0x64>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e1a:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <_sbrk+0x64>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	18d2      	adds	r2, r2, r3
 8005e22:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <_sbrk+0x64>)
 8005e24:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005e26:	68fb      	ldr	r3, [r7, #12]
}
 8005e28:	0018      	movs	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b006      	add	sp, #24
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20005000 	.word	0x20005000
 8005e34:	00000400 	.word	0x00000400
 8005e38:	20000a58 	.word	0x20000a58
 8005e3c:	20000c78 	.word	0x20000c78

08005e40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e44:	46c0      	nop			; (mov r8, r8)
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e52:	003b      	movs	r3, r7
 8005e54:	0018      	movs	r0, r3
 8005e56:	2308      	movs	r3, #8
 8005e58:	001a      	movs	r2, r3
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	f007 fbd4 	bl	800d608 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005e60:	4b15      	ldr	r3, [pc, #84]	; (8005eb8 <MX_TIM6_Init+0x6c>)
 8005e62:	4a16      	ldr	r2, [pc, #88]	; (8005ebc <MX_TIM6_Init+0x70>)
 8005e64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <MX_TIM6_Init+0x6c>)
 8005e68:	4a15      	ldr	r2, [pc, #84]	; (8005ec0 <MX_TIM6_Init+0x74>)
 8005e6a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e6c:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <MX_TIM6_Init+0x6c>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8005e72:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <MX_TIM6_Init+0x6c>)
 8005e74:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <MX_TIM6_Init+0x78>)
 8005e76:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e78:	4b0f      	ldr	r3, [pc, #60]	; (8005eb8 <MX_TIM6_Init+0x6c>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <MX_TIM6_Init+0x6c>)
 8005e80:	0018      	movs	r0, r3
 8005e82:	f003 fdd5 	bl	8009a30 <HAL_TIM_Base_Init>
 8005e86:	1e03      	subs	r3, r0, #0
 8005e88:	d001      	beq.n	8005e8e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8005e8a:	f7ff fe41 	bl	8005b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e8e:	003b      	movs	r3, r7
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e94:	003b      	movs	r3, r7
 8005e96:	2200      	movs	r2, #0
 8005e98:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005e9a:	003a      	movs	r2, r7
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <MX_TIM6_Init+0x6c>)
 8005e9e:	0011      	movs	r1, r2
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	f003 ffbd 	bl	8009e20 <HAL_TIMEx_MasterConfigSynchronization>
 8005ea6:	1e03      	subs	r3, r0, #0
 8005ea8:	d001      	beq.n	8005eae <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8005eaa:	f7ff fe31 	bl	8005b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	b002      	add	sp, #8
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	20000a5c 	.word	0x20000a5c
 8005ebc:	40001000 	.word	0x40001000
 8005ec0:	00000c7f 	.word	0x00000c7f
 8005ec4:	0000270f 	.word	0x0000270f

08005ec8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a0a      	ldr	r2, [pc, #40]	; (8005f00 <HAL_TIM_Base_MspInit+0x38>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d10d      	bne.n	8005ef6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005eda:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <HAL_TIM_Base_MspInit+0x3c>)
 8005edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ede:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <HAL_TIM_Base_MspInit+0x3c>)
 8005ee0:	2110      	movs	r1, #16
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2100      	movs	r1, #0
 8005eea:	2011      	movs	r0, #17
 8005eec:	f000 fe2a 	bl	8006b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8005ef0:	2011      	movs	r0, #17
 8005ef2:	f000 fe3c 	bl	8006b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	b002      	add	sp, #8
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	40001000 	.word	0x40001000
 8005f04:	40021000 	.word	0x40021000

08005f08 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005f0c:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <MX_LPUART1_UART_Init+0x5c>)
 8005f0e:	4a16      	ldr	r2, [pc, #88]	; (8005f68 <MX_LPUART1_UART_Init+0x60>)
 8005f10:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8005f12:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <MX_LPUART1_UART_Init+0x5c>)
 8005f14:	2296      	movs	r2, #150	; 0x96
 8005f16:	0192      	lsls	r2, r2, #6
 8005f18:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f1a:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <MX_LPUART1_UART_Init+0x5c>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005f20:	4b10      	ldr	r3, [pc, #64]	; (8005f64 <MX_LPUART1_UART_Init+0x5c>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005f26:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <MX_LPUART1_UART_Init+0x5c>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005f2c:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <MX_LPUART1_UART_Init+0x5c>)
 8005f2e:	220c      	movs	r2, #12
 8005f30:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f32:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <MX_LPUART1_UART_Init+0x5c>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <MX_LPUART1_UART_Init+0x5c>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8005f3e:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <MX_LPUART1_UART_Init+0x5c>)
 8005f40:	2210      	movs	r2, #16
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8005f44:	4b07      	ldr	r3, [pc, #28]	; (8005f64 <MX_LPUART1_UART_Init+0x5c>)
 8005f46:	2280      	movs	r2, #128	; 0x80
 8005f48:	0152      	lsls	r2, r2, #5
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005f4c:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <MX_LPUART1_UART_Init+0x5c>)
 8005f4e:	0018      	movs	r0, r3
 8005f50:	f003 ffc4 	bl	8009edc <HAL_UART_Init>
 8005f54:	1e03      	subs	r3, r0, #0
 8005f56:	d001      	beq.n	8005f5c <MX_LPUART1_UART_Init+0x54>
  {
    Error_Handler();
 8005f58:	f7ff fdda 	bl	8005b10 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005f5c:	46c0      	nop			; (mov r8, r8)
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	20000a9c 	.word	0x20000a9c
 8005f68:	40004800 	.word	0x40004800

08005f6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b089      	sub	sp, #36	; 0x24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f74:	240c      	movs	r4, #12
 8005f76:	193b      	adds	r3, r7, r4
 8005f78:	0018      	movs	r0, r3
 8005f7a:	2314      	movs	r3, #20
 8005f7c:	001a      	movs	r2, r3
 8005f7e:	2100      	movs	r1, #0
 8005f80:	f007 fb42 	bl	800d608 <memset>
  if(uartHandle->Instance==LPUART1)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1c      	ldr	r2, [pc, #112]	; (8005ffc <HAL_UART_MspInit+0x90>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d131      	bne.n	8005ff2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005f8e:	4b1c      	ldr	r3, [pc, #112]	; (8006000 <HAL_UART_MspInit+0x94>)
 8005f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f92:	4b1b      	ldr	r3, [pc, #108]	; (8006000 <HAL_UART_MspInit+0x94>)
 8005f94:	2180      	movs	r1, #128	; 0x80
 8005f96:	02c9      	lsls	r1, r1, #11
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f9c:	4b18      	ldr	r3, [pc, #96]	; (8006000 <HAL_UART_MspInit+0x94>)
 8005f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa0:	4b17      	ldr	r3, [pc, #92]	; (8006000 <HAL_UART_MspInit+0x94>)
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	62da      	str	r2, [r3, #44]	; 0x2c
 8005fa8:	4b15      	ldr	r3, [pc, #84]	; (8006000 <HAL_UART_MspInit+0x94>)
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	2201      	movs	r2, #1
 8005fae:	4013      	ands	r3, r2
 8005fb0:	60bb      	str	r3, [r7, #8]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005fb4:	0021      	movs	r1, r4
 8005fb6:	187b      	adds	r3, r7, r1
 8005fb8:	220c      	movs	r2, #12
 8005fba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fbc:	187b      	adds	r3, r7, r1
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc2:	187b      	adds	r3, r7, r1
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fc8:	187b      	adds	r3, r7, r1
 8005fca:	2203      	movs	r2, #3
 8005fcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8005fce:	187b      	adds	r3, r7, r1
 8005fd0:	2206      	movs	r2, #6
 8005fd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fd4:	187a      	adds	r2, r7, r1
 8005fd6:	23a0      	movs	r3, #160	; 0xa0
 8005fd8:	05db      	lsls	r3, r3, #23
 8005fda:	0011      	movs	r1, r2
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f001 f825 	bl	800702c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	201d      	movs	r0, #29
 8005fe8:	f000 fdac 	bl	8006b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005fec:	201d      	movs	r0, #29
 8005fee:	f000 fdbe 	bl	8006b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	b009      	add	sp, #36	; 0x24
 8005ff8:	bd90      	pop	{r4, r7, pc}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	40004800 	.word	0x40004800
 8006000:	40021000 	.word	0x40021000

08006004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006004:	480d      	ldr	r0, [pc, #52]	; (800603c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8006006:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006008:	f7ff ff1a 	bl	8005e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800600c:	480c      	ldr	r0, [pc, #48]	; (8006040 <LoopForever+0x6>)
  ldr r1, =_edata
 800600e:	490d      	ldr	r1, [pc, #52]	; (8006044 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006010:	4a0d      	ldr	r2, [pc, #52]	; (8006048 <LoopForever+0xe>)
  movs r3, #0
 8006012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006014:	e002      	b.n	800601c <LoopCopyDataInit>

08006016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800601a:	3304      	adds	r3, #4

0800601c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800601c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800601e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006020:	d3f9      	bcc.n	8006016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006022:	4a0a      	ldr	r2, [pc, #40]	; (800604c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006024:	4c0a      	ldr	r4, [pc, #40]	; (8006050 <LoopForever+0x16>)
  movs r3, #0
 8006026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006028:	e001      	b.n	800602e <LoopFillZerobss>

0800602a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800602a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800602c:	3204      	adds	r2, #4

0800602e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800602e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006030:	d3fb      	bcc.n	800602a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006032:	f007 fb75 	bl	800d720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006036:	f7ff fcc7 	bl	80059c8 <main>

0800603a <LoopForever>:

LoopForever:
    b LoopForever
 800603a:	e7fe      	b.n	800603a <LoopForever>
   ldr   r0, =_estack
 800603c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8006040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006044:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8006048:	0801096c 	.word	0x0801096c
  ldr r2, =_sbss
 800604c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006050:	20000c74 	.word	0x20000c74

08006054 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006054:	e7fe      	b.n	8006054 <ADC1_COMP_IRQHandler>
	...

08006058 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800605e:	1dfb      	adds	r3, r7, #7
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8006064:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <HAL_Init+0x3c>)
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <HAL_Init+0x3c>)
 800606a:	2140      	movs	r1, #64	; 0x40
 800606c:	430a      	orrs	r2, r1
 800606e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006070:	2003      	movs	r0, #3
 8006072:	f000 f811 	bl	8006098 <HAL_InitTick>
 8006076:	1e03      	subs	r3, r0, #0
 8006078:	d003      	beq.n	8006082 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800607a:	1dfb      	adds	r3, r7, #7
 800607c:	2201      	movs	r2, #1
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	e001      	b.n	8006086 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006082:	f7ff fdc7 	bl	8005c14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006086:	1dfb      	adds	r3, r7, #7
 8006088:	781b      	ldrb	r3, [r3, #0]
}
 800608a:	0018      	movs	r0, r3
 800608c:	46bd      	mov	sp, r7
 800608e:	b002      	add	sp, #8
 8006090:	bd80      	pop	{r7, pc}
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	40022000 	.word	0x40022000

08006098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80060a0:	4b14      	ldr	r3, [pc, #80]	; (80060f4 <HAL_InitTick+0x5c>)
 80060a2:	681c      	ldr	r4, [r3, #0]
 80060a4:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <HAL_InitTick+0x60>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	0019      	movs	r1, r3
 80060aa:	23fa      	movs	r3, #250	; 0xfa
 80060ac:	0098      	lsls	r0, r3, #2
 80060ae:	f7fa f851 	bl	8000154 <__udivsi3>
 80060b2:	0003      	movs	r3, r0
 80060b4:	0019      	movs	r1, r3
 80060b6:	0020      	movs	r0, r4
 80060b8:	f7fa f84c 	bl	8000154 <__udivsi3>
 80060bc:	0003      	movs	r3, r0
 80060be:	0018      	movs	r0, r3
 80060c0:	f000 fd65 	bl	8006b8e <HAL_SYSTICK_Config>
 80060c4:	1e03      	subs	r3, r0, #0
 80060c6:	d001      	beq.n	80060cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e00f      	b.n	80060ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d80b      	bhi.n	80060ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	2301      	movs	r3, #1
 80060d6:	425b      	negs	r3, r3
 80060d8:	2200      	movs	r2, #0
 80060da:	0018      	movs	r0, r3
 80060dc:	f000 fd32 	bl	8006b44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80060e0:	4b06      	ldr	r3, [pc, #24]	; (80060fc <HAL_InitTick+0x64>)
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	e000      	b.n	80060ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
}
 80060ec:	0018      	movs	r0, r3
 80060ee:	46bd      	mov	sp, r7
 80060f0:	b003      	add	sp, #12
 80060f2:	bd90      	pop	{r4, r7, pc}
 80060f4:	20000000 	.word	0x20000000
 80060f8:	20000008 	.word	0x20000008
 80060fc:	20000004 	.word	0x20000004

08006100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <HAL_IncTick+0x1c>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	001a      	movs	r2, r3
 800610a:	4b05      	ldr	r3, [pc, #20]	; (8006120 <HAL_IncTick+0x20>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	18d2      	adds	r2, r2, r3
 8006110:	4b03      	ldr	r3, [pc, #12]	; (8006120 <HAL_IncTick+0x20>)
 8006112:	601a      	str	r2, [r3, #0]
}
 8006114:	46c0      	nop			; (mov r8, r8)
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	46c0      	nop			; (mov r8, r8)
 800611c:	20000008 	.word	0x20000008
 8006120:	20000b24 	.word	0x20000b24

08006124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  return uwTick;
 8006128:	4b02      	ldr	r3, [pc, #8]	; (8006134 <HAL_GetTick+0x10>)
 800612a:	681b      	ldr	r3, [r3, #0]
}
 800612c:	0018      	movs	r0, r3
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	20000b24 	.word	0x20000b24

08006138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006140:	f7ff fff0 	bl	8006124 <HAL_GetTick>
 8006144:	0003      	movs	r3, r0
 8006146:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3301      	adds	r3, #1
 8006150:	d005      	beq.n	800615e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006152:	4b0a      	ldr	r3, [pc, #40]	; (800617c <HAL_Delay+0x44>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	001a      	movs	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	189b      	adds	r3, r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	f7ff ffe0 	bl	8006124 <HAL_GetTick>
 8006164:	0002      	movs	r2, r0
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	429a      	cmp	r2, r3
 800616e:	d8f7      	bhi.n	8006160 <HAL_Delay+0x28>
  {
  }
}
 8006170:	46c0      	nop			; (mov r8, r8)
 8006172:	46c0      	nop			; (mov r8, r8)
 8006174:	46bd      	mov	sp, r7
 8006176:	b004      	add	sp, #16
 8006178:	bd80      	pop	{r7, pc}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	20000008 	.word	0x20000008

08006180 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e159      	b.n	8006446 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2250      	movs	r2, #80	; 0x50
 80061a4:	2100      	movs	r1, #0
 80061a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	0018      	movs	r0, r3
 80061ac:	f7ff fa32 	bl	8005614 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b4:	2210      	movs	r2, #16
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b10      	cmp	r3, #16
 80061ba:	d005      	beq.n	80061c8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2204      	movs	r2, #4
 80061c4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80061c6:	d00b      	beq.n	80061e0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061cc:	2210      	movs	r2, #16
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2250      	movs	r2, #80	; 0x50
 80061d8:	2100      	movs	r1, #0
 80061da:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e132      	b.n	8006446 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e4:	4a9a      	ldr	r2, [pc, #616]	; (8006450 <HAL_ADC_Init+0x2d0>)
 80061e6:	4013      	ands	r3, r2
 80061e8:	2202      	movs	r2, #2
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	2203      	movs	r2, #3
 80061f8:	4013      	ands	r3, r2
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d108      	bne.n	8006210 <HAL_ADC_Init+0x90>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2201      	movs	r2, #1
 8006206:	4013      	ands	r3, r2
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_ADC_Init+0x90>
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <HAL_ADC_Init+0x92>
 8006210:	2300      	movs	r3, #0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d149      	bne.n	80062aa <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	23c0      	movs	r3, #192	; 0xc0
 800621c:	061b      	lsls	r3, r3, #24
 800621e:	429a      	cmp	r2, r3
 8006220:	d00b      	beq.n	800623a <HAL_ADC_Init+0xba>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	2380      	movs	r3, #128	; 0x80
 8006228:	05db      	lsls	r3, r3, #23
 800622a:	429a      	cmp	r2, r3
 800622c:	d005      	beq.n	800623a <HAL_ADC_Init+0xba>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	2380      	movs	r3, #128	; 0x80
 8006234:	061b      	lsls	r3, r3, #24
 8006236:	429a      	cmp	r2, r3
 8006238:	d111      	bne.n	800625e <HAL_ADC_Init+0xde>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	0092      	lsls	r2, r2, #2
 8006246:	0892      	lsrs	r2, r2, #2
 8006248:	611a      	str	r2, [r3, #16]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6919      	ldr	r1, [r3, #16]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	611a      	str	r2, [r3, #16]
 800625c:	e014      	b.n	8006288 <HAL_ADC_Init+0x108>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	0092      	lsls	r2, r2, #2
 800626a:	0892      	lsrs	r2, r2, #2
 800626c:	611a      	str	r2, [r3, #16]
 800626e:	4b79      	ldr	r3, [pc, #484]	; (8006454 <HAL_ADC_Init+0x2d4>)
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4b78      	ldr	r3, [pc, #480]	; (8006454 <HAL_ADC_Init+0x2d4>)
 8006274:	4978      	ldr	r1, [pc, #480]	; (8006458 <HAL_ADC_Init+0x2d8>)
 8006276:	400a      	ands	r2, r1
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	4b76      	ldr	r3, [pc, #472]	; (8006454 <HAL_ADC_Init+0x2d4>)
 800627c:	6819      	ldr	r1, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	4b74      	ldr	r3, [pc, #464]	; (8006454 <HAL_ADC_Init+0x2d4>)
 8006284:	430a      	orrs	r2, r1
 8006286:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2118      	movs	r1, #24
 8006294:	438a      	bics	r2, r1
 8006296:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68d9      	ldr	r1, [r3, #12]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80062aa:	4b6a      	ldr	r3, [pc, #424]	; (8006454 <HAL_ADC_Init+0x2d4>)
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4b69      	ldr	r3, [pc, #420]	; (8006454 <HAL_ADC_Init+0x2d4>)
 80062b0:	496a      	ldr	r1, [pc, #424]	; (800645c <HAL_ADC_Init+0x2dc>)
 80062b2:	400a      	ands	r2, r1
 80062b4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80062b6:	4b67      	ldr	r3, [pc, #412]	; (8006454 <HAL_ADC_Init+0x2d4>)
 80062b8:	6819      	ldr	r1, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062be:	065a      	lsls	r2, r3, #25
 80062c0:	4b64      	ldr	r3, [pc, #400]	; (8006454 <HAL_ADC_Init+0x2d4>)
 80062c2:	430a      	orrs	r2, r1
 80062c4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	2380      	movs	r3, #128	; 0x80
 80062ce:	055b      	lsls	r3, r3, #21
 80062d0:	4013      	ands	r3, r2
 80062d2:	d108      	bne.n	80062e6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2180      	movs	r1, #128	; 0x80
 80062e0:	0549      	lsls	r1, r1, #21
 80062e2:	430a      	orrs	r2, r1
 80062e4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	495b      	ldr	r1, [pc, #364]	; (8006460 <HAL_ADC_Init+0x2e0>)
 80062f2:	400a      	ands	r2, r1
 80062f4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68d9      	ldr	r1, [r3, #12]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b02      	cmp	r3, #2
 8006306:	d101      	bne.n	800630c <HAL_ADC_Init+0x18c>
 8006308:	2304      	movs	r3, #4
 800630a:	e000      	b.n	800630e <HAL_ADC_Init+0x18e>
 800630c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800630e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2020      	movs	r0, #32
 8006314:	5c1b      	ldrb	r3, [r3, r0]
 8006316:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006318:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	202c      	movs	r0, #44	; 0x2c
 800631e:	5c1b      	ldrb	r3, [r3, r0]
 8006320:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006322:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006328:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8006330:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006338:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006346:	23c2      	movs	r3, #194	; 0xc2
 8006348:	33ff      	adds	r3, #255	; 0xff
 800634a:	429a      	cmp	r2, r3
 800634c:	d00b      	beq.n	8006366 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68d9      	ldr	r1, [r3, #12]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800635c:	431a      	orrs	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2221      	movs	r2, #33	; 0x21
 800636a:	5c9b      	ldrb	r3, [r3, r2]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d11a      	bne.n	80063a6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	5c9b      	ldrb	r3, [r3, r2]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d109      	bne.n	800638e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2180      	movs	r1, #128	; 0x80
 8006386:	0249      	lsls	r1, r1, #9
 8006388:	430a      	orrs	r2, r1
 800638a:	60da      	str	r2, [r3, #12]
 800638c:	e00b      	b.n	80063a6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006392:	2220      	movs	r2, #32
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800639e:	2201      	movs	r2, #1
 80063a0:	431a      	orrs	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d11f      	bne.n	80063ee <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	492a      	ldr	r1, [pc, #168]	; (8006464 <HAL_ADC_Init+0x2e4>)
 80063ba:	400a      	ands	r2, r1
 80063bc:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6919      	ldr	r1, [r3, #16]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80063cc:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80063d2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2101      	movs	r1, #1
 80063e8:	430a      	orrs	r2, r1
 80063ea:	611a      	str	r2, [r3, #16]
 80063ec:	e00e      	b.n	800640c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2201      	movs	r2, #1
 80063f6:	4013      	ands	r3, r2
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d107      	bne.n	800640c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2101      	movs	r1, #1
 8006408:	438a      	bics	r2, r1
 800640a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695a      	ldr	r2, [r3, #20]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2107      	movs	r1, #7
 8006418:	438a      	bics	r2, r1
 800641a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6959      	ldr	r1, [r3, #20]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006438:	2203      	movs	r2, #3
 800643a:	4393      	bics	r3, r2
 800643c:	2201      	movs	r2, #1
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	0018      	movs	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	b002      	add	sp, #8
 800644c:	bd80      	pop	{r7, pc}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	fffffefd 	.word	0xfffffefd
 8006454:	40012708 	.word	0x40012708
 8006458:	ffc3ffff 	.word	0xffc3ffff
 800645c:	fdffffff 	.word	0xfdffffff
 8006460:	fffe0219 	.word	0xfffe0219
 8006464:	fffffc03 	.word	0xfffffc03

08006468 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006468:	b590      	push	{r4, r7, lr}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006474:	2317      	movs	r3, #23
 8006476:	18fb      	adds	r3, r7, r3
 8006478:	2200      	movs	r2, #0
 800647a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	2204      	movs	r2, #4
 8006484:	4013      	ands	r3, r2
 8006486:	d15e      	bne.n	8006546 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2250      	movs	r2, #80	; 0x50
 800648c:	5c9b      	ldrb	r3, [r3, r2]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <HAL_ADC_Start_DMA+0x2e>
 8006492:	2302      	movs	r3, #2
 8006494:	e05e      	b.n	8006554 <HAL_ADC_Start_DMA+0xec>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2250      	movs	r2, #80	; 0x50
 800649a:	2101      	movs	r1, #1
 800649c:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2101      	movs	r1, #1
 80064aa:	430a      	orrs	r2, r1
 80064ac:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d007      	beq.n	80064c6 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80064b6:	2317      	movs	r3, #23
 80064b8:	18fc      	adds	r4, r7, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	0018      	movs	r0, r3
 80064be:	f000 f8eb 	bl	8006698 <ADC_Enable>
 80064c2:	0003      	movs	r3, r0
 80064c4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80064c6:	2317      	movs	r3, #23
 80064c8:	18fb      	adds	r3, r7, r3
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d13e      	bne.n	800654e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d4:	4a21      	ldr	r2, [pc, #132]	; (800655c <HAL_ADC_Start_DMA+0xf4>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	2280      	movs	r2, #128	; 0x80
 80064da:	0052      	lsls	r2, r2, #1
 80064dc:	431a      	orrs	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2250      	movs	r2, #80	; 0x50
 80064ec:	2100      	movs	r1, #0
 80064ee:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f4:	4a1a      	ldr	r2, [pc, #104]	; (8006560 <HAL_ADC_Start_DMA+0xf8>)
 80064f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064fc:	4a19      	ldr	r2, [pc, #100]	; (8006564 <HAL_ADC_Start_DMA+0xfc>)
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006504:	4a18      	ldr	r2, [pc, #96]	; (8006568 <HAL_ADC_Start_DMA+0x100>)
 8006506:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	221c      	movs	r2, #28
 800650e:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2110      	movs	r1, #16
 800651c:	430a      	orrs	r2, r1
 800651e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3340      	adds	r3, #64	; 0x40
 800652a:	0019      	movs	r1, r3
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f000 fbb2 	bl	8006c98 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2104      	movs	r1, #4
 8006540:	430a      	orrs	r2, r1
 8006542:	609a      	str	r2, [r3, #8]
 8006544:	e003      	b.n	800654e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006546:	2317      	movs	r3, #23
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	2202      	movs	r2, #2
 800654c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800654e:	2317      	movs	r3, #23
 8006550:	18fb      	adds	r3, r7, r3
 8006552:	781b      	ldrb	r3, [r3, #0]
}
 8006554:	0018      	movs	r0, r3
 8006556:	46bd      	mov	sp, r7
 8006558:	b007      	add	sp, #28
 800655a:	bd90      	pop	{r4, r7, pc}
 800655c:	fffff0fe 	.word	0xfffff0fe
 8006560:	08006769 	.word	0x08006769
 8006564:	0800681d 	.word	0x0800681d
 8006568:	0800683b 	.word	0x0800683b

0800656c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006574:	46c0      	nop			; (mov r8, r8)
 8006576:	46bd      	mov	sp, r7
 8006578:	b002      	add	sp, #8
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006584:	46c0      	nop			; (mov r8, r8)
 8006586:	46bd      	mov	sp, r7
 8006588:	b002      	add	sp, #8
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2250      	movs	r2, #80	; 0x50
 800659a:	5c9b      	ldrb	r3, [r3, r2]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_ADC_ConfigChannel+0x18>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e06c      	b.n	800667e <HAL_ADC_ConfigChannel+0xf2>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2250      	movs	r2, #80	; 0x50
 80065a8:	2101      	movs	r1, #1
 80065aa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	2204      	movs	r2, #4
 80065b4:	4013      	ands	r3, r2
 80065b6:	d00b      	beq.n	80065d0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065bc:	2220      	movs	r2, #32
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2250      	movs	r2, #80	; 0x50
 80065c8:	2100      	movs	r1, #0
 80065ca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e056      	b.n	800667e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	4a2c      	ldr	r2, [pc, #176]	; (8006688 <HAL_ADC_ConfigChannel+0xfc>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d028      	beq.n	800662c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	035b      	lsls	r3, r3, #13
 80065e6:	0b5a      	lsrs	r2, r3, #13
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	2380      	movs	r3, #128	; 0x80
 80065f6:	02db      	lsls	r3, r3, #11
 80065f8:	4013      	ands	r3, r2
 80065fa:	d009      	beq.n	8006610 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80065fc:	4b23      	ldr	r3, [pc, #140]	; (800668c <HAL_ADC_ConfigChannel+0x100>)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	4b22      	ldr	r3, [pc, #136]	; (800668c <HAL_ADC_ConfigChannel+0x100>)
 8006602:	2180      	movs	r1, #128	; 0x80
 8006604:	0409      	lsls	r1, r1, #16
 8006606:	430a      	orrs	r2, r1
 8006608:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800660a:	200a      	movs	r0, #10
 800660c:	f000 f930 	bl	8006870 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	2380      	movs	r3, #128	; 0x80
 8006616:	029b      	lsls	r3, r3, #10
 8006618:	4013      	ands	r3, r2
 800661a:	d02b      	beq.n	8006674 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800661c:	4b1b      	ldr	r3, [pc, #108]	; (800668c <HAL_ADC_ConfigChannel+0x100>)
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	4b1a      	ldr	r3, [pc, #104]	; (800668c <HAL_ADC_ConfigChannel+0x100>)
 8006622:	2180      	movs	r1, #128	; 0x80
 8006624:	03c9      	lsls	r1, r1, #15
 8006626:	430a      	orrs	r2, r1
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	e023      	b.n	8006674 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	035b      	lsls	r3, r3, #13
 8006638:	0b5b      	lsrs	r3, r3, #13
 800663a:	43d9      	mvns	r1, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	400a      	ands	r2, r1
 8006642:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	2380      	movs	r3, #128	; 0x80
 800664a:	02db      	lsls	r3, r3, #11
 800664c:	4013      	ands	r3, r2
 800664e:	d005      	beq.n	800665c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8006650:	4b0e      	ldr	r3, [pc, #56]	; (800668c <HAL_ADC_ConfigChannel+0x100>)
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	4b0d      	ldr	r3, [pc, #52]	; (800668c <HAL_ADC_ConfigChannel+0x100>)
 8006656:	490e      	ldr	r1, [pc, #56]	; (8006690 <HAL_ADC_ConfigChannel+0x104>)
 8006658:	400a      	ands	r2, r1
 800665a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	2380      	movs	r3, #128	; 0x80
 8006662:	029b      	lsls	r3, r3, #10
 8006664:	4013      	ands	r3, r2
 8006666:	d005      	beq.n	8006674 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8006668:	4b08      	ldr	r3, [pc, #32]	; (800668c <HAL_ADC_ConfigChannel+0x100>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	4b07      	ldr	r3, [pc, #28]	; (800668c <HAL_ADC_ConfigChannel+0x100>)
 800666e:	4909      	ldr	r1, [pc, #36]	; (8006694 <HAL_ADC_ConfigChannel+0x108>)
 8006670:	400a      	ands	r2, r1
 8006672:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2250      	movs	r2, #80	; 0x50
 8006678:	2100      	movs	r1, #0
 800667a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	0018      	movs	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	b002      	add	sp, #8
 8006684:	bd80      	pop	{r7, pc}
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	00001001 	.word	0x00001001
 800668c:	40012708 	.word	0x40012708
 8006690:	ff7fffff 	.word	0xff7fffff
 8006694:	ffbfffff 	.word	0xffbfffff

08006698 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	2203      	movs	r2, #3
 80066ac:	4013      	ands	r3, r2
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d108      	bne.n	80066c4 <ADC_Enable+0x2c>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2201      	movs	r2, #1
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <ADC_Enable+0x2c>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <ADC_Enable+0x2e>
 80066c4:	2300      	movs	r3, #0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d146      	bne.n	8006758 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	4a24      	ldr	r2, [pc, #144]	; (8006764 <ADC_Enable+0xcc>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	d00d      	beq.n	80066f2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066da:	2210      	movs	r2, #16
 80066dc:	431a      	orrs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e6:	2201      	movs	r2, #1
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e033      	b.n	800675a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2101      	movs	r1, #1
 80066fe:	430a      	orrs	r2, r1
 8006700:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006702:	2001      	movs	r0, #1
 8006704:	f000 f8b4 	bl	8006870 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006708:	f7ff fd0c 	bl	8006124 <HAL_GetTick>
 800670c:	0003      	movs	r3, r0
 800670e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006710:	e01b      	b.n	800674a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006712:	f7ff fd07 	bl	8006124 <HAL_GetTick>
 8006716:	0002      	movs	r2, r0
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b0a      	cmp	r3, #10
 800671e:	d914      	bls.n	800674a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2201      	movs	r2, #1
 8006728:	4013      	ands	r3, r2
 800672a:	2b01      	cmp	r3, #1
 800672c:	d00d      	beq.n	800674a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	2210      	movs	r2, #16
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673e:	2201      	movs	r2, #1
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e007      	b.n	800675a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2201      	movs	r2, #1
 8006752:	4013      	ands	r3, r2
 8006754:	2b01      	cmp	r3, #1
 8006756:	d1dc      	bne.n	8006712 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	0018      	movs	r0, r3
 800675c:	46bd      	mov	sp, r7
 800675e:	b004      	add	sp, #16
 8006760:	bd80      	pop	{r7, pc}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	80000017 	.word	0x80000017

08006768 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006774:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677a:	2250      	movs	r2, #80	; 0x50
 800677c:	4013      	ands	r3, r2
 800677e:	d141      	bne.n	8006804 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006784:	2280      	movs	r2, #128	; 0x80
 8006786:	0092      	lsls	r2, r2, #2
 8006788:	431a      	orrs	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	23c0      	movs	r3, #192	; 0xc0
 8006796:	011b      	lsls	r3, r3, #4
 8006798:	4013      	ands	r3, r2
 800679a:	d12e      	bne.n	80067fa <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2220      	movs	r2, #32
 80067a0:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d129      	bne.n	80067fa <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2208      	movs	r2, #8
 80067ae:	4013      	ands	r3, r2
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d122      	bne.n	80067fa <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2204      	movs	r2, #4
 80067bc:	4013      	ands	r3, r2
 80067be:	d110      	bne.n	80067e2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	210c      	movs	r1, #12
 80067cc:	438a      	bics	r2, r1
 80067ce:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d4:	4a10      	ldr	r2, [pc, #64]	; (8006818 <ADC_DMAConvCplt+0xb0>)
 80067d6:	4013      	ands	r3, r2
 80067d8:	2201      	movs	r2, #1
 80067da:	431a      	orrs	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	655a      	str	r2, [r3, #84]	; 0x54
 80067e0:	e00b      	b.n	80067fa <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	2220      	movs	r2, #32
 80067e8:	431a      	orrs	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f2:	2201      	movs	r2, #1
 80067f4:	431a      	orrs	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7ff f8bd 	bl	800597c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006802:	e005      	b.n	8006810 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	0010      	movs	r0, r2
 800680e:	4798      	blx	r3
}
 8006810:	46c0      	nop			; (mov r8, r8)
 8006812:	46bd      	mov	sp, r7
 8006814:	b004      	add	sp, #16
 8006816:	bd80      	pop	{r7, pc}
 8006818:	fffffefe 	.word	0xfffffefe

0800681c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	0018      	movs	r0, r3
 800682e:	f7ff fe9d 	bl	800656c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	46bd      	mov	sp, r7
 8006836:	b004      	add	sp, #16
 8006838:	bd80      	pop	{r7, pc}

0800683a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684c:	2240      	movs	r2, #64	; 0x40
 800684e:	431a      	orrs	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006858:	2204      	movs	r2, #4
 800685a:	431a      	orrs	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	0018      	movs	r0, r3
 8006864:	f7ff fe8a 	bl	800657c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006868:	46c0      	nop			; (mov r8, r8)
 800686a:	46bd      	mov	sp, r7
 800686c:	b004      	add	sp, #16
 800686e:	bd80      	pop	{r7, pc}

08006870 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006878:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <ADC_DelayMicroSecond+0x38>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	490b      	ldr	r1, [pc, #44]	; (80068ac <ADC_DelayMicroSecond+0x3c>)
 800687e:	0018      	movs	r0, r3
 8006880:	f7f9 fc68 	bl	8000154 <__udivsi3>
 8006884:	0003      	movs	r3, r0
 8006886:	001a      	movs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4353      	muls	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800688e:	e002      	b.n	8006896 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3b01      	subs	r3, #1
 8006894:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f9      	bne.n	8006890 <ADC_DelayMicroSecond+0x20>
  }
}
 800689c:	46c0      	nop			; (mov r8, r8)
 800689e:	46c0      	nop			; (mov r8, r8)
 80068a0:	46bd      	mov	sp, r7
 80068a2:	b004      	add	sp, #16
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	20000000 	.word	0x20000000
 80068ac:	000f4240 	.word	0x000f4240

080068b0 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068ba:	2317      	movs	r3, #23
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	2200      	movs	r2, #0
 80068c0:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2250      	movs	r2, #80	; 0x50
 80068ce:	5c9b      	ldrb	r3, [r3, r2]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <HAL_ADCEx_Calibration_Start+0x28>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e083      	b.n	80069e0 <HAL_ADCEx_Calibration_Start+0x130>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2250      	movs	r2, #80	; 0x50
 80068dc:	2101      	movs	r1, #1
 80068de:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	2203      	movs	r2, #3
 80068e8:	4013      	ands	r3, r2
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d108      	bne.n	8006900 <HAL_ADCEx_Calibration_Start+0x50>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2201      	movs	r2, #1
 80068f6:	4013      	ands	r3, r2
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_ADCEx_Calibration_Start+0x50>
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <HAL_ADCEx_Calibration_Start+0x52>
 8006900:	2300      	movs	r3, #0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d15b      	bne.n	80069be <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690a:	4a37      	ldr	r2, [pc, #220]	; (80069e8 <HAL_ADCEx_Calibration_Start+0x138>)
 800690c:	4013      	ands	r3, r2
 800690e:	2202      	movs	r2, #2
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2203      	movs	r2, #3
 800691e:	4013      	ands	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68da      	ldr	r2, [r3, #12]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2103      	movs	r1, #3
 800692e:	438a      	bics	r2, r1
 8006930:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2180      	movs	r1, #128	; 0x80
 800693e:	0609      	lsls	r1, r1, #24
 8006940:	430a      	orrs	r2, r1
 8006942:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8006944:	f7ff fbee 	bl	8006124 <HAL_GetTick>
 8006948:	0003      	movs	r3, r0
 800694a:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800694c:	e01d      	b.n	800698a <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800694e:	f7ff fbe9 	bl	8006124 <HAL_GetTick>
 8006952:	0002      	movs	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b0a      	cmp	r3, #10
 800695a:	d916      	bls.n	800698a <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	0fdb      	lsrs	r3, r3, #31
 8006964:	07da      	lsls	r2, r3, #31
 8006966:	2380      	movs	r3, #128	; 0x80
 8006968:	061b      	lsls	r3, r3, #24
 800696a:	429a      	cmp	r2, r3
 800696c:	d10d      	bne.n	800698a <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006972:	2212      	movs	r2, #18
 8006974:	4393      	bics	r3, r2
 8006976:	2210      	movs	r2, #16
 8006978:	431a      	orrs	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2250      	movs	r2, #80	; 0x50
 8006982:	2100      	movs	r1, #0
 8006984:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e02a      	b.n	80069e0 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	0fdb      	lsrs	r3, r3, #31
 8006992:	07da      	lsls	r2, r3, #31
 8006994:	2380      	movs	r3, #128	; 0x80
 8006996:	061b      	lsls	r3, r3, #24
 8006998:	429a      	cmp	r2, r3
 800699a:	d0d8      	beq.n	800694e <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68d9      	ldr	r1, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b0:	2203      	movs	r2, #3
 80069b2:	4393      	bics	r3, r2
 80069b4:	2201      	movs	r2, #1
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	655a      	str	r2, [r3, #84]	; 0x54
 80069bc:	e009      	b.n	80069d2 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c2:	2220      	movs	r2, #32
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80069ca:	2317      	movs	r3, #23
 80069cc:	18fb      	adds	r3, r7, r3
 80069ce:	2201      	movs	r2, #1
 80069d0:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2250      	movs	r2, #80	; 0x50
 80069d6:	2100      	movs	r1, #0
 80069d8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80069da:	2317      	movs	r3, #23
 80069dc:	18fb      	adds	r3, r7, r3
 80069de:	781b      	ldrb	r3, [r3, #0]
}
 80069e0:	0018      	movs	r0, r3
 80069e2:	46bd      	mov	sp, r7
 80069e4:	b006      	add	sp, #24
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	fffffefd 	.word	0xfffffefd

080069ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	0002      	movs	r2, r0
 80069f4:	1dfb      	adds	r3, r7, #7
 80069f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80069f8:	1dfb      	adds	r3, r7, #7
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b7f      	cmp	r3, #127	; 0x7f
 80069fe:	d809      	bhi.n	8006a14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a00:	1dfb      	adds	r3, r7, #7
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	001a      	movs	r2, r3
 8006a06:	231f      	movs	r3, #31
 8006a08:	401a      	ands	r2, r3
 8006a0a:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <__NVIC_EnableIRQ+0x30>)
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	4091      	lsls	r1, r2
 8006a10:	000a      	movs	r2, r1
 8006a12:	601a      	str	r2, [r3, #0]
  }
}
 8006a14:	46c0      	nop			; (mov r8, r8)
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b002      	add	sp, #8
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	e000e100 	.word	0xe000e100

08006a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a20:	b590      	push	{r4, r7, lr}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	0002      	movs	r2, r0
 8006a28:	6039      	str	r1, [r7, #0]
 8006a2a:	1dfb      	adds	r3, r7, #7
 8006a2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006a2e:	1dfb      	adds	r3, r7, #7
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b7f      	cmp	r3, #127	; 0x7f
 8006a34:	d828      	bhi.n	8006a88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a36:	4a2f      	ldr	r2, [pc, #188]	; (8006af4 <__NVIC_SetPriority+0xd4>)
 8006a38:	1dfb      	adds	r3, r7, #7
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	b25b      	sxtb	r3, r3
 8006a3e:	089b      	lsrs	r3, r3, #2
 8006a40:	33c0      	adds	r3, #192	; 0xc0
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	589b      	ldr	r3, [r3, r2]
 8006a46:	1dfa      	adds	r2, r7, #7
 8006a48:	7812      	ldrb	r2, [r2, #0]
 8006a4a:	0011      	movs	r1, r2
 8006a4c:	2203      	movs	r2, #3
 8006a4e:	400a      	ands	r2, r1
 8006a50:	00d2      	lsls	r2, r2, #3
 8006a52:	21ff      	movs	r1, #255	; 0xff
 8006a54:	4091      	lsls	r1, r2
 8006a56:	000a      	movs	r2, r1
 8006a58:	43d2      	mvns	r2, r2
 8006a5a:	401a      	ands	r2, r3
 8006a5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	019b      	lsls	r3, r3, #6
 8006a62:	22ff      	movs	r2, #255	; 0xff
 8006a64:	401a      	ands	r2, r3
 8006a66:	1dfb      	adds	r3, r7, #7
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	4003      	ands	r3, r0
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a74:	481f      	ldr	r0, [pc, #124]	; (8006af4 <__NVIC_SetPriority+0xd4>)
 8006a76:	1dfb      	adds	r3, r7, #7
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	b25b      	sxtb	r3, r3
 8006a7c:	089b      	lsrs	r3, r3, #2
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	33c0      	adds	r3, #192	; 0xc0
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006a86:	e031      	b.n	8006aec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a88:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <__NVIC_SetPriority+0xd8>)
 8006a8a:	1dfb      	adds	r3, r7, #7
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	0019      	movs	r1, r3
 8006a90:	230f      	movs	r3, #15
 8006a92:	400b      	ands	r3, r1
 8006a94:	3b08      	subs	r3, #8
 8006a96:	089b      	lsrs	r3, r3, #2
 8006a98:	3306      	adds	r3, #6
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	18d3      	adds	r3, r2, r3
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	1dfa      	adds	r2, r7, #7
 8006aa4:	7812      	ldrb	r2, [r2, #0]
 8006aa6:	0011      	movs	r1, r2
 8006aa8:	2203      	movs	r2, #3
 8006aaa:	400a      	ands	r2, r1
 8006aac:	00d2      	lsls	r2, r2, #3
 8006aae:	21ff      	movs	r1, #255	; 0xff
 8006ab0:	4091      	lsls	r1, r2
 8006ab2:	000a      	movs	r2, r1
 8006ab4:	43d2      	mvns	r2, r2
 8006ab6:	401a      	ands	r2, r3
 8006ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	019b      	lsls	r3, r3, #6
 8006abe:	22ff      	movs	r2, #255	; 0xff
 8006ac0:	401a      	ands	r2, r3
 8006ac2:	1dfb      	adds	r3, r7, #7
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	2303      	movs	r3, #3
 8006aca:	4003      	ands	r3, r0
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ad0:	4809      	ldr	r0, [pc, #36]	; (8006af8 <__NVIC_SetPriority+0xd8>)
 8006ad2:	1dfb      	adds	r3, r7, #7
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	001c      	movs	r4, r3
 8006ad8:	230f      	movs	r3, #15
 8006ada:	4023      	ands	r3, r4
 8006adc:	3b08      	subs	r3, #8
 8006ade:	089b      	lsrs	r3, r3, #2
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	3306      	adds	r3, #6
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	18c3      	adds	r3, r0, r3
 8006ae8:	3304      	adds	r3, #4
 8006aea:	601a      	str	r2, [r3, #0]
}
 8006aec:	46c0      	nop			; (mov r8, r8)
 8006aee:	46bd      	mov	sp, r7
 8006af0:	b003      	add	sp, #12
 8006af2:	bd90      	pop	{r4, r7, pc}
 8006af4:	e000e100 	.word	0xe000e100
 8006af8:	e000ed00 	.word	0xe000ed00

08006afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	1e5a      	subs	r2, r3, #1
 8006b08:	2380      	movs	r3, #128	; 0x80
 8006b0a:	045b      	lsls	r3, r3, #17
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d301      	bcc.n	8006b14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b10:	2301      	movs	r3, #1
 8006b12:	e010      	b.n	8006b36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b14:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <SysTick_Config+0x44>)
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	3a01      	subs	r2, #1
 8006b1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	425b      	negs	r3, r3
 8006b20:	2103      	movs	r1, #3
 8006b22:	0018      	movs	r0, r3
 8006b24:	f7ff ff7c 	bl	8006a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b28:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <SysTick_Config+0x44>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b2e:	4b04      	ldr	r3, [pc, #16]	; (8006b40 <SysTick_Config+0x44>)
 8006b30:	2207      	movs	r2, #7
 8006b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	0018      	movs	r0, r3
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	b002      	add	sp, #8
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	46c0      	nop			; (mov r8, r8)
 8006b40:	e000e010 	.word	0xe000e010

08006b44 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]
 8006b4e:	210f      	movs	r1, #15
 8006b50:	187b      	adds	r3, r7, r1
 8006b52:	1c02      	adds	r2, r0, #0
 8006b54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	187b      	adds	r3, r7, r1
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	b25b      	sxtb	r3, r3
 8006b5e:	0011      	movs	r1, r2
 8006b60:	0018      	movs	r0, r3
 8006b62:	f7ff ff5d 	bl	8006a20 <__NVIC_SetPriority>
}
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	b004      	add	sp, #16
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	0002      	movs	r2, r0
 8006b76:	1dfb      	adds	r3, r7, #7
 8006b78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b7a:	1dfb      	adds	r3, r7, #7
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	b25b      	sxtb	r3, r3
 8006b80:	0018      	movs	r0, r3
 8006b82:	f7ff ff33 	bl	80069ec <__NVIC_EnableIRQ>
}
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	b002      	add	sp, #8
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f7ff ffaf 	bl	8006afc <SysTick_Config>
 8006b9e:	0003      	movs	r3, r0
}
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	b002      	add	sp, #8
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e061      	b.n	8006c7e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a32      	ldr	r2, [pc, #200]	; (8006c88 <HAL_DMA_Init+0xe0>)
 8006bc0:	4694      	mov	ip, r2
 8006bc2:	4463      	add	r3, ip
 8006bc4:	2114      	movs	r1, #20
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f7f9 fac4 	bl	8000154 <__udivsi3>
 8006bcc:	0003      	movs	r3, r0
 8006bce:	009a      	lsls	r2, r3, #2
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a2d      	ldr	r2, [pc, #180]	; (8006c8c <HAL_DMA_Init+0xe4>)
 8006bd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2225      	movs	r2, #37	; 0x25
 8006bde:	2102      	movs	r1, #2
 8006be0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4a28      	ldr	r2, [pc, #160]	; (8006c90 <HAL_DMA_Init+0xe8>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	2380      	movs	r3, #128	; 0x80
 8006c2e:	01db      	lsls	r3, r3, #7
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d018      	beq.n	8006c66 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006c34:	4b17      	ldr	r3, [pc, #92]	; (8006c94 <HAL_DMA_Init+0xec>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3c:	211c      	movs	r1, #28
 8006c3e:	400b      	ands	r3, r1
 8006c40:	210f      	movs	r1, #15
 8006c42:	4099      	lsls	r1, r3
 8006c44:	000b      	movs	r3, r1
 8006c46:	43d9      	mvns	r1, r3
 8006c48:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <HAL_DMA_Init+0xec>)
 8006c4a:	400a      	ands	r2, r1
 8006c4c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006c4e:	4b11      	ldr	r3, [pc, #68]	; (8006c94 <HAL_DMA_Init+0xec>)
 8006c50:	6819      	ldr	r1, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5a:	201c      	movs	r0, #28
 8006c5c:	4003      	ands	r3, r0
 8006c5e:	409a      	lsls	r2, r3
 8006c60:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <HAL_DMA_Init+0xec>)
 8006c62:	430a      	orrs	r2, r1
 8006c64:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2225      	movs	r2, #37	; 0x25
 8006c70:	2101      	movs	r1, #1
 8006c72:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2224      	movs	r2, #36	; 0x24
 8006c78:	2100      	movs	r1, #0
 8006c7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	0018      	movs	r0, r3
 8006c80:	46bd      	mov	sp, r7
 8006c82:	b004      	add	sp, #16
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	bffdfff8 	.word	0xbffdfff8
 8006c8c:	40020000 	.word	0x40020000
 8006c90:	ffff800f 	.word	0xffff800f
 8006c94:	400200a8 	.word	0x400200a8

08006c98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca6:	2317      	movs	r3, #23
 8006ca8:	18fb      	adds	r3, r7, r3
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2224      	movs	r2, #36	; 0x24
 8006cb2:	5c9b      	ldrb	r3, [r3, r2]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_DMA_Start_IT+0x24>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e04f      	b.n	8006d5c <HAL_DMA_Start_IT+0xc4>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2224      	movs	r2, #36	; 0x24
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2225      	movs	r2, #37	; 0x25
 8006cc8:	5c9b      	ldrb	r3, [r3, r2]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d13a      	bne.n	8006d46 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2225      	movs	r2, #37	; 0x25
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2101      	movs	r1, #1
 8006cea:	438a      	bics	r2, r1
 8006cec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	68b9      	ldr	r1, [r7, #8]
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 f96a 	bl	8006fce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d008      	beq.n	8006d14 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	210e      	movs	r1, #14
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	e00f      	b.n	8006d34 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2104      	movs	r1, #4
 8006d20:	438a      	bics	r2, r1
 8006d22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	210a      	movs	r1, #10
 8006d30:	430a      	orrs	r2, r1
 8006d32:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2101      	movs	r1, #1
 8006d40:	430a      	orrs	r2, r1
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e007      	b.n	8006d56 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2224      	movs	r2, #36	; 0x24
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006d4e:	2317      	movs	r3, #23
 8006d50:	18fb      	adds	r3, r7, r3
 8006d52:	2202      	movs	r2, #2
 8006d54:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8006d56:	2317      	movs	r3, #23
 8006d58:	18fb      	adds	r3, r7, r3
 8006d5a:	781b      	ldrb	r3, [r3, #0]
}
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b006      	add	sp, #24
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d6c:	230f      	movs	r3, #15
 8006d6e:	18fb      	adds	r3, r7, r3
 8006d70:	2200      	movs	r2, #0
 8006d72:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2225      	movs	r2, #37	; 0x25
 8006d78:	5c9b      	ldrb	r3, [r3, r2]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d008      	beq.n	8006d92 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2204      	movs	r2, #4
 8006d84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2224      	movs	r2, #36	; 0x24
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e024      	b.n	8006ddc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	210e      	movs	r1, #14
 8006d9e:	438a      	bics	r2, r1
 8006da0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2101      	movs	r1, #1
 8006dae:	438a      	bics	r2, r1
 8006db0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db6:	221c      	movs	r2, #28
 8006db8:	401a      	ands	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	4091      	lsls	r1, r2
 8006dc2:	000a      	movs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2225      	movs	r2, #37	; 0x25
 8006dca:	2101      	movs	r1, #1
 8006dcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2224      	movs	r2, #36	; 0x24
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	5499      	strb	r1, [r3, r2]

    return status;
 8006dd6:	230f      	movs	r3, #15
 8006dd8:	18fb      	adds	r3, r7, r3
 8006dda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ddc:	0018      	movs	r0, r3
 8006dde:	46bd      	mov	sp, r7
 8006de0:	b004      	add	sp, #16
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dec:	210f      	movs	r1, #15
 8006dee:	187b      	adds	r3, r7, r1
 8006df0:	2200      	movs	r2, #0
 8006df2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2225      	movs	r2, #37	; 0x25
 8006df8:	5c9b      	ldrb	r3, [r3, r2]
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d006      	beq.n	8006e0e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2204      	movs	r2, #4
 8006e04:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006e06:	187b      	adds	r3, r7, r1
 8006e08:	2201      	movs	r2, #1
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	e02a      	b.n	8006e64 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	210e      	movs	r1, #14
 8006e1a:	438a      	bics	r2, r1
 8006e1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2101      	movs	r1, #1
 8006e2a:	438a      	bics	r2, r1
 8006e2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e32:	221c      	movs	r2, #28
 8006e34:	401a      	ands	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	4091      	lsls	r1, r2
 8006e3e:	000a      	movs	r2, r1
 8006e40:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2225      	movs	r2, #37	; 0x25
 8006e46:	2101      	movs	r1, #1
 8006e48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2224      	movs	r2, #36	; 0x24
 8006e4e:	2100      	movs	r1, #0
 8006e50:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d004      	beq.n	8006e64 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	0010      	movs	r0, r2
 8006e62:	4798      	blx	r3
    }
  }
  return status;
 8006e64:	230f      	movs	r3, #15
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	781b      	ldrb	r3, [r3, #0]
}
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	b004      	add	sp, #16
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8e:	221c      	movs	r2, #28
 8006e90:	4013      	ands	r3, r2
 8006e92:	2204      	movs	r2, #4
 8006e94:	409a      	lsls	r2, r3
 8006e96:	0013      	movs	r3, r2
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	d026      	beq.n	8006eec <HAL_DMA_IRQHandler+0x7a>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2204      	movs	r2, #4
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	d022      	beq.n	8006eec <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2220      	movs	r2, #32
 8006eae:	4013      	ands	r3, r2
 8006eb0:	d107      	bne.n	8006ec2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2104      	movs	r1, #4
 8006ebe:	438a      	bics	r2, r1
 8006ec0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec6:	221c      	movs	r2, #28
 8006ec8:	401a      	ands	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	2104      	movs	r1, #4
 8006ed0:	4091      	lsls	r1, r2
 8006ed2:	000a      	movs	r2, r1
 8006ed4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d100      	bne.n	8006ee0 <HAL_DMA_IRQHandler+0x6e>
 8006ede:	e071      	b.n	8006fc4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	0010      	movs	r0, r2
 8006ee8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8006eea:	e06b      	b.n	8006fc4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef0:	221c      	movs	r2, #28
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	409a      	lsls	r2, r3
 8006ef8:	0013      	movs	r3, r2
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4013      	ands	r3, r2
 8006efe:	d02d      	beq.n	8006f5c <HAL_DMA_IRQHandler+0xea>
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2202      	movs	r2, #2
 8006f04:	4013      	ands	r3, r2
 8006f06:	d029      	beq.n	8006f5c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	4013      	ands	r3, r2
 8006f12:	d10b      	bne.n	8006f2c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	210a      	movs	r1, #10
 8006f20:	438a      	bics	r2, r1
 8006f22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2225      	movs	r2, #37	; 0x25
 8006f28:	2101      	movs	r1, #1
 8006f2a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f30:	221c      	movs	r2, #28
 8006f32:	401a      	ands	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	2102      	movs	r1, #2
 8006f3a:	4091      	lsls	r1, r2
 8006f3c:	000a      	movs	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2224      	movs	r2, #36	; 0x24
 8006f44:	2100      	movs	r1, #0
 8006f46:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d039      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	0010      	movs	r0, r2
 8006f58:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006f5a:	e033      	b.n	8006fc4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f60:	221c      	movs	r2, #28
 8006f62:	4013      	ands	r3, r2
 8006f64:	2208      	movs	r2, #8
 8006f66:	409a      	lsls	r2, r3
 8006f68:	0013      	movs	r3, r2
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	d02a      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x154>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2208      	movs	r2, #8
 8006f74:	4013      	ands	r3, r2
 8006f76:	d026      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	210e      	movs	r1, #14
 8006f84:	438a      	bics	r2, r1
 8006f86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8c:	221c      	movs	r2, #28
 8006f8e:	401a      	ands	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	2101      	movs	r1, #1
 8006f96:	4091      	lsls	r1, r2
 8006f98:	000a      	movs	r2, r1
 8006f9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2225      	movs	r2, #37	; 0x25
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2224      	movs	r2, #36	; 0x24
 8006fae:	2100      	movs	r1, #0
 8006fb0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	0010      	movs	r0, r2
 8006fc2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006fc4:	46c0      	nop			; (mov r8, r8)
 8006fc6:	46c0      	nop			; (mov r8, r8)
}
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	b004      	add	sp, #16
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	607a      	str	r2, [r7, #4]
 8006fda:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe0:	221c      	movs	r2, #28
 8006fe2:	401a      	ands	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe8:	2101      	movs	r1, #1
 8006fea:	4091      	lsls	r1, r2
 8006fec:	000a      	movs	r2, r1
 8006fee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	2b10      	cmp	r3, #16
 8006ffe:	d108      	bne.n	8007012 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007010:	e007      	b.n	8007022 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	60da      	str	r2, [r3, #12]
}
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	46bd      	mov	sp, r7
 8007026:	b004      	add	sp, #16
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800703e:	2300      	movs	r3, #0
 8007040:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007042:	e155      	b.n	80072f0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2101      	movs	r1, #1
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	4091      	lsls	r1, r2
 800704e:	000a      	movs	r2, r1
 8007050:	4013      	ands	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d100      	bne.n	800705c <HAL_GPIO_Init+0x30>
 800705a:	e146      	b.n	80072ea <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	2203      	movs	r2, #3
 8007062:	4013      	ands	r3, r2
 8007064:	2b01      	cmp	r3, #1
 8007066:	d005      	beq.n	8007074 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2203      	movs	r2, #3
 800706e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007070:	2b02      	cmp	r3, #2
 8007072:	d130      	bne.n	80070d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	2203      	movs	r2, #3
 8007080:	409a      	lsls	r2, r3
 8007082:	0013      	movs	r3, r2
 8007084:	43da      	mvns	r2, r3
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	4013      	ands	r3, r2
 800708a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	409a      	lsls	r2, r3
 8007096:	0013      	movs	r3, r2
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070aa:	2201      	movs	r2, #1
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	409a      	lsls	r2, r3
 80070b0:	0013      	movs	r3, r2
 80070b2:	43da      	mvns	r2, r3
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	4013      	ands	r3, r2
 80070b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	091b      	lsrs	r3, r3, #4
 80070c0:	2201      	movs	r2, #1
 80070c2:	401a      	ands	r2, r3
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	409a      	lsls	r2, r3
 80070c8:	0013      	movs	r3, r2
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2203      	movs	r2, #3
 80070dc:	4013      	ands	r3, r2
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d017      	beq.n	8007112 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	2203      	movs	r2, #3
 80070ee:	409a      	lsls	r2, r3
 80070f0:	0013      	movs	r3, r2
 80070f2:	43da      	mvns	r2, r3
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	4013      	ands	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	409a      	lsls	r2, r3
 8007104:	0013      	movs	r3, r2
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2203      	movs	r2, #3
 8007118:	4013      	ands	r3, r2
 800711a:	2b02      	cmp	r3, #2
 800711c:	d123      	bne.n	8007166 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	08da      	lsrs	r2, r3, #3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3208      	adds	r2, #8
 8007126:	0092      	lsls	r2, r2, #2
 8007128:	58d3      	ldr	r3, [r2, r3]
 800712a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2207      	movs	r2, #7
 8007130:	4013      	ands	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	220f      	movs	r2, #15
 8007136:	409a      	lsls	r2, r3
 8007138:	0013      	movs	r3, r2
 800713a:	43da      	mvns	r2, r3
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	4013      	ands	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	691a      	ldr	r2, [r3, #16]
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2107      	movs	r1, #7
 800714a:	400b      	ands	r3, r1
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	409a      	lsls	r2, r3
 8007150:	0013      	movs	r3, r2
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	08da      	lsrs	r2, r3, #3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3208      	adds	r2, #8
 8007160:	0092      	lsls	r2, r2, #2
 8007162:	6939      	ldr	r1, [r7, #16]
 8007164:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	2203      	movs	r2, #3
 8007172:	409a      	lsls	r2, r3
 8007174:	0013      	movs	r3, r2
 8007176:	43da      	mvns	r2, r3
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	4013      	ands	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	2203      	movs	r2, #3
 8007184:	401a      	ands	r2, r3
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	409a      	lsls	r2, r3
 800718c:	0013      	movs	r3, r2
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	23c0      	movs	r3, #192	; 0xc0
 80071a0:	029b      	lsls	r3, r3, #10
 80071a2:	4013      	ands	r3, r2
 80071a4:	d100      	bne.n	80071a8 <HAL_GPIO_Init+0x17c>
 80071a6:	e0a0      	b.n	80072ea <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071a8:	4b57      	ldr	r3, [pc, #348]	; (8007308 <HAL_GPIO_Init+0x2dc>)
 80071aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ac:	4b56      	ldr	r3, [pc, #344]	; (8007308 <HAL_GPIO_Init+0x2dc>)
 80071ae:	2101      	movs	r1, #1
 80071b0:	430a      	orrs	r2, r1
 80071b2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80071b4:	4a55      	ldr	r2, [pc, #340]	; (800730c <HAL_GPIO_Init+0x2e0>)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	089b      	lsrs	r3, r3, #2
 80071ba:	3302      	adds	r3, #2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	589b      	ldr	r3, [r3, r2]
 80071c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2203      	movs	r2, #3
 80071c6:	4013      	ands	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	220f      	movs	r2, #15
 80071cc:	409a      	lsls	r2, r3
 80071ce:	0013      	movs	r3, r2
 80071d0:	43da      	mvns	r2, r3
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	4013      	ands	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	23a0      	movs	r3, #160	; 0xa0
 80071dc:	05db      	lsls	r3, r3, #23
 80071de:	429a      	cmp	r2, r3
 80071e0:	d01f      	beq.n	8007222 <HAL_GPIO_Init+0x1f6>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a4a      	ldr	r2, [pc, #296]	; (8007310 <HAL_GPIO_Init+0x2e4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d019      	beq.n	800721e <HAL_GPIO_Init+0x1f2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a49      	ldr	r2, [pc, #292]	; (8007314 <HAL_GPIO_Init+0x2e8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d013      	beq.n	800721a <HAL_GPIO_Init+0x1ee>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a48      	ldr	r2, [pc, #288]	; (8007318 <HAL_GPIO_Init+0x2ec>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00d      	beq.n	8007216 <HAL_GPIO_Init+0x1ea>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a47      	ldr	r2, [pc, #284]	; (800731c <HAL_GPIO_Init+0x2f0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d007      	beq.n	8007212 <HAL_GPIO_Init+0x1e6>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a46      	ldr	r2, [pc, #280]	; (8007320 <HAL_GPIO_Init+0x2f4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d101      	bne.n	800720e <HAL_GPIO_Init+0x1e2>
 800720a:	2305      	movs	r3, #5
 800720c:	e00a      	b.n	8007224 <HAL_GPIO_Init+0x1f8>
 800720e:	2306      	movs	r3, #6
 8007210:	e008      	b.n	8007224 <HAL_GPIO_Init+0x1f8>
 8007212:	2304      	movs	r3, #4
 8007214:	e006      	b.n	8007224 <HAL_GPIO_Init+0x1f8>
 8007216:	2303      	movs	r3, #3
 8007218:	e004      	b.n	8007224 <HAL_GPIO_Init+0x1f8>
 800721a:	2302      	movs	r3, #2
 800721c:	e002      	b.n	8007224 <HAL_GPIO_Init+0x1f8>
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <HAL_GPIO_Init+0x1f8>
 8007222:	2300      	movs	r3, #0
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	2103      	movs	r1, #3
 8007228:	400a      	ands	r2, r1
 800722a:	0092      	lsls	r2, r2, #2
 800722c:	4093      	lsls	r3, r2
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	4313      	orrs	r3, r2
 8007232:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007234:	4935      	ldr	r1, [pc, #212]	; (800730c <HAL_GPIO_Init+0x2e0>)
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	089b      	lsrs	r3, r3, #2
 800723a:	3302      	adds	r3, #2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007242:	4b38      	ldr	r3, [pc, #224]	; (8007324 <HAL_GPIO_Init+0x2f8>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	43da      	mvns	r2, r3
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	4013      	ands	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	2380      	movs	r3, #128	; 0x80
 8007258:	035b      	lsls	r3, r3, #13
 800725a:	4013      	ands	r3, r2
 800725c:	d003      	beq.n	8007266 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007266:	4b2f      	ldr	r3, [pc, #188]	; (8007324 <HAL_GPIO_Init+0x2f8>)
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800726c:	4b2d      	ldr	r3, [pc, #180]	; (8007324 <HAL_GPIO_Init+0x2f8>)
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	43da      	mvns	r2, r3
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	4013      	ands	r3, r2
 800727a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	2380      	movs	r3, #128	; 0x80
 8007282:	039b      	lsls	r3, r3, #14
 8007284:	4013      	ands	r3, r2
 8007286:	d003      	beq.n	8007290 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4313      	orrs	r3, r2
 800728e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007290:	4b24      	ldr	r3, [pc, #144]	; (8007324 <HAL_GPIO_Init+0x2f8>)
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8007296:	4b23      	ldr	r3, [pc, #140]	; (8007324 <HAL_GPIO_Init+0x2f8>)
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	43da      	mvns	r2, r3
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4013      	ands	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	2380      	movs	r3, #128	; 0x80
 80072ac:	029b      	lsls	r3, r3, #10
 80072ae:	4013      	ands	r3, r2
 80072b0:	d003      	beq.n	80072ba <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80072ba:	4b1a      	ldr	r3, [pc, #104]	; (8007324 <HAL_GPIO_Init+0x2f8>)
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80072c0:	4b18      	ldr	r3, [pc, #96]	; (8007324 <HAL_GPIO_Init+0x2f8>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	43da      	mvns	r2, r3
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	4013      	ands	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	2380      	movs	r3, #128	; 0x80
 80072d6:	025b      	lsls	r3, r3, #9
 80072d8:	4013      	ands	r3, r2
 80072da:	d003      	beq.n	80072e4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80072e4:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <HAL_GPIO_Init+0x2f8>)
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	3301      	adds	r3, #1
 80072ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	40da      	lsrs	r2, r3
 80072f8:	1e13      	subs	r3, r2, #0
 80072fa:	d000      	beq.n	80072fe <HAL_GPIO_Init+0x2d2>
 80072fc:	e6a2      	b.n	8007044 <HAL_GPIO_Init+0x18>
  }
}
 80072fe:	46c0      	nop			; (mov r8, r8)
 8007300:	46c0      	nop			; (mov r8, r8)
 8007302:	46bd      	mov	sp, r7
 8007304:	b006      	add	sp, #24
 8007306:	bd80      	pop	{r7, pc}
 8007308:	40021000 	.word	0x40021000
 800730c:	40010000 	.word	0x40010000
 8007310:	50000400 	.word	0x50000400
 8007314:	50000800 	.word	0x50000800
 8007318:	50000c00 	.word	0x50000c00
 800731c:	50001000 	.word	0x50001000
 8007320:	50001c00 	.word	0x50001c00
 8007324:	40010400 	.word	0x40010400

08007328 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	000a      	movs	r2, r1
 8007332:	1cbb      	adds	r3, r7, #2
 8007334:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	1cba      	adds	r2, r7, #2
 800733c:	8812      	ldrh	r2, [r2, #0]
 800733e:	4013      	ands	r3, r2
 8007340:	d004      	beq.n	800734c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007342:	230f      	movs	r3, #15
 8007344:	18fb      	adds	r3, r7, r3
 8007346:	2201      	movs	r2, #1
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	e003      	b.n	8007354 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800734c:	230f      	movs	r3, #15
 800734e:	18fb      	adds	r3, r7, r3
 8007350:	2200      	movs	r2, #0
 8007352:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007354:	230f      	movs	r3, #15
 8007356:	18fb      	adds	r3, r7, r3
 8007358:	781b      	ldrb	r3, [r3, #0]
}
 800735a:	0018      	movs	r0, r3
 800735c:	46bd      	mov	sp, r7
 800735e:	b004      	add	sp, #16
 8007360:	bd80      	pop	{r7, pc}

08007362 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	0008      	movs	r0, r1
 800736c:	0011      	movs	r1, r2
 800736e:	1cbb      	adds	r3, r7, #2
 8007370:	1c02      	adds	r2, r0, #0
 8007372:	801a      	strh	r2, [r3, #0]
 8007374:	1c7b      	adds	r3, r7, #1
 8007376:	1c0a      	adds	r2, r1, #0
 8007378:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800737a:	1c7b      	adds	r3, r7, #1
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d004      	beq.n	800738c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007382:	1cbb      	adds	r3, r7, #2
 8007384:	881a      	ldrh	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800738a:	e003      	b.n	8007394 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800738c:	1cbb      	adds	r3, r7, #2
 800738e:	881a      	ldrh	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007394:	46c0      	nop			; (mov r8, r8)
 8007396:	46bd      	mov	sp, r7
 8007398:	b002      	add	sp, #8
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	000a      	movs	r2, r1
 80073a6:	1cbb      	adds	r3, r7, #2
 80073a8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80073b0:	1cbb      	adds	r3, r7, #2
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4013      	ands	r3, r2
 80073b8:	041a      	lsls	r2, r3, #16
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	43db      	mvns	r3, r3
 80073be:	1cb9      	adds	r1, r7, #2
 80073c0:	8809      	ldrh	r1, [r1, #0]
 80073c2:	400b      	ands	r3, r1
 80073c4:	431a      	orrs	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	619a      	str	r2, [r3, #24]
}
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	46bd      	mov	sp, r7
 80073ce:	b004      	add	sp, #16
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	0002      	movs	r2, r0
 80073dc:	1dbb      	adds	r3, r7, #6
 80073de:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80073e0:	4b09      	ldr	r3, [pc, #36]	; (8007408 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	1dba      	adds	r2, r7, #6
 80073e6:	8812      	ldrh	r2, [r2, #0]
 80073e8:	4013      	ands	r3, r2
 80073ea:	d008      	beq.n	80073fe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80073ec:	4b06      	ldr	r3, [pc, #24]	; (8007408 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80073ee:	1dba      	adds	r2, r7, #6
 80073f0:	8812      	ldrh	r2, [r2, #0]
 80073f2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80073f4:	1dbb      	adds	r3, r7, #6
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	0018      	movs	r0, r3
 80073fa:	f000 f807 	bl	800740c <HAL_GPIO_EXTI_Callback>
  }
}
 80073fe:	46c0      	nop			; (mov r8, r8)
 8007400:	46bd      	mov	sp, r7
 8007402:	b002      	add	sp, #8
 8007404:	bd80      	pop	{r7, pc}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	40010400 	.word	0x40010400

0800740c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	0002      	movs	r2, r0
 8007414:	1dbb      	adds	r3, r7, #6
 8007416:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007418:	46c0      	nop			; (mov r8, r8)
 800741a:	46bd      	mov	sp, r7
 800741c:	b002      	add	sp, #8
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e082      	b.n	8007538 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2241      	movs	r2, #65	; 0x41
 8007436:	5c9b      	ldrb	r3, [r3, r2]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d107      	bne.n	800744e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2240      	movs	r2, #64	; 0x40
 8007442:	2100      	movs	r1, #0
 8007444:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	0018      	movs	r0, r3
 800744a:	f7fe fa37 	bl	80058bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2241      	movs	r2, #65	; 0x41
 8007452:	2124      	movs	r1, #36	; 0x24
 8007454:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2101      	movs	r1, #1
 8007462:	438a      	bics	r2, r1
 8007464:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4934      	ldr	r1, [pc, #208]	; (8007540 <HAL_I2C_Init+0x120>)
 8007470:	400a      	ands	r2, r1
 8007472:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4931      	ldr	r1, [pc, #196]	; (8007544 <HAL_I2C_Init+0x124>)
 8007480:	400a      	ands	r2, r1
 8007482:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d108      	bne.n	800749e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2180      	movs	r1, #128	; 0x80
 8007496:	0209      	lsls	r1, r1, #8
 8007498:	430a      	orrs	r2, r1
 800749a:	609a      	str	r2, [r3, #8]
 800749c:	e007      	b.n	80074ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2184      	movs	r1, #132	; 0x84
 80074a8:	0209      	lsls	r1, r1, #8
 80074aa:	430a      	orrs	r2, r1
 80074ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d104      	bne.n	80074c0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2280      	movs	r2, #128	; 0x80
 80074bc:	0112      	lsls	r2, r2, #4
 80074be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	491f      	ldr	r1, [pc, #124]	; (8007548 <HAL_I2C_Init+0x128>)
 80074cc:	430a      	orrs	r2, r1
 80074ce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	491a      	ldr	r1, [pc, #104]	; (8007544 <HAL_I2C_Init+0x124>)
 80074dc:	400a      	ands	r2, r1
 80074de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691a      	ldr	r2, [r3, #16]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	431a      	orrs	r2, r3
 80074ea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69d9      	ldr	r1, [r3, #28]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1a      	ldr	r2, [r3, #32]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2101      	movs	r1, #1
 8007516:	430a      	orrs	r2, r1
 8007518:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2241      	movs	r2, #65	; 0x41
 8007524:	2120      	movs	r1, #32
 8007526:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2242      	movs	r2, #66	; 0x42
 8007532:	2100      	movs	r1, #0
 8007534:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	0018      	movs	r0, r3
 800753a:	46bd      	mov	sp, r7
 800753c:	b002      	add	sp, #8
 800753e:	bd80      	pop	{r7, pc}
 8007540:	f0ffffff 	.word	0xf0ffffff
 8007544:	ffff7fff 	.word	0xffff7fff
 8007548:	02008000 	.word	0x02008000

0800754c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800754c:	b590      	push	{r4, r7, lr}
 800754e:	b089      	sub	sp, #36	; 0x24
 8007550:	af02      	add	r7, sp, #8
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	0008      	movs	r0, r1
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	0019      	movs	r1, r3
 800755a:	230a      	movs	r3, #10
 800755c:	18fb      	adds	r3, r7, r3
 800755e:	1c02      	adds	r2, r0, #0
 8007560:	801a      	strh	r2, [r3, #0]
 8007562:	2308      	movs	r3, #8
 8007564:	18fb      	adds	r3, r7, r3
 8007566:	1c0a      	adds	r2, r1, #0
 8007568:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2241      	movs	r2, #65	; 0x41
 800756e:	5c9b      	ldrb	r3, [r3, r2]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b20      	cmp	r3, #32
 8007574:	d000      	beq.n	8007578 <HAL_I2C_Master_Transmit+0x2c>
 8007576:	e0e7      	b.n	8007748 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2240      	movs	r2, #64	; 0x40
 800757c:	5c9b      	ldrb	r3, [r3, r2]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d101      	bne.n	8007586 <HAL_I2C_Master_Transmit+0x3a>
 8007582:	2302      	movs	r3, #2
 8007584:	e0e1      	b.n	800774a <HAL_I2C_Master_Transmit+0x1fe>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2240      	movs	r2, #64	; 0x40
 800758a:	2101      	movs	r1, #1
 800758c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800758e:	f7fe fdc9 	bl	8006124 <HAL_GetTick>
 8007592:	0003      	movs	r3, r0
 8007594:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007596:	2380      	movs	r3, #128	; 0x80
 8007598:	0219      	lsls	r1, r3, #8
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	2319      	movs	r3, #25
 80075a2:	2201      	movs	r2, #1
 80075a4:	f000 fa04 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 80075a8:	1e03      	subs	r3, r0, #0
 80075aa:	d001      	beq.n	80075b0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e0cc      	b.n	800774a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2241      	movs	r2, #65	; 0x41
 80075b4:	2121      	movs	r1, #33	; 0x21
 80075b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2242      	movs	r2, #66	; 0x42
 80075bc:	2110      	movs	r1, #16
 80075be:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2208      	movs	r2, #8
 80075d0:	18ba      	adds	r2, r7, r2
 80075d2:	8812      	ldrh	r2, [r2, #0]
 80075d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2bff      	cmp	r3, #255	; 0xff
 80075e4:	d911      	bls.n	800760a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	22ff      	movs	r2, #255	; 0xff
 80075ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	2380      	movs	r3, #128	; 0x80
 80075f4:	045c      	lsls	r4, r3, #17
 80075f6:	230a      	movs	r3, #10
 80075f8:	18fb      	adds	r3, r7, r3
 80075fa:	8819      	ldrh	r1, [r3, #0]
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	4b55      	ldr	r3, [pc, #340]	; (8007754 <HAL_I2C_Master_Transmit+0x208>)
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	0023      	movs	r3, r4
 8007604:	f000 fc2e 	bl	8007e64 <I2C_TransferConfig>
 8007608:	e075      	b.n	80076f6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007618:	b2da      	uxtb	r2, r3
 800761a:	2380      	movs	r3, #128	; 0x80
 800761c:	049c      	lsls	r4, r3, #18
 800761e:	230a      	movs	r3, #10
 8007620:	18fb      	adds	r3, r7, r3
 8007622:	8819      	ldrh	r1, [r3, #0]
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	4b4b      	ldr	r3, [pc, #300]	; (8007754 <HAL_I2C_Master_Transmit+0x208>)
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	0023      	movs	r3, r4
 800762c:	f000 fc1a 	bl	8007e64 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007630:	e061      	b.n	80076f6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	0018      	movs	r0, r3
 800763a:	f000 fa07 	bl	8007a4c <I2C_WaitOnTXISFlagUntilTimeout>
 800763e:	1e03      	subs	r3, r0, #0
 8007640:	d001      	beq.n	8007646 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e081      	b.n	800774a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	781a      	ldrb	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007660:	b29b      	uxth	r3, r3
 8007662:	3b01      	subs	r3, #1
 8007664:	b29a      	uxth	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d03a      	beq.n	80076f6 <HAL_I2C_Master_Transmit+0x1aa>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007684:	2b00      	cmp	r3, #0
 8007686:	d136      	bne.n	80076f6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	0013      	movs	r3, r2
 8007692:	2200      	movs	r2, #0
 8007694:	2180      	movs	r1, #128	; 0x80
 8007696:	f000 f98b 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 800769a:	1e03      	subs	r3, r0, #0
 800769c:	d001      	beq.n	80076a2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e053      	b.n	800774a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	2bff      	cmp	r3, #255	; 0xff
 80076aa:	d911      	bls.n	80076d0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	22ff      	movs	r2, #255	; 0xff
 80076b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	2380      	movs	r3, #128	; 0x80
 80076ba:	045c      	lsls	r4, r3, #17
 80076bc:	230a      	movs	r3, #10
 80076be:	18fb      	adds	r3, r7, r3
 80076c0:	8819      	ldrh	r1, [r3, #0]
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	2300      	movs	r3, #0
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	0023      	movs	r3, r4
 80076ca:	f000 fbcb 	bl	8007e64 <I2C_TransferConfig>
 80076ce:	e012      	b.n	80076f6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	2380      	movs	r3, #128	; 0x80
 80076e2:	049c      	lsls	r4, r3, #18
 80076e4:	230a      	movs	r3, #10
 80076e6:	18fb      	adds	r3, r7, r3
 80076e8:	8819      	ldrh	r1, [r3, #0]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	2300      	movs	r3, #0
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	0023      	movs	r3, r4
 80076f2:	f000 fbb7 	bl	8007e64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d198      	bne.n	8007632 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	0018      	movs	r0, r3
 8007708:	f000 f9e6 	bl	8007ad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800770c:	1e03      	subs	r3, r0, #0
 800770e:	d001      	beq.n	8007714 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e01a      	b.n	800774a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2220      	movs	r2, #32
 800771a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	490c      	ldr	r1, [pc, #48]	; (8007758 <HAL_I2C_Master_Transmit+0x20c>)
 8007728:	400a      	ands	r2, r1
 800772a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2241      	movs	r2, #65	; 0x41
 8007730:	2120      	movs	r1, #32
 8007732:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2242      	movs	r2, #66	; 0x42
 8007738:	2100      	movs	r1, #0
 800773a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2240      	movs	r2, #64	; 0x40
 8007740:	2100      	movs	r1, #0
 8007742:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	e000      	b.n	800774a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8007748:	2302      	movs	r3, #2
  }
}
 800774a:	0018      	movs	r0, r3
 800774c:	46bd      	mov	sp, r7
 800774e:	b007      	add	sp, #28
 8007750:	bd90      	pop	{r4, r7, pc}
 8007752:	46c0      	nop			; (mov r8, r8)
 8007754:	80002000 	.word	0x80002000
 8007758:	fe00e800 	.word	0xfe00e800

0800775c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800775c:	b590      	push	{r4, r7, lr}
 800775e:	b089      	sub	sp, #36	; 0x24
 8007760:	af02      	add	r7, sp, #8
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	0008      	movs	r0, r1
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	0019      	movs	r1, r3
 800776a:	230a      	movs	r3, #10
 800776c:	18fb      	adds	r3, r7, r3
 800776e:	1c02      	adds	r2, r0, #0
 8007770:	801a      	strh	r2, [r3, #0]
 8007772:	2308      	movs	r3, #8
 8007774:	18fb      	adds	r3, r7, r3
 8007776:	1c0a      	adds	r2, r1, #0
 8007778:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2241      	movs	r2, #65	; 0x41
 800777e:	5c9b      	ldrb	r3, [r3, r2]
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b20      	cmp	r3, #32
 8007784:	d000      	beq.n	8007788 <HAL_I2C_Master_Receive+0x2c>
 8007786:	e0e8      	b.n	800795a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2240      	movs	r2, #64	; 0x40
 800778c:	5c9b      	ldrb	r3, [r3, r2]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_I2C_Master_Receive+0x3a>
 8007792:	2302      	movs	r3, #2
 8007794:	e0e2      	b.n	800795c <HAL_I2C_Master_Receive+0x200>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2240      	movs	r2, #64	; 0x40
 800779a:	2101      	movs	r1, #1
 800779c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800779e:	f7fe fcc1 	bl	8006124 <HAL_GetTick>
 80077a2:	0003      	movs	r3, r0
 80077a4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80077a6:	2380      	movs	r3, #128	; 0x80
 80077a8:	0219      	lsls	r1, r3, #8
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	2319      	movs	r3, #25
 80077b2:	2201      	movs	r2, #1
 80077b4:	f000 f8fc 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 80077b8:	1e03      	subs	r3, r0, #0
 80077ba:	d001      	beq.n	80077c0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e0cd      	b.n	800795c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2241      	movs	r2, #65	; 0x41
 80077c4:	2122      	movs	r1, #34	; 0x22
 80077c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2242      	movs	r2, #66	; 0x42
 80077cc:	2110      	movs	r1, #16
 80077ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2208      	movs	r2, #8
 80077e0:	18ba      	adds	r2, r7, r2
 80077e2:	8812      	ldrh	r2, [r2, #0]
 80077e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2bff      	cmp	r3, #255	; 0xff
 80077f4:	d911      	bls.n	800781a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	22ff      	movs	r2, #255	; 0xff
 80077fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007800:	b2da      	uxtb	r2, r3
 8007802:	2380      	movs	r3, #128	; 0x80
 8007804:	045c      	lsls	r4, r3, #17
 8007806:	230a      	movs	r3, #10
 8007808:	18fb      	adds	r3, r7, r3
 800780a:	8819      	ldrh	r1, [r3, #0]
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	4b55      	ldr	r3, [pc, #340]	; (8007964 <HAL_I2C_Master_Receive+0x208>)
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	0023      	movs	r3, r4
 8007814:	f000 fb26 	bl	8007e64 <I2C_TransferConfig>
 8007818:	e076      	b.n	8007908 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781e:	b29a      	uxth	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007828:	b2da      	uxtb	r2, r3
 800782a:	2380      	movs	r3, #128	; 0x80
 800782c:	049c      	lsls	r4, r3, #18
 800782e:	230a      	movs	r3, #10
 8007830:	18fb      	adds	r3, r7, r3
 8007832:	8819      	ldrh	r1, [r3, #0]
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	4b4b      	ldr	r3, [pc, #300]	; (8007964 <HAL_I2C_Master_Receive+0x208>)
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	0023      	movs	r3, r4
 800783c:	f000 fb12 	bl	8007e64 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007840:	e062      	b.n	8007908 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	0018      	movs	r0, r3
 800784a:	f000 f989 	bl	8007b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800784e:	1e03      	subs	r3, r0, #0
 8007850:	d001      	beq.n	8007856 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e082      	b.n	800795c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007860:	b2d2      	uxtb	r2, r2
 8007862:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007872:	3b01      	subs	r3, #1
 8007874:	b29a      	uxth	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800787e:	b29b      	uxth	r3, r3
 8007880:	3b01      	subs	r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788c:	b29b      	uxth	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d03a      	beq.n	8007908 <HAL_I2C_Master_Receive+0x1ac>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007896:	2b00      	cmp	r3, #0
 8007898:	d136      	bne.n	8007908 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800789a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	0013      	movs	r3, r2
 80078a4:	2200      	movs	r2, #0
 80078a6:	2180      	movs	r1, #128	; 0x80
 80078a8:	f000 f882 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 80078ac:	1e03      	subs	r3, r0, #0
 80078ae:	d001      	beq.n	80078b4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e053      	b.n	800795c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2bff      	cmp	r3, #255	; 0xff
 80078bc:	d911      	bls.n	80078e2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	22ff      	movs	r2, #255	; 0xff
 80078c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	2380      	movs	r3, #128	; 0x80
 80078cc:	045c      	lsls	r4, r3, #17
 80078ce:	230a      	movs	r3, #10
 80078d0:	18fb      	adds	r3, r7, r3
 80078d2:	8819      	ldrh	r1, [r3, #0]
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	2300      	movs	r3, #0
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	0023      	movs	r3, r4
 80078dc:	f000 fac2 	bl	8007e64 <I2C_TransferConfig>
 80078e0:	e012      	b.n	8007908 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	2380      	movs	r3, #128	; 0x80
 80078f4:	049c      	lsls	r4, r3, #18
 80078f6:	230a      	movs	r3, #10
 80078f8:	18fb      	adds	r3, r7, r3
 80078fa:	8819      	ldrh	r1, [r3, #0]
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	2300      	movs	r3, #0
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	0023      	movs	r3, r4
 8007904:	f000 faae 	bl	8007e64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d197      	bne.n	8007842 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	0018      	movs	r0, r3
 800791a:	f000 f8dd 	bl	8007ad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800791e:	1e03      	subs	r3, r0, #0
 8007920:	d001      	beq.n	8007926 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e01a      	b.n	800795c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2220      	movs	r2, #32
 800792c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	490b      	ldr	r1, [pc, #44]	; (8007968 <HAL_I2C_Master_Receive+0x20c>)
 800793a:	400a      	ands	r2, r1
 800793c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2241      	movs	r2, #65	; 0x41
 8007942:	2120      	movs	r1, #32
 8007944:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2242      	movs	r2, #66	; 0x42
 800794a:	2100      	movs	r1, #0
 800794c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2240      	movs	r2, #64	; 0x40
 8007952:	2100      	movs	r1, #0
 8007954:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	e000      	b.n	800795c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800795a:	2302      	movs	r3, #2
  }
}
 800795c:	0018      	movs	r0, r3
 800795e:	46bd      	mov	sp, r7
 8007960:	b007      	add	sp, #28
 8007962:	bd90      	pop	{r4, r7, pc}
 8007964:	80002400 	.word	0x80002400
 8007968:	fe00e800 	.word	0xfe00e800

0800796c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	2202      	movs	r2, #2
 800797c:	4013      	ands	r3, r2
 800797e:	2b02      	cmp	r3, #2
 8007980:	d103      	bne.n	800798a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2200      	movs	r2, #0
 8007988:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	2201      	movs	r2, #1
 8007992:	4013      	ands	r3, r2
 8007994:	2b01      	cmp	r3, #1
 8007996:	d007      	beq.n	80079a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	699a      	ldr	r2, [r3, #24]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2101      	movs	r1, #1
 80079a4:	430a      	orrs	r2, r1
 80079a6:	619a      	str	r2, [r3, #24]
  }
}
 80079a8:	46c0      	nop			; (mov r8, r8)
 80079aa:	46bd      	mov	sp, r7
 80079ac:	b002      	add	sp, #8
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	1dfb      	adds	r3, r7, #7
 80079be:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079c0:	e030      	b.n	8007a24 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	3301      	adds	r3, #1
 80079c6:	d02d      	beq.n	8007a24 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079c8:	f7fe fbac 	bl	8006124 <HAL_GetTick>
 80079cc:	0002      	movs	r2, r0
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d302      	bcc.n	80079de <I2C_WaitOnFlagUntilTimeout+0x2e>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d122      	bne.n	8007a24 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	4013      	ands	r3, r2
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	425a      	negs	r2, r3
 80079ee:	4153      	adcs	r3, r2
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	001a      	movs	r2, r3
 80079f4:	1dfb      	adds	r3, r7, #7
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d113      	bne.n	8007a24 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a00:	2220      	movs	r2, #32
 8007a02:	431a      	orrs	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2241      	movs	r2, #65	; 0x41
 8007a0c:	2120      	movs	r1, #32
 8007a0e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2242      	movs	r2, #66	; 0x42
 8007a14:	2100      	movs	r1, #0
 8007a16:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2240      	movs	r2, #64	; 0x40
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e00f      	b.n	8007a44 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	425a      	negs	r2, r3
 8007a34:	4153      	adcs	r3, r2
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	001a      	movs	r2, r3
 8007a3a:	1dfb      	adds	r3, r7, #7
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d0bf      	beq.n	80079c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	0018      	movs	r0, r3
 8007a46:	46bd      	mov	sp, r7
 8007a48:	b004      	add	sp, #16
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a58:	e032      	b.n	8007ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	68b9      	ldr	r1, [r7, #8]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	0018      	movs	r0, r3
 8007a62:	f000 f8ff 	bl	8007c64 <I2C_IsErrorOccurred>
 8007a66:	1e03      	subs	r3, r0, #0
 8007a68:	d001      	beq.n	8007a6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e030      	b.n	8007ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	3301      	adds	r3, #1
 8007a72:	d025      	beq.n	8007ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a74:	f7fe fb56 	bl	8006124 <HAL_GetTick>
 8007a78:	0002      	movs	r2, r0
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d302      	bcc.n	8007a8a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d11a      	bne.n	8007ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	2202      	movs	r2, #2
 8007a92:	4013      	ands	r3, r2
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d013      	beq.n	8007ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2241      	movs	r2, #65	; 0x41
 8007aa8:	2120      	movs	r1, #32
 8007aaa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2242      	movs	r2, #66	; 0x42
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2240      	movs	r2, #64	; 0x40
 8007ab8:	2100      	movs	r1, #0
 8007aba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e007      	b.n	8007ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	4013      	ands	r3, r2
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d1c5      	bne.n	8007a5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	0018      	movs	r0, r3
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	b004      	add	sp, #16
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ae4:	e02f      	b.n	8007b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	0018      	movs	r0, r3
 8007aee:	f000 f8b9 	bl	8007c64 <I2C_IsErrorOccurred>
 8007af2:	1e03      	subs	r3, r0, #0
 8007af4:	d001      	beq.n	8007afa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e02d      	b.n	8007b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007afa:	f7fe fb13 	bl	8006124 <HAL_GetTick>
 8007afe:	0002      	movs	r2, r0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d302      	bcc.n	8007b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d11a      	bne.n	8007b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	2220      	movs	r2, #32
 8007b18:	4013      	ands	r3, r2
 8007b1a:	2b20      	cmp	r3, #32
 8007b1c:	d013      	beq.n	8007b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b22:	2220      	movs	r2, #32
 8007b24:	431a      	orrs	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2241      	movs	r2, #65	; 0x41
 8007b2e:	2120      	movs	r1, #32
 8007b30:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2242      	movs	r2, #66	; 0x42
 8007b36:	2100      	movs	r1, #0
 8007b38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2240      	movs	r2, #64	; 0x40
 8007b3e:	2100      	movs	r1, #0
 8007b40:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e007      	b.n	8007b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	4013      	ands	r3, r2
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d1c8      	bne.n	8007ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	0018      	movs	r0, r3
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	b004      	add	sp, #16
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b6c:	e06b      	b.n	8007c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	0018      	movs	r0, r3
 8007b76:	f000 f875 	bl	8007c64 <I2C_IsErrorOccurred>
 8007b7a:	1e03      	subs	r3, r0, #0
 8007b7c:	d001      	beq.n	8007b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e069      	b.n	8007c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d138      	bne.n	8007c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	2204      	movs	r2, #4
 8007b98:	4013      	ands	r3, r2
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d105      	bne.n	8007baa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e055      	b.n	8007c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	2210      	movs	r2, #16
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	2b10      	cmp	r3, #16
 8007bb6:	d107      	bne.n	8007bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2210      	movs	r2, #16
 8007bbe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2204      	movs	r2, #4
 8007bc4:	645a      	str	r2, [r3, #68]	; 0x44
 8007bc6:	e002      	b.n	8007bce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	491f      	ldr	r1, [pc, #124]	; (8007c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8007be2:	400a      	ands	r2, r1
 8007be4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2241      	movs	r2, #65	; 0x41
 8007bea:	2120      	movs	r1, #32
 8007bec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2242      	movs	r2, #66	; 0x42
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2240      	movs	r2, #64	; 0x40
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e029      	b.n	8007c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c02:	f7fe fa8f 	bl	8006124 <HAL_GetTick>
 8007c06:	0002      	movs	r2, r0
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d302      	bcc.n	8007c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d116      	bne.n	8007c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	2204      	movs	r2, #4
 8007c20:	4013      	ands	r3, r2
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d00f      	beq.n	8007c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2a:	2220      	movs	r2, #32
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2241      	movs	r2, #65	; 0x41
 8007c36:	2120      	movs	r1, #32
 8007c38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2240      	movs	r2, #64	; 0x40
 8007c3e:	2100      	movs	r1, #0
 8007c40:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e007      	b.n	8007c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	4013      	ands	r3, r2
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d18c      	bne.n	8007b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	0018      	movs	r0, r3
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	b004      	add	sp, #16
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	fe00e800 	.word	0xfe00e800

08007c64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c64:	b590      	push	{r4, r7, lr}
 8007c66:	b08b      	sub	sp, #44	; 0x2c
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c70:	2327      	movs	r3, #39	; 0x27
 8007c72:	18fb      	adds	r3, r7, r3
 8007c74:	2200      	movs	r2, #0
 8007c76:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	2210      	movs	r2, #16
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	d100      	bne.n	8007c92 <I2C_IsErrorOccurred+0x2e>
 8007c90:	e082      	b.n	8007d98 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2210      	movs	r2, #16
 8007c98:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c9a:	e060      	b.n	8007d5e <I2C_IsErrorOccurred+0xfa>
 8007c9c:	2427      	movs	r4, #39	; 0x27
 8007c9e:	193b      	adds	r3, r7, r4
 8007ca0:	193a      	adds	r2, r7, r4
 8007ca2:	7812      	ldrb	r2, [r2, #0]
 8007ca4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	d058      	beq.n	8007d5e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007cac:	f7fe fa3a 	bl	8006124 <HAL_GetTick>
 8007cb0:	0002      	movs	r2, r0
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d306      	bcc.n	8007cca <I2C_IsErrorOccurred+0x66>
 8007cbc:	193b      	adds	r3, r7, r4
 8007cbe:	193a      	adds	r2, r7, r4
 8007cc0:	7812      	ldrb	r2, [r2, #0]
 8007cc2:	701a      	strb	r2, [r3, #0]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d149      	bne.n	8007d5e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	2380      	movs	r3, #128	; 0x80
 8007cd2:	01db      	lsls	r3, r3, #7
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007cd8:	2013      	movs	r0, #19
 8007cda:	183b      	adds	r3, r7, r0
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	2142      	movs	r1, #66	; 0x42
 8007ce0:	5c52      	ldrb	r2, [r2, r1]
 8007ce2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	2380      	movs	r3, #128	; 0x80
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	401a      	ands	r2, r3
 8007cf0:	2380      	movs	r3, #128	; 0x80
 8007cf2:	021b      	lsls	r3, r3, #8
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d126      	bne.n	8007d46 <I2C_IsErrorOccurred+0xe2>
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	2380      	movs	r3, #128	; 0x80
 8007cfc:	01db      	lsls	r3, r3, #7
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d021      	beq.n	8007d46 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8007d02:	183b      	adds	r3, r7, r0
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b20      	cmp	r3, #32
 8007d08:	d01d      	beq.n	8007d46 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2180      	movs	r1, #128	; 0x80
 8007d16:	01c9      	lsls	r1, r1, #7
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007d1c:	f7fe fa02 	bl	8006124 <HAL_GetTick>
 8007d20:	0003      	movs	r3, r0
 8007d22:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d24:	e00f      	b.n	8007d46 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007d26:	f7fe f9fd 	bl	8006124 <HAL_GetTick>
 8007d2a:	0002      	movs	r2, r0
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b19      	cmp	r3, #25
 8007d32:	d908      	bls.n	8007d46 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	2220      	movs	r2, #32
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007d3c:	2327      	movs	r3, #39	; 0x27
 8007d3e:	18fb      	adds	r3, r7, r3
 8007d40:	2201      	movs	r2, #1
 8007d42:	701a      	strb	r2, [r3, #0]

              break;
 8007d44:	e00b      	b.n	8007d5e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	4013      	ands	r3, r2
 8007d50:	2127      	movs	r1, #39	; 0x27
 8007d52:	187a      	adds	r2, r7, r1
 8007d54:	1879      	adds	r1, r7, r1
 8007d56:	7809      	ldrb	r1, [r1, #0]
 8007d58:	7011      	strb	r1, [r2, #0]
 8007d5a:	2b20      	cmp	r3, #32
 8007d5c:	d1e3      	bne.n	8007d26 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	2220      	movs	r2, #32
 8007d66:	4013      	ands	r3, r2
 8007d68:	2b20      	cmp	r3, #32
 8007d6a:	d004      	beq.n	8007d76 <I2C_IsErrorOccurred+0x112>
 8007d6c:	2327      	movs	r3, #39	; 0x27
 8007d6e:	18fb      	adds	r3, r7, r3
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d092      	beq.n	8007c9c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007d76:	2327      	movs	r3, #39	; 0x27
 8007d78:	18fb      	adds	r3, r7, r3
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d103      	bne.n	8007d88 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2220      	movs	r2, #32
 8007d86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	2204      	movs	r2, #4
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007d90:	2327      	movs	r3, #39	; 0x27
 8007d92:	18fb      	adds	r3, r7, r3
 8007d94:	2201      	movs	r2, #1
 8007d96:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	2380      	movs	r3, #128	; 0x80
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	4013      	ands	r3, r2
 8007da8:	d00c      	beq.n	8007dc4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	2201      	movs	r2, #1
 8007dae:	4313      	orrs	r3, r2
 8007db0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2280      	movs	r2, #128	; 0x80
 8007db8:	0052      	lsls	r2, r2, #1
 8007dba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007dbc:	2327      	movs	r3, #39	; 0x27
 8007dbe:	18fb      	adds	r3, r7, r3
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	2380      	movs	r3, #128	; 0x80
 8007dc8:	00db      	lsls	r3, r3, #3
 8007dca:	4013      	ands	r3, r2
 8007dcc:	d00c      	beq.n	8007de8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	2208      	movs	r2, #8
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2280      	movs	r2, #128	; 0x80
 8007ddc:	00d2      	lsls	r2, r2, #3
 8007dde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007de0:	2327      	movs	r3, #39	; 0x27
 8007de2:	18fb      	adds	r3, r7, r3
 8007de4:	2201      	movs	r2, #1
 8007de6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	2380      	movs	r3, #128	; 0x80
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4013      	ands	r3, r2
 8007df0:	d00c      	beq.n	8007e0c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	2202      	movs	r2, #2
 8007df6:	4313      	orrs	r3, r2
 8007df8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2280      	movs	r2, #128	; 0x80
 8007e00:	0092      	lsls	r2, r2, #2
 8007e02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e04:	2327      	movs	r3, #39	; 0x27
 8007e06:	18fb      	adds	r3, r7, r3
 8007e08:	2201      	movs	r2, #1
 8007e0a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007e0c:	2327      	movs	r3, #39	; 0x27
 8007e0e:	18fb      	adds	r3, r7, r3
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d01d      	beq.n	8007e52 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f7ff fda7 	bl	800796c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	490d      	ldr	r1, [pc, #52]	; (8007e60 <I2C_IsErrorOccurred+0x1fc>)
 8007e2a:	400a      	ands	r2, r1
 8007e2c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	431a      	orrs	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2241      	movs	r2, #65	; 0x41
 8007e3e:	2120      	movs	r1, #32
 8007e40:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2242      	movs	r2, #66	; 0x42
 8007e46:	2100      	movs	r1, #0
 8007e48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2240      	movs	r2, #64	; 0x40
 8007e4e:	2100      	movs	r1, #0
 8007e50:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007e52:	2327      	movs	r3, #39	; 0x27
 8007e54:	18fb      	adds	r3, r7, r3
 8007e56:	781b      	ldrb	r3, [r3, #0]
}
 8007e58:	0018      	movs	r0, r3
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	b00b      	add	sp, #44	; 0x2c
 8007e5e:	bd90      	pop	{r4, r7, pc}
 8007e60:	fe00e800 	.word	0xfe00e800

08007e64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e64:	b590      	push	{r4, r7, lr}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	0008      	movs	r0, r1
 8007e6e:	0011      	movs	r1, r2
 8007e70:	607b      	str	r3, [r7, #4]
 8007e72:	240a      	movs	r4, #10
 8007e74:	193b      	adds	r3, r7, r4
 8007e76:	1c02      	adds	r2, r0, #0
 8007e78:	801a      	strh	r2, [r3, #0]
 8007e7a:	2009      	movs	r0, #9
 8007e7c:	183b      	adds	r3, r7, r0
 8007e7e:	1c0a      	adds	r2, r1, #0
 8007e80:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e82:	193b      	adds	r3, r7, r4
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	059b      	lsls	r3, r3, #22
 8007e88:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e8a:	183b      	adds	r3, r7, r0
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	0419      	lsls	r1, r3, #16
 8007e90:	23ff      	movs	r3, #255	; 0xff
 8007e92:	041b      	lsls	r3, r3, #16
 8007e94:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e96:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	085b      	lsrs	r3, r3, #1
 8007ea4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eae:	0d51      	lsrs	r1, r2, #21
 8007eb0:	2280      	movs	r2, #128	; 0x80
 8007eb2:	00d2      	lsls	r2, r2, #3
 8007eb4:	400a      	ands	r2, r1
 8007eb6:	4907      	ldr	r1, [pc, #28]	; (8007ed4 <I2C_TransferConfig+0x70>)
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	43d2      	mvns	r2, r2
 8007ebc:	401a      	ands	r2, r3
 8007ebe:	0011      	movs	r1, r2
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007eca:	46c0      	nop			; (mov r8, r8)
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	b007      	add	sp, #28
 8007ed0:	bd90      	pop	{r4, r7, pc}
 8007ed2:	46c0      	nop			; (mov r8, r8)
 8007ed4:	03ff63ff 	.word	0x03ff63ff

08007ed8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2241      	movs	r2, #65	; 0x41
 8007ee6:	5c9b      	ldrb	r3, [r3, r2]
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b20      	cmp	r3, #32
 8007eec:	d138      	bne.n	8007f60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2240      	movs	r2, #64	; 0x40
 8007ef2:	5c9b      	ldrb	r3, [r3, r2]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d101      	bne.n	8007efc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	e032      	b.n	8007f62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2240      	movs	r2, #64	; 0x40
 8007f00:	2101      	movs	r1, #1
 8007f02:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2241      	movs	r2, #65	; 0x41
 8007f08:	2124      	movs	r1, #36	; 0x24
 8007f0a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2101      	movs	r1, #1
 8007f18:	438a      	bics	r2, r1
 8007f1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4911      	ldr	r1, [pc, #68]	; (8007f6c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007f28:	400a      	ands	r2, r1
 8007f2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6819      	ldr	r1, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2101      	movs	r1, #1
 8007f48:	430a      	orrs	r2, r1
 8007f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2241      	movs	r2, #65	; 0x41
 8007f50:	2120      	movs	r1, #32
 8007f52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2240      	movs	r2, #64	; 0x40
 8007f58:	2100      	movs	r1, #0
 8007f5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	e000      	b.n	8007f62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f60:	2302      	movs	r3, #2
  }
}
 8007f62:	0018      	movs	r0, r3
 8007f64:	46bd      	mov	sp, r7
 8007f66:	b002      	add	sp, #8
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	46c0      	nop			; (mov r8, r8)
 8007f6c:	ffffefff 	.word	0xffffefff

08007f70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2241      	movs	r2, #65	; 0x41
 8007f7e:	5c9b      	ldrb	r3, [r3, r2]
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	d139      	bne.n	8007ffa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2240      	movs	r2, #64	; 0x40
 8007f8a:	5c9b      	ldrb	r3, [r3, r2]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d101      	bne.n	8007f94 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f90:	2302      	movs	r3, #2
 8007f92:	e033      	b.n	8007ffc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2240      	movs	r2, #64	; 0x40
 8007f98:	2101      	movs	r1, #1
 8007f9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2241      	movs	r2, #65	; 0x41
 8007fa0:	2124      	movs	r1, #36	; 0x24
 8007fa2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2101      	movs	r1, #1
 8007fb0:	438a      	bics	r2, r1
 8007fb2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4a11      	ldr	r2, [pc, #68]	; (8008004 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	021b      	lsls	r3, r3, #8
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2241      	movs	r2, #65	; 0x41
 8007fea:	2120      	movs	r1, #32
 8007fec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2240      	movs	r2, #64	; 0x40
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e000      	b.n	8007ffc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ffa:	2302      	movs	r3, #2
  }
}
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	46bd      	mov	sp, r7
 8008000:	b004      	add	sp, #16
 8008002:	bd80      	pop	{r7, pc}
 8008004:	fffff0ff 	.word	0xfffff0ff

08008008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008008:	b5b0      	push	{r4, r5, r7, lr}
 800800a:	b08a      	sub	sp, #40	; 0x28
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d102      	bne.n	800801c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	f000 fb6c 	bl	80086f4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800801c:	4bc8      	ldr	r3, [pc, #800]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	220c      	movs	r2, #12
 8008022:	4013      	ands	r3, r2
 8008024:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008026:	4bc6      	ldr	r3, [pc, #792]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	2380      	movs	r3, #128	; 0x80
 800802c:	025b      	lsls	r3, r3, #9
 800802e:	4013      	ands	r3, r2
 8008030:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2201      	movs	r2, #1
 8008038:	4013      	ands	r3, r2
 800803a:	d100      	bne.n	800803e <HAL_RCC_OscConfig+0x36>
 800803c:	e07d      	b.n	800813a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	2b08      	cmp	r3, #8
 8008042:	d007      	beq.n	8008054 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	2b0c      	cmp	r3, #12
 8008048:	d112      	bne.n	8008070 <HAL_RCC_OscConfig+0x68>
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	2380      	movs	r3, #128	; 0x80
 800804e:	025b      	lsls	r3, r3, #9
 8008050:	429a      	cmp	r2, r3
 8008052:	d10d      	bne.n	8008070 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008054:	4bba      	ldr	r3, [pc, #744]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	2380      	movs	r3, #128	; 0x80
 800805a:	029b      	lsls	r3, r3, #10
 800805c:	4013      	ands	r3, r2
 800805e:	d100      	bne.n	8008062 <HAL_RCC_OscConfig+0x5a>
 8008060:	e06a      	b.n	8008138 <HAL_RCC_OscConfig+0x130>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d166      	bne.n	8008138 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	f000 fb42 	bl	80086f4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	2380      	movs	r3, #128	; 0x80
 8008076:	025b      	lsls	r3, r3, #9
 8008078:	429a      	cmp	r2, r3
 800807a:	d107      	bne.n	800808c <HAL_RCC_OscConfig+0x84>
 800807c:	4bb0      	ldr	r3, [pc, #704]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	4baf      	ldr	r3, [pc, #700]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 8008082:	2180      	movs	r1, #128	; 0x80
 8008084:	0249      	lsls	r1, r1, #9
 8008086:	430a      	orrs	r2, r1
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	e027      	b.n	80080dc <HAL_RCC_OscConfig+0xd4>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	23a0      	movs	r3, #160	; 0xa0
 8008092:	02db      	lsls	r3, r3, #11
 8008094:	429a      	cmp	r2, r3
 8008096:	d10e      	bne.n	80080b6 <HAL_RCC_OscConfig+0xae>
 8008098:	4ba9      	ldr	r3, [pc, #676]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	4ba8      	ldr	r3, [pc, #672]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 800809e:	2180      	movs	r1, #128	; 0x80
 80080a0:	02c9      	lsls	r1, r1, #11
 80080a2:	430a      	orrs	r2, r1
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	4ba6      	ldr	r3, [pc, #664]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	4ba5      	ldr	r3, [pc, #660]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80080ac:	2180      	movs	r1, #128	; 0x80
 80080ae:	0249      	lsls	r1, r1, #9
 80080b0:	430a      	orrs	r2, r1
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	e012      	b.n	80080dc <HAL_RCC_OscConfig+0xd4>
 80080b6:	4ba2      	ldr	r3, [pc, #648]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	4ba1      	ldr	r3, [pc, #644]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80080bc:	49a1      	ldr	r1, [pc, #644]	; (8008344 <HAL_RCC_OscConfig+0x33c>)
 80080be:	400a      	ands	r2, r1
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	4b9f      	ldr	r3, [pc, #636]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	2380      	movs	r3, #128	; 0x80
 80080c8:	025b      	lsls	r3, r3, #9
 80080ca:	4013      	ands	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4b9b      	ldr	r3, [pc, #620]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	4b9a      	ldr	r3, [pc, #616]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80080d6:	499c      	ldr	r1, [pc, #624]	; (8008348 <HAL_RCC_OscConfig+0x340>)
 80080d8:	400a      	ands	r2, r1
 80080da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d014      	beq.n	800810e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080e4:	f7fe f81e 	bl	8006124 <HAL_GetTick>
 80080e8:	0003      	movs	r3, r0
 80080ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080ec:	e008      	b.n	8008100 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080ee:	f7fe f819 	bl	8006124 <HAL_GetTick>
 80080f2:	0002      	movs	r2, r0
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	2b64      	cmp	r3, #100	; 0x64
 80080fa:	d901      	bls.n	8008100 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e2f9      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008100:	4b8f      	ldr	r3, [pc, #572]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	2380      	movs	r3, #128	; 0x80
 8008106:	029b      	lsls	r3, r3, #10
 8008108:	4013      	ands	r3, r2
 800810a:	d0f0      	beq.n	80080ee <HAL_RCC_OscConfig+0xe6>
 800810c:	e015      	b.n	800813a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800810e:	f7fe f809 	bl	8006124 <HAL_GetTick>
 8008112:	0003      	movs	r3, r0
 8008114:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008116:	e008      	b.n	800812a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008118:	f7fe f804 	bl	8006124 <HAL_GetTick>
 800811c:	0002      	movs	r2, r0
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b64      	cmp	r3, #100	; 0x64
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e2e4      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800812a:	4b85      	ldr	r3, [pc, #532]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	2380      	movs	r3, #128	; 0x80
 8008130:	029b      	lsls	r3, r3, #10
 8008132:	4013      	ands	r3, r2
 8008134:	d1f0      	bne.n	8008118 <HAL_RCC_OscConfig+0x110>
 8008136:	e000      	b.n	800813a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008138:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2202      	movs	r2, #2
 8008140:	4013      	ands	r3, r2
 8008142:	d100      	bne.n	8008146 <HAL_RCC_OscConfig+0x13e>
 8008144:	e099      	b.n	800827a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	2220      	movs	r2, #32
 8008150:	4013      	ands	r3, r2
 8008152:	d009      	beq.n	8008168 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8008154:	4b7a      	ldr	r3, [pc, #488]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	4b79      	ldr	r3, [pc, #484]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 800815a:	2120      	movs	r1, #32
 800815c:	430a      	orrs	r2, r1
 800815e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	2220      	movs	r2, #32
 8008164:	4393      	bics	r3, r2
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	2b04      	cmp	r3, #4
 800816c:	d005      	beq.n	800817a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	2b0c      	cmp	r3, #12
 8008172:	d13e      	bne.n	80081f2 <HAL_RCC_OscConfig+0x1ea>
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d13b      	bne.n	80081f2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800817a:	4b71      	ldr	r3, [pc, #452]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2204      	movs	r2, #4
 8008180:	4013      	ands	r3, r2
 8008182:	d004      	beq.n	800818e <HAL_RCC_OscConfig+0x186>
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e2b2      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800818e:	4b6c      	ldr	r3, [pc, #432]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	4a6e      	ldr	r2, [pc, #440]	; (800834c <HAL_RCC_OscConfig+0x344>)
 8008194:	4013      	ands	r3, r2
 8008196:	0019      	movs	r1, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	021a      	lsls	r2, r3, #8
 800819e:	4b68      	ldr	r3, [pc, #416]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80081a0:	430a      	orrs	r2, r1
 80081a2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80081a4:	4b66      	ldr	r3, [pc, #408]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2209      	movs	r2, #9
 80081aa:	4393      	bics	r3, r2
 80081ac:	0019      	movs	r1, r3
 80081ae:	4b64      	ldr	r3, [pc, #400]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80081b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b2:	430a      	orrs	r2, r1
 80081b4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80081b6:	f000 fbeb 	bl	8008990 <HAL_RCC_GetSysClockFreq>
 80081ba:	0001      	movs	r1, r0
 80081bc:	4b60      	ldr	r3, [pc, #384]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	091b      	lsrs	r3, r3, #4
 80081c2:	220f      	movs	r2, #15
 80081c4:	4013      	ands	r3, r2
 80081c6:	4a62      	ldr	r2, [pc, #392]	; (8008350 <HAL_RCC_OscConfig+0x348>)
 80081c8:	5cd3      	ldrb	r3, [r2, r3]
 80081ca:	000a      	movs	r2, r1
 80081cc:	40da      	lsrs	r2, r3
 80081ce:	4b61      	ldr	r3, [pc, #388]	; (8008354 <HAL_RCC_OscConfig+0x34c>)
 80081d0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80081d2:	4b61      	ldr	r3, [pc, #388]	; (8008358 <HAL_RCC_OscConfig+0x350>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2513      	movs	r5, #19
 80081d8:	197c      	adds	r4, r7, r5
 80081da:	0018      	movs	r0, r3
 80081dc:	f7fd ff5c 	bl	8006098 <HAL_InitTick>
 80081e0:	0003      	movs	r3, r0
 80081e2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80081e4:	197b      	adds	r3, r7, r5
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d046      	beq.n	800827a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80081ec:	197b      	adds	r3, r7, r5
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	e280      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d027      	beq.n	8008248 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80081f8:	4b51      	ldr	r3, [pc, #324]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2209      	movs	r2, #9
 80081fe:	4393      	bics	r3, r2
 8008200:	0019      	movs	r1, r3
 8008202:	4b4f      	ldr	r3, [pc, #316]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 8008204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008206:	430a      	orrs	r2, r1
 8008208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800820a:	f7fd ff8b 	bl	8006124 <HAL_GetTick>
 800820e:	0003      	movs	r3, r0
 8008210:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008212:	e008      	b.n	8008226 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008214:	f7fd ff86 	bl	8006124 <HAL_GetTick>
 8008218:	0002      	movs	r2, r0
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	2b02      	cmp	r3, #2
 8008220:	d901      	bls.n	8008226 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e266      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008226:	4b46      	ldr	r3, [pc, #280]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2204      	movs	r2, #4
 800822c:	4013      	ands	r3, r2
 800822e:	d0f1      	beq.n	8008214 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008230:	4b43      	ldr	r3, [pc, #268]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	4a45      	ldr	r2, [pc, #276]	; (800834c <HAL_RCC_OscConfig+0x344>)
 8008236:	4013      	ands	r3, r2
 8008238:	0019      	movs	r1, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	021a      	lsls	r2, r3, #8
 8008240:	4b3f      	ldr	r3, [pc, #252]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 8008242:	430a      	orrs	r2, r1
 8008244:	605a      	str	r2, [r3, #4]
 8008246:	e018      	b.n	800827a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008248:	4b3d      	ldr	r3, [pc, #244]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	4b3c      	ldr	r3, [pc, #240]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 800824e:	2101      	movs	r1, #1
 8008250:	438a      	bics	r2, r1
 8008252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008254:	f7fd ff66 	bl	8006124 <HAL_GetTick>
 8008258:	0003      	movs	r3, r0
 800825a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800825c:	e008      	b.n	8008270 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800825e:	f7fd ff61 	bl	8006124 <HAL_GetTick>
 8008262:	0002      	movs	r2, r0
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	2b02      	cmp	r3, #2
 800826a:	d901      	bls.n	8008270 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e241      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008270:	4b33      	ldr	r3, [pc, #204]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2204      	movs	r2, #4
 8008276:	4013      	ands	r3, r2
 8008278:	d1f1      	bne.n	800825e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2210      	movs	r2, #16
 8008280:	4013      	ands	r3, r2
 8008282:	d100      	bne.n	8008286 <HAL_RCC_OscConfig+0x27e>
 8008284:	e0a1      	b.n	80083ca <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d140      	bne.n	800830e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800828c:	4b2c      	ldr	r3, [pc, #176]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	2380      	movs	r3, #128	; 0x80
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4013      	ands	r3, r2
 8008296:	d005      	beq.n	80082a4 <HAL_RCC_OscConfig+0x29c>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e227      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80082a4:	4b26      	ldr	r3, [pc, #152]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	4a2c      	ldr	r2, [pc, #176]	; (800835c <HAL_RCC_OscConfig+0x354>)
 80082aa:	4013      	ands	r3, r2
 80082ac:	0019      	movs	r1, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a1a      	ldr	r2, [r3, #32]
 80082b2:	4b23      	ldr	r3, [pc, #140]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80082b4:	430a      	orrs	r2, r1
 80082b6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80082b8:	4b21      	ldr	r3, [pc, #132]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	0a19      	lsrs	r1, r3, #8
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	061a      	lsls	r2, r3, #24
 80082c6:	4b1e      	ldr	r3, [pc, #120]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80082c8:	430a      	orrs	r2, r1
 80082ca:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	0b5b      	lsrs	r3, r3, #13
 80082d2:	3301      	adds	r3, #1
 80082d4:	2280      	movs	r2, #128	; 0x80
 80082d6:	0212      	lsls	r2, r2, #8
 80082d8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80082da:	4b19      	ldr	r3, [pc, #100]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	091b      	lsrs	r3, r3, #4
 80082e0:	210f      	movs	r1, #15
 80082e2:	400b      	ands	r3, r1
 80082e4:	491a      	ldr	r1, [pc, #104]	; (8008350 <HAL_RCC_OscConfig+0x348>)
 80082e6:	5ccb      	ldrb	r3, [r1, r3]
 80082e8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80082ea:	4b1a      	ldr	r3, [pc, #104]	; (8008354 <HAL_RCC_OscConfig+0x34c>)
 80082ec:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80082ee:	4b1a      	ldr	r3, [pc, #104]	; (8008358 <HAL_RCC_OscConfig+0x350>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2513      	movs	r5, #19
 80082f4:	197c      	adds	r4, r7, r5
 80082f6:	0018      	movs	r0, r3
 80082f8:	f7fd fece 	bl	8006098 <HAL_InitTick>
 80082fc:	0003      	movs	r3, r0
 80082fe:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8008300:	197b      	adds	r3, r7, r5
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d060      	beq.n	80083ca <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8008308:	197b      	adds	r3, r7, r5
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	e1f2      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d03f      	beq.n	8008396 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008316:	4b0a      	ldr	r3, [pc, #40]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	4b09      	ldr	r3, [pc, #36]	; (8008340 <HAL_RCC_OscConfig+0x338>)
 800831c:	2180      	movs	r1, #128	; 0x80
 800831e:	0049      	lsls	r1, r1, #1
 8008320:	430a      	orrs	r2, r1
 8008322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008324:	f7fd fefe 	bl	8006124 <HAL_GetTick>
 8008328:	0003      	movs	r3, r0
 800832a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800832c:	e018      	b.n	8008360 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800832e:	f7fd fef9 	bl	8006124 <HAL_GetTick>
 8008332:	0002      	movs	r2, r0
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d911      	bls.n	8008360 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e1d9      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
 8008340:	40021000 	.word	0x40021000
 8008344:	fffeffff 	.word	0xfffeffff
 8008348:	fffbffff 	.word	0xfffbffff
 800834c:	ffffe0ff 	.word	0xffffe0ff
 8008350:	080104c4 	.word	0x080104c4
 8008354:	20000000 	.word	0x20000000
 8008358:	20000004 	.word	0x20000004
 800835c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008360:	4bc9      	ldr	r3, [pc, #804]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	2380      	movs	r3, #128	; 0x80
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4013      	ands	r3, r2
 800836a:	d0e0      	beq.n	800832e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800836c:	4bc6      	ldr	r3, [pc, #792]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	4ac6      	ldr	r2, [pc, #792]	; (800868c <HAL_RCC_OscConfig+0x684>)
 8008372:	4013      	ands	r3, r2
 8008374:	0019      	movs	r1, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1a      	ldr	r2, [r3, #32]
 800837a:	4bc3      	ldr	r3, [pc, #780]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 800837c:	430a      	orrs	r2, r1
 800837e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008380:	4bc1      	ldr	r3, [pc, #772]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	021b      	lsls	r3, r3, #8
 8008386:	0a19      	lsrs	r1, r3, #8
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	061a      	lsls	r2, r3, #24
 800838e:	4bbe      	ldr	r3, [pc, #760]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008390:	430a      	orrs	r2, r1
 8008392:	605a      	str	r2, [r3, #4]
 8008394:	e019      	b.n	80083ca <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008396:	4bbc      	ldr	r3, [pc, #752]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	4bbb      	ldr	r3, [pc, #748]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 800839c:	49bc      	ldr	r1, [pc, #752]	; (8008690 <HAL_RCC_OscConfig+0x688>)
 800839e:	400a      	ands	r2, r1
 80083a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083a2:	f7fd febf 	bl	8006124 <HAL_GetTick>
 80083a6:	0003      	movs	r3, r0
 80083a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80083aa:	e008      	b.n	80083be <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80083ac:	f7fd feba 	bl	8006124 <HAL_GetTick>
 80083b0:	0002      	movs	r2, r0
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d901      	bls.n	80083be <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e19a      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80083be:	4bb2      	ldr	r3, [pc, #712]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	2380      	movs	r3, #128	; 0x80
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4013      	ands	r3, r2
 80083c8:	d1f0      	bne.n	80083ac <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2208      	movs	r2, #8
 80083d0:	4013      	ands	r3, r2
 80083d2:	d036      	beq.n	8008442 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d019      	beq.n	8008410 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083dc:	4baa      	ldr	r3, [pc, #680]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80083de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083e0:	4ba9      	ldr	r3, [pc, #676]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80083e2:	2101      	movs	r1, #1
 80083e4:	430a      	orrs	r2, r1
 80083e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083e8:	f7fd fe9c 	bl	8006124 <HAL_GetTick>
 80083ec:	0003      	movs	r3, r0
 80083ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80083f0:	e008      	b.n	8008404 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083f2:	f7fd fe97 	bl	8006124 <HAL_GetTick>
 80083f6:	0002      	movs	r2, r0
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e177      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008404:	4ba0      	ldr	r3, [pc, #640]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008408:	2202      	movs	r2, #2
 800840a:	4013      	ands	r3, r2
 800840c:	d0f1      	beq.n	80083f2 <HAL_RCC_OscConfig+0x3ea>
 800840e:	e018      	b.n	8008442 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008410:	4b9d      	ldr	r3, [pc, #628]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008412:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008414:	4b9c      	ldr	r3, [pc, #624]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008416:	2101      	movs	r1, #1
 8008418:	438a      	bics	r2, r1
 800841a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800841c:	f7fd fe82 	bl	8006124 <HAL_GetTick>
 8008420:	0003      	movs	r3, r0
 8008422:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008424:	e008      	b.n	8008438 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008426:	f7fd fe7d 	bl	8006124 <HAL_GetTick>
 800842a:	0002      	movs	r2, r0
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	2b02      	cmp	r3, #2
 8008432:	d901      	bls.n	8008438 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e15d      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008438:	4b93      	ldr	r3, [pc, #588]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 800843a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800843c:	2202      	movs	r2, #2
 800843e:	4013      	ands	r3, r2
 8008440:	d1f1      	bne.n	8008426 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2204      	movs	r2, #4
 8008448:	4013      	ands	r3, r2
 800844a:	d100      	bne.n	800844e <HAL_RCC_OscConfig+0x446>
 800844c:	e0ae      	b.n	80085ac <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800844e:	2023      	movs	r0, #35	; 0x23
 8008450:	183b      	adds	r3, r7, r0
 8008452:	2200      	movs	r2, #0
 8008454:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008456:	4b8c      	ldr	r3, [pc, #560]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800845a:	2380      	movs	r3, #128	; 0x80
 800845c:	055b      	lsls	r3, r3, #21
 800845e:	4013      	ands	r3, r2
 8008460:	d109      	bne.n	8008476 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008462:	4b89      	ldr	r3, [pc, #548]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008466:	4b88      	ldr	r3, [pc, #544]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008468:	2180      	movs	r1, #128	; 0x80
 800846a:	0549      	lsls	r1, r1, #21
 800846c:	430a      	orrs	r2, r1
 800846e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008470:	183b      	adds	r3, r7, r0
 8008472:	2201      	movs	r2, #1
 8008474:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008476:	4b87      	ldr	r3, [pc, #540]	; (8008694 <HAL_RCC_OscConfig+0x68c>)
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	2380      	movs	r3, #128	; 0x80
 800847c:	005b      	lsls	r3, r3, #1
 800847e:	4013      	ands	r3, r2
 8008480:	d11a      	bne.n	80084b8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008482:	4b84      	ldr	r3, [pc, #528]	; (8008694 <HAL_RCC_OscConfig+0x68c>)
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	4b83      	ldr	r3, [pc, #524]	; (8008694 <HAL_RCC_OscConfig+0x68c>)
 8008488:	2180      	movs	r1, #128	; 0x80
 800848a:	0049      	lsls	r1, r1, #1
 800848c:	430a      	orrs	r2, r1
 800848e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008490:	f7fd fe48 	bl	8006124 <HAL_GetTick>
 8008494:	0003      	movs	r3, r0
 8008496:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008498:	e008      	b.n	80084ac <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800849a:	f7fd fe43 	bl	8006124 <HAL_GetTick>
 800849e:	0002      	movs	r2, r0
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	2b64      	cmp	r3, #100	; 0x64
 80084a6:	d901      	bls.n	80084ac <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e123      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ac:	4b79      	ldr	r3, [pc, #484]	; (8008694 <HAL_RCC_OscConfig+0x68c>)
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	2380      	movs	r3, #128	; 0x80
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	4013      	ands	r3, r2
 80084b6:	d0f0      	beq.n	800849a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	2380      	movs	r3, #128	; 0x80
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d107      	bne.n	80084d4 <HAL_RCC_OscConfig+0x4cc>
 80084c4:	4b70      	ldr	r3, [pc, #448]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80084c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084c8:	4b6f      	ldr	r3, [pc, #444]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80084ca:	2180      	movs	r1, #128	; 0x80
 80084cc:	0049      	lsls	r1, r1, #1
 80084ce:	430a      	orrs	r2, r1
 80084d0:	651a      	str	r2, [r3, #80]	; 0x50
 80084d2:	e031      	b.n	8008538 <HAL_RCC_OscConfig+0x530>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10c      	bne.n	80084f6 <HAL_RCC_OscConfig+0x4ee>
 80084dc:	4b6a      	ldr	r3, [pc, #424]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80084de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084e0:	4b69      	ldr	r3, [pc, #420]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80084e2:	496b      	ldr	r1, [pc, #428]	; (8008690 <HAL_RCC_OscConfig+0x688>)
 80084e4:	400a      	ands	r2, r1
 80084e6:	651a      	str	r2, [r3, #80]	; 0x50
 80084e8:	4b67      	ldr	r3, [pc, #412]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80084ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084ec:	4b66      	ldr	r3, [pc, #408]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80084ee:	496a      	ldr	r1, [pc, #424]	; (8008698 <HAL_RCC_OscConfig+0x690>)
 80084f0:	400a      	ands	r2, r1
 80084f2:	651a      	str	r2, [r3, #80]	; 0x50
 80084f4:	e020      	b.n	8008538 <HAL_RCC_OscConfig+0x530>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689a      	ldr	r2, [r3, #8]
 80084fa:	23a0      	movs	r3, #160	; 0xa0
 80084fc:	00db      	lsls	r3, r3, #3
 80084fe:	429a      	cmp	r2, r3
 8008500:	d10e      	bne.n	8008520 <HAL_RCC_OscConfig+0x518>
 8008502:	4b61      	ldr	r3, [pc, #388]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008506:	4b60      	ldr	r3, [pc, #384]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008508:	2180      	movs	r1, #128	; 0x80
 800850a:	00c9      	lsls	r1, r1, #3
 800850c:	430a      	orrs	r2, r1
 800850e:	651a      	str	r2, [r3, #80]	; 0x50
 8008510:	4b5d      	ldr	r3, [pc, #372]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008512:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008514:	4b5c      	ldr	r3, [pc, #368]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008516:	2180      	movs	r1, #128	; 0x80
 8008518:	0049      	lsls	r1, r1, #1
 800851a:	430a      	orrs	r2, r1
 800851c:	651a      	str	r2, [r3, #80]	; 0x50
 800851e:	e00b      	b.n	8008538 <HAL_RCC_OscConfig+0x530>
 8008520:	4b59      	ldr	r3, [pc, #356]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008524:	4b58      	ldr	r3, [pc, #352]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008526:	495a      	ldr	r1, [pc, #360]	; (8008690 <HAL_RCC_OscConfig+0x688>)
 8008528:	400a      	ands	r2, r1
 800852a:	651a      	str	r2, [r3, #80]	; 0x50
 800852c:	4b56      	ldr	r3, [pc, #344]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 800852e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008530:	4b55      	ldr	r3, [pc, #340]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008532:	4959      	ldr	r1, [pc, #356]	; (8008698 <HAL_RCC_OscConfig+0x690>)
 8008534:	400a      	ands	r2, r1
 8008536:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d015      	beq.n	800856c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008540:	f7fd fdf0 	bl	8006124 <HAL_GetTick>
 8008544:	0003      	movs	r3, r0
 8008546:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008548:	e009      	b.n	800855e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800854a:	f7fd fdeb 	bl	8006124 <HAL_GetTick>
 800854e:	0002      	movs	r2, r0
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	4a51      	ldr	r2, [pc, #324]	; (800869c <HAL_RCC_OscConfig+0x694>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d901      	bls.n	800855e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e0ca      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800855e:	4b4a      	ldr	r3, [pc, #296]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008562:	2380      	movs	r3, #128	; 0x80
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4013      	ands	r3, r2
 8008568:	d0ef      	beq.n	800854a <HAL_RCC_OscConfig+0x542>
 800856a:	e014      	b.n	8008596 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800856c:	f7fd fdda 	bl	8006124 <HAL_GetTick>
 8008570:	0003      	movs	r3, r0
 8008572:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008574:	e009      	b.n	800858a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008576:	f7fd fdd5 	bl	8006124 <HAL_GetTick>
 800857a:	0002      	movs	r2, r0
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	4a46      	ldr	r2, [pc, #280]	; (800869c <HAL_RCC_OscConfig+0x694>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d901      	bls.n	800858a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e0b4      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800858a:	4b3f      	ldr	r3, [pc, #252]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 800858c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800858e:	2380      	movs	r3, #128	; 0x80
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4013      	ands	r3, r2
 8008594:	d1ef      	bne.n	8008576 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008596:	2323      	movs	r3, #35	; 0x23
 8008598:	18fb      	adds	r3, r7, r3
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d105      	bne.n	80085ac <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085a0:	4b39      	ldr	r3, [pc, #228]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80085a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085a4:	4b38      	ldr	r3, [pc, #224]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80085a6:	493e      	ldr	r1, [pc, #248]	; (80086a0 <HAL_RCC_OscConfig+0x698>)
 80085a8:	400a      	ands	r2, r1
 80085aa:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d100      	bne.n	80085b6 <HAL_RCC_OscConfig+0x5ae>
 80085b4:	e09d      	b.n	80086f2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	2b0c      	cmp	r3, #12
 80085ba:	d100      	bne.n	80085be <HAL_RCC_OscConfig+0x5b6>
 80085bc:	e076      	b.n	80086ac <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d145      	bne.n	8008652 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085c6:	4b30      	ldr	r3, [pc, #192]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	4b2f      	ldr	r3, [pc, #188]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80085cc:	4935      	ldr	r1, [pc, #212]	; (80086a4 <HAL_RCC_OscConfig+0x69c>)
 80085ce:	400a      	ands	r2, r1
 80085d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085d2:	f7fd fda7 	bl	8006124 <HAL_GetTick>
 80085d6:	0003      	movs	r3, r0
 80085d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80085da:	e008      	b.n	80085ee <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085dc:	f7fd fda2 	bl	8006124 <HAL_GetTick>
 80085e0:	0002      	movs	r2, r0
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d901      	bls.n	80085ee <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e082      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80085ee:	4b26      	ldr	r3, [pc, #152]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	2380      	movs	r3, #128	; 0x80
 80085f4:	049b      	lsls	r3, r3, #18
 80085f6:	4013      	ands	r3, r2
 80085f8:	d1f0      	bne.n	80085dc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085fa:	4b23      	ldr	r3, [pc, #140]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	4a2a      	ldr	r2, [pc, #168]	; (80086a8 <HAL_RCC_OscConfig+0x6a0>)
 8008600:	4013      	ands	r3, r2
 8008602:	0019      	movs	r1, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	431a      	orrs	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008612:	431a      	orrs	r2, r3
 8008614:	4b1c      	ldr	r3, [pc, #112]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008616:	430a      	orrs	r2, r1
 8008618:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800861a:	4b1b      	ldr	r3, [pc, #108]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	4b1a      	ldr	r3, [pc, #104]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008620:	2180      	movs	r1, #128	; 0x80
 8008622:	0449      	lsls	r1, r1, #17
 8008624:	430a      	orrs	r2, r1
 8008626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008628:	f7fd fd7c 	bl	8006124 <HAL_GetTick>
 800862c:	0003      	movs	r3, r0
 800862e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008630:	e008      	b.n	8008644 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008632:	f7fd fd77 	bl	8006124 <HAL_GetTick>
 8008636:	0002      	movs	r2, r0
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	2b02      	cmp	r3, #2
 800863e:	d901      	bls.n	8008644 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	e057      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008644:	4b10      	ldr	r3, [pc, #64]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	2380      	movs	r3, #128	; 0x80
 800864a:	049b      	lsls	r3, r3, #18
 800864c:	4013      	ands	r3, r2
 800864e:	d0f0      	beq.n	8008632 <HAL_RCC_OscConfig+0x62a>
 8008650:	e04f      	b.n	80086f2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008652:	4b0d      	ldr	r3, [pc, #52]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 8008658:	4912      	ldr	r1, [pc, #72]	; (80086a4 <HAL_RCC_OscConfig+0x69c>)
 800865a:	400a      	ands	r2, r1
 800865c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800865e:	f7fd fd61 	bl	8006124 <HAL_GetTick>
 8008662:	0003      	movs	r3, r0
 8008664:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008666:	e008      	b.n	800867a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008668:	f7fd fd5c 	bl	8006124 <HAL_GetTick>
 800866c:	0002      	movs	r2, r0
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	2b02      	cmp	r3, #2
 8008674:	d901      	bls.n	800867a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e03c      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800867a:	4b03      	ldr	r3, [pc, #12]	; (8008688 <HAL_RCC_OscConfig+0x680>)
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	2380      	movs	r3, #128	; 0x80
 8008680:	049b      	lsls	r3, r3, #18
 8008682:	4013      	ands	r3, r2
 8008684:	d1f0      	bne.n	8008668 <HAL_RCC_OscConfig+0x660>
 8008686:	e034      	b.n	80086f2 <HAL_RCC_OscConfig+0x6ea>
 8008688:	40021000 	.word	0x40021000
 800868c:	ffff1fff 	.word	0xffff1fff
 8008690:	fffffeff 	.word	0xfffffeff
 8008694:	40007000 	.word	0x40007000
 8008698:	fffffbff 	.word	0xfffffbff
 800869c:	00001388 	.word	0x00001388
 80086a0:	efffffff 	.word	0xefffffff
 80086a4:	feffffff 	.word	0xfeffffff
 80086a8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d101      	bne.n	80086b8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e01d      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80086b8:	4b10      	ldr	r3, [pc, #64]	; (80086fc <HAL_RCC_OscConfig+0x6f4>)
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	2380      	movs	r3, #128	; 0x80
 80086c2:	025b      	lsls	r3, r3, #9
 80086c4:	401a      	ands	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d10f      	bne.n	80086ee <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	23f0      	movs	r3, #240	; 0xf0
 80086d2:	039b      	lsls	r3, r3, #14
 80086d4:	401a      	ands	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086da:	429a      	cmp	r2, r3
 80086dc:	d107      	bne.n	80086ee <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	23c0      	movs	r3, #192	; 0xc0
 80086e2:	041b      	lsls	r3, r3, #16
 80086e4:	401a      	ands	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d001      	beq.n	80086f2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e000      	b.n	80086f4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	0018      	movs	r0, r3
 80086f6:	46bd      	mov	sp, r7
 80086f8:	b00a      	add	sp, #40	; 0x28
 80086fa:	bdb0      	pop	{r4, r5, r7, pc}
 80086fc:	40021000 	.word	0x40021000

08008700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008700:	b5b0      	push	{r4, r5, r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e128      	b.n	8008966 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008714:	4b96      	ldr	r3, [pc, #600]	; (8008970 <HAL_RCC_ClockConfig+0x270>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2201      	movs	r2, #1
 800871a:	4013      	ands	r3, r2
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	429a      	cmp	r2, r3
 8008720:	d91e      	bls.n	8008760 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008722:	4b93      	ldr	r3, [pc, #588]	; (8008970 <HAL_RCC_ClockConfig+0x270>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2201      	movs	r2, #1
 8008728:	4393      	bics	r3, r2
 800872a:	0019      	movs	r1, r3
 800872c:	4b90      	ldr	r3, [pc, #576]	; (8008970 <HAL_RCC_ClockConfig+0x270>)
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	430a      	orrs	r2, r1
 8008732:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008734:	f7fd fcf6 	bl	8006124 <HAL_GetTick>
 8008738:	0003      	movs	r3, r0
 800873a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800873c:	e009      	b.n	8008752 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800873e:	f7fd fcf1 	bl	8006124 <HAL_GetTick>
 8008742:	0002      	movs	r2, r0
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	4a8a      	ldr	r2, [pc, #552]	; (8008974 <HAL_RCC_ClockConfig+0x274>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d901      	bls.n	8008752 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e109      	b.n	8008966 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008752:	4b87      	ldr	r3, [pc, #540]	; (8008970 <HAL_RCC_ClockConfig+0x270>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2201      	movs	r2, #1
 8008758:	4013      	ands	r3, r2
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	429a      	cmp	r2, r3
 800875e:	d1ee      	bne.n	800873e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2202      	movs	r2, #2
 8008766:	4013      	ands	r3, r2
 8008768:	d009      	beq.n	800877e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800876a:	4b83      	ldr	r3, [pc, #524]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	22f0      	movs	r2, #240	; 0xf0
 8008770:	4393      	bics	r3, r2
 8008772:	0019      	movs	r1, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	4b7f      	ldr	r3, [pc, #508]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 800877a:	430a      	orrs	r2, r1
 800877c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2201      	movs	r2, #1
 8008784:	4013      	ands	r3, r2
 8008786:	d100      	bne.n	800878a <HAL_RCC_ClockConfig+0x8a>
 8008788:	e089      	b.n	800889e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	2b02      	cmp	r3, #2
 8008790:	d107      	bne.n	80087a2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008792:	4b79      	ldr	r3, [pc, #484]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	2380      	movs	r3, #128	; 0x80
 8008798:	029b      	lsls	r3, r3, #10
 800879a:	4013      	ands	r3, r2
 800879c:	d120      	bne.n	80087e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e0e1      	b.n	8008966 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d107      	bne.n	80087ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087aa:	4b73      	ldr	r3, [pc, #460]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	2380      	movs	r3, #128	; 0x80
 80087b0:	049b      	lsls	r3, r3, #18
 80087b2:	4013      	ands	r3, r2
 80087b4:	d114      	bne.n	80087e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e0d5      	b.n	8008966 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d106      	bne.n	80087d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087c2:	4b6d      	ldr	r3, [pc, #436]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2204      	movs	r2, #4
 80087c8:	4013      	ands	r3, r2
 80087ca:	d109      	bne.n	80087e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e0ca      	b.n	8008966 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80087d0:	4b69      	ldr	r3, [pc, #420]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	2380      	movs	r3, #128	; 0x80
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4013      	ands	r3, r2
 80087da:	d101      	bne.n	80087e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e0c2      	b.n	8008966 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087e0:	4b65      	ldr	r3, [pc, #404]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	2203      	movs	r2, #3
 80087e6:	4393      	bics	r3, r2
 80087e8:	0019      	movs	r1, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	4b62      	ldr	r3, [pc, #392]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 80087f0:	430a      	orrs	r2, r1
 80087f2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087f4:	f7fd fc96 	bl	8006124 <HAL_GetTick>
 80087f8:	0003      	movs	r3, r0
 80087fa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2b02      	cmp	r3, #2
 8008802:	d111      	bne.n	8008828 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008804:	e009      	b.n	800881a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008806:	f7fd fc8d 	bl	8006124 <HAL_GetTick>
 800880a:	0002      	movs	r2, r0
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	4a58      	ldr	r2, [pc, #352]	; (8008974 <HAL_RCC_ClockConfig+0x274>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d901      	bls.n	800881a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e0a5      	b.n	8008966 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800881a:	4b57      	ldr	r3, [pc, #348]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	220c      	movs	r2, #12
 8008820:	4013      	ands	r3, r2
 8008822:	2b08      	cmp	r3, #8
 8008824:	d1ef      	bne.n	8008806 <HAL_RCC_ClockConfig+0x106>
 8008826:	e03a      	b.n	800889e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	2b03      	cmp	r3, #3
 800882e:	d111      	bne.n	8008854 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008830:	e009      	b.n	8008846 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008832:	f7fd fc77 	bl	8006124 <HAL_GetTick>
 8008836:	0002      	movs	r2, r0
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	4a4d      	ldr	r2, [pc, #308]	; (8008974 <HAL_RCC_ClockConfig+0x274>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d901      	bls.n	8008846 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e08f      	b.n	8008966 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008846:	4b4c      	ldr	r3, [pc, #304]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	220c      	movs	r2, #12
 800884c:	4013      	ands	r3, r2
 800884e:	2b0c      	cmp	r3, #12
 8008850:	d1ef      	bne.n	8008832 <HAL_RCC_ClockConfig+0x132>
 8008852:	e024      	b.n	800889e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d11b      	bne.n	8008894 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800885c:	e009      	b.n	8008872 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800885e:	f7fd fc61 	bl	8006124 <HAL_GetTick>
 8008862:	0002      	movs	r2, r0
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	4a42      	ldr	r2, [pc, #264]	; (8008974 <HAL_RCC_ClockConfig+0x274>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d901      	bls.n	8008872 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e079      	b.n	8008966 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008872:	4b41      	ldr	r3, [pc, #260]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	220c      	movs	r2, #12
 8008878:	4013      	ands	r3, r2
 800887a:	2b04      	cmp	r3, #4
 800887c:	d1ef      	bne.n	800885e <HAL_RCC_ClockConfig+0x15e>
 800887e:	e00e      	b.n	800889e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008880:	f7fd fc50 	bl	8006124 <HAL_GetTick>
 8008884:	0002      	movs	r2, r0
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	4a3a      	ldr	r2, [pc, #232]	; (8008974 <HAL_RCC_ClockConfig+0x274>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d901      	bls.n	8008894 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e068      	b.n	8008966 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008894:	4b38      	ldr	r3, [pc, #224]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	220c      	movs	r2, #12
 800889a:	4013      	ands	r3, r2
 800889c:	d1f0      	bne.n	8008880 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800889e:	4b34      	ldr	r3, [pc, #208]	; (8008970 <HAL_RCC_ClockConfig+0x270>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2201      	movs	r2, #1
 80088a4:	4013      	ands	r3, r2
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d21e      	bcs.n	80088ea <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088ac:	4b30      	ldr	r3, [pc, #192]	; (8008970 <HAL_RCC_ClockConfig+0x270>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2201      	movs	r2, #1
 80088b2:	4393      	bics	r3, r2
 80088b4:	0019      	movs	r1, r3
 80088b6:	4b2e      	ldr	r3, [pc, #184]	; (8008970 <HAL_RCC_ClockConfig+0x270>)
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80088be:	f7fd fc31 	bl	8006124 <HAL_GetTick>
 80088c2:	0003      	movs	r3, r0
 80088c4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088c6:	e009      	b.n	80088dc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088c8:	f7fd fc2c 	bl	8006124 <HAL_GetTick>
 80088cc:	0002      	movs	r2, r0
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	4a28      	ldr	r2, [pc, #160]	; (8008974 <HAL_RCC_ClockConfig+0x274>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d901      	bls.n	80088dc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e044      	b.n	8008966 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088dc:	4b24      	ldr	r3, [pc, #144]	; (8008970 <HAL_RCC_ClockConfig+0x270>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2201      	movs	r2, #1
 80088e2:	4013      	ands	r3, r2
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d1ee      	bne.n	80088c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2204      	movs	r2, #4
 80088f0:	4013      	ands	r3, r2
 80088f2:	d009      	beq.n	8008908 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088f4:	4b20      	ldr	r3, [pc, #128]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	4a20      	ldr	r2, [pc, #128]	; (800897c <HAL_RCC_ClockConfig+0x27c>)
 80088fa:	4013      	ands	r3, r2
 80088fc:	0019      	movs	r1, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68da      	ldr	r2, [r3, #12]
 8008902:	4b1d      	ldr	r3, [pc, #116]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 8008904:	430a      	orrs	r2, r1
 8008906:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2208      	movs	r2, #8
 800890e:	4013      	ands	r3, r2
 8008910:	d00a      	beq.n	8008928 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008912:	4b19      	ldr	r3, [pc, #100]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	4a1a      	ldr	r2, [pc, #104]	; (8008980 <HAL_RCC_ClockConfig+0x280>)
 8008918:	4013      	ands	r3, r2
 800891a:	0019      	movs	r1, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	00da      	lsls	r2, r3, #3
 8008922:	4b15      	ldr	r3, [pc, #84]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 8008924:	430a      	orrs	r2, r1
 8008926:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008928:	f000 f832 	bl	8008990 <HAL_RCC_GetSysClockFreq>
 800892c:	0001      	movs	r1, r0
 800892e:	4b12      	ldr	r3, [pc, #72]	; (8008978 <HAL_RCC_ClockConfig+0x278>)
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	091b      	lsrs	r3, r3, #4
 8008934:	220f      	movs	r2, #15
 8008936:	4013      	ands	r3, r2
 8008938:	4a12      	ldr	r2, [pc, #72]	; (8008984 <HAL_RCC_ClockConfig+0x284>)
 800893a:	5cd3      	ldrb	r3, [r2, r3]
 800893c:	000a      	movs	r2, r1
 800893e:	40da      	lsrs	r2, r3
 8008940:	4b11      	ldr	r3, [pc, #68]	; (8008988 <HAL_RCC_ClockConfig+0x288>)
 8008942:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008944:	4b11      	ldr	r3, [pc, #68]	; (800898c <HAL_RCC_ClockConfig+0x28c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	250b      	movs	r5, #11
 800894a:	197c      	adds	r4, r7, r5
 800894c:	0018      	movs	r0, r3
 800894e:	f7fd fba3 	bl	8006098 <HAL_InitTick>
 8008952:	0003      	movs	r3, r0
 8008954:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008956:	197b      	adds	r3, r7, r5
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800895e:	197b      	adds	r3, r7, r5
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	e000      	b.n	8008966 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	0018      	movs	r0, r3
 8008968:	46bd      	mov	sp, r7
 800896a:	b004      	add	sp, #16
 800896c:	bdb0      	pop	{r4, r5, r7, pc}
 800896e:	46c0      	nop			; (mov r8, r8)
 8008970:	40022000 	.word	0x40022000
 8008974:	00001388 	.word	0x00001388
 8008978:	40021000 	.word	0x40021000
 800897c:	fffff8ff 	.word	0xfffff8ff
 8008980:	ffffc7ff 	.word	0xffffc7ff
 8008984:	080104c4 	.word	0x080104c4
 8008988:	20000000 	.word	0x20000000
 800898c:	20000004 	.word	0x20000004

08008990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008990:	b5b0      	push	{r4, r5, r7, lr}
 8008992:	b08e      	sub	sp, #56	; 0x38
 8008994:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008996:	4b4c      	ldr	r3, [pc, #304]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800899c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800899e:	230c      	movs	r3, #12
 80089a0:	4013      	ands	r3, r2
 80089a2:	2b0c      	cmp	r3, #12
 80089a4:	d014      	beq.n	80089d0 <HAL_RCC_GetSysClockFreq+0x40>
 80089a6:	d900      	bls.n	80089aa <HAL_RCC_GetSysClockFreq+0x1a>
 80089a8:	e07b      	b.n	8008aa2 <HAL_RCC_GetSysClockFreq+0x112>
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	d002      	beq.n	80089b4 <HAL_RCC_GetSysClockFreq+0x24>
 80089ae:	2b08      	cmp	r3, #8
 80089b0:	d00b      	beq.n	80089ca <HAL_RCC_GetSysClockFreq+0x3a>
 80089b2:	e076      	b.n	8008aa2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80089b4:	4b44      	ldr	r3, [pc, #272]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2210      	movs	r2, #16
 80089ba:	4013      	ands	r3, r2
 80089bc:	d002      	beq.n	80089c4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80089be:	4b43      	ldr	r3, [pc, #268]	; (8008acc <HAL_RCC_GetSysClockFreq+0x13c>)
 80089c0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80089c2:	e07c      	b.n	8008abe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80089c4:	4b42      	ldr	r3, [pc, #264]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x140>)
 80089c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80089c8:	e079      	b.n	8008abe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80089ca:	4b42      	ldr	r3, [pc, #264]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x144>)
 80089cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80089ce:	e076      	b.n	8008abe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80089d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d2:	0c9a      	lsrs	r2, r3, #18
 80089d4:	230f      	movs	r3, #15
 80089d6:	401a      	ands	r2, r3
 80089d8:	4b3f      	ldr	r3, [pc, #252]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x148>)
 80089da:	5c9b      	ldrb	r3, [r3, r2]
 80089dc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e0:	0d9a      	lsrs	r2, r3, #22
 80089e2:	2303      	movs	r3, #3
 80089e4:	4013      	ands	r3, r2
 80089e6:	3301      	adds	r3, #1
 80089e8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80089ea:	4b37      	ldr	r3, [pc, #220]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 80089ec:	68da      	ldr	r2, [r3, #12]
 80089ee:	2380      	movs	r3, #128	; 0x80
 80089f0:	025b      	lsls	r3, r3, #9
 80089f2:	4013      	ands	r3, r2
 80089f4:	d01a      	beq.n	8008a2c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80089f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f8:	61bb      	str	r3, [r7, #24]
 80089fa:	2300      	movs	r3, #0
 80089fc:	61fb      	str	r3, [r7, #28]
 80089fe:	4a35      	ldr	r2, [pc, #212]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x144>)
 8008a00:	2300      	movs	r3, #0
 8008a02:	69b8      	ldr	r0, [r7, #24]
 8008a04:	69f9      	ldr	r1, [r7, #28]
 8008a06:	f7f7 fd79 	bl	80004fc <__aeabi_lmul>
 8008a0a:	0002      	movs	r2, r0
 8008a0c:	000b      	movs	r3, r1
 8008a0e:	0010      	movs	r0, r2
 8008a10:	0019      	movs	r1, r3
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	613b      	str	r3, [r7, #16]
 8008a16:	2300      	movs	r3, #0
 8008a18:	617b      	str	r3, [r7, #20]
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f7f7 fd4d 	bl	80004bc <__aeabi_uldivmod>
 8008a22:	0002      	movs	r2, r0
 8008a24:	000b      	movs	r3, r1
 8008a26:	0013      	movs	r3, r2
 8008a28:	637b      	str	r3, [r7, #52]	; 0x34
 8008a2a:	e037      	b.n	8008a9c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008a2c:	4b26      	ldr	r3, [pc, #152]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2210      	movs	r2, #16
 8008a32:	4013      	ands	r3, r2
 8008a34:	d01a      	beq.n	8008a6c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8008a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a38:	60bb      	str	r3, [r7, #8]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	4a23      	ldr	r2, [pc, #140]	; (8008acc <HAL_RCC_GetSysClockFreq+0x13c>)
 8008a40:	2300      	movs	r3, #0
 8008a42:	68b8      	ldr	r0, [r7, #8]
 8008a44:	68f9      	ldr	r1, [r7, #12]
 8008a46:	f7f7 fd59 	bl	80004fc <__aeabi_lmul>
 8008a4a:	0002      	movs	r2, r0
 8008a4c:	000b      	movs	r3, r1
 8008a4e:	0010      	movs	r0, r2
 8008a50:	0019      	movs	r1, r3
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	603b      	str	r3, [r7, #0]
 8008a56:	2300      	movs	r3, #0
 8008a58:	607b      	str	r3, [r7, #4]
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f7f7 fd2d 	bl	80004bc <__aeabi_uldivmod>
 8008a62:	0002      	movs	r2, r0
 8008a64:	000b      	movs	r3, r1
 8008a66:	0013      	movs	r3, r2
 8008a68:	637b      	str	r3, [r7, #52]	; 0x34
 8008a6a:	e017      	b.n	8008a9c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	0018      	movs	r0, r3
 8008a70:	2300      	movs	r3, #0
 8008a72:	0019      	movs	r1, r3
 8008a74:	4a16      	ldr	r2, [pc, #88]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x140>)
 8008a76:	2300      	movs	r3, #0
 8008a78:	f7f7 fd40 	bl	80004fc <__aeabi_lmul>
 8008a7c:	0002      	movs	r2, r0
 8008a7e:	000b      	movs	r3, r1
 8008a80:	0010      	movs	r0, r2
 8008a82:	0019      	movs	r1, r3
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	001c      	movs	r4, r3
 8008a88:	2300      	movs	r3, #0
 8008a8a:	001d      	movs	r5, r3
 8008a8c:	0022      	movs	r2, r4
 8008a8e:	002b      	movs	r3, r5
 8008a90:	f7f7 fd14 	bl	80004bc <__aeabi_uldivmod>
 8008a94:	0002      	movs	r2, r0
 8008a96:	000b      	movs	r3, r1
 8008a98:	0013      	movs	r3, r2
 8008a9a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8008a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008aa0:	e00d      	b.n	8008abe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008aa2:	4b09      	ldr	r3, [pc, #36]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	0b5b      	lsrs	r3, r3, #13
 8008aa8:	2207      	movs	r2, #7
 8008aaa:	4013      	ands	r3, r2
 8008aac:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	2280      	movs	r2, #128	; 0x80
 8008ab4:	0212      	lsls	r2, r2, #8
 8008ab6:	409a      	lsls	r2, r3
 8008ab8:	0013      	movs	r3, r2
 8008aba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008abc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	b00e      	add	sp, #56	; 0x38
 8008ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8008ac8:	40021000 	.word	0x40021000
 8008acc:	003d0900 	.word	0x003d0900
 8008ad0:	00f42400 	.word	0x00f42400
 8008ad4:	007a1200 	.word	0x007a1200
 8008ad8:	080104dc 	.word	0x080104dc

08008adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ae0:	4b02      	ldr	r3, [pc, #8]	; (8008aec <HAL_RCC_GetHCLKFreq+0x10>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
}
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	46c0      	nop			; (mov r8, r8)
 8008aec:	20000000 	.word	0x20000000

08008af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008af4:	f7ff fff2 	bl	8008adc <HAL_RCC_GetHCLKFreq>
 8008af8:	0001      	movs	r1, r0
 8008afa:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	0a1b      	lsrs	r3, r3, #8
 8008b00:	2207      	movs	r2, #7
 8008b02:	4013      	ands	r3, r2
 8008b04:	4a04      	ldr	r2, [pc, #16]	; (8008b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b06:	5cd3      	ldrb	r3, [r2, r3]
 8008b08:	40d9      	lsrs	r1, r3
 8008b0a:	000b      	movs	r3, r1
}
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	46c0      	nop			; (mov r8, r8)
 8008b14:	40021000 	.word	0x40021000
 8008b18:	080104d4 	.word	0x080104d4

08008b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008b20:	f7ff ffdc 	bl	8008adc <HAL_RCC_GetHCLKFreq>
 8008b24:	0001      	movs	r1, r0
 8008b26:	4b06      	ldr	r3, [pc, #24]	; (8008b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	0adb      	lsrs	r3, r3, #11
 8008b2c:	2207      	movs	r2, #7
 8008b2e:	4013      	ands	r3, r2
 8008b30:	4a04      	ldr	r2, [pc, #16]	; (8008b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b32:	5cd3      	ldrb	r3, [r2, r3]
 8008b34:	40d9      	lsrs	r1, r3
 8008b36:	000b      	movs	r3, r1
}
 8008b38:	0018      	movs	r0, r3
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	46c0      	nop			; (mov r8, r8)
 8008b40:	40021000 	.word	0x40021000
 8008b44:	080104d4 	.word	0x080104d4

08008b48 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8008b50:	2017      	movs	r0, #23
 8008b52:	183b      	adds	r3, r7, r0
 8008b54:	2200      	movs	r2, #0
 8008b56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	4013      	ands	r3, r2
 8008b60:	d100      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8008b62:	e0c7      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b64:	4b93      	ldr	r3, [pc, #588]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b68:	2380      	movs	r3, #128	; 0x80
 8008b6a:	055b      	lsls	r3, r3, #21
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	d109      	bne.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b70:	4b90      	ldr	r3, [pc, #576]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b74:	4b8f      	ldr	r3, [pc, #572]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008b76:	2180      	movs	r1, #128	; 0x80
 8008b78:	0549      	lsls	r1, r1, #21
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008b7e:	183b      	adds	r3, r7, r0
 8008b80:	2201      	movs	r2, #1
 8008b82:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b84:	4b8c      	ldr	r3, [pc, #560]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	2380      	movs	r3, #128	; 0x80
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	d11a      	bne.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b90:	4b89      	ldr	r3, [pc, #548]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	4b88      	ldr	r3, [pc, #544]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8008b96:	2180      	movs	r1, #128	; 0x80
 8008b98:	0049      	lsls	r1, r1, #1
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b9e:	f7fd fac1 	bl	8006124 <HAL_GetTick>
 8008ba2:	0003      	movs	r3, r0
 8008ba4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ba6:	e008      	b.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ba8:	f7fd fabc 	bl	8006124 <HAL_GetTick>
 8008bac:	0002      	movs	r2, r0
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	2b64      	cmp	r3, #100	; 0x64
 8008bb4:	d901      	bls.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e0f8      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x264>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bba:	4b7f      	ldr	r3, [pc, #508]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	2380      	movs	r3, #128	; 0x80
 8008bc0:	005b      	lsls	r3, r3, #1
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	d0f0      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008bc6:	4b7b      	ldr	r3, [pc, #492]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	23c0      	movs	r3, #192	; 0xc0
 8008bcc:	039b      	lsls	r3, r3, #14
 8008bce:	4013      	ands	r3, r2
 8008bd0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	23c0      	movs	r3, #192	; 0xc0
 8008bd8:	039b      	lsls	r3, r3, #14
 8008bda:	4013      	ands	r3, r2
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d013      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	23c0      	movs	r3, #192	; 0xc0
 8008be8:	029b      	lsls	r3, r3, #10
 8008bea:	401a      	ands	r2, r3
 8008bec:	23c0      	movs	r3, #192	; 0xc0
 8008bee:	029b      	lsls	r3, r3, #10
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d10a      	bne.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bf4:	4b6f      	ldr	r3, [pc, #444]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	2380      	movs	r3, #128	; 0x80
 8008bfa:	029b      	lsls	r3, r3, #10
 8008bfc:	401a      	ands	r2, r3
 8008bfe:	2380      	movs	r3, #128	; 0x80
 8008c00:	029b      	lsls	r3, r3, #10
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d101      	bne.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e0d0      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x264>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008c0a:	4b6a      	ldr	r3, [pc, #424]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008c0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c0e:	23c0      	movs	r3, #192	; 0xc0
 8008c10:	029b      	lsls	r3, r3, #10
 8008c12:	4013      	ands	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d03b      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	23c0      	movs	r3, #192	; 0xc0
 8008c22:	029b      	lsls	r3, r3, #10
 8008c24:	4013      	ands	r3, r2
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d033      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2220      	movs	r2, #32
 8008c32:	4013      	ands	r3, r2
 8008c34:	d02e      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8008c36:	4b5f      	ldr	r3, [pc, #380]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c3a:	4a60      	ldr	r2, [pc, #384]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008c40:	4b5c      	ldr	r3, [pc, #368]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008c42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c44:	4b5b      	ldr	r3, [pc, #364]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008c46:	2180      	movs	r1, #128	; 0x80
 8008c48:	0309      	lsls	r1, r1, #12
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008c4e:	4b59      	ldr	r3, [pc, #356]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008c50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c52:	4b58      	ldr	r3, [pc, #352]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008c54:	495a      	ldr	r1, [pc, #360]	; (8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8008c56:	400a      	ands	r2, r1
 8008c58:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008c5a:	4b56      	ldr	r3, [pc, #344]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	2380      	movs	r3, #128	; 0x80
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	4013      	ands	r3, r2
 8008c68:	d014      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c6a:	f7fd fa5b 	bl	8006124 <HAL_GetTick>
 8008c6e:	0003      	movs	r3, r0
 8008c70:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c72:	e009      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c74:	f7fd fa56 	bl	8006124 <HAL_GetTick>
 8008c78:	0002      	movs	r2, r0
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	4a51      	ldr	r2, [pc, #324]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d901      	bls.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e091      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x264>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c88:	4b4a      	ldr	r3, [pc, #296]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008c8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c8c:	2380      	movs	r3, #128	; 0x80
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4013      	ands	r3, r2
 8008c92:	d0ef      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	d01f      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	23c0      	movs	r3, #192	; 0xc0
 8008ca4:	029b      	lsls	r3, r3, #10
 8008ca6:	401a      	ands	r2, r3
 8008ca8:	23c0      	movs	r3, #192	; 0xc0
 8008caa:	029b      	lsls	r3, r3, #10
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d10c      	bne.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x182>
 8008cb0:	4b40      	ldr	r3, [pc, #256]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a44      	ldr	r2, [pc, #272]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	0019      	movs	r1, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	23c0      	movs	r3, #192	; 0xc0
 8008cc0:	039b      	lsls	r3, r3, #14
 8008cc2:	401a      	ands	r2, r3
 8008cc4:	4b3b      	ldr	r3, [pc, #236]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	601a      	str	r2, [r3, #0]
 8008cca:	4b3a      	ldr	r3, [pc, #232]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008ccc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	23c0      	movs	r3, #192	; 0xc0
 8008cd4:	029b      	lsls	r3, r3, #10
 8008cd6:	401a      	ands	r2, r3
 8008cd8:	4b36      	ldr	r3, [pc, #216]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008cde:	2317      	movs	r3, #23
 8008ce0:	18fb      	adds	r3, r7, r3
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d105      	bne.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ce8:	4b32      	ldr	r3, [pc, #200]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cec:	4b31      	ldr	r3, [pc, #196]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008cee:	4937      	ldr	r1, [pc, #220]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008cf0:	400a      	ands	r2, r1
 8008cf2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	d009      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008cfe:	4b2d      	ldr	r3, [pc, #180]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d02:	2203      	movs	r2, #3
 8008d04:	4393      	bics	r3, r2
 8008d06:	0019      	movs	r1, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	4b29      	ldr	r3, [pc, #164]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2202      	movs	r2, #2
 8008d18:	4013      	ands	r3, r2
 8008d1a:	d009      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008d1c:	4b25      	ldr	r3, [pc, #148]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d20:	220c      	movs	r2, #12
 8008d22:	4393      	bics	r3, r2
 8008d24:	0019      	movs	r1, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68da      	ldr	r2, [r3, #12]
 8008d2a:	4b22      	ldr	r3, [pc, #136]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2204      	movs	r2, #4
 8008d36:	4013      	ands	r3, r2
 8008d38:	d009      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d3a:	4b1e      	ldr	r3, [pc, #120]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d3e:	4a24      	ldr	r2, [pc, #144]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008d40:	4013      	ands	r3, r2
 8008d42:	0019      	movs	r1, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	691a      	ldr	r2, [r3, #16]
 8008d48:	4b1a      	ldr	r3, [pc, #104]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2208      	movs	r2, #8
 8008d54:	4013      	ands	r3, r2
 8008d56:	d009      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d58:	4b16      	ldr	r3, [pc, #88]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d5c:	4a1d      	ldr	r2, [pc, #116]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008d5e:	4013      	ands	r3, r2
 8008d60:	0019      	movs	r1, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	695a      	ldr	r2, [r3, #20]
 8008d66:	4b13      	ldr	r3, [pc, #76]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	2380      	movs	r3, #128	; 0x80
 8008d72:	005b      	lsls	r3, r3, #1
 8008d74:	4013      	ands	r3, r2
 8008d76:	d009      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008d78:	4b0e      	ldr	r3, [pc, #56]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d7c:	4a0f      	ldr	r2, [pc, #60]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8008d7e:	4013      	ands	r3, r2
 8008d80:	0019      	movs	r1, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	699a      	ldr	r2, [r3, #24]
 8008d86:	4b0b      	ldr	r3, [pc, #44]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2280      	movs	r2, #128	; 0x80
 8008d92:	4013      	ands	r3, r2
 8008d94:	d009      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008d96:	4b07      	ldr	r3, [pc, #28]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d9a:	4a0f      	ldr	r2, [pc, #60]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	0019      	movs	r1, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	69da      	ldr	r2, [r3, #28]
 8008da4:	4b03      	ldr	r3, [pc, #12]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008da6:	430a      	orrs	r2, r1
 8008da8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	0018      	movs	r0, r3
 8008dae:	46bd      	mov	sp, r7
 8008db0:	b006      	add	sp, #24
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	40021000 	.word	0x40021000
 8008db8:	40007000 	.word	0x40007000
 8008dbc:	fffcffff 	.word	0xfffcffff
 8008dc0:	fff7ffff 	.word	0xfff7ffff
 8008dc4:	00001388 	.word	0x00001388
 8008dc8:	ffcfffff 	.word	0xffcfffff
 8008dcc:	efffffff 	.word	0xefffffff
 8008dd0:	fffff3ff 	.word	0xfffff3ff
 8008dd4:	ffffcfff 	.word	0xffffcfff
 8008dd8:	fff3ffff 	.word	0xfff3ffff

08008ddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e083      	b.n	8008ef6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d109      	bne.n	8008e0a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	2382      	movs	r3, #130	; 0x82
 8008dfc:	005b      	lsls	r3, r3, #1
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d009      	beq.n	8008e16 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	61da      	str	r2, [r3, #28]
 8008e08:	e005      	b.n	8008e16 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2251      	movs	r2, #81	; 0x51
 8008e20:	5c9b      	ldrb	r3, [r3, r2]
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d107      	bne.n	8008e38 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2250      	movs	r2, #80	; 0x50
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	0018      	movs	r0, r3
 8008e34:	f7fc feaa 	bl	8005b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2251      	movs	r2, #81	; 0x51
 8008e3c:	2102      	movs	r1, #2
 8008e3e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2140      	movs	r1, #64	; 0x40
 8008e4c:	438a      	bics	r2, r1
 8008e4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	2382      	movs	r3, #130	; 0x82
 8008e56:	005b      	lsls	r3, r3, #1
 8008e58:	401a      	ands	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6899      	ldr	r1, [r3, #8]
 8008e5e:	2384      	movs	r3, #132	; 0x84
 8008e60:	021b      	lsls	r3, r3, #8
 8008e62:	400b      	ands	r3, r1
 8008e64:	431a      	orrs	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68d9      	ldr	r1, [r3, #12]
 8008e6a:	2380      	movs	r3, #128	; 0x80
 8008e6c:	011b      	lsls	r3, r3, #4
 8008e6e:	400b      	ands	r3, r1
 8008e70:	431a      	orrs	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	2102      	movs	r1, #2
 8008e78:	400b      	ands	r3, r1
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	2101      	movs	r1, #1
 8008e82:	400b      	ands	r3, r1
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6999      	ldr	r1, [r3, #24]
 8008e8a:	2380      	movs	r3, #128	; 0x80
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	400b      	ands	r3, r1
 8008e90:	431a      	orrs	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	2138      	movs	r1, #56	; 0x38
 8008e98:	400b      	ands	r3, r1
 8008e9a:	431a      	orrs	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	2180      	movs	r1, #128	; 0x80
 8008ea2:	400b      	ands	r3, r1
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	0011      	movs	r1, r2
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eac:	2380      	movs	r3, #128	; 0x80
 8008eae:	019b      	lsls	r3, r3, #6
 8008eb0:	401a      	ands	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	0c1b      	lsrs	r3, r3, #16
 8008ec0:	2204      	movs	r2, #4
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	0019      	movs	r1, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eca:	2210      	movs	r2, #16
 8008ecc:	401a      	ands	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69da      	ldr	r2, [r3, #28]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4907      	ldr	r1, [pc, #28]	; (8008f00 <HAL_SPI_Init+0x124>)
 8008ee2:	400a      	ands	r2, r1
 8008ee4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2251      	movs	r2, #81	; 0x51
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	0018      	movs	r0, r3
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	b002      	add	sp, #8
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	46c0      	nop			; (mov r8, r8)
 8008f00:	fffff7ff 	.word	0xfffff7ff

08008f04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	603b      	str	r3, [r7, #0]
 8008f10:	1dbb      	adds	r3, r7, #6
 8008f12:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f14:	231f      	movs	r3, #31
 8008f16:	18fb      	adds	r3, r7, r3
 8008f18:	2200      	movs	r2, #0
 8008f1a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2250      	movs	r2, #80	; 0x50
 8008f20:	5c9b      	ldrb	r3, [r3, r2]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d101      	bne.n	8008f2a <HAL_SPI_Transmit+0x26>
 8008f26:	2302      	movs	r3, #2
 8008f28:	e145      	b.n	80091b6 <HAL_SPI_Transmit+0x2b2>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2250      	movs	r2, #80	; 0x50
 8008f2e:	2101      	movs	r1, #1
 8008f30:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f32:	f7fd f8f7 	bl	8006124 <HAL_GetTick>
 8008f36:	0003      	movs	r3, r0
 8008f38:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008f3a:	2316      	movs	r3, #22
 8008f3c:	18fb      	adds	r3, r7, r3
 8008f3e:	1dba      	adds	r2, r7, #6
 8008f40:	8812      	ldrh	r2, [r2, #0]
 8008f42:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2251      	movs	r2, #81	; 0x51
 8008f48:	5c9b      	ldrb	r3, [r3, r2]
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d004      	beq.n	8008f5a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8008f50:	231f      	movs	r3, #31
 8008f52:	18fb      	adds	r3, r7, r3
 8008f54:	2202      	movs	r2, #2
 8008f56:	701a      	strb	r2, [r3, #0]
    goto error;
 8008f58:	e126      	b.n	80091a8 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <HAL_SPI_Transmit+0x64>
 8008f60:	1dbb      	adds	r3, r7, #6
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d104      	bne.n	8008f72 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008f68:	231f      	movs	r3, #31
 8008f6a:	18fb      	adds	r3, r7, r3
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008f70:	e11a      	b.n	80091a8 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2251      	movs	r2, #81	; 0x51
 8008f76:	2103      	movs	r1, #3
 8008f78:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	1dba      	adds	r2, r7, #6
 8008f8a:	8812      	ldrh	r2, [r2, #0]
 8008f8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	1dba      	adds	r2, r7, #6
 8008f92:	8812      	ldrh	r2, [r2, #0]
 8008f94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	2380      	movs	r3, #128	; 0x80
 8008fba:	021b      	lsls	r3, r3, #8
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d110      	bne.n	8008fe2 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2140      	movs	r1, #64	; 0x40
 8008fcc:	438a      	bics	r2, r1
 8008fce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2180      	movs	r1, #128	; 0x80
 8008fdc:	01c9      	lsls	r1, r1, #7
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2240      	movs	r2, #64	; 0x40
 8008fea:	4013      	ands	r3, r2
 8008fec:	2b40      	cmp	r3, #64	; 0x40
 8008fee:	d007      	beq.n	8009000 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2140      	movs	r1, #64	; 0x40
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	2380      	movs	r3, #128	; 0x80
 8009006:	011b      	lsls	r3, r3, #4
 8009008:	429a      	cmp	r2, r3
 800900a:	d152      	bne.n	80090b2 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d004      	beq.n	800901e <HAL_SPI_Transmit+0x11a>
 8009014:	2316      	movs	r3, #22
 8009016:	18fb      	adds	r3, r7, r3
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d143      	bne.n	80090a6 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009022:	881a      	ldrh	r2, [r3, #0]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902e:	1c9a      	adds	r2, r3, #2
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009038:	b29b      	uxth	r3, r3
 800903a:	3b01      	subs	r3, #1
 800903c:	b29a      	uxth	r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009042:	e030      	b.n	80090a6 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	2202      	movs	r2, #2
 800904c:	4013      	ands	r3, r2
 800904e:	2b02      	cmp	r3, #2
 8009050:	d112      	bne.n	8009078 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009056:	881a      	ldrh	r2, [r3, #0]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009062:	1c9a      	adds	r2, r3, #2
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800906c:	b29b      	uxth	r3, r3
 800906e:	3b01      	subs	r3, #1
 8009070:	b29a      	uxth	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	86da      	strh	r2, [r3, #54]	; 0x36
 8009076:	e016      	b.n	80090a6 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009078:	f7fd f854 	bl	8006124 <HAL_GetTick>
 800907c:	0002      	movs	r2, r0
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	429a      	cmp	r2, r3
 8009086:	d802      	bhi.n	800908e <HAL_SPI_Transmit+0x18a>
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	3301      	adds	r3, #1
 800908c:	d102      	bne.n	8009094 <HAL_SPI_Transmit+0x190>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d108      	bne.n	80090a6 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8009094:	231f      	movs	r3, #31
 8009096:	18fb      	adds	r3, r7, r3
 8009098:	2203      	movs	r2, #3
 800909a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2251      	movs	r2, #81	; 0x51
 80090a0:	2101      	movs	r1, #1
 80090a2:	5499      	strb	r1, [r3, r2]
          goto error;
 80090a4:	e080      	b.n	80091a8 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1c9      	bne.n	8009044 <HAL_SPI_Transmit+0x140>
 80090b0:	e053      	b.n	800915a <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d004      	beq.n	80090c4 <HAL_SPI_Transmit+0x1c0>
 80090ba:	2316      	movs	r3, #22
 80090bc:	18fb      	adds	r3, r7, r3
 80090be:	881b      	ldrh	r3, [r3, #0]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d145      	bne.n	8009150 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	330c      	adds	r3, #12
 80090ce:	7812      	ldrb	r2, [r2, #0]
 80090d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d6:	1c5a      	adds	r2, r3, #1
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	3b01      	subs	r3, #1
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80090ea:	e031      	b.n	8009150 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	2202      	movs	r2, #2
 80090f4:	4013      	ands	r3, r2
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d113      	bne.n	8009122 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	330c      	adds	r3, #12
 8009104:	7812      	ldrb	r2, [r2, #0]
 8009106:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009116:	b29b      	uxth	r3, r3
 8009118:	3b01      	subs	r3, #1
 800911a:	b29a      	uxth	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009120:	e016      	b.n	8009150 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009122:	f7fc ffff 	bl	8006124 <HAL_GetTick>
 8009126:	0002      	movs	r2, r0
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	d802      	bhi.n	8009138 <HAL_SPI_Transmit+0x234>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	3301      	adds	r3, #1
 8009136:	d102      	bne.n	800913e <HAL_SPI_Transmit+0x23a>
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d108      	bne.n	8009150 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 800913e:	231f      	movs	r3, #31
 8009140:	18fb      	adds	r3, r7, r3
 8009142:	2203      	movs	r2, #3
 8009144:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2251      	movs	r2, #81	; 0x51
 800914a:	2101      	movs	r1, #1
 800914c:	5499      	strb	r1, [r3, r2]
          goto error;
 800914e:	e02b      	b.n	80091a8 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009154:	b29b      	uxth	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1c8      	bne.n	80090ec <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	0018      	movs	r0, r3
 8009162:	f000 fc1f 	bl	80099a4 <SPI_EndRxTxTransaction>
 8009166:	1e03      	subs	r3, r0, #0
 8009168:	d002      	beq.n	8009170 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2220      	movs	r2, #32
 800916e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10a      	bne.n	800918e <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009178:	2300      	movs	r3, #0
 800917a:	613b      	str	r3, [r7, #16]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	613b      	str	r3, [r7, #16]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	613b      	str	r3, [r7, #16]
 800918c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009192:	2b00      	cmp	r3, #0
 8009194:	d004      	beq.n	80091a0 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8009196:	231f      	movs	r3, #31
 8009198:	18fb      	adds	r3, r7, r3
 800919a:	2201      	movs	r2, #1
 800919c:	701a      	strb	r2, [r3, #0]
 800919e:	e003      	b.n	80091a8 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2251      	movs	r2, #81	; 0x51
 80091a4:	2101      	movs	r1, #1
 80091a6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2250      	movs	r2, #80	; 0x50
 80091ac:	2100      	movs	r1, #0
 80091ae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80091b0:	231f      	movs	r3, #31
 80091b2:	18fb      	adds	r3, r7, r3
 80091b4:	781b      	ldrb	r3, [r3, #0]
}
 80091b6:	0018      	movs	r0, r3
 80091b8:	46bd      	mov	sp, r7
 80091ba:	b008      	add	sp, #32
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091c0:	b590      	push	{r4, r7, lr}
 80091c2:	b089      	sub	sp, #36	; 0x24
 80091c4:	af02      	add	r7, sp, #8
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	603b      	str	r3, [r7, #0]
 80091cc:	1dbb      	adds	r3, r7, #6
 80091ce:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091d0:	2117      	movs	r1, #23
 80091d2:	187b      	adds	r3, r7, r1
 80091d4:	2200      	movs	r2, #0
 80091d6:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2251      	movs	r2, #81	; 0x51
 80091dc:	5c9b      	ldrb	r3, [r3, r2]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d003      	beq.n	80091ec <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80091e4:	187b      	adds	r3, r7, r1
 80091e6:	2202      	movs	r2, #2
 80091e8:	701a      	strb	r2, [r3, #0]
    goto error;
 80091ea:	e109      	b.n	8009400 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	2382      	movs	r3, #130	; 0x82
 80091f2:	005b      	lsls	r3, r3, #1
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d113      	bne.n	8009220 <HAL_SPI_Receive+0x60>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10f      	bne.n	8009220 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2251      	movs	r2, #81	; 0x51
 8009204:	2104      	movs	r1, #4
 8009206:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009208:	1dbb      	adds	r3, r7, #6
 800920a:	881c      	ldrh	r4, [r3, #0]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	68b9      	ldr	r1, [r7, #8]
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	0023      	movs	r3, r4
 8009218:	f000 f900 	bl	800941c <HAL_SPI_TransmitReceive>
 800921c:	0003      	movs	r3, r0
 800921e:	e0f6      	b.n	800940e <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2250      	movs	r2, #80	; 0x50
 8009224:	5c9b      	ldrb	r3, [r3, r2]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d101      	bne.n	800922e <HAL_SPI_Receive+0x6e>
 800922a:	2302      	movs	r3, #2
 800922c:	e0ef      	b.n	800940e <HAL_SPI_Receive+0x24e>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2250      	movs	r2, #80	; 0x50
 8009232:	2101      	movs	r1, #1
 8009234:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009236:	f7fc ff75 	bl	8006124 <HAL_GetTick>
 800923a:	0003      	movs	r3, r0
 800923c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <HAL_SPI_Receive+0x8c>
 8009244:	1dbb      	adds	r3, r7, #6
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d104      	bne.n	8009256 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800924c:	2317      	movs	r3, #23
 800924e:	18fb      	adds	r3, r7, r3
 8009250:	2201      	movs	r2, #1
 8009252:	701a      	strb	r2, [r3, #0]
    goto error;
 8009254:	e0d4      	b.n	8009400 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2251      	movs	r2, #81	; 0x51
 800925a:	2104      	movs	r1, #4
 800925c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	1dba      	adds	r2, r7, #6
 800926e:	8812      	ldrh	r2, [r2, #0]
 8009270:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	1dba      	adds	r2, r7, #6
 8009276:	8812      	ldrh	r2, [r2, #0]
 8009278:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	689a      	ldr	r2, [r3, #8]
 800929c:	2380      	movs	r3, #128	; 0x80
 800929e:	021b      	lsls	r3, r3, #8
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d10f      	bne.n	80092c4 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2140      	movs	r1, #64	; 0x40
 80092b0:	438a      	bics	r2, r1
 80092b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4956      	ldr	r1, [pc, #344]	; (8009418 <HAL_SPI_Receive+0x258>)
 80092c0:	400a      	ands	r2, r1
 80092c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2240      	movs	r2, #64	; 0x40
 80092cc:	4013      	ands	r3, r2
 80092ce:	2b40      	cmp	r3, #64	; 0x40
 80092d0:	d007      	beq.n	80092e2 <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2140      	movs	r1, #64	; 0x40
 80092de:	430a      	orrs	r2, r1
 80092e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d000      	beq.n	80092ec <HAL_SPI_Receive+0x12c>
 80092ea:	e06c      	b.n	80093c6 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80092ec:	e033      	b.n	8009356 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	2201      	movs	r2, #1
 80092f6:	4013      	ands	r3, r2
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d115      	bne.n	8009328 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	330c      	adds	r3, #12
 8009302:	001a      	movs	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009308:	7812      	ldrb	r2, [r2, #0]
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800931c:	b29b      	uxth	r3, r3
 800931e:	3b01      	subs	r3, #1
 8009320:	b29a      	uxth	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009326:	e016      	b.n	8009356 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009328:	f7fc fefc 	bl	8006124 <HAL_GetTick>
 800932c:	0002      	movs	r2, r0
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	429a      	cmp	r2, r3
 8009336:	d802      	bhi.n	800933e <HAL_SPI_Receive+0x17e>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	3301      	adds	r3, #1
 800933c:	d102      	bne.n	8009344 <HAL_SPI_Receive+0x184>
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d108      	bne.n	8009356 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8009344:	2317      	movs	r3, #23
 8009346:	18fb      	adds	r3, r7, r3
 8009348:	2203      	movs	r2, #3
 800934a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2251      	movs	r2, #81	; 0x51
 8009350:	2101      	movs	r1, #1
 8009352:	5499      	strb	r1, [r3, r2]
          goto error;
 8009354:	e054      	b.n	8009400 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800935a:	b29b      	uxth	r3, r3
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1c6      	bne.n	80092ee <HAL_SPI_Receive+0x12e>
 8009360:	e036      	b.n	80093d0 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	2201      	movs	r2, #1
 800936a:	4013      	ands	r3, r2
 800936c:	2b01      	cmp	r3, #1
 800936e:	d113      	bne.n	8009398 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937a:	b292      	uxth	r2, r2
 800937c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009382:	1c9a      	adds	r2, r3, #2
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800938c:	b29b      	uxth	r3, r3
 800938e:	3b01      	subs	r3, #1
 8009390:	b29a      	uxth	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009396:	e016      	b.n	80093c6 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009398:	f7fc fec4 	bl	8006124 <HAL_GetTick>
 800939c:	0002      	movs	r2, r0
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d802      	bhi.n	80093ae <HAL_SPI_Receive+0x1ee>
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	3301      	adds	r3, #1
 80093ac:	d102      	bne.n	80093b4 <HAL_SPI_Receive+0x1f4>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d108      	bne.n	80093c6 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 80093b4:	2317      	movs	r3, #23
 80093b6:	18fb      	adds	r3, r7, r3
 80093b8:	2203      	movs	r2, #3
 80093ba:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2251      	movs	r2, #81	; 0x51
 80093c0:	2101      	movs	r1, #1
 80093c2:	5499      	strb	r1, [r3, r2]
          goto error;
 80093c4:	e01c      	b.n	8009400 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1c8      	bne.n	8009362 <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	0018      	movs	r0, r3
 80093d8:	f000 fa7a 	bl	80098d0 <SPI_EndRxTransaction>
 80093dc:	1e03      	subs	r3, r0, #0
 80093de:	d002      	beq.n	80093e6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2220      	movs	r2, #32
 80093e4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d004      	beq.n	80093f8 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 80093ee:	2317      	movs	r3, #23
 80093f0:	18fb      	adds	r3, r7, r3
 80093f2:	2201      	movs	r2, #1
 80093f4:	701a      	strb	r2, [r3, #0]
 80093f6:	e003      	b.n	8009400 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2251      	movs	r2, #81	; 0x51
 80093fc:	2101      	movs	r1, #1
 80093fe:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2250      	movs	r2, #80	; 0x50
 8009404:	2100      	movs	r1, #0
 8009406:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009408:	2317      	movs	r3, #23
 800940a:	18fb      	adds	r3, r7, r3
 800940c:	781b      	ldrb	r3, [r3, #0]
}
 800940e:	0018      	movs	r0, r3
 8009410:	46bd      	mov	sp, r7
 8009412:	b007      	add	sp, #28
 8009414:	bd90      	pop	{r4, r7, pc}
 8009416:	46c0      	nop			; (mov r8, r8)
 8009418:	ffffbfff 	.word	0xffffbfff

0800941c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b08c      	sub	sp, #48	; 0x30
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
 8009428:	001a      	movs	r2, r3
 800942a:	1cbb      	adds	r3, r7, #2
 800942c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800942e:	2301      	movs	r3, #1
 8009430:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009432:	232b      	movs	r3, #43	; 0x2b
 8009434:	18fb      	adds	r3, r7, r3
 8009436:	2200      	movs	r2, #0
 8009438:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2250      	movs	r2, #80	; 0x50
 800943e:	5c9b      	ldrb	r3, [r3, r2]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_SPI_TransmitReceive+0x2c>
 8009444:	2302      	movs	r3, #2
 8009446:	e1b0      	b.n	80097aa <HAL_SPI_TransmitReceive+0x38e>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2250      	movs	r2, #80	; 0x50
 800944c:	2101      	movs	r1, #1
 800944e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009450:	f7fc fe68 	bl	8006124 <HAL_GetTick>
 8009454:	0003      	movs	r3, r0
 8009456:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009458:	2023      	movs	r0, #35	; 0x23
 800945a:	183b      	adds	r3, r7, r0
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	2151      	movs	r1, #81	; 0x51
 8009460:	5c52      	ldrb	r2, [r2, r1]
 8009462:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800946a:	231a      	movs	r3, #26
 800946c:	18fb      	adds	r3, r7, r3
 800946e:	1cba      	adds	r2, r7, #2
 8009470:	8812      	ldrh	r2, [r2, #0]
 8009472:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009474:	183b      	adds	r3, r7, r0
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d011      	beq.n	80094a0 <HAL_SPI_TransmitReceive+0x84>
 800947c:	69fa      	ldr	r2, [r7, #28]
 800947e:	2382      	movs	r3, #130	; 0x82
 8009480:	005b      	lsls	r3, r3, #1
 8009482:	429a      	cmp	r2, r3
 8009484:	d107      	bne.n	8009496 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d103      	bne.n	8009496 <HAL_SPI_TransmitReceive+0x7a>
 800948e:	183b      	adds	r3, r7, r0
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	2b04      	cmp	r3, #4
 8009494:	d004      	beq.n	80094a0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8009496:	232b      	movs	r3, #43	; 0x2b
 8009498:	18fb      	adds	r3, r7, r3
 800949a:	2202      	movs	r2, #2
 800949c:	701a      	strb	r2, [r3, #0]
    goto error;
 800949e:	e17d      	b.n	800979c <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d006      	beq.n	80094b4 <HAL_SPI_TransmitReceive+0x98>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d003      	beq.n	80094b4 <HAL_SPI_TransmitReceive+0x98>
 80094ac:	1cbb      	adds	r3, r7, #2
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d104      	bne.n	80094be <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80094b4:	232b      	movs	r3, #43	; 0x2b
 80094b6:	18fb      	adds	r3, r7, r3
 80094b8:	2201      	movs	r2, #1
 80094ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80094bc:	e16e      	b.n	800979c <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2251      	movs	r2, #81	; 0x51
 80094c2:	5c9b      	ldrb	r3, [r3, r2]
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d003      	beq.n	80094d2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2251      	movs	r2, #81	; 0x51
 80094ce:	2105      	movs	r1, #5
 80094d0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	1cba      	adds	r2, r7, #2
 80094e2:	8812      	ldrh	r2, [r2, #0]
 80094e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	1cba      	adds	r2, r7, #2
 80094ea:	8812      	ldrh	r2, [r2, #0]
 80094ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	1cba      	adds	r2, r7, #2
 80094f8:	8812      	ldrh	r2, [r2, #0]
 80094fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	1cba      	adds	r2, r7, #2
 8009500:	8812      	ldrh	r2, [r2, #0]
 8009502:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2240      	movs	r2, #64	; 0x40
 8009518:	4013      	ands	r3, r2
 800951a:	2b40      	cmp	r3, #64	; 0x40
 800951c:	d007      	beq.n	800952e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2140      	movs	r1, #64	; 0x40
 800952a:	430a      	orrs	r2, r1
 800952c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	68da      	ldr	r2, [r3, #12]
 8009532:	2380      	movs	r3, #128	; 0x80
 8009534:	011b      	lsls	r3, r3, #4
 8009536:	429a      	cmp	r2, r3
 8009538:	d000      	beq.n	800953c <HAL_SPI_TransmitReceive+0x120>
 800953a:	e07f      	b.n	800963c <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d005      	beq.n	8009550 <HAL_SPI_TransmitReceive+0x134>
 8009544:	231a      	movs	r3, #26
 8009546:	18fb      	adds	r3, r7, r3
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d000      	beq.n	8009550 <HAL_SPI_TransmitReceive+0x134>
 800954e:	e06a      	b.n	8009626 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009554:	881a      	ldrh	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009560:	1c9a      	adds	r2, r3, #2
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800956a:	b29b      	uxth	r3, r3
 800956c:	3b01      	subs	r3, #1
 800956e:	b29a      	uxth	r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009574:	e057      	b.n	8009626 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	2202      	movs	r2, #2
 800957e:	4013      	ands	r3, r2
 8009580:	2b02      	cmp	r3, #2
 8009582:	d11b      	bne.n	80095bc <HAL_SPI_TransmitReceive+0x1a0>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009588:	b29b      	uxth	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d016      	beq.n	80095bc <HAL_SPI_TransmitReceive+0x1a0>
 800958e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009590:	2b01      	cmp	r3, #1
 8009592:	d113      	bne.n	80095bc <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009598:	881a      	ldrh	r2, [r3, #0]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a4:	1c9a      	adds	r2, r3, #2
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	3b01      	subs	r3, #1
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095b8:	2300      	movs	r3, #0
 80095ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	2201      	movs	r2, #1
 80095c4:	4013      	ands	r3, r2
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d119      	bne.n	80095fe <HAL_SPI_TransmitReceive+0x1e2>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d014      	beq.n	80095fe <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095de:	b292      	uxth	r2, r2
 80095e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e6:	1c9a      	adds	r2, r3, #2
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	3b01      	subs	r3, #1
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095fa:	2301      	movs	r3, #1
 80095fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80095fe:	f7fc fd91 	bl	8006124 <HAL_GetTick>
 8009602:	0002      	movs	r2, r0
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800960a:	429a      	cmp	r2, r3
 800960c:	d80b      	bhi.n	8009626 <HAL_SPI_TransmitReceive+0x20a>
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	3301      	adds	r3, #1
 8009612:	d008      	beq.n	8009626 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8009614:	232b      	movs	r3, #43	; 0x2b
 8009616:	18fb      	adds	r3, r7, r3
 8009618:	2203      	movs	r2, #3
 800961a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2251      	movs	r2, #81	; 0x51
 8009620:	2101      	movs	r1, #1
 8009622:	5499      	strb	r1, [r3, r2]
        goto error;
 8009624:	e0ba      	b.n	800979c <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800962a:	b29b      	uxth	r3, r3
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1a2      	bne.n	8009576 <HAL_SPI_TransmitReceive+0x15a>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009634:	b29b      	uxth	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d19d      	bne.n	8009576 <HAL_SPI_TransmitReceive+0x15a>
 800963a:	e083      	b.n	8009744 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <HAL_SPI_TransmitReceive+0x234>
 8009644:	231a      	movs	r3, #26
 8009646:	18fb      	adds	r3, r7, r3
 8009648:	881b      	ldrh	r3, [r3, #0]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d000      	beq.n	8009650 <HAL_SPI_TransmitReceive+0x234>
 800964e:	e06f      	b.n	8009730 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	330c      	adds	r3, #12
 800965a:	7812      	ldrb	r2, [r2, #0]
 800965c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800966c:	b29b      	uxth	r3, r3
 800966e:	3b01      	subs	r3, #1
 8009670:	b29a      	uxth	r2, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009676:	e05b      	b.n	8009730 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	2202      	movs	r2, #2
 8009680:	4013      	ands	r3, r2
 8009682:	2b02      	cmp	r3, #2
 8009684:	d11c      	bne.n	80096c0 <HAL_SPI_TransmitReceive+0x2a4>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800968a:	b29b      	uxth	r3, r3
 800968c:	2b00      	cmp	r3, #0
 800968e:	d017      	beq.n	80096c0 <HAL_SPI_TransmitReceive+0x2a4>
 8009690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009692:	2b01      	cmp	r3, #1
 8009694:	d114      	bne.n	80096c0 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	330c      	adds	r3, #12
 80096a0:	7812      	ldrb	r2, [r2, #0]
 80096a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a8:	1c5a      	adds	r2, r3, #1
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	3b01      	subs	r3, #1
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096bc:	2300      	movs	r3, #0
 80096be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	2201      	movs	r2, #1
 80096c8:	4013      	ands	r3, r2
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d119      	bne.n	8009702 <HAL_SPI_TransmitReceive+0x2e6>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d014      	beq.n	8009702 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68da      	ldr	r2, [r3, #12]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e2:	b2d2      	uxtb	r2, r2
 80096e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	3b01      	subs	r3, #1
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80096fe:	2301      	movs	r3, #1
 8009700:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009702:	f7fc fd0f 	bl	8006124 <HAL_GetTick>
 8009706:	0002      	movs	r2, r0
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800970e:	429a      	cmp	r2, r3
 8009710:	d802      	bhi.n	8009718 <HAL_SPI_TransmitReceive+0x2fc>
 8009712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009714:	3301      	adds	r3, #1
 8009716:	d102      	bne.n	800971e <HAL_SPI_TransmitReceive+0x302>
 8009718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971a:	2b00      	cmp	r3, #0
 800971c:	d108      	bne.n	8009730 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800971e:	232b      	movs	r3, #43	; 0x2b
 8009720:	18fb      	adds	r3, r7, r3
 8009722:	2203      	movs	r2, #3
 8009724:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2251      	movs	r2, #81	; 0x51
 800972a:	2101      	movs	r1, #1
 800972c:	5499      	strb	r1, [r3, r2]
        goto error;
 800972e:	e035      	b.n	800979c <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009734:	b29b      	uxth	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d19e      	bne.n	8009678 <HAL_SPI_TransmitReceive+0x25c>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800973e:	b29b      	uxth	r3, r3
 8009740:	2b00      	cmp	r3, #0
 8009742:	d199      	bne.n	8009678 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009746:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	0018      	movs	r0, r3
 800974c:	f000 f92a 	bl	80099a4 <SPI_EndRxTxTransaction>
 8009750:	1e03      	subs	r3, r0, #0
 8009752:	d007      	beq.n	8009764 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8009754:	232b      	movs	r3, #43	; 0x2b
 8009756:	18fb      	adds	r3, r7, r3
 8009758:	2201      	movs	r2, #1
 800975a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2220      	movs	r2, #32
 8009760:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009762:	e01b      	b.n	800979c <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10a      	bne.n	8009782 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800976c:	2300      	movs	r3, #0
 800976e:	617b      	str	r3, [r7, #20]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	617b      	str	r3, [r7, #20]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	617b      	str	r3, [r7, #20]
 8009780:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009786:	2b00      	cmp	r3, #0
 8009788:	d004      	beq.n	8009794 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 800978a:	232b      	movs	r3, #43	; 0x2b
 800978c:	18fb      	adds	r3, r7, r3
 800978e:	2201      	movs	r2, #1
 8009790:	701a      	strb	r2, [r3, #0]
 8009792:	e003      	b.n	800979c <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2251      	movs	r2, #81	; 0x51
 8009798:	2101      	movs	r1, #1
 800979a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2250      	movs	r2, #80	; 0x50
 80097a0:	2100      	movs	r1, #0
 80097a2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80097a4:	232b      	movs	r3, #43	; 0x2b
 80097a6:	18fb      	adds	r3, r7, r3
 80097a8:	781b      	ldrb	r3, [r3, #0]
}
 80097aa:	0018      	movs	r0, r3
 80097ac:	46bd      	mov	sp, r7
 80097ae:	b00c      	add	sp, #48	; 0x30
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b088      	sub	sp, #32
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	603b      	str	r3, [r7, #0]
 80097c0:	1dfb      	adds	r3, r7, #7
 80097c2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80097c4:	f7fc fcae 	bl	8006124 <HAL_GetTick>
 80097c8:	0002      	movs	r2, r0
 80097ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097cc:	1a9b      	subs	r3, r3, r2
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	18d3      	adds	r3, r2, r3
 80097d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80097d4:	f7fc fca6 	bl	8006124 <HAL_GetTick>
 80097d8:	0003      	movs	r3, r0
 80097da:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80097dc:	4b3a      	ldr	r3, [pc, #232]	; (80098c8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	015b      	lsls	r3, r3, #5
 80097e2:	0d1b      	lsrs	r3, r3, #20
 80097e4:	69fa      	ldr	r2, [r7, #28]
 80097e6:	4353      	muls	r3, r2
 80097e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097ea:	e058      	b.n	800989e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	3301      	adds	r3, #1
 80097f0:	d055      	beq.n	800989e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80097f2:	f7fc fc97 	bl	8006124 <HAL_GetTick>
 80097f6:	0002      	movs	r2, r0
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	69fa      	ldr	r2, [r7, #28]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d902      	bls.n	8009808 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d142      	bne.n	800988e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	21e0      	movs	r1, #224	; 0xe0
 8009814:	438a      	bics	r2, r1
 8009816:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	2382      	movs	r3, #130	; 0x82
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	429a      	cmp	r2, r3
 8009822:	d113      	bne.n	800984c <SPI_WaitFlagStateUntilTimeout+0x98>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	689a      	ldr	r2, [r3, #8]
 8009828:	2380      	movs	r3, #128	; 0x80
 800982a:	021b      	lsls	r3, r3, #8
 800982c:	429a      	cmp	r2, r3
 800982e:	d005      	beq.n	800983c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	689a      	ldr	r2, [r3, #8]
 8009834:	2380      	movs	r3, #128	; 0x80
 8009836:	00db      	lsls	r3, r3, #3
 8009838:	429a      	cmp	r2, r3
 800983a:	d107      	bne.n	800984c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2140      	movs	r1, #64	; 0x40
 8009848:	438a      	bics	r2, r1
 800984a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009850:	2380      	movs	r3, #128	; 0x80
 8009852:	019b      	lsls	r3, r3, #6
 8009854:	429a      	cmp	r2, r3
 8009856:	d110      	bne.n	800987a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	491a      	ldr	r1, [pc, #104]	; (80098cc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009864:	400a      	ands	r2, r1
 8009866:	601a      	str	r2, [r3, #0]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2180      	movs	r1, #128	; 0x80
 8009874:	0189      	lsls	r1, r1, #6
 8009876:	430a      	orrs	r2, r1
 8009878:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2251      	movs	r2, #81	; 0x51
 800987e:	2101      	movs	r1, #1
 8009880:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2250      	movs	r2, #80	; 0x50
 8009886:	2100      	movs	r1, #0
 8009888:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	e017      	b.n	80098be <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d101      	bne.n	8009898 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009894:	2300      	movs	r3, #0
 8009896:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	3b01      	subs	r3, #1
 800989c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	4013      	ands	r3, r2
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	425a      	negs	r2, r3
 80098ae:	4153      	adcs	r3, r2
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	001a      	movs	r2, r3
 80098b4:	1dfb      	adds	r3, r7, #7
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d197      	bne.n	80097ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	0018      	movs	r0, r3
 80098c0:	46bd      	mov	sp, r7
 80098c2:	b008      	add	sp, #32
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	46c0      	nop			; (mov r8, r8)
 80098c8:	20000000 	.word	0x20000000
 80098cc:	ffffdfff 	.word	0xffffdfff

080098d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af02      	add	r7, sp, #8
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	2382      	movs	r3, #130	; 0x82
 80098e2:	005b      	lsls	r3, r3, #1
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d113      	bne.n	8009910 <SPI_EndRxTransaction+0x40>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	2380      	movs	r3, #128	; 0x80
 80098ee:	021b      	lsls	r3, r3, #8
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d005      	beq.n	8009900 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	689a      	ldr	r2, [r3, #8]
 80098f8:	2380      	movs	r3, #128	; 0x80
 80098fa:	00db      	lsls	r3, r3, #3
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d107      	bne.n	8009910 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2140      	movs	r1, #64	; 0x40
 800990c:	438a      	bics	r2, r1
 800990e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	685a      	ldr	r2, [r3, #4]
 8009914:	2382      	movs	r3, #130	; 0x82
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	429a      	cmp	r2, r3
 800991a:	d12b      	bne.n	8009974 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	689a      	ldr	r2, [r3, #8]
 8009920:	2380      	movs	r3, #128	; 0x80
 8009922:	00db      	lsls	r3, r3, #3
 8009924:	429a      	cmp	r2, r3
 8009926:	d012      	beq.n	800994e <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	0013      	movs	r3, r2
 8009932:	2200      	movs	r2, #0
 8009934:	2180      	movs	r1, #128	; 0x80
 8009936:	f7ff ff3d 	bl	80097b4 <SPI_WaitFlagStateUntilTimeout>
 800993a:	1e03      	subs	r3, r0, #0
 800993c:	d02d      	beq.n	800999a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009942:	2220      	movs	r2, #32
 8009944:	431a      	orrs	r2, r3
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e026      	b.n	800999c <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	0013      	movs	r3, r2
 8009958:	2200      	movs	r2, #0
 800995a:	2101      	movs	r1, #1
 800995c:	f7ff ff2a 	bl	80097b4 <SPI_WaitFlagStateUntilTimeout>
 8009960:	1e03      	subs	r3, r0, #0
 8009962:	d01a      	beq.n	800999a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009968:	2220      	movs	r2, #32
 800996a:	431a      	orrs	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e013      	b.n	800999c <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	0013      	movs	r3, r2
 800997e:	2200      	movs	r2, #0
 8009980:	2101      	movs	r1, #1
 8009982:	f7ff ff17 	bl	80097b4 <SPI_WaitFlagStateUntilTimeout>
 8009986:	1e03      	subs	r3, r0, #0
 8009988:	d007      	beq.n	800999a <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998e:	2220      	movs	r2, #32
 8009990:	431a      	orrs	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e000      	b.n	800999c <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	0018      	movs	r0, r3
 800999e:	46bd      	mov	sp, r7
 80099a0:	b004      	add	sp, #16
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b088      	sub	sp, #32
 80099a8:	af02      	add	r7, sp, #8
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80099b0:	4b1d      	ldr	r3, [pc, #116]	; (8009a28 <SPI_EndRxTxTransaction+0x84>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	491d      	ldr	r1, [pc, #116]	; (8009a2c <SPI_EndRxTxTransaction+0x88>)
 80099b6:	0018      	movs	r0, r3
 80099b8:	f7f6 fbcc 	bl	8000154 <__udivsi3>
 80099bc:	0003      	movs	r3, r0
 80099be:	001a      	movs	r2, r3
 80099c0:	0013      	movs	r3, r2
 80099c2:	015b      	lsls	r3, r3, #5
 80099c4:	1a9b      	subs	r3, r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	189b      	adds	r3, r3, r2
 80099ca:	00db      	lsls	r3, r3, #3
 80099cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	2382      	movs	r3, #130	; 0x82
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d112      	bne.n	8009a00 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	0013      	movs	r3, r2
 80099e4:	2200      	movs	r2, #0
 80099e6:	2180      	movs	r1, #128	; 0x80
 80099e8:	f7ff fee4 	bl	80097b4 <SPI_WaitFlagStateUntilTimeout>
 80099ec:	1e03      	subs	r3, r0, #0
 80099ee:	d016      	beq.n	8009a1e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f4:	2220      	movs	r2, #32
 80099f6:	431a      	orrs	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80099fc:	2303      	movs	r3, #3
 80099fe:	e00f      	b.n	8009a20 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00a      	beq.n	8009a1c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	2280      	movs	r2, #128	; 0x80
 8009a14:	4013      	ands	r3, r2
 8009a16:	2b80      	cmp	r3, #128	; 0x80
 8009a18:	d0f2      	beq.n	8009a00 <SPI_EndRxTxTransaction+0x5c>
 8009a1a:	e000      	b.n	8009a1e <SPI_EndRxTxTransaction+0x7a>
        break;
 8009a1c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	0018      	movs	r0, r3
 8009a22:	46bd      	mov	sp, r7
 8009a24:	b006      	add	sp, #24
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	20000000 	.word	0x20000000
 8009a2c:	016e3600 	.word	0x016e3600

08009a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d101      	bne.n	8009a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e032      	b.n	8009aa8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2239      	movs	r2, #57	; 0x39
 8009a46:	5c9b      	ldrb	r3, [r3, r2]
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d107      	bne.n	8009a5e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2238      	movs	r2, #56	; 0x38
 8009a52:	2100      	movs	r1, #0
 8009a54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	0018      	movs	r0, r3
 8009a5a:	f7fc fa35 	bl	8005ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2239      	movs	r2, #57	; 0x39
 8009a62:	2102      	movs	r1, #2
 8009a64:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	0019      	movs	r1, r3
 8009a70:	0010      	movs	r0, r2
 8009a72:	f000 f977 	bl	8009d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	223e      	movs	r2, #62	; 0x3e
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	223a      	movs	r2, #58	; 0x3a
 8009a82:	2101      	movs	r1, #1
 8009a84:	5499      	strb	r1, [r3, r2]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	223b      	movs	r2, #59	; 0x3b
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	5499      	strb	r1, [r3, r2]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	223c      	movs	r2, #60	; 0x3c
 8009a92:	2101      	movs	r1, #1
 8009a94:	5499      	strb	r1, [r3, r2]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	223d      	movs	r2, #61	; 0x3d
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2239      	movs	r2, #57	; 0x39
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	b002      	add	sp, #8
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2239      	movs	r2, #57	; 0x39
 8009abc:	5c9b      	ldrb	r3, [r3, r2]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d001      	beq.n	8009ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e03b      	b.n	8009b40 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2239      	movs	r2, #57	; 0x39
 8009acc:	2102      	movs	r1, #2
 8009ace:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68da      	ldr	r2, [r3, #12]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2101      	movs	r1, #1
 8009adc:	430a      	orrs	r2, r1
 8009ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	2380      	movs	r3, #128	; 0x80
 8009ae6:	05db      	lsls	r3, r3, #23
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d00e      	beq.n	8009b0a <HAL_TIM_Base_Start_IT+0x5a>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a15      	ldr	r2, [pc, #84]	; (8009b48 <HAL_TIM_Base_Start_IT+0x98>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d009      	beq.n	8009b0a <HAL_TIM_Base_Start_IT+0x5a>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a14      	ldr	r2, [pc, #80]	; (8009b4c <HAL_TIM_Base_Start_IT+0x9c>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d004      	beq.n	8009b0a <HAL_TIM_Base_Start_IT+0x5a>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a12      	ldr	r2, [pc, #72]	; (8009b50 <HAL_TIM_Base_Start_IT+0xa0>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d111      	bne.n	8009b2e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	2207      	movs	r2, #7
 8009b12:	4013      	ands	r3, r2
 8009b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2b06      	cmp	r3, #6
 8009b1a:	d010      	beq.n	8009b3e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2101      	movs	r1, #1
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b2c:	e007      	b.n	8009b3e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2101      	movs	r1, #1
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	0018      	movs	r0, r3
 8009b42:	46bd      	mov	sp, r7
 8009b44:	b004      	add	sp, #16
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	40000400 	.word	0x40000400
 8009b4c:	40010800 	.word	0x40010800
 8009b50:	40011400 	.word	0x40011400

08009b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	2202      	movs	r2, #2
 8009b64:	4013      	ands	r3, r2
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d124      	bne.n	8009bb4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	2202      	movs	r2, #2
 8009b72:	4013      	ands	r3, r2
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d11d      	bne.n	8009bb4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2203      	movs	r2, #3
 8009b7e:	4252      	negs	r2, r2
 8009b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2201      	movs	r2, #1
 8009b86:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	2203      	movs	r2, #3
 8009b90:	4013      	ands	r3, r2
 8009b92:	d004      	beq.n	8009b9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	0018      	movs	r0, r3
 8009b98:	f000 f8cc 	bl	8009d34 <HAL_TIM_IC_CaptureCallback>
 8009b9c:	e007      	b.n	8009bae <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	f000 f8bf 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	0018      	movs	r0, r3
 8009baa:	f000 f8cb 	bl	8009d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	2204      	movs	r2, #4
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	2b04      	cmp	r3, #4
 8009bc0:	d125      	bne.n	8009c0e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	2204      	movs	r2, #4
 8009bca:	4013      	ands	r3, r2
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	d11e      	bne.n	8009c0e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2205      	movs	r2, #5
 8009bd6:	4252      	negs	r2, r2
 8009bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2202      	movs	r2, #2
 8009bde:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	699a      	ldr	r2, [r3, #24]
 8009be6:	23c0      	movs	r3, #192	; 0xc0
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4013      	ands	r3, r2
 8009bec:	d004      	beq.n	8009bf8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	0018      	movs	r0, r3
 8009bf2:	f000 f89f 	bl	8009d34 <HAL_TIM_IC_CaptureCallback>
 8009bf6:	e007      	b.n	8009c08 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	0018      	movs	r0, r3
 8009bfc:	f000 f892 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	0018      	movs	r0, r3
 8009c04:	f000 f89e 	bl	8009d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	2208      	movs	r2, #8
 8009c16:	4013      	ands	r3, r2
 8009c18:	2b08      	cmp	r3, #8
 8009c1a:	d124      	bne.n	8009c66 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	2208      	movs	r2, #8
 8009c24:	4013      	ands	r3, r2
 8009c26:	2b08      	cmp	r3, #8
 8009c28:	d11d      	bne.n	8009c66 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2209      	movs	r2, #9
 8009c30:	4252      	negs	r2, r2
 8009c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2204      	movs	r2, #4
 8009c38:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	2203      	movs	r2, #3
 8009c42:	4013      	ands	r3, r2
 8009c44:	d004      	beq.n	8009c50 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	0018      	movs	r0, r3
 8009c4a:	f000 f873 	bl	8009d34 <HAL_TIM_IC_CaptureCallback>
 8009c4e:	e007      	b.n	8009c60 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	0018      	movs	r0, r3
 8009c54:	f000 f866 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	0018      	movs	r0, r3
 8009c5c:	f000 f872 	bl	8009d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	2210      	movs	r2, #16
 8009c6e:	4013      	ands	r3, r2
 8009c70:	2b10      	cmp	r3, #16
 8009c72:	d125      	bne.n	8009cc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	2210      	movs	r2, #16
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	2b10      	cmp	r3, #16
 8009c80:	d11e      	bne.n	8009cc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2211      	movs	r2, #17
 8009c88:	4252      	negs	r2, r2
 8009c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2208      	movs	r2, #8
 8009c90:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	69da      	ldr	r2, [r3, #28]
 8009c98:	23c0      	movs	r3, #192	; 0xc0
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	d004      	beq.n	8009caa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	0018      	movs	r0, r3
 8009ca4:	f000 f846 	bl	8009d34 <HAL_TIM_IC_CaptureCallback>
 8009ca8:	e007      	b.n	8009cba <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	0018      	movs	r0, r3
 8009cae:	f000 f839 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	0018      	movs	r0, r3
 8009cb6:	f000 f845 	bl	8009d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	4013      	ands	r3, r2
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d10f      	bne.n	8009cee <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d108      	bne.n	8009cee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	4252      	negs	r2, r2
 8009ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	0018      	movs	r0, r3
 8009cea:	f7fb fe3f 	bl	800596c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	2240      	movs	r2, #64	; 0x40
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	2b40      	cmp	r3, #64	; 0x40
 8009cfa:	d10f      	bne.n	8009d1c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	2240      	movs	r2, #64	; 0x40
 8009d04:	4013      	ands	r3, r2
 8009d06:	2b40      	cmp	r3, #64	; 0x40
 8009d08:	d108      	bne.n	8009d1c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2241      	movs	r2, #65	; 0x41
 8009d10:	4252      	negs	r2, r2
 8009d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	0018      	movs	r0, r3
 8009d18:	f000 f81c 	bl	8009d54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d1c:	46c0      	nop			; (mov r8, r8)
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	b002      	add	sp, #8
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d2c:	46c0      	nop			; (mov r8, r8)
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	b002      	add	sp, #8
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d3c:	46c0      	nop			; (mov r8, r8)
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	b002      	add	sp, #8
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d4c:	46c0      	nop			; (mov r8, r8)
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	b002      	add	sp, #8
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d5c:	46c0      	nop			; (mov r8, r8)
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	b002      	add	sp, #8
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	2380      	movs	r3, #128	; 0x80
 8009d78:	05db      	lsls	r3, r3, #23
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d00b      	beq.n	8009d96 <TIM_Base_SetConfig+0x32>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a23      	ldr	r2, [pc, #140]	; (8009e10 <TIM_Base_SetConfig+0xac>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d007      	beq.n	8009d96 <TIM_Base_SetConfig+0x32>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a22      	ldr	r2, [pc, #136]	; (8009e14 <TIM_Base_SetConfig+0xb0>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d003      	beq.n	8009d96 <TIM_Base_SetConfig+0x32>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a21      	ldr	r2, [pc, #132]	; (8009e18 <TIM_Base_SetConfig+0xb4>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d108      	bne.n	8009da8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2270      	movs	r2, #112	; 0x70
 8009d9a:	4393      	bics	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	2380      	movs	r3, #128	; 0x80
 8009dac:	05db      	lsls	r3, r3, #23
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d00b      	beq.n	8009dca <TIM_Base_SetConfig+0x66>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a16      	ldr	r2, [pc, #88]	; (8009e10 <TIM_Base_SetConfig+0xac>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d007      	beq.n	8009dca <TIM_Base_SetConfig+0x66>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a15      	ldr	r2, [pc, #84]	; (8009e14 <TIM_Base_SetConfig+0xb0>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d003      	beq.n	8009dca <TIM_Base_SetConfig+0x66>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a14      	ldr	r2, [pc, #80]	; (8009e18 <TIM_Base_SetConfig+0xb4>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d108      	bne.n	8009ddc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	4a13      	ldr	r2, [pc, #76]	; (8009e1c <TIM_Base_SetConfig+0xb8>)
 8009dce:	4013      	ands	r3, r2
 8009dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2280      	movs	r2, #128	; 0x80
 8009de0:	4393      	bics	r3, r2
 8009de2:	001a      	movs	r2, r3
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	689a      	ldr	r2, [r3, #8]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	615a      	str	r2, [r3, #20]
}
 8009e08:	46c0      	nop			; (mov r8, r8)
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	b004      	add	sp, #16
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	40000400 	.word	0x40000400
 8009e14:	40010800 	.word	0x40010800
 8009e18:	40011400 	.word	0x40011400
 8009e1c:	fffffcff 	.word	0xfffffcff

08009e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2238      	movs	r2, #56	; 0x38
 8009e2e:	5c9b      	ldrb	r3, [r3, r2]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d101      	bne.n	8009e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e34:	2302      	movs	r3, #2
 8009e36:	e047      	b.n	8009ec8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2238      	movs	r2, #56	; 0x38
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2239      	movs	r2, #57	; 0x39
 8009e44:	2102      	movs	r1, #2
 8009e46:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2270      	movs	r2, #112	; 0x70
 8009e5c:	4393      	bics	r3, r2
 8009e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	2380      	movs	r3, #128	; 0x80
 8009e78:	05db      	lsls	r3, r3, #23
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d00e      	beq.n	8009e9c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a13      	ldr	r2, [pc, #76]	; (8009ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d009      	beq.n	8009e9c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a11      	ldr	r2, [pc, #68]	; (8009ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d004      	beq.n	8009e9c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a10      	ldr	r2, [pc, #64]	; (8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d10c      	bne.n	8009eb6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	2280      	movs	r2, #128	; 0x80
 8009ea0:	4393      	bics	r3, r2
 8009ea2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2239      	movs	r2, #57	; 0x39
 8009eba:	2101      	movs	r1, #1
 8009ebc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2238      	movs	r2, #56	; 0x38
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	0018      	movs	r0, r3
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	b004      	add	sp, #16
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	40000400 	.word	0x40000400
 8009ed4:	40010800 	.word	0x40010800
 8009ed8:	40011400 	.word	0x40011400

08009edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d101      	bne.n	8009eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e044      	b.n	8009f78 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d107      	bne.n	8009f06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2278      	movs	r2, #120	; 0x78
 8009efa:	2100      	movs	r1, #0
 8009efc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	0018      	movs	r0, r3
 8009f02:	f7fc f833 	bl	8005f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2224      	movs	r2, #36	; 0x24
 8009f0a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2101      	movs	r1, #1
 8009f18:	438a      	bics	r2, r1
 8009f1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	0018      	movs	r0, r3
 8009f20:	f000 fc2c 	bl	800a77c <UART_SetConfig>
 8009f24:	0003      	movs	r3, r0
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d101      	bne.n	8009f2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e024      	b.n	8009f78 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d003      	beq.n	8009f3e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	0018      	movs	r0, r3
 8009f3a:	f000 febd 	bl	800acb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	685a      	ldr	r2, [r3, #4]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	490d      	ldr	r1, [pc, #52]	; (8009f80 <HAL_UART_Init+0xa4>)
 8009f4a:	400a      	ands	r2, r1
 8009f4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689a      	ldr	r2, [r3, #8]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	212a      	movs	r1, #42	; 0x2a
 8009f5a:	438a      	bics	r2, r1
 8009f5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2101      	movs	r1, #1
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	0018      	movs	r0, r3
 8009f72:	f000 ff55 	bl	800ae20 <UART_CheckIdleState>
 8009f76:	0003      	movs	r3, r0
}
 8009f78:	0018      	movs	r0, r3
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	b002      	add	sp, #8
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	ffffb7ff 	.word	0xffffb7ff

08009f84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b08a      	sub	sp, #40	; 0x28
 8009f88:	af02      	add	r7, sp, #8
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	603b      	str	r3, [r7, #0]
 8009f90:	1dbb      	adds	r3, r7, #6
 8009f92:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f98:	2b20      	cmp	r3, #32
 8009f9a:	d000      	beq.n	8009f9e <HAL_UART_Transmit+0x1a>
 8009f9c:	e08c      	b.n	800a0b8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d003      	beq.n	8009fac <HAL_UART_Transmit+0x28>
 8009fa4:	1dbb      	adds	r3, r7, #6
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d101      	bne.n	8009fb0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e084      	b.n	800a0ba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	689a      	ldr	r2, [r3, #8]
 8009fb4:	2380      	movs	r3, #128	; 0x80
 8009fb6:	015b      	lsls	r3, r3, #5
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d109      	bne.n	8009fd0 <HAL_UART_Transmit+0x4c>
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d105      	bne.n	8009fd0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	4013      	ands	r3, r2
 8009fca:	d001      	beq.n	8009fd0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e074      	b.n	800a0ba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2284      	movs	r2, #132	; 0x84
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2221      	movs	r2, #33	; 0x21
 8009fdc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fde:	f7fc f8a1 	bl	8006124 <HAL_GetTick>
 8009fe2:	0003      	movs	r3, r0
 8009fe4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	1dba      	adds	r2, r7, #6
 8009fea:	2150      	movs	r1, #80	; 0x50
 8009fec:	8812      	ldrh	r2, [r2, #0]
 8009fee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	1dba      	adds	r2, r7, #6
 8009ff4:	2152      	movs	r1, #82	; 0x52
 8009ff6:	8812      	ldrh	r2, [r2, #0]
 8009ff8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	689a      	ldr	r2, [r3, #8]
 8009ffe:	2380      	movs	r3, #128	; 0x80
 800a000:	015b      	lsls	r3, r3, #5
 800a002:	429a      	cmp	r2, r3
 800a004:	d108      	bne.n	800a018 <HAL_UART_Transmit+0x94>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d104      	bne.n	800a018 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800a00e:	2300      	movs	r3, #0
 800a010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	61bb      	str	r3, [r7, #24]
 800a016:	e003      	b.n	800a020 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a01c:	2300      	movs	r3, #0
 800a01e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a020:	e02f      	b.n	800a082 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	0013      	movs	r3, r2
 800a02c:	2200      	movs	r2, #0
 800a02e:	2180      	movs	r1, #128	; 0x80
 800a030:	f000 ff9e 	bl	800af70 <UART_WaitOnFlagUntilTimeout>
 800a034:	1e03      	subs	r3, r0, #0
 800a036:	d004      	beq.n	800a042 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2220      	movs	r2, #32
 800a03c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e03b      	b.n	800a0ba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10b      	bne.n	800a060 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	001a      	movs	r2, r3
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	05d2      	lsls	r2, r2, #23
 800a054:	0dd2      	lsrs	r2, r2, #23
 800a056:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	3302      	adds	r3, #2
 800a05c:	61bb      	str	r3, [r7, #24]
 800a05e:	e007      	b.n	800a070 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	781a      	ldrb	r2, [r3, #0]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	3301      	adds	r3, #1
 800a06e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2252      	movs	r2, #82	; 0x52
 800a074:	5a9b      	ldrh	r3, [r3, r2]
 800a076:	b29b      	uxth	r3, r3
 800a078:	3b01      	subs	r3, #1
 800a07a:	b299      	uxth	r1, r3
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2252      	movs	r2, #82	; 0x52
 800a080:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2252      	movs	r2, #82	; 0x52
 800a086:	5a9b      	ldrh	r3, [r3, r2]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1c9      	bne.n	800a022 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	0013      	movs	r3, r2
 800a098:	2200      	movs	r2, #0
 800a09a:	2140      	movs	r1, #64	; 0x40
 800a09c:	f000 ff68 	bl	800af70 <UART_WaitOnFlagUntilTimeout>
 800a0a0:	1e03      	subs	r3, r0, #0
 800a0a2:	d004      	beq.n	800a0ae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e005      	b.n	800a0ba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	e000      	b.n	800a0ba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800a0b8:	2302      	movs	r3, #2
  }
}
 800a0ba:	0018      	movs	r0, r3
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	b008      	add	sp, #32
 800a0c0:	bd80      	pop	{r7, pc}
	...

0800a0c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b088      	sub	sp, #32
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	1dbb      	adds	r3, r7, #6
 800a0d0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2280      	movs	r2, #128	; 0x80
 800a0d6:	589b      	ldr	r3, [r3, r2]
 800a0d8:	2b20      	cmp	r3, #32
 800a0da:	d14a      	bne.n	800a172 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d003      	beq.n	800a0ea <HAL_UART_Receive_IT+0x26>
 800a0e2:	1dbb      	adds	r3, r7, #6
 800a0e4:	881b      	ldrh	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d101      	bne.n	800a0ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e042      	b.n	800a174 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	689a      	ldr	r2, [r3, #8]
 800a0f2:	2380      	movs	r3, #128	; 0x80
 800a0f4:	015b      	lsls	r3, r3, #5
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d109      	bne.n	800a10e <HAL_UART_Receive_IT+0x4a>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d105      	bne.n	800a10e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	2201      	movs	r2, #1
 800a106:	4013      	ands	r3, r2
 800a108:	d001      	beq.n	800a10e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e032      	b.n	800a174 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a18      	ldr	r2, [pc, #96]	; (800a17c <HAL_UART_Receive_IT+0xb8>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d020      	beq.n	800a160 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685a      	ldr	r2, [r3, #4]
 800a124:	2380      	movs	r3, #128	; 0x80
 800a126:	041b      	lsls	r3, r3, #16
 800a128:	4013      	ands	r3, r2
 800a12a:	d019      	beq.n	800a160 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a12c:	f3ef 8310 	mrs	r3, PRIMASK
 800a130:	613b      	str	r3, [r7, #16]
  return(result);
 800a132:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a134:	61fb      	str	r3, [r7, #28]
 800a136:	2301      	movs	r3, #1
 800a138:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f383 8810 	msr	PRIMASK, r3
}
 800a140:	46c0      	nop			; (mov r8, r8)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2180      	movs	r1, #128	; 0x80
 800a14e:	04c9      	lsls	r1, r1, #19
 800a150:	430a      	orrs	r2, r1
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	f383 8810 	msr	PRIMASK, r3
}
 800a15e:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a160:	1dbb      	adds	r3, r7, #6
 800a162:	881a      	ldrh	r2, [r3, #0]
 800a164:	68b9      	ldr	r1, [r7, #8]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	0018      	movs	r0, r3
 800a16a:	f000 ff6b 	bl	800b044 <UART_Start_Receive_IT>
 800a16e:	0003      	movs	r3, r0
 800a170:	e000      	b.n	800a174 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800a172:	2302      	movs	r3, #2
  }
}
 800a174:	0018      	movs	r0, r3
 800a176:	46bd      	mov	sp, r7
 800a178:	b008      	add	sp, #32
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	40004800 	.word	0x40004800

0800a180 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a180:	b590      	push	{r4, r7, lr}
 800a182:	b0ab      	sub	sp, #172	; 0xac
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	69db      	ldr	r3, [r3, #28]
 800a18e:	22a4      	movs	r2, #164	; 0xa4
 800a190:	18b9      	adds	r1, r7, r2
 800a192:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	20a0      	movs	r0, #160	; 0xa0
 800a19c:	1839      	adds	r1, r7, r0
 800a19e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	219c      	movs	r1, #156	; 0x9c
 800a1a8:	1879      	adds	r1, r7, r1
 800a1aa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a1ac:	0011      	movs	r1, r2
 800a1ae:	18bb      	adds	r3, r7, r2
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a99      	ldr	r2, [pc, #612]	; (800a418 <HAL_UART_IRQHandler+0x298>)
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	2298      	movs	r2, #152	; 0x98
 800a1b8:	18bc      	adds	r4, r7, r2
 800a1ba:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800a1bc:	18bb      	adds	r3, r7, r2
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d114      	bne.n	800a1ee <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a1c4:	187b      	adds	r3, r7, r1
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	d00f      	beq.n	800a1ee <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a1ce:	183b      	adds	r3, r7, r0
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	d00a      	beq.n	800a1ee <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d100      	bne.n	800a1e2 <HAL_UART_IRQHandler+0x62>
 800a1e0:	e2a0      	b.n	800a724 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	0010      	movs	r0, r2
 800a1ea:	4798      	blx	r3
      }
      return;
 800a1ec:	e29a      	b.n	800a724 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a1ee:	2398      	movs	r3, #152	; 0x98
 800a1f0:	18fb      	adds	r3, r7, r3
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d100      	bne.n	800a1fa <HAL_UART_IRQHandler+0x7a>
 800a1f8:	e114      	b.n	800a424 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a1fa:	239c      	movs	r3, #156	; 0x9c
 800a1fc:	18fb      	adds	r3, r7, r3
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2201      	movs	r2, #1
 800a202:	4013      	ands	r3, r2
 800a204:	d106      	bne.n	800a214 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a206:	23a0      	movs	r3, #160	; 0xa0
 800a208:	18fb      	adds	r3, r7, r3
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a83      	ldr	r2, [pc, #524]	; (800a41c <HAL_UART_IRQHandler+0x29c>)
 800a20e:	4013      	ands	r3, r2
 800a210:	d100      	bne.n	800a214 <HAL_UART_IRQHandler+0x94>
 800a212:	e107      	b.n	800a424 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a214:	23a4      	movs	r3, #164	; 0xa4
 800a216:	18fb      	adds	r3, r7, r3
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2201      	movs	r2, #1
 800a21c:	4013      	ands	r3, r2
 800a21e:	d012      	beq.n	800a246 <HAL_UART_IRQHandler+0xc6>
 800a220:	23a0      	movs	r3, #160	; 0xa0
 800a222:	18fb      	adds	r3, r7, r3
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	2380      	movs	r3, #128	; 0x80
 800a228:	005b      	lsls	r3, r3, #1
 800a22a:	4013      	ands	r3, r2
 800a22c:	d00b      	beq.n	800a246 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2201      	movs	r2, #1
 800a234:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2284      	movs	r2, #132	; 0x84
 800a23a:	589b      	ldr	r3, [r3, r2]
 800a23c:	2201      	movs	r2, #1
 800a23e:	431a      	orrs	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2184      	movs	r1, #132	; 0x84
 800a244:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a246:	23a4      	movs	r3, #164	; 0xa4
 800a248:	18fb      	adds	r3, r7, r3
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2202      	movs	r2, #2
 800a24e:	4013      	ands	r3, r2
 800a250:	d011      	beq.n	800a276 <HAL_UART_IRQHandler+0xf6>
 800a252:	239c      	movs	r3, #156	; 0x9c
 800a254:	18fb      	adds	r3, r7, r3
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2201      	movs	r2, #1
 800a25a:	4013      	ands	r3, r2
 800a25c:	d00b      	beq.n	800a276 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2202      	movs	r2, #2
 800a264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2284      	movs	r2, #132	; 0x84
 800a26a:	589b      	ldr	r3, [r3, r2]
 800a26c:	2204      	movs	r2, #4
 800a26e:	431a      	orrs	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2184      	movs	r1, #132	; 0x84
 800a274:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a276:	23a4      	movs	r3, #164	; 0xa4
 800a278:	18fb      	adds	r3, r7, r3
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2204      	movs	r2, #4
 800a27e:	4013      	ands	r3, r2
 800a280:	d011      	beq.n	800a2a6 <HAL_UART_IRQHandler+0x126>
 800a282:	239c      	movs	r3, #156	; 0x9c
 800a284:	18fb      	adds	r3, r7, r3
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2201      	movs	r2, #1
 800a28a:	4013      	ands	r3, r2
 800a28c:	d00b      	beq.n	800a2a6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2204      	movs	r2, #4
 800a294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2284      	movs	r2, #132	; 0x84
 800a29a:	589b      	ldr	r3, [r3, r2]
 800a29c:	2202      	movs	r2, #2
 800a29e:	431a      	orrs	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2184      	movs	r1, #132	; 0x84
 800a2a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a2a6:	23a4      	movs	r3, #164	; 0xa4
 800a2a8:	18fb      	adds	r3, r7, r3
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2208      	movs	r2, #8
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	d017      	beq.n	800a2e2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a2b2:	23a0      	movs	r3, #160	; 0xa0
 800a2b4:	18fb      	adds	r3, r7, r3
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2220      	movs	r2, #32
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	d105      	bne.n	800a2ca <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a2be:	239c      	movs	r3, #156	; 0x9c
 800a2c0:	18fb      	adds	r3, r7, r3
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a2c8:	d00b      	beq.n	800a2e2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2208      	movs	r2, #8
 800a2d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2284      	movs	r2, #132	; 0x84
 800a2d6:	589b      	ldr	r3, [r3, r2]
 800a2d8:	2208      	movs	r2, #8
 800a2da:	431a      	orrs	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2184      	movs	r1, #132	; 0x84
 800a2e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a2e2:	23a4      	movs	r3, #164	; 0xa4
 800a2e4:	18fb      	adds	r3, r7, r3
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	2380      	movs	r3, #128	; 0x80
 800a2ea:	011b      	lsls	r3, r3, #4
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	d013      	beq.n	800a318 <HAL_UART_IRQHandler+0x198>
 800a2f0:	23a0      	movs	r3, #160	; 0xa0
 800a2f2:	18fb      	adds	r3, r7, r3
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	2380      	movs	r3, #128	; 0x80
 800a2f8:	04db      	lsls	r3, r3, #19
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	d00c      	beq.n	800a318 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2280      	movs	r2, #128	; 0x80
 800a304:	0112      	lsls	r2, r2, #4
 800a306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2284      	movs	r2, #132	; 0x84
 800a30c:	589b      	ldr	r3, [r3, r2]
 800a30e:	2220      	movs	r2, #32
 800a310:	431a      	orrs	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2184      	movs	r1, #132	; 0x84
 800a316:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2284      	movs	r2, #132	; 0x84
 800a31c:	589b      	ldr	r3, [r3, r2]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d100      	bne.n	800a324 <HAL_UART_IRQHandler+0x1a4>
 800a322:	e201      	b.n	800a728 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a324:	23a4      	movs	r3, #164	; 0xa4
 800a326:	18fb      	adds	r3, r7, r3
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2220      	movs	r2, #32
 800a32c:	4013      	ands	r3, r2
 800a32e:	d00e      	beq.n	800a34e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a330:	23a0      	movs	r3, #160	; 0xa0
 800a332:	18fb      	adds	r3, r7, r3
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2220      	movs	r2, #32
 800a338:	4013      	ands	r3, r2
 800a33a:	d008      	beq.n	800a34e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a340:	2b00      	cmp	r3, #0
 800a342:	d004      	beq.n	800a34e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	0010      	movs	r0, r2
 800a34c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2284      	movs	r2, #132	; 0x84
 800a352:	589b      	ldr	r3, [r3, r2]
 800a354:	2194      	movs	r1, #148	; 0x94
 800a356:	187a      	adds	r2, r7, r1
 800a358:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	2240      	movs	r2, #64	; 0x40
 800a362:	4013      	ands	r3, r2
 800a364:	2b40      	cmp	r3, #64	; 0x40
 800a366:	d004      	beq.n	800a372 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a368:	187b      	adds	r3, r7, r1
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2228      	movs	r2, #40	; 0x28
 800a36e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a370:	d047      	beq.n	800a402 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	0018      	movs	r0, r3
 800a376:	f000 ff2f 	bl	800b1d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	2240      	movs	r2, #64	; 0x40
 800a382:	4013      	ands	r3, r2
 800a384:	2b40      	cmp	r3, #64	; 0x40
 800a386:	d137      	bne.n	800a3f8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a388:	f3ef 8310 	mrs	r3, PRIMASK
 800a38c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800a38e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a390:	2090      	movs	r0, #144	; 0x90
 800a392:	183a      	adds	r2, r7, r0
 800a394:	6013      	str	r3, [r2, #0]
 800a396:	2301      	movs	r3, #1
 800a398:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a39a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a39c:	f383 8810 	msr	PRIMASK, r3
}
 800a3a0:	46c0      	nop			; (mov r8, r8)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	689a      	ldr	r2, [r3, #8]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2140      	movs	r1, #64	; 0x40
 800a3ae:	438a      	bics	r2, r1
 800a3b0:	609a      	str	r2, [r3, #8]
 800a3b2:	183b      	adds	r3, r7, r0
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3ba:	f383 8810 	msr	PRIMASK, r3
}
 800a3be:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d012      	beq.n	800a3ee <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3cc:	4a14      	ldr	r2, [pc, #80]	; (800a420 <HAL_UART_IRQHandler+0x2a0>)
 800a3ce:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3d4:	0018      	movs	r0, r3
 800a3d6:	f7fc fd05 	bl	8006de4 <HAL_DMA_Abort_IT>
 800a3da:	1e03      	subs	r3, r0, #0
 800a3dc:	d01a      	beq.n	800a414 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3ec:	e012      	b.n	800a414 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	f000 f9af 	bl	800a754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f6:	e00d      	b.n	800a414 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	0018      	movs	r0, r3
 800a3fc:	f000 f9aa 	bl	800a754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a400:	e008      	b.n	800a414 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	0018      	movs	r0, r3
 800a406:	f000 f9a5 	bl	800a754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2284      	movs	r2, #132	; 0x84
 800a40e:	2100      	movs	r1, #0
 800a410:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a412:	e189      	b.n	800a728 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a414:	46c0      	nop			; (mov r8, r8)
    return;
 800a416:	e187      	b.n	800a728 <HAL_UART_IRQHandler+0x5a8>
 800a418:	0000080f 	.word	0x0000080f
 800a41c:	04000120 	.word	0x04000120
 800a420:	0800b2a1 	.word	0x0800b2a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d000      	beq.n	800a42e <HAL_UART_IRQHandler+0x2ae>
 800a42c:	e13b      	b.n	800a6a6 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a42e:	23a4      	movs	r3, #164	; 0xa4
 800a430:	18fb      	adds	r3, r7, r3
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2210      	movs	r2, #16
 800a436:	4013      	ands	r3, r2
 800a438:	d100      	bne.n	800a43c <HAL_UART_IRQHandler+0x2bc>
 800a43a:	e134      	b.n	800a6a6 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a43c:	23a0      	movs	r3, #160	; 0xa0
 800a43e:	18fb      	adds	r3, r7, r3
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2210      	movs	r2, #16
 800a444:	4013      	ands	r3, r2
 800a446:	d100      	bne.n	800a44a <HAL_UART_IRQHandler+0x2ca>
 800a448:	e12d      	b.n	800a6a6 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2210      	movs	r2, #16
 800a450:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	2240      	movs	r2, #64	; 0x40
 800a45a:	4013      	ands	r3, r2
 800a45c:	2b40      	cmp	r3, #64	; 0x40
 800a45e:	d000      	beq.n	800a462 <HAL_UART_IRQHandler+0x2e2>
 800a460:	e0a1      	b.n	800a5a6 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	217e      	movs	r1, #126	; 0x7e
 800a46c:	187b      	adds	r3, r7, r1
 800a46e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a470:	187b      	adds	r3, r7, r1
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d100      	bne.n	800a47a <HAL_UART_IRQHandler+0x2fa>
 800a478:	e158      	b.n	800a72c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2258      	movs	r2, #88	; 0x58
 800a47e:	5a9b      	ldrh	r3, [r3, r2]
 800a480:	187a      	adds	r2, r7, r1
 800a482:	8812      	ldrh	r2, [r2, #0]
 800a484:	429a      	cmp	r2, r3
 800a486:	d300      	bcc.n	800a48a <HAL_UART_IRQHandler+0x30a>
 800a488:	e150      	b.n	800a72c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	187a      	adds	r2, r7, r1
 800a48e:	215a      	movs	r1, #90	; 0x5a
 800a490:	8812      	ldrh	r2, [r2, #0]
 800a492:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2220      	movs	r2, #32
 800a49e:	4013      	ands	r3, r2
 800a4a0:	d16f      	bne.n	800a582 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4a2:	f3ef 8310 	mrs	r3, PRIMASK
 800a4a6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4aa:	67bb      	str	r3, [r7, #120]	; 0x78
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b2:	f383 8810 	msr	PRIMASK, r3
}
 800a4b6:	46c0      	nop			; (mov r8, r8)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	499e      	ldr	r1, [pc, #632]	; (800a73c <HAL_UART_IRQHandler+0x5bc>)
 800a4c4:	400a      	ands	r2, r1
 800a4c6:	601a      	str	r2, [r3, #0]
 800a4c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ce:	f383 8810 	msr	PRIMASK, r3
}
 800a4d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a4da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4dc:	677b      	str	r3, [r7, #116]	; 0x74
 800a4de:	2301      	movs	r3, #1
 800a4e0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4e4:	f383 8810 	msr	PRIMASK, r3
}
 800a4e8:	46c0      	nop			; (mov r8, r8)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	689a      	ldr	r2, [r3, #8]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2101      	movs	r1, #1
 800a4f6:	438a      	bics	r2, r1
 800a4f8:	609a      	str	r2, [r3, #8]
 800a4fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4fc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a500:	f383 8810 	msr	PRIMASK, r3
}
 800a504:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a506:	f3ef 8310 	mrs	r3, PRIMASK
 800a50a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800a50c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a50e:	673b      	str	r3, [r7, #112]	; 0x70
 800a510:	2301      	movs	r3, #1
 800a512:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a516:	f383 8810 	msr	PRIMASK, r3
}
 800a51a:	46c0      	nop			; (mov r8, r8)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	689a      	ldr	r2, [r3, #8]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2140      	movs	r1, #64	; 0x40
 800a528:	438a      	bics	r2, r1
 800a52a:	609a      	str	r2, [r3, #8]
 800a52c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a52e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a532:	f383 8810 	msr	PRIMASK, r3
}
 800a536:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2280      	movs	r2, #128	; 0x80
 800a53c:	2120      	movs	r1, #32
 800a53e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a546:	f3ef 8310 	mrs	r3, PRIMASK
 800a54a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800a54c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a54e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a550:	2301      	movs	r3, #1
 800a552:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a556:	f383 8810 	msr	PRIMASK, r3
}
 800a55a:	46c0      	nop			; (mov r8, r8)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2110      	movs	r1, #16
 800a568:	438a      	bics	r2, r1
 800a56a:	601a      	str	r2, [r3, #0]
 800a56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a56e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a572:	f383 8810 	msr	PRIMASK, r3
}
 800a576:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a57c:	0018      	movs	r0, r3
 800a57e:	f7fc fbf1 	bl	8006d64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2202      	movs	r2, #2
 800a586:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2258      	movs	r2, #88	; 0x58
 800a58c:	5a9a      	ldrh	r2, [r3, r2]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	215a      	movs	r1, #90	; 0x5a
 800a592:	5a5b      	ldrh	r3, [r3, r1]
 800a594:	b29b      	uxth	r3, r3
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	b29a      	uxth	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	0011      	movs	r1, r2
 800a59e:	0018      	movs	r0, r3
 800a5a0:	f000 f8e0 	bl	800a764 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a5a4:	e0c2      	b.n	800a72c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2258      	movs	r2, #88	; 0x58
 800a5aa:	5a99      	ldrh	r1, [r3, r2]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	225a      	movs	r2, #90	; 0x5a
 800a5b0:	5a9b      	ldrh	r3, [r3, r2]
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	208e      	movs	r0, #142	; 0x8e
 800a5b6:	183b      	adds	r3, r7, r0
 800a5b8:	1a8a      	subs	r2, r1, r2
 800a5ba:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	225a      	movs	r2, #90	; 0x5a
 800a5c0:	5a9b      	ldrh	r3, [r3, r2]
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d100      	bne.n	800a5ca <HAL_UART_IRQHandler+0x44a>
 800a5c8:	e0b2      	b.n	800a730 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800a5ca:	183b      	adds	r3, r7, r0
 800a5cc:	881b      	ldrh	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d100      	bne.n	800a5d4 <HAL_UART_IRQHandler+0x454>
 800a5d2:	e0ad      	b.n	800a730 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a5d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5da:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5dc:	2488      	movs	r4, #136	; 0x88
 800a5de:	193a      	adds	r2, r7, r4
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	f383 8810 	msr	PRIMASK, r3
}
 800a5ec:	46c0      	nop			; (mov r8, r8)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4951      	ldr	r1, [pc, #324]	; (800a740 <HAL_UART_IRQHandler+0x5c0>)
 800a5fa:	400a      	ands	r2, r1
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	193b      	adds	r3, r7, r4
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f383 8810 	msr	PRIMASK, r3
}
 800a60a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a60c:	f3ef 8310 	mrs	r3, PRIMASK
 800a610:	61bb      	str	r3, [r7, #24]
  return(result);
 800a612:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a614:	2484      	movs	r4, #132	; 0x84
 800a616:	193a      	adds	r2, r7, r4
 800a618:	6013      	str	r3, [r2, #0]
 800a61a:	2301      	movs	r3, #1
 800a61c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	f383 8810 	msr	PRIMASK, r3
}
 800a624:	46c0      	nop			; (mov r8, r8)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	689a      	ldr	r2, [r3, #8]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2101      	movs	r1, #1
 800a632:	438a      	bics	r2, r1
 800a634:	609a      	str	r2, [r3, #8]
 800a636:	193b      	adds	r3, r7, r4
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	f383 8810 	msr	PRIMASK, r3
}
 800a642:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2280      	movs	r2, #128	; 0x80
 800a648:	2120      	movs	r1, #32
 800a64a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a658:	f3ef 8310 	mrs	r3, PRIMASK
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a660:	2480      	movs	r4, #128	; 0x80
 800a662:	193a      	adds	r2, r7, r4
 800a664:	6013      	str	r3, [r2, #0]
 800a666:	2301      	movs	r3, #1
 800a668:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66c:	f383 8810 	msr	PRIMASK, r3
}
 800a670:	46c0      	nop			; (mov r8, r8)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2110      	movs	r1, #16
 800a67e:	438a      	bics	r2, r1
 800a680:	601a      	str	r2, [r3, #0]
 800a682:	193b      	adds	r3, r7, r4
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68a:	f383 8810 	msr	PRIMASK, r3
}
 800a68e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2202      	movs	r2, #2
 800a694:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a696:	183b      	adds	r3, r7, r0
 800a698:	881a      	ldrh	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	0011      	movs	r1, r2
 800a69e:	0018      	movs	r0, r3
 800a6a0:	f000 f860 	bl	800a764 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a6a4:	e044      	b.n	800a730 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a6a6:	23a4      	movs	r3, #164	; 0xa4
 800a6a8:	18fb      	adds	r3, r7, r3
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	2380      	movs	r3, #128	; 0x80
 800a6ae:	035b      	lsls	r3, r3, #13
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	d010      	beq.n	800a6d6 <HAL_UART_IRQHandler+0x556>
 800a6b4:	239c      	movs	r3, #156	; 0x9c
 800a6b6:	18fb      	adds	r3, r7, r3
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	2380      	movs	r3, #128	; 0x80
 800a6bc:	03db      	lsls	r3, r3, #15
 800a6be:	4013      	ands	r3, r2
 800a6c0:	d009      	beq.n	800a6d6 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2280      	movs	r2, #128	; 0x80
 800a6c8:	0352      	lsls	r2, r2, #13
 800a6ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	0018      	movs	r0, r3
 800a6d0:	f000 ffec 	bl	800b6ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6d4:	e02f      	b.n	800a736 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a6d6:	23a4      	movs	r3, #164	; 0xa4
 800a6d8:	18fb      	adds	r3, r7, r3
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2280      	movs	r2, #128	; 0x80
 800a6de:	4013      	ands	r3, r2
 800a6e0:	d00f      	beq.n	800a702 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a6e2:	23a0      	movs	r3, #160	; 0xa0
 800a6e4:	18fb      	adds	r3, r7, r3
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2280      	movs	r2, #128	; 0x80
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	d009      	beq.n	800a702 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d01e      	beq.n	800a734 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	0010      	movs	r0, r2
 800a6fe:	4798      	blx	r3
    }
    return;
 800a700:	e018      	b.n	800a734 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a702:	23a4      	movs	r3, #164	; 0xa4
 800a704:	18fb      	adds	r3, r7, r3
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2240      	movs	r2, #64	; 0x40
 800a70a:	4013      	ands	r3, r2
 800a70c:	d013      	beq.n	800a736 <HAL_UART_IRQHandler+0x5b6>
 800a70e:	23a0      	movs	r3, #160	; 0xa0
 800a710:	18fb      	adds	r3, r7, r3
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2240      	movs	r2, #64	; 0x40
 800a716:	4013      	ands	r3, r2
 800a718:	d00d      	beq.n	800a736 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	0018      	movs	r0, r3
 800a71e:	f000 fdd6 	bl	800b2ce <UART_EndTransmit_IT>
    return;
 800a722:	e008      	b.n	800a736 <HAL_UART_IRQHandler+0x5b6>
      return;
 800a724:	46c0      	nop			; (mov r8, r8)
 800a726:	e006      	b.n	800a736 <HAL_UART_IRQHandler+0x5b6>
    return;
 800a728:	46c0      	nop			; (mov r8, r8)
 800a72a:	e004      	b.n	800a736 <HAL_UART_IRQHandler+0x5b6>
      return;
 800a72c:	46c0      	nop			; (mov r8, r8)
 800a72e:	e002      	b.n	800a736 <HAL_UART_IRQHandler+0x5b6>
      return;
 800a730:	46c0      	nop			; (mov r8, r8)
 800a732:	e000      	b.n	800a736 <HAL_UART_IRQHandler+0x5b6>
    return;
 800a734:	46c0      	nop			; (mov r8, r8)
  }

}
 800a736:	46bd      	mov	sp, r7
 800a738:	b02b      	add	sp, #172	; 0xac
 800a73a:	bd90      	pop	{r4, r7, pc}
 800a73c:	fffffeff 	.word	0xfffffeff
 800a740:	fffffedf 	.word	0xfffffedf

0800a744 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a74c:	46c0      	nop			; (mov r8, r8)
 800a74e:	46bd      	mov	sp, r7
 800a750:	b002      	add	sp, #8
 800a752:	bd80      	pop	{r7, pc}

0800a754 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a75c:	46c0      	nop			; (mov r8, r8)
 800a75e:	46bd      	mov	sp, r7
 800a760:	b002      	add	sp, #8
 800a762:	bd80      	pop	{r7, pc}

0800a764 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	000a      	movs	r2, r1
 800a76e:	1cbb      	adds	r3, r7, #2
 800a770:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	46bd      	mov	sp, r7
 800a776:	b002      	add	sp, #8
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a77c:	b5b0      	push	{r4, r5, r7, lr}
 800a77e:	b08e      	sub	sp, #56	; 0x38
 800a780:	af00      	add	r7, sp, #0
 800a782:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a784:	231a      	movs	r3, #26
 800a786:	2218      	movs	r2, #24
 800a788:	189b      	adds	r3, r3, r2
 800a78a:	19db      	adds	r3, r3, r7
 800a78c:	2200      	movs	r2, #0
 800a78e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	689a      	ldr	r2, [r3, #8]
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	431a      	orrs	r2, r3
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	695b      	ldr	r3, [r3, #20]
 800a79e:	431a      	orrs	r2, r3
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	69db      	ldr	r3, [r3, #28]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4ac3      	ldr	r2, [pc, #780]	; (800aabc <UART_SetConfig+0x340>)
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	0019      	movs	r1, r3
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7ba:	430a      	orrs	r2, r1
 800a7bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	4abe      	ldr	r2, [pc, #760]	; (800aac0 <UART_SetConfig+0x344>)
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	0019      	movs	r1, r3
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	68da      	ldr	r2, [r3, #12]
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4ab8      	ldr	r2, [pc, #736]	; (800aac4 <UART_SetConfig+0x348>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d004      	beq.n	800a7f0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	6a1b      	ldr	r3, [r3, #32]
 800a7ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	4ab4      	ldr	r2, [pc, #720]	; (800aac8 <UART_SetConfig+0x34c>)
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	0019      	movs	r1, r3
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a802:	430a      	orrs	r2, r1
 800a804:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4ab0      	ldr	r2, [pc, #704]	; (800aacc <UART_SetConfig+0x350>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d131      	bne.n	800a874 <UART_SetConfig+0xf8>
 800a810:	4baf      	ldr	r3, [pc, #700]	; (800aad0 <UART_SetConfig+0x354>)
 800a812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a814:	2203      	movs	r2, #3
 800a816:	4013      	ands	r3, r2
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d01d      	beq.n	800a858 <UART_SetConfig+0xdc>
 800a81c:	d823      	bhi.n	800a866 <UART_SetConfig+0xea>
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d00c      	beq.n	800a83c <UART_SetConfig+0xc0>
 800a822:	d820      	bhi.n	800a866 <UART_SetConfig+0xea>
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <UART_SetConfig+0xb2>
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d00e      	beq.n	800a84a <UART_SetConfig+0xce>
 800a82c:	e01b      	b.n	800a866 <UART_SetConfig+0xea>
 800a82e:	231b      	movs	r3, #27
 800a830:	2218      	movs	r2, #24
 800a832:	189b      	adds	r3, r3, r2
 800a834:	19db      	adds	r3, r3, r7
 800a836:	2201      	movs	r2, #1
 800a838:	701a      	strb	r2, [r3, #0]
 800a83a:	e0b4      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a83c:	231b      	movs	r3, #27
 800a83e:	2218      	movs	r2, #24
 800a840:	189b      	adds	r3, r3, r2
 800a842:	19db      	adds	r3, r3, r7
 800a844:	2202      	movs	r2, #2
 800a846:	701a      	strb	r2, [r3, #0]
 800a848:	e0ad      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a84a:	231b      	movs	r3, #27
 800a84c:	2218      	movs	r2, #24
 800a84e:	189b      	adds	r3, r3, r2
 800a850:	19db      	adds	r3, r3, r7
 800a852:	2204      	movs	r2, #4
 800a854:	701a      	strb	r2, [r3, #0]
 800a856:	e0a6      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a858:	231b      	movs	r3, #27
 800a85a:	2218      	movs	r2, #24
 800a85c:	189b      	adds	r3, r3, r2
 800a85e:	19db      	adds	r3, r3, r7
 800a860:	2208      	movs	r2, #8
 800a862:	701a      	strb	r2, [r3, #0]
 800a864:	e09f      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a866:	231b      	movs	r3, #27
 800a868:	2218      	movs	r2, #24
 800a86a:	189b      	adds	r3, r3, r2
 800a86c:	19db      	adds	r3, r3, r7
 800a86e:	2210      	movs	r2, #16
 800a870:	701a      	strb	r2, [r3, #0]
 800a872:	e098      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a96      	ldr	r2, [pc, #600]	; (800aad4 <UART_SetConfig+0x358>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d131      	bne.n	800a8e2 <UART_SetConfig+0x166>
 800a87e:	4b94      	ldr	r3, [pc, #592]	; (800aad0 <UART_SetConfig+0x354>)
 800a880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a882:	220c      	movs	r2, #12
 800a884:	4013      	ands	r3, r2
 800a886:	2b0c      	cmp	r3, #12
 800a888:	d01d      	beq.n	800a8c6 <UART_SetConfig+0x14a>
 800a88a:	d823      	bhi.n	800a8d4 <UART_SetConfig+0x158>
 800a88c:	2b08      	cmp	r3, #8
 800a88e:	d00c      	beq.n	800a8aa <UART_SetConfig+0x12e>
 800a890:	d820      	bhi.n	800a8d4 <UART_SetConfig+0x158>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <UART_SetConfig+0x120>
 800a896:	2b04      	cmp	r3, #4
 800a898:	d00e      	beq.n	800a8b8 <UART_SetConfig+0x13c>
 800a89a:	e01b      	b.n	800a8d4 <UART_SetConfig+0x158>
 800a89c:	231b      	movs	r3, #27
 800a89e:	2218      	movs	r2, #24
 800a8a0:	189b      	adds	r3, r3, r2
 800a8a2:	19db      	adds	r3, r3, r7
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	701a      	strb	r2, [r3, #0]
 800a8a8:	e07d      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a8aa:	231b      	movs	r3, #27
 800a8ac:	2218      	movs	r2, #24
 800a8ae:	189b      	adds	r3, r3, r2
 800a8b0:	19db      	adds	r3, r3, r7
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	701a      	strb	r2, [r3, #0]
 800a8b6:	e076      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a8b8:	231b      	movs	r3, #27
 800a8ba:	2218      	movs	r2, #24
 800a8bc:	189b      	adds	r3, r3, r2
 800a8be:	19db      	adds	r3, r3, r7
 800a8c0:	2204      	movs	r2, #4
 800a8c2:	701a      	strb	r2, [r3, #0]
 800a8c4:	e06f      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a8c6:	231b      	movs	r3, #27
 800a8c8:	2218      	movs	r2, #24
 800a8ca:	189b      	adds	r3, r3, r2
 800a8cc:	19db      	adds	r3, r3, r7
 800a8ce:	2208      	movs	r2, #8
 800a8d0:	701a      	strb	r2, [r3, #0]
 800a8d2:	e068      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a8d4:	231b      	movs	r3, #27
 800a8d6:	2218      	movs	r2, #24
 800a8d8:	189b      	adds	r3, r3, r2
 800a8da:	19db      	adds	r3, r3, r7
 800a8dc:	2210      	movs	r2, #16
 800a8de:	701a      	strb	r2, [r3, #0]
 800a8e0:	e061      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a7c      	ldr	r2, [pc, #496]	; (800aad8 <UART_SetConfig+0x35c>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d106      	bne.n	800a8fa <UART_SetConfig+0x17e>
 800a8ec:	231b      	movs	r3, #27
 800a8ee:	2218      	movs	r2, #24
 800a8f0:	189b      	adds	r3, r3, r2
 800a8f2:	19db      	adds	r3, r3, r7
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	701a      	strb	r2, [r3, #0]
 800a8f8:	e055      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a77      	ldr	r2, [pc, #476]	; (800aadc <UART_SetConfig+0x360>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d106      	bne.n	800a912 <UART_SetConfig+0x196>
 800a904:	231b      	movs	r3, #27
 800a906:	2218      	movs	r2, #24
 800a908:	189b      	adds	r3, r3, r2
 800a90a:	19db      	adds	r3, r3, r7
 800a90c:	2200      	movs	r2, #0
 800a90e:	701a      	strb	r2, [r3, #0]
 800a910:	e049      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a6b      	ldr	r2, [pc, #428]	; (800aac4 <UART_SetConfig+0x348>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d13e      	bne.n	800a99a <UART_SetConfig+0x21e>
 800a91c:	4b6c      	ldr	r3, [pc, #432]	; (800aad0 <UART_SetConfig+0x354>)
 800a91e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a920:	23c0      	movs	r3, #192	; 0xc0
 800a922:	011b      	lsls	r3, r3, #4
 800a924:	4013      	ands	r3, r2
 800a926:	22c0      	movs	r2, #192	; 0xc0
 800a928:	0112      	lsls	r2, r2, #4
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d027      	beq.n	800a97e <UART_SetConfig+0x202>
 800a92e:	22c0      	movs	r2, #192	; 0xc0
 800a930:	0112      	lsls	r2, r2, #4
 800a932:	4293      	cmp	r3, r2
 800a934:	d82a      	bhi.n	800a98c <UART_SetConfig+0x210>
 800a936:	2280      	movs	r2, #128	; 0x80
 800a938:	0112      	lsls	r2, r2, #4
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d011      	beq.n	800a962 <UART_SetConfig+0x1e6>
 800a93e:	2280      	movs	r2, #128	; 0x80
 800a940:	0112      	lsls	r2, r2, #4
 800a942:	4293      	cmp	r3, r2
 800a944:	d822      	bhi.n	800a98c <UART_SetConfig+0x210>
 800a946:	2b00      	cmp	r3, #0
 800a948:	d004      	beq.n	800a954 <UART_SetConfig+0x1d8>
 800a94a:	2280      	movs	r2, #128	; 0x80
 800a94c:	00d2      	lsls	r2, r2, #3
 800a94e:	4293      	cmp	r3, r2
 800a950:	d00e      	beq.n	800a970 <UART_SetConfig+0x1f4>
 800a952:	e01b      	b.n	800a98c <UART_SetConfig+0x210>
 800a954:	231b      	movs	r3, #27
 800a956:	2218      	movs	r2, #24
 800a958:	189b      	adds	r3, r3, r2
 800a95a:	19db      	adds	r3, r3, r7
 800a95c:	2200      	movs	r2, #0
 800a95e:	701a      	strb	r2, [r3, #0]
 800a960:	e021      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a962:	231b      	movs	r3, #27
 800a964:	2218      	movs	r2, #24
 800a966:	189b      	adds	r3, r3, r2
 800a968:	19db      	adds	r3, r3, r7
 800a96a:	2202      	movs	r2, #2
 800a96c:	701a      	strb	r2, [r3, #0]
 800a96e:	e01a      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a970:	231b      	movs	r3, #27
 800a972:	2218      	movs	r2, #24
 800a974:	189b      	adds	r3, r3, r2
 800a976:	19db      	adds	r3, r3, r7
 800a978:	2204      	movs	r2, #4
 800a97a:	701a      	strb	r2, [r3, #0]
 800a97c:	e013      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a97e:	231b      	movs	r3, #27
 800a980:	2218      	movs	r2, #24
 800a982:	189b      	adds	r3, r3, r2
 800a984:	19db      	adds	r3, r3, r7
 800a986:	2208      	movs	r2, #8
 800a988:	701a      	strb	r2, [r3, #0]
 800a98a:	e00c      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a98c:	231b      	movs	r3, #27
 800a98e:	2218      	movs	r2, #24
 800a990:	189b      	adds	r3, r3, r2
 800a992:	19db      	adds	r3, r3, r7
 800a994:	2210      	movs	r2, #16
 800a996:	701a      	strb	r2, [r3, #0]
 800a998:	e005      	b.n	800a9a6 <UART_SetConfig+0x22a>
 800a99a:	231b      	movs	r3, #27
 800a99c:	2218      	movs	r2, #24
 800a99e:	189b      	adds	r3, r3, r2
 800a9a0:	19db      	adds	r3, r3, r7
 800a9a2:	2210      	movs	r2, #16
 800a9a4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a46      	ldr	r2, [pc, #280]	; (800aac4 <UART_SetConfig+0x348>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d000      	beq.n	800a9b2 <UART_SetConfig+0x236>
 800a9b0:	e09a      	b.n	800aae8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9b2:	231b      	movs	r3, #27
 800a9b4:	2218      	movs	r2, #24
 800a9b6:	189b      	adds	r3, r3, r2
 800a9b8:	19db      	adds	r3, r3, r7
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	2b08      	cmp	r3, #8
 800a9be:	d01d      	beq.n	800a9fc <UART_SetConfig+0x280>
 800a9c0:	dc20      	bgt.n	800aa04 <UART_SetConfig+0x288>
 800a9c2:	2b04      	cmp	r3, #4
 800a9c4:	d015      	beq.n	800a9f2 <UART_SetConfig+0x276>
 800a9c6:	dc1d      	bgt.n	800aa04 <UART_SetConfig+0x288>
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <UART_SetConfig+0x256>
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d005      	beq.n	800a9dc <UART_SetConfig+0x260>
 800a9d0:	e018      	b.n	800aa04 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9d2:	f7fe f88d 	bl	8008af0 <HAL_RCC_GetPCLK1Freq>
 800a9d6:	0003      	movs	r3, r0
 800a9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9da:	e01c      	b.n	800aa16 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9dc:	4b3c      	ldr	r3, [pc, #240]	; (800aad0 <UART_SetConfig+0x354>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2210      	movs	r2, #16
 800a9e2:	4013      	ands	r3, r2
 800a9e4:	d002      	beq.n	800a9ec <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a9e6:	4b3e      	ldr	r3, [pc, #248]	; (800aae0 <UART_SetConfig+0x364>)
 800a9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9ea:	e014      	b.n	800aa16 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800a9ec:	4b3d      	ldr	r3, [pc, #244]	; (800aae4 <UART_SetConfig+0x368>)
 800a9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9f0:	e011      	b.n	800aa16 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9f2:	f7fd ffcd 	bl	8008990 <HAL_RCC_GetSysClockFreq>
 800a9f6:	0003      	movs	r3, r0
 800a9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9fa:	e00c      	b.n	800aa16 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9fc:	2380      	movs	r3, #128	; 0x80
 800a9fe:	021b      	lsls	r3, r3, #8
 800aa00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa02:	e008      	b.n	800aa16 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800aa04:	2300      	movs	r3, #0
 800aa06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aa08:	231a      	movs	r3, #26
 800aa0a:	2218      	movs	r2, #24
 800aa0c:	189b      	adds	r3, r3, r2
 800aa0e:	19db      	adds	r3, r3, r7
 800aa10:	2201      	movs	r2, #1
 800aa12:	701a      	strb	r2, [r3, #0]
        break;
 800aa14:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d100      	bne.n	800aa1e <UART_SetConfig+0x2a2>
 800aa1c:	e133      	b.n	800ac86 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	0013      	movs	r3, r2
 800aa24:	005b      	lsls	r3, r3, #1
 800aa26:	189b      	adds	r3, r3, r2
 800aa28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d305      	bcc.n	800aa3a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aa34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d906      	bls.n	800aa48 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800aa3a:	231a      	movs	r3, #26
 800aa3c:	2218      	movs	r2, #24
 800aa3e:	189b      	adds	r3, r3, r2
 800aa40:	19db      	adds	r3, r3, r7
 800aa42:	2201      	movs	r2, #1
 800aa44:	701a      	strb	r2, [r3, #0]
 800aa46:	e11e      	b.n	800ac86 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800aa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4a:	613b      	str	r3, [r7, #16]
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	617b      	str	r3, [r7, #20]
 800aa50:	6939      	ldr	r1, [r7, #16]
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	000b      	movs	r3, r1
 800aa56:	0e1b      	lsrs	r3, r3, #24
 800aa58:	0010      	movs	r0, r2
 800aa5a:	0205      	lsls	r5, r0, #8
 800aa5c:	431d      	orrs	r5, r3
 800aa5e:	000b      	movs	r3, r1
 800aa60:	021c      	lsls	r4, r3, #8
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	085b      	lsrs	r3, r3, #1
 800aa68:	60bb      	str	r3, [r7, #8]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	68b8      	ldr	r0, [r7, #8]
 800aa70:	68f9      	ldr	r1, [r7, #12]
 800aa72:	1900      	adds	r0, r0, r4
 800aa74:	4169      	adcs	r1, r5
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	603b      	str	r3, [r7, #0]
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	607b      	str	r3, [r7, #4]
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f7f5 fd1a 	bl	80004bc <__aeabi_uldivmod>
 800aa88:	0002      	movs	r2, r0
 800aa8a:	000b      	movs	r3, r1
 800aa8c:	0013      	movs	r3, r2
 800aa8e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa92:	23c0      	movs	r3, #192	; 0xc0
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d309      	bcc.n	800aaae <UART_SetConfig+0x332>
 800aa9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa9c:	2380      	movs	r3, #128	; 0x80
 800aa9e:	035b      	lsls	r3, r3, #13
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d204      	bcs.n	800aaae <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaaa:	60da      	str	r2, [r3, #12]
 800aaac:	e0eb      	b.n	800ac86 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800aaae:	231a      	movs	r3, #26
 800aab0:	2218      	movs	r2, #24
 800aab2:	189b      	adds	r3, r3, r2
 800aab4:	19db      	adds	r3, r3, r7
 800aab6:	2201      	movs	r2, #1
 800aab8:	701a      	strb	r2, [r3, #0]
 800aaba:	e0e4      	b.n	800ac86 <UART_SetConfig+0x50a>
 800aabc:	efff69f3 	.word	0xefff69f3
 800aac0:	ffffcfff 	.word	0xffffcfff
 800aac4:	40004800 	.word	0x40004800
 800aac8:	fffff4ff 	.word	0xfffff4ff
 800aacc:	40013800 	.word	0x40013800
 800aad0:	40021000 	.word	0x40021000
 800aad4:	40004400 	.word	0x40004400
 800aad8:	40004c00 	.word	0x40004c00
 800aadc:	40005000 	.word	0x40005000
 800aae0:	003d0900 	.word	0x003d0900
 800aae4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	69da      	ldr	r2, [r3, #28]
 800aaec:	2380      	movs	r3, #128	; 0x80
 800aaee:	021b      	lsls	r3, r3, #8
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d000      	beq.n	800aaf6 <UART_SetConfig+0x37a>
 800aaf4:	e070      	b.n	800abd8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800aaf6:	231b      	movs	r3, #27
 800aaf8:	2218      	movs	r2, #24
 800aafa:	189b      	adds	r3, r3, r2
 800aafc:	19db      	adds	r3, r3, r7
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b08      	cmp	r3, #8
 800ab02:	d822      	bhi.n	800ab4a <UART_SetConfig+0x3ce>
 800ab04:	009a      	lsls	r2, r3, #2
 800ab06:	4b67      	ldr	r3, [pc, #412]	; (800aca4 <UART_SetConfig+0x528>)
 800ab08:	18d3      	adds	r3, r2, r3
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab0e:	f7fd ffef 	bl	8008af0 <HAL_RCC_GetPCLK1Freq>
 800ab12:	0003      	movs	r3, r0
 800ab14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab16:	e021      	b.n	800ab5c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab18:	f7fe f800 	bl	8008b1c <HAL_RCC_GetPCLK2Freq>
 800ab1c:	0003      	movs	r3, r0
 800ab1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab20:	e01c      	b.n	800ab5c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab22:	4b61      	ldr	r3, [pc, #388]	; (800aca8 <UART_SetConfig+0x52c>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2210      	movs	r2, #16
 800ab28:	4013      	ands	r3, r2
 800ab2a:	d002      	beq.n	800ab32 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800ab2c:	4b5f      	ldr	r3, [pc, #380]	; (800acac <UART_SetConfig+0x530>)
 800ab2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab30:	e014      	b.n	800ab5c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800ab32:	4b5f      	ldr	r3, [pc, #380]	; (800acb0 <UART_SetConfig+0x534>)
 800ab34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab36:	e011      	b.n	800ab5c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab38:	f7fd ff2a 	bl	8008990 <HAL_RCC_GetSysClockFreq>
 800ab3c:	0003      	movs	r3, r0
 800ab3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab40:	e00c      	b.n	800ab5c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab42:	2380      	movs	r3, #128	; 0x80
 800ab44:	021b      	lsls	r3, r3, #8
 800ab46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab48:	e008      	b.n	800ab5c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ab4e:	231a      	movs	r3, #26
 800ab50:	2218      	movs	r2, #24
 800ab52:	189b      	adds	r3, r3, r2
 800ab54:	19db      	adds	r3, r3, r7
 800ab56:	2201      	movs	r2, #1
 800ab58:	701a      	strb	r2, [r3, #0]
        break;
 800ab5a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d100      	bne.n	800ab64 <UART_SetConfig+0x3e8>
 800ab62:	e090      	b.n	800ac86 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab66:	005a      	lsls	r2, r3, #1
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	085b      	lsrs	r3, r3, #1
 800ab6e:	18d2      	adds	r2, r2, r3
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	0019      	movs	r1, r3
 800ab76:	0010      	movs	r0, r2
 800ab78:	f7f5 faec 	bl	8000154 <__udivsi3>
 800ab7c:	0003      	movs	r3, r0
 800ab7e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab82:	2b0f      	cmp	r3, #15
 800ab84:	d921      	bls.n	800abca <UART_SetConfig+0x44e>
 800ab86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab88:	2380      	movs	r3, #128	; 0x80
 800ab8a:	025b      	lsls	r3, r3, #9
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d21c      	bcs.n	800abca <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	200e      	movs	r0, #14
 800ab96:	2418      	movs	r4, #24
 800ab98:	1903      	adds	r3, r0, r4
 800ab9a:	19db      	adds	r3, r3, r7
 800ab9c:	210f      	movs	r1, #15
 800ab9e:	438a      	bics	r2, r1
 800aba0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba4:	085b      	lsrs	r3, r3, #1
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	2207      	movs	r2, #7
 800abaa:	4013      	ands	r3, r2
 800abac:	b299      	uxth	r1, r3
 800abae:	1903      	adds	r3, r0, r4
 800abb0:	19db      	adds	r3, r3, r7
 800abb2:	1902      	adds	r2, r0, r4
 800abb4:	19d2      	adds	r2, r2, r7
 800abb6:	8812      	ldrh	r2, [r2, #0]
 800abb8:	430a      	orrs	r2, r1
 800abba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	1902      	adds	r2, r0, r4
 800abc2:	19d2      	adds	r2, r2, r7
 800abc4:	8812      	ldrh	r2, [r2, #0]
 800abc6:	60da      	str	r2, [r3, #12]
 800abc8:	e05d      	b.n	800ac86 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800abca:	231a      	movs	r3, #26
 800abcc:	2218      	movs	r2, #24
 800abce:	189b      	adds	r3, r3, r2
 800abd0:	19db      	adds	r3, r3, r7
 800abd2:	2201      	movs	r2, #1
 800abd4:	701a      	strb	r2, [r3, #0]
 800abd6:	e056      	b.n	800ac86 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800abd8:	231b      	movs	r3, #27
 800abda:	2218      	movs	r2, #24
 800abdc:	189b      	adds	r3, r3, r2
 800abde:	19db      	adds	r3, r3, r7
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	2b08      	cmp	r3, #8
 800abe4:	d822      	bhi.n	800ac2c <UART_SetConfig+0x4b0>
 800abe6:	009a      	lsls	r2, r3, #2
 800abe8:	4b32      	ldr	r3, [pc, #200]	; (800acb4 <UART_SetConfig+0x538>)
 800abea:	18d3      	adds	r3, r2, r3
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abf0:	f7fd ff7e 	bl	8008af0 <HAL_RCC_GetPCLK1Freq>
 800abf4:	0003      	movs	r3, r0
 800abf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abf8:	e021      	b.n	800ac3e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abfa:	f7fd ff8f 	bl	8008b1c <HAL_RCC_GetPCLK2Freq>
 800abfe:	0003      	movs	r3, r0
 800ac00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac02:	e01c      	b.n	800ac3e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac04:	4b28      	ldr	r3, [pc, #160]	; (800aca8 <UART_SetConfig+0x52c>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2210      	movs	r2, #16
 800ac0a:	4013      	ands	r3, r2
 800ac0c:	d002      	beq.n	800ac14 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800ac0e:	4b27      	ldr	r3, [pc, #156]	; (800acac <UART_SetConfig+0x530>)
 800ac10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac12:	e014      	b.n	800ac3e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800ac14:	4b26      	ldr	r3, [pc, #152]	; (800acb0 <UART_SetConfig+0x534>)
 800ac16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac18:	e011      	b.n	800ac3e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac1a:	f7fd feb9 	bl	8008990 <HAL_RCC_GetSysClockFreq>
 800ac1e:	0003      	movs	r3, r0
 800ac20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac22:	e00c      	b.n	800ac3e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac24:	2380      	movs	r3, #128	; 0x80
 800ac26:	021b      	lsls	r3, r3, #8
 800ac28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac2a:	e008      	b.n	800ac3e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ac30:	231a      	movs	r3, #26
 800ac32:	2218      	movs	r2, #24
 800ac34:	189b      	adds	r3, r3, r2
 800ac36:	19db      	adds	r3, r3, r7
 800ac38:	2201      	movs	r2, #1
 800ac3a:	701a      	strb	r2, [r3, #0]
        break;
 800ac3c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800ac3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d020      	beq.n	800ac86 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	085a      	lsrs	r2, r3, #1
 800ac4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4c:	18d2      	adds	r2, r2, r3
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	0019      	movs	r1, r3
 800ac54:	0010      	movs	r0, r2
 800ac56:	f7f5 fa7d 	bl	8000154 <__udivsi3>
 800ac5a:	0003      	movs	r3, r0
 800ac5c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac60:	2b0f      	cmp	r3, #15
 800ac62:	d90a      	bls.n	800ac7a <UART_SetConfig+0x4fe>
 800ac64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac66:	2380      	movs	r3, #128	; 0x80
 800ac68:	025b      	lsls	r3, r3, #9
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d205      	bcs.n	800ac7a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	60da      	str	r2, [r3, #12]
 800ac78:	e005      	b.n	800ac86 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800ac7a:	231a      	movs	r3, #26
 800ac7c:	2218      	movs	r2, #24
 800ac7e:	189b      	adds	r3, r3, r2
 800ac80:	19db      	adds	r3, r3, r7
 800ac82:	2201      	movs	r2, #1
 800ac84:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ac92:	231a      	movs	r3, #26
 800ac94:	2218      	movs	r2, #24
 800ac96:	189b      	adds	r3, r3, r2
 800ac98:	19db      	adds	r3, r3, r7
 800ac9a:	781b      	ldrb	r3, [r3, #0]
}
 800ac9c:	0018      	movs	r0, r3
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	b00e      	add	sp, #56	; 0x38
 800aca2:	bdb0      	pop	{r4, r5, r7, pc}
 800aca4:	080104e8 	.word	0x080104e8
 800aca8:	40021000 	.word	0x40021000
 800acac:	003d0900 	.word	0x003d0900
 800acb0:	00f42400 	.word	0x00f42400
 800acb4:	0801050c 	.word	0x0801050c

0800acb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc4:	2201      	movs	r2, #1
 800acc6:	4013      	ands	r3, r2
 800acc8:	d00b      	beq.n	800ace2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	4a4a      	ldr	r2, [pc, #296]	; (800adfc <UART_AdvFeatureConfig+0x144>)
 800acd2:	4013      	ands	r3, r2
 800acd4:	0019      	movs	r1, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	430a      	orrs	r2, r1
 800ace0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace6:	2202      	movs	r2, #2
 800ace8:	4013      	ands	r3, r2
 800acea:	d00b      	beq.n	800ad04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	4a43      	ldr	r2, [pc, #268]	; (800ae00 <UART_AdvFeatureConfig+0x148>)
 800acf4:	4013      	ands	r3, r2
 800acf6:	0019      	movs	r1, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	430a      	orrs	r2, r1
 800ad02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad08:	2204      	movs	r2, #4
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	d00b      	beq.n	800ad26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	4a3b      	ldr	r2, [pc, #236]	; (800ae04 <UART_AdvFeatureConfig+0x14c>)
 800ad16:	4013      	ands	r3, r2
 800ad18:	0019      	movs	r1, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	430a      	orrs	r2, r1
 800ad24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2a:	2208      	movs	r2, #8
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	d00b      	beq.n	800ad48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	4a34      	ldr	r2, [pc, #208]	; (800ae08 <UART_AdvFeatureConfig+0x150>)
 800ad38:	4013      	ands	r3, r2
 800ad3a:	0019      	movs	r1, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	430a      	orrs	r2, r1
 800ad46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4c:	2210      	movs	r2, #16
 800ad4e:	4013      	ands	r3, r2
 800ad50:	d00b      	beq.n	800ad6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	4a2c      	ldr	r2, [pc, #176]	; (800ae0c <UART_AdvFeatureConfig+0x154>)
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	0019      	movs	r1, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	430a      	orrs	r2, r1
 800ad68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6e:	2220      	movs	r2, #32
 800ad70:	4013      	ands	r3, r2
 800ad72:	d00b      	beq.n	800ad8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	4a25      	ldr	r2, [pc, #148]	; (800ae10 <UART_AdvFeatureConfig+0x158>)
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	0019      	movs	r1, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	430a      	orrs	r2, r1
 800ad8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad90:	2240      	movs	r2, #64	; 0x40
 800ad92:	4013      	ands	r3, r2
 800ad94:	d01d      	beq.n	800add2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	4a1d      	ldr	r2, [pc, #116]	; (800ae14 <UART_AdvFeatureConfig+0x15c>)
 800ad9e:	4013      	ands	r3, r2
 800ada0:	0019      	movs	r1, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	430a      	orrs	r2, r1
 800adac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adb2:	2380      	movs	r3, #128	; 0x80
 800adb4:	035b      	lsls	r3, r3, #13
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d10b      	bne.n	800add2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	4a15      	ldr	r2, [pc, #84]	; (800ae18 <UART_AdvFeatureConfig+0x160>)
 800adc2:	4013      	ands	r3, r2
 800adc4:	0019      	movs	r1, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	430a      	orrs	r2, r1
 800add0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add6:	2280      	movs	r2, #128	; 0x80
 800add8:	4013      	ands	r3, r2
 800adda:	d00b      	beq.n	800adf4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	4a0e      	ldr	r2, [pc, #56]	; (800ae1c <UART_AdvFeatureConfig+0x164>)
 800ade4:	4013      	ands	r3, r2
 800ade6:	0019      	movs	r1, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	430a      	orrs	r2, r1
 800adf2:	605a      	str	r2, [r3, #4]
  }
}
 800adf4:	46c0      	nop			; (mov r8, r8)
 800adf6:	46bd      	mov	sp, r7
 800adf8:	b002      	add	sp, #8
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	fffdffff 	.word	0xfffdffff
 800ae00:	fffeffff 	.word	0xfffeffff
 800ae04:	fffbffff 	.word	0xfffbffff
 800ae08:	ffff7fff 	.word	0xffff7fff
 800ae0c:	ffffefff 	.word	0xffffefff
 800ae10:	ffffdfff 	.word	0xffffdfff
 800ae14:	ffefffff 	.word	0xffefffff
 800ae18:	ff9fffff 	.word	0xff9fffff
 800ae1c:	fff7ffff 	.word	0xfff7ffff

0800ae20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b092      	sub	sp, #72	; 0x48
 800ae24:	af02      	add	r7, sp, #8
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2284      	movs	r2, #132	; 0x84
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae30:	f7fb f978 	bl	8006124 <HAL_GetTick>
 800ae34:	0003      	movs	r3, r0
 800ae36:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2208      	movs	r2, #8
 800ae40:	4013      	ands	r3, r2
 800ae42:	2b08      	cmp	r3, #8
 800ae44:	d12c      	bne.n	800aea0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae48:	2280      	movs	r2, #128	; 0x80
 800ae4a:	0391      	lsls	r1, r2, #14
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	4a46      	ldr	r2, [pc, #280]	; (800af68 <UART_CheckIdleState+0x148>)
 800ae50:	9200      	str	r2, [sp, #0]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f000 f88c 	bl	800af70 <UART_WaitOnFlagUntilTimeout>
 800ae58:	1e03      	subs	r3, r0, #0
 800ae5a:	d021      	beq.n	800aea0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ae60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ae64:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae66:	2301      	movs	r3, #1
 800ae68:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6c:	f383 8810 	msr	PRIMASK, r3
}
 800ae70:	46c0      	nop			; (mov r8, r8)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2180      	movs	r1, #128	; 0x80
 800ae7e:	438a      	bics	r2, r1
 800ae80:	601a      	str	r2, [r3, #0]
 800ae82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae88:	f383 8810 	msr	PRIMASK, r3
}
 800ae8c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2220      	movs	r2, #32
 800ae92:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2278      	movs	r2, #120	; 0x78
 800ae98:	2100      	movs	r1, #0
 800ae9a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	e05f      	b.n	800af60 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2204      	movs	r2, #4
 800aea8:	4013      	ands	r3, r2
 800aeaa:	2b04      	cmp	r3, #4
 800aeac:	d146      	bne.n	800af3c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aeae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb0:	2280      	movs	r2, #128	; 0x80
 800aeb2:	03d1      	lsls	r1, r2, #15
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	4a2c      	ldr	r2, [pc, #176]	; (800af68 <UART_CheckIdleState+0x148>)
 800aeb8:	9200      	str	r2, [sp, #0]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f000 f858 	bl	800af70 <UART_WaitOnFlagUntilTimeout>
 800aec0:	1e03      	subs	r3, r0, #0
 800aec2:	d03b      	beq.n	800af3c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aec4:	f3ef 8310 	mrs	r3, PRIMASK
 800aec8:	60fb      	str	r3, [r7, #12]
  return(result);
 800aeca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aecc:	637b      	str	r3, [r7, #52]	; 0x34
 800aece:	2301      	movs	r3, #1
 800aed0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	f383 8810 	msr	PRIMASK, r3
}
 800aed8:	46c0      	nop			; (mov r8, r8)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4921      	ldr	r1, [pc, #132]	; (800af6c <UART_CheckIdleState+0x14c>)
 800aee6:	400a      	ands	r2, r1
 800aee8:	601a      	str	r2, [r3, #0]
 800aeea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f383 8810 	msr	PRIMASK, r3
}
 800aef4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aef6:	f3ef 8310 	mrs	r3, PRIMASK
 800aefa:	61bb      	str	r3, [r7, #24]
  return(result);
 800aefc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aefe:	633b      	str	r3, [r7, #48]	; 0x30
 800af00:	2301      	movs	r3, #1
 800af02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	f383 8810 	msr	PRIMASK, r3
}
 800af0a:	46c0      	nop			; (mov r8, r8)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689a      	ldr	r2, [r3, #8]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2101      	movs	r1, #1
 800af18:	438a      	bics	r2, r1
 800af1a:	609a      	str	r2, [r3, #8]
 800af1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af20:	6a3b      	ldr	r3, [r7, #32]
 800af22:	f383 8810 	msr	PRIMASK, r3
}
 800af26:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2280      	movs	r2, #128	; 0x80
 800af2c:	2120      	movs	r1, #32
 800af2e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2278      	movs	r2, #120	; 0x78
 800af34:	2100      	movs	r1, #0
 800af36:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af38:	2303      	movs	r3, #3
 800af3a:	e011      	b.n	800af60 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2220      	movs	r2, #32
 800af40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2280      	movs	r2, #128	; 0x80
 800af46:	2120      	movs	r1, #32
 800af48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2278      	movs	r2, #120	; 0x78
 800af5a:	2100      	movs	r1, #0
 800af5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	0018      	movs	r0, r3
 800af62:	46bd      	mov	sp, r7
 800af64:	b010      	add	sp, #64	; 0x40
 800af66:	bd80      	pop	{r7, pc}
 800af68:	01ffffff 	.word	0x01ffffff
 800af6c:	fffffedf 	.word	0xfffffedf

0800af70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	603b      	str	r3, [r7, #0]
 800af7c:	1dfb      	adds	r3, r7, #7
 800af7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af80:	e04b      	b.n	800b01a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	3301      	adds	r3, #1
 800af86:	d048      	beq.n	800b01a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af88:	f7fb f8cc 	bl	8006124 <HAL_GetTick>
 800af8c:	0002      	movs	r2, r0
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	69ba      	ldr	r2, [r7, #24]
 800af94:	429a      	cmp	r2, r3
 800af96:	d302      	bcc.n	800af9e <UART_WaitOnFlagUntilTimeout+0x2e>
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d101      	bne.n	800afa2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e04b      	b.n	800b03a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2204      	movs	r2, #4
 800afaa:	4013      	ands	r3, r2
 800afac:	d035      	beq.n	800b01a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	69db      	ldr	r3, [r3, #28]
 800afb4:	2208      	movs	r2, #8
 800afb6:	4013      	ands	r3, r2
 800afb8:	2b08      	cmp	r3, #8
 800afba:	d111      	bne.n	800afe0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2208      	movs	r2, #8
 800afc2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	0018      	movs	r0, r3
 800afc8:	f000 f906 	bl	800b1d8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2284      	movs	r2, #132	; 0x84
 800afd0:	2108      	movs	r1, #8
 800afd2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2278      	movs	r2, #120	; 0x78
 800afd8:	2100      	movs	r1, #0
 800afda:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	e02c      	b.n	800b03a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	69da      	ldr	r2, [r3, #28]
 800afe6:	2380      	movs	r3, #128	; 0x80
 800afe8:	011b      	lsls	r3, r3, #4
 800afea:	401a      	ands	r2, r3
 800afec:	2380      	movs	r3, #128	; 0x80
 800afee:	011b      	lsls	r3, r3, #4
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d112      	bne.n	800b01a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2280      	movs	r2, #128	; 0x80
 800affa:	0112      	lsls	r2, r2, #4
 800affc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	0018      	movs	r0, r3
 800b002:	f000 f8e9 	bl	800b1d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2284      	movs	r2, #132	; 0x84
 800b00a:	2120      	movs	r1, #32
 800b00c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2278      	movs	r2, #120	; 0x78
 800b012:	2100      	movs	r1, #0
 800b014:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b016:	2303      	movs	r3, #3
 800b018:	e00f      	b.n	800b03a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	69db      	ldr	r3, [r3, #28]
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	4013      	ands	r3, r2
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	425a      	negs	r2, r3
 800b02a:	4153      	adcs	r3, r2
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	001a      	movs	r2, r3
 800b030:	1dfb      	adds	r3, r7, #7
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	429a      	cmp	r2, r3
 800b036:	d0a4      	beq.n	800af82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	0018      	movs	r0, r3
 800b03c:	46bd      	mov	sp, r7
 800b03e:	b004      	add	sp, #16
 800b040:	bd80      	pop	{r7, pc}
	...

0800b044 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b090      	sub	sp, #64	; 0x40
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	1dbb      	adds	r3, r7, #6
 800b050:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	1dba      	adds	r2, r7, #6
 800b05c:	2158      	movs	r1, #88	; 0x58
 800b05e:	8812      	ldrh	r2, [r2, #0]
 800b060:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	1dba      	adds	r2, r7, #6
 800b066:	215a      	movs	r1, #90	; 0x5a
 800b068:	8812      	ldrh	r2, [r2, #0]
 800b06a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2200      	movs	r2, #0
 800b070:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	689a      	ldr	r2, [r3, #8]
 800b076:	2380      	movs	r3, #128	; 0x80
 800b078:	015b      	lsls	r3, r3, #5
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d10d      	bne.n	800b09a <UART_Start_Receive_IT+0x56>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d104      	bne.n	800b090 <UART_Start_Receive_IT+0x4c>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	225c      	movs	r2, #92	; 0x5c
 800b08a:	4950      	ldr	r1, [pc, #320]	; (800b1cc <UART_Start_Receive_IT+0x188>)
 800b08c:	5299      	strh	r1, [r3, r2]
 800b08e:	e02e      	b.n	800b0ee <UART_Start_Receive_IT+0xaa>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	225c      	movs	r2, #92	; 0x5c
 800b094:	21ff      	movs	r1, #255	; 0xff
 800b096:	5299      	strh	r1, [r3, r2]
 800b098:	e029      	b.n	800b0ee <UART_Start_Receive_IT+0xaa>
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d10d      	bne.n	800b0be <UART_Start_Receive_IT+0x7a>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d104      	bne.n	800b0b4 <UART_Start_Receive_IT+0x70>
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	225c      	movs	r2, #92	; 0x5c
 800b0ae:	21ff      	movs	r1, #255	; 0xff
 800b0b0:	5299      	strh	r1, [r3, r2]
 800b0b2:	e01c      	b.n	800b0ee <UART_Start_Receive_IT+0xaa>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	225c      	movs	r2, #92	; 0x5c
 800b0b8:	217f      	movs	r1, #127	; 0x7f
 800b0ba:	5299      	strh	r1, [r3, r2]
 800b0bc:	e017      	b.n	800b0ee <UART_Start_Receive_IT+0xaa>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	689a      	ldr	r2, [r3, #8]
 800b0c2:	2380      	movs	r3, #128	; 0x80
 800b0c4:	055b      	lsls	r3, r3, #21
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d10d      	bne.n	800b0e6 <UART_Start_Receive_IT+0xa2>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d104      	bne.n	800b0dc <UART_Start_Receive_IT+0x98>
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	225c      	movs	r2, #92	; 0x5c
 800b0d6:	217f      	movs	r1, #127	; 0x7f
 800b0d8:	5299      	strh	r1, [r3, r2]
 800b0da:	e008      	b.n	800b0ee <UART_Start_Receive_IT+0xaa>
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	225c      	movs	r2, #92	; 0x5c
 800b0e0:	213f      	movs	r1, #63	; 0x3f
 800b0e2:	5299      	strh	r1, [r3, r2]
 800b0e4:	e003      	b.n	800b0ee <UART_Start_Receive_IT+0xaa>
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	225c      	movs	r2, #92	; 0x5c
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2284      	movs	r2, #132	; 0x84
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2280      	movs	r2, #128	; 0x80
 800b0fa:	2122      	movs	r1, #34	; 0x22
 800b0fc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0fe:	f3ef 8310 	mrs	r3, PRIMASK
 800b102:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b104:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b106:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b108:	2301      	movs	r3, #1
 800b10a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10e:	f383 8810 	msr	PRIMASK, r3
}
 800b112:	46c0      	nop			; (mov r8, r8)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689a      	ldr	r2, [r3, #8]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2101      	movs	r1, #1
 800b120:	430a      	orrs	r2, r1
 800b122:	609a      	str	r2, [r3, #8]
 800b124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b126:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12a:	f383 8810 	msr	PRIMASK, r3
}
 800b12e:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	689a      	ldr	r2, [r3, #8]
 800b134:	2380      	movs	r3, #128	; 0x80
 800b136:	015b      	lsls	r3, r3, #5
 800b138:	429a      	cmp	r2, r3
 800b13a:	d107      	bne.n	800b14c <UART_Start_Receive_IT+0x108>
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	691b      	ldr	r3, [r3, #16]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d103      	bne.n	800b14c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	4a22      	ldr	r2, [pc, #136]	; (800b1d0 <UART_Start_Receive_IT+0x18c>)
 800b148:	669a      	str	r2, [r3, #104]	; 0x68
 800b14a:	e002      	b.n	800b152 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4a21      	ldr	r2, [pc, #132]	; (800b1d4 <UART_Start_Receive_IT+0x190>)
 800b150:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d019      	beq.n	800b18e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b15a:	f3ef 8310 	mrs	r3, PRIMASK
 800b15e:	61fb      	str	r3, [r7, #28]
  return(result);
 800b160:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b162:	637b      	str	r3, [r7, #52]	; 0x34
 800b164:	2301      	movs	r3, #1
 800b166:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b168:	6a3b      	ldr	r3, [r7, #32]
 800b16a:	f383 8810 	msr	PRIMASK, r3
}
 800b16e:	46c0      	nop			; (mov r8, r8)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2190      	movs	r1, #144	; 0x90
 800b17c:	0049      	lsls	r1, r1, #1
 800b17e:	430a      	orrs	r2, r1
 800b180:	601a      	str	r2, [r3, #0]
 800b182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b184:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b188:	f383 8810 	msr	PRIMASK, r3
}
 800b18c:	e018      	b.n	800b1c0 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b18e:	f3ef 8310 	mrs	r3, PRIMASK
 800b192:	613b      	str	r3, [r7, #16]
  return(result);
 800b194:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800b196:	63bb      	str	r3, [r7, #56]	; 0x38
 800b198:	2301      	movs	r3, #1
 800b19a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	f383 8810 	msr	PRIMASK, r3
}
 800b1a2:	46c0      	nop			; (mov r8, r8)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2120      	movs	r1, #32
 800b1b0:	430a      	orrs	r2, r1
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	f383 8810 	msr	PRIMASK, r3
}
 800b1be:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	0018      	movs	r0, r3
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	b010      	add	sp, #64	; 0x40
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	46c0      	nop			; (mov r8, r8)
 800b1cc:	000001ff 	.word	0x000001ff
 800b1d0:	0800b4e9 	.word	0x0800b4e9
 800b1d4:	0800b325 	.word	0x0800b325

0800b1d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b08e      	sub	sp, #56	; 0x38
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1e0:	f3ef 8310 	mrs	r3, PRIMASK
 800b1e4:	617b      	str	r3, [r7, #20]
  return(result);
 800b1e6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1e8:	637b      	str	r3, [r7, #52]	; 0x34
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	f383 8810 	msr	PRIMASK, r3
}
 800b1f4:	46c0      	nop			; (mov r8, r8)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4926      	ldr	r1, [pc, #152]	; (800b29c <UART_EndRxTransfer+0xc4>)
 800b202:	400a      	ands	r2, r1
 800b204:	601a      	str	r2, [r3, #0]
 800b206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b208:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	f383 8810 	msr	PRIMASK, r3
}
 800b210:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b212:	f3ef 8310 	mrs	r3, PRIMASK
 800b216:	623b      	str	r3, [r7, #32]
  return(result);
 800b218:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b21a:	633b      	str	r3, [r7, #48]	; 0x30
 800b21c:	2301      	movs	r3, #1
 800b21e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b222:	f383 8810 	msr	PRIMASK, r3
}
 800b226:	46c0      	nop			; (mov r8, r8)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	689a      	ldr	r2, [r3, #8]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2101      	movs	r1, #1
 800b234:	438a      	bics	r2, r1
 800b236:	609a      	str	r2, [r3, #8]
 800b238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23e:	f383 8810 	msr	PRIMASK, r3
}
 800b242:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d118      	bne.n	800b27e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b24c:	f3ef 8310 	mrs	r3, PRIMASK
 800b250:	60bb      	str	r3, [r7, #8]
  return(result);
 800b252:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b254:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b256:	2301      	movs	r3, #1
 800b258:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f383 8810 	msr	PRIMASK, r3
}
 800b260:	46c0      	nop			; (mov r8, r8)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2110      	movs	r1, #16
 800b26e:	438a      	bics	r2, r1
 800b270:	601a      	str	r2, [r3, #0]
 800b272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b274:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	f383 8810 	msr	PRIMASK, r3
}
 800b27c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2280      	movs	r2, #128	; 0x80
 800b282:	2120      	movs	r1, #32
 800b284:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b292:	46c0      	nop			; (mov r8, r8)
 800b294:	46bd      	mov	sp, r7
 800b296:	b00e      	add	sp, #56	; 0x38
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	46c0      	nop			; (mov r8, r8)
 800b29c:	fffffedf 	.word	0xfffffedf

0800b2a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	225a      	movs	r2, #90	; 0x5a
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2252      	movs	r2, #82	; 0x52
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	0018      	movs	r0, r3
 800b2c2:	f7ff fa47 	bl	800a754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2c6:	46c0      	nop			; (mov r8, r8)
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	b004      	add	sp, #16
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b086      	sub	sp, #24
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2d6:	f3ef 8310 	mrs	r3, PRIMASK
 800b2da:	60bb      	str	r3, [r7, #8]
  return(result);
 800b2dc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2de:	617b      	str	r3, [r7, #20]
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f383 8810 	msr	PRIMASK, r3
}
 800b2ea:	46c0      	nop			; (mov r8, r8)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2140      	movs	r1, #64	; 0x40
 800b2f8:	438a      	bics	r2, r1
 800b2fa:	601a      	str	r2, [r3, #0]
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	f383 8810 	msr	PRIMASK, r3
}
 800b306:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2220      	movs	r2, #32
 800b30c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	0018      	movs	r0, r3
 800b318:	f7ff fa14 	bl	800a744 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b31c:	46c0      	nop			; (mov r8, r8)
 800b31e:	46bd      	mov	sp, r7
 800b320:	b006      	add	sp, #24
 800b322:	bd80      	pop	{r7, pc}

0800b324 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b094      	sub	sp, #80	; 0x50
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b32c:	204e      	movs	r0, #78	; 0x4e
 800b32e:	183b      	adds	r3, r7, r0
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	215c      	movs	r1, #92	; 0x5c
 800b334:	5a52      	ldrh	r2, [r2, r1]
 800b336:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2280      	movs	r2, #128	; 0x80
 800b33c:	589b      	ldr	r3, [r3, r2]
 800b33e:	2b22      	cmp	r3, #34	; 0x22
 800b340:	d000      	beq.n	800b344 <UART_RxISR_8BIT+0x20>
 800b342:	e0bf      	b.n	800b4c4 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b34a:	214c      	movs	r1, #76	; 0x4c
 800b34c:	187b      	adds	r3, r7, r1
 800b34e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b350:	187b      	adds	r3, r7, r1
 800b352:	881b      	ldrh	r3, [r3, #0]
 800b354:	b2da      	uxtb	r2, r3
 800b356:	183b      	adds	r3, r7, r0
 800b358:	881b      	ldrh	r3, [r3, #0]
 800b35a:	b2d9      	uxtb	r1, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b360:	400a      	ands	r2, r1
 800b362:	b2d2      	uxtb	r2, r2
 800b364:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	225a      	movs	r2, #90	; 0x5a
 800b374:	5a9b      	ldrh	r3, [r3, r2]
 800b376:	b29b      	uxth	r3, r3
 800b378:	3b01      	subs	r3, #1
 800b37a:	b299      	uxth	r1, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	225a      	movs	r2, #90	; 0x5a
 800b380:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	225a      	movs	r2, #90	; 0x5a
 800b386:	5a9b      	ldrh	r3, [r3, r2]
 800b388:	b29b      	uxth	r3, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d000      	beq.n	800b390 <UART_RxISR_8BIT+0x6c>
 800b38e:	e0a1      	b.n	800b4d4 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b390:	f3ef 8310 	mrs	r3, PRIMASK
 800b394:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b398:	64bb      	str	r3, [r7, #72]	; 0x48
 800b39a:	2301      	movs	r3, #1
 800b39c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a0:	f383 8810 	msr	PRIMASK, r3
}
 800b3a4:	46c0      	nop			; (mov r8, r8)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	494a      	ldr	r1, [pc, #296]	; (800b4dc <UART_RxISR_8BIT+0x1b8>)
 800b3b2:	400a      	ands	r2, r1
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3bc:	f383 8810 	msr	PRIMASK, r3
}
 800b3c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b3c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3ca:	647b      	str	r3, [r7, #68]	; 0x44
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d2:	f383 8810 	msr	PRIMASK, r3
}
 800b3d6:	46c0      	nop			; (mov r8, r8)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	689a      	ldr	r2, [r3, #8]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2101      	movs	r1, #1
 800b3e4:	438a      	bics	r2, r1
 800b3e6:	609a      	str	r2, [r3, #8]
 800b3e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ee:	f383 8810 	msr	PRIMASK, r3
}
 800b3f2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2280      	movs	r2, #128	; 0x80
 800b3f8:	2120      	movs	r1, #32
 800b3fa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a34      	ldr	r2, [pc, #208]	; (800b4e0 <UART_RxISR_8BIT+0x1bc>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d01f      	beq.n	800b452 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	685a      	ldr	r2, [r3, #4]
 800b418:	2380      	movs	r3, #128	; 0x80
 800b41a:	041b      	lsls	r3, r3, #16
 800b41c:	4013      	ands	r3, r2
 800b41e:	d018      	beq.n	800b452 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b420:	f3ef 8310 	mrs	r3, PRIMASK
 800b424:	61bb      	str	r3, [r7, #24]
  return(result);
 800b426:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b428:	643b      	str	r3, [r7, #64]	; 0x40
 800b42a:	2301      	movs	r3, #1
 800b42c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	f383 8810 	msr	PRIMASK, r3
}
 800b434:	46c0      	nop			; (mov r8, r8)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4928      	ldr	r1, [pc, #160]	; (800b4e4 <UART_RxISR_8BIT+0x1c0>)
 800b442:	400a      	ands	r2, r1
 800b444:	601a      	str	r2, [r3, #0]
 800b446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b448:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b44a:	6a3b      	ldr	r3, [r7, #32]
 800b44c:	f383 8810 	msr	PRIMASK, r3
}
 800b450:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b456:	2b01      	cmp	r3, #1
 800b458:	d12f      	bne.n	800b4ba <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b460:	f3ef 8310 	mrs	r3, PRIMASK
 800b464:	60fb      	str	r3, [r7, #12]
  return(result);
 800b466:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b46a:	2301      	movs	r3, #1
 800b46c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	f383 8810 	msr	PRIMASK, r3
}
 800b474:	46c0      	nop			; (mov r8, r8)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2110      	movs	r1, #16
 800b482:	438a      	bics	r2, r1
 800b484:	601a      	str	r2, [r3, #0]
 800b486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b488:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f383 8810 	msr	PRIMASK, r3
}
 800b490:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	69db      	ldr	r3, [r3, #28]
 800b498:	2210      	movs	r2, #16
 800b49a:	4013      	ands	r3, r2
 800b49c:	2b10      	cmp	r3, #16
 800b49e:	d103      	bne.n	800b4a8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2210      	movs	r2, #16
 800b4a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2258      	movs	r2, #88	; 0x58
 800b4ac:	5a9a      	ldrh	r2, [r3, r2]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	0011      	movs	r1, r2
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	f7ff f956 	bl	800a764 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b4b8:	e00c      	b.n	800b4d4 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	0018      	movs	r0, r3
 800b4be:	f7fa fa41 	bl	8005944 <HAL_UART_RxCpltCallback>
}
 800b4c2:	e007      	b.n	800b4d4 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	699a      	ldr	r2, [r3, #24]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2108      	movs	r1, #8
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	619a      	str	r2, [r3, #24]
}
 800b4d4:	46c0      	nop			; (mov r8, r8)
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	b014      	add	sp, #80	; 0x50
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	fffffedf 	.word	0xfffffedf
 800b4e0:	40004800 	.word	0x40004800
 800b4e4:	fbffffff 	.word	0xfbffffff

0800b4e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b094      	sub	sp, #80	; 0x50
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b4f0:	204e      	movs	r0, #78	; 0x4e
 800b4f2:	183b      	adds	r3, r7, r0
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	215c      	movs	r1, #92	; 0x5c
 800b4f8:	5a52      	ldrh	r2, [r2, r1]
 800b4fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2280      	movs	r2, #128	; 0x80
 800b500:	589b      	ldr	r3, [r3, r2]
 800b502:	2b22      	cmp	r3, #34	; 0x22
 800b504:	d000      	beq.n	800b508 <UART_RxISR_16BIT+0x20>
 800b506:	e0bf      	b.n	800b688 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b50e:	214c      	movs	r1, #76	; 0x4c
 800b510:	187b      	adds	r3, r7, r1
 800b512:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b518:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800b51a:	187b      	adds	r3, r7, r1
 800b51c:	183a      	adds	r2, r7, r0
 800b51e:	881b      	ldrh	r3, [r3, #0]
 800b520:	8812      	ldrh	r2, [r2, #0]
 800b522:	4013      	ands	r3, r2
 800b524:	b29a      	uxth	r2, r3
 800b526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b528:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b52e:	1c9a      	adds	r2, r3, #2
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	225a      	movs	r2, #90	; 0x5a
 800b538:	5a9b      	ldrh	r3, [r3, r2]
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	3b01      	subs	r3, #1
 800b53e:	b299      	uxth	r1, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	225a      	movs	r2, #90	; 0x5a
 800b544:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	225a      	movs	r2, #90	; 0x5a
 800b54a:	5a9b      	ldrh	r3, [r3, r2]
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d000      	beq.n	800b554 <UART_RxISR_16BIT+0x6c>
 800b552:	e0a1      	b.n	800b698 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b554:	f3ef 8310 	mrs	r3, PRIMASK
 800b558:	623b      	str	r3, [r7, #32]
  return(result);
 800b55a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b55c:	647b      	str	r3, [r7, #68]	; 0x44
 800b55e:	2301      	movs	r3, #1
 800b560:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b564:	f383 8810 	msr	PRIMASK, r3
}
 800b568:	46c0      	nop			; (mov r8, r8)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	494a      	ldr	r1, [pc, #296]	; (800b6a0 <UART_RxISR_16BIT+0x1b8>)
 800b576:	400a      	ands	r2, r1
 800b578:	601a      	str	r2, [r3, #0]
 800b57a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b57c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b580:	f383 8810 	msr	PRIMASK, r3
}
 800b584:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b586:	f3ef 8310 	mrs	r3, PRIMASK
 800b58a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800b58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b58e:	643b      	str	r3, [r7, #64]	; 0x40
 800b590:	2301      	movs	r3, #1
 800b592:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b596:	f383 8810 	msr	PRIMASK, r3
}
 800b59a:	46c0      	nop			; (mov r8, r8)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	689a      	ldr	r2, [r3, #8]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	438a      	bics	r2, r1
 800b5aa:	609a      	str	r2, [r3, #8]
 800b5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5ae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b2:	f383 8810 	msr	PRIMASK, r3
}
 800b5b6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2280      	movs	r2, #128	; 0x80
 800b5bc:	2120      	movs	r1, #32
 800b5be:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a34      	ldr	r2, [pc, #208]	; (800b6a4 <UART_RxISR_16BIT+0x1bc>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d01f      	beq.n	800b616 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	685a      	ldr	r2, [r3, #4]
 800b5dc:	2380      	movs	r3, #128	; 0x80
 800b5de:	041b      	lsls	r3, r3, #16
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	d018      	beq.n	800b616 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e8:	617b      	str	r3, [r7, #20]
  return(result);
 800b5ea:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	f383 8810 	msr	PRIMASK, r3
}
 800b5f8:	46c0      	nop			; (mov r8, r8)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4928      	ldr	r1, [pc, #160]	; (800b6a8 <UART_RxISR_16BIT+0x1c0>)
 800b606:	400a      	ands	r2, r1
 800b608:	601a      	str	r2, [r3, #0]
 800b60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b60c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	f383 8810 	msr	PRIMASK, r3
}
 800b614:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d12f      	bne.n	800b67e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b624:	f3ef 8310 	mrs	r3, PRIMASK
 800b628:	60bb      	str	r3, [r7, #8]
  return(result);
 800b62a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b62c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b62e:	2301      	movs	r3, #1
 800b630:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f383 8810 	msr	PRIMASK, r3
}
 800b638:	46c0      	nop			; (mov r8, r8)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2110      	movs	r1, #16
 800b646:	438a      	bics	r2, r1
 800b648:	601a      	str	r2, [r3, #0]
 800b64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	f383 8810 	msr	PRIMASK, r3
}
 800b654:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	69db      	ldr	r3, [r3, #28]
 800b65c:	2210      	movs	r2, #16
 800b65e:	4013      	ands	r3, r2
 800b660:	2b10      	cmp	r3, #16
 800b662:	d103      	bne.n	800b66c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2210      	movs	r2, #16
 800b66a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2258      	movs	r2, #88	; 0x58
 800b670:	5a9a      	ldrh	r2, [r3, r2]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	0011      	movs	r1, r2
 800b676:	0018      	movs	r0, r3
 800b678:	f7ff f874 	bl	800a764 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b67c:	e00c      	b.n	800b698 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	0018      	movs	r0, r3
 800b682:	f7fa f95f 	bl	8005944 <HAL_UART_RxCpltCallback>
}
 800b686:	e007      	b.n	800b698 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	699a      	ldr	r2, [r3, #24]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2108      	movs	r1, #8
 800b694:	430a      	orrs	r2, r1
 800b696:	619a      	str	r2, [r3, #24]
}
 800b698:	46c0      	nop			; (mov r8, r8)
 800b69a:	46bd      	mov	sp, r7
 800b69c:	b014      	add	sp, #80	; 0x50
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	fffffedf 	.word	0xfffffedf
 800b6a4:	40004800 	.word	0x40004800
 800b6a8:	fbffffff 	.word	0xfbffffff

0800b6ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b6b4:	46c0      	nop			; (mov r8, r8)
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	b002      	add	sp, #8
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <atof>:
 800b6bc:	b510      	push	{r4, lr}
 800b6be:	2100      	movs	r1, #0
 800b6c0:	f000 fe32 	bl	800c328 <strtod>
 800b6c4:	bd10      	pop	{r4, pc}

0800b6c6 <atoi>:
 800b6c6:	b510      	push	{r4, lr}
 800b6c8:	220a      	movs	r2, #10
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	f000 fec4 	bl	800c458 <strtol>
 800b6d0:	bd10      	pop	{r4, pc}
	...

0800b6d4 <sulp>:
 800b6d4:	b570      	push	{r4, r5, r6, lr}
 800b6d6:	0016      	movs	r6, r2
 800b6d8:	000d      	movs	r5, r1
 800b6da:	f003 ff01 	bl	800f4e0 <__ulp>
 800b6de:	2e00      	cmp	r6, #0
 800b6e0:	d00d      	beq.n	800b6fe <sulp+0x2a>
 800b6e2:	236b      	movs	r3, #107	; 0x6b
 800b6e4:	006a      	lsls	r2, r5, #1
 800b6e6:	0d52      	lsrs	r2, r2, #21
 800b6e8:	1a9b      	subs	r3, r3, r2
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	dd07      	ble.n	800b6fe <sulp+0x2a>
 800b6ee:	2400      	movs	r4, #0
 800b6f0:	4a03      	ldr	r2, [pc, #12]	; (800b700 <sulp+0x2c>)
 800b6f2:	051b      	lsls	r3, r3, #20
 800b6f4:	189d      	adds	r5, r3, r2
 800b6f6:	002b      	movs	r3, r5
 800b6f8:	0022      	movs	r2, r4
 800b6fa:	f7f6 fe25 	bl	8002348 <__aeabi_dmul>
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}
 800b700:	3ff00000 	.word	0x3ff00000

0800b704 <_strtod_l>:
 800b704:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b706:	b0a1      	sub	sp, #132	; 0x84
 800b708:	9219      	str	r2, [sp, #100]	; 0x64
 800b70a:	2200      	movs	r2, #0
 800b70c:	2600      	movs	r6, #0
 800b70e:	2700      	movs	r7, #0
 800b710:	9004      	str	r0, [sp, #16]
 800b712:	9107      	str	r1, [sp, #28]
 800b714:	921c      	str	r2, [sp, #112]	; 0x70
 800b716:	911b      	str	r1, [sp, #108]	; 0x6c
 800b718:	780a      	ldrb	r2, [r1, #0]
 800b71a:	2a2b      	cmp	r2, #43	; 0x2b
 800b71c:	d055      	beq.n	800b7ca <_strtod_l+0xc6>
 800b71e:	d841      	bhi.n	800b7a4 <_strtod_l+0xa0>
 800b720:	2a0d      	cmp	r2, #13
 800b722:	d83b      	bhi.n	800b79c <_strtod_l+0x98>
 800b724:	2a08      	cmp	r2, #8
 800b726:	d83b      	bhi.n	800b7a0 <_strtod_l+0x9c>
 800b728:	2a00      	cmp	r2, #0
 800b72a:	d044      	beq.n	800b7b6 <_strtod_l+0xb2>
 800b72c:	2200      	movs	r2, #0
 800b72e:	920f      	str	r2, [sp, #60]	; 0x3c
 800b730:	2100      	movs	r1, #0
 800b732:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b734:	9109      	str	r1, [sp, #36]	; 0x24
 800b736:	782a      	ldrb	r2, [r5, #0]
 800b738:	2a30      	cmp	r2, #48	; 0x30
 800b73a:	d000      	beq.n	800b73e <_strtod_l+0x3a>
 800b73c:	e085      	b.n	800b84a <_strtod_l+0x146>
 800b73e:	786a      	ldrb	r2, [r5, #1]
 800b740:	3120      	adds	r1, #32
 800b742:	438a      	bics	r2, r1
 800b744:	2a58      	cmp	r2, #88	; 0x58
 800b746:	d000      	beq.n	800b74a <_strtod_l+0x46>
 800b748:	e075      	b.n	800b836 <_strtod_l+0x132>
 800b74a:	9302      	str	r3, [sp, #8]
 800b74c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b74e:	4a97      	ldr	r2, [pc, #604]	; (800b9ac <_strtod_l+0x2a8>)
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	ab1c      	add	r3, sp, #112	; 0x70
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	9804      	ldr	r0, [sp, #16]
 800b758:	ab1d      	add	r3, sp, #116	; 0x74
 800b75a:	a91b      	add	r1, sp, #108	; 0x6c
 800b75c:	f002 ff78 	bl	800e650 <__gethex>
 800b760:	230f      	movs	r3, #15
 800b762:	0002      	movs	r2, r0
 800b764:	401a      	ands	r2, r3
 800b766:	0004      	movs	r4, r0
 800b768:	9205      	str	r2, [sp, #20]
 800b76a:	4218      	tst	r0, r3
 800b76c:	d005      	beq.n	800b77a <_strtod_l+0x76>
 800b76e:	2a06      	cmp	r2, #6
 800b770:	d12d      	bne.n	800b7ce <_strtod_l+0xca>
 800b772:	1c6b      	adds	r3, r5, #1
 800b774:	931b      	str	r3, [sp, #108]	; 0x6c
 800b776:	2300      	movs	r3, #0
 800b778:	930f      	str	r3, [sp, #60]	; 0x3c
 800b77a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d002      	beq.n	800b786 <_strtod_l+0x82>
 800b780:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b782:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b784:	6013      	str	r3, [r2, #0]
 800b786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d01b      	beq.n	800b7c4 <_strtod_l+0xc0>
 800b78c:	2380      	movs	r3, #128	; 0x80
 800b78e:	0032      	movs	r2, r6
 800b790:	061b      	lsls	r3, r3, #24
 800b792:	18fb      	adds	r3, r7, r3
 800b794:	0010      	movs	r0, r2
 800b796:	0019      	movs	r1, r3
 800b798:	b021      	add	sp, #132	; 0x84
 800b79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b79c:	2a20      	cmp	r2, #32
 800b79e:	d1c5      	bne.n	800b72c <_strtod_l+0x28>
 800b7a0:	3101      	adds	r1, #1
 800b7a2:	e7b8      	b.n	800b716 <_strtod_l+0x12>
 800b7a4:	2a2d      	cmp	r2, #45	; 0x2d
 800b7a6:	d1c1      	bne.n	800b72c <_strtod_l+0x28>
 800b7a8:	3a2c      	subs	r2, #44	; 0x2c
 800b7aa:	920f      	str	r2, [sp, #60]	; 0x3c
 800b7ac:	1c4a      	adds	r2, r1, #1
 800b7ae:	921b      	str	r2, [sp, #108]	; 0x6c
 800b7b0:	784a      	ldrb	r2, [r1, #1]
 800b7b2:	2a00      	cmp	r2, #0
 800b7b4:	d1bc      	bne.n	800b730 <_strtod_l+0x2c>
 800b7b6:	9b07      	ldr	r3, [sp, #28]
 800b7b8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1dd      	bne.n	800b780 <_strtod_l+0x7c>
 800b7c4:	0032      	movs	r2, r6
 800b7c6:	003b      	movs	r3, r7
 800b7c8:	e7e4      	b.n	800b794 <_strtod_l+0x90>
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	e7ed      	b.n	800b7aa <_strtod_l+0xa6>
 800b7ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b7d0:	2a00      	cmp	r2, #0
 800b7d2:	d007      	beq.n	800b7e4 <_strtod_l+0xe0>
 800b7d4:	2135      	movs	r1, #53	; 0x35
 800b7d6:	a81e      	add	r0, sp, #120	; 0x78
 800b7d8:	f003 ff73 	bl	800f6c2 <__copybits>
 800b7dc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b7de:	9804      	ldr	r0, [sp, #16]
 800b7e0:	f003 fb3c 	bl	800ee5c <_Bfree>
 800b7e4:	9805      	ldr	r0, [sp, #20]
 800b7e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b7e8:	3801      	subs	r0, #1
 800b7ea:	2804      	cmp	r0, #4
 800b7ec:	d806      	bhi.n	800b7fc <_strtod_l+0xf8>
 800b7ee:	f7f4 fc9d 	bl	800012c <__gnu_thumb1_case_uqi>
 800b7f2:	0312      	.short	0x0312
 800b7f4:	1e1c      	.short	0x1e1c
 800b7f6:	12          	.byte	0x12
 800b7f7:	00          	.byte	0x00
 800b7f8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b7fa:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b7fc:	05e4      	lsls	r4, r4, #23
 800b7fe:	d502      	bpl.n	800b806 <_strtod_l+0x102>
 800b800:	2380      	movs	r3, #128	; 0x80
 800b802:	061b      	lsls	r3, r3, #24
 800b804:	431f      	orrs	r7, r3
 800b806:	4b6a      	ldr	r3, [pc, #424]	; (800b9b0 <_strtod_l+0x2ac>)
 800b808:	423b      	tst	r3, r7
 800b80a:	d1b6      	bne.n	800b77a <_strtod_l+0x76>
 800b80c:	f001 ff82 	bl	800d714 <__errno>
 800b810:	2322      	movs	r3, #34	; 0x22
 800b812:	6003      	str	r3, [r0, #0]
 800b814:	e7b1      	b.n	800b77a <_strtod_l+0x76>
 800b816:	4967      	ldr	r1, [pc, #412]	; (800b9b4 <_strtod_l+0x2b0>)
 800b818:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b81a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b81c:	400a      	ands	r2, r1
 800b81e:	4966      	ldr	r1, [pc, #408]	; (800b9b8 <_strtod_l+0x2b4>)
 800b820:	185b      	adds	r3, r3, r1
 800b822:	051b      	lsls	r3, r3, #20
 800b824:	431a      	orrs	r2, r3
 800b826:	0017      	movs	r7, r2
 800b828:	e7e8      	b.n	800b7fc <_strtod_l+0xf8>
 800b82a:	4f61      	ldr	r7, [pc, #388]	; (800b9b0 <_strtod_l+0x2ac>)
 800b82c:	e7e6      	b.n	800b7fc <_strtod_l+0xf8>
 800b82e:	2601      	movs	r6, #1
 800b830:	4f62      	ldr	r7, [pc, #392]	; (800b9bc <_strtod_l+0x2b8>)
 800b832:	4276      	negs	r6, r6
 800b834:	e7e2      	b.n	800b7fc <_strtod_l+0xf8>
 800b836:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b838:	1c5a      	adds	r2, r3, #1
 800b83a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b83c:	785b      	ldrb	r3, [r3, #1]
 800b83e:	2b30      	cmp	r3, #48	; 0x30
 800b840:	d0f9      	beq.n	800b836 <_strtod_l+0x132>
 800b842:	2b00      	cmp	r3, #0
 800b844:	d099      	beq.n	800b77a <_strtod_l+0x76>
 800b846:	2301      	movs	r3, #1
 800b848:	9309      	str	r3, [sp, #36]	; 0x24
 800b84a:	2500      	movs	r5, #0
 800b84c:	220a      	movs	r2, #10
 800b84e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b850:	950d      	str	r5, [sp, #52]	; 0x34
 800b852:	9310      	str	r3, [sp, #64]	; 0x40
 800b854:	9508      	str	r5, [sp, #32]
 800b856:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b858:	7804      	ldrb	r4, [r0, #0]
 800b85a:	0023      	movs	r3, r4
 800b85c:	3b30      	subs	r3, #48	; 0x30
 800b85e:	b2d9      	uxtb	r1, r3
 800b860:	2909      	cmp	r1, #9
 800b862:	d927      	bls.n	800b8b4 <_strtod_l+0x1b0>
 800b864:	2201      	movs	r2, #1
 800b866:	4956      	ldr	r1, [pc, #344]	; (800b9c0 <_strtod_l+0x2bc>)
 800b868:	f001 fed6 	bl	800d618 <strncmp>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d031      	beq.n	800b8d4 <_strtod_l+0x1d0>
 800b870:	2000      	movs	r0, #0
 800b872:	0023      	movs	r3, r4
 800b874:	4684      	mov	ip, r0
 800b876:	9a08      	ldr	r2, [sp, #32]
 800b878:	900c      	str	r0, [sp, #48]	; 0x30
 800b87a:	9205      	str	r2, [sp, #20]
 800b87c:	2220      	movs	r2, #32
 800b87e:	0019      	movs	r1, r3
 800b880:	4391      	bics	r1, r2
 800b882:	000a      	movs	r2, r1
 800b884:	2100      	movs	r1, #0
 800b886:	9106      	str	r1, [sp, #24]
 800b888:	2a45      	cmp	r2, #69	; 0x45
 800b88a:	d000      	beq.n	800b88e <_strtod_l+0x18a>
 800b88c:	e0c2      	b.n	800ba14 <_strtod_l+0x310>
 800b88e:	9b05      	ldr	r3, [sp, #20]
 800b890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b892:	4303      	orrs	r3, r0
 800b894:	4313      	orrs	r3, r2
 800b896:	428b      	cmp	r3, r1
 800b898:	d08d      	beq.n	800b7b6 <_strtod_l+0xb2>
 800b89a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b89c:	9307      	str	r3, [sp, #28]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	931b      	str	r3, [sp, #108]	; 0x6c
 800b8a2:	9b07      	ldr	r3, [sp, #28]
 800b8a4:	785b      	ldrb	r3, [r3, #1]
 800b8a6:	2b2b      	cmp	r3, #43	; 0x2b
 800b8a8:	d071      	beq.n	800b98e <_strtod_l+0x28a>
 800b8aa:	000c      	movs	r4, r1
 800b8ac:	2b2d      	cmp	r3, #45	; 0x2d
 800b8ae:	d174      	bne.n	800b99a <_strtod_l+0x296>
 800b8b0:	2401      	movs	r4, #1
 800b8b2:	e06d      	b.n	800b990 <_strtod_l+0x28c>
 800b8b4:	9908      	ldr	r1, [sp, #32]
 800b8b6:	2908      	cmp	r1, #8
 800b8b8:	dc09      	bgt.n	800b8ce <_strtod_l+0x1ca>
 800b8ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b8bc:	4351      	muls	r1, r2
 800b8be:	185b      	adds	r3, r3, r1
 800b8c0:	930d      	str	r3, [sp, #52]	; 0x34
 800b8c2:	9b08      	ldr	r3, [sp, #32]
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	9308      	str	r3, [sp, #32]
 800b8ca:	901b      	str	r0, [sp, #108]	; 0x6c
 800b8cc:	e7c3      	b.n	800b856 <_strtod_l+0x152>
 800b8ce:	4355      	muls	r5, r2
 800b8d0:	195d      	adds	r5, r3, r5
 800b8d2:	e7f6      	b.n	800b8c2 <_strtod_l+0x1be>
 800b8d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b8d6:	1c5a      	adds	r2, r3, #1
 800b8d8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b8da:	9a08      	ldr	r2, [sp, #32]
 800b8dc:	785b      	ldrb	r3, [r3, #1]
 800b8de:	2a00      	cmp	r2, #0
 800b8e0:	d03a      	beq.n	800b958 <_strtod_l+0x254>
 800b8e2:	900c      	str	r0, [sp, #48]	; 0x30
 800b8e4:	9205      	str	r2, [sp, #20]
 800b8e6:	001a      	movs	r2, r3
 800b8e8:	3a30      	subs	r2, #48	; 0x30
 800b8ea:	2a09      	cmp	r2, #9
 800b8ec:	d912      	bls.n	800b914 <_strtod_l+0x210>
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	4694      	mov	ip, r2
 800b8f2:	e7c3      	b.n	800b87c <_strtod_l+0x178>
 800b8f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b8f6:	3001      	adds	r0, #1
 800b8f8:	1c5a      	adds	r2, r3, #1
 800b8fa:	921b      	str	r2, [sp, #108]	; 0x6c
 800b8fc:	785b      	ldrb	r3, [r3, #1]
 800b8fe:	2b30      	cmp	r3, #48	; 0x30
 800b900:	d0f8      	beq.n	800b8f4 <_strtod_l+0x1f0>
 800b902:	001a      	movs	r2, r3
 800b904:	3a31      	subs	r2, #49	; 0x31
 800b906:	2a08      	cmp	r2, #8
 800b908:	d83c      	bhi.n	800b984 <_strtod_l+0x280>
 800b90a:	900c      	str	r0, [sp, #48]	; 0x30
 800b90c:	2000      	movs	r0, #0
 800b90e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b910:	9005      	str	r0, [sp, #20]
 800b912:	9210      	str	r2, [sp, #64]	; 0x40
 800b914:	001a      	movs	r2, r3
 800b916:	1c41      	adds	r1, r0, #1
 800b918:	3a30      	subs	r2, #48	; 0x30
 800b91a:	2b30      	cmp	r3, #48	; 0x30
 800b91c:	d016      	beq.n	800b94c <_strtod_l+0x248>
 800b91e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b920:	185b      	adds	r3, r3, r1
 800b922:	930c      	str	r3, [sp, #48]	; 0x30
 800b924:	9b05      	ldr	r3, [sp, #20]
 800b926:	210a      	movs	r1, #10
 800b928:	469c      	mov	ip, r3
 800b92a:	4484      	add	ip, r0
 800b92c:	4563      	cmp	r3, ip
 800b92e:	d115      	bne.n	800b95c <_strtod_l+0x258>
 800b930:	9905      	ldr	r1, [sp, #20]
 800b932:	9b05      	ldr	r3, [sp, #20]
 800b934:	3101      	adds	r1, #1
 800b936:	1809      	adds	r1, r1, r0
 800b938:	181b      	adds	r3, r3, r0
 800b93a:	9105      	str	r1, [sp, #20]
 800b93c:	2b08      	cmp	r3, #8
 800b93e:	dc19      	bgt.n	800b974 <_strtod_l+0x270>
 800b940:	230a      	movs	r3, #10
 800b942:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b944:	434b      	muls	r3, r1
 800b946:	2100      	movs	r1, #0
 800b948:	18d3      	adds	r3, r2, r3
 800b94a:	930d      	str	r3, [sp, #52]	; 0x34
 800b94c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b94e:	0008      	movs	r0, r1
 800b950:	1c5a      	adds	r2, r3, #1
 800b952:	921b      	str	r2, [sp, #108]	; 0x6c
 800b954:	785b      	ldrb	r3, [r3, #1]
 800b956:	e7c6      	b.n	800b8e6 <_strtod_l+0x1e2>
 800b958:	9808      	ldr	r0, [sp, #32]
 800b95a:	e7d0      	b.n	800b8fe <_strtod_l+0x1fa>
 800b95c:	1c5c      	adds	r4, r3, #1
 800b95e:	2b08      	cmp	r3, #8
 800b960:	dc04      	bgt.n	800b96c <_strtod_l+0x268>
 800b962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b964:	434b      	muls	r3, r1
 800b966:	930d      	str	r3, [sp, #52]	; 0x34
 800b968:	0023      	movs	r3, r4
 800b96a:	e7df      	b.n	800b92c <_strtod_l+0x228>
 800b96c:	2c10      	cmp	r4, #16
 800b96e:	dcfb      	bgt.n	800b968 <_strtod_l+0x264>
 800b970:	434d      	muls	r5, r1
 800b972:	e7f9      	b.n	800b968 <_strtod_l+0x264>
 800b974:	9b05      	ldr	r3, [sp, #20]
 800b976:	2100      	movs	r1, #0
 800b978:	2b10      	cmp	r3, #16
 800b97a:	dce7      	bgt.n	800b94c <_strtod_l+0x248>
 800b97c:	230a      	movs	r3, #10
 800b97e:	435d      	muls	r5, r3
 800b980:	1955      	adds	r5, r2, r5
 800b982:	e7e3      	b.n	800b94c <_strtod_l+0x248>
 800b984:	2200      	movs	r2, #0
 800b986:	920c      	str	r2, [sp, #48]	; 0x30
 800b988:	9205      	str	r2, [sp, #20]
 800b98a:	3201      	adds	r2, #1
 800b98c:	e7b0      	b.n	800b8f0 <_strtod_l+0x1ec>
 800b98e:	2400      	movs	r4, #0
 800b990:	9b07      	ldr	r3, [sp, #28]
 800b992:	3302      	adds	r3, #2
 800b994:	931b      	str	r3, [sp, #108]	; 0x6c
 800b996:	9b07      	ldr	r3, [sp, #28]
 800b998:	789b      	ldrb	r3, [r3, #2]
 800b99a:	001a      	movs	r2, r3
 800b99c:	3a30      	subs	r2, #48	; 0x30
 800b99e:	2a09      	cmp	r2, #9
 800b9a0:	d914      	bls.n	800b9cc <_strtod_l+0x2c8>
 800b9a2:	9a07      	ldr	r2, [sp, #28]
 800b9a4:	921b      	str	r2, [sp, #108]	; 0x6c
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	e033      	b.n	800ba12 <_strtod_l+0x30e>
 800b9aa:	46c0      	nop			; (mov r8, r8)
 800b9ac:	08010534 	.word	0x08010534
 800b9b0:	7ff00000 	.word	0x7ff00000
 800b9b4:	ffefffff 	.word	0xffefffff
 800b9b8:	00000433 	.word	0x00000433
 800b9bc:	7fffffff 	.word	0x7fffffff
 800b9c0:	08010530 	.word	0x08010530
 800b9c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9c6:	1c5a      	adds	r2, r3, #1
 800b9c8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b9ca:	785b      	ldrb	r3, [r3, #1]
 800b9cc:	2b30      	cmp	r3, #48	; 0x30
 800b9ce:	d0f9      	beq.n	800b9c4 <_strtod_l+0x2c0>
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	9206      	str	r2, [sp, #24]
 800b9d4:	001a      	movs	r2, r3
 800b9d6:	3a31      	subs	r2, #49	; 0x31
 800b9d8:	2a08      	cmp	r2, #8
 800b9da:	d81b      	bhi.n	800ba14 <_strtod_l+0x310>
 800b9dc:	3b30      	subs	r3, #48	; 0x30
 800b9de:	930e      	str	r3, [sp, #56]	; 0x38
 800b9e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9e2:	9306      	str	r3, [sp, #24]
 800b9e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9e6:	1c59      	adds	r1, r3, #1
 800b9e8:	911b      	str	r1, [sp, #108]	; 0x6c
 800b9ea:	785b      	ldrb	r3, [r3, #1]
 800b9ec:	001a      	movs	r2, r3
 800b9ee:	3a30      	subs	r2, #48	; 0x30
 800b9f0:	2a09      	cmp	r2, #9
 800b9f2:	d93a      	bls.n	800ba6a <_strtod_l+0x366>
 800b9f4:	9a06      	ldr	r2, [sp, #24]
 800b9f6:	1a8a      	subs	r2, r1, r2
 800b9f8:	49b2      	ldr	r1, [pc, #712]	; (800bcc4 <_strtod_l+0x5c0>)
 800b9fa:	9106      	str	r1, [sp, #24]
 800b9fc:	2a08      	cmp	r2, #8
 800b9fe:	dc04      	bgt.n	800ba0a <_strtod_l+0x306>
 800ba00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba02:	9206      	str	r2, [sp, #24]
 800ba04:	428a      	cmp	r2, r1
 800ba06:	dd00      	ble.n	800ba0a <_strtod_l+0x306>
 800ba08:	9106      	str	r1, [sp, #24]
 800ba0a:	2c00      	cmp	r4, #0
 800ba0c:	d002      	beq.n	800ba14 <_strtod_l+0x310>
 800ba0e:	9a06      	ldr	r2, [sp, #24]
 800ba10:	4252      	negs	r2, r2
 800ba12:	9206      	str	r2, [sp, #24]
 800ba14:	9a05      	ldr	r2, [sp, #20]
 800ba16:	2a00      	cmp	r2, #0
 800ba18:	d14d      	bne.n	800bab6 <_strtod_l+0x3b2>
 800ba1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba1c:	4310      	orrs	r0, r2
 800ba1e:	d000      	beq.n	800ba22 <_strtod_l+0x31e>
 800ba20:	e6ab      	b.n	800b77a <_strtod_l+0x76>
 800ba22:	4662      	mov	r2, ip
 800ba24:	2a00      	cmp	r2, #0
 800ba26:	d000      	beq.n	800ba2a <_strtod_l+0x326>
 800ba28:	e6c5      	b.n	800b7b6 <_strtod_l+0xb2>
 800ba2a:	2b69      	cmp	r3, #105	; 0x69
 800ba2c:	d027      	beq.n	800ba7e <_strtod_l+0x37a>
 800ba2e:	dc23      	bgt.n	800ba78 <_strtod_l+0x374>
 800ba30:	2b49      	cmp	r3, #73	; 0x49
 800ba32:	d024      	beq.n	800ba7e <_strtod_l+0x37a>
 800ba34:	2b4e      	cmp	r3, #78	; 0x4e
 800ba36:	d000      	beq.n	800ba3a <_strtod_l+0x336>
 800ba38:	e6bd      	b.n	800b7b6 <_strtod_l+0xb2>
 800ba3a:	49a3      	ldr	r1, [pc, #652]	; (800bcc8 <_strtod_l+0x5c4>)
 800ba3c:	a81b      	add	r0, sp, #108	; 0x6c
 800ba3e:	f003 f83d 	bl	800eabc <__match>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d100      	bne.n	800ba48 <_strtod_l+0x344>
 800ba46:	e6b6      	b.n	800b7b6 <_strtod_l+0xb2>
 800ba48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	2b28      	cmp	r3, #40	; 0x28
 800ba4e:	d12c      	bne.n	800baaa <_strtod_l+0x3a6>
 800ba50:	499e      	ldr	r1, [pc, #632]	; (800bccc <_strtod_l+0x5c8>)
 800ba52:	aa1e      	add	r2, sp, #120	; 0x78
 800ba54:	a81b      	add	r0, sp, #108	; 0x6c
 800ba56:	f003 f845 	bl	800eae4 <__hexnan>
 800ba5a:	2805      	cmp	r0, #5
 800ba5c:	d125      	bne.n	800baaa <_strtod_l+0x3a6>
 800ba5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ba60:	4a9b      	ldr	r2, [pc, #620]	; (800bcd0 <_strtod_l+0x5cc>)
 800ba62:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ba64:	431a      	orrs	r2, r3
 800ba66:	0017      	movs	r7, r2
 800ba68:	e687      	b.n	800b77a <_strtod_l+0x76>
 800ba6a:	220a      	movs	r2, #10
 800ba6c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ba6e:	434a      	muls	r2, r1
 800ba70:	18d2      	adds	r2, r2, r3
 800ba72:	3a30      	subs	r2, #48	; 0x30
 800ba74:	920e      	str	r2, [sp, #56]	; 0x38
 800ba76:	e7b5      	b.n	800b9e4 <_strtod_l+0x2e0>
 800ba78:	2b6e      	cmp	r3, #110	; 0x6e
 800ba7a:	d0de      	beq.n	800ba3a <_strtod_l+0x336>
 800ba7c:	e69b      	b.n	800b7b6 <_strtod_l+0xb2>
 800ba7e:	4995      	ldr	r1, [pc, #596]	; (800bcd4 <_strtod_l+0x5d0>)
 800ba80:	a81b      	add	r0, sp, #108	; 0x6c
 800ba82:	f003 f81b 	bl	800eabc <__match>
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d100      	bne.n	800ba8c <_strtod_l+0x388>
 800ba8a:	e694      	b.n	800b7b6 <_strtod_l+0xb2>
 800ba8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba8e:	4992      	ldr	r1, [pc, #584]	; (800bcd8 <_strtod_l+0x5d4>)
 800ba90:	3b01      	subs	r3, #1
 800ba92:	a81b      	add	r0, sp, #108	; 0x6c
 800ba94:	931b      	str	r3, [sp, #108]	; 0x6c
 800ba96:	f003 f811 	bl	800eabc <__match>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d102      	bne.n	800baa4 <_strtod_l+0x3a0>
 800ba9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800baa0:	3301      	adds	r3, #1
 800baa2:	931b      	str	r3, [sp, #108]	; 0x6c
 800baa4:	2600      	movs	r6, #0
 800baa6:	4f8a      	ldr	r7, [pc, #552]	; (800bcd0 <_strtod_l+0x5cc>)
 800baa8:	e667      	b.n	800b77a <_strtod_l+0x76>
 800baaa:	488c      	ldr	r0, [pc, #560]	; (800bcdc <_strtod_l+0x5d8>)
 800baac:	f001 fe74 	bl	800d798 <nan>
 800bab0:	0006      	movs	r6, r0
 800bab2:	000f      	movs	r7, r1
 800bab4:	e661      	b.n	800b77a <_strtod_l+0x76>
 800bab6:	9b06      	ldr	r3, [sp, #24]
 800bab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800baba:	1a9b      	subs	r3, r3, r2
 800babc:	9309      	str	r3, [sp, #36]	; 0x24
 800babe:	9b08      	ldr	r3, [sp, #32]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d101      	bne.n	800bac8 <_strtod_l+0x3c4>
 800bac4:	9b05      	ldr	r3, [sp, #20]
 800bac6:	9308      	str	r3, [sp, #32]
 800bac8:	9c05      	ldr	r4, [sp, #20]
 800baca:	2c10      	cmp	r4, #16
 800bacc:	dd00      	ble.n	800bad0 <_strtod_l+0x3cc>
 800bace:	2410      	movs	r4, #16
 800bad0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bad2:	f7f7 fb01 	bl	80030d8 <__aeabi_ui2d>
 800bad6:	9b05      	ldr	r3, [sp, #20]
 800bad8:	0006      	movs	r6, r0
 800bada:	000f      	movs	r7, r1
 800badc:	2b09      	cmp	r3, #9
 800bade:	dd15      	ble.n	800bb0c <_strtod_l+0x408>
 800bae0:	0022      	movs	r2, r4
 800bae2:	4b7f      	ldr	r3, [pc, #508]	; (800bce0 <_strtod_l+0x5dc>)
 800bae4:	3a09      	subs	r2, #9
 800bae6:	00d2      	lsls	r2, r2, #3
 800bae8:	189b      	adds	r3, r3, r2
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	f7f6 fc2b 	bl	8002348 <__aeabi_dmul>
 800baf2:	0006      	movs	r6, r0
 800baf4:	0028      	movs	r0, r5
 800baf6:	000f      	movs	r7, r1
 800baf8:	f7f7 faee 	bl	80030d8 <__aeabi_ui2d>
 800bafc:	0002      	movs	r2, r0
 800bafe:	000b      	movs	r3, r1
 800bb00:	0030      	movs	r0, r6
 800bb02:	0039      	movs	r1, r7
 800bb04:	f7f5 fcc6 	bl	8001494 <__aeabi_dadd>
 800bb08:	0006      	movs	r6, r0
 800bb0a:	000f      	movs	r7, r1
 800bb0c:	9b05      	ldr	r3, [sp, #20]
 800bb0e:	2b0f      	cmp	r3, #15
 800bb10:	dc39      	bgt.n	800bb86 <_strtod_l+0x482>
 800bb12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d100      	bne.n	800bb1a <_strtod_l+0x416>
 800bb18:	e62f      	b.n	800b77a <_strtod_l+0x76>
 800bb1a:	dd24      	ble.n	800bb66 <_strtod_l+0x462>
 800bb1c:	2b16      	cmp	r3, #22
 800bb1e:	dc09      	bgt.n	800bb34 <_strtod_l+0x430>
 800bb20:	496f      	ldr	r1, [pc, #444]	; (800bce0 <_strtod_l+0x5dc>)
 800bb22:	00db      	lsls	r3, r3, #3
 800bb24:	18c9      	adds	r1, r1, r3
 800bb26:	0032      	movs	r2, r6
 800bb28:	6808      	ldr	r0, [r1, #0]
 800bb2a:	6849      	ldr	r1, [r1, #4]
 800bb2c:	003b      	movs	r3, r7
 800bb2e:	f7f6 fc0b 	bl	8002348 <__aeabi_dmul>
 800bb32:	e7bd      	b.n	800bab0 <_strtod_l+0x3ac>
 800bb34:	2325      	movs	r3, #37	; 0x25
 800bb36:	9a05      	ldr	r2, [sp, #20]
 800bb38:	1a9b      	subs	r3, r3, r2
 800bb3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	db22      	blt.n	800bb86 <_strtod_l+0x482>
 800bb40:	240f      	movs	r4, #15
 800bb42:	9b05      	ldr	r3, [sp, #20]
 800bb44:	4d66      	ldr	r5, [pc, #408]	; (800bce0 <_strtod_l+0x5dc>)
 800bb46:	1ae4      	subs	r4, r4, r3
 800bb48:	00e1      	lsls	r1, r4, #3
 800bb4a:	1869      	adds	r1, r5, r1
 800bb4c:	0032      	movs	r2, r6
 800bb4e:	6808      	ldr	r0, [r1, #0]
 800bb50:	6849      	ldr	r1, [r1, #4]
 800bb52:	003b      	movs	r3, r7
 800bb54:	f7f6 fbf8 	bl	8002348 <__aeabi_dmul>
 800bb58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb5a:	1b1c      	subs	r4, r3, r4
 800bb5c:	00e4      	lsls	r4, r4, #3
 800bb5e:	192d      	adds	r5, r5, r4
 800bb60:	682a      	ldr	r2, [r5, #0]
 800bb62:	686b      	ldr	r3, [r5, #4]
 800bb64:	e7e3      	b.n	800bb2e <_strtod_l+0x42a>
 800bb66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb68:	3316      	adds	r3, #22
 800bb6a:	db0c      	blt.n	800bb86 <_strtod_l+0x482>
 800bb6c:	9906      	ldr	r1, [sp, #24]
 800bb6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb70:	4b5b      	ldr	r3, [pc, #364]	; (800bce0 <_strtod_l+0x5dc>)
 800bb72:	1a52      	subs	r2, r2, r1
 800bb74:	00d2      	lsls	r2, r2, #3
 800bb76:	189b      	adds	r3, r3, r2
 800bb78:	0030      	movs	r0, r6
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	0039      	movs	r1, r7
 800bb80:	f7f5 ffe8 	bl	8001b54 <__aeabi_ddiv>
 800bb84:	e794      	b.n	800bab0 <_strtod_l+0x3ac>
 800bb86:	9b05      	ldr	r3, [sp, #20]
 800bb88:	1b1c      	subs	r4, r3, r4
 800bb8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb8c:	18e4      	adds	r4, r4, r3
 800bb8e:	2c00      	cmp	r4, #0
 800bb90:	dd72      	ble.n	800bc78 <_strtod_l+0x574>
 800bb92:	220f      	movs	r2, #15
 800bb94:	0023      	movs	r3, r4
 800bb96:	4013      	ands	r3, r2
 800bb98:	4214      	tst	r4, r2
 800bb9a:	d00a      	beq.n	800bbb2 <_strtod_l+0x4ae>
 800bb9c:	4950      	ldr	r1, [pc, #320]	; (800bce0 <_strtod_l+0x5dc>)
 800bb9e:	00db      	lsls	r3, r3, #3
 800bba0:	18c9      	adds	r1, r1, r3
 800bba2:	0032      	movs	r2, r6
 800bba4:	6808      	ldr	r0, [r1, #0]
 800bba6:	6849      	ldr	r1, [r1, #4]
 800bba8:	003b      	movs	r3, r7
 800bbaa:	f7f6 fbcd 	bl	8002348 <__aeabi_dmul>
 800bbae:	0006      	movs	r6, r0
 800bbb0:	000f      	movs	r7, r1
 800bbb2:	230f      	movs	r3, #15
 800bbb4:	439c      	bics	r4, r3
 800bbb6:	d04a      	beq.n	800bc4e <_strtod_l+0x54a>
 800bbb8:	3326      	adds	r3, #38	; 0x26
 800bbba:	33ff      	adds	r3, #255	; 0xff
 800bbbc:	429c      	cmp	r4, r3
 800bbbe:	dd22      	ble.n	800bc06 <_strtod_l+0x502>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	9305      	str	r3, [sp, #20]
 800bbc4:	9306      	str	r3, [sp, #24]
 800bbc6:	930d      	str	r3, [sp, #52]	; 0x34
 800bbc8:	9308      	str	r3, [sp, #32]
 800bbca:	2322      	movs	r3, #34	; 0x22
 800bbcc:	2600      	movs	r6, #0
 800bbce:	9a04      	ldr	r2, [sp, #16]
 800bbd0:	4f3f      	ldr	r7, [pc, #252]	; (800bcd0 <_strtod_l+0x5cc>)
 800bbd2:	6013      	str	r3, [r2, #0]
 800bbd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbd6:	42b3      	cmp	r3, r6
 800bbd8:	d100      	bne.n	800bbdc <_strtod_l+0x4d8>
 800bbda:	e5ce      	b.n	800b77a <_strtod_l+0x76>
 800bbdc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bbde:	9804      	ldr	r0, [sp, #16]
 800bbe0:	f003 f93c 	bl	800ee5c <_Bfree>
 800bbe4:	9908      	ldr	r1, [sp, #32]
 800bbe6:	9804      	ldr	r0, [sp, #16]
 800bbe8:	f003 f938 	bl	800ee5c <_Bfree>
 800bbec:	9906      	ldr	r1, [sp, #24]
 800bbee:	9804      	ldr	r0, [sp, #16]
 800bbf0:	f003 f934 	bl	800ee5c <_Bfree>
 800bbf4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bbf6:	9804      	ldr	r0, [sp, #16]
 800bbf8:	f003 f930 	bl	800ee5c <_Bfree>
 800bbfc:	9905      	ldr	r1, [sp, #20]
 800bbfe:	9804      	ldr	r0, [sp, #16]
 800bc00:	f003 f92c 	bl	800ee5c <_Bfree>
 800bc04:	e5b9      	b.n	800b77a <_strtod_l+0x76>
 800bc06:	2300      	movs	r3, #0
 800bc08:	0030      	movs	r0, r6
 800bc0a:	0039      	movs	r1, r7
 800bc0c:	4d35      	ldr	r5, [pc, #212]	; (800bce4 <_strtod_l+0x5e0>)
 800bc0e:	1124      	asrs	r4, r4, #4
 800bc10:	9307      	str	r3, [sp, #28]
 800bc12:	2c01      	cmp	r4, #1
 800bc14:	dc1e      	bgt.n	800bc54 <_strtod_l+0x550>
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <_strtod_l+0x51a>
 800bc1a:	0006      	movs	r6, r0
 800bc1c:	000f      	movs	r7, r1
 800bc1e:	4b32      	ldr	r3, [pc, #200]	; (800bce8 <_strtod_l+0x5e4>)
 800bc20:	9a07      	ldr	r2, [sp, #28]
 800bc22:	18ff      	adds	r7, r7, r3
 800bc24:	4b2f      	ldr	r3, [pc, #188]	; (800bce4 <_strtod_l+0x5e0>)
 800bc26:	00d2      	lsls	r2, r2, #3
 800bc28:	189d      	adds	r5, r3, r2
 800bc2a:	6828      	ldr	r0, [r5, #0]
 800bc2c:	6869      	ldr	r1, [r5, #4]
 800bc2e:	0032      	movs	r2, r6
 800bc30:	003b      	movs	r3, r7
 800bc32:	f7f6 fb89 	bl	8002348 <__aeabi_dmul>
 800bc36:	4b26      	ldr	r3, [pc, #152]	; (800bcd0 <_strtod_l+0x5cc>)
 800bc38:	4a2c      	ldr	r2, [pc, #176]	; (800bcec <_strtod_l+0x5e8>)
 800bc3a:	0006      	movs	r6, r0
 800bc3c:	400b      	ands	r3, r1
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d8be      	bhi.n	800bbc0 <_strtod_l+0x4bc>
 800bc42:	4a2b      	ldr	r2, [pc, #172]	; (800bcf0 <_strtod_l+0x5ec>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d913      	bls.n	800bc70 <_strtod_l+0x56c>
 800bc48:	2601      	movs	r6, #1
 800bc4a:	4f2a      	ldr	r7, [pc, #168]	; (800bcf4 <_strtod_l+0x5f0>)
 800bc4c:	4276      	negs	r6, r6
 800bc4e:	2300      	movs	r3, #0
 800bc50:	9307      	str	r3, [sp, #28]
 800bc52:	e088      	b.n	800bd66 <_strtod_l+0x662>
 800bc54:	2201      	movs	r2, #1
 800bc56:	4214      	tst	r4, r2
 800bc58:	d004      	beq.n	800bc64 <_strtod_l+0x560>
 800bc5a:	682a      	ldr	r2, [r5, #0]
 800bc5c:	686b      	ldr	r3, [r5, #4]
 800bc5e:	f7f6 fb73 	bl	8002348 <__aeabi_dmul>
 800bc62:	2301      	movs	r3, #1
 800bc64:	9a07      	ldr	r2, [sp, #28]
 800bc66:	1064      	asrs	r4, r4, #1
 800bc68:	3201      	adds	r2, #1
 800bc6a:	9207      	str	r2, [sp, #28]
 800bc6c:	3508      	adds	r5, #8
 800bc6e:	e7d0      	b.n	800bc12 <_strtod_l+0x50e>
 800bc70:	23d4      	movs	r3, #212	; 0xd4
 800bc72:	049b      	lsls	r3, r3, #18
 800bc74:	18cf      	adds	r7, r1, r3
 800bc76:	e7ea      	b.n	800bc4e <_strtod_l+0x54a>
 800bc78:	2c00      	cmp	r4, #0
 800bc7a:	d0e8      	beq.n	800bc4e <_strtod_l+0x54a>
 800bc7c:	4264      	negs	r4, r4
 800bc7e:	230f      	movs	r3, #15
 800bc80:	0022      	movs	r2, r4
 800bc82:	401a      	ands	r2, r3
 800bc84:	421c      	tst	r4, r3
 800bc86:	d00a      	beq.n	800bc9e <_strtod_l+0x59a>
 800bc88:	4b15      	ldr	r3, [pc, #84]	; (800bce0 <_strtod_l+0x5dc>)
 800bc8a:	00d2      	lsls	r2, r2, #3
 800bc8c:	189b      	adds	r3, r3, r2
 800bc8e:	0030      	movs	r0, r6
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	0039      	movs	r1, r7
 800bc96:	f7f5 ff5d 	bl	8001b54 <__aeabi_ddiv>
 800bc9a:	0006      	movs	r6, r0
 800bc9c:	000f      	movs	r7, r1
 800bc9e:	1124      	asrs	r4, r4, #4
 800bca0:	d0d5      	beq.n	800bc4e <_strtod_l+0x54a>
 800bca2:	2c1f      	cmp	r4, #31
 800bca4:	dd28      	ble.n	800bcf8 <_strtod_l+0x5f4>
 800bca6:	2300      	movs	r3, #0
 800bca8:	9305      	str	r3, [sp, #20]
 800bcaa:	9306      	str	r3, [sp, #24]
 800bcac:	930d      	str	r3, [sp, #52]	; 0x34
 800bcae:	9308      	str	r3, [sp, #32]
 800bcb0:	2322      	movs	r3, #34	; 0x22
 800bcb2:	9a04      	ldr	r2, [sp, #16]
 800bcb4:	2600      	movs	r6, #0
 800bcb6:	6013      	str	r3, [r2, #0]
 800bcb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcba:	2700      	movs	r7, #0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d18d      	bne.n	800bbdc <_strtod_l+0x4d8>
 800bcc0:	e55b      	b.n	800b77a <_strtod_l+0x76>
 800bcc2:	46c0      	nop			; (mov r8, r8)
 800bcc4:	00004e1f 	.word	0x00004e1f
 800bcc8:	08010696 	.word	0x08010696
 800bccc:	08010548 	.word	0x08010548
 800bcd0:	7ff00000 	.word	0x7ff00000
 800bcd4:	0801068e 	.word	0x0801068e
 800bcd8:	080106cd 	.word	0x080106cd
 800bcdc:	08010958 	.word	0x08010958
 800bce0:	08010838 	.word	0x08010838
 800bce4:	08010810 	.word	0x08010810
 800bce8:	fcb00000 	.word	0xfcb00000
 800bcec:	7ca00000 	.word	0x7ca00000
 800bcf0:	7c900000 	.word	0x7c900000
 800bcf4:	7fefffff 	.word	0x7fefffff
 800bcf8:	2310      	movs	r3, #16
 800bcfa:	0022      	movs	r2, r4
 800bcfc:	401a      	ands	r2, r3
 800bcfe:	9207      	str	r2, [sp, #28]
 800bd00:	421c      	tst	r4, r3
 800bd02:	d001      	beq.n	800bd08 <_strtod_l+0x604>
 800bd04:	335a      	adds	r3, #90	; 0x5a
 800bd06:	9307      	str	r3, [sp, #28]
 800bd08:	0030      	movs	r0, r6
 800bd0a:	0039      	movs	r1, r7
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	4dc4      	ldr	r5, [pc, #784]	; (800c020 <_strtod_l+0x91c>)
 800bd10:	2201      	movs	r2, #1
 800bd12:	4214      	tst	r4, r2
 800bd14:	d004      	beq.n	800bd20 <_strtod_l+0x61c>
 800bd16:	682a      	ldr	r2, [r5, #0]
 800bd18:	686b      	ldr	r3, [r5, #4]
 800bd1a:	f7f6 fb15 	bl	8002348 <__aeabi_dmul>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	1064      	asrs	r4, r4, #1
 800bd22:	3508      	adds	r5, #8
 800bd24:	2c00      	cmp	r4, #0
 800bd26:	d1f3      	bne.n	800bd10 <_strtod_l+0x60c>
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d001      	beq.n	800bd30 <_strtod_l+0x62c>
 800bd2c:	0006      	movs	r6, r0
 800bd2e:	000f      	movs	r7, r1
 800bd30:	9b07      	ldr	r3, [sp, #28]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00f      	beq.n	800bd56 <_strtod_l+0x652>
 800bd36:	236b      	movs	r3, #107	; 0x6b
 800bd38:	007a      	lsls	r2, r7, #1
 800bd3a:	0d52      	lsrs	r2, r2, #21
 800bd3c:	0039      	movs	r1, r7
 800bd3e:	1a9b      	subs	r3, r3, r2
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	dd08      	ble.n	800bd56 <_strtod_l+0x652>
 800bd44:	2b1f      	cmp	r3, #31
 800bd46:	dc00      	bgt.n	800bd4a <_strtod_l+0x646>
 800bd48:	e121      	b.n	800bf8e <_strtod_l+0x88a>
 800bd4a:	2600      	movs	r6, #0
 800bd4c:	2b34      	cmp	r3, #52	; 0x34
 800bd4e:	dc00      	bgt.n	800bd52 <_strtod_l+0x64e>
 800bd50:	e116      	b.n	800bf80 <_strtod_l+0x87c>
 800bd52:	27dc      	movs	r7, #220	; 0xdc
 800bd54:	04bf      	lsls	r7, r7, #18
 800bd56:	2200      	movs	r2, #0
 800bd58:	2300      	movs	r3, #0
 800bd5a:	0030      	movs	r0, r6
 800bd5c:	0039      	movs	r1, r7
 800bd5e:	f7f4 fb7f 	bl	8000460 <__aeabi_dcmpeq>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	d19f      	bne.n	800bca6 <_strtod_l+0x5a2>
 800bd66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd68:	9a08      	ldr	r2, [sp, #32]
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bd6e:	9b05      	ldr	r3, [sp, #20]
 800bd70:	9804      	ldr	r0, [sp, #16]
 800bd72:	f003 f8db 	bl	800ef2c <__s2b>
 800bd76:	900d      	str	r0, [sp, #52]	; 0x34
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d100      	bne.n	800bd7e <_strtod_l+0x67a>
 800bd7c:	e720      	b.n	800bbc0 <_strtod_l+0x4bc>
 800bd7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd80:	9906      	ldr	r1, [sp, #24]
 800bd82:	17da      	asrs	r2, r3, #31
 800bd84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd86:	1a5b      	subs	r3, r3, r1
 800bd88:	401a      	ands	r2, r3
 800bd8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd8c:	9215      	str	r2, [sp, #84]	; 0x54
 800bd8e:	43db      	mvns	r3, r3
 800bd90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd92:	17db      	asrs	r3, r3, #31
 800bd94:	401a      	ands	r2, r3
 800bd96:	2300      	movs	r3, #0
 800bd98:	9218      	str	r2, [sp, #96]	; 0x60
 800bd9a:	9305      	str	r3, [sp, #20]
 800bd9c:	9306      	str	r3, [sp, #24]
 800bd9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bda0:	9804      	ldr	r0, [sp, #16]
 800bda2:	6859      	ldr	r1, [r3, #4]
 800bda4:	f003 f816 	bl	800edd4 <_Balloc>
 800bda8:	9008      	str	r0, [sp, #32]
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	d100      	bne.n	800bdb0 <_strtod_l+0x6ac>
 800bdae:	e70c      	b.n	800bbca <_strtod_l+0x4c6>
 800bdb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdb2:	300c      	adds	r0, #12
 800bdb4:	0019      	movs	r1, r3
 800bdb6:	691a      	ldr	r2, [r3, #16]
 800bdb8:	310c      	adds	r1, #12
 800bdba:	3202      	adds	r2, #2
 800bdbc:	0092      	lsls	r2, r2, #2
 800bdbe:	f001 fce1 	bl	800d784 <memcpy>
 800bdc2:	ab1e      	add	r3, sp, #120	; 0x78
 800bdc4:	9301      	str	r3, [sp, #4]
 800bdc6:	ab1d      	add	r3, sp, #116	; 0x74
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	0032      	movs	r2, r6
 800bdcc:	003b      	movs	r3, r7
 800bdce:	9804      	ldr	r0, [sp, #16]
 800bdd0:	9610      	str	r6, [sp, #64]	; 0x40
 800bdd2:	9711      	str	r7, [sp, #68]	; 0x44
 800bdd4:	f003 fbec 	bl	800f5b0 <__d2b>
 800bdd8:	901c      	str	r0, [sp, #112]	; 0x70
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d100      	bne.n	800bde0 <_strtod_l+0x6dc>
 800bdde:	e6f4      	b.n	800bbca <_strtod_l+0x4c6>
 800bde0:	2101      	movs	r1, #1
 800bde2:	9804      	ldr	r0, [sp, #16]
 800bde4:	f003 f936 	bl	800f054 <__i2b>
 800bde8:	9006      	str	r0, [sp, #24]
 800bdea:	2800      	cmp	r0, #0
 800bdec:	d100      	bne.n	800bdf0 <_strtod_l+0x6ec>
 800bdee:	e6ec      	b.n	800bbca <_strtod_l+0x4c6>
 800bdf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bdf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bdf4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bdf6:	1ad4      	subs	r4, r2, r3
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	db01      	blt.n	800be00 <_strtod_l+0x6fc>
 800bdfc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800bdfe:	195d      	adds	r5, r3, r5
 800be00:	9907      	ldr	r1, [sp, #28]
 800be02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800be04:	1a5b      	subs	r3, r3, r1
 800be06:	2136      	movs	r1, #54	; 0x36
 800be08:	189b      	adds	r3, r3, r2
 800be0a:	1a8a      	subs	r2, r1, r2
 800be0c:	4985      	ldr	r1, [pc, #532]	; (800c024 <_strtod_l+0x920>)
 800be0e:	2001      	movs	r0, #1
 800be10:	468c      	mov	ip, r1
 800be12:	2100      	movs	r1, #0
 800be14:	3b01      	subs	r3, #1
 800be16:	9114      	str	r1, [sp, #80]	; 0x50
 800be18:	9012      	str	r0, [sp, #72]	; 0x48
 800be1a:	4563      	cmp	r3, ip
 800be1c:	da07      	bge.n	800be2e <_strtod_l+0x72a>
 800be1e:	4661      	mov	r1, ip
 800be20:	1ac9      	subs	r1, r1, r3
 800be22:	1a52      	subs	r2, r2, r1
 800be24:	291f      	cmp	r1, #31
 800be26:	dd00      	ble.n	800be2a <_strtod_l+0x726>
 800be28:	e0b6      	b.n	800bf98 <_strtod_l+0x894>
 800be2a:	4088      	lsls	r0, r1
 800be2c:	9012      	str	r0, [sp, #72]	; 0x48
 800be2e:	18ab      	adds	r3, r5, r2
 800be30:	930c      	str	r3, [sp, #48]	; 0x30
 800be32:	18a4      	adds	r4, r4, r2
 800be34:	9b07      	ldr	r3, [sp, #28]
 800be36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be38:	191c      	adds	r4, r3, r4
 800be3a:	002b      	movs	r3, r5
 800be3c:	4295      	cmp	r5, r2
 800be3e:	dd00      	ble.n	800be42 <_strtod_l+0x73e>
 800be40:	0013      	movs	r3, r2
 800be42:	42a3      	cmp	r3, r4
 800be44:	dd00      	ble.n	800be48 <_strtod_l+0x744>
 800be46:	0023      	movs	r3, r4
 800be48:	2b00      	cmp	r3, #0
 800be4a:	dd04      	ble.n	800be56 <_strtod_l+0x752>
 800be4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be4e:	1ae4      	subs	r4, r4, r3
 800be50:	1ad2      	subs	r2, r2, r3
 800be52:	920c      	str	r2, [sp, #48]	; 0x30
 800be54:	1aed      	subs	r5, r5, r3
 800be56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be58:	2b00      	cmp	r3, #0
 800be5a:	dd17      	ble.n	800be8c <_strtod_l+0x788>
 800be5c:	001a      	movs	r2, r3
 800be5e:	9906      	ldr	r1, [sp, #24]
 800be60:	9804      	ldr	r0, [sp, #16]
 800be62:	f003 f9bf 	bl	800f1e4 <__pow5mult>
 800be66:	9006      	str	r0, [sp, #24]
 800be68:	2800      	cmp	r0, #0
 800be6a:	d100      	bne.n	800be6e <_strtod_l+0x76a>
 800be6c:	e6ad      	b.n	800bbca <_strtod_l+0x4c6>
 800be6e:	0001      	movs	r1, r0
 800be70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800be72:	9804      	ldr	r0, [sp, #16]
 800be74:	f003 f906 	bl	800f084 <__multiply>
 800be78:	900e      	str	r0, [sp, #56]	; 0x38
 800be7a:	2800      	cmp	r0, #0
 800be7c:	d100      	bne.n	800be80 <_strtod_l+0x77c>
 800be7e:	e6a4      	b.n	800bbca <_strtod_l+0x4c6>
 800be80:	991c      	ldr	r1, [sp, #112]	; 0x70
 800be82:	9804      	ldr	r0, [sp, #16]
 800be84:	f002 ffea 	bl	800ee5c <_Bfree>
 800be88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be8a:	931c      	str	r3, [sp, #112]	; 0x70
 800be8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be8e:	2b00      	cmp	r3, #0
 800be90:	dd00      	ble.n	800be94 <_strtod_l+0x790>
 800be92:	e087      	b.n	800bfa4 <_strtod_l+0x8a0>
 800be94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be96:	2b00      	cmp	r3, #0
 800be98:	dd08      	ble.n	800beac <_strtod_l+0x7a8>
 800be9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800be9c:	9908      	ldr	r1, [sp, #32]
 800be9e:	9804      	ldr	r0, [sp, #16]
 800bea0:	f003 f9a0 	bl	800f1e4 <__pow5mult>
 800bea4:	9008      	str	r0, [sp, #32]
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d100      	bne.n	800beac <_strtod_l+0x7a8>
 800beaa:	e68e      	b.n	800bbca <_strtod_l+0x4c6>
 800beac:	2c00      	cmp	r4, #0
 800beae:	dd08      	ble.n	800bec2 <_strtod_l+0x7be>
 800beb0:	0022      	movs	r2, r4
 800beb2:	9908      	ldr	r1, [sp, #32]
 800beb4:	9804      	ldr	r0, [sp, #16]
 800beb6:	f003 f9f1 	bl	800f29c <__lshift>
 800beba:	9008      	str	r0, [sp, #32]
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d100      	bne.n	800bec2 <_strtod_l+0x7be>
 800bec0:	e683      	b.n	800bbca <_strtod_l+0x4c6>
 800bec2:	2d00      	cmp	r5, #0
 800bec4:	dd08      	ble.n	800bed8 <_strtod_l+0x7d4>
 800bec6:	002a      	movs	r2, r5
 800bec8:	9906      	ldr	r1, [sp, #24]
 800beca:	9804      	ldr	r0, [sp, #16]
 800becc:	f003 f9e6 	bl	800f29c <__lshift>
 800bed0:	9006      	str	r0, [sp, #24]
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d100      	bne.n	800bed8 <_strtod_l+0x7d4>
 800bed6:	e678      	b.n	800bbca <_strtod_l+0x4c6>
 800bed8:	9a08      	ldr	r2, [sp, #32]
 800beda:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bedc:	9804      	ldr	r0, [sp, #16]
 800bede:	f003 fa67 	bl	800f3b0 <__mdiff>
 800bee2:	9005      	str	r0, [sp, #20]
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d100      	bne.n	800beea <_strtod_l+0x7e6>
 800bee8:	e66f      	b.n	800bbca <_strtod_l+0x4c6>
 800beea:	2200      	movs	r2, #0
 800beec:	68c3      	ldr	r3, [r0, #12]
 800beee:	9906      	ldr	r1, [sp, #24]
 800bef0:	60c2      	str	r2, [r0, #12]
 800bef2:	930c      	str	r3, [sp, #48]	; 0x30
 800bef4:	f003 fa40 	bl	800f378 <__mcmp>
 800bef8:	2800      	cmp	r0, #0
 800befa:	da5d      	bge.n	800bfb8 <_strtod_l+0x8b4>
 800befc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800befe:	4333      	orrs	r3, r6
 800bf00:	d000      	beq.n	800bf04 <_strtod_l+0x800>
 800bf02:	e088      	b.n	800c016 <_strtod_l+0x912>
 800bf04:	033b      	lsls	r3, r7, #12
 800bf06:	d000      	beq.n	800bf0a <_strtod_l+0x806>
 800bf08:	e085      	b.n	800c016 <_strtod_l+0x912>
 800bf0a:	22d6      	movs	r2, #214	; 0xd6
 800bf0c:	4b46      	ldr	r3, [pc, #280]	; (800c028 <_strtod_l+0x924>)
 800bf0e:	04d2      	lsls	r2, r2, #19
 800bf10:	403b      	ands	r3, r7
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d97f      	bls.n	800c016 <_strtod_l+0x912>
 800bf16:	9b05      	ldr	r3, [sp, #20]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d103      	bne.n	800bf26 <_strtod_l+0x822>
 800bf1e:	9b05      	ldr	r3, [sp, #20]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	dd77      	ble.n	800c016 <_strtod_l+0x912>
 800bf26:	9905      	ldr	r1, [sp, #20]
 800bf28:	2201      	movs	r2, #1
 800bf2a:	9804      	ldr	r0, [sp, #16]
 800bf2c:	f003 f9b6 	bl	800f29c <__lshift>
 800bf30:	9906      	ldr	r1, [sp, #24]
 800bf32:	9005      	str	r0, [sp, #20]
 800bf34:	f003 fa20 	bl	800f378 <__mcmp>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	dd6c      	ble.n	800c016 <_strtod_l+0x912>
 800bf3c:	9907      	ldr	r1, [sp, #28]
 800bf3e:	003b      	movs	r3, r7
 800bf40:	4a39      	ldr	r2, [pc, #228]	; (800c028 <_strtod_l+0x924>)
 800bf42:	2900      	cmp	r1, #0
 800bf44:	d100      	bne.n	800bf48 <_strtod_l+0x844>
 800bf46:	e094      	b.n	800c072 <_strtod_l+0x96e>
 800bf48:	0011      	movs	r1, r2
 800bf4a:	20d6      	movs	r0, #214	; 0xd6
 800bf4c:	4039      	ands	r1, r7
 800bf4e:	04c0      	lsls	r0, r0, #19
 800bf50:	4281      	cmp	r1, r0
 800bf52:	dd00      	ble.n	800bf56 <_strtod_l+0x852>
 800bf54:	e08d      	b.n	800c072 <_strtod_l+0x96e>
 800bf56:	23dc      	movs	r3, #220	; 0xdc
 800bf58:	049b      	lsls	r3, r3, #18
 800bf5a:	4299      	cmp	r1, r3
 800bf5c:	dc00      	bgt.n	800bf60 <_strtod_l+0x85c>
 800bf5e:	e6a7      	b.n	800bcb0 <_strtod_l+0x5ac>
 800bf60:	0030      	movs	r0, r6
 800bf62:	0039      	movs	r1, r7
 800bf64:	4b31      	ldr	r3, [pc, #196]	; (800c02c <_strtod_l+0x928>)
 800bf66:	2200      	movs	r2, #0
 800bf68:	f7f6 f9ee 	bl	8002348 <__aeabi_dmul>
 800bf6c:	4b2e      	ldr	r3, [pc, #184]	; (800c028 <_strtod_l+0x924>)
 800bf6e:	0006      	movs	r6, r0
 800bf70:	000f      	movs	r7, r1
 800bf72:	420b      	tst	r3, r1
 800bf74:	d000      	beq.n	800bf78 <_strtod_l+0x874>
 800bf76:	e631      	b.n	800bbdc <_strtod_l+0x4d8>
 800bf78:	2322      	movs	r3, #34	; 0x22
 800bf7a:	9a04      	ldr	r2, [sp, #16]
 800bf7c:	6013      	str	r3, [r2, #0]
 800bf7e:	e62d      	b.n	800bbdc <_strtod_l+0x4d8>
 800bf80:	234b      	movs	r3, #75	; 0x4b
 800bf82:	1a9a      	subs	r2, r3, r2
 800bf84:	3b4c      	subs	r3, #76	; 0x4c
 800bf86:	4093      	lsls	r3, r2
 800bf88:	4019      	ands	r1, r3
 800bf8a:	000f      	movs	r7, r1
 800bf8c:	e6e3      	b.n	800bd56 <_strtod_l+0x652>
 800bf8e:	2201      	movs	r2, #1
 800bf90:	4252      	negs	r2, r2
 800bf92:	409a      	lsls	r2, r3
 800bf94:	4016      	ands	r6, r2
 800bf96:	e6de      	b.n	800bd56 <_strtod_l+0x652>
 800bf98:	4925      	ldr	r1, [pc, #148]	; (800c030 <_strtod_l+0x92c>)
 800bf9a:	1acb      	subs	r3, r1, r3
 800bf9c:	0001      	movs	r1, r0
 800bf9e:	4099      	lsls	r1, r3
 800bfa0:	9114      	str	r1, [sp, #80]	; 0x50
 800bfa2:	e743      	b.n	800be2c <_strtod_l+0x728>
 800bfa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfa6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bfa8:	9804      	ldr	r0, [sp, #16]
 800bfaa:	f003 f977 	bl	800f29c <__lshift>
 800bfae:	901c      	str	r0, [sp, #112]	; 0x70
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d000      	beq.n	800bfb6 <_strtod_l+0x8b2>
 800bfb4:	e76e      	b.n	800be94 <_strtod_l+0x790>
 800bfb6:	e608      	b.n	800bbca <_strtod_l+0x4c6>
 800bfb8:	970e      	str	r7, [sp, #56]	; 0x38
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d177      	bne.n	800c0ae <_strtod_l+0x9aa>
 800bfbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfc0:	033b      	lsls	r3, r7, #12
 800bfc2:	0b1b      	lsrs	r3, r3, #12
 800bfc4:	2a00      	cmp	r2, #0
 800bfc6:	d039      	beq.n	800c03c <_strtod_l+0x938>
 800bfc8:	4a1a      	ldr	r2, [pc, #104]	; (800c034 <_strtod_l+0x930>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d139      	bne.n	800c042 <_strtod_l+0x93e>
 800bfce:	2101      	movs	r1, #1
 800bfd0:	9b07      	ldr	r3, [sp, #28]
 800bfd2:	4249      	negs	r1, r1
 800bfd4:	0032      	movs	r2, r6
 800bfd6:	0008      	movs	r0, r1
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00b      	beq.n	800bff4 <_strtod_l+0x8f0>
 800bfdc:	24d4      	movs	r4, #212	; 0xd4
 800bfde:	4b12      	ldr	r3, [pc, #72]	; (800c028 <_strtod_l+0x924>)
 800bfe0:	0008      	movs	r0, r1
 800bfe2:	403b      	ands	r3, r7
 800bfe4:	04e4      	lsls	r4, r4, #19
 800bfe6:	42a3      	cmp	r3, r4
 800bfe8:	d804      	bhi.n	800bff4 <_strtod_l+0x8f0>
 800bfea:	306c      	adds	r0, #108	; 0x6c
 800bfec:	0d1b      	lsrs	r3, r3, #20
 800bfee:	1ac3      	subs	r3, r0, r3
 800bff0:	4099      	lsls	r1, r3
 800bff2:	0008      	movs	r0, r1
 800bff4:	4282      	cmp	r2, r0
 800bff6:	d124      	bne.n	800c042 <_strtod_l+0x93e>
 800bff8:	4b0f      	ldr	r3, [pc, #60]	; (800c038 <_strtod_l+0x934>)
 800bffa:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bffc:	4299      	cmp	r1, r3
 800bffe:	d102      	bne.n	800c006 <_strtod_l+0x902>
 800c000:	3201      	adds	r2, #1
 800c002:	d100      	bne.n	800c006 <_strtod_l+0x902>
 800c004:	e5e1      	b.n	800bbca <_strtod_l+0x4c6>
 800c006:	4b08      	ldr	r3, [pc, #32]	; (800c028 <_strtod_l+0x924>)
 800c008:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c00a:	2600      	movs	r6, #0
 800c00c:	401a      	ands	r2, r3
 800c00e:	0013      	movs	r3, r2
 800c010:	2280      	movs	r2, #128	; 0x80
 800c012:	0352      	lsls	r2, r2, #13
 800c014:	189f      	adds	r7, r3, r2
 800c016:	9b07      	ldr	r3, [sp, #28]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d1a1      	bne.n	800bf60 <_strtod_l+0x85c>
 800c01c:	e5de      	b.n	800bbdc <_strtod_l+0x4d8>
 800c01e:	46c0      	nop			; (mov r8, r8)
 800c020:	08010560 	.word	0x08010560
 800c024:	fffffc02 	.word	0xfffffc02
 800c028:	7ff00000 	.word	0x7ff00000
 800c02c:	39500000 	.word	0x39500000
 800c030:	fffffbe2 	.word	0xfffffbe2
 800c034:	000fffff 	.word	0x000fffff
 800c038:	7fefffff 	.word	0x7fefffff
 800c03c:	4333      	orrs	r3, r6
 800c03e:	d100      	bne.n	800c042 <_strtod_l+0x93e>
 800c040:	e77c      	b.n	800bf3c <_strtod_l+0x838>
 800c042:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c044:	2b00      	cmp	r3, #0
 800c046:	d01d      	beq.n	800c084 <_strtod_l+0x980>
 800c048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c04a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c04c:	4213      	tst	r3, r2
 800c04e:	d0e2      	beq.n	800c016 <_strtod_l+0x912>
 800c050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c052:	0030      	movs	r0, r6
 800c054:	0039      	movs	r1, r7
 800c056:	9a07      	ldr	r2, [sp, #28]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d017      	beq.n	800c08c <_strtod_l+0x988>
 800c05c:	f7ff fb3a 	bl	800b6d4 <sulp>
 800c060:	0002      	movs	r2, r0
 800c062:	000b      	movs	r3, r1
 800c064:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c066:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c068:	f7f5 fa14 	bl	8001494 <__aeabi_dadd>
 800c06c:	0006      	movs	r6, r0
 800c06e:	000f      	movs	r7, r1
 800c070:	e7d1      	b.n	800c016 <_strtod_l+0x912>
 800c072:	2601      	movs	r6, #1
 800c074:	4013      	ands	r3, r2
 800c076:	4a98      	ldr	r2, [pc, #608]	; (800c2d8 <_strtod_l+0xbd4>)
 800c078:	4276      	negs	r6, r6
 800c07a:	189b      	adds	r3, r3, r2
 800c07c:	4a97      	ldr	r2, [pc, #604]	; (800c2dc <_strtod_l+0xbd8>)
 800c07e:	431a      	orrs	r2, r3
 800c080:	0017      	movs	r7, r2
 800c082:	e7c8      	b.n	800c016 <_strtod_l+0x912>
 800c084:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c086:	4233      	tst	r3, r6
 800c088:	d0c5      	beq.n	800c016 <_strtod_l+0x912>
 800c08a:	e7e1      	b.n	800c050 <_strtod_l+0x94c>
 800c08c:	f7ff fb22 	bl	800b6d4 <sulp>
 800c090:	0002      	movs	r2, r0
 800c092:	000b      	movs	r3, r1
 800c094:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c096:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c098:	f7f6 fc18 	bl	80028cc <__aeabi_dsub>
 800c09c:	2200      	movs	r2, #0
 800c09e:	2300      	movs	r3, #0
 800c0a0:	0006      	movs	r6, r0
 800c0a2:	000f      	movs	r7, r1
 800c0a4:	f7f4 f9dc 	bl	8000460 <__aeabi_dcmpeq>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d0b4      	beq.n	800c016 <_strtod_l+0x912>
 800c0ac:	e600      	b.n	800bcb0 <_strtod_l+0x5ac>
 800c0ae:	9906      	ldr	r1, [sp, #24]
 800c0b0:	9805      	ldr	r0, [sp, #20]
 800c0b2:	f003 fadd 	bl	800f670 <__ratio>
 800c0b6:	2380      	movs	r3, #128	; 0x80
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	05db      	lsls	r3, r3, #23
 800c0bc:	0004      	movs	r4, r0
 800c0be:	000d      	movs	r5, r1
 800c0c0:	f7f4 f9de 	bl	8000480 <__aeabi_dcmple>
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	d06d      	beq.n	800c1a4 <_strtod_l+0xaa0>
 800c0c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d000      	beq.n	800c0d0 <_strtod_l+0x9cc>
 800c0ce:	e07e      	b.n	800c1ce <_strtod_l+0xaca>
 800c0d0:	2e00      	cmp	r6, #0
 800c0d2:	d158      	bne.n	800c186 <_strtod_l+0xa82>
 800c0d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0d6:	031b      	lsls	r3, r3, #12
 800c0d8:	d000      	beq.n	800c0dc <_strtod_l+0x9d8>
 800c0da:	e07f      	b.n	800c1dc <_strtod_l+0xad8>
 800c0dc:	2200      	movs	r2, #0
 800c0de:	0020      	movs	r0, r4
 800c0e0:	0029      	movs	r1, r5
 800c0e2:	4b7f      	ldr	r3, [pc, #508]	; (800c2e0 <_strtod_l+0xbdc>)
 800c0e4:	f7f4 f9c2 	bl	800046c <__aeabi_dcmplt>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d158      	bne.n	800c19e <_strtod_l+0xa9a>
 800c0ec:	0020      	movs	r0, r4
 800c0ee:	0029      	movs	r1, r5
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	4b7c      	ldr	r3, [pc, #496]	; (800c2e4 <_strtod_l+0xbe0>)
 800c0f4:	f7f6 f928 	bl	8002348 <__aeabi_dmul>
 800c0f8:	0004      	movs	r4, r0
 800c0fa:	000d      	movs	r5, r1
 800c0fc:	2380      	movs	r3, #128	; 0x80
 800c0fe:	061b      	lsls	r3, r3, #24
 800c100:	940a      	str	r4, [sp, #40]	; 0x28
 800c102:	18eb      	adds	r3, r5, r3
 800c104:	930b      	str	r3, [sp, #44]	; 0x2c
 800c106:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c10a:	9212      	str	r2, [sp, #72]	; 0x48
 800c10c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c10e:	4a76      	ldr	r2, [pc, #472]	; (800c2e8 <_strtod_l+0xbe4>)
 800c110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c112:	4013      	ands	r3, r2
 800c114:	9314      	str	r3, [sp, #80]	; 0x50
 800c116:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c118:	4b74      	ldr	r3, [pc, #464]	; (800c2ec <_strtod_l+0xbe8>)
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d000      	beq.n	800c120 <_strtod_l+0xa1c>
 800c11e:	e091      	b.n	800c244 <_strtod_l+0xb40>
 800c120:	4a73      	ldr	r2, [pc, #460]	; (800c2f0 <_strtod_l+0xbec>)
 800c122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c124:	4694      	mov	ip, r2
 800c126:	4463      	add	r3, ip
 800c128:	001f      	movs	r7, r3
 800c12a:	0030      	movs	r0, r6
 800c12c:	0019      	movs	r1, r3
 800c12e:	f003 f9d7 	bl	800f4e0 <__ulp>
 800c132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c136:	f7f6 f907 	bl	8002348 <__aeabi_dmul>
 800c13a:	0032      	movs	r2, r6
 800c13c:	003b      	movs	r3, r7
 800c13e:	f7f5 f9a9 	bl	8001494 <__aeabi_dadd>
 800c142:	4a69      	ldr	r2, [pc, #420]	; (800c2e8 <_strtod_l+0xbe4>)
 800c144:	4b6b      	ldr	r3, [pc, #428]	; (800c2f4 <_strtod_l+0xbf0>)
 800c146:	0006      	movs	r6, r0
 800c148:	400a      	ands	r2, r1
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d949      	bls.n	800c1e2 <_strtod_l+0xade>
 800c14e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c150:	4b69      	ldr	r3, [pc, #420]	; (800c2f8 <_strtod_l+0xbf4>)
 800c152:	429a      	cmp	r2, r3
 800c154:	d103      	bne.n	800c15e <_strtod_l+0xa5a>
 800c156:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c158:	3301      	adds	r3, #1
 800c15a:	d100      	bne.n	800c15e <_strtod_l+0xa5a>
 800c15c:	e535      	b.n	800bbca <_strtod_l+0x4c6>
 800c15e:	2601      	movs	r6, #1
 800c160:	4f65      	ldr	r7, [pc, #404]	; (800c2f8 <_strtod_l+0xbf4>)
 800c162:	4276      	negs	r6, r6
 800c164:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c166:	9804      	ldr	r0, [sp, #16]
 800c168:	f002 fe78 	bl	800ee5c <_Bfree>
 800c16c:	9908      	ldr	r1, [sp, #32]
 800c16e:	9804      	ldr	r0, [sp, #16]
 800c170:	f002 fe74 	bl	800ee5c <_Bfree>
 800c174:	9906      	ldr	r1, [sp, #24]
 800c176:	9804      	ldr	r0, [sp, #16]
 800c178:	f002 fe70 	bl	800ee5c <_Bfree>
 800c17c:	9905      	ldr	r1, [sp, #20]
 800c17e:	9804      	ldr	r0, [sp, #16]
 800c180:	f002 fe6c 	bl	800ee5c <_Bfree>
 800c184:	e60b      	b.n	800bd9e <_strtod_l+0x69a>
 800c186:	2e01      	cmp	r6, #1
 800c188:	d103      	bne.n	800c192 <_strtod_l+0xa8e>
 800c18a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d100      	bne.n	800c192 <_strtod_l+0xa8e>
 800c190:	e58e      	b.n	800bcb0 <_strtod_l+0x5ac>
 800c192:	2300      	movs	r3, #0
 800c194:	4c59      	ldr	r4, [pc, #356]	; (800c2fc <_strtod_l+0xbf8>)
 800c196:	930a      	str	r3, [sp, #40]	; 0x28
 800c198:	940b      	str	r4, [sp, #44]	; 0x2c
 800c19a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c19c:	e01c      	b.n	800c1d8 <_strtod_l+0xad4>
 800c19e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c1a0:	4d50      	ldr	r5, [pc, #320]	; (800c2e4 <_strtod_l+0xbe0>)
 800c1a2:	e7ab      	b.n	800c0fc <_strtod_l+0x9f8>
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	0020      	movs	r0, r4
 800c1a8:	0029      	movs	r1, r5
 800c1aa:	4b4e      	ldr	r3, [pc, #312]	; (800c2e4 <_strtod_l+0xbe0>)
 800c1ac:	f7f6 f8cc 	bl	8002348 <__aeabi_dmul>
 800c1b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1b2:	0004      	movs	r4, r0
 800c1b4:	000b      	movs	r3, r1
 800c1b6:	000d      	movs	r5, r1
 800c1b8:	2a00      	cmp	r2, #0
 800c1ba:	d104      	bne.n	800c1c6 <_strtod_l+0xac2>
 800c1bc:	2280      	movs	r2, #128	; 0x80
 800c1be:	0612      	lsls	r2, r2, #24
 800c1c0:	900a      	str	r0, [sp, #40]	; 0x28
 800c1c2:	188b      	adds	r3, r1, r2
 800c1c4:	e79e      	b.n	800c104 <_strtod_l+0xa00>
 800c1c6:	0002      	movs	r2, r0
 800c1c8:	920a      	str	r2, [sp, #40]	; 0x28
 800c1ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1cc:	e79b      	b.n	800c106 <_strtod_l+0xa02>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	4c43      	ldr	r4, [pc, #268]	; (800c2e0 <_strtod_l+0xbdc>)
 800c1d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c1d4:	940b      	str	r4, [sp, #44]	; 0x2c
 800c1d6:	2400      	movs	r4, #0
 800c1d8:	4d41      	ldr	r5, [pc, #260]	; (800c2e0 <_strtod_l+0xbdc>)
 800c1da:	e794      	b.n	800c106 <_strtod_l+0xa02>
 800c1dc:	2300      	movs	r3, #0
 800c1de:	4c47      	ldr	r4, [pc, #284]	; (800c2fc <_strtod_l+0xbf8>)
 800c1e0:	e7f7      	b.n	800c1d2 <_strtod_l+0xace>
 800c1e2:	23d4      	movs	r3, #212	; 0xd4
 800c1e4:	049b      	lsls	r3, r3, #18
 800c1e6:	18cf      	adds	r7, r1, r3
 800c1e8:	9b07      	ldr	r3, [sp, #28]
 800c1ea:	970e      	str	r7, [sp, #56]	; 0x38
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d1b9      	bne.n	800c164 <_strtod_l+0xa60>
 800c1f0:	4b3d      	ldr	r3, [pc, #244]	; (800c2e8 <_strtod_l+0xbe4>)
 800c1f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c1f4:	403b      	ands	r3, r7
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d1b4      	bne.n	800c164 <_strtod_l+0xa60>
 800c1fa:	0020      	movs	r0, r4
 800c1fc:	0029      	movs	r1, r5
 800c1fe:	f7f4 f9c9 	bl	8000594 <__aeabi_d2lz>
 800c202:	f7f4 fa03 	bl	800060c <__aeabi_l2d>
 800c206:	0002      	movs	r2, r0
 800c208:	000b      	movs	r3, r1
 800c20a:	0020      	movs	r0, r4
 800c20c:	0029      	movs	r1, r5
 800c20e:	f7f6 fb5d 	bl	80028cc <__aeabi_dsub>
 800c212:	033b      	lsls	r3, r7, #12
 800c214:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c216:	0b1b      	lsrs	r3, r3, #12
 800c218:	4333      	orrs	r3, r6
 800c21a:	4313      	orrs	r3, r2
 800c21c:	0004      	movs	r4, r0
 800c21e:	000d      	movs	r5, r1
 800c220:	4a37      	ldr	r2, [pc, #220]	; (800c300 <_strtod_l+0xbfc>)
 800c222:	2b00      	cmp	r3, #0
 800c224:	d054      	beq.n	800c2d0 <_strtod_l+0xbcc>
 800c226:	4b37      	ldr	r3, [pc, #220]	; (800c304 <_strtod_l+0xc00>)
 800c228:	f7f4 f920 	bl	800046c <__aeabi_dcmplt>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d000      	beq.n	800c232 <_strtod_l+0xb2e>
 800c230:	e4d4      	b.n	800bbdc <_strtod_l+0x4d8>
 800c232:	0020      	movs	r0, r4
 800c234:	0029      	movs	r1, r5
 800c236:	4a34      	ldr	r2, [pc, #208]	; (800c308 <_strtod_l+0xc04>)
 800c238:	4b2a      	ldr	r3, [pc, #168]	; (800c2e4 <_strtod_l+0xbe0>)
 800c23a:	f7f4 f92b 	bl	8000494 <__aeabi_dcmpgt>
 800c23e:	2800      	cmp	r0, #0
 800c240:	d090      	beq.n	800c164 <_strtod_l+0xa60>
 800c242:	e4cb      	b.n	800bbdc <_strtod_l+0x4d8>
 800c244:	9b07      	ldr	r3, [sp, #28]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d02b      	beq.n	800c2a2 <_strtod_l+0xb9e>
 800c24a:	23d4      	movs	r3, #212	; 0xd4
 800c24c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c24e:	04db      	lsls	r3, r3, #19
 800c250:	429a      	cmp	r2, r3
 800c252:	d826      	bhi.n	800c2a2 <_strtod_l+0xb9e>
 800c254:	0020      	movs	r0, r4
 800c256:	0029      	movs	r1, r5
 800c258:	4a2c      	ldr	r2, [pc, #176]	; (800c30c <_strtod_l+0xc08>)
 800c25a:	4b2d      	ldr	r3, [pc, #180]	; (800c310 <_strtod_l+0xc0c>)
 800c25c:	f7f4 f910 	bl	8000480 <__aeabi_dcmple>
 800c260:	2800      	cmp	r0, #0
 800c262:	d017      	beq.n	800c294 <_strtod_l+0xb90>
 800c264:	0020      	movs	r0, r4
 800c266:	0029      	movs	r1, r5
 800c268:	f7f4 f976 	bl	8000558 <__aeabi_d2uiz>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d100      	bne.n	800c272 <_strtod_l+0xb6e>
 800c270:	3001      	adds	r0, #1
 800c272:	f7f6 ff31 	bl	80030d8 <__aeabi_ui2d>
 800c276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c278:	0004      	movs	r4, r0
 800c27a:	000b      	movs	r3, r1
 800c27c:	000d      	movs	r5, r1
 800c27e:	2a00      	cmp	r2, #0
 800c280:	d122      	bne.n	800c2c8 <_strtod_l+0xbc4>
 800c282:	2280      	movs	r2, #128	; 0x80
 800c284:	0612      	lsls	r2, r2, #24
 800c286:	188b      	adds	r3, r1, r2
 800c288:	9016      	str	r0, [sp, #88]	; 0x58
 800c28a:	9317      	str	r3, [sp, #92]	; 0x5c
 800c28c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c28e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c290:	9212      	str	r2, [sp, #72]	; 0x48
 800c292:	9313      	str	r3, [sp, #76]	; 0x4c
 800c294:	22d6      	movs	r2, #214	; 0xd6
 800c296:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c298:	04d2      	lsls	r2, r2, #19
 800c29a:	189b      	adds	r3, r3, r2
 800c29c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c29e:	1a9b      	subs	r3, r3, r2
 800c2a0:	9313      	str	r3, [sp, #76]	; 0x4c
 800c2a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c2a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c2a6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c2a8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800c2aa:	f003 f919 	bl	800f4e0 <__ulp>
 800c2ae:	0002      	movs	r2, r0
 800c2b0:	000b      	movs	r3, r1
 800c2b2:	0030      	movs	r0, r6
 800c2b4:	0039      	movs	r1, r7
 800c2b6:	f7f6 f847 	bl	8002348 <__aeabi_dmul>
 800c2ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c2bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2be:	f7f5 f8e9 	bl	8001494 <__aeabi_dadd>
 800c2c2:	0006      	movs	r6, r0
 800c2c4:	000f      	movs	r7, r1
 800c2c6:	e78f      	b.n	800c1e8 <_strtod_l+0xae4>
 800c2c8:	0002      	movs	r2, r0
 800c2ca:	9216      	str	r2, [sp, #88]	; 0x58
 800c2cc:	9317      	str	r3, [sp, #92]	; 0x5c
 800c2ce:	e7dd      	b.n	800c28c <_strtod_l+0xb88>
 800c2d0:	4b10      	ldr	r3, [pc, #64]	; (800c314 <_strtod_l+0xc10>)
 800c2d2:	f7f4 f8cb 	bl	800046c <__aeabi_dcmplt>
 800c2d6:	e7b2      	b.n	800c23e <_strtod_l+0xb3a>
 800c2d8:	fff00000 	.word	0xfff00000
 800c2dc:	000fffff 	.word	0x000fffff
 800c2e0:	3ff00000 	.word	0x3ff00000
 800c2e4:	3fe00000 	.word	0x3fe00000
 800c2e8:	7ff00000 	.word	0x7ff00000
 800c2ec:	7fe00000 	.word	0x7fe00000
 800c2f0:	fcb00000 	.word	0xfcb00000
 800c2f4:	7c9fffff 	.word	0x7c9fffff
 800c2f8:	7fefffff 	.word	0x7fefffff
 800c2fc:	bff00000 	.word	0xbff00000
 800c300:	94a03595 	.word	0x94a03595
 800c304:	3fdfffff 	.word	0x3fdfffff
 800c308:	35afe535 	.word	0x35afe535
 800c30c:	ffc00000 	.word	0xffc00000
 800c310:	41dfffff 	.word	0x41dfffff
 800c314:	3fcfffff 	.word	0x3fcfffff

0800c318 <_strtod_r>:
 800c318:	b510      	push	{r4, lr}
 800c31a:	4b02      	ldr	r3, [pc, #8]	; (800c324 <_strtod_r+0xc>)
 800c31c:	f7ff f9f2 	bl	800b704 <_strtod_l>
 800c320:	bd10      	pop	{r4, pc}
 800c322:	46c0      	nop			; (mov r8, r8)
 800c324:	20000018 	.word	0x20000018

0800c328 <strtod>:
 800c328:	b510      	push	{r4, lr}
 800c32a:	4c04      	ldr	r4, [pc, #16]	; (800c33c <strtod+0x14>)
 800c32c:	000a      	movs	r2, r1
 800c32e:	0001      	movs	r1, r0
 800c330:	4b03      	ldr	r3, [pc, #12]	; (800c340 <strtod+0x18>)
 800c332:	6820      	ldr	r0, [r4, #0]
 800c334:	f7ff f9e6 	bl	800b704 <_strtod_l>
 800c338:	bd10      	pop	{r4, pc}
 800c33a:	46c0      	nop			; (mov r8, r8)
 800c33c:	200001d0 	.word	0x200001d0
 800c340:	20000018 	.word	0x20000018

0800c344 <_strtol_l.constprop.0>:
 800c344:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c346:	b087      	sub	sp, #28
 800c348:	001e      	movs	r6, r3
 800c34a:	9005      	str	r0, [sp, #20]
 800c34c:	9101      	str	r1, [sp, #4]
 800c34e:	9202      	str	r2, [sp, #8]
 800c350:	2b01      	cmp	r3, #1
 800c352:	d048      	beq.n	800c3e6 <_strtol_l.constprop.0+0xa2>
 800c354:	000b      	movs	r3, r1
 800c356:	2e24      	cmp	r6, #36	; 0x24
 800c358:	d845      	bhi.n	800c3e6 <_strtol_l.constprop.0+0xa2>
 800c35a:	4a3b      	ldr	r2, [pc, #236]	; (800c448 <_strtol_l.constprop.0+0x104>)
 800c35c:	2108      	movs	r1, #8
 800c35e:	4694      	mov	ip, r2
 800c360:	001a      	movs	r2, r3
 800c362:	4660      	mov	r0, ip
 800c364:	7814      	ldrb	r4, [r2, #0]
 800c366:	3301      	adds	r3, #1
 800c368:	5d00      	ldrb	r0, [r0, r4]
 800c36a:	001d      	movs	r5, r3
 800c36c:	0007      	movs	r7, r0
 800c36e:	400f      	ands	r7, r1
 800c370:	4208      	tst	r0, r1
 800c372:	d1f5      	bne.n	800c360 <_strtol_l.constprop.0+0x1c>
 800c374:	2c2d      	cmp	r4, #45	; 0x2d
 800c376:	d13d      	bne.n	800c3f4 <_strtol_l.constprop.0+0xb0>
 800c378:	2701      	movs	r7, #1
 800c37a:	781c      	ldrb	r4, [r3, #0]
 800c37c:	1c95      	adds	r5, r2, #2
 800c37e:	2e00      	cmp	r6, #0
 800c380:	d05e      	beq.n	800c440 <_strtol_l.constprop.0+0xfc>
 800c382:	2e10      	cmp	r6, #16
 800c384:	d109      	bne.n	800c39a <_strtol_l.constprop.0+0x56>
 800c386:	2c30      	cmp	r4, #48	; 0x30
 800c388:	d107      	bne.n	800c39a <_strtol_l.constprop.0+0x56>
 800c38a:	2220      	movs	r2, #32
 800c38c:	782b      	ldrb	r3, [r5, #0]
 800c38e:	4393      	bics	r3, r2
 800c390:	2b58      	cmp	r3, #88	; 0x58
 800c392:	d150      	bne.n	800c436 <_strtol_l.constprop.0+0xf2>
 800c394:	2610      	movs	r6, #16
 800c396:	786c      	ldrb	r4, [r5, #1]
 800c398:	3502      	adds	r5, #2
 800c39a:	4b2c      	ldr	r3, [pc, #176]	; (800c44c <_strtol_l.constprop.0+0x108>)
 800c39c:	0031      	movs	r1, r6
 800c39e:	18fb      	adds	r3, r7, r3
 800c3a0:	0018      	movs	r0, r3
 800c3a2:	9303      	str	r3, [sp, #12]
 800c3a4:	f7f3 ff5c 	bl	8000260 <__aeabi_uidivmod>
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	9104      	str	r1, [sp, #16]
 800c3ac:	2101      	movs	r1, #1
 800c3ae:	4684      	mov	ip, r0
 800c3b0:	0010      	movs	r0, r2
 800c3b2:	4249      	negs	r1, r1
 800c3b4:	0023      	movs	r3, r4
 800c3b6:	3b30      	subs	r3, #48	; 0x30
 800c3b8:	2b09      	cmp	r3, #9
 800c3ba:	d903      	bls.n	800c3c4 <_strtol_l.constprop.0+0x80>
 800c3bc:	3b11      	subs	r3, #17
 800c3be:	2b19      	cmp	r3, #25
 800c3c0:	d81d      	bhi.n	800c3fe <_strtol_l.constprop.0+0xba>
 800c3c2:	330a      	adds	r3, #10
 800c3c4:	429e      	cmp	r6, r3
 800c3c6:	dd1e      	ble.n	800c406 <_strtol_l.constprop.0+0xc2>
 800c3c8:	1c54      	adds	r4, r2, #1
 800c3ca:	d009      	beq.n	800c3e0 <_strtol_l.constprop.0+0x9c>
 800c3cc:	000a      	movs	r2, r1
 800c3ce:	4584      	cmp	ip, r0
 800c3d0:	d306      	bcc.n	800c3e0 <_strtol_l.constprop.0+0x9c>
 800c3d2:	d102      	bne.n	800c3da <_strtol_l.constprop.0+0x96>
 800c3d4:	9c04      	ldr	r4, [sp, #16]
 800c3d6:	429c      	cmp	r4, r3
 800c3d8:	db02      	blt.n	800c3e0 <_strtol_l.constprop.0+0x9c>
 800c3da:	2201      	movs	r2, #1
 800c3dc:	4370      	muls	r0, r6
 800c3de:	1818      	adds	r0, r3, r0
 800c3e0:	782c      	ldrb	r4, [r5, #0]
 800c3e2:	3501      	adds	r5, #1
 800c3e4:	e7e6      	b.n	800c3b4 <_strtol_l.constprop.0+0x70>
 800c3e6:	f001 f995 	bl	800d714 <__errno>
 800c3ea:	2316      	movs	r3, #22
 800c3ec:	6003      	str	r3, [r0, #0]
 800c3ee:	2000      	movs	r0, #0
 800c3f0:	b007      	add	sp, #28
 800c3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3f4:	2c2b      	cmp	r4, #43	; 0x2b
 800c3f6:	d1c2      	bne.n	800c37e <_strtol_l.constprop.0+0x3a>
 800c3f8:	781c      	ldrb	r4, [r3, #0]
 800c3fa:	1c95      	adds	r5, r2, #2
 800c3fc:	e7bf      	b.n	800c37e <_strtol_l.constprop.0+0x3a>
 800c3fe:	0023      	movs	r3, r4
 800c400:	3b61      	subs	r3, #97	; 0x61
 800c402:	2b19      	cmp	r3, #25
 800c404:	d9dd      	bls.n	800c3c2 <_strtol_l.constprop.0+0x7e>
 800c406:	1c53      	adds	r3, r2, #1
 800c408:	d109      	bne.n	800c41e <_strtol_l.constprop.0+0xda>
 800c40a:	2322      	movs	r3, #34	; 0x22
 800c40c:	9a05      	ldr	r2, [sp, #20]
 800c40e:	9803      	ldr	r0, [sp, #12]
 800c410:	6013      	str	r3, [r2, #0]
 800c412:	9b02      	ldr	r3, [sp, #8]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d0eb      	beq.n	800c3f0 <_strtol_l.constprop.0+0xac>
 800c418:	1e6b      	subs	r3, r5, #1
 800c41a:	9301      	str	r3, [sp, #4]
 800c41c:	e007      	b.n	800c42e <_strtol_l.constprop.0+0xea>
 800c41e:	2f00      	cmp	r7, #0
 800c420:	d000      	beq.n	800c424 <_strtol_l.constprop.0+0xe0>
 800c422:	4240      	negs	r0, r0
 800c424:	9b02      	ldr	r3, [sp, #8]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d0e2      	beq.n	800c3f0 <_strtol_l.constprop.0+0xac>
 800c42a:	2a00      	cmp	r2, #0
 800c42c:	d1f4      	bne.n	800c418 <_strtol_l.constprop.0+0xd4>
 800c42e:	9b02      	ldr	r3, [sp, #8]
 800c430:	9a01      	ldr	r2, [sp, #4]
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	e7dc      	b.n	800c3f0 <_strtol_l.constprop.0+0xac>
 800c436:	2430      	movs	r4, #48	; 0x30
 800c438:	2e00      	cmp	r6, #0
 800c43a:	d1ae      	bne.n	800c39a <_strtol_l.constprop.0+0x56>
 800c43c:	3608      	adds	r6, #8
 800c43e:	e7ac      	b.n	800c39a <_strtol_l.constprop.0+0x56>
 800c440:	2c30      	cmp	r4, #48	; 0x30
 800c442:	d0a2      	beq.n	800c38a <_strtol_l.constprop.0+0x46>
 800c444:	260a      	movs	r6, #10
 800c446:	e7a8      	b.n	800c39a <_strtol_l.constprop.0+0x56>
 800c448:	08010589 	.word	0x08010589
 800c44c:	7fffffff 	.word	0x7fffffff

0800c450 <_strtol_r>:
 800c450:	b510      	push	{r4, lr}
 800c452:	f7ff ff77 	bl	800c344 <_strtol_l.constprop.0>
 800c456:	bd10      	pop	{r4, pc}

0800c458 <strtol>:
 800c458:	b510      	push	{r4, lr}
 800c45a:	4c04      	ldr	r4, [pc, #16]	; (800c46c <strtol+0x14>)
 800c45c:	0013      	movs	r3, r2
 800c45e:	000a      	movs	r2, r1
 800c460:	0001      	movs	r1, r0
 800c462:	6820      	ldr	r0, [r4, #0]
 800c464:	f7ff ff6e 	bl	800c344 <_strtol_l.constprop.0>
 800c468:	bd10      	pop	{r4, pc}
 800c46a:	46c0      	nop			; (mov r8, r8)
 800c46c:	200001d0 	.word	0x200001d0

0800c470 <__cvt>:
 800c470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c472:	001e      	movs	r6, r3
 800c474:	2300      	movs	r3, #0
 800c476:	0014      	movs	r4, r2
 800c478:	b08b      	sub	sp, #44	; 0x2c
 800c47a:	429e      	cmp	r6, r3
 800c47c:	da04      	bge.n	800c488 <__cvt+0x18>
 800c47e:	2180      	movs	r1, #128	; 0x80
 800c480:	0609      	lsls	r1, r1, #24
 800c482:	1873      	adds	r3, r6, r1
 800c484:	001e      	movs	r6, r3
 800c486:	232d      	movs	r3, #45	; 0x2d
 800c488:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c48a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c48c:	7013      	strb	r3, [r2, #0]
 800c48e:	2320      	movs	r3, #32
 800c490:	2203      	movs	r2, #3
 800c492:	439f      	bics	r7, r3
 800c494:	2f46      	cmp	r7, #70	; 0x46
 800c496:	d007      	beq.n	800c4a8 <__cvt+0x38>
 800c498:	003b      	movs	r3, r7
 800c49a:	3b45      	subs	r3, #69	; 0x45
 800c49c:	4259      	negs	r1, r3
 800c49e:	414b      	adcs	r3, r1
 800c4a0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c4a2:	3a01      	subs	r2, #1
 800c4a4:	18cb      	adds	r3, r1, r3
 800c4a6:	9310      	str	r3, [sp, #64]	; 0x40
 800c4a8:	ab09      	add	r3, sp, #36	; 0x24
 800c4aa:	9304      	str	r3, [sp, #16]
 800c4ac:	ab08      	add	r3, sp, #32
 800c4ae:	9303      	str	r3, [sp, #12]
 800c4b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c4b2:	9200      	str	r2, [sp, #0]
 800c4b4:	9302      	str	r3, [sp, #8]
 800c4b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4b8:	0022      	movs	r2, r4
 800c4ba:	9301      	str	r3, [sp, #4]
 800c4bc:	0033      	movs	r3, r6
 800c4be:	f001 fa05 	bl	800d8cc <_dtoa_r>
 800c4c2:	0005      	movs	r5, r0
 800c4c4:	2f47      	cmp	r7, #71	; 0x47
 800c4c6:	d102      	bne.n	800c4ce <__cvt+0x5e>
 800c4c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4ca:	07db      	lsls	r3, r3, #31
 800c4cc:	d528      	bpl.n	800c520 <__cvt+0xb0>
 800c4ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4d0:	18eb      	adds	r3, r5, r3
 800c4d2:	9307      	str	r3, [sp, #28]
 800c4d4:	2f46      	cmp	r7, #70	; 0x46
 800c4d6:	d114      	bne.n	800c502 <__cvt+0x92>
 800c4d8:	782b      	ldrb	r3, [r5, #0]
 800c4da:	2b30      	cmp	r3, #48	; 0x30
 800c4dc:	d10c      	bne.n	800c4f8 <__cvt+0x88>
 800c4de:	2200      	movs	r2, #0
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	0020      	movs	r0, r4
 800c4e4:	0031      	movs	r1, r6
 800c4e6:	f7f3 ffbb 	bl	8000460 <__aeabi_dcmpeq>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	d104      	bne.n	800c4f8 <__cvt+0x88>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4f2:	1a9b      	subs	r3, r3, r2
 800c4f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c4f6:	6013      	str	r3, [r2, #0]
 800c4f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c4fa:	9a07      	ldr	r2, [sp, #28]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	18d3      	adds	r3, r2, r3
 800c500:	9307      	str	r3, [sp, #28]
 800c502:	2200      	movs	r2, #0
 800c504:	2300      	movs	r3, #0
 800c506:	0020      	movs	r0, r4
 800c508:	0031      	movs	r1, r6
 800c50a:	f7f3 ffa9 	bl	8000460 <__aeabi_dcmpeq>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d001      	beq.n	800c516 <__cvt+0xa6>
 800c512:	9b07      	ldr	r3, [sp, #28]
 800c514:	9309      	str	r3, [sp, #36]	; 0x24
 800c516:	2230      	movs	r2, #48	; 0x30
 800c518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c51a:	9907      	ldr	r1, [sp, #28]
 800c51c:	428b      	cmp	r3, r1
 800c51e:	d306      	bcc.n	800c52e <__cvt+0xbe>
 800c520:	0028      	movs	r0, r5
 800c522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c524:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c526:	1b5b      	subs	r3, r3, r5
 800c528:	6013      	str	r3, [r2, #0]
 800c52a:	b00b      	add	sp, #44	; 0x2c
 800c52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c52e:	1c59      	adds	r1, r3, #1
 800c530:	9109      	str	r1, [sp, #36]	; 0x24
 800c532:	701a      	strb	r2, [r3, #0]
 800c534:	e7f0      	b.n	800c518 <__cvt+0xa8>

0800c536 <__exponent>:
 800c536:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c538:	1c83      	adds	r3, r0, #2
 800c53a:	b087      	sub	sp, #28
 800c53c:	9303      	str	r3, [sp, #12]
 800c53e:	0005      	movs	r5, r0
 800c540:	000c      	movs	r4, r1
 800c542:	232b      	movs	r3, #43	; 0x2b
 800c544:	7002      	strb	r2, [r0, #0]
 800c546:	2900      	cmp	r1, #0
 800c548:	da01      	bge.n	800c54e <__exponent+0x18>
 800c54a:	424c      	negs	r4, r1
 800c54c:	3302      	adds	r3, #2
 800c54e:	706b      	strb	r3, [r5, #1]
 800c550:	2c09      	cmp	r4, #9
 800c552:	dd2f      	ble.n	800c5b4 <__exponent+0x7e>
 800c554:	270a      	movs	r7, #10
 800c556:	ab04      	add	r3, sp, #16
 800c558:	1dde      	adds	r6, r3, #7
 800c55a:	0020      	movs	r0, r4
 800c55c:	0039      	movs	r1, r7
 800c55e:	9601      	str	r6, [sp, #4]
 800c560:	f7f3 ff68 	bl	8000434 <__aeabi_idivmod>
 800c564:	3e01      	subs	r6, #1
 800c566:	3130      	adds	r1, #48	; 0x30
 800c568:	0020      	movs	r0, r4
 800c56a:	7031      	strb	r1, [r6, #0]
 800c56c:	0039      	movs	r1, r7
 800c56e:	9402      	str	r4, [sp, #8]
 800c570:	f7f3 fe7a 	bl	8000268 <__divsi3>
 800c574:	9b02      	ldr	r3, [sp, #8]
 800c576:	0004      	movs	r4, r0
 800c578:	2b63      	cmp	r3, #99	; 0x63
 800c57a:	dcee      	bgt.n	800c55a <__exponent+0x24>
 800c57c:	9b01      	ldr	r3, [sp, #4]
 800c57e:	3430      	adds	r4, #48	; 0x30
 800c580:	1e9a      	subs	r2, r3, #2
 800c582:	0013      	movs	r3, r2
 800c584:	9903      	ldr	r1, [sp, #12]
 800c586:	7014      	strb	r4, [r2, #0]
 800c588:	a804      	add	r0, sp, #16
 800c58a:	3007      	adds	r0, #7
 800c58c:	4298      	cmp	r0, r3
 800c58e:	d80c      	bhi.n	800c5aa <__exponent+0x74>
 800c590:	2300      	movs	r3, #0
 800c592:	4282      	cmp	r2, r0
 800c594:	d804      	bhi.n	800c5a0 <__exponent+0x6a>
 800c596:	aa04      	add	r2, sp, #16
 800c598:	3309      	adds	r3, #9
 800c59a:	189b      	adds	r3, r3, r2
 800c59c:	9a01      	ldr	r2, [sp, #4]
 800c59e:	1a9b      	subs	r3, r3, r2
 800c5a0:	9a03      	ldr	r2, [sp, #12]
 800c5a2:	18d3      	adds	r3, r2, r3
 800c5a4:	1b58      	subs	r0, r3, r5
 800c5a6:	b007      	add	sp, #28
 800c5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5aa:	7818      	ldrb	r0, [r3, #0]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	7008      	strb	r0, [r1, #0]
 800c5b0:	3101      	adds	r1, #1
 800c5b2:	e7e9      	b.n	800c588 <__exponent+0x52>
 800c5b4:	2330      	movs	r3, #48	; 0x30
 800c5b6:	3430      	adds	r4, #48	; 0x30
 800c5b8:	70ab      	strb	r3, [r5, #2]
 800c5ba:	70ec      	strb	r4, [r5, #3]
 800c5bc:	1d2b      	adds	r3, r5, #4
 800c5be:	e7f1      	b.n	800c5a4 <__exponent+0x6e>

0800c5c0 <_printf_float>:
 800c5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5c2:	b095      	sub	sp, #84	; 0x54
 800c5c4:	000c      	movs	r4, r1
 800c5c6:	9208      	str	r2, [sp, #32]
 800c5c8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c5ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c5cc:	0007      	movs	r7, r0
 800c5ce:	f001 f84f 	bl	800d670 <_localeconv_r>
 800c5d2:	6803      	ldr	r3, [r0, #0]
 800c5d4:	0018      	movs	r0, r3
 800c5d6:	930c      	str	r3, [sp, #48]	; 0x30
 800c5d8:	f7f3 fda0 	bl	800011c <strlen>
 800c5dc:	2300      	movs	r3, #0
 800c5de:	9312      	str	r3, [sp, #72]	; 0x48
 800c5e0:	7e23      	ldrb	r3, [r4, #24]
 800c5e2:	2207      	movs	r2, #7
 800c5e4:	930a      	str	r3, [sp, #40]	; 0x28
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	900d      	str	r0, [sp, #52]	; 0x34
 800c5ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c5ee:	682b      	ldr	r3, [r5, #0]
 800c5f0:	05c9      	lsls	r1, r1, #23
 800c5f2:	d547      	bpl.n	800c684 <_printf_float+0xc4>
 800c5f4:	189b      	adds	r3, r3, r2
 800c5f6:	4393      	bics	r3, r2
 800c5f8:	001a      	movs	r2, r3
 800c5fa:	3208      	adds	r2, #8
 800c5fc:	602a      	str	r2, [r5, #0]
 800c5fe:	681e      	ldr	r6, [r3, #0]
 800c600:	685d      	ldr	r5, [r3, #4]
 800c602:	0032      	movs	r2, r6
 800c604:	002b      	movs	r3, r5
 800c606:	64a2      	str	r2, [r4, #72]	; 0x48
 800c608:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c60a:	2201      	movs	r2, #1
 800c60c:	006b      	lsls	r3, r5, #1
 800c60e:	085b      	lsrs	r3, r3, #1
 800c610:	930e      	str	r3, [sp, #56]	; 0x38
 800c612:	0030      	movs	r0, r6
 800c614:	4bab      	ldr	r3, [pc, #684]	; (800c8c4 <_printf_float+0x304>)
 800c616:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c618:	4252      	negs	r2, r2
 800c61a:	f7f6 fcd9 	bl	8002fd0 <__aeabi_dcmpun>
 800c61e:	2800      	cmp	r0, #0
 800c620:	d132      	bne.n	800c688 <_printf_float+0xc8>
 800c622:	2201      	movs	r2, #1
 800c624:	0030      	movs	r0, r6
 800c626:	4ba7      	ldr	r3, [pc, #668]	; (800c8c4 <_printf_float+0x304>)
 800c628:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c62a:	4252      	negs	r2, r2
 800c62c:	f7f3 ff28 	bl	8000480 <__aeabi_dcmple>
 800c630:	2800      	cmp	r0, #0
 800c632:	d129      	bne.n	800c688 <_printf_float+0xc8>
 800c634:	2200      	movs	r2, #0
 800c636:	2300      	movs	r3, #0
 800c638:	0030      	movs	r0, r6
 800c63a:	0029      	movs	r1, r5
 800c63c:	f7f3 ff16 	bl	800046c <__aeabi_dcmplt>
 800c640:	2800      	cmp	r0, #0
 800c642:	d003      	beq.n	800c64c <_printf_float+0x8c>
 800c644:	0023      	movs	r3, r4
 800c646:	222d      	movs	r2, #45	; 0x2d
 800c648:	3343      	adds	r3, #67	; 0x43
 800c64a:	701a      	strb	r2, [r3, #0]
 800c64c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c64e:	4d9e      	ldr	r5, [pc, #632]	; (800c8c8 <_printf_float+0x308>)
 800c650:	2b47      	cmp	r3, #71	; 0x47
 800c652:	d900      	bls.n	800c656 <_printf_float+0x96>
 800c654:	4d9d      	ldr	r5, [pc, #628]	; (800c8cc <_printf_float+0x30c>)
 800c656:	2303      	movs	r3, #3
 800c658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c65a:	6123      	str	r3, [r4, #16]
 800c65c:	3301      	adds	r3, #1
 800c65e:	439a      	bics	r2, r3
 800c660:	2300      	movs	r3, #0
 800c662:	6022      	str	r2, [r4, #0]
 800c664:	930b      	str	r3, [sp, #44]	; 0x2c
 800c666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c668:	0021      	movs	r1, r4
 800c66a:	9300      	str	r3, [sp, #0]
 800c66c:	0038      	movs	r0, r7
 800c66e:	9b08      	ldr	r3, [sp, #32]
 800c670:	aa13      	add	r2, sp, #76	; 0x4c
 800c672:	f000 f9fb 	bl	800ca6c <_printf_common>
 800c676:	3001      	adds	r0, #1
 800c678:	d000      	beq.n	800c67c <_printf_float+0xbc>
 800c67a:	e0a3      	b.n	800c7c4 <_printf_float+0x204>
 800c67c:	2001      	movs	r0, #1
 800c67e:	4240      	negs	r0, r0
 800c680:	b015      	add	sp, #84	; 0x54
 800c682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c684:	3307      	adds	r3, #7
 800c686:	e7b6      	b.n	800c5f6 <_printf_float+0x36>
 800c688:	0032      	movs	r2, r6
 800c68a:	002b      	movs	r3, r5
 800c68c:	0030      	movs	r0, r6
 800c68e:	0029      	movs	r1, r5
 800c690:	f7f6 fc9e 	bl	8002fd0 <__aeabi_dcmpun>
 800c694:	2800      	cmp	r0, #0
 800c696:	d00b      	beq.n	800c6b0 <_printf_float+0xf0>
 800c698:	2d00      	cmp	r5, #0
 800c69a:	da03      	bge.n	800c6a4 <_printf_float+0xe4>
 800c69c:	0023      	movs	r3, r4
 800c69e:	222d      	movs	r2, #45	; 0x2d
 800c6a0:	3343      	adds	r3, #67	; 0x43
 800c6a2:	701a      	strb	r2, [r3, #0]
 800c6a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6a6:	4d8a      	ldr	r5, [pc, #552]	; (800c8d0 <_printf_float+0x310>)
 800c6a8:	2b47      	cmp	r3, #71	; 0x47
 800c6aa:	d9d4      	bls.n	800c656 <_printf_float+0x96>
 800c6ac:	4d89      	ldr	r5, [pc, #548]	; (800c8d4 <_printf_float+0x314>)
 800c6ae:	e7d2      	b.n	800c656 <_printf_float+0x96>
 800c6b0:	2220      	movs	r2, #32
 800c6b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c6b4:	6863      	ldr	r3, [r4, #4]
 800c6b6:	4391      	bics	r1, r2
 800c6b8:	910e      	str	r1, [sp, #56]	; 0x38
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	d14a      	bne.n	800c754 <_printf_float+0x194>
 800c6be:	3307      	adds	r3, #7
 800c6c0:	6063      	str	r3, [r4, #4]
 800c6c2:	2380      	movs	r3, #128	; 0x80
 800c6c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c6c6:	00db      	lsls	r3, r3, #3
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	9206      	str	r2, [sp, #24]
 800c6ce:	aa12      	add	r2, sp, #72	; 0x48
 800c6d0:	9205      	str	r2, [sp, #20]
 800c6d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6d4:	6023      	str	r3, [r4, #0]
 800c6d6:	9204      	str	r2, [sp, #16]
 800c6d8:	aa11      	add	r2, sp, #68	; 0x44
 800c6da:	9203      	str	r2, [sp, #12]
 800c6dc:	2223      	movs	r2, #35	; 0x23
 800c6de:	a908      	add	r1, sp, #32
 800c6e0:	9301      	str	r3, [sp, #4]
 800c6e2:	6863      	ldr	r3, [r4, #4]
 800c6e4:	1852      	adds	r2, r2, r1
 800c6e6:	9202      	str	r2, [sp, #8]
 800c6e8:	9300      	str	r3, [sp, #0]
 800c6ea:	0032      	movs	r2, r6
 800c6ec:	002b      	movs	r3, r5
 800c6ee:	0038      	movs	r0, r7
 800c6f0:	f7ff febe 	bl	800c470 <__cvt>
 800c6f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6f6:	0005      	movs	r5, r0
 800c6f8:	2b47      	cmp	r3, #71	; 0x47
 800c6fa:	d109      	bne.n	800c710 <_printf_float+0x150>
 800c6fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6fe:	1cda      	adds	r2, r3, #3
 800c700:	db02      	blt.n	800c708 <_printf_float+0x148>
 800c702:	6862      	ldr	r2, [r4, #4]
 800c704:	4293      	cmp	r3, r2
 800c706:	dd49      	ble.n	800c79c <_printf_float+0x1dc>
 800c708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c70a:	3b02      	subs	r3, #2
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	930a      	str	r3, [sp, #40]	; 0x28
 800c710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c712:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c714:	2b65      	cmp	r3, #101	; 0x65
 800c716:	d824      	bhi.n	800c762 <_printf_float+0x1a2>
 800c718:	0020      	movs	r0, r4
 800c71a:	001a      	movs	r2, r3
 800c71c:	3901      	subs	r1, #1
 800c71e:	3050      	adds	r0, #80	; 0x50
 800c720:	9111      	str	r1, [sp, #68]	; 0x44
 800c722:	f7ff ff08 	bl	800c536 <__exponent>
 800c726:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c728:	900b      	str	r0, [sp, #44]	; 0x2c
 800c72a:	1813      	adds	r3, r2, r0
 800c72c:	6123      	str	r3, [r4, #16]
 800c72e:	2a01      	cmp	r2, #1
 800c730:	dc02      	bgt.n	800c738 <_printf_float+0x178>
 800c732:	6822      	ldr	r2, [r4, #0]
 800c734:	07d2      	lsls	r2, r2, #31
 800c736:	d501      	bpl.n	800c73c <_printf_float+0x17c>
 800c738:	3301      	adds	r3, #1
 800c73a:	6123      	str	r3, [r4, #16]
 800c73c:	2323      	movs	r3, #35	; 0x23
 800c73e:	aa08      	add	r2, sp, #32
 800c740:	189b      	adds	r3, r3, r2
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d100      	bne.n	800c74a <_printf_float+0x18a>
 800c748:	e78d      	b.n	800c666 <_printf_float+0xa6>
 800c74a:	0023      	movs	r3, r4
 800c74c:	222d      	movs	r2, #45	; 0x2d
 800c74e:	3343      	adds	r3, #67	; 0x43
 800c750:	701a      	strb	r2, [r3, #0]
 800c752:	e788      	b.n	800c666 <_printf_float+0xa6>
 800c754:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c756:	2a47      	cmp	r2, #71	; 0x47
 800c758:	d1b3      	bne.n	800c6c2 <_printf_float+0x102>
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d1b1      	bne.n	800c6c2 <_printf_float+0x102>
 800c75e:	3301      	adds	r3, #1
 800c760:	e7ae      	b.n	800c6c0 <_printf_float+0x100>
 800c762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c764:	2b66      	cmp	r3, #102	; 0x66
 800c766:	d11b      	bne.n	800c7a0 <_printf_float+0x1e0>
 800c768:	6863      	ldr	r3, [r4, #4]
 800c76a:	2900      	cmp	r1, #0
 800c76c:	dd09      	ble.n	800c782 <_printf_float+0x1c2>
 800c76e:	6121      	str	r1, [r4, #16]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d102      	bne.n	800c77a <_printf_float+0x1ba>
 800c774:	6822      	ldr	r2, [r4, #0]
 800c776:	07d2      	lsls	r2, r2, #31
 800c778:	d50b      	bpl.n	800c792 <_printf_float+0x1d2>
 800c77a:	3301      	adds	r3, #1
 800c77c:	185b      	adds	r3, r3, r1
 800c77e:	6123      	str	r3, [r4, #16]
 800c780:	e007      	b.n	800c792 <_printf_float+0x1d2>
 800c782:	2b00      	cmp	r3, #0
 800c784:	d103      	bne.n	800c78e <_printf_float+0x1ce>
 800c786:	2201      	movs	r2, #1
 800c788:	6821      	ldr	r1, [r4, #0]
 800c78a:	4211      	tst	r1, r2
 800c78c:	d000      	beq.n	800c790 <_printf_float+0x1d0>
 800c78e:	1c9a      	adds	r2, r3, #2
 800c790:	6122      	str	r2, [r4, #16]
 800c792:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c794:	65a3      	str	r3, [r4, #88]	; 0x58
 800c796:	2300      	movs	r3, #0
 800c798:	930b      	str	r3, [sp, #44]	; 0x2c
 800c79a:	e7cf      	b.n	800c73c <_printf_float+0x17c>
 800c79c:	2367      	movs	r3, #103	; 0x67
 800c79e:	930a      	str	r3, [sp, #40]	; 0x28
 800c7a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c7a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c7a4:	4299      	cmp	r1, r3
 800c7a6:	db06      	blt.n	800c7b6 <_printf_float+0x1f6>
 800c7a8:	6823      	ldr	r3, [r4, #0]
 800c7aa:	6121      	str	r1, [r4, #16]
 800c7ac:	07db      	lsls	r3, r3, #31
 800c7ae:	d5f0      	bpl.n	800c792 <_printf_float+0x1d2>
 800c7b0:	3101      	adds	r1, #1
 800c7b2:	6121      	str	r1, [r4, #16]
 800c7b4:	e7ed      	b.n	800c792 <_printf_float+0x1d2>
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	2900      	cmp	r1, #0
 800c7ba:	dc01      	bgt.n	800c7c0 <_printf_float+0x200>
 800c7bc:	1892      	adds	r2, r2, r2
 800c7be:	1a52      	subs	r2, r2, r1
 800c7c0:	189b      	adds	r3, r3, r2
 800c7c2:	e7dc      	b.n	800c77e <_printf_float+0x1be>
 800c7c4:	6822      	ldr	r2, [r4, #0]
 800c7c6:	0553      	lsls	r3, r2, #21
 800c7c8:	d408      	bmi.n	800c7dc <_printf_float+0x21c>
 800c7ca:	6923      	ldr	r3, [r4, #16]
 800c7cc:	002a      	movs	r2, r5
 800c7ce:	0038      	movs	r0, r7
 800c7d0:	9908      	ldr	r1, [sp, #32]
 800c7d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c7d4:	47a8      	blx	r5
 800c7d6:	3001      	adds	r0, #1
 800c7d8:	d12a      	bne.n	800c830 <_printf_float+0x270>
 800c7da:	e74f      	b.n	800c67c <_printf_float+0xbc>
 800c7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7de:	2b65      	cmp	r3, #101	; 0x65
 800c7e0:	d800      	bhi.n	800c7e4 <_printf_float+0x224>
 800c7e2:	e0ec      	b.n	800c9be <_printf_float+0x3fe>
 800c7e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c7e6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	f7f3 fe38 	bl	8000460 <__aeabi_dcmpeq>
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	d034      	beq.n	800c85e <_printf_float+0x29e>
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	0038      	movs	r0, r7
 800c7f8:	4a37      	ldr	r2, [pc, #220]	; (800c8d8 <_printf_float+0x318>)
 800c7fa:	9908      	ldr	r1, [sp, #32]
 800c7fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c7fe:	47a8      	blx	r5
 800c800:	3001      	adds	r0, #1
 800c802:	d100      	bne.n	800c806 <_printf_float+0x246>
 800c804:	e73a      	b.n	800c67c <_printf_float+0xbc>
 800c806:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c808:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c80a:	429a      	cmp	r2, r3
 800c80c:	db02      	blt.n	800c814 <_printf_float+0x254>
 800c80e:	6823      	ldr	r3, [r4, #0]
 800c810:	07db      	lsls	r3, r3, #31
 800c812:	d50d      	bpl.n	800c830 <_printf_float+0x270>
 800c814:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c816:	0038      	movs	r0, r7
 800c818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c81a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c81c:	9908      	ldr	r1, [sp, #32]
 800c81e:	47a8      	blx	r5
 800c820:	2500      	movs	r5, #0
 800c822:	3001      	adds	r0, #1
 800c824:	d100      	bne.n	800c828 <_printf_float+0x268>
 800c826:	e729      	b.n	800c67c <_printf_float+0xbc>
 800c828:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c82a:	3b01      	subs	r3, #1
 800c82c:	42ab      	cmp	r3, r5
 800c82e:	dc0a      	bgt.n	800c846 <_printf_float+0x286>
 800c830:	6823      	ldr	r3, [r4, #0]
 800c832:	079b      	lsls	r3, r3, #30
 800c834:	d500      	bpl.n	800c838 <_printf_float+0x278>
 800c836:	e116      	b.n	800ca66 <_printf_float+0x4a6>
 800c838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c83a:	68e0      	ldr	r0, [r4, #12]
 800c83c:	4298      	cmp	r0, r3
 800c83e:	db00      	blt.n	800c842 <_printf_float+0x282>
 800c840:	e71e      	b.n	800c680 <_printf_float+0xc0>
 800c842:	0018      	movs	r0, r3
 800c844:	e71c      	b.n	800c680 <_printf_float+0xc0>
 800c846:	0022      	movs	r2, r4
 800c848:	2301      	movs	r3, #1
 800c84a:	0038      	movs	r0, r7
 800c84c:	9908      	ldr	r1, [sp, #32]
 800c84e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c850:	321a      	adds	r2, #26
 800c852:	47b0      	blx	r6
 800c854:	3001      	adds	r0, #1
 800c856:	d100      	bne.n	800c85a <_printf_float+0x29a>
 800c858:	e710      	b.n	800c67c <_printf_float+0xbc>
 800c85a:	3501      	adds	r5, #1
 800c85c:	e7e4      	b.n	800c828 <_printf_float+0x268>
 800c85e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c860:	2b00      	cmp	r3, #0
 800c862:	dc3b      	bgt.n	800c8dc <_printf_float+0x31c>
 800c864:	2301      	movs	r3, #1
 800c866:	0038      	movs	r0, r7
 800c868:	4a1b      	ldr	r2, [pc, #108]	; (800c8d8 <_printf_float+0x318>)
 800c86a:	9908      	ldr	r1, [sp, #32]
 800c86c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c86e:	47b0      	blx	r6
 800c870:	3001      	adds	r0, #1
 800c872:	d100      	bne.n	800c876 <_printf_float+0x2b6>
 800c874:	e702      	b.n	800c67c <_printf_float+0xbc>
 800c876:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c878:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c87a:	4313      	orrs	r3, r2
 800c87c:	d102      	bne.n	800c884 <_printf_float+0x2c4>
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	07db      	lsls	r3, r3, #31
 800c882:	d5d5      	bpl.n	800c830 <_printf_float+0x270>
 800c884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c886:	0038      	movs	r0, r7
 800c888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c88a:	9908      	ldr	r1, [sp, #32]
 800c88c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c88e:	47b0      	blx	r6
 800c890:	2300      	movs	r3, #0
 800c892:	3001      	adds	r0, #1
 800c894:	d100      	bne.n	800c898 <_printf_float+0x2d8>
 800c896:	e6f1      	b.n	800c67c <_printf_float+0xbc>
 800c898:	930a      	str	r3, [sp, #40]	; 0x28
 800c89a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c89c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c89e:	425b      	negs	r3, r3
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	dc01      	bgt.n	800c8a8 <_printf_float+0x2e8>
 800c8a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8a6:	e791      	b.n	800c7cc <_printf_float+0x20c>
 800c8a8:	0022      	movs	r2, r4
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	0038      	movs	r0, r7
 800c8ae:	9908      	ldr	r1, [sp, #32]
 800c8b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c8b2:	321a      	adds	r2, #26
 800c8b4:	47b0      	blx	r6
 800c8b6:	3001      	adds	r0, #1
 800c8b8:	d100      	bne.n	800c8bc <_printf_float+0x2fc>
 800c8ba:	e6df      	b.n	800c67c <_printf_float+0xbc>
 800c8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8be:	3301      	adds	r3, #1
 800c8c0:	e7ea      	b.n	800c898 <_printf_float+0x2d8>
 800c8c2:	46c0      	nop			; (mov r8, r8)
 800c8c4:	7fefffff 	.word	0x7fefffff
 800c8c8:	08010689 	.word	0x08010689
 800c8cc:	0801068d 	.word	0x0801068d
 800c8d0:	08010691 	.word	0x08010691
 800c8d4:	08010695 	.word	0x08010695
 800c8d8:	08010699 	.word	0x08010699
 800c8dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c8de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8e0:	920a      	str	r2, [sp, #40]	; 0x28
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	dd00      	ble.n	800c8e8 <_printf_float+0x328>
 800c8e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	dc3d      	bgt.n	800c96a <_printf_float+0x3aa>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	930e      	str	r3, [sp, #56]	; 0x38
 800c8f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8f4:	43db      	mvns	r3, r3
 800c8f6:	17db      	asrs	r3, r3, #31
 800c8f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800c900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c902:	4013      	ands	r3, r2
 800c904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c90a:	4293      	cmp	r3, r2
 800c90c:	dc36      	bgt.n	800c97c <_printf_float+0x3bc>
 800c90e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c910:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c912:	429a      	cmp	r2, r3
 800c914:	db40      	blt.n	800c998 <_printf_float+0x3d8>
 800c916:	6823      	ldr	r3, [r4, #0]
 800c918:	07db      	lsls	r3, r3, #31
 800c91a:	d43d      	bmi.n	800c998 <_printf_float+0x3d8>
 800c91c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c91e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c922:	1af3      	subs	r3, r6, r3
 800c924:	1ab6      	subs	r6, r6, r2
 800c926:	429e      	cmp	r6, r3
 800c928:	dd00      	ble.n	800c92c <_printf_float+0x36c>
 800c92a:	001e      	movs	r6, r3
 800c92c:	2e00      	cmp	r6, #0
 800c92e:	dc3c      	bgt.n	800c9aa <_printf_float+0x3ea>
 800c930:	2300      	movs	r3, #0
 800c932:	930a      	str	r3, [sp, #40]	; 0x28
 800c934:	43f3      	mvns	r3, r6
 800c936:	17db      	asrs	r3, r3, #31
 800c938:	930b      	str	r3, [sp, #44]	; 0x2c
 800c93a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c93c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c93e:	1a9b      	subs	r3, r3, r2
 800c940:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c942:	4032      	ands	r2, r6
 800c944:	1a9b      	subs	r3, r3, r2
 800c946:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c948:	4293      	cmp	r3, r2
 800c94a:	dc00      	bgt.n	800c94e <_printf_float+0x38e>
 800c94c:	e770      	b.n	800c830 <_printf_float+0x270>
 800c94e:	0022      	movs	r2, r4
 800c950:	2301      	movs	r3, #1
 800c952:	0038      	movs	r0, r7
 800c954:	9908      	ldr	r1, [sp, #32]
 800c956:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c958:	321a      	adds	r2, #26
 800c95a:	47a8      	blx	r5
 800c95c:	3001      	adds	r0, #1
 800c95e:	d100      	bne.n	800c962 <_printf_float+0x3a2>
 800c960:	e68c      	b.n	800c67c <_printf_float+0xbc>
 800c962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c964:	3301      	adds	r3, #1
 800c966:	930a      	str	r3, [sp, #40]	; 0x28
 800c968:	e7e7      	b.n	800c93a <_printf_float+0x37a>
 800c96a:	002a      	movs	r2, r5
 800c96c:	0038      	movs	r0, r7
 800c96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c970:	9908      	ldr	r1, [sp, #32]
 800c972:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c974:	47b0      	blx	r6
 800c976:	3001      	adds	r0, #1
 800c978:	d1b9      	bne.n	800c8ee <_printf_float+0x32e>
 800c97a:	e67f      	b.n	800c67c <_printf_float+0xbc>
 800c97c:	0022      	movs	r2, r4
 800c97e:	2301      	movs	r3, #1
 800c980:	0038      	movs	r0, r7
 800c982:	9908      	ldr	r1, [sp, #32]
 800c984:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c986:	321a      	adds	r2, #26
 800c988:	47b0      	blx	r6
 800c98a:	3001      	adds	r0, #1
 800c98c:	d100      	bne.n	800c990 <_printf_float+0x3d0>
 800c98e:	e675      	b.n	800c67c <_printf_float+0xbc>
 800c990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c992:	3301      	adds	r3, #1
 800c994:	930e      	str	r3, [sp, #56]	; 0x38
 800c996:	e7b0      	b.n	800c8fa <_printf_float+0x33a>
 800c998:	0038      	movs	r0, r7
 800c99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c99c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c99e:	9908      	ldr	r1, [sp, #32]
 800c9a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c9a2:	47b0      	blx	r6
 800c9a4:	3001      	adds	r0, #1
 800c9a6:	d1b9      	bne.n	800c91c <_printf_float+0x35c>
 800c9a8:	e668      	b.n	800c67c <_printf_float+0xbc>
 800c9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9ac:	0038      	movs	r0, r7
 800c9ae:	18ea      	adds	r2, r5, r3
 800c9b0:	9908      	ldr	r1, [sp, #32]
 800c9b2:	0033      	movs	r3, r6
 800c9b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c9b6:	47a8      	blx	r5
 800c9b8:	3001      	adds	r0, #1
 800c9ba:	d1b9      	bne.n	800c930 <_printf_float+0x370>
 800c9bc:	e65e      	b.n	800c67c <_printf_float+0xbc>
 800c9be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	dc02      	bgt.n	800c9ca <_printf_float+0x40a>
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	421a      	tst	r2, r3
 800c9c8:	d03a      	beq.n	800ca40 <_printf_float+0x480>
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	002a      	movs	r2, r5
 800c9ce:	0038      	movs	r0, r7
 800c9d0:	9908      	ldr	r1, [sp, #32]
 800c9d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c9d4:	47b0      	blx	r6
 800c9d6:	3001      	adds	r0, #1
 800c9d8:	d100      	bne.n	800c9dc <_printf_float+0x41c>
 800c9da:	e64f      	b.n	800c67c <_printf_float+0xbc>
 800c9dc:	0038      	movs	r0, r7
 800c9de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9e2:	9908      	ldr	r1, [sp, #32]
 800c9e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c9e6:	47b0      	blx	r6
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	d100      	bne.n	800c9ee <_printf_float+0x42e>
 800c9ec:	e646      	b.n	800c67c <_printf_float+0xbc>
 800c9ee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c9f0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c9f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	001e      	movs	r6, r3
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	f7f3 fd31 	bl	8000460 <__aeabi_dcmpeq>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d11c      	bne.n	800ca3c <_printf_float+0x47c>
 800ca02:	0033      	movs	r3, r6
 800ca04:	1c6a      	adds	r2, r5, #1
 800ca06:	3b01      	subs	r3, #1
 800ca08:	0038      	movs	r0, r7
 800ca0a:	9908      	ldr	r1, [sp, #32]
 800ca0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ca0e:	47a8      	blx	r5
 800ca10:	3001      	adds	r0, #1
 800ca12:	d10f      	bne.n	800ca34 <_printf_float+0x474>
 800ca14:	e632      	b.n	800c67c <_printf_float+0xbc>
 800ca16:	0022      	movs	r2, r4
 800ca18:	2301      	movs	r3, #1
 800ca1a:	0038      	movs	r0, r7
 800ca1c:	9908      	ldr	r1, [sp, #32]
 800ca1e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ca20:	321a      	adds	r2, #26
 800ca22:	47b0      	blx	r6
 800ca24:	3001      	adds	r0, #1
 800ca26:	d100      	bne.n	800ca2a <_printf_float+0x46a>
 800ca28:	e628      	b.n	800c67c <_printf_float+0xbc>
 800ca2a:	3501      	adds	r5, #1
 800ca2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	42ab      	cmp	r3, r5
 800ca32:	dcf0      	bgt.n	800ca16 <_printf_float+0x456>
 800ca34:	0022      	movs	r2, r4
 800ca36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca38:	3250      	adds	r2, #80	; 0x50
 800ca3a:	e6c8      	b.n	800c7ce <_printf_float+0x20e>
 800ca3c:	2500      	movs	r5, #0
 800ca3e:	e7f5      	b.n	800ca2c <_printf_float+0x46c>
 800ca40:	002a      	movs	r2, r5
 800ca42:	e7e1      	b.n	800ca08 <_printf_float+0x448>
 800ca44:	0022      	movs	r2, r4
 800ca46:	2301      	movs	r3, #1
 800ca48:	0038      	movs	r0, r7
 800ca4a:	9908      	ldr	r1, [sp, #32]
 800ca4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ca4e:	3219      	adds	r2, #25
 800ca50:	47b0      	blx	r6
 800ca52:	3001      	adds	r0, #1
 800ca54:	d100      	bne.n	800ca58 <_printf_float+0x498>
 800ca56:	e611      	b.n	800c67c <_printf_float+0xbc>
 800ca58:	3501      	adds	r5, #1
 800ca5a:	68e3      	ldr	r3, [r4, #12]
 800ca5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ca5e:	1a9b      	subs	r3, r3, r2
 800ca60:	42ab      	cmp	r3, r5
 800ca62:	dcef      	bgt.n	800ca44 <_printf_float+0x484>
 800ca64:	e6e8      	b.n	800c838 <_printf_float+0x278>
 800ca66:	2500      	movs	r5, #0
 800ca68:	e7f7      	b.n	800ca5a <_printf_float+0x49a>
 800ca6a:	46c0      	nop			; (mov r8, r8)

0800ca6c <_printf_common>:
 800ca6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca6e:	0016      	movs	r6, r2
 800ca70:	9301      	str	r3, [sp, #4]
 800ca72:	688a      	ldr	r2, [r1, #8]
 800ca74:	690b      	ldr	r3, [r1, #16]
 800ca76:	000c      	movs	r4, r1
 800ca78:	9000      	str	r0, [sp, #0]
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	da00      	bge.n	800ca80 <_printf_common+0x14>
 800ca7e:	0013      	movs	r3, r2
 800ca80:	0022      	movs	r2, r4
 800ca82:	6033      	str	r3, [r6, #0]
 800ca84:	3243      	adds	r2, #67	; 0x43
 800ca86:	7812      	ldrb	r2, [r2, #0]
 800ca88:	2a00      	cmp	r2, #0
 800ca8a:	d001      	beq.n	800ca90 <_printf_common+0x24>
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	6033      	str	r3, [r6, #0]
 800ca90:	6823      	ldr	r3, [r4, #0]
 800ca92:	069b      	lsls	r3, r3, #26
 800ca94:	d502      	bpl.n	800ca9c <_printf_common+0x30>
 800ca96:	6833      	ldr	r3, [r6, #0]
 800ca98:	3302      	adds	r3, #2
 800ca9a:	6033      	str	r3, [r6, #0]
 800ca9c:	6822      	ldr	r2, [r4, #0]
 800ca9e:	2306      	movs	r3, #6
 800caa0:	0015      	movs	r5, r2
 800caa2:	401d      	ands	r5, r3
 800caa4:	421a      	tst	r2, r3
 800caa6:	d027      	beq.n	800caf8 <_printf_common+0x8c>
 800caa8:	0023      	movs	r3, r4
 800caaa:	3343      	adds	r3, #67	; 0x43
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	1e5a      	subs	r2, r3, #1
 800cab0:	4193      	sbcs	r3, r2
 800cab2:	6822      	ldr	r2, [r4, #0]
 800cab4:	0692      	lsls	r2, r2, #26
 800cab6:	d430      	bmi.n	800cb1a <_printf_common+0xae>
 800cab8:	0022      	movs	r2, r4
 800caba:	9901      	ldr	r1, [sp, #4]
 800cabc:	9800      	ldr	r0, [sp, #0]
 800cabe:	9d08      	ldr	r5, [sp, #32]
 800cac0:	3243      	adds	r2, #67	; 0x43
 800cac2:	47a8      	blx	r5
 800cac4:	3001      	adds	r0, #1
 800cac6:	d025      	beq.n	800cb14 <_printf_common+0xa8>
 800cac8:	2206      	movs	r2, #6
 800caca:	6823      	ldr	r3, [r4, #0]
 800cacc:	2500      	movs	r5, #0
 800cace:	4013      	ands	r3, r2
 800cad0:	2b04      	cmp	r3, #4
 800cad2:	d105      	bne.n	800cae0 <_printf_common+0x74>
 800cad4:	6833      	ldr	r3, [r6, #0]
 800cad6:	68e5      	ldr	r5, [r4, #12]
 800cad8:	1aed      	subs	r5, r5, r3
 800cada:	43eb      	mvns	r3, r5
 800cadc:	17db      	asrs	r3, r3, #31
 800cade:	401d      	ands	r5, r3
 800cae0:	68a3      	ldr	r3, [r4, #8]
 800cae2:	6922      	ldr	r2, [r4, #16]
 800cae4:	4293      	cmp	r3, r2
 800cae6:	dd01      	ble.n	800caec <_printf_common+0x80>
 800cae8:	1a9b      	subs	r3, r3, r2
 800caea:	18ed      	adds	r5, r5, r3
 800caec:	2600      	movs	r6, #0
 800caee:	42b5      	cmp	r5, r6
 800caf0:	d120      	bne.n	800cb34 <_printf_common+0xc8>
 800caf2:	2000      	movs	r0, #0
 800caf4:	e010      	b.n	800cb18 <_printf_common+0xac>
 800caf6:	3501      	adds	r5, #1
 800caf8:	68e3      	ldr	r3, [r4, #12]
 800cafa:	6832      	ldr	r2, [r6, #0]
 800cafc:	1a9b      	subs	r3, r3, r2
 800cafe:	42ab      	cmp	r3, r5
 800cb00:	ddd2      	ble.n	800caa8 <_printf_common+0x3c>
 800cb02:	0022      	movs	r2, r4
 800cb04:	2301      	movs	r3, #1
 800cb06:	9901      	ldr	r1, [sp, #4]
 800cb08:	9800      	ldr	r0, [sp, #0]
 800cb0a:	9f08      	ldr	r7, [sp, #32]
 800cb0c:	3219      	adds	r2, #25
 800cb0e:	47b8      	blx	r7
 800cb10:	3001      	adds	r0, #1
 800cb12:	d1f0      	bne.n	800caf6 <_printf_common+0x8a>
 800cb14:	2001      	movs	r0, #1
 800cb16:	4240      	negs	r0, r0
 800cb18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb1a:	2030      	movs	r0, #48	; 0x30
 800cb1c:	18e1      	adds	r1, r4, r3
 800cb1e:	3143      	adds	r1, #67	; 0x43
 800cb20:	7008      	strb	r0, [r1, #0]
 800cb22:	0021      	movs	r1, r4
 800cb24:	1c5a      	adds	r2, r3, #1
 800cb26:	3145      	adds	r1, #69	; 0x45
 800cb28:	7809      	ldrb	r1, [r1, #0]
 800cb2a:	18a2      	adds	r2, r4, r2
 800cb2c:	3243      	adds	r2, #67	; 0x43
 800cb2e:	3302      	adds	r3, #2
 800cb30:	7011      	strb	r1, [r2, #0]
 800cb32:	e7c1      	b.n	800cab8 <_printf_common+0x4c>
 800cb34:	0022      	movs	r2, r4
 800cb36:	2301      	movs	r3, #1
 800cb38:	9901      	ldr	r1, [sp, #4]
 800cb3a:	9800      	ldr	r0, [sp, #0]
 800cb3c:	9f08      	ldr	r7, [sp, #32]
 800cb3e:	321a      	adds	r2, #26
 800cb40:	47b8      	blx	r7
 800cb42:	3001      	adds	r0, #1
 800cb44:	d0e6      	beq.n	800cb14 <_printf_common+0xa8>
 800cb46:	3601      	adds	r6, #1
 800cb48:	e7d1      	b.n	800caee <_printf_common+0x82>
	...

0800cb4c <_printf_i>:
 800cb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb4e:	b08b      	sub	sp, #44	; 0x2c
 800cb50:	9206      	str	r2, [sp, #24]
 800cb52:	000a      	movs	r2, r1
 800cb54:	3243      	adds	r2, #67	; 0x43
 800cb56:	9307      	str	r3, [sp, #28]
 800cb58:	9005      	str	r0, [sp, #20]
 800cb5a:	9204      	str	r2, [sp, #16]
 800cb5c:	7e0a      	ldrb	r2, [r1, #24]
 800cb5e:	000c      	movs	r4, r1
 800cb60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb62:	2a78      	cmp	r2, #120	; 0x78
 800cb64:	d809      	bhi.n	800cb7a <_printf_i+0x2e>
 800cb66:	2a62      	cmp	r2, #98	; 0x62
 800cb68:	d80b      	bhi.n	800cb82 <_printf_i+0x36>
 800cb6a:	2a00      	cmp	r2, #0
 800cb6c:	d100      	bne.n	800cb70 <_printf_i+0x24>
 800cb6e:	e0be      	b.n	800ccee <_printf_i+0x1a2>
 800cb70:	497c      	ldr	r1, [pc, #496]	; (800cd64 <_printf_i+0x218>)
 800cb72:	9103      	str	r1, [sp, #12]
 800cb74:	2a58      	cmp	r2, #88	; 0x58
 800cb76:	d100      	bne.n	800cb7a <_printf_i+0x2e>
 800cb78:	e093      	b.n	800cca2 <_printf_i+0x156>
 800cb7a:	0026      	movs	r6, r4
 800cb7c:	3642      	adds	r6, #66	; 0x42
 800cb7e:	7032      	strb	r2, [r6, #0]
 800cb80:	e022      	b.n	800cbc8 <_printf_i+0x7c>
 800cb82:	0010      	movs	r0, r2
 800cb84:	3863      	subs	r0, #99	; 0x63
 800cb86:	2815      	cmp	r0, #21
 800cb88:	d8f7      	bhi.n	800cb7a <_printf_i+0x2e>
 800cb8a:	f7f3 fad9 	bl	8000140 <__gnu_thumb1_case_shi>
 800cb8e:	0016      	.short	0x0016
 800cb90:	fff6001f 	.word	0xfff6001f
 800cb94:	fff6fff6 	.word	0xfff6fff6
 800cb98:	001ffff6 	.word	0x001ffff6
 800cb9c:	fff6fff6 	.word	0xfff6fff6
 800cba0:	fff6fff6 	.word	0xfff6fff6
 800cba4:	003600a3 	.word	0x003600a3
 800cba8:	fff60083 	.word	0xfff60083
 800cbac:	00b4fff6 	.word	0x00b4fff6
 800cbb0:	0036fff6 	.word	0x0036fff6
 800cbb4:	fff6fff6 	.word	0xfff6fff6
 800cbb8:	0087      	.short	0x0087
 800cbba:	0026      	movs	r6, r4
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	3642      	adds	r6, #66	; 0x42
 800cbc0:	1d11      	adds	r1, r2, #4
 800cbc2:	6019      	str	r1, [r3, #0]
 800cbc4:	6813      	ldr	r3, [r2, #0]
 800cbc6:	7033      	strb	r3, [r6, #0]
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e0a2      	b.n	800cd12 <_printf_i+0x1c6>
 800cbcc:	6818      	ldr	r0, [r3, #0]
 800cbce:	6809      	ldr	r1, [r1, #0]
 800cbd0:	1d02      	adds	r2, r0, #4
 800cbd2:	060d      	lsls	r5, r1, #24
 800cbd4:	d50b      	bpl.n	800cbee <_printf_i+0xa2>
 800cbd6:	6805      	ldr	r5, [r0, #0]
 800cbd8:	601a      	str	r2, [r3, #0]
 800cbda:	2d00      	cmp	r5, #0
 800cbdc:	da03      	bge.n	800cbe6 <_printf_i+0x9a>
 800cbde:	232d      	movs	r3, #45	; 0x2d
 800cbe0:	9a04      	ldr	r2, [sp, #16]
 800cbe2:	426d      	negs	r5, r5
 800cbe4:	7013      	strb	r3, [r2, #0]
 800cbe6:	4b5f      	ldr	r3, [pc, #380]	; (800cd64 <_printf_i+0x218>)
 800cbe8:	270a      	movs	r7, #10
 800cbea:	9303      	str	r3, [sp, #12]
 800cbec:	e01b      	b.n	800cc26 <_printf_i+0xda>
 800cbee:	6805      	ldr	r5, [r0, #0]
 800cbf0:	601a      	str	r2, [r3, #0]
 800cbf2:	0649      	lsls	r1, r1, #25
 800cbf4:	d5f1      	bpl.n	800cbda <_printf_i+0x8e>
 800cbf6:	b22d      	sxth	r5, r5
 800cbf8:	e7ef      	b.n	800cbda <_printf_i+0x8e>
 800cbfa:	680d      	ldr	r5, [r1, #0]
 800cbfc:	6819      	ldr	r1, [r3, #0]
 800cbfe:	1d08      	adds	r0, r1, #4
 800cc00:	6018      	str	r0, [r3, #0]
 800cc02:	062e      	lsls	r6, r5, #24
 800cc04:	d501      	bpl.n	800cc0a <_printf_i+0xbe>
 800cc06:	680d      	ldr	r5, [r1, #0]
 800cc08:	e003      	b.n	800cc12 <_printf_i+0xc6>
 800cc0a:	066d      	lsls	r5, r5, #25
 800cc0c:	d5fb      	bpl.n	800cc06 <_printf_i+0xba>
 800cc0e:	680d      	ldr	r5, [r1, #0]
 800cc10:	b2ad      	uxth	r5, r5
 800cc12:	4b54      	ldr	r3, [pc, #336]	; (800cd64 <_printf_i+0x218>)
 800cc14:	2708      	movs	r7, #8
 800cc16:	9303      	str	r3, [sp, #12]
 800cc18:	2a6f      	cmp	r2, #111	; 0x6f
 800cc1a:	d000      	beq.n	800cc1e <_printf_i+0xd2>
 800cc1c:	3702      	adds	r7, #2
 800cc1e:	0023      	movs	r3, r4
 800cc20:	2200      	movs	r2, #0
 800cc22:	3343      	adds	r3, #67	; 0x43
 800cc24:	701a      	strb	r2, [r3, #0]
 800cc26:	6863      	ldr	r3, [r4, #4]
 800cc28:	60a3      	str	r3, [r4, #8]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	db03      	blt.n	800cc36 <_printf_i+0xea>
 800cc2e:	2104      	movs	r1, #4
 800cc30:	6822      	ldr	r2, [r4, #0]
 800cc32:	438a      	bics	r2, r1
 800cc34:	6022      	str	r2, [r4, #0]
 800cc36:	2d00      	cmp	r5, #0
 800cc38:	d102      	bne.n	800cc40 <_printf_i+0xf4>
 800cc3a:	9e04      	ldr	r6, [sp, #16]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00c      	beq.n	800cc5a <_printf_i+0x10e>
 800cc40:	9e04      	ldr	r6, [sp, #16]
 800cc42:	0028      	movs	r0, r5
 800cc44:	0039      	movs	r1, r7
 800cc46:	f7f3 fb0b 	bl	8000260 <__aeabi_uidivmod>
 800cc4a:	9b03      	ldr	r3, [sp, #12]
 800cc4c:	3e01      	subs	r6, #1
 800cc4e:	5c5b      	ldrb	r3, [r3, r1]
 800cc50:	7033      	strb	r3, [r6, #0]
 800cc52:	002b      	movs	r3, r5
 800cc54:	0005      	movs	r5, r0
 800cc56:	429f      	cmp	r7, r3
 800cc58:	d9f3      	bls.n	800cc42 <_printf_i+0xf6>
 800cc5a:	2f08      	cmp	r7, #8
 800cc5c:	d109      	bne.n	800cc72 <_printf_i+0x126>
 800cc5e:	6823      	ldr	r3, [r4, #0]
 800cc60:	07db      	lsls	r3, r3, #31
 800cc62:	d506      	bpl.n	800cc72 <_printf_i+0x126>
 800cc64:	6862      	ldr	r2, [r4, #4]
 800cc66:	6923      	ldr	r3, [r4, #16]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	dc02      	bgt.n	800cc72 <_printf_i+0x126>
 800cc6c:	2330      	movs	r3, #48	; 0x30
 800cc6e:	3e01      	subs	r6, #1
 800cc70:	7033      	strb	r3, [r6, #0]
 800cc72:	9b04      	ldr	r3, [sp, #16]
 800cc74:	1b9b      	subs	r3, r3, r6
 800cc76:	6123      	str	r3, [r4, #16]
 800cc78:	9b07      	ldr	r3, [sp, #28]
 800cc7a:	0021      	movs	r1, r4
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	9805      	ldr	r0, [sp, #20]
 800cc80:	9b06      	ldr	r3, [sp, #24]
 800cc82:	aa09      	add	r2, sp, #36	; 0x24
 800cc84:	f7ff fef2 	bl	800ca6c <_printf_common>
 800cc88:	3001      	adds	r0, #1
 800cc8a:	d147      	bne.n	800cd1c <_printf_i+0x1d0>
 800cc8c:	2001      	movs	r0, #1
 800cc8e:	4240      	negs	r0, r0
 800cc90:	b00b      	add	sp, #44	; 0x2c
 800cc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc94:	2220      	movs	r2, #32
 800cc96:	6809      	ldr	r1, [r1, #0]
 800cc98:	430a      	orrs	r2, r1
 800cc9a:	6022      	str	r2, [r4, #0]
 800cc9c:	2278      	movs	r2, #120	; 0x78
 800cc9e:	4932      	ldr	r1, [pc, #200]	; (800cd68 <_printf_i+0x21c>)
 800cca0:	9103      	str	r1, [sp, #12]
 800cca2:	0021      	movs	r1, r4
 800cca4:	3145      	adds	r1, #69	; 0x45
 800cca6:	700a      	strb	r2, [r1, #0]
 800cca8:	6819      	ldr	r1, [r3, #0]
 800ccaa:	6822      	ldr	r2, [r4, #0]
 800ccac:	c920      	ldmia	r1!, {r5}
 800ccae:	0610      	lsls	r0, r2, #24
 800ccb0:	d402      	bmi.n	800ccb8 <_printf_i+0x16c>
 800ccb2:	0650      	lsls	r0, r2, #25
 800ccb4:	d500      	bpl.n	800ccb8 <_printf_i+0x16c>
 800ccb6:	b2ad      	uxth	r5, r5
 800ccb8:	6019      	str	r1, [r3, #0]
 800ccba:	07d3      	lsls	r3, r2, #31
 800ccbc:	d502      	bpl.n	800ccc4 <_printf_i+0x178>
 800ccbe:	2320      	movs	r3, #32
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	6023      	str	r3, [r4, #0]
 800ccc4:	2710      	movs	r7, #16
 800ccc6:	2d00      	cmp	r5, #0
 800ccc8:	d1a9      	bne.n	800cc1e <_printf_i+0xd2>
 800ccca:	2220      	movs	r2, #32
 800cccc:	6823      	ldr	r3, [r4, #0]
 800ccce:	4393      	bics	r3, r2
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	e7a4      	b.n	800cc1e <_printf_i+0xd2>
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	680d      	ldr	r5, [r1, #0]
 800ccd8:	1d10      	adds	r0, r2, #4
 800ccda:	6949      	ldr	r1, [r1, #20]
 800ccdc:	6018      	str	r0, [r3, #0]
 800ccde:	6813      	ldr	r3, [r2, #0]
 800cce0:	062e      	lsls	r6, r5, #24
 800cce2:	d501      	bpl.n	800cce8 <_printf_i+0x19c>
 800cce4:	6019      	str	r1, [r3, #0]
 800cce6:	e002      	b.n	800ccee <_printf_i+0x1a2>
 800cce8:	066d      	lsls	r5, r5, #25
 800ccea:	d5fb      	bpl.n	800cce4 <_printf_i+0x198>
 800ccec:	8019      	strh	r1, [r3, #0]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	9e04      	ldr	r6, [sp, #16]
 800ccf2:	6123      	str	r3, [r4, #16]
 800ccf4:	e7c0      	b.n	800cc78 <_printf_i+0x12c>
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	1d11      	adds	r1, r2, #4
 800ccfa:	6019      	str	r1, [r3, #0]
 800ccfc:	6816      	ldr	r6, [r2, #0]
 800ccfe:	2100      	movs	r1, #0
 800cd00:	0030      	movs	r0, r6
 800cd02:	6862      	ldr	r2, [r4, #4]
 800cd04:	f000 fd33 	bl	800d76e <memchr>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d001      	beq.n	800cd10 <_printf_i+0x1c4>
 800cd0c:	1b80      	subs	r0, r0, r6
 800cd0e:	6060      	str	r0, [r4, #4]
 800cd10:	6863      	ldr	r3, [r4, #4]
 800cd12:	6123      	str	r3, [r4, #16]
 800cd14:	2300      	movs	r3, #0
 800cd16:	9a04      	ldr	r2, [sp, #16]
 800cd18:	7013      	strb	r3, [r2, #0]
 800cd1a:	e7ad      	b.n	800cc78 <_printf_i+0x12c>
 800cd1c:	0032      	movs	r2, r6
 800cd1e:	6923      	ldr	r3, [r4, #16]
 800cd20:	9906      	ldr	r1, [sp, #24]
 800cd22:	9805      	ldr	r0, [sp, #20]
 800cd24:	9d07      	ldr	r5, [sp, #28]
 800cd26:	47a8      	blx	r5
 800cd28:	3001      	adds	r0, #1
 800cd2a:	d0af      	beq.n	800cc8c <_printf_i+0x140>
 800cd2c:	6823      	ldr	r3, [r4, #0]
 800cd2e:	079b      	lsls	r3, r3, #30
 800cd30:	d415      	bmi.n	800cd5e <_printf_i+0x212>
 800cd32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd34:	68e0      	ldr	r0, [r4, #12]
 800cd36:	4298      	cmp	r0, r3
 800cd38:	daaa      	bge.n	800cc90 <_printf_i+0x144>
 800cd3a:	0018      	movs	r0, r3
 800cd3c:	e7a8      	b.n	800cc90 <_printf_i+0x144>
 800cd3e:	0022      	movs	r2, r4
 800cd40:	2301      	movs	r3, #1
 800cd42:	9906      	ldr	r1, [sp, #24]
 800cd44:	9805      	ldr	r0, [sp, #20]
 800cd46:	9e07      	ldr	r6, [sp, #28]
 800cd48:	3219      	adds	r2, #25
 800cd4a:	47b0      	blx	r6
 800cd4c:	3001      	adds	r0, #1
 800cd4e:	d09d      	beq.n	800cc8c <_printf_i+0x140>
 800cd50:	3501      	adds	r5, #1
 800cd52:	68e3      	ldr	r3, [r4, #12]
 800cd54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd56:	1a9b      	subs	r3, r3, r2
 800cd58:	42ab      	cmp	r3, r5
 800cd5a:	dcf0      	bgt.n	800cd3e <_printf_i+0x1f2>
 800cd5c:	e7e9      	b.n	800cd32 <_printf_i+0x1e6>
 800cd5e:	2500      	movs	r5, #0
 800cd60:	e7f7      	b.n	800cd52 <_printf_i+0x206>
 800cd62:	46c0      	nop			; (mov r8, r8)
 800cd64:	0801069b 	.word	0x0801069b
 800cd68:	080106ac 	.word	0x080106ac

0800cd6c <_scanf_float>:
 800cd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd6e:	b08b      	sub	sp, #44	; 0x2c
 800cd70:	0016      	movs	r6, r2
 800cd72:	9002      	str	r0, [sp, #8]
 800cd74:	22ae      	movs	r2, #174	; 0xae
 800cd76:	2000      	movs	r0, #0
 800cd78:	9307      	str	r3, [sp, #28]
 800cd7a:	688b      	ldr	r3, [r1, #8]
 800cd7c:	000f      	movs	r7, r1
 800cd7e:	1e59      	subs	r1, r3, #1
 800cd80:	0052      	lsls	r2, r2, #1
 800cd82:	9006      	str	r0, [sp, #24]
 800cd84:	4291      	cmp	r1, r2
 800cd86:	d905      	bls.n	800cd94 <_scanf_float+0x28>
 800cd88:	3b5e      	subs	r3, #94	; 0x5e
 800cd8a:	3bff      	subs	r3, #255	; 0xff
 800cd8c:	9306      	str	r3, [sp, #24]
 800cd8e:	235e      	movs	r3, #94	; 0x5e
 800cd90:	33ff      	adds	r3, #255	; 0xff
 800cd92:	60bb      	str	r3, [r7, #8]
 800cd94:	23f0      	movs	r3, #240	; 0xf0
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	00db      	lsls	r3, r3, #3
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	603b      	str	r3, [r7, #0]
 800cd9e:	003b      	movs	r3, r7
 800cda0:	2400      	movs	r4, #0
 800cda2:	331c      	adds	r3, #28
 800cda4:	001d      	movs	r5, r3
 800cda6:	9304      	str	r3, [sp, #16]
 800cda8:	9403      	str	r4, [sp, #12]
 800cdaa:	9409      	str	r4, [sp, #36]	; 0x24
 800cdac:	9408      	str	r4, [sp, #32]
 800cdae:	9401      	str	r4, [sp, #4]
 800cdb0:	9405      	str	r4, [sp, #20]
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	2a00      	cmp	r2, #0
 800cdb6:	d00a      	beq.n	800cdce <_scanf_float+0x62>
 800cdb8:	6833      	ldr	r3, [r6, #0]
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	2b4e      	cmp	r3, #78	; 0x4e
 800cdbe:	d844      	bhi.n	800ce4a <_scanf_float+0xde>
 800cdc0:	0018      	movs	r0, r3
 800cdc2:	2b40      	cmp	r3, #64	; 0x40
 800cdc4:	d82c      	bhi.n	800ce20 <_scanf_float+0xb4>
 800cdc6:	382b      	subs	r0, #43	; 0x2b
 800cdc8:	b2c1      	uxtb	r1, r0
 800cdca:	290e      	cmp	r1, #14
 800cdcc:	d92a      	bls.n	800ce24 <_scanf_float+0xb8>
 800cdce:	9b01      	ldr	r3, [sp, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d003      	beq.n	800cddc <_scanf_float+0x70>
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	4aa3      	ldr	r2, [pc, #652]	; (800d064 <_scanf_float+0x2f8>)
 800cdd8:	4013      	ands	r3, r2
 800cdda:	603b      	str	r3, [r7, #0]
 800cddc:	9b03      	ldr	r3, [sp, #12]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d900      	bls.n	800cde6 <_scanf_float+0x7a>
 800cde4:	e0f9      	b.n	800cfda <_scanf_float+0x26e>
 800cde6:	24be      	movs	r4, #190	; 0xbe
 800cde8:	0064      	lsls	r4, r4, #1
 800cdea:	9b04      	ldr	r3, [sp, #16]
 800cdec:	429d      	cmp	r5, r3
 800cdee:	d900      	bls.n	800cdf2 <_scanf_float+0x86>
 800cdf0:	e0e9      	b.n	800cfc6 <_scanf_float+0x25a>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	9303      	str	r3, [sp, #12]
 800cdf6:	e183      	b.n	800d100 <_scanf_float+0x394>
 800cdf8:	0018      	movs	r0, r3
 800cdfa:	3861      	subs	r0, #97	; 0x61
 800cdfc:	280d      	cmp	r0, #13
 800cdfe:	d8e6      	bhi.n	800cdce <_scanf_float+0x62>
 800ce00:	f7f3 f99e 	bl	8000140 <__gnu_thumb1_case_shi>
 800ce04:	ffe50083 	.word	0xffe50083
 800ce08:	ffe5ffe5 	.word	0xffe5ffe5
 800ce0c:	00a200b6 	.word	0x00a200b6
 800ce10:	ffe5ffe5 	.word	0xffe5ffe5
 800ce14:	ffe50089 	.word	0xffe50089
 800ce18:	ffe5ffe5 	.word	0xffe5ffe5
 800ce1c:	0065ffe5 	.word	0x0065ffe5
 800ce20:	3841      	subs	r0, #65	; 0x41
 800ce22:	e7eb      	b.n	800cdfc <_scanf_float+0x90>
 800ce24:	280e      	cmp	r0, #14
 800ce26:	d8d2      	bhi.n	800cdce <_scanf_float+0x62>
 800ce28:	f7f3 f98a 	bl	8000140 <__gnu_thumb1_case_shi>
 800ce2c:	ffd1004b 	.word	0xffd1004b
 800ce30:	0098004b 	.word	0x0098004b
 800ce34:	0020ffd1 	.word	0x0020ffd1
 800ce38:	00400040 	.word	0x00400040
 800ce3c:	00400040 	.word	0x00400040
 800ce40:	00400040 	.word	0x00400040
 800ce44:	00400040 	.word	0x00400040
 800ce48:	0040      	.short	0x0040
 800ce4a:	2b6e      	cmp	r3, #110	; 0x6e
 800ce4c:	d809      	bhi.n	800ce62 <_scanf_float+0xf6>
 800ce4e:	2b60      	cmp	r3, #96	; 0x60
 800ce50:	d8d2      	bhi.n	800cdf8 <_scanf_float+0x8c>
 800ce52:	2b54      	cmp	r3, #84	; 0x54
 800ce54:	d07d      	beq.n	800cf52 <_scanf_float+0x1e6>
 800ce56:	2b59      	cmp	r3, #89	; 0x59
 800ce58:	d1b9      	bne.n	800cdce <_scanf_float+0x62>
 800ce5a:	2c07      	cmp	r4, #7
 800ce5c:	d1b7      	bne.n	800cdce <_scanf_float+0x62>
 800ce5e:	2408      	movs	r4, #8
 800ce60:	e02c      	b.n	800cebc <_scanf_float+0x150>
 800ce62:	2b74      	cmp	r3, #116	; 0x74
 800ce64:	d075      	beq.n	800cf52 <_scanf_float+0x1e6>
 800ce66:	2b79      	cmp	r3, #121	; 0x79
 800ce68:	d0f7      	beq.n	800ce5a <_scanf_float+0xee>
 800ce6a:	e7b0      	b.n	800cdce <_scanf_float+0x62>
 800ce6c:	6839      	ldr	r1, [r7, #0]
 800ce6e:	05c8      	lsls	r0, r1, #23
 800ce70:	d51c      	bpl.n	800ceac <_scanf_float+0x140>
 800ce72:	2380      	movs	r3, #128	; 0x80
 800ce74:	4399      	bics	r1, r3
 800ce76:	9b01      	ldr	r3, [sp, #4]
 800ce78:	6039      	str	r1, [r7, #0]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	9301      	str	r3, [sp, #4]
 800ce7e:	9b06      	ldr	r3, [sp, #24]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d003      	beq.n	800ce8c <_scanf_float+0x120>
 800ce84:	3b01      	subs	r3, #1
 800ce86:	3201      	adds	r2, #1
 800ce88:	9306      	str	r3, [sp, #24]
 800ce8a:	60ba      	str	r2, [r7, #8]
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	3b01      	subs	r3, #1
 800ce90:	60bb      	str	r3, [r7, #8]
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	3301      	adds	r3, #1
 800ce96:	613b      	str	r3, [r7, #16]
 800ce98:	6873      	ldr	r3, [r6, #4]
 800ce9a:	3b01      	subs	r3, #1
 800ce9c:	6073      	str	r3, [r6, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	dc00      	bgt.n	800cea4 <_scanf_float+0x138>
 800cea2:	e086      	b.n	800cfb2 <_scanf_float+0x246>
 800cea4:	6833      	ldr	r3, [r6, #0]
 800cea6:	3301      	adds	r3, #1
 800cea8:	6033      	str	r3, [r6, #0]
 800ceaa:	e782      	b.n	800cdb2 <_scanf_float+0x46>
 800ceac:	9a03      	ldr	r2, [sp, #12]
 800ceae:	1912      	adds	r2, r2, r4
 800ceb0:	2a00      	cmp	r2, #0
 800ceb2:	d18c      	bne.n	800cdce <_scanf_float+0x62>
 800ceb4:	683a      	ldr	r2, [r7, #0]
 800ceb6:	496c      	ldr	r1, [pc, #432]	; (800d068 <_scanf_float+0x2fc>)
 800ceb8:	400a      	ands	r2, r1
 800ceba:	603a      	str	r2, [r7, #0]
 800cebc:	702b      	strb	r3, [r5, #0]
 800cebe:	3501      	adds	r5, #1
 800cec0:	e7e4      	b.n	800ce8c <_scanf_float+0x120>
 800cec2:	2180      	movs	r1, #128	; 0x80
 800cec4:	683a      	ldr	r2, [r7, #0]
 800cec6:	420a      	tst	r2, r1
 800cec8:	d081      	beq.n	800cdce <_scanf_float+0x62>
 800ceca:	438a      	bics	r2, r1
 800cecc:	e7f5      	b.n	800ceba <_scanf_float+0x14e>
 800cece:	9a03      	ldr	r2, [sp, #12]
 800ced0:	2a00      	cmp	r2, #0
 800ced2:	d10f      	bne.n	800cef4 <_scanf_float+0x188>
 800ced4:	9a01      	ldr	r2, [sp, #4]
 800ced6:	2a00      	cmp	r2, #0
 800ced8:	d10f      	bne.n	800cefa <_scanf_float+0x18e>
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	21e0      	movs	r1, #224	; 0xe0
 800cede:	0010      	movs	r0, r2
 800cee0:	00c9      	lsls	r1, r1, #3
 800cee2:	4008      	ands	r0, r1
 800cee4:	4288      	cmp	r0, r1
 800cee6:	d108      	bne.n	800cefa <_scanf_float+0x18e>
 800cee8:	4960      	ldr	r1, [pc, #384]	; (800d06c <_scanf_float+0x300>)
 800ceea:	400a      	ands	r2, r1
 800ceec:	603a      	str	r2, [r7, #0]
 800ceee:	2201      	movs	r2, #1
 800cef0:	9203      	str	r2, [sp, #12]
 800cef2:	e7e3      	b.n	800cebc <_scanf_float+0x150>
 800cef4:	9a03      	ldr	r2, [sp, #12]
 800cef6:	2a02      	cmp	r2, #2
 800cef8:	d059      	beq.n	800cfae <_scanf_float+0x242>
 800cefa:	2c01      	cmp	r4, #1
 800cefc:	d002      	beq.n	800cf04 <_scanf_float+0x198>
 800cefe:	2c04      	cmp	r4, #4
 800cf00:	d000      	beq.n	800cf04 <_scanf_float+0x198>
 800cf02:	e764      	b.n	800cdce <_scanf_float+0x62>
 800cf04:	3401      	adds	r4, #1
 800cf06:	b2e4      	uxtb	r4, r4
 800cf08:	e7d8      	b.n	800cebc <_scanf_float+0x150>
 800cf0a:	9a03      	ldr	r2, [sp, #12]
 800cf0c:	2a01      	cmp	r2, #1
 800cf0e:	d000      	beq.n	800cf12 <_scanf_float+0x1a6>
 800cf10:	e75d      	b.n	800cdce <_scanf_float+0x62>
 800cf12:	2202      	movs	r2, #2
 800cf14:	e7ec      	b.n	800cef0 <_scanf_float+0x184>
 800cf16:	2c00      	cmp	r4, #0
 800cf18:	d110      	bne.n	800cf3c <_scanf_float+0x1d0>
 800cf1a:	9a01      	ldr	r2, [sp, #4]
 800cf1c:	2a00      	cmp	r2, #0
 800cf1e:	d000      	beq.n	800cf22 <_scanf_float+0x1b6>
 800cf20:	e758      	b.n	800cdd4 <_scanf_float+0x68>
 800cf22:	683a      	ldr	r2, [r7, #0]
 800cf24:	21e0      	movs	r1, #224	; 0xe0
 800cf26:	0010      	movs	r0, r2
 800cf28:	00c9      	lsls	r1, r1, #3
 800cf2a:	4008      	ands	r0, r1
 800cf2c:	4288      	cmp	r0, r1
 800cf2e:	d000      	beq.n	800cf32 <_scanf_float+0x1c6>
 800cf30:	e754      	b.n	800cddc <_scanf_float+0x70>
 800cf32:	494e      	ldr	r1, [pc, #312]	; (800d06c <_scanf_float+0x300>)
 800cf34:	3401      	adds	r4, #1
 800cf36:	400a      	ands	r2, r1
 800cf38:	603a      	str	r2, [r7, #0]
 800cf3a:	e7bf      	b.n	800cebc <_scanf_float+0x150>
 800cf3c:	21fd      	movs	r1, #253	; 0xfd
 800cf3e:	1ee2      	subs	r2, r4, #3
 800cf40:	420a      	tst	r2, r1
 800cf42:	d000      	beq.n	800cf46 <_scanf_float+0x1da>
 800cf44:	e743      	b.n	800cdce <_scanf_float+0x62>
 800cf46:	e7dd      	b.n	800cf04 <_scanf_float+0x198>
 800cf48:	2c02      	cmp	r4, #2
 800cf4a:	d000      	beq.n	800cf4e <_scanf_float+0x1e2>
 800cf4c:	e73f      	b.n	800cdce <_scanf_float+0x62>
 800cf4e:	2403      	movs	r4, #3
 800cf50:	e7b4      	b.n	800cebc <_scanf_float+0x150>
 800cf52:	2c06      	cmp	r4, #6
 800cf54:	d000      	beq.n	800cf58 <_scanf_float+0x1ec>
 800cf56:	e73a      	b.n	800cdce <_scanf_float+0x62>
 800cf58:	2407      	movs	r4, #7
 800cf5a:	e7af      	b.n	800cebc <_scanf_float+0x150>
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	0591      	lsls	r1, r2, #22
 800cf60:	d400      	bmi.n	800cf64 <_scanf_float+0x1f8>
 800cf62:	e734      	b.n	800cdce <_scanf_float+0x62>
 800cf64:	4942      	ldr	r1, [pc, #264]	; (800d070 <_scanf_float+0x304>)
 800cf66:	400a      	ands	r2, r1
 800cf68:	603a      	str	r2, [r7, #0]
 800cf6a:	9a01      	ldr	r2, [sp, #4]
 800cf6c:	9205      	str	r2, [sp, #20]
 800cf6e:	e7a5      	b.n	800cebc <_scanf_float+0x150>
 800cf70:	21a0      	movs	r1, #160	; 0xa0
 800cf72:	2080      	movs	r0, #128	; 0x80
 800cf74:	683a      	ldr	r2, [r7, #0]
 800cf76:	00c9      	lsls	r1, r1, #3
 800cf78:	4011      	ands	r1, r2
 800cf7a:	00c0      	lsls	r0, r0, #3
 800cf7c:	4281      	cmp	r1, r0
 800cf7e:	d006      	beq.n	800cf8e <_scanf_float+0x222>
 800cf80:	4202      	tst	r2, r0
 800cf82:	d100      	bne.n	800cf86 <_scanf_float+0x21a>
 800cf84:	e723      	b.n	800cdce <_scanf_float+0x62>
 800cf86:	9901      	ldr	r1, [sp, #4]
 800cf88:	2900      	cmp	r1, #0
 800cf8a:	d100      	bne.n	800cf8e <_scanf_float+0x222>
 800cf8c:	e726      	b.n	800cddc <_scanf_float+0x70>
 800cf8e:	0591      	lsls	r1, r2, #22
 800cf90:	d404      	bmi.n	800cf9c <_scanf_float+0x230>
 800cf92:	9901      	ldr	r1, [sp, #4]
 800cf94:	9805      	ldr	r0, [sp, #20]
 800cf96:	9509      	str	r5, [sp, #36]	; 0x24
 800cf98:	1a09      	subs	r1, r1, r0
 800cf9a:	9108      	str	r1, [sp, #32]
 800cf9c:	4933      	ldr	r1, [pc, #204]	; (800d06c <_scanf_float+0x300>)
 800cf9e:	400a      	ands	r2, r1
 800cfa0:	21c0      	movs	r1, #192	; 0xc0
 800cfa2:	0049      	lsls	r1, r1, #1
 800cfa4:	430a      	orrs	r2, r1
 800cfa6:	603a      	str	r2, [r7, #0]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	9201      	str	r2, [sp, #4]
 800cfac:	e786      	b.n	800cebc <_scanf_float+0x150>
 800cfae:	2203      	movs	r2, #3
 800cfb0:	e79e      	b.n	800cef0 <_scanf_float+0x184>
 800cfb2:	23c0      	movs	r3, #192	; 0xc0
 800cfb4:	005b      	lsls	r3, r3, #1
 800cfb6:	0031      	movs	r1, r6
 800cfb8:	58fb      	ldr	r3, [r7, r3]
 800cfba:	9802      	ldr	r0, [sp, #8]
 800cfbc:	4798      	blx	r3
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	d100      	bne.n	800cfc4 <_scanf_float+0x258>
 800cfc2:	e6f6      	b.n	800cdb2 <_scanf_float+0x46>
 800cfc4:	e703      	b.n	800cdce <_scanf_float+0x62>
 800cfc6:	3d01      	subs	r5, #1
 800cfc8:	593b      	ldr	r3, [r7, r4]
 800cfca:	0032      	movs	r2, r6
 800cfcc:	7829      	ldrb	r1, [r5, #0]
 800cfce:	9802      	ldr	r0, [sp, #8]
 800cfd0:	4798      	blx	r3
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	613b      	str	r3, [r7, #16]
 800cfd8:	e707      	b.n	800cdea <_scanf_float+0x7e>
 800cfda:	1e63      	subs	r3, r4, #1
 800cfdc:	2b06      	cmp	r3, #6
 800cfde:	d80e      	bhi.n	800cffe <_scanf_float+0x292>
 800cfe0:	9503      	str	r5, [sp, #12]
 800cfe2:	2c02      	cmp	r4, #2
 800cfe4:	d920      	bls.n	800d028 <_scanf_float+0x2bc>
 800cfe6:	1b63      	subs	r3, r4, r5
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	9306      	str	r3, [sp, #24]
 800cfec:	9b03      	ldr	r3, [sp, #12]
 800cfee:	9a06      	ldr	r2, [sp, #24]
 800cff0:	189b      	adds	r3, r3, r2
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	2b03      	cmp	r3, #3
 800cff6:	d827      	bhi.n	800d048 <_scanf_float+0x2dc>
 800cff8:	3c03      	subs	r4, #3
 800cffa:	b2e4      	uxtb	r4, r4
 800cffc:	1b2d      	subs	r5, r5, r4
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	05da      	lsls	r2, r3, #23
 800d002:	d552      	bpl.n	800d0aa <_scanf_float+0x33e>
 800d004:	055b      	lsls	r3, r3, #21
 800d006:	d535      	bpl.n	800d074 <_scanf_float+0x308>
 800d008:	24be      	movs	r4, #190	; 0xbe
 800d00a:	0064      	lsls	r4, r4, #1
 800d00c:	9b04      	ldr	r3, [sp, #16]
 800d00e:	429d      	cmp	r5, r3
 800d010:	d800      	bhi.n	800d014 <_scanf_float+0x2a8>
 800d012:	e6ee      	b.n	800cdf2 <_scanf_float+0x86>
 800d014:	3d01      	subs	r5, #1
 800d016:	593b      	ldr	r3, [r7, r4]
 800d018:	0032      	movs	r2, r6
 800d01a:	7829      	ldrb	r1, [r5, #0]
 800d01c:	9802      	ldr	r0, [sp, #8]
 800d01e:	4798      	blx	r3
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	3b01      	subs	r3, #1
 800d024:	613b      	str	r3, [r7, #16]
 800d026:	e7f1      	b.n	800d00c <_scanf_float+0x2a0>
 800d028:	24be      	movs	r4, #190	; 0xbe
 800d02a:	0064      	lsls	r4, r4, #1
 800d02c:	9b04      	ldr	r3, [sp, #16]
 800d02e:	429d      	cmp	r5, r3
 800d030:	d800      	bhi.n	800d034 <_scanf_float+0x2c8>
 800d032:	e6de      	b.n	800cdf2 <_scanf_float+0x86>
 800d034:	3d01      	subs	r5, #1
 800d036:	593b      	ldr	r3, [r7, r4]
 800d038:	0032      	movs	r2, r6
 800d03a:	7829      	ldrb	r1, [r5, #0]
 800d03c:	9802      	ldr	r0, [sp, #8]
 800d03e:	4798      	blx	r3
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	3b01      	subs	r3, #1
 800d044:	613b      	str	r3, [r7, #16]
 800d046:	e7f1      	b.n	800d02c <_scanf_float+0x2c0>
 800d048:	9b03      	ldr	r3, [sp, #12]
 800d04a:	0032      	movs	r2, r6
 800d04c:	3b01      	subs	r3, #1
 800d04e:	7819      	ldrb	r1, [r3, #0]
 800d050:	9303      	str	r3, [sp, #12]
 800d052:	23be      	movs	r3, #190	; 0xbe
 800d054:	005b      	lsls	r3, r3, #1
 800d056:	58fb      	ldr	r3, [r7, r3]
 800d058:	9802      	ldr	r0, [sp, #8]
 800d05a:	4798      	blx	r3
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	3b01      	subs	r3, #1
 800d060:	613b      	str	r3, [r7, #16]
 800d062:	e7c3      	b.n	800cfec <_scanf_float+0x280>
 800d064:	fffffeff 	.word	0xfffffeff
 800d068:	fffffe7f 	.word	0xfffffe7f
 800d06c:	fffff87f 	.word	0xfffff87f
 800d070:	fffffd7f 	.word	0xfffffd7f
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	1e6c      	subs	r4, r5, #1
 800d078:	7821      	ldrb	r1, [r4, #0]
 800d07a:	3b01      	subs	r3, #1
 800d07c:	613b      	str	r3, [r7, #16]
 800d07e:	2965      	cmp	r1, #101	; 0x65
 800d080:	d00c      	beq.n	800d09c <_scanf_float+0x330>
 800d082:	2945      	cmp	r1, #69	; 0x45
 800d084:	d00a      	beq.n	800d09c <_scanf_float+0x330>
 800d086:	23be      	movs	r3, #190	; 0xbe
 800d088:	005b      	lsls	r3, r3, #1
 800d08a:	58fb      	ldr	r3, [r7, r3]
 800d08c:	0032      	movs	r2, r6
 800d08e:	9802      	ldr	r0, [sp, #8]
 800d090:	4798      	blx	r3
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	1eac      	subs	r4, r5, #2
 800d096:	3b01      	subs	r3, #1
 800d098:	7821      	ldrb	r1, [r4, #0]
 800d09a:	613b      	str	r3, [r7, #16]
 800d09c:	23be      	movs	r3, #190	; 0xbe
 800d09e:	005b      	lsls	r3, r3, #1
 800d0a0:	0032      	movs	r2, r6
 800d0a2:	58fb      	ldr	r3, [r7, r3]
 800d0a4:	9802      	ldr	r0, [sp, #8]
 800d0a6:	4798      	blx	r3
 800d0a8:	0025      	movs	r5, r4
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	2310      	movs	r3, #16
 800d0ae:	0011      	movs	r1, r2
 800d0b0:	4019      	ands	r1, r3
 800d0b2:	9103      	str	r1, [sp, #12]
 800d0b4:	421a      	tst	r2, r3
 800d0b6:	d15b      	bne.n	800d170 <_scanf_float+0x404>
 800d0b8:	22c0      	movs	r2, #192	; 0xc0
 800d0ba:	7029      	strb	r1, [r5, #0]
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	00d2      	lsls	r2, r2, #3
 800d0c0:	4013      	ands	r3, r2
 800d0c2:	2280      	movs	r2, #128	; 0x80
 800d0c4:	00d2      	lsls	r2, r2, #3
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d11d      	bne.n	800d106 <_scanf_float+0x39a>
 800d0ca:	9b05      	ldr	r3, [sp, #20]
 800d0cc:	9a01      	ldr	r2, [sp, #4]
 800d0ce:	9901      	ldr	r1, [sp, #4]
 800d0d0:	1a9a      	subs	r2, r3, r2
 800d0d2:	428b      	cmp	r3, r1
 800d0d4:	d124      	bne.n	800d120 <_scanf_float+0x3b4>
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	9904      	ldr	r1, [sp, #16]
 800d0da:	9802      	ldr	r0, [sp, #8]
 800d0dc:	f7ff f91c 	bl	800c318 <_strtod_r>
 800d0e0:	9b07      	ldr	r3, [sp, #28]
 800d0e2:	683a      	ldr	r2, [r7, #0]
 800d0e4:	0004      	movs	r4, r0
 800d0e6:	000d      	movs	r5, r1
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	0791      	lsls	r1, r2, #30
 800d0ec:	d525      	bpl.n	800d13a <_scanf_float+0x3ce>
 800d0ee:	9907      	ldr	r1, [sp, #28]
 800d0f0:	1d1a      	adds	r2, r3, #4
 800d0f2:	600a      	str	r2, [r1, #0]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	601c      	str	r4, [r3, #0]
 800d0f8:	605d      	str	r5, [r3, #4]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	60fb      	str	r3, [r7, #12]
 800d100:	9803      	ldr	r0, [sp, #12]
 800d102:	b00b      	add	sp, #44	; 0x2c
 800d104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d106:	9b08      	ldr	r3, [sp, #32]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d0e4      	beq.n	800d0d6 <_scanf_float+0x36a>
 800d10c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d10e:	9a03      	ldr	r2, [sp, #12]
 800d110:	1c59      	adds	r1, r3, #1
 800d112:	9802      	ldr	r0, [sp, #8]
 800d114:	230a      	movs	r3, #10
 800d116:	f7ff f99b 	bl	800c450 <_strtol_r>
 800d11a:	9b08      	ldr	r3, [sp, #32]
 800d11c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d11e:	1ac2      	subs	r2, r0, r3
 800d120:	003b      	movs	r3, r7
 800d122:	3370      	adds	r3, #112	; 0x70
 800d124:	33ff      	adds	r3, #255	; 0xff
 800d126:	429d      	cmp	r5, r3
 800d128:	d302      	bcc.n	800d130 <_scanf_float+0x3c4>
 800d12a:	003d      	movs	r5, r7
 800d12c:	356f      	adds	r5, #111	; 0x6f
 800d12e:	35ff      	adds	r5, #255	; 0xff
 800d130:	0028      	movs	r0, r5
 800d132:	4910      	ldr	r1, [pc, #64]	; (800d174 <_scanf_float+0x408>)
 800d134:	f000 f956 	bl	800d3e4 <siprintf>
 800d138:	e7cd      	b.n	800d0d6 <_scanf_float+0x36a>
 800d13a:	1d19      	adds	r1, r3, #4
 800d13c:	0752      	lsls	r2, r2, #29
 800d13e:	d502      	bpl.n	800d146 <_scanf_float+0x3da>
 800d140:	9a07      	ldr	r2, [sp, #28]
 800d142:	6011      	str	r1, [r2, #0]
 800d144:	e7d6      	b.n	800d0f4 <_scanf_float+0x388>
 800d146:	9a07      	ldr	r2, [sp, #28]
 800d148:	0020      	movs	r0, r4
 800d14a:	6011      	str	r1, [r2, #0]
 800d14c:	681e      	ldr	r6, [r3, #0]
 800d14e:	0022      	movs	r2, r4
 800d150:	002b      	movs	r3, r5
 800d152:	0029      	movs	r1, r5
 800d154:	f7f5 ff3c 	bl	8002fd0 <__aeabi_dcmpun>
 800d158:	2800      	cmp	r0, #0
 800d15a:	d004      	beq.n	800d166 <_scanf_float+0x3fa>
 800d15c:	4806      	ldr	r0, [pc, #24]	; (800d178 <_scanf_float+0x40c>)
 800d15e:	f000 fb21 	bl	800d7a4 <nanf>
 800d162:	6030      	str	r0, [r6, #0]
 800d164:	e7c9      	b.n	800d0fa <_scanf_float+0x38e>
 800d166:	0020      	movs	r0, r4
 800d168:	0029      	movs	r1, r5
 800d16a:	f7f6 f823 	bl	80031b4 <__aeabi_d2f>
 800d16e:	e7f8      	b.n	800d162 <_scanf_float+0x3f6>
 800d170:	2300      	movs	r3, #0
 800d172:	e63f      	b.n	800cdf4 <_scanf_float+0x88>
 800d174:	080106bd 	.word	0x080106bd
 800d178:	08010958 	.word	0x08010958

0800d17c <std>:
 800d17c:	2300      	movs	r3, #0
 800d17e:	b510      	push	{r4, lr}
 800d180:	0004      	movs	r4, r0
 800d182:	6003      	str	r3, [r0, #0]
 800d184:	6043      	str	r3, [r0, #4]
 800d186:	6083      	str	r3, [r0, #8]
 800d188:	8181      	strh	r1, [r0, #12]
 800d18a:	6643      	str	r3, [r0, #100]	; 0x64
 800d18c:	81c2      	strh	r2, [r0, #14]
 800d18e:	6103      	str	r3, [r0, #16]
 800d190:	6143      	str	r3, [r0, #20]
 800d192:	6183      	str	r3, [r0, #24]
 800d194:	0019      	movs	r1, r3
 800d196:	2208      	movs	r2, #8
 800d198:	305c      	adds	r0, #92	; 0x5c
 800d19a:	f000 fa35 	bl	800d608 <memset>
 800d19e:	4b0b      	ldr	r3, [pc, #44]	; (800d1cc <std+0x50>)
 800d1a0:	6224      	str	r4, [r4, #32]
 800d1a2:	6263      	str	r3, [r4, #36]	; 0x24
 800d1a4:	4b0a      	ldr	r3, [pc, #40]	; (800d1d0 <std+0x54>)
 800d1a6:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1a8:	4b0a      	ldr	r3, [pc, #40]	; (800d1d4 <std+0x58>)
 800d1aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1ac:	4b0a      	ldr	r3, [pc, #40]	; (800d1d8 <std+0x5c>)
 800d1ae:	6323      	str	r3, [r4, #48]	; 0x30
 800d1b0:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <std+0x60>)
 800d1b2:	429c      	cmp	r4, r3
 800d1b4:	d005      	beq.n	800d1c2 <std+0x46>
 800d1b6:	4b0a      	ldr	r3, [pc, #40]	; (800d1e0 <std+0x64>)
 800d1b8:	429c      	cmp	r4, r3
 800d1ba:	d002      	beq.n	800d1c2 <std+0x46>
 800d1bc:	4b09      	ldr	r3, [pc, #36]	; (800d1e4 <std+0x68>)
 800d1be:	429c      	cmp	r4, r3
 800d1c0:	d103      	bne.n	800d1ca <std+0x4e>
 800d1c2:	0020      	movs	r0, r4
 800d1c4:	3058      	adds	r0, #88	; 0x58
 800d1c6:	f000 facf 	bl	800d768 <__retarget_lock_init_recursive>
 800d1ca:	bd10      	pop	{r4, pc}
 800d1cc:	0800d425 	.word	0x0800d425
 800d1d0:	0800d44d 	.word	0x0800d44d
 800d1d4:	0800d485 	.word	0x0800d485
 800d1d8:	0800d4b1 	.word	0x0800d4b1
 800d1dc:	20000b28 	.word	0x20000b28
 800d1e0:	20000b90 	.word	0x20000b90
 800d1e4:	20000bf8 	.word	0x20000bf8

0800d1e8 <stdio_exit_handler>:
 800d1e8:	b510      	push	{r4, lr}
 800d1ea:	4a03      	ldr	r2, [pc, #12]	; (800d1f8 <stdio_exit_handler+0x10>)
 800d1ec:	4903      	ldr	r1, [pc, #12]	; (800d1fc <stdio_exit_handler+0x14>)
 800d1ee:	4804      	ldr	r0, [pc, #16]	; (800d200 <stdio_exit_handler+0x18>)
 800d1f0:	f000 f86c 	bl	800d2cc <_fwalk_sglue>
 800d1f4:	bd10      	pop	{r4, pc}
 800d1f6:	46c0      	nop			; (mov r8, r8)
 800d1f8:	2000000c 	.word	0x2000000c
 800d1fc:	0800fdc5 	.word	0x0800fdc5
 800d200:	20000184 	.word	0x20000184

0800d204 <cleanup_stdio>:
 800d204:	6841      	ldr	r1, [r0, #4]
 800d206:	4b0b      	ldr	r3, [pc, #44]	; (800d234 <cleanup_stdio+0x30>)
 800d208:	b510      	push	{r4, lr}
 800d20a:	0004      	movs	r4, r0
 800d20c:	4299      	cmp	r1, r3
 800d20e:	d001      	beq.n	800d214 <cleanup_stdio+0x10>
 800d210:	f002 fdd8 	bl	800fdc4 <_fflush_r>
 800d214:	68a1      	ldr	r1, [r4, #8]
 800d216:	4b08      	ldr	r3, [pc, #32]	; (800d238 <cleanup_stdio+0x34>)
 800d218:	4299      	cmp	r1, r3
 800d21a:	d002      	beq.n	800d222 <cleanup_stdio+0x1e>
 800d21c:	0020      	movs	r0, r4
 800d21e:	f002 fdd1 	bl	800fdc4 <_fflush_r>
 800d222:	68e1      	ldr	r1, [r4, #12]
 800d224:	4b05      	ldr	r3, [pc, #20]	; (800d23c <cleanup_stdio+0x38>)
 800d226:	4299      	cmp	r1, r3
 800d228:	d002      	beq.n	800d230 <cleanup_stdio+0x2c>
 800d22a:	0020      	movs	r0, r4
 800d22c:	f002 fdca 	bl	800fdc4 <_fflush_r>
 800d230:	bd10      	pop	{r4, pc}
 800d232:	46c0      	nop			; (mov r8, r8)
 800d234:	20000b28 	.word	0x20000b28
 800d238:	20000b90 	.word	0x20000b90
 800d23c:	20000bf8 	.word	0x20000bf8

0800d240 <global_stdio_init.part.0>:
 800d240:	b510      	push	{r4, lr}
 800d242:	4b09      	ldr	r3, [pc, #36]	; (800d268 <global_stdio_init.part.0+0x28>)
 800d244:	4a09      	ldr	r2, [pc, #36]	; (800d26c <global_stdio_init.part.0+0x2c>)
 800d246:	2104      	movs	r1, #4
 800d248:	601a      	str	r2, [r3, #0]
 800d24a:	4809      	ldr	r0, [pc, #36]	; (800d270 <global_stdio_init.part.0+0x30>)
 800d24c:	2200      	movs	r2, #0
 800d24e:	f7ff ff95 	bl	800d17c <std>
 800d252:	2201      	movs	r2, #1
 800d254:	2109      	movs	r1, #9
 800d256:	4807      	ldr	r0, [pc, #28]	; (800d274 <global_stdio_init.part.0+0x34>)
 800d258:	f7ff ff90 	bl	800d17c <std>
 800d25c:	2202      	movs	r2, #2
 800d25e:	2112      	movs	r1, #18
 800d260:	4805      	ldr	r0, [pc, #20]	; (800d278 <global_stdio_init.part.0+0x38>)
 800d262:	f7ff ff8b 	bl	800d17c <std>
 800d266:	bd10      	pop	{r4, pc}
 800d268:	20000c60 	.word	0x20000c60
 800d26c:	0800d1e9 	.word	0x0800d1e9
 800d270:	20000b28 	.word	0x20000b28
 800d274:	20000b90 	.word	0x20000b90
 800d278:	20000bf8 	.word	0x20000bf8

0800d27c <__sfp_lock_acquire>:
 800d27c:	b510      	push	{r4, lr}
 800d27e:	4802      	ldr	r0, [pc, #8]	; (800d288 <__sfp_lock_acquire+0xc>)
 800d280:	f000 fa73 	bl	800d76a <__retarget_lock_acquire_recursive>
 800d284:	bd10      	pop	{r4, pc}
 800d286:	46c0      	nop			; (mov r8, r8)
 800d288:	20000c69 	.word	0x20000c69

0800d28c <__sfp_lock_release>:
 800d28c:	b510      	push	{r4, lr}
 800d28e:	4802      	ldr	r0, [pc, #8]	; (800d298 <__sfp_lock_release+0xc>)
 800d290:	f000 fa6c 	bl	800d76c <__retarget_lock_release_recursive>
 800d294:	bd10      	pop	{r4, pc}
 800d296:	46c0      	nop			; (mov r8, r8)
 800d298:	20000c69 	.word	0x20000c69

0800d29c <__sinit>:
 800d29c:	b510      	push	{r4, lr}
 800d29e:	0004      	movs	r4, r0
 800d2a0:	f7ff ffec 	bl	800d27c <__sfp_lock_acquire>
 800d2a4:	6a23      	ldr	r3, [r4, #32]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d002      	beq.n	800d2b0 <__sinit+0x14>
 800d2aa:	f7ff ffef 	bl	800d28c <__sfp_lock_release>
 800d2ae:	bd10      	pop	{r4, pc}
 800d2b0:	4b04      	ldr	r3, [pc, #16]	; (800d2c4 <__sinit+0x28>)
 800d2b2:	6223      	str	r3, [r4, #32]
 800d2b4:	4b04      	ldr	r3, [pc, #16]	; (800d2c8 <__sinit+0x2c>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1f6      	bne.n	800d2aa <__sinit+0xe>
 800d2bc:	f7ff ffc0 	bl	800d240 <global_stdio_init.part.0>
 800d2c0:	e7f3      	b.n	800d2aa <__sinit+0xe>
 800d2c2:	46c0      	nop			; (mov r8, r8)
 800d2c4:	0800d205 	.word	0x0800d205
 800d2c8:	20000c60 	.word	0x20000c60

0800d2cc <_fwalk_sglue>:
 800d2cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2ce:	0014      	movs	r4, r2
 800d2d0:	2600      	movs	r6, #0
 800d2d2:	9000      	str	r0, [sp, #0]
 800d2d4:	9101      	str	r1, [sp, #4]
 800d2d6:	68a5      	ldr	r5, [r4, #8]
 800d2d8:	6867      	ldr	r7, [r4, #4]
 800d2da:	3f01      	subs	r7, #1
 800d2dc:	d504      	bpl.n	800d2e8 <_fwalk_sglue+0x1c>
 800d2de:	6824      	ldr	r4, [r4, #0]
 800d2e0:	2c00      	cmp	r4, #0
 800d2e2:	d1f8      	bne.n	800d2d6 <_fwalk_sglue+0xa>
 800d2e4:	0030      	movs	r0, r6
 800d2e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d2e8:	89ab      	ldrh	r3, [r5, #12]
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d908      	bls.n	800d300 <_fwalk_sglue+0x34>
 800d2ee:	220e      	movs	r2, #14
 800d2f0:	5eab      	ldrsh	r3, [r5, r2]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	d004      	beq.n	800d300 <_fwalk_sglue+0x34>
 800d2f6:	0029      	movs	r1, r5
 800d2f8:	9800      	ldr	r0, [sp, #0]
 800d2fa:	9b01      	ldr	r3, [sp, #4]
 800d2fc:	4798      	blx	r3
 800d2fe:	4306      	orrs	r6, r0
 800d300:	3568      	adds	r5, #104	; 0x68
 800d302:	e7ea      	b.n	800d2da <_fwalk_sglue+0xe>

0800d304 <iprintf>:
 800d304:	b40f      	push	{r0, r1, r2, r3}
 800d306:	b507      	push	{r0, r1, r2, lr}
 800d308:	4905      	ldr	r1, [pc, #20]	; (800d320 <iprintf+0x1c>)
 800d30a:	ab04      	add	r3, sp, #16
 800d30c:	6808      	ldr	r0, [r1, #0]
 800d30e:	cb04      	ldmia	r3!, {r2}
 800d310:	6881      	ldr	r1, [r0, #8]
 800d312:	9301      	str	r3, [sp, #4]
 800d314:	f002 fbb0 	bl	800fa78 <_vfiprintf_r>
 800d318:	b003      	add	sp, #12
 800d31a:	bc08      	pop	{r3}
 800d31c:	b004      	add	sp, #16
 800d31e:	4718      	bx	r3
 800d320:	200001d0 	.word	0x200001d0

0800d324 <_puts_r>:
 800d324:	6a03      	ldr	r3, [r0, #32]
 800d326:	b570      	push	{r4, r5, r6, lr}
 800d328:	0005      	movs	r5, r0
 800d32a:	000e      	movs	r6, r1
 800d32c:	6884      	ldr	r4, [r0, #8]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d101      	bne.n	800d336 <_puts_r+0x12>
 800d332:	f7ff ffb3 	bl	800d29c <__sinit>
 800d336:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d338:	07db      	lsls	r3, r3, #31
 800d33a:	d405      	bmi.n	800d348 <_puts_r+0x24>
 800d33c:	89a3      	ldrh	r3, [r4, #12]
 800d33e:	059b      	lsls	r3, r3, #22
 800d340:	d402      	bmi.n	800d348 <_puts_r+0x24>
 800d342:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d344:	f000 fa11 	bl	800d76a <__retarget_lock_acquire_recursive>
 800d348:	89a3      	ldrh	r3, [r4, #12]
 800d34a:	071b      	lsls	r3, r3, #28
 800d34c:	d502      	bpl.n	800d354 <_puts_r+0x30>
 800d34e:	6923      	ldr	r3, [r4, #16]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d11f      	bne.n	800d394 <_puts_r+0x70>
 800d354:	0021      	movs	r1, r4
 800d356:	0028      	movs	r0, r5
 800d358:	f000 f8f2 	bl	800d540 <__swsetup_r>
 800d35c:	2800      	cmp	r0, #0
 800d35e:	d019      	beq.n	800d394 <_puts_r+0x70>
 800d360:	2501      	movs	r5, #1
 800d362:	426d      	negs	r5, r5
 800d364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d366:	07db      	lsls	r3, r3, #31
 800d368:	d405      	bmi.n	800d376 <_puts_r+0x52>
 800d36a:	89a3      	ldrh	r3, [r4, #12]
 800d36c:	059b      	lsls	r3, r3, #22
 800d36e:	d402      	bmi.n	800d376 <_puts_r+0x52>
 800d370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d372:	f000 f9fb 	bl	800d76c <__retarget_lock_release_recursive>
 800d376:	0028      	movs	r0, r5
 800d378:	bd70      	pop	{r4, r5, r6, pc}
 800d37a:	3601      	adds	r6, #1
 800d37c:	60a3      	str	r3, [r4, #8]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	da04      	bge.n	800d38c <_puts_r+0x68>
 800d382:	69a2      	ldr	r2, [r4, #24]
 800d384:	429a      	cmp	r2, r3
 800d386:	dc16      	bgt.n	800d3b6 <_puts_r+0x92>
 800d388:	290a      	cmp	r1, #10
 800d38a:	d014      	beq.n	800d3b6 <_puts_r+0x92>
 800d38c:	6823      	ldr	r3, [r4, #0]
 800d38e:	1c5a      	adds	r2, r3, #1
 800d390:	6022      	str	r2, [r4, #0]
 800d392:	7019      	strb	r1, [r3, #0]
 800d394:	68a3      	ldr	r3, [r4, #8]
 800d396:	7831      	ldrb	r1, [r6, #0]
 800d398:	3b01      	subs	r3, #1
 800d39a:	2900      	cmp	r1, #0
 800d39c:	d1ed      	bne.n	800d37a <_puts_r+0x56>
 800d39e:	60a3      	str	r3, [r4, #8]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	da0f      	bge.n	800d3c4 <_puts_r+0xa0>
 800d3a4:	0028      	movs	r0, r5
 800d3a6:	0022      	movs	r2, r4
 800d3a8:	310a      	adds	r1, #10
 800d3aa:	f000 f887 	bl	800d4bc <__swbuf_r>
 800d3ae:	250a      	movs	r5, #10
 800d3b0:	3001      	adds	r0, #1
 800d3b2:	d1d7      	bne.n	800d364 <_puts_r+0x40>
 800d3b4:	e7d4      	b.n	800d360 <_puts_r+0x3c>
 800d3b6:	0022      	movs	r2, r4
 800d3b8:	0028      	movs	r0, r5
 800d3ba:	f000 f87f 	bl	800d4bc <__swbuf_r>
 800d3be:	3001      	adds	r0, #1
 800d3c0:	d1e8      	bne.n	800d394 <_puts_r+0x70>
 800d3c2:	e7cd      	b.n	800d360 <_puts_r+0x3c>
 800d3c4:	250a      	movs	r5, #10
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	1c5a      	adds	r2, r3, #1
 800d3ca:	6022      	str	r2, [r4, #0]
 800d3cc:	701d      	strb	r5, [r3, #0]
 800d3ce:	e7c9      	b.n	800d364 <_puts_r+0x40>

0800d3d0 <puts>:
 800d3d0:	b510      	push	{r4, lr}
 800d3d2:	4b03      	ldr	r3, [pc, #12]	; (800d3e0 <puts+0x10>)
 800d3d4:	0001      	movs	r1, r0
 800d3d6:	6818      	ldr	r0, [r3, #0]
 800d3d8:	f7ff ffa4 	bl	800d324 <_puts_r>
 800d3dc:	bd10      	pop	{r4, pc}
 800d3de:	46c0      	nop			; (mov r8, r8)
 800d3e0:	200001d0 	.word	0x200001d0

0800d3e4 <siprintf>:
 800d3e4:	b40e      	push	{r1, r2, r3}
 800d3e6:	b500      	push	{lr}
 800d3e8:	490b      	ldr	r1, [pc, #44]	; (800d418 <siprintf+0x34>)
 800d3ea:	b09c      	sub	sp, #112	; 0x70
 800d3ec:	ab1d      	add	r3, sp, #116	; 0x74
 800d3ee:	9002      	str	r0, [sp, #8]
 800d3f0:	9006      	str	r0, [sp, #24]
 800d3f2:	9107      	str	r1, [sp, #28]
 800d3f4:	9104      	str	r1, [sp, #16]
 800d3f6:	4809      	ldr	r0, [pc, #36]	; (800d41c <siprintf+0x38>)
 800d3f8:	4909      	ldr	r1, [pc, #36]	; (800d420 <siprintf+0x3c>)
 800d3fa:	cb04      	ldmia	r3!, {r2}
 800d3fc:	9105      	str	r1, [sp, #20]
 800d3fe:	6800      	ldr	r0, [r0, #0]
 800d400:	a902      	add	r1, sp, #8
 800d402:	9301      	str	r3, [sp, #4]
 800d404:	f002 fa10 	bl	800f828 <_svfiprintf_r>
 800d408:	2200      	movs	r2, #0
 800d40a:	9b02      	ldr	r3, [sp, #8]
 800d40c:	701a      	strb	r2, [r3, #0]
 800d40e:	b01c      	add	sp, #112	; 0x70
 800d410:	bc08      	pop	{r3}
 800d412:	b003      	add	sp, #12
 800d414:	4718      	bx	r3
 800d416:	46c0      	nop			; (mov r8, r8)
 800d418:	7fffffff 	.word	0x7fffffff
 800d41c:	200001d0 	.word	0x200001d0
 800d420:	ffff0208 	.word	0xffff0208

0800d424 <__sread>:
 800d424:	b570      	push	{r4, r5, r6, lr}
 800d426:	000c      	movs	r4, r1
 800d428:	250e      	movs	r5, #14
 800d42a:	5f49      	ldrsh	r1, [r1, r5]
 800d42c:	f000 f94a 	bl	800d6c4 <_read_r>
 800d430:	2800      	cmp	r0, #0
 800d432:	db03      	blt.n	800d43c <__sread+0x18>
 800d434:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d436:	181b      	adds	r3, r3, r0
 800d438:	6563      	str	r3, [r4, #84]	; 0x54
 800d43a:	bd70      	pop	{r4, r5, r6, pc}
 800d43c:	89a3      	ldrh	r3, [r4, #12]
 800d43e:	4a02      	ldr	r2, [pc, #8]	; (800d448 <__sread+0x24>)
 800d440:	4013      	ands	r3, r2
 800d442:	81a3      	strh	r3, [r4, #12]
 800d444:	e7f9      	b.n	800d43a <__sread+0x16>
 800d446:	46c0      	nop			; (mov r8, r8)
 800d448:	ffffefff 	.word	0xffffefff

0800d44c <__swrite>:
 800d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44e:	001f      	movs	r7, r3
 800d450:	898b      	ldrh	r3, [r1, #12]
 800d452:	0005      	movs	r5, r0
 800d454:	000c      	movs	r4, r1
 800d456:	0016      	movs	r6, r2
 800d458:	05db      	lsls	r3, r3, #23
 800d45a:	d505      	bpl.n	800d468 <__swrite+0x1c>
 800d45c:	230e      	movs	r3, #14
 800d45e:	5ec9      	ldrsh	r1, [r1, r3]
 800d460:	2200      	movs	r2, #0
 800d462:	2302      	movs	r3, #2
 800d464:	f000 f91a 	bl	800d69c <_lseek_r>
 800d468:	89a3      	ldrh	r3, [r4, #12]
 800d46a:	4a05      	ldr	r2, [pc, #20]	; (800d480 <__swrite+0x34>)
 800d46c:	0028      	movs	r0, r5
 800d46e:	4013      	ands	r3, r2
 800d470:	81a3      	strh	r3, [r4, #12]
 800d472:	0032      	movs	r2, r6
 800d474:	230e      	movs	r3, #14
 800d476:	5ee1      	ldrsh	r1, [r4, r3]
 800d478:	003b      	movs	r3, r7
 800d47a:	f000 f937 	bl	800d6ec <_write_r>
 800d47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d480:	ffffefff 	.word	0xffffefff

0800d484 <__sseek>:
 800d484:	b570      	push	{r4, r5, r6, lr}
 800d486:	000c      	movs	r4, r1
 800d488:	250e      	movs	r5, #14
 800d48a:	5f49      	ldrsh	r1, [r1, r5]
 800d48c:	f000 f906 	bl	800d69c <_lseek_r>
 800d490:	89a3      	ldrh	r3, [r4, #12]
 800d492:	1c42      	adds	r2, r0, #1
 800d494:	d103      	bne.n	800d49e <__sseek+0x1a>
 800d496:	4a05      	ldr	r2, [pc, #20]	; (800d4ac <__sseek+0x28>)
 800d498:	4013      	ands	r3, r2
 800d49a:	81a3      	strh	r3, [r4, #12]
 800d49c:	bd70      	pop	{r4, r5, r6, pc}
 800d49e:	2280      	movs	r2, #128	; 0x80
 800d4a0:	0152      	lsls	r2, r2, #5
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	81a3      	strh	r3, [r4, #12]
 800d4a6:	6560      	str	r0, [r4, #84]	; 0x54
 800d4a8:	e7f8      	b.n	800d49c <__sseek+0x18>
 800d4aa:	46c0      	nop			; (mov r8, r8)
 800d4ac:	ffffefff 	.word	0xffffefff

0800d4b0 <__sclose>:
 800d4b0:	b510      	push	{r4, lr}
 800d4b2:	230e      	movs	r3, #14
 800d4b4:	5ec9      	ldrsh	r1, [r1, r3]
 800d4b6:	f000 f8df 	bl	800d678 <_close_r>
 800d4ba:	bd10      	pop	{r4, pc}

0800d4bc <__swbuf_r>:
 800d4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4be:	0006      	movs	r6, r0
 800d4c0:	000d      	movs	r5, r1
 800d4c2:	0014      	movs	r4, r2
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	d004      	beq.n	800d4d2 <__swbuf_r+0x16>
 800d4c8:	6a03      	ldr	r3, [r0, #32]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d101      	bne.n	800d4d2 <__swbuf_r+0x16>
 800d4ce:	f7ff fee5 	bl	800d29c <__sinit>
 800d4d2:	69a3      	ldr	r3, [r4, #24]
 800d4d4:	60a3      	str	r3, [r4, #8]
 800d4d6:	89a3      	ldrh	r3, [r4, #12]
 800d4d8:	071b      	lsls	r3, r3, #28
 800d4da:	d528      	bpl.n	800d52e <__swbuf_r+0x72>
 800d4dc:	6923      	ldr	r3, [r4, #16]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d025      	beq.n	800d52e <__swbuf_r+0x72>
 800d4e2:	6923      	ldr	r3, [r4, #16]
 800d4e4:	6820      	ldr	r0, [r4, #0]
 800d4e6:	b2ef      	uxtb	r7, r5
 800d4e8:	1ac0      	subs	r0, r0, r3
 800d4ea:	6963      	ldr	r3, [r4, #20]
 800d4ec:	b2ed      	uxtb	r5, r5
 800d4ee:	4283      	cmp	r3, r0
 800d4f0:	dc05      	bgt.n	800d4fe <__swbuf_r+0x42>
 800d4f2:	0021      	movs	r1, r4
 800d4f4:	0030      	movs	r0, r6
 800d4f6:	f002 fc65 	bl	800fdc4 <_fflush_r>
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	d11d      	bne.n	800d53a <__swbuf_r+0x7e>
 800d4fe:	68a3      	ldr	r3, [r4, #8]
 800d500:	3001      	adds	r0, #1
 800d502:	3b01      	subs	r3, #1
 800d504:	60a3      	str	r3, [r4, #8]
 800d506:	6823      	ldr	r3, [r4, #0]
 800d508:	1c5a      	adds	r2, r3, #1
 800d50a:	6022      	str	r2, [r4, #0]
 800d50c:	701f      	strb	r7, [r3, #0]
 800d50e:	6963      	ldr	r3, [r4, #20]
 800d510:	4283      	cmp	r3, r0
 800d512:	d004      	beq.n	800d51e <__swbuf_r+0x62>
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	07db      	lsls	r3, r3, #31
 800d518:	d507      	bpl.n	800d52a <__swbuf_r+0x6e>
 800d51a:	2d0a      	cmp	r5, #10
 800d51c:	d105      	bne.n	800d52a <__swbuf_r+0x6e>
 800d51e:	0021      	movs	r1, r4
 800d520:	0030      	movs	r0, r6
 800d522:	f002 fc4f 	bl	800fdc4 <_fflush_r>
 800d526:	2800      	cmp	r0, #0
 800d528:	d107      	bne.n	800d53a <__swbuf_r+0x7e>
 800d52a:	0028      	movs	r0, r5
 800d52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d52e:	0021      	movs	r1, r4
 800d530:	0030      	movs	r0, r6
 800d532:	f000 f805 	bl	800d540 <__swsetup_r>
 800d536:	2800      	cmp	r0, #0
 800d538:	d0d3      	beq.n	800d4e2 <__swbuf_r+0x26>
 800d53a:	2501      	movs	r5, #1
 800d53c:	426d      	negs	r5, r5
 800d53e:	e7f4      	b.n	800d52a <__swbuf_r+0x6e>

0800d540 <__swsetup_r>:
 800d540:	4b30      	ldr	r3, [pc, #192]	; (800d604 <__swsetup_r+0xc4>)
 800d542:	b570      	push	{r4, r5, r6, lr}
 800d544:	0005      	movs	r5, r0
 800d546:	6818      	ldr	r0, [r3, #0]
 800d548:	000c      	movs	r4, r1
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d004      	beq.n	800d558 <__swsetup_r+0x18>
 800d54e:	6a03      	ldr	r3, [r0, #32]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d101      	bne.n	800d558 <__swsetup_r+0x18>
 800d554:	f7ff fea2 	bl	800d29c <__sinit>
 800d558:	230c      	movs	r3, #12
 800d55a:	5ee2      	ldrsh	r2, [r4, r3]
 800d55c:	b293      	uxth	r3, r2
 800d55e:	0711      	lsls	r1, r2, #28
 800d560:	d423      	bmi.n	800d5aa <__swsetup_r+0x6a>
 800d562:	06d9      	lsls	r1, r3, #27
 800d564:	d407      	bmi.n	800d576 <__swsetup_r+0x36>
 800d566:	2309      	movs	r3, #9
 800d568:	2001      	movs	r0, #1
 800d56a:	602b      	str	r3, [r5, #0]
 800d56c:	3337      	adds	r3, #55	; 0x37
 800d56e:	4313      	orrs	r3, r2
 800d570:	81a3      	strh	r3, [r4, #12]
 800d572:	4240      	negs	r0, r0
 800d574:	bd70      	pop	{r4, r5, r6, pc}
 800d576:	075b      	lsls	r3, r3, #29
 800d578:	d513      	bpl.n	800d5a2 <__swsetup_r+0x62>
 800d57a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d57c:	2900      	cmp	r1, #0
 800d57e:	d008      	beq.n	800d592 <__swsetup_r+0x52>
 800d580:	0023      	movs	r3, r4
 800d582:	3344      	adds	r3, #68	; 0x44
 800d584:	4299      	cmp	r1, r3
 800d586:	d002      	beq.n	800d58e <__swsetup_r+0x4e>
 800d588:	0028      	movs	r0, r5
 800d58a:	f000 ffad 	bl	800e4e8 <_free_r>
 800d58e:	2300      	movs	r3, #0
 800d590:	6363      	str	r3, [r4, #52]	; 0x34
 800d592:	2224      	movs	r2, #36	; 0x24
 800d594:	89a3      	ldrh	r3, [r4, #12]
 800d596:	4393      	bics	r3, r2
 800d598:	81a3      	strh	r3, [r4, #12]
 800d59a:	2300      	movs	r3, #0
 800d59c:	6063      	str	r3, [r4, #4]
 800d59e:	6923      	ldr	r3, [r4, #16]
 800d5a0:	6023      	str	r3, [r4, #0]
 800d5a2:	2308      	movs	r3, #8
 800d5a4:	89a2      	ldrh	r2, [r4, #12]
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	81a3      	strh	r3, [r4, #12]
 800d5aa:	6923      	ldr	r3, [r4, #16]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d10b      	bne.n	800d5c8 <__swsetup_r+0x88>
 800d5b0:	21a0      	movs	r1, #160	; 0xa0
 800d5b2:	2280      	movs	r2, #128	; 0x80
 800d5b4:	89a3      	ldrh	r3, [r4, #12]
 800d5b6:	0089      	lsls	r1, r1, #2
 800d5b8:	0092      	lsls	r2, r2, #2
 800d5ba:	400b      	ands	r3, r1
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d003      	beq.n	800d5c8 <__swsetup_r+0x88>
 800d5c0:	0021      	movs	r1, r4
 800d5c2:	0028      	movs	r0, r5
 800d5c4:	f002 fc52 	bl	800fe6c <__smakebuf_r>
 800d5c8:	220c      	movs	r2, #12
 800d5ca:	5ea3      	ldrsh	r3, [r4, r2]
 800d5cc:	2001      	movs	r0, #1
 800d5ce:	001a      	movs	r2, r3
 800d5d0:	b299      	uxth	r1, r3
 800d5d2:	4002      	ands	r2, r0
 800d5d4:	4203      	tst	r3, r0
 800d5d6:	d00f      	beq.n	800d5f8 <__swsetup_r+0xb8>
 800d5d8:	2200      	movs	r2, #0
 800d5da:	60a2      	str	r2, [r4, #8]
 800d5dc:	6962      	ldr	r2, [r4, #20]
 800d5de:	4252      	negs	r2, r2
 800d5e0:	61a2      	str	r2, [r4, #24]
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	6922      	ldr	r2, [r4, #16]
 800d5e6:	4282      	cmp	r2, r0
 800d5e8:	d1c4      	bne.n	800d574 <__swsetup_r+0x34>
 800d5ea:	0609      	lsls	r1, r1, #24
 800d5ec:	d5c2      	bpl.n	800d574 <__swsetup_r+0x34>
 800d5ee:	2240      	movs	r2, #64	; 0x40
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	81a3      	strh	r3, [r4, #12]
 800d5f4:	3801      	subs	r0, #1
 800d5f6:	e7bd      	b.n	800d574 <__swsetup_r+0x34>
 800d5f8:	0788      	lsls	r0, r1, #30
 800d5fa:	d400      	bmi.n	800d5fe <__swsetup_r+0xbe>
 800d5fc:	6962      	ldr	r2, [r4, #20]
 800d5fe:	60a2      	str	r2, [r4, #8]
 800d600:	e7ef      	b.n	800d5e2 <__swsetup_r+0xa2>
 800d602:	46c0      	nop			; (mov r8, r8)
 800d604:	200001d0 	.word	0x200001d0

0800d608 <memset>:
 800d608:	0003      	movs	r3, r0
 800d60a:	1882      	adds	r2, r0, r2
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d100      	bne.n	800d612 <memset+0xa>
 800d610:	4770      	bx	lr
 800d612:	7019      	strb	r1, [r3, #0]
 800d614:	3301      	adds	r3, #1
 800d616:	e7f9      	b.n	800d60c <memset+0x4>

0800d618 <strncmp>:
 800d618:	b530      	push	{r4, r5, lr}
 800d61a:	0005      	movs	r5, r0
 800d61c:	1e10      	subs	r0, r2, #0
 800d61e:	d00b      	beq.n	800d638 <strncmp+0x20>
 800d620:	2400      	movs	r4, #0
 800d622:	3a01      	subs	r2, #1
 800d624:	5d2b      	ldrb	r3, [r5, r4]
 800d626:	5d08      	ldrb	r0, [r1, r4]
 800d628:	4283      	cmp	r3, r0
 800d62a:	d104      	bne.n	800d636 <strncmp+0x1e>
 800d62c:	42a2      	cmp	r2, r4
 800d62e:	d002      	beq.n	800d636 <strncmp+0x1e>
 800d630:	3401      	adds	r4, #1
 800d632:	2b00      	cmp	r3, #0
 800d634:	d1f6      	bne.n	800d624 <strncmp+0xc>
 800d636:	1a18      	subs	r0, r3, r0
 800d638:	bd30      	pop	{r4, r5, pc}

0800d63a <strpbrk>:
 800d63a:	b510      	push	{r4, lr}
 800d63c:	7803      	ldrb	r3, [r0, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d013      	beq.n	800d66a <strpbrk+0x30>
 800d642:	000b      	movs	r3, r1
 800d644:	7802      	ldrb	r2, [r0, #0]
 800d646:	2a00      	cmp	r2, #0
 800d648:	d10d      	bne.n	800d666 <strpbrk+0x2c>
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	1e5a      	subs	r2, r3, #1
 800d64e:	4193      	sbcs	r3, r2
 800d650:	425b      	negs	r3, r3
 800d652:	4018      	ands	r0, r3
 800d654:	bd10      	pop	{r4, pc}
 800d656:	4294      	cmp	r4, r2
 800d658:	d0fc      	beq.n	800d654 <strpbrk+0x1a>
 800d65a:	3301      	adds	r3, #1
 800d65c:	781c      	ldrb	r4, [r3, #0]
 800d65e:	2c00      	cmp	r4, #0
 800d660:	d1f9      	bne.n	800d656 <strpbrk+0x1c>
 800d662:	3001      	adds	r0, #1
 800d664:	e7ee      	b.n	800d644 <strpbrk+0xa>
 800d666:	000b      	movs	r3, r1
 800d668:	e7f8      	b.n	800d65c <strpbrk+0x22>
 800d66a:	0018      	movs	r0, r3
 800d66c:	e7f2      	b.n	800d654 <strpbrk+0x1a>
	...

0800d670 <_localeconv_r>:
 800d670:	4800      	ldr	r0, [pc, #0]	; (800d674 <_localeconv_r+0x4>)
 800d672:	4770      	bx	lr
 800d674:	20000108 	.word	0x20000108

0800d678 <_close_r>:
 800d678:	2300      	movs	r3, #0
 800d67a:	b570      	push	{r4, r5, r6, lr}
 800d67c:	4d06      	ldr	r5, [pc, #24]	; (800d698 <_close_r+0x20>)
 800d67e:	0004      	movs	r4, r0
 800d680:	0008      	movs	r0, r1
 800d682:	602b      	str	r3, [r5, #0]
 800d684:	f7f8 fb79 	bl	8005d7a <_close>
 800d688:	1c43      	adds	r3, r0, #1
 800d68a:	d103      	bne.n	800d694 <_close_r+0x1c>
 800d68c:	682b      	ldr	r3, [r5, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d000      	beq.n	800d694 <_close_r+0x1c>
 800d692:	6023      	str	r3, [r4, #0]
 800d694:	bd70      	pop	{r4, r5, r6, pc}
 800d696:	46c0      	nop			; (mov r8, r8)
 800d698:	20000c64 	.word	0x20000c64

0800d69c <_lseek_r>:
 800d69c:	b570      	push	{r4, r5, r6, lr}
 800d69e:	0004      	movs	r4, r0
 800d6a0:	0008      	movs	r0, r1
 800d6a2:	0011      	movs	r1, r2
 800d6a4:	001a      	movs	r2, r3
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	4d05      	ldr	r5, [pc, #20]	; (800d6c0 <_lseek_r+0x24>)
 800d6aa:	602b      	str	r3, [r5, #0]
 800d6ac:	f7f8 fb86 	bl	8005dbc <_lseek>
 800d6b0:	1c43      	adds	r3, r0, #1
 800d6b2:	d103      	bne.n	800d6bc <_lseek_r+0x20>
 800d6b4:	682b      	ldr	r3, [r5, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d000      	beq.n	800d6bc <_lseek_r+0x20>
 800d6ba:	6023      	str	r3, [r4, #0]
 800d6bc:	bd70      	pop	{r4, r5, r6, pc}
 800d6be:	46c0      	nop			; (mov r8, r8)
 800d6c0:	20000c64 	.word	0x20000c64

0800d6c4 <_read_r>:
 800d6c4:	b570      	push	{r4, r5, r6, lr}
 800d6c6:	0004      	movs	r4, r0
 800d6c8:	0008      	movs	r0, r1
 800d6ca:	0011      	movs	r1, r2
 800d6cc:	001a      	movs	r2, r3
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	4d05      	ldr	r5, [pc, #20]	; (800d6e8 <_read_r+0x24>)
 800d6d2:	602b      	str	r3, [r5, #0]
 800d6d4:	f7f8 fb18 	bl	8005d08 <_read>
 800d6d8:	1c43      	adds	r3, r0, #1
 800d6da:	d103      	bne.n	800d6e4 <_read_r+0x20>
 800d6dc:	682b      	ldr	r3, [r5, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d000      	beq.n	800d6e4 <_read_r+0x20>
 800d6e2:	6023      	str	r3, [r4, #0]
 800d6e4:	bd70      	pop	{r4, r5, r6, pc}
 800d6e6:	46c0      	nop			; (mov r8, r8)
 800d6e8:	20000c64 	.word	0x20000c64

0800d6ec <_write_r>:
 800d6ec:	b570      	push	{r4, r5, r6, lr}
 800d6ee:	0004      	movs	r4, r0
 800d6f0:	0008      	movs	r0, r1
 800d6f2:	0011      	movs	r1, r2
 800d6f4:	001a      	movs	r2, r3
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	4d05      	ldr	r5, [pc, #20]	; (800d710 <_write_r+0x24>)
 800d6fa:	602b      	str	r3, [r5, #0]
 800d6fc:	f7f8 fb21 	bl	8005d42 <_write>
 800d700:	1c43      	adds	r3, r0, #1
 800d702:	d103      	bne.n	800d70c <_write_r+0x20>
 800d704:	682b      	ldr	r3, [r5, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d000      	beq.n	800d70c <_write_r+0x20>
 800d70a:	6023      	str	r3, [r4, #0]
 800d70c:	bd70      	pop	{r4, r5, r6, pc}
 800d70e:	46c0      	nop			; (mov r8, r8)
 800d710:	20000c64 	.word	0x20000c64

0800d714 <__errno>:
 800d714:	4b01      	ldr	r3, [pc, #4]	; (800d71c <__errno+0x8>)
 800d716:	6818      	ldr	r0, [r3, #0]
 800d718:	4770      	bx	lr
 800d71a:	46c0      	nop			; (mov r8, r8)
 800d71c:	200001d0 	.word	0x200001d0

0800d720 <__libc_init_array>:
 800d720:	b570      	push	{r4, r5, r6, lr}
 800d722:	2600      	movs	r6, #0
 800d724:	4c0c      	ldr	r4, [pc, #48]	; (800d758 <__libc_init_array+0x38>)
 800d726:	4d0d      	ldr	r5, [pc, #52]	; (800d75c <__libc_init_array+0x3c>)
 800d728:	1b64      	subs	r4, r4, r5
 800d72a:	10a4      	asrs	r4, r4, #2
 800d72c:	42a6      	cmp	r6, r4
 800d72e:	d109      	bne.n	800d744 <__libc_init_array+0x24>
 800d730:	2600      	movs	r6, #0
 800d732:	f002 fd07 	bl	8010144 <_init>
 800d736:	4c0a      	ldr	r4, [pc, #40]	; (800d760 <__libc_init_array+0x40>)
 800d738:	4d0a      	ldr	r5, [pc, #40]	; (800d764 <__libc_init_array+0x44>)
 800d73a:	1b64      	subs	r4, r4, r5
 800d73c:	10a4      	asrs	r4, r4, #2
 800d73e:	42a6      	cmp	r6, r4
 800d740:	d105      	bne.n	800d74e <__libc_init_array+0x2e>
 800d742:	bd70      	pop	{r4, r5, r6, pc}
 800d744:	00b3      	lsls	r3, r6, #2
 800d746:	58eb      	ldr	r3, [r5, r3]
 800d748:	4798      	blx	r3
 800d74a:	3601      	adds	r6, #1
 800d74c:	e7ee      	b.n	800d72c <__libc_init_array+0xc>
 800d74e:	00b3      	lsls	r3, r6, #2
 800d750:	58eb      	ldr	r3, [r5, r3]
 800d752:	4798      	blx	r3
 800d754:	3601      	adds	r6, #1
 800d756:	e7f2      	b.n	800d73e <__libc_init_array+0x1e>
 800d758:	08010964 	.word	0x08010964
 800d75c:	08010964 	.word	0x08010964
 800d760:	08010968 	.word	0x08010968
 800d764:	08010964 	.word	0x08010964

0800d768 <__retarget_lock_init_recursive>:
 800d768:	4770      	bx	lr

0800d76a <__retarget_lock_acquire_recursive>:
 800d76a:	4770      	bx	lr

0800d76c <__retarget_lock_release_recursive>:
 800d76c:	4770      	bx	lr

0800d76e <memchr>:
 800d76e:	b2c9      	uxtb	r1, r1
 800d770:	1882      	adds	r2, r0, r2
 800d772:	4290      	cmp	r0, r2
 800d774:	d101      	bne.n	800d77a <memchr+0xc>
 800d776:	2000      	movs	r0, #0
 800d778:	4770      	bx	lr
 800d77a:	7803      	ldrb	r3, [r0, #0]
 800d77c:	428b      	cmp	r3, r1
 800d77e:	d0fb      	beq.n	800d778 <memchr+0xa>
 800d780:	3001      	adds	r0, #1
 800d782:	e7f6      	b.n	800d772 <memchr+0x4>

0800d784 <memcpy>:
 800d784:	2300      	movs	r3, #0
 800d786:	b510      	push	{r4, lr}
 800d788:	429a      	cmp	r2, r3
 800d78a:	d100      	bne.n	800d78e <memcpy+0xa>
 800d78c:	bd10      	pop	{r4, pc}
 800d78e:	5ccc      	ldrb	r4, [r1, r3]
 800d790:	54c4      	strb	r4, [r0, r3]
 800d792:	3301      	adds	r3, #1
 800d794:	e7f8      	b.n	800d788 <memcpy+0x4>
	...

0800d798 <nan>:
 800d798:	2000      	movs	r0, #0
 800d79a:	4901      	ldr	r1, [pc, #4]	; (800d7a0 <nan+0x8>)
 800d79c:	4770      	bx	lr
 800d79e:	46c0      	nop			; (mov r8, r8)
 800d7a0:	7ff80000 	.word	0x7ff80000

0800d7a4 <nanf>:
 800d7a4:	4800      	ldr	r0, [pc, #0]	; (800d7a8 <nanf+0x4>)
 800d7a6:	4770      	bx	lr
 800d7a8:	7fc00000 	.word	0x7fc00000

0800d7ac <quorem>:
 800d7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ae:	6902      	ldr	r2, [r0, #16]
 800d7b0:	690b      	ldr	r3, [r1, #16]
 800d7b2:	b089      	sub	sp, #36	; 0x24
 800d7b4:	0007      	movs	r7, r0
 800d7b6:	9104      	str	r1, [sp, #16]
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	db69      	blt.n	800d892 <quorem+0xe6>
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	009c      	lsls	r4, r3, #2
 800d7c2:	9301      	str	r3, [sp, #4]
 800d7c4:	000b      	movs	r3, r1
 800d7c6:	3314      	adds	r3, #20
 800d7c8:	9306      	str	r3, [sp, #24]
 800d7ca:	191b      	adds	r3, r3, r4
 800d7cc:	9305      	str	r3, [sp, #20]
 800d7ce:	003b      	movs	r3, r7
 800d7d0:	3314      	adds	r3, #20
 800d7d2:	9303      	str	r3, [sp, #12]
 800d7d4:	191c      	adds	r4, r3, r4
 800d7d6:	9b05      	ldr	r3, [sp, #20]
 800d7d8:	6826      	ldr	r6, [r4, #0]
 800d7da:	681d      	ldr	r5, [r3, #0]
 800d7dc:	0030      	movs	r0, r6
 800d7de:	3501      	adds	r5, #1
 800d7e0:	0029      	movs	r1, r5
 800d7e2:	f7f2 fcb7 	bl	8000154 <__udivsi3>
 800d7e6:	9002      	str	r0, [sp, #8]
 800d7e8:	42ae      	cmp	r6, r5
 800d7ea:	d329      	bcc.n	800d840 <quorem+0x94>
 800d7ec:	9b06      	ldr	r3, [sp, #24]
 800d7ee:	2600      	movs	r6, #0
 800d7f0:	469c      	mov	ip, r3
 800d7f2:	9d03      	ldr	r5, [sp, #12]
 800d7f4:	9606      	str	r6, [sp, #24]
 800d7f6:	4662      	mov	r2, ip
 800d7f8:	ca08      	ldmia	r2!, {r3}
 800d7fa:	6828      	ldr	r0, [r5, #0]
 800d7fc:	4694      	mov	ip, r2
 800d7fe:	9a02      	ldr	r2, [sp, #8]
 800d800:	b299      	uxth	r1, r3
 800d802:	4351      	muls	r1, r2
 800d804:	0c1b      	lsrs	r3, r3, #16
 800d806:	4353      	muls	r3, r2
 800d808:	1989      	adds	r1, r1, r6
 800d80a:	0c0a      	lsrs	r2, r1, #16
 800d80c:	189b      	adds	r3, r3, r2
 800d80e:	9307      	str	r3, [sp, #28]
 800d810:	0c1e      	lsrs	r6, r3, #16
 800d812:	9b06      	ldr	r3, [sp, #24]
 800d814:	b282      	uxth	r2, r0
 800d816:	18d2      	adds	r2, r2, r3
 800d818:	466b      	mov	r3, sp
 800d81a:	b289      	uxth	r1, r1
 800d81c:	8b9b      	ldrh	r3, [r3, #28]
 800d81e:	1a52      	subs	r2, r2, r1
 800d820:	0c01      	lsrs	r1, r0, #16
 800d822:	1ac9      	subs	r1, r1, r3
 800d824:	1413      	asrs	r3, r2, #16
 800d826:	18cb      	adds	r3, r1, r3
 800d828:	1419      	asrs	r1, r3, #16
 800d82a:	b292      	uxth	r2, r2
 800d82c:	041b      	lsls	r3, r3, #16
 800d82e:	4313      	orrs	r3, r2
 800d830:	c508      	stmia	r5!, {r3}
 800d832:	9b05      	ldr	r3, [sp, #20]
 800d834:	9106      	str	r1, [sp, #24]
 800d836:	4563      	cmp	r3, ip
 800d838:	d2dd      	bcs.n	800d7f6 <quorem+0x4a>
 800d83a:	6823      	ldr	r3, [r4, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d030      	beq.n	800d8a2 <quorem+0xf6>
 800d840:	0038      	movs	r0, r7
 800d842:	9904      	ldr	r1, [sp, #16]
 800d844:	f001 fd98 	bl	800f378 <__mcmp>
 800d848:	2800      	cmp	r0, #0
 800d84a:	db21      	blt.n	800d890 <quorem+0xe4>
 800d84c:	0038      	movs	r0, r7
 800d84e:	2600      	movs	r6, #0
 800d850:	9b02      	ldr	r3, [sp, #8]
 800d852:	9c04      	ldr	r4, [sp, #16]
 800d854:	3301      	adds	r3, #1
 800d856:	9302      	str	r3, [sp, #8]
 800d858:	3014      	adds	r0, #20
 800d85a:	3414      	adds	r4, #20
 800d85c:	6803      	ldr	r3, [r0, #0]
 800d85e:	cc02      	ldmia	r4!, {r1}
 800d860:	b29d      	uxth	r5, r3
 800d862:	19ad      	adds	r5, r5, r6
 800d864:	b28a      	uxth	r2, r1
 800d866:	1aaa      	subs	r2, r5, r2
 800d868:	0c09      	lsrs	r1, r1, #16
 800d86a:	0c1b      	lsrs	r3, r3, #16
 800d86c:	1a5b      	subs	r3, r3, r1
 800d86e:	1411      	asrs	r1, r2, #16
 800d870:	185b      	adds	r3, r3, r1
 800d872:	141e      	asrs	r6, r3, #16
 800d874:	b292      	uxth	r2, r2
 800d876:	041b      	lsls	r3, r3, #16
 800d878:	4313      	orrs	r3, r2
 800d87a:	c008      	stmia	r0!, {r3}
 800d87c:	9b05      	ldr	r3, [sp, #20]
 800d87e:	42a3      	cmp	r3, r4
 800d880:	d2ec      	bcs.n	800d85c <quorem+0xb0>
 800d882:	9b01      	ldr	r3, [sp, #4]
 800d884:	9a03      	ldr	r2, [sp, #12]
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	18d3      	adds	r3, r2, r3
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	2a00      	cmp	r2, #0
 800d88e:	d015      	beq.n	800d8bc <quorem+0x110>
 800d890:	9802      	ldr	r0, [sp, #8]
 800d892:	b009      	add	sp, #36	; 0x24
 800d894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d896:	6823      	ldr	r3, [r4, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d106      	bne.n	800d8aa <quorem+0xfe>
 800d89c:	9b01      	ldr	r3, [sp, #4]
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	9301      	str	r3, [sp, #4]
 800d8a2:	9b03      	ldr	r3, [sp, #12]
 800d8a4:	3c04      	subs	r4, #4
 800d8a6:	42a3      	cmp	r3, r4
 800d8a8:	d3f5      	bcc.n	800d896 <quorem+0xea>
 800d8aa:	9b01      	ldr	r3, [sp, #4]
 800d8ac:	613b      	str	r3, [r7, #16]
 800d8ae:	e7c7      	b.n	800d840 <quorem+0x94>
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	2a00      	cmp	r2, #0
 800d8b4:	d106      	bne.n	800d8c4 <quorem+0x118>
 800d8b6:	9a01      	ldr	r2, [sp, #4]
 800d8b8:	3a01      	subs	r2, #1
 800d8ba:	9201      	str	r2, [sp, #4]
 800d8bc:	9a03      	ldr	r2, [sp, #12]
 800d8be:	3b04      	subs	r3, #4
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d3f5      	bcc.n	800d8b0 <quorem+0x104>
 800d8c4:	9b01      	ldr	r3, [sp, #4]
 800d8c6:	613b      	str	r3, [r7, #16]
 800d8c8:	e7e2      	b.n	800d890 <quorem+0xe4>
	...

0800d8cc <_dtoa_r>:
 800d8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8ce:	0014      	movs	r4, r2
 800d8d0:	001d      	movs	r5, r3
 800d8d2:	69c6      	ldr	r6, [r0, #28]
 800d8d4:	b09d      	sub	sp, #116	; 0x74
 800d8d6:	9408      	str	r4, [sp, #32]
 800d8d8:	9509      	str	r5, [sp, #36]	; 0x24
 800d8da:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800d8dc:	9004      	str	r0, [sp, #16]
 800d8de:	2e00      	cmp	r6, #0
 800d8e0:	d10f      	bne.n	800d902 <_dtoa_r+0x36>
 800d8e2:	2010      	movs	r0, #16
 800d8e4:	f001 f9a6 	bl	800ec34 <malloc>
 800d8e8:	9b04      	ldr	r3, [sp, #16]
 800d8ea:	1e02      	subs	r2, r0, #0
 800d8ec:	61d8      	str	r0, [r3, #28]
 800d8ee:	d104      	bne.n	800d8fa <_dtoa_r+0x2e>
 800d8f0:	21ef      	movs	r1, #239	; 0xef
 800d8f2:	4bc6      	ldr	r3, [pc, #792]	; (800dc0c <_dtoa_r+0x340>)
 800d8f4:	48c6      	ldr	r0, [pc, #792]	; (800dc10 <_dtoa_r+0x344>)
 800d8f6:	f002 fb41 	bl	800ff7c <__assert_func>
 800d8fa:	6046      	str	r6, [r0, #4]
 800d8fc:	6086      	str	r6, [r0, #8]
 800d8fe:	6006      	str	r6, [r0, #0]
 800d900:	60c6      	str	r6, [r0, #12]
 800d902:	9b04      	ldr	r3, [sp, #16]
 800d904:	69db      	ldr	r3, [r3, #28]
 800d906:	6819      	ldr	r1, [r3, #0]
 800d908:	2900      	cmp	r1, #0
 800d90a:	d00b      	beq.n	800d924 <_dtoa_r+0x58>
 800d90c:	685a      	ldr	r2, [r3, #4]
 800d90e:	2301      	movs	r3, #1
 800d910:	4093      	lsls	r3, r2
 800d912:	604a      	str	r2, [r1, #4]
 800d914:	608b      	str	r3, [r1, #8]
 800d916:	9804      	ldr	r0, [sp, #16]
 800d918:	f001 faa0 	bl	800ee5c <_Bfree>
 800d91c:	2200      	movs	r2, #0
 800d91e:	9b04      	ldr	r3, [sp, #16]
 800d920:	69db      	ldr	r3, [r3, #28]
 800d922:	601a      	str	r2, [r3, #0]
 800d924:	2d00      	cmp	r5, #0
 800d926:	da1e      	bge.n	800d966 <_dtoa_r+0x9a>
 800d928:	2301      	movs	r3, #1
 800d92a:	603b      	str	r3, [r7, #0]
 800d92c:	006b      	lsls	r3, r5, #1
 800d92e:	085b      	lsrs	r3, r3, #1
 800d930:	9309      	str	r3, [sp, #36]	; 0x24
 800d932:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d934:	4bb7      	ldr	r3, [pc, #732]	; (800dc14 <_dtoa_r+0x348>)
 800d936:	4ab7      	ldr	r2, [pc, #732]	; (800dc14 <_dtoa_r+0x348>)
 800d938:	403b      	ands	r3, r7
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d116      	bne.n	800d96c <_dtoa_r+0xa0>
 800d93e:	4bb6      	ldr	r3, [pc, #728]	; (800dc18 <_dtoa_r+0x34c>)
 800d940:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d942:	6013      	str	r3, [r2, #0]
 800d944:	033b      	lsls	r3, r7, #12
 800d946:	0b1b      	lsrs	r3, r3, #12
 800d948:	4323      	orrs	r3, r4
 800d94a:	d101      	bne.n	800d950 <_dtoa_r+0x84>
 800d94c:	f000 fdb5 	bl	800e4ba <_dtoa_r+0xbee>
 800d950:	4bb2      	ldr	r3, [pc, #712]	; (800dc1c <_dtoa_r+0x350>)
 800d952:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d954:	9306      	str	r3, [sp, #24]
 800d956:	2a00      	cmp	r2, #0
 800d958:	d002      	beq.n	800d960 <_dtoa_r+0x94>
 800d95a:	4bb1      	ldr	r3, [pc, #708]	; (800dc20 <_dtoa_r+0x354>)
 800d95c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d95e:	6013      	str	r3, [r2, #0]
 800d960:	9806      	ldr	r0, [sp, #24]
 800d962:	b01d      	add	sp, #116	; 0x74
 800d964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d966:	2300      	movs	r3, #0
 800d968:	603b      	str	r3, [r7, #0]
 800d96a:	e7e2      	b.n	800d932 <_dtoa_r+0x66>
 800d96c:	9a08      	ldr	r2, [sp, #32]
 800d96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d970:	9210      	str	r2, [sp, #64]	; 0x40
 800d972:	9311      	str	r3, [sp, #68]	; 0x44
 800d974:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d976:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d978:	2200      	movs	r2, #0
 800d97a:	2300      	movs	r3, #0
 800d97c:	f7f2 fd70 	bl	8000460 <__aeabi_dcmpeq>
 800d980:	1e06      	subs	r6, r0, #0
 800d982:	d009      	beq.n	800d998 <_dtoa_r+0xcc>
 800d984:	2301      	movs	r3, #1
 800d986:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d988:	6013      	str	r3, [r2, #0]
 800d98a:	4ba6      	ldr	r3, [pc, #664]	; (800dc24 <_dtoa_r+0x358>)
 800d98c:	9306      	str	r3, [sp, #24]
 800d98e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d990:	2b00      	cmp	r3, #0
 800d992:	d0e5      	beq.n	800d960 <_dtoa_r+0x94>
 800d994:	4ba4      	ldr	r3, [pc, #656]	; (800dc28 <_dtoa_r+0x35c>)
 800d996:	e7e1      	b.n	800d95c <_dtoa_r+0x90>
 800d998:	ab1a      	add	r3, sp, #104	; 0x68
 800d99a:	9301      	str	r3, [sp, #4]
 800d99c:	ab1b      	add	r3, sp, #108	; 0x6c
 800d99e:	9300      	str	r3, [sp, #0]
 800d9a0:	9804      	ldr	r0, [sp, #16]
 800d9a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d9a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d9a6:	f001 fe03 	bl	800f5b0 <__d2b>
 800d9aa:	007a      	lsls	r2, r7, #1
 800d9ac:	9005      	str	r0, [sp, #20]
 800d9ae:	0d52      	lsrs	r2, r2, #21
 800d9b0:	d100      	bne.n	800d9b4 <_dtoa_r+0xe8>
 800d9b2:	e07b      	b.n	800daac <_dtoa_r+0x1e0>
 800d9b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d9b6:	9617      	str	r6, [sp, #92]	; 0x5c
 800d9b8:	0319      	lsls	r1, r3, #12
 800d9ba:	4b9c      	ldr	r3, [pc, #624]	; (800dc2c <_dtoa_r+0x360>)
 800d9bc:	0b09      	lsrs	r1, r1, #12
 800d9be:	430b      	orrs	r3, r1
 800d9c0:	499b      	ldr	r1, [pc, #620]	; (800dc30 <_dtoa_r+0x364>)
 800d9c2:	1857      	adds	r7, r2, r1
 800d9c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d9c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d9c8:	0019      	movs	r1, r3
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	4b99      	ldr	r3, [pc, #612]	; (800dc34 <_dtoa_r+0x368>)
 800d9ce:	f7f4 ff7d 	bl	80028cc <__aeabi_dsub>
 800d9d2:	4a99      	ldr	r2, [pc, #612]	; (800dc38 <_dtoa_r+0x36c>)
 800d9d4:	4b99      	ldr	r3, [pc, #612]	; (800dc3c <_dtoa_r+0x370>)
 800d9d6:	f7f4 fcb7 	bl	8002348 <__aeabi_dmul>
 800d9da:	4a99      	ldr	r2, [pc, #612]	; (800dc40 <_dtoa_r+0x374>)
 800d9dc:	4b99      	ldr	r3, [pc, #612]	; (800dc44 <_dtoa_r+0x378>)
 800d9de:	f7f3 fd59 	bl	8001494 <__aeabi_dadd>
 800d9e2:	0004      	movs	r4, r0
 800d9e4:	0038      	movs	r0, r7
 800d9e6:	000d      	movs	r5, r1
 800d9e8:	f7f5 fb46 	bl	8003078 <__aeabi_i2d>
 800d9ec:	4a96      	ldr	r2, [pc, #600]	; (800dc48 <_dtoa_r+0x37c>)
 800d9ee:	4b97      	ldr	r3, [pc, #604]	; (800dc4c <_dtoa_r+0x380>)
 800d9f0:	f7f4 fcaa 	bl	8002348 <__aeabi_dmul>
 800d9f4:	0002      	movs	r2, r0
 800d9f6:	000b      	movs	r3, r1
 800d9f8:	0020      	movs	r0, r4
 800d9fa:	0029      	movs	r1, r5
 800d9fc:	f7f3 fd4a 	bl	8001494 <__aeabi_dadd>
 800da00:	0004      	movs	r4, r0
 800da02:	000d      	movs	r5, r1
 800da04:	f7f5 fb02 	bl	800300c <__aeabi_d2iz>
 800da08:	2200      	movs	r2, #0
 800da0a:	9003      	str	r0, [sp, #12]
 800da0c:	2300      	movs	r3, #0
 800da0e:	0020      	movs	r0, r4
 800da10:	0029      	movs	r1, r5
 800da12:	f7f2 fd2b 	bl	800046c <__aeabi_dcmplt>
 800da16:	2800      	cmp	r0, #0
 800da18:	d00b      	beq.n	800da32 <_dtoa_r+0x166>
 800da1a:	9803      	ldr	r0, [sp, #12]
 800da1c:	f7f5 fb2c 	bl	8003078 <__aeabi_i2d>
 800da20:	002b      	movs	r3, r5
 800da22:	0022      	movs	r2, r4
 800da24:	f7f2 fd1c 	bl	8000460 <__aeabi_dcmpeq>
 800da28:	4243      	negs	r3, r0
 800da2a:	4158      	adcs	r0, r3
 800da2c:	9b03      	ldr	r3, [sp, #12]
 800da2e:	1a1b      	subs	r3, r3, r0
 800da30:	9303      	str	r3, [sp, #12]
 800da32:	2301      	movs	r3, #1
 800da34:	9316      	str	r3, [sp, #88]	; 0x58
 800da36:	9b03      	ldr	r3, [sp, #12]
 800da38:	2b16      	cmp	r3, #22
 800da3a:	d810      	bhi.n	800da5e <_dtoa_r+0x192>
 800da3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800da3e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800da40:	9a03      	ldr	r2, [sp, #12]
 800da42:	4b83      	ldr	r3, [pc, #524]	; (800dc50 <_dtoa_r+0x384>)
 800da44:	00d2      	lsls	r2, r2, #3
 800da46:	189b      	adds	r3, r3, r2
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	f7f2 fd0e 	bl	800046c <__aeabi_dcmplt>
 800da50:	2800      	cmp	r0, #0
 800da52:	d047      	beq.n	800dae4 <_dtoa_r+0x218>
 800da54:	9b03      	ldr	r3, [sp, #12]
 800da56:	3b01      	subs	r3, #1
 800da58:	9303      	str	r3, [sp, #12]
 800da5a:	2300      	movs	r3, #0
 800da5c:	9316      	str	r3, [sp, #88]	; 0x58
 800da5e:	2200      	movs	r2, #0
 800da60:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800da62:	920a      	str	r2, [sp, #40]	; 0x28
 800da64:	1bdb      	subs	r3, r3, r7
 800da66:	1e5a      	subs	r2, r3, #1
 800da68:	d53e      	bpl.n	800dae8 <_dtoa_r+0x21c>
 800da6a:	2201      	movs	r2, #1
 800da6c:	1ad3      	subs	r3, r2, r3
 800da6e:	930a      	str	r3, [sp, #40]	; 0x28
 800da70:	2300      	movs	r3, #0
 800da72:	930c      	str	r3, [sp, #48]	; 0x30
 800da74:	9b03      	ldr	r3, [sp, #12]
 800da76:	2b00      	cmp	r3, #0
 800da78:	db38      	blt.n	800daec <_dtoa_r+0x220>
 800da7a:	9a03      	ldr	r2, [sp, #12]
 800da7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da7e:	4694      	mov	ip, r2
 800da80:	4463      	add	r3, ip
 800da82:	930c      	str	r3, [sp, #48]	; 0x30
 800da84:	2300      	movs	r3, #0
 800da86:	9213      	str	r2, [sp, #76]	; 0x4c
 800da88:	930d      	str	r3, [sp, #52]	; 0x34
 800da8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800da8c:	2401      	movs	r4, #1
 800da8e:	2b09      	cmp	r3, #9
 800da90:	d867      	bhi.n	800db62 <_dtoa_r+0x296>
 800da92:	2b05      	cmp	r3, #5
 800da94:	dd02      	ble.n	800da9c <_dtoa_r+0x1d0>
 800da96:	2400      	movs	r4, #0
 800da98:	3b04      	subs	r3, #4
 800da9a:	9322      	str	r3, [sp, #136]	; 0x88
 800da9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800da9e:	1e98      	subs	r0, r3, #2
 800daa0:	2803      	cmp	r0, #3
 800daa2:	d867      	bhi.n	800db74 <_dtoa_r+0x2a8>
 800daa4:	f7f2 fb42 	bl	800012c <__gnu_thumb1_case_uqi>
 800daa8:	5b383a2b 	.word	0x5b383a2b
 800daac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800daae:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800dab0:	18f6      	adds	r6, r6, r3
 800dab2:	4b68      	ldr	r3, [pc, #416]	; (800dc54 <_dtoa_r+0x388>)
 800dab4:	18f2      	adds	r2, r6, r3
 800dab6:	2a20      	cmp	r2, #32
 800dab8:	dd0f      	ble.n	800dada <_dtoa_r+0x20e>
 800daba:	2340      	movs	r3, #64	; 0x40
 800dabc:	1a9b      	subs	r3, r3, r2
 800dabe:	409f      	lsls	r7, r3
 800dac0:	4b65      	ldr	r3, [pc, #404]	; (800dc58 <_dtoa_r+0x38c>)
 800dac2:	0038      	movs	r0, r7
 800dac4:	18f3      	adds	r3, r6, r3
 800dac6:	40dc      	lsrs	r4, r3
 800dac8:	4320      	orrs	r0, r4
 800daca:	f7f5 fb05 	bl	80030d8 <__aeabi_ui2d>
 800dace:	2201      	movs	r2, #1
 800dad0:	4b62      	ldr	r3, [pc, #392]	; (800dc5c <_dtoa_r+0x390>)
 800dad2:	1e77      	subs	r7, r6, #1
 800dad4:	18cb      	adds	r3, r1, r3
 800dad6:	9217      	str	r2, [sp, #92]	; 0x5c
 800dad8:	e776      	b.n	800d9c8 <_dtoa_r+0xfc>
 800dada:	2320      	movs	r3, #32
 800dadc:	0020      	movs	r0, r4
 800dade:	1a9b      	subs	r3, r3, r2
 800dae0:	4098      	lsls	r0, r3
 800dae2:	e7f2      	b.n	800daca <_dtoa_r+0x1fe>
 800dae4:	9016      	str	r0, [sp, #88]	; 0x58
 800dae6:	e7ba      	b.n	800da5e <_dtoa_r+0x192>
 800dae8:	920c      	str	r2, [sp, #48]	; 0x30
 800daea:	e7c3      	b.n	800da74 <_dtoa_r+0x1a8>
 800daec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daee:	9a03      	ldr	r2, [sp, #12]
 800daf0:	1a9b      	subs	r3, r3, r2
 800daf2:	930a      	str	r3, [sp, #40]	; 0x28
 800daf4:	4253      	negs	r3, r2
 800daf6:	930d      	str	r3, [sp, #52]	; 0x34
 800daf8:	2300      	movs	r3, #0
 800dafa:	9313      	str	r3, [sp, #76]	; 0x4c
 800dafc:	e7c5      	b.n	800da8a <_dtoa_r+0x1be>
 800dafe:	2300      	movs	r3, #0
 800db00:	930f      	str	r3, [sp, #60]	; 0x3c
 800db02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800db04:	930b      	str	r3, [sp, #44]	; 0x2c
 800db06:	9307      	str	r3, [sp, #28]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	dc13      	bgt.n	800db34 <_dtoa_r+0x268>
 800db0c:	2301      	movs	r3, #1
 800db0e:	001a      	movs	r2, r3
 800db10:	930b      	str	r3, [sp, #44]	; 0x2c
 800db12:	9307      	str	r3, [sp, #28]
 800db14:	9223      	str	r2, [sp, #140]	; 0x8c
 800db16:	e00d      	b.n	800db34 <_dtoa_r+0x268>
 800db18:	2301      	movs	r3, #1
 800db1a:	e7f1      	b.n	800db00 <_dtoa_r+0x234>
 800db1c:	2300      	movs	r3, #0
 800db1e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800db20:	930f      	str	r3, [sp, #60]	; 0x3c
 800db22:	4694      	mov	ip, r2
 800db24:	9b03      	ldr	r3, [sp, #12]
 800db26:	4463      	add	r3, ip
 800db28:	930b      	str	r3, [sp, #44]	; 0x2c
 800db2a:	3301      	adds	r3, #1
 800db2c:	9307      	str	r3, [sp, #28]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	dc00      	bgt.n	800db34 <_dtoa_r+0x268>
 800db32:	2301      	movs	r3, #1
 800db34:	9a04      	ldr	r2, [sp, #16]
 800db36:	2100      	movs	r1, #0
 800db38:	69d0      	ldr	r0, [r2, #28]
 800db3a:	2204      	movs	r2, #4
 800db3c:	0015      	movs	r5, r2
 800db3e:	3514      	adds	r5, #20
 800db40:	429d      	cmp	r5, r3
 800db42:	d91b      	bls.n	800db7c <_dtoa_r+0x2b0>
 800db44:	6041      	str	r1, [r0, #4]
 800db46:	9804      	ldr	r0, [sp, #16]
 800db48:	f001 f944 	bl	800edd4 <_Balloc>
 800db4c:	9006      	str	r0, [sp, #24]
 800db4e:	2800      	cmp	r0, #0
 800db50:	d117      	bne.n	800db82 <_dtoa_r+0x2b6>
 800db52:	21b0      	movs	r1, #176	; 0xb0
 800db54:	4b42      	ldr	r3, [pc, #264]	; (800dc60 <_dtoa_r+0x394>)
 800db56:	482e      	ldr	r0, [pc, #184]	; (800dc10 <_dtoa_r+0x344>)
 800db58:	9a06      	ldr	r2, [sp, #24]
 800db5a:	31ff      	adds	r1, #255	; 0xff
 800db5c:	e6cb      	b.n	800d8f6 <_dtoa_r+0x2a>
 800db5e:	2301      	movs	r3, #1
 800db60:	e7dd      	b.n	800db1e <_dtoa_r+0x252>
 800db62:	2300      	movs	r3, #0
 800db64:	940f      	str	r4, [sp, #60]	; 0x3c
 800db66:	9322      	str	r3, [sp, #136]	; 0x88
 800db68:	3b01      	subs	r3, #1
 800db6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800db6c:	9307      	str	r3, [sp, #28]
 800db6e:	2200      	movs	r2, #0
 800db70:	3313      	adds	r3, #19
 800db72:	e7cf      	b.n	800db14 <_dtoa_r+0x248>
 800db74:	2301      	movs	r3, #1
 800db76:	930f      	str	r3, [sp, #60]	; 0x3c
 800db78:	3b02      	subs	r3, #2
 800db7a:	e7f6      	b.n	800db6a <_dtoa_r+0x29e>
 800db7c:	3101      	adds	r1, #1
 800db7e:	0052      	lsls	r2, r2, #1
 800db80:	e7dc      	b.n	800db3c <_dtoa_r+0x270>
 800db82:	9b04      	ldr	r3, [sp, #16]
 800db84:	9a06      	ldr	r2, [sp, #24]
 800db86:	69db      	ldr	r3, [r3, #28]
 800db88:	601a      	str	r2, [r3, #0]
 800db8a:	9b07      	ldr	r3, [sp, #28]
 800db8c:	2b0e      	cmp	r3, #14
 800db8e:	d900      	bls.n	800db92 <_dtoa_r+0x2c6>
 800db90:	e0e5      	b.n	800dd5e <_dtoa_r+0x492>
 800db92:	2c00      	cmp	r4, #0
 800db94:	d100      	bne.n	800db98 <_dtoa_r+0x2cc>
 800db96:	e0e2      	b.n	800dd5e <_dtoa_r+0x492>
 800db98:	9b03      	ldr	r3, [sp, #12]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	dd64      	ble.n	800dc68 <_dtoa_r+0x39c>
 800db9e:	210f      	movs	r1, #15
 800dba0:	9a03      	ldr	r2, [sp, #12]
 800dba2:	4b2b      	ldr	r3, [pc, #172]	; (800dc50 <_dtoa_r+0x384>)
 800dba4:	400a      	ands	r2, r1
 800dba6:	00d2      	lsls	r2, r2, #3
 800dba8:	189b      	adds	r3, r3, r2
 800dbaa:	681e      	ldr	r6, [r3, #0]
 800dbac:	685f      	ldr	r7, [r3, #4]
 800dbae:	9b03      	ldr	r3, [sp, #12]
 800dbb0:	2402      	movs	r4, #2
 800dbb2:	111d      	asrs	r5, r3, #4
 800dbb4:	05db      	lsls	r3, r3, #23
 800dbb6:	d50a      	bpl.n	800dbce <_dtoa_r+0x302>
 800dbb8:	4b2a      	ldr	r3, [pc, #168]	; (800dc64 <_dtoa_r+0x398>)
 800dbba:	400d      	ands	r5, r1
 800dbbc:	6a1a      	ldr	r2, [r3, #32]
 800dbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dbc2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dbc4:	f7f3 ffc6 	bl	8001b54 <__aeabi_ddiv>
 800dbc8:	9008      	str	r0, [sp, #32]
 800dbca:	9109      	str	r1, [sp, #36]	; 0x24
 800dbcc:	3401      	adds	r4, #1
 800dbce:	4b25      	ldr	r3, [pc, #148]	; (800dc64 <_dtoa_r+0x398>)
 800dbd0:	930e      	str	r3, [sp, #56]	; 0x38
 800dbd2:	2d00      	cmp	r5, #0
 800dbd4:	d108      	bne.n	800dbe8 <_dtoa_r+0x31c>
 800dbd6:	9808      	ldr	r0, [sp, #32]
 800dbd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbda:	0032      	movs	r2, r6
 800dbdc:	003b      	movs	r3, r7
 800dbde:	f7f3 ffb9 	bl	8001b54 <__aeabi_ddiv>
 800dbe2:	9008      	str	r0, [sp, #32]
 800dbe4:	9109      	str	r1, [sp, #36]	; 0x24
 800dbe6:	e05a      	b.n	800dc9e <_dtoa_r+0x3d2>
 800dbe8:	2301      	movs	r3, #1
 800dbea:	421d      	tst	r5, r3
 800dbec:	d009      	beq.n	800dc02 <_dtoa_r+0x336>
 800dbee:	18e4      	adds	r4, r4, r3
 800dbf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbf2:	0030      	movs	r0, r6
 800dbf4:	681a      	ldr	r2, [r3, #0]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	0039      	movs	r1, r7
 800dbfa:	f7f4 fba5 	bl	8002348 <__aeabi_dmul>
 800dbfe:	0006      	movs	r6, r0
 800dc00:	000f      	movs	r7, r1
 800dc02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc04:	106d      	asrs	r5, r5, #1
 800dc06:	3308      	adds	r3, #8
 800dc08:	e7e2      	b.n	800dbd0 <_dtoa_r+0x304>
 800dc0a:	46c0      	nop			; (mov r8, r8)
 800dc0c:	080106d7 	.word	0x080106d7
 800dc10:	080106ee 	.word	0x080106ee
 800dc14:	7ff00000 	.word	0x7ff00000
 800dc18:	0000270f 	.word	0x0000270f
 800dc1c:	080106d3 	.word	0x080106d3
 800dc20:	080106d6 	.word	0x080106d6
 800dc24:	08010699 	.word	0x08010699
 800dc28:	0801069a 	.word	0x0801069a
 800dc2c:	3ff00000 	.word	0x3ff00000
 800dc30:	fffffc01 	.word	0xfffffc01
 800dc34:	3ff80000 	.word	0x3ff80000
 800dc38:	636f4361 	.word	0x636f4361
 800dc3c:	3fd287a7 	.word	0x3fd287a7
 800dc40:	8b60c8b3 	.word	0x8b60c8b3
 800dc44:	3fc68a28 	.word	0x3fc68a28
 800dc48:	509f79fb 	.word	0x509f79fb
 800dc4c:	3fd34413 	.word	0x3fd34413
 800dc50:	08010838 	.word	0x08010838
 800dc54:	00000432 	.word	0x00000432
 800dc58:	00000412 	.word	0x00000412
 800dc5c:	fe100000 	.word	0xfe100000
 800dc60:	08010746 	.word	0x08010746
 800dc64:	08010810 	.word	0x08010810
 800dc68:	9b03      	ldr	r3, [sp, #12]
 800dc6a:	2402      	movs	r4, #2
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d016      	beq.n	800dc9e <_dtoa_r+0x3d2>
 800dc70:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dc72:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dc74:	220f      	movs	r2, #15
 800dc76:	425d      	negs	r5, r3
 800dc78:	402a      	ands	r2, r5
 800dc7a:	4bdd      	ldr	r3, [pc, #884]	; (800dff0 <_dtoa_r+0x724>)
 800dc7c:	00d2      	lsls	r2, r2, #3
 800dc7e:	189b      	adds	r3, r3, r2
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	f7f4 fb60 	bl	8002348 <__aeabi_dmul>
 800dc88:	2701      	movs	r7, #1
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	9008      	str	r0, [sp, #32]
 800dc8e:	9109      	str	r1, [sp, #36]	; 0x24
 800dc90:	4ed8      	ldr	r6, [pc, #864]	; (800dff4 <_dtoa_r+0x728>)
 800dc92:	112d      	asrs	r5, r5, #4
 800dc94:	2d00      	cmp	r5, #0
 800dc96:	d000      	beq.n	800dc9a <_dtoa_r+0x3ce>
 800dc98:	e091      	b.n	800ddbe <_dtoa_r+0x4f2>
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d1a1      	bne.n	800dbe2 <_dtoa_r+0x316>
 800dc9e:	9e08      	ldr	r6, [sp, #32]
 800dca0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dca2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d100      	bne.n	800dcaa <_dtoa_r+0x3de>
 800dca8:	e094      	b.n	800ddd4 <_dtoa_r+0x508>
 800dcaa:	2200      	movs	r2, #0
 800dcac:	0030      	movs	r0, r6
 800dcae:	0039      	movs	r1, r7
 800dcb0:	4bd1      	ldr	r3, [pc, #836]	; (800dff8 <_dtoa_r+0x72c>)
 800dcb2:	f7f2 fbdb 	bl	800046c <__aeabi_dcmplt>
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	d100      	bne.n	800dcbc <_dtoa_r+0x3f0>
 800dcba:	e08b      	b.n	800ddd4 <_dtoa_r+0x508>
 800dcbc:	9b07      	ldr	r3, [sp, #28]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d100      	bne.n	800dcc4 <_dtoa_r+0x3f8>
 800dcc2:	e087      	b.n	800ddd4 <_dtoa_r+0x508>
 800dcc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	dd45      	ble.n	800dd56 <_dtoa_r+0x48a>
 800dcca:	9b03      	ldr	r3, [sp, #12]
 800dccc:	2200      	movs	r2, #0
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	930e      	str	r3, [sp, #56]	; 0x38
 800dcd2:	0030      	movs	r0, r6
 800dcd4:	4bc9      	ldr	r3, [pc, #804]	; (800dffc <_dtoa_r+0x730>)
 800dcd6:	0039      	movs	r1, r7
 800dcd8:	f7f4 fb36 	bl	8002348 <__aeabi_dmul>
 800dcdc:	9008      	str	r0, [sp, #32]
 800dcde:	9109      	str	r1, [sp, #36]	; 0x24
 800dce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dce2:	3401      	adds	r4, #1
 800dce4:	0020      	movs	r0, r4
 800dce6:	9e08      	ldr	r6, [sp, #32]
 800dce8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dcea:	9312      	str	r3, [sp, #72]	; 0x48
 800dcec:	f7f5 f9c4 	bl	8003078 <__aeabi_i2d>
 800dcf0:	0032      	movs	r2, r6
 800dcf2:	003b      	movs	r3, r7
 800dcf4:	f7f4 fb28 	bl	8002348 <__aeabi_dmul>
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	4bc1      	ldr	r3, [pc, #772]	; (800e000 <_dtoa_r+0x734>)
 800dcfc:	f7f3 fbca 	bl	8001494 <__aeabi_dadd>
 800dd00:	4ac0      	ldr	r2, [pc, #768]	; (800e004 <_dtoa_r+0x738>)
 800dd02:	9014      	str	r0, [sp, #80]	; 0x50
 800dd04:	9115      	str	r1, [sp, #84]	; 0x54
 800dd06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd08:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800dd0a:	4694      	mov	ip, r2
 800dd0c:	9308      	str	r3, [sp, #32]
 800dd0e:	9409      	str	r4, [sp, #36]	; 0x24
 800dd10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd12:	4463      	add	r3, ip
 800dd14:	9318      	str	r3, [sp, #96]	; 0x60
 800dd16:	9309      	str	r3, [sp, #36]	; 0x24
 800dd18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d15e      	bne.n	800dddc <_dtoa_r+0x510>
 800dd1e:	2200      	movs	r2, #0
 800dd20:	4bb9      	ldr	r3, [pc, #740]	; (800e008 <_dtoa_r+0x73c>)
 800dd22:	0030      	movs	r0, r6
 800dd24:	0039      	movs	r1, r7
 800dd26:	f7f4 fdd1 	bl	80028cc <__aeabi_dsub>
 800dd2a:	9a08      	ldr	r2, [sp, #32]
 800dd2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dd2e:	0004      	movs	r4, r0
 800dd30:	000d      	movs	r5, r1
 800dd32:	f7f2 fbaf 	bl	8000494 <__aeabi_dcmpgt>
 800dd36:	2800      	cmp	r0, #0
 800dd38:	d000      	beq.n	800dd3c <_dtoa_r+0x470>
 800dd3a:	e2b3      	b.n	800e2a4 <_dtoa_r+0x9d8>
 800dd3c:	48b3      	ldr	r0, [pc, #716]	; (800e00c <_dtoa_r+0x740>)
 800dd3e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dd40:	4684      	mov	ip, r0
 800dd42:	4461      	add	r1, ip
 800dd44:	000b      	movs	r3, r1
 800dd46:	0020      	movs	r0, r4
 800dd48:	0029      	movs	r1, r5
 800dd4a:	9a08      	ldr	r2, [sp, #32]
 800dd4c:	f7f2 fb8e 	bl	800046c <__aeabi_dcmplt>
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d000      	beq.n	800dd56 <_dtoa_r+0x48a>
 800dd54:	e2a3      	b.n	800e29e <_dtoa_r+0x9d2>
 800dd56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd58:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800dd5a:	9308      	str	r3, [sp, #32]
 800dd5c:	9409      	str	r4, [sp, #36]	; 0x24
 800dd5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	da00      	bge.n	800dd66 <_dtoa_r+0x49a>
 800dd64:	e179      	b.n	800e05a <_dtoa_r+0x78e>
 800dd66:	9a03      	ldr	r2, [sp, #12]
 800dd68:	2a0e      	cmp	r2, #14
 800dd6a:	dd00      	ble.n	800dd6e <_dtoa_r+0x4a2>
 800dd6c:	e175      	b.n	800e05a <_dtoa_r+0x78e>
 800dd6e:	4ba0      	ldr	r3, [pc, #640]	; (800dff0 <_dtoa_r+0x724>)
 800dd70:	00d2      	lsls	r2, r2, #3
 800dd72:	189b      	adds	r3, r3, r2
 800dd74:	681e      	ldr	r6, [r3, #0]
 800dd76:	685f      	ldr	r7, [r3, #4]
 800dd78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	db00      	blt.n	800dd80 <_dtoa_r+0x4b4>
 800dd7e:	e0e5      	b.n	800df4c <_dtoa_r+0x680>
 800dd80:	9b07      	ldr	r3, [sp, #28]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	dd00      	ble.n	800dd88 <_dtoa_r+0x4bc>
 800dd86:	e0e1      	b.n	800df4c <_dtoa_r+0x680>
 800dd88:	d000      	beq.n	800dd8c <_dtoa_r+0x4c0>
 800dd8a:	e288      	b.n	800e29e <_dtoa_r+0x9d2>
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	0030      	movs	r0, r6
 800dd90:	0039      	movs	r1, r7
 800dd92:	4b9d      	ldr	r3, [pc, #628]	; (800e008 <_dtoa_r+0x73c>)
 800dd94:	f7f4 fad8 	bl	8002348 <__aeabi_dmul>
 800dd98:	9a08      	ldr	r2, [sp, #32]
 800dd9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd9c:	f7f2 fb84 	bl	80004a8 <__aeabi_dcmpge>
 800dda0:	9e07      	ldr	r6, [sp, #28]
 800dda2:	0037      	movs	r7, r6
 800dda4:	2800      	cmp	r0, #0
 800dda6:	d000      	beq.n	800ddaa <_dtoa_r+0x4de>
 800dda8:	e25f      	b.n	800e26a <_dtoa_r+0x99e>
 800ddaa:	9b06      	ldr	r3, [sp, #24]
 800ddac:	9a06      	ldr	r2, [sp, #24]
 800ddae:	3301      	adds	r3, #1
 800ddb0:	9308      	str	r3, [sp, #32]
 800ddb2:	2331      	movs	r3, #49	; 0x31
 800ddb4:	7013      	strb	r3, [r2, #0]
 800ddb6:	9b03      	ldr	r3, [sp, #12]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	9303      	str	r3, [sp, #12]
 800ddbc:	e25a      	b.n	800e274 <_dtoa_r+0x9a8>
 800ddbe:	423d      	tst	r5, r7
 800ddc0:	d005      	beq.n	800ddce <_dtoa_r+0x502>
 800ddc2:	6832      	ldr	r2, [r6, #0]
 800ddc4:	6873      	ldr	r3, [r6, #4]
 800ddc6:	f7f4 fabf 	bl	8002348 <__aeabi_dmul>
 800ddca:	003b      	movs	r3, r7
 800ddcc:	3401      	adds	r4, #1
 800ddce:	106d      	asrs	r5, r5, #1
 800ddd0:	3608      	adds	r6, #8
 800ddd2:	e75f      	b.n	800dc94 <_dtoa_r+0x3c8>
 800ddd4:	9b03      	ldr	r3, [sp, #12]
 800ddd6:	930e      	str	r3, [sp, #56]	; 0x38
 800ddd8:	9b07      	ldr	r3, [sp, #28]
 800ddda:	e783      	b.n	800dce4 <_dtoa_r+0x418>
 800dddc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ddde:	4b84      	ldr	r3, [pc, #528]	; (800dff0 <_dtoa_r+0x724>)
 800dde0:	3a01      	subs	r2, #1
 800dde2:	00d2      	lsls	r2, r2, #3
 800dde4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dde6:	189b      	adds	r3, r3, r2
 800dde8:	9c08      	ldr	r4, [sp, #32]
 800ddea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	2900      	cmp	r1, #0
 800ddf2:	d051      	beq.n	800de98 <_dtoa_r+0x5cc>
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	4986      	ldr	r1, [pc, #536]	; (800e010 <_dtoa_r+0x744>)
 800ddf8:	f7f3 feac 	bl	8001b54 <__aeabi_ddiv>
 800ddfc:	0022      	movs	r2, r4
 800ddfe:	002b      	movs	r3, r5
 800de00:	f7f4 fd64 	bl	80028cc <__aeabi_dsub>
 800de04:	9a06      	ldr	r2, [sp, #24]
 800de06:	0004      	movs	r4, r0
 800de08:	4694      	mov	ip, r2
 800de0a:	000d      	movs	r5, r1
 800de0c:	9b06      	ldr	r3, [sp, #24]
 800de0e:	9314      	str	r3, [sp, #80]	; 0x50
 800de10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de12:	4463      	add	r3, ip
 800de14:	9318      	str	r3, [sp, #96]	; 0x60
 800de16:	0039      	movs	r1, r7
 800de18:	0030      	movs	r0, r6
 800de1a:	f7f5 f8f7 	bl	800300c <__aeabi_d2iz>
 800de1e:	9012      	str	r0, [sp, #72]	; 0x48
 800de20:	f7f5 f92a 	bl	8003078 <__aeabi_i2d>
 800de24:	0002      	movs	r2, r0
 800de26:	000b      	movs	r3, r1
 800de28:	0030      	movs	r0, r6
 800de2a:	0039      	movs	r1, r7
 800de2c:	f7f4 fd4e 	bl	80028cc <__aeabi_dsub>
 800de30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800de34:	3301      	adds	r3, #1
 800de36:	9308      	str	r3, [sp, #32]
 800de38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de3a:	0006      	movs	r6, r0
 800de3c:	3330      	adds	r3, #48	; 0x30
 800de3e:	7013      	strb	r3, [r2, #0]
 800de40:	0022      	movs	r2, r4
 800de42:	002b      	movs	r3, r5
 800de44:	000f      	movs	r7, r1
 800de46:	f7f2 fb11 	bl	800046c <__aeabi_dcmplt>
 800de4a:	2800      	cmp	r0, #0
 800de4c:	d174      	bne.n	800df38 <_dtoa_r+0x66c>
 800de4e:	0032      	movs	r2, r6
 800de50:	003b      	movs	r3, r7
 800de52:	2000      	movs	r0, #0
 800de54:	4968      	ldr	r1, [pc, #416]	; (800dff8 <_dtoa_r+0x72c>)
 800de56:	f7f4 fd39 	bl	80028cc <__aeabi_dsub>
 800de5a:	0022      	movs	r2, r4
 800de5c:	002b      	movs	r3, r5
 800de5e:	f7f2 fb05 	bl	800046c <__aeabi_dcmplt>
 800de62:	2800      	cmp	r0, #0
 800de64:	d000      	beq.n	800de68 <_dtoa_r+0x59c>
 800de66:	e0d7      	b.n	800e018 <_dtoa_r+0x74c>
 800de68:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800de6a:	9a08      	ldr	r2, [sp, #32]
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d100      	bne.n	800de72 <_dtoa_r+0x5a6>
 800de70:	e771      	b.n	800dd56 <_dtoa_r+0x48a>
 800de72:	2200      	movs	r2, #0
 800de74:	0020      	movs	r0, r4
 800de76:	0029      	movs	r1, r5
 800de78:	4b60      	ldr	r3, [pc, #384]	; (800dffc <_dtoa_r+0x730>)
 800de7a:	f7f4 fa65 	bl	8002348 <__aeabi_dmul>
 800de7e:	4b5f      	ldr	r3, [pc, #380]	; (800dffc <_dtoa_r+0x730>)
 800de80:	0004      	movs	r4, r0
 800de82:	000d      	movs	r5, r1
 800de84:	0030      	movs	r0, r6
 800de86:	0039      	movs	r1, r7
 800de88:	2200      	movs	r2, #0
 800de8a:	f7f4 fa5d 	bl	8002348 <__aeabi_dmul>
 800de8e:	9b08      	ldr	r3, [sp, #32]
 800de90:	0006      	movs	r6, r0
 800de92:	000f      	movs	r7, r1
 800de94:	9314      	str	r3, [sp, #80]	; 0x50
 800de96:	e7be      	b.n	800de16 <_dtoa_r+0x54a>
 800de98:	0020      	movs	r0, r4
 800de9a:	0029      	movs	r1, r5
 800de9c:	f7f4 fa54 	bl	8002348 <__aeabi_dmul>
 800dea0:	9a06      	ldr	r2, [sp, #24]
 800dea2:	9b06      	ldr	r3, [sp, #24]
 800dea4:	4694      	mov	ip, r2
 800dea6:	9308      	str	r3, [sp, #32]
 800dea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800deaa:	9014      	str	r0, [sp, #80]	; 0x50
 800deac:	9115      	str	r1, [sp, #84]	; 0x54
 800deae:	4463      	add	r3, ip
 800deb0:	9319      	str	r3, [sp, #100]	; 0x64
 800deb2:	0030      	movs	r0, r6
 800deb4:	0039      	movs	r1, r7
 800deb6:	f7f5 f8a9 	bl	800300c <__aeabi_d2iz>
 800deba:	9018      	str	r0, [sp, #96]	; 0x60
 800debc:	f7f5 f8dc 	bl	8003078 <__aeabi_i2d>
 800dec0:	0002      	movs	r2, r0
 800dec2:	000b      	movs	r3, r1
 800dec4:	0030      	movs	r0, r6
 800dec6:	0039      	movs	r1, r7
 800dec8:	f7f4 fd00 	bl	80028cc <__aeabi_dsub>
 800decc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800dece:	9b08      	ldr	r3, [sp, #32]
 800ded0:	3630      	adds	r6, #48	; 0x30
 800ded2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ded4:	701e      	strb	r6, [r3, #0]
 800ded6:	3301      	adds	r3, #1
 800ded8:	0004      	movs	r4, r0
 800deda:	000d      	movs	r5, r1
 800dedc:	9308      	str	r3, [sp, #32]
 800dede:	4293      	cmp	r3, r2
 800dee0:	d12d      	bne.n	800df3e <_dtoa_r+0x672>
 800dee2:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dee4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dee6:	9a06      	ldr	r2, [sp, #24]
 800dee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800deea:	4694      	mov	ip, r2
 800deec:	4463      	add	r3, ip
 800deee:	2200      	movs	r2, #0
 800def0:	9308      	str	r3, [sp, #32]
 800def2:	4b47      	ldr	r3, [pc, #284]	; (800e010 <_dtoa_r+0x744>)
 800def4:	f7f3 face 	bl	8001494 <__aeabi_dadd>
 800def8:	0002      	movs	r2, r0
 800defa:	000b      	movs	r3, r1
 800defc:	0020      	movs	r0, r4
 800defe:	0029      	movs	r1, r5
 800df00:	f7f2 fac8 	bl	8000494 <__aeabi_dcmpgt>
 800df04:	2800      	cmp	r0, #0
 800df06:	d000      	beq.n	800df0a <_dtoa_r+0x63e>
 800df08:	e086      	b.n	800e018 <_dtoa_r+0x74c>
 800df0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800df0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df0e:	2000      	movs	r0, #0
 800df10:	493f      	ldr	r1, [pc, #252]	; (800e010 <_dtoa_r+0x744>)
 800df12:	f7f4 fcdb 	bl	80028cc <__aeabi_dsub>
 800df16:	0002      	movs	r2, r0
 800df18:	000b      	movs	r3, r1
 800df1a:	0020      	movs	r0, r4
 800df1c:	0029      	movs	r1, r5
 800df1e:	f7f2 faa5 	bl	800046c <__aeabi_dcmplt>
 800df22:	2800      	cmp	r0, #0
 800df24:	d100      	bne.n	800df28 <_dtoa_r+0x65c>
 800df26:	e716      	b.n	800dd56 <_dtoa_r+0x48a>
 800df28:	9b08      	ldr	r3, [sp, #32]
 800df2a:	001a      	movs	r2, r3
 800df2c:	3a01      	subs	r2, #1
 800df2e:	9208      	str	r2, [sp, #32]
 800df30:	7812      	ldrb	r2, [r2, #0]
 800df32:	2a30      	cmp	r2, #48	; 0x30
 800df34:	d0f8      	beq.n	800df28 <_dtoa_r+0x65c>
 800df36:	9308      	str	r3, [sp, #32]
 800df38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df3a:	9303      	str	r3, [sp, #12]
 800df3c:	e046      	b.n	800dfcc <_dtoa_r+0x700>
 800df3e:	2200      	movs	r2, #0
 800df40:	4b2e      	ldr	r3, [pc, #184]	; (800dffc <_dtoa_r+0x730>)
 800df42:	f7f4 fa01 	bl	8002348 <__aeabi_dmul>
 800df46:	0006      	movs	r6, r0
 800df48:	000f      	movs	r7, r1
 800df4a:	e7b2      	b.n	800deb2 <_dtoa_r+0x5e6>
 800df4c:	9b06      	ldr	r3, [sp, #24]
 800df4e:	9a06      	ldr	r2, [sp, #24]
 800df50:	930a      	str	r3, [sp, #40]	; 0x28
 800df52:	9b07      	ldr	r3, [sp, #28]
 800df54:	9c08      	ldr	r4, [sp, #32]
 800df56:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800df58:	3b01      	subs	r3, #1
 800df5a:	189b      	adds	r3, r3, r2
 800df5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800df5e:	0032      	movs	r2, r6
 800df60:	003b      	movs	r3, r7
 800df62:	0020      	movs	r0, r4
 800df64:	0029      	movs	r1, r5
 800df66:	f7f3 fdf5 	bl	8001b54 <__aeabi_ddiv>
 800df6a:	f7f5 f84f 	bl	800300c <__aeabi_d2iz>
 800df6e:	9007      	str	r0, [sp, #28]
 800df70:	f7f5 f882 	bl	8003078 <__aeabi_i2d>
 800df74:	0032      	movs	r2, r6
 800df76:	003b      	movs	r3, r7
 800df78:	f7f4 f9e6 	bl	8002348 <__aeabi_dmul>
 800df7c:	0002      	movs	r2, r0
 800df7e:	000b      	movs	r3, r1
 800df80:	0020      	movs	r0, r4
 800df82:	0029      	movs	r1, r5
 800df84:	f7f4 fca2 	bl	80028cc <__aeabi_dsub>
 800df88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df8a:	001a      	movs	r2, r3
 800df8c:	3201      	adds	r2, #1
 800df8e:	920a      	str	r2, [sp, #40]	; 0x28
 800df90:	9208      	str	r2, [sp, #32]
 800df92:	9a07      	ldr	r2, [sp, #28]
 800df94:	3230      	adds	r2, #48	; 0x30
 800df96:	701a      	strb	r2, [r3, #0]
 800df98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d14f      	bne.n	800e03e <_dtoa_r+0x772>
 800df9e:	0002      	movs	r2, r0
 800dfa0:	000b      	movs	r3, r1
 800dfa2:	f7f3 fa77 	bl	8001494 <__aeabi_dadd>
 800dfa6:	0032      	movs	r2, r6
 800dfa8:	003b      	movs	r3, r7
 800dfaa:	0004      	movs	r4, r0
 800dfac:	000d      	movs	r5, r1
 800dfae:	f7f2 fa71 	bl	8000494 <__aeabi_dcmpgt>
 800dfb2:	2800      	cmp	r0, #0
 800dfb4:	d12e      	bne.n	800e014 <_dtoa_r+0x748>
 800dfb6:	0032      	movs	r2, r6
 800dfb8:	003b      	movs	r3, r7
 800dfba:	0020      	movs	r0, r4
 800dfbc:	0029      	movs	r1, r5
 800dfbe:	f7f2 fa4f 	bl	8000460 <__aeabi_dcmpeq>
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	d002      	beq.n	800dfcc <_dtoa_r+0x700>
 800dfc6:	9b07      	ldr	r3, [sp, #28]
 800dfc8:	07de      	lsls	r6, r3, #31
 800dfca:	d423      	bmi.n	800e014 <_dtoa_r+0x748>
 800dfcc:	9905      	ldr	r1, [sp, #20]
 800dfce:	9804      	ldr	r0, [sp, #16]
 800dfd0:	f000 ff44 	bl	800ee5c <_Bfree>
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	9a08      	ldr	r2, [sp, #32]
 800dfd8:	7013      	strb	r3, [r2, #0]
 800dfda:	9b03      	ldr	r3, [sp, #12]
 800dfdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800dfde:	3301      	adds	r3, #1
 800dfe0:	6013      	str	r3, [r2, #0]
 800dfe2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d100      	bne.n	800dfea <_dtoa_r+0x71e>
 800dfe8:	e4ba      	b.n	800d960 <_dtoa_r+0x94>
 800dfea:	9a08      	ldr	r2, [sp, #32]
 800dfec:	601a      	str	r2, [r3, #0]
 800dfee:	e4b7      	b.n	800d960 <_dtoa_r+0x94>
 800dff0:	08010838 	.word	0x08010838
 800dff4:	08010810 	.word	0x08010810
 800dff8:	3ff00000 	.word	0x3ff00000
 800dffc:	40240000 	.word	0x40240000
 800e000:	401c0000 	.word	0x401c0000
 800e004:	fcc00000 	.word	0xfcc00000
 800e008:	40140000 	.word	0x40140000
 800e00c:	7cc00000 	.word	0x7cc00000
 800e010:	3fe00000 	.word	0x3fe00000
 800e014:	9b03      	ldr	r3, [sp, #12]
 800e016:	930e      	str	r3, [sp, #56]	; 0x38
 800e018:	9b08      	ldr	r3, [sp, #32]
 800e01a:	9308      	str	r3, [sp, #32]
 800e01c:	3b01      	subs	r3, #1
 800e01e:	781a      	ldrb	r2, [r3, #0]
 800e020:	2a39      	cmp	r2, #57	; 0x39
 800e022:	d108      	bne.n	800e036 <_dtoa_r+0x76a>
 800e024:	9a06      	ldr	r2, [sp, #24]
 800e026:	429a      	cmp	r2, r3
 800e028:	d1f7      	bne.n	800e01a <_dtoa_r+0x74e>
 800e02a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e02c:	9906      	ldr	r1, [sp, #24]
 800e02e:	3201      	adds	r2, #1
 800e030:	920e      	str	r2, [sp, #56]	; 0x38
 800e032:	2230      	movs	r2, #48	; 0x30
 800e034:	700a      	strb	r2, [r1, #0]
 800e036:	781a      	ldrb	r2, [r3, #0]
 800e038:	3201      	adds	r2, #1
 800e03a:	701a      	strb	r2, [r3, #0]
 800e03c:	e77c      	b.n	800df38 <_dtoa_r+0x66c>
 800e03e:	2200      	movs	r2, #0
 800e040:	4ba9      	ldr	r3, [pc, #676]	; (800e2e8 <_dtoa_r+0xa1c>)
 800e042:	f7f4 f981 	bl	8002348 <__aeabi_dmul>
 800e046:	2200      	movs	r2, #0
 800e048:	2300      	movs	r3, #0
 800e04a:	0004      	movs	r4, r0
 800e04c:	000d      	movs	r5, r1
 800e04e:	f7f2 fa07 	bl	8000460 <__aeabi_dcmpeq>
 800e052:	2800      	cmp	r0, #0
 800e054:	d100      	bne.n	800e058 <_dtoa_r+0x78c>
 800e056:	e782      	b.n	800df5e <_dtoa_r+0x692>
 800e058:	e7b8      	b.n	800dfcc <_dtoa_r+0x700>
 800e05a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800e05c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e05e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e060:	2f00      	cmp	r7, #0
 800e062:	d012      	beq.n	800e08a <_dtoa_r+0x7be>
 800e064:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e066:	2a01      	cmp	r2, #1
 800e068:	dc6e      	bgt.n	800e148 <_dtoa_r+0x87c>
 800e06a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e06c:	2a00      	cmp	r2, #0
 800e06e:	d065      	beq.n	800e13c <_dtoa_r+0x870>
 800e070:	4a9e      	ldr	r2, [pc, #632]	; (800e2ec <_dtoa_r+0xa20>)
 800e072:	189b      	adds	r3, r3, r2
 800e074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e076:	2101      	movs	r1, #1
 800e078:	18d2      	adds	r2, r2, r3
 800e07a:	920a      	str	r2, [sp, #40]	; 0x28
 800e07c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e07e:	9804      	ldr	r0, [sp, #16]
 800e080:	18d3      	adds	r3, r2, r3
 800e082:	930c      	str	r3, [sp, #48]	; 0x30
 800e084:	f000 ffe6 	bl	800f054 <__i2b>
 800e088:	0007      	movs	r7, r0
 800e08a:	2c00      	cmp	r4, #0
 800e08c:	d00e      	beq.n	800e0ac <_dtoa_r+0x7e0>
 800e08e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e090:	2b00      	cmp	r3, #0
 800e092:	dd0b      	ble.n	800e0ac <_dtoa_r+0x7e0>
 800e094:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e096:	0023      	movs	r3, r4
 800e098:	4294      	cmp	r4, r2
 800e09a:	dd00      	ble.n	800e09e <_dtoa_r+0x7d2>
 800e09c:	0013      	movs	r3, r2
 800e09e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0a0:	1ae4      	subs	r4, r4, r3
 800e0a2:	1ad2      	subs	r2, r2, r3
 800e0a4:	920a      	str	r2, [sp, #40]	; 0x28
 800e0a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e0a8:	1ad3      	subs	r3, r2, r3
 800e0aa:	930c      	str	r3, [sp, #48]	; 0x30
 800e0ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d01e      	beq.n	800e0f0 <_dtoa_r+0x824>
 800e0b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d05c      	beq.n	800e172 <_dtoa_r+0x8a6>
 800e0b8:	2d00      	cmp	r5, #0
 800e0ba:	dd10      	ble.n	800e0de <_dtoa_r+0x812>
 800e0bc:	0039      	movs	r1, r7
 800e0be:	002a      	movs	r2, r5
 800e0c0:	9804      	ldr	r0, [sp, #16]
 800e0c2:	f001 f88f 	bl	800f1e4 <__pow5mult>
 800e0c6:	9a05      	ldr	r2, [sp, #20]
 800e0c8:	0001      	movs	r1, r0
 800e0ca:	0007      	movs	r7, r0
 800e0cc:	9804      	ldr	r0, [sp, #16]
 800e0ce:	f000 ffd9 	bl	800f084 <__multiply>
 800e0d2:	0006      	movs	r6, r0
 800e0d4:	9905      	ldr	r1, [sp, #20]
 800e0d6:	9804      	ldr	r0, [sp, #16]
 800e0d8:	f000 fec0 	bl	800ee5c <_Bfree>
 800e0dc:	9605      	str	r6, [sp, #20]
 800e0de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0e0:	1b5a      	subs	r2, r3, r5
 800e0e2:	42ab      	cmp	r3, r5
 800e0e4:	d004      	beq.n	800e0f0 <_dtoa_r+0x824>
 800e0e6:	9905      	ldr	r1, [sp, #20]
 800e0e8:	9804      	ldr	r0, [sp, #16]
 800e0ea:	f001 f87b 	bl	800f1e4 <__pow5mult>
 800e0ee:	9005      	str	r0, [sp, #20]
 800e0f0:	2101      	movs	r1, #1
 800e0f2:	9804      	ldr	r0, [sp, #16]
 800e0f4:	f000 ffae 	bl	800f054 <__i2b>
 800e0f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e0fa:	0006      	movs	r6, r0
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	dd3a      	ble.n	800e176 <_dtoa_r+0x8aa>
 800e100:	001a      	movs	r2, r3
 800e102:	0001      	movs	r1, r0
 800e104:	9804      	ldr	r0, [sp, #16]
 800e106:	f001 f86d 	bl	800f1e4 <__pow5mult>
 800e10a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e10c:	0006      	movs	r6, r0
 800e10e:	2500      	movs	r5, #0
 800e110:	2b01      	cmp	r3, #1
 800e112:	dc38      	bgt.n	800e186 <_dtoa_r+0x8ba>
 800e114:	2500      	movs	r5, #0
 800e116:	9b08      	ldr	r3, [sp, #32]
 800e118:	42ab      	cmp	r3, r5
 800e11a:	d130      	bne.n	800e17e <_dtoa_r+0x8b2>
 800e11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e11e:	031b      	lsls	r3, r3, #12
 800e120:	42ab      	cmp	r3, r5
 800e122:	d12c      	bne.n	800e17e <_dtoa_r+0x8b2>
 800e124:	4b72      	ldr	r3, [pc, #456]	; (800e2f0 <_dtoa_r+0xa24>)
 800e126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e128:	4213      	tst	r3, r2
 800e12a:	d028      	beq.n	800e17e <_dtoa_r+0x8b2>
 800e12c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e12e:	3501      	adds	r5, #1
 800e130:	3301      	adds	r3, #1
 800e132:	930a      	str	r3, [sp, #40]	; 0x28
 800e134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e136:	3301      	adds	r3, #1
 800e138:	930c      	str	r3, [sp, #48]	; 0x30
 800e13a:	e020      	b.n	800e17e <_dtoa_r+0x8b2>
 800e13c:	2336      	movs	r3, #54	; 0x36
 800e13e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e140:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e142:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e144:	1a9b      	subs	r3, r3, r2
 800e146:	e795      	b.n	800e074 <_dtoa_r+0x7a8>
 800e148:	9b07      	ldr	r3, [sp, #28]
 800e14a:	1e5d      	subs	r5, r3, #1
 800e14c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e14e:	42ab      	cmp	r3, r5
 800e150:	db07      	blt.n	800e162 <_dtoa_r+0x896>
 800e152:	1b5d      	subs	r5, r3, r5
 800e154:	9b07      	ldr	r3, [sp, #28]
 800e156:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e158:	2b00      	cmp	r3, #0
 800e15a:	da8b      	bge.n	800e074 <_dtoa_r+0x7a8>
 800e15c:	1ae4      	subs	r4, r4, r3
 800e15e:	2300      	movs	r3, #0
 800e160:	e788      	b.n	800e074 <_dtoa_r+0x7a8>
 800e162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e164:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e166:	1aeb      	subs	r3, r5, r3
 800e168:	18d3      	adds	r3, r2, r3
 800e16a:	950d      	str	r5, [sp, #52]	; 0x34
 800e16c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e16e:	2500      	movs	r5, #0
 800e170:	e7f0      	b.n	800e154 <_dtoa_r+0x888>
 800e172:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e174:	e7b7      	b.n	800e0e6 <_dtoa_r+0x81a>
 800e176:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e178:	2500      	movs	r5, #0
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	ddca      	ble.n	800e114 <_dtoa_r+0x848>
 800e17e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e180:	2001      	movs	r0, #1
 800e182:	2b00      	cmp	r3, #0
 800e184:	d008      	beq.n	800e198 <_dtoa_r+0x8cc>
 800e186:	6933      	ldr	r3, [r6, #16]
 800e188:	3303      	adds	r3, #3
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	18f3      	adds	r3, r6, r3
 800e18e:	6858      	ldr	r0, [r3, #4]
 800e190:	f000 ff18 	bl	800efc4 <__hi0bits>
 800e194:	2320      	movs	r3, #32
 800e196:	1a18      	subs	r0, r3, r0
 800e198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e19a:	1818      	adds	r0, r3, r0
 800e19c:	0002      	movs	r2, r0
 800e19e:	231f      	movs	r3, #31
 800e1a0:	401a      	ands	r2, r3
 800e1a2:	4218      	tst	r0, r3
 800e1a4:	d047      	beq.n	800e236 <_dtoa_r+0x96a>
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	1a9b      	subs	r3, r3, r2
 800e1aa:	2b04      	cmp	r3, #4
 800e1ac:	dd3f      	ble.n	800e22e <_dtoa_r+0x962>
 800e1ae:	231c      	movs	r3, #28
 800e1b0:	1a9b      	subs	r3, r3, r2
 800e1b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1b4:	18e4      	adds	r4, r4, r3
 800e1b6:	18d2      	adds	r2, r2, r3
 800e1b8:	920a      	str	r2, [sp, #40]	; 0x28
 800e1ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1bc:	18d3      	adds	r3, r2, r3
 800e1be:	930c      	str	r3, [sp, #48]	; 0x30
 800e1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	dd05      	ble.n	800e1d2 <_dtoa_r+0x906>
 800e1c6:	001a      	movs	r2, r3
 800e1c8:	9905      	ldr	r1, [sp, #20]
 800e1ca:	9804      	ldr	r0, [sp, #16]
 800e1cc:	f001 f866 	bl	800f29c <__lshift>
 800e1d0:	9005      	str	r0, [sp, #20]
 800e1d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	dd05      	ble.n	800e1e4 <_dtoa_r+0x918>
 800e1d8:	0031      	movs	r1, r6
 800e1da:	001a      	movs	r2, r3
 800e1dc:	9804      	ldr	r0, [sp, #16]
 800e1de:	f001 f85d 	bl	800f29c <__lshift>
 800e1e2:	0006      	movs	r6, r0
 800e1e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d027      	beq.n	800e23a <_dtoa_r+0x96e>
 800e1ea:	0031      	movs	r1, r6
 800e1ec:	9805      	ldr	r0, [sp, #20]
 800e1ee:	f001 f8c3 	bl	800f378 <__mcmp>
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	da21      	bge.n	800e23a <_dtoa_r+0x96e>
 800e1f6:	9b03      	ldr	r3, [sp, #12]
 800e1f8:	220a      	movs	r2, #10
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	9303      	str	r3, [sp, #12]
 800e1fe:	9905      	ldr	r1, [sp, #20]
 800e200:	2300      	movs	r3, #0
 800e202:	9804      	ldr	r0, [sp, #16]
 800e204:	f000 fe4e 	bl	800eea4 <__multadd>
 800e208:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e20a:	9005      	str	r0, [sp, #20]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d100      	bne.n	800e212 <_dtoa_r+0x946>
 800e210:	e15d      	b.n	800e4ce <_dtoa_r+0xc02>
 800e212:	2300      	movs	r3, #0
 800e214:	0039      	movs	r1, r7
 800e216:	220a      	movs	r2, #10
 800e218:	9804      	ldr	r0, [sp, #16]
 800e21a:	f000 fe43 	bl	800eea4 <__multadd>
 800e21e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e220:	0007      	movs	r7, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	dc49      	bgt.n	800e2ba <_dtoa_r+0x9ee>
 800e226:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e228:	2b02      	cmp	r3, #2
 800e22a:	dc0e      	bgt.n	800e24a <_dtoa_r+0x97e>
 800e22c:	e045      	b.n	800e2ba <_dtoa_r+0x9ee>
 800e22e:	2b04      	cmp	r3, #4
 800e230:	d0c6      	beq.n	800e1c0 <_dtoa_r+0x8f4>
 800e232:	331c      	adds	r3, #28
 800e234:	e7bd      	b.n	800e1b2 <_dtoa_r+0x8e6>
 800e236:	0013      	movs	r3, r2
 800e238:	e7fb      	b.n	800e232 <_dtoa_r+0x966>
 800e23a:	9b07      	ldr	r3, [sp, #28]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	dc36      	bgt.n	800e2ae <_dtoa_r+0x9e2>
 800e240:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e242:	2b02      	cmp	r3, #2
 800e244:	dd33      	ble.n	800e2ae <_dtoa_r+0x9e2>
 800e246:	9b07      	ldr	r3, [sp, #28]
 800e248:	930b      	str	r3, [sp, #44]	; 0x2c
 800e24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d10c      	bne.n	800e26a <_dtoa_r+0x99e>
 800e250:	0031      	movs	r1, r6
 800e252:	2205      	movs	r2, #5
 800e254:	9804      	ldr	r0, [sp, #16]
 800e256:	f000 fe25 	bl	800eea4 <__multadd>
 800e25a:	0006      	movs	r6, r0
 800e25c:	0001      	movs	r1, r0
 800e25e:	9805      	ldr	r0, [sp, #20]
 800e260:	f001 f88a 	bl	800f378 <__mcmp>
 800e264:	2800      	cmp	r0, #0
 800e266:	dd00      	ble.n	800e26a <_dtoa_r+0x99e>
 800e268:	e59f      	b.n	800ddaa <_dtoa_r+0x4de>
 800e26a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e26c:	43db      	mvns	r3, r3
 800e26e:	9303      	str	r3, [sp, #12]
 800e270:	9b06      	ldr	r3, [sp, #24]
 800e272:	9308      	str	r3, [sp, #32]
 800e274:	2500      	movs	r5, #0
 800e276:	0031      	movs	r1, r6
 800e278:	9804      	ldr	r0, [sp, #16]
 800e27a:	f000 fdef 	bl	800ee5c <_Bfree>
 800e27e:	2f00      	cmp	r7, #0
 800e280:	d100      	bne.n	800e284 <_dtoa_r+0x9b8>
 800e282:	e6a3      	b.n	800dfcc <_dtoa_r+0x700>
 800e284:	2d00      	cmp	r5, #0
 800e286:	d005      	beq.n	800e294 <_dtoa_r+0x9c8>
 800e288:	42bd      	cmp	r5, r7
 800e28a:	d003      	beq.n	800e294 <_dtoa_r+0x9c8>
 800e28c:	0029      	movs	r1, r5
 800e28e:	9804      	ldr	r0, [sp, #16]
 800e290:	f000 fde4 	bl	800ee5c <_Bfree>
 800e294:	0039      	movs	r1, r7
 800e296:	9804      	ldr	r0, [sp, #16]
 800e298:	f000 fde0 	bl	800ee5c <_Bfree>
 800e29c:	e696      	b.n	800dfcc <_dtoa_r+0x700>
 800e29e:	2600      	movs	r6, #0
 800e2a0:	0037      	movs	r7, r6
 800e2a2:	e7e2      	b.n	800e26a <_dtoa_r+0x99e>
 800e2a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2a6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800e2a8:	9303      	str	r3, [sp, #12]
 800e2aa:	0037      	movs	r7, r6
 800e2ac:	e57d      	b.n	800ddaa <_dtoa_r+0x4de>
 800e2ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d100      	bne.n	800e2b6 <_dtoa_r+0x9ea>
 800e2b4:	e0c3      	b.n	800e43e <_dtoa_r+0xb72>
 800e2b6:	9b07      	ldr	r3, [sp, #28]
 800e2b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2ba:	2c00      	cmp	r4, #0
 800e2bc:	dd05      	ble.n	800e2ca <_dtoa_r+0x9fe>
 800e2be:	0039      	movs	r1, r7
 800e2c0:	0022      	movs	r2, r4
 800e2c2:	9804      	ldr	r0, [sp, #16]
 800e2c4:	f000 ffea 	bl	800f29c <__lshift>
 800e2c8:	0007      	movs	r7, r0
 800e2ca:	0038      	movs	r0, r7
 800e2cc:	2d00      	cmp	r5, #0
 800e2ce:	d024      	beq.n	800e31a <_dtoa_r+0xa4e>
 800e2d0:	6879      	ldr	r1, [r7, #4]
 800e2d2:	9804      	ldr	r0, [sp, #16]
 800e2d4:	f000 fd7e 	bl	800edd4 <_Balloc>
 800e2d8:	1e04      	subs	r4, r0, #0
 800e2da:	d111      	bne.n	800e300 <_dtoa_r+0xa34>
 800e2dc:	0022      	movs	r2, r4
 800e2de:	4b05      	ldr	r3, [pc, #20]	; (800e2f4 <_dtoa_r+0xa28>)
 800e2e0:	4805      	ldr	r0, [pc, #20]	; (800e2f8 <_dtoa_r+0xa2c>)
 800e2e2:	4906      	ldr	r1, [pc, #24]	; (800e2fc <_dtoa_r+0xa30>)
 800e2e4:	f7ff fb07 	bl	800d8f6 <_dtoa_r+0x2a>
 800e2e8:	40240000 	.word	0x40240000
 800e2ec:	00000433 	.word	0x00000433
 800e2f0:	7ff00000 	.word	0x7ff00000
 800e2f4:	08010746 	.word	0x08010746
 800e2f8:	080106ee 	.word	0x080106ee
 800e2fc:	000002ef 	.word	0x000002ef
 800e300:	0039      	movs	r1, r7
 800e302:	693a      	ldr	r2, [r7, #16]
 800e304:	310c      	adds	r1, #12
 800e306:	3202      	adds	r2, #2
 800e308:	0092      	lsls	r2, r2, #2
 800e30a:	300c      	adds	r0, #12
 800e30c:	f7ff fa3a 	bl	800d784 <memcpy>
 800e310:	2201      	movs	r2, #1
 800e312:	0021      	movs	r1, r4
 800e314:	9804      	ldr	r0, [sp, #16]
 800e316:	f000 ffc1 	bl	800f29c <__lshift>
 800e31a:	9b06      	ldr	r3, [sp, #24]
 800e31c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e31e:	9307      	str	r3, [sp, #28]
 800e320:	3b01      	subs	r3, #1
 800e322:	189b      	adds	r3, r3, r2
 800e324:	2201      	movs	r2, #1
 800e326:	003d      	movs	r5, r7
 800e328:	0007      	movs	r7, r0
 800e32a:	930e      	str	r3, [sp, #56]	; 0x38
 800e32c:	9b08      	ldr	r3, [sp, #32]
 800e32e:	4013      	ands	r3, r2
 800e330:	930d      	str	r3, [sp, #52]	; 0x34
 800e332:	0031      	movs	r1, r6
 800e334:	9805      	ldr	r0, [sp, #20]
 800e336:	f7ff fa39 	bl	800d7ac <quorem>
 800e33a:	0029      	movs	r1, r5
 800e33c:	0004      	movs	r4, r0
 800e33e:	900b      	str	r0, [sp, #44]	; 0x2c
 800e340:	9805      	ldr	r0, [sp, #20]
 800e342:	f001 f819 	bl	800f378 <__mcmp>
 800e346:	003a      	movs	r2, r7
 800e348:	900c      	str	r0, [sp, #48]	; 0x30
 800e34a:	0031      	movs	r1, r6
 800e34c:	9804      	ldr	r0, [sp, #16]
 800e34e:	f001 f82f 	bl	800f3b0 <__mdiff>
 800e352:	2201      	movs	r2, #1
 800e354:	68c3      	ldr	r3, [r0, #12]
 800e356:	3430      	adds	r4, #48	; 0x30
 800e358:	9008      	str	r0, [sp, #32]
 800e35a:	920a      	str	r2, [sp, #40]	; 0x28
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d104      	bne.n	800e36a <_dtoa_r+0xa9e>
 800e360:	0001      	movs	r1, r0
 800e362:	9805      	ldr	r0, [sp, #20]
 800e364:	f001 f808 	bl	800f378 <__mcmp>
 800e368:	900a      	str	r0, [sp, #40]	; 0x28
 800e36a:	9908      	ldr	r1, [sp, #32]
 800e36c:	9804      	ldr	r0, [sp, #16]
 800e36e:	f000 fd75 	bl	800ee5c <_Bfree>
 800e372:	9b07      	ldr	r3, [sp, #28]
 800e374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e376:	3301      	adds	r3, #1
 800e378:	9308      	str	r3, [sp, #32]
 800e37a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e37c:	4313      	orrs	r3, r2
 800e37e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e380:	4313      	orrs	r3, r2
 800e382:	d109      	bne.n	800e398 <_dtoa_r+0xacc>
 800e384:	2c39      	cmp	r4, #57	; 0x39
 800e386:	d022      	beq.n	800e3ce <_dtoa_r+0xb02>
 800e388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	dd01      	ble.n	800e392 <_dtoa_r+0xac6>
 800e38e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e390:	3431      	adds	r4, #49	; 0x31
 800e392:	9b07      	ldr	r3, [sp, #28]
 800e394:	701c      	strb	r4, [r3, #0]
 800e396:	e76e      	b.n	800e276 <_dtoa_r+0x9aa>
 800e398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	db04      	blt.n	800e3a8 <_dtoa_r+0xadc>
 800e39e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	d11e      	bne.n	800e3e6 <_dtoa_r+0xb1a>
 800e3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	ddf1      	ble.n	800e392 <_dtoa_r+0xac6>
 800e3ae:	9905      	ldr	r1, [sp, #20]
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	9804      	ldr	r0, [sp, #16]
 800e3b4:	f000 ff72 	bl	800f29c <__lshift>
 800e3b8:	0031      	movs	r1, r6
 800e3ba:	9005      	str	r0, [sp, #20]
 800e3bc:	f000 ffdc 	bl	800f378 <__mcmp>
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	dc02      	bgt.n	800e3ca <_dtoa_r+0xafe>
 800e3c4:	d1e5      	bne.n	800e392 <_dtoa_r+0xac6>
 800e3c6:	07e3      	lsls	r3, r4, #31
 800e3c8:	d5e3      	bpl.n	800e392 <_dtoa_r+0xac6>
 800e3ca:	2c39      	cmp	r4, #57	; 0x39
 800e3cc:	d1df      	bne.n	800e38e <_dtoa_r+0xac2>
 800e3ce:	2339      	movs	r3, #57	; 0x39
 800e3d0:	9a07      	ldr	r2, [sp, #28]
 800e3d2:	7013      	strb	r3, [r2, #0]
 800e3d4:	9b08      	ldr	r3, [sp, #32]
 800e3d6:	9308      	str	r3, [sp, #32]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	781a      	ldrb	r2, [r3, #0]
 800e3dc:	2a39      	cmp	r2, #57	; 0x39
 800e3de:	d063      	beq.n	800e4a8 <_dtoa_r+0xbdc>
 800e3e0:	3201      	adds	r2, #1
 800e3e2:	701a      	strb	r2, [r3, #0]
 800e3e4:	e747      	b.n	800e276 <_dtoa_r+0x9aa>
 800e3e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	dd03      	ble.n	800e3f4 <_dtoa_r+0xb28>
 800e3ec:	2c39      	cmp	r4, #57	; 0x39
 800e3ee:	d0ee      	beq.n	800e3ce <_dtoa_r+0xb02>
 800e3f0:	3401      	adds	r4, #1
 800e3f2:	e7ce      	b.n	800e392 <_dtoa_r+0xac6>
 800e3f4:	9b07      	ldr	r3, [sp, #28]
 800e3f6:	9a07      	ldr	r2, [sp, #28]
 800e3f8:	701c      	strb	r4, [r3, #0]
 800e3fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d03e      	beq.n	800e47e <_dtoa_r+0xbb2>
 800e400:	2300      	movs	r3, #0
 800e402:	220a      	movs	r2, #10
 800e404:	9905      	ldr	r1, [sp, #20]
 800e406:	9804      	ldr	r0, [sp, #16]
 800e408:	f000 fd4c 	bl	800eea4 <__multadd>
 800e40c:	2300      	movs	r3, #0
 800e40e:	9005      	str	r0, [sp, #20]
 800e410:	220a      	movs	r2, #10
 800e412:	0029      	movs	r1, r5
 800e414:	9804      	ldr	r0, [sp, #16]
 800e416:	42bd      	cmp	r5, r7
 800e418:	d106      	bne.n	800e428 <_dtoa_r+0xb5c>
 800e41a:	f000 fd43 	bl	800eea4 <__multadd>
 800e41e:	0005      	movs	r5, r0
 800e420:	0007      	movs	r7, r0
 800e422:	9b08      	ldr	r3, [sp, #32]
 800e424:	9307      	str	r3, [sp, #28]
 800e426:	e784      	b.n	800e332 <_dtoa_r+0xa66>
 800e428:	f000 fd3c 	bl	800eea4 <__multadd>
 800e42c:	0039      	movs	r1, r7
 800e42e:	0005      	movs	r5, r0
 800e430:	2300      	movs	r3, #0
 800e432:	220a      	movs	r2, #10
 800e434:	9804      	ldr	r0, [sp, #16]
 800e436:	f000 fd35 	bl	800eea4 <__multadd>
 800e43a:	0007      	movs	r7, r0
 800e43c:	e7f1      	b.n	800e422 <_dtoa_r+0xb56>
 800e43e:	9b07      	ldr	r3, [sp, #28]
 800e440:	930b      	str	r3, [sp, #44]	; 0x2c
 800e442:	2500      	movs	r5, #0
 800e444:	0031      	movs	r1, r6
 800e446:	9805      	ldr	r0, [sp, #20]
 800e448:	f7ff f9b0 	bl	800d7ac <quorem>
 800e44c:	9b06      	ldr	r3, [sp, #24]
 800e44e:	3030      	adds	r0, #48	; 0x30
 800e450:	5558      	strb	r0, [r3, r5]
 800e452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e454:	3501      	adds	r5, #1
 800e456:	0004      	movs	r4, r0
 800e458:	42ab      	cmp	r3, r5
 800e45a:	dd07      	ble.n	800e46c <_dtoa_r+0xba0>
 800e45c:	2300      	movs	r3, #0
 800e45e:	220a      	movs	r2, #10
 800e460:	9905      	ldr	r1, [sp, #20]
 800e462:	9804      	ldr	r0, [sp, #16]
 800e464:	f000 fd1e 	bl	800eea4 <__multadd>
 800e468:	9005      	str	r0, [sp, #20]
 800e46a:	e7eb      	b.n	800e444 <_dtoa_r+0xb78>
 800e46c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e46e:	2301      	movs	r3, #1
 800e470:	2a00      	cmp	r2, #0
 800e472:	dd00      	ble.n	800e476 <_dtoa_r+0xbaa>
 800e474:	0013      	movs	r3, r2
 800e476:	2500      	movs	r5, #0
 800e478:	9a06      	ldr	r2, [sp, #24]
 800e47a:	18d3      	adds	r3, r2, r3
 800e47c:	9308      	str	r3, [sp, #32]
 800e47e:	9905      	ldr	r1, [sp, #20]
 800e480:	2201      	movs	r2, #1
 800e482:	9804      	ldr	r0, [sp, #16]
 800e484:	f000 ff0a 	bl	800f29c <__lshift>
 800e488:	0031      	movs	r1, r6
 800e48a:	9005      	str	r0, [sp, #20]
 800e48c:	f000 ff74 	bl	800f378 <__mcmp>
 800e490:	2800      	cmp	r0, #0
 800e492:	dc9f      	bgt.n	800e3d4 <_dtoa_r+0xb08>
 800e494:	d101      	bne.n	800e49a <_dtoa_r+0xbce>
 800e496:	07e4      	lsls	r4, r4, #31
 800e498:	d49c      	bmi.n	800e3d4 <_dtoa_r+0xb08>
 800e49a:	9b08      	ldr	r3, [sp, #32]
 800e49c:	9308      	str	r3, [sp, #32]
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	781a      	ldrb	r2, [r3, #0]
 800e4a2:	2a30      	cmp	r2, #48	; 0x30
 800e4a4:	d0fa      	beq.n	800e49c <_dtoa_r+0xbd0>
 800e4a6:	e6e6      	b.n	800e276 <_dtoa_r+0x9aa>
 800e4a8:	9a06      	ldr	r2, [sp, #24]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d193      	bne.n	800e3d6 <_dtoa_r+0xb0a>
 800e4ae:	9b03      	ldr	r3, [sp, #12]
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	9303      	str	r3, [sp, #12]
 800e4b4:	2331      	movs	r3, #49	; 0x31
 800e4b6:	7013      	strb	r3, [r2, #0]
 800e4b8:	e6dd      	b.n	800e276 <_dtoa_r+0x9aa>
 800e4ba:	4b09      	ldr	r3, [pc, #36]	; (800e4e0 <_dtoa_r+0xc14>)
 800e4bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e4be:	9306      	str	r3, [sp, #24]
 800e4c0:	4b08      	ldr	r3, [pc, #32]	; (800e4e4 <_dtoa_r+0xc18>)
 800e4c2:	2a00      	cmp	r2, #0
 800e4c4:	d001      	beq.n	800e4ca <_dtoa_r+0xbfe>
 800e4c6:	f7ff fa49 	bl	800d95c <_dtoa_r+0x90>
 800e4ca:	f7ff fa49 	bl	800d960 <_dtoa_r+0x94>
 800e4ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	dcb6      	bgt.n	800e442 <_dtoa_r+0xb76>
 800e4d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e4d6:	2b02      	cmp	r3, #2
 800e4d8:	dd00      	ble.n	800e4dc <_dtoa_r+0xc10>
 800e4da:	e6b6      	b.n	800e24a <_dtoa_r+0x97e>
 800e4dc:	e7b1      	b.n	800e442 <_dtoa_r+0xb76>
 800e4de:	46c0      	nop			; (mov r8, r8)
 800e4e0:	080106ca 	.word	0x080106ca
 800e4e4:	080106d2 	.word	0x080106d2

0800e4e8 <_free_r>:
 800e4e8:	b570      	push	{r4, r5, r6, lr}
 800e4ea:	0005      	movs	r5, r0
 800e4ec:	2900      	cmp	r1, #0
 800e4ee:	d010      	beq.n	800e512 <_free_r+0x2a>
 800e4f0:	1f0c      	subs	r4, r1, #4
 800e4f2:	6823      	ldr	r3, [r4, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	da00      	bge.n	800e4fa <_free_r+0x12>
 800e4f8:	18e4      	adds	r4, r4, r3
 800e4fa:	0028      	movs	r0, r5
 800e4fc:	f000 fc5a 	bl	800edb4 <__malloc_lock>
 800e500:	4a1d      	ldr	r2, [pc, #116]	; (800e578 <_free_r+0x90>)
 800e502:	6813      	ldr	r3, [r2, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d105      	bne.n	800e514 <_free_r+0x2c>
 800e508:	6063      	str	r3, [r4, #4]
 800e50a:	6014      	str	r4, [r2, #0]
 800e50c:	0028      	movs	r0, r5
 800e50e:	f000 fc59 	bl	800edc4 <__malloc_unlock>
 800e512:	bd70      	pop	{r4, r5, r6, pc}
 800e514:	42a3      	cmp	r3, r4
 800e516:	d908      	bls.n	800e52a <_free_r+0x42>
 800e518:	6820      	ldr	r0, [r4, #0]
 800e51a:	1821      	adds	r1, r4, r0
 800e51c:	428b      	cmp	r3, r1
 800e51e:	d1f3      	bne.n	800e508 <_free_r+0x20>
 800e520:	6819      	ldr	r1, [r3, #0]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	1809      	adds	r1, r1, r0
 800e526:	6021      	str	r1, [r4, #0]
 800e528:	e7ee      	b.n	800e508 <_free_r+0x20>
 800e52a:	001a      	movs	r2, r3
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d001      	beq.n	800e536 <_free_r+0x4e>
 800e532:	42a3      	cmp	r3, r4
 800e534:	d9f9      	bls.n	800e52a <_free_r+0x42>
 800e536:	6811      	ldr	r1, [r2, #0]
 800e538:	1850      	adds	r0, r2, r1
 800e53a:	42a0      	cmp	r0, r4
 800e53c:	d10b      	bne.n	800e556 <_free_r+0x6e>
 800e53e:	6820      	ldr	r0, [r4, #0]
 800e540:	1809      	adds	r1, r1, r0
 800e542:	1850      	adds	r0, r2, r1
 800e544:	6011      	str	r1, [r2, #0]
 800e546:	4283      	cmp	r3, r0
 800e548:	d1e0      	bne.n	800e50c <_free_r+0x24>
 800e54a:	6818      	ldr	r0, [r3, #0]
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	1841      	adds	r1, r0, r1
 800e550:	6011      	str	r1, [r2, #0]
 800e552:	6053      	str	r3, [r2, #4]
 800e554:	e7da      	b.n	800e50c <_free_r+0x24>
 800e556:	42a0      	cmp	r0, r4
 800e558:	d902      	bls.n	800e560 <_free_r+0x78>
 800e55a:	230c      	movs	r3, #12
 800e55c:	602b      	str	r3, [r5, #0]
 800e55e:	e7d5      	b.n	800e50c <_free_r+0x24>
 800e560:	6820      	ldr	r0, [r4, #0]
 800e562:	1821      	adds	r1, r4, r0
 800e564:	428b      	cmp	r3, r1
 800e566:	d103      	bne.n	800e570 <_free_r+0x88>
 800e568:	6819      	ldr	r1, [r3, #0]
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	1809      	adds	r1, r1, r0
 800e56e:	6021      	str	r1, [r4, #0]
 800e570:	6063      	str	r3, [r4, #4]
 800e572:	6054      	str	r4, [r2, #4]
 800e574:	e7ca      	b.n	800e50c <_free_r+0x24>
 800e576:	46c0      	nop			; (mov r8, r8)
 800e578:	20000c6c 	.word	0x20000c6c

0800e57c <rshift>:
 800e57c:	0002      	movs	r2, r0
 800e57e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e580:	6904      	ldr	r4, [r0, #16]
 800e582:	114b      	asrs	r3, r1, #5
 800e584:	b085      	sub	sp, #20
 800e586:	3214      	adds	r2, #20
 800e588:	9302      	str	r3, [sp, #8]
 800e58a:	114d      	asrs	r5, r1, #5
 800e58c:	0013      	movs	r3, r2
 800e58e:	42ac      	cmp	r4, r5
 800e590:	dd32      	ble.n	800e5f8 <rshift+0x7c>
 800e592:	261f      	movs	r6, #31
 800e594:	000f      	movs	r7, r1
 800e596:	114b      	asrs	r3, r1, #5
 800e598:	009b      	lsls	r3, r3, #2
 800e59a:	00a5      	lsls	r5, r4, #2
 800e59c:	18d3      	adds	r3, r2, r3
 800e59e:	4037      	ands	r7, r6
 800e5a0:	1955      	adds	r5, r2, r5
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	9701      	str	r7, [sp, #4]
 800e5a6:	4231      	tst	r1, r6
 800e5a8:	d10d      	bne.n	800e5c6 <rshift+0x4a>
 800e5aa:	0016      	movs	r6, r2
 800e5ac:	0019      	movs	r1, r3
 800e5ae:	428d      	cmp	r5, r1
 800e5b0:	d836      	bhi.n	800e620 <rshift+0xa4>
 800e5b2:	9900      	ldr	r1, [sp, #0]
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	3903      	subs	r1, #3
 800e5b8:	428d      	cmp	r5, r1
 800e5ba:	d302      	bcc.n	800e5c2 <rshift+0x46>
 800e5bc:	9b02      	ldr	r3, [sp, #8]
 800e5be:	1ae4      	subs	r4, r4, r3
 800e5c0:	00a3      	lsls	r3, r4, #2
 800e5c2:	18d3      	adds	r3, r2, r3
 800e5c4:	e018      	b.n	800e5f8 <rshift+0x7c>
 800e5c6:	2120      	movs	r1, #32
 800e5c8:	9e01      	ldr	r6, [sp, #4]
 800e5ca:	9f01      	ldr	r7, [sp, #4]
 800e5cc:	1b89      	subs	r1, r1, r6
 800e5ce:	9e00      	ldr	r6, [sp, #0]
 800e5d0:	9103      	str	r1, [sp, #12]
 800e5d2:	ce02      	ldmia	r6!, {r1}
 800e5d4:	4694      	mov	ip, r2
 800e5d6:	40f9      	lsrs	r1, r7
 800e5d8:	42b5      	cmp	r5, r6
 800e5da:	d816      	bhi.n	800e60a <rshift+0x8e>
 800e5dc:	9e00      	ldr	r6, [sp, #0]
 800e5de:	2300      	movs	r3, #0
 800e5e0:	3601      	adds	r6, #1
 800e5e2:	42b5      	cmp	r5, r6
 800e5e4:	d303      	bcc.n	800e5ee <rshift+0x72>
 800e5e6:	9b02      	ldr	r3, [sp, #8]
 800e5e8:	1ae3      	subs	r3, r4, r3
 800e5ea:	009b      	lsls	r3, r3, #2
 800e5ec:	3b04      	subs	r3, #4
 800e5ee:	18d3      	adds	r3, r2, r3
 800e5f0:	6019      	str	r1, [r3, #0]
 800e5f2:	2900      	cmp	r1, #0
 800e5f4:	d000      	beq.n	800e5f8 <rshift+0x7c>
 800e5f6:	3304      	adds	r3, #4
 800e5f8:	1a99      	subs	r1, r3, r2
 800e5fa:	1089      	asrs	r1, r1, #2
 800e5fc:	6101      	str	r1, [r0, #16]
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d101      	bne.n	800e606 <rshift+0x8a>
 800e602:	2300      	movs	r3, #0
 800e604:	6143      	str	r3, [r0, #20]
 800e606:	b005      	add	sp, #20
 800e608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e60a:	6837      	ldr	r7, [r6, #0]
 800e60c:	9b03      	ldr	r3, [sp, #12]
 800e60e:	409f      	lsls	r7, r3
 800e610:	430f      	orrs	r7, r1
 800e612:	4661      	mov	r1, ip
 800e614:	c180      	stmia	r1!, {r7}
 800e616:	468c      	mov	ip, r1
 800e618:	9b01      	ldr	r3, [sp, #4]
 800e61a:	ce02      	ldmia	r6!, {r1}
 800e61c:	40d9      	lsrs	r1, r3
 800e61e:	e7db      	b.n	800e5d8 <rshift+0x5c>
 800e620:	c980      	ldmia	r1!, {r7}
 800e622:	c680      	stmia	r6!, {r7}
 800e624:	e7c3      	b.n	800e5ae <rshift+0x32>

0800e626 <__hexdig_fun>:
 800e626:	0002      	movs	r2, r0
 800e628:	3a30      	subs	r2, #48	; 0x30
 800e62a:	0003      	movs	r3, r0
 800e62c:	2a09      	cmp	r2, #9
 800e62e:	d802      	bhi.n	800e636 <__hexdig_fun+0x10>
 800e630:	3b20      	subs	r3, #32
 800e632:	b2d8      	uxtb	r0, r3
 800e634:	4770      	bx	lr
 800e636:	0002      	movs	r2, r0
 800e638:	3a61      	subs	r2, #97	; 0x61
 800e63a:	2a05      	cmp	r2, #5
 800e63c:	d801      	bhi.n	800e642 <__hexdig_fun+0x1c>
 800e63e:	3b47      	subs	r3, #71	; 0x47
 800e640:	e7f7      	b.n	800e632 <__hexdig_fun+0xc>
 800e642:	001a      	movs	r2, r3
 800e644:	3a41      	subs	r2, #65	; 0x41
 800e646:	2000      	movs	r0, #0
 800e648:	2a05      	cmp	r2, #5
 800e64a:	d8f3      	bhi.n	800e634 <__hexdig_fun+0xe>
 800e64c:	3b27      	subs	r3, #39	; 0x27
 800e64e:	e7f0      	b.n	800e632 <__hexdig_fun+0xc>

0800e650 <__gethex>:
 800e650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e652:	b089      	sub	sp, #36	; 0x24
 800e654:	9307      	str	r3, [sp, #28]
 800e656:	2302      	movs	r3, #2
 800e658:	9201      	str	r2, [sp, #4]
 800e65a:	680a      	ldr	r2, [r1, #0]
 800e65c:	425b      	negs	r3, r3
 800e65e:	9003      	str	r0, [sp, #12]
 800e660:	9106      	str	r1, [sp, #24]
 800e662:	1c96      	adds	r6, r2, #2
 800e664:	1a9b      	subs	r3, r3, r2
 800e666:	199a      	adds	r2, r3, r6
 800e668:	9600      	str	r6, [sp, #0]
 800e66a:	9205      	str	r2, [sp, #20]
 800e66c:	9a00      	ldr	r2, [sp, #0]
 800e66e:	3601      	adds	r6, #1
 800e670:	7810      	ldrb	r0, [r2, #0]
 800e672:	2830      	cmp	r0, #48	; 0x30
 800e674:	d0f7      	beq.n	800e666 <__gethex+0x16>
 800e676:	f7ff ffd6 	bl	800e626 <__hexdig_fun>
 800e67a:	2300      	movs	r3, #0
 800e67c:	001d      	movs	r5, r3
 800e67e:	9302      	str	r3, [sp, #8]
 800e680:	4298      	cmp	r0, r3
 800e682:	d11d      	bne.n	800e6c0 <__gethex+0x70>
 800e684:	2201      	movs	r2, #1
 800e686:	49a6      	ldr	r1, [pc, #664]	; (800e920 <__gethex+0x2d0>)
 800e688:	9800      	ldr	r0, [sp, #0]
 800e68a:	f7fe ffc5 	bl	800d618 <strncmp>
 800e68e:	0007      	movs	r7, r0
 800e690:	42a8      	cmp	r0, r5
 800e692:	d169      	bne.n	800e768 <__gethex+0x118>
 800e694:	9b00      	ldr	r3, [sp, #0]
 800e696:	0034      	movs	r4, r6
 800e698:	7858      	ldrb	r0, [r3, #1]
 800e69a:	f7ff ffc4 	bl	800e626 <__hexdig_fun>
 800e69e:	2301      	movs	r3, #1
 800e6a0:	9302      	str	r3, [sp, #8]
 800e6a2:	42a8      	cmp	r0, r5
 800e6a4:	d02f      	beq.n	800e706 <__gethex+0xb6>
 800e6a6:	9600      	str	r6, [sp, #0]
 800e6a8:	9b00      	ldr	r3, [sp, #0]
 800e6aa:	7818      	ldrb	r0, [r3, #0]
 800e6ac:	2830      	cmp	r0, #48	; 0x30
 800e6ae:	d009      	beq.n	800e6c4 <__gethex+0x74>
 800e6b0:	f7ff ffb9 	bl	800e626 <__hexdig_fun>
 800e6b4:	4242      	negs	r2, r0
 800e6b6:	4142      	adcs	r2, r0
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	0035      	movs	r5, r6
 800e6bc:	9202      	str	r2, [sp, #8]
 800e6be:	9305      	str	r3, [sp, #20]
 800e6c0:	9c00      	ldr	r4, [sp, #0]
 800e6c2:	e004      	b.n	800e6ce <__gethex+0x7e>
 800e6c4:	9b00      	ldr	r3, [sp, #0]
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	9300      	str	r3, [sp, #0]
 800e6ca:	e7ed      	b.n	800e6a8 <__gethex+0x58>
 800e6cc:	3401      	adds	r4, #1
 800e6ce:	7820      	ldrb	r0, [r4, #0]
 800e6d0:	f7ff ffa9 	bl	800e626 <__hexdig_fun>
 800e6d4:	1e07      	subs	r7, r0, #0
 800e6d6:	d1f9      	bne.n	800e6cc <__gethex+0x7c>
 800e6d8:	2201      	movs	r2, #1
 800e6da:	0020      	movs	r0, r4
 800e6dc:	4990      	ldr	r1, [pc, #576]	; (800e920 <__gethex+0x2d0>)
 800e6de:	f7fe ff9b 	bl	800d618 <strncmp>
 800e6e2:	2800      	cmp	r0, #0
 800e6e4:	d10d      	bne.n	800e702 <__gethex+0xb2>
 800e6e6:	2d00      	cmp	r5, #0
 800e6e8:	d106      	bne.n	800e6f8 <__gethex+0xa8>
 800e6ea:	3401      	adds	r4, #1
 800e6ec:	0025      	movs	r5, r4
 800e6ee:	7820      	ldrb	r0, [r4, #0]
 800e6f0:	f7ff ff99 	bl	800e626 <__hexdig_fun>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	d102      	bne.n	800e6fe <__gethex+0xae>
 800e6f8:	1b2d      	subs	r5, r5, r4
 800e6fa:	00af      	lsls	r7, r5, #2
 800e6fc:	e003      	b.n	800e706 <__gethex+0xb6>
 800e6fe:	3401      	adds	r4, #1
 800e700:	e7f5      	b.n	800e6ee <__gethex+0x9e>
 800e702:	2d00      	cmp	r5, #0
 800e704:	d1f8      	bne.n	800e6f8 <__gethex+0xa8>
 800e706:	2220      	movs	r2, #32
 800e708:	7823      	ldrb	r3, [r4, #0]
 800e70a:	0026      	movs	r6, r4
 800e70c:	4393      	bics	r3, r2
 800e70e:	2b50      	cmp	r3, #80	; 0x50
 800e710:	d11d      	bne.n	800e74e <__gethex+0xfe>
 800e712:	7863      	ldrb	r3, [r4, #1]
 800e714:	2b2b      	cmp	r3, #43	; 0x2b
 800e716:	d02c      	beq.n	800e772 <__gethex+0x122>
 800e718:	2b2d      	cmp	r3, #45	; 0x2d
 800e71a:	d02e      	beq.n	800e77a <__gethex+0x12a>
 800e71c:	2300      	movs	r3, #0
 800e71e:	1c66      	adds	r6, r4, #1
 800e720:	9304      	str	r3, [sp, #16]
 800e722:	7830      	ldrb	r0, [r6, #0]
 800e724:	f7ff ff7f 	bl	800e626 <__hexdig_fun>
 800e728:	1e43      	subs	r3, r0, #1
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	2b18      	cmp	r3, #24
 800e72e:	d82b      	bhi.n	800e788 <__gethex+0x138>
 800e730:	3810      	subs	r0, #16
 800e732:	0005      	movs	r5, r0
 800e734:	7870      	ldrb	r0, [r6, #1]
 800e736:	f7ff ff76 	bl	800e626 <__hexdig_fun>
 800e73a:	1e43      	subs	r3, r0, #1
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	3601      	adds	r6, #1
 800e740:	2b18      	cmp	r3, #24
 800e742:	d91c      	bls.n	800e77e <__gethex+0x12e>
 800e744:	9b04      	ldr	r3, [sp, #16]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d000      	beq.n	800e74c <__gethex+0xfc>
 800e74a:	426d      	negs	r5, r5
 800e74c:	197f      	adds	r7, r7, r5
 800e74e:	9b06      	ldr	r3, [sp, #24]
 800e750:	601e      	str	r6, [r3, #0]
 800e752:	9b02      	ldr	r3, [sp, #8]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d019      	beq.n	800e78c <__gethex+0x13c>
 800e758:	2600      	movs	r6, #0
 800e75a:	9b05      	ldr	r3, [sp, #20]
 800e75c:	42b3      	cmp	r3, r6
 800e75e:	d100      	bne.n	800e762 <__gethex+0x112>
 800e760:	3606      	adds	r6, #6
 800e762:	0030      	movs	r0, r6
 800e764:	b009      	add	sp, #36	; 0x24
 800e766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e768:	2301      	movs	r3, #1
 800e76a:	2700      	movs	r7, #0
 800e76c:	9c00      	ldr	r4, [sp, #0]
 800e76e:	9302      	str	r3, [sp, #8]
 800e770:	e7c9      	b.n	800e706 <__gethex+0xb6>
 800e772:	2300      	movs	r3, #0
 800e774:	9304      	str	r3, [sp, #16]
 800e776:	1ca6      	adds	r6, r4, #2
 800e778:	e7d3      	b.n	800e722 <__gethex+0xd2>
 800e77a:	2301      	movs	r3, #1
 800e77c:	e7fa      	b.n	800e774 <__gethex+0x124>
 800e77e:	230a      	movs	r3, #10
 800e780:	435d      	muls	r5, r3
 800e782:	182d      	adds	r5, r5, r0
 800e784:	3d10      	subs	r5, #16
 800e786:	e7d5      	b.n	800e734 <__gethex+0xe4>
 800e788:	0026      	movs	r6, r4
 800e78a:	e7e0      	b.n	800e74e <__gethex+0xfe>
 800e78c:	9b00      	ldr	r3, [sp, #0]
 800e78e:	9902      	ldr	r1, [sp, #8]
 800e790:	1ae3      	subs	r3, r4, r3
 800e792:	3b01      	subs	r3, #1
 800e794:	2b07      	cmp	r3, #7
 800e796:	dc0a      	bgt.n	800e7ae <__gethex+0x15e>
 800e798:	9803      	ldr	r0, [sp, #12]
 800e79a:	f000 fb1b 	bl	800edd4 <_Balloc>
 800e79e:	1e05      	subs	r5, r0, #0
 800e7a0:	d108      	bne.n	800e7b4 <__gethex+0x164>
 800e7a2:	002a      	movs	r2, r5
 800e7a4:	21e4      	movs	r1, #228	; 0xe4
 800e7a6:	4b5f      	ldr	r3, [pc, #380]	; (800e924 <__gethex+0x2d4>)
 800e7a8:	485f      	ldr	r0, [pc, #380]	; (800e928 <__gethex+0x2d8>)
 800e7aa:	f001 fbe7 	bl	800ff7c <__assert_func>
 800e7ae:	3101      	adds	r1, #1
 800e7b0:	105b      	asrs	r3, r3, #1
 800e7b2:	e7ef      	b.n	800e794 <__gethex+0x144>
 800e7b4:	0003      	movs	r3, r0
 800e7b6:	3314      	adds	r3, #20
 800e7b8:	9302      	str	r3, [sp, #8]
 800e7ba:	9305      	str	r3, [sp, #20]
 800e7bc:	2300      	movs	r3, #0
 800e7be:	001e      	movs	r6, r3
 800e7c0:	9304      	str	r3, [sp, #16]
 800e7c2:	9b00      	ldr	r3, [sp, #0]
 800e7c4:	42a3      	cmp	r3, r4
 800e7c6:	d33f      	bcc.n	800e848 <__gethex+0x1f8>
 800e7c8:	9c05      	ldr	r4, [sp, #20]
 800e7ca:	9b02      	ldr	r3, [sp, #8]
 800e7cc:	c440      	stmia	r4!, {r6}
 800e7ce:	1ae4      	subs	r4, r4, r3
 800e7d0:	10a4      	asrs	r4, r4, #2
 800e7d2:	0030      	movs	r0, r6
 800e7d4:	612c      	str	r4, [r5, #16]
 800e7d6:	f000 fbf5 	bl	800efc4 <__hi0bits>
 800e7da:	9b01      	ldr	r3, [sp, #4]
 800e7dc:	0164      	lsls	r4, r4, #5
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	1a26      	subs	r6, r4, r0
 800e7e2:	9300      	str	r3, [sp, #0]
 800e7e4:	429e      	cmp	r6, r3
 800e7e6:	dd51      	ble.n	800e88c <__gethex+0x23c>
 800e7e8:	1af6      	subs	r6, r6, r3
 800e7ea:	0031      	movs	r1, r6
 800e7ec:	0028      	movs	r0, r5
 800e7ee:	f000 ff89 	bl	800f704 <__any_on>
 800e7f2:	1e04      	subs	r4, r0, #0
 800e7f4:	d016      	beq.n	800e824 <__gethex+0x1d4>
 800e7f6:	2401      	movs	r4, #1
 800e7f8:	231f      	movs	r3, #31
 800e7fa:	0020      	movs	r0, r4
 800e7fc:	1e72      	subs	r2, r6, #1
 800e7fe:	4013      	ands	r3, r2
 800e800:	4098      	lsls	r0, r3
 800e802:	0003      	movs	r3, r0
 800e804:	1151      	asrs	r1, r2, #5
 800e806:	9802      	ldr	r0, [sp, #8]
 800e808:	0089      	lsls	r1, r1, #2
 800e80a:	5809      	ldr	r1, [r1, r0]
 800e80c:	4219      	tst	r1, r3
 800e80e:	d009      	beq.n	800e824 <__gethex+0x1d4>
 800e810:	42a2      	cmp	r2, r4
 800e812:	dd06      	ble.n	800e822 <__gethex+0x1d2>
 800e814:	0028      	movs	r0, r5
 800e816:	1eb1      	subs	r1, r6, #2
 800e818:	f000 ff74 	bl	800f704 <__any_on>
 800e81c:	3402      	adds	r4, #2
 800e81e:	2800      	cmp	r0, #0
 800e820:	d100      	bne.n	800e824 <__gethex+0x1d4>
 800e822:	2402      	movs	r4, #2
 800e824:	0031      	movs	r1, r6
 800e826:	0028      	movs	r0, r5
 800e828:	f7ff fea8 	bl	800e57c <rshift>
 800e82c:	19bf      	adds	r7, r7, r6
 800e82e:	9b01      	ldr	r3, [sp, #4]
 800e830:	689b      	ldr	r3, [r3, #8]
 800e832:	42bb      	cmp	r3, r7
 800e834:	da3a      	bge.n	800e8ac <__gethex+0x25c>
 800e836:	0029      	movs	r1, r5
 800e838:	9803      	ldr	r0, [sp, #12]
 800e83a:	f000 fb0f 	bl	800ee5c <_Bfree>
 800e83e:	2300      	movs	r3, #0
 800e840:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e842:	26a3      	movs	r6, #163	; 0xa3
 800e844:	6013      	str	r3, [r2, #0]
 800e846:	e78c      	b.n	800e762 <__gethex+0x112>
 800e848:	3c01      	subs	r4, #1
 800e84a:	7823      	ldrb	r3, [r4, #0]
 800e84c:	2b2e      	cmp	r3, #46	; 0x2e
 800e84e:	d012      	beq.n	800e876 <__gethex+0x226>
 800e850:	9b04      	ldr	r3, [sp, #16]
 800e852:	2b20      	cmp	r3, #32
 800e854:	d104      	bne.n	800e860 <__gethex+0x210>
 800e856:	9b05      	ldr	r3, [sp, #20]
 800e858:	c340      	stmia	r3!, {r6}
 800e85a:	2600      	movs	r6, #0
 800e85c:	9305      	str	r3, [sp, #20]
 800e85e:	9604      	str	r6, [sp, #16]
 800e860:	7820      	ldrb	r0, [r4, #0]
 800e862:	f7ff fee0 	bl	800e626 <__hexdig_fun>
 800e866:	230f      	movs	r3, #15
 800e868:	4018      	ands	r0, r3
 800e86a:	9b04      	ldr	r3, [sp, #16]
 800e86c:	4098      	lsls	r0, r3
 800e86e:	3304      	adds	r3, #4
 800e870:	4306      	orrs	r6, r0
 800e872:	9304      	str	r3, [sp, #16]
 800e874:	e7a5      	b.n	800e7c2 <__gethex+0x172>
 800e876:	9b00      	ldr	r3, [sp, #0]
 800e878:	42a3      	cmp	r3, r4
 800e87a:	d8e9      	bhi.n	800e850 <__gethex+0x200>
 800e87c:	2201      	movs	r2, #1
 800e87e:	0020      	movs	r0, r4
 800e880:	4927      	ldr	r1, [pc, #156]	; (800e920 <__gethex+0x2d0>)
 800e882:	f7fe fec9 	bl	800d618 <strncmp>
 800e886:	2800      	cmp	r0, #0
 800e888:	d1e2      	bne.n	800e850 <__gethex+0x200>
 800e88a:	e79a      	b.n	800e7c2 <__gethex+0x172>
 800e88c:	9b00      	ldr	r3, [sp, #0]
 800e88e:	2400      	movs	r4, #0
 800e890:	429e      	cmp	r6, r3
 800e892:	dacc      	bge.n	800e82e <__gethex+0x1de>
 800e894:	1b9e      	subs	r6, r3, r6
 800e896:	0029      	movs	r1, r5
 800e898:	0032      	movs	r2, r6
 800e89a:	9803      	ldr	r0, [sp, #12]
 800e89c:	f000 fcfe 	bl	800f29c <__lshift>
 800e8a0:	0003      	movs	r3, r0
 800e8a2:	3314      	adds	r3, #20
 800e8a4:	0005      	movs	r5, r0
 800e8a6:	1bbf      	subs	r7, r7, r6
 800e8a8:	9302      	str	r3, [sp, #8]
 800e8aa:	e7c0      	b.n	800e82e <__gethex+0x1de>
 800e8ac:	9b01      	ldr	r3, [sp, #4]
 800e8ae:	685e      	ldr	r6, [r3, #4]
 800e8b0:	42be      	cmp	r6, r7
 800e8b2:	dd70      	ble.n	800e996 <__gethex+0x346>
 800e8b4:	9b00      	ldr	r3, [sp, #0]
 800e8b6:	1bf6      	subs	r6, r6, r7
 800e8b8:	42b3      	cmp	r3, r6
 800e8ba:	dc37      	bgt.n	800e92c <__gethex+0x2dc>
 800e8bc:	9b01      	ldr	r3, [sp, #4]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	2b02      	cmp	r3, #2
 800e8c2:	d024      	beq.n	800e90e <__gethex+0x2be>
 800e8c4:	2b03      	cmp	r3, #3
 800e8c6:	d026      	beq.n	800e916 <__gethex+0x2c6>
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d117      	bne.n	800e8fc <__gethex+0x2ac>
 800e8cc:	9b00      	ldr	r3, [sp, #0]
 800e8ce:	42b3      	cmp	r3, r6
 800e8d0:	d114      	bne.n	800e8fc <__gethex+0x2ac>
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d10b      	bne.n	800e8ee <__gethex+0x29e>
 800e8d6:	9b01      	ldr	r3, [sp, #4]
 800e8d8:	9a07      	ldr	r2, [sp, #28]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	2662      	movs	r6, #98	; 0x62
 800e8de:	6013      	str	r3, [r2, #0]
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	9a02      	ldr	r2, [sp, #8]
 800e8e4:	612b      	str	r3, [r5, #16]
 800e8e6:	6013      	str	r3, [r2, #0]
 800e8e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8ea:	601d      	str	r5, [r3, #0]
 800e8ec:	e739      	b.n	800e762 <__gethex+0x112>
 800e8ee:	9900      	ldr	r1, [sp, #0]
 800e8f0:	0028      	movs	r0, r5
 800e8f2:	3901      	subs	r1, #1
 800e8f4:	f000 ff06 	bl	800f704 <__any_on>
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	d1ec      	bne.n	800e8d6 <__gethex+0x286>
 800e8fc:	0029      	movs	r1, r5
 800e8fe:	9803      	ldr	r0, [sp, #12]
 800e900:	f000 faac 	bl	800ee5c <_Bfree>
 800e904:	2300      	movs	r3, #0
 800e906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e908:	2650      	movs	r6, #80	; 0x50
 800e90a:	6013      	str	r3, [r2, #0]
 800e90c:	e729      	b.n	800e762 <__gethex+0x112>
 800e90e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e910:	2b00      	cmp	r3, #0
 800e912:	d1f3      	bne.n	800e8fc <__gethex+0x2ac>
 800e914:	e7df      	b.n	800e8d6 <__gethex+0x286>
 800e916:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d1dc      	bne.n	800e8d6 <__gethex+0x286>
 800e91c:	e7ee      	b.n	800e8fc <__gethex+0x2ac>
 800e91e:	46c0      	nop			; (mov r8, r8)
 800e920:	08010530 	.word	0x08010530
 800e924:	08010746 	.word	0x08010746
 800e928:	08010757 	.word	0x08010757
 800e92c:	1e77      	subs	r7, r6, #1
 800e92e:	2c00      	cmp	r4, #0
 800e930:	d12f      	bne.n	800e992 <__gethex+0x342>
 800e932:	2f00      	cmp	r7, #0
 800e934:	d004      	beq.n	800e940 <__gethex+0x2f0>
 800e936:	0039      	movs	r1, r7
 800e938:	0028      	movs	r0, r5
 800e93a:	f000 fee3 	bl	800f704 <__any_on>
 800e93e:	0004      	movs	r4, r0
 800e940:	231f      	movs	r3, #31
 800e942:	117a      	asrs	r2, r7, #5
 800e944:	401f      	ands	r7, r3
 800e946:	3b1e      	subs	r3, #30
 800e948:	40bb      	lsls	r3, r7
 800e94a:	9902      	ldr	r1, [sp, #8]
 800e94c:	0092      	lsls	r2, r2, #2
 800e94e:	5852      	ldr	r2, [r2, r1]
 800e950:	421a      	tst	r2, r3
 800e952:	d001      	beq.n	800e958 <__gethex+0x308>
 800e954:	2302      	movs	r3, #2
 800e956:	431c      	orrs	r4, r3
 800e958:	9b00      	ldr	r3, [sp, #0]
 800e95a:	0031      	movs	r1, r6
 800e95c:	1b9b      	subs	r3, r3, r6
 800e95e:	2602      	movs	r6, #2
 800e960:	0028      	movs	r0, r5
 800e962:	9300      	str	r3, [sp, #0]
 800e964:	f7ff fe0a 	bl	800e57c <rshift>
 800e968:	9b01      	ldr	r3, [sp, #4]
 800e96a:	685f      	ldr	r7, [r3, #4]
 800e96c:	2c00      	cmp	r4, #0
 800e96e:	d041      	beq.n	800e9f4 <__gethex+0x3a4>
 800e970:	9b01      	ldr	r3, [sp, #4]
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	2b02      	cmp	r3, #2
 800e976:	d010      	beq.n	800e99a <__gethex+0x34a>
 800e978:	2b03      	cmp	r3, #3
 800e97a:	d012      	beq.n	800e9a2 <__gethex+0x352>
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d106      	bne.n	800e98e <__gethex+0x33e>
 800e980:	07a2      	lsls	r2, r4, #30
 800e982:	d504      	bpl.n	800e98e <__gethex+0x33e>
 800e984:	9a02      	ldr	r2, [sp, #8]
 800e986:	6812      	ldr	r2, [r2, #0]
 800e988:	4314      	orrs	r4, r2
 800e98a:	421c      	tst	r4, r3
 800e98c:	d10c      	bne.n	800e9a8 <__gethex+0x358>
 800e98e:	2310      	movs	r3, #16
 800e990:	e02f      	b.n	800e9f2 <__gethex+0x3a2>
 800e992:	2401      	movs	r4, #1
 800e994:	e7d4      	b.n	800e940 <__gethex+0x2f0>
 800e996:	2601      	movs	r6, #1
 800e998:	e7e8      	b.n	800e96c <__gethex+0x31c>
 800e99a:	2301      	movs	r3, #1
 800e99c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e99e:	1a9b      	subs	r3, r3, r2
 800e9a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d0f2      	beq.n	800e98e <__gethex+0x33e>
 800e9a8:	692b      	ldr	r3, [r5, #16]
 800e9aa:	2000      	movs	r0, #0
 800e9ac:	9302      	str	r3, [sp, #8]
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	9304      	str	r3, [sp, #16]
 800e9b2:	002b      	movs	r3, r5
 800e9b4:	9a04      	ldr	r2, [sp, #16]
 800e9b6:	3314      	adds	r3, #20
 800e9b8:	1899      	adds	r1, r3, r2
 800e9ba:	681a      	ldr	r2, [r3, #0]
 800e9bc:	1c54      	adds	r4, r2, #1
 800e9be:	d01e      	beq.n	800e9fe <__gethex+0x3ae>
 800e9c0:	3201      	adds	r2, #1
 800e9c2:	601a      	str	r2, [r3, #0]
 800e9c4:	002b      	movs	r3, r5
 800e9c6:	3314      	adds	r3, #20
 800e9c8:	2e02      	cmp	r6, #2
 800e9ca:	d141      	bne.n	800ea50 <__gethex+0x400>
 800e9cc:	9a01      	ldr	r2, [sp, #4]
 800e9ce:	9900      	ldr	r1, [sp, #0]
 800e9d0:	6812      	ldr	r2, [r2, #0]
 800e9d2:	3a01      	subs	r2, #1
 800e9d4:	428a      	cmp	r2, r1
 800e9d6:	d10b      	bne.n	800e9f0 <__gethex+0x3a0>
 800e9d8:	221f      	movs	r2, #31
 800e9da:	9800      	ldr	r0, [sp, #0]
 800e9dc:	1149      	asrs	r1, r1, #5
 800e9de:	4002      	ands	r2, r0
 800e9e0:	2001      	movs	r0, #1
 800e9e2:	0004      	movs	r4, r0
 800e9e4:	4094      	lsls	r4, r2
 800e9e6:	0089      	lsls	r1, r1, #2
 800e9e8:	58cb      	ldr	r3, [r1, r3]
 800e9ea:	4223      	tst	r3, r4
 800e9ec:	d000      	beq.n	800e9f0 <__gethex+0x3a0>
 800e9ee:	2601      	movs	r6, #1
 800e9f0:	2320      	movs	r3, #32
 800e9f2:	431e      	orrs	r6, r3
 800e9f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9f6:	601d      	str	r5, [r3, #0]
 800e9f8:	9b07      	ldr	r3, [sp, #28]
 800e9fa:	601f      	str	r7, [r3, #0]
 800e9fc:	e6b1      	b.n	800e762 <__gethex+0x112>
 800e9fe:	c301      	stmia	r3!, {r0}
 800ea00:	4299      	cmp	r1, r3
 800ea02:	d8da      	bhi.n	800e9ba <__gethex+0x36a>
 800ea04:	68ab      	ldr	r3, [r5, #8]
 800ea06:	9a02      	ldr	r2, [sp, #8]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	db18      	blt.n	800ea3e <__gethex+0x3ee>
 800ea0c:	6869      	ldr	r1, [r5, #4]
 800ea0e:	9803      	ldr	r0, [sp, #12]
 800ea10:	3101      	adds	r1, #1
 800ea12:	f000 f9df 	bl	800edd4 <_Balloc>
 800ea16:	1e04      	subs	r4, r0, #0
 800ea18:	d104      	bne.n	800ea24 <__gethex+0x3d4>
 800ea1a:	0022      	movs	r2, r4
 800ea1c:	2184      	movs	r1, #132	; 0x84
 800ea1e:	4b1c      	ldr	r3, [pc, #112]	; (800ea90 <__gethex+0x440>)
 800ea20:	481c      	ldr	r0, [pc, #112]	; (800ea94 <__gethex+0x444>)
 800ea22:	e6c2      	b.n	800e7aa <__gethex+0x15a>
 800ea24:	0029      	movs	r1, r5
 800ea26:	692a      	ldr	r2, [r5, #16]
 800ea28:	310c      	adds	r1, #12
 800ea2a:	3202      	adds	r2, #2
 800ea2c:	0092      	lsls	r2, r2, #2
 800ea2e:	300c      	adds	r0, #12
 800ea30:	f7fe fea8 	bl	800d784 <memcpy>
 800ea34:	0029      	movs	r1, r5
 800ea36:	9803      	ldr	r0, [sp, #12]
 800ea38:	f000 fa10 	bl	800ee5c <_Bfree>
 800ea3c:	0025      	movs	r5, r4
 800ea3e:	692b      	ldr	r3, [r5, #16]
 800ea40:	1c5a      	adds	r2, r3, #1
 800ea42:	612a      	str	r2, [r5, #16]
 800ea44:	2201      	movs	r2, #1
 800ea46:	3304      	adds	r3, #4
 800ea48:	009b      	lsls	r3, r3, #2
 800ea4a:	18eb      	adds	r3, r5, r3
 800ea4c:	605a      	str	r2, [r3, #4]
 800ea4e:	e7b9      	b.n	800e9c4 <__gethex+0x374>
 800ea50:	692a      	ldr	r2, [r5, #16]
 800ea52:	9902      	ldr	r1, [sp, #8]
 800ea54:	428a      	cmp	r2, r1
 800ea56:	dd09      	ble.n	800ea6c <__gethex+0x41c>
 800ea58:	2101      	movs	r1, #1
 800ea5a:	0028      	movs	r0, r5
 800ea5c:	f7ff fd8e 	bl	800e57c <rshift>
 800ea60:	9b01      	ldr	r3, [sp, #4]
 800ea62:	3701      	adds	r7, #1
 800ea64:	689b      	ldr	r3, [r3, #8]
 800ea66:	42bb      	cmp	r3, r7
 800ea68:	dac1      	bge.n	800e9ee <__gethex+0x39e>
 800ea6a:	e6e4      	b.n	800e836 <__gethex+0x1e6>
 800ea6c:	221f      	movs	r2, #31
 800ea6e:	9c00      	ldr	r4, [sp, #0]
 800ea70:	9900      	ldr	r1, [sp, #0]
 800ea72:	2601      	movs	r6, #1
 800ea74:	4014      	ands	r4, r2
 800ea76:	4211      	tst	r1, r2
 800ea78:	d0ba      	beq.n	800e9f0 <__gethex+0x3a0>
 800ea7a:	9a04      	ldr	r2, [sp, #16]
 800ea7c:	189b      	adds	r3, r3, r2
 800ea7e:	3b04      	subs	r3, #4
 800ea80:	6818      	ldr	r0, [r3, #0]
 800ea82:	f000 fa9f 	bl	800efc4 <__hi0bits>
 800ea86:	2320      	movs	r3, #32
 800ea88:	1b1b      	subs	r3, r3, r4
 800ea8a:	4298      	cmp	r0, r3
 800ea8c:	dbe4      	blt.n	800ea58 <__gethex+0x408>
 800ea8e:	e7af      	b.n	800e9f0 <__gethex+0x3a0>
 800ea90:	08010746 	.word	0x08010746
 800ea94:	08010757 	.word	0x08010757

0800ea98 <L_shift>:
 800ea98:	2308      	movs	r3, #8
 800ea9a:	b570      	push	{r4, r5, r6, lr}
 800ea9c:	2520      	movs	r5, #32
 800ea9e:	1a9a      	subs	r2, r3, r2
 800eaa0:	0092      	lsls	r2, r2, #2
 800eaa2:	1aad      	subs	r5, r5, r2
 800eaa4:	6843      	ldr	r3, [r0, #4]
 800eaa6:	6804      	ldr	r4, [r0, #0]
 800eaa8:	001e      	movs	r6, r3
 800eaaa:	40ae      	lsls	r6, r5
 800eaac:	40d3      	lsrs	r3, r2
 800eaae:	4334      	orrs	r4, r6
 800eab0:	6004      	str	r4, [r0, #0]
 800eab2:	6043      	str	r3, [r0, #4]
 800eab4:	3004      	adds	r0, #4
 800eab6:	4288      	cmp	r0, r1
 800eab8:	d3f4      	bcc.n	800eaa4 <L_shift+0xc>
 800eaba:	bd70      	pop	{r4, r5, r6, pc}

0800eabc <__match>:
 800eabc:	b530      	push	{r4, r5, lr}
 800eabe:	6803      	ldr	r3, [r0, #0]
 800eac0:	780c      	ldrb	r4, [r1, #0]
 800eac2:	3301      	adds	r3, #1
 800eac4:	2c00      	cmp	r4, #0
 800eac6:	d102      	bne.n	800eace <__match+0x12>
 800eac8:	6003      	str	r3, [r0, #0]
 800eaca:	2001      	movs	r0, #1
 800eacc:	bd30      	pop	{r4, r5, pc}
 800eace:	781a      	ldrb	r2, [r3, #0]
 800ead0:	0015      	movs	r5, r2
 800ead2:	3d41      	subs	r5, #65	; 0x41
 800ead4:	2d19      	cmp	r5, #25
 800ead6:	d800      	bhi.n	800eada <__match+0x1e>
 800ead8:	3220      	adds	r2, #32
 800eada:	3101      	adds	r1, #1
 800eadc:	42a2      	cmp	r2, r4
 800eade:	d0ef      	beq.n	800eac0 <__match+0x4>
 800eae0:	2000      	movs	r0, #0
 800eae2:	e7f3      	b.n	800eacc <__match+0x10>

0800eae4 <__hexnan>:
 800eae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eae6:	680b      	ldr	r3, [r1, #0]
 800eae8:	b08b      	sub	sp, #44	; 0x2c
 800eaea:	9201      	str	r2, [sp, #4]
 800eaec:	9901      	ldr	r1, [sp, #4]
 800eaee:	115a      	asrs	r2, r3, #5
 800eaf0:	0092      	lsls	r2, r2, #2
 800eaf2:	188a      	adds	r2, r1, r2
 800eaf4:	9202      	str	r2, [sp, #8]
 800eaf6:	0019      	movs	r1, r3
 800eaf8:	221f      	movs	r2, #31
 800eafa:	4011      	ands	r1, r2
 800eafc:	9008      	str	r0, [sp, #32]
 800eafe:	9106      	str	r1, [sp, #24]
 800eb00:	4213      	tst	r3, r2
 800eb02:	d002      	beq.n	800eb0a <__hexnan+0x26>
 800eb04:	9b02      	ldr	r3, [sp, #8]
 800eb06:	3304      	adds	r3, #4
 800eb08:	9302      	str	r3, [sp, #8]
 800eb0a:	9b02      	ldr	r3, [sp, #8]
 800eb0c:	2500      	movs	r5, #0
 800eb0e:	1f1f      	subs	r7, r3, #4
 800eb10:	003e      	movs	r6, r7
 800eb12:	003c      	movs	r4, r7
 800eb14:	9b08      	ldr	r3, [sp, #32]
 800eb16:	603d      	str	r5, [r7, #0]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	9507      	str	r5, [sp, #28]
 800eb1c:	9305      	str	r3, [sp, #20]
 800eb1e:	9503      	str	r5, [sp, #12]
 800eb20:	9b05      	ldr	r3, [sp, #20]
 800eb22:	3301      	adds	r3, #1
 800eb24:	9309      	str	r3, [sp, #36]	; 0x24
 800eb26:	9b05      	ldr	r3, [sp, #20]
 800eb28:	785b      	ldrb	r3, [r3, #1]
 800eb2a:	9304      	str	r3, [sp, #16]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d028      	beq.n	800eb82 <__hexnan+0x9e>
 800eb30:	9804      	ldr	r0, [sp, #16]
 800eb32:	f7ff fd78 	bl	800e626 <__hexdig_fun>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d154      	bne.n	800ebe4 <__hexnan+0x100>
 800eb3a:	9b04      	ldr	r3, [sp, #16]
 800eb3c:	2b20      	cmp	r3, #32
 800eb3e:	d819      	bhi.n	800eb74 <__hexnan+0x90>
 800eb40:	9b03      	ldr	r3, [sp, #12]
 800eb42:	9a07      	ldr	r2, [sp, #28]
 800eb44:	4293      	cmp	r3, r2
 800eb46:	dd12      	ble.n	800eb6e <__hexnan+0x8a>
 800eb48:	42b4      	cmp	r4, r6
 800eb4a:	d206      	bcs.n	800eb5a <__hexnan+0x76>
 800eb4c:	2d07      	cmp	r5, #7
 800eb4e:	dc04      	bgt.n	800eb5a <__hexnan+0x76>
 800eb50:	002a      	movs	r2, r5
 800eb52:	0031      	movs	r1, r6
 800eb54:	0020      	movs	r0, r4
 800eb56:	f7ff ff9f 	bl	800ea98 <L_shift>
 800eb5a:	9b01      	ldr	r3, [sp, #4]
 800eb5c:	2508      	movs	r5, #8
 800eb5e:	429c      	cmp	r4, r3
 800eb60:	d905      	bls.n	800eb6e <__hexnan+0x8a>
 800eb62:	1f26      	subs	r6, r4, #4
 800eb64:	2500      	movs	r5, #0
 800eb66:	0034      	movs	r4, r6
 800eb68:	9b03      	ldr	r3, [sp, #12]
 800eb6a:	6035      	str	r5, [r6, #0]
 800eb6c:	9307      	str	r3, [sp, #28]
 800eb6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb70:	9305      	str	r3, [sp, #20]
 800eb72:	e7d5      	b.n	800eb20 <__hexnan+0x3c>
 800eb74:	9b04      	ldr	r3, [sp, #16]
 800eb76:	2b29      	cmp	r3, #41	; 0x29
 800eb78:	d159      	bne.n	800ec2e <__hexnan+0x14a>
 800eb7a:	9b05      	ldr	r3, [sp, #20]
 800eb7c:	9a08      	ldr	r2, [sp, #32]
 800eb7e:	3302      	adds	r3, #2
 800eb80:	6013      	str	r3, [r2, #0]
 800eb82:	9b03      	ldr	r3, [sp, #12]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d052      	beq.n	800ec2e <__hexnan+0x14a>
 800eb88:	42b4      	cmp	r4, r6
 800eb8a:	d206      	bcs.n	800eb9a <__hexnan+0xb6>
 800eb8c:	2d07      	cmp	r5, #7
 800eb8e:	dc04      	bgt.n	800eb9a <__hexnan+0xb6>
 800eb90:	002a      	movs	r2, r5
 800eb92:	0031      	movs	r1, r6
 800eb94:	0020      	movs	r0, r4
 800eb96:	f7ff ff7f 	bl	800ea98 <L_shift>
 800eb9a:	9b01      	ldr	r3, [sp, #4]
 800eb9c:	429c      	cmp	r4, r3
 800eb9e:	d935      	bls.n	800ec0c <__hexnan+0x128>
 800eba0:	001a      	movs	r2, r3
 800eba2:	0023      	movs	r3, r4
 800eba4:	cb02      	ldmia	r3!, {r1}
 800eba6:	c202      	stmia	r2!, {r1}
 800eba8:	429f      	cmp	r7, r3
 800ebaa:	d2fb      	bcs.n	800eba4 <__hexnan+0xc0>
 800ebac:	9b02      	ldr	r3, [sp, #8]
 800ebae:	1c62      	adds	r2, r4, #1
 800ebb0:	1ed9      	subs	r1, r3, #3
 800ebb2:	2304      	movs	r3, #4
 800ebb4:	4291      	cmp	r1, r2
 800ebb6:	d305      	bcc.n	800ebc4 <__hexnan+0xe0>
 800ebb8:	9b02      	ldr	r3, [sp, #8]
 800ebba:	3b04      	subs	r3, #4
 800ebbc:	1b1b      	subs	r3, r3, r4
 800ebbe:	089b      	lsrs	r3, r3, #2
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	009b      	lsls	r3, r3, #2
 800ebc4:	9a01      	ldr	r2, [sp, #4]
 800ebc6:	18d3      	adds	r3, r2, r3
 800ebc8:	2200      	movs	r2, #0
 800ebca:	c304      	stmia	r3!, {r2}
 800ebcc:	429f      	cmp	r7, r3
 800ebce:	d2fc      	bcs.n	800ebca <__hexnan+0xe6>
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d104      	bne.n	800ebe0 <__hexnan+0xfc>
 800ebd6:	9b01      	ldr	r3, [sp, #4]
 800ebd8:	429f      	cmp	r7, r3
 800ebda:	d126      	bne.n	800ec2a <__hexnan+0x146>
 800ebdc:	2301      	movs	r3, #1
 800ebde:	603b      	str	r3, [r7, #0]
 800ebe0:	2005      	movs	r0, #5
 800ebe2:	e025      	b.n	800ec30 <__hexnan+0x14c>
 800ebe4:	9b03      	ldr	r3, [sp, #12]
 800ebe6:	3501      	adds	r5, #1
 800ebe8:	3301      	adds	r3, #1
 800ebea:	9303      	str	r3, [sp, #12]
 800ebec:	2d08      	cmp	r5, #8
 800ebee:	dd06      	ble.n	800ebfe <__hexnan+0x11a>
 800ebf0:	9b01      	ldr	r3, [sp, #4]
 800ebf2:	429c      	cmp	r4, r3
 800ebf4:	d9bb      	bls.n	800eb6e <__hexnan+0x8a>
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	2501      	movs	r5, #1
 800ebfa:	3c04      	subs	r4, #4
 800ebfc:	6023      	str	r3, [r4, #0]
 800ebfe:	220f      	movs	r2, #15
 800ec00:	6823      	ldr	r3, [r4, #0]
 800ec02:	4010      	ands	r0, r2
 800ec04:	011b      	lsls	r3, r3, #4
 800ec06:	4303      	orrs	r3, r0
 800ec08:	6023      	str	r3, [r4, #0]
 800ec0a:	e7b0      	b.n	800eb6e <__hexnan+0x8a>
 800ec0c:	9b06      	ldr	r3, [sp, #24]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d0de      	beq.n	800ebd0 <__hexnan+0xec>
 800ec12:	2320      	movs	r3, #32
 800ec14:	9a06      	ldr	r2, [sp, #24]
 800ec16:	9902      	ldr	r1, [sp, #8]
 800ec18:	1a9b      	subs	r3, r3, r2
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	4252      	negs	r2, r2
 800ec1e:	40da      	lsrs	r2, r3
 800ec20:	3904      	subs	r1, #4
 800ec22:	680b      	ldr	r3, [r1, #0]
 800ec24:	4013      	ands	r3, r2
 800ec26:	600b      	str	r3, [r1, #0]
 800ec28:	e7d2      	b.n	800ebd0 <__hexnan+0xec>
 800ec2a:	3f04      	subs	r7, #4
 800ec2c:	e7d0      	b.n	800ebd0 <__hexnan+0xec>
 800ec2e:	2004      	movs	r0, #4
 800ec30:	b00b      	add	sp, #44	; 0x2c
 800ec32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ec34 <malloc>:
 800ec34:	b510      	push	{r4, lr}
 800ec36:	4b03      	ldr	r3, [pc, #12]	; (800ec44 <malloc+0x10>)
 800ec38:	0001      	movs	r1, r0
 800ec3a:	6818      	ldr	r0, [r3, #0]
 800ec3c:	f000 f826 	bl	800ec8c <_malloc_r>
 800ec40:	bd10      	pop	{r4, pc}
 800ec42:	46c0      	nop			; (mov r8, r8)
 800ec44:	200001d0 	.word	0x200001d0

0800ec48 <sbrk_aligned>:
 800ec48:	b570      	push	{r4, r5, r6, lr}
 800ec4a:	4e0f      	ldr	r6, [pc, #60]	; (800ec88 <sbrk_aligned+0x40>)
 800ec4c:	000d      	movs	r5, r1
 800ec4e:	6831      	ldr	r1, [r6, #0]
 800ec50:	0004      	movs	r4, r0
 800ec52:	2900      	cmp	r1, #0
 800ec54:	d102      	bne.n	800ec5c <sbrk_aligned+0x14>
 800ec56:	f001 f97f 	bl	800ff58 <_sbrk_r>
 800ec5a:	6030      	str	r0, [r6, #0]
 800ec5c:	0029      	movs	r1, r5
 800ec5e:	0020      	movs	r0, r4
 800ec60:	f001 f97a 	bl	800ff58 <_sbrk_r>
 800ec64:	1c43      	adds	r3, r0, #1
 800ec66:	d00a      	beq.n	800ec7e <sbrk_aligned+0x36>
 800ec68:	2303      	movs	r3, #3
 800ec6a:	1cc5      	adds	r5, r0, #3
 800ec6c:	439d      	bics	r5, r3
 800ec6e:	42a8      	cmp	r0, r5
 800ec70:	d007      	beq.n	800ec82 <sbrk_aligned+0x3a>
 800ec72:	1a29      	subs	r1, r5, r0
 800ec74:	0020      	movs	r0, r4
 800ec76:	f001 f96f 	bl	800ff58 <_sbrk_r>
 800ec7a:	3001      	adds	r0, #1
 800ec7c:	d101      	bne.n	800ec82 <sbrk_aligned+0x3a>
 800ec7e:	2501      	movs	r5, #1
 800ec80:	426d      	negs	r5, r5
 800ec82:	0028      	movs	r0, r5
 800ec84:	bd70      	pop	{r4, r5, r6, pc}
 800ec86:	46c0      	nop			; (mov r8, r8)
 800ec88:	20000c70 	.word	0x20000c70

0800ec8c <_malloc_r>:
 800ec8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec8e:	2203      	movs	r2, #3
 800ec90:	1ccb      	adds	r3, r1, #3
 800ec92:	4393      	bics	r3, r2
 800ec94:	3308      	adds	r3, #8
 800ec96:	0006      	movs	r6, r0
 800ec98:	001f      	movs	r7, r3
 800ec9a:	2b0c      	cmp	r3, #12
 800ec9c:	d238      	bcs.n	800ed10 <_malloc_r+0x84>
 800ec9e:	270c      	movs	r7, #12
 800eca0:	42b9      	cmp	r1, r7
 800eca2:	d837      	bhi.n	800ed14 <_malloc_r+0x88>
 800eca4:	0030      	movs	r0, r6
 800eca6:	f000 f885 	bl	800edb4 <__malloc_lock>
 800ecaa:	4b38      	ldr	r3, [pc, #224]	; (800ed8c <_malloc_r+0x100>)
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	001c      	movs	r4, r3
 800ecb2:	2c00      	cmp	r4, #0
 800ecb4:	d133      	bne.n	800ed1e <_malloc_r+0x92>
 800ecb6:	0039      	movs	r1, r7
 800ecb8:	0030      	movs	r0, r6
 800ecba:	f7ff ffc5 	bl	800ec48 <sbrk_aligned>
 800ecbe:	0004      	movs	r4, r0
 800ecc0:	1c43      	adds	r3, r0, #1
 800ecc2:	d15e      	bne.n	800ed82 <_malloc_r+0xf6>
 800ecc4:	9b00      	ldr	r3, [sp, #0]
 800ecc6:	681c      	ldr	r4, [r3, #0]
 800ecc8:	0025      	movs	r5, r4
 800ecca:	2d00      	cmp	r5, #0
 800eccc:	d14e      	bne.n	800ed6c <_malloc_r+0xe0>
 800ecce:	2c00      	cmp	r4, #0
 800ecd0:	d051      	beq.n	800ed76 <_malloc_r+0xea>
 800ecd2:	6823      	ldr	r3, [r4, #0]
 800ecd4:	0029      	movs	r1, r5
 800ecd6:	18e3      	adds	r3, r4, r3
 800ecd8:	0030      	movs	r0, r6
 800ecda:	9301      	str	r3, [sp, #4]
 800ecdc:	f001 f93c 	bl	800ff58 <_sbrk_r>
 800ece0:	9b01      	ldr	r3, [sp, #4]
 800ece2:	4283      	cmp	r3, r0
 800ece4:	d147      	bne.n	800ed76 <_malloc_r+0xea>
 800ece6:	6823      	ldr	r3, [r4, #0]
 800ece8:	0030      	movs	r0, r6
 800ecea:	1aff      	subs	r7, r7, r3
 800ecec:	0039      	movs	r1, r7
 800ecee:	f7ff ffab 	bl	800ec48 <sbrk_aligned>
 800ecf2:	3001      	adds	r0, #1
 800ecf4:	d03f      	beq.n	800ed76 <_malloc_r+0xea>
 800ecf6:	6823      	ldr	r3, [r4, #0]
 800ecf8:	19db      	adds	r3, r3, r7
 800ecfa:	6023      	str	r3, [r4, #0]
 800ecfc:	9b00      	ldr	r3, [sp, #0]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d040      	beq.n	800ed86 <_malloc_r+0xfa>
 800ed04:	685a      	ldr	r2, [r3, #4]
 800ed06:	42a2      	cmp	r2, r4
 800ed08:	d133      	bne.n	800ed72 <_malloc_r+0xe6>
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	605a      	str	r2, [r3, #4]
 800ed0e:	e014      	b.n	800ed3a <_malloc_r+0xae>
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	dac5      	bge.n	800eca0 <_malloc_r+0x14>
 800ed14:	230c      	movs	r3, #12
 800ed16:	2500      	movs	r5, #0
 800ed18:	6033      	str	r3, [r6, #0]
 800ed1a:	0028      	movs	r0, r5
 800ed1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ed1e:	6821      	ldr	r1, [r4, #0]
 800ed20:	1bc9      	subs	r1, r1, r7
 800ed22:	d420      	bmi.n	800ed66 <_malloc_r+0xda>
 800ed24:	290b      	cmp	r1, #11
 800ed26:	d918      	bls.n	800ed5a <_malloc_r+0xce>
 800ed28:	19e2      	adds	r2, r4, r7
 800ed2a:	6027      	str	r7, [r4, #0]
 800ed2c:	42a3      	cmp	r3, r4
 800ed2e:	d112      	bne.n	800ed56 <_malloc_r+0xca>
 800ed30:	9b00      	ldr	r3, [sp, #0]
 800ed32:	601a      	str	r2, [r3, #0]
 800ed34:	6863      	ldr	r3, [r4, #4]
 800ed36:	6011      	str	r1, [r2, #0]
 800ed38:	6053      	str	r3, [r2, #4]
 800ed3a:	0030      	movs	r0, r6
 800ed3c:	0025      	movs	r5, r4
 800ed3e:	f000 f841 	bl	800edc4 <__malloc_unlock>
 800ed42:	2207      	movs	r2, #7
 800ed44:	350b      	adds	r5, #11
 800ed46:	1d23      	adds	r3, r4, #4
 800ed48:	4395      	bics	r5, r2
 800ed4a:	1aea      	subs	r2, r5, r3
 800ed4c:	429d      	cmp	r5, r3
 800ed4e:	d0e4      	beq.n	800ed1a <_malloc_r+0x8e>
 800ed50:	1b5b      	subs	r3, r3, r5
 800ed52:	50a3      	str	r3, [r4, r2]
 800ed54:	e7e1      	b.n	800ed1a <_malloc_r+0x8e>
 800ed56:	605a      	str	r2, [r3, #4]
 800ed58:	e7ec      	b.n	800ed34 <_malloc_r+0xa8>
 800ed5a:	6862      	ldr	r2, [r4, #4]
 800ed5c:	42a3      	cmp	r3, r4
 800ed5e:	d1d5      	bne.n	800ed0c <_malloc_r+0x80>
 800ed60:	9b00      	ldr	r3, [sp, #0]
 800ed62:	601a      	str	r2, [r3, #0]
 800ed64:	e7e9      	b.n	800ed3a <_malloc_r+0xae>
 800ed66:	0023      	movs	r3, r4
 800ed68:	6864      	ldr	r4, [r4, #4]
 800ed6a:	e7a2      	b.n	800ecb2 <_malloc_r+0x26>
 800ed6c:	002c      	movs	r4, r5
 800ed6e:	686d      	ldr	r5, [r5, #4]
 800ed70:	e7ab      	b.n	800ecca <_malloc_r+0x3e>
 800ed72:	0013      	movs	r3, r2
 800ed74:	e7c4      	b.n	800ed00 <_malloc_r+0x74>
 800ed76:	230c      	movs	r3, #12
 800ed78:	0030      	movs	r0, r6
 800ed7a:	6033      	str	r3, [r6, #0]
 800ed7c:	f000 f822 	bl	800edc4 <__malloc_unlock>
 800ed80:	e7cb      	b.n	800ed1a <_malloc_r+0x8e>
 800ed82:	6027      	str	r7, [r4, #0]
 800ed84:	e7d9      	b.n	800ed3a <_malloc_r+0xae>
 800ed86:	605b      	str	r3, [r3, #4]
 800ed88:	deff      	udf	#255	; 0xff
 800ed8a:	46c0      	nop			; (mov r8, r8)
 800ed8c:	20000c6c 	.word	0x20000c6c

0800ed90 <__ascii_mbtowc>:
 800ed90:	b082      	sub	sp, #8
 800ed92:	2900      	cmp	r1, #0
 800ed94:	d100      	bne.n	800ed98 <__ascii_mbtowc+0x8>
 800ed96:	a901      	add	r1, sp, #4
 800ed98:	1e10      	subs	r0, r2, #0
 800ed9a:	d006      	beq.n	800edaa <__ascii_mbtowc+0x1a>
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d006      	beq.n	800edae <__ascii_mbtowc+0x1e>
 800eda0:	7813      	ldrb	r3, [r2, #0]
 800eda2:	600b      	str	r3, [r1, #0]
 800eda4:	7810      	ldrb	r0, [r2, #0]
 800eda6:	1e43      	subs	r3, r0, #1
 800eda8:	4198      	sbcs	r0, r3
 800edaa:	b002      	add	sp, #8
 800edac:	4770      	bx	lr
 800edae:	2002      	movs	r0, #2
 800edb0:	4240      	negs	r0, r0
 800edb2:	e7fa      	b.n	800edaa <__ascii_mbtowc+0x1a>

0800edb4 <__malloc_lock>:
 800edb4:	b510      	push	{r4, lr}
 800edb6:	4802      	ldr	r0, [pc, #8]	; (800edc0 <__malloc_lock+0xc>)
 800edb8:	f7fe fcd7 	bl	800d76a <__retarget_lock_acquire_recursive>
 800edbc:	bd10      	pop	{r4, pc}
 800edbe:	46c0      	nop			; (mov r8, r8)
 800edc0:	20000c68 	.word	0x20000c68

0800edc4 <__malloc_unlock>:
 800edc4:	b510      	push	{r4, lr}
 800edc6:	4802      	ldr	r0, [pc, #8]	; (800edd0 <__malloc_unlock+0xc>)
 800edc8:	f7fe fcd0 	bl	800d76c <__retarget_lock_release_recursive>
 800edcc:	bd10      	pop	{r4, pc}
 800edce:	46c0      	nop			; (mov r8, r8)
 800edd0:	20000c68 	.word	0x20000c68

0800edd4 <_Balloc>:
 800edd4:	b570      	push	{r4, r5, r6, lr}
 800edd6:	69c5      	ldr	r5, [r0, #28]
 800edd8:	0006      	movs	r6, r0
 800edda:	000c      	movs	r4, r1
 800eddc:	2d00      	cmp	r5, #0
 800edde:	d10e      	bne.n	800edfe <_Balloc+0x2a>
 800ede0:	2010      	movs	r0, #16
 800ede2:	f7ff ff27 	bl	800ec34 <malloc>
 800ede6:	1e02      	subs	r2, r0, #0
 800ede8:	61f0      	str	r0, [r6, #28]
 800edea:	d104      	bne.n	800edf6 <_Balloc+0x22>
 800edec:	216b      	movs	r1, #107	; 0x6b
 800edee:	4b19      	ldr	r3, [pc, #100]	; (800ee54 <_Balloc+0x80>)
 800edf0:	4819      	ldr	r0, [pc, #100]	; (800ee58 <_Balloc+0x84>)
 800edf2:	f001 f8c3 	bl	800ff7c <__assert_func>
 800edf6:	6045      	str	r5, [r0, #4]
 800edf8:	6085      	str	r5, [r0, #8]
 800edfa:	6005      	str	r5, [r0, #0]
 800edfc:	60c5      	str	r5, [r0, #12]
 800edfe:	69f5      	ldr	r5, [r6, #28]
 800ee00:	68eb      	ldr	r3, [r5, #12]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d013      	beq.n	800ee2e <_Balloc+0x5a>
 800ee06:	69f3      	ldr	r3, [r6, #28]
 800ee08:	00a2      	lsls	r2, r4, #2
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	189b      	adds	r3, r3, r2
 800ee0e:	6818      	ldr	r0, [r3, #0]
 800ee10:	2800      	cmp	r0, #0
 800ee12:	d118      	bne.n	800ee46 <_Balloc+0x72>
 800ee14:	2101      	movs	r1, #1
 800ee16:	000d      	movs	r5, r1
 800ee18:	40a5      	lsls	r5, r4
 800ee1a:	1d6a      	adds	r2, r5, #5
 800ee1c:	0030      	movs	r0, r6
 800ee1e:	0092      	lsls	r2, r2, #2
 800ee20:	f001 f8ca 	bl	800ffb8 <_calloc_r>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	d00c      	beq.n	800ee42 <_Balloc+0x6e>
 800ee28:	6044      	str	r4, [r0, #4]
 800ee2a:	6085      	str	r5, [r0, #8]
 800ee2c:	e00d      	b.n	800ee4a <_Balloc+0x76>
 800ee2e:	2221      	movs	r2, #33	; 0x21
 800ee30:	2104      	movs	r1, #4
 800ee32:	0030      	movs	r0, r6
 800ee34:	f001 f8c0 	bl	800ffb8 <_calloc_r>
 800ee38:	69f3      	ldr	r3, [r6, #28]
 800ee3a:	60e8      	str	r0, [r5, #12]
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d1e1      	bne.n	800ee06 <_Balloc+0x32>
 800ee42:	2000      	movs	r0, #0
 800ee44:	bd70      	pop	{r4, r5, r6, pc}
 800ee46:	6802      	ldr	r2, [r0, #0]
 800ee48:	601a      	str	r2, [r3, #0]
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	6103      	str	r3, [r0, #16]
 800ee4e:	60c3      	str	r3, [r0, #12]
 800ee50:	e7f8      	b.n	800ee44 <_Balloc+0x70>
 800ee52:	46c0      	nop			; (mov r8, r8)
 800ee54:	080106d7 	.word	0x080106d7
 800ee58:	080107b7 	.word	0x080107b7

0800ee5c <_Bfree>:
 800ee5c:	b570      	push	{r4, r5, r6, lr}
 800ee5e:	69c6      	ldr	r6, [r0, #28]
 800ee60:	0005      	movs	r5, r0
 800ee62:	000c      	movs	r4, r1
 800ee64:	2e00      	cmp	r6, #0
 800ee66:	d10e      	bne.n	800ee86 <_Bfree+0x2a>
 800ee68:	2010      	movs	r0, #16
 800ee6a:	f7ff fee3 	bl	800ec34 <malloc>
 800ee6e:	1e02      	subs	r2, r0, #0
 800ee70:	61e8      	str	r0, [r5, #28]
 800ee72:	d104      	bne.n	800ee7e <_Bfree+0x22>
 800ee74:	218f      	movs	r1, #143	; 0x8f
 800ee76:	4b09      	ldr	r3, [pc, #36]	; (800ee9c <_Bfree+0x40>)
 800ee78:	4809      	ldr	r0, [pc, #36]	; (800eea0 <_Bfree+0x44>)
 800ee7a:	f001 f87f 	bl	800ff7c <__assert_func>
 800ee7e:	6046      	str	r6, [r0, #4]
 800ee80:	6086      	str	r6, [r0, #8]
 800ee82:	6006      	str	r6, [r0, #0]
 800ee84:	60c6      	str	r6, [r0, #12]
 800ee86:	2c00      	cmp	r4, #0
 800ee88:	d007      	beq.n	800ee9a <_Bfree+0x3e>
 800ee8a:	69eb      	ldr	r3, [r5, #28]
 800ee8c:	6862      	ldr	r2, [r4, #4]
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	0092      	lsls	r2, r2, #2
 800ee92:	189b      	adds	r3, r3, r2
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	6022      	str	r2, [r4, #0]
 800ee98:	601c      	str	r4, [r3, #0]
 800ee9a:	bd70      	pop	{r4, r5, r6, pc}
 800ee9c:	080106d7 	.word	0x080106d7
 800eea0:	080107b7 	.word	0x080107b7

0800eea4 <__multadd>:
 800eea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eea6:	000e      	movs	r6, r1
 800eea8:	9001      	str	r0, [sp, #4]
 800eeaa:	000c      	movs	r4, r1
 800eeac:	001d      	movs	r5, r3
 800eeae:	2000      	movs	r0, #0
 800eeb0:	690f      	ldr	r7, [r1, #16]
 800eeb2:	3614      	adds	r6, #20
 800eeb4:	6833      	ldr	r3, [r6, #0]
 800eeb6:	3001      	adds	r0, #1
 800eeb8:	b299      	uxth	r1, r3
 800eeba:	4351      	muls	r1, r2
 800eebc:	0c1b      	lsrs	r3, r3, #16
 800eebe:	4353      	muls	r3, r2
 800eec0:	1949      	adds	r1, r1, r5
 800eec2:	0c0d      	lsrs	r5, r1, #16
 800eec4:	195b      	adds	r3, r3, r5
 800eec6:	0c1d      	lsrs	r5, r3, #16
 800eec8:	b289      	uxth	r1, r1
 800eeca:	041b      	lsls	r3, r3, #16
 800eecc:	185b      	adds	r3, r3, r1
 800eece:	c608      	stmia	r6!, {r3}
 800eed0:	4287      	cmp	r7, r0
 800eed2:	dcef      	bgt.n	800eeb4 <__multadd+0x10>
 800eed4:	2d00      	cmp	r5, #0
 800eed6:	d022      	beq.n	800ef1e <__multadd+0x7a>
 800eed8:	68a3      	ldr	r3, [r4, #8]
 800eeda:	42bb      	cmp	r3, r7
 800eedc:	dc19      	bgt.n	800ef12 <__multadd+0x6e>
 800eede:	6861      	ldr	r1, [r4, #4]
 800eee0:	9801      	ldr	r0, [sp, #4]
 800eee2:	3101      	adds	r1, #1
 800eee4:	f7ff ff76 	bl	800edd4 <_Balloc>
 800eee8:	1e06      	subs	r6, r0, #0
 800eeea:	d105      	bne.n	800eef8 <__multadd+0x54>
 800eeec:	0032      	movs	r2, r6
 800eeee:	21ba      	movs	r1, #186	; 0xba
 800eef0:	4b0c      	ldr	r3, [pc, #48]	; (800ef24 <__multadd+0x80>)
 800eef2:	480d      	ldr	r0, [pc, #52]	; (800ef28 <__multadd+0x84>)
 800eef4:	f001 f842 	bl	800ff7c <__assert_func>
 800eef8:	0021      	movs	r1, r4
 800eefa:	6922      	ldr	r2, [r4, #16]
 800eefc:	310c      	adds	r1, #12
 800eefe:	3202      	adds	r2, #2
 800ef00:	0092      	lsls	r2, r2, #2
 800ef02:	300c      	adds	r0, #12
 800ef04:	f7fe fc3e 	bl	800d784 <memcpy>
 800ef08:	0021      	movs	r1, r4
 800ef0a:	9801      	ldr	r0, [sp, #4]
 800ef0c:	f7ff ffa6 	bl	800ee5c <_Bfree>
 800ef10:	0034      	movs	r4, r6
 800ef12:	1d3b      	adds	r3, r7, #4
 800ef14:	009b      	lsls	r3, r3, #2
 800ef16:	18e3      	adds	r3, r4, r3
 800ef18:	605d      	str	r5, [r3, #4]
 800ef1a:	1c7b      	adds	r3, r7, #1
 800ef1c:	6123      	str	r3, [r4, #16]
 800ef1e:	0020      	movs	r0, r4
 800ef20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ef22:	46c0      	nop			; (mov r8, r8)
 800ef24:	08010746 	.word	0x08010746
 800ef28:	080107b7 	.word	0x080107b7

0800ef2c <__s2b>:
 800ef2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef2e:	0006      	movs	r6, r0
 800ef30:	0018      	movs	r0, r3
 800ef32:	000c      	movs	r4, r1
 800ef34:	3008      	adds	r0, #8
 800ef36:	2109      	movs	r1, #9
 800ef38:	9301      	str	r3, [sp, #4]
 800ef3a:	0015      	movs	r5, r2
 800ef3c:	f7f1 f994 	bl	8000268 <__divsi3>
 800ef40:	2301      	movs	r3, #1
 800ef42:	2100      	movs	r1, #0
 800ef44:	4283      	cmp	r3, r0
 800ef46:	db0a      	blt.n	800ef5e <__s2b+0x32>
 800ef48:	0030      	movs	r0, r6
 800ef4a:	f7ff ff43 	bl	800edd4 <_Balloc>
 800ef4e:	1e01      	subs	r1, r0, #0
 800ef50:	d108      	bne.n	800ef64 <__s2b+0x38>
 800ef52:	000a      	movs	r2, r1
 800ef54:	4b19      	ldr	r3, [pc, #100]	; (800efbc <__s2b+0x90>)
 800ef56:	481a      	ldr	r0, [pc, #104]	; (800efc0 <__s2b+0x94>)
 800ef58:	31d3      	adds	r1, #211	; 0xd3
 800ef5a:	f001 f80f 	bl	800ff7c <__assert_func>
 800ef5e:	005b      	lsls	r3, r3, #1
 800ef60:	3101      	adds	r1, #1
 800ef62:	e7ef      	b.n	800ef44 <__s2b+0x18>
 800ef64:	9b08      	ldr	r3, [sp, #32]
 800ef66:	6143      	str	r3, [r0, #20]
 800ef68:	2301      	movs	r3, #1
 800ef6a:	6103      	str	r3, [r0, #16]
 800ef6c:	2d09      	cmp	r5, #9
 800ef6e:	dd18      	ble.n	800efa2 <__s2b+0x76>
 800ef70:	0023      	movs	r3, r4
 800ef72:	3309      	adds	r3, #9
 800ef74:	001f      	movs	r7, r3
 800ef76:	9300      	str	r3, [sp, #0]
 800ef78:	1964      	adds	r4, r4, r5
 800ef7a:	783b      	ldrb	r3, [r7, #0]
 800ef7c:	220a      	movs	r2, #10
 800ef7e:	0030      	movs	r0, r6
 800ef80:	3b30      	subs	r3, #48	; 0x30
 800ef82:	f7ff ff8f 	bl	800eea4 <__multadd>
 800ef86:	3701      	adds	r7, #1
 800ef88:	0001      	movs	r1, r0
 800ef8a:	42a7      	cmp	r7, r4
 800ef8c:	d1f5      	bne.n	800ef7a <__s2b+0x4e>
 800ef8e:	002c      	movs	r4, r5
 800ef90:	9b00      	ldr	r3, [sp, #0]
 800ef92:	3c08      	subs	r4, #8
 800ef94:	191c      	adds	r4, r3, r4
 800ef96:	002f      	movs	r7, r5
 800ef98:	9b01      	ldr	r3, [sp, #4]
 800ef9a:	429f      	cmp	r7, r3
 800ef9c:	db04      	blt.n	800efa8 <__s2b+0x7c>
 800ef9e:	0008      	movs	r0, r1
 800efa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800efa2:	2509      	movs	r5, #9
 800efa4:	340a      	adds	r4, #10
 800efa6:	e7f6      	b.n	800ef96 <__s2b+0x6a>
 800efa8:	1b63      	subs	r3, r4, r5
 800efaa:	5ddb      	ldrb	r3, [r3, r7]
 800efac:	220a      	movs	r2, #10
 800efae:	0030      	movs	r0, r6
 800efb0:	3b30      	subs	r3, #48	; 0x30
 800efb2:	f7ff ff77 	bl	800eea4 <__multadd>
 800efb6:	3701      	adds	r7, #1
 800efb8:	0001      	movs	r1, r0
 800efba:	e7ed      	b.n	800ef98 <__s2b+0x6c>
 800efbc:	08010746 	.word	0x08010746
 800efc0:	080107b7 	.word	0x080107b7

0800efc4 <__hi0bits>:
 800efc4:	0003      	movs	r3, r0
 800efc6:	0c02      	lsrs	r2, r0, #16
 800efc8:	2000      	movs	r0, #0
 800efca:	4282      	cmp	r2, r0
 800efcc:	d101      	bne.n	800efd2 <__hi0bits+0xe>
 800efce:	041b      	lsls	r3, r3, #16
 800efd0:	3010      	adds	r0, #16
 800efd2:	0e1a      	lsrs	r2, r3, #24
 800efd4:	d101      	bne.n	800efda <__hi0bits+0x16>
 800efd6:	3008      	adds	r0, #8
 800efd8:	021b      	lsls	r3, r3, #8
 800efda:	0f1a      	lsrs	r2, r3, #28
 800efdc:	d101      	bne.n	800efe2 <__hi0bits+0x1e>
 800efde:	3004      	adds	r0, #4
 800efe0:	011b      	lsls	r3, r3, #4
 800efe2:	0f9a      	lsrs	r2, r3, #30
 800efe4:	d101      	bne.n	800efea <__hi0bits+0x26>
 800efe6:	3002      	adds	r0, #2
 800efe8:	009b      	lsls	r3, r3, #2
 800efea:	2b00      	cmp	r3, #0
 800efec:	db03      	blt.n	800eff6 <__hi0bits+0x32>
 800efee:	3001      	adds	r0, #1
 800eff0:	005b      	lsls	r3, r3, #1
 800eff2:	d400      	bmi.n	800eff6 <__hi0bits+0x32>
 800eff4:	2020      	movs	r0, #32
 800eff6:	4770      	bx	lr

0800eff8 <__lo0bits>:
 800eff8:	6803      	ldr	r3, [r0, #0]
 800effa:	0001      	movs	r1, r0
 800effc:	2207      	movs	r2, #7
 800effe:	0018      	movs	r0, r3
 800f000:	4010      	ands	r0, r2
 800f002:	4213      	tst	r3, r2
 800f004:	d00d      	beq.n	800f022 <__lo0bits+0x2a>
 800f006:	3a06      	subs	r2, #6
 800f008:	2000      	movs	r0, #0
 800f00a:	4213      	tst	r3, r2
 800f00c:	d105      	bne.n	800f01a <__lo0bits+0x22>
 800f00e:	3002      	adds	r0, #2
 800f010:	4203      	tst	r3, r0
 800f012:	d003      	beq.n	800f01c <__lo0bits+0x24>
 800f014:	40d3      	lsrs	r3, r2
 800f016:	0010      	movs	r0, r2
 800f018:	600b      	str	r3, [r1, #0]
 800f01a:	4770      	bx	lr
 800f01c:	089b      	lsrs	r3, r3, #2
 800f01e:	600b      	str	r3, [r1, #0]
 800f020:	e7fb      	b.n	800f01a <__lo0bits+0x22>
 800f022:	b29a      	uxth	r2, r3
 800f024:	2a00      	cmp	r2, #0
 800f026:	d101      	bne.n	800f02c <__lo0bits+0x34>
 800f028:	2010      	movs	r0, #16
 800f02a:	0c1b      	lsrs	r3, r3, #16
 800f02c:	b2da      	uxtb	r2, r3
 800f02e:	2a00      	cmp	r2, #0
 800f030:	d101      	bne.n	800f036 <__lo0bits+0x3e>
 800f032:	3008      	adds	r0, #8
 800f034:	0a1b      	lsrs	r3, r3, #8
 800f036:	071a      	lsls	r2, r3, #28
 800f038:	d101      	bne.n	800f03e <__lo0bits+0x46>
 800f03a:	3004      	adds	r0, #4
 800f03c:	091b      	lsrs	r3, r3, #4
 800f03e:	079a      	lsls	r2, r3, #30
 800f040:	d101      	bne.n	800f046 <__lo0bits+0x4e>
 800f042:	3002      	adds	r0, #2
 800f044:	089b      	lsrs	r3, r3, #2
 800f046:	07da      	lsls	r2, r3, #31
 800f048:	d4e9      	bmi.n	800f01e <__lo0bits+0x26>
 800f04a:	3001      	adds	r0, #1
 800f04c:	085b      	lsrs	r3, r3, #1
 800f04e:	d1e6      	bne.n	800f01e <__lo0bits+0x26>
 800f050:	2020      	movs	r0, #32
 800f052:	e7e2      	b.n	800f01a <__lo0bits+0x22>

0800f054 <__i2b>:
 800f054:	b510      	push	{r4, lr}
 800f056:	000c      	movs	r4, r1
 800f058:	2101      	movs	r1, #1
 800f05a:	f7ff febb 	bl	800edd4 <_Balloc>
 800f05e:	2800      	cmp	r0, #0
 800f060:	d107      	bne.n	800f072 <__i2b+0x1e>
 800f062:	2146      	movs	r1, #70	; 0x46
 800f064:	4c05      	ldr	r4, [pc, #20]	; (800f07c <__i2b+0x28>)
 800f066:	0002      	movs	r2, r0
 800f068:	4b05      	ldr	r3, [pc, #20]	; (800f080 <__i2b+0x2c>)
 800f06a:	0020      	movs	r0, r4
 800f06c:	31ff      	adds	r1, #255	; 0xff
 800f06e:	f000 ff85 	bl	800ff7c <__assert_func>
 800f072:	2301      	movs	r3, #1
 800f074:	6144      	str	r4, [r0, #20]
 800f076:	6103      	str	r3, [r0, #16]
 800f078:	bd10      	pop	{r4, pc}
 800f07a:	46c0      	nop			; (mov r8, r8)
 800f07c:	080107b7 	.word	0x080107b7
 800f080:	08010746 	.word	0x08010746

0800f084 <__multiply>:
 800f084:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f086:	0015      	movs	r5, r2
 800f088:	690a      	ldr	r2, [r1, #16]
 800f08a:	692b      	ldr	r3, [r5, #16]
 800f08c:	000c      	movs	r4, r1
 800f08e:	b08b      	sub	sp, #44	; 0x2c
 800f090:	429a      	cmp	r2, r3
 800f092:	da01      	bge.n	800f098 <__multiply+0x14>
 800f094:	002c      	movs	r4, r5
 800f096:	000d      	movs	r5, r1
 800f098:	6927      	ldr	r7, [r4, #16]
 800f09a:	692e      	ldr	r6, [r5, #16]
 800f09c:	6861      	ldr	r1, [r4, #4]
 800f09e:	19bb      	adds	r3, r7, r6
 800f0a0:	9303      	str	r3, [sp, #12]
 800f0a2:	68a3      	ldr	r3, [r4, #8]
 800f0a4:	19ba      	adds	r2, r7, r6
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	da00      	bge.n	800f0ac <__multiply+0x28>
 800f0aa:	3101      	adds	r1, #1
 800f0ac:	f7ff fe92 	bl	800edd4 <_Balloc>
 800f0b0:	9002      	str	r0, [sp, #8]
 800f0b2:	2800      	cmp	r0, #0
 800f0b4:	d106      	bne.n	800f0c4 <__multiply+0x40>
 800f0b6:	21b1      	movs	r1, #177	; 0xb1
 800f0b8:	4b48      	ldr	r3, [pc, #288]	; (800f1dc <__multiply+0x158>)
 800f0ba:	4849      	ldr	r0, [pc, #292]	; (800f1e0 <__multiply+0x15c>)
 800f0bc:	9a02      	ldr	r2, [sp, #8]
 800f0be:	0049      	lsls	r1, r1, #1
 800f0c0:	f000 ff5c 	bl	800ff7c <__assert_func>
 800f0c4:	9b02      	ldr	r3, [sp, #8]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	3314      	adds	r3, #20
 800f0ca:	469c      	mov	ip, r3
 800f0cc:	19bb      	adds	r3, r7, r6
 800f0ce:	009b      	lsls	r3, r3, #2
 800f0d0:	4463      	add	r3, ip
 800f0d2:	9304      	str	r3, [sp, #16]
 800f0d4:	4663      	mov	r3, ip
 800f0d6:	9904      	ldr	r1, [sp, #16]
 800f0d8:	428b      	cmp	r3, r1
 800f0da:	d32a      	bcc.n	800f132 <__multiply+0xae>
 800f0dc:	0023      	movs	r3, r4
 800f0de:	00bf      	lsls	r7, r7, #2
 800f0e0:	3314      	adds	r3, #20
 800f0e2:	3514      	adds	r5, #20
 800f0e4:	9308      	str	r3, [sp, #32]
 800f0e6:	00b6      	lsls	r6, r6, #2
 800f0e8:	19db      	adds	r3, r3, r7
 800f0ea:	9305      	str	r3, [sp, #20]
 800f0ec:	19ab      	adds	r3, r5, r6
 800f0ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f0f0:	2304      	movs	r3, #4
 800f0f2:	9306      	str	r3, [sp, #24]
 800f0f4:	0023      	movs	r3, r4
 800f0f6:	9a05      	ldr	r2, [sp, #20]
 800f0f8:	3315      	adds	r3, #21
 800f0fa:	9501      	str	r5, [sp, #4]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d305      	bcc.n	800f10c <__multiply+0x88>
 800f100:	1b13      	subs	r3, r2, r4
 800f102:	3b15      	subs	r3, #21
 800f104:	089b      	lsrs	r3, r3, #2
 800f106:	3301      	adds	r3, #1
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	9306      	str	r3, [sp, #24]
 800f10c:	9b01      	ldr	r3, [sp, #4]
 800f10e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f110:	4293      	cmp	r3, r2
 800f112:	d310      	bcc.n	800f136 <__multiply+0xb2>
 800f114:	9b03      	ldr	r3, [sp, #12]
 800f116:	2b00      	cmp	r3, #0
 800f118:	dd05      	ble.n	800f126 <__multiply+0xa2>
 800f11a:	9b04      	ldr	r3, [sp, #16]
 800f11c:	3b04      	subs	r3, #4
 800f11e:	9304      	str	r3, [sp, #16]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d056      	beq.n	800f1d4 <__multiply+0x150>
 800f126:	9b02      	ldr	r3, [sp, #8]
 800f128:	9a03      	ldr	r2, [sp, #12]
 800f12a:	0018      	movs	r0, r3
 800f12c:	611a      	str	r2, [r3, #16]
 800f12e:	b00b      	add	sp, #44	; 0x2c
 800f130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f132:	c304      	stmia	r3!, {r2}
 800f134:	e7cf      	b.n	800f0d6 <__multiply+0x52>
 800f136:	9b01      	ldr	r3, [sp, #4]
 800f138:	6818      	ldr	r0, [r3, #0]
 800f13a:	b280      	uxth	r0, r0
 800f13c:	2800      	cmp	r0, #0
 800f13e:	d01e      	beq.n	800f17e <__multiply+0xfa>
 800f140:	4667      	mov	r7, ip
 800f142:	2500      	movs	r5, #0
 800f144:	9e08      	ldr	r6, [sp, #32]
 800f146:	ce02      	ldmia	r6!, {r1}
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	9307      	str	r3, [sp, #28]
 800f14c:	b28b      	uxth	r3, r1
 800f14e:	4343      	muls	r3, r0
 800f150:	001a      	movs	r2, r3
 800f152:	466b      	mov	r3, sp
 800f154:	8b9b      	ldrh	r3, [r3, #28]
 800f156:	18d3      	adds	r3, r2, r3
 800f158:	195b      	adds	r3, r3, r5
 800f15a:	0c0d      	lsrs	r5, r1, #16
 800f15c:	4345      	muls	r5, r0
 800f15e:	9a07      	ldr	r2, [sp, #28]
 800f160:	0c11      	lsrs	r1, r2, #16
 800f162:	1869      	adds	r1, r5, r1
 800f164:	0c1a      	lsrs	r2, r3, #16
 800f166:	188a      	adds	r2, r1, r2
 800f168:	b29b      	uxth	r3, r3
 800f16a:	0c15      	lsrs	r5, r2, #16
 800f16c:	0412      	lsls	r2, r2, #16
 800f16e:	431a      	orrs	r2, r3
 800f170:	9b05      	ldr	r3, [sp, #20]
 800f172:	c704      	stmia	r7!, {r2}
 800f174:	42b3      	cmp	r3, r6
 800f176:	d8e6      	bhi.n	800f146 <__multiply+0xc2>
 800f178:	4663      	mov	r3, ip
 800f17a:	9a06      	ldr	r2, [sp, #24]
 800f17c:	509d      	str	r5, [r3, r2]
 800f17e:	9b01      	ldr	r3, [sp, #4]
 800f180:	6818      	ldr	r0, [r3, #0]
 800f182:	0c00      	lsrs	r0, r0, #16
 800f184:	d020      	beq.n	800f1c8 <__multiply+0x144>
 800f186:	4663      	mov	r3, ip
 800f188:	0025      	movs	r5, r4
 800f18a:	4661      	mov	r1, ip
 800f18c:	2700      	movs	r7, #0
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	3514      	adds	r5, #20
 800f192:	682a      	ldr	r2, [r5, #0]
 800f194:	680e      	ldr	r6, [r1, #0]
 800f196:	b292      	uxth	r2, r2
 800f198:	4342      	muls	r2, r0
 800f19a:	0c36      	lsrs	r6, r6, #16
 800f19c:	1992      	adds	r2, r2, r6
 800f19e:	19d2      	adds	r2, r2, r7
 800f1a0:	0416      	lsls	r6, r2, #16
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	431e      	orrs	r6, r3
 800f1a6:	600e      	str	r6, [r1, #0]
 800f1a8:	cd40      	ldmia	r5!, {r6}
 800f1aa:	684b      	ldr	r3, [r1, #4]
 800f1ac:	0c36      	lsrs	r6, r6, #16
 800f1ae:	4346      	muls	r6, r0
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	0c12      	lsrs	r2, r2, #16
 800f1b4:	18f3      	adds	r3, r6, r3
 800f1b6:	189b      	adds	r3, r3, r2
 800f1b8:	9a05      	ldr	r2, [sp, #20]
 800f1ba:	0c1f      	lsrs	r7, r3, #16
 800f1bc:	3104      	adds	r1, #4
 800f1be:	42aa      	cmp	r2, r5
 800f1c0:	d8e7      	bhi.n	800f192 <__multiply+0x10e>
 800f1c2:	4662      	mov	r2, ip
 800f1c4:	9906      	ldr	r1, [sp, #24]
 800f1c6:	5053      	str	r3, [r2, r1]
 800f1c8:	9b01      	ldr	r3, [sp, #4]
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	9301      	str	r3, [sp, #4]
 800f1ce:	2304      	movs	r3, #4
 800f1d0:	449c      	add	ip, r3
 800f1d2:	e79b      	b.n	800f10c <__multiply+0x88>
 800f1d4:	9b03      	ldr	r3, [sp, #12]
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	9303      	str	r3, [sp, #12]
 800f1da:	e79b      	b.n	800f114 <__multiply+0x90>
 800f1dc:	08010746 	.word	0x08010746
 800f1e0:	080107b7 	.word	0x080107b7

0800f1e4 <__pow5mult>:
 800f1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1e6:	2303      	movs	r3, #3
 800f1e8:	0015      	movs	r5, r2
 800f1ea:	0007      	movs	r7, r0
 800f1ec:	000e      	movs	r6, r1
 800f1ee:	401a      	ands	r2, r3
 800f1f0:	421d      	tst	r5, r3
 800f1f2:	d008      	beq.n	800f206 <__pow5mult+0x22>
 800f1f4:	4925      	ldr	r1, [pc, #148]	; (800f28c <__pow5mult+0xa8>)
 800f1f6:	3a01      	subs	r2, #1
 800f1f8:	0092      	lsls	r2, r2, #2
 800f1fa:	5852      	ldr	r2, [r2, r1]
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	0031      	movs	r1, r6
 800f200:	f7ff fe50 	bl	800eea4 <__multadd>
 800f204:	0006      	movs	r6, r0
 800f206:	10ad      	asrs	r5, r5, #2
 800f208:	d03d      	beq.n	800f286 <__pow5mult+0xa2>
 800f20a:	69fc      	ldr	r4, [r7, #28]
 800f20c:	2c00      	cmp	r4, #0
 800f20e:	d10f      	bne.n	800f230 <__pow5mult+0x4c>
 800f210:	2010      	movs	r0, #16
 800f212:	f7ff fd0f 	bl	800ec34 <malloc>
 800f216:	1e02      	subs	r2, r0, #0
 800f218:	61f8      	str	r0, [r7, #28]
 800f21a:	d105      	bne.n	800f228 <__pow5mult+0x44>
 800f21c:	21b4      	movs	r1, #180	; 0xb4
 800f21e:	4b1c      	ldr	r3, [pc, #112]	; (800f290 <__pow5mult+0xac>)
 800f220:	481c      	ldr	r0, [pc, #112]	; (800f294 <__pow5mult+0xb0>)
 800f222:	31ff      	adds	r1, #255	; 0xff
 800f224:	f000 feaa 	bl	800ff7c <__assert_func>
 800f228:	6044      	str	r4, [r0, #4]
 800f22a:	6084      	str	r4, [r0, #8]
 800f22c:	6004      	str	r4, [r0, #0]
 800f22e:	60c4      	str	r4, [r0, #12]
 800f230:	69fb      	ldr	r3, [r7, #28]
 800f232:	689c      	ldr	r4, [r3, #8]
 800f234:	9301      	str	r3, [sp, #4]
 800f236:	2c00      	cmp	r4, #0
 800f238:	d108      	bne.n	800f24c <__pow5mult+0x68>
 800f23a:	0038      	movs	r0, r7
 800f23c:	4916      	ldr	r1, [pc, #88]	; (800f298 <__pow5mult+0xb4>)
 800f23e:	f7ff ff09 	bl	800f054 <__i2b>
 800f242:	9b01      	ldr	r3, [sp, #4]
 800f244:	0004      	movs	r4, r0
 800f246:	6098      	str	r0, [r3, #8]
 800f248:	2300      	movs	r3, #0
 800f24a:	6003      	str	r3, [r0, #0]
 800f24c:	2301      	movs	r3, #1
 800f24e:	421d      	tst	r5, r3
 800f250:	d00a      	beq.n	800f268 <__pow5mult+0x84>
 800f252:	0031      	movs	r1, r6
 800f254:	0022      	movs	r2, r4
 800f256:	0038      	movs	r0, r7
 800f258:	f7ff ff14 	bl	800f084 <__multiply>
 800f25c:	0031      	movs	r1, r6
 800f25e:	9001      	str	r0, [sp, #4]
 800f260:	0038      	movs	r0, r7
 800f262:	f7ff fdfb 	bl	800ee5c <_Bfree>
 800f266:	9e01      	ldr	r6, [sp, #4]
 800f268:	106d      	asrs	r5, r5, #1
 800f26a:	d00c      	beq.n	800f286 <__pow5mult+0xa2>
 800f26c:	6820      	ldr	r0, [r4, #0]
 800f26e:	2800      	cmp	r0, #0
 800f270:	d107      	bne.n	800f282 <__pow5mult+0x9e>
 800f272:	0022      	movs	r2, r4
 800f274:	0021      	movs	r1, r4
 800f276:	0038      	movs	r0, r7
 800f278:	f7ff ff04 	bl	800f084 <__multiply>
 800f27c:	2300      	movs	r3, #0
 800f27e:	6020      	str	r0, [r4, #0]
 800f280:	6003      	str	r3, [r0, #0]
 800f282:	0004      	movs	r4, r0
 800f284:	e7e2      	b.n	800f24c <__pow5mult+0x68>
 800f286:	0030      	movs	r0, r6
 800f288:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f28a:	46c0      	nop			; (mov r8, r8)
 800f28c:	08010900 	.word	0x08010900
 800f290:	080106d7 	.word	0x080106d7
 800f294:	080107b7 	.word	0x080107b7
 800f298:	00000271 	.word	0x00000271

0800f29c <__lshift>:
 800f29c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f29e:	000c      	movs	r4, r1
 800f2a0:	0017      	movs	r7, r2
 800f2a2:	6923      	ldr	r3, [r4, #16]
 800f2a4:	1155      	asrs	r5, r2, #5
 800f2a6:	b087      	sub	sp, #28
 800f2a8:	18eb      	adds	r3, r5, r3
 800f2aa:	9302      	str	r3, [sp, #8]
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	9301      	str	r3, [sp, #4]
 800f2b0:	6849      	ldr	r1, [r1, #4]
 800f2b2:	68a3      	ldr	r3, [r4, #8]
 800f2b4:	9004      	str	r0, [sp, #16]
 800f2b6:	9a01      	ldr	r2, [sp, #4]
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	db10      	blt.n	800f2de <__lshift+0x42>
 800f2bc:	9804      	ldr	r0, [sp, #16]
 800f2be:	f7ff fd89 	bl	800edd4 <_Balloc>
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	0002      	movs	r2, r0
 800f2c6:	0006      	movs	r6, r0
 800f2c8:	0019      	movs	r1, r3
 800f2ca:	3214      	adds	r2, #20
 800f2cc:	4298      	cmp	r0, r3
 800f2ce:	d10c      	bne.n	800f2ea <__lshift+0x4e>
 800f2d0:	31df      	adds	r1, #223	; 0xdf
 800f2d2:	0032      	movs	r2, r6
 800f2d4:	4b26      	ldr	r3, [pc, #152]	; (800f370 <__lshift+0xd4>)
 800f2d6:	4827      	ldr	r0, [pc, #156]	; (800f374 <__lshift+0xd8>)
 800f2d8:	31ff      	adds	r1, #255	; 0xff
 800f2da:	f000 fe4f 	bl	800ff7c <__assert_func>
 800f2de:	3101      	adds	r1, #1
 800f2e0:	005b      	lsls	r3, r3, #1
 800f2e2:	e7e8      	b.n	800f2b6 <__lshift+0x1a>
 800f2e4:	0098      	lsls	r0, r3, #2
 800f2e6:	5011      	str	r1, [r2, r0]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	42ab      	cmp	r3, r5
 800f2ec:	dbfa      	blt.n	800f2e4 <__lshift+0x48>
 800f2ee:	43eb      	mvns	r3, r5
 800f2f0:	17db      	asrs	r3, r3, #31
 800f2f2:	401d      	ands	r5, r3
 800f2f4:	211f      	movs	r1, #31
 800f2f6:	0023      	movs	r3, r4
 800f2f8:	0038      	movs	r0, r7
 800f2fa:	00ad      	lsls	r5, r5, #2
 800f2fc:	1955      	adds	r5, r2, r5
 800f2fe:	6922      	ldr	r2, [r4, #16]
 800f300:	3314      	adds	r3, #20
 800f302:	0092      	lsls	r2, r2, #2
 800f304:	4008      	ands	r0, r1
 800f306:	4684      	mov	ip, r0
 800f308:	189a      	adds	r2, r3, r2
 800f30a:	420f      	tst	r7, r1
 800f30c:	d02a      	beq.n	800f364 <__lshift+0xc8>
 800f30e:	3101      	adds	r1, #1
 800f310:	1a09      	subs	r1, r1, r0
 800f312:	9105      	str	r1, [sp, #20]
 800f314:	2100      	movs	r1, #0
 800f316:	9503      	str	r5, [sp, #12]
 800f318:	4667      	mov	r7, ip
 800f31a:	6818      	ldr	r0, [r3, #0]
 800f31c:	40b8      	lsls	r0, r7
 800f31e:	4308      	orrs	r0, r1
 800f320:	9903      	ldr	r1, [sp, #12]
 800f322:	c101      	stmia	r1!, {r0}
 800f324:	9103      	str	r1, [sp, #12]
 800f326:	9805      	ldr	r0, [sp, #20]
 800f328:	cb02      	ldmia	r3!, {r1}
 800f32a:	40c1      	lsrs	r1, r0
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d8f3      	bhi.n	800f318 <__lshift+0x7c>
 800f330:	0020      	movs	r0, r4
 800f332:	3015      	adds	r0, #21
 800f334:	2304      	movs	r3, #4
 800f336:	4282      	cmp	r2, r0
 800f338:	d304      	bcc.n	800f344 <__lshift+0xa8>
 800f33a:	1b13      	subs	r3, r2, r4
 800f33c:	3b15      	subs	r3, #21
 800f33e:	089b      	lsrs	r3, r3, #2
 800f340:	3301      	adds	r3, #1
 800f342:	009b      	lsls	r3, r3, #2
 800f344:	50e9      	str	r1, [r5, r3]
 800f346:	2900      	cmp	r1, #0
 800f348:	d002      	beq.n	800f350 <__lshift+0xb4>
 800f34a:	9b02      	ldr	r3, [sp, #8]
 800f34c:	3302      	adds	r3, #2
 800f34e:	9301      	str	r3, [sp, #4]
 800f350:	9b01      	ldr	r3, [sp, #4]
 800f352:	9804      	ldr	r0, [sp, #16]
 800f354:	3b01      	subs	r3, #1
 800f356:	0021      	movs	r1, r4
 800f358:	6133      	str	r3, [r6, #16]
 800f35a:	f7ff fd7f 	bl	800ee5c <_Bfree>
 800f35e:	0030      	movs	r0, r6
 800f360:	b007      	add	sp, #28
 800f362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f364:	cb02      	ldmia	r3!, {r1}
 800f366:	c502      	stmia	r5!, {r1}
 800f368:	429a      	cmp	r2, r3
 800f36a:	d8fb      	bhi.n	800f364 <__lshift+0xc8>
 800f36c:	e7f0      	b.n	800f350 <__lshift+0xb4>
 800f36e:	46c0      	nop			; (mov r8, r8)
 800f370:	08010746 	.word	0x08010746
 800f374:	080107b7 	.word	0x080107b7

0800f378 <__mcmp>:
 800f378:	b530      	push	{r4, r5, lr}
 800f37a:	690b      	ldr	r3, [r1, #16]
 800f37c:	6904      	ldr	r4, [r0, #16]
 800f37e:	0002      	movs	r2, r0
 800f380:	1ae0      	subs	r0, r4, r3
 800f382:	429c      	cmp	r4, r3
 800f384:	d10e      	bne.n	800f3a4 <__mcmp+0x2c>
 800f386:	3214      	adds	r2, #20
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	3114      	adds	r1, #20
 800f38c:	0014      	movs	r4, r2
 800f38e:	18c9      	adds	r1, r1, r3
 800f390:	18d2      	adds	r2, r2, r3
 800f392:	3a04      	subs	r2, #4
 800f394:	3904      	subs	r1, #4
 800f396:	6815      	ldr	r5, [r2, #0]
 800f398:	680b      	ldr	r3, [r1, #0]
 800f39a:	429d      	cmp	r5, r3
 800f39c:	d003      	beq.n	800f3a6 <__mcmp+0x2e>
 800f39e:	2001      	movs	r0, #1
 800f3a0:	429d      	cmp	r5, r3
 800f3a2:	d303      	bcc.n	800f3ac <__mcmp+0x34>
 800f3a4:	bd30      	pop	{r4, r5, pc}
 800f3a6:	4294      	cmp	r4, r2
 800f3a8:	d3f3      	bcc.n	800f392 <__mcmp+0x1a>
 800f3aa:	e7fb      	b.n	800f3a4 <__mcmp+0x2c>
 800f3ac:	4240      	negs	r0, r0
 800f3ae:	e7f9      	b.n	800f3a4 <__mcmp+0x2c>

0800f3b0 <__mdiff>:
 800f3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3b2:	000e      	movs	r6, r1
 800f3b4:	0007      	movs	r7, r0
 800f3b6:	0011      	movs	r1, r2
 800f3b8:	0030      	movs	r0, r6
 800f3ba:	b087      	sub	sp, #28
 800f3bc:	0014      	movs	r4, r2
 800f3be:	f7ff ffdb 	bl	800f378 <__mcmp>
 800f3c2:	1e05      	subs	r5, r0, #0
 800f3c4:	d110      	bne.n	800f3e8 <__mdiff+0x38>
 800f3c6:	0001      	movs	r1, r0
 800f3c8:	0038      	movs	r0, r7
 800f3ca:	f7ff fd03 	bl	800edd4 <_Balloc>
 800f3ce:	1e02      	subs	r2, r0, #0
 800f3d0:	d104      	bne.n	800f3dc <__mdiff+0x2c>
 800f3d2:	4b3f      	ldr	r3, [pc, #252]	; (800f4d0 <__mdiff+0x120>)
 800f3d4:	483f      	ldr	r0, [pc, #252]	; (800f4d4 <__mdiff+0x124>)
 800f3d6:	4940      	ldr	r1, [pc, #256]	; (800f4d8 <__mdiff+0x128>)
 800f3d8:	f000 fdd0 	bl	800ff7c <__assert_func>
 800f3dc:	2301      	movs	r3, #1
 800f3de:	6145      	str	r5, [r0, #20]
 800f3e0:	6103      	str	r3, [r0, #16]
 800f3e2:	0010      	movs	r0, r2
 800f3e4:	b007      	add	sp, #28
 800f3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	9301      	str	r3, [sp, #4]
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	db04      	blt.n	800f3fa <__mdiff+0x4a>
 800f3f0:	0023      	movs	r3, r4
 800f3f2:	0034      	movs	r4, r6
 800f3f4:	001e      	movs	r6, r3
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	9301      	str	r3, [sp, #4]
 800f3fa:	0038      	movs	r0, r7
 800f3fc:	6861      	ldr	r1, [r4, #4]
 800f3fe:	f7ff fce9 	bl	800edd4 <_Balloc>
 800f402:	1e02      	subs	r2, r0, #0
 800f404:	d103      	bne.n	800f40e <__mdiff+0x5e>
 800f406:	4b32      	ldr	r3, [pc, #200]	; (800f4d0 <__mdiff+0x120>)
 800f408:	4832      	ldr	r0, [pc, #200]	; (800f4d4 <__mdiff+0x124>)
 800f40a:	4934      	ldr	r1, [pc, #208]	; (800f4dc <__mdiff+0x12c>)
 800f40c:	e7e4      	b.n	800f3d8 <__mdiff+0x28>
 800f40e:	9b01      	ldr	r3, [sp, #4]
 800f410:	2700      	movs	r7, #0
 800f412:	60c3      	str	r3, [r0, #12]
 800f414:	6920      	ldr	r0, [r4, #16]
 800f416:	3414      	adds	r4, #20
 800f418:	0083      	lsls	r3, r0, #2
 800f41a:	18e3      	adds	r3, r4, r3
 800f41c:	0021      	movs	r1, r4
 800f41e:	9401      	str	r4, [sp, #4]
 800f420:	0034      	movs	r4, r6
 800f422:	9302      	str	r3, [sp, #8]
 800f424:	6933      	ldr	r3, [r6, #16]
 800f426:	3414      	adds	r4, #20
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	18e3      	adds	r3, r4, r3
 800f42c:	9303      	str	r3, [sp, #12]
 800f42e:	0013      	movs	r3, r2
 800f430:	3314      	adds	r3, #20
 800f432:	469c      	mov	ip, r3
 800f434:	9305      	str	r3, [sp, #20]
 800f436:	9104      	str	r1, [sp, #16]
 800f438:	9b04      	ldr	r3, [sp, #16]
 800f43a:	cc02      	ldmia	r4!, {r1}
 800f43c:	cb20      	ldmia	r3!, {r5}
 800f43e:	9304      	str	r3, [sp, #16]
 800f440:	b2ab      	uxth	r3, r5
 800f442:	19df      	adds	r7, r3, r7
 800f444:	b28b      	uxth	r3, r1
 800f446:	1afb      	subs	r3, r7, r3
 800f448:	0c09      	lsrs	r1, r1, #16
 800f44a:	0c2d      	lsrs	r5, r5, #16
 800f44c:	1a6d      	subs	r5, r5, r1
 800f44e:	1419      	asrs	r1, r3, #16
 800f450:	1869      	adds	r1, r5, r1
 800f452:	b29b      	uxth	r3, r3
 800f454:	140f      	asrs	r7, r1, #16
 800f456:	0409      	lsls	r1, r1, #16
 800f458:	4319      	orrs	r1, r3
 800f45a:	4663      	mov	r3, ip
 800f45c:	c302      	stmia	r3!, {r1}
 800f45e:	469c      	mov	ip, r3
 800f460:	9b03      	ldr	r3, [sp, #12]
 800f462:	42a3      	cmp	r3, r4
 800f464:	d8e8      	bhi.n	800f438 <__mdiff+0x88>
 800f466:	0031      	movs	r1, r6
 800f468:	9c03      	ldr	r4, [sp, #12]
 800f46a:	3115      	adds	r1, #21
 800f46c:	2304      	movs	r3, #4
 800f46e:	428c      	cmp	r4, r1
 800f470:	d304      	bcc.n	800f47c <__mdiff+0xcc>
 800f472:	1ba3      	subs	r3, r4, r6
 800f474:	3b15      	subs	r3, #21
 800f476:	089b      	lsrs	r3, r3, #2
 800f478:	3301      	adds	r3, #1
 800f47a:	009b      	lsls	r3, r3, #2
 800f47c:	9901      	ldr	r1, [sp, #4]
 800f47e:	18cd      	adds	r5, r1, r3
 800f480:	9905      	ldr	r1, [sp, #20]
 800f482:	002e      	movs	r6, r5
 800f484:	18cb      	adds	r3, r1, r3
 800f486:	469c      	mov	ip, r3
 800f488:	9902      	ldr	r1, [sp, #8]
 800f48a:	428e      	cmp	r6, r1
 800f48c:	d310      	bcc.n	800f4b0 <__mdiff+0x100>
 800f48e:	9e02      	ldr	r6, [sp, #8]
 800f490:	1ee9      	subs	r1, r5, #3
 800f492:	2400      	movs	r4, #0
 800f494:	428e      	cmp	r6, r1
 800f496:	d304      	bcc.n	800f4a2 <__mdiff+0xf2>
 800f498:	0031      	movs	r1, r6
 800f49a:	3103      	adds	r1, #3
 800f49c:	1b49      	subs	r1, r1, r5
 800f49e:	0889      	lsrs	r1, r1, #2
 800f4a0:	008c      	lsls	r4, r1, #2
 800f4a2:	191b      	adds	r3, r3, r4
 800f4a4:	3b04      	subs	r3, #4
 800f4a6:	6819      	ldr	r1, [r3, #0]
 800f4a8:	2900      	cmp	r1, #0
 800f4aa:	d00f      	beq.n	800f4cc <__mdiff+0x11c>
 800f4ac:	6110      	str	r0, [r2, #16]
 800f4ae:	e798      	b.n	800f3e2 <__mdiff+0x32>
 800f4b0:	ce02      	ldmia	r6!, {r1}
 800f4b2:	b28c      	uxth	r4, r1
 800f4b4:	19e4      	adds	r4, r4, r7
 800f4b6:	0c0f      	lsrs	r7, r1, #16
 800f4b8:	1421      	asrs	r1, r4, #16
 800f4ba:	1879      	adds	r1, r7, r1
 800f4bc:	b2a4      	uxth	r4, r4
 800f4be:	140f      	asrs	r7, r1, #16
 800f4c0:	0409      	lsls	r1, r1, #16
 800f4c2:	4321      	orrs	r1, r4
 800f4c4:	4664      	mov	r4, ip
 800f4c6:	c402      	stmia	r4!, {r1}
 800f4c8:	46a4      	mov	ip, r4
 800f4ca:	e7dd      	b.n	800f488 <__mdiff+0xd8>
 800f4cc:	3801      	subs	r0, #1
 800f4ce:	e7e9      	b.n	800f4a4 <__mdiff+0xf4>
 800f4d0:	08010746 	.word	0x08010746
 800f4d4:	080107b7 	.word	0x080107b7
 800f4d8:	00000237 	.word	0x00000237
 800f4dc:	00000245 	.word	0x00000245

0800f4e0 <__ulp>:
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	4b0b      	ldr	r3, [pc, #44]	; (800f510 <__ulp+0x30>)
 800f4e4:	4019      	ands	r1, r3
 800f4e6:	4b0b      	ldr	r3, [pc, #44]	; (800f514 <__ulp+0x34>)
 800f4e8:	18c9      	adds	r1, r1, r3
 800f4ea:	4281      	cmp	r1, r0
 800f4ec:	dc06      	bgt.n	800f4fc <__ulp+0x1c>
 800f4ee:	4249      	negs	r1, r1
 800f4f0:	150b      	asrs	r3, r1, #20
 800f4f2:	2b13      	cmp	r3, #19
 800f4f4:	dc03      	bgt.n	800f4fe <__ulp+0x1e>
 800f4f6:	2180      	movs	r1, #128	; 0x80
 800f4f8:	0309      	lsls	r1, r1, #12
 800f4fa:	4119      	asrs	r1, r3
 800f4fc:	4770      	bx	lr
 800f4fe:	3b14      	subs	r3, #20
 800f500:	2001      	movs	r0, #1
 800f502:	2b1e      	cmp	r3, #30
 800f504:	dc02      	bgt.n	800f50c <__ulp+0x2c>
 800f506:	2080      	movs	r0, #128	; 0x80
 800f508:	0600      	lsls	r0, r0, #24
 800f50a:	40d8      	lsrs	r0, r3
 800f50c:	2100      	movs	r1, #0
 800f50e:	e7f5      	b.n	800f4fc <__ulp+0x1c>
 800f510:	7ff00000 	.word	0x7ff00000
 800f514:	fcc00000 	.word	0xfcc00000

0800f518 <__b2d>:
 800f518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f51a:	0006      	movs	r6, r0
 800f51c:	6903      	ldr	r3, [r0, #16]
 800f51e:	3614      	adds	r6, #20
 800f520:	009b      	lsls	r3, r3, #2
 800f522:	18f3      	adds	r3, r6, r3
 800f524:	1f1d      	subs	r5, r3, #4
 800f526:	682c      	ldr	r4, [r5, #0]
 800f528:	000f      	movs	r7, r1
 800f52a:	0020      	movs	r0, r4
 800f52c:	9301      	str	r3, [sp, #4]
 800f52e:	f7ff fd49 	bl	800efc4 <__hi0bits>
 800f532:	2220      	movs	r2, #32
 800f534:	1a12      	subs	r2, r2, r0
 800f536:	603a      	str	r2, [r7, #0]
 800f538:	0003      	movs	r3, r0
 800f53a:	4a1c      	ldr	r2, [pc, #112]	; (800f5ac <__b2d+0x94>)
 800f53c:	280a      	cmp	r0, #10
 800f53e:	dc15      	bgt.n	800f56c <__b2d+0x54>
 800f540:	210b      	movs	r1, #11
 800f542:	0027      	movs	r7, r4
 800f544:	1a09      	subs	r1, r1, r0
 800f546:	40cf      	lsrs	r7, r1
 800f548:	433a      	orrs	r2, r7
 800f54a:	468c      	mov	ip, r1
 800f54c:	0011      	movs	r1, r2
 800f54e:	2200      	movs	r2, #0
 800f550:	42ae      	cmp	r6, r5
 800f552:	d202      	bcs.n	800f55a <__b2d+0x42>
 800f554:	9a01      	ldr	r2, [sp, #4]
 800f556:	3a08      	subs	r2, #8
 800f558:	6812      	ldr	r2, [r2, #0]
 800f55a:	3315      	adds	r3, #21
 800f55c:	409c      	lsls	r4, r3
 800f55e:	4663      	mov	r3, ip
 800f560:	0027      	movs	r7, r4
 800f562:	40da      	lsrs	r2, r3
 800f564:	4317      	orrs	r7, r2
 800f566:	0038      	movs	r0, r7
 800f568:	b003      	add	sp, #12
 800f56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f56c:	2700      	movs	r7, #0
 800f56e:	42ae      	cmp	r6, r5
 800f570:	d202      	bcs.n	800f578 <__b2d+0x60>
 800f572:	9d01      	ldr	r5, [sp, #4]
 800f574:	3d08      	subs	r5, #8
 800f576:	682f      	ldr	r7, [r5, #0]
 800f578:	210b      	movs	r1, #11
 800f57a:	4249      	negs	r1, r1
 800f57c:	468c      	mov	ip, r1
 800f57e:	449c      	add	ip, r3
 800f580:	2b0b      	cmp	r3, #11
 800f582:	d010      	beq.n	800f5a6 <__b2d+0x8e>
 800f584:	4661      	mov	r1, ip
 800f586:	2320      	movs	r3, #32
 800f588:	408c      	lsls	r4, r1
 800f58a:	1a5b      	subs	r3, r3, r1
 800f58c:	0039      	movs	r1, r7
 800f58e:	40d9      	lsrs	r1, r3
 800f590:	430c      	orrs	r4, r1
 800f592:	4322      	orrs	r2, r4
 800f594:	0011      	movs	r1, r2
 800f596:	2200      	movs	r2, #0
 800f598:	42b5      	cmp	r5, r6
 800f59a:	d901      	bls.n	800f5a0 <__b2d+0x88>
 800f59c:	3d04      	subs	r5, #4
 800f59e:	682a      	ldr	r2, [r5, #0]
 800f5a0:	4664      	mov	r4, ip
 800f5a2:	40a7      	lsls	r7, r4
 800f5a4:	e7dd      	b.n	800f562 <__b2d+0x4a>
 800f5a6:	4322      	orrs	r2, r4
 800f5a8:	0011      	movs	r1, r2
 800f5aa:	e7dc      	b.n	800f566 <__b2d+0x4e>
 800f5ac:	3ff00000 	.word	0x3ff00000

0800f5b0 <__d2b>:
 800f5b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5b2:	2101      	movs	r1, #1
 800f5b4:	0014      	movs	r4, r2
 800f5b6:	001d      	movs	r5, r3
 800f5b8:	9f08      	ldr	r7, [sp, #32]
 800f5ba:	f7ff fc0b 	bl	800edd4 <_Balloc>
 800f5be:	1e06      	subs	r6, r0, #0
 800f5c0:	d105      	bne.n	800f5ce <__d2b+0x1e>
 800f5c2:	0032      	movs	r2, r6
 800f5c4:	4b24      	ldr	r3, [pc, #144]	; (800f658 <__d2b+0xa8>)
 800f5c6:	4825      	ldr	r0, [pc, #148]	; (800f65c <__d2b+0xac>)
 800f5c8:	4925      	ldr	r1, [pc, #148]	; (800f660 <__d2b+0xb0>)
 800f5ca:	f000 fcd7 	bl	800ff7c <__assert_func>
 800f5ce:	032b      	lsls	r3, r5, #12
 800f5d0:	006d      	lsls	r5, r5, #1
 800f5d2:	0b1b      	lsrs	r3, r3, #12
 800f5d4:	0d6d      	lsrs	r5, r5, #21
 800f5d6:	d125      	bne.n	800f624 <__d2b+0x74>
 800f5d8:	9301      	str	r3, [sp, #4]
 800f5da:	2c00      	cmp	r4, #0
 800f5dc:	d028      	beq.n	800f630 <__d2b+0x80>
 800f5de:	4668      	mov	r0, sp
 800f5e0:	9400      	str	r4, [sp, #0]
 800f5e2:	f7ff fd09 	bl	800eff8 <__lo0bits>
 800f5e6:	9b01      	ldr	r3, [sp, #4]
 800f5e8:	9900      	ldr	r1, [sp, #0]
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	d01e      	beq.n	800f62c <__d2b+0x7c>
 800f5ee:	2220      	movs	r2, #32
 800f5f0:	001c      	movs	r4, r3
 800f5f2:	1a12      	subs	r2, r2, r0
 800f5f4:	4094      	lsls	r4, r2
 800f5f6:	0022      	movs	r2, r4
 800f5f8:	40c3      	lsrs	r3, r0
 800f5fa:	430a      	orrs	r2, r1
 800f5fc:	6172      	str	r2, [r6, #20]
 800f5fe:	9301      	str	r3, [sp, #4]
 800f600:	9c01      	ldr	r4, [sp, #4]
 800f602:	61b4      	str	r4, [r6, #24]
 800f604:	1e63      	subs	r3, r4, #1
 800f606:	419c      	sbcs	r4, r3
 800f608:	3401      	adds	r4, #1
 800f60a:	6134      	str	r4, [r6, #16]
 800f60c:	2d00      	cmp	r5, #0
 800f60e:	d017      	beq.n	800f640 <__d2b+0x90>
 800f610:	2435      	movs	r4, #53	; 0x35
 800f612:	4b14      	ldr	r3, [pc, #80]	; (800f664 <__d2b+0xb4>)
 800f614:	18ed      	adds	r5, r5, r3
 800f616:	182d      	adds	r5, r5, r0
 800f618:	603d      	str	r5, [r7, #0]
 800f61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f61c:	1a24      	subs	r4, r4, r0
 800f61e:	601c      	str	r4, [r3, #0]
 800f620:	0030      	movs	r0, r6
 800f622:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f624:	2280      	movs	r2, #128	; 0x80
 800f626:	0352      	lsls	r2, r2, #13
 800f628:	4313      	orrs	r3, r2
 800f62a:	e7d5      	b.n	800f5d8 <__d2b+0x28>
 800f62c:	6171      	str	r1, [r6, #20]
 800f62e:	e7e7      	b.n	800f600 <__d2b+0x50>
 800f630:	a801      	add	r0, sp, #4
 800f632:	f7ff fce1 	bl	800eff8 <__lo0bits>
 800f636:	9b01      	ldr	r3, [sp, #4]
 800f638:	2401      	movs	r4, #1
 800f63a:	6173      	str	r3, [r6, #20]
 800f63c:	3020      	adds	r0, #32
 800f63e:	e7e4      	b.n	800f60a <__d2b+0x5a>
 800f640:	4b09      	ldr	r3, [pc, #36]	; (800f668 <__d2b+0xb8>)
 800f642:	18c0      	adds	r0, r0, r3
 800f644:	4b09      	ldr	r3, [pc, #36]	; (800f66c <__d2b+0xbc>)
 800f646:	6038      	str	r0, [r7, #0]
 800f648:	18e3      	adds	r3, r4, r3
 800f64a:	009b      	lsls	r3, r3, #2
 800f64c:	18f3      	adds	r3, r6, r3
 800f64e:	6958      	ldr	r0, [r3, #20]
 800f650:	f7ff fcb8 	bl	800efc4 <__hi0bits>
 800f654:	0164      	lsls	r4, r4, #5
 800f656:	e7e0      	b.n	800f61a <__d2b+0x6a>
 800f658:	08010746 	.word	0x08010746
 800f65c:	080107b7 	.word	0x080107b7
 800f660:	0000030f 	.word	0x0000030f
 800f664:	fffffbcd 	.word	0xfffffbcd
 800f668:	fffffbce 	.word	0xfffffbce
 800f66c:	3fffffff 	.word	0x3fffffff

0800f670 <__ratio>:
 800f670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f672:	b087      	sub	sp, #28
 800f674:	000f      	movs	r7, r1
 800f676:	a904      	add	r1, sp, #16
 800f678:	0006      	movs	r6, r0
 800f67a:	f7ff ff4d 	bl	800f518 <__b2d>
 800f67e:	9000      	str	r0, [sp, #0]
 800f680:	9101      	str	r1, [sp, #4]
 800f682:	9c00      	ldr	r4, [sp, #0]
 800f684:	9d01      	ldr	r5, [sp, #4]
 800f686:	0038      	movs	r0, r7
 800f688:	a905      	add	r1, sp, #20
 800f68a:	f7ff ff45 	bl	800f518 <__b2d>
 800f68e:	9002      	str	r0, [sp, #8]
 800f690:	9103      	str	r1, [sp, #12]
 800f692:	9a02      	ldr	r2, [sp, #8]
 800f694:	9b03      	ldr	r3, [sp, #12]
 800f696:	6930      	ldr	r0, [r6, #16]
 800f698:	6939      	ldr	r1, [r7, #16]
 800f69a:	9e04      	ldr	r6, [sp, #16]
 800f69c:	1a40      	subs	r0, r0, r1
 800f69e:	9905      	ldr	r1, [sp, #20]
 800f6a0:	0140      	lsls	r0, r0, #5
 800f6a2:	1a71      	subs	r1, r6, r1
 800f6a4:	1841      	adds	r1, r0, r1
 800f6a6:	0508      	lsls	r0, r1, #20
 800f6a8:	2900      	cmp	r1, #0
 800f6aa:	dd07      	ble.n	800f6bc <__ratio+0x4c>
 800f6ac:	9901      	ldr	r1, [sp, #4]
 800f6ae:	1845      	adds	r5, r0, r1
 800f6b0:	0020      	movs	r0, r4
 800f6b2:	0029      	movs	r1, r5
 800f6b4:	f7f2 fa4e 	bl	8001b54 <__aeabi_ddiv>
 800f6b8:	b007      	add	sp, #28
 800f6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6bc:	9903      	ldr	r1, [sp, #12]
 800f6be:	1a0b      	subs	r3, r1, r0
 800f6c0:	e7f6      	b.n	800f6b0 <__ratio+0x40>

0800f6c2 <__copybits>:
 800f6c2:	b570      	push	{r4, r5, r6, lr}
 800f6c4:	0014      	movs	r4, r2
 800f6c6:	0005      	movs	r5, r0
 800f6c8:	3901      	subs	r1, #1
 800f6ca:	6913      	ldr	r3, [r2, #16]
 800f6cc:	1149      	asrs	r1, r1, #5
 800f6ce:	3101      	adds	r1, #1
 800f6d0:	0089      	lsls	r1, r1, #2
 800f6d2:	3414      	adds	r4, #20
 800f6d4:	009b      	lsls	r3, r3, #2
 800f6d6:	1841      	adds	r1, r0, r1
 800f6d8:	18e3      	adds	r3, r4, r3
 800f6da:	42a3      	cmp	r3, r4
 800f6dc:	d80d      	bhi.n	800f6fa <__copybits+0x38>
 800f6de:	0014      	movs	r4, r2
 800f6e0:	3411      	adds	r4, #17
 800f6e2:	2500      	movs	r5, #0
 800f6e4:	429c      	cmp	r4, r3
 800f6e6:	d803      	bhi.n	800f6f0 <__copybits+0x2e>
 800f6e8:	1a9b      	subs	r3, r3, r2
 800f6ea:	3b11      	subs	r3, #17
 800f6ec:	089b      	lsrs	r3, r3, #2
 800f6ee:	009d      	lsls	r5, r3, #2
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	1940      	adds	r0, r0, r5
 800f6f4:	4281      	cmp	r1, r0
 800f6f6:	d803      	bhi.n	800f700 <__copybits+0x3e>
 800f6f8:	bd70      	pop	{r4, r5, r6, pc}
 800f6fa:	cc40      	ldmia	r4!, {r6}
 800f6fc:	c540      	stmia	r5!, {r6}
 800f6fe:	e7ec      	b.n	800f6da <__copybits+0x18>
 800f700:	c008      	stmia	r0!, {r3}
 800f702:	e7f7      	b.n	800f6f4 <__copybits+0x32>

0800f704 <__any_on>:
 800f704:	0002      	movs	r2, r0
 800f706:	6900      	ldr	r0, [r0, #16]
 800f708:	b510      	push	{r4, lr}
 800f70a:	3214      	adds	r2, #20
 800f70c:	114b      	asrs	r3, r1, #5
 800f70e:	4298      	cmp	r0, r3
 800f710:	db13      	blt.n	800f73a <__any_on+0x36>
 800f712:	dd0c      	ble.n	800f72e <__any_on+0x2a>
 800f714:	241f      	movs	r4, #31
 800f716:	0008      	movs	r0, r1
 800f718:	4020      	ands	r0, r4
 800f71a:	4221      	tst	r1, r4
 800f71c:	d007      	beq.n	800f72e <__any_on+0x2a>
 800f71e:	0099      	lsls	r1, r3, #2
 800f720:	588c      	ldr	r4, [r1, r2]
 800f722:	0021      	movs	r1, r4
 800f724:	40c1      	lsrs	r1, r0
 800f726:	4081      	lsls	r1, r0
 800f728:	2001      	movs	r0, #1
 800f72a:	428c      	cmp	r4, r1
 800f72c:	d104      	bne.n	800f738 <__any_on+0x34>
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	18d3      	adds	r3, r2, r3
 800f732:	4293      	cmp	r3, r2
 800f734:	d803      	bhi.n	800f73e <__any_on+0x3a>
 800f736:	2000      	movs	r0, #0
 800f738:	bd10      	pop	{r4, pc}
 800f73a:	0003      	movs	r3, r0
 800f73c:	e7f7      	b.n	800f72e <__any_on+0x2a>
 800f73e:	3b04      	subs	r3, #4
 800f740:	6819      	ldr	r1, [r3, #0]
 800f742:	2900      	cmp	r1, #0
 800f744:	d0f5      	beq.n	800f732 <__any_on+0x2e>
 800f746:	2001      	movs	r0, #1
 800f748:	e7f6      	b.n	800f738 <__any_on+0x34>

0800f74a <__ascii_wctomb>:
 800f74a:	0003      	movs	r3, r0
 800f74c:	1e08      	subs	r0, r1, #0
 800f74e:	d005      	beq.n	800f75c <__ascii_wctomb+0x12>
 800f750:	2aff      	cmp	r2, #255	; 0xff
 800f752:	d904      	bls.n	800f75e <__ascii_wctomb+0x14>
 800f754:	228a      	movs	r2, #138	; 0x8a
 800f756:	2001      	movs	r0, #1
 800f758:	601a      	str	r2, [r3, #0]
 800f75a:	4240      	negs	r0, r0
 800f75c:	4770      	bx	lr
 800f75e:	2001      	movs	r0, #1
 800f760:	700a      	strb	r2, [r1, #0]
 800f762:	e7fb      	b.n	800f75c <__ascii_wctomb+0x12>

0800f764 <__ssputs_r>:
 800f764:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f766:	b085      	sub	sp, #20
 800f768:	9301      	str	r3, [sp, #4]
 800f76a:	9203      	str	r2, [sp, #12]
 800f76c:	688e      	ldr	r6, [r1, #8]
 800f76e:	9a01      	ldr	r2, [sp, #4]
 800f770:	0007      	movs	r7, r0
 800f772:	000c      	movs	r4, r1
 800f774:	680b      	ldr	r3, [r1, #0]
 800f776:	4296      	cmp	r6, r2
 800f778:	d831      	bhi.n	800f7de <__ssputs_r+0x7a>
 800f77a:	898a      	ldrh	r2, [r1, #12]
 800f77c:	2190      	movs	r1, #144	; 0x90
 800f77e:	00c9      	lsls	r1, r1, #3
 800f780:	420a      	tst	r2, r1
 800f782:	d029      	beq.n	800f7d8 <__ssputs_r+0x74>
 800f784:	2003      	movs	r0, #3
 800f786:	6921      	ldr	r1, [r4, #16]
 800f788:	1a5b      	subs	r3, r3, r1
 800f78a:	9302      	str	r3, [sp, #8]
 800f78c:	6963      	ldr	r3, [r4, #20]
 800f78e:	4343      	muls	r3, r0
 800f790:	0fdd      	lsrs	r5, r3, #31
 800f792:	18ed      	adds	r5, r5, r3
 800f794:	9b01      	ldr	r3, [sp, #4]
 800f796:	9802      	ldr	r0, [sp, #8]
 800f798:	3301      	adds	r3, #1
 800f79a:	181b      	adds	r3, r3, r0
 800f79c:	106d      	asrs	r5, r5, #1
 800f79e:	42ab      	cmp	r3, r5
 800f7a0:	d900      	bls.n	800f7a4 <__ssputs_r+0x40>
 800f7a2:	001d      	movs	r5, r3
 800f7a4:	0552      	lsls	r2, r2, #21
 800f7a6:	d529      	bpl.n	800f7fc <__ssputs_r+0x98>
 800f7a8:	0029      	movs	r1, r5
 800f7aa:	0038      	movs	r0, r7
 800f7ac:	f7ff fa6e 	bl	800ec8c <_malloc_r>
 800f7b0:	1e06      	subs	r6, r0, #0
 800f7b2:	d02d      	beq.n	800f810 <__ssputs_r+0xac>
 800f7b4:	9a02      	ldr	r2, [sp, #8]
 800f7b6:	6921      	ldr	r1, [r4, #16]
 800f7b8:	f7fd ffe4 	bl	800d784 <memcpy>
 800f7bc:	89a2      	ldrh	r2, [r4, #12]
 800f7be:	4b19      	ldr	r3, [pc, #100]	; (800f824 <__ssputs_r+0xc0>)
 800f7c0:	401a      	ands	r2, r3
 800f7c2:	2380      	movs	r3, #128	; 0x80
 800f7c4:	4313      	orrs	r3, r2
 800f7c6:	81a3      	strh	r3, [r4, #12]
 800f7c8:	9b02      	ldr	r3, [sp, #8]
 800f7ca:	6126      	str	r6, [r4, #16]
 800f7cc:	18f6      	adds	r6, r6, r3
 800f7ce:	6026      	str	r6, [r4, #0]
 800f7d0:	6165      	str	r5, [r4, #20]
 800f7d2:	9e01      	ldr	r6, [sp, #4]
 800f7d4:	1aed      	subs	r5, r5, r3
 800f7d6:	60a5      	str	r5, [r4, #8]
 800f7d8:	9b01      	ldr	r3, [sp, #4]
 800f7da:	429e      	cmp	r6, r3
 800f7dc:	d900      	bls.n	800f7e0 <__ssputs_r+0x7c>
 800f7de:	9e01      	ldr	r6, [sp, #4]
 800f7e0:	0032      	movs	r2, r6
 800f7e2:	9903      	ldr	r1, [sp, #12]
 800f7e4:	6820      	ldr	r0, [r4, #0]
 800f7e6:	f000 fb7f 	bl	800fee8 <memmove>
 800f7ea:	2000      	movs	r0, #0
 800f7ec:	68a3      	ldr	r3, [r4, #8]
 800f7ee:	1b9b      	subs	r3, r3, r6
 800f7f0:	60a3      	str	r3, [r4, #8]
 800f7f2:	6823      	ldr	r3, [r4, #0]
 800f7f4:	199b      	adds	r3, r3, r6
 800f7f6:	6023      	str	r3, [r4, #0]
 800f7f8:	b005      	add	sp, #20
 800f7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7fc:	002a      	movs	r2, r5
 800f7fe:	0038      	movs	r0, r7
 800f800:	f000 fc07 	bl	8010012 <_realloc_r>
 800f804:	1e06      	subs	r6, r0, #0
 800f806:	d1df      	bne.n	800f7c8 <__ssputs_r+0x64>
 800f808:	0038      	movs	r0, r7
 800f80a:	6921      	ldr	r1, [r4, #16]
 800f80c:	f7fe fe6c 	bl	800e4e8 <_free_r>
 800f810:	230c      	movs	r3, #12
 800f812:	2001      	movs	r0, #1
 800f814:	603b      	str	r3, [r7, #0]
 800f816:	89a2      	ldrh	r2, [r4, #12]
 800f818:	3334      	adds	r3, #52	; 0x34
 800f81a:	4313      	orrs	r3, r2
 800f81c:	81a3      	strh	r3, [r4, #12]
 800f81e:	4240      	negs	r0, r0
 800f820:	e7ea      	b.n	800f7f8 <__ssputs_r+0x94>
 800f822:	46c0      	nop			; (mov r8, r8)
 800f824:	fffffb7f 	.word	0xfffffb7f

0800f828 <_svfiprintf_r>:
 800f828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f82a:	b0a1      	sub	sp, #132	; 0x84
 800f82c:	9003      	str	r0, [sp, #12]
 800f82e:	001d      	movs	r5, r3
 800f830:	898b      	ldrh	r3, [r1, #12]
 800f832:	000f      	movs	r7, r1
 800f834:	0016      	movs	r6, r2
 800f836:	061b      	lsls	r3, r3, #24
 800f838:	d511      	bpl.n	800f85e <_svfiprintf_r+0x36>
 800f83a:	690b      	ldr	r3, [r1, #16]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d10e      	bne.n	800f85e <_svfiprintf_r+0x36>
 800f840:	2140      	movs	r1, #64	; 0x40
 800f842:	f7ff fa23 	bl	800ec8c <_malloc_r>
 800f846:	6038      	str	r0, [r7, #0]
 800f848:	6138      	str	r0, [r7, #16]
 800f84a:	2800      	cmp	r0, #0
 800f84c:	d105      	bne.n	800f85a <_svfiprintf_r+0x32>
 800f84e:	230c      	movs	r3, #12
 800f850:	9a03      	ldr	r2, [sp, #12]
 800f852:	3801      	subs	r0, #1
 800f854:	6013      	str	r3, [r2, #0]
 800f856:	b021      	add	sp, #132	; 0x84
 800f858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f85a:	2340      	movs	r3, #64	; 0x40
 800f85c:	617b      	str	r3, [r7, #20]
 800f85e:	2300      	movs	r3, #0
 800f860:	ac08      	add	r4, sp, #32
 800f862:	6163      	str	r3, [r4, #20]
 800f864:	3320      	adds	r3, #32
 800f866:	7663      	strb	r3, [r4, #25]
 800f868:	3310      	adds	r3, #16
 800f86a:	76a3      	strb	r3, [r4, #26]
 800f86c:	9507      	str	r5, [sp, #28]
 800f86e:	0035      	movs	r5, r6
 800f870:	782b      	ldrb	r3, [r5, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d001      	beq.n	800f87a <_svfiprintf_r+0x52>
 800f876:	2b25      	cmp	r3, #37	; 0x25
 800f878:	d148      	bne.n	800f90c <_svfiprintf_r+0xe4>
 800f87a:	1bab      	subs	r3, r5, r6
 800f87c:	9305      	str	r3, [sp, #20]
 800f87e:	42b5      	cmp	r5, r6
 800f880:	d00b      	beq.n	800f89a <_svfiprintf_r+0x72>
 800f882:	0032      	movs	r2, r6
 800f884:	0039      	movs	r1, r7
 800f886:	9803      	ldr	r0, [sp, #12]
 800f888:	f7ff ff6c 	bl	800f764 <__ssputs_r>
 800f88c:	3001      	adds	r0, #1
 800f88e:	d100      	bne.n	800f892 <_svfiprintf_r+0x6a>
 800f890:	e0af      	b.n	800f9f2 <_svfiprintf_r+0x1ca>
 800f892:	6963      	ldr	r3, [r4, #20]
 800f894:	9a05      	ldr	r2, [sp, #20]
 800f896:	189b      	adds	r3, r3, r2
 800f898:	6163      	str	r3, [r4, #20]
 800f89a:	782b      	ldrb	r3, [r5, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d100      	bne.n	800f8a2 <_svfiprintf_r+0x7a>
 800f8a0:	e0a7      	b.n	800f9f2 <_svfiprintf_r+0x1ca>
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	4252      	negs	r2, r2
 800f8a8:	6062      	str	r2, [r4, #4]
 800f8aa:	a904      	add	r1, sp, #16
 800f8ac:	3254      	adds	r2, #84	; 0x54
 800f8ae:	1852      	adds	r2, r2, r1
 800f8b0:	1c6e      	adds	r6, r5, #1
 800f8b2:	6023      	str	r3, [r4, #0]
 800f8b4:	60e3      	str	r3, [r4, #12]
 800f8b6:	60a3      	str	r3, [r4, #8]
 800f8b8:	7013      	strb	r3, [r2, #0]
 800f8ba:	65a3      	str	r3, [r4, #88]	; 0x58
 800f8bc:	4b55      	ldr	r3, [pc, #340]	; (800fa14 <_svfiprintf_r+0x1ec>)
 800f8be:	2205      	movs	r2, #5
 800f8c0:	0018      	movs	r0, r3
 800f8c2:	7831      	ldrb	r1, [r6, #0]
 800f8c4:	9305      	str	r3, [sp, #20]
 800f8c6:	f7fd ff52 	bl	800d76e <memchr>
 800f8ca:	1c75      	adds	r5, r6, #1
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	d11f      	bne.n	800f910 <_svfiprintf_r+0xe8>
 800f8d0:	6822      	ldr	r2, [r4, #0]
 800f8d2:	06d3      	lsls	r3, r2, #27
 800f8d4:	d504      	bpl.n	800f8e0 <_svfiprintf_r+0xb8>
 800f8d6:	2353      	movs	r3, #83	; 0x53
 800f8d8:	a904      	add	r1, sp, #16
 800f8da:	185b      	adds	r3, r3, r1
 800f8dc:	2120      	movs	r1, #32
 800f8de:	7019      	strb	r1, [r3, #0]
 800f8e0:	0713      	lsls	r3, r2, #28
 800f8e2:	d504      	bpl.n	800f8ee <_svfiprintf_r+0xc6>
 800f8e4:	2353      	movs	r3, #83	; 0x53
 800f8e6:	a904      	add	r1, sp, #16
 800f8e8:	185b      	adds	r3, r3, r1
 800f8ea:	212b      	movs	r1, #43	; 0x2b
 800f8ec:	7019      	strb	r1, [r3, #0]
 800f8ee:	7833      	ldrb	r3, [r6, #0]
 800f8f0:	2b2a      	cmp	r3, #42	; 0x2a
 800f8f2:	d016      	beq.n	800f922 <_svfiprintf_r+0xfa>
 800f8f4:	0035      	movs	r5, r6
 800f8f6:	2100      	movs	r1, #0
 800f8f8:	200a      	movs	r0, #10
 800f8fa:	68e3      	ldr	r3, [r4, #12]
 800f8fc:	782a      	ldrb	r2, [r5, #0]
 800f8fe:	1c6e      	adds	r6, r5, #1
 800f900:	3a30      	subs	r2, #48	; 0x30
 800f902:	2a09      	cmp	r2, #9
 800f904:	d94e      	bls.n	800f9a4 <_svfiprintf_r+0x17c>
 800f906:	2900      	cmp	r1, #0
 800f908:	d111      	bne.n	800f92e <_svfiprintf_r+0x106>
 800f90a:	e017      	b.n	800f93c <_svfiprintf_r+0x114>
 800f90c:	3501      	adds	r5, #1
 800f90e:	e7af      	b.n	800f870 <_svfiprintf_r+0x48>
 800f910:	9b05      	ldr	r3, [sp, #20]
 800f912:	6822      	ldr	r2, [r4, #0]
 800f914:	1ac0      	subs	r0, r0, r3
 800f916:	2301      	movs	r3, #1
 800f918:	4083      	lsls	r3, r0
 800f91a:	4313      	orrs	r3, r2
 800f91c:	002e      	movs	r6, r5
 800f91e:	6023      	str	r3, [r4, #0]
 800f920:	e7cc      	b.n	800f8bc <_svfiprintf_r+0x94>
 800f922:	9b07      	ldr	r3, [sp, #28]
 800f924:	1d19      	adds	r1, r3, #4
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	9107      	str	r1, [sp, #28]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	db01      	blt.n	800f932 <_svfiprintf_r+0x10a>
 800f92e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f930:	e004      	b.n	800f93c <_svfiprintf_r+0x114>
 800f932:	425b      	negs	r3, r3
 800f934:	60e3      	str	r3, [r4, #12]
 800f936:	2302      	movs	r3, #2
 800f938:	4313      	orrs	r3, r2
 800f93a:	6023      	str	r3, [r4, #0]
 800f93c:	782b      	ldrb	r3, [r5, #0]
 800f93e:	2b2e      	cmp	r3, #46	; 0x2e
 800f940:	d10a      	bne.n	800f958 <_svfiprintf_r+0x130>
 800f942:	786b      	ldrb	r3, [r5, #1]
 800f944:	2b2a      	cmp	r3, #42	; 0x2a
 800f946:	d135      	bne.n	800f9b4 <_svfiprintf_r+0x18c>
 800f948:	9b07      	ldr	r3, [sp, #28]
 800f94a:	3502      	adds	r5, #2
 800f94c:	1d1a      	adds	r2, r3, #4
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	9207      	str	r2, [sp, #28]
 800f952:	2b00      	cmp	r3, #0
 800f954:	db2b      	blt.n	800f9ae <_svfiprintf_r+0x186>
 800f956:	9309      	str	r3, [sp, #36]	; 0x24
 800f958:	4e2f      	ldr	r6, [pc, #188]	; (800fa18 <_svfiprintf_r+0x1f0>)
 800f95a:	2203      	movs	r2, #3
 800f95c:	0030      	movs	r0, r6
 800f95e:	7829      	ldrb	r1, [r5, #0]
 800f960:	f7fd ff05 	bl	800d76e <memchr>
 800f964:	2800      	cmp	r0, #0
 800f966:	d006      	beq.n	800f976 <_svfiprintf_r+0x14e>
 800f968:	2340      	movs	r3, #64	; 0x40
 800f96a:	1b80      	subs	r0, r0, r6
 800f96c:	4083      	lsls	r3, r0
 800f96e:	6822      	ldr	r2, [r4, #0]
 800f970:	3501      	adds	r5, #1
 800f972:	4313      	orrs	r3, r2
 800f974:	6023      	str	r3, [r4, #0]
 800f976:	7829      	ldrb	r1, [r5, #0]
 800f978:	2206      	movs	r2, #6
 800f97a:	4828      	ldr	r0, [pc, #160]	; (800fa1c <_svfiprintf_r+0x1f4>)
 800f97c:	1c6e      	adds	r6, r5, #1
 800f97e:	7621      	strb	r1, [r4, #24]
 800f980:	f7fd fef5 	bl	800d76e <memchr>
 800f984:	2800      	cmp	r0, #0
 800f986:	d03c      	beq.n	800fa02 <_svfiprintf_r+0x1da>
 800f988:	4b25      	ldr	r3, [pc, #148]	; (800fa20 <_svfiprintf_r+0x1f8>)
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d125      	bne.n	800f9da <_svfiprintf_r+0x1b2>
 800f98e:	2207      	movs	r2, #7
 800f990:	9b07      	ldr	r3, [sp, #28]
 800f992:	3307      	adds	r3, #7
 800f994:	4393      	bics	r3, r2
 800f996:	3308      	adds	r3, #8
 800f998:	9307      	str	r3, [sp, #28]
 800f99a:	6963      	ldr	r3, [r4, #20]
 800f99c:	9a04      	ldr	r2, [sp, #16]
 800f99e:	189b      	adds	r3, r3, r2
 800f9a0:	6163      	str	r3, [r4, #20]
 800f9a2:	e764      	b.n	800f86e <_svfiprintf_r+0x46>
 800f9a4:	4343      	muls	r3, r0
 800f9a6:	0035      	movs	r5, r6
 800f9a8:	2101      	movs	r1, #1
 800f9aa:	189b      	adds	r3, r3, r2
 800f9ac:	e7a6      	b.n	800f8fc <_svfiprintf_r+0xd4>
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	425b      	negs	r3, r3
 800f9b2:	e7d0      	b.n	800f956 <_svfiprintf_r+0x12e>
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	200a      	movs	r0, #10
 800f9b8:	001a      	movs	r2, r3
 800f9ba:	3501      	adds	r5, #1
 800f9bc:	6063      	str	r3, [r4, #4]
 800f9be:	7829      	ldrb	r1, [r5, #0]
 800f9c0:	1c6e      	adds	r6, r5, #1
 800f9c2:	3930      	subs	r1, #48	; 0x30
 800f9c4:	2909      	cmp	r1, #9
 800f9c6:	d903      	bls.n	800f9d0 <_svfiprintf_r+0x1a8>
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d0c5      	beq.n	800f958 <_svfiprintf_r+0x130>
 800f9cc:	9209      	str	r2, [sp, #36]	; 0x24
 800f9ce:	e7c3      	b.n	800f958 <_svfiprintf_r+0x130>
 800f9d0:	4342      	muls	r2, r0
 800f9d2:	0035      	movs	r5, r6
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	1852      	adds	r2, r2, r1
 800f9d8:	e7f1      	b.n	800f9be <_svfiprintf_r+0x196>
 800f9da:	aa07      	add	r2, sp, #28
 800f9dc:	9200      	str	r2, [sp, #0]
 800f9de:	0021      	movs	r1, r4
 800f9e0:	003a      	movs	r2, r7
 800f9e2:	4b10      	ldr	r3, [pc, #64]	; (800fa24 <_svfiprintf_r+0x1fc>)
 800f9e4:	9803      	ldr	r0, [sp, #12]
 800f9e6:	f7fc fdeb 	bl	800c5c0 <_printf_float>
 800f9ea:	9004      	str	r0, [sp, #16]
 800f9ec:	9b04      	ldr	r3, [sp, #16]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	d1d3      	bne.n	800f99a <_svfiprintf_r+0x172>
 800f9f2:	89bb      	ldrh	r3, [r7, #12]
 800f9f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f9f6:	065b      	lsls	r3, r3, #25
 800f9f8:	d400      	bmi.n	800f9fc <_svfiprintf_r+0x1d4>
 800f9fa:	e72c      	b.n	800f856 <_svfiprintf_r+0x2e>
 800f9fc:	2001      	movs	r0, #1
 800f9fe:	4240      	negs	r0, r0
 800fa00:	e729      	b.n	800f856 <_svfiprintf_r+0x2e>
 800fa02:	aa07      	add	r2, sp, #28
 800fa04:	9200      	str	r2, [sp, #0]
 800fa06:	0021      	movs	r1, r4
 800fa08:	003a      	movs	r2, r7
 800fa0a:	4b06      	ldr	r3, [pc, #24]	; (800fa24 <_svfiprintf_r+0x1fc>)
 800fa0c:	9803      	ldr	r0, [sp, #12]
 800fa0e:	f7fd f89d 	bl	800cb4c <_printf_i>
 800fa12:	e7ea      	b.n	800f9ea <_svfiprintf_r+0x1c2>
 800fa14:	0801090c 	.word	0x0801090c
 800fa18:	08010912 	.word	0x08010912
 800fa1c:	08010916 	.word	0x08010916
 800fa20:	0800c5c1 	.word	0x0800c5c1
 800fa24:	0800f765 	.word	0x0800f765

0800fa28 <__sfputc_r>:
 800fa28:	6893      	ldr	r3, [r2, #8]
 800fa2a:	b510      	push	{r4, lr}
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	6093      	str	r3, [r2, #8]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	da04      	bge.n	800fa3e <__sfputc_r+0x16>
 800fa34:	6994      	ldr	r4, [r2, #24]
 800fa36:	42a3      	cmp	r3, r4
 800fa38:	db07      	blt.n	800fa4a <__sfputc_r+0x22>
 800fa3a:	290a      	cmp	r1, #10
 800fa3c:	d005      	beq.n	800fa4a <__sfputc_r+0x22>
 800fa3e:	6813      	ldr	r3, [r2, #0]
 800fa40:	1c58      	adds	r0, r3, #1
 800fa42:	6010      	str	r0, [r2, #0]
 800fa44:	7019      	strb	r1, [r3, #0]
 800fa46:	0008      	movs	r0, r1
 800fa48:	bd10      	pop	{r4, pc}
 800fa4a:	f7fd fd37 	bl	800d4bc <__swbuf_r>
 800fa4e:	0001      	movs	r1, r0
 800fa50:	e7f9      	b.n	800fa46 <__sfputc_r+0x1e>

0800fa52 <__sfputs_r>:
 800fa52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa54:	0006      	movs	r6, r0
 800fa56:	000f      	movs	r7, r1
 800fa58:	0014      	movs	r4, r2
 800fa5a:	18d5      	adds	r5, r2, r3
 800fa5c:	42ac      	cmp	r4, r5
 800fa5e:	d101      	bne.n	800fa64 <__sfputs_r+0x12>
 800fa60:	2000      	movs	r0, #0
 800fa62:	e007      	b.n	800fa74 <__sfputs_r+0x22>
 800fa64:	7821      	ldrb	r1, [r4, #0]
 800fa66:	003a      	movs	r2, r7
 800fa68:	0030      	movs	r0, r6
 800fa6a:	f7ff ffdd 	bl	800fa28 <__sfputc_r>
 800fa6e:	3401      	adds	r4, #1
 800fa70:	1c43      	adds	r3, r0, #1
 800fa72:	d1f3      	bne.n	800fa5c <__sfputs_r+0xa>
 800fa74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa78 <_vfiprintf_r>:
 800fa78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa7a:	b0a1      	sub	sp, #132	; 0x84
 800fa7c:	000f      	movs	r7, r1
 800fa7e:	0015      	movs	r5, r2
 800fa80:	001e      	movs	r6, r3
 800fa82:	9003      	str	r0, [sp, #12]
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d004      	beq.n	800fa92 <_vfiprintf_r+0x1a>
 800fa88:	6a03      	ldr	r3, [r0, #32]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d101      	bne.n	800fa92 <_vfiprintf_r+0x1a>
 800fa8e:	f7fd fc05 	bl	800d29c <__sinit>
 800fa92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa94:	07db      	lsls	r3, r3, #31
 800fa96:	d405      	bmi.n	800faa4 <_vfiprintf_r+0x2c>
 800fa98:	89bb      	ldrh	r3, [r7, #12]
 800fa9a:	059b      	lsls	r3, r3, #22
 800fa9c:	d402      	bmi.n	800faa4 <_vfiprintf_r+0x2c>
 800fa9e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800faa0:	f7fd fe63 	bl	800d76a <__retarget_lock_acquire_recursive>
 800faa4:	89bb      	ldrh	r3, [r7, #12]
 800faa6:	071b      	lsls	r3, r3, #28
 800faa8:	d502      	bpl.n	800fab0 <_vfiprintf_r+0x38>
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d113      	bne.n	800fad8 <_vfiprintf_r+0x60>
 800fab0:	0039      	movs	r1, r7
 800fab2:	9803      	ldr	r0, [sp, #12]
 800fab4:	f7fd fd44 	bl	800d540 <__swsetup_r>
 800fab8:	2800      	cmp	r0, #0
 800faba:	d00d      	beq.n	800fad8 <_vfiprintf_r+0x60>
 800fabc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fabe:	07db      	lsls	r3, r3, #31
 800fac0:	d503      	bpl.n	800faca <_vfiprintf_r+0x52>
 800fac2:	2001      	movs	r0, #1
 800fac4:	4240      	negs	r0, r0
 800fac6:	b021      	add	sp, #132	; 0x84
 800fac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faca:	89bb      	ldrh	r3, [r7, #12]
 800facc:	059b      	lsls	r3, r3, #22
 800face:	d4f8      	bmi.n	800fac2 <_vfiprintf_r+0x4a>
 800fad0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fad2:	f7fd fe4b 	bl	800d76c <__retarget_lock_release_recursive>
 800fad6:	e7f4      	b.n	800fac2 <_vfiprintf_r+0x4a>
 800fad8:	2300      	movs	r3, #0
 800fada:	ac08      	add	r4, sp, #32
 800fadc:	6163      	str	r3, [r4, #20]
 800fade:	3320      	adds	r3, #32
 800fae0:	7663      	strb	r3, [r4, #25]
 800fae2:	3310      	adds	r3, #16
 800fae4:	76a3      	strb	r3, [r4, #26]
 800fae6:	9607      	str	r6, [sp, #28]
 800fae8:	002e      	movs	r6, r5
 800faea:	7833      	ldrb	r3, [r6, #0]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d001      	beq.n	800faf4 <_vfiprintf_r+0x7c>
 800faf0:	2b25      	cmp	r3, #37	; 0x25
 800faf2:	d148      	bne.n	800fb86 <_vfiprintf_r+0x10e>
 800faf4:	1b73      	subs	r3, r6, r5
 800faf6:	9305      	str	r3, [sp, #20]
 800faf8:	42ae      	cmp	r6, r5
 800fafa:	d00b      	beq.n	800fb14 <_vfiprintf_r+0x9c>
 800fafc:	002a      	movs	r2, r5
 800fafe:	0039      	movs	r1, r7
 800fb00:	9803      	ldr	r0, [sp, #12]
 800fb02:	f7ff ffa6 	bl	800fa52 <__sfputs_r>
 800fb06:	3001      	adds	r0, #1
 800fb08:	d100      	bne.n	800fb0c <_vfiprintf_r+0x94>
 800fb0a:	e0af      	b.n	800fc6c <_vfiprintf_r+0x1f4>
 800fb0c:	6963      	ldr	r3, [r4, #20]
 800fb0e:	9a05      	ldr	r2, [sp, #20]
 800fb10:	189b      	adds	r3, r3, r2
 800fb12:	6163      	str	r3, [r4, #20]
 800fb14:	7833      	ldrb	r3, [r6, #0]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d100      	bne.n	800fb1c <_vfiprintf_r+0xa4>
 800fb1a:	e0a7      	b.n	800fc6c <_vfiprintf_r+0x1f4>
 800fb1c:	2201      	movs	r2, #1
 800fb1e:	2300      	movs	r3, #0
 800fb20:	4252      	negs	r2, r2
 800fb22:	6062      	str	r2, [r4, #4]
 800fb24:	a904      	add	r1, sp, #16
 800fb26:	3254      	adds	r2, #84	; 0x54
 800fb28:	1852      	adds	r2, r2, r1
 800fb2a:	1c75      	adds	r5, r6, #1
 800fb2c:	6023      	str	r3, [r4, #0]
 800fb2e:	60e3      	str	r3, [r4, #12]
 800fb30:	60a3      	str	r3, [r4, #8]
 800fb32:	7013      	strb	r3, [r2, #0]
 800fb34:	65a3      	str	r3, [r4, #88]	; 0x58
 800fb36:	4b59      	ldr	r3, [pc, #356]	; (800fc9c <_vfiprintf_r+0x224>)
 800fb38:	2205      	movs	r2, #5
 800fb3a:	0018      	movs	r0, r3
 800fb3c:	7829      	ldrb	r1, [r5, #0]
 800fb3e:	9305      	str	r3, [sp, #20]
 800fb40:	f7fd fe15 	bl	800d76e <memchr>
 800fb44:	1c6e      	adds	r6, r5, #1
 800fb46:	2800      	cmp	r0, #0
 800fb48:	d11f      	bne.n	800fb8a <_vfiprintf_r+0x112>
 800fb4a:	6822      	ldr	r2, [r4, #0]
 800fb4c:	06d3      	lsls	r3, r2, #27
 800fb4e:	d504      	bpl.n	800fb5a <_vfiprintf_r+0xe2>
 800fb50:	2353      	movs	r3, #83	; 0x53
 800fb52:	a904      	add	r1, sp, #16
 800fb54:	185b      	adds	r3, r3, r1
 800fb56:	2120      	movs	r1, #32
 800fb58:	7019      	strb	r1, [r3, #0]
 800fb5a:	0713      	lsls	r3, r2, #28
 800fb5c:	d504      	bpl.n	800fb68 <_vfiprintf_r+0xf0>
 800fb5e:	2353      	movs	r3, #83	; 0x53
 800fb60:	a904      	add	r1, sp, #16
 800fb62:	185b      	adds	r3, r3, r1
 800fb64:	212b      	movs	r1, #43	; 0x2b
 800fb66:	7019      	strb	r1, [r3, #0]
 800fb68:	782b      	ldrb	r3, [r5, #0]
 800fb6a:	2b2a      	cmp	r3, #42	; 0x2a
 800fb6c:	d016      	beq.n	800fb9c <_vfiprintf_r+0x124>
 800fb6e:	002e      	movs	r6, r5
 800fb70:	2100      	movs	r1, #0
 800fb72:	200a      	movs	r0, #10
 800fb74:	68e3      	ldr	r3, [r4, #12]
 800fb76:	7832      	ldrb	r2, [r6, #0]
 800fb78:	1c75      	adds	r5, r6, #1
 800fb7a:	3a30      	subs	r2, #48	; 0x30
 800fb7c:	2a09      	cmp	r2, #9
 800fb7e:	d94e      	bls.n	800fc1e <_vfiprintf_r+0x1a6>
 800fb80:	2900      	cmp	r1, #0
 800fb82:	d111      	bne.n	800fba8 <_vfiprintf_r+0x130>
 800fb84:	e017      	b.n	800fbb6 <_vfiprintf_r+0x13e>
 800fb86:	3601      	adds	r6, #1
 800fb88:	e7af      	b.n	800faea <_vfiprintf_r+0x72>
 800fb8a:	9b05      	ldr	r3, [sp, #20]
 800fb8c:	6822      	ldr	r2, [r4, #0]
 800fb8e:	1ac0      	subs	r0, r0, r3
 800fb90:	2301      	movs	r3, #1
 800fb92:	4083      	lsls	r3, r0
 800fb94:	4313      	orrs	r3, r2
 800fb96:	0035      	movs	r5, r6
 800fb98:	6023      	str	r3, [r4, #0]
 800fb9a:	e7cc      	b.n	800fb36 <_vfiprintf_r+0xbe>
 800fb9c:	9b07      	ldr	r3, [sp, #28]
 800fb9e:	1d19      	adds	r1, r3, #4
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	9107      	str	r1, [sp, #28]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	db01      	blt.n	800fbac <_vfiprintf_r+0x134>
 800fba8:	930b      	str	r3, [sp, #44]	; 0x2c
 800fbaa:	e004      	b.n	800fbb6 <_vfiprintf_r+0x13e>
 800fbac:	425b      	negs	r3, r3
 800fbae:	60e3      	str	r3, [r4, #12]
 800fbb0:	2302      	movs	r3, #2
 800fbb2:	4313      	orrs	r3, r2
 800fbb4:	6023      	str	r3, [r4, #0]
 800fbb6:	7833      	ldrb	r3, [r6, #0]
 800fbb8:	2b2e      	cmp	r3, #46	; 0x2e
 800fbba:	d10a      	bne.n	800fbd2 <_vfiprintf_r+0x15a>
 800fbbc:	7873      	ldrb	r3, [r6, #1]
 800fbbe:	2b2a      	cmp	r3, #42	; 0x2a
 800fbc0:	d135      	bne.n	800fc2e <_vfiprintf_r+0x1b6>
 800fbc2:	9b07      	ldr	r3, [sp, #28]
 800fbc4:	3602      	adds	r6, #2
 800fbc6:	1d1a      	adds	r2, r3, #4
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	9207      	str	r2, [sp, #28]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	db2b      	blt.n	800fc28 <_vfiprintf_r+0x1b0>
 800fbd0:	9309      	str	r3, [sp, #36]	; 0x24
 800fbd2:	4d33      	ldr	r5, [pc, #204]	; (800fca0 <_vfiprintf_r+0x228>)
 800fbd4:	2203      	movs	r2, #3
 800fbd6:	0028      	movs	r0, r5
 800fbd8:	7831      	ldrb	r1, [r6, #0]
 800fbda:	f7fd fdc8 	bl	800d76e <memchr>
 800fbde:	2800      	cmp	r0, #0
 800fbe0:	d006      	beq.n	800fbf0 <_vfiprintf_r+0x178>
 800fbe2:	2340      	movs	r3, #64	; 0x40
 800fbe4:	1b40      	subs	r0, r0, r5
 800fbe6:	4083      	lsls	r3, r0
 800fbe8:	6822      	ldr	r2, [r4, #0]
 800fbea:	3601      	adds	r6, #1
 800fbec:	4313      	orrs	r3, r2
 800fbee:	6023      	str	r3, [r4, #0]
 800fbf0:	7831      	ldrb	r1, [r6, #0]
 800fbf2:	2206      	movs	r2, #6
 800fbf4:	482b      	ldr	r0, [pc, #172]	; (800fca4 <_vfiprintf_r+0x22c>)
 800fbf6:	1c75      	adds	r5, r6, #1
 800fbf8:	7621      	strb	r1, [r4, #24]
 800fbfa:	f7fd fdb8 	bl	800d76e <memchr>
 800fbfe:	2800      	cmp	r0, #0
 800fc00:	d043      	beq.n	800fc8a <_vfiprintf_r+0x212>
 800fc02:	4b29      	ldr	r3, [pc, #164]	; (800fca8 <_vfiprintf_r+0x230>)
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d125      	bne.n	800fc54 <_vfiprintf_r+0x1dc>
 800fc08:	2207      	movs	r2, #7
 800fc0a:	9b07      	ldr	r3, [sp, #28]
 800fc0c:	3307      	adds	r3, #7
 800fc0e:	4393      	bics	r3, r2
 800fc10:	3308      	adds	r3, #8
 800fc12:	9307      	str	r3, [sp, #28]
 800fc14:	6963      	ldr	r3, [r4, #20]
 800fc16:	9a04      	ldr	r2, [sp, #16]
 800fc18:	189b      	adds	r3, r3, r2
 800fc1a:	6163      	str	r3, [r4, #20]
 800fc1c:	e764      	b.n	800fae8 <_vfiprintf_r+0x70>
 800fc1e:	4343      	muls	r3, r0
 800fc20:	002e      	movs	r6, r5
 800fc22:	2101      	movs	r1, #1
 800fc24:	189b      	adds	r3, r3, r2
 800fc26:	e7a6      	b.n	800fb76 <_vfiprintf_r+0xfe>
 800fc28:	2301      	movs	r3, #1
 800fc2a:	425b      	negs	r3, r3
 800fc2c:	e7d0      	b.n	800fbd0 <_vfiprintf_r+0x158>
 800fc2e:	2300      	movs	r3, #0
 800fc30:	200a      	movs	r0, #10
 800fc32:	001a      	movs	r2, r3
 800fc34:	3601      	adds	r6, #1
 800fc36:	6063      	str	r3, [r4, #4]
 800fc38:	7831      	ldrb	r1, [r6, #0]
 800fc3a:	1c75      	adds	r5, r6, #1
 800fc3c:	3930      	subs	r1, #48	; 0x30
 800fc3e:	2909      	cmp	r1, #9
 800fc40:	d903      	bls.n	800fc4a <_vfiprintf_r+0x1d2>
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d0c5      	beq.n	800fbd2 <_vfiprintf_r+0x15a>
 800fc46:	9209      	str	r2, [sp, #36]	; 0x24
 800fc48:	e7c3      	b.n	800fbd2 <_vfiprintf_r+0x15a>
 800fc4a:	4342      	muls	r2, r0
 800fc4c:	002e      	movs	r6, r5
 800fc4e:	2301      	movs	r3, #1
 800fc50:	1852      	adds	r2, r2, r1
 800fc52:	e7f1      	b.n	800fc38 <_vfiprintf_r+0x1c0>
 800fc54:	aa07      	add	r2, sp, #28
 800fc56:	9200      	str	r2, [sp, #0]
 800fc58:	0021      	movs	r1, r4
 800fc5a:	003a      	movs	r2, r7
 800fc5c:	4b13      	ldr	r3, [pc, #76]	; (800fcac <_vfiprintf_r+0x234>)
 800fc5e:	9803      	ldr	r0, [sp, #12]
 800fc60:	f7fc fcae 	bl	800c5c0 <_printf_float>
 800fc64:	9004      	str	r0, [sp, #16]
 800fc66:	9b04      	ldr	r3, [sp, #16]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	d1d3      	bne.n	800fc14 <_vfiprintf_r+0x19c>
 800fc6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc6e:	07db      	lsls	r3, r3, #31
 800fc70:	d405      	bmi.n	800fc7e <_vfiprintf_r+0x206>
 800fc72:	89bb      	ldrh	r3, [r7, #12]
 800fc74:	059b      	lsls	r3, r3, #22
 800fc76:	d402      	bmi.n	800fc7e <_vfiprintf_r+0x206>
 800fc78:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fc7a:	f7fd fd77 	bl	800d76c <__retarget_lock_release_recursive>
 800fc7e:	89bb      	ldrh	r3, [r7, #12]
 800fc80:	065b      	lsls	r3, r3, #25
 800fc82:	d500      	bpl.n	800fc86 <_vfiprintf_r+0x20e>
 800fc84:	e71d      	b.n	800fac2 <_vfiprintf_r+0x4a>
 800fc86:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fc88:	e71d      	b.n	800fac6 <_vfiprintf_r+0x4e>
 800fc8a:	aa07      	add	r2, sp, #28
 800fc8c:	9200      	str	r2, [sp, #0]
 800fc8e:	0021      	movs	r1, r4
 800fc90:	003a      	movs	r2, r7
 800fc92:	4b06      	ldr	r3, [pc, #24]	; (800fcac <_vfiprintf_r+0x234>)
 800fc94:	9803      	ldr	r0, [sp, #12]
 800fc96:	f7fc ff59 	bl	800cb4c <_printf_i>
 800fc9a:	e7e3      	b.n	800fc64 <_vfiprintf_r+0x1ec>
 800fc9c:	0801090c 	.word	0x0801090c
 800fca0:	08010912 	.word	0x08010912
 800fca4:	08010916 	.word	0x08010916
 800fca8:	0800c5c1 	.word	0x0800c5c1
 800fcac:	0800fa53 	.word	0x0800fa53

0800fcb0 <__sflush_r>:
 800fcb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcb2:	898b      	ldrh	r3, [r1, #12]
 800fcb4:	0005      	movs	r5, r0
 800fcb6:	000c      	movs	r4, r1
 800fcb8:	071a      	lsls	r2, r3, #28
 800fcba:	d45c      	bmi.n	800fd76 <__sflush_r+0xc6>
 800fcbc:	684a      	ldr	r2, [r1, #4]
 800fcbe:	2a00      	cmp	r2, #0
 800fcc0:	dc04      	bgt.n	800fccc <__sflush_r+0x1c>
 800fcc2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800fcc4:	2a00      	cmp	r2, #0
 800fcc6:	dc01      	bgt.n	800fccc <__sflush_r+0x1c>
 800fcc8:	2000      	movs	r0, #0
 800fcca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fccc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800fcce:	2f00      	cmp	r7, #0
 800fcd0:	d0fa      	beq.n	800fcc8 <__sflush_r+0x18>
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	2080      	movs	r0, #128	; 0x80
 800fcd6:	682e      	ldr	r6, [r5, #0]
 800fcd8:	602a      	str	r2, [r5, #0]
 800fcda:	001a      	movs	r2, r3
 800fcdc:	0140      	lsls	r0, r0, #5
 800fcde:	6a21      	ldr	r1, [r4, #32]
 800fce0:	4002      	ands	r2, r0
 800fce2:	4203      	tst	r3, r0
 800fce4:	d034      	beq.n	800fd50 <__sflush_r+0xa0>
 800fce6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fce8:	89a3      	ldrh	r3, [r4, #12]
 800fcea:	075b      	lsls	r3, r3, #29
 800fcec:	d506      	bpl.n	800fcfc <__sflush_r+0x4c>
 800fcee:	6863      	ldr	r3, [r4, #4]
 800fcf0:	1ac0      	subs	r0, r0, r3
 800fcf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d001      	beq.n	800fcfc <__sflush_r+0x4c>
 800fcf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fcfa:	1ac0      	subs	r0, r0, r3
 800fcfc:	0002      	movs	r2, r0
 800fcfe:	2300      	movs	r3, #0
 800fd00:	0028      	movs	r0, r5
 800fd02:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800fd04:	6a21      	ldr	r1, [r4, #32]
 800fd06:	47b8      	blx	r7
 800fd08:	89a2      	ldrh	r2, [r4, #12]
 800fd0a:	1c43      	adds	r3, r0, #1
 800fd0c:	d106      	bne.n	800fd1c <__sflush_r+0x6c>
 800fd0e:	6829      	ldr	r1, [r5, #0]
 800fd10:	291d      	cmp	r1, #29
 800fd12:	d82c      	bhi.n	800fd6e <__sflush_r+0xbe>
 800fd14:	4b2a      	ldr	r3, [pc, #168]	; (800fdc0 <__sflush_r+0x110>)
 800fd16:	410b      	asrs	r3, r1
 800fd18:	07db      	lsls	r3, r3, #31
 800fd1a:	d428      	bmi.n	800fd6e <__sflush_r+0xbe>
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	6063      	str	r3, [r4, #4]
 800fd20:	6923      	ldr	r3, [r4, #16]
 800fd22:	6023      	str	r3, [r4, #0]
 800fd24:	04d2      	lsls	r2, r2, #19
 800fd26:	d505      	bpl.n	800fd34 <__sflush_r+0x84>
 800fd28:	1c43      	adds	r3, r0, #1
 800fd2a:	d102      	bne.n	800fd32 <__sflush_r+0x82>
 800fd2c:	682b      	ldr	r3, [r5, #0]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d100      	bne.n	800fd34 <__sflush_r+0x84>
 800fd32:	6560      	str	r0, [r4, #84]	; 0x54
 800fd34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd36:	602e      	str	r6, [r5, #0]
 800fd38:	2900      	cmp	r1, #0
 800fd3a:	d0c5      	beq.n	800fcc8 <__sflush_r+0x18>
 800fd3c:	0023      	movs	r3, r4
 800fd3e:	3344      	adds	r3, #68	; 0x44
 800fd40:	4299      	cmp	r1, r3
 800fd42:	d002      	beq.n	800fd4a <__sflush_r+0x9a>
 800fd44:	0028      	movs	r0, r5
 800fd46:	f7fe fbcf 	bl	800e4e8 <_free_r>
 800fd4a:	2000      	movs	r0, #0
 800fd4c:	6360      	str	r0, [r4, #52]	; 0x34
 800fd4e:	e7bc      	b.n	800fcca <__sflush_r+0x1a>
 800fd50:	2301      	movs	r3, #1
 800fd52:	0028      	movs	r0, r5
 800fd54:	47b8      	blx	r7
 800fd56:	1c43      	adds	r3, r0, #1
 800fd58:	d1c6      	bne.n	800fce8 <__sflush_r+0x38>
 800fd5a:	682b      	ldr	r3, [r5, #0]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d0c3      	beq.n	800fce8 <__sflush_r+0x38>
 800fd60:	2b1d      	cmp	r3, #29
 800fd62:	d001      	beq.n	800fd68 <__sflush_r+0xb8>
 800fd64:	2b16      	cmp	r3, #22
 800fd66:	d101      	bne.n	800fd6c <__sflush_r+0xbc>
 800fd68:	602e      	str	r6, [r5, #0]
 800fd6a:	e7ad      	b.n	800fcc8 <__sflush_r+0x18>
 800fd6c:	89a2      	ldrh	r2, [r4, #12]
 800fd6e:	2340      	movs	r3, #64	; 0x40
 800fd70:	4313      	orrs	r3, r2
 800fd72:	81a3      	strh	r3, [r4, #12]
 800fd74:	e7a9      	b.n	800fcca <__sflush_r+0x1a>
 800fd76:	690e      	ldr	r6, [r1, #16]
 800fd78:	2e00      	cmp	r6, #0
 800fd7a:	d0a5      	beq.n	800fcc8 <__sflush_r+0x18>
 800fd7c:	680f      	ldr	r7, [r1, #0]
 800fd7e:	600e      	str	r6, [r1, #0]
 800fd80:	1bba      	subs	r2, r7, r6
 800fd82:	9201      	str	r2, [sp, #4]
 800fd84:	2200      	movs	r2, #0
 800fd86:	079b      	lsls	r3, r3, #30
 800fd88:	d100      	bne.n	800fd8c <__sflush_r+0xdc>
 800fd8a:	694a      	ldr	r2, [r1, #20]
 800fd8c:	60a2      	str	r2, [r4, #8]
 800fd8e:	9b01      	ldr	r3, [sp, #4]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	dd99      	ble.n	800fcc8 <__sflush_r+0x18>
 800fd94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fd96:	0032      	movs	r2, r6
 800fd98:	001f      	movs	r7, r3
 800fd9a:	0028      	movs	r0, r5
 800fd9c:	9b01      	ldr	r3, [sp, #4]
 800fd9e:	6a21      	ldr	r1, [r4, #32]
 800fda0:	47b8      	blx	r7
 800fda2:	2800      	cmp	r0, #0
 800fda4:	dc06      	bgt.n	800fdb4 <__sflush_r+0x104>
 800fda6:	2340      	movs	r3, #64	; 0x40
 800fda8:	2001      	movs	r0, #1
 800fdaa:	89a2      	ldrh	r2, [r4, #12]
 800fdac:	4240      	negs	r0, r0
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	81a3      	strh	r3, [r4, #12]
 800fdb2:	e78a      	b.n	800fcca <__sflush_r+0x1a>
 800fdb4:	9b01      	ldr	r3, [sp, #4]
 800fdb6:	1836      	adds	r6, r6, r0
 800fdb8:	1a1b      	subs	r3, r3, r0
 800fdba:	9301      	str	r3, [sp, #4]
 800fdbc:	e7e7      	b.n	800fd8e <__sflush_r+0xde>
 800fdbe:	46c0      	nop			; (mov r8, r8)
 800fdc0:	dfbffffe 	.word	0xdfbffffe

0800fdc4 <_fflush_r>:
 800fdc4:	690b      	ldr	r3, [r1, #16]
 800fdc6:	b570      	push	{r4, r5, r6, lr}
 800fdc8:	0005      	movs	r5, r0
 800fdca:	000c      	movs	r4, r1
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d102      	bne.n	800fdd6 <_fflush_r+0x12>
 800fdd0:	2500      	movs	r5, #0
 800fdd2:	0028      	movs	r0, r5
 800fdd4:	bd70      	pop	{r4, r5, r6, pc}
 800fdd6:	2800      	cmp	r0, #0
 800fdd8:	d004      	beq.n	800fde4 <_fflush_r+0x20>
 800fdda:	6a03      	ldr	r3, [r0, #32]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d101      	bne.n	800fde4 <_fflush_r+0x20>
 800fde0:	f7fd fa5c 	bl	800d29c <__sinit>
 800fde4:	220c      	movs	r2, #12
 800fde6:	5ea3      	ldrsh	r3, [r4, r2]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d0f1      	beq.n	800fdd0 <_fflush_r+0xc>
 800fdec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fdee:	07d2      	lsls	r2, r2, #31
 800fdf0:	d404      	bmi.n	800fdfc <_fflush_r+0x38>
 800fdf2:	059b      	lsls	r3, r3, #22
 800fdf4:	d402      	bmi.n	800fdfc <_fflush_r+0x38>
 800fdf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdf8:	f7fd fcb7 	bl	800d76a <__retarget_lock_acquire_recursive>
 800fdfc:	0028      	movs	r0, r5
 800fdfe:	0021      	movs	r1, r4
 800fe00:	f7ff ff56 	bl	800fcb0 <__sflush_r>
 800fe04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe06:	0005      	movs	r5, r0
 800fe08:	07db      	lsls	r3, r3, #31
 800fe0a:	d4e2      	bmi.n	800fdd2 <_fflush_r+0xe>
 800fe0c:	89a3      	ldrh	r3, [r4, #12]
 800fe0e:	059b      	lsls	r3, r3, #22
 800fe10:	d4df      	bmi.n	800fdd2 <_fflush_r+0xe>
 800fe12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe14:	f7fd fcaa 	bl	800d76c <__retarget_lock_release_recursive>
 800fe18:	e7db      	b.n	800fdd2 <_fflush_r+0xe>
	...

0800fe1c <__swhatbuf_r>:
 800fe1c:	b570      	push	{r4, r5, r6, lr}
 800fe1e:	000e      	movs	r6, r1
 800fe20:	001d      	movs	r5, r3
 800fe22:	230e      	movs	r3, #14
 800fe24:	5ec9      	ldrsh	r1, [r1, r3]
 800fe26:	0014      	movs	r4, r2
 800fe28:	b096      	sub	sp, #88	; 0x58
 800fe2a:	2900      	cmp	r1, #0
 800fe2c:	da0c      	bge.n	800fe48 <__swhatbuf_r+0x2c>
 800fe2e:	89b2      	ldrh	r2, [r6, #12]
 800fe30:	2380      	movs	r3, #128	; 0x80
 800fe32:	0011      	movs	r1, r2
 800fe34:	4019      	ands	r1, r3
 800fe36:	421a      	tst	r2, r3
 800fe38:	d013      	beq.n	800fe62 <__swhatbuf_r+0x46>
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	3b40      	subs	r3, #64	; 0x40
 800fe3e:	2000      	movs	r0, #0
 800fe40:	6029      	str	r1, [r5, #0]
 800fe42:	6023      	str	r3, [r4, #0]
 800fe44:	b016      	add	sp, #88	; 0x58
 800fe46:	bd70      	pop	{r4, r5, r6, pc}
 800fe48:	466a      	mov	r2, sp
 800fe4a:	f000 f861 	bl	800ff10 <_fstat_r>
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	dbed      	blt.n	800fe2e <__swhatbuf_r+0x12>
 800fe52:	23f0      	movs	r3, #240	; 0xf0
 800fe54:	9901      	ldr	r1, [sp, #4]
 800fe56:	021b      	lsls	r3, r3, #8
 800fe58:	4019      	ands	r1, r3
 800fe5a:	4b03      	ldr	r3, [pc, #12]	; (800fe68 <__swhatbuf_r+0x4c>)
 800fe5c:	18c9      	adds	r1, r1, r3
 800fe5e:	424b      	negs	r3, r1
 800fe60:	4159      	adcs	r1, r3
 800fe62:	2380      	movs	r3, #128	; 0x80
 800fe64:	00db      	lsls	r3, r3, #3
 800fe66:	e7ea      	b.n	800fe3e <__swhatbuf_r+0x22>
 800fe68:	ffffe000 	.word	0xffffe000

0800fe6c <__smakebuf_r>:
 800fe6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe6e:	2602      	movs	r6, #2
 800fe70:	898b      	ldrh	r3, [r1, #12]
 800fe72:	0005      	movs	r5, r0
 800fe74:	000c      	movs	r4, r1
 800fe76:	4233      	tst	r3, r6
 800fe78:	d006      	beq.n	800fe88 <__smakebuf_r+0x1c>
 800fe7a:	0023      	movs	r3, r4
 800fe7c:	3347      	adds	r3, #71	; 0x47
 800fe7e:	6023      	str	r3, [r4, #0]
 800fe80:	6123      	str	r3, [r4, #16]
 800fe82:	2301      	movs	r3, #1
 800fe84:	6163      	str	r3, [r4, #20]
 800fe86:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800fe88:	466a      	mov	r2, sp
 800fe8a:	ab01      	add	r3, sp, #4
 800fe8c:	f7ff ffc6 	bl	800fe1c <__swhatbuf_r>
 800fe90:	9900      	ldr	r1, [sp, #0]
 800fe92:	0007      	movs	r7, r0
 800fe94:	0028      	movs	r0, r5
 800fe96:	f7fe fef9 	bl	800ec8c <_malloc_r>
 800fe9a:	2800      	cmp	r0, #0
 800fe9c:	d108      	bne.n	800feb0 <__smakebuf_r+0x44>
 800fe9e:	220c      	movs	r2, #12
 800fea0:	5ea3      	ldrsh	r3, [r4, r2]
 800fea2:	059a      	lsls	r2, r3, #22
 800fea4:	d4ef      	bmi.n	800fe86 <__smakebuf_r+0x1a>
 800fea6:	2203      	movs	r2, #3
 800fea8:	4393      	bics	r3, r2
 800feaa:	431e      	orrs	r6, r3
 800feac:	81a6      	strh	r6, [r4, #12]
 800feae:	e7e4      	b.n	800fe7a <__smakebuf_r+0xe>
 800feb0:	2380      	movs	r3, #128	; 0x80
 800feb2:	89a2      	ldrh	r2, [r4, #12]
 800feb4:	6020      	str	r0, [r4, #0]
 800feb6:	4313      	orrs	r3, r2
 800feb8:	81a3      	strh	r3, [r4, #12]
 800feba:	9b00      	ldr	r3, [sp, #0]
 800febc:	6120      	str	r0, [r4, #16]
 800febe:	6163      	str	r3, [r4, #20]
 800fec0:	9b01      	ldr	r3, [sp, #4]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d00c      	beq.n	800fee0 <__smakebuf_r+0x74>
 800fec6:	0028      	movs	r0, r5
 800fec8:	230e      	movs	r3, #14
 800feca:	5ee1      	ldrsh	r1, [r4, r3]
 800fecc:	f000 f832 	bl	800ff34 <_isatty_r>
 800fed0:	2800      	cmp	r0, #0
 800fed2:	d005      	beq.n	800fee0 <__smakebuf_r+0x74>
 800fed4:	2303      	movs	r3, #3
 800fed6:	89a2      	ldrh	r2, [r4, #12]
 800fed8:	439a      	bics	r2, r3
 800feda:	3b02      	subs	r3, #2
 800fedc:	4313      	orrs	r3, r2
 800fede:	81a3      	strh	r3, [r4, #12]
 800fee0:	89a3      	ldrh	r3, [r4, #12]
 800fee2:	433b      	orrs	r3, r7
 800fee4:	81a3      	strh	r3, [r4, #12]
 800fee6:	e7ce      	b.n	800fe86 <__smakebuf_r+0x1a>

0800fee8 <memmove>:
 800fee8:	b510      	push	{r4, lr}
 800feea:	4288      	cmp	r0, r1
 800feec:	d902      	bls.n	800fef4 <memmove+0xc>
 800feee:	188b      	adds	r3, r1, r2
 800fef0:	4298      	cmp	r0, r3
 800fef2:	d303      	bcc.n	800fefc <memmove+0x14>
 800fef4:	2300      	movs	r3, #0
 800fef6:	e007      	b.n	800ff08 <memmove+0x20>
 800fef8:	5c8b      	ldrb	r3, [r1, r2]
 800fefa:	5483      	strb	r3, [r0, r2]
 800fefc:	3a01      	subs	r2, #1
 800fefe:	d2fb      	bcs.n	800fef8 <memmove+0x10>
 800ff00:	bd10      	pop	{r4, pc}
 800ff02:	5ccc      	ldrb	r4, [r1, r3]
 800ff04:	54c4      	strb	r4, [r0, r3]
 800ff06:	3301      	adds	r3, #1
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d1fa      	bne.n	800ff02 <memmove+0x1a>
 800ff0c:	e7f8      	b.n	800ff00 <memmove+0x18>
	...

0800ff10 <_fstat_r>:
 800ff10:	2300      	movs	r3, #0
 800ff12:	b570      	push	{r4, r5, r6, lr}
 800ff14:	4d06      	ldr	r5, [pc, #24]	; (800ff30 <_fstat_r+0x20>)
 800ff16:	0004      	movs	r4, r0
 800ff18:	0008      	movs	r0, r1
 800ff1a:	0011      	movs	r1, r2
 800ff1c:	602b      	str	r3, [r5, #0]
 800ff1e:	f7f5 ff36 	bl	8005d8e <_fstat>
 800ff22:	1c43      	adds	r3, r0, #1
 800ff24:	d103      	bne.n	800ff2e <_fstat_r+0x1e>
 800ff26:	682b      	ldr	r3, [r5, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d000      	beq.n	800ff2e <_fstat_r+0x1e>
 800ff2c:	6023      	str	r3, [r4, #0]
 800ff2e:	bd70      	pop	{r4, r5, r6, pc}
 800ff30:	20000c64 	.word	0x20000c64

0800ff34 <_isatty_r>:
 800ff34:	2300      	movs	r3, #0
 800ff36:	b570      	push	{r4, r5, r6, lr}
 800ff38:	4d06      	ldr	r5, [pc, #24]	; (800ff54 <_isatty_r+0x20>)
 800ff3a:	0004      	movs	r4, r0
 800ff3c:	0008      	movs	r0, r1
 800ff3e:	602b      	str	r3, [r5, #0]
 800ff40:	f7f5 ff33 	bl	8005daa <_isatty>
 800ff44:	1c43      	adds	r3, r0, #1
 800ff46:	d103      	bne.n	800ff50 <_isatty_r+0x1c>
 800ff48:	682b      	ldr	r3, [r5, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d000      	beq.n	800ff50 <_isatty_r+0x1c>
 800ff4e:	6023      	str	r3, [r4, #0]
 800ff50:	bd70      	pop	{r4, r5, r6, pc}
 800ff52:	46c0      	nop			; (mov r8, r8)
 800ff54:	20000c64 	.word	0x20000c64

0800ff58 <_sbrk_r>:
 800ff58:	2300      	movs	r3, #0
 800ff5a:	b570      	push	{r4, r5, r6, lr}
 800ff5c:	4d06      	ldr	r5, [pc, #24]	; (800ff78 <_sbrk_r+0x20>)
 800ff5e:	0004      	movs	r4, r0
 800ff60:	0008      	movs	r0, r1
 800ff62:	602b      	str	r3, [r5, #0]
 800ff64:	f7f5 ff36 	bl	8005dd4 <_sbrk>
 800ff68:	1c43      	adds	r3, r0, #1
 800ff6a:	d103      	bne.n	800ff74 <_sbrk_r+0x1c>
 800ff6c:	682b      	ldr	r3, [r5, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d000      	beq.n	800ff74 <_sbrk_r+0x1c>
 800ff72:	6023      	str	r3, [r4, #0]
 800ff74:	bd70      	pop	{r4, r5, r6, pc}
 800ff76:	46c0      	nop			; (mov r8, r8)
 800ff78:	20000c64 	.word	0x20000c64

0800ff7c <__assert_func>:
 800ff7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ff7e:	0014      	movs	r4, r2
 800ff80:	001a      	movs	r2, r3
 800ff82:	4b09      	ldr	r3, [pc, #36]	; (800ffa8 <__assert_func+0x2c>)
 800ff84:	0005      	movs	r5, r0
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	000e      	movs	r6, r1
 800ff8a:	68d8      	ldr	r0, [r3, #12]
 800ff8c:	4b07      	ldr	r3, [pc, #28]	; (800ffac <__assert_func+0x30>)
 800ff8e:	2c00      	cmp	r4, #0
 800ff90:	d101      	bne.n	800ff96 <__assert_func+0x1a>
 800ff92:	4b07      	ldr	r3, [pc, #28]	; (800ffb0 <__assert_func+0x34>)
 800ff94:	001c      	movs	r4, r3
 800ff96:	4907      	ldr	r1, [pc, #28]	; (800ffb4 <__assert_func+0x38>)
 800ff98:	9301      	str	r3, [sp, #4]
 800ff9a:	9402      	str	r4, [sp, #8]
 800ff9c:	002b      	movs	r3, r5
 800ff9e:	9600      	str	r6, [sp, #0]
 800ffa0:	f000 f866 	bl	8010070 <fiprintf>
 800ffa4:	f000 f874 	bl	8010090 <abort>
 800ffa8:	200001d0 	.word	0x200001d0
 800ffac:	0801091d 	.word	0x0801091d
 800ffb0:	08010958 	.word	0x08010958
 800ffb4:	0801092a 	.word	0x0801092a

0800ffb8 <_calloc_r>:
 800ffb8:	b570      	push	{r4, r5, r6, lr}
 800ffba:	0c0b      	lsrs	r3, r1, #16
 800ffbc:	0c15      	lsrs	r5, r2, #16
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d11e      	bne.n	8010000 <_calloc_r+0x48>
 800ffc2:	2d00      	cmp	r5, #0
 800ffc4:	d10c      	bne.n	800ffe0 <_calloc_r+0x28>
 800ffc6:	b289      	uxth	r1, r1
 800ffc8:	b294      	uxth	r4, r2
 800ffca:	434c      	muls	r4, r1
 800ffcc:	0021      	movs	r1, r4
 800ffce:	f7fe fe5d 	bl	800ec8c <_malloc_r>
 800ffd2:	1e05      	subs	r5, r0, #0
 800ffd4:	d01b      	beq.n	801000e <_calloc_r+0x56>
 800ffd6:	0022      	movs	r2, r4
 800ffd8:	2100      	movs	r1, #0
 800ffda:	f7fd fb15 	bl	800d608 <memset>
 800ffde:	e016      	b.n	801000e <_calloc_r+0x56>
 800ffe0:	1c2b      	adds	r3, r5, #0
 800ffe2:	1c0c      	adds	r4, r1, #0
 800ffe4:	b289      	uxth	r1, r1
 800ffe6:	b292      	uxth	r2, r2
 800ffe8:	434a      	muls	r2, r1
 800ffea:	b2a1      	uxth	r1, r4
 800ffec:	b29c      	uxth	r4, r3
 800ffee:	434c      	muls	r4, r1
 800fff0:	0c13      	lsrs	r3, r2, #16
 800fff2:	18e4      	adds	r4, r4, r3
 800fff4:	0c23      	lsrs	r3, r4, #16
 800fff6:	d107      	bne.n	8010008 <_calloc_r+0x50>
 800fff8:	0424      	lsls	r4, r4, #16
 800fffa:	b292      	uxth	r2, r2
 800fffc:	4314      	orrs	r4, r2
 800fffe:	e7e5      	b.n	800ffcc <_calloc_r+0x14>
 8010000:	2d00      	cmp	r5, #0
 8010002:	d101      	bne.n	8010008 <_calloc_r+0x50>
 8010004:	1c14      	adds	r4, r2, #0
 8010006:	e7ed      	b.n	800ffe4 <_calloc_r+0x2c>
 8010008:	230c      	movs	r3, #12
 801000a:	2500      	movs	r5, #0
 801000c:	6003      	str	r3, [r0, #0]
 801000e:	0028      	movs	r0, r5
 8010010:	bd70      	pop	{r4, r5, r6, pc}

08010012 <_realloc_r>:
 8010012:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010014:	0007      	movs	r7, r0
 8010016:	000e      	movs	r6, r1
 8010018:	0014      	movs	r4, r2
 801001a:	2900      	cmp	r1, #0
 801001c:	d105      	bne.n	801002a <_realloc_r+0x18>
 801001e:	0011      	movs	r1, r2
 8010020:	f7fe fe34 	bl	800ec8c <_malloc_r>
 8010024:	0005      	movs	r5, r0
 8010026:	0028      	movs	r0, r5
 8010028:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801002a:	2a00      	cmp	r2, #0
 801002c:	d103      	bne.n	8010036 <_realloc_r+0x24>
 801002e:	f7fe fa5b 	bl	800e4e8 <_free_r>
 8010032:	0025      	movs	r5, r4
 8010034:	e7f7      	b.n	8010026 <_realloc_r+0x14>
 8010036:	f000 f832 	bl	801009e <_malloc_usable_size_r>
 801003a:	9001      	str	r0, [sp, #4]
 801003c:	4284      	cmp	r4, r0
 801003e:	d803      	bhi.n	8010048 <_realloc_r+0x36>
 8010040:	0035      	movs	r5, r6
 8010042:	0843      	lsrs	r3, r0, #1
 8010044:	42a3      	cmp	r3, r4
 8010046:	d3ee      	bcc.n	8010026 <_realloc_r+0x14>
 8010048:	0021      	movs	r1, r4
 801004a:	0038      	movs	r0, r7
 801004c:	f7fe fe1e 	bl	800ec8c <_malloc_r>
 8010050:	1e05      	subs	r5, r0, #0
 8010052:	d0e8      	beq.n	8010026 <_realloc_r+0x14>
 8010054:	9b01      	ldr	r3, [sp, #4]
 8010056:	0022      	movs	r2, r4
 8010058:	429c      	cmp	r4, r3
 801005a:	d900      	bls.n	801005e <_realloc_r+0x4c>
 801005c:	001a      	movs	r2, r3
 801005e:	0031      	movs	r1, r6
 8010060:	0028      	movs	r0, r5
 8010062:	f7fd fb8f 	bl	800d784 <memcpy>
 8010066:	0031      	movs	r1, r6
 8010068:	0038      	movs	r0, r7
 801006a:	f7fe fa3d 	bl	800e4e8 <_free_r>
 801006e:	e7da      	b.n	8010026 <_realloc_r+0x14>

08010070 <fiprintf>:
 8010070:	b40e      	push	{r1, r2, r3}
 8010072:	b517      	push	{r0, r1, r2, r4, lr}
 8010074:	4c05      	ldr	r4, [pc, #20]	; (801008c <fiprintf+0x1c>)
 8010076:	ab05      	add	r3, sp, #20
 8010078:	cb04      	ldmia	r3!, {r2}
 801007a:	0001      	movs	r1, r0
 801007c:	6820      	ldr	r0, [r4, #0]
 801007e:	9301      	str	r3, [sp, #4]
 8010080:	f7ff fcfa 	bl	800fa78 <_vfiprintf_r>
 8010084:	bc1e      	pop	{r1, r2, r3, r4}
 8010086:	bc08      	pop	{r3}
 8010088:	b003      	add	sp, #12
 801008a:	4718      	bx	r3
 801008c:	200001d0 	.word	0x200001d0

08010090 <abort>:
 8010090:	2006      	movs	r0, #6
 8010092:	b510      	push	{r4, lr}
 8010094:	f000 f836 	bl	8010104 <raise>
 8010098:	2001      	movs	r0, #1
 801009a:	f7f5 fe29 	bl	8005cf0 <_exit>

0801009e <_malloc_usable_size_r>:
 801009e:	1f0b      	subs	r3, r1, #4
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	1f18      	subs	r0, r3, #4
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	da01      	bge.n	80100ac <_malloc_usable_size_r+0xe>
 80100a8:	580b      	ldr	r3, [r1, r0]
 80100aa:	18c0      	adds	r0, r0, r3
 80100ac:	4770      	bx	lr

080100ae <_raise_r>:
 80100ae:	b570      	push	{r4, r5, r6, lr}
 80100b0:	0004      	movs	r4, r0
 80100b2:	000d      	movs	r5, r1
 80100b4:	291f      	cmp	r1, #31
 80100b6:	d904      	bls.n	80100c2 <_raise_r+0x14>
 80100b8:	2316      	movs	r3, #22
 80100ba:	6003      	str	r3, [r0, #0]
 80100bc:	2001      	movs	r0, #1
 80100be:	4240      	negs	r0, r0
 80100c0:	bd70      	pop	{r4, r5, r6, pc}
 80100c2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d004      	beq.n	80100d2 <_raise_r+0x24>
 80100c8:	008a      	lsls	r2, r1, #2
 80100ca:	189b      	adds	r3, r3, r2
 80100cc:	681a      	ldr	r2, [r3, #0]
 80100ce:	2a00      	cmp	r2, #0
 80100d0:	d108      	bne.n	80100e4 <_raise_r+0x36>
 80100d2:	0020      	movs	r0, r4
 80100d4:	f000 f832 	bl	801013c <_getpid_r>
 80100d8:	002a      	movs	r2, r5
 80100da:	0001      	movs	r1, r0
 80100dc:	0020      	movs	r0, r4
 80100de:	f000 f81b 	bl	8010118 <_kill_r>
 80100e2:	e7ed      	b.n	80100c0 <_raise_r+0x12>
 80100e4:	2000      	movs	r0, #0
 80100e6:	2a01      	cmp	r2, #1
 80100e8:	d0ea      	beq.n	80100c0 <_raise_r+0x12>
 80100ea:	1c51      	adds	r1, r2, #1
 80100ec:	d103      	bne.n	80100f6 <_raise_r+0x48>
 80100ee:	2316      	movs	r3, #22
 80100f0:	3001      	adds	r0, #1
 80100f2:	6023      	str	r3, [r4, #0]
 80100f4:	e7e4      	b.n	80100c0 <_raise_r+0x12>
 80100f6:	2400      	movs	r4, #0
 80100f8:	0028      	movs	r0, r5
 80100fa:	601c      	str	r4, [r3, #0]
 80100fc:	4790      	blx	r2
 80100fe:	0020      	movs	r0, r4
 8010100:	e7de      	b.n	80100c0 <_raise_r+0x12>
	...

08010104 <raise>:
 8010104:	b510      	push	{r4, lr}
 8010106:	4b03      	ldr	r3, [pc, #12]	; (8010114 <raise+0x10>)
 8010108:	0001      	movs	r1, r0
 801010a:	6818      	ldr	r0, [r3, #0]
 801010c:	f7ff ffcf 	bl	80100ae <_raise_r>
 8010110:	bd10      	pop	{r4, pc}
 8010112:	46c0      	nop			; (mov r8, r8)
 8010114:	200001d0 	.word	0x200001d0

08010118 <_kill_r>:
 8010118:	2300      	movs	r3, #0
 801011a:	b570      	push	{r4, r5, r6, lr}
 801011c:	4d06      	ldr	r5, [pc, #24]	; (8010138 <_kill_r+0x20>)
 801011e:	0004      	movs	r4, r0
 8010120:	0008      	movs	r0, r1
 8010122:	0011      	movs	r1, r2
 8010124:	602b      	str	r3, [r5, #0]
 8010126:	f7f5 fdd3 	bl	8005cd0 <_kill>
 801012a:	1c43      	adds	r3, r0, #1
 801012c:	d103      	bne.n	8010136 <_kill_r+0x1e>
 801012e:	682b      	ldr	r3, [r5, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d000      	beq.n	8010136 <_kill_r+0x1e>
 8010134:	6023      	str	r3, [r4, #0]
 8010136:	bd70      	pop	{r4, r5, r6, pc}
 8010138:	20000c64 	.word	0x20000c64

0801013c <_getpid_r>:
 801013c:	b510      	push	{r4, lr}
 801013e:	f7f5 fdc1 	bl	8005cc4 <_getpid>
 8010142:	bd10      	pop	{r4, pc}

08010144 <_init>:
 8010144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010146:	46c0      	nop			; (mov r8, r8)
 8010148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801014a:	bc08      	pop	{r3}
 801014c:	469e      	mov	lr, r3
 801014e:	4770      	bx	lr

08010150 <_fini>:
 8010150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010152:	46c0      	nop			; (mov r8, r8)
 8010154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010156:	bc08      	pop	{r3}
 8010158:	469e      	mov	lr, r3
 801015a:	4770      	bx	lr
