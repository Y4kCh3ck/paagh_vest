
sensory_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08008480  08008480  00018480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008630  08008630  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008630  08008630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008638  08008638  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008638  08008638  00018638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800863c  0800863c  0001863c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000068  080086a8  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  080086a8  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001734d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d3a  00000000  00000000  00037420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  0003b160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a1  00000000  00000000  0003c6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169f4  00000000  00000000  0003d779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c369  00000000  00000000  0005416d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081c85  00000000  00000000  000704d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005540  00000000  00000000  000f215c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f769c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008468 	.word	0x08008468

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08008468 	.word	0x08008468

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 fd28 	bl	8000d44 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 fd23 	bl	8000d44 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__aeabi_fdiv>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	464f      	mov	r7, r9
 800046c:	4646      	mov	r6, r8
 800046e:	46d6      	mov	lr, sl
 8000470:	0245      	lsls	r5, r0, #9
 8000472:	b5c0      	push	{r6, r7, lr}
 8000474:	0047      	lsls	r7, r0, #1
 8000476:	1c0c      	adds	r4, r1, #0
 8000478:	0a6d      	lsrs	r5, r5, #9
 800047a:	0e3f      	lsrs	r7, r7, #24
 800047c:	0fc6      	lsrs	r6, r0, #31
 800047e:	2f00      	cmp	r7, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_fdiv+0x1c>
 8000482:	e06f      	b.n	8000564 <__aeabi_fdiv+0xfc>
 8000484:	2fff      	cmp	r7, #255	; 0xff
 8000486:	d100      	bne.n	800048a <__aeabi_fdiv+0x22>
 8000488:	e074      	b.n	8000574 <__aeabi_fdiv+0x10c>
 800048a:	2300      	movs	r3, #0
 800048c:	2280      	movs	r2, #128	; 0x80
 800048e:	4699      	mov	r9, r3
 8000490:	469a      	mov	sl, r3
 8000492:	00ed      	lsls	r5, r5, #3
 8000494:	04d2      	lsls	r2, r2, #19
 8000496:	4315      	orrs	r5, r2
 8000498:	3f7f      	subs	r7, #127	; 0x7f
 800049a:	0263      	lsls	r3, r4, #9
 800049c:	0a5b      	lsrs	r3, r3, #9
 800049e:	4698      	mov	r8, r3
 80004a0:	0063      	lsls	r3, r4, #1
 80004a2:	0e1b      	lsrs	r3, r3, #24
 80004a4:	0fe4      	lsrs	r4, r4, #31
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d04d      	beq.n	8000546 <__aeabi_fdiv+0xde>
 80004aa:	2bff      	cmp	r3, #255	; 0xff
 80004ac:	d045      	beq.n	800053a <__aeabi_fdiv+0xd2>
 80004ae:	4642      	mov	r2, r8
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	00d2      	lsls	r2, r2, #3
 80004b4:	04c9      	lsls	r1, r1, #19
 80004b6:	4311      	orrs	r1, r2
 80004b8:	4688      	mov	r8, r1
 80004ba:	2200      	movs	r2, #0
 80004bc:	3b7f      	subs	r3, #127	; 0x7f
 80004be:	0031      	movs	r1, r6
 80004c0:	1aff      	subs	r7, r7, r3
 80004c2:	464b      	mov	r3, r9
 80004c4:	4061      	eors	r1, r4
 80004c6:	b2c9      	uxtb	r1, r1
 80004c8:	2b0f      	cmp	r3, #15
 80004ca:	d900      	bls.n	80004ce <__aeabi_fdiv+0x66>
 80004cc:	e0b8      	b.n	8000640 <__aeabi_fdiv+0x1d8>
 80004ce:	4870      	ldr	r0, [pc, #448]	; (8000690 <__aeabi_fdiv+0x228>)
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	58c3      	ldr	r3, [r0, r3]
 80004d4:	469f      	mov	pc, r3
 80004d6:	2300      	movs	r3, #0
 80004d8:	4698      	mov	r8, r3
 80004da:	0026      	movs	r6, r4
 80004dc:	4645      	mov	r5, r8
 80004de:	4692      	mov	sl, r2
 80004e0:	4653      	mov	r3, sl
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	d100      	bne.n	80004e8 <__aeabi_fdiv+0x80>
 80004e6:	e08d      	b.n	8000604 <__aeabi_fdiv+0x19c>
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d100      	bne.n	80004ee <__aeabi_fdiv+0x86>
 80004ec:	e0a1      	b.n	8000632 <__aeabi_fdiv+0x1ca>
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d018      	beq.n	8000524 <__aeabi_fdiv+0xbc>
 80004f2:	003b      	movs	r3, r7
 80004f4:	337f      	adds	r3, #127	; 0x7f
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	dd6d      	ble.n	80005d6 <__aeabi_fdiv+0x16e>
 80004fa:	076a      	lsls	r2, r5, #29
 80004fc:	d004      	beq.n	8000508 <__aeabi_fdiv+0xa0>
 80004fe:	220f      	movs	r2, #15
 8000500:	402a      	ands	r2, r5
 8000502:	2a04      	cmp	r2, #4
 8000504:	d000      	beq.n	8000508 <__aeabi_fdiv+0xa0>
 8000506:	3504      	adds	r5, #4
 8000508:	012a      	lsls	r2, r5, #4
 800050a:	d503      	bpl.n	8000514 <__aeabi_fdiv+0xac>
 800050c:	4b61      	ldr	r3, [pc, #388]	; (8000694 <__aeabi_fdiv+0x22c>)
 800050e:	401d      	ands	r5, r3
 8000510:	003b      	movs	r3, r7
 8000512:	3380      	adds	r3, #128	; 0x80
 8000514:	2bfe      	cmp	r3, #254	; 0xfe
 8000516:	dd00      	ble.n	800051a <__aeabi_fdiv+0xb2>
 8000518:	e074      	b.n	8000604 <__aeabi_fdiv+0x19c>
 800051a:	01aa      	lsls	r2, r5, #6
 800051c:	0a52      	lsrs	r2, r2, #9
 800051e:	b2d8      	uxtb	r0, r3
 8000520:	e002      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000522:	000e      	movs	r6, r1
 8000524:	2000      	movs	r0, #0
 8000526:	2200      	movs	r2, #0
 8000528:	05c0      	lsls	r0, r0, #23
 800052a:	07f6      	lsls	r6, r6, #31
 800052c:	4310      	orrs	r0, r2
 800052e:	4330      	orrs	r0, r6
 8000530:	bce0      	pop	{r5, r6, r7}
 8000532:	46ba      	mov	sl, r7
 8000534:	46b1      	mov	r9, r6
 8000536:	46a8      	mov	r8, r5
 8000538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053a:	4643      	mov	r3, r8
 800053c:	2b00      	cmp	r3, #0
 800053e:	d13f      	bne.n	80005c0 <__aeabi_fdiv+0x158>
 8000540:	2202      	movs	r2, #2
 8000542:	3fff      	subs	r7, #255	; 0xff
 8000544:	e003      	b.n	800054e <__aeabi_fdiv+0xe6>
 8000546:	4643      	mov	r3, r8
 8000548:	2b00      	cmp	r3, #0
 800054a:	d12d      	bne.n	80005a8 <__aeabi_fdiv+0x140>
 800054c:	2201      	movs	r2, #1
 800054e:	0031      	movs	r1, r6
 8000550:	464b      	mov	r3, r9
 8000552:	4061      	eors	r1, r4
 8000554:	b2c9      	uxtb	r1, r1
 8000556:	4313      	orrs	r3, r2
 8000558:	2b0f      	cmp	r3, #15
 800055a:	d838      	bhi.n	80005ce <__aeabi_fdiv+0x166>
 800055c:	484e      	ldr	r0, [pc, #312]	; (8000698 <__aeabi_fdiv+0x230>)
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	58c3      	ldr	r3, [r0, r3]
 8000562:	469f      	mov	pc, r3
 8000564:	2d00      	cmp	r5, #0
 8000566:	d113      	bne.n	8000590 <__aeabi_fdiv+0x128>
 8000568:	2304      	movs	r3, #4
 800056a:	4699      	mov	r9, r3
 800056c:	3b03      	subs	r3, #3
 800056e:	2700      	movs	r7, #0
 8000570:	469a      	mov	sl, r3
 8000572:	e792      	b.n	800049a <__aeabi_fdiv+0x32>
 8000574:	2d00      	cmp	r5, #0
 8000576:	d105      	bne.n	8000584 <__aeabi_fdiv+0x11c>
 8000578:	2308      	movs	r3, #8
 800057a:	4699      	mov	r9, r3
 800057c:	3b06      	subs	r3, #6
 800057e:	27ff      	movs	r7, #255	; 0xff
 8000580:	469a      	mov	sl, r3
 8000582:	e78a      	b.n	800049a <__aeabi_fdiv+0x32>
 8000584:	230c      	movs	r3, #12
 8000586:	4699      	mov	r9, r3
 8000588:	3b09      	subs	r3, #9
 800058a:	27ff      	movs	r7, #255	; 0xff
 800058c:	469a      	mov	sl, r3
 800058e:	e784      	b.n	800049a <__aeabi_fdiv+0x32>
 8000590:	0028      	movs	r0, r5
 8000592:	f000 fbb9 	bl	8000d08 <__clzsi2>
 8000596:	2776      	movs	r7, #118	; 0x76
 8000598:	1f43      	subs	r3, r0, #5
 800059a:	409d      	lsls	r5, r3
 800059c:	2300      	movs	r3, #0
 800059e:	427f      	negs	r7, r7
 80005a0:	4699      	mov	r9, r3
 80005a2:	469a      	mov	sl, r3
 80005a4:	1a3f      	subs	r7, r7, r0
 80005a6:	e778      	b.n	800049a <__aeabi_fdiv+0x32>
 80005a8:	4640      	mov	r0, r8
 80005aa:	f000 fbad 	bl	8000d08 <__clzsi2>
 80005ae:	4642      	mov	r2, r8
 80005b0:	1f43      	subs	r3, r0, #5
 80005b2:	409a      	lsls	r2, r3
 80005b4:	2376      	movs	r3, #118	; 0x76
 80005b6:	425b      	negs	r3, r3
 80005b8:	4690      	mov	r8, r2
 80005ba:	1a1b      	subs	r3, r3, r0
 80005bc:	2200      	movs	r2, #0
 80005be:	e77e      	b.n	80004be <__aeabi_fdiv+0x56>
 80005c0:	2303      	movs	r3, #3
 80005c2:	464a      	mov	r2, r9
 80005c4:	431a      	orrs	r2, r3
 80005c6:	4691      	mov	r9, r2
 80005c8:	33fc      	adds	r3, #252	; 0xfc
 80005ca:	2203      	movs	r2, #3
 80005cc:	e777      	b.n	80004be <__aeabi_fdiv+0x56>
 80005ce:	000e      	movs	r6, r1
 80005d0:	20ff      	movs	r0, #255	; 0xff
 80005d2:	2200      	movs	r2, #0
 80005d4:	e7a8      	b.n	8000528 <__aeabi_fdiv+0xc0>
 80005d6:	2201      	movs	r2, #1
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	2b1b      	cmp	r3, #27
 80005dc:	dca2      	bgt.n	8000524 <__aeabi_fdiv+0xbc>
 80005de:	379e      	adds	r7, #158	; 0x9e
 80005e0:	002a      	movs	r2, r5
 80005e2:	40bd      	lsls	r5, r7
 80005e4:	40da      	lsrs	r2, r3
 80005e6:	1e6b      	subs	r3, r5, #1
 80005e8:	419d      	sbcs	r5, r3
 80005ea:	4315      	orrs	r5, r2
 80005ec:	076a      	lsls	r2, r5, #29
 80005ee:	d004      	beq.n	80005fa <__aeabi_fdiv+0x192>
 80005f0:	220f      	movs	r2, #15
 80005f2:	402a      	ands	r2, r5
 80005f4:	2a04      	cmp	r2, #4
 80005f6:	d000      	beq.n	80005fa <__aeabi_fdiv+0x192>
 80005f8:	3504      	adds	r5, #4
 80005fa:	016a      	lsls	r2, r5, #5
 80005fc:	d544      	bpl.n	8000688 <__aeabi_fdiv+0x220>
 80005fe:	2001      	movs	r0, #1
 8000600:	2200      	movs	r2, #0
 8000602:	e791      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000604:	20ff      	movs	r0, #255	; 0xff
 8000606:	2200      	movs	r2, #0
 8000608:	e78e      	b.n	8000528 <__aeabi_fdiv+0xc0>
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	2600      	movs	r6, #0
 800060e:	20ff      	movs	r0, #255	; 0xff
 8000610:	03d2      	lsls	r2, r2, #15
 8000612:	e789      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000614:	2300      	movs	r3, #0
 8000616:	4698      	mov	r8, r3
 8000618:	2280      	movs	r2, #128	; 0x80
 800061a:	03d2      	lsls	r2, r2, #15
 800061c:	4215      	tst	r5, r2
 800061e:	d008      	beq.n	8000632 <__aeabi_fdiv+0x1ca>
 8000620:	4643      	mov	r3, r8
 8000622:	4213      	tst	r3, r2
 8000624:	d105      	bne.n	8000632 <__aeabi_fdiv+0x1ca>
 8000626:	431a      	orrs	r2, r3
 8000628:	0252      	lsls	r2, r2, #9
 800062a:	0026      	movs	r6, r4
 800062c:	20ff      	movs	r0, #255	; 0xff
 800062e:	0a52      	lsrs	r2, r2, #9
 8000630:	e77a      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	03d2      	lsls	r2, r2, #15
 8000636:	432a      	orrs	r2, r5
 8000638:	0252      	lsls	r2, r2, #9
 800063a:	20ff      	movs	r0, #255	; 0xff
 800063c:	0a52      	lsrs	r2, r2, #9
 800063e:	e773      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000640:	4642      	mov	r2, r8
 8000642:	016b      	lsls	r3, r5, #5
 8000644:	0155      	lsls	r5, r2, #5
 8000646:	42ab      	cmp	r3, r5
 8000648:	d21a      	bcs.n	8000680 <__aeabi_fdiv+0x218>
 800064a:	201b      	movs	r0, #27
 800064c:	2200      	movs	r2, #0
 800064e:	3f01      	subs	r7, #1
 8000650:	2601      	movs	r6, #1
 8000652:	001c      	movs	r4, r3
 8000654:	0052      	lsls	r2, r2, #1
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	2c00      	cmp	r4, #0
 800065a:	db01      	blt.n	8000660 <__aeabi_fdiv+0x1f8>
 800065c:	429d      	cmp	r5, r3
 800065e:	d801      	bhi.n	8000664 <__aeabi_fdiv+0x1fc>
 8000660:	1b5b      	subs	r3, r3, r5
 8000662:	4332      	orrs	r2, r6
 8000664:	3801      	subs	r0, #1
 8000666:	2800      	cmp	r0, #0
 8000668:	d1f3      	bne.n	8000652 <__aeabi_fdiv+0x1ea>
 800066a:	1e58      	subs	r0, r3, #1
 800066c:	4183      	sbcs	r3, r0
 800066e:	4313      	orrs	r3, r2
 8000670:	001d      	movs	r5, r3
 8000672:	003b      	movs	r3, r7
 8000674:	337f      	adds	r3, #127	; 0x7f
 8000676:	000e      	movs	r6, r1
 8000678:	2b00      	cmp	r3, #0
 800067a:	dd00      	ble.n	800067e <__aeabi_fdiv+0x216>
 800067c:	e73d      	b.n	80004fa <__aeabi_fdiv+0x92>
 800067e:	e7aa      	b.n	80005d6 <__aeabi_fdiv+0x16e>
 8000680:	201a      	movs	r0, #26
 8000682:	2201      	movs	r2, #1
 8000684:	1b5b      	subs	r3, r3, r5
 8000686:	e7e3      	b.n	8000650 <__aeabi_fdiv+0x1e8>
 8000688:	01aa      	lsls	r2, r5, #6
 800068a:	2000      	movs	r0, #0
 800068c:	0a52      	lsrs	r2, r2, #9
 800068e:	e74b      	b.n	8000528 <__aeabi_fdiv+0xc0>
 8000690:	08008510 	.word	0x08008510
 8000694:	f7ffffff 	.word	0xf7ffffff
 8000698:	08008550 	.word	0x08008550

0800069c <__aeabi_fmul>:
 800069c:	0243      	lsls	r3, r0, #9
 800069e:	0a5b      	lsrs	r3, r3, #9
 80006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a2:	464f      	mov	r7, r9
 80006a4:	4646      	mov	r6, r8
 80006a6:	4699      	mov	r9, r3
 80006a8:	46d6      	mov	lr, sl
 80006aa:	0fc3      	lsrs	r3, r0, #31
 80006ac:	0045      	lsls	r5, r0, #1
 80006ae:	4698      	mov	r8, r3
 80006b0:	b5c0      	push	{r6, r7, lr}
 80006b2:	464b      	mov	r3, r9
 80006b4:	1c0f      	adds	r7, r1, #0
 80006b6:	0e2d      	lsrs	r5, r5, #24
 80006b8:	d100      	bne.n	80006bc <__aeabi_fmul+0x20>
 80006ba:	e0cb      	b.n	8000854 <__aeabi_fmul+0x1b8>
 80006bc:	2dff      	cmp	r5, #255	; 0xff
 80006be:	d100      	bne.n	80006c2 <__aeabi_fmul+0x26>
 80006c0:	e0cf      	b.n	8000862 <__aeabi_fmul+0x1c6>
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	04d2      	lsls	r2, r2, #19
 80006c8:	431a      	orrs	r2, r3
 80006ca:	2300      	movs	r3, #0
 80006cc:	4691      	mov	r9, r2
 80006ce:	2600      	movs	r6, #0
 80006d0:	469a      	mov	sl, r3
 80006d2:	3d7f      	subs	r5, #127	; 0x7f
 80006d4:	027c      	lsls	r4, r7, #9
 80006d6:	007b      	lsls	r3, r7, #1
 80006d8:	0a64      	lsrs	r4, r4, #9
 80006da:	0e1b      	lsrs	r3, r3, #24
 80006dc:	0fff      	lsrs	r7, r7, #31
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fmul+0x48>
 80006e2:	e0a9      	b.n	8000838 <__aeabi_fmul+0x19c>
 80006e4:	2bff      	cmp	r3, #255	; 0xff
 80006e6:	d011      	beq.n	800070c <__aeabi_fmul+0x70>
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	00e4      	lsls	r4, r4, #3
 80006ec:	04d2      	lsls	r2, r2, #19
 80006ee:	4314      	orrs	r4, r2
 80006f0:	4642      	mov	r2, r8
 80006f2:	3b7f      	subs	r3, #127	; 0x7f
 80006f4:	195b      	adds	r3, r3, r5
 80006f6:	407a      	eors	r2, r7
 80006f8:	2000      	movs	r0, #0
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	1c5d      	adds	r5, r3, #1
 80006fe:	2e0a      	cmp	r6, #10
 8000700:	dd13      	ble.n	800072a <__aeabi_fmul+0x8e>
 8000702:	003a      	movs	r2, r7
 8000704:	2e0b      	cmp	r6, #11
 8000706:	d047      	beq.n	8000798 <__aeabi_fmul+0xfc>
 8000708:	4647      	mov	r7, r8
 800070a:	e03f      	b.n	800078c <__aeabi_fmul+0xf0>
 800070c:	002b      	movs	r3, r5
 800070e:	33ff      	adds	r3, #255	; 0xff
 8000710:	2c00      	cmp	r4, #0
 8000712:	d11e      	bne.n	8000752 <__aeabi_fmul+0xb6>
 8000714:	2202      	movs	r2, #2
 8000716:	4316      	orrs	r6, r2
 8000718:	4642      	mov	r2, r8
 800071a:	3501      	adds	r5, #1
 800071c:	407a      	eors	r2, r7
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	35ff      	adds	r5, #255	; 0xff
 8000722:	2e0a      	cmp	r6, #10
 8000724:	dd00      	ble.n	8000728 <__aeabi_fmul+0x8c>
 8000726:	e0e4      	b.n	80008f2 <__aeabi_fmul+0x256>
 8000728:	2002      	movs	r0, #2
 800072a:	2e02      	cmp	r6, #2
 800072c:	dc1c      	bgt.n	8000768 <__aeabi_fmul+0xcc>
 800072e:	3e01      	subs	r6, #1
 8000730:	2e01      	cmp	r6, #1
 8000732:	d842      	bhi.n	80007ba <__aeabi_fmul+0x11e>
 8000734:	2802      	cmp	r0, #2
 8000736:	d03d      	beq.n	80007b4 <__aeabi_fmul+0x118>
 8000738:	2801      	cmp	r0, #1
 800073a:	d166      	bne.n	800080a <__aeabi_fmul+0x16e>
 800073c:	2000      	movs	r0, #0
 800073e:	2100      	movs	r1, #0
 8000740:	05c0      	lsls	r0, r0, #23
 8000742:	4308      	orrs	r0, r1
 8000744:	07d2      	lsls	r2, r2, #31
 8000746:	4310      	orrs	r0, r2
 8000748:	bce0      	pop	{r5, r6, r7}
 800074a:	46ba      	mov	sl, r7
 800074c:	46b1      	mov	r9, r6
 800074e:	46a8      	mov	r8, r5
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	2203      	movs	r2, #3
 8000754:	4316      	orrs	r6, r2
 8000756:	4642      	mov	r2, r8
 8000758:	3501      	adds	r5, #1
 800075a:	407a      	eors	r2, r7
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	35ff      	adds	r5, #255	; 0xff
 8000760:	2e0a      	cmp	r6, #10
 8000762:	dd00      	ble.n	8000766 <__aeabi_fmul+0xca>
 8000764:	e0e4      	b.n	8000930 <__aeabi_fmul+0x294>
 8000766:	2003      	movs	r0, #3
 8000768:	2101      	movs	r1, #1
 800076a:	40b1      	lsls	r1, r6
 800076c:	26a6      	movs	r6, #166	; 0xa6
 800076e:	00f6      	lsls	r6, r6, #3
 8000770:	4231      	tst	r1, r6
 8000772:	d10a      	bne.n	800078a <__aeabi_fmul+0xee>
 8000774:	2690      	movs	r6, #144	; 0x90
 8000776:	00b6      	lsls	r6, r6, #2
 8000778:	4231      	tst	r1, r6
 800077a:	d116      	bne.n	80007aa <__aeabi_fmul+0x10e>
 800077c:	3eb9      	subs	r6, #185	; 0xb9
 800077e:	3eff      	subs	r6, #255	; 0xff
 8000780:	420e      	tst	r6, r1
 8000782:	d01a      	beq.n	80007ba <__aeabi_fmul+0x11e>
 8000784:	46a1      	mov	r9, r4
 8000786:	4682      	mov	sl, r0
 8000788:	e000      	b.n	800078c <__aeabi_fmul+0xf0>
 800078a:	0017      	movs	r7, r2
 800078c:	4653      	mov	r3, sl
 800078e:	003a      	movs	r2, r7
 8000790:	2b02      	cmp	r3, #2
 8000792:	d00f      	beq.n	80007b4 <__aeabi_fmul+0x118>
 8000794:	464c      	mov	r4, r9
 8000796:	4650      	mov	r0, sl
 8000798:	2803      	cmp	r0, #3
 800079a:	d1cd      	bne.n	8000738 <__aeabi_fmul+0x9c>
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	03c9      	lsls	r1, r1, #15
 80007a0:	4321      	orrs	r1, r4
 80007a2:	0249      	lsls	r1, r1, #9
 80007a4:	20ff      	movs	r0, #255	; 0xff
 80007a6:	0a49      	lsrs	r1, r1, #9
 80007a8:	e7ca      	b.n	8000740 <__aeabi_fmul+0xa4>
 80007aa:	2180      	movs	r1, #128	; 0x80
 80007ac:	2200      	movs	r2, #0
 80007ae:	20ff      	movs	r0, #255	; 0xff
 80007b0:	03c9      	lsls	r1, r1, #15
 80007b2:	e7c5      	b.n	8000740 <__aeabi_fmul+0xa4>
 80007b4:	20ff      	movs	r0, #255	; 0xff
 80007b6:	2100      	movs	r1, #0
 80007b8:	e7c2      	b.n	8000740 <__aeabi_fmul+0xa4>
 80007ba:	0c20      	lsrs	r0, r4, #16
 80007bc:	4649      	mov	r1, r9
 80007be:	0424      	lsls	r4, r4, #16
 80007c0:	0c24      	lsrs	r4, r4, #16
 80007c2:	0027      	movs	r7, r4
 80007c4:	0c0e      	lsrs	r6, r1, #16
 80007c6:	0409      	lsls	r1, r1, #16
 80007c8:	0c09      	lsrs	r1, r1, #16
 80007ca:	4374      	muls	r4, r6
 80007cc:	434f      	muls	r7, r1
 80007ce:	4346      	muls	r6, r0
 80007d0:	4348      	muls	r0, r1
 80007d2:	0c39      	lsrs	r1, r7, #16
 80007d4:	1900      	adds	r0, r0, r4
 80007d6:	1809      	adds	r1, r1, r0
 80007d8:	428c      	cmp	r4, r1
 80007da:	d903      	bls.n	80007e4 <__aeabi_fmul+0x148>
 80007dc:	2080      	movs	r0, #128	; 0x80
 80007de:	0240      	lsls	r0, r0, #9
 80007e0:	4684      	mov	ip, r0
 80007e2:	4466      	add	r6, ip
 80007e4:	043f      	lsls	r7, r7, #16
 80007e6:	0408      	lsls	r0, r1, #16
 80007e8:	0c3f      	lsrs	r7, r7, #16
 80007ea:	19c0      	adds	r0, r0, r7
 80007ec:	0184      	lsls	r4, r0, #6
 80007ee:	1e67      	subs	r7, r4, #1
 80007f0:	41bc      	sbcs	r4, r7
 80007f2:	0c09      	lsrs	r1, r1, #16
 80007f4:	0e80      	lsrs	r0, r0, #26
 80007f6:	1989      	adds	r1, r1, r6
 80007f8:	4304      	orrs	r4, r0
 80007fa:	0189      	lsls	r1, r1, #6
 80007fc:	430c      	orrs	r4, r1
 80007fe:	0109      	lsls	r1, r1, #4
 8000800:	d571      	bpl.n	80008e6 <__aeabi_fmul+0x24a>
 8000802:	2301      	movs	r3, #1
 8000804:	0861      	lsrs	r1, r4, #1
 8000806:	401c      	ands	r4, r3
 8000808:	430c      	orrs	r4, r1
 800080a:	002b      	movs	r3, r5
 800080c:	337f      	adds	r3, #127	; 0x7f
 800080e:	2b00      	cmp	r3, #0
 8000810:	dd51      	ble.n	80008b6 <__aeabi_fmul+0x21a>
 8000812:	0761      	lsls	r1, r4, #29
 8000814:	d004      	beq.n	8000820 <__aeabi_fmul+0x184>
 8000816:	210f      	movs	r1, #15
 8000818:	4021      	ands	r1, r4
 800081a:	2904      	cmp	r1, #4
 800081c:	d000      	beq.n	8000820 <__aeabi_fmul+0x184>
 800081e:	3404      	adds	r4, #4
 8000820:	0121      	lsls	r1, r4, #4
 8000822:	d503      	bpl.n	800082c <__aeabi_fmul+0x190>
 8000824:	4b43      	ldr	r3, [pc, #268]	; (8000934 <__aeabi_fmul+0x298>)
 8000826:	401c      	ands	r4, r3
 8000828:	002b      	movs	r3, r5
 800082a:	3380      	adds	r3, #128	; 0x80
 800082c:	2bfe      	cmp	r3, #254	; 0xfe
 800082e:	dcc1      	bgt.n	80007b4 <__aeabi_fmul+0x118>
 8000830:	01a1      	lsls	r1, r4, #6
 8000832:	0a49      	lsrs	r1, r1, #9
 8000834:	b2d8      	uxtb	r0, r3
 8000836:	e783      	b.n	8000740 <__aeabi_fmul+0xa4>
 8000838:	2c00      	cmp	r4, #0
 800083a:	d12c      	bne.n	8000896 <__aeabi_fmul+0x1fa>
 800083c:	2301      	movs	r3, #1
 800083e:	4642      	mov	r2, r8
 8000840:	431e      	orrs	r6, r3
 8000842:	002b      	movs	r3, r5
 8000844:	407a      	eors	r2, r7
 8000846:	2001      	movs	r0, #1
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	1c5d      	adds	r5, r3, #1
 800084c:	2e0a      	cmp	r6, #10
 800084e:	dd00      	ble.n	8000852 <__aeabi_fmul+0x1b6>
 8000850:	e757      	b.n	8000702 <__aeabi_fmul+0x66>
 8000852:	e76a      	b.n	800072a <__aeabi_fmul+0x8e>
 8000854:	2b00      	cmp	r3, #0
 8000856:	d110      	bne.n	800087a <__aeabi_fmul+0x1de>
 8000858:	2301      	movs	r3, #1
 800085a:	2604      	movs	r6, #4
 800085c:	2500      	movs	r5, #0
 800085e:	469a      	mov	sl, r3
 8000860:	e738      	b.n	80006d4 <__aeabi_fmul+0x38>
 8000862:	2b00      	cmp	r3, #0
 8000864:	d104      	bne.n	8000870 <__aeabi_fmul+0x1d4>
 8000866:	2302      	movs	r3, #2
 8000868:	2608      	movs	r6, #8
 800086a:	25ff      	movs	r5, #255	; 0xff
 800086c:	469a      	mov	sl, r3
 800086e:	e731      	b.n	80006d4 <__aeabi_fmul+0x38>
 8000870:	2303      	movs	r3, #3
 8000872:	260c      	movs	r6, #12
 8000874:	25ff      	movs	r5, #255	; 0xff
 8000876:	469a      	mov	sl, r3
 8000878:	e72c      	b.n	80006d4 <__aeabi_fmul+0x38>
 800087a:	4648      	mov	r0, r9
 800087c:	f000 fa44 	bl	8000d08 <__clzsi2>
 8000880:	464a      	mov	r2, r9
 8000882:	1f43      	subs	r3, r0, #5
 8000884:	2576      	movs	r5, #118	; 0x76
 8000886:	409a      	lsls	r2, r3
 8000888:	2300      	movs	r3, #0
 800088a:	426d      	negs	r5, r5
 800088c:	4691      	mov	r9, r2
 800088e:	2600      	movs	r6, #0
 8000890:	469a      	mov	sl, r3
 8000892:	1a2d      	subs	r5, r5, r0
 8000894:	e71e      	b.n	80006d4 <__aeabi_fmul+0x38>
 8000896:	0020      	movs	r0, r4
 8000898:	f000 fa36 	bl	8000d08 <__clzsi2>
 800089c:	4642      	mov	r2, r8
 800089e:	1f43      	subs	r3, r0, #5
 80008a0:	409c      	lsls	r4, r3
 80008a2:	1a2b      	subs	r3, r5, r0
 80008a4:	3b76      	subs	r3, #118	; 0x76
 80008a6:	407a      	eors	r2, r7
 80008a8:	2000      	movs	r0, #0
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	1c5d      	adds	r5, r3, #1
 80008ae:	2e0a      	cmp	r6, #10
 80008b0:	dd00      	ble.n	80008b4 <__aeabi_fmul+0x218>
 80008b2:	e726      	b.n	8000702 <__aeabi_fmul+0x66>
 80008b4:	e739      	b.n	800072a <__aeabi_fmul+0x8e>
 80008b6:	2101      	movs	r1, #1
 80008b8:	1acb      	subs	r3, r1, r3
 80008ba:	2b1b      	cmp	r3, #27
 80008bc:	dd00      	ble.n	80008c0 <__aeabi_fmul+0x224>
 80008be:	e73d      	b.n	800073c <__aeabi_fmul+0xa0>
 80008c0:	359e      	adds	r5, #158	; 0x9e
 80008c2:	0021      	movs	r1, r4
 80008c4:	40ac      	lsls	r4, r5
 80008c6:	40d9      	lsrs	r1, r3
 80008c8:	1e63      	subs	r3, r4, #1
 80008ca:	419c      	sbcs	r4, r3
 80008cc:	4321      	orrs	r1, r4
 80008ce:	074b      	lsls	r3, r1, #29
 80008d0:	d004      	beq.n	80008dc <__aeabi_fmul+0x240>
 80008d2:	230f      	movs	r3, #15
 80008d4:	400b      	ands	r3, r1
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d000      	beq.n	80008dc <__aeabi_fmul+0x240>
 80008da:	3104      	adds	r1, #4
 80008dc:	014b      	lsls	r3, r1, #5
 80008de:	d504      	bpl.n	80008ea <__aeabi_fmul+0x24e>
 80008e0:	2001      	movs	r0, #1
 80008e2:	2100      	movs	r1, #0
 80008e4:	e72c      	b.n	8000740 <__aeabi_fmul+0xa4>
 80008e6:	001d      	movs	r5, r3
 80008e8:	e78f      	b.n	800080a <__aeabi_fmul+0x16e>
 80008ea:	0189      	lsls	r1, r1, #6
 80008ec:	2000      	movs	r0, #0
 80008ee:	0a49      	lsrs	r1, r1, #9
 80008f0:	e726      	b.n	8000740 <__aeabi_fmul+0xa4>
 80008f2:	2302      	movs	r3, #2
 80008f4:	2e0f      	cmp	r6, #15
 80008f6:	d10c      	bne.n	8000912 <__aeabi_fmul+0x276>
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	464b      	mov	r3, r9
 80008fc:	03c9      	lsls	r1, r1, #15
 80008fe:	420b      	tst	r3, r1
 8000900:	d00d      	beq.n	800091e <__aeabi_fmul+0x282>
 8000902:	420c      	tst	r4, r1
 8000904:	d10b      	bne.n	800091e <__aeabi_fmul+0x282>
 8000906:	4321      	orrs	r1, r4
 8000908:	0249      	lsls	r1, r1, #9
 800090a:	003a      	movs	r2, r7
 800090c:	20ff      	movs	r0, #255	; 0xff
 800090e:	0a49      	lsrs	r1, r1, #9
 8000910:	e716      	b.n	8000740 <__aeabi_fmul+0xa4>
 8000912:	2e0b      	cmp	r6, #11
 8000914:	d000      	beq.n	8000918 <__aeabi_fmul+0x27c>
 8000916:	e6f7      	b.n	8000708 <__aeabi_fmul+0x6c>
 8000918:	46a1      	mov	r9, r4
 800091a:	469a      	mov	sl, r3
 800091c:	e736      	b.n	800078c <__aeabi_fmul+0xf0>
 800091e:	2180      	movs	r1, #128	; 0x80
 8000920:	464b      	mov	r3, r9
 8000922:	03c9      	lsls	r1, r1, #15
 8000924:	4319      	orrs	r1, r3
 8000926:	0249      	lsls	r1, r1, #9
 8000928:	4642      	mov	r2, r8
 800092a:	20ff      	movs	r0, #255	; 0xff
 800092c:	0a49      	lsrs	r1, r1, #9
 800092e:	e707      	b.n	8000740 <__aeabi_fmul+0xa4>
 8000930:	2303      	movs	r3, #3
 8000932:	e7df      	b.n	80008f4 <__aeabi_fmul+0x258>
 8000934:	f7ffffff 	.word	0xf7ffffff

08000938 <__aeabi_fsub>:
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	46c6      	mov	lr, r8
 800093c:	0243      	lsls	r3, r0, #9
 800093e:	0a5b      	lsrs	r3, r3, #9
 8000940:	0045      	lsls	r5, r0, #1
 8000942:	00da      	lsls	r2, r3, #3
 8000944:	0fc4      	lsrs	r4, r0, #31
 8000946:	0248      	lsls	r0, r1, #9
 8000948:	004f      	lsls	r7, r1, #1
 800094a:	4694      	mov	ip, r2
 800094c:	0a42      	lsrs	r2, r0, #9
 800094e:	001e      	movs	r6, r3
 8000950:	4690      	mov	r8, r2
 8000952:	b500      	push	{lr}
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0e3f      	lsrs	r7, r7, #24
 8000958:	0fc9      	lsrs	r1, r1, #31
 800095a:	0980      	lsrs	r0, r0, #6
 800095c:	2fff      	cmp	r7, #255	; 0xff
 800095e:	d059      	beq.n	8000a14 <__aeabi_fsub+0xdc>
 8000960:	2201      	movs	r2, #1
 8000962:	4051      	eors	r1, r2
 8000964:	428c      	cmp	r4, r1
 8000966:	d039      	beq.n	80009dc <__aeabi_fsub+0xa4>
 8000968:	1bea      	subs	r2, r5, r7
 800096a:	2a00      	cmp	r2, #0
 800096c:	dd58      	ble.n	8000a20 <__aeabi_fsub+0xe8>
 800096e:	2f00      	cmp	r7, #0
 8000970:	d068      	beq.n	8000a44 <__aeabi_fsub+0x10c>
 8000972:	2dff      	cmp	r5, #255	; 0xff
 8000974:	d100      	bne.n	8000978 <__aeabi_fsub+0x40>
 8000976:	e0d1      	b.n	8000b1c <__aeabi_fsub+0x1e4>
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	04db      	lsls	r3, r3, #19
 800097c:	4318      	orrs	r0, r3
 800097e:	2a1b      	cmp	r2, #27
 8000980:	dc00      	bgt.n	8000984 <__aeabi_fsub+0x4c>
 8000982:	e0e3      	b.n	8000b4c <__aeabi_fsub+0x214>
 8000984:	2301      	movs	r3, #1
 8000986:	4662      	mov	r2, ip
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	015a      	lsls	r2, r3, #5
 800098c:	d400      	bmi.n	8000990 <__aeabi_fsub+0x58>
 800098e:	e0ac      	b.n	8000aea <__aeabi_fsub+0x1b2>
 8000990:	019b      	lsls	r3, r3, #6
 8000992:	099e      	lsrs	r6, r3, #6
 8000994:	0030      	movs	r0, r6
 8000996:	f000 f9b7 	bl	8000d08 <__clzsi2>
 800099a:	0033      	movs	r3, r6
 800099c:	3805      	subs	r0, #5
 800099e:	4083      	lsls	r3, r0
 80009a0:	4285      	cmp	r5, r0
 80009a2:	dc00      	bgt.n	80009a6 <__aeabi_fsub+0x6e>
 80009a4:	e0c6      	b.n	8000b34 <__aeabi_fsub+0x1fc>
 80009a6:	4ab2      	ldr	r2, [pc, #712]	; (8000c70 <__aeabi_fsub+0x338>)
 80009a8:	1a2d      	subs	r5, r5, r0
 80009aa:	4013      	ands	r3, r2
 80009ac:	075a      	lsls	r2, r3, #29
 80009ae:	d004      	beq.n	80009ba <__aeabi_fsub+0x82>
 80009b0:	220f      	movs	r2, #15
 80009b2:	401a      	ands	r2, r3
 80009b4:	2a04      	cmp	r2, #4
 80009b6:	d000      	beq.n	80009ba <__aeabi_fsub+0x82>
 80009b8:	3304      	adds	r3, #4
 80009ba:	015a      	lsls	r2, r3, #5
 80009bc:	d400      	bmi.n	80009c0 <__aeabi_fsub+0x88>
 80009be:	e097      	b.n	8000af0 <__aeabi_fsub+0x1b8>
 80009c0:	1c6a      	adds	r2, r5, #1
 80009c2:	2dfe      	cmp	r5, #254	; 0xfe
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fsub+0x90>
 80009c6:	e084      	b.n	8000ad2 <__aeabi_fsub+0x19a>
 80009c8:	019b      	lsls	r3, r3, #6
 80009ca:	0a5e      	lsrs	r6, r3, #9
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	05d0      	lsls	r0, r2, #23
 80009d0:	4330      	orrs	r0, r6
 80009d2:	07e4      	lsls	r4, r4, #31
 80009d4:	4320      	orrs	r0, r4
 80009d6:	bc80      	pop	{r7}
 80009d8:	46b8      	mov	r8, r7
 80009da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009dc:	1bea      	subs	r2, r5, r7
 80009de:	2a00      	cmp	r2, #0
 80009e0:	dd41      	ble.n	8000a66 <__aeabi_fsub+0x12e>
 80009e2:	2f00      	cmp	r7, #0
 80009e4:	d06b      	beq.n	8000abe <__aeabi_fsub+0x186>
 80009e6:	2dff      	cmp	r5, #255	; 0xff
 80009e8:	d100      	bne.n	80009ec <__aeabi_fsub+0xb4>
 80009ea:	e097      	b.n	8000b1c <__aeabi_fsub+0x1e4>
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	04db      	lsls	r3, r3, #19
 80009f0:	4318      	orrs	r0, r3
 80009f2:	2a1b      	cmp	r2, #27
 80009f4:	dc00      	bgt.n	80009f8 <__aeabi_fsub+0xc0>
 80009f6:	e0cc      	b.n	8000b92 <__aeabi_fsub+0x25a>
 80009f8:	2301      	movs	r3, #1
 80009fa:	4463      	add	r3, ip
 80009fc:	015a      	lsls	r2, r3, #5
 80009fe:	d574      	bpl.n	8000aea <__aeabi_fsub+0x1b2>
 8000a00:	3501      	adds	r5, #1
 8000a02:	2dff      	cmp	r5, #255	; 0xff
 8000a04:	d065      	beq.n	8000ad2 <__aeabi_fsub+0x19a>
 8000a06:	2201      	movs	r2, #1
 8000a08:	499a      	ldr	r1, [pc, #616]	; (8000c74 <__aeabi_fsub+0x33c>)
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	085b      	lsrs	r3, r3, #1
 8000a0e:	400b      	ands	r3, r1
 8000a10:	4313      	orrs	r3, r2
 8000a12:	e7cb      	b.n	80009ac <__aeabi_fsub+0x74>
 8000a14:	2800      	cmp	r0, #0
 8000a16:	d01f      	beq.n	8000a58 <__aeabi_fsub+0x120>
 8000a18:	428c      	cmp	r4, r1
 8000a1a:	d022      	beq.n	8000a62 <__aeabi_fsub+0x12a>
 8000a1c:	002a      	movs	r2, r5
 8000a1e:	3aff      	subs	r2, #255	; 0xff
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	d035      	beq.n	8000a90 <__aeabi_fsub+0x158>
 8000a24:	1b7a      	subs	r2, r7, r5
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_fsub+0xf4>
 8000a2a:	e099      	b.n	8000b60 <__aeabi_fsub+0x228>
 8000a2c:	4663      	mov	r3, ip
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d100      	bne.n	8000a34 <__aeabi_fsub+0xfc>
 8000a32:	e0dd      	b.n	8000bf0 <__aeabi_fsub+0x2b8>
 8000a34:	1e53      	subs	r3, r2, #1
 8000a36:	2a01      	cmp	r2, #1
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x104>
 8000a3a:	e105      	b.n	8000c48 <__aeabi_fsub+0x310>
 8000a3c:	2aff      	cmp	r2, #255	; 0xff
 8000a3e:	d06b      	beq.n	8000b18 <__aeabi_fsub+0x1e0>
 8000a40:	001a      	movs	r2, r3
 8000a42:	e094      	b.n	8000b6e <__aeabi_fsub+0x236>
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d073      	beq.n	8000b30 <__aeabi_fsub+0x1f8>
 8000a48:	1e51      	subs	r1, r2, #1
 8000a4a:	2a01      	cmp	r2, #1
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fsub+0x118>
 8000a4e:	e0df      	b.n	8000c10 <__aeabi_fsub+0x2d8>
 8000a50:	2aff      	cmp	r2, #255	; 0xff
 8000a52:	d063      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000a54:	000a      	movs	r2, r1
 8000a56:	e792      	b.n	800097e <__aeabi_fsub+0x46>
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4051      	eors	r1, r2
 8000a5c:	42a1      	cmp	r1, r4
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_fsub+0x12a>
 8000a60:	e782      	b.n	8000968 <__aeabi_fsub+0x30>
 8000a62:	002a      	movs	r2, r5
 8000a64:	3aff      	subs	r2, #255	; 0xff
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	d036      	beq.n	8000ad8 <__aeabi_fsub+0x1a0>
 8000a6a:	1b7a      	subs	r2, r7, r5
 8000a6c:	2d00      	cmp	r5, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fsub+0x13a>
 8000a70:	e0aa      	b.n	8000bc8 <__aeabi_fsub+0x290>
 8000a72:	2fff      	cmp	r7, #255	; 0xff
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fsub+0x140>
 8000a76:	e0da      	b.n	8000c2e <__aeabi_fsub+0x2f6>
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	4661      	mov	r1, ip
 8000a7c:	04db      	lsls	r3, r3, #19
 8000a7e:	4319      	orrs	r1, r3
 8000a80:	468c      	mov	ip, r1
 8000a82:	2a1b      	cmp	r2, #27
 8000a84:	dc00      	bgt.n	8000a88 <__aeabi_fsub+0x150>
 8000a86:	e0d4      	b.n	8000c32 <__aeabi_fsub+0x2fa>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	003d      	movs	r5, r7
 8000a8c:	181b      	adds	r3, r3, r0
 8000a8e:	e7b5      	b.n	80009fc <__aeabi_fsub+0xc4>
 8000a90:	27fe      	movs	r7, #254	; 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4217      	tst	r7, r2
 8000a96:	d171      	bne.n	8000b7c <__aeabi_fsub+0x244>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_fsub+0x166>
 8000a9c:	e09e      	b.n	8000bdc <__aeabi_fsub+0x2a4>
 8000a9e:	4663      	mov	r3, ip
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fsub+0x16e>
 8000aa4:	e0d5      	b.n	8000c52 <__aeabi_fsub+0x31a>
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2800      	cmp	r0, #0
 8000aaa:	d100      	bne.n	8000aae <__aeabi_fsub+0x176>
 8000aac:	e78f      	b.n	80009ce <__aeabi_fsub+0x96>
 8000aae:	1a1b      	subs	r3, r3, r0
 8000ab0:	015e      	lsls	r6, r3, #5
 8000ab2:	d400      	bmi.n	8000ab6 <__aeabi_fsub+0x17e>
 8000ab4:	e0d6      	b.n	8000c64 <__aeabi_fsub+0x32c>
 8000ab6:	4663      	mov	r3, ip
 8000ab8:	000c      	movs	r4, r1
 8000aba:	1ac3      	subs	r3, r0, r3
 8000abc:	e776      	b.n	80009ac <__aeabi_fsub+0x74>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	d036      	beq.n	8000b30 <__aeabi_fsub+0x1f8>
 8000ac2:	1e51      	subs	r1, r2, #1
 8000ac4:	2a01      	cmp	r2, #1
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fsub+0x192>
 8000ac8:	e09a      	b.n	8000c00 <__aeabi_fsub+0x2c8>
 8000aca:	2aff      	cmp	r2, #255	; 0xff
 8000acc:	d026      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000ace:	000a      	movs	r2, r1
 8000ad0:	e78f      	b.n	80009f2 <__aeabi_fsub+0xba>
 8000ad2:	22ff      	movs	r2, #255	; 0xff
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	e77a      	b.n	80009ce <__aeabi_fsub+0x96>
 8000ad8:	27fe      	movs	r7, #254	; 0xfe
 8000ada:	1c6a      	adds	r2, r5, #1
 8000adc:	4217      	tst	r7, r2
 8000ade:	d062      	beq.n	8000ba6 <__aeabi_fsub+0x26e>
 8000ae0:	2aff      	cmp	r2, #255	; 0xff
 8000ae2:	d0f6      	beq.n	8000ad2 <__aeabi_fsub+0x19a>
 8000ae4:	0015      	movs	r5, r2
 8000ae6:	4460      	add	r0, ip
 8000ae8:	0843      	lsrs	r3, r0, #1
 8000aea:	075a      	lsls	r2, r3, #29
 8000aec:	d000      	beq.n	8000af0 <__aeabi_fsub+0x1b8>
 8000aee:	e75f      	b.n	80009b0 <__aeabi_fsub+0x78>
 8000af0:	08db      	lsrs	r3, r3, #3
 8000af2:	2dff      	cmp	r5, #255	; 0xff
 8000af4:	d012      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000af6:	025b      	lsls	r3, r3, #9
 8000af8:	0a5e      	lsrs	r6, r3, #9
 8000afa:	b2ea      	uxtb	r2, r5
 8000afc:	e767      	b.n	80009ce <__aeabi_fsub+0x96>
 8000afe:	4662      	mov	r2, ip
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	d100      	bne.n	8000b06 <__aeabi_fsub+0x1ce>
 8000b04:	e093      	b.n	8000c2e <__aeabi_fsub+0x2f6>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d008      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	03d2      	lsls	r2, r2, #15
 8000b0e:	4213      	tst	r3, r2
 8000b10:	d004      	beq.n	8000b1c <__aeabi_fsub+0x1e4>
 8000b12:	4640      	mov	r0, r8
 8000b14:	4210      	tst	r0, r2
 8000b16:	d101      	bne.n	8000b1c <__aeabi_fsub+0x1e4>
 8000b18:	000c      	movs	r4, r1
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0d8      	beq.n	8000ad2 <__aeabi_fsub+0x19a>
 8000b20:	2680      	movs	r6, #128	; 0x80
 8000b22:	03f6      	lsls	r6, r6, #15
 8000b24:	431e      	orrs	r6, r3
 8000b26:	0276      	lsls	r6, r6, #9
 8000b28:	22ff      	movs	r2, #255	; 0xff
 8000b2a:	0a76      	lsrs	r6, r6, #9
 8000b2c:	e74f      	b.n	80009ce <__aeabi_fsub+0x96>
 8000b2e:	4643      	mov	r3, r8
 8000b30:	0015      	movs	r5, r2
 8000b32:	e7de      	b.n	8000af2 <__aeabi_fsub+0x1ba>
 8000b34:	2220      	movs	r2, #32
 8000b36:	1b40      	subs	r0, r0, r5
 8000b38:	3001      	adds	r0, #1
 8000b3a:	1a12      	subs	r2, r2, r0
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	4093      	lsls	r3, r2
 8000b40:	40c1      	lsrs	r1, r0
 8000b42:	1e5a      	subs	r2, r3, #1
 8000b44:	4193      	sbcs	r3, r2
 8000b46:	2500      	movs	r5, #0
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	e72f      	b.n	80009ac <__aeabi_fsub+0x74>
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	1a9b      	subs	r3, r3, r2
 8000b50:	0001      	movs	r1, r0
 8000b52:	4098      	lsls	r0, r3
 8000b54:	0003      	movs	r3, r0
 8000b56:	40d1      	lsrs	r1, r2
 8000b58:	1e5a      	subs	r2, r3, #1
 8000b5a:	4193      	sbcs	r3, r2
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	e712      	b.n	8000986 <__aeabi_fsub+0x4e>
 8000b60:	2fff      	cmp	r7, #255	; 0xff
 8000b62:	d0d9      	beq.n	8000b18 <__aeabi_fsub+0x1e0>
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	4664      	mov	r4, ip
 8000b68:	04db      	lsls	r3, r3, #19
 8000b6a:	431c      	orrs	r4, r3
 8000b6c:	46a4      	mov	ip, r4
 8000b6e:	2a1b      	cmp	r2, #27
 8000b70:	dd52      	ble.n	8000c18 <__aeabi_fsub+0x2e0>
 8000b72:	2301      	movs	r3, #1
 8000b74:	000c      	movs	r4, r1
 8000b76:	003d      	movs	r5, r7
 8000b78:	1ac3      	subs	r3, r0, r3
 8000b7a:	e706      	b.n	800098a <__aeabi_fsub+0x52>
 8000b7c:	4663      	mov	r3, ip
 8000b7e:	1a1e      	subs	r6, r3, r0
 8000b80:	0173      	lsls	r3, r6, #5
 8000b82:	d439      	bmi.n	8000bf8 <__aeabi_fsub+0x2c0>
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d000      	beq.n	8000b8a <__aeabi_fsub+0x252>
 8000b88:	e704      	b.n	8000994 <__aeabi_fsub+0x5c>
 8000b8a:	2400      	movs	r4, #0
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2600      	movs	r6, #0
 8000b90:	e71d      	b.n	80009ce <__aeabi_fsub+0x96>
 8000b92:	2320      	movs	r3, #32
 8000b94:	1a9b      	subs	r3, r3, r2
 8000b96:	0001      	movs	r1, r0
 8000b98:	4098      	lsls	r0, r3
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	40d1      	lsrs	r1, r2
 8000b9e:	1e5a      	subs	r2, r3, #1
 8000ba0:	4193      	sbcs	r3, r2
 8000ba2:	430b      	orrs	r3, r1
 8000ba4:	e729      	b.n	80009fa <__aeabi_fsub+0xc2>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d1a9      	bne.n	8000afe <__aeabi_fsub+0x1c6>
 8000baa:	4663      	mov	r3, ip
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d056      	beq.n	8000c5e <__aeabi_fsub+0x326>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fsub+0x280>
 8000bb6:	e70a      	b.n	80009ce <__aeabi_fsub+0x96>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	4463      	add	r3, ip
 8000bbc:	015a      	lsls	r2, r3, #5
 8000bbe:	d594      	bpl.n	8000aea <__aeabi_fsub+0x1b2>
 8000bc0:	4a2b      	ldr	r2, [pc, #172]	; (8000c70 <__aeabi_fsub+0x338>)
 8000bc2:	3501      	adds	r5, #1
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	e790      	b.n	8000aea <__aeabi_fsub+0x1b2>
 8000bc8:	4663      	mov	r3, ip
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0af      	beq.n	8000b2e <__aeabi_fsub+0x1f6>
 8000bce:	1e53      	subs	r3, r2, #1
 8000bd0:	2a01      	cmp	r2, #1
 8000bd2:	d015      	beq.n	8000c00 <__aeabi_fsub+0x2c8>
 8000bd4:	2aff      	cmp	r2, #255	; 0xff
 8000bd6:	d02a      	beq.n	8000c2e <__aeabi_fsub+0x2f6>
 8000bd8:	001a      	movs	r2, r3
 8000bda:	e752      	b.n	8000a82 <__aeabi_fsub+0x14a>
 8000bdc:	4662      	mov	r2, ip
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	d191      	bne.n	8000b06 <__aeabi_fsub+0x1ce>
 8000be2:	2800      	cmp	r0, #0
 8000be4:	d198      	bne.n	8000b18 <__aeabi_fsub+0x1e0>
 8000be6:	2680      	movs	r6, #128	; 0x80
 8000be8:	2400      	movs	r4, #0
 8000bea:	22ff      	movs	r2, #255	; 0xff
 8000bec:	03f6      	lsls	r6, r6, #15
 8000bee:	e6ee      	b.n	80009ce <__aeabi_fsub+0x96>
 8000bf0:	000c      	movs	r4, r1
 8000bf2:	4643      	mov	r3, r8
 8000bf4:	0015      	movs	r5, r2
 8000bf6:	e77c      	b.n	8000af2 <__aeabi_fsub+0x1ba>
 8000bf8:	4663      	mov	r3, ip
 8000bfa:	000c      	movs	r4, r1
 8000bfc:	1ac6      	subs	r6, r0, r3
 8000bfe:	e6c9      	b.n	8000994 <__aeabi_fsub+0x5c>
 8000c00:	0003      	movs	r3, r0
 8000c02:	4463      	add	r3, ip
 8000c04:	2501      	movs	r5, #1
 8000c06:	015a      	lsls	r2, r3, #5
 8000c08:	d400      	bmi.n	8000c0c <__aeabi_fsub+0x2d4>
 8000c0a:	e76e      	b.n	8000aea <__aeabi_fsub+0x1b2>
 8000c0c:	2502      	movs	r5, #2
 8000c0e:	e6fa      	b.n	8000a06 <__aeabi_fsub+0xce>
 8000c10:	4663      	mov	r3, ip
 8000c12:	2501      	movs	r5, #1
 8000c14:	1a1b      	subs	r3, r3, r0
 8000c16:	e6b8      	b.n	800098a <__aeabi_fsub+0x52>
 8000c18:	4664      	mov	r4, ip
 8000c1a:	2320      	movs	r3, #32
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	1a9b      	subs	r3, r3, r2
 8000c20:	4662      	mov	r2, ip
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	1e5a      	subs	r2, r3, #1
 8000c28:	4193      	sbcs	r3, r2
 8000c2a:	4323      	orrs	r3, r4
 8000c2c:	e7a2      	b.n	8000b74 <__aeabi_fsub+0x23c>
 8000c2e:	4643      	mov	r3, r8
 8000c30:	e774      	b.n	8000b1c <__aeabi_fsub+0x1e4>
 8000c32:	4661      	mov	r1, ip
 8000c34:	2320      	movs	r3, #32
 8000c36:	40d1      	lsrs	r1, r2
 8000c38:	1a9b      	subs	r3, r3, r2
 8000c3a:	4662      	mov	r2, ip
 8000c3c:	409a      	lsls	r2, r3
 8000c3e:	0013      	movs	r3, r2
 8000c40:	1e5a      	subs	r2, r3, #1
 8000c42:	4193      	sbcs	r3, r2
 8000c44:	430b      	orrs	r3, r1
 8000c46:	e720      	b.n	8000a8a <__aeabi_fsub+0x152>
 8000c48:	4663      	mov	r3, ip
 8000c4a:	000c      	movs	r4, r1
 8000c4c:	2501      	movs	r5, #1
 8000c4e:	1ac3      	subs	r3, r0, r3
 8000c50:	e69b      	b.n	800098a <__aeabi_fsub+0x52>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d099      	beq.n	8000b8a <__aeabi_fsub+0x252>
 8000c56:	000c      	movs	r4, r1
 8000c58:	4646      	mov	r6, r8
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	e6b7      	b.n	80009ce <__aeabi_fsub+0x96>
 8000c5e:	4646      	mov	r6, r8
 8000c60:	2200      	movs	r2, #0
 8000c62:	e6b4      	b.n	80009ce <__aeabi_fsub+0x96>
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fsub+0x332>
 8000c68:	e73f      	b.n	8000aea <__aeabi_fsub+0x1b2>
 8000c6a:	2400      	movs	r4, #0
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	e6ae      	b.n	80009ce <__aeabi_fsub+0x96>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff

08000c78 <__aeabi_ui2f>:
 8000c78:	b570      	push	{r4, r5, r6, lr}
 8000c7a:	1e04      	subs	r4, r0, #0
 8000c7c:	d00e      	beq.n	8000c9c <__aeabi_ui2f+0x24>
 8000c7e:	f000 f843 	bl	8000d08 <__clzsi2>
 8000c82:	239e      	movs	r3, #158	; 0x9e
 8000c84:	0001      	movs	r1, r0
 8000c86:	1a1b      	subs	r3, r3, r0
 8000c88:	2b96      	cmp	r3, #150	; 0x96
 8000c8a:	dc0c      	bgt.n	8000ca6 <__aeabi_ui2f+0x2e>
 8000c8c:	2808      	cmp	r0, #8
 8000c8e:	d02c      	beq.n	8000cea <__aeabi_ui2f+0x72>
 8000c90:	3908      	subs	r1, #8
 8000c92:	408c      	lsls	r4, r1
 8000c94:	0264      	lsls	r4, r4, #9
 8000c96:	0a64      	lsrs	r4, r4, #9
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	e001      	b.n	8000ca0 <__aeabi_ui2f+0x28>
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	2400      	movs	r4, #0
 8000ca0:	05c0      	lsls	r0, r0, #23
 8000ca2:	4320      	orrs	r0, r4
 8000ca4:	bd70      	pop	{r4, r5, r6, pc}
 8000ca6:	2b99      	cmp	r3, #153	; 0x99
 8000ca8:	dd0a      	ble.n	8000cc0 <__aeabi_ui2f+0x48>
 8000caa:	0002      	movs	r2, r0
 8000cac:	0020      	movs	r0, r4
 8000cae:	321b      	adds	r2, #27
 8000cb0:	4090      	lsls	r0, r2
 8000cb2:	0002      	movs	r2, r0
 8000cb4:	1e50      	subs	r0, r2, #1
 8000cb6:	4182      	sbcs	r2, r0
 8000cb8:	2005      	movs	r0, #5
 8000cba:	1a40      	subs	r0, r0, r1
 8000cbc:	40c4      	lsrs	r4, r0
 8000cbe:	4314      	orrs	r4, r2
 8000cc0:	2905      	cmp	r1, #5
 8000cc2:	dc16      	bgt.n	8000cf2 <__aeabi_ui2f+0x7a>
 8000cc4:	0022      	movs	r2, r4
 8000cc6:	480f      	ldr	r0, [pc, #60]	; (8000d04 <__aeabi_ui2f+0x8c>)
 8000cc8:	4002      	ands	r2, r0
 8000cca:	0765      	lsls	r5, r4, #29
 8000ccc:	d009      	beq.n	8000ce2 <__aeabi_ui2f+0x6a>
 8000cce:	250f      	movs	r5, #15
 8000cd0:	402c      	ands	r4, r5
 8000cd2:	2c04      	cmp	r4, #4
 8000cd4:	d005      	beq.n	8000ce2 <__aeabi_ui2f+0x6a>
 8000cd6:	3204      	adds	r2, #4
 8000cd8:	0154      	lsls	r4, r2, #5
 8000cda:	d502      	bpl.n	8000ce2 <__aeabi_ui2f+0x6a>
 8000cdc:	239f      	movs	r3, #159	; 0x9f
 8000cde:	4002      	ands	r2, r0
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	0192      	lsls	r2, r2, #6
 8000ce4:	0a54      	lsrs	r4, r2, #9
 8000ce6:	b2d8      	uxtb	r0, r3
 8000ce8:	e7da      	b.n	8000ca0 <__aeabi_ui2f+0x28>
 8000cea:	0264      	lsls	r4, r4, #9
 8000cec:	2096      	movs	r0, #150	; 0x96
 8000cee:	0a64      	lsrs	r4, r4, #9
 8000cf0:	e7d6      	b.n	8000ca0 <__aeabi_ui2f+0x28>
 8000cf2:	1f4a      	subs	r2, r1, #5
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	0022      	movs	r2, r4
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <__aeabi_ui2f+0x8c>)
 8000cfa:	4002      	ands	r2, r0
 8000cfc:	0765      	lsls	r5, r4, #29
 8000cfe:	d0f0      	beq.n	8000ce2 <__aeabi_ui2f+0x6a>
 8000d00:	e7e5      	b.n	8000cce <__aeabi_ui2f+0x56>
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	fbffffff 	.word	0xfbffffff

08000d08 <__clzsi2>:
 8000d08:	211c      	movs	r1, #28
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	041b      	lsls	r3, r3, #16
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d301      	bcc.n	8000d16 <__clzsi2+0xe>
 8000d12:	0c00      	lsrs	r0, r0, #16
 8000d14:	3910      	subs	r1, #16
 8000d16:	0a1b      	lsrs	r3, r3, #8
 8000d18:	4298      	cmp	r0, r3
 8000d1a:	d301      	bcc.n	8000d20 <__clzsi2+0x18>
 8000d1c:	0a00      	lsrs	r0, r0, #8
 8000d1e:	3908      	subs	r1, #8
 8000d20:	091b      	lsrs	r3, r3, #4
 8000d22:	4298      	cmp	r0, r3
 8000d24:	d301      	bcc.n	8000d2a <__clzsi2+0x22>
 8000d26:	0900      	lsrs	r0, r0, #4
 8000d28:	3904      	subs	r1, #4
 8000d2a:	a202      	add	r2, pc, #8	; (adr r2, 8000d34 <__clzsi2+0x2c>)
 8000d2c:	5c10      	ldrb	r0, [r2, r0]
 8000d2e:	1840      	adds	r0, r0, r1
 8000d30:	4770      	bx	lr
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	02020304 	.word	0x02020304
 8000d38:	01010101 	.word	0x01010101
	...

08000d44 <__clzdi2>:
 8000d44:	b510      	push	{r4, lr}
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d103      	bne.n	8000d52 <__clzdi2+0xe>
 8000d4a:	f7ff ffdd 	bl	8000d08 <__clzsi2>
 8000d4e:	3020      	adds	r0, #32
 8000d50:	e002      	b.n	8000d58 <__clzdi2+0x14>
 8000d52:	0008      	movs	r0, r1
 8000d54:	f7ff ffd8 	bl	8000d08 <__clzsi2>
 8000d58:	bd10      	pop	{r4, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)

08000d5c <AHT20_Master_Transmit>:
 */

#include "AHT20.h"

HAL_StatusTypeDef AHT20_Master_Transmit(uint8_t *data, uint16_t size)
{
 8000d5c:	b5b0      	push	{r4, r5, r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af02      	add	r7, sp, #8
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	000a      	movs	r2, r1
 8000d66:	1cbb      	adds	r3, r7, #2
 8000d68:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDR, data, size, HAL_MAX_DELAY);
 8000d6a:	250f      	movs	r5, #15
 8000d6c:	197c      	adds	r4, r7, r5
 8000d6e:	1cbb      	adds	r3, r7, #2
 8000d70:	8819      	ldrh	r1, [r3, #0]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4807      	ldr	r0, [pc, #28]	; (8000d94 <AHT20_Master_Transmit+0x38>)
 8000d76:	2301      	movs	r3, #1
 8000d78:	425b      	negs	r3, r3
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	000b      	movs	r3, r1
 8000d7e:	2170      	movs	r1, #112	; 0x70
 8000d80:	f002 fb62 	bl	8003448 <HAL_I2C_Master_Transmit>
 8000d84:	0003      	movs	r3, r0
 8000d86:	7023      	strb	r3, [r4, #0]

	return status;
 8000d88:	197b      	adds	r3, r7, r5
 8000d8a:	781b      	ldrb	r3, [r3, #0]
}
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b004      	add	sp, #16
 8000d92:	bdb0      	pop	{r4, r5, r7, pc}
 8000d94:	2000012c 	.word	0x2000012c

08000d98 <AHT20_Master_Receive>:

HAL_StatusTypeDef AHT20_Master_Receive(uint8_t *data, uint16_t size)
{
 8000d98:	b5b0      	push	{r4, r5, r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	000a      	movs	r2, r1
 8000da2:	1cbb      	adds	r3, r7, #2
 8000da4:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Receive(&hi2c1, AHT20_READ_ADDR, data, size, HAL_MAX_DELAY);
 8000da6:	250f      	movs	r5, #15
 8000da8:	197c      	adds	r4, r7, r5
 8000daa:	1cbb      	adds	r3, r7, #2
 8000dac:	8819      	ldrh	r1, [r3, #0]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <AHT20_Master_Receive+0x38>)
 8000db2:	2301      	movs	r3, #1
 8000db4:	425b      	negs	r3, r3
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	000b      	movs	r3, r1
 8000dba:	2171      	movs	r1, #113	; 0x71
 8000dbc:	f002 fc4c 	bl	8003658 <HAL_I2C_Master_Receive>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	7023      	strb	r3, [r4, #0]

	return status;
 8000dc4:	197b      	adds	r3, r7, r5
 8000dc6:	781b      	ldrb	r3, [r3, #0]
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b004      	add	sp, #16
 8000dce:	bdb0      	pop	{r4, r5, r7, pc}
 8000dd0:	2000012c 	.word	0x2000012c

08000dd4 <AHT20_Init>:

	return read_value;
}

void AHT20_Init()
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
	uint8_t init_cmd[] = {0xBE, 0x08, 0x00};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <AHT20_Init+0x70>)
 8000dde:	8811      	ldrh	r1, [r2, #0]
 8000de0:	8019      	strh	r1, [r3, #0]
 8000de2:	7892      	ldrb	r2, [r2, #2]
 8000de4:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(init_cmd, sizeof(init_cmd)) != HAL_OK)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2103      	movs	r1, #3
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff ffb6 	bl	8000d5c <AHT20_Master_Transmit>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d004      	beq.n	8000dfe <AHT20_Init+0x2a>
	{
		printf("AHT20 initialisation error\n");
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <AHT20_Init+0x74>)
 8000df6:	0018      	movs	r0, r3
 8000df8:	f006 fc06 	bl	8007608 <puts>
		else
		{
			printf("AHT20 not calibrated\n");
		}
	}
}
 8000dfc:	e01d      	b.n	8000e3a <AHT20_Init+0x66>
		printf("AHT20 initialised\n");
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <AHT20_Init+0x78>)
 8000e00:	0018      	movs	r0, r3
 8000e02:	f006 fc01 	bl	8007608 <puts>
		uint8_t value = 0x00;
 8000e06:	1cfb      	adds	r3, r7, #3
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f001 fbf9 	bl	8002604 <HAL_Delay>
		AHT20_Master_Receive(&value, sizeof(value));
 8000e12:	1cfb      	adds	r3, r7, #3
 8000e14:	2101      	movs	r1, #1
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff ffbe 	bl	8000d98 <AHT20_Master_Receive>
		if ((value & 0x08) != 0x00) // check calibration bit
 8000e1c:	1cfb      	adds	r3, r7, #3
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	001a      	movs	r2, r3
 8000e22:	2308      	movs	r3, #8
 8000e24:	4013      	ands	r3, r2
 8000e26:	d004      	beq.n	8000e32 <AHT20_Init+0x5e>
			printf("AHT20 calibrated\n");
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <AHT20_Init+0x7c>)
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f006 fbec 	bl	8007608 <puts>
}
 8000e30:	e003      	b.n	8000e3a <AHT20_Init+0x66>
			printf("AHT20 not calibrated\n");
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <AHT20_Init+0x80>)
 8000e34:	0018      	movs	r0, r3
 8000e36:	f006 fbe7 	bl	8007608 <puts>
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	080084dc 	.word	0x080084dc
 8000e48:	08008480 	.word	0x08008480
 8000e4c:	0800849c 	.word	0x0800849c
 8000e50:	080084b0 	.word	0x080084b0
 8000e54:	080084c4 	.word	0x080084c4

08000e58 <AHT20_Read>:

void AHT20_Read(volatile float *Temp, volatile float *Hum)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	uint8_t trig_measure_cmd[] = {0xAC, 0x33, 0x00};
 8000e62:	2010      	movs	r0, #16
 8000e64:	183b      	adds	r3, r7, r0
 8000e66:	4a35      	ldr	r2, [pc, #212]	; (8000f3c <AHT20_Read+0xe4>)
 8000e68:	8811      	ldrh	r1, [r2, #0]
 8000e6a:	8019      	strh	r1, [r3, #0]
 8000e6c:	7892      	ldrb	r2, [r2, #2]
 8000e6e:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(trig_measure_cmd, sizeof(trig_measure_cmd)) != HAL_OK)
 8000e70:	183b      	adds	r3, r7, r0
 8000e72:	2103      	movs	r1, #3
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ff71 	bl	8000d5c <AHT20_Master_Transmit>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	d004      	beq.n	8000e88 <AHT20_Read+0x30>
	{
		printf("AHT20 trigger measurement error\n");
 8000e7e:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <AHT20_Read+0xe8>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f006 fbc1 	bl	8007608 <puts>

			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
			*Temp = data * 200.0f / (1 << 20) - 50;
		}
	}
}
 8000e86:	e054      	b.n	8000f32 <AHT20_Read+0xda>
		HAL_Delay(80); // wait for the measurements to be completed
 8000e88:	2050      	movs	r0, #80	; 0x50
 8000e8a:	f001 fbbb 	bl	8002604 <HAL_Delay>
		AHT20_Master_Receive(read_buffer, sizeof(read_buffer));
 8000e8e:	2408      	movs	r4, #8
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	2106      	movs	r1, #6
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff ff7f 	bl	8000d98 <AHT20_Master_Receive>
		if(((read_buffer[0]) & 0x80) == 0x00)
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db46      	blt.n	8000f32 <AHT20_Read+0xda>
			uint32_t data = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
			data = (((uint32_t)read_buffer[3] >> 4) + ((uint32_t)read_buffer[2] << 4) + ((uint32_t)read_buffer[1] << 12));
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	78db      	ldrb	r3, [r3, #3]
 8000eac:	091b      	lsrs	r3, r3, #4
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	789b      	ldrb	r3, [r3, #2]
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	18d2      	adds	r2, r2, r3
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	785b      	ldrb	r3, [r3, #1]
 8000ebe:	031b      	lsls	r3, r3, #12
 8000ec0:	18d3      	adds	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
			*Hum = data * 100.0f / (1 << 20);
 8000ec4:	6978      	ldr	r0, [r7, #20]
 8000ec6:	f7ff fed7 	bl	8000c78 <__aeabi_ui2f>
 8000eca:	1c03      	adds	r3, r0, #0
 8000ecc:	491d      	ldr	r1, [pc, #116]	; (8000f44 <AHT20_Read+0xec>)
 8000ece:	1c18      	adds	r0, r3, #0
 8000ed0:	f7ff fbe4 	bl	800069c <__aeabi_fmul>
 8000ed4:	1c03      	adds	r3, r0, #0
 8000ed6:	2193      	movs	r1, #147	; 0x93
 8000ed8:	05c9      	lsls	r1, r1, #23
 8000eda:	1c18      	adds	r0, r3, #0
 8000edc:	f7ff fac4 	bl	8000468 <__aeabi_fdiv>
 8000ee0:	1c03      	adds	r3, r0, #0
 8000ee2:	1c1a      	adds	r2, r3, #0
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	601a      	str	r2, [r3, #0]
			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	78db      	ldrb	r3, [r3, #3]
 8000eec:	041a      	lsls	r2, r3, #16
 8000eee:	23f0      	movs	r3, #240	; 0xf0
 8000ef0:	031b      	lsls	r3, r3, #12
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	791b      	ldrb	r3, [r3, #4]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	18d3      	adds	r3, r2, r3
 8000efc:	193a      	adds	r2, r7, r4
 8000efe:	7952      	ldrb	r2, [r2, #5]
 8000f00:	189b      	adds	r3, r3, r2
 8000f02:	617b      	str	r3, [r7, #20]
			*Temp = data * 200.0f / (1 << 20) - 50;
 8000f04:	6978      	ldr	r0, [r7, #20]
 8000f06:	f7ff feb7 	bl	8000c78 <__aeabi_ui2f>
 8000f0a:	1c03      	adds	r3, r0, #0
 8000f0c:	490e      	ldr	r1, [pc, #56]	; (8000f48 <AHT20_Read+0xf0>)
 8000f0e:	1c18      	adds	r0, r3, #0
 8000f10:	f7ff fbc4 	bl	800069c <__aeabi_fmul>
 8000f14:	1c03      	adds	r3, r0, #0
 8000f16:	2193      	movs	r1, #147	; 0x93
 8000f18:	05c9      	lsls	r1, r1, #23
 8000f1a:	1c18      	adds	r0, r3, #0
 8000f1c:	f7ff faa4 	bl	8000468 <__aeabi_fdiv>
 8000f20:	1c03      	adds	r3, r0, #0
 8000f22:	490a      	ldr	r1, [pc, #40]	; (8000f4c <AHT20_Read+0xf4>)
 8000f24:	1c18      	adds	r0, r3, #0
 8000f26:	f7ff fd07 	bl	8000938 <__aeabi_fsub>
 8000f2a:	1c03      	adds	r3, r0, #0
 8000f2c:	1c1a      	adds	r2, r3, #0
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b007      	add	sp, #28
 8000f38:	bd90      	pop	{r4, r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	08008500 	.word	0x08008500
 8000f40:	080084e0 	.word	0x080084e0
 8000f44:	42c80000 	.word	0x42c80000
 8000f48:	43480000 	.word	0x43480000
 8000f4c:	42480000 	.word	0x42480000

08000f50 <NEO6_Init>:
		NEO6_ParseLine(GpsStateHandler);
	}
}

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	2382      	movs	r3, #130	; 0x82
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2100      	movs	r1, #0
 8000f68:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferTail = 0;
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	2306      	movs	r3, #6
 8000f6e:	33ff      	adds	r3, #255	; 0xff
 8000f70:	2100      	movs	r1, #0
 8000f72:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferLines = 0;
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	2383      	movs	r3, #131	; 0x83
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Hour = 0;
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	2388      	movs	r3, #136	; 0x88
 8000f82:	33ff      	adds	r3, #255	; 0xff
 8000f84:	2100      	movs	r1, #0
 8000f86:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Minute = 0;
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	23c4      	movs	r3, #196	; 0xc4
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2100      	movs	r1, #0
 8000f90:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Second = 0;
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	238a      	movs	r3, #138	; 0x8a
 8000f96:	33ff      	adds	r3, #255	; 0xff
 8000f98:	2100      	movs	r1, #0
 8000f9a:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Day = 0;
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	23c5      	movs	r3, #197	; 0xc5
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Month = 0;
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	238c      	movs	r3, #140	; 0x8c
 8000faa:	33ff      	adds	r3, #255	; 0xff
 8000fac:	2100      	movs	r1, #0
 8000fae:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Year = 0;
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	23c6      	movs	r3, #198	; 0xc6
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Latitude = 0;
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	23c8      	movs	r3, #200	; 0xc8
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	18d1      	adds	r1, r2, r3
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	600a      	str	r2, [r1, #0]
 8000fc8:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LatitudeDirection = '0';
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	23cc      	movs	r3, #204	; 0xcc
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2130      	movs	r1, #48	; 0x30
 8000fd2:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Longitude = 0;
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	23d0      	movs	r3, #208	; 0xd0
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	18d1      	adds	r1, r2, r3
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2300      	movs	r3, #0
 8000fe0:	600a      	str	r2, [r1, #0]
 8000fe2:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LongitudeDirection = '0';
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	23d4      	movs	r3, #212	; 0xd4
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2130      	movs	r1, #48	; 0x30
 8000fec:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->SpeedKilometers = 0;
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	23e0      	movs	r3, #224	; 0xe0
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	18d1      	adds	r1, r2, r3
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	600a      	str	r2, [r1, #0]
 8000ffc:	604b      	str	r3, [r1, #4]
	GpsStateHandler->SpeedKnots = 0;
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	23dc      	movs	r3, #220	; 0xdc
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	18d1      	adds	r1, r2, r3
 8001006:	2200      	movs	r2, #0
 8001008:	2300      	movs	r3, #0
 800100a:	600a      	str	r2, [r1, #0]
 800100c:	604b      	str	r3, [r1, #4]

	GpsStateHandler->SatelitesNumber = 0;
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	23e4      	movs	r3, #228	; 0xe4
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2100      	movs	r1, #0
 8001016:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Quality = 0;
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	23ca      	movs	r3, #202	; 0xca
 800101c:	33ff      	adds	r3, #255	; 0xff
 800101e:	2100      	movs	r1, #0
 8001020:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Dop = 0;
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	23e8      	movs	r3, #232	; 0xe8
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	18d1      	adds	r1, r2, r3
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	600a      	str	r2, [r1, #0]
 8001030:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Hdop = 0;
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	23ec      	movs	r3, #236	; 0xec
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	18d1      	adds	r1, r2, r3
 800103a:	2200      	movs	r2, #0
 800103c:	2300      	movs	r3, #0
 800103e:	600a      	str	r2, [r1, #0]
 8001040:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Vdop = 0;
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	23f0      	movs	r3, #240	; 0xf0
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	18d1      	adds	r1, r2, r3
 800104a:	2200      	movs	r2, #0
 800104c:	2300      	movs	r3, #0
 800104e:	600a      	str	r2, [r1, #0]
 8001050:	604b      	str	r3, [r1, #4]

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4904      	ldr	r1, [pc, #16]	; (8001068 <NEO6_Init+0x118>)
 8001058:	2201      	movs	r2, #1
 800105a:	0018      	movs	r0, r3
 800105c:	f004 febe 	bl	8005ddc <HAL_UART_Receive_IT>
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	b002      	add	sp, #8
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000084 	.word	0x20000084

0800106c <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001072:	003b      	movs	r3, r7
 8001074:	0018      	movs	r0, r3
 8001076:	2308      	movs	r3, #8
 8001078:	001a      	movs	r2, r3
 800107a:	2100      	movs	r1, #0
 800107c:	f006 fbe0 	bl	8007840 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001080:	4b2a      	ldr	r3, [pc, #168]	; (800112c <MX_ADC_Init+0xc0>)
 8001082:	4a2b      	ldr	r2, [pc, #172]	; (8001130 <MX_ADC_Init+0xc4>)
 8001084:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <MX_ADC_Init+0xc0>)
 8001088:	2200      	movs	r2, #0
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <MX_ADC_Init+0xc0>)
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	05d2      	lsls	r2, r2, #23
 8001092:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001094:	4b25      	ldr	r3, [pc, #148]	; (800112c <MX_ADC_Init+0xc0>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800109a:	4b24      	ldr	r3, [pc, #144]	; (800112c <MX_ADC_Init+0xc0>)
 800109c:	2207      	movs	r2, #7
 800109e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <MX_ADC_Init+0xc0>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <MX_ADC_Init+0xc0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_ADC_Init+0xc0>)
 80010ae:	2220      	movs	r2, #32
 80010b0:	2101      	movs	r1, #1
 80010b2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_ADC_Init+0xc0>)
 80010b6:	2221      	movs	r2, #33	; 0x21
 80010b8:	2100      	movs	r1, #0
 80010ba:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <MX_ADC_Init+0xc0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_ADC_Init+0xc0>)
 80010c4:	22c2      	movs	r2, #194	; 0xc2
 80010c6:	32ff      	adds	r2, #255	; 0xff
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <MX_ADC_Init+0xc0>)
 80010cc:	222c      	movs	r2, #44	; 0x2c
 80010ce:	2101      	movs	r1, #1
 80010d0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_ADC_Init+0xc0>)
 80010d4:	2204      	movs	r2, #4
 80010d6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_ADC_Init+0xc0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <MX_ADC_Init+0xc0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_ADC_Init+0xc0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <MX_ADC_Init+0xc0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_ADC_Init+0xc0>)
 80010f2:	0018      	movs	r0, r3
 80010f4:	f001 faaa 	bl	800264c <HAL_ADC_Init>
 80010f8:	1e03      	subs	r3, r0, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80010fc:	f000 faa8 	bl	8001650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001100:	003b      	movs	r3, r7
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001106:	003b      	movs	r3, r7
 8001108:	2280      	movs	r2, #128	; 0x80
 800110a:	0152      	lsls	r2, r2, #5
 800110c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800110e:	003a      	movs	r2, r7
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_ADC_Init+0xc0>)
 8001112:	0011      	movs	r1, r2
 8001114:	0018      	movs	r0, r3
 8001116:	f001 fc0d 	bl	8002934 <HAL_ADC_ConfigChannel>
 800111a:	1e03      	subs	r3, r0, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800111e:	f000 fa97 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	20000088 	.word	0x20000088
 8001130:	40012400 	.word	0x40012400

08001134 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	240c      	movs	r4, #12
 800113e:	193b      	adds	r3, r7, r4
 8001140:	0018      	movs	r0, r3
 8001142:	2314      	movs	r3, #20
 8001144:	001a      	movs	r2, r3
 8001146:	2100      	movs	r1, #0
 8001148:	f006 fb7a 	bl	8007840 <memset>
  if(adcHandle->Instance==ADC1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a2a      	ldr	r2, [pc, #168]	; (80011fc <HAL_ADC_MspInit+0xc8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d14d      	bne.n	80011f2 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <HAL_ADC_MspInit+0xcc>)
 8001158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <HAL_ADC_MspInit+0xcc>)
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	0089      	lsls	r1, r1, #2
 8001160:	430a      	orrs	r2, r1
 8001162:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <HAL_ADC_MspInit+0xcc>)
 8001166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001168:	4b25      	ldr	r3, [pc, #148]	; (8001200 <HAL_ADC_MspInit+0xcc>)
 800116a:	2101      	movs	r1, #1
 800116c:	430a      	orrs	r2, r1
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_ADC_MspInit+0xcc>)
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	2201      	movs	r2, #1
 8001176:	4013      	ands	r3, r2
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800117c:	193b      	adds	r3, r7, r4
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	193b      	adds	r3, r7, r4
 8001184:	2203      	movs	r2, #3
 8001186:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	193b      	adds	r3, r7, r4
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	193a      	adds	r2, r7, r4
 8001190:	23a0      	movs	r3, #160	; 0xa0
 8001192:	05db      	lsls	r3, r3, #23
 8001194:	0011      	movs	r1, r2
 8001196:	0018      	movs	r0, r3
 8001198:	f001 fefe 	bl	8002f98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_ADC_MspInit+0xd0>)
 800119e:	4a1a      	ldr	r2, [pc, #104]	; (8001208 <HAL_ADC_MspInit+0xd4>)
 80011a0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_ADC_MspInit+0xd0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_ADC_MspInit+0xd0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_ADC_MspInit+0xd0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_ADC_MspInit+0xd0>)
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_ADC_MspInit+0xd0>)
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_ADC_MspInit+0xd0>)
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_ADC_MspInit+0xd0>)
 80011cc:	2220      	movs	r2, #32
 80011ce:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_ADC_MspInit+0xd0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_ADC_MspInit+0xd0>)
 80011d8:	0018      	movs	r0, r3
 80011da:	f001 fd2f 	bl	8002c3c <HAL_DMA_Init>
 80011de:	1e03      	subs	r3, r0, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80011e2:	f000 fa35 	bl	8001650 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <HAL_ADC_MspInit+0xd0>)
 80011ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_ADC_MspInit+0xd0>)
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b009      	add	sp, #36	; 0x24
 80011f8:	bd90      	pop	{r4, r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	40012400 	.word	0x40012400
 8001200:	40021000 	.word	0x40021000
 8001204:	200000e4 	.word	0x200000e4
 8001208:	40020008 	.word	0x40020008

0800120c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_DMA_Init+0x38>)
 8001214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_DMA_Init+0x38>)
 8001218:	2101      	movs	r1, #1
 800121a:	430a      	orrs	r2, r1
 800121c:	631a      	str	r2, [r3, #48]	; 0x30
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_DMA_Init+0x38>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	2201      	movs	r2, #1
 8001224:	4013      	ands	r3, r2
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2009      	movs	r0, #9
 8001230:	f001 fcd2 	bl	8002bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001234:	2009      	movs	r0, #9
 8001236:	f001 fce4 	bl	8002c02 <HAL_NVIC_EnableIRQ>

}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	40021000 	.word	0x40021000

08001248 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	240c      	movs	r4, #12
 8001250:	193b      	adds	r3, r7, r4
 8001252:	0018      	movs	r0, r3
 8001254:	2314      	movs	r3, #20
 8001256:	001a      	movs	r2, r3
 8001258:	2100      	movs	r1, #0
 800125a:	f006 faf1 	bl	8007840 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <MX_GPIO_Init+0x108>)
 8001260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001262:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <MX_GPIO_Init+0x108>)
 8001264:	2101      	movs	r1, #1
 8001266:	430a      	orrs	r2, r1
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
 800126a:	4b39      	ldr	r3, [pc, #228]	; (8001350 <MX_GPIO_Init+0x108>)
 800126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126e:	2201      	movs	r2, #1
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b36      	ldr	r3, [pc, #216]	; (8001350 <MX_GPIO_Init+0x108>)
 8001278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127a:	4b35      	ldr	r3, [pc, #212]	; (8001350 <MX_GPIO_Init+0x108>)
 800127c:	2102      	movs	r1, #2
 800127e:	430a      	orrs	r2, r1
 8001280:	62da      	str	r2, [r3, #44]	; 0x2c
 8001282:	4b33      	ldr	r3, [pc, #204]	; (8001350 <MX_GPIO_Init+0x108>)
 8001284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001286:	2202      	movs	r2, #2
 8001288:	4013      	ands	r3, r2
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF24_CSN_Pin|USER_LED_Pin|I2C_EN_Pin|GPS_EN_Pin
 800128e:	4931      	ldr	r1, [pc, #196]	; (8001354 <MX_GPIO_Init+0x10c>)
 8001290:	23a0      	movs	r3, #160	; 0xa0
 8001292:	05db      	lsls	r3, r3, #23
 8001294:	2200      	movs	r2, #0
 8001296:	0018      	movs	r0, r3
 8001298:	f001 fffc 	bl	8003294 <HAL_GPIO_WritePin>
                          |ADC_EN_Pin|HEATER_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 800129c:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <MX_GPIO_Init+0x110>)
 800129e:	2200      	movs	r2, #0
 80012a0:	2110      	movs	r1, #16
 80012a2:	0018      	movs	r0, r3
 80012a4:	f001 fff6 	bl	8003294 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|USER_LED_Pin|I2C_EN_Pin|GPS_EN_Pin
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	4a2a      	ldr	r2, [pc, #168]	; (8001354 <MX_GPIO_Init+0x10c>)
 80012ac:	601a      	str	r2, [r3, #0]
                          |ADC_EN_Pin|HEATER_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	193b      	adds	r3, r7, r4
 80012b0:	2201      	movs	r2, #1
 80012b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	193b      	adds	r3, r7, r4
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	193b      	adds	r3, r7, r4
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	193a      	adds	r2, r7, r4
 80012c2:	23a0      	movs	r3, #160	; 0xa0
 80012c4:	05db      	lsls	r3, r3, #23
 80012c6:	0011      	movs	r1, r2
 80012c8:	0018      	movs	r0, r3
 80012ca:	f001 fe65 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d6:	193b      	adds	r3, r7, r4
 80012d8:	2200      	movs	r2, #0
 80012da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	193b      	adds	r3, r7, r4
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012e2:	193a      	adds	r2, r7, r4
 80012e4:	23a0      	movs	r3, #160	; 0xa0
 80012e6:	05db      	lsls	r3, r3, #23
 80012e8:	0011      	movs	r1, r2
 80012ea:	0018      	movs	r0, r3
 80012ec:	f001 fe54 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 80012f0:	193b      	adds	r3, r7, r4
 80012f2:	2210      	movs	r2, #16
 80012f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	193b      	adds	r3, r7, r4
 80012f8:	2201      	movs	r2, #1
 80012fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	193b      	adds	r3, r7, r4
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	193b      	adds	r3, r7, r4
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001308:	193b      	adds	r3, r7, r4
 800130a:	4a13      	ldr	r2, [pc, #76]	; (8001358 <MX_GPIO_Init+0x110>)
 800130c:	0019      	movs	r1, r3
 800130e:	0010      	movs	r0, r2
 8001310:	f001 fe42 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001314:	0021      	movs	r1, r4
 8001316:	187b      	adds	r3, r7, r1
 8001318:	2220      	movs	r2, #32
 800131a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800131c:	187b      	adds	r3, r7, r1
 800131e:	2288      	movs	r2, #136	; 0x88
 8001320:	0352      	lsls	r2, r2, #13
 8001322:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 800132a:	187b      	adds	r3, r7, r1
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <MX_GPIO_Init+0x110>)
 800132e:	0019      	movs	r1, r3
 8001330:	0010      	movs	r0, r2
 8001332:	f001 fe31 	bl	8002f98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2007      	movs	r0, #7
 800133c:	f001 fc4c 	bl	8002bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001340:	2007      	movs	r0, #7
 8001342:	f001 fc5e 	bl	8002c02 <HAL_NVIC_EnableIRQ>

}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b009      	add	sp, #36	; 0x24
 800134c:	bd90      	pop	{r4, r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	40021000 	.word	0x40021000
 8001354:	00009d02 	.word	0x00009d02
 8001358:	50000400 	.word	0x50000400

0800135c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <MX_I2C1_Init+0x78>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <MX_I2C1_Init+0x7c>)
 800136a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_I2C1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001374:	2201      	movs	r2, #1
 8001376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_I2C1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_I2C1_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001398:	0018      	movs	r0, r3
 800139a:	f001 ffbf 	bl	800331c <HAL_I2C_Init>
 800139e:	1e03      	subs	r3, r0, #0
 80013a0:	d001      	beq.n	80013a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013a2:	f000 f955 	bl	8001650 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <MX_I2C1_Init+0x74>)
 80013a8:	2100      	movs	r1, #0
 80013aa:	0018      	movs	r0, r3
 80013ac:	f002 fd12 	bl	8003dd4 <HAL_I2CEx_ConfigAnalogFilter>
 80013b0:	1e03      	subs	r3, r0, #0
 80013b2:	d001      	beq.n	80013b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013b4:	f000 f94c 	bl	8001650 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <MX_I2C1_Init+0x74>)
 80013ba:	2100      	movs	r1, #0
 80013bc:	0018      	movs	r0, r3
 80013be:	f002 fd55 	bl	8003e6c <HAL_I2CEx_ConfigDigitalFilter>
 80013c2:	1e03      	subs	r3, r0, #0
 80013c4:	d001      	beq.n	80013ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013c6:	f000 f943 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000012c 	.word	0x2000012c
 80013d4:	40005400 	.word	0x40005400
 80013d8:	00707cbb 	.word	0x00707cbb

080013dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	240c      	movs	r4, #12
 80013e6:	193b      	adds	r3, r7, r4
 80013e8:	0018      	movs	r0, r3
 80013ea:	2314      	movs	r3, #20
 80013ec:	001a      	movs	r2, r3
 80013ee:	2100      	movs	r1, #0
 80013f0:	f006 fa26 	bl	8007840 <memset>
  if(i2cHandle->Instance==I2C1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_I2C_MspInit+0x7c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d128      	bne.n	8001450 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_I2C_MspInit+0x80>)
 8001400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_I2C_MspInit+0x80>)
 8001404:	2102      	movs	r1, #2
 8001406:	430a      	orrs	r2, r1
 8001408:	62da      	str	r2, [r3, #44]	; 0x2c
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_I2C_MspInit+0x80>)
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	2202      	movs	r2, #2
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001416:	0021      	movs	r1, r4
 8001418:	187b      	adds	r3, r7, r1
 800141a:	22c0      	movs	r2, #192	; 0xc0
 800141c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2212      	movs	r2, #18
 8001422:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2203      	movs	r2, #3
 800142e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2201      	movs	r2, #1
 8001434:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	187b      	adds	r3, r7, r1
 8001438:	4a09      	ldr	r2, [pc, #36]	; (8001460 <HAL_I2C_MspInit+0x84>)
 800143a:	0019      	movs	r1, r3
 800143c:	0010      	movs	r0, r2
 800143e:	f001 fdab 	bl	8002f98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_I2C_MspInit+0x80>)
 8001444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_I2C_MspInit+0x80>)
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	0389      	lsls	r1, r1, #14
 800144c:	430a      	orrs	r2, r1
 800144e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b009      	add	sp, #36	; 0x24
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	40005400 	.word	0x40005400
 800145c:	40021000 	.word	0x40021000
 8001460:	50000400 	.word	0x50000400

08001464 <HAL_UART_RxCpltCallback>:
uint8_t Nrf24_Message[NRF24_PAYLOAD_SIZE];
uint8_t Message[32];
uint8_t MessageLength;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
//  if(huart == GpsState.neo6_huart)
//  {
//    NEO6_ReceiveUartChar(&GpsState);
//  }
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b002      	add	sp, #8
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001480:	429a      	cmp	r2, r3
 8001482:	d105      	bne.n	8001490 <HAL_TIM_PeriodElapsedCallback+0x1c>
    AHT20_Read(&Temp, &Hum); // reads AHT20 measurements every second
 8001484:	4a05      	ldr	r2, [pc, #20]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001488:	0011      	movs	r1, r2
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff fce4 	bl	8000e58 <AHT20_Read>
//    printf("Temperature = %.1fC\n Hum = %.1f\n", Temp, Hum);
  }
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b002      	add	sp, #8
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200003f8 	.word	0x200003f8
 800149c:	2000036c 	.word	0x2000036c
 80014a0:	20000368 	.word	0x20000368

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014aa:	f001 f83b 	bl	8002524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ae:	f000 f859 	bl	8001564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b2:	f7ff fec9 	bl	8001248 <MX_GPIO_Init>
  MX_DMA_Init();
 80014b6:	f7ff fea9 	bl	800120c <MX_DMA_Init>
  MX_ADC_Init();
 80014ba:	f7ff fdd7 	bl	800106c <MX_ADC_Init>
  MX_I2C1_Init();
 80014be:	f7ff ff4d 	bl	800135c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80014c2:	f000 ff87 	bl	80023d4 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 80014c6:	f000 fdb1 	bl	800202c <MX_SPI1_Init>
  MX_TIM6_Init();
 80014ca:	f000 ff25 	bl	8002318 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  AHT20_Init();
 80014ce:	f7ff fc81 	bl	8000dd4 <AHT20_Init>
  NEO6_Init(&GpsState, &hlpuart1);
 80014d2:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <main+0xa0>)
 80014d4:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <main+0xa4>)
 80014d6:	0011      	movs	r1, r2
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff fd39 	bl	8000f50 <NEO6_Init>
//  HAL_TIM_Base_Start_IT(&htim6);


  // TRANSMITER
  nRF24_Init(&hspi1);
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <main+0xa8>)
 80014e0:	0018      	movs	r0, r3
 80014e2:	f000 fd37 	bl	8001f54 <nRF24_Init>
  nRF24_SetRXAddress(0, "Nad");
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <main+0xac>)
 80014e8:	0019      	movs	r1, r3
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 fbcc 	bl	8001c88 <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Odb");
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <main+0xb0>)
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 fc0e 	bl	8001d14 <nRF24_SetTXAddress>
  nRF24_TX_Mode();
 80014f8:	f000 f9a0 	bl	800183c <nRF24_TX_Mode>
//	  HAL_Delay(500);
//	  HAL_UART_Transmit(&hlpuart1, "bajojajo\r\n", 10, 1000);
//	  HAL_Delay(500);
//	  pv_run();

	  for(int i=0; i<10; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	e01b      	b.n	800153a <main+0x96>
	  {
		  MessageLength = sprintf(Message, "%d", i );
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	4914      	ldr	r1, [pc, #80]	; (8001558 <main+0xb4>)
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <main+0xb8>)
 8001508:	0018      	movs	r0, r3
 800150a:	f006 f887 	bl	800761c <siprintf>
 800150e:	0003      	movs	r3, r0
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <main+0xbc>)
 8001514:	701a      	strb	r2, [r3, #0]
		  nRF24_WriteTXPayload(Message, 1);
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <main+0xb8>)
 8001518:	2101      	movs	r1, #1
 800151a:	0018      	movs	r0, r3
 800151c:	f000 fcdd 	bl	8001eda <nRF24_WriteTXPayload>
		  HAL_Delay(1);
 8001520:	2001      	movs	r0, #1
 8001522:	f001 f86f 	bl	8002604 <HAL_Delay>
		  nRF24_WaitTX();
 8001526:	f000 fceb 	bl	8001f00 <nRF24_WaitTX>
		  HAL_Delay(1000);
 800152a:	23fa      	movs	r3, #250	; 0xfa
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	0018      	movs	r0, r3
 8001530:	f001 f868 	bl	8002604 <HAL_Delay>
	  for(int i=0; i<10; i++)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3301      	adds	r3, #1
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b09      	cmp	r3, #9
 800153e:	dde0      	ble.n	8001502 <main+0x5e>
 8001540:	e7dc      	b.n	80014fc <main+0x58>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	20000438 	.word	0x20000438
 8001548:	20000180 	.word	0x20000180
 800154c:	2000039c 	.word	0x2000039c
 8001550:	08008504 	.word	0x08008504
 8001554:	08008508 	.word	0x08008508
 8001558:	0800850c 	.word	0x0800850c
 800155c:	20000370 	.word	0x20000370
 8001560:	20000390 	.word	0x20000390

08001564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b09b      	sub	sp, #108	; 0x6c
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	2434      	movs	r4, #52	; 0x34
 800156c:	193b      	adds	r3, r7, r4
 800156e:	0018      	movs	r0, r3
 8001570:	2334      	movs	r3, #52	; 0x34
 8001572:	001a      	movs	r2, r3
 8001574:	2100      	movs	r1, #0
 8001576:	f006 f963 	bl	8007840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157a:	2320      	movs	r3, #32
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	0018      	movs	r0, r3
 8001580:	2314      	movs	r3, #20
 8001582:	001a      	movs	r2, r3
 8001584:	2100      	movs	r1, #0
 8001586:	f006 f95b 	bl	8007840 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800158a:	003b      	movs	r3, r7
 800158c:	0018      	movs	r0, r3
 800158e:	2320      	movs	r3, #32
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f006 f954 	bl	8007840 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <SystemClock_Config+0xe4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a2b      	ldr	r2, [pc, #172]	; (800164c <SystemClock_Config+0xe8>)
 800159e:	401a      	ands	r2, r3
 80015a0:	4b29      	ldr	r3, [pc, #164]	; (8001648 <SystemClock_Config+0xe4>)
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	0109      	lsls	r1, r1, #4
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015aa:	0021      	movs	r1, r4
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b2:	187b      	adds	r3, r7, r1
 80015b4:	2201      	movs	r2, #1
 80015b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	2210      	movs	r2, #16
 80015bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	2202      	movs	r2, #2
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2200      	movs	r2, #0
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	02d2      	lsls	r2, r2, #11
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	03d2      	lsls	r2, r2, #15
 80015d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	0018      	movs	r0, r3
 80015de:	f002 fc91 	bl	8003f04 <HAL_RCC_OscConfig>
 80015e2:	1e03      	subs	r3, r0, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x86>
  {
    Error_Handler();
 80015e6:	f000 f833 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ea:	2120      	movs	r1, #32
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	220f      	movs	r2, #15
 80015f0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	2203      	movs	r2, #3
 80015f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015fe:	187b      	adds	r3, r7, r1
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001604:	187b      	adds	r3, r7, r1
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800160a:	187b      	adds	r3, r7, r1
 800160c:	2101      	movs	r1, #1
 800160e:	0018      	movs	r0, r3
 8001610:	f002 fff4 	bl	80045fc <HAL_RCC_ClockConfig>
 8001614:	1e03      	subs	r3, r0, #0
 8001616:	d001      	beq.n	800161c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001618:	f000 f81a 	bl	8001650 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 800161c:	003b      	movs	r3, r7
 800161e:	220c      	movs	r2, #12
 8001620:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001622:	003b      	movs	r3, r7
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001628:	003b      	movs	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800162e:	003b      	movs	r3, r7
 8001630:	0018      	movs	r0, r3
 8001632:	f003 fa07 	bl	8004a44 <HAL_RCCEx_PeriphCLKConfig>
 8001636:	1e03      	subs	r3, r0, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800163a:	f000 f809 	bl	8001650 <Error_Handler>
  }
}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b01b      	add	sp, #108	; 0x6c
 8001644:	bd90      	pop	{r4, r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	40007000 	.word	0x40007000
 800164c:	ffffe7ff 	.word	0xffffe7ff

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	e7fe      	b.n	8001658 <Error_Handler+0x8>

0800165a <nRF24_Delay_ms>:

#define NRF24_CE_HIGH           HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW            HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	0002      	movs	r2, r0
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	701a      	strb	r2, [r3, #0]
        HAL_Delay(Time);
 8001666:	1dfb      	adds	r3, r7, #7
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	0018      	movs	r0, r3
 800166c:	f000 ffca 	bl	8002604 <HAL_Delay>
}
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b002      	add	sp, #8
 8001676:	bd80      	pop	{r7, pc}

08001678 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	000a      	movs	r2, r1
 8001682:	1cfb      	adds	r3, r7, #3
 8001684:	701a      	strb	r2, [r3, #0]
        HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <nRF24_SendSpi+0x2c>)
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	1cfb      	adds	r3, r7, #3
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b29a      	uxth	r2, r3
 8001690:	23fa      	movs	r3, #250	; 0xfa
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	f003 fbb3 	bl	8004e00 <HAL_SPI_Transmit>
}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	46bd      	mov	sp, r7
 800169e:	b002      	add	sp, #8
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	20000394 	.word	0x20000394

080016a8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	000a      	movs	r2, r1
 80016b2:	1cfb      	adds	r3, r7, #3
 80016b4:	701a      	strb	r2, [r3, #0]
        HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <nRF24_ReadSpi+0x2c>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	1cfb      	adds	r3, r7, #3
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	23fa      	movs	r3, #250	; 0xfa
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	f003 fcf9 	bl	80050bc <HAL_SPI_Receive>
}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b002      	add	sp, #8
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	20000394 	.word	0x20000394

080016d8 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	0002      	movs	r2, r0
 80016e0:	1dfb      	adds	r3, r7, #7
 80016e2:	701a      	strb	r2, [r3, #0]
        uint8_t result;

        reg = NRF24_CMD_R_REGISTER | reg;
 80016e4:	1dfb      	adds	r3, r7, #7
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	1dfb      	adds	r3, r7, #7
 80016ea:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 80016ec:	23a0      	movs	r3, #160	; 0xa0
 80016ee:	05db      	lsls	r3, r3, #23
 80016f0:	2200      	movs	r2, #0
 80016f2:	2102      	movs	r1, #2
 80016f4:	0018      	movs	r0, r3
 80016f6:	f001 fdcd 	bl	8003294 <HAL_GPIO_WritePin>
        nRF24_SendSpi(&reg, 1);
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	2101      	movs	r1, #1
 80016fe:	0018      	movs	r0, r3
 8001700:	f7ff ffba 	bl	8001678 <nRF24_SendSpi>
        nRF24_ReadSpi(&result, 1);
 8001704:	240f      	movs	r4, #15
 8001706:	193b      	adds	r3, r7, r4
 8001708:	2101      	movs	r1, #1
 800170a:	0018      	movs	r0, r3
 800170c:	f7ff ffcc 	bl	80016a8 <nRF24_ReadSpi>
        NRF24_CSN_HIGH;
 8001710:	23a0      	movs	r3, #160	; 0xa0
 8001712:	05db      	lsls	r3, r3, #23
 8001714:	2201      	movs	r2, #1
 8001716:	2102      	movs	r1, #2
 8001718:	0018      	movs	r0, r3
 800171a:	f001 fdbb 	bl	8003294 <HAL_GPIO_WritePin>

        return result;
 800171e:	193b      	adds	r3, r7, r4
 8001720:	781b      	ldrb	r3, [r3, #0]
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	b005      	add	sp, #20
 8001728:	bd90      	pop	{r4, r7, pc}

0800172a <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	0011      	movs	r1, r2
 8001734:	1dfb      	adds	r3, r7, #7
 8001736:	1c02      	adds	r2, r0, #0
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	1dbb      	adds	r3, r7, #6
 800173c:	1c0a      	adds	r2, r1, #0
 800173e:	701a      	strb	r2, [r3, #0]
        reg = NRF24_CMD_R_REGISTER | reg;
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	1dfb      	adds	r3, r7, #7
 8001746:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8001748:	23a0      	movs	r3, #160	; 0xa0
 800174a:	05db      	lsls	r3, r3, #23
 800174c:	2200      	movs	r2, #0
 800174e:	2102      	movs	r1, #2
 8001750:	0018      	movs	r0, r3
 8001752:	f001 fd9f 	bl	8003294 <HAL_GPIO_WritePin>

        nRF24_SendSpi(&reg, 1);
 8001756:	1dfb      	adds	r3, r7, #7
 8001758:	2101      	movs	r1, #1
 800175a:	0018      	movs	r0, r3
 800175c:	f7ff ff8c 	bl	8001678 <nRF24_SendSpi>
        nRF24_ReadSpi(ret, len);
 8001760:	1dbb      	adds	r3, r7, #6
 8001762:	781a      	ldrb	r2, [r3, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	0011      	movs	r1, r2
 8001768:	0018      	movs	r0, r3
 800176a:	f7ff ff9d 	bl	80016a8 <nRF24_ReadSpi>

        NRF24_CSN_HIGH;
 800176e:	23a0      	movs	r3, #160	; 0xa0
 8001770:	05db      	lsls	r3, r3, #23
 8001772:	2201      	movs	r2, #1
 8001774:	2102      	movs	r1, #2
 8001776:	0018      	movs	r0, r3
 8001778:	f001 fd8c 	bl	8003294 <HAL_GPIO_WritePin>
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	b002      	add	sp, #8
 8001782:	bd80      	pop	{r7, pc}

08001784 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	0002      	movs	r2, r0
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	1dbb      	adds	r3, r7, #6
 8001792:	1c0a      	adds	r2, r1, #0
 8001794:	701a      	strb	r2, [r3, #0]
        uint8_t tmp[2];

        tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2220      	movs	r2, #32
 800179c:	4313      	orrs	r3, r2
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	240c      	movs	r4, #12
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	701a      	strb	r2, [r3, #0]
        tmp[1] = val;
 80017a6:	193b      	adds	r3, r7, r4
 80017a8:	1dba      	adds	r2, r7, #6
 80017aa:	7812      	ldrb	r2, [r2, #0]
 80017ac:	705a      	strb	r2, [r3, #1]

        NRF24_CSN_LOW;
 80017ae:	23a0      	movs	r3, #160	; 0xa0
 80017b0:	05db      	lsls	r3, r3, #23
 80017b2:	2200      	movs	r2, #0
 80017b4:	2102      	movs	r1, #2
 80017b6:	0018      	movs	r0, r3
 80017b8:	f001 fd6c 	bl	8003294 <HAL_GPIO_WritePin>

        nRF24_SendSpi(tmp, 2);
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	2102      	movs	r1, #2
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff ff59 	bl	8001678 <nRF24_SendSpi>

        NRF24_CSN_HIGH;
 80017c6:	23a0      	movs	r3, #160	; 0xa0
 80017c8:	05db      	lsls	r3, r3, #23
 80017ca:	2201      	movs	r2, #1
 80017cc:	2102      	movs	r1, #2
 80017ce:	0018      	movs	r0, r3
 80017d0:	f001 fd60 	bl	8003294 <HAL_GPIO_WritePin>
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b005      	add	sp, #20
 80017da:	bd90      	pop	{r4, r7, pc}

080017dc <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6039      	str	r1, [r7, #0]
 80017e4:	0011      	movs	r1, r2
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	1c02      	adds	r2, r0, #0
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	1dbb      	adds	r3, r7, #6
 80017ee:	1c0a      	adds	r2, r1, #0
 80017f0:	701a      	strb	r2, [r3, #0]
        reg = NRF24_CMD_W_REGISTER | reg;
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2220      	movs	r2, #32
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	1dfb      	adds	r3, r7, #7
 80017fe:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8001800:	23a0      	movs	r3, #160	; 0xa0
 8001802:	05db      	lsls	r3, r3, #23
 8001804:	2200      	movs	r2, #0
 8001806:	2102      	movs	r1, #2
 8001808:	0018      	movs	r0, r3
 800180a:	f001 fd43 	bl	8003294 <HAL_GPIO_WritePin>

        nRF24_SendSpi(&reg, 1);
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	2101      	movs	r1, #1
 8001812:	0018      	movs	r0, r3
 8001814:	f7ff ff30 	bl	8001678 <nRF24_SendSpi>
        nRF24_SendSpi(val, len);
 8001818:	1dbb      	adds	r3, r7, #6
 800181a:	781a      	ldrb	r2, [r3, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	0011      	movs	r1, r2
 8001820:	0018      	movs	r0, r3
 8001822:	f7ff ff29 	bl	8001678 <nRF24_SendSpi>

        NRF24_CSN_HIGH;
 8001826:	23a0      	movs	r3, #160	; 0xa0
 8001828:	05db      	lsls	r3, r3, #23
 800182a:	2201      	movs	r2, #1
 800182c:	2102      	movs	r1, #2
 800182e:	0018      	movs	r0, r3
 8001830:	f001 fd30 	bl	8003294 <HAL_GPIO_WritePin>
}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	b002      	add	sp, #8
 800183a:	bd80      	pop	{r7, pc}

0800183c <nRF24_TX_Mode>:
        NRF24_CE_HIGH;
        nRF24_Delay_ms(1);
}

void nRF24_TX_Mode(void)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
        NRF24_CE_LOW;
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <nRF24_TX_Mode+0x5c>)
 8001844:	2200      	movs	r2, #0
 8001846:	2110      	movs	r1, #16
 8001848:	0018      	movs	r0, r3
 800184a:	f001 fd23 	bl	8003294 <HAL_GPIO_WritePin>

        uint8_t config = nRF24_ReadConfig();
 800184e:	1dfc      	adds	r4, r7, #7
 8001850:	f000 f824 	bl	800189c <nRF24_ReadConfig>
 8001854:	0003      	movs	r3, r0
 8001856:	7023      	strb	r3, [r4, #0]
        // PWR_UP bit set
        config |= (1<<NRF24_PWR_UP);
 8001858:	1dfb      	adds	r3, r7, #7
 800185a:	1dfa      	adds	r2, r7, #7
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	2102      	movs	r1, #2
 8001860:	430a      	orrs	r2, r1
 8001862:	701a      	strb	r2, [r3, #0]
        // PRIM_RX bit low
        config &= ~(1<<NRF24_PRIM_RX);
 8001864:	1dfb      	adds	r3, r7, #7
 8001866:	1dfa      	adds	r2, r7, #7
 8001868:	7812      	ldrb	r2, [r2, #0]
 800186a:	2101      	movs	r1, #1
 800186c:	438a      	bics	r2, r1
 800186e:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 8001870:	1dfb      	adds	r3, r7, #7
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	0018      	movs	r0, r3
 8001876:	f000 f81a 	bl	80018ae <nRF24_WriteConfig>
        // Reset status
        nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 800187a:	2070      	movs	r0, #112	; 0x70
 800187c:	f000 f88e 	bl	800199c <nRF24_WriteStatus>
        // Flush RX
        nRF24_FlushRX();
 8001880:	f000 f89c 	bl	80019bc <nRF24_FlushRX>
        // Flush TX
        nRF24_FlushTX();
 8001884:	f000 f8b7 	bl	80019f6 <nRF24_FlushTX>

        nRF24_Delay_ms(1);
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff fee6 	bl	800165a <nRF24_Delay_ms>
}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b003      	add	sp, #12
 8001894:	bd90      	pop	{r4, r7, pc}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	50000400 	.word	0x50000400

0800189c <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
        return (nRF24_ReadRegister(NRF24_CONFIG));
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff ff19 	bl	80016d8 <nRF24_ReadRegister>
 80018a6:	0003      	movs	r3, r0
}
 80018a8:	0018      	movs	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	0002      	movs	r2, r0
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_CONFIG, conf);
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	0019      	movs	r1, r3
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff ff5f 	bl	8001784 <nRF24_WriteRegister>
}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b002      	add	sp, #8
 80018cc:	bd80      	pop	{r7, pc}

080018ce <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 80018ce:	b5b0      	push	{r4, r5, r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	0002      	movs	r2, r0
 80018d6:	1dfb      	adds	r3, r7, #7
 80018d8:	701a      	strb	r2, [r3, #0]
        uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80018da:	250f      	movs	r5, #15
 80018dc:	197c      	adds	r4, r7, r5
 80018de:	2006      	movs	r0, #6
 80018e0:	f7ff fefa 	bl	80016d8 <nRF24_ReadRegister>
 80018e4:	0003      	movs	r3, r0
 80018e6:	7023      	strb	r3, [r4, #0]
        rf_setup &= 0xF8; // Clear PWR bits
 80018e8:	0028      	movs	r0, r5
 80018ea:	183b      	adds	r3, r7, r0
 80018ec:	183a      	adds	r2, r7, r0
 80018ee:	7812      	ldrb	r2, [r2, #0]
 80018f0:	2107      	movs	r1, #7
 80018f2:	438a      	bics	r2, r1
 80018f4:	701a      	strb	r2, [r3, #0]
        rf_setup |= (lev<<1);
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	b25a      	sxtb	r2, r3
 80018fe:	183b      	adds	r3, r7, r0
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	b25b      	sxtb	r3, r3
 8001904:	4313      	orrs	r3, r2
 8001906:	b25a      	sxtb	r2, r3
 8001908:	183b      	adds	r3, r7, r0
 800190a:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 800190c:	183b      	adds	r3, r7, r0
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	0019      	movs	r1, r3
 8001912:	2006      	movs	r0, #6
 8001914:	f7ff ff36 	bl	8001784 <nRF24_WriteRegister>
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b004      	add	sp, #16
 800191e:	bdb0      	pop	{r4, r5, r7, pc}

08001920 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	0002      	movs	r2, r0
 8001928:	1dfb      	adds	r3, r7, #7
 800192a:	701a      	strb	r2, [r3, #0]
        uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800192c:	250f      	movs	r5, #15
 800192e:	197c      	adds	r4, r7, r5
 8001930:	2006      	movs	r0, #6
 8001932:	f7ff fed1 	bl	80016d8 <nRF24_ReadRegister>
 8001936:	0003      	movs	r3, r0
 8001938:	7023      	strb	r3, [r4, #0]
        rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 800193a:	0028      	movs	r0, r5
 800193c:	183b      	adds	r3, r7, r0
 800193e:	183a      	adds	r2, r7, r0
 8001940:	7812      	ldrb	r2, [r2, #0]
 8001942:	2128      	movs	r1, #40	; 0x28
 8001944:	438a      	bics	r2, r1
 8001946:	701a      	strb	r2, [r3, #0]
        if(dr == NRF24_RF_DR_250KBPS)
 8001948:	1dfb      	adds	r3, r7, #7
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d106      	bne.n	800195e <nRF24_SetDataRate+0x3e>
                rf_setup |= (1<<NRF24_RF_DR_LOW);
 8001950:	183b      	adds	r3, r7, r0
 8001952:	183a      	adds	r2, r7, r0
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	2120      	movs	r1, #32
 8001958:	430a      	orrs	r2, r1
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	e00a      	b.n	8001974 <nRF24_SetDataRate+0x54>
        else if(dr == NRF24_RF_DR_2MBPS)
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d106      	bne.n	8001974 <nRF24_SetDataRate+0x54>
                rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8001966:	220f      	movs	r2, #15
 8001968:	18bb      	adds	r3, r7, r2
 800196a:	18ba      	adds	r2, r7, r2
 800196c:	7812      	ldrb	r2, [r2, #0]
 800196e:	2108      	movs	r1, #8
 8001970:	430a      	orrs	r2, r1
 8001972:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001974:	230f      	movs	r3, #15
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	0019      	movs	r1, r3
 800197c:	2006      	movs	r0, #6
 800197e:	f7ff ff01 	bl	8001784 <nRF24_WriteRegister>
}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	b004      	add	sp, #16
 8001988:	bdb0      	pop	{r4, r5, r7, pc}

0800198a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
        return (nRF24_ReadRegister(NRF24_STATUS));
 800198e:	2007      	movs	r0, #7
 8001990:	f7ff fea2 	bl	80016d8 <nRF24_ReadRegister>
 8001994:	0003      	movs	r3, r0
}
 8001996:	0018      	movs	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	0002      	movs	r2, r0
 80019a4:	1dfb      	adds	r3, r7, #7
 80019a6:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_STATUS, st);
 80019a8:	1dfb      	adds	r3, r7, #7
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	0019      	movs	r1, r3
 80019ae:	2007      	movs	r0, #7
 80019b0:	f7ff fee8 	bl	8001784 <nRF24_WriteRegister>
}
 80019b4:	46c0      	nop			; (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b002      	add	sp, #8
 80019ba:	bd80      	pop	{r7, pc}

080019bc <nRF24_FlushRX>:
{
        return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
        uint8_t command = NRF24_CMD_FLUSH_RX;
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	22e2      	movs	r2, #226	; 0xe2
 80019c6:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 80019c8:	23a0      	movs	r3, #160	; 0xa0
 80019ca:	05db      	lsls	r3, r3, #23
 80019cc:	2200      	movs	r2, #0
 80019ce:	2102      	movs	r1, #2
 80019d0:	0018      	movs	r0, r3
 80019d2:	f001 fc5f 	bl	8003294 <HAL_GPIO_WritePin>
        nRF24_SendSpi(&command, 1);
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	2101      	movs	r1, #1
 80019da:	0018      	movs	r0, r3
 80019dc:	f7ff fe4c 	bl	8001678 <nRF24_SendSpi>
        NRF24_CSN_HIGH;
 80019e0:	23a0      	movs	r3, #160	; 0xa0
 80019e2:	05db      	lsls	r3, r3, #23
 80019e4:	2201      	movs	r2, #1
 80019e6:	2102      	movs	r1, #2
 80019e8:	0018      	movs	r0, r3
 80019ea:	f001 fc53 	bl	8003294 <HAL_GPIO_WritePin>
}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
        uint8_t command = NRF24_CMD_FLUSH_TX;
 80019fc:	1dfb      	adds	r3, r7, #7
 80019fe:	22e1      	movs	r2, #225	; 0xe1
 8001a00:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8001a02:	23a0      	movs	r3, #160	; 0xa0
 8001a04:	05db      	lsls	r3, r3, #23
 8001a06:	2200      	movs	r2, #0
 8001a08:	2102      	movs	r1, #2
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f001 fc42 	bl	8003294 <HAL_GPIO_WritePin>
        nRF24_SendSpi(&command, 1);
 8001a10:	1dfb      	adds	r3, r7, #7
 8001a12:	2101      	movs	r1, #1
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7ff fe2f 	bl	8001678 <nRF24_SendSpi>
        NRF24_CSN_HIGH;
 8001a1a:	23a0      	movs	r3, #160	; 0xa0
 8001a1c:	05db      	lsls	r3, r3, #23
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2102      	movs	r1, #2
 8001a22:	0018      	movs	r0, r3
 8001a24:	f001 fc36 	bl	8003294 <HAL_GPIO_WritePin>
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8001a30:	b5b0      	push	{r4, r5, r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	0002      	movs	r2, r0
 8001a38:	1dfb      	adds	r3, r7, #7
 8001a3a:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 8001a3c:	250f      	movs	r5, #15
 8001a3e:	197c      	adds	r4, r7, r5
 8001a40:	f7ff ff2c 	bl	800189c <nRF24_ReadConfig>
 8001a44:	0003      	movs	r3, r0
 8001a46:	7023      	strb	r3, [r4, #0]

        if(onoff)
 8001a48:	1dfb      	adds	r3, r7, #7
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <nRF24_EnableCRC+0x2e>
                config |= (1<<NRF24_EN_CRC);
 8001a50:	197b      	adds	r3, r7, r5
 8001a52:	197a      	adds	r2, r7, r5
 8001a54:	7812      	ldrb	r2, [r2, #0]
 8001a56:	2108      	movs	r1, #8
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e006      	b.n	8001a6c <nRF24_EnableCRC+0x3c>
        else
                config &= ~(1<<NRF24_EN_CRC);
 8001a5e:	220f      	movs	r2, #15
 8001a60:	18bb      	adds	r3, r7, r2
 8001a62:	18ba      	adds	r2, r7, r2
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	2108      	movs	r1, #8
 8001a68:	438a      	bics	r2, r1
 8001a6a:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 8001a6c:	230f      	movs	r3, #15
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	0018      	movs	r0, r3
 8001a74:	f7ff ff1b 	bl	80018ae <nRF24_WriteConfig>
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b004      	add	sp, #16
 8001a7e:	bdb0      	pop	{r4, r5, r7, pc}

08001a80 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8001a80:	b5b0      	push	{r4, r5, r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	0002      	movs	r2, r0
 8001a88:	1dfb      	adds	r3, r7, #7
 8001a8a:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 8001a8c:	250f      	movs	r5, #15
 8001a8e:	197c      	adds	r4, r7, r5
 8001a90:	f7ff ff04 	bl	800189c <nRF24_ReadConfig>
 8001a94:	0003      	movs	r3, r0
 8001a96:	7023      	strb	r3, [r4, #0]
        if(crcl == NRF24_CRC_WIDTH_2B)
 8001a98:	1dfb      	adds	r3, r7, #7
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d106      	bne.n	8001aae <nRF24_SetCRCLength+0x2e>
                config |= (1<<NRF24_CRCO);
 8001aa0:	197b      	adds	r3, r7, r5
 8001aa2:	197a      	adds	r2, r7, r5
 8001aa4:	7812      	ldrb	r2, [r2, #0]
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	e006      	b.n	8001abc <nRF24_SetCRCLength+0x3c>
        else
                config &= ~(1<<NRF24_CRCO);
 8001aae:	220f      	movs	r2, #15
 8001ab0:	18bb      	adds	r3, r7, r2
 8001ab2:	18ba      	adds	r2, r7, r2
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	438a      	bics	r2, r1
 8001aba:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 8001abc:	230f      	movs	r3, #15
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7ff fef3 	bl	80018ae <nRF24_WriteConfig>
}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b004      	add	sp, #16
 8001ace:	bdb0      	pop	{r4, r5, r7, pc}

08001ad0 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{ //ard = delay   arc = count (ilość i odległość czasowa
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	1dfb      	adds	r3, r7, #7
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	1dbb      	adds	r3, r7, #6
 8001ade:	1c0a      	adds	r2, r1, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
        // ard * 250us, arc repeats
        nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	b25a      	sxtb	r2, r3
 8001aea:	1dbb      	adds	r3, r7, #6
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	210f      	movs	r1, #15
 8001af2:	400b      	ands	r3, r1
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	4313      	orrs	r3, r2
 8001af8:	b25b      	sxtb	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	0019      	movs	r1, r3
 8001afe:	2004      	movs	r0, #4
 8001b00:	f7ff fe40 	bl	8001784 <nRF24_WriteRegister>
}
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	0002      	movs	r2, r0
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8001b18:	1dfb      	adds	r3, r7, #7
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	227f      	movs	r2, #127	; 0x7f
 8001b1e:	4013      	ands	r3, r2
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	0019      	movs	r1, r3
 8001b24:	2005      	movs	r0, #5
 8001b26:	f7ff fe2d 	bl	8001784 <nRF24_WriteRegister>
}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b002      	add	sp, #8
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <nRF24_EnablePipe>:
                pipe = 5; // Block too high pipe number
        nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8001b32:	b5b0      	push	{r4, r5, r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	0002      	movs	r2, r0
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	1dbb      	adds	r3, r7, #6
 8001b40:	1c0a      	adds	r2, r1, #0
 8001b42:	701a      	strb	r2, [r3, #0]
        if(pipe > 5)
 8001b44:	1dfb      	adds	r3, r7, #7
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d902      	bls.n	8001b52 <nRF24_EnablePipe+0x20>
                pipe = 5; // Block too high pipe number
 8001b4c:	1dfb      	adds	r3, r7, #7
 8001b4e:	2205      	movs	r2, #5
 8001b50:	701a      	strb	r2, [r3, #0]
        uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8001b52:	250f      	movs	r5, #15
 8001b54:	197c      	adds	r4, r7, r5
 8001b56:	2002      	movs	r0, #2
 8001b58:	f7ff fdbe 	bl	80016d8 <nRF24_ReadRegister>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	7023      	strb	r3, [r4, #0]
        if(onoff == 1)
 8001b60:	1dbb      	adds	r3, r7, #6
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d10d      	bne.n	8001b84 <nRF24_EnablePipe+0x52>
                enable_pipe |= (1<<pipe);
 8001b68:	1dfb      	adds	r3, r7, #7
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	0013      	movs	r3, r2
 8001b72:	b25a      	sxtb	r2, r3
 8001b74:	197b      	adds	r3, r7, r5
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b25b      	sxtb	r3, r3
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	b25a      	sxtb	r2, r3
 8001b7e:	197b      	adds	r3, r7, r5
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	e00f      	b.n	8001ba4 <nRF24_EnablePipe+0x72>
        else
                enable_pipe &= ~(1<<pipe);
 8001b84:	1dfb      	adds	r3, r7, #7
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	b25b      	sxtb	r3, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	b25b      	sxtb	r3, r3
 8001b94:	210f      	movs	r1, #15
 8001b96:	187a      	adds	r2, r7, r1
 8001b98:	7812      	ldrb	r2, [r2, #0]
 8001b9a:	b252      	sxtb	r2, r2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	b25a      	sxtb	r2, r3
 8001ba0:	187b      	adds	r3, r7, r1
 8001ba2:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	0019      	movs	r1, r3
 8001bac:	2002      	movs	r0, #2
 8001bae:	f7ff fde9 	bl	8001784 <nRF24_WriteRegister>
}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b004      	add	sp, #16
 8001bb8:	bdb0      	pop	{r4, r5, r7, pc}

08001bba <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8001bba:	b5b0      	push	{r4, r5, r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	1dbb      	adds	r3, r7, #6
 8001bc8:	1c0a      	adds	r2, r1, #0
 8001bca:	701a      	strb	r2, [r3, #0]
        if(pipe > 5)
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d902      	bls.n	8001bda <nRF24_AutoACK+0x20>
                pipe = 5; // Block too high pipe number
 8001bd4:	1dfb      	adds	r3, r7, #7
 8001bd6:	2205      	movs	r2, #5
 8001bd8:	701a      	strb	r2, [r3, #0]
        uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8001bda:	250f      	movs	r5, #15
 8001bdc:	197c      	adds	r4, r7, r5
 8001bde:	2001      	movs	r0, #1
 8001be0:	f7ff fd7a 	bl	80016d8 <nRF24_ReadRegister>
 8001be4:	0003      	movs	r3, r0
 8001be6:	7023      	strb	r3, [r4, #0]
        if(onoff == 1)
 8001be8:	1dbb      	adds	r3, r7, #6
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d10d      	bne.n	8001c0c <nRF24_AutoACK+0x52>
                enaa |= (1<<pipe);
 8001bf0:	1dfb      	adds	r3, r7, #7
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	b25a      	sxtb	r2, r3
 8001bfc:	197b      	adds	r3, r7, r5
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b25b      	sxtb	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b25a      	sxtb	r2, r3
 8001c06:	197b      	adds	r3, r7, r5
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	e00f      	b.n	8001c2c <nRF24_AutoACK+0x72>
        else
                enaa &= ~(1<<pipe);
 8001c0c:	1dfb      	adds	r3, r7, #7
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2201      	movs	r2, #1
 8001c12:	409a      	lsls	r2, r3
 8001c14:	0013      	movs	r3, r2
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	b25b      	sxtb	r3, r3
 8001c1c:	210f      	movs	r1, #15
 8001c1e:	187a      	adds	r2, r7, r1
 8001c20:	7812      	ldrb	r2, [r2, #0]
 8001c22:	b252      	sxtb	r2, r2
 8001c24:	4013      	ands	r3, r2
 8001c26:	b25a      	sxtb	r2, r3
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	0019      	movs	r1, r3
 8001c34:	2001      	movs	r0, #1
 8001c36:	f7ff fda5 	bl	8001784 <nRF24_WriteRegister>
}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b004      	add	sp, #16
 8001c40:	bdb0      	pop	{r4, r5, r7, pc}

08001c42 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	0002      	movs	r2, r0
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	701a      	strb	r2, [r3, #0]
        if(size > 5)
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d902      	bls.n	8001c5c <nRF24_SetAddressWidth+0x1a>
                size = 5; // Maximum are 5 bytes
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	2205      	movs	r2, #5
 8001c5a:	701a      	strb	r2, [r3, #0]
        if(size < 3)
 8001c5c:	1dfb      	adds	r3, r7, #7
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d802      	bhi.n	8001c6a <nRF24_SetAddressWidth+0x28>
                size = 3; // Minimum are 3 bytes
 8001c64:	1dfb      	adds	r3, r7, #7
 8001c66:	2203      	movs	r2, #3
 8001c68:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8001c6a:	1dfb      	adds	r3, r7, #7
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	3b02      	subs	r3, #2
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2203      	movs	r2, #3
 8001c74:	4013      	ands	r3, r2
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	0019      	movs	r1, r3
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	f7ff fd82 	bl	8001784 <nRF24_WriteRegister>
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b002      	add	sp, #8
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	0002      	movs	r2, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	701a      	strb	r2, [r3, #0]
        // pipe 0 and pipe 1 are fully 40-bits storaged
        // pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
        // pipe 0 and 1 are LSByte first so they are needed to reverse address
        if((pipe == 0) || (pipe == 1))
 8001c96:	1dfb      	adds	r3, r7, #7
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <nRF24_SetRXAddress+0x1e>
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d126      	bne.n	8001cf4 <nRF24_SetRXAddress+0x6c>
        {
                uint8_t i;
                uint8_t address_rev[NRF24_ADDR_SIZE];
                for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001ca6:	230f      	movs	r3, #15
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
 8001cae:	e011      	b.n	8001cd4 <nRF24_SetRXAddress+0x4c>
                        address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001cb0:	200f      	movs	r0, #15
 8001cb2:	183b      	adds	r3, r7, r0
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	18d2      	adds	r2, r2, r3
 8001cba:	183b      	adds	r3, r7, r0
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2102      	movs	r1, #2
 8001cc0:	1acb      	subs	r3, r1, r3
 8001cc2:	7811      	ldrb	r1, [r2, #0]
 8001cc4:	220c      	movs	r2, #12
 8001cc6:	18ba      	adds	r2, r7, r2
 8001cc8:	54d1      	strb	r1, [r2, r3]
                for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001cca:	183b      	adds	r3, r7, r0
 8001ccc:	781a      	ldrb	r2, [r3, #0]
 8001cce:	183b      	adds	r3, r7, r0
 8001cd0:	3201      	adds	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d9e8      	bls.n	8001cb0 <nRF24_SetRXAddress+0x28>
                nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8001cde:	1dfb      	adds	r3, r7, #7
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	330a      	adds	r3, #10
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	18b9      	adds	r1, r7, r2
 8001cea:	2203      	movs	r2, #3
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7ff fd75 	bl	80017dc <nRF24_WriteRegisters>
        {
 8001cf2:	e00b      	b.n	8001d0c <nRF24_SetRXAddress+0x84>
        }
        else
                nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001cf4:	1dfb      	adds	r3, r7, #7
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	330a      	adds	r3, #10
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	3302      	adds	r3, #2
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	0019      	movs	r1, r3
 8001d04:	0010      	movs	r0, r2
 8001d06:	f7ff fd3d 	bl	8001784 <nRF24_WriteRegister>
}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b004      	add	sp, #16
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
        // TX address is storaged similar to RX pipe 0 - LSByte first
        uint8_t i;
        uint8_t address_rev[NRF24_ADDR_SIZE];

        nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2203      	movs	r2, #3
 8001d22:	0019      	movs	r1, r3
 8001d24:	200a      	movs	r0, #10
 8001d26:	f7ff fd00 	bl	800172a <nRF24_ReadRegisters>
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001d2a:	230f      	movs	r3, #15
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	e010      	b.n	8001d56 <nRF24_SetTXAddress+0x42>
                addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001d34:	200f      	movs	r0, #15
 8001d36:	183b      	adds	r3, r7, r0
 8001d38:	781a      	ldrb	r2, [r3, #0]
 8001d3a:	183b      	adds	r3, r7, r0
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2102      	movs	r1, #2
 8001d40:	1acb      	subs	r3, r1, r3
 8001d42:	210c      	movs	r1, #12
 8001d44:	1879      	adds	r1, r7, r1
 8001d46:	5c89      	ldrb	r1, [r1, r2]
 8001d48:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <nRF24_SetTXAddress+0xa4>)
 8001d4a:	54d1      	strb	r1, [r2, r3]
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001d4c:	183b      	adds	r3, r7, r0
 8001d4e:	781a      	ldrb	r2, [r3, #0]
 8001d50:	183b      	adds	r3, r7, r0
 8001d52:	3201      	adds	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	220f      	movs	r2, #15
 8001d58:	18bb      	adds	r3, r7, r2
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d9e9      	bls.n	8001d34 <nRF24_SetTXAddress+0x20>

        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001d60:	18bb      	adds	r3, r7, r2
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	e011      	b.n	8001d8c <nRF24_SetTXAddress+0x78>
                address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001d68:	200f      	movs	r0, #15
 8001d6a:	183b      	adds	r3, r7, r0
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	18d2      	adds	r2, r2, r3
 8001d72:	183b      	adds	r3, r7, r0
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2102      	movs	r1, #2
 8001d78:	1acb      	subs	r3, r1, r3
 8001d7a:	7811      	ldrb	r1, [r2, #0]
 8001d7c:	220c      	movs	r2, #12
 8001d7e:	18ba      	adds	r2, r7, r2
 8001d80:	54d1      	strb	r1, [r2, r3]
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001d82:	183b      	adds	r3, r7, r0
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	183b      	adds	r3, r7, r0
 8001d88:	3201      	adds	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	230f      	movs	r3, #15
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d9e8      	bls.n	8001d68 <nRF24_SetTXAddress+0x54>
        //make pipe 0 address backup;

        nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001d96:	240c      	movs	r4, #12
 8001d98:	193b      	adds	r3, r7, r4
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	200a      	movs	r0, #10
 8001da0:	f7ff fd1c 	bl	80017dc <nRF24_WriteRegisters>
        nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8001da4:	193b      	adds	r3, r7, r4
 8001da6:	2203      	movs	r2, #3
 8001da8:	0019      	movs	r1, r3
 8001daa:	2010      	movs	r0, #16
 8001dac:	f7ff fd16 	bl	80017dc <nRF24_WriteRegisters>

}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b005      	add	sp, #20
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	20000398 	.word	0x20000398

08001dbc <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
        uint8_t status = nRF24_ReadStatus();
 8001dc2:	1dfc      	adds	r4, r7, #7
 8001dc4:	f7ff fde1 	bl	800198a <nRF24_ReadStatus>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	7023      	strb	r3, [r4, #0]
        status |= (7<<4); // Clear bits 4, 5, 6.
 8001dcc:	1dfb      	adds	r3, r7, #7
 8001dce:	1dfa      	adds	r2, r7, #7
 8001dd0:	7812      	ldrb	r2, [r2, #0]
 8001dd2:	2170      	movs	r1, #112	; 0x70
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	701a      	strb	r2, [r3, #0]
        nRF24_WriteStatus(status);
 8001dd8:	1dfb      	adds	r3, r7, #7
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7ff fddd 	bl	800199c <nRF24_WriteStatus>
}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b003      	add	sp, #12
 8001de8:	bd90      	pop	{r4, r7, pc}

08001dea <nRF24_EnableRXDataReadyIRQ>:
    }
    return result;
}

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8001dea:	b5b0      	push	{r4, r5, r7, lr}
 8001dec:	b084      	sub	sp, #16
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	0002      	movs	r2, r0
 8001df2:	1dfb      	adds	r3, r7, #7
 8001df4:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 8001df6:	250f      	movs	r5, #15
 8001df8:	197c      	adds	r4, r7, r5
 8001dfa:	f7ff fd4f 	bl	800189c <nRF24_ReadConfig>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 8001e02:	1dfb      	adds	r3, r7, #7
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <nRF24_EnableRXDataReadyIRQ+0x2e>
                config |= (1<<NRF24_RX_DR);
 8001e0a:	197b      	adds	r3, r7, r5
 8001e0c:	197a      	adds	r2, r7, r5
 8001e0e:	7812      	ldrb	r2, [r2, #0]
 8001e10:	2140      	movs	r1, #64	; 0x40
 8001e12:	430a      	orrs	r2, r1
 8001e14:	701a      	strb	r2, [r3, #0]
 8001e16:	e006      	b.n	8001e26 <nRF24_EnableRXDataReadyIRQ+0x3c>
        else
                config &= ~(1<<NRF24_RX_DR);
 8001e18:	220f      	movs	r2, #15
 8001e1a:	18bb      	adds	r3, r7, r2
 8001e1c:	18ba      	adds	r2, r7, r2
 8001e1e:	7812      	ldrb	r2, [r2, #0]
 8001e20:	2140      	movs	r1, #64	; 0x40
 8001e22:	438a      	bics	r2, r1
 8001e24:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 8001e26:	230f      	movs	r3, #15
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7ff fd3e 	bl	80018ae <nRF24_WriteConfig>
}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b004      	add	sp, #16
 8001e38:	bdb0      	pop	{r4, r5, r7, pc}

08001e3a <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001e3a:	b5b0      	push	{r4, r5, r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	0002      	movs	r2, r0
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 8001e46:	250f      	movs	r5, #15
 8001e48:	197c      	adds	r4, r7, r5
 8001e4a:	f7ff fd27 	bl	800189c <nRF24_ReadConfig>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <nRF24_EnableTXDataSentIRQ+0x2e>
                config |= (1<<NRF24_TX_DS);
 8001e5a:	197b      	adds	r3, r7, r5
 8001e5c:	197a      	adds	r2, r7, r5
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	2120      	movs	r1, #32
 8001e62:	430a      	orrs	r2, r1
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	e006      	b.n	8001e76 <nRF24_EnableTXDataSentIRQ+0x3c>
        else
                config &= ~(1<<NRF24_TX_DS);
 8001e68:	220f      	movs	r2, #15
 8001e6a:	18bb      	adds	r3, r7, r2
 8001e6c:	18ba      	adds	r2, r7, r2
 8001e6e:	7812      	ldrb	r2, [r2, #0]
 8001e70:	2120      	movs	r1, #32
 8001e72:	438a      	bics	r2, r1
 8001e74:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 8001e76:	230f      	movs	r3, #15
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7ff fd16 	bl	80018ae <nRF24_WriteConfig>
}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b004      	add	sp, #16
 8001e88:	bdb0      	pop	{r4, r5, r7, pc}

08001e8a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8001e8a:	b5b0      	push	{r4, r5, r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	0002      	movs	r2, r0
 8001e92:	1dfb      	adds	r3, r7, #7
 8001e94:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 8001e96:	250f      	movs	r5, #15
 8001e98:	197c      	adds	r4, r7, r5
 8001e9a:	f7ff fcff 	bl	800189c <nRF24_ReadConfig>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 8001ea2:	1dfb      	adds	r3, r7, #7
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <nRF24_EnableMaxRetransmitIRQ+0x2e>
                config |= (1<<NRF24_MAX_RT);
 8001eaa:	197b      	adds	r3, r7, r5
 8001eac:	197a      	adds	r2, r7, r5
 8001eae:	7812      	ldrb	r2, [r2, #0]
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e006      	b.n	8001ec6 <nRF24_EnableMaxRetransmitIRQ+0x3c>
        else
                config &= ~(1<<NRF24_MAX_RT);
 8001eb8:	220f      	movs	r2, #15
 8001eba:	18bb      	adds	r3, r7, r2
 8001ebc:	18ba      	adds	r2, r7, r2
 8001ebe:	7812      	ldrb	r2, [r2, #0]
 8001ec0:	2110      	movs	r1, #16
 8001ec2:	438a      	bics	r2, r1
 8001ec4:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 8001ec6:	230f      	movs	r3, #15
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7ff fcee 	bl	80018ae <nRF24_WriteConfig>
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b004      	add	sp, #16
 8001ed8:	bdb0      	pop	{r4, r5, r7, pc}

08001eda <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	000a      	movs	r2, r1
 8001ee4:	1cfb      	adds	r3, r7, #3
 8001ee6:	701a      	strb	r2, [r3, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
        nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8001ee8:	1cfb      	adds	r3, r7, #3
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	0019      	movs	r1, r3
 8001ef0:	20a0      	movs	r0, #160	; 0xa0
 8001ef2:	f7ff fc73 	bl	80017dc <nRF24_WriteRegisters>
#else
        nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b002      	add	sp, #8
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
        uint8_t status;
        NRF24_CE_HIGH;
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <nRF24_WaitTX+0x50>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	2110      	movs	r1, #16
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f001 f9c1 	bl	8003294 <HAL_GPIO_WritePin>
        nRF24_Delay_ms(1);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f7ff fba1 	bl	800165a <nRF24_Delay_ms>
        NRF24_CE_LOW;
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <nRF24_WaitTX+0x50>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2110      	movs	r1, #16
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f001 f9b8 	bl	8003294 <HAL_GPIO_WritePin>
        do
        {
                nRF24_Delay_ms(1);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f7ff fb98 	bl	800165a <nRF24_Delay_ms>
                status = nRF24_ReadStatus();
 8001f2a:	1dfc      	adds	r4, r7, #7
 8001f2c:	f7ff fd2d 	bl	800198a <nRF24_ReadStatus>
 8001f30:	0003      	movs	r3, r0
 8001f32:	7023      	strb	r3, [r4, #0]
        }while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8001f34:	1dfb      	adds	r3, r7, #7
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2210      	movs	r2, #16
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d104      	bne.n	8001f48 <nRF24_WaitTX+0x48>
 8001f3e:	1dfb      	adds	r3, r7, #7
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2220      	movs	r2, #32
 8001f44:	4013      	ands	r3, r2
 8001f46:	d0ed      	beq.n	8001f24 <nRF24_WaitTX+0x24>

}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b003      	add	sp, #12
 8001f4e:	bd90      	pop	{r4, r7, pc}
 8001f50:	50000400 	.word	0x50000400

08001f54 <nRF24_Init>:
                nrf24_mr_flag = 0;
        }
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
        hspi_nrf = hspi;
 8001f5c:	4b31      	ldr	r3, [pc, #196]	; (8002024 <nRF24_Init+0xd0>)
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	601a      	str	r2, [r3, #0]

        NRF24_CE_LOW;
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <nRF24_Init+0xd4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	2110      	movs	r1, #16
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f001 f993 	bl	8003294 <HAL_GPIO_WritePin>
        NRF24_CSN_HIGH;
 8001f6e:	23a0      	movs	r3, #160	; 0xa0
 8001f70:	05db      	lsls	r3, r3, #23
 8001f72:	2201      	movs	r2, #1
 8001f74:	2102      	movs	r1, #2
 8001f76:	0018      	movs	r0, r3
 8001f78:	f001 f98c 	bl	8003294 <HAL_GPIO_WritePin>

        nRF24_Delay_ms(5); // Wait for radio power up
 8001f7c:	2005      	movs	r0, #5
 8001f7e:	f7ff fb6c 	bl	800165a <nRF24_Delay_ms>

        nRF24_SetPALevel( NRF24_PA_PWR_0dBM); // Radio power NRF24_PA_PWR_0dBM
 8001f82:	2003      	movs	r0, #3
 8001f84:	f7ff fca3 	bl	80018ce <nRF24_SetPALevel>
        nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f7ff fcc9 	bl	8001920 <nRF24_SetDataRate>
        nRF24_EnableCRC(1); // Enable CRC
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f7ff fd4e 	bl	8001a30 <nRF24_EnableCRC>
        nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B);//1==NRF24_CRC_WIDTH_2B); // CRC Length 1 byte _1B
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7ff fd73 	bl	8001a80 <nRF24_SetCRCLength>
//      nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
        nRF24_SetRetries(5, 15); // 1000us, 7 times //5,15 lub 4,7
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	2005      	movs	r0, #5
 8001f9e:	f7ff fd97 	bl	8001ad0 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
        nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8001fa2:	201d      	movs	r0, #29
 8001fa4:	f7ff fb98 	bl	80016d8 <nRF24_ReadRegister>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	001a      	movs	r2, r3
 8001fac:	2304      	movs	r3, #4
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	201d      	movs	r0, #29
 8001fb6:	f7ff fbe5 	bl	8001784 <nRF24_WriteRegister>
        nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8001fba:	213f      	movs	r1, #63	; 0x3f
 8001fbc:	201c      	movs	r0, #28
 8001fbe:	f7ff fbe1 	bl	8001784 <nRF24_WriteRegister>
#else
        nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
        nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
        nRF24_SetRFChannel(0x4c); // Set RF channel for transmission 10
 8001fc2:	204c      	movs	r0, #76	; 0x4c
 8001fc4:	f7ff fda2 	bl	8001b0c <nRF24_SetRFChannel>
        nRF24_EnablePipe(0, 1); // Enable pipe 0
 8001fc8:	2101      	movs	r1, #1
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff fdb1 	bl	8001b32 <nRF24_EnablePipe>
        nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f7ff fe36 	bl	8001c42 <nRF24_SetAddressWidth>
        nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff fdee 	bl	8001bba <nRF24_AutoACK>

        nRF24_WriteRegister(NRF24_RF_SETUP,0x5); //skopiowane z RPi ustawienia rejestrów
 8001fde:	2105      	movs	r1, #5
 8001fe0:	2006      	movs	r0, #6
 8001fe2:	f7ff fbcf 	bl	8001784 <nRF24_WriteRegister>
        nRF24_WriteRegister(NRF24_FEATURE,0x6); //skopiowane z RPi ustawienia rejestrów (ważne, aby były te same)
 8001fe6:	2106      	movs	r1, #6
 8001fe8:	201d      	movs	r0, #29
 8001fea:	f7ff fbcb 	bl	8001784 <nRF24_WriteRegister>
        nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8001fee:	2002      	movs	r0, #2
 8001ff0:	f7ff fc96 	bl	8001920 <nRF24_SetDataRate>
    nRF24_SetAddressWidth(3); //adres 3 znaki a nie 5
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	f7ff fe24 	bl	8001c42 <nRF24_SetAddressWidth>

        nRF24_Delay_ms(1);
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f7ff fb2d 	bl	800165a <nRF24_Delay_ms>

        nRF24_EnableRXDataReadyIRQ(1); //receiver irq
 8002000:	2001      	movs	r0, #1
 8002002:	f7ff fef2 	bl	8001dea <nRF24_EnableRXDataReadyIRQ>
        nRF24_EnableTXDataSentIRQ(0);
 8002006:	2000      	movs	r0, #0
 8002008:	f7ff ff17 	bl	8001e3a <nRF24_EnableTXDataSentIRQ>
        nRF24_EnableMaxRetransmitIRQ(0);
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff ff3c 	bl	8001e8a <nRF24_EnableMaxRetransmitIRQ>

        nRF24_Delay_ms(1);
 8002012:	2001      	movs	r0, #1
 8002014:	f7ff fb21 	bl	800165a <nRF24_Delay_ms>

        nRF24_ClearInterrupts();
 8002018:	f7ff fed0 	bl	8001dbc <nRF24_ClearInterrupts>
}
 800201c:	46c0      	nop			; (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	b002      	add	sp, #8
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000394 	.word	0x20000394
 8002028:	50000400 	.word	0x50000400

0800202c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_SPI1_Init+0x68>)
 8002032:	4a19      	ldr	r2, [pc, #100]	; (8002098 <MX_SPI1_Init+0x6c>)
 8002034:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <MX_SPI1_Init+0x68>)
 8002038:	2282      	movs	r2, #130	; 0x82
 800203a:	0052      	lsls	r2, r2, #1
 800203c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MX_SPI1_Init+0x68>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <MX_SPI1_Init+0x68>)
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_SPI1_Init+0x68>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <MX_SPI1_Init+0x68>)
 8002052:	2200      	movs	r2, #0
 8002054:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_SPI1_Init+0x68>)
 8002058:	2280      	movs	r2, #128	; 0x80
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <MX_SPI1_Init+0x68>)
 8002060:	2200      	movs	r2, #0
 8002062:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <MX_SPI1_Init+0x68>)
 8002066:	2200      	movs	r2, #0
 8002068:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <MX_SPI1_Init+0x68>)
 800206c:	2200      	movs	r2, #0
 800206e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <MX_SPI1_Init+0x68>)
 8002072:	2200      	movs	r2, #0
 8002074:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <MX_SPI1_Init+0x68>)
 8002078:	2207      	movs	r2, #7
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <MX_SPI1_Init+0x68>)
 800207e:	0018      	movs	r0, r3
 8002080:	f002 fe2a 	bl	8004cd8 <HAL_SPI_Init>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d001      	beq.n	800208c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002088:	f7ff fae2 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	2000039c 	.word	0x2000039c
 8002098:	40013000 	.word	0x40013000

0800209c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	240c      	movs	r4, #12
 80020a6:	193b      	adds	r3, r7, r4
 80020a8:	0018      	movs	r0, r3
 80020aa:	2314      	movs	r3, #20
 80020ac:	001a      	movs	r2, r3
 80020ae:	2100      	movs	r1, #0
 80020b0:	f005 fbc6 	bl	8007840 <memset>
  if(spiHandle->Instance==SPI1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a18      	ldr	r2, [pc, #96]	; (800211c <HAL_SPI_MspInit+0x80>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d129      	bne.n	8002112 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_SPI_MspInit+0x84>)
 80020c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <HAL_SPI_MspInit+0x84>)
 80020c4:	2180      	movs	r1, #128	; 0x80
 80020c6:	0149      	lsls	r1, r1, #5
 80020c8:	430a      	orrs	r2, r1
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_SPI_MspInit+0x84>)
 80020ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_SPI_MspInit+0x84>)
 80020d2:	2101      	movs	r1, #1
 80020d4:	430a      	orrs	r2, r1
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_SPI_MspInit+0x84>)
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	2201      	movs	r2, #1
 80020de:	4013      	ands	r3, r2
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020e4:	0021      	movs	r1, r4
 80020e6:	187b      	adds	r3, r7, r1
 80020e8:	22e0      	movs	r2, #224	; 0xe0
 80020ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	2202      	movs	r2, #2
 80020f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	187b      	adds	r3, r7, r1
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	2203      	movs	r2, #3
 80020fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	187a      	adds	r2, r7, r1
 8002106:	23a0      	movs	r3, #160	; 0xa0
 8002108:	05db      	lsls	r3, r3, #23
 800210a:	0011      	movs	r1, r2
 800210c:	0018      	movs	r0, r3
 800210e:	f000 ff43 	bl	8002f98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b009      	add	sp, #36	; 0x24
 8002118:	bd90      	pop	{r4, r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	40013000 	.word	0x40013000
 8002120:	40021000 	.word	0x40021000

08002124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <HAL_MspInit+0x24>)
 800212a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_MspInit+0x24>)
 800212e:	2101      	movs	r1, #1
 8002130:	430a      	orrs	r2, r1
 8002132:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <HAL_MspInit+0x24>)
 8002136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_MspInit+0x24>)
 800213a:	2180      	movs	r1, #128	; 0x80
 800213c:	0549      	lsls	r1, r1, #21
 800213e:	430a      	orrs	r2, r1
 8002140:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000

0800214c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002150:	e7fe      	b.n	8002150 <NMI_Handler+0x4>

08002152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002156:	e7fe      	b.n	8002156 <HardFault_Handler+0x4>

08002158 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002170:	f000 fa2c 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 800217e:	2020      	movs	r0, #32
 8002180:	f001 f8a6 	bl	80032d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <DMA1_Channel1_IRQHandler+0x14>)
 8002192:	0018      	movs	r0, r3
 8002194:	f000 fe51 	bl	8002e3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	200000e4 	.word	0x200000e4

080021a4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <TIM6_IRQHandler+0x14>)
 80021aa:	0018      	movs	r0, r3
 80021ac:	f003 fbfe 	bl	80059ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	200003f8 	.word	0x200003f8

080021bc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <LPUART1_IRQHandler+0x14>)
 80021c2:	0018      	movs	r0, r3
 80021c4:	f003 fe68 	bl	8005e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80021c8:	46c0      	nop			; (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	20000438 	.word	0x20000438

080021d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	e00a      	b.n	80021fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021e6:	e000      	b.n	80021ea <_read+0x16>
 80021e8:	bf00      	nop
 80021ea:	0001      	movs	r1, r0
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	60ba      	str	r2, [r7, #8]
 80021f2:	b2ca      	uxtb	r2, r1
 80021f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	dbf0      	blt.n	80021e6 <_read+0x12>
  }

  return len;
 8002204:	687b      	ldr	r3, [r7, #4]
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b006      	add	sp, #24
 800220c:	bd80      	pop	{r7, pc}

0800220e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e009      	b.n	8002234 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	60ba      	str	r2, [r7, #8]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	0018      	movs	r0, r3
 800222a:	e000      	b.n	800222e <_write+0x20>
 800222c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3301      	adds	r3, #1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	dbf1      	blt.n	8002220 <_write+0x12>
  }
  return len;
 800223c:	687b      	ldr	r3, [r7, #4]
}
 800223e:	0018      	movs	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	b006      	add	sp, #24
 8002244:	bd80      	pop	{r7, pc}

08002246 <_close>:

int _close(int file)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800224e:	2301      	movs	r3, #1
 8002250:	425b      	negs	r3, r3
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b002      	add	sp, #8
 8002258:	bd80      	pop	{r7, pc}

0800225a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2280      	movs	r2, #128	; 0x80
 8002268:	0192      	lsls	r2, r2, #6
 800226a:	605a      	str	r2, [r3, #4]
  return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	b002      	add	sp, #8
 8002274:	bd80      	pop	{r7, pc}

08002276 <_isatty>:

int _isatty(int file)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800227e:	2301      	movs	r3, #1
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	b002      	add	sp, #8
 8002286:	bd80      	pop	{r7, pc}

08002288 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002294:	2300      	movs	r3, #0
}
 8002296:	0018      	movs	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	b004      	add	sp, #16
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <_sbrk+0x5c>)
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <_sbrk+0x60>)
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <_sbrk+0x64>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <_sbrk+0x64>)
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <_sbrk+0x68>)
 80022c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	18d3      	adds	r3, r2, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d207      	bcs.n	80022e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d0:	f005 fb0c 	bl	80078ec <__errno>
 80022d4:	0003      	movs	r3, r0
 80022d6:	220c      	movs	r2, #12
 80022d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022da:	2301      	movs	r3, #1
 80022dc:	425b      	negs	r3, r3
 80022de:	e009      	b.n	80022f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <_sbrk+0x64>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	18d2      	adds	r2, r2, r3
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <_sbrk+0x64>)
 80022f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b006      	add	sp, #24
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20005000 	.word	0x20005000
 8002300:	00000400 	.word	0x00000400
 8002304:	200003f4 	.word	0x200003f4
 8002308:	20000610 	.word	0x20000610

0800230c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800231e:	003b      	movs	r3, r7
 8002320:	0018      	movs	r0, r3
 8002322:	2308      	movs	r3, #8
 8002324:	001a      	movs	r2, r3
 8002326:	2100      	movs	r1, #0
 8002328:	f005 fa8a 	bl	8007840 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800232c:	4b15      	ldr	r3, [pc, #84]	; (8002384 <MX_TIM6_Init+0x6c>)
 800232e:	4a16      	ldr	r2, [pc, #88]	; (8002388 <MX_TIM6_Init+0x70>)
 8002330:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <MX_TIM6_Init+0x6c>)
 8002334:	4a15      	ldr	r2, [pc, #84]	; (800238c <MX_TIM6_Init+0x74>)
 8002336:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <MX_TIM6_Init+0x6c>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_TIM6_Init+0x6c>)
 8002340:	4a13      	ldr	r2, [pc, #76]	; (8002390 <MX_TIM6_Init+0x78>)
 8002342:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <MX_TIM6_Init+0x6c>)
 8002346:	2200      	movs	r2, #0
 8002348:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_TIM6_Init+0x6c>)
 800234c:	0018      	movs	r0, r3
 800234e:	f003 faed 	bl	800592c <HAL_TIM_Base_Init>
 8002352:	1e03      	subs	r3, r0, #0
 8002354:	d001      	beq.n	800235a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002356:	f7ff f97b 	bl	8001650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235a:	003b      	movs	r3, r7
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002360:	003b      	movs	r3, r7
 8002362:	2200      	movs	r2, #0
 8002364:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002366:	003a      	movs	r2, r7
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_TIM6_Init+0x6c>)
 800236a:	0011      	movs	r1, r2
 800236c:	0018      	movs	r0, r3
 800236e:	f003 fc83 	bl	8005c78 <HAL_TIMEx_MasterConfigSynchronization>
 8002372:	1e03      	subs	r3, r0, #0
 8002374:	d001      	beq.n	800237a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002376:	f7ff f96b 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	46bd      	mov	sp, r7
 800237e:	b002      	add	sp, #8
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	200003f8 	.word	0x200003f8
 8002388:	40001000 	.word	0x40001000
 800238c:	00000c7f 	.word	0x00000c7f
 8002390:	0000270f 	.word	0x0000270f

08002394 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <HAL_TIM_Base_MspInit+0x38>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d10d      	bne.n	80023c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_TIM_Base_MspInit+0x3c>)
 80023a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_TIM_Base_MspInit+0x3c>)
 80023ac:	2110      	movs	r1, #16
 80023ae:	430a      	orrs	r2, r1
 80023b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2100      	movs	r1, #0
 80023b6:	2011      	movs	r0, #17
 80023b8:	f000 fc0e 	bl	8002bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80023bc:	2011      	movs	r0, #17
 80023be:	f000 fc20 	bl	8002c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b002      	add	sp, #8
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	40001000 	.word	0x40001000
 80023d0:	40021000 	.word	0x40021000

080023d4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <MX_LPUART1_UART_Init+0x5c>)
 80023da:	4a16      	ldr	r2, [pc, #88]	; (8002434 <MX_LPUART1_UART_Init+0x60>)
 80023dc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <MX_LPUART1_UART_Init+0x5c>)
 80023e0:	2296      	movs	r2, #150	; 0x96
 80023e2:	0192      	lsls	r2, r2, #6
 80023e4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <MX_LPUART1_UART_Init+0x5c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <MX_LPUART1_UART_Init+0x5c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <MX_LPUART1_UART_Init+0x5c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80023f8:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <MX_LPUART1_UART_Init+0x5c>)
 80023fa:	220c      	movs	r2, #12
 80023fc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <MX_LPUART1_UART_Init+0x5c>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <MX_LPUART1_UART_Init+0x5c>)
 8002406:	2200      	movs	r2, #0
 8002408:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <MX_LPUART1_UART_Init+0x5c>)
 800240c:	2210      	movs	r2, #16
 800240e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <MX_LPUART1_UART_Init+0x5c>)
 8002412:	2280      	movs	r2, #128	; 0x80
 8002414:	0152      	lsls	r2, r2, #5
 8002416:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <MX_LPUART1_UART_Init+0x5c>)
 800241a:	0018      	movs	r0, r3
 800241c:	f003 fc8a 	bl	8005d34 <HAL_UART_Init>
 8002420:	1e03      	subs	r3, r0, #0
 8002422:	d001      	beq.n	8002428 <MX_LPUART1_UART_Init+0x54>
  {
    Error_Handler();
 8002424:	f7ff f914 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	20000438 	.word	0x20000438
 8002434:	40004800 	.word	0x40004800

08002438 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b089      	sub	sp, #36	; 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	240c      	movs	r4, #12
 8002442:	193b      	adds	r3, r7, r4
 8002444:	0018      	movs	r0, r3
 8002446:	2314      	movs	r3, #20
 8002448:	001a      	movs	r2, r3
 800244a:	2100      	movs	r1, #0
 800244c:	f005 f9f8 	bl	8007840 <memset>
  if(uartHandle->Instance==LPUART1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1c      	ldr	r2, [pc, #112]	; (80024c8 <HAL_UART_MspInit+0x90>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d131      	bne.n	80024be <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <HAL_UART_MspInit+0x94>)
 800245c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800245e:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_UART_MspInit+0x94>)
 8002460:	2180      	movs	r1, #128	; 0x80
 8002462:	02c9      	lsls	r1, r1, #11
 8002464:	430a      	orrs	r2, r1
 8002466:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002468:	4b18      	ldr	r3, [pc, #96]	; (80024cc <HAL_UART_MspInit+0x94>)
 800246a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246c:	4b17      	ldr	r3, [pc, #92]	; (80024cc <HAL_UART_MspInit+0x94>)
 800246e:	2101      	movs	r1, #1
 8002470:	430a      	orrs	r2, r1
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_UART_MspInit+0x94>)
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	2201      	movs	r2, #1
 800247a:	4013      	ands	r3, r2
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002480:	0021      	movs	r1, r4
 8002482:	187b      	adds	r3, r7, r1
 8002484:	220c      	movs	r2, #12
 8002486:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	187b      	adds	r3, r7, r1
 800248a:	2202      	movs	r2, #2
 800248c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	187b      	adds	r3, r7, r1
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002494:	187b      	adds	r3, r7, r1
 8002496:	2203      	movs	r2, #3
 8002498:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800249a:	187b      	adds	r3, r7, r1
 800249c:	2206      	movs	r2, #6
 800249e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a0:	187a      	adds	r2, r7, r1
 80024a2:	23a0      	movs	r3, #160	; 0xa0
 80024a4:	05db      	lsls	r3, r3, #23
 80024a6:	0011      	movs	r1, r2
 80024a8:	0018      	movs	r0, r3
 80024aa:	f000 fd75 	bl	8002f98 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	201d      	movs	r0, #29
 80024b4:	f000 fb90 	bl	8002bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80024b8:	201d      	movs	r0, #29
 80024ba:	f000 fba2 	bl	8002c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b009      	add	sp, #36	; 0x24
 80024c4:	bd90      	pop	{r4, r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	40004800 	.word	0x40004800
 80024cc:	40021000 	.word	0x40021000

080024d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80024d0:	480d      	ldr	r0, [pc, #52]	; (8002508 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80024d2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80024d4:	f7ff ff1a 	bl	800230c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <LoopForever+0x6>)
  ldr r1, =_edata
 80024da:	490d      	ldr	r1, [pc, #52]	; (8002510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <LoopForever+0xe>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e0:	e002      	b.n	80024e8 <LoopCopyDataInit>

080024e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e6:	3304      	adds	r3, #4

080024e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ec:	d3f9      	bcc.n	80024e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024f0:	4c0a      	ldr	r4, [pc, #40]	; (800251c <LoopForever+0x16>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f4:	e001      	b.n	80024fa <LoopFillZerobss>

080024f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f8:	3204      	adds	r2, #4

080024fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024fc:	d3fb      	bcc.n	80024f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024fe:	f005 f9fb 	bl	80078f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002502:	f7fe ffcf 	bl	80014a4 <main>

08002506 <LoopForever>:

LoopForever:
    b LoopForever
 8002506:	e7fe      	b.n	8002506 <LoopForever>
   ldr   r0, =_estack
 8002508:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800250c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002510:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002514:	08008640 	.word	0x08008640
  ldr r2, =_sbss
 8002518:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800251c:	20000610 	.word	0x20000610

08002520 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002520:	e7fe      	b.n	8002520 <ADC1_COMP_IRQHandler>
	...

08002524 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800252a:	1dfb      	adds	r3, r7, #7
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_Init+0x3c>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_Init+0x3c>)
 8002536:	2140      	movs	r1, #64	; 0x40
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800253c:	2003      	movs	r0, #3
 800253e:	f000 f811 	bl	8002564 <HAL_InitTick>
 8002542:	1e03      	subs	r3, r0, #0
 8002544:	d003      	beq.n	800254e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002546:	1dfb      	adds	r3, r7, #7
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e001      	b.n	8002552 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800254e:	f7ff fde9 	bl	8002124 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002552:	1dfb      	adds	r3, r7, #7
 8002554:	781b      	ldrb	r3, [r3, #0]
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	b002      	add	sp, #8
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	40022000 	.word	0x40022000

08002564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_InitTick+0x5c>)
 800256e:	681c      	ldr	r4, [r3, #0]
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <HAL_InitTick+0x60>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	0019      	movs	r1, r3
 8002576:	23fa      	movs	r3, #250	; 0xfa
 8002578:	0098      	lsls	r0, r3, #2
 800257a:	f7fd fdcf 	bl	800011c <__udivsi3>
 800257e:	0003      	movs	r3, r0
 8002580:	0019      	movs	r1, r3
 8002582:	0020      	movs	r0, r4
 8002584:	f7fd fdca 	bl	800011c <__udivsi3>
 8002588:	0003      	movs	r3, r0
 800258a:	0018      	movs	r0, r3
 800258c:	f000 fb49 	bl	8002c22 <HAL_SYSTICK_Config>
 8002590:	1e03      	subs	r3, r0, #0
 8002592:	d001      	beq.n	8002598 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e00f      	b.n	80025b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d80b      	bhi.n	80025b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	2301      	movs	r3, #1
 80025a2:	425b      	negs	r3, r3
 80025a4:	2200      	movs	r2, #0
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 fb16 	bl	8002bd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_InitTick+0x64>)
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b003      	add	sp, #12
 80025be:	bd90      	pop	{r4, r7, pc}
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000008 	.word	0x20000008
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_IncTick+0x1c>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	001a      	movs	r2, r3
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_IncTick+0x20>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	18d2      	adds	r2, r2, r3
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_IncTick+0x20>)
 80025de:	601a      	str	r2, [r3, #0]
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	20000008 	.word	0x20000008
 80025ec:	200004c0 	.word	0x200004c0

080025f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;
 80025f4:	4b02      	ldr	r3, [pc, #8]	; (8002600 <HAL_GetTick+0x10>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	200004c0 	.word	0x200004c0

08002604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800260c:	f7ff fff0 	bl	80025f0 <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	3301      	adds	r3, #1
 800261c:	d005      	beq.n	800262a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_Delay+0x44>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	001a      	movs	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	189b      	adds	r3, r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	f7ff ffe0 	bl	80025f0 <HAL_GetTick>
 8002630:	0002      	movs	r2, r0
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	429a      	cmp	r2, r3
 800263a:	d8f7      	bhi.n	800262c <HAL_Delay+0x28>
  {
  }
}
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	46bd      	mov	sp, r7
 8002642:	b004      	add	sp, #16
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	20000008 	.word	0x20000008

0800264c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e159      	b.n	8002912 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2250      	movs	r2, #80	; 0x50
 8002670:	2100      	movs	r1, #0
 8002672:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	0018      	movs	r0, r3
 8002678:	f7fe fd5c 	bl	8001134 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002680:	2210      	movs	r2, #16
 8002682:	4013      	ands	r3, r2
 8002684:	2b10      	cmp	r3, #16
 8002686:	d005      	beq.n	8002694 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2204      	movs	r2, #4
 8002690:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002692:	d00b      	beq.n	80026ac <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002698:	2210      	movs	r2, #16
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2250      	movs	r2, #80	; 0x50
 80026a4:	2100      	movs	r1, #0
 80026a6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e132      	b.n	8002912 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	4a9a      	ldr	r2, [pc, #616]	; (800291c <HAL_ADC_Init+0x2d0>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	2202      	movs	r2, #2
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2203      	movs	r2, #3
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d108      	bne.n	80026dc <HAL_ADC_Init+0x90>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2201      	movs	r2, #1
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_ADC_Init+0x90>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <HAL_ADC_Init+0x92>
 80026dc:	2300      	movs	r3, #0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d149      	bne.n	8002776 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	23c0      	movs	r3, #192	; 0xc0
 80026e8:	061b      	lsls	r3, r3, #24
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d00b      	beq.n	8002706 <HAL_ADC_Init+0xba>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	05db      	lsls	r3, r3, #23
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d005      	beq.n	8002706 <HAL_ADC_Init+0xba>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	061b      	lsls	r3, r3, #24
 8002702:	429a      	cmp	r2, r3
 8002704:	d111      	bne.n	800272a <HAL_ADC_Init+0xde>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0092      	lsls	r2, r2, #2
 8002712:	0892      	lsrs	r2, r2, #2
 8002714:	611a      	str	r2, [r3, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6919      	ldr	r1, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	611a      	str	r2, [r3, #16]
 8002728:	e014      	b.n	8002754 <HAL_ADC_Init+0x108>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0092      	lsls	r2, r2, #2
 8002736:	0892      	lsrs	r2, r2, #2
 8002738:	611a      	str	r2, [r3, #16]
 800273a:	4b79      	ldr	r3, [pc, #484]	; (8002920 <HAL_ADC_Init+0x2d4>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b78      	ldr	r3, [pc, #480]	; (8002920 <HAL_ADC_Init+0x2d4>)
 8002740:	4978      	ldr	r1, [pc, #480]	; (8002924 <HAL_ADC_Init+0x2d8>)
 8002742:	400a      	ands	r2, r1
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	4b76      	ldr	r3, [pc, #472]	; (8002920 <HAL_ADC_Init+0x2d4>)
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	4b74      	ldr	r3, [pc, #464]	; (8002920 <HAL_ADC_Init+0x2d4>)
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2118      	movs	r1, #24
 8002760:	438a      	bics	r2, r1
 8002762:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68d9      	ldr	r1, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002776:	4b6a      	ldr	r3, [pc, #424]	; (8002920 <HAL_ADC_Init+0x2d4>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4b69      	ldr	r3, [pc, #420]	; (8002920 <HAL_ADC_Init+0x2d4>)
 800277c:	496a      	ldr	r1, [pc, #424]	; (8002928 <HAL_ADC_Init+0x2dc>)
 800277e:	400a      	ands	r2, r1
 8002780:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8002782:	4b67      	ldr	r3, [pc, #412]	; (8002920 <HAL_ADC_Init+0x2d4>)
 8002784:	6819      	ldr	r1, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278a:	065a      	lsls	r2, r3, #25
 800278c:	4b64      	ldr	r3, [pc, #400]	; (8002920 <HAL_ADC_Init+0x2d4>)
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	055b      	lsls	r3, r3, #21
 800279c:	4013      	ands	r3, r2
 800279e:	d108      	bne.n	80027b2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2180      	movs	r1, #128	; 0x80
 80027ac:	0549      	lsls	r1, r1, #21
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	495b      	ldr	r1, [pc, #364]	; (800292c <HAL_ADC_Init+0x2e0>)
 80027be:	400a      	ands	r2, r1
 80027c0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68d9      	ldr	r1, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_Init+0x18c>
 80027d4:	2304      	movs	r3, #4
 80027d6:	e000      	b.n	80027da <HAL_ADC_Init+0x18e>
 80027d8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80027da:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2020      	movs	r0, #32
 80027e0:	5c1b      	ldrb	r3, [r3, r0]
 80027e2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80027e4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	202c      	movs	r0, #44	; 0x2c
 80027ea:	5c1b      	ldrb	r3, [r3, r0]
 80027ec:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80027ee:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80027f4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80027fc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002804:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002812:	23c2      	movs	r3, #194	; 0xc2
 8002814:	33ff      	adds	r3, #255	; 0xff
 8002816:	429a      	cmp	r2, r3
 8002818:	d00b      	beq.n	8002832 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68d9      	ldr	r1, [r3, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2221      	movs	r2, #33	; 0x21
 8002836:	5c9b      	ldrb	r3, [r3, r2]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d11a      	bne.n	8002872 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	5c9b      	ldrb	r3, [r3, r2]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	0249      	lsls	r1, r1, #9
 8002854:	430a      	orrs	r2, r1
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	e00b      	b.n	8002872 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	2220      	movs	r2, #32
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	2201      	movs	r2, #1
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	2b01      	cmp	r3, #1
 8002878:	d11f      	bne.n	80028ba <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	492a      	ldr	r1, [pc, #168]	; (8002930 <HAL_ADC_Init+0x2e4>)
 8002886:	400a      	ands	r2, r1
 8002888:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6919      	ldr	r1, [r3, #16]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002898:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800289e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2101      	movs	r1, #1
 80028b4:	430a      	orrs	r2, r1
 80028b6:	611a      	str	r2, [r3, #16]
 80028b8:	e00e      	b.n	80028d8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	2201      	movs	r2, #1
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d107      	bne.n	80028d8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2101      	movs	r1, #1
 80028d4:	438a      	bics	r2, r1
 80028d6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2107      	movs	r1, #7
 80028e4:	438a      	bics	r2, r1
 80028e6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6959      	ldr	r1, [r3, #20]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002904:	2203      	movs	r2, #3
 8002906:	4393      	bics	r3, r2
 8002908:	2201      	movs	r2, #1
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	0018      	movs	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	b002      	add	sp, #8
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	fffffefd 	.word	0xfffffefd
 8002920:	40012708 	.word	0x40012708
 8002924:	ffc3ffff 	.word	0xffc3ffff
 8002928:	fdffffff 	.word	0xfdffffff
 800292c:	fffe0219 	.word	0xfffe0219
 8002930:	fffffc03 	.word	0xfffffc03

08002934 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2250      	movs	r2, #80	; 0x50
 8002942:	5c9b      	ldrb	r3, [r3, r2]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_ADC_ConfigChannel+0x18>
 8002948:	2302      	movs	r3, #2
 800294a:	e06c      	b.n	8002a26 <HAL_ADC_ConfigChannel+0xf2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2250      	movs	r2, #80	; 0x50
 8002950:	2101      	movs	r1, #1
 8002952:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2204      	movs	r2, #4
 800295c:	4013      	ands	r3, r2
 800295e:	d00b      	beq.n	8002978 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	2220      	movs	r2, #32
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2250      	movs	r2, #80	; 0x50
 8002970:	2100      	movs	r1, #0
 8002972:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e056      	b.n	8002a26 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a2c      	ldr	r2, [pc, #176]	; (8002a30 <HAL_ADC_ConfigChannel+0xfc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d028      	beq.n	80029d4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	035b      	lsls	r3, r3, #13
 800298e:	0b5a      	lsrs	r2, r3, #13
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	02db      	lsls	r3, r3, #11
 80029a0:	4013      	ands	r3, r2
 80029a2:	d009      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80029a4:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <HAL_ADC_ConfigChannel+0x100>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <HAL_ADC_ConfigChannel+0x100>)
 80029aa:	2180      	movs	r1, #128	; 0x80
 80029ac:	0409      	lsls	r1, r1, #16
 80029ae:	430a      	orrs	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80029b2:	200a      	movs	r0, #10
 80029b4:	f000 f844 	bl	8002a40 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	029b      	lsls	r3, r3, #10
 80029c0:	4013      	ands	r3, r2
 80029c2:	d02b      	beq.n	8002a1c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <HAL_ADC_ConfigChannel+0x100>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <HAL_ADC_ConfigChannel+0x100>)
 80029ca:	2180      	movs	r1, #128	; 0x80
 80029cc:	03c9      	lsls	r1, r1, #15
 80029ce:	430a      	orrs	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e023      	b.n	8002a1c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	035b      	lsls	r3, r3, #13
 80029e0:	0b5b      	lsrs	r3, r3, #13
 80029e2:	43d9      	mvns	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	400a      	ands	r2, r1
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	02db      	lsls	r3, r3, #11
 80029f4:	4013      	ands	r3, r2
 80029f6:	d005      	beq.n	8002a04 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <HAL_ADC_ConfigChannel+0x100>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_ADC_ConfigChannel+0x100>)
 80029fe:	490e      	ldr	r1, [pc, #56]	; (8002a38 <HAL_ADC_ConfigChannel+0x104>)
 8002a00:	400a      	ands	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	029b      	lsls	r3, r3, #10
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d005      	beq.n	8002a1c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <HAL_ADC_ConfigChannel+0x100>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <HAL_ADC_ConfigChannel+0x100>)
 8002a16:	4909      	ldr	r1, [pc, #36]	; (8002a3c <HAL_ADC_ConfigChannel+0x108>)
 8002a18:	400a      	ands	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2250      	movs	r2, #80	; 0x50
 8002a20:	2100      	movs	r1, #0
 8002a22:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	00001001 	.word	0x00001001
 8002a34:	40012708 	.word	0x40012708
 8002a38:	ff7fffff 	.word	0xff7fffff
 8002a3c:	ffbfffff 	.word	0xffbfffff

08002a40 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <ADC_DelayMicroSecond+0x38>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	490b      	ldr	r1, [pc, #44]	; (8002a7c <ADC_DelayMicroSecond+0x3c>)
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f7fd fb64 	bl	800011c <__udivsi3>
 8002a54:	0003      	movs	r3, r0
 8002a56:	001a      	movs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4353      	muls	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8002a5e:	e002      	b.n	8002a66 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f9      	bne.n	8002a60 <ADC_DelayMicroSecond+0x20>
  }
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b004      	add	sp, #16
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	000f4240 	.word	0x000f4240

08002a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	0002      	movs	r2, r0
 8002a88:	1dfb      	adds	r3, r7, #7
 8002a8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a8c:	1dfb      	adds	r3, r7, #7
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b7f      	cmp	r3, #127	; 0x7f
 8002a92:	d809      	bhi.n	8002aa8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a94:	1dfb      	adds	r3, r7, #7
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	001a      	movs	r2, r3
 8002a9a:	231f      	movs	r3, #31
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <__NVIC_EnableIRQ+0x30>)
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	4091      	lsls	r1, r2
 8002aa4:	000a      	movs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]
  }
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	e000e100 	.word	0xe000e100

08002ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	0002      	movs	r2, r0
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	1dfb      	adds	r3, r7, #7
 8002ac0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ac2:	1dfb      	adds	r3, r7, #7
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ac8:	d828      	bhi.n	8002b1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aca:	4a2f      	ldr	r2, [pc, #188]	; (8002b88 <__NVIC_SetPriority+0xd4>)
 8002acc:	1dfb      	adds	r3, r7, #7
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b25b      	sxtb	r3, r3
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	33c0      	adds	r3, #192	; 0xc0
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	589b      	ldr	r3, [r3, r2]
 8002ada:	1dfa      	adds	r2, r7, #7
 8002adc:	7812      	ldrb	r2, [r2, #0]
 8002ade:	0011      	movs	r1, r2
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	400a      	ands	r2, r1
 8002ae4:	00d2      	lsls	r2, r2, #3
 8002ae6:	21ff      	movs	r1, #255	; 0xff
 8002ae8:	4091      	lsls	r1, r2
 8002aea:	000a      	movs	r2, r1
 8002aec:	43d2      	mvns	r2, r2
 8002aee:	401a      	ands	r2, r3
 8002af0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	019b      	lsls	r3, r3, #6
 8002af6:	22ff      	movs	r2, #255	; 0xff
 8002af8:	401a      	ands	r2, r3
 8002afa:	1dfb      	adds	r3, r7, #7
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	0018      	movs	r0, r3
 8002b00:	2303      	movs	r3, #3
 8002b02:	4003      	ands	r3, r0
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b08:	481f      	ldr	r0, [pc, #124]	; (8002b88 <__NVIC_SetPriority+0xd4>)
 8002b0a:	1dfb      	adds	r3, r7, #7
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	430a      	orrs	r2, r1
 8002b14:	33c0      	adds	r3, #192	; 0xc0
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b1a:	e031      	b.n	8002b80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b1c:	4a1b      	ldr	r2, [pc, #108]	; (8002b8c <__NVIC_SetPriority+0xd8>)
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	0019      	movs	r1, r3
 8002b24:	230f      	movs	r3, #15
 8002b26:	400b      	ands	r3, r1
 8002b28:	3b08      	subs	r3, #8
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	3306      	adds	r3, #6
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	18d3      	adds	r3, r2, r3
 8002b32:	3304      	adds	r3, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	1dfa      	adds	r2, r7, #7
 8002b38:	7812      	ldrb	r2, [r2, #0]
 8002b3a:	0011      	movs	r1, r2
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	400a      	ands	r2, r1
 8002b40:	00d2      	lsls	r2, r2, #3
 8002b42:	21ff      	movs	r1, #255	; 0xff
 8002b44:	4091      	lsls	r1, r2
 8002b46:	000a      	movs	r2, r1
 8002b48:	43d2      	mvns	r2, r2
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	019b      	lsls	r3, r3, #6
 8002b52:	22ff      	movs	r2, #255	; 0xff
 8002b54:	401a      	ands	r2, r3
 8002b56:	1dfb      	adds	r3, r7, #7
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	4003      	ands	r3, r0
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b64:	4809      	ldr	r0, [pc, #36]	; (8002b8c <__NVIC_SetPriority+0xd8>)
 8002b66:	1dfb      	adds	r3, r7, #7
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	001c      	movs	r4, r3
 8002b6c:	230f      	movs	r3, #15
 8002b6e:	4023      	ands	r3, r4
 8002b70:	3b08      	subs	r3, #8
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	430a      	orrs	r2, r1
 8002b76:	3306      	adds	r3, #6
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	18c3      	adds	r3, r0, r3
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	601a      	str	r2, [r3, #0]
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b003      	add	sp, #12
 8002b86:	bd90      	pop	{r4, r7, pc}
 8002b88:	e000e100 	.word	0xe000e100
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	1e5a      	subs	r2, r3, #1
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	045b      	lsls	r3, r3, #17
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d301      	bcc.n	8002ba8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e010      	b.n	8002bca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <SysTick_Config+0x44>)
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	3a01      	subs	r2, #1
 8002bae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	425b      	negs	r3, r3
 8002bb4:	2103      	movs	r1, #3
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f7ff ff7c 	bl	8002ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <SysTick_Config+0x44>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc2:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <SysTick_Config+0x44>)
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	0018      	movs	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b002      	add	sp, #8
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	e000e010 	.word	0xe000e010

08002bd8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	210f      	movs	r1, #15
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	1c02      	adds	r2, r0, #0
 8002be8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	187b      	adds	r3, r7, r1
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	0011      	movs	r1, r2
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7ff ff5d 	bl	8002ab4 <__NVIC_SetPriority>
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b004      	add	sp, #16
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	0002      	movs	r2, r0
 8002c0a:	1dfb      	adds	r3, r7, #7
 8002c0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c0e:	1dfb      	adds	r3, r7, #7
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	b25b      	sxtb	r3, r3
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7ff ff33 	bl	8002a80 <__NVIC_EnableIRQ>
}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b002      	add	sp, #8
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f7ff ffaf 	bl	8002b90 <SysTick_Config>
 8002c32:	0003      	movs	r3, r0
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e061      	b.n	8002d12 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a32      	ldr	r2, [pc, #200]	; (8002d1c <HAL_DMA_Init+0xe0>)
 8002c54:	4694      	mov	ip, r2
 8002c56:	4463      	add	r3, ip
 8002c58:	2114      	movs	r1, #20
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7fd fa5e 	bl	800011c <__udivsi3>
 8002c60:	0003      	movs	r3, r0
 8002c62:	009a      	lsls	r2, r3, #2
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a2d      	ldr	r2, [pc, #180]	; (8002d20 <HAL_DMA_Init+0xe4>)
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2225      	movs	r2, #37	; 0x25
 8002c72:	2102      	movs	r1, #2
 8002c74:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4a28      	ldr	r2, [pc, #160]	; (8002d24 <HAL_DMA_Init+0xe8>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	01db      	lsls	r3, r3, #7
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d018      	beq.n	8002cfa <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002cc8:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <HAL_DMA_Init+0xec>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	400b      	ands	r3, r1
 8002cd4:	210f      	movs	r1, #15
 8002cd6:	4099      	lsls	r1, r3
 8002cd8:	000b      	movs	r3, r1
 8002cda:	43d9      	mvns	r1, r3
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_DMA_Init+0xec>)
 8002cde:	400a      	ands	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_DMA_Init+0xec>)
 8002ce4:	6819      	ldr	r1, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	201c      	movs	r0, #28
 8002cf0:	4003      	ands	r3, r0
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <HAL_DMA_Init+0xec>)
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2225      	movs	r2, #37	; 0x25
 8002d04:	2101      	movs	r1, #1
 8002d06:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	; 0x24
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b004      	add	sp, #16
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	bffdfff8 	.word	0xbffdfff8
 8002d20:	40020000 	.word	0x40020000
 8002d24:	ffff800f 	.word	0xffff800f
 8002d28:	400200a8 	.word	0x400200a8

08002d2c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d34:	230f      	movs	r3, #15
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2225      	movs	r2, #37	; 0x25
 8002d40:	5c9b      	ldrb	r3, [r3, r2]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d008      	beq.n	8002d5a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2224      	movs	r2, #36	; 0x24
 8002d52:	2100      	movs	r1, #0
 8002d54:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e024      	b.n	8002da4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	210e      	movs	r1, #14
 8002d66:	438a      	bics	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	438a      	bics	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	221c      	movs	r2, #28
 8002d80:	401a      	ands	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2101      	movs	r1, #1
 8002d88:	4091      	lsls	r1, r2
 8002d8a:	000a      	movs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2225      	movs	r2, #37	; 0x25
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2224      	movs	r2, #36	; 0x24
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5499      	strb	r1, [r3, r2]

    return status;
 8002d9e:	230f      	movs	r3, #15
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b004      	add	sp, #16
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db4:	210f      	movs	r1, #15
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2225      	movs	r2, #37	; 0x25
 8002dc0:	5c9b      	ldrb	r3, [r3, r2]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d006      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2204      	movs	r2, #4
 8002dcc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e02a      	b.n	8002e2c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	210e      	movs	r1, #14
 8002de2:	438a      	bics	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2101      	movs	r1, #1
 8002df2:	438a      	bics	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	221c      	movs	r2, #28
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2101      	movs	r1, #1
 8002e04:	4091      	lsls	r1, r2
 8002e06:	000a      	movs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2225      	movs	r2, #37	; 0x25
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2224      	movs	r2, #36	; 0x24
 8002e16:	2100      	movs	r1, #0
 8002e18:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	0010      	movs	r0, r2
 8002e2a:	4798      	blx	r3
    }
  }
  return status;
 8002e2c:	230f      	movs	r3, #15
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	781b      	ldrb	r3, [r3, #0]
}
 8002e32:	0018      	movs	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b004      	add	sp, #16
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	221c      	movs	r2, #28
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	0013      	movs	r3, r2
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4013      	ands	r3, r2
 8002e64:	d026      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x7a>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d022      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2220      	movs	r2, #32
 8002e76:	4013      	ands	r3, r2
 8002e78:	d107      	bne.n	8002e8a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2104      	movs	r1, #4
 8002e86:	438a      	bics	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	221c      	movs	r2, #28
 8002e90:	401a      	ands	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	2104      	movs	r1, #4
 8002e98:	4091      	lsls	r1, r2
 8002e9a:	000a      	movs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d100      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0x6e>
 8002ea6:	e071      	b.n	8002f8c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	0010      	movs	r0, r2
 8002eb0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002eb2:	e06b      	b.n	8002f8c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	221c      	movs	r2, #28
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	0013      	movs	r3, r2
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d02d      	beq.n	8002f24 <HAL_DMA_IRQHandler+0xea>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d029      	beq.n	8002f24 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d10b      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	210a      	movs	r1, #10
 8002ee8:	438a      	bics	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2225      	movs	r2, #37	; 0x25
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	221c      	movs	r2, #28
 8002efa:	401a      	ands	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	2102      	movs	r1, #2
 8002f02:	4091      	lsls	r1, r2
 8002f04:	000a      	movs	r2, r1
 8002f06:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2224      	movs	r2, #36	; 0x24
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d039      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	0010      	movs	r0, r2
 8002f20:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f22:	e033      	b.n	8002f8c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	221c      	movs	r2, #28
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	0013      	movs	r3, r2
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4013      	ands	r3, r2
 8002f36:	d02a      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x154>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d026      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	210e      	movs	r1, #14
 8002f4c:	438a      	bics	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	221c      	movs	r2, #28
 8002f56:	401a      	ands	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	4091      	lsls	r1, r2
 8002f60:	000a      	movs	r2, r1
 8002f62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2225      	movs	r2, #37	; 0x25
 8002f6e:	2101      	movs	r1, #1
 8002f70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2224      	movs	r2, #36	; 0x24
 8002f76:	2100      	movs	r1, #0
 8002f78:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	0010      	movs	r0, r2
 8002f8a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46c0      	nop			; (mov r8, r8)
}
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002fae:	e155      	b.n	800325c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4091      	lsls	r1, r2
 8002fba:	000a      	movs	r2, r1
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d100      	bne.n	8002fc8 <HAL_GPIO_Init+0x30>
 8002fc6:	e146      	b.n	8003256 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2203      	movs	r2, #3
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d005      	beq.n	8002fe0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2203      	movs	r2, #3
 8002fda:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d130      	bne.n	8003042 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	409a      	lsls	r2, r3
 8002fee:	0013      	movs	r3, r2
 8002ff0:	43da      	mvns	r2, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	409a      	lsls	r2, r3
 8003002:	0013      	movs	r3, r2
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003016:	2201      	movs	r2, #1
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	409a      	lsls	r2, r3
 800301c:	0013      	movs	r3, r2
 800301e:	43da      	mvns	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	2201      	movs	r2, #1
 800302e:	401a      	ands	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	409a      	lsls	r2, r3
 8003034:	0013      	movs	r3, r2
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2203      	movs	r2, #3
 8003048:	4013      	ands	r3, r2
 800304a:	2b03      	cmp	r3, #3
 800304c:	d017      	beq.n	800307e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	409a      	lsls	r2, r3
 800305c:	0013      	movs	r3, r2
 800305e:	43da      	mvns	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	409a      	lsls	r2, r3
 8003070:	0013      	movs	r3, r2
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2203      	movs	r2, #3
 8003084:	4013      	ands	r3, r2
 8003086:	2b02      	cmp	r3, #2
 8003088:	d123      	bne.n	80030d2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	08da      	lsrs	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3208      	adds	r2, #8
 8003092:	0092      	lsls	r2, r2, #2
 8003094:	58d3      	ldr	r3, [r2, r3]
 8003096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2207      	movs	r2, #7
 800309c:	4013      	ands	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	220f      	movs	r2, #15
 80030a2:	409a      	lsls	r2, r3
 80030a4:	0013      	movs	r3, r2
 80030a6:	43da      	mvns	r2, r3
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2107      	movs	r1, #7
 80030b6:	400b      	ands	r3, r1
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	409a      	lsls	r2, r3
 80030bc:	0013      	movs	r3, r2
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	08da      	lsrs	r2, r3, #3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3208      	adds	r2, #8
 80030cc:	0092      	lsls	r2, r2, #2
 80030ce:	6939      	ldr	r1, [r7, #16]
 80030d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	2203      	movs	r2, #3
 80030de:	409a      	lsls	r2, r3
 80030e0:	0013      	movs	r3, r2
 80030e2:	43da      	mvns	r2, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2203      	movs	r2, #3
 80030f0:	401a      	ands	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	409a      	lsls	r2, r3
 80030f8:	0013      	movs	r3, r2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	23c0      	movs	r3, #192	; 0xc0
 800310c:	029b      	lsls	r3, r3, #10
 800310e:	4013      	ands	r3, r2
 8003110:	d100      	bne.n	8003114 <HAL_GPIO_Init+0x17c>
 8003112:	e0a0      	b.n	8003256 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003114:	4b57      	ldr	r3, [pc, #348]	; (8003274 <HAL_GPIO_Init+0x2dc>)
 8003116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003118:	4b56      	ldr	r3, [pc, #344]	; (8003274 <HAL_GPIO_Init+0x2dc>)
 800311a:	2101      	movs	r1, #1
 800311c:	430a      	orrs	r2, r1
 800311e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003120:	4a55      	ldr	r2, [pc, #340]	; (8003278 <HAL_GPIO_Init+0x2e0>)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	3302      	adds	r3, #2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	589b      	ldr	r3, [r3, r2]
 800312c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2203      	movs	r2, #3
 8003132:	4013      	ands	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	220f      	movs	r2, #15
 8003138:	409a      	lsls	r2, r3
 800313a:	0013      	movs	r3, r2
 800313c:	43da      	mvns	r2, r3
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	23a0      	movs	r3, #160	; 0xa0
 8003148:	05db      	lsls	r3, r3, #23
 800314a:	429a      	cmp	r2, r3
 800314c:	d01f      	beq.n	800318e <HAL_GPIO_Init+0x1f6>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a4a      	ldr	r2, [pc, #296]	; (800327c <HAL_GPIO_Init+0x2e4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d019      	beq.n	800318a <HAL_GPIO_Init+0x1f2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a49      	ldr	r2, [pc, #292]	; (8003280 <HAL_GPIO_Init+0x2e8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_GPIO_Init+0x1ee>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a48      	ldr	r2, [pc, #288]	; (8003284 <HAL_GPIO_Init+0x2ec>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00d      	beq.n	8003182 <HAL_GPIO_Init+0x1ea>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a47      	ldr	r2, [pc, #284]	; (8003288 <HAL_GPIO_Init+0x2f0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <HAL_GPIO_Init+0x1e6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a46      	ldr	r2, [pc, #280]	; (800328c <HAL_GPIO_Init+0x2f4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_GPIO_Init+0x1e2>
 8003176:	2305      	movs	r3, #5
 8003178:	e00a      	b.n	8003190 <HAL_GPIO_Init+0x1f8>
 800317a:	2306      	movs	r3, #6
 800317c:	e008      	b.n	8003190 <HAL_GPIO_Init+0x1f8>
 800317e:	2304      	movs	r3, #4
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x1f8>
 8003182:	2303      	movs	r3, #3
 8003184:	e004      	b.n	8003190 <HAL_GPIO_Init+0x1f8>
 8003186:	2302      	movs	r3, #2
 8003188:	e002      	b.n	8003190 <HAL_GPIO_Init+0x1f8>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_GPIO_Init+0x1f8>
 800318e:	2300      	movs	r3, #0
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	2103      	movs	r1, #3
 8003194:	400a      	ands	r2, r1
 8003196:	0092      	lsls	r2, r2, #2
 8003198:	4093      	lsls	r3, r2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a0:	4935      	ldr	r1, [pc, #212]	; (8003278 <HAL_GPIO_Init+0x2e0>)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ae:	4b38      	ldr	r3, [pc, #224]	; (8003290 <HAL_GPIO_Init+0x2f8>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	43da      	mvns	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	035b      	lsls	r3, r3, #13
 80031c6:	4013      	ands	r3, r2
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031d2:	4b2f      	ldr	r3, [pc, #188]	; (8003290 <HAL_GPIO_Init+0x2f8>)
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80031d8:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <HAL_GPIO_Init+0x2f8>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	43da      	mvns	r2, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	039b      	lsls	r3, r3, #14
 80031f0:	4013      	ands	r3, r2
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031fc:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_GPIO_Init+0x2f8>)
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003202:	4b23      	ldr	r3, [pc, #140]	; (8003290 <HAL_GPIO_Init+0x2f8>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	43da      	mvns	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	029b      	lsls	r3, r3, #10
 800321a:	4013      	ands	r3, r2
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003226:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HAL_GPIO_Init+0x2f8>)
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800322c:	4b18      	ldr	r3, [pc, #96]	; (8003290 <HAL_GPIO_Init+0x2f8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	43da      	mvns	r2, r3
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	025b      	lsls	r3, r3, #9
 8003244:	4013      	ands	r3, r2
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_GPIO_Init+0x2f8>)
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	3301      	adds	r3, #1
 800325a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	40da      	lsrs	r2, r3
 8003264:	1e13      	subs	r3, r2, #0
 8003266:	d000      	beq.n	800326a <HAL_GPIO_Init+0x2d2>
 8003268:	e6a2      	b.n	8002fb0 <HAL_GPIO_Init+0x18>
  }
}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b006      	add	sp, #24
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000
 8003278:	40010000 	.word	0x40010000
 800327c:	50000400 	.word	0x50000400
 8003280:	50000800 	.word	0x50000800
 8003284:	50000c00 	.word	0x50000c00
 8003288:	50001000 	.word	0x50001000
 800328c:	50001c00 	.word	0x50001c00
 8003290:	40010400 	.word	0x40010400

08003294 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	0008      	movs	r0, r1
 800329e:	0011      	movs	r1, r2
 80032a0:	1cbb      	adds	r3, r7, #2
 80032a2:	1c02      	adds	r2, r0, #0
 80032a4:	801a      	strh	r2, [r3, #0]
 80032a6:	1c7b      	adds	r3, r7, #1
 80032a8:	1c0a      	adds	r2, r1, #0
 80032aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032ac:	1c7b      	adds	r3, r7, #1
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d004      	beq.n	80032be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b4:	1cbb      	adds	r3, r7, #2
 80032b6:	881a      	ldrh	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80032bc:	e003      	b.n	80032c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80032be:	1cbb      	adds	r3, r7, #2
 80032c0:	881a      	ldrh	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b002      	add	sp, #8
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	0002      	movs	r2, r0
 80032d8:	1dbb      	adds	r3, r7, #6
 80032da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	1dba      	adds	r2, r7, #6
 80032e2:	8812      	ldrh	r2, [r2, #0]
 80032e4:	4013      	ands	r3, r2
 80032e6:	d008      	beq.n	80032fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80032ea:	1dba      	adds	r2, r7, #6
 80032ec:	8812      	ldrh	r2, [r2, #0]
 80032ee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032f0:	1dbb      	adds	r3, r7, #6
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f000 f807 	bl	8003308 <HAL_GPIO_EXTI_Callback>
  }
}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b002      	add	sp, #8
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	40010400 	.word	0x40010400

08003308 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	0002      	movs	r2, r0
 8003310:	1dbb      	adds	r3, r7, #6
 8003312:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b002      	add	sp, #8
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e082      	b.n	8003434 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2241      	movs	r2, #65	; 0x41
 8003332:	5c9b      	ldrb	r3, [r3, r2]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2240      	movs	r2, #64	; 0x40
 800333e:	2100      	movs	r1, #0
 8003340:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	0018      	movs	r0, r3
 8003346:	f7fe f849 	bl	80013dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2241      	movs	r2, #65	; 0x41
 800334e:	2124      	movs	r1, #36	; 0x24
 8003350:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2101      	movs	r1, #1
 800335e:	438a      	bics	r2, r1
 8003360:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4934      	ldr	r1, [pc, #208]	; (800343c <HAL_I2C_Init+0x120>)
 800336c:	400a      	ands	r2, r1
 800336e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4931      	ldr	r1, [pc, #196]	; (8003440 <HAL_I2C_Init+0x124>)
 800337c:	400a      	ands	r2, r1
 800337e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d108      	bne.n	800339a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2180      	movs	r1, #128	; 0x80
 8003392:	0209      	lsls	r1, r1, #8
 8003394:	430a      	orrs	r2, r1
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	e007      	b.n	80033aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2184      	movs	r1, #132	; 0x84
 80033a4:	0209      	lsls	r1, r1, #8
 80033a6:	430a      	orrs	r2, r1
 80033a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d104      	bne.n	80033bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2280      	movs	r2, #128	; 0x80
 80033b8:	0112      	lsls	r2, r2, #4
 80033ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	491f      	ldr	r1, [pc, #124]	; (8003444 <HAL_I2C_Init+0x128>)
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	491a      	ldr	r1, [pc, #104]	; (8003440 <HAL_I2C_Init+0x124>)
 80033d8:	400a      	ands	r2, r1
 80033da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69d9      	ldr	r1, [r3, #28]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1a      	ldr	r2, [r3, #32]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2101      	movs	r1, #1
 8003412:	430a      	orrs	r2, r1
 8003414:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2241      	movs	r2, #65	; 0x41
 8003420:	2120      	movs	r1, #32
 8003422:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2242      	movs	r2, #66	; 0x42
 800342e:	2100      	movs	r1, #0
 8003430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b002      	add	sp, #8
 800343a:	bd80      	pop	{r7, pc}
 800343c:	f0ffffff 	.word	0xf0ffffff
 8003440:	ffff7fff 	.word	0xffff7fff
 8003444:	02008000 	.word	0x02008000

08003448 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b089      	sub	sp, #36	; 0x24
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	0008      	movs	r0, r1
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	0019      	movs	r1, r3
 8003456:	230a      	movs	r3, #10
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	1c02      	adds	r2, r0, #0
 800345c:	801a      	strh	r2, [r3, #0]
 800345e:	2308      	movs	r3, #8
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	1c0a      	adds	r2, r1, #0
 8003464:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2241      	movs	r2, #65	; 0x41
 800346a:	5c9b      	ldrb	r3, [r3, r2]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b20      	cmp	r3, #32
 8003470:	d000      	beq.n	8003474 <HAL_I2C_Master_Transmit+0x2c>
 8003472:	e0e7      	b.n	8003644 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2240      	movs	r2, #64	; 0x40
 8003478:	5c9b      	ldrb	r3, [r3, r2]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_I2C_Master_Transmit+0x3a>
 800347e:	2302      	movs	r3, #2
 8003480:	e0e1      	b.n	8003646 <HAL_I2C_Master_Transmit+0x1fe>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2240      	movs	r2, #64	; 0x40
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800348a:	f7ff f8b1 	bl	80025f0 <HAL_GetTick>
 800348e:	0003      	movs	r3, r0
 8003490:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	0219      	lsls	r1, r3, #8
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2319      	movs	r3, #25
 800349e:	2201      	movs	r2, #1
 80034a0:	f000 fa04 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 80034a4:	1e03      	subs	r3, r0, #0
 80034a6:	d001      	beq.n	80034ac <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0cc      	b.n	8003646 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2241      	movs	r2, #65	; 0x41
 80034b0:	2121      	movs	r1, #33	; 0x21
 80034b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2242      	movs	r2, #66	; 0x42
 80034b8:	2110      	movs	r1, #16
 80034ba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2208      	movs	r2, #8
 80034cc:	18ba      	adds	r2, r7, r2
 80034ce:	8812      	ldrh	r2, [r2, #0]
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2bff      	cmp	r3, #255	; 0xff
 80034e0:	d911      	bls.n	8003506 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	22ff      	movs	r2, #255	; 0xff
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	045c      	lsls	r4, r3, #17
 80034f2:	230a      	movs	r3, #10
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	8819      	ldrh	r1, [r3, #0]
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	4b55      	ldr	r3, [pc, #340]	; (8003650 <HAL_I2C_Master_Transmit+0x208>)
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	0023      	movs	r3, r4
 8003500:	f000 fc2e 	bl	8003d60 <I2C_TransferConfig>
 8003504:	e075      	b.n	80035f2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	b2da      	uxtb	r2, r3
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	049c      	lsls	r4, r3, #18
 800351a:	230a      	movs	r3, #10
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	8819      	ldrh	r1, [r3, #0]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <HAL_I2C_Master_Transmit+0x208>)
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	0023      	movs	r3, r4
 8003528:	f000 fc1a 	bl	8003d60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800352c:	e061      	b.n	80035f2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	0018      	movs	r0, r3
 8003536:	f000 fa07 	bl	8003948 <I2C_WaitOnTXISFlagUntilTimeout>
 800353a:	1e03      	subs	r3, r0, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e081      	b.n	8003646 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d03a      	beq.n	80035f2 <HAL_I2C_Master_Transmit+0x1aa>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	2b00      	cmp	r3, #0
 8003582:	d136      	bne.n	80035f2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	0013      	movs	r3, r2
 800358e:	2200      	movs	r2, #0
 8003590:	2180      	movs	r1, #128	; 0x80
 8003592:	f000 f98b 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 8003596:	1e03      	subs	r3, r0, #0
 8003598:	d001      	beq.n	800359e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e053      	b.n	8003646 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2bff      	cmp	r3, #255	; 0xff
 80035a6:	d911      	bls.n	80035cc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	22ff      	movs	r2, #255	; 0xff
 80035ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	045c      	lsls	r4, r3, #17
 80035b8:	230a      	movs	r3, #10
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	8819      	ldrh	r1, [r3, #0]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	2300      	movs	r3, #0
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	0023      	movs	r3, r4
 80035c6:	f000 fbcb 	bl	8003d60 <I2C_TransferConfig>
 80035ca:	e012      	b.n	80035f2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	049c      	lsls	r4, r3, #18
 80035e0:	230a      	movs	r3, #10
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	8819      	ldrh	r1, [r3, #0]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	2300      	movs	r3, #0
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	0023      	movs	r3, r4
 80035ee:	f000 fbb7 	bl	8003d60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d198      	bne.n	800352e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	0018      	movs	r0, r3
 8003604:	f000 f9e6 	bl	80039d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003608:	1e03      	subs	r3, r0, #0
 800360a:	d001      	beq.n	8003610 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e01a      	b.n	8003646 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2220      	movs	r2, #32
 8003616:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	490c      	ldr	r1, [pc, #48]	; (8003654 <HAL_I2C_Master_Transmit+0x20c>)
 8003624:	400a      	ands	r2, r1
 8003626:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2241      	movs	r2, #65	; 0x41
 800362c:	2120      	movs	r1, #32
 800362e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2242      	movs	r2, #66	; 0x42
 8003634:	2100      	movs	r1, #0
 8003636:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2240      	movs	r2, #64	; 0x40
 800363c:	2100      	movs	r1, #0
 800363e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	e000      	b.n	8003646 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003644:	2302      	movs	r3, #2
  }
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b007      	add	sp, #28
 800364c:	bd90      	pop	{r4, r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	80002000 	.word	0x80002000
 8003654:	fe00e800 	.word	0xfe00e800

08003658 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b089      	sub	sp, #36	; 0x24
 800365c:	af02      	add	r7, sp, #8
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	0008      	movs	r0, r1
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	0019      	movs	r1, r3
 8003666:	230a      	movs	r3, #10
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	1c02      	adds	r2, r0, #0
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	2308      	movs	r3, #8
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	1c0a      	adds	r2, r1, #0
 8003674:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2241      	movs	r2, #65	; 0x41
 800367a:	5c9b      	ldrb	r3, [r3, r2]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b20      	cmp	r3, #32
 8003680:	d000      	beq.n	8003684 <HAL_I2C_Master_Receive+0x2c>
 8003682:	e0e8      	b.n	8003856 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2240      	movs	r2, #64	; 0x40
 8003688:	5c9b      	ldrb	r3, [r3, r2]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_I2C_Master_Receive+0x3a>
 800368e:	2302      	movs	r3, #2
 8003690:	e0e2      	b.n	8003858 <HAL_I2C_Master_Receive+0x200>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2240      	movs	r2, #64	; 0x40
 8003696:	2101      	movs	r1, #1
 8003698:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800369a:	f7fe ffa9 	bl	80025f0 <HAL_GetTick>
 800369e:	0003      	movs	r3, r0
 80036a0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	0219      	lsls	r1, r3, #8
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	2319      	movs	r3, #25
 80036ae:	2201      	movs	r2, #1
 80036b0:	f000 f8fc 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 80036b4:	1e03      	subs	r3, r0, #0
 80036b6:	d001      	beq.n	80036bc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0cd      	b.n	8003858 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2241      	movs	r2, #65	; 0x41
 80036c0:	2122      	movs	r1, #34	; 0x22
 80036c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2242      	movs	r2, #66	; 0x42
 80036c8:	2110      	movs	r1, #16
 80036ca:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2208      	movs	r2, #8
 80036dc:	18ba      	adds	r2, r7, r2
 80036de:	8812      	ldrh	r2, [r2, #0]
 80036e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2bff      	cmp	r3, #255	; 0xff
 80036f0:	d911      	bls.n	8003716 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	22ff      	movs	r2, #255	; 0xff
 80036f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	045c      	lsls	r4, r3, #17
 8003702:	230a      	movs	r3, #10
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	8819      	ldrh	r1, [r3, #0]
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	4b55      	ldr	r3, [pc, #340]	; (8003860 <HAL_I2C_Master_Receive+0x208>)
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	0023      	movs	r3, r4
 8003710:	f000 fb26 	bl	8003d60 <I2C_TransferConfig>
 8003714:	e076      	b.n	8003804 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	b2da      	uxtb	r2, r3
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	049c      	lsls	r4, r3, #18
 800372a:	230a      	movs	r3, #10
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	8819      	ldrh	r1, [r3, #0]
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	4b4b      	ldr	r3, [pc, #300]	; (8003860 <HAL_I2C_Master_Receive+0x208>)
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	0023      	movs	r3, r4
 8003738:	f000 fb12 	bl	8003d60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800373c:	e062      	b.n	8003804 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	0018      	movs	r0, r3
 8003746:	f000 f989 	bl	8003a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800374a:	1e03      	subs	r3, r0, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e082      	b.n	8003858 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d03a      	beq.n	8003804 <HAL_I2C_Master_Receive+0x1ac>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003792:	2b00      	cmp	r3, #0
 8003794:	d136      	bne.n	8003804 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	0013      	movs	r3, r2
 80037a0:	2200      	movs	r2, #0
 80037a2:	2180      	movs	r1, #128	; 0x80
 80037a4:	f000 f882 	bl	80038ac <I2C_WaitOnFlagUntilTimeout>
 80037a8:	1e03      	subs	r3, r0, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e053      	b.n	8003858 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2bff      	cmp	r3, #255	; 0xff
 80037b8:	d911      	bls.n	80037de <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	22ff      	movs	r2, #255	; 0xff
 80037be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	045c      	lsls	r4, r3, #17
 80037ca:	230a      	movs	r3, #10
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	8819      	ldrh	r1, [r3, #0]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	2300      	movs	r3, #0
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	0023      	movs	r3, r4
 80037d8:	f000 fac2 	bl	8003d60 <I2C_TransferConfig>
 80037dc:	e012      	b.n	8003804 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	049c      	lsls	r4, r3, #18
 80037f2:	230a      	movs	r3, #10
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	8819      	ldrh	r1, [r3, #0]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	2300      	movs	r3, #0
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	0023      	movs	r3, r4
 8003800:	f000 faae 	bl	8003d60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d197      	bne.n	800373e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	0018      	movs	r0, r3
 8003816:	f000 f8dd 	bl	80039d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800381a:	1e03      	subs	r3, r0, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e01a      	b.n	8003858 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2220      	movs	r2, #32
 8003828:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	490b      	ldr	r1, [pc, #44]	; (8003864 <HAL_I2C_Master_Receive+0x20c>)
 8003836:	400a      	ands	r2, r1
 8003838:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2241      	movs	r2, #65	; 0x41
 800383e:	2120      	movs	r1, #32
 8003840:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2242      	movs	r2, #66	; 0x42
 8003846:	2100      	movs	r1, #0
 8003848:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2240      	movs	r2, #64	; 0x40
 800384e:	2100      	movs	r1, #0
 8003850:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e000      	b.n	8003858 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
  }
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b007      	add	sp, #28
 800385e:	bd90      	pop	{r4, r7, pc}
 8003860:	80002400 	.word	0x80002400
 8003864:	fe00e800 	.word	0xfe00e800

08003868 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2202      	movs	r2, #2
 8003878:	4013      	ands	r3, r2
 800387a:	2b02      	cmp	r3, #2
 800387c:	d103      	bne.n	8003886 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2200      	movs	r2, #0
 8003884:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2201      	movs	r2, #1
 800388e:	4013      	ands	r3, r2
 8003890:	2b01      	cmp	r3, #1
 8003892:	d007      	beq.n	80038a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2101      	movs	r1, #1
 80038a0:	430a      	orrs	r2, r1
 80038a2:	619a      	str	r2, [r3, #24]
  }
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b002      	add	sp, #8
 80038aa:	bd80      	pop	{r7, pc}

080038ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	1dfb      	adds	r3, r7, #7
 80038ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038bc:	e030      	b.n	8003920 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	3301      	adds	r3, #1
 80038c2:	d02d      	beq.n	8003920 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c4:	f7fe fe94 	bl	80025f0 <HAL_GetTick>
 80038c8:	0002      	movs	r2, r0
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d302      	bcc.n	80038da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d122      	bne.n	8003920 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	4013      	ands	r3, r2
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	425a      	negs	r2, r3
 80038ea:	4153      	adcs	r3, r2
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	001a      	movs	r2, r3
 80038f0:	1dfb      	adds	r3, r7, #7
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d113      	bne.n	8003920 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	2220      	movs	r2, #32
 80038fe:	431a      	orrs	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2241      	movs	r2, #65	; 0x41
 8003908:	2120      	movs	r1, #32
 800390a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2242      	movs	r2, #66	; 0x42
 8003910:	2100      	movs	r1, #0
 8003912:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2240      	movs	r2, #64	; 0x40
 8003918:	2100      	movs	r1, #0
 800391a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e00f      	b.n	8003940 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	4013      	ands	r3, r2
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	425a      	negs	r2, r3
 8003930:	4153      	adcs	r3, r2
 8003932:	b2db      	uxtb	r3, r3
 8003934:	001a      	movs	r2, r3
 8003936:	1dfb      	adds	r3, r7, #7
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d0bf      	beq.n	80038be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	b004      	add	sp, #16
 8003946:	bd80      	pop	{r7, pc}

08003948 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003954:	e032      	b.n	80039bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	0018      	movs	r0, r3
 800395e:	f000 f8ff 	bl	8003b60 <I2C_IsErrorOccurred>
 8003962:	1e03      	subs	r3, r0, #0
 8003964:	d001      	beq.n	800396a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e030      	b.n	80039cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	3301      	adds	r3, #1
 800396e:	d025      	beq.n	80039bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003970:	f7fe fe3e 	bl	80025f0 <HAL_GetTick>
 8003974:	0002      	movs	r2, r0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	429a      	cmp	r2, r3
 800397e:	d302      	bcc.n	8003986 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d11a      	bne.n	80039bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2202      	movs	r2, #2
 800398e:	4013      	ands	r3, r2
 8003990:	2b02      	cmp	r3, #2
 8003992:	d013      	beq.n	80039bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003998:	2220      	movs	r2, #32
 800399a:	431a      	orrs	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2241      	movs	r2, #65	; 0x41
 80039a4:	2120      	movs	r1, #32
 80039a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2242      	movs	r2, #66	; 0x42
 80039ac:	2100      	movs	r1, #0
 80039ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2240      	movs	r2, #64	; 0x40
 80039b4:	2100      	movs	r1, #0
 80039b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e007      	b.n	80039cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	2202      	movs	r2, #2
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d1c5      	bne.n	8003956 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	0018      	movs	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b004      	add	sp, #16
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039e0:	e02f      	b.n	8003a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 f8b9 	bl	8003b60 <I2C_IsErrorOccurred>
 80039ee:	1e03      	subs	r3, r0, #0
 80039f0:	d001      	beq.n	80039f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e02d      	b.n	8003a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f6:	f7fe fdfb 	bl	80025f0 <HAL_GetTick>
 80039fa:	0002      	movs	r2, r0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d302      	bcc.n	8003a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d11a      	bne.n	8003a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2220      	movs	r2, #32
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d013      	beq.n	8003a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	2220      	movs	r2, #32
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2241      	movs	r2, #65	; 0x41
 8003a2a:	2120      	movs	r1, #32
 8003a2c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2242      	movs	r2, #66	; 0x42
 8003a32:	2100      	movs	r1, #0
 8003a34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2240      	movs	r2, #64	; 0x40
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e007      	b.n	8003a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d1c8      	bne.n	80039e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	0018      	movs	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b004      	add	sp, #16
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a68:	e06b      	b.n	8003b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 f875 	bl	8003b60 <I2C_IsErrorOccurred>
 8003a76:	1e03      	subs	r3, r0, #0
 8003a78:	d001      	beq.n	8003a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e069      	b.n	8003b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2220      	movs	r2, #32
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d138      	bne.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2204      	movs	r2, #4
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d105      	bne.n	8003aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e055      	b.n	8003b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2210      	movs	r2, #16
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d107      	bne.n	8003ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2210      	movs	r2, #16
 8003aba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2204      	movs	r2, #4
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44
 8003ac2:	e002      	b.n	8003aca <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	491f      	ldr	r1, [pc, #124]	; (8003b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003ade:	400a      	ands	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2241      	movs	r2, #65	; 0x41
 8003ae6:	2120      	movs	r1, #32
 8003ae8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2242      	movs	r2, #66	; 0x42
 8003aee:	2100      	movs	r1, #0
 8003af0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2240      	movs	r2, #64	; 0x40
 8003af6:	2100      	movs	r1, #0
 8003af8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e029      	b.n	8003b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7fe fd77 	bl	80025f0 <HAL_GetTick>
 8003b02:	0002      	movs	r2, r0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d116      	bne.n	8003b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d00f      	beq.n	8003b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	2220      	movs	r2, #32
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2241      	movs	r2, #65	; 0x41
 8003b32:	2120      	movs	r1, #32
 8003b34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2240      	movs	r2, #64	; 0x40
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e007      	b.n	8003b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2204      	movs	r2, #4
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d18c      	bne.n	8003a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	0018      	movs	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b004      	add	sp, #16
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	fe00e800 	.word	0xfe00e800

08003b60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b60:	b590      	push	{r4, r7, lr}
 8003b62:	b08b      	sub	sp, #44	; 0x2c
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6c:	2327      	movs	r3, #39	; 0x27
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2210      	movs	r2, #16
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d100      	bne.n	8003b8e <I2C_IsErrorOccurred+0x2e>
 8003b8c:	e082      	b.n	8003c94 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2210      	movs	r2, #16
 8003b94:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b96:	e060      	b.n	8003c5a <I2C_IsErrorOccurred+0xfa>
 8003b98:	2427      	movs	r4, #39	; 0x27
 8003b9a:	193b      	adds	r3, r7, r4
 8003b9c:	193a      	adds	r2, r7, r4
 8003b9e:	7812      	ldrb	r2, [r2, #0]
 8003ba0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	d058      	beq.n	8003c5a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ba8:	f7fe fd22 	bl	80025f0 <HAL_GetTick>
 8003bac:	0002      	movs	r2, r0
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d306      	bcc.n	8003bc6 <I2C_IsErrorOccurred+0x66>
 8003bb8:	193b      	adds	r3, r7, r4
 8003bba:	193a      	adds	r2, r7, r4
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d149      	bne.n	8003c5a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	01db      	lsls	r3, r3, #7
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003bd4:	2013      	movs	r0, #19
 8003bd6:	183b      	adds	r3, r7, r0
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	2142      	movs	r1, #66	; 0x42
 8003bdc:	5c52      	ldrb	r2, [r2, r1]
 8003bde:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	401a      	ands	r2, r3
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d126      	bne.n	8003c42 <I2C_IsErrorOccurred+0xe2>
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	01db      	lsls	r3, r3, #7
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d021      	beq.n	8003c42 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003bfe:	183b      	adds	r3, r7, r0
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d01d      	beq.n	8003c42 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2180      	movs	r1, #128	; 0x80
 8003c12:	01c9      	lsls	r1, r1, #7
 8003c14:	430a      	orrs	r2, r1
 8003c16:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c18:	f7fe fcea 	bl	80025f0 <HAL_GetTick>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c20:	e00f      	b.n	8003c42 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c22:	f7fe fce5 	bl	80025f0 <HAL_GetTick>
 8003c26:	0002      	movs	r2, r0
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b19      	cmp	r3, #25
 8003c2e:	d908      	bls.n	8003c42 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	2220      	movs	r2, #32
 8003c34:	4313      	orrs	r3, r2
 8003c36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c38:	2327      	movs	r3, #39	; 0x27
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	701a      	strb	r2, [r3, #0]

              break;
 8003c40:	e00b      	b.n	8003c5a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2127      	movs	r1, #39	; 0x27
 8003c4e:	187a      	adds	r2, r7, r1
 8003c50:	1879      	adds	r1, r7, r1
 8003c52:	7809      	ldrb	r1, [r1, #0]
 8003c54:	7011      	strb	r1, [r2, #0]
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d1e3      	bne.n	8003c22 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2220      	movs	r2, #32
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d004      	beq.n	8003c72 <I2C_IsErrorOccurred+0x112>
 8003c68:	2327      	movs	r3, #39	; 0x27
 8003c6a:	18fb      	adds	r3, r7, r3
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d092      	beq.n	8003b98 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c72:	2327      	movs	r3, #39	; 0x27
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d103      	bne.n	8003c84 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2220      	movs	r2, #32
 8003c82:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	2204      	movs	r2, #4
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c8c:	2327      	movs	r3, #39	; 0x27
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d00c      	beq.n	8003cc0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4313      	orrs	r3, r2
 8003cac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2280      	movs	r2, #128	; 0x80
 8003cb4:	0052      	lsls	r2, r2, #1
 8003cb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cb8:	2327      	movs	r3, #39	; 0x27
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d00c      	beq.n	8003ce4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	2208      	movs	r2, #8
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	00d2      	lsls	r2, r2, #3
 8003cda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cdc:	2327      	movs	r3, #39	; 0x27
 8003cde:	18fb      	adds	r3, r7, r3
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4013      	ands	r3, r2
 8003cec:	d00c      	beq.n	8003d08 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2280      	movs	r2, #128	; 0x80
 8003cfc:	0092      	lsls	r2, r2, #2
 8003cfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d00:	2327      	movs	r3, #39	; 0x27
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003d08:	2327      	movs	r3, #39	; 0x27
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01d      	beq.n	8003d4e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7ff fda7 	bl	8003868 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	490d      	ldr	r1, [pc, #52]	; (8003d5c <I2C_IsErrorOccurred+0x1fc>)
 8003d26:	400a      	ands	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2241      	movs	r2, #65	; 0x41
 8003d3a:	2120      	movs	r1, #32
 8003d3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2242      	movs	r2, #66	; 0x42
 8003d42:	2100      	movs	r1, #0
 8003d44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2240      	movs	r2, #64	; 0x40
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003d4e:	2327      	movs	r3, #39	; 0x27
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	781b      	ldrb	r3, [r3, #0]
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b00b      	add	sp, #44	; 0x2c
 8003d5a:	bd90      	pop	{r4, r7, pc}
 8003d5c:	fe00e800 	.word	0xfe00e800

08003d60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	0008      	movs	r0, r1
 8003d6a:	0011      	movs	r1, r2
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	240a      	movs	r4, #10
 8003d70:	193b      	adds	r3, r7, r4
 8003d72:	1c02      	adds	r2, r0, #0
 8003d74:	801a      	strh	r2, [r3, #0]
 8003d76:	2009      	movs	r0, #9
 8003d78:	183b      	adds	r3, r7, r0
 8003d7a:	1c0a      	adds	r2, r1, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d7e:	193b      	adds	r3, r7, r4
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	059b      	lsls	r3, r3, #22
 8003d84:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d86:	183b      	adds	r3, r7, r0
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	0419      	lsls	r1, r3, #16
 8003d8c:	23ff      	movs	r3, #255	; 0xff
 8003d8e:	041b      	lsls	r3, r3, #16
 8003d90:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d92:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003daa:	0d51      	lsrs	r1, r2, #21
 8003dac:	2280      	movs	r2, #128	; 0x80
 8003dae:	00d2      	lsls	r2, r2, #3
 8003db0:	400a      	ands	r2, r1
 8003db2:	4907      	ldr	r1, [pc, #28]	; (8003dd0 <I2C_TransferConfig+0x70>)
 8003db4:	430a      	orrs	r2, r1
 8003db6:	43d2      	mvns	r2, r2
 8003db8:	401a      	ands	r2, r3
 8003dba:	0011      	movs	r1, r2
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b007      	add	sp, #28
 8003dcc:	bd90      	pop	{r4, r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	03ff63ff 	.word	0x03ff63ff

08003dd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2241      	movs	r2, #65	; 0x41
 8003de2:	5c9b      	ldrb	r3, [r3, r2]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d138      	bne.n	8003e5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2240      	movs	r2, #64	; 0x40
 8003dee:	5c9b      	ldrb	r3, [r3, r2]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e032      	b.n	8003e5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2240      	movs	r2, #64	; 0x40
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2241      	movs	r2, #65	; 0x41
 8003e04:	2124      	movs	r1, #36	; 0x24
 8003e06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2101      	movs	r1, #1
 8003e14:	438a      	bics	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4911      	ldr	r1, [pc, #68]	; (8003e68 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003e24:	400a      	ands	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6819      	ldr	r1, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2101      	movs	r1, #1
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2241      	movs	r2, #65	; 0x41
 8003e4c:	2120      	movs	r1, #32
 8003e4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2240      	movs	r2, #64	; 0x40
 8003e54:	2100      	movs	r1, #0
 8003e56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	0018      	movs	r0, r3
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b002      	add	sp, #8
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	ffffefff 	.word	0xffffefff

08003e6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2241      	movs	r2, #65	; 0x41
 8003e7a:	5c9b      	ldrb	r3, [r3, r2]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	d139      	bne.n	8003ef6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2240      	movs	r2, #64	; 0x40
 8003e86:	5c9b      	ldrb	r3, [r3, r2]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e033      	b.n	8003ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2240      	movs	r2, #64	; 0x40
 8003e94:	2101      	movs	r1, #1
 8003e96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2241      	movs	r2, #65	; 0x41
 8003e9c:	2124      	movs	r1, #36	; 0x24
 8003e9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2101      	movs	r1, #1
 8003eac:	438a      	bics	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a11      	ldr	r2, [pc, #68]	; (8003f00 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2101      	movs	r1, #1
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2241      	movs	r2, #65	; 0x41
 8003ee6:	2120      	movs	r1, #32
 8003ee8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2240      	movs	r2, #64	; 0x40
 8003eee:	2100      	movs	r1, #0
 8003ef0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e000      	b.n	8003ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ef6:	2302      	movs	r3, #2
  }
}
 8003ef8:	0018      	movs	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b004      	add	sp, #16
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	fffff0ff 	.word	0xfffff0ff

08003f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f04:	b5b0      	push	{r4, r5, r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d102      	bne.n	8003f18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f000 fb6c 	bl	80045f0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f18:	4bc8      	ldr	r3, [pc, #800]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	220c      	movs	r2, #12
 8003f1e:	4013      	ands	r3, r2
 8003f20:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f22:	4bc6      	ldr	r3, [pc, #792]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	025b      	lsls	r3, r3, #9
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2201      	movs	r2, #1
 8003f34:	4013      	ands	r3, r2
 8003f36:	d100      	bne.n	8003f3a <HAL_RCC_OscConfig+0x36>
 8003f38:	e07d      	b.n	8004036 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d007      	beq.n	8003f50 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	d112      	bne.n	8003f6c <HAL_RCC_OscConfig+0x68>
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	025b      	lsls	r3, r3, #9
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d10d      	bne.n	8003f6c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f50:	4bba      	ldr	r3, [pc, #744]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	029b      	lsls	r3, r3, #10
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d100      	bne.n	8003f5e <HAL_RCC_OscConfig+0x5a>
 8003f5c:	e06a      	b.n	8004034 <HAL_RCC_OscConfig+0x130>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d166      	bne.n	8004034 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f000 fb42 	bl	80045f0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	025b      	lsls	r3, r3, #9
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d107      	bne.n	8003f88 <HAL_RCC_OscConfig+0x84>
 8003f78:	4bb0      	ldr	r3, [pc, #704]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4baf      	ldr	r3, [pc, #700]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003f7e:	2180      	movs	r1, #128	; 0x80
 8003f80:	0249      	lsls	r1, r1, #9
 8003f82:	430a      	orrs	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e027      	b.n	8003fd8 <HAL_RCC_OscConfig+0xd4>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	23a0      	movs	r3, #160	; 0xa0
 8003f8e:	02db      	lsls	r3, r3, #11
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d10e      	bne.n	8003fb2 <HAL_RCC_OscConfig+0xae>
 8003f94:	4ba9      	ldr	r3, [pc, #676]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4ba8      	ldr	r3, [pc, #672]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003f9a:	2180      	movs	r1, #128	; 0x80
 8003f9c:	02c9      	lsls	r1, r1, #11
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	4ba6      	ldr	r3, [pc, #664]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4ba5      	ldr	r3, [pc, #660]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	0249      	lsls	r1, r1, #9
 8003fac:	430a      	orrs	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e012      	b.n	8003fd8 <HAL_RCC_OscConfig+0xd4>
 8003fb2:	4ba2      	ldr	r3, [pc, #648]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4ba1      	ldr	r3, [pc, #644]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003fb8:	49a1      	ldr	r1, [pc, #644]	; (8004240 <HAL_RCC_OscConfig+0x33c>)
 8003fba:	400a      	ands	r2, r1
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	4b9f      	ldr	r3, [pc, #636]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	025b      	lsls	r3, r3, #9
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4b9b      	ldr	r3, [pc, #620]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b9a      	ldr	r3, [pc, #616]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003fd2:	499c      	ldr	r1, [pc, #624]	; (8004244 <HAL_RCC_OscConfig+0x340>)
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d014      	beq.n	800400a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fe fb06 	bl	80025f0 <HAL_GetTick>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fea:	f7fe fb01 	bl	80025f0 <HAL_GetTick>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b64      	cmp	r3, #100	; 0x64
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e2f9      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ffc:	4b8f      	ldr	r3, [pc, #572]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	029b      	lsls	r3, r3, #10
 8004004:	4013      	ands	r3, r2
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0xe6>
 8004008:	e015      	b.n	8004036 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400a:	f7fe faf1 	bl	80025f0 <HAL_GetTick>
 800400e:	0003      	movs	r3, r0
 8004010:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004014:	f7fe faec 	bl	80025f0 <HAL_GetTick>
 8004018:	0002      	movs	r2, r0
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	; 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e2e4      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004026:	4b85      	ldr	r3, [pc, #532]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	2380      	movs	r3, #128	; 0x80
 800402c:	029b      	lsls	r3, r3, #10
 800402e:	4013      	ands	r3, r2
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x110>
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004034:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2202      	movs	r2, #2
 800403c:	4013      	ands	r3, r2
 800403e:	d100      	bne.n	8004042 <HAL_RCC_OscConfig+0x13e>
 8004040:	e099      	b.n	8004176 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	2220      	movs	r2, #32
 800404c:	4013      	ands	r3, r2
 800404e:	d009      	beq.n	8004064 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004050:	4b7a      	ldr	r3, [pc, #488]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4b79      	ldr	r3, [pc, #484]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8004056:	2120      	movs	r1, #32
 8004058:	430a      	orrs	r2, r1
 800405a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	2220      	movs	r2, #32
 8004060:	4393      	bics	r3, r2
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b04      	cmp	r3, #4
 8004068:	d005      	beq.n	8004076 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	2b0c      	cmp	r3, #12
 800406e:	d13e      	bne.n	80040ee <HAL_RCC_OscConfig+0x1ea>
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d13b      	bne.n	80040ee <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004076:	4b71      	ldr	r3, [pc, #452]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2204      	movs	r2, #4
 800407c:	4013      	ands	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_RCC_OscConfig+0x186>
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e2b2      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408a:	4b6c      	ldr	r3, [pc, #432]	; (800423c <HAL_RCC_OscConfig+0x338>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4a6e      	ldr	r2, [pc, #440]	; (8004248 <HAL_RCC_OscConfig+0x344>)
 8004090:	4013      	ands	r3, r2
 8004092:	0019      	movs	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	021a      	lsls	r2, r3, #8
 800409a:	4b68      	ldr	r3, [pc, #416]	; (800423c <HAL_RCC_OscConfig+0x338>)
 800409c:	430a      	orrs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80040a0:	4b66      	ldr	r3, [pc, #408]	; (800423c <HAL_RCC_OscConfig+0x338>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2209      	movs	r2, #9
 80040a6:	4393      	bics	r3, r2
 80040a8:	0019      	movs	r1, r3
 80040aa:	4b64      	ldr	r3, [pc, #400]	; (800423c <HAL_RCC_OscConfig+0x338>)
 80040ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ae:	430a      	orrs	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040b2:	f000 fbeb 	bl	800488c <HAL_RCC_GetSysClockFreq>
 80040b6:	0001      	movs	r1, r0
 80040b8:	4b60      	ldr	r3, [pc, #384]	; (800423c <HAL_RCC_OscConfig+0x338>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	220f      	movs	r2, #15
 80040c0:	4013      	ands	r3, r2
 80040c2:	4a62      	ldr	r2, [pc, #392]	; (800424c <HAL_RCC_OscConfig+0x348>)
 80040c4:	5cd3      	ldrb	r3, [r2, r3]
 80040c6:	000a      	movs	r2, r1
 80040c8:	40da      	lsrs	r2, r3
 80040ca:	4b61      	ldr	r3, [pc, #388]	; (8004250 <HAL_RCC_OscConfig+0x34c>)
 80040cc:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80040ce:	4b61      	ldr	r3, [pc, #388]	; (8004254 <HAL_RCC_OscConfig+0x350>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2513      	movs	r5, #19
 80040d4:	197c      	adds	r4, r7, r5
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7fe fa44 	bl	8002564 <HAL_InitTick>
 80040dc:	0003      	movs	r3, r0
 80040de:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80040e0:	197b      	adds	r3, r7, r5
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d046      	beq.n	8004176 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80040e8:	197b      	adds	r3, r7, r5
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	e280      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d027      	beq.n	8004144 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80040f4:	4b51      	ldr	r3, [pc, #324]	; (800423c <HAL_RCC_OscConfig+0x338>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2209      	movs	r2, #9
 80040fa:	4393      	bics	r3, r2
 80040fc:	0019      	movs	r1, r3
 80040fe:	4b4f      	ldr	r3, [pc, #316]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8004100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004102:	430a      	orrs	r2, r1
 8004104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004106:	f7fe fa73 	bl	80025f0 <HAL_GetTick>
 800410a:	0003      	movs	r3, r0
 800410c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004110:	f7fe fa6e 	bl	80025f0 <HAL_GetTick>
 8004114:	0002      	movs	r2, r0
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e266      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004122:	4b46      	ldr	r3, [pc, #280]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2204      	movs	r2, #4
 8004128:	4013      	ands	r3, r2
 800412a:	d0f1      	beq.n	8004110 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412c:	4b43      	ldr	r3, [pc, #268]	; (800423c <HAL_RCC_OscConfig+0x338>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	4a45      	ldr	r2, [pc, #276]	; (8004248 <HAL_RCC_OscConfig+0x344>)
 8004132:	4013      	ands	r3, r2
 8004134:	0019      	movs	r1, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	021a      	lsls	r2, r3, #8
 800413c:	4b3f      	ldr	r3, [pc, #252]	; (800423c <HAL_RCC_OscConfig+0x338>)
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	e018      	b.n	8004176 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004144:	4b3d      	ldr	r3, [pc, #244]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b3c      	ldr	r3, [pc, #240]	; (800423c <HAL_RCC_OscConfig+0x338>)
 800414a:	2101      	movs	r1, #1
 800414c:	438a      	bics	r2, r1
 800414e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fe fa4e 	bl	80025f0 <HAL_GetTick>
 8004154:	0003      	movs	r3, r0
 8004156:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800415a:	f7fe fa49 	bl	80025f0 <HAL_GetTick>
 800415e:	0002      	movs	r2, r0
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e241      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800416c:	4b33      	ldr	r3, [pc, #204]	; (800423c <HAL_RCC_OscConfig+0x338>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2204      	movs	r2, #4
 8004172:	4013      	ands	r3, r2
 8004174:	d1f1      	bne.n	800415a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2210      	movs	r2, #16
 800417c:	4013      	ands	r3, r2
 800417e:	d100      	bne.n	8004182 <HAL_RCC_OscConfig+0x27e>
 8004180:	e0a1      	b.n	80042c6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d140      	bne.n	800420a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004188:	4b2c      	ldr	r3, [pc, #176]	; (800423c <HAL_RCC_OscConfig+0x338>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	2380      	movs	r3, #128	; 0x80
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4013      	ands	r3, r2
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_OscConfig+0x29c>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e227      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041a0:	4b26      	ldr	r3, [pc, #152]	; (800423c <HAL_RCC_OscConfig+0x338>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4a2c      	ldr	r2, [pc, #176]	; (8004258 <HAL_RCC_OscConfig+0x354>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	0019      	movs	r1, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1a      	ldr	r2, [r3, #32]
 80041ae:	4b23      	ldr	r3, [pc, #140]	; (800423c <HAL_RCC_OscConfig+0x338>)
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041b4:	4b21      	ldr	r3, [pc, #132]	; (800423c <HAL_RCC_OscConfig+0x338>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	0a19      	lsrs	r1, r3, #8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	061a      	lsls	r2, r3, #24
 80041c2:	4b1e      	ldr	r3, [pc, #120]	; (800423c <HAL_RCC_OscConfig+0x338>)
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	0b5b      	lsrs	r3, r3, #13
 80041ce:	3301      	adds	r3, #1
 80041d0:	2280      	movs	r2, #128	; 0x80
 80041d2:	0212      	lsls	r2, r2, #8
 80041d4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80041d6:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_OscConfig+0x338>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	210f      	movs	r1, #15
 80041de:	400b      	ands	r3, r1
 80041e0:	491a      	ldr	r1, [pc, #104]	; (800424c <HAL_RCC_OscConfig+0x348>)
 80041e2:	5ccb      	ldrb	r3, [r1, r3]
 80041e4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80041e6:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <HAL_RCC_OscConfig+0x34c>)
 80041e8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80041ea:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <HAL_RCC_OscConfig+0x350>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2513      	movs	r5, #19
 80041f0:	197c      	adds	r4, r7, r5
 80041f2:	0018      	movs	r0, r3
 80041f4:	f7fe f9b6 	bl	8002564 <HAL_InitTick>
 80041f8:	0003      	movs	r3, r0
 80041fa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80041fc:	197b      	adds	r3, r7, r5
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d060      	beq.n	80042c6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8004204:	197b      	adds	r3, r7, r5
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	e1f2      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d03f      	beq.n	8004292 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_RCC_OscConfig+0x338>)
 8004218:	2180      	movs	r1, #128	; 0x80
 800421a:	0049      	lsls	r1, r1, #1
 800421c:	430a      	orrs	r2, r1
 800421e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004220:	f7fe f9e6 	bl	80025f0 <HAL_GetTick>
 8004224:	0003      	movs	r3, r0
 8004226:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004228:	e018      	b.n	800425c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800422a:	f7fe f9e1 	bl	80025f0 <HAL_GetTick>
 800422e:	0002      	movs	r2, r0
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d911      	bls.n	800425c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e1d9      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
 800423c:	40021000 	.word	0x40021000
 8004240:	fffeffff 	.word	0xfffeffff
 8004244:	fffbffff 	.word	0xfffbffff
 8004248:	ffffe0ff 	.word	0xffffe0ff
 800424c:	08008590 	.word	0x08008590
 8004250:	20000000 	.word	0x20000000
 8004254:	20000004 	.word	0x20000004
 8004258:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800425c:	4bc9      	ldr	r3, [pc, #804]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4013      	ands	r3, r2
 8004266:	d0e0      	beq.n	800422a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004268:	4bc6      	ldr	r3, [pc, #792]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4ac6      	ldr	r2, [pc, #792]	; (8004588 <HAL_RCC_OscConfig+0x684>)
 800426e:	4013      	ands	r3, r2
 8004270:	0019      	movs	r1, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1a      	ldr	r2, [r3, #32]
 8004276:	4bc3      	ldr	r3, [pc, #780]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004278:	430a      	orrs	r2, r1
 800427a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800427c:	4bc1      	ldr	r3, [pc, #772]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	0a19      	lsrs	r1, r3, #8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	061a      	lsls	r2, r3, #24
 800428a:	4bbe      	ldr	r3, [pc, #760]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
 8004290:	e019      	b.n	80042c6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004292:	4bbc      	ldr	r3, [pc, #752]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4bbb      	ldr	r3, [pc, #748]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004298:	49bc      	ldr	r1, [pc, #752]	; (800458c <HAL_RCC_OscConfig+0x688>)
 800429a:	400a      	ands	r2, r1
 800429c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429e:	f7fe f9a7 	bl	80025f0 <HAL_GetTick>
 80042a2:	0003      	movs	r3, r0
 80042a4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042a8:	f7fe f9a2 	bl	80025f0 <HAL_GetTick>
 80042ac:	0002      	movs	r2, r0
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e19a      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80042ba:	4bb2      	ldr	r3, [pc, #712]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4013      	ands	r3, r2
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2208      	movs	r2, #8
 80042cc:	4013      	ands	r3, r2
 80042ce:	d036      	beq.n	800433e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d019      	beq.n	800430c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042d8:	4baa      	ldr	r3, [pc, #680]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 80042da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042dc:	4ba9      	ldr	r3, [pc, #676]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 80042de:	2101      	movs	r1, #1
 80042e0:	430a      	orrs	r2, r1
 80042e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e4:	f7fe f984 	bl	80025f0 <HAL_GetTick>
 80042e8:	0003      	movs	r3, r0
 80042ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ee:	f7fe f97f 	bl	80025f0 <HAL_GetTick>
 80042f2:	0002      	movs	r2, r0
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e177      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004300:	4ba0      	ldr	r3, [pc, #640]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004304:	2202      	movs	r2, #2
 8004306:	4013      	ands	r3, r2
 8004308:	d0f1      	beq.n	80042ee <HAL_RCC_OscConfig+0x3ea>
 800430a:	e018      	b.n	800433e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800430c:	4b9d      	ldr	r3, [pc, #628]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 800430e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004310:	4b9c      	ldr	r3, [pc, #624]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004312:	2101      	movs	r1, #1
 8004314:	438a      	bics	r2, r1
 8004316:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004318:	f7fe f96a 	bl	80025f0 <HAL_GetTick>
 800431c:	0003      	movs	r3, r0
 800431e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004322:	f7fe f965 	bl	80025f0 <HAL_GetTick>
 8004326:	0002      	movs	r2, r0
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e15d      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004334:	4b93      	ldr	r3, [pc, #588]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004338:	2202      	movs	r2, #2
 800433a:	4013      	ands	r3, r2
 800433c:	d1f1      	bne.n	8004322 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2204      	movs	r2, #4
 8004344:	4013      	ands	r3, r2
 8004346:	d100      	bne.n	800434a <HAL_RCC_OscConfig+0x446>
 8004348:	e0ae      	b.n	80044a8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800434a:	2023      	movs	r0, #35	; 0x23
 800434c:	183b      	adds	r3, r7, r0
 800434e:	2200      	movs	r2, #0
 8004350:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004352:	4b8c      	ldr	r3, [pc, #560]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004356:	2380      	movs	r3, #128	; 0x80
 8004358:	055b      	lsls	r3, r3, #21
 800435a:	4013      	ands	r3, r2
 800435c:	d109      	bne.n	8004372 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435e:	4b89      	ldr	r3, [pc, #548]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004362:	4b88      	ldr	r3, [pc, #544]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004364:	2180      	movs	r1, #128	; 0x80
 8004366:	0549      	lsls	r1, r1, #21
 8004368:	430a      	orrs	r2, r1
 800436a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800436c:	183b      	adds	r3, r7, r0
 800436e:	2201      	movs	r2, #1
 8004370:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004372:	4b87      	ldr	r3, [pc, #540]	; (8004590 <HAL_RCC_OscConfig+0x68c>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	4013      	ands	r3, r2
 800437c:	d11a      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800437e:	4b84      	ldr	r3, [pc, #528]	; (8004590 <HAL_RCC_OscConfig+0x68c>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b83      	ldr	r3, [pc, #524]	; (8004590 <HAL_RCC_OscConfig+0x68c>)
 8004384:	2180      	movs	r1, #128	; 0x80
 8004386:	0049      	lsls	r1, r1, #1
 8004388:	430a      	orrs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800438c:	f7fe f930 	bl	80025f0 <HAL_GetTick>
 8004390:	0003      	movs	r3, r0
 8004392:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004396:	f7fe f92b 	bl	80025f0 <HAL_GetTick>
 800439a:	0002      	movs	r2, r0
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b64      	cmp	r3, #100	; 0x64
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e123      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a8:	4b79      	ldr	r3, [pc, #484]	; (8004590 <HAL_RCC_OscConfig+0x68c>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	2380      	movs	r3, #128	; 0x80
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4013      	ands	r3, r2
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	429a      	cmp	r2, r3
 80043be:	d107      	bne.n	80043d0 <HAL_RCC_OscConfig+0x4cc>
 80043c0:	4b70      	ldr	r3, [pc, #448]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 80043c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043c4:	4b6f      	ldr	r3, [pc, #444]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 80043c6:	2180      	movs	r1, #128	; 0x80
 80043c8:	0049      	lsls	r1, r1, #1
 80043ca:	430a      	orrs	r2, r1
 80043cc:	651a      	str	r2, [r3, #80]	; 0x50
 80043ce:	e031      	b.n	8004434 <HAL_RCC_OscConfig+0x530>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10c      	bne.n	80043f2 <HAL_RCC_OscConfig+0x4ee>
 80043d8:	4b6a      	ldr	r3, [pc, #424]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 80043da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043dc:	4b69      	ldr	r3, [pc, #420]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 80043de:	496b      	ldr	r1, [pc, #428]	; (800458c <HAL_RCC_OscConfig+0x688>)
 80043e0:	400a      	ands	r2, r1
 80043e2:	651a      	str	r2, [r3, #80]	; 0x50
 80043e4:	4b67      	ldr	r3, [pc, #412]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 80043e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043e8:	4b66      	ldr	r3, [pc, #408]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 80043ea:	496a      	ldr	r1, [pc, #424]	; (8004594 <HAL_RCC_OscConfig+0x690>)
 80043ec:	400a      	ands	r2, r1
 80043ee:	651a      	str	r2, [r3, #80]	; 0x50
 80043f0:	e020      	b.n	8004434 <HAL_RCC_OscConfig+0x530>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	23a0      	movs	r3, #160	; 0xa0
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d10e      	bne.n	800441c <HAL_RCC_OscConfig+0x518>
 80043fe:	4b61      	ldr	r3, [pc, #388]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004400:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004402:	4b60      	ldr	r3, [pc, #384]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004404:	2180      	movs	r1, #128	; 0x80
 8004406:	00c9      	lsls	r1, r1, #3
 8004408:	430a      	orrs	r2, r1
 800440a:	651a      	str	r2, [r3, #80]	; 0x50
 800440c:	4b5d      	ldr	r3, [pc, #372]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 800440e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004410:	4b5c      	ldr	r3, [pc, #368]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004412:	2180      	movs	r1, #128	; 0x80
 8004414:	0049      	lsls	r1, r1, #1
 8004416:	430a      	orrs	r2, r1
 8004418:	651a      	str	r2, [r3, #80]	; 0x50
 800441a:	e00b      	b.n	8004434 <HAL_RCC_OscConfig+0x530>
 800441c:	4b59      	ldr	r3, [pc, #356]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 800441e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004420:	4b58      	ldr	r3, [pc, #352]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004422:	495a      	ldr	r1, [pc, #360]	; (800458c <HAL_RCC_OscConfig+0x688>)
 8004424:	400a      	ands	r2, r1
 8004426:	651a      	str	r2, [r3, #80]	; 0x50
 8004428:	4b56      	ldr	r3, [pc, #344]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 800442a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800442c:	4b55      	ldr	r3, [pc, #340]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 800442e:	4959      	ldr	r1, [pc, #356]	; (8004594 <HAL_RCC_OscConfig+0x690>)
 8004430:	400a      	ands	r2, r1
 8004432:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d015      	beq.n	8004468 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443c:	f7fe f8d8 	bl	80025f0 <HAL_GetTick>
 8004440:	0003      	movs	r3, r0
 8004442:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004444:	e009      	b.n	800445a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004446:	f7fe f8d3 	bl	80025f0 <HAL_GetTick>
 800444a:	0002      	movs	r2, r0
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	4a51      	ldr	r2, [pc, #324]	; (8004598 <HAL_RCC_OscConfig+0x694>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e0ca      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800445a:	4b4a      	ldr	r3, [pc, #296]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 800445c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4013      	ands	r3, r2
 8004464:	d0ef      	beq.n	8004446 <HAL_RCC_OscConfig+0x542>
 8004466:	e014      	b.n	8004492 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004468:	f7fe f8c2 	bl	80025f0 <HAL_GetTick>
 800446c:	0003      	movs	r3, r0
 800446e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004470:	e009      	b.n	8004486 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004472:	f7fe f8bd 	bl	80025f0 <HAL_GetTick>
 8004476:	0002      	movs	r2, r0
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	4a46      	ldr	r2, [pc, #280]	; (8004598 <HAL_RCC_OscConfig+0x694>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e0b4      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004486:	4b3f      	ldr	r3, [pc, #252]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800448a:	2380      	movs	r3, #128	; 0x80
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4013      	ands	r3, r2
 8004490:	d1ef      	bne.n	8004472 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004492:	2323      	movs	r3, #35	; 0x23
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d105      	bne.n	80044a8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800449c:	4b39      	ldr	r3, [pc, #228]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 800449e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a0:	4b38      	ldr	r3, [pc, #224]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 80044a2:	493e      	ldr	r1, [pc, #248]	; (800459c <HAL_RCC_OscConfig+0x698>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d100      	bne.n	80044b2 <HAL_RCC_OscConfig+0x5ae>
 80044b0:	e09d      	b.n	80045ee <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2b0c      	cmp	r3, #12
 80044b6:	d100      	bne.n	80044ba <HAL_RCC_OscConfig+0x5b6>
 80044b8:	e076      	b.n	80045a8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d145      	bne.n	800454e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c2:	4b30      	ldr	r3, [pc, #192]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 80044c8:	4935      	ldr	r1, [pc, #212]	; (80045a0 <HAL_RCC_OscConfig+0x69c>)
 80044ca:	400a      	ands	r2, r1
 80044cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ce:	f7fe f88f 	bl	80025f0 <HAL_GetTick>
 80044d2:	0003      	movs	r3, r0
 80044d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fe f88a 	bl	80025f0 <HAL_GetTick>
 80044dc:	0002      	movs	r2, r0
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e082      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044ea:	4b26      	ldr	r3, [pc, #152]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	049b      	lsls	r3, r3, #18
 80044f2:	4013      	ands	r3, r2
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f6:	4b23      	ldr	r3, [pc, #140]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	4a2a      	ldr	r2, [pc, #168]	; (80045a4 <HAL_RCC_OscConfig+0x6a0>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	0019      	movs	r1, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	431a      	orrs	r2, r3
 8004510:	4b1c      	ldr	r3, [pc, #112]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004512:	430a      	orrs	r2, r1
 8004514:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004516:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 800451c:	2180      	movs	r1, #128	; 0x80
 800451e:	0449      	lsls	r1, r1, #17
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7fe f864 	bl	80025f0 <HAL_GetTick>
 8004528:	0003      	movs	r3, r0
 800452a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452e:	f7fe f85f 	bl	80025f0 <HAL_GetTick>
 8004532:	0002      	movs	r2, r0
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e057      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004540:	4b10      	ldr	r3, [pc, #64]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	049b      	lsls	r3, r3, #18
 8004548:	4013      	ands	r3, r2
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x62a>
 800454c:	e04f      	b.n	80045ee <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800454e:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004554:	4912      	ldr	r1, [pc, #72]	; (80045a0 <HAL_RCC_OscConfig+0x69c>)
 8004556:	400a      	ands	r2, r1
 8004558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455a:	f7fe f849 	bl	80025f0 <HAL_GetTick>
 800455e:	0003      	movs	r3, r0
 8004560:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004564:	f7fe f844 	bl	80025f0 <HAL_GetTick>
 8004568:	0002      	movs	r2, r0
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e03c      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004576:	4b03      	ldr	r3, [pc, #12]	; (8004584 <HAL_RCC_OscConfig+0x680>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	049b      	lsls	r3, r3, #18
 800457e:	4013      	ands	r3, r2
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x660>
 8004582:	e034      	b.n	80045ee <HAL_RCC_OscConfig+0x6ea>
 8004584:	40021000 	.word	0x40021000
 8004588:	ffff1fff 	.word	0xffff1fff
 800458c:	fffffeff 	.word	0xfffffeff
 8004590:	40007000 	.word	0x40007000
 8004594:	fffffbff 	.word	0xfffffbff
 8004598:	00001388 	.word	0x00001388
 800459c:	efffffff 	.word	0xefffffff
 80045a0:	feffffff 	.word	0xfeffffff
 80045a4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e01d      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045b4:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <HAL_RCC_OscConfig+0x6f4>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	025b      	lsls	r3, r3, #9
 80045c0:	401a      	ands	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d10f      	bne.n	80045ea <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	23f0      	movs	r3, #240	; 0xf0
 80045ce:	039b      	lsls	r3, r3, #14
 80045d0:	401a      	ands	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	23c0      	movs	r3, #192	; 0xc0
 80045de:	041b      	lsls	r3, r3, #16
 80045e0:	401a      	ands	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d001      	beq.n	80045ee <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	0018      	movs	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b00a      	add	sp, #40	; 0x28
 80045f6:	bdb0      	pop	{r4, r5, r7, pc}
 80045f8:	40021000 	.word	0x40021000

080045fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045fc:	b5b0      	push	{r4, r5, r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e128      	b.n	8004862 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004610:	4b96      	ldr	r3, [pc, #600]	; (800486c <HAL_RCC_ClockConfig+0x270>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2201      	movs	r2, #1
 8004616:	4013      	ands	r3, r2
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d91e      	bls.n	800465c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461e:	4b93      	ldr	r3, [pc, #588]	; (800486c <HAL_RCC_ClockConfig+0x270>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2201      	movs	r2, #1
 8004624:	4393      	bics	r3, r2
 8004626:	0019      	movs	r1, r3
 8004628:	4b90      	ldr	r3, [pc, #576]	; (800486c <HAL_RCC_ClockConfig+0x270>)
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004630:	f7fd ffde 	bl	80025f0 <HAL_GetTick>
 8004634:	0003      	movs	r3, r0
 8004636:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004638:	e009      	b.n	800464e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800463a:	f7fd ffd9 	bl	80025f0 <HAL_GetTick>
 800463e:	0002      	movs	r2, r0
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	4a8a      	ldr	r2, [pc, #552]	; (8004870 <HAL_RCC_ClockConfig+0x274>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e109      	b.n	8004862 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800464e:	4b87      	ldr	r3, [pc, #540]	; (800486c <HAL_RCC_ClockConfig+0x270>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2201      	movs	r2, #1
 8004654:	4013      	ands	r3, r2
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d1ee      	bne.n	800463a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2202      	movs	r2, #2
 8004662:	4013      	ands	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004666:	4b83      	ldr	r3, [pc, #524]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	22f0      	movs	r2, #240	; 0xf0
 800466c:	4393      	bics	r3, r2
 800466e:	0019      	movs	r1, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	4b7f      	ldr	r3, [pc, #508]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 8004676:	430a      	orrs	r2, r1
 8004678:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2201      	movs	r2, #1
 8004680:	4013      	ands	r3, r2
 8004682:	d100      	bne.n	8004686 <HAL_RCC_ClockConfig+0x8a>
 8004684:	e089      	b.n	800479a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d107      	bne.n	800469e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800468e:	4b79      	ldr	r3, [pc, #484]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	2380      	movs	r3, #128	; 0x80
 8004694:	029b      	lsls	r3, r3, #10
 8004696:	4013      	ands	r3, r2
 8004698:	d120      	bne.n	80046dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e0e1      	b.n	8004862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d107      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046a6:	4b73      	ldr	r3, [pc, #460]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	049b      	lsls	r3, r3, #18
 80046ae:	4013      	ands	r3, r2
 80046b0:	d114      	bne.n	80046dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e0d5      	b.n	8004862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d106      	bne.n	80046cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046be:	4b6d      	ldr	r3, [pc, #436]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2204      	movs	r2, #4
 80046c4:	4013      	ands	r3, r2
 80046c6:	d109      	bne.n	80046dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0ca      	b.n	8004862 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046cc:	4b69      	ldr	r3, [pc, #420]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	2380      	movs	r3, #128	; 0x80
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4013      	ands	r3, r2
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0c2      	b.n	8004862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046dc:	4b65      	ldr	r3, [pc, #404]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2203      	movs	r2, #3
 80046e2:	4393      	bics	r3, r2
 80046e4:	0019      	movs	r1, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	4b62      	ldr	r3, [pc, #392]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 80046ec:	430a      	orrs	r2, r1
 80046ee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f0:	f7fd ff7e 	bl	80025f0 <HAL_GetTick>
 80046f4:	0003      	movs	r3, r0
 80046f6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d111      	bne.n	8004724 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004700:	e009      	b.n	8004716 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004702:	f7fd ff75 	bl	80025f0 <HAL_GetTick>
 8004706:	0002      	movs	r2, r0
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	4a58      	ldr	r2, [pc, #352]	; (8004870 <HAL_RCC_ClockConfig+0x274>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e0a5      	b.n	8004862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004716:	4b57      	ldr	r3, [pc, #348]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	220c      	movs	r2, #12
 800471c:	4013      	ands	r3, r2
 800471e:	2b08      	cmp	r3, #8
 8004720:	d1ef      	bne.n	8004702 <HAL_RCC_ClockConfig+0x106>
 8004722:	e03a      	b.n	800479a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d111      	bne.n	8004750 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800472c:	e009      	b.n	8004742 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800472e:	f7fd ff5f 	bl	80025f0 <HAL_GetTick>
 8004732:	0002      	movs	r2, r0
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	4a4d      	ldr	r2, [pc, #308]	; (8004870 <HAL_RCC_ClockConfig+0x274>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e08f      	b.n	8004862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004742:	4b4c      	ldr	r3, [pc, #304]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	220c      	movs	r2, #12
 8004748:	4013      	ands	r3, r2
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d1ef      	bne.n	800472e <HAL_RCC_ClockConfig+0x132>
 800474e:	e024      	b.n	800479a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d11b      	bne.n	8004790 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004758:	e009      	b.n	800476e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800475a:	f7fd ff49 	bl	80025f0 <HAL_GetTick>
 800475e:	0002      	movs	r2, r0
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	4a42      	ldr	r2, [pc, #264]	; (8004870 <HAL_RCC_ClockConfig+0x274>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e079      	b.n	8004862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800476e:	4b41      	ldr	r3, [pc, #260]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	220c      	movs	r2, #12
 8004774:	4013      	ands	r3, r2
 8004776:	2b04      	cmp	r3, #4
 8004778:	d1ef      	bne.n	800475a <HAL_RCC_ClockConfig+0x15e>
 800477a:	e00e      	b.n	800479a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800477c:	f7fd ff38 	bl	80025f0 <HAL_GetTick>
 8004780:	0002      	movs	r2, r0
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	4a3a      	ldr	r2, [pc, #232]	; (8004870 <HAL_RCC_ClockConfig+0x274>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e068      	b.n	8004862 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004790:	4b38      	ldr	r3, [pc, #224]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	220c      	movs	r2, #12
 8004796:	4013      	ands	r3, r2
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800479a:	4b34      	ldr	r3, [pc, #208]	; (800486c <HAL_RCC_ClockConfig+0x270>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2201      	movs	r2, #1
 80047a0:	4013      	ands	r3, r2
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d21e      	bcs.n	80047e6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a8:	4b30      	ldr	r3, [pc, #192]	; (800486c <HAL_RCC_ClockConfig+0x270>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2201      	movs	r2, #1
 80047ae:	4393      	bics	r3, r2
 80047b0:	0019      	movs	r1, r3
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <HAL_RCC_ClockConfig+0x270>)
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047ba:	f7fd ff19 	bl	80025f0 <HAL_GetTick>
 80047be:	0003      	movs	r3, r0
 80047c0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	e009      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c4:	f7fd ff14 	bl	80025f0 <HAL_GetTick>
 80047c8:	0002      	movs	r2, r0
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	4a28      	ldr	r2, [pc, #160]	; (8004870 <HAL_RCC_ClockConfig+0x274>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e044      	b.n	8004862 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d8:	4b24      	ldr	r3, [pc, #144]	; (800486c <HAL_RCC_ClockConfig+0x270>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2201      	movs	r2, #1
 80047de:	4013      	ands	r3, r2
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d1ee      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2204      	movs	r2, #4
 80047ec:	4013      	ands	r3, r2
 80047ee:	d009      	beq.n	8004804 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f0:	4b20      	ldr	r3, [pc, #128]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a20      	ldr	r2, [pc, #128]	; (8004878 <HAL_RCC_ClockConfig+0x27c>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	0019      	movs	r1, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	4b1d      	ldr	r3, [pc, #116]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 8004800:	430a      	orrs	r2, r1
 8004802:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2208      	movs	r2, #8
 800480a:	4013      	ands	r3, r2
 800480c:	d00a      	beq.n	8004824 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800480e:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	4a1a      	ldr	r2, [pc, #104]	; (800487c <HAL_RCC_ClockConfig+0x280>)
 8004814:	4013      	ands	r3, r2
 8004816:	0019      	movs	r1, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	00da      	lsls	r2, r3, #3
 800481e:	4b15      	ldr	r3, [pc, #84]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 8004820:	430a      	orrs	r2, r1
 8004822:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004824:	f000 f832 	bl	800488c <HAL_RCC_GetSysClockFreq>
 8004828:	0001      	movs	r1, r0
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <HAL_RCC_ClockConfig+0x278>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	220f      	movs	r2, #15
 8004832:	4013      	ands	r3, r2
 8004834:	4a12      	ldr	r2, [pc, #72]	; (8004880 <HAL_RCC_ClockConfig+0x284>)
 8004836:	5cd3      	ldrb	r3, [r2, r3]
 8004838:	000a      	movs	r2, r1
 800483a:	40da      	lsrs	r2, r3
 800483c:	4b11      	ldr	r3, [pc, #68]	; (8004884 <HAL_RCC_ClockConfig+0x288>)
 800483e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <HAL_RCC_ClockConfig+0x28c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	250b      	movs	r5, #11
 8004846:	197c      	adds	r4, r7, r5
 8004848:	0018      	movs	r0, r3
 800484a:	f7fd fe8b 	bl	8002564 <HAL_InitTick>
 800484e:	0003      	movs	r3, r0
 8004850:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004852:	197b      	adds	r3, r7, r5
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800485a:	197b      	adds	r3, r7, r5
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	e000      	b.n	8004862 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	0018      	movs	r0, r3
 8004864:	46bd      	mov	sp, r7
 8004866:	b004      	add	sp, #16
 8004868:	bdb0      	pop	{r4, r5, r7, pc}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	40022000 	.word	0x40022000
 8004870:	00001388 	.word	0x00001388
 8004874:	40021000 	.word	0x40021000
 8004878:	fffff8ff 	.word	0xfffff8ff
 800487c:	ffffc7ff 	.word	0xffffc7ff
 8004880:	08008590 	.word	0x08008590
 8004884:	20000000 	.word	0x20000000
 8004888:	20000004 	.word	0x20000004

0800488c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800488c:	b5b0      	push	{r4, r5, r7, lr}
 800488e:	b08e      	sub	sp, #56	; 0x38
 8004890:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004892:	4b4c      	ldr	r3, [pc, #304]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800489a:	230c      	movs	r3, #12
 800489c:	4013      	ands	r3, r2
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d014      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x40>
 80048a2:	d900      	bls.n	80048a6 <HAL_RCC_GetSysClockFreq+0x1a>
 80048a4:	e07b      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x112>
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d002      	beq.n	80048b0 <HAL_RCC_GetSysClockFreq+0x24>
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d00b      	beq.n	80048c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ae:	e076      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80048b0:	4b44      	ldr	r3, [pc, #272]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2210      	movs	r2, #16
 80048b6:	4013      	ands	r3, r2
 80048b8:	d002      	beq.n	80048c0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80048ba:	4b43      	ldr	r3, [pc, #268]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80048bc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80048be:	e07c      	b.n	80049ba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80048c0:	4b42      	ldr	r3, [pc, #264]	; (80049cc <HAL_RCC_GetSysClockFreq+0x140>)
 80048c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048c4:	e079      	b.n	80049ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048c6:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80048c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048ca:	e076      	b.n	80049ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	0c9a      	lsrs	r2, r3, #18
 80048d0:	230f      	movs	r3, #15
 80048d2:	401a      	ands	r2, r3
 80048d4:	4b3f      	ldr	r3, [pc, #252]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x148>)
 80048d6:	5c9b      	ldrb	r3, [r3, r2]
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80048da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048dc:	0d9a      	lsrs	r2, r3, #22
 80048de:	2303      	movs	r3, #3
 80048e0:	4013      	ands	r3, r2
 80048e2:	3301      	adds	r3, #1
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048e6:	4b37      	ldr	r3, [pc, #220]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	025b      	lsls	r3, r3, #9
 80048ee:	4013      	ands	r3, r2
 80048f0:	d01a      	beq.n	8004928 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	4a35      	ldr	r2, [pc, #212]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80048fc:	2300      	movs	r3, #0
 80048fe:	69b8      	ldr	r0, [r7, #24]
 8004900:	69f9      	ldr	r1, [r7, #28]
 8004902:	f7fb fcb7 	bl	8000274 <__aeabi_lmul>
 8004906:	0002      	movs	r2, r0
 8004908:	000b      	movs	r3, r1
 800490a:	0010      	movs	r0, r2
 800490c:	0019      	movs	r1, r3
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f7fb fc8b 	bl	8000234 <__aeabi_uldivmod>
 800491e:	0002      	movs	r2, r0
 8004920:	000b      	movs	r3, r1
 8004922:	0013      	movs	r3, r2
 8004924:	637b      	str	r3, [r7, #52]	; 0x34
 8004926:	e037      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004928:	4b26      	ldr	r3, [pc, #152]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2210      	movs	r2, #16
 800492e:	4013      	ands	r3, r2
 8004930:	d01a      	beq.n	8004968 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	4a23      	ldr	r2, [pc, #140]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800493c:	2300      	movs	r3, #0
 800493e:	68b8      	ldr	r0, [r7, #8]
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	f7fb fc97 	bl	8000274 <__aeabi_lmul>
 8004946:	0002      	movs	r2, r0
 8004948:	000b      	movs	r3, r1
 800494a:	0010      	movs	r0, r2
 800494c:	0019      	movs	r1, r3
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	603b      	str	r3, [r7, #0]
 8004952:	2300      	movs	r3, #0
 8004954:	607b      	str	r3, [r7, #4]
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f7fb fc6b 	bl	8000234 <__aeabi_uldivmod>
 800495e:	0002      	movs	r2, r0
 8004960:	000b      	movs	r3, r1
 8004962:	0013      	movs	r3, r2
 8004964:	637b      	str	r3, [r7, #52]	; 0x34
 8004966:	e017      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	0018      	movs	r0, r3
 800496c:	2300      	movs	r3, #0
 800496e:	0019      	movs	r1, r3
 8004970:	4a16      	ldr	r2, [pc, #88]	; (80049cc <HAL_RCC_GetSysClockFreq+0x140>)
 8004972:	2300      	movs	r3, #0
 8004974:	f7fb fc7e 	bl	8000274 <__aeabi_lmul>
 8004978:	0002      	movs	r2, r0
 800497a:	000b      	movs	r3, r1
 800497c:	0010      	movs	r0, r2
 800497e:	0019      	movs	r1, r3
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	001c      	movs	r4, r3
 8004984:	2300      	movs	r3, #0
 8004986:	001d      	movs	r5, r3
 8004988:	0022      	movs	r2, r4
 800498a:	002b      	movs	r3, r5
 800498c:	f7fb fc52 	bl	8000234 <__aeabi_uldivmod>
 8004990:	0002      	movs	r2, r0
 8004992:	000b      	movs	r3, r1
 8004994:	0013      	movs	r3, r2
 8004996:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800499c:	e00d      	b.n	80049ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	0b5b      	lsrs	r3, r3, #13
 80049a4:	2207      	movs	r2, #7
 80049a6:	4013      	ands	r3, r2
 80049a8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	3301      	adds	r3, #1
 80049ae:	2280      	movs	r2, #128	; 0x80
 80049b0:	0212      	lsls	r2, r2, #8
 80049b2:	409a      	lsls	r2, r3
 80049b4:	0013      	movs	r3, r2
 80049b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049b8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80049bc:	0018      	movs	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	b00e      	add	sp, #56	; 0x38
 80049c2:	bdb0      	pop	{r4, r5, r7, pc}
 80049c4:	40021000 	.word	0x40021000
 80049c8:	003d0900 	.word	0x003d0900
 80049cc:	00f42400 	.word	0x00f42400
 80049d0:	007a1200 	.word	0x007a1200
 80049d4:	080085a8 	.word	0x080085a8

080049d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049dc:	4b02      	ldr	r3, [pc, #8]	; (80049e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80049de:	681b      	ldr	r3, [r3, #0]
}
 80049e0:	0018      	movs	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	20000000 	.word	0x20000000

080049ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049f0:	f7ff fff2 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 80049f4:	0001      	movs	r1, r0
 80049f6:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	2207      	movs	r2, #7
 80049fe:	4013      	ands	r3, r2
 8004a00:	4a04      	ldr	r2, [pc, #16]	; (8004a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a02:	5cd3      	ldrb	r3, [r2, r3]
 8004a04:	40d9      	lsrs	r1, r3
 8004a06:	000b      	movs	r3, r1
}
 8004a08:	0018      	movs	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	40021000 	.word	0x40021000
 8004a14:	080085a0 	.word	0x080085a0

08004a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a1c:	f7ff ffdc 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 8004a20:	0001      	movs	r1, r0
 8004a22:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	0adb      	lsrs	r3, r3, #11
 8004a28:	2207      	movs	r2, #7
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	4a04      	ldr	r2, [pc, #16]	; (8004a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a2e:	5cd3      	ldrb	r3, [r2, r3]
 8004a30:	40d9      	lsrs	r1, r3
 8004a32:	000b      	movs	r3, r1
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	080085a0 	.word	0x080085a0

08004a44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004a4c:	2017      	movs	r0, #23
 8004a4e:	183b      	adds	r3, r7, r0
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d100      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004a5e:	e0c7      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a60:	4b93      	ldr	r3, [pc, #588]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a64:	2380      	movs	r3, #128	; 0x80
 8004a66:	055b      	lsls	r3, r3, #21
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d109      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a6c:	4b90      	ldr	r3, [pc, #576]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a70:	4b8f      	ldr	r3, [pc, #572]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a72:	2180      	movs	r1, #128	; 0x80
 8004a74:	0549      	lsls	r1, r1, #21
 8004a76:	430a      	orrs	r2, r1
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004a7a:	183b      	adds	r3, r7, r0
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a80:	4b8c      	ldr	r3, [pc, #560]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	2380      	movs	r3, #128	; 0x80
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d11a      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a8c:	4b89      	ldr	r3, [pc, #548]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4b88      	ldr	r3, [pc, #544]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004a92:	2180      	movs	r1, #128	; 0x80
 8004a94:	0049      	lsls	r1, r1, #1
 8004a96:	430a      	orrs	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a9a:	f7fd fda9 	bl	80025f0 <HAL_GetTick>
 8004a9e:	0003      	movs	r3, r0
 8004aa0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa4:	f7fd fda4 	bl	80025f0 <HAL_GetTick>
 8004aa8:	0002      	movs	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b64      	cmp	r3, #100	; 0x64
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e0f8      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab6:	4b7f      	ldr	r3, [pc, #508]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	2380      	movs	r3, #128	; 0x80
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004ac2:	4b7b      	ldr	r3, [pc, #492]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	23c0      	movs	r3, #192	; 0xc0
 8004ac8:	039b      	lsls	r3, r3, #14
 8004aca:	4013      	ands	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	23c0      	movs	r3, #192	; 0xc0
 8004ad4:	039b      	lsls	r3, r3, #14
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d013      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	23c0      	movs	r3, #192	; 0xc0
 8004ae4:	029b      	lsls	r3, r3, #10
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	23c0      	movs	r3, #192	; 0xc0
 8004aea:	029b      	lsls	r3, r3, #10
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d10a      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004af0:	4b6f      	ldr	r3, [pc, #444]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	029b      	lsls	r3, r3, #10
 8004af8:	401a      	ands	r2, r3
 8004afa:	2380      	movs	r3, #128	; 0x80
 8004afc:	029b      	lsls	r3, r3, #10
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d101      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e0d0      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x264>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004b06:	4b6a      	ldr	r3, [pc, #424]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b0a:	23c0      	movs	r3, #192	; 0xc0
 8004b0c:	029b      	lsls	r3, r3, #10
 8004b0e:	4013      	ands	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d03b      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	23c0      	movs	r3, #192	; 0xc0
 8004b1e:	029b      	lsls	r3, r3, #10
 8004b20:	4013      	ands	r3, r2
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d033      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d02e      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004b32:	4b5f      	ldr	r3, [pc, #380]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b36:	4a60      	ldr	r2, [pc, #384]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b3c:	4b5c      	ldr	r3, [pc, #368]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b40:	4b5b      	ldr	r3, [pc, #364]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b42:	2180      	movs	r1, #128	; 0x80
 8004b44:	0309      	lsls	r1, r1, #12
 8004b46:	430a      	orrs	r2, r1
 8004b48:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b4a:	4b59      	ldr	r3, [pc, #356]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b4e:	4b58      	ldr	r3, [pc, #352]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b50:	495a      	ldr	r1, [pc, #360]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004b52:	400a      	ands	r2, r1
 8004b54:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004b56:	4b56      	ldr	r3, [pc, #344]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	2380      	movs	r3, #128	; 0x80
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	4013      	ands	r3, r2
 8004b64:	d014      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b66:	f7fd fd43 	bl	80025f0 <HAL_GetTick>
 8004b6a:	0003      	movs	r3, r0
 8004b6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b6e:	e009      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b70:	f7fd fd3e 	bl	80025f0 <HAL_GetTick>
 8004b74:	0002      	movs	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	4a51      	ldr	r2, [pc, #324]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e091      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x264>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b84:	4b4a      	ldr	r3, [pc, #296]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d0ef      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2220      	movs	r2, #32
 8004b96:	4013      	ands	r3, r2
 8004b98:	d01f      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	23c0      	movs	r3, #192	; 0xc0
 8004ba0:	029b      	lsls	r3, r3, #10
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	23c0      	movs	r3, #192	; 0xc0
 8004ba6:	029b      	lsls	r3, r3, #10
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d10c      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004bac:	4b40      	ldr	r3, [pc, #256]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a44      	ldr	r2, [pc, #272]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	23c0      	movs	r3, #192	; 0xc0
 8004bbc:	039b      	lsls	r3, r3, #14
 8004bbe:	401a      	ands	r2, r3
 8004bc0:	4b3b      	ldr	r3, [pc, #236]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	4b3a      	ldr	r3, [pc, #232]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004bc8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	23c0      	movs	r3, #192	; 0xc0
 8004bd0:	029b      	lsls	r3, r3, #10
 8004bd2:	401a      	ands	r2, r3
 8004bd4:	4b36      	ldr	r3, [pc, #216]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bda:	2317      	movs	r3, #23
 8004bdc:	18fb      	adds	r3, r7, r3
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d105      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be4:	4b32      	ldr	r3, [pc, #200]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be8:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004bea:	4937      	ldr	r1, [pc, #220]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004bec:	400a      	ands	r2, r1
 8004bee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bfa:	4b2d      	ldr	r3, [pc, #180]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfe:	2203      	movs	r2, #3
 8004c00:	4393      	bics	r3, r2
 8004c02:	0019      	movs	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	4b29      	ldr	r3, [pc, #164]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2202      	movs	r2, #2
 8004c14:	4013      	ands	r3, r2
 8004c16:	d009      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c18:	4b25      	ldr	r3, [pc, #148]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1c:	220c      	movs	r2, #12
 8004c1e:	4393      	bics	r3, r2
 8004c20:	0019      	movs	r1, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	4b22      	ldr	r3, [pc, #136]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2204      	movs	r2, #4
 8004c32:	4013      	ands	r3, r2
 8004c34:	d009      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c36:	4b1e      	ldr	r3, [pc, #120]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3a:	4a24      	ldr	r2, [pc, #144]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	0019      	movs	r1, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c46:	430a      	orrs	r2, r1
 8004c48:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2208      	movs	r2, #8
 8004c50:	4013      	ands	r3, r2
 8004c52:	d009      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c54:	4b16      	ldr	r3, [pc, #88]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c58:	4a1d      	ldr	r2, [pc, #116]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	0019      	movs	r1, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695a      	ldr	r2, [r3, #20]
 8004c62:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c64:	430a      	orrs	r2, r1
 8004c66:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	4013      	ands	r3, r2
 8004c72:	d009      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c74:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c78:	4a0f      	ldr	r2, [pc, #60]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c84:	430a      	orrs	r2, r1
 8004c86:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2280      	movs	r2, #128	; 0x80
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d009      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004c92:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c96:	4a0f      	ldr	r2, [pc, #60]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	0019      	movs	r1, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	0018      	movs	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b006      	add	sp, #24
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	40007000 	.word	0x40007000
 8004cb8:	fffcffff 	.word	0xfffcffff
 8004cbc:	fff7ffff 	.word	0xfff7ffff
 8004cc0:	00001388 	.word	0x00001388
 8004cc4:	ffcfffff 	.word	0xffcfffff
 8004cc8:	efffffff 	.word	0xefffffff
 8004ccc:	fffff3ff 	.word	0xfffff3ff
 8004cd0:	ffffcfff 	.word	0xffffcfff
 8004cd4:	fff3ffff 	.word	0xfff3ffff

08004cd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e083      	b.n	8004df2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	2382      	movs	r3, #130	; 0x82
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d009      	beq.n	8004d12 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	61da      	str	r2, [r3, #28]
 8004d04:	e005      	b.n	8004d12 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2251      	movs	r2, #81	; 0x51
 8004d1c:	5c9b      	ldrb	r3, [r3, r2]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d107      	bne.n	8004d34 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2250      	movs	r2, #80	; 0x50
 8004d28:	2100      	movs	r1, #0
 8004d2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f7fd f9b4 	bl	800209c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2251      	movs	r2, #81	; 0x51
 8004d38:	2102      	movs	r1, #2
 8004d3a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2140      	movs	r1, #64	; 0x40
 8004d48:	438a      	bics	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	2382      	movs	r3, #130	; 0x82
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	401a      	ands	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6899      	ldr	r1, [r3, #8]
 8004d5a:	2384      	movs	r3, #132	; 0x84
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	400b      	ands	r3, r1
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68d9      	ldr	r1, [r3, #12]
 8004d66:	2380      	movs	r3, #128	; 0x80
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	400b      	ands	r3, r1
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2102      	movs	r1, #2
 8004d74:	400b      	ands	r3, r1
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	400b      	ands	r3, r1
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6999      	ldr	r1, [r3, #24]
 8004d86:	2380      	movs	r3, #128	; 0x80
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	400b      	ands	r3, r1
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	2138      	movs	r1, #56	; 0x38
 8004d94:	400b      	ands	r3, r1
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	2180      	movs	r1, #128	; 0x80
 8004d9e:	400b      	ands	r3, r1
 8004da0:	431a      	orrs	r2, r3
 8004da2:	0011      	movs	r1, r2
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	019b      	lsls	r3, r3, #6
 8004dac:	401a      	ands	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	0c1b      	lsrs	r3, r3, #16
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	0019      	movs	r1, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	2210      	movs	r2, #16
 8004dc8:	401a      	ands	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4907      	ldr	r1, [pc, #28]	; (8004dfc <HAL_SPI_Init+0x124>)
 8004dde:	400a      	ands	r2, r1
 8004de0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2251      	movs	r2, #81	; 0x51
 8004dec:	2101      	movs	r1, #1
 8004dee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	0018      	movs	r0, r3
 8004df4:	46bd      	mov	sp, r7
 8004df6:	b002      	add	sp, #8
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	fffff7ff 	.word	0xfffff7ff

08004e00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	1dbb      	adds	r3, r7, #6
 8004e0e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e10:	231f      	movs	r3, #31
 8004e12:	18fb      	adds	r3, r7, r3
 8004e14:	2200      	movs	r2, #0
 8004e16:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2250      	movs	r2, #80	; 0x50
 8004e1c:	5c9b      	ldrb	r3, [r3, r2]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_SPI_Transmit+0x26>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e145      	b.n	80050b2 <HAL_SPI_Transmit+0x2b2>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2250      	movs	r2, #80	; 0x50
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e2e:	f7fd fbdf 	bl	80025f0 <HAL_GetTick>
 8004e32:	0003      	movs	r3, r0
 8004e34:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004e36:	2316      	movs	r3, #22
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	1dba      	adds	r2, r7, #6
 8004e3c:	8812      	ldrh	r2, [r2, #0]
 8004e3e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2251      	movs	r2, #81	; 0x51
 8004e44:	5c9b      	ldrb	r3, [r3, r2]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d004      	beq.n	8004e56 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004e4c:	231f      	movs	r3, #31
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	2202      	movs	r2, #2
 8004e52:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e54:	e126      	b.n	80050a4 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_SPI_Transmit+0x64>
 8004e5c:	1dbb      	adds	r3, r7, #6
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d104      	bne.n	8004e6e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004e64:	231f      	movs	r3, #31
 8004e66:	18fb      	adds	r3, r7, r3
 8004e68:	2201      	movs	r2, #1
 8004e6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e6c:	e11a      	b.n	80050a4 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2251      	movs	r2, #81	; 0x51
 8004e72:	2103      	movs	r1, #3
 8004e74:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	1dba      	adds	r2, r7, #6
 8004e86:	8812      	ldrh	r2, [r2, #0]
 8004e88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1dba      	adds	r2, r7, #6
 8004e8e:	8812      	ldrh	r2, [r2, #0]
 8004e90:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	2380      	movs	r3, #128	; 0x80
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d110      	bne.n	8004ede <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2140      	movs	r1, #64	; 0x40
 8004ec8:	438a      	bics	r2, r1
 8004eca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2180      	movs	r1, #128	; 0x80
 8004ed8:	01c9      	lsls	r1, r1, #7
 8004eda:	430a      	orrs	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2240      	movs	r2, #64	; 0x40
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b40      	cmp	r3, #64	; 0x40
 8004eea:	d007      	beq.n	8004efc <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2140      	movs	r1, #64	; 0x40
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d152      	bne.n	8004fae <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <HAL_SPI_Transmit+0x11a>
 8004f10:	2316      	movs	r3, #22
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d143      	bne.n	8004fa2 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	881a      	ldrh	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	1c9a      	adds	r2, r3, #2
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f3e:	e030      	b.n	8004fa2 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2202      	movs	r2, #2
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d112      	bne.n	8004f74 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	881a      	ldrh	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	1c9a      	adds	r2, r3, #2
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f72:	e016      	b.n	8004fa2 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f74:	f7fd fb3c 	bl	80025f0 <HAL_GetTick>
 8004f78:	0002      	movs	r2, r0
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d802      	bhi.n	8004f8a <HAL_SPI_Transmit+0x18a>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	3301      	adds	r3, #1
 8004f88:	d102      	bne.n	8004f90 <HAL_SPI_Transmit+0x190>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d108      	bne.n	8004fa2 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8004f90:	231f      	movs	r3, #31
 8004f92:	18fb      	adds	r3, r7, r3
 8004f94:	2203      	movs	r2, #3
 8004f96:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2251      	movs	r2, #81	; 0x51
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	5499      	strb	r1, [r3, r2]
          goto error;
 8004fa0:	e080      	b.n	80050a4 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1c9      	bne.n	8004f40 <HAL_SPI_Transmit+0x140>
 8004fac:	e053      	b.n	8005056 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d004      	beq.n	8004fc0 <HAL_SPI_Transmit+0x1c0>
 8004fb6:	2316      	movs	r3, #22
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d145      	bne.n	800504c <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	330c      	adds	r3, #12
 8004fca:	7812      	ldrb	r2, [r2, #0]
 8004fcc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004fe6:	e031      	b.n	800504c <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d113      	bne.n	800501e <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	330c      	adds	r3, #12
 8005000:	7812      	ldrb	r2, [r2, #0]
 8005002:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	86da      	strh	r2, [r3, #54]	; 0x36
 800501c:	e016      	b.n	800504c <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800501e:	f7fd fae7 	bl	80025f0 <HAL_GetTick>
 8005022:	0002      	movs	r2, r0
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d802      	bhi.n	8005034 <HAL_SPI_Transmit+0x234>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	3301      	adds	r3, #1
 8005032:	d102      	bne.n	800503a <HAL_SPI_Transmit+0x23a>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d108      	bne.n	800504c <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 800503a:	231f      	movs	r3, #31
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	2203      	movs	r2, #3
 8005040:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2251      	movs	r2, #81	; 0x51
 8005046:	2101      	movs	r1, #1
 8005048:	5499      	strb	r1, [r3, r2]
          goto error;
 800504a:	e02b      	b.n	80050a4 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1c8      	bne.n	8004fe8 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	0018      	movs	r0, r3
 800505e:	f000 fc1f 	bl	80058a0 <SPI_EndRxTxTransaction>
 8005062:	1e03      	subs	r3, r0, #0
 8005064:	d002      	beq.n	800506c <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005074:	2300      	movs	r3, #0
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	2b00      	cmp	r3, #0
 8005090:	d004      	beq.n	800509c <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8005092:	231f      	movs	r3, #31
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	2201      	movs	r2, #1
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	e003      	b.n	80050a4 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2251      	movs	r2, #81	; 0x51
 80050a0:	2101      	movs	r1, #1
 80050a2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2250      	movs	r2, #80	; 0x50
 80050a8:	2100      	movs	r1, #0
 80050aa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80050ac:	231f      	movs	r3, #31
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	781b      	ldrb	r3, [r3, #0]
}
 80050b2:	0018      	movs	r0, r3
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b008      	add	sp, #32
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050bc:	b590      	push	{r4, r7, lr}
 80050be:	b089      	sub	sp, #36	; 0x24
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	1dbb      	adds	r3, r7, #6
 80050ca:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050cc:	2117      	movs	r1, #23
 80050ce:	187b      	adds	r3, r7, r1
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2251      	movs	r2, #81	; 0x51
 80050d8:	5c9b      	ldrb	r3, [r3, r2]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d003      	beq.n	80050e8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80050e0:	187b      	adds	r3, r7, r1
 80050e2:	2202      	movs	r2, #2
 80050e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80050e6:	e109      	b.n	80052fc <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	2382      	movs	r3, #130	; 0x82
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d113      	bne.n	800511c <HAL_SPI_Receive+0x60>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10f      	bne.n	800511c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2251      	movs	r2, #81	; 0x51
 8005100:	2104      	movs	r1, #4
 8005102:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005104:	1dbb      	adds	r3, r7, #6
 8005106:	881c      	ldrh	r4, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	0023      	movs	r3, r4
 8005114:	f000 f900 	bl	8005318 <HAL_SPI_TransmitReceive>
 8005118:	0003      	movs	r3, r0
 800511a:	e0f6      	b.n	800530a <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2250      	movs	r2, #80	; 0x50
 8005120:	5c9b      	ldrb	r3, [r3, r2]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_SPI_Receive+0x6e>
 8005126:	2302      	movs	r3, #2
 8005128:	e0ef      	b.n	800530a <HAL_SPI_Receive+0x24e>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2250      	movs	r2, #80	; 0x50
 800512e:	2101      	movs	r1, #1
 8005130:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005132:	f7fd fa5d 	bl	80025f0 <HAL_GetTick>
 8005136:	0003      	movs	r3, r0
 8005138:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_SPI_Receive+0x8c>
 8005140:	1dbb      	adds	r3, r7, #6
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8005148:	2317      	movs	r3, #23
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	2201      	movs	r2, #1
 800514e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005150:	e0d4      	b.n	80052fc <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2251      	movs	r2, #81	; 0x51
 8005156:	2104      	movs	r1, #4
 8005158:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	1dba      	adds	r2, r7, #6
 800516a:	8812      	ldrh	r2, [r2, #0]
 800516c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	1dba      	adds	r2, r7, #6
 8005172:	8812      	ldrh	r2, [r2, #0]
 8005174:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	2380      	movs	r3, #128	; 0x80
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	429a      	cmp	r2, r3
 800519e:	d10f      	bne.n	80051c0 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2140      	movs	r1, #64	; 0x40
 80051ac:	438a      	bics	r2, r1
 80051ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4956      	ldr	r1, [pc, #344]	; (8005314 <HAL_SPI_Receive+0x258>)
 80051bc:	400a      	ands	r2, r1
 80051be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2240      	movs	r2, #64	; 0x40
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b40      	cmp	r3, #64	; 0x40
 80051cc:	d007      	beq.n	80051de <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2140      	movs	r1, #64	; 0x40
 80051da:	430a      	orrs	r2, r1
 80051dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d000      	beq.n	80051e8 <HAL_SPI_Receive+0x12c>
 80051e6:	e06c      	b.n	80052c2 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051e8:	e033      	b.n	8005252 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2201      	movs	r2, #1
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d115      	bne.n	8005224 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	001a      	movs	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	7812      	ldrb	r2, [r2, #0]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005222:	e016      	b.n	8005252 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005224:	f7fd f9e4 	bl	80025f0 <HAL_GetTick>
 8005228:	0002      	movs	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d802      	bhi.n	800523a <HAL_SPI_Receive+0x17e>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	3301      	adds	r3, #1
 8005238:	d102      	bne.n	8005240 <HAL_SPI_Receive+0x184>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d108      	bne.n	8005252 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8005240:	2317      	movs	r3, #23
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	2203      	movs	r2, #3
 8005246:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2251      	movs	r2, #81	; 0x51
 800524c:	2101      	movs	r1, #1
 800524e:	5499      	strb	r1, [r3, r2]
          goto error;
 8005250:	e054      	b.n	80052fc <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1c6      	bne.n	80051ea <HAL_SPI_Receive+0x12e>
 800525c:	e036      	b.n	80052cc <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2201      	movs	r2, #1
 8005266:	4013      	ands	r3, r2
 8005268:	2b01      	cmp	r3, #1
 800526a:	d113      	bne.n	8005294 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	b292      	uxth	r2, r2
 8005278:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	1c9a      	adds	r2, r3, #2
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005288:	b29b      	uxth	r3, r3
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005292:	e016      	b.n	80052c2 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005294:	f7fd f9ac 	bl	80025f0 <HAL_GetTick>
 8005298:	0002      	movs	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d802      	bhi.n	80052aa <HAL_SPI_Receive+0x1ee>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	3301      	adds	r3, #1
 80052a8:	d102      	bne.n	80052b0 <HAL_SPI_Receive+0x1f4>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d108      	bne.n	80052c2 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 80052b0:	2317      	movs	r3, #23
 80052b2:	18fb      	adds	r3, r7, r3
 80052b4:	2203      	movs	r2, #3
 80052b6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2251      	movs	r2, #81	; 0x51
 80052bc:	2101      	movs	r1, #1
 80052be:	5499      	strb	r1, [r3, r2]
          goto error;
 80052c0:	e01c      	b.n	80052fc <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1c8      	bne.n	800525e <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	6839      	ldr	r1, [r7, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	0018      	movs	r0, r3
 80052d4:	f000 fa7a 	bl	80057cc <SPI_EndRxTransaction>
 80052d8:	1e03      	subs	r3, r0, #0
 80052da:	d002      	beq.n	80052e2 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 80052ea:	2317      	movs	r3, #23
 80052ec:	18fb      	adds	r3, r7, r3
 80052ee:	2201      	movs	r2, #1
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e003      	b.n	80052fc <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2251      	movs	r2, #81	; 0x51
 80052f8:	2101      	movs	r1, #1
 80052fa:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2250      	movs	r2, #80	; 0x50
 8005300:	2100      	movs	r1, #0
 8005302:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005304:	2317      	movs	r3, #23
 8005306:	18fb      	adds	r3, r7, r3
 8005308:	781b      	ldrb	r3, [r3, #0]
}
 800530a:	0018      	movs	r0, r3
 800530c:	46bd      	mov	sp, r7
 800530e:	b007      	add	sp, #28
 8005310:	bd90      	pop	{r4, r7, pc}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	ffffbfff 	.word	0xffffbfff

08005318 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08c      	sub	sp, #48	; 0x30
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	001a      	movs	r2, r3
 8005326:	1cbb      	adds	r3, r7, #2
 8005328:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800532a:	2301      	movs	r3, #1
 800532c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800532e:	232b      	movs	r3, #43	; 0x2b
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2250      	movs	r2, #80	; 0x50
 800533a:	5c9b      	ldrb	r3, [r3, r2]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_SPI_TransmitReceive+0x2c>
 8005340:	2302      	movs	r3, #2
 8005342:	e1b0      	b.n	80056a6 <HAL_SPI_TransmitReceive+0x38e>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2250      	movs	r2, #80	; 0x50
 8005348:	2101      	movs	r1, #1
 800534a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800534c:	f7fd f950 	bl	80025f0 <HAL_GetTick>
 8005350:	0003      	movs	r3, r0
 8005352:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005354:	2023      	movs	r0, #35	; 0x23
 8005356:	183b      	adds	r3, r7, r0
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	2151      	movs	r1, #81	; 0x51
 800535c:	5c52      	ldrb	r2, [r2, r1]
 800535e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005366:	231a      	movs	r3, #26
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	1cba      	adds	r2, r7, #2
 800536c:	8812      	ldrh	r2, [r2, #0]
 800536e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005370:	183b      	adds	r3, r7, r0
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d011      	beq.n	800539c <HAL_SPI_TransmitReceive+0x84>
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	2382      	movs	r3, #130	; 0x82
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	429a      	cmp	r2, r3
 8005380:	d107      	bne.n	8005392 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d103      	bne.n	8005392 <HAL_SPI_TransmitReceive+0x7a>
 800538a:	183b      	adds	r3, r7, r0
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b04      	cmp	r3, #4
 8005390:	d004      	beq.n	800539c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005392:	232b      	movs	r3, #43	; 0x2b
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	2202      	movs	r2, #2
 8005398:	701a      	strb	r2, [r3, #0]
    goto error;
 800539a:	e17d      	b.n	8005698 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d006      	beq.n	80053b0 <HAL_SPI_TransmitReceive+0x98>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_SPI_TransmitReceive+0x98>
 80053a8:	1cbb      	adds	r3, r7, #2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80053b0:	232b      	movs	r3, #43	; 0x2b
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	2201      	movs	r2, #1
 80053b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80053b8:	e16e      	b.n	8005698 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2251      	movs	r2, #81	; 0x51
 80053be:	5c9b      	ldrb	r3, [r3, r2]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d003      	beq.n	80053ce <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2251      	movs	r2, #81	; 0x51
 80053ca:	2105      	movs	r1, #5
 80053cc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1cba      	adds	r2, r7, #2
 80053de:	8812      	ldrh	r2, [r2, #0]
 80053e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1cba      	adds	r2, r7, #2
 80053e6:	8812      	ldrh	r2, [r2, #0]
 80053e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	1cba      	adds	r2, r7, #2
 80053f4:	8812      	ldrh	r2, [r2, #0]
 80053f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	1cba      	adds	r2, r7, #2
 80053fc:	8812      	ldrh	r2, [r2, #0]
 80053fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2240      	movs	r2, #64	; 0x40
 8005414:	4013      	ands	r3, r2
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	d007      	beq.n	800542a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2140      	movs	r1, #64	; 0x40
 8005426:	430a      	orrs	r2, r1
 8005428:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	2380      	movs	r3, #128	; 0x80
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	429a      	cmp	r2, r3
 8005434:	d000      	beq.n	8005438 <HAL_SPI_TransmitReceive+0x120>
 8005436:	e07f      	b.n	8005538 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <HAL_SPI_TransmitReceive+0x134>
 8005440:	231a      	movs	r3, #26
 8005442:	18fb      	adds	r3, r7, r3
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d000      	beq.n	800544c <HAL_SPI_TransmitReceive+0x134>
 800544a:	e06a      	b.n	8005522 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	881a      	ldrh	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	1c9a      	adds	r2, r3, #2
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005470:	e057      	b.n	8005522 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2202      	movs	r2, #2
 800547a:	4013      	ands	r3, r2
 800547c:	2b02      	cmp	r3, #2
 800547e:	d11b      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x1a0>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <HAL_SPI_TransmitReceive+0x1a0>
 800548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d113      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	881a      	ldrh	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	1c9a      	adds	r2, r3, #2
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2201      	movs	r2, #1
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d119      	bne.n	80054fa <HAL_SPI_TransmitReceive+0x1e2>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d014      	beq.n	80054fa <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	b292      	uxth	r2, r2
 80054dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	1c9a      	adds	r2, r3, #2
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054f6:	2301      	movs	r3, #1
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054fa:	f7fd f879 	bl	80025f0 <HAL_GetTick>
 80054fe:	0002      	movs	r2, r0
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005506:	429a      	cmp	r2, r3
 8005508:	d80b      	bhi.n	8005522 <HAL_SPI_TransmitReceive+0x20a>
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	3301      	adds	r3, #1
 800550e:	d008      	beq.n	8005522 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8005510:	232b      	movs	r3, #43	; 0x2b
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	2203      	movs	r2, #3
 8005516:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2251      	movs	r2, #81	; 0x51
 800551c:	2101      	movs	r1, #1
 800551e:	5499      	strb	r1, [r3, r2]
        goto error;
 8005520:	e0ba      	b.n	8005698 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1a2      	bne.n	8005472 <HAL_SPI_TransmitReceive+0x15a>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d19d      	bne.n	8005472 <HAL_SPI_TransmitReceive+0x15a>
 8005536:	e083      	b.n	8005640 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_SPI_TransmitReceive+0x234>
 8005540:	231a      	movs	r3, #26
 8005542:	18fb      	adds	r3, r7, r3
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d000      	beq.n	800554c <HAL_SPI_TransmitReceive+0x234>
 800554a:	e06f      	b.n	800562c <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005572:	e05b      	b.n	800562c <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2202      	movs	r2, #2
 800557c:	4013      	ands	r3, r2
 800557e:	2b02      	cmp	r3, #2
 8005580:	d11c      	bne.n	80055bc <HAL_SPI_TransmitReceive+0x2a4>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d017      	beq.n	80055bc <HAL_SPI_TransmitReceive+0x2a4>
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558e:	2b01      	cmp	r3, #1
 8005590:	d114      	bne.n	80055bc <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	330c      	adds	r3, #12
 800559c:	7812      	ldrb	r2, [r2, #0]
 800559e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2201      	movs	r2, #1
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d119      	bne.n	80055fe <HAL_SPI_TransmitReceive+0x2e6>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d014      	beq.n	80055fe <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055fa:	2301      	movs	r3, #1
 80055fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055fe:	f7fc fff7 	bl	80025f0 <HAL_GetTick>
 8005602:	0002      	movs	r2, r0
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800560a:	429a      	cmp	r2, r3
 800560c:	d802      	bhi.n	8005614 <HAL_SPI_TransmitReceive+0x2fc>
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	3301      	adds	r3, #1
 8005612:	d102      	bne.n	800561a <HAL_SPI_TransmitReceive+0x302>
 8005614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005616:	2b00      	cmp	r3, #0
 8005618:	d108      	bne.n	800562c <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800561a:	232b      	movs	r3, #43	; 0x2b
 800561c:	18fb      	adds	r3, r7, r3
 800561e:	2203      	movs	r2, #3
 8005620:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2251      	movs	r2, #81	; 0x51
 8005626:	2101      	movs	r1, #1
 8005628:	5499      	strb	r1, [r3, r2]
        goto error;
 800562a:	e035      	b.n	8005698 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d19e      	bne.n	8005574 <HAL_SPI_TransmitReceive+0x25c>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d199      	bne.n	8005574 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005642:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	0018      	movs	r0, r3
 8005648:	f000 f92a 	bl	80058a0 <SPI_EndRxTxTransaction>
 800564c:	1e03      	subs	r3, r0, #0
 800564e:	d007      	beq.n	8005660 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8005650:	232b      	movs	r3, #43	; 0x2b
 8005652:	18fb      	adds	r3, r7, r3
 8005654:	2201      	movs	r2, #1
 8005656:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800565e:	e01b      	b.n	8005698 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8005686:	232b      	movs	r3, #43	; 0x2b
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	2201      	movs	r2, #1
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e003      	b.n	8005698 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2251      	movs	r2, #81	; 0x51
 8005694:	2101      	movs	r1, #1
 8005696:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2250      	movs	r2, #80	; 0x50
 800569c:	2100      	movs	r1, #0
 800569e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80056a0:	232b      	movs	r3, #43	; 0x2b
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	781b      	ldrb	r3, [r3, #0]
}
 80056a6:	0018      	movs	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b00c      	add	sp, #48	; 0x30
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	1dfb      	adds	r3, r7, #7
 80056be:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056c0:	f7fc ff96 	bl	80025f0 <HAL_GetTick>
 80056c4:	0002      	movs	r2, r0
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	18d3      	adds	r3, r2, r3
 80056ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056d0:	f7fc ff8e 	bl	80025f0 <HAL_GetTick>
 80056d4:	0003      	movs	r3, r0
 80056d6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056d8:	4b3a      	ldr	r3, [pc, #232]	; (80057c4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	015b      	lsls	r3, r3, #5
 80056de:	0d1b      	lsrs	r3, r3, #20
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	4353      	muls	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056e6:	e058      	b.n	800579a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	3301      	adds	r3, #1
 80056ec:	d055      	beq.n	800579a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056ee:	f7fc ff7f 	bl	80025f0 <HAL_GetTick>
 80056f2:	0002      	movs	r2, r0
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d902      	bls.n	8005704 <SPI_WaitFlagStateUntilTimeout+0x54>
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d142      	bne.n	800578a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	21e0      	movs	r1, #224	; 0xe0
 8005710:	438a      	bics	r2, r1
 8005712:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	2382      	movs	r3, #130	; 0x82
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	429a      	cmp	r2, r3
 800571e:	d113      	bne.n	8005748 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	2380      	movs	r3, #128	; 0x80
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	429a      	cmp	r2, r3
 800572a:	d005      	beq.n	8005738 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	2380      	movs	r3, #128	; 0x80
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	429a      	cmp	r2, r3
 8005736:	d107      	bne.n	8005748 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2140      	movs	r1, #64	; 0x40
 8005744:	438a      	bics	r2, r1
 8005746:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800574c:	2380      	movs	r3, #128	; 0x80
 800574e:	019b      	lsls	r3, r3, #6
 8005750:	429a      	cmp	r2, r3
 8005752:	d110      	bne.n	8005776 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	491a      	ldr	r1, [pc, #104]	; (80057c8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005760:	400a      	ands	r2, r1
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2180      	movs	r1, #128	; 0x80
 8005770:	0189      	lsls	r1, r1, #6
 8005772:	430a      	orrs	r2, r1
 8005774:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2251      	movs	r2, #81	; 0x51
 800577a:	2101      	movs	r1, #1
 800577c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2250      	movs	r2, #80	; 0x50
 8005782:	2100      	movs	r1, #0
 8005784:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e017      	b.n	80057ba <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	3b01      	subs	r3, #1
 8005798:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	4013      	ands	r3, r2
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	425a      	negs	r2, r3
 80057aa:	4153      	adcs	r3, r2
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	001a      	movs	r2, r3
 80057b0:	1dfb      	adds	r3, r7, #7
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d197      	bne.n	80056e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	0018      	movs	r0, r3
 80057bc:	46bd      	mov	sp, r7
 80057be:	b008      	add	sp, #32
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	20000000 	.word	0x20000000
 80057c8:	ffffdfff 	.word	0xffffdfff

080057cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	2382      	movs	r3, #130	; 0x82
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d113      	bne.n	800580c <SPI_EndRxTransaction+0x40>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d005      	beq.n	80057fc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	2380      	movs	r3, #128	; 0x80
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d107      	bne.n	800580c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2140      	movs	r1, #64	; 0x40
 8005808:	438a      	bics	r2, r1
 800580a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	2382      	movs	r3, #130	; 0x82
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	429a      	cmp	r2, r3
 8005816:	d12b      	bne.n	8005870 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	429a      	cmp	r2, r3
 8005822:	d012      	beq.n	800584a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	0013      	movs	r3, r2
 800582e:	2200      	movs	r2, #0
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	f7ff ff3d 	bl	80056b0 <SPI_WaitFlagStateUntilTimeout>
 8005836:	1e03      	subs	r3, r0, #0
 8005838:	d02d      	beq.n	8005896 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	2220      	movs	r2, #32
 8005840:	431a      	orrs	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e026      	b.n	8005898 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	0013      	movs	r3, r2
 8005854:	2200      	movs	r2, #0
 8005856:	2101      	movs	r1, #1
 8005858:	f7ff ff2a 	bl	80056b0 <SPI_WaitFlagStateUntilTimeout>
 800585c:	1e03      	subs	r3, r0, #0
 800585e:	d01a      	beq.n	8005896 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005864:	2220      	movs	r2, #32
 8005866:	431a      	orrs	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e013      	b.n	8005898 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	0013      	movs	r3, r2
 800587a:	2200      	movs	r2, #0
 800587c:	2101      	movs	r1, #1
 800587e:	f7ff ff17 	bl	80056b0 <SPI_WaitFlagStateUntilTimeout>
 8005882:	1e03      	subs	r3, r0, #0
 8005884:	d007      	beq.n	8005896 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588a:	2220      	movs	r2, #32
 800588c:	431a      	orrs	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e000      	b.n	8005898 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	0018      	movs	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	b004      	add	sp, #16
 800589e:	bd80      	pop	{r7, pc}

080058a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b088      	sub	sp, #32
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058ac:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <SPI_EndRxTxTransaction+0x84>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	491d      	ldr	r1, [pc, #116]	; (8005928 <SPI_EndRxTxTransaction+0x88>)
 80058b2:	0018      	movs	r0, r3
 80058b4:	f7fa fc32 	bl	800011c <__udivsi3>
 80058b8:	0003      	movs	r3, r0
 80058ba:	001a      	movs	r2, r3
 80058bc:	0013      	movs	r3, r2
 80058be:	015b      	lsls	r3, r3, #5
 80058c0:	1a9b      	subs	r3, r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	189b      	adds	r3, r3, r2
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	2382      	movs	r3, #130	; 0x82
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d112      	bne.n	80058fc <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	0013      	movs	r3, r2
 80058e0:	2200      	movs	r2, #0
 80058e2:	2180      	movs	r1, #128	; 0x80
 80058e4:	f7ff fee4 	bl	80056b0 <SPI_WaitFlagStateUntilTimeout>
 80058e8:	1e03      	subs	r3, r0, #0
 80058ea:	d016      	beq.n	800591a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f0:	2220      	movs	r2, #32
 80058f2:	431a      	orrs	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e00f      	b.n	800591c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	3b01      	subs	r3, #1
 8005906:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2280      	movs	r2, #128	; 0x80
 8005910:	4013      	ands	r3, r2
 8005912:	2b80      	cmp	r3, #128	; 0x80
 8005914:	d0f2      	beq.n	80058fc <SPI_EndRxTxTransaction+0x5c>
 8005916:	e000      	b.n	800591a <SPI_EndRxTxTransaction+0x7a>
        break;
 8005918:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	0018      	movs	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	b006      	add	sp, #24
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20000000 	.word	0x20000000
 8005928:	016e3600 	.word	0x016e3600

0800592c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e032      	b.n	80059a4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2239      	movs	r2, #57	; 0x39
 8005942:	5c9b      	ldrb	r3, [r3, r2]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d107      	bne.n	800595a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2238      	movs	r2, #56	; 0x38
 800594e:	2100      	movs	r1, #0
 8005950:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	0018      	movs	r0, r3
 8005956:	f7fc fd1d 	bl	8002394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2239      	movs	r2, #57	; 0x39
 800595e:	2102      	movs	r1, #2
 8005960:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3304      	adds	r3, #4
 800596a:	0019      	movs	r1, r3
 800596c:	0010      	movs	r0, r2
 800596e:	f000 f925 	bl	8005bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	223e      	movs	r2, #62	; 0x3e
 8005976:	2101      	movs	r1, #1
 8005978:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	223a      	movs	r2, #58	; 0x3a
 800597e:	2101      	movs	r1, #1
 8005980:	5499      	strb	r1, [r3, r2]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	223b      	movs	r2, #59	; 0x3b
 8005986:	2101      	movs	r1, #1
 8005988:	5499      	strb	r1, [r3, r2]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	223c      	movs	r2, #60	; 0x3c
 800598e:	2101      	movs	r1, #1
 8005990:	5499      	strb	r1, [r3, r2]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	223d      	movs	r2, #61	; 0x3d
 8005996:	2101      	movs	r1, #1
 8005998:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2239      	movs	r2, #57	; 0x39
 800599e:	2101      	movs	r1, #1
 80059a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	0018      	movs	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b002      	add	sp, #8
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2202      	movs	r2, #2
 80059bc:	4013      	ands	r3, r2
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d124      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	2202      	movs	r2, #2
 80059ca:	4013      	ands	r3, r2
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d11d      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2203      	movs	r2, #3
 80059d6:	4252      	negs	r2, r2
 80059d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	2203      	movs	r2, #3
 80059e8:	4013      	ands	r3, r2
 80059ea:	d004      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	0018      	movs	r0, r3
 80059f0:	f000 f8cc 	bl	8005b8c <HAL_TIM_IC_CaptureCallback>
 80059f4:	e007      	b.n	8005a06 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	0018      	movs	r0, r3
 80059fa:	f000 f8bf 	bl	8005b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	0018      	movs	r0, r3
 8005a02:	f000 f8cb 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2204      	movs	r2, #4
 8005a14:	4013      	ands	r3, r2
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d125      	bne.n	8005a66 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	2204      	movs	r2, #4
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d11e      	bne.n	8005a66 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2205      	movs	r2, #5
 8005a2e:	4252      	negs	r2, r2
 8005a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	23c0      	movs	r3, #192	; 0xc0
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4013      	ands	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f000 f89f 	bl	8005b8c <HAL_TIM_IC_CaptureCallback>
 8005a4e:	e007      	b.n	8005a60 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	0018      	movs	r0, r3
 8005a54:	f000 f892 	bl	8005b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 f89e 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	2208      	movs	r2, #8
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d124      	bne.n	8005abe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2208      	movs	r2, #8
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d11d      	bne.n	8005abe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2209      	movs	r2, #9
 8005a88:	4252      	negs	r2, r2
 8005a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2204      	movs	r2, #4
 8005a90:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	2203      	movs	r2, #3
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d004      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f000 f873 	bl	8005b8c <HAL_TIM_IC_CaptureCallback>
 8005aa6:	e007      	b.n	8005ab8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f000 f866 	bl	8005b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f000 f872 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	2b10      	cmp	r3, #16
 8005aca:	d125      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	2210      	movs	r2, #16
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	2b10      	cmp	r3, #16
 8005ad8:	d11e      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2211      	movs	r2, #17
 8005ae0:	4252      	negs	r2, r2
 8005ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2208      	movs	r2, #8
 8005ae8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	23c0      	movs	r3, #192	; 0xc0
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4013      	ands	r3, r2
 8005af6:	d004      	beq.n	8005b02 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	0018      	movs	r0, r3
 8005afc:	f000 f846 	bl	8005b8c <HAL_TIM_IC_CaptureCallback>
 8005b00:	e007      	b.n	8005b12 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f000 f839 	bl	8005b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f000 f845 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	4013      	ands	r3, r2
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d10f      	bne.n	8005b46 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	4013      	ands	r3, r2
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d108      	bne.n	8005b46 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	4252      	negs	r2, r2
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	0018      	movs	r0, r3
 8005b42:	f7fb fc97 	bl	8001474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2240      	movs	r2, #64	; 0x40
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b40      	cmp	r3, #64	; 0x40
 8005b52:	d10f      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	2240      	movs	r2, #64	; 0x40
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	2b40      	cmp	r3, #64	; 0x40
 8005b60:	d108      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2241      	movs	r2, #65	; 0x41
 8005b68:	4252      	negs	r2, r2
 8005b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f000 f81c 	bl	8005bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b74:	46c0      	nop			; (mov r8, r8)
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b002      	add	sp, #8
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b84:	46c0      	nop			; (mov r8, r8)
 8005b86:	46bd      	mov	sp, r7
 8005b88:	b002      	add	sp, #8
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b94:	46c0      	nop			; (mov r8, r8)
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b002      	add	sp, #8
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ba4:	46c0      	nop			; (mov r8, r8)
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	b002      	add	sp, #8
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bb4:	46c0      	nop			; (mov r8, r8)
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b002      	add	sp, #8
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	2380      	movs	r3, #128	; 0x80
 8005bd0:	05db      	lsls	r3, r3, #23
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d00b      	beq.n	8005bee <TIM_Base_SetConfig+0x32>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a23      	ldr	r2, [pc, #140]	; (8005c68 <TIM_Base_SetConfig+0xac>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d007      	beq.n	8005bee <TIM_Base_SetConfig+0x32>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a22      	ldr	r2, [pc, #136]	; (8005c6c <TIM_Base_SetConfig+0xb0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_Base_SetConfig+0x32>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a21      	ldr	r2, [pc, #132]	; (8005c70 <TIM_Base_SetConfig+0xb4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d108      	bne.n	8005c00 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2270      	movs	r2, #112	; 0x70
 8005bf2:	4393      	bics	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	2380      	movs	r3, #128	; 0x80
 8005c04:	05db      	lsls	r3, r3, #23
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d00b      	beq.n	8005c22 <TIM_Base_SetConfig+0x66>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a16      	ldr	r2, [pc, #88]	; (8005c68 <TIM_Base_SetConfig+0xac>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d007      	beq.n	8005c22 <TIM_Base_SetConfig+0x66>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a15      	ldr	r2, [pc, #84]	; (8005c6c <TIM_Base_SetConfig+0xb0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d003      	beq.n	8005c22 <TIM_Base_SetConfig+0x66>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a14      	ldr	r2, [pc, #80]	; (8005c70 <TIM_Base_SetConfig+0xb4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d108      	bne.n	8005c34 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4a13      	ldr	r2, [pc, #76]	; (8005c74 <TIM_Base_SetConfig+0xb8>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2280      	movs	r2, #128	; 0x80
 8005c38:	4393      	bics	r3, r2
 8005c3a:	001a      	movs	r2, r3
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	615a      	str	r2, [r3, #20]
}
 8005c60:	46c0      	nop			; (mov r8, r8)
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b004      	add	sp, #16
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40000400 	.word	0x40000400
 8005c6c:	40010800 	.word	0x40010800
 8005c70:	40011400 	.word	0x40011400
 8005c74:	fffffcff 	.word	0xfffffcff

08005c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2238      	movs	r2, #56	; 0x38
 8005c86:	5c9b      	ldrb	r3, [r3, r2]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e047      	b.n	8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2238      	movs	r2, #56	; 0x38
 8005c94:	2101      	movs	r1, #1
 8005c96:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2239      	movs	r2, #57	; 0x39
 8005c9c:	2102      	movs	r1, #2
 8005c9e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2270      	movs	r2, #112	; 0x70
 8005cb4:	4393      	bics	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	05db      	lsls	r3, r3, #23
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d00e      	beq.n	8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a13      	ldr	r2, [pc, #76]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d009      	beq.n	8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a11      	ldr	r2, [pc, #68]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d004      	beq.n	8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a10      	ldr	r2, [pc, #64]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d10c      	bne.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2280      	movs	r2, #128	; 0x80
 8005cf8:	4393      	bics	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2239      	movs	r2, #57	; 0x39
 8005d12:	2101      	movs	r1, #1
 8005d14:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2238      	movs	r2, #56	; 0x38
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	0018      	movs	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b004      	add	sp, #16
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40010800 	.word	0x40010800
 8005d30:	40011400 	.word	0x40011400

08005d34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e044      	b.n	8005dd0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d107      	bne.n	8005d5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2278      	movs	r2, #120	; 0x78
 8005d52:	2100      	movs	r1, #0
 8005d54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f7fc fb6d 	bl	8002438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2224      	movs	r2, #36	; 0x24
 8005d62:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2101      	movs	r1, #1
 8005d70:	438a      	bics	r2, r1
 8005d72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	0018      	movs	r0, r3
 8005d78:	f000 fb8c 	bl	8006494 <UART_SetConfig>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e024      	b.n	8005dd0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	0018      	movs	r0, r3
 8005d92:	f000 fe1d 	bl	80069d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	490d      	ldr	r1, [pc, #52]	; (8005dd8 <HAL_UART_Init+0xa4>)
 8005da2:	400a      	ands	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	212a      	movs	r1, #42	; 0x2a
 8005db2:	438a      	bics	r2, r1
 8005db4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f000 feb5 	bl	8006b38 <UART_CheckIdleState>
 8005dce:	0003      	movs	r3, r0
}
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b002      	add	sp, #8
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	ffffb7ff 	.word	0xffffb7ff

08005ddc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	1dbb      	adds	r3, r7, #6
 8005de8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2280      	movs	r2, #128	; 0x80
 8005dee:	589b      	ldr	r3, [r3, r2]
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d14a      	bne.n	8005e8a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_UART_Receive_IT+0x26>
 8005dfa:	1dbb      	adds	r3, r7, #6
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e042      	b.n	8005e8c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	2380      	movs	r3, #128	; 0x80
 8005e0c:	015b      	lsls	r3, r3, #5
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d109      	bne.n	8005e26 <HAL_UART_Receive_IT+0x4a>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d105      	bne.n	8005e26 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	4013      	ands	r3, r2
 8005e20:	d001      	beq.n	8005e26 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e032      	b.n	8005e8c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a18      	ldr	r2, [pc, #96]	; (8005e94 <HAL_UART_Receive_IT+0xb8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d020      	beq.n	8005e78 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	2380      	movs	r3, #128	; 0x80
 8005e3e:	041b      	lsls	r3, r3, #16
 8005e40:	4013      	ands	r3, r2
 8005e42:	d019      	beq.n	8005e78 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e44:	f3ef 8310 	mrs	r3, PRIMASK
 8005e48:	613b      	str	r3, [r7, #16]
  return(result);
 8005e4a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	2301      	movs	r3, #1
 8005e50:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f383 8810 	msr	PRIMASK, r3
}
 8005e58:	46c0      	nop			; (mov r8, r8)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2180      	movs	r1, #128	; 0x80
 8005e66:	04c9      	lsls	r1, r1, #19
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	f383 8810 	msr	PRIMASK, r3
}
 8005e76:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e78:	1dbb      	adds	r3, r7, #6
 8005e7a:	881a      	ldrh	r2, [r3, #0]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	0018      	movs	r0, r3
 8005e82:	f000 ff6b 	bl	8006d5c <UART_Start_Receive_IT>
 8005e86:	0003      	movs	r3, r0
 8005e88:	e000      	b.n	8005e8c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8005e8a:	2302      	movs	r3, #2
  }
}
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	b008      	add	sp, #32
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40004800 	.word	0x40004800

08005e98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e98:	b590      	push	{r4, r7, lr}
 8005e9a:	b0ab      	sub	sp, #172	; 0xac
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	22a4      	movs	r2, #164	; 0xa4
 8005ea8:	18b9      	adds	r1, r7, r2
 8005eaa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	20a0      	movs	r0, #160	; 0xa0
 8005eb4:	1839      	adds	r1, r7, r0
 8005eb6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	219c      	movs	r1, #156	; 0x9c
 8005ec0:	1879      	adds	r1, r7, r1
 8005ec2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ec4:	0011      	movs	r1, r2
 8005ec6:	18bb      	adds	r3, r7, r2
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a99      	ldr	r2, [pc, #612]	; (8006130 <HAL_UART_IRQHandler+0x298>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	2298      	movs	r2, #152	; 0x98
 8005ed0:	18bc      	adds	r4, r7, r2
 8005ed2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005ed4:	18bb      	adds	r3, r7, r2
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d114      	bne.n	8005f06 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005edc:	187b      	adds	r3, r7, r1
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d00f      	beq.n	8005f06 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ee6:	183b      	adds	r3, r7, r0
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2220      	movs	r2, #32
 8005eec:	4013      	ands	r3, r2
 8005eee:	d00a      	beq.n	8005f06 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d100      	bne.n	8005efa <HAL_UART_IRQHandler+0x62>
 8005ef8:	e2a0      	b.n	800643c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	0010      	movs	r0, r2
 8005f02:	4798      	blx	r3
      }
      return;
 8005f04:	e29a      	b.n	800643c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f06:	2398      	movs	r3, #152	; 0x98
 8005f08:	18fb      	adds	r3, r7, r3
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d100      	bne.n	8005f12 <HAL_UART_IRQHandler+0x7a>
 8005f10:	e114      	b.n	800613c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f12:	239c      	movs	r3, #156	; 0x9c
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	d106      	bne.n	8005f2c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f1e:	23a0      	movs	r3, #160	; 0xa0
 8005f20:	18fb      	adds	r3, r7, r3
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a83      	ldr	r2, [pc, #524]	; (8006134 <HAL_UART_IRQHandler+0x29c>)
 8005f26:	4013      	ands	r3, r2
 8005f28:	d100      	bne.n	8005f2c <HAL_UART_IRQHandler+0x94>
 8005f2a:	e107      	b.n	800613c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f2c:	23a4      	movs	r3, #164	; 0xa4
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2201      	movs	r2, #1
 8005f34:	4013      	ands	r3, r2
 8005f36:	d012      	beq.n	8005f5e <HAL_UART_IRQHandler+0xc6>
 8005f38:	23a0      	movs	r3, #160	; 0xa0
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	2380      	movs	r3, #128	; 0x80
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	4013      	ands	r3, r2
 8005f44:	d00b      	beq.n	8005f5e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2284      	movs	r2, #132	; 0x84
 8005f52:	589b      	ldr	r3, [r3, r2]
 8005f54:	2201      	movs	r2, #1
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2184      	movs	r1, #132	; 0x84
 8005f5c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f5e:	23a4      	movs	r3, #164	; 0xa4
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2202      	movs	r2, #2
 8005f66:	4013      	ands	r3, r2
 8005f68:	d011      	beq.n	8005f8e <HAL_UART_IRQHandler+0xf6>
 8005f6a:	239c      	movs	r3, #156	; 0x9c
 8005f6c:	18fb      	adds	r3, r7, r3
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2201      	movs	r2, #1
 8005f72:	4013      	ands	r3, r2
 8005f74:	d00b      	beq.n	8005f8e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2284      	movs	r2, #132	; 0x84
 8005f82:	589b      	ldr	r3, [r3, r2]
 8005f84:	2204      	movs	r2, #4
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2184      	movs	r1, #132	; 0x84
 8005f8c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f8e:	23a4      	movs	r3, #164	; 0xa4
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2204      	movs	r2, #4
 8005f96:	4013      	ands	r3, r2
 8005f98:	d011      	beq.n	8005fbe <HAL_UART_IRQHandler+0x126>
 8005f9a:	239c      	movs	r3, #156	; 0x9c
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	d00b      	beq.n	8005fbe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2204      	movs	r2, #4
 8005fac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2284      	movs	r2, #132	; 0x84
 8005fb2:	589b      	ldr	r3, [r3, r2]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2184      	movs	r1, #132	; 0x84
 8005fbc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fbe:	23a4      	movs	r3, #164	; 0xa4
 8005fc0:	18fb      	adds	r3, r7, r3
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	d017      	beq.n	8005ffa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fca:	23a0      	movs	r3, #160	; 0xa0
 8005fcc:	18fb      	adds	r3, r7, r3
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	d105      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fd6:	239c      	movs	r3, #156	; 0x9c
 8005fd8:	18fb      	adds	r3, r7, r3
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fe0:	d00b      	beq.n	8005ffa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2208      	movs	r2, #8
 8005fe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2284      	movs	r2, #132	; 0x84
 8005fee:	589b      	ldr	r3, [r3, r2]
 8005ff0:	2208      	movs	r2, #8
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2184      	movs	r1, #132	; 0x84
 8005ff8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ffa:	23a4      	movs	r3, #164	; 0xa4
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	2380      	movs	r3, #128	; 0x80
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	4013      	ands	r3, r2
 8006006:	d013      	beq.n	8006030 <HAL_UART_IRQHandler+0x198>
 8006008:	23a0      	movs	r3, #160	; 0xa0
 800600a:	18fb      	adds	r3, r7, r3
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	2380      	movs	r3, #128	; 0x80
 8006010:	04db      	lsls	r3, r3, #19
 8006012:	4013      	ands	r3, r2
 8006014:	d00c      	beq.n	8006030 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2280      	movs	r2, #128	; 0x80
 800601c:	0112      	lsls	r2, r2, #4
 800601e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2284      	movs	r2, #132	; 0x84
 8006024:	589b      	ldr	r3, [r3, r2]
 8006026:	2220      	movs	r2, #32
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2184      	movs	r1, #132	; 0x84
 800602e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2284      	movs	r2, #132	; 0x84
 8006034:	589b      	ldr	r3, [r3, r2]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d100      	bne.n	800603c <HAL_UART_IRQHandler+0x1a4>
 800603a:	e201      	b.n	8006440 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800603c:	23a4      	movs	r3, #164	; 0xa4
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2220      	movs	r2, #32
 8006044:	4013      	ands	r3, r2
 8006046:	d00e      	beq.n	8006066 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006048:	23a0      	movs	r3, #160	; 0xa0
 800604a:	18fb      	adds	r3, r7, r3
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2220      	movs	r2, #32
 8006050:	4013      	ands	r3, r2
 8006052:	d008      	beq.n	8006066 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	0010      	movs	r0, r2
 8006064:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2284      	movs	r2, #132	; 0x84
 800606a:	589b      	ldr	r3, [r3, r2]
 800606c:	2194      	movs	r1, #148	; 0x94
 800606e:	187a      	adds	r2, r7, r1
 8006070:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2240      	movs	r2, #64	; 0x40
 800607a:	4013      	ands	r3, r2
 800607c:	2b40      	cmp	r3, #64	; 0x40
 800607e:	d004      	beq.n	800608a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006080:	187b      	adds	r3, r7, r1
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2228      	movs	r2, #40	; 0x28
 8006086:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006088:	d047      	beq.n	800611a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	0018      	movs	r0, r3
 800608e:	f000 ff2f 	bl	8006ef0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2240      	movs	r2, #64	; 0x40
 800609a:	4013      	ands	r3, r2
 800609c:	2b40      	cmp	r3, #64	; 0x40
 800609e:	d137      	bne.n	8006110 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060a0:	f3ef 8310 	mrs	r3, PRIMASK
 80060a4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80060a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060a8:	2090      	movs	r0, #144	; 0x90
 80060aa:	183a      	adds	r2, r7, r0
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	2301      	movs	r3, #1
 80060b0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b4:	f383 8810 	msr	PRIMASK, r3
}
 80060b8:	46c0      	nop			; (mov r8, r8)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2140      	movs	r1, #64	; 0x40
 80060c6:	438a      	bics	r2, r1
 80060c8:	609a      	str	r2, [r3, #8]
 80060ca:	183b      	adds	r3, r7, r0
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060d2:	f383 8810 	msr	PRIMASK, r3
}
 80060d6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d012      	beq.n	8006106 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e4:	4a14      	ldr	r2, [pc, #80]	; (8006138 <HAL_UART_IRQHandler+0x2a0>)
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ec:	0018      	movs	r0, r3
 80060ee:	f7fc fe5d 	bl	8002dac <HAL_DMA_Abort_IT>
 80060f2:	1e03      	subs	r3, r0, #0
 80060f4:	d01a      	beq.n	800612c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006100:	0018      	movs	r0, r3
 8006102:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006104:	e012      	b.n	800612c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	0018      	movs	r0, r3
 800610a:	f000 f9af 	bl	800646c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800610e:	e00d      	b.n	800612c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	0018      	movs	r0, r3
 8006114:	f000 f9aa 	bl	800646c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006118:	e008      	b.n	800612c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	0018      	movs	r0, r3
 800611e:	f000 f9a5 	bl	800646c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2284      	movs	r2, #132	; 0x84
 8006126:	2100      	movs	r1, #0
 8006128:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800612a:	e189      	b.n	8006440 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612c:	46c0      	nop			; (mov r8, r8)
    return;
 800612e:	e187      	b.n	8006440 <HAL_UART_IRQHandler+0x5a8>
 8006130:	0000080f 	.word	0x0000080f
 8006134:	04000120 	.word	0x04000120
 8006138:	08006fb9 	.word	0x08006fb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006140:	2b01      	cmp	r3, #1
 8006142:	d000      	beq.n	8006146 <HAL_UART_IRQHandler+0x2ae>
 8006144:	e13b      	b.n	80063be <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006146:	23a4      	movs	r3, #164	; 0xa4
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2210      	movs	r2, #16
 800614e:	4013      	ands	r3, r2
 8006150:	d100      	bne.n	8006154 <HAL_UART_IRQHandler+0x2bc>
 8006152:	e134      	b.n	80063be <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006154:	23a0      	movs	r3, #160	; 0xa0
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2210      	movs	r2, #16
 800615c:	4013      	ands	r3, r2
 800615e:	d100      	bne.n	8006162 <HAL_UART_IRQHandler+0x2ca>
 8006160:	e12d      	b.n	80063be <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2210      	movs	r2, #16
 8006168:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	2240      	movs	r2, #64	; 0x40
 8006172:	4013      	ands	r3, r2
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d000      	beq.n	800617a <HAL_UART_IRQHandler+0x2e2>
 8006178:	e0a1      	b.n	80062be <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	217e      	movs	r1, #126	; 0x7e
 8006184:	187b      	adds	r3, r7, r1
 8006186:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006188:	187b      	adds	r3, r7, r1
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d100      	bne.n	8006192 <HAL_UART_IRQHandler+0x2fa>
 8006190:	e158      	b.n	8006444 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2258      	movs	r2, #88	; 0x58
 8006196:	5a9b      	ldrh	r3, [r3, r2]
 8006198:	187a      	adds	r2, r7, r1
 800619a:	8812      	ldrh	r2, [r2, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d300      	bcc.n	80061a2 <HAL_UART_IRQHandler+0x30a>
 80061a0:	e150      	b.n	8006444 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	187a      	adds	r2, r7, r1
 80061a6:	215a      	movs	r1, #90	; 0x5a
 80061a8:	8812      	ldrh	r2, [r2, #0]
 80061aa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2220      	movs	r2, #32
 80061b6:	4013      	ands	r3, r2
 80061b8:	d16f      	bne.n	800629a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ba:	f3ef 8310 	mrs	r3, PRIMASK
 80061be:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80061c4:	2301      	movs	r3, #1
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ca:	f383 8810 	msr	PRIMASK, r3
}
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	499e      	ldr	r1, [pc, #632]	; (8006454 <HAL_UART_IRQHandler+0x5bc>)
 80061dc:	400a      	ands	r2, r1
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	f383 8810 	msr	PRIMASK, r3
}
 80061ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ec:	f3ef 8310 	mrs	r3, PRIMASK
 80061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80061f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f4:	677b      	str	r3, [r7, #116]	; 0x74
 80061f6:	2301      	movs	r3, #1
 80061f8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061fc:	f383 8810 	msr	PRIMASK, r3
}
 8006200:	46c0      	nop			; (mov r8, r8)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2101      	movs	r1, #1
 800620e:	438a      	bics	r2, r1
 8006210:	609a      	str	r2, [r3, #8]
 8006212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006214:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006218:	f383 8810 	msr	PRIMASK, r3
}
 800621c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800621e:	f3ef 8310 	mrs	r3, PRIMASK
 8006222:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006224:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006226:	673b      	str	r3, [r7, #112]	; 0x70
 8006228:	2301      	movs	r3, #1
 800622a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800622c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622e:	f383 8810 	msr	PRIMASK, r3
}
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2140      	movs	r1, #64	; 0x40
 8006240:	438a      	bics	r2, r1
 8006242:	609a      	str	r2, [r3, #8]
 8006244:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006246:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800624a:	f383 8810 	msr	PRIMASK, r3
}
 800624e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2280      	movs	r2, #128	; 0x80
 8006254:	2120      	movs	r1, #32
 8006256:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800625e:	f3ef 8310 	mrs	r3, PRIMASK
 8006262:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006264:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006266:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006268:	2301      	movs	r3, #1
 800626a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800626e:	f383 8810 	msr	PRIMASK, r3
}
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2110      	movs	r1, #16
 8006280:	438a      	bics	r2, r1
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006286:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800628a:	f383 8810 	msr	PRIMASK, r3
}
 800628e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006294:	0018      	movs	r0, r3
 8006296:	f7fc fd49 	bl	8002d2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2258      	movs	r2, #88	; 0x58
 80062a4:	5a9a      	ldrh	r2, [r3, r2]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	215a      	movs	r1, #90	; 0x5a
 80062aa:	5a5b      	ldrh	r3, [r3, r1]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	0011      	movs	r1, r2
 80062b6:	0018      	movs	r0, r3
 80062b8:	f000 f8e0 	bl	800647c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062bc:	e0c2      	b.n	8006444 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2258      	movs	r2, #88	; 0x58
 80062c2:	5a99      	ldrh	r1, [r3, r2]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	225a      	movs	r2, #90	; 0x5a
 80062c8:	5a9b      	ldrh	r3, [r3, r2]
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	208e      	movs	r0, #142	; 0x8e
 80062ce:	183b      	adds	r3, r7, r0
 80062d0:	1a8a      	subs	r2, r1, r2
 80062d2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	225a      	movs	r2, #90	; 0x5a
 80062d8:	5a9b      	ldrh	r3, [r3, r2]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d100      	bne.n	80062e2 <HAL_UART_IRQHandler+0x44a>
 80062e0:	e0b2      	b.n	8006448 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80062e2:	183b      	adds	r3, r7, r0
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d100      	bne.n	80062ec <HAL_UART_IRQHandler+0x454>
 80062ea:	e0ad      	b.n	8006448 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ec:	f3ef 8310 	mrs	r3, PRIMASK
 80062f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80062f2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f4:	2488      	movs	r4, #136	; 0x88
 80062f6:	193a      	adds	r2, r7, r4
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	2301      	movs	r3, #1
 80062fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f383 8810 	msr	PRIMASK, r3
}
 8006304:	46c0      	nop			; (mov r8, r8)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4951      	ldr	r1, [pc, #324]	; (8006458 <HAL_UART_IRQHandler+0x5c0>)
 8006312:	400a      	ands	r2, r1
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	193b      	adds	r3, r7, r4
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f383 8810 	msr	PRIMASK, r3
}
 8006322:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006324:	f3ef 8310 	mrs	r3, PRIMASK
 8006328:	61bb      	str	r3, [r7, #24]
  return(result);
 800632a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632c:	2484      	movs	r4, #132	; 0x84
 800632e:	193a      	adds	r2, r7, r4
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	2301      	movs	r3, #1
 8006334:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f383 8810 	msr	PRIMASK, r3
}
 800633c:	46c0      	nop			; (mov r8, r8)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2101      	movs	r1, #1
 800634a:	438a      	bics	r2, r1
 800634c:	609a      	str	r2, [r3, #8]
 800634e:	193b      	adds	r3, r7, r4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	f383 8810 	msr	PRIMASK, r3
}
 800635a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2280      	movs	r2, #128	; 0x80
 8006360:	2120      	movs	r1, #32
 8006362:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006370:	f3ef 8310 	mrs	r3, PRIMASK
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006378:	2480      	movs	r4, #128	; 0x80
 800637a:	193a      	adds	r2, r7, r4
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	2301      	movs	r3, #1
 8006380:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	f383 8810 	msr	PRIMASK, r3
}
 8006388:	46c0      	nop			; (mov r8, r8)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2110      	movs	r1, #16
 8006396:	438a      	bics	r2, r1
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	193b      	adds	r3, r7, r4
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	f383 8810 	msr	PRIMASK, r3
}
 80063a6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063ae:	183b      	adds	r3, r7, r0
 80063b0:	881a      	ldrh	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	0011      	movs	r1, r2
 80063b6:	0018      	movs	r0, r3
 80063b8:	f000 f860 	bl	800647c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063bc:	e044      	b.n	8006448 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063be:	23a4      	movs	r3, #164	; 0xa4
 80063c0:	18fb      	adds	r3, r7, r3
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	2380      	movs	r3, #128	; 0x80
 80063c6:	035b      	lsls	r3, r3, #13
 80063c8:	4013      	ands	r3, r2
 80063ca:	d010      	beq.n	80063ee <HAL_UART_IRQHandler+0x556>
 80063cc:	239c      	movs	r3, #156	; 0x9c
 80063ce:	18fb      	adds	r3, r7, r3
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	2380      	movs	r3, #128	; 0x80
 80063d4:	03db      	lsls	r3, r3, #15
 80063d6:	4013      	ands	r3, r2
 80063d8:	d009      	beq.n	80063ee <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2280      	movs	r2, #128	; 0x80
 80063e0:	0352      	lsls	r2, r2, #13
 80063e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	0018      	movs	r0, r3
 80063e8:	f000 ffec 	bl	80073c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063ec:	e02f      	b.n	800644e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063ee:	23a4      	movs	r3, #164	; 0xa4
 80063f0:	18fb      	adds	r3, r7, r3
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2280      	movs	r2, #128	; 0x80
 80063f6:	4013      	ands	r3, r2
 80063f8:	d00f      	beq.n	800641a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063fa:	23a0      	movs	r3, #160	; 0xa0
 80063fc:	18fb      	adds	r3, r7, r3
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2280      	movs	r2, #128	; 0x80
 8006402:	4013      	ands	r3, r2
 8006404:	d009      	beq.n	800641a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800640a:	2b00      	cmp	r3, #0
 800640c:	d01e      	beq.n	800644c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	0010      	movs	r0, r2
 8006416:	4798      	blx	r3
    }
    return;
 8006418:	e018      	b.n	800644c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800641a:	23a4      	movs	r3, #164	; 0xa4
 800641c:	18fb      	adds	r3, r7, r3
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2240      	movs	r2, #64	; 0x40
 8006422:	4013      	ands	r3, r2
 8006424:	d013      	beq.n	800644e <HAL_UART_IRQHandler+0x5b6>
 8006426:	23a0      	movs	r3, #160	; 0xa0
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2240      	movs	r2, #64	; 0x40
 800642e:	4013      	ands	r3, r2
 8006430:	d00d      	beq.n	800644e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	0018      	movs	r0, r3
 8006436:	f000 fdd6 	bl	8006fe6 <UART_EndTransmit_IT>
    return;
 800643a:	e008      	b.n	800644e <HAL_UART_IRQHandler+0x5b6>
      return;
 800643c:	46c0      	nop			; (mov r8, r8)
 800643e:	e006      	b.n	800644e <HAL_UART_IRQHandler+0x5b6>
    return;
 8006440:	46c0      	nop			; (mov r8, r8)
 8006442:	e004      	b.n	800644e <HAL_UART_IRQHandler+0x5b6>
      return;
 8006444:	46c0      	nop			; (mov r8, r8)
 8006446:	e002      	b.n	800644e <HAL_UART_IRQHandler+0x5b6>
      return;
 8006448:	46c0      	nop			; (mov r8, r8)
 800644a:	e000      	b.n	800644e <HAL_UART_IRQHandler+0x5b6>
    return;
 800644c:	46c0      	nop			; (mov r8, r8)
  }

}
 800644e:	46bd      	mov	sp, r7
 8006450:	b02b      	add	sp, #172	; 0xac
 8006452:	bd90      	pop	{r4, r7, pc}
 8006454:	fffffeff 	.word	0xfffffeff
 8006458:	fffffedf 	.word	0xfffffedf

0800645c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006464:	46c0      	nop			; (mov r8, r8)
 8006466:	46bd      	mov	sp, r7
 8006468:	b002      	add	sp, #8
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006474:	46c0      	nop			; (mov r8, r8)
 8006476:	46bd      	mov	sp, r7
 8006478:	b002      	add	sp, #8
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	000a      	movs	r2, r1
 8006486:	1cbb      	adds	r3, r7, #2
 8006488:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	46bd      	mov	sp, r7
 800648e:	b002      	add	sp, #8
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006494:	b5b0      	push	{r4, r5, r7, lr}
 8006496:	b08e      	sub	sp, #56	; 0x38
 8006498:	af00      	add	r7, sp, #0
 800649a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800649c:	231a      	movs	r3, #26
 800649e:	2218      	movs	r2, #24
 80064a0:	189b      	adds	r3, r3, r2
 80064a2:	19db      	adds	r3, r3, r7
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	431a      	orrs	r2, r3
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	4313      	orrs	r3, r2
 80064be:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4ac3      	ldr	r2, [pc, #780]	; (80067d4 <UART_SetConfig+0x340>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	0019      	movs	r1, r3
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064d2:	430a      	orrs	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	4abe      	ldr	r2, [pc, #760]	; (80067d8 <UART_SetConfig+0x344>)
 80064de:	4013      	ands	r3, r2
 80064e0:	0019      	movs	r1, r3
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4ab8      	ldr	r2, [pc, #736]	; (80067dc <UART_SetConfig+0x348>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d004      	beq.n	8006508 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006504:	4313      	orrs	r3, r2
 8006506:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	4ab4      	ldr	r2, [pc, #720]	; (80067e0 <UART_SetConfig+0x34c>)
 8006510:	4013      	ands	r3, r2
 8006512:	0019      	movs	r1, r3
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800651a:	430a      	orrs	r2, r1
 800651c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4ab0      	ldr	r2, [pc, #704]	; (80067e4 <UART_SetConfig+0x350>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d131      	bne.n	800658c <UART_SetConfig+0xf8>
 8006528:	4baf      	ldr	r3, [pc, #700]	; (80067e8 <UART_SetConfig+0x354>)
 800652a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652c:	2203      	movs	r2, #3
 800652e:	4013      	ands	r3, r2
 8006530:	2b03      	cmp	r3, #3
 8006532:	d01d      	beq.n	8006570 <UART_SetConfig+0xdc>
 8006534:	d823      	bhi.n	800657e <UART_SetConfig+0xea>
 8006536:	2b02      	cmp	r3, #2
 8006538:	d00c      	beq.n	8006554 <UART_SetConfig+0xc0>
 800653a:	d820      	bhi.n	800657e <UART_SetConfig+0xea>
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <UART_SetConfig+0xb2>
 8006540:	2b01      	cmp	r3, #1
 8006542:	d00e      	beq.n	8006562 <UART_SetConfig+0xce>
 8006544:	e01b      	b.n	800657e <UART_SetConfig+0xea>
 8006546:	231b      	movs	r3, #27
 8006548:	2218      	movs	r2, #24
 800654a:	189b      	adds	r3, r3, r2
 800654c:	19db      	adds	r3, r3, r7
 800654e:	2201      	movs	r2, #1
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	e0b4      	b.n	80066be <UART_SetConfig+0x22a>
 8006554:	231b      	movs	r3, #27
 8006556:	2218      	movs	r2, #24
 8006558:	189b      	adds	r3, r3, r2
 800655a:	19db      	adds	r3, r3, r7
 800655c:	2202      	movs	r2, #2
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	e0ad      	b.n	80066be <UART_SetConfig+0x22a>
 8006562:	231b      	movs	r3, #27
 8006564:	2218      	movs	r2, #24
 8006566:	189b      	adds	r3, r3, r2
 8006568:	19db      	adds	r3, r3, r7
 800656a:	2204      	movs	r2, #4
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	e0a6      	b.n	80066be <UART_SetConfig+0x22a>
 8006570:	231b      	movs	r3, #27
 8006572:	2218      	movs	r2, #24
 8006574:	189b      	adds	r3, r3, r2
 8006576:	19db      	adds	r3, r3, r7
 8006578:	2208      	movs	r2, #8
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	e09f      	b.n	80066be <UART_SetConfig+0x22a>
 800657e:	231b      	movs	r3, #27
 8006580:	2218      	movs	r2, #24
 8006582:	189b      	adds	r3, r3, r2
 8006584:	19db      	adds	r3, r3, r7
 8006586:	2210      	movs	r2, #16
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e098      	b.n	80066be <UART_SetConfig+0x22a>
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a96      	ldr	r2, [pc, #600]	; (80067ec <UART_SetConfig+0x358>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d131      	bne.n	80065fa <UART_SetConfig+0x166>
 8006596:	4b94      	ldr	r3, [pc, #592]	; (80067e8 <UART_SetConfig+0x354>)
 8006598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659a:	220c      	movs	r2, #12
 800659c:	4013      	ands	r3, r2
 800659e:	2b0c      	cmp	r3, #12
 80065a0:	d01d      	beq.n	80065de <UART_SetConfig+0x14a>
 80065a2:	d823      	bhi.n	80065ec <UART_SetConfig+0x158>
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d00c      	beq.n	80065c2 <UART_SetConfig+0x12e>
 80065a8:	d820      	bhi.n	80065ec <UART_SetConfig+0x158>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <UART_SetConfig+0x120>
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d00e      	beq.n	80065d0 <UART_SetConfig+0x13c>
 80065b2:	e01b      	b.n	80065ec <UART_SetConfig+0x158>
 80065b4:	231b      	movs	r3, #27
 80065b6:	2218      	movs	r2, #24
 80065b8:	189b      	adds	r3, r3, r2
 80065ba:	19db      	adds	r3, r3, r7
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	e07d      	b.n	80066be <UART_SetConfig+0x22a>
 80065c2:	231b      	movs	r3, #27
 80065c4:	2218      	movs	r2, #24
 80065c6:	189b      	adds	r3, r3, r2
 80065c8:	19db      	adds	r3, r3, r7
 80065ca:	2202      	movs	r2, #2
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	e076      	b.n	80066be <UART_SetConfig+0x22a>
 80065d0:	231b      	movs	r3, #27
 80065d2:	2218      	movs	r2, #24
 80065d4:	189b      	adds	r3, r3, r2
 80065d6:	19db      	adds	r3, r3, r7
 80065d8:	2204      	movs	r2, #4
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	e06f      	b.n	80066be <UART_SetConfig+0x22a>
 80065de:	231b      	movs	r3, #27
 80065e0:	2218      	movs	r2, #24
 80065e2:	189b      	adds	r3, r3, r2
 80065e4:	19db      	adds	r3, r3, r7
 80065e6:	2208      	movs	r2, #8
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	e068      	b.n	80066be <UART_SetConfig+0x22a>
 80065ec:	231b      	movs	r3, #27
 80065ee:	2218      	movs	r2, #24
 80065f0:	189b      	adds	r3, r3, r2
 80065f2:	19db      	adds	r3, r3, r7
 80065f4:	2210      	movs	r2, #16
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	e061      	b.n	80066be <UART_SetConfig+0x22a>
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a7c      	ldr	r2, [pc, #496]	; (80067f0 <UART_SetConfig+0x35c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d106      	bne.n	8006612 <UART_SetConfig+0x17e>
 8006604:	231b      	movs	r3, #27
 8006606:	2218      	movs	r2, #24
 8006608:	189b      	adds	r3, r3, r2
 800660a:	19db      	adds	r3, r3, r7
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	e055      	b.n	80066be <UART_SetConfig+0x22a>
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a77      	ldr	r2, [pc, #476]	; (80067f4 <UART_SetConfig+0x360>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d106      	bne.n	800662a <UART_SetConfig+0x196>
 800661c:	231b      	movs	r3, #27
 800661e:	2218      	movs	r2, #24
 8006620:	189b      	adds	r3, r3, r2
 8006622:	19db      	adds	r3, r3, r7
 8006624:	2200      	movs	r2, #0
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	e049      	b.n	80066be <UART_SetConfig+0x22a>
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a6b      	ldr	r2, [pc, #428]	; (80067dc <UART_SetConfig+0x348>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d13e      	bne.n	80066b2 <UART_SetConfig+0x21e>
 8006634:	4b6c      	ldr	r3, [pc, #432]	; (80067e8 <UART_SetConfig+0x354>)
 8006636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006638:	23c0      	movs	r3, #192	; 0xc0
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	4013      	ands	r3, r2
 800663e:	22c0      	movs	r2, #192	; 0xc0
 8006640:	0112      	lsls	r2, r2, #4
 8006642:	4293      	cmp	r3, r2
 8006644:	d027      	beq.n	8006696 <UART_SetConfig+0x202>
 8006646:	22c0      	movs	r2, #192	; 0xc0
 8006648:	0112      	lsls	r2, r2, #4
 800664a:	4293      	cmp	r3, r2
 800664c:	d82a      	bhi.n	80066a4 <UART_SetConfig+0x210>
 800664e:	2280      	movs	r2, #128	; 0x80
 8006650:	0112      	lsls	r2, r2, #4
 8006652:	4293      	cmp	r3, r2
 8006654:	d011      	beq.n	800667a <UART_SetConfig+0x1e6>
 8006656:	2280      	movs	r2, #128	; 0x80
 8006658:	0112      	lsls	r2, r2, #4
 800665a:	4293      	cmp	r3, r2
 800665c:	d822      	bhi.n	80066a4 <UART_SetConfig+0x210>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d004      	beq.n	800666c <UART_SetConfig+0x1d8>
 8006662:	2280      	movs	r2, #128	; 0x80
 8006664:	00d2      	lsls	r2, r2, #3
 8006666:	4293      	cmp	r3, r2
 8006668:	d00e      	beq.n	8006688 <UART_SetConfig+0x1f4>
 800666a:	e01b      	b.n	80066a4 <UART_SetConfig+0x210>
 800666c:	231b      	movs	r3, #27
 800666e:	2218      	movs	r2, #24
 8006670:	189b      	adds	r3, r3, r2
 8006672:	19db      	adds	r3, r3, r7
 8006674:	2200      	movs	r2, #0
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	e021      	b.n	80066be <UART_SetConfig+0x22a>
 800667a:	231b      	movs	r3, #27
 800667c:	2218      	movs	r2, #24
 800667e:	189b      	adds	r3, r3, r2
 8006680:	19db      	adds	r3, r3, r7
 8006682:	2202      	movs	r2, #2
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	e01a      	b.n	80066be <UART_SetConfig+0x22a>
 8006688:	231b      	movs	r3, #27
 800668a:	2218      	movs	r2, #24
 800668c:	189b      	adds	r3, r3, r2
 800668e:	19db      	adds	r3, r3, r7
 8006690:	2204      	movs	r2, #4
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	e013      	b.n	80066be <UART_SetConfig+0x22a>
 8006696:	231b      	movs	r3, #27
 8006698:	2218      	movs	r2, #24
 800669a:	189b      	adds	r3, r3, r2
 800669c:	19db      	adds	r3, r3, r7
 800669e:	2208      	movs	r2, #8
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	e00c      	b.n	80066be <UART_SetConfig+0x22a>
 80066a4:	231b      	movs	r3, #27
 80066a6:	2218      	movs	r2, #24
 80066a8:	189b      	adds	r3, r3, r2
 80066aa:	19db      	adds	r3, r3, r7
 80066ac:	2210      	movs	r2, #16
 80066ae:	701a      	strb	r2, [r3, #0]
 80066b0:	e005      	b.n	80066be <UART_SetConfig+0x22a>
 80066b2:	231b      	movs	r3, #27
 80066b4:	2218      	movs	r2, #24
 80066b6:	189b      	adds	r3, r3, r2
 80066b8:	19db      	adds	r3, r3, r7
 80066ba:	2210      	movs	r2, #16
 80066bc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a46      	ldr	r2, [pc, #280]	; (80067dc <UART_SetConfig+0x348>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d000      	beq.n	80066ca <UART_SetConfig+0x236>
 80066c8:	e09a      	b.n	8006800 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066ca:	231b      	movs	r3, #27
 80066cc:	2218      	movs	r2, #24
 80066ce:	189b      	adds	r3, r3, r2
 80066d0:	19db      	adds	r3, r3, r7
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d01d      	beq.n	8006714 <UART_SetConfig+0x280>
 80066d8:	dc20      	bgt.n	800671c <UART_SetConfig+0x288>
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d015      	beq.n	800670a <UART_SetConfig+0x276>
 80066de:	dc1d      	bgt.n	800671c <UART_SetConfig+0x288>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <UART_SetConfig+0x256>
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d005      	beq.n	80066f4 <UART_SetConfig+0x260>
 80066e8:	e018      	b.n	800671c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ea:	f7fe f97f 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 80066ee:	0003      	movs	r3, r0
 80066f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066f2:	e01c      	b.n	800672e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066f4:	4b3c      	ldr	r3, [pc, #240]	; (80067e8 <UART_SetConfig+0x354>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2210      	movs	r2, #16
 80066fa:	4013      	ands	r3, r2
 80066fc:	d002      	beq.n	8006704 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80066fe:	4b3e      	ldr	r3, [pc, #248]	; (80067f8 <UART_SetConfig+0x364>)
 8006700:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006702:	e014      	b.n	800672e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006704:	4b3d      	ldr	r3, [pc, #244]	; (80067fc <UART_SetConfig+0x368>)
 8006706:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006708:	e011      	b.n	800672e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800670a:	f7fe f8bf 	bl	800488c <HAL_RCC_GetSysClockFreq>
 800670e:	0003      	movs	r3, r0
 8006710:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006712:	e00c      	b.n	800672e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006714:	2380      	movs	r3, #128	; 0x80
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800671a:	e008      	b.n	800672e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006720:	231a      	movs	r3, #26
 8006722:	2218      	movs	r2, #24
 8006724:	189b      	adds	r3, r3, r2
 8006726:	19db      	adds	r3, r3, r7
 8006728:	2201      	movs	r2, #1
 800672a:	701a      	strb	r2, [r3, #0]
        break;
 800672c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d100      	bne.n	8006736 <UART_SetConfig+0x2a2>
 8006734:	e133      	b.n	800699e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	0013      	movs	r3, r2
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	189b      	adds	r3, r3, r2
 8006740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006742:	429a      	cmp	r2, r3
 8006744:	d305      	bcc.n	8006752 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800674c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800674e:	429a      	cmp	r2, r3
 8006750:	d906      	bls.n	8006760 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8006752:	231a      	movs	r3, #26
 8006754:	2218      	movs	r2, #24
 8006756:	189b      	adds	r3, r3, r2
 8006758:	19db      	adds	r3, r3, r7
 800675a:	2201      	movs	r2, #1
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	e11e      	b.n	800699e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	2300      	movs	r3, #0
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	6939      	ldr	r1, [r7, #16]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	000b      	movs	r3, r1
 800676e:	0e1b      	lsrs	r3, r3, #24
 8006770:	0010      	movs	r0, r2
 8006772:	0205      	lsls	r5, r0, #8
 8006774:	431d      	orrs	r5, r3
 8006776:	000b      	movs	r3, r1
 8006778:	021c      	lsls	r4, r3, #8
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	085b      	lsrs	r3, r3, #1
 8006780:	60bb      	str	r3, [r7, #8]
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	68b8      	ldr	r0, [r7, #8]
 8006788:	68f9      	ldr	r1, [r7, #12]
 800678a:	1900      	adds	r0, r0, r4
 800678c:	4169      	adcs	r1, r5
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	2300      	movs	r3, #0
 8006796:	607b      	str	r3, [r7, #4]
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f7f9 fd4a 	bl	8000234 <__aeabi_uldivmod>
 80067a0:	0002      	movs	r2, r0
 80067a2:	000b      	movs	r3, r1
 80067a4:	0013      	movs	r3, r2
 80067a6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067aa:	23c0      	movs	r3, #192	; 0xc0
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d309      	bcc.n	80067c6 <UART_SetConfig+0x332>
 80067b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b4:	2380      	movs	r3, #128	; 0x80
 80067b6:	035b      	lsls	r3, r3, #13
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d204      	bcs.n	80067c6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067c2:	60da      	str	r2, [r3, #12]
 80067c4:	e0eb      	b.n	800699e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80067c6:	231a      	movs	r3, #26
 80067c8:	2218      	movs	r2, #24
 80067ca:	189b      	adds	r3, r3, r2
 80067cc:	19db      	adds	r3, r3, r7
 80067ce:	2201      	movs	r2, #1
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	e0e4      	b.n	800699e <UART_SetConfig+0x50a>
 80067d4:	efff69f3 	.word	0xefff69f3
 80067d8:	ffffcfff 	.word	0xffffcfff
 80067dc:	40004800 	.word	0x40004800
 80067e0:	fffff4ff 	.word	0xfffff4ff
 80067e4:	40013800 	.word	0x40013800
 80067e8:	40021000 	.word	0x40021000
 80067ec:	40004400 	.word	0x40004400
 80067f0:	40004c00 	.word	0x40004c00
 80067f4:	40005000 	.word	0x40005000
 80067f8:	003d0900 	.word	0x003d0900
 80067fc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	2380      	movs	r3, #128	; 0x80
 8006806:	021b      	lsls	r3, r3, #8
 8006808:	429a      	cmp	r2, r3
 800680a:	d000      	beq.n	800680e <UART_SetConfig+0x37a>
 800680c:	e070      	b.n	80068f0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800680e:	231b      	movs	r3, #27
 8006810:	2218      	movs	r2, #24
 8006812:	189b      	adds	r3, r3, r2
 8006814:	19db      	adds	r3, r3, r7
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b08      	cmp	r3, #8
 800681a:	d822      	bhi.n	8006862 <UART_SetConfig+0x3ce>
 800681c:	009a      	lsls	r2, r3, #2
 800681e:	4b67      	ldr	r3, [pc, #412]	; (80069bc <UART_SetConfig+0x528>)
 8006820:	18d3      	adds	r3, r2, r3
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006826:	f7fe f8e1 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 800682a:	0003      	movs	r3, r0
 800682c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800682e:	e021      	b.n	8006874 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006830:	f7fe f8f2 	bl	8004a18 <HAL_RCC_GetPCLK2Freq>
 8006834:	0003      	movs	r3, r0
 8006836:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006838:	e01c      	b.n	8006874 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800683a:	4b61      	ldr	r3, [pc, #388]	; (80069c0 <UART_SetConfig+0x52c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2210      	movs	r2, #16
 8006840:	4013      	ands	r3, r2
 8006842:	d002      	beq.n	800684a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006844:	4b5f      	ldr	r3, [pc, #380]	; (80069c4 <UART_SetConfig+0x530>)
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006848:	e014      	b.n	8006874 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800684a:	4b5f      	ldr	r3, [pc, #380]	; (80069c8 <UART_SetConfig+0x534>)
 800684c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800684e:	e011      	b.n	8006874 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006850:	f7fe f81c 	bl	800488c <HAL_RCC_GetSysClockFreq>
 8006854:	0003      	movs	r3, r0
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006858:	e00c      	b.n	8006874 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800685a:	2380      	movs	r3, #128	; 0x80
 800685c:	021b      	lsls	r3, r3, #8
 800685e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006860:	e008      	b.n	8006874 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006866:	231a      	movs	r3, #26
 8006868:	2218      	movs	r2, #24
 800686a:	189b      	adds	r3, r3, r2
 800686c:	19db      	adds	r3, r3, r7
 800686e:	2201      	movs	r2, #1
 8006870:	701a      	strb	r2, [r3, #0]
        break;
 8006872:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d100      	bne.n	800687c <UART_SetConfig+0x3e8>
 800687a:	e090      	b.n	800699e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687e:	005a      	lsls	r2, r3, #1
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	18d2      	adds	r2, r2, r3
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	0019      	movs	r1, r3
 800688e:	0010      	movs	r0, r2
 8006890:	f7f9 fc44 	bl	800011c <__udivsi3>
 8006894:	0003      	movs	r3, r0
 8006896:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	2b0f      	cmp	r3, #15
 800689c:	d921      	bls.n	80068e2 <UART_SetConfig+0x44e>
 800689e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a0:	2380      	movs	r3, #128	; 0x80
 80068a2:	025b      	lsls	r3, r3, #9
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d21c      	bcs.n	80068e2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	200e      	movs	r0, #14
 80068ae:	2418      	movs	r4, #24
 80068b0:	1903      	adds	r3, r0, r4
 80068b2:	19db      	adds	r3, r3, r7
 80068b4:	210f      	movs	r1, #15
 80068b6:	438a      	bics	r2, r1
 80068b8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	b29b      	uxth	r3, r3
 80068c0:	2207      	movs	r2, #7
 80068c2:	4013      	ands	r3, r2
 80068c4:	b299      	uxth	r1, r3
 80068c6:	1903      	adds	r3, r0, r4
 80068c8:	19db      	adds	r3, r3, r7
 80068ca:	1902      	adds	r2, r0, r4
 80068cc:	19d2      	adds	r2, r2, r7
 80068ce:	8812      	ldrh	r2, [r2, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	1902      	adds	r2, r0, r4
 80068da:	19d2      	adds	r2, r2, r7
 80068dc:	8812      	ldrh	r2, [r2, #0]
 80068de:	60da      	str	r2, [r3, #12]
 80068e0:	e05d      	b.n	800699e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80068e2:	231a      	movs	r3, #26
 80068e4:	2218      	movs	r2, #24
 80068e6:	189b      	adds	r3, r3, r2
 80068e8:	19db      	adds	r3, r3, r7
 80068ea:	2201      	movs	r2, #1
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	e056      	b.n	800699e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068f0:	231b      	movs	r3, #27
 80068f2:	2218      	movs	r2, #24
 80068f4:	189b      	adds	r3, r3, r2
 80068f6:	19db      	adds	r3, r3, r7
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b08      	cmp	r3, #8
 80068fc:	d822      	bhi.n	8006944 <UART_SetConfig+0x4b0>
 80068fe:	009a      	lsls	r2, r3, #2
 8006900:	4b32      	ldr	r3, [pc, #200]	; (80069cc <UART_SetConfig+0x538>)
 8006902:	18d3      	adds	r3, r2, r3
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006908:	f7fe f870 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 800690c:	0003      	movs	r3, r0
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006910:	e021      	b.n	8006956 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006912:	f7fe f881 	bl	8004a18 <HAL_RCC_GetPCLK2Freq>
 8006916:	0003      	movs	r3, r0
 8006918:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800691a:	e01c      	b.n	8006956 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800691c:	4b28      	ldr	r3, [pc, #160]	; (80069c0 <UART_SetConfig+0x52c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2210      	movs	r2, #16
 8006922:	4013      	ands	r3, r2
 8006924:	d002      	beq.n	800692c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006926:	4b27      	ldr	r3, [pc, #156]	; (80069c4 <UART_SetConfig+0x530>)
 8006928:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800692a:	e014      	b.n	8006956 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800692c:	4b26      	ldr	r3, [pc, #152]	; (80069c8 <UART_SetConfig+0x534>)
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006930:	e011      	b.n	8006956 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006932:	f7fd ffab 	bl	800488c <HAL_RCC_GetSysClockFreq>
 8006936:	0003      	movs	r3, r0
 8006938:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800693a:	e00c      	b.n	8006956 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800693c:	2380      	movs	r3, #128	; 0x80
 800693e:	021b      	lsls	r3, r3, #8
 8006940:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006942:	e008      	b.n	8006956 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006948:	231a      	movs	r3, #26
 800694a:	2218      	movs	r2, #24
 800694c:	189b      	adds	r3, r3, r2
 800694e:	19db      	adds	r3, r3, r7
 8006950:	2201      	movs	r2, #1
 8006952:	701a      	strb	r2, [r3, #0]
        break;
 8006954:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d020      	beq.n	800699e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	085a      	lsrs	r2, r3, #1
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	18d2      	adds	r2, r2, r3
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	0019      	movs	r1, r3
 800696c:	0010      	movs	r0, r2
 800696e:	f7f9 fbd5 	bl	800011c <__udivsi3>
 8006972:	0003      	movs	r3, r0
 8006974:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	2b0f      	cmp	r3, #15
 800697a:	d90a      	bls.n	8006992 <UART_SetConfig+0x4fe>
 800697c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800697e:	2380      	movs	r3, #128	; 0x80
 8006980:	025b      	lsls	r3, r3, #9
 8006982:	429a      	cmp	r2, r3
 8006984:	d205      	bcs.n	8006992 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006988:	b29a      	uxth	r2, r3
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	60da      	str	r2, [r3, #12]
 8006990:	e005      	b.n	800699e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006992:	231a      	movs	r3, #26
 8006994:	2218      	movs	r2, #24
 8006996:	189b      	adds	r3, r3, r2
 8006998:	19db      	adds	r3, r3, r7
 800699a:	2201      	movs	r2, #1
 800699c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	2200      	movs	r2, #0
 80069a2:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	2200      	movs	r2, #0
 80069a8:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80069aa:	231a      	movs	r3, #26
 80069ac:	2218      	movs	r2, #24
 80069ae:	189b      	adds	r3, r3, r2
 80069b0:	19db      	adds	r3, r3, r7
 80069b2:	781b      	ldrb	r3, [r3, #0]
}
 80069b4:	0018      	movs	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	b00e      	add	sp, #56	; 0x38
 80069ba:	bdb0      	pop	{r4, r5, r7, pc}
 80069bc:	080085b4 	.word	0x080085b4
 80069c0:	40021000 	.word	0x40021000
 80069c4:	003d0900 	.word	0x003d0900
 80069c8:	00f42400 	.word	0x00f42400
 80069cc:	080085d8 	.word	0x080085d8

080069d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	2201      	movs	r2, #1
 80069de:	4013      	ands	r3, r2
 80069e0:	d00b      	beq.n	80069fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4a4a      	ldr	r2, [pc, #296]	; (8006b14 <UART_AdvFeatureConfig+0x144>)
 80069ea:	4013      	ands	r3, r2
 80069ec:	0019      	movs	r1, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	2202      	movs	r2, #2
 8006a00:	4013      	ands	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	4a43      	ldr	r2, [pc, #268]	; (8006b18 <UART_AdvFeatureConfig+0x148>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	0019      	movs	r1, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	2204      	movs	r2, #4
 8006a22:	4013      	ands	r3, r2
 8006a24:	d00b      	beq.n	8006a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4a3b      	ldr	r2, [pc, #236]	; (8006b1c <UART_AdvFeatureConfig+0x14c>)
 8006a2e:	4013      	ands	r3, r2
 8006a30:	0019      	movs	r1, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	2208      	movs	r2, #8
 8006a44:	4013      	ands	r3, r2
 8006a46:	d00b      	beq.n	8006a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	4a34      	ldr	r2, [pc, #208]	; (8006b20 <UART_AdvFeatureConfig+0x150>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	0019      	movs	r1, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	2210      	movs	r2, #16
 8006a66:	4013      	ands	r3, r2
 8006a68:	d00b      	beq.n	8006a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4a2c      	ldr	r2, [pc, #176]	; (8006b24 <UART_AdvFeatureConfig+0x154>)
 8006a72:	4013      	ands	r3, r2
 8006a74:	0019      	movs	r1, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	2220      	movs	r2, #32
 8006a88:	4013      	ands	r3, r2
 8006a8a:	d00b      	beq.n	8006aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	4a25      	ldr	r2, [pc, #148]	; (8006b28 <UART_AdvFeatureConfig+0x158>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	0019      	movs	r1, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	2240      	movs	r2, #64	; 0x40
 8006aaa:	4013      	ands	r3, r2
 8006aac:	d01d      	beq.n	8006aea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	4a1d      	ldr	r2, [pc, #116]	; (8006b2c <UART_AdvFeatureConfig+0x15c>)
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	0019      	movs	r1, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aca:	2380      	movs	r3, #128	; 0x80
 8006acc:	035b      	lsls	r3, r3, #13
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d10b      	bne.n	8006aea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	4a15      	ldr	r2, [pc, #84]	; (8006b30 <UART_AdvFeatureConfig+0x160>)
 8006ada:	4013      	ands	r3, r2
 8006adc:	0019      	movs	r1, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	2280      	movs	r2, #128	; 0x80
 8006af0:	4013      	ands	r3, r2
 8006af2:	d00b      	beq.n	8006b0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	4a0e      	ldr	r2, [pc, #56]	; (8006b34 <UART_AdvFeatureConfig+0x164>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	0019      	movs	r1, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	605a      	str	r2, [r3, #4]
  }
}
 8006b0c:	46c0      	nop			; (mov r8, r8)
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	b002      	add	sp, #8
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	fffdffff 	.word	0xfffdffff
 8006b18:	fffeffff 	.word	0xfffeffff
 8006b1c:	fffbffff 	.word	0xfffbffff
 8006b20:	ffff7fff 	.word	0xffff7fff
 8006b24:	ffffefff 	.word	0xffffefff
 8006b28:	ffffdfff 	.word	0xffffdfff
 8006b2c:	ffefffff 	.word	0xffefffff
 8006b30:	ff9fffff 	.word	0xff9fffff
 8006b34:	fff7ffff 	.word	0xfff7ffff

08006b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b092      	sub	sp, #72	; 0x48
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2284      	movs	r2, #132	; 0x84
 8006b44:	2100      	movs	r1, #0
 8006b46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b48:	f7fb fd52 	bl	80025f0 <HAL_GetTick>
 8006b4c:	0003      	movs	r3, r0
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2208      	movs	r2, #8
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d12c      	bne.n	8006bb8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b60:	2280      	movs	r2, #128	; 0x80
 8006b62:	0391      	lsls	r1, r2, #14
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	4a46      	ldr	r2, [pc, #280]	; (8006c80 <UART_CheckIdleState+0x148>)
 8006b68:	9200      	str	r2, [sp, #0]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f000 f88c 	bl	8006c88 <UART_WaitOnFlagUntilTimeout>
 8006b70:	1e03      	subs	r3, r0, #0
 8006b72:	d021      	beq.n	8006bb8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b74:	f3ef 8310 	mrs	r3, PRIMASK
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b7e:	2301      	movs	r3, #1
 8006b80:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	f383 8810 	msr	PRIMASK, r3
}
 8006b88:	46c0      	nop			; (mov r8, r8)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2180      	movs	r1, #128	; 0x80
 8006b96:	438a      	bics	r2, r1
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	f383 8810 	msr	PRIMASK, r3
}
 8006ba4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2278      	movs	r2, #120	; 0x78
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e05f      	b.n	8006c78 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2204      	movs	r2, #4
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d146      	bne.n	8006c54 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc8:	2280      	movs	r2, #128	; 0x80
 8006bca:	03d1      	lsls	r1, r2, #15
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4a2c      	ldr	r2, [pc, #176]	; (8006c80 <UART_CheckIdleState+0x148>)
 8006bd0:	9200      	str	r2, [sp, #0]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f000 f858 	bl	8006c88 <UART_WaitOnFlagUntilTimeout>
 8006bd8:	1e03      	subs	r3, r0, #0
 8006bda:	d03b      	beq.n	8006c54 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8006be0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006be2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34
 8006be6:	2301      	movs	r3, #1
 8006be8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f383 8810 	msr	PRIMASK, r3
}
 8006bf0:	46c0      	nop			; (mov r8, r8)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4921      	ldr	r1, [pc, #132]	; (8006c84 <UART_CheckIdleState+0x14c>)
 8006bfe:	400a      	ands	r2, r1
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f383 8810 	msr	PRIMASK, r3
}
 8006c0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c12:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c14:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c16:	633b      	str	r3, [r7, #48]	; 0x30
 8006c18:	2301      	movs	r3, #1
 8006c1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	f383 8810 	msr	PRIMASK, r3
}
 8006c22:	46c0      	nop			; (mov r8, r8)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2101      	movs	r1, #1
 8006c30:	438a      	bics	r2, r1
 8006c32:	609a      	str	r2, [r3, #8]
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	f383 8810 	msr	PRIMASK, r3
}
 8006c3e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2280      	movs	r2, #128	; 0x80
 8006c44:	2120      	movs	r1, #32
 8006c46:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2278      	movs	r2, #120	; 0x78
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e011      	b.n	8006c78 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2280      	movs	r2, #128	; 0x80
 8006c5e:	2120      	movs	r1, #32
 8006c60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2278      	movs	r2, #120	; 0x78
 8006c72:	2100      	movs	r1, #0
 8006c74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	0018      	movs	r0, r3
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	b010      	add	sp, #64	; 0x40
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	01ffffff 	.word	0x01ffffff
 8006c84:	fffffedf 	.word	0xfffffedf

08006c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	1dfb      	adds	r3, r7, #7
 8006c96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c98:	e04b      	b.n	8006d32 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	d048      	beq.n	8006d32 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca0:	f7fb fca6 	bl	80025f0 <HAL_GetTick>
 8006ca4:	0002      	movs	r2, r0
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d302      	bcc.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e04b      	b.n	8006d52 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	d035      	beq.n	8006d32 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	2208      	movs	r2, #8
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d111      	bne.n	8006cf8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2208      	movs	r2, #8
 8006cda:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	0018      	movs	r0, r3
 8006ce0:	f000 f906 	bl	8006ef0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2284      	movs	r2, #132	; 0x84
 8006ce8:	2108      	movs	r1, #8
 8006cea:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2278      	movs	r2, #120	; 0x78
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e02c      	b.n	8006d52 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	69da      	ldr	r2, [r3, #28]
 8006cfe:	2380      	movs	r3, #128	; 0x80
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	401a      	ands	r2, r3
 8006d04:	2380      	movs	r3, #128	; 0x80
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d112      	bne.n	8006d32 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2280      	movs	r2, #128	; 0x80
 8006d12:	0112      	lsls	r2, r2, #4
 8006d14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f000 f8e9 	bl	8006ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2284      	movs	r2, #132	; 0x84
 8006d22:	2120      	movs	r1, #32
 8006d24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2278      	movs	r2, #120	; 0x78
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e00f      	b.n	8006d52 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	425a      	negs	r2, r3
 8006d42:	4153      	adcs	r3, r2
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	001a      	movs	r2, r3
 8006d48:	1dfb      	adds	r3, r7, #7
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d0a4      	beq.n	8006c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	0018      	movs	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b004      	add	sp, #16
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b090      	sub	sp, #64	; 0x40
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	1dbb      	adds	r3, r7, #6
 8006d68:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	1dba      	adds	r2, r7, #6
 8006d74:	2158      	movs	r1, #88	; 0x58
 8006d76:	8812      	ldrh	r2, [r2, #0]
 8006d78:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1dba      	adds	r2, r7, #6
 8006d7e:	215a      	movs	r1, #90	; 0x5a
 8006d80:	8812      	ldrh	r2, [r2, #0]
 8006d82:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689a      	ldr	r2, [r3, #8]
 8006d8e:	2380      	movs	r3, #128	; 0x80
 8006d90:	015b      	lsls	r3, r3, #5
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d10d      	bne.n	8006db2 <UART_Start_Receive_IT+0x56>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d104      	bne.n	8006da8 <UART_Start_Receive_IT+0x4c>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	225c      	movs	r2, #92	; 0x5c
 8006da2:	4950      	ldr	r1, [pc, #320]	; (8006ee4 <UART_Start_Receive_IT+0x188>)
 8006da4:	5299      	strh	r1, [r3, r2]
 8006da6:	e02e      	b.n	8006e06 <UART_Start_Receive_IT+0xaa>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	225c      	movs	r2, #92	; 0x5c
 8006dac:	21ff      	movs	r1, #255	; 0xff
 8006dae:	5299      	strh	r1, [r3, r2]
 8006db0:	e029      	b.n	8006e06 <UART_Start_Receive_IT+0xaa>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10d      	bne.n	8006dd6 <UART_Start_Receive_IT+0x7a>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d104      	bne.n	8006dcc <UART_Start_Receive_IT+0x70>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	225c      	movs	r2, #92	; 0x5c
 8006dc6:	21ff      	movs	r1, #255	; 0xff
 8006dc8:	5299      	strh	r1, [r3, r2]
 8006dca:	e01c      	b.n	8006e06 <UART_Start_Receive_IT+0xaa>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	225c      	movs	r2, #92	; 0x5c
 8006dd0:	217f      	movs	r1, #127	; 0x7f
 8006dd2:	5299      	strh	r1, [r3, r2]
 8006dd4:	e017      	b.n	8006e06 <UART_Start_Receive_IT+0xaa>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	689a      	ldr	r2, [r3, #8]
 8006dda:	2380      	movs	r3, #128	; 0x80
 8006ddc:	055b      	lsls	r3, r3, #21
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d10d      	bne.n	8006dfe <UART_Start_Receive_IT+0xa2>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d104      	bne.n	8006df4 <UART_Start_Receive_IT+0x98>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	225c      	movs	r2, #92	; 0x5c
 8006dee:	217f      	movs	r1, #127	; 0x7f
 8006df0:	5299      	strh	r1, [r3, r2]
 8006df2:	e008      	b.n	8006e06 <UART_Start_Receive_IT+0xaa>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	225c      	movs	r2, #92	; 0x5c
 8006df8:	213f      	movs	r1, #63	; 0x3f
 8006dfa:	5299      	strh	r1, [r3, r2]
 8006dfc:	e003      	b.n	8006e06 <UART_Start_Receive_IT+0xaa>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	225c      	movs	r2, #92	; 0x5c
 8006e02:	2100      	movs	r1, #0
 8006e04:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2284      	movs	r2, #132	; 0x84
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2280      	movs	r2, #128	; 0x80
 8006e12:	2122      	movs	r1, #34	; 0x22
 8006e14:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e16:	f3ef 8310 	mrs	r3, PRIMASK
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e20:	2301      	movs	r3, #1
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	f383 8810 	msr	PRIMASK, r3
}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2101      	movs	r1, #1
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	609a      	str	r2, [r3, #8]
 8006e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	f383 8810 	msr	PRIMASK, r3
}
 8006e46:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	2380      	movs	r3, #128	; 0x80
 8006e4e:	015b      	lsls	r3, r3, #5
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d107      	bne.n	8006e64 <UART_Start_Receive_IT+0x108>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d103      	bne.n	8006e64 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4a22      	ldr	r2, [pc, #136]	; (8006ee8 <UART_Start_Receive_IT+0x18c>)
 8006e60:	669a      	str	r2, [r3, #104]	; 0x68
 8006e62:	e002      	b.n	8006e6a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4a21      	ldr	r2, [pc, #132]	; (8006eec <UART_Start_Receive_IT+0x190>)
 8006e68:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d019      	beq.n	8006ea6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e72:	f3ef 8310 	mrs	r3, PRIMASK
 8006e76:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e78:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	f383 8810 	msr	PRIMASK, r3
}
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2190      	movs	r1, #144	; 0x90
 8006e94:	0049      	lsls	r1, r1, #1
 8006e96:	430a      	orrs	r2, r1
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	f383 8810 	msr	PRIMASK, r3
}
 8006ea4:	e018      	b.n	8006ed8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8006eaa:	613b      	str	r3, [r7, #16]
  return(result);
 8006eac:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f383 8810 	msr	PRIMASK, r3
}
 8006eba:	46c0      	nop			; (mov r8, r8)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2120      	movs	r1, #32
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f383 8810 	msr	PRIMASK, r3
}
 8006ed6:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	0018      	movs	r0, r3
 8006edc:	46bd      	mov	sp, r7
 8006ede:	b010      	add	sp, #64	; 0x40
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	46c0      	nop			; (mov r8, r8)
 8006ee4:	000001ff 	.word	0x000001ff
 8006ee8:	08007201 	.word	0x08007201
 8006eec:	0800703d 	.word	0x0800703d

08006ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08e      	sub	sp, #56	; 0x38
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8006efc:	617b      	str	r3, [r7, #20]
  return(result);
 8006efe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
 8006f02:	2301      	movs	r3, #1
 8006f04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	f383 8810 	msr	PRIMASK, r3
}
 8006f0c:	46c0      	nop			; (mov r8, r8)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4926      	ldr	r1, [pc, #152]	; (8006fb4 <UART_EndRxTransfer+0xc4>)
 8006f1a:	400a      	ands	r2, r1
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	f383 8810 	msr	PRIMASK, r3
}
 8006f28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f2e:	623b      	str	r3, [r7, #32]
  return(result);
 8006f30:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f32:	633b      	str	r3, [r7, #48]	; 0x30
 8006f34:	2301      	movs	r3, #1
 8006f36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	f383 8810 	msr	PRIMASK, r3
}
 8006f3e:	46c0      	nop			; (mov r8, r8)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689a      	ldr	r2, [r3, #8]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	438a      	bics	r2, r1
 8006f4e:	609a      	str	r2, [r3, #8]
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	f383 8810 	msr	PRIMASK, r3
}
 8006f5a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d118      	bne.n	8006f96 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f64:	f3ef 8310 	mrs	r3, PRIMASK
 8006f68:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f6e:	2301      	movs	r3, #1
 8006f70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f383 8810 	msr	PRIMASK, r3
}
 8006f78:	46c0      	nop			; (mov r8, r8)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2110      	movs	r1, #16
 8006f86:	438a      	bics	r2, r1
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f383 8810 	msr	PRIMASK, r3
}
 8006f94:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2280      	movs	r2, #128	; 0x80
 8006f9a:	2120      	movs	r1, #32
 8006f9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	46bd      	mov	sp, r7
 8006fae:	b00e      	add	sp, #56	; 0x38
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	fffffedf 	.word	0xfffffedf

08006fb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	225a      	movs	r2, #90	; 0x5a
 8006fca:	2100      	movs	r1, #0
 8006fcc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2252      	movs	r2, #82	; 0x52
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f7ff fa47 	bl	800646c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fde:	46c0      	nop			; (mov r8, r8)
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	b004      	add	sp, #16
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b086      	sub	sp, #24
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fee:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f383 8810 	msr	PRIMASK, r3
}
 8007002:	46c0      	nop			; (mov r8, r8)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2140      	movs	r1, #64	; 0x40
 8007010:	438a      	bics	r2, r1
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f383 8810 	msr	PRIMASK, r3
}
 800701e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	0018      	movs	r0, r3
 8007030:	f7ff fa14 	bl	800645c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007034:	46c0      	nop			; (mov r8, r8)
 8007036:	46bd      	mov	sp, r7
 8007038:	b006      	add	sp, #24
 800703a:	bd80      	pop	{r7, pc}

0800703c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b094      	sub	sp, #80	; 0x50
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007044:	204e      	movs	r0, #78	; 0x4e
 8007046:	183b      	adds	r3, r7, r0
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	215c      	movs	r1, #92	; 0x5c
 800704c:	5a52      	ldrh	r2, [r2, r1]
 800704e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2280      	movs	r2, #128	; 0x80
 8007054:	589b      	ldr	r3, [r3, r2]
 8007056:	2b22      	cmp	r3, #34	; 0x22
 8007058:	d000      	beq.n	800705c <UART_RxISR_8BIT+0x20>
 800705a:	e0bf      	b.n	80071dc <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007062:	214c      	movs	r1, #76	; 0x4c
 8007064:	187b      	adds	r3, r7, r1
 8007066:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007068:	187b      	adds	r3, r7, r1
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b2da      	uxtb	r2, r3
 800706e:	183b      	adds	r3, r7, r0
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b2d9      	uxtb	r1, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007078:	400a      	ands	r2, r1
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	225a      	movs	r2, #90	; 0x5a
 800708c:	5a9b      	ldrh	r3, [r3, r2]
 800708e:	b29b      	uxth	r3, r3
 8007090:	3b01      	subs	r3, #1
 8007092:	b299      	uxth	r1, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	225a      	movs	r2, #90	; 0x5a
 8007098:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	225a      	movs	r2, #90	; 0x5a
 800709e:	5a9b      	ldrh	r3, [r3, r2]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d000      	beq.n	80070a8 <UART_RxISR_8BIT+0x6c>
 80070a6:	e0a1      	b.n	80071ec <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a8:	f3ef 8310 	mrs	r3, PRIMASK
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80070b2:	2301      	movs	r3, #1
 80070b4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	f383 8810 	msr	PRIMASK, r3
}
 80070bc:	46c0      	nop			; (mov r8, r8)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	494a      	ldr	r1, [pc, #296]	; (80071f4 <UART_RxISR_8BIT+0x1b8>)
 80070ca:	400a      	ands	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	f383 8810 	msr	PRIMASK, r3
}
 80070d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070da:	f3ef 8310 	mrs	r3, PRIMASK
 80070de:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e2:	647b      	str	r3, [r7, #68]	; 0x44
 80070e4:	2301      	movs	r3, #1
 80070e6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ea:	f383 8810 	msr	PRIMASK, r3
}
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2101      	movs	r1, #1
 80070fc:	438a      	bics	r2, r1
 80070fe:	609a      	str	r2, [r3, #8]
 8007100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007102:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	f383 8810 	msr	PRIMASK, r3
}
 800710a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2280      	movs	r2, #128	; 0x80
 8007110:	2120      	movs	r1, #32
 8007112:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a34      	ldr	r2, [pc, #208]	; (80071f8 <UART_RxISR_8BIT+0x1bc>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d01f      	beq.n	800716a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	2380      	movs	r3, #128	; 0x80
 8007132:	041b      	lsls	r3, r3, #16
 8007134:	4013      	ands	r3, r2
 8007136:	d018      	beq.n	800716a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007138:	f3ef 8310 	mrs	r3, PRIMASK
 800713c:	61bb      	str	r3, [r7, #24]
  return(result);
 800713e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007140:	643b      	str	r3, [r7, #64]	; 0x40
 8007142:	2301      	movs	r3, #1
 8007144:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	f383 8810 	msr	PRIMASK, r3
}
 800714c:	46c0      	nop			; (mov r8, r8)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4928      	ldr	r1, [pc, #160]	; (80071fc <UART_RxISR_8BIT+0x1c0>)
 800715a:	400a      	ands	r2, r1
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007160:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	f383 8810 	msr	PRIMASK, r3
}
 8007168:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716e:	2b01      	cmp	r3, #1
 8007170:	d12f      	bne.n	80071d2 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007178:	f3ef 8310 	mrs	r3, PRIMASK
 800717c:	60fb      	str	r3, [r7, #12]
  return(result);
 800717e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007182:	2301      	movs	r3, #1
 8007184:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f383 8810 	msr	PRIMASK, r3
}
 800718c:	46c0      	nop			; (mov r8, r8)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2110      	movs	r1, #16
 800719a:	438a      	bics	r2, r1
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f383 8810 	msr	PRIMASK, r3
}
 80071a8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	2210      	movs	r2, #16
 80071b2:	4013      	ands	r3, r2
 80071b4:	2b10      	cmp	r3, #16
 80071b6:	d103      	bne.n	80071c0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2210      	movs	r2, #16
 80071be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2258      	movs	r2, #88	; 0x58
 80071c4:	5a9a      	ldrh	r2, [r3, r2]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	0011      	movs	r1, r2
 80071ca:	0018      	movs	r0, r3
 80071cc:	f7ff f956 	bl	800647c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071d0:	e00c      	b.n	80071ec <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	0018      	movs	r0, r3
 80071d6:	f7fa f945 	bl	8001464 <HAL_UART_RxCpltCallback>
}
 80071da:	e007      	b.n	80071ec <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699a      	ldr	r2, [r3, #24]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2108      	movs	r1, #8
 80071e8:	430a      	orrs	r2, r1
 80071ea:	619a      	str	r2, [r3, #24]
}
 80071ec:	46c0      	nop			; (mov r8, r8)
 80071ee:	46bd      	mov	sp, r7
 80071f0:	b014      	add	sp, #80	; 0x50
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	fffffedf 	.word	0xfffffedf
 80071f8:	40004800 	.word	0x40004800
 80071fc:	fbffffff 	.word	0xfbffffff

08007200 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b094      	sub	sp, #80	; 0x50
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007208:	204e      	movs	r0, #78	; 0x4e
 800720a:	183b      	adds	r3, r7, r0
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	215c      	movs	r1, #92	; 0x5c
 8007210:	5a52      	ldrh	r2, [r2, r1]
 8007212:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2280      	movs	r2, #128	; 0x80
 8007218:	589b      	ldr	r3, [r3, r2]
 800721a:	2b22      	cmp	r3, #34	; 0x22
 800721c:	d000      	beq.n	8007220 <UART_RxISR_16BIT+0x20>
 800721e:	e0bf      	b.n	80073a0 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007226:	214c      	movs	r1, #76	; 0x4c
 8007228:	187b      	adds	r3, r7, r1
 800722a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007230:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8007232:	187b      	adds	r3, r7, r1
 8007234:	183a      	adds	r2, r7, r0
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	8812      	ldrh	r2, [r2, #0]
 800723a:	4013      	ands	r3, r2
 800723c:	b29a      	uxth	r2, r3
 800723e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007240:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007246:	1c9a      	adds	r2, r3, #2
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	225a      	movs	r2, #90	; 0x5a
 8007250:	5a9b      	ldrh	r3, [r3, r2]
 8007252:	b29b      	uxth	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	b299      	uxth	r1, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	225a      	movs	r2, #90	; 0x5a
 800725c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	225a      	movs	r2, #90	; 0x5a
 8007262:	5a9b      	ldrh	r3, [r3, r2]
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d000      	beq.n	800726c <UART_RxISR_16BIT+0x6c>
 800726a:	e0a1      	b.n	80073b0 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800726c:	f3ef 8310 	mrs	r3, PRIMASK
 8007270:	623b      	str	r3, [r7, #32]
  return(result);
 8007272:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007274:	647b      	str	r3, [r7, #68]	; 0x44
 8007276:	2301      	movs	r3, #1
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	f383 8810 	msr	PRIMASK, r3
}
 8007280:	46c0      	nop			; (mov r8, r8)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	494a      	ldr	r1, [pc, #296]	; (80073b8 <UART_RxISR_16BIT+0x1b8>)
 800728e:	400a      	ands	r2, r1
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007294:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	f383 8810 	msr	PRIMASK, r3
}
 800729c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800729e:	f3ef 8310 	mrs	r3, PRIMASK
 80072a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80072a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a6:	643b      	str	r3, [r7, #64]	; 0x40
 80072a8:	2301      	movs	r3, #1
 80072aa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	f383 8810 	msr	PRIMASK, r3
}
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2101      	movs	r1, #1
 80072c0:	438a      	bics	r2, r1
 80072c2:	609a      	str	r2, [r3, #8]
 80072c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ca:	f383 8810 	msr	PRIMASK, r3
}
 80072ce:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2280      	movs	r2, #128	; 0x80
 80072d4:	2120      	movs	r1, #32
 80072d6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a34      	ldr	r2, [pc, #208]	; (80073bc <UART_RxISR_16BIT+0x1bc>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d01f      	beq.n	800732e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	2380      	movs	r3, #128	; 0x80
 80072f6:	041b      	lsls	r3, r3, #16
 80072f8:	4013      	ands	r3, r2
 80072fa:	d018      	beq.n	800732e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007300:	617b      	str	r3, [r7, #20]
  return(result);
 8007302:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007306:	2301      	movs	r3, #1
 8007308:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	f383 8810 	msr	PRIMASK, r3
}
 8007310:	46c0      	nop			; (mov r8, r8)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4928      	ldr	r1, [pc, #160]	; (80073c0 <UART_RxISR_16BIT+0x1c0>)
 800731e:	400a      	ands	r2, r1
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007324:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	f383 8810 	msr	PRIMASK, r3
}
 800732c:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007332:	2b01      	cmp	r3, #1
 8007334:	d12f      	bne.n	8007396 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733c:	f3ef 8310 	mrs	r3, PRIMASK
 8007340:	60bb      	str	r3, [r7, #8]
  return(result);
 8007342:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007344:	63bb      	str	r3, [r7, #56]	; 0x38
 8007346:	2301      	movs	r3, #1
 8007348:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f383 8810 	msr	PRIMASK, r3
}
 8007350:	46c0      	nop			; (mov r8, r8)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2110      	movs	r1, #16
 800735e:	438a      	bics	r2, r1
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	f383 8810 	msr	PRIMASK, r3
}
 800736c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	2210      	movs	r2, #16
 8007376:	4013      	ands	r3, r2
 8007378:	2b10      	cmp	r3, #16
 800737a:	d103      	bne.n	8007384 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2210      	movs	r2, #16
 8007382:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2258      	movs	r2, #88	; 0x58
 8007388:	5a9a      	ldrh	r2, [r3, r2]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	0011      	movs	r1, r2
 800738e:	0018      	movs	r0, r3
 8007390:	f7ff f874 	bl	800647c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007394:	e00c      	b.n	80073b0 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	0018      	movs	r0, r3
 800739a:	f7fa f863 	bl	8001464 <HAL_UART_RxCpltCallback>
}
 800739e:	e007      	b.n	80073b0 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2108      	movs	r1, #8
 80073ac:	430a      	orrs	r2, r1
 80073ae:	619a      	str	r2, [r3, #24]
}
 80073b0:	46c0      	nop			; (mov r8, r8)
 80073b2:	46bd      	mov	sp, r7
 80073b4:	b014      	add	sp, #80	; 0x50
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	fffffedf 	.word	0xfffffedf
 80073bc:	40004800 	.word	0x40004800
 80073c0:	fbffffff 	.word	0xfbffffff

080073c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073cc:	46c0      	nop			; (mov r8, r8)
 80073ce:	46bd      	mov	sp, r7
 80073d0:	b002      	add	sp, #8
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <std>:
 80073d4:	2300      	movs	r3, #0
 80073d6:	b510      	push	{r4, lr}
 80073d8:	0004      	movs	r4, r0
 80073da:	6003      	str	r3, [r0, #0]
 80073dc:	6043      	str	r3, [r0, #4]
 80073de:	6083      	str	r3, [r0, #8]
 80073e0:	8181      	strh	r1, [r0, #12]
 80073e2:	6643      	str	r3, [r0, #100]	; 0x64
 80073e4:	81c2      	strh	r2, [r0, #14]
 80073e6:	6103      	str	r3, [r0, #16]
 80073e8:	6143      	str	r3, [r0, #20]
 80073ea:	6183      	str	r3, [r0, #24]
 80073ec:	0019      	movs	r1, r3
 80073ee:	2208      	movs	r2, #8
 80073f0:	305c      	adds	r0, #92	; 0x5c
 80073f2:	f000 fa25 	bl	8007840 <memset>
 80073f6:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <std+0x50>)
 80073f8:	6224      	str	r4, [r4, #32]
 80073fa:	6263      	str	r3, [r4, #36]	; 0x24
 80073fc:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <std+0x54>)
 80073fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007400:	4b0a      	ldr	r3, [pc, #40]	; (800742c <std+0x58>)
 8007402:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007404:	4b0a      	ldr	r3, [pc, #40]	; (8007430 <std+0x5c>)
 8007406:	6323      	str	r3, [r4, #48]	; 0x30
 8007408:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <std+0x60>)
 800740a:	429c      	cmp	r4, r3
 800740c:	d005      	beq.n	800741a <std+0x46>
 800740e:	4b0a      	ldr	r3, [pc, #40]	; (8007438 <std+0x64>)
 8007410:	429c      	cmp	r4, r3
 8007412:	d002      	beq.n	800741a <std+0x46>
 8007414:	4b09      	ldr	r3, [pc, #36]	; (800743c <std+0x68>)
 8007416:	429c      	cmp	r4, r3
 8007418:	d103      	bne.n	8007422 <std+0x4e>
 800741a:	0020      	movs	r0, r4
 800741c:	3058      	adds	r0, #88	; 0x58
 800741e:	f000 fa8f 	bl	8007940 <__retarget_lock_init_recursive>
 8007422:	bd10      	pop	{r4, pc}
 8007424:	0800765d 	.word	0x0800765d
 8007428:	08007685 	.word	0x08007685
 800742c:	080076bd 	.word	0x080076bd
 8007430:	080076e9 	.word	0x080076e9
 8007434:	200004c4 	.word	0x200004c4
 8007438:	2000052c 	.word	0x2000052c
 800743c:	20000594 	.word	0x20000594

08007440 <stdio_exit_handler>:
 8007440:	b510      	push	{r4, lr}
 8007442:	4a03      	ldr	r2, [pc, #12]	; (8007450 <stdio_exit_handler+0x10>)
 8007444:	4903      	ldr	r1, [pc, #12]	; (8007454 <stdio_exit_handler+0x14>)
 8007446:	4804      	ldr	r0, [pc, #16]	; (8007458 <stdio_exit_handler+0x18>)
 8007448:	f000 f86c 	bl	8007524 <_fwalk_sglue>
 800744c:	bd10      	pop	{r4, pc}
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	2000000c 	.word	0x2000000c
 8007454:	0800822d 	.word	0x0800822d
 8007458:	20000018 	.word	0x20000018

0800745c <cleanup_stdio>:
 800745c:	6841      	ldr	r1, [r0, #4]
 800745e:	4b0b      	ldr	r3, [pc, #44]	; (800748c <cleanup_stdio+0x30>)
 8007460:	b510      	push	{r4, lr}
 8007462:	0004      	movs	r4, r0
 8007464:	4299      	cmp	r1, r3
 8007466:	d001      	beq.n	800746c <cleanup_stdio+0x10>
 8007468:	f000 fee0 	bl	800822c <_fflush_r>
 800746c:	68a1      	ldr	r1, [r4, #8]
 800746e:	4b08      	ldr	r3, [pc, #32]	; (8007490 <cleanup_stdio+0x34>)
 8007470:	4299      	cmp	r1, r3
 8007472:	d002      	beq.n	800747a <cleanup_stdio+0x1e>
 8007474:	0020      	movs	r0, r4
 8007476:	f000 fed9 	bl	800822c <_fflush_r>
 800747a:	68e1      	ldr	r1, [r4, #12]
 800747c:	4b05      	ldr	r3, [pc, #20]	; (8007494 <cleanup_stdio+0x38>)
 800747e:	4299      	cmp	r1, r3
 8007480:	d002      	beq.n	8007488 <cleanup_stdio+0x2c>
 8007482:	0020      	movs	r0, r4
 8007484:	f000 fed2 	bl	800822c <_fflush_r>
 8007488:	bd10      	pop	{r4, pc}
 800748a:	46c0      	nop			; (mov r8, r8)
 800748c:	200004c4 	.word	0x200004c4
 8007490:	2000052c 	.word	0x2000052c
 8007494:	20000594 	.word	0x20000594

08007498 <global_stdio_init.part.0>:
 8007498:	b510      	push	{r4, lr}
 800749a:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <global_stdio_init.part.0+0x28>)
 800749c:	4a09      	ldr	r2, [pc, #36]	; (80074c4 <global_stdio_init.part.0+0x2c>)
 800749e:	2104      	movs	r1, #4
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	4809      	ldr	r0, [pc, #36]	; (80074c8 <global_stdio_init.part.0+0x30>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	f7ff ff95 	bl	80073d4 <std>
 80074aa:	2201      	movs	r2, #1
 80074ac:	2109      	movs	r1, #9
 80074ae:	4807      	ldr	r0, [pc, #28]	; (80074cc <global_stdio_init.part.0+0x34>)
 80074b0:	f7ff ff90 	bl	80073d4 <std>
 80074b4:	2202      	movs	r2, #2
 80074b6:	2112      	movs	r1, #18
 80074b8:	4805      	ldr	r0, [pc, #20]	; (80074d0 <global_stdio_init.part.0+0x38>)
 80074ba:	f7ff ff8b 	bl	80073d4 <std>
 80074be:	bd10      	pop	{r4, pc}
 80074c0:	200005fc 	.word	0x200005fc
 80074c4:	08007441 	.word	0x08007441
 80074c8:	200004c4 	.word	0x200004c4
 80074cc:	2000052c 	.word	0x2000052c
 80074d0:	20000594 	.word	0x20000594

080074d4 <__sfp_lock_acquire>:
 80074d4:	b510      	push	{r4, lr}
 80074d6:	4802      	ldr	r0, [pc, #8]	; (80074e0 <__sfp_lock_acquire+0xc>)
 80074d8:	f000 fa33 	bl	8007942 <__retarget_lock_acquire_recursive>
 80074dc:	bd10      	pop	{r4, pc}
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	20000605 	.word	0x20000605

080074e4 <__sfp_lock_release>:
 80074e4:	b510      	push	{r4, lr}
 80074e6:	4802      	ldr	r0, [pc, #8]	; (80074f0 <__sfp_lock_release+0xc>)
 80074e8:	f000 fa2c 	bl	8007944 <__retarget_lock_release_recursive>
 80074ec:	bd10      	pop	{r4, pc}
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	20000605 	.word	0x20000605

080074f4 <__sinit>:
 80074f4:	b510      	push	{r4, lr}
 80074f6:	0004      	movs	r4, r0
 80074f8:	f7ff ffec 	bl	80074d4 <__sfp_lock_acquire>
 80074fc:	6a23      	ldr	r3, [r4, #32]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <__sinit+0x14>
 8007502:	f7ff ffef 	bl	80074e4 <__sfp_lock_release>
 8007506:	bd10      	pop	{r4, pc}
 8007508:	4b04      	ldr	r3, [pc, #16]	; (800751c <__sinit+0x28>)
 800750a:	6223      	str	r3, [r4, #32]
 800750c:	4b04      	ldr	r3, [pc, #16]	; (8007520 <__sinit+0x2c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1f6      	bne.n	8007502 <__sinit+0xe>
 8007514:	f7ff ffc0 	bl	8007498 <global_stdio_init.part.0>
 8007518:	e7f3      	b.n	8007502 <__sinit+0xe>
 800751a:	46c0      	nop			; (mov r8, r8)
 800751c:	0800745d 	.word	0x0800745d
 8007520:	200005fc 	.word	0x200005fc

08007524 <_fwalk_sglue>:
 8007524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007526:	0014      	movs	r4, r2
 8007528:	2600      	movs	r6, #0
 800752a:	9000      	str	r0, [sp, #0]
 800752c:	9101      	str	r1, [sp, #4]
 800752e:	68a5      	ldr	r5, [r4, #8]
 8007530:	6867      	ldr	r7, [r4, #4]
 8007532:	3f01      	subs	r7, #1
 8007534:	d504      	bpl.n	8007540 <_fwalk_sglue+0x1c>
 8007536:	6824      	ldr	r4, [r4, #0]
 8007538:	2c00      	cmp	r4, #0
 800753a:	d1f8      	bne.n	800752e <_fwalk_sglue+0xa>
 800753c:	0030      	movs	r0, r6
 800753e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007540:	89ab      	ldrh	r3, [r5, #12]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d908      	bls.n	8007558 <_fwalk_sglue+0x34>
 8007546:	220e      	movs	r2, #14
 8007548:	5eab      	ldrsh	r3, [r5, r2]
 800754a:	3301      	adds	r3, #1
 800754c:	d004      	beq.n	8007558 <_fwalk_sglue+0x34>
 800754e:	0029      	movs	r1, r5
 8007550:	9800      	ldr	r0, [sp, #0]
 8007552:	9b01      	ldr	r3, [sp, #4]
 8007554:	4798      	blx	r3
 8007556:	4306      	orrs	r6, r0
 8007558:	3568      	adds	r5, #104	; 0x68
 800755a:	e7ea      	b.n	8007532 <_fwalk_sglue+0xe>

0800755c <_puts_r>:
 800755c:	6a03      	ldr	r3, [r0, #32]
 800755e:	b570      	push	{r4, r5, r6, lr}
 8007560:	0005      	movs	r5, r0
 8007562:	000e      	movs	r6, r1
 8007564:	6884      	ldr	r4, [r0, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <_puts_r+0x12>
 800756a:	f7ff ffc3 	bl	80074f4 <__sinit>
 800756e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007570:	07db      	lsls	r3, r3, #31
 8007572:	d405      	bmi.n	8007580 <_puts_r+0x24>
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	059b      	lsls	r3, r3, #22
 8007578:	d402      	bmi.n	8007580 <_puts_r+0x24>
 800757a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800757c:	f000 f9e1 	bl	8007942 <__retarget_lock_acquire_recursive>
 8007580:	89a3      	ldrh	r3, [r4, #12]
 8007582:	071b      	lsls	r3, r3, #28
 8007584:	d502      	bpl.n	800758c <_puts_r+0x30>
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d11f      	bne.n	80075cc <_puts_r+0x70>
 800758c:	0021      	movs	r1, r4
 800758e:	0028      	movs	r0, r5
 8007590:	f000 f8f2 	bl	8007778 <__swsetup_r>
 8007594:	2800      	cmp	r0, #0
 8007596:	d019      	beq.n	80075cc <_puts_r+0x70>
 8007598:	2501      	movs	r5, #1
 800759a:	426d      	negs	r5, r5
 800759c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800759e:	07db      	lsls	r3, r3, #31
 80075a0:	d405      	bmi.n	80075ae <_puts_r+0x52>
 80075a2:	89a3      	ldrh	r3, [r4, #12]
 80075a4:	059b      	lsls	r3, r3, #22
 80075a6:	d402      	bmi.n	80075ae <_puts_r+0x52>
 80075a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075aa:	f000 f9cb 	bl	8007944 <__retarget_lock_release_recursive>
 80075ae:	0028      	movs	r0, r5
 80075b0:	bd70      	pop	{r4, r5, r6, pc}
 80075b2:	3601      	adds	r6, #1
 80075b4:	60a3      	str	r3, [r4, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	da04      	bge.n	80075c4 <_puts_r+0x68>
 80075ba:	69a2      	ldr	r2, [r4, #24]
 80075bc:	429a      	cmp	r2, r3
 80075be:	dc16      	bgt.n	80075ee <_puts_r+0x92>
 80075c0:	290a      	cmp	r1, #10
 80075c2:	d014      	beq.n	80075ee <_puts_r+0x92>
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	6022      	str	r2, [r4, #0]
 80075ca:	7019      	strb	r1, [r3, #0]
 80075cc:	68a3      	ldr	r3, [r4, #8]
 80075ce:	7831      	ldrb	r1, [r6, #0]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	2900      	cmp	r1, #0
 80075d4:	d1ed      	bne.n	80075b2 <_puts_r+0x56>
 80075d6:	60a3      	str	r3, [r4, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	da0f      	bge.n	80075fc <_puts_r+0xa0>
 80075dc:	0028      	movs	r0, r5
 80075de:	0022      	movs	r2, r4
 80075e0:	310a      	adds	r1, #10
 80075e2:	f000 f887 	bl	80076f4 <__swbuf_r>
 80075e6:	250a      	movs	r5, #10
 80075e8:	3001      	adds	r0, #1
 80075ea:	d1d7      	bne.n	800759c <_puts_r+0x40>
 80075ec:	e7d4      	b.n	8007598 <_puts_r+0x3c>
 80075ee:	0022      	movs	r2, r4
 80075f0:	0028      	movs	r0, r5
 80075f2:	f000 f87f 	bl	80076f4 <__swbuf_r>
 80075f6:	3001      	adds	r0, #1
 80075f8:	d1e8      	bne.n	80075cc <_puts_r+0x70>
 80075fa:	e7cd      	b.n	8007598 <_puts_r+0x3c>
 80075fc:	250a      	movs	r5, #10
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	6022      	str	r2, [r4, #0]
 8007604:	701d      	strb	r5, [r3, #0]
 8007606:	e7c9      	b.n	800759c <_puts_r+0x40>

08007608 <puts>:
 8007608:	b510      	push	{r4, lr}
 800760a:	4b03      	ldr	r3, [pc, #12]	; (8007618 <puts+0x10>)
 800760c:	0001      	movs	r1, r0
 800760e:	6818      	ldr	r0, [r3, #0]
 8007610:	f7ff ffa4 	bl	800755c <_puts_r>
 8007614:	bd10      	pop	{r4, pc}
 8007616:	46c0      	nop			; (mov r8, r8)
 8007618:	20000064 	.word	0x20000064

0800761c <siprintf>:
 800761c:	b40e      	push	{r1, r2, r3}
 800761e:	b500      	push	{lr}
 8007620:	490b      	ldr	r1, [pc, #44]	; (8007650 <siprintf+0x34>)
 8007622:	b09c      	sub	sp, #112	; 0x70
 8007624:	ab1d      	add	r3, sp, #116	; 0x74
 8007626:	9002      	str	r0, [sp, #8]
 8007628:	9006      	str	r0, [sp, #24]
 800762a:	9107      	str	r1, [sp, #28]
 800762c:	9104      	str	r1, [sp, #16]
 800762e:	4809      	ldr	r0, [pc, #36]	; (8007654 <siprintf+0x38>)
 8007630:	4909      	ldr	r1, [pc, #36]	; (8007658 <siprintf+0x3c>)
 8007632:	cb04      	ldmia	r3!, {r2}
 8007634:	9105      	str	r1, [sp, #20]
 8007636:	6800      	ldr	r0, [r0, #0]
 8007638:	a902      	add	r1, sp, #8
 800763a:	9301      	str	r3, [sp, #4]
 800763c:	f000 faec 	bl	8007c18 <_svfiprintf_r>
 8007640:	2200      	movs	r2, #0
 8007642:	9b02      	ldr	r3, [sp, #8]
 8007644:	701a      	strb	r2, [r3, #0]
 8007646:	b01c      	add	sp, #112	; 0x70
 8007648:	bc08      	pop	{r3}
 800764a:	b003      	add	sp, #12
 800764c:	4718      	bx	r3
 800764e:	46c0      	nop			; (mov r8, r8)
 8007650:	7fffffff 	.word	0x7fffffff
 8007654:	20000064 	.word	0x20000064
 8007658:	ffff0208 	.word	0xffff0208

0800765c <__sread>:
 800765c:	b570      	push	{r4, r5, r6, lr}
 800765e:	000c      	movs	r4, r1
 8007660:	250e      	movs	r5, #14
 8007662:	5f49      	ldrsh	r1, [r1, r5]
 8007664:	f000 f91a 	bl	800789c <_read_r>
 8007668:	2800      	cmp	r0, #0
 800766a:	db03      	blt.n	8007674 <__sread+0x18>
 800766c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800766e:	181b      	adds	r3, r3, r0
 8007670:	6563      	str	r3, [r4, #84]	; 0x54
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	4a02      	ldr	r2, [pc, #8]	; (8007680 <__sread+0x24>)
 8007678:	4013      	ands	r3, r2
 800767a:	81a3      	strh	r3, [r4, #12]
 800767c:	e7f9      	b.n	8007672 <__sread+0x16>
 800767e:	46c0      	nop			; (mov r8, r8)
 8007680:	ffffefff 	.word	0xffffefff

08007684 <__swrite>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	001f      	movs	r7, r3
 8007688:	898b      	ldrh	r3, [r1, #12]
 800768a:	0005      	movs	r5, r0
 800768c:	000c      	movs	r4, r1
 800768e:	0016      	movs	r6, r2
 8007690:	05db      	lsls	r3, r3, #23
 8007692:	d505      	bpl.n	80076a0 <__swrite+0x1c>
 8007694:	230e      	movs	r3, #14
 8007696:	5ec9      	ldrsh	r1, [r1, r3]
 8007698:	2200      	movs	r2, #0
 800769a:	2302      	movs	r3, #2
 800769c:	f000 f8ea 	bl	8007874 <_lseek_r>
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	4a05      	ldr	r2, [pc, #20]	; (80076b8 <__swrite+0x34>)
 80076a4:	0028      	movs	r0, r5
 80076a6:	4013      	ands	r3, r2
 80076a8:	81a3      	strh	r3, [r4, #12]
 80076aa:	0032      	movs	r2, r6
 80076ac:	230e      	movs	r3, #14
 80076ae:	5ee1      	ldrsh	r1, [r4, r3]
 80076b0:	003b      	movs	r3, r7
 80076b2:	f000 f907 	bl	80078c4 <_write_r>
 80076b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076b8:	ffffefff 	.word	0xffffefff

080076bc <__sseek>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	000c      	movs	r4, r1
 80076c0:	250e      	movs	r5, #14
 80076c2:	5f49      	ldrsh	r1, [r1, r5]
 80076c4:	f000 f8d6 	bl	8007874 <_lseek_r>
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	1c42      	adds	r2, r0, #1
 80076cc:	d103      	bne.n	80076d6 <__sseek+0x1a>
 80076ce:	4a05      	ldr	r2, [pc, #20]	; (80076e4 <__sseek+0x28>)
 80076d0:	4013      	ands	r3, r2
 80076d2:	81a3      	strh	r3, [r4, #12]
 80076d4:	bd70      	pop	{r4, r5, r6, pc}
 80076d6:	2280      	movs	r2, #128	; 0x80
 80076d8:	0152      	lsls	r2, r2, #5
 80076da:	4313      	orrs	r3, r2
 80076dc:	81a3      	strh	r3, [r4, #12]
 80076de:	6560      	str	r0, [r4, #84]	; 0x54
 80076e0:	e7f8      	b.n	80076d4 <__sseek+0x18>
 80076e2:	46c0      	nop			; (mov r8, r8)
 80076e4:	ffffefff 	.word	0xffffefff

080076e8 <__sclose>:
 80076e8:	b510      	push	{r4, lr}
 80076ea:	230e      	movs	r3, #14
 80076ec:	5ec9      	ldrsh	r1, [r1, r3]
 80076ee:	f000 f8af 	bl	8007850 <_close_r>
 80076f2:	bd10      	pop	{r4, pc}

080076f4 <__swbuf_r>:
 80076f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f6:	0006      	movs	r6, r0
 80076f8:	000d      	movs	r5, r1
 80076fa:	0014      	movs	r4, r2
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d004      	beq.n	800770a <__swbuf_r+0x16>
 8007700:	6a03      	ldr	r3, [r0, #32]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <__swbuf_r+0x16>
 8007706:	f7ff fef5 	bl	80074f4 <__sinit>
 800770a:	69a3      	ldr	r3, [r4, #24]
 800770c:	60a3      	str	r3, [r4, #8]
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	071b      	lsls	r3, r3, #28
 8007712:	d528      	bpl.n	8007766 <__swbuf_r+0x72>
 8007714:	6923      	ldr	r3, [r4, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d025      	beq.n	8007766 <__swbuf_r+0x72>
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	6820      	ldr	r0, [r4, #0]
 800771e:	b2ef      	uxtb	r7, r5
 8007720:	1ac0      	subs	r0, r0, r3
 8007722:	6963      	ldr	r3, [r4, #20]
 8007724:	b2ed      	uxtb	r5, r5
 8007726:	4283      	cmp	r3, r0
 8007728:	dc05      	bgt.n	8007736 <__swbuf_r+0x42>
 800772a:	0021      	movs	r1, r4
 800772c:	0030      	movs	r0, r6
 800772e:	f000 fd7d 	bl	800822c <_fflush_r>
 8007732:	2800      	cmp	r0, #0
 8007734:	d11d      	bne.n	8007772 <__swbuf_r+0x7e>
 8007736:	68a3      	ldr	r3, [r4, #8]
 8007738:	3001      	adds	r0, #1
 800773a:	3b01      	subs	r3, #1
 800773c:	60a3      	str	r3, [r4, #8]
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	6022      	str	r2, [r4, #0]
 8007744:	701f      	strb	r7, [r3, #0]
 8007746:	6963      	ldr	r3, [r4, #20]
 8007748:	4283      	cmp	r3, r0
 800774a:	d004      	beq.n	8007756 <__swbuf_r+0x62>
 800774c:	89a3      	ldrh	r3, [r4, #12]
 800774e:	07db      	lsls	r3, r3, #31
 8007750:	d507      	bpl.n	8007762 <__swbuf_r+0x6e>
 8007752:	2d0a      	cmp	r5, #10
 8007754:	d105      	bne.n	8007762 <__swbuf_r+0x6e>
 8007756:	0021      	movs	r1, r4
 8007758:	0030      	movs	r0, r6
 800775a:	f000 fd67 	bl	800822c <_fflush_r>
 800775e:	2800      	cmp	r0, #0
 8007760:	d107      	bne.n	8007772 <__swbuf_r+0x7e>
 8007762:	0028      	movs	r0, r5
 8007764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007766:	0021      	movs	r1, r4
 8007768:	0030      	movs	r0, r6
 800776a:	f000 f805 	bl	8007778 <__swsetup_r>
 800776e:	2800      	cmp	r0, #0
 8007770:	d0d3      	beq.n	800771a <__swbuf_r+0x26>
 8007772:	2501      	movs	r5, #1
 8007774:	426d      	negs	r5, r5
 8007776:	e7f4      	b.n	8007762 <__swbuf_r+0x6e>

08007778 <__swsetup_r>:
 8007778:	4b30      	ldr	r3, [pc, #192]	; (800783c <__swsetup_r+0xc4>)
 800777a:	b570      	push	{r4, r5, r6, lr}
 800777c:	0005      	movs	r5, r0
 800777e:	6818      	ldr	r0, [r3, #0]
 8007780:	000c      	movs	r4, r1
 8007782:	2800      	cmp	r0, #0
 8007784:	d004      	beq.n	8007790 <__swsetup_r+0x18>
 8007786:	6a03      	ldr	r3, [r0, #32]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <__swsetup_r+0x18>
 800778c:	f7ff feb2 	bl	80074f4 <__sinit>
 8007790:	230c      	movs	r3, #12
 8007792:	5ee2      	ldrsh	r2, [r4, r3]
 8007794:	b293      	uxth	r3, r2
 8007796:	0711      	lsls	r1, r2, #28
 8007798:	d423      	bmi.n	80077e2 <__swsetup_r+0x6a>
 800779a:	06d9      	lsls	r1, r3, #27
 800779c:	d407      	bmi.n	80077ae <__swsetup_r+0x36>
 800779e:	2309      	movs	r3, #9
 80077a0:	2001      	movs	r0, #1
 80077a2:	602b      	str	r3, [r5, #0]
 80077a4:	3337      	adds	r3, #55	; 0x37
 80077a6:	4313      	orrs	r3, r2
 80077a8:	81a3      	strh	r3, [r4, #12]
 80077aa:	4240      	negs	r0, r0
 80077ac:	bd70      	pop	{r4, r5, r6, pc}
 80077ae:	075b      	lsls	r3, r3, #29
 80077b0:	d513      	bpl.n	80077da <__swsetup_r+0x62>
 80077b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077b4:	2900      	cmp	r1, #0
 80077b6:	d008      	beq.n	80077ca <__swsetup_r+0x52>
 80077b8:	0023      	movs	r3, r4
 80077ba:	3344      	adds	r3, #68	; 0x44
 80077bc:	4299      	cmp	r1, r3
 80077be:	d002      	beq.n	80077c6 <__swsetup_r+0x4e>
 80077c0:	0028      	movs	r0, r5
 80077c2:	f000 f8c9 	bl	8007958 <_free_r>
 80077c6:	2300      	movs	r3, #0
 80077c8:	6363      	str	r3, [r4, #52]	; 0x34
 80077ca:	2224      	movs	r2, #36	; 0x24
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	4393      	bics	r3, r2
 80077d0:	81a3      	strh	r3, [r4, #12]
 80077d2:	2300      	movs	r3, #0
 80077d4:	6063      	str	r3, [r4, #4]
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	2308      	movs	r3, #8
 80077dc:	89a2      	ldrh	r2, [r4, #12]
 80077de:	4313      	orrs	r3, r2
 80077e0:	81a3      	strh	r3, [r4, #12]
 80077e2:	6923      	ldr	r3, [r4, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10b      	bne.n	8007800 <__swsetup_r+0x88>
 80077e8:	21a0      	movs	r1, #160	; 0xa0
 80077ea:	2280      	movs	r2, #128	; 0x80
 80077ec:	89a3      	ldrh	r3, [r4, #12]
 80077ee:	0089      	lsls	r1, r1, #2
 80077f0:	0092      	lsls	r2, r2, #2
 80077f2:	400b      	ands	r3, r1
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d003      	beq.n	8007800 <__swsetup_r+0x88>
 80077f8:	0021      	movs	r1, r4
 80077fa:	0028      	movs	r0, r5
 80077fc:	f000 fd6a 	bl	80082d4 <__smakebuf_r>
 8007800:	220c      	movs	r2, #12
 8007802:	5ea3      	ldrsh	r3, [r4, r2]
 8007804:	2001      	movs	r0, #1
 8007806:	001a      	movs	r2, r3
 8007808:	b299      	uxth	r1, r3
 800780a:	4002      	ands	r2, r0
 800780c:	4203      	tst	r3, r0
 800780e:	d00f      	beq.n	8007830 <__swsetup_r+0xb8>
 8007810:	2200      	movs	r2, #0
 8007812:	60a2      	str	r2, [r4, #8]
 8007814:	6962      	ldr	r2, [r4, #20]
 8007816:	4252      	negs	r2, r2
 8007818:	61a2      	str	r2, [r4, #24]
 800781a:	2000      	movs	r0, #0
 800781c:	6922      	ldr	r2, [r4, #16]
 800781e:	4282      	cmp	r2, r0
 8007820:	d1c4      	bne.n	80077ac <__swsetup_r+0x34>
 8007822:	0609      	lsls	r1, r1, #24
 8007824:	d5c2      	bpl.n	80077ac <__swsetup_r+0x34>
 8007826:	2240      	movs	r2, #64	; 0x40
 8007828:	4313      	orrs	r3, r2
 800782a:	81a3      	strh	r3, [r4, #12]
 800782c:	3801      	subs	r0, #1
 800782e:	e7bd      	b.n	80077ac <__swsetup_r+0x34>
 8007830:	0788      	lsls	r0, r1, #30
 8007832:	d400      	bmi.n	8007836 <__swsetup_r+0xbe>
 8007834:	6962      	ldr	r2, [r4, #20]
 8007836:	60a2      	str	r2, [r4, #8]
 8007838:	e7ef      	b.n	800781a <__swsetup_r+0xa2>
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	20000064 	.word	0x20000064

08007840 <memset>:
 8007840:	0003      	movs	r3, r0
 8007842:	1882      	adds	r2, r0, r2
 8007844:	4293      	cmp	r3, r2
 8007846:	d100      	bne.n	800784a <memset+0xa>
 8007848:	4770      	bx	lr
 800784a:	7019      	strb	r1, [r3, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	e7f9      	b.n	8007844 <memset+0x4>

08007850 <_close_r>:
 8007850:	2300      	movs	r3, #0
 8007852:	b570      	push	{r4, r5, r6, lr}
 8007854:	4d06      	ldr	r5, [pc, #24]	; (8007870 <_close_r+0x20>)
 8007856:	0004      	movs	r4, r0
 8007858:	0008      	movs	r0, r1
 800785a:	602b      	str	r3, [r5, #0]
 800785c:	f7fa fcf3 	bl	8002246 <_close>
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	d103      	bne.n	800786c <_close_r+0x1c>
 8007864:	682b      	ldr	r3, [r5, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d000      	beq.n	800786c <_close_r+0x1c>
 800786a:	6023      	str	r3, [r4, #0]
 800786c:	bd70      	pop	{r4, r5, r6, pc}
 800786e:	46c0      	nop			; (mov r8, r8)
 8007870:	20000600 	.word	0x20000600

08007874 <_lseek_r>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	0004      	movs	r4, r0
 8007878:	0008      	movs	r0, r1
 800787a:	0011      	movs	r1, r2
 800787c:	001a      	movs	r2, r3
 800787e:	2300      	movs	r3, #0
 8007880:	4d05      	ldr	r5, [pc, #20]	; (8007898 <_lseek_r+0x24>)
 8007882:	602b      	str	r3, [r5, #0]
 8007884:	f7fa fd00 	bl	8002288 <_lseek>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d103      	bne.n	8007894 <_lseek_r+0x20>
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d000      	beq.n	8007894 <_lseek_r+0x20>
 8007892:	6023      	str	r3, [r4, #0]
 8007894:	bd70      	pop	{r4, r5, r6, pc}
 8007896:	46c0      	nop			; (mov r8, r8)
 8007898:	20000600 	.word	0x20000600

0800789c <_read_r>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	0004      	movs	r4, r0
 80078a0:	0008      	movs	r0, r1
 80078a2:	0011      	movs	r1, r2
 80078a4:	001a      	movs	r2, r3
 80078a6:	2300      	movs	r3, #0
 80078a8:	4d05      	ldr	r5, [pc, #20]	; (80078c0 <_read_r+0x24>)
 80078aa:	602b      	str	r3, [r5, #0]
 80078ac:	f7fa fc92 	bl	80021d4 <_read>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d103      	bne.n	80078bc <_read_r+0x20>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d000      	beq.n	80078bc <_read_r+0x20>
 80078ba:	6023      	str	r3, [r4, #0]
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
 80078be:	46c0      	nop			; (mov r8, r8)
 80078c0:	20000600 	.word	0x20000600

080078c4 <_write_r>:
 80078c4:	b570      	push	{r4, r5, r6, lr}
 80078c6:	0004      	movs	r4, r0
 80078c8:	0008      	movs	r0, r1
 80078ca:	0011      	movs	r1, r2
 80078cc:	001a      	movs	r2, r3
 80078ce:	2300      	movs	r3, #0
 80078d0:	4d05      	ldr	r5, [pc, #20]	; (80078e8 <_write_r+0x24>)
 80078d2:	602b      	str	r3, [r5, #0]
 80078d4:	f7fa fc9b 	bl	800220e <_write>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d103      	bne.n	80078e4 <_write_r+0x20>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d000      	beq.n	80078e4 <_write_r+0x20>
 80078e2:	6023      	str	r3, [r4, #0]
 80078e4:	bd70      	pop	{r4, r5, r6, pc}
 80078e6:	46c0      	nop			; (mov r8, r8)
 80078e8:	20000600 	.word	0x20000600

080078ec <__errno>:
 80078ec:	4b01      	ldr	r3, [pc, #4]	; (80078f4 <__errno+0x8>)
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	4770      	bx	lr
 80078f2:	46c0      	nop			; (mov r8, r8)
 80078f4:	20000064 	.word	0x20000064

080078f8 <__libc_init_array>:
 80078f8:	b570      	push	{r4, r5, r6, lr}
 80078fa:	2600      	movs	r6, #0
 80078fc:	4c0c      	ldr	r4, [pc, #48]	; (8007930 <__libc_init_array+0x38>)
 80078fe:	4d0d      	ldr	r5, [pc, #52]	; (8007934 <__libc_init_array+0x3c>)
 8007900:	1b64      	subs	r4, r4, r5
 8007902:	10a4      	asrs	r4, r4, #2
 8007904:	42a6      	cmp	r6, r4
 8007906:	d109      	bne.n	800791c <__libc_init_array+0x24>
 8007908:	2600      	movs	r6, #0
 800790a:	f000 fdad 	bl	8008468 <_init>
 800790e:	4c0a      	ldr	r4, [pc, #40]	; (8007938 <__libc_init_array+0x40>)
 8007910:	4d0a      	ldr	r5, [pc, #40]	; (800793c <__libc_init_array+0x44>)
 8007912:	1b64      	subs	r4, r4, r5
 8007914:	10a4      	asrs	r4, r4, #2
 8007916:	42a6      	cmp	r6, r4
 8007918:	d105      	bne.n	8007926 <__libc_init_array+0x2e>
 800791a:	bd70      	pop	{r4, r5, r6, pc}
 800791c:	00b3      	lsls	r3, r6, #2
 800791e:	58eb      	ldr	r3, [r5, r3]
 8007920:	4798      	blx	r3
 8007922:	3601      	adds	r6, #1
 8007924:	e7ee      	b.n	8007904 <__libc_init_array+0xc>
 8007926:	00b3      	lsls	r3, r6, #2
 8007928:	58eb      	ldr	r3, [r5, r3]
 800792a:	4798      	blx	r3
 800792c:	3601      	adds	r6, #1
 800792e:	e7f2      	b.n	8007916 <__libc_init_array+0x1e>
 8007930:	08008638 	.word	0x08008638
 8007934:	08008638 	.word	0x08008638
 8007938:	0800863c 	.word	0x0800863c
 800793c:	08008638 	.word	0x08008638

08007940 <__retarget_lock_init_recursive>:
 8007940:	4770      	bx	lr

08007942 <__retarget_lock_acquire_recursive>:
 8007942:	4770      	bx	lr

08007944 <__retarget_lock_release_recursive>:
 8007944:	4770      	bx	lr

08007946 <memcpy>:
 8007946:	2300      	movs	r3, #0
 8007948:	b510      	push	{r4, lr}
 800794a:	429a      	cmp	r2, r3
 800794c:	d100      	bne.n	8007950 <memcpy+0xa>
 800794e:	bd10      	pop	{r4, pc}
 8007950:	5ccc      	ldrb	r4, [r1, r3]
 8007952:	54c4      	strb	r4, [r0, r3]
 8007954:	3301      	adds	r3, #1
 8007956:	e7f8      	b.n	800794a <memcpy+0x4>

08007958 <_free_r>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	0005      	movs	r5, r0
 800795c:	2900      	cmp	r1, #0
 800795e:	d010      	beq.n	8007982 <_free_r+0x2a>
 8007960:	1f0c      	subs	r4, r1, #4
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	da00      	bge.n	800796a <_free_r+0x12>
 8007968:	18e4      	adds	r4, r4, r3
 800796a:	0028      	movs	r0, r5
 800796c:	f000 f8e2 	bl	8007b34 <__malloc_lock>
 8007970:	4a1d      	ldr	r2, [pc, #116]	; (80079e8 <_free_r+0x90>)
 8007972:	6813      	ldr	r3, [r2, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d105      	bne.n	8007984 <_free_r+0x2c>
 8007978:	6063      	str	r3, [r4, #4]
 800797a:	6014      	str	r4, [r2, #0]
 800797c:	0028      	movs	r0, r5
 800797e:	f000 f8e1 	bl	8007b44 <__malloc_unlock>
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	42a3      	cmp	r3, r4
 8007986:	d908      	bls.n	800799a <_free_r+0x42>
 8007988:	6820      	ldr	r0, [r4, #0]
 800798a:	1821      	adds	r1, r4, r0
 800798c:	428b      	cmp	r3, r1
 800798e:	d1f3      	bne.n	8007978 <_free_r+0x20>
 8007990:	6819      	ldr	r1, [r3, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	1809      	adds	r1, r1, r0
 8007996:	6021      	str	r1, [r4, #0]
 8007998:	e7ee      	b.n	8007978 <_free_r+0x20>
 800799a:	001a      	movs	r2, r3
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <_free_r+0x4e>
 80079a2:	42a3      	cmp	r3, r4
 80079a4:	d9f9      	bls.n	800799a <_free_r+0x42>
 80079a6:	6811      	ldr	r1, [r2, #0]
 80079a8:	1850      	adds	r0, r2, r1
 80079aa:	42a0      	cmp	r0, r4
 80079ac:	d10b      	bne.n	80079c6 <_free_r+0x6e>
 80079ae:	6820      	ldr	r0, [r4, #0]
 80079b0:	1809      	adds	r1, r1, r0
 80079b2:	1850      	adds	r0, r2, r1
 80079b4:	6011      	str	r1, [r2, #0]
 80079b6:	4283      	cmp	r3, r0
 80079b8:	d1e0      	bne.n	800797c <_free_r+0x24>
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	1841      	adds	r1, r0, r1
 80079c0:	6011      	str	r1, [r2, #0]
 80079c2:	6053      	str	r3, [r2, #4]
 80079c4:	e7da      	b.n	800797c <_free_r+0x24>
 80079c6:	42a0      	cmp	r0, r4
 80079c8:	d902      	bls.n	80079d0 <_free_r+0x78>
 80079ca:	230c      	movs	r3, #12
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	e7d5      	b.n	800797c <_free_r+0x24>
 80079d0:	6820      	ldr	r0, [r4, #0]
 80079d2:	1821      	adds	r1, r4, r0
 80079d4:	428b      	cmp	r3, r1
 80079d6:	d103      	bne.n	80079e0 <_free_r+0x88>
 80079d8:	6819      	ldr	r1, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	1809      	adds	r1, r1, r0
 80079de:	6021      	str	r1, [r4, #0]
 80079e0:	6063      	str	r3, [r4, #4]
 80079e2:	6054      	str	r4, [r2, #4]
 80079e4:	e7ca      	b.n	800797c <_free_r+0x24>
 80079e6:	46c0      	nop			; (mov r8, r8)
 80079e8:	20000608 	.word	0x20000608

080079ec <sbrk_aligned>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	4e0f      	ldr	r6, [pc, #60]	; (8007a2c <sbrk_aligned+0x40>)
 80079f0:	000d      	movs	r5, r1
 80079f2:	6831      	ldr	r1, [r6, #0]
 80079f4:	0004      	movs	r4, r0
 80079f6:	2900      	cmp	r1, #0
 80079f8:	d102      	bne.n	8007a00 <sbrk_aligned+0x14>
 80079fa:	f000 fce1 	bl	80083c0 <_sbrk_r>
 80079fe:	6030      	str	r0, [r6, #0]
 8007a00:	0029      	movs	r1, r5
 8007a02:	0020      	movs	r0, r4
 8007a04:	f000 fcdc 	bl	80083c0 <_sbrk_r>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d00a      	beq.n	8007a22 <sbrk_aligned+0x36>
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	1cc5      	adds	r5, r0, #3
 8007a10:	439d      	bics	r5, r3
 8007a12:	42a8      	cmp	r0, r5
 8007a14:	d007      	beq.n	8007a26 <sbrk_aligned+0x3a>
 8007a16:	1a29      	subs	r1, r5, r0
 8007a18:	0020      	movs	r0, r4
 8007a1a:	f000 fcd1 	bl	80083c0 <_sbrk_r>
 8007a1e:	3001      	adds	r0, #1
 8007a20:	d101      	bne.n	8007a26 <sbrk_aligned+0x3a>
 8007a22:	2501      	movs	r5, #1
 8007a24:	426d      	negs	r5, r5
 8007a26:	0028      	movs	r0, r5
 8007a28:	bd70      	pop	{r4, r5, r6, pc}
 8007a2a:	46c0      	nop			; (mov r8, r8)
 8007a2c:	2000060c 	.word	0x2000060c

08007a30 <_malloc_r>:
 8007a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a32:	2203      	movs	r2, #3
 8007a34:	1ccb      	adds	r3, r1, #3
 8007a36:	4393      	bics	r3, r2
 8007a38:	3308      	adds	r3, #8
 8007a3a:	0006      	movs	r6, r0
 8007a3c:	001f      	movs	r7, r3
 8007a3e:	2b0c      	cmp	r3, #12
 8007a40:	d238      	bcs.n	8007ab4 <_malloc_r+0x84>
 8007a42:	270c      	movs	r7, #12
 8007a44:	42b9      	cmp	r1, r7
 8007a46:	d837      	bhi.n	8007ab8 <_malloc_r+0x88>
 8007a48:	0030      	movs	r0, r6
 8007a4a:	f000 f873 	bl	8007b34 <__malloc_lock>
 8007a4e:	4b38      	ldr	r3, [pc, #224]	; (8007b30 <_malloc_r+0x100>)
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	001c      	movs	r4, r3
 8007a56:	2c00      	cmp	r4, #0
 8007a58:	d133      	bne.n	8007ac2 <_malloc_r+0x92>
 8007a5a:	0039      	movs	r1, r7
 8007a5c:	0030      	movs	r0, r6
 8007a5e:	f7ff ffc5 	bl	80079ec <sbrk_aligned>
 8007a62:	0004      	movs	r4, r0
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d15e      	bne.n	8007b26 <_malloc_r+0xf6>
 8007a68:	9b00      	ldr	r3, [sp, #0]
 8007a6a:	681c      	ldr	r4, [r3, #0]
 8007a6c:	0025      	movs	r5, r4
 8007a6e:	2d00      	cmp	r5, #0
 8007a70:	d14e      	bne.n	8007b10 <_malloc_r+0xe0>
 8007a72:	2c00      	cmp	r4, #0
 8007a74:	d051      	beq.n	8007b1a <_malloc_r+0xea>
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	0029      	movs	r1, r5
 8007a7a:	18e3      	adds	r3, r4, r3
 8007a7c:	0030      	movs	r0, r6
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	f000 fc9e 	bl	80083c0 <_sbrk_r>
 8007a84:	9b01      	ldr	r3, [sp, #4]
 8007a86:	4283      	cmp	r3, r0
 8007a88:	d147      	bne.n	8007b1a <_malloc_r+0xea>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	0030      	movs	r0, r6
 8007a8e:	1aff      	subs	r7, r7, r3
 8007a90:	0039      	movs	r1, r7
 8007a92:	f7ff ffab 	bl	80079ec <sbrk_aligned>
 8007a96:	3001      	adds	r0, #1
 8007a98:	d03f      	beq.n	8007b1a <_malloc_r+0xea>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	19db      	adds	r3, r3, r7
 8007a9e:	6023      	str	r3, [r4, #0]
 8007aa0:	9b00      	ldr	r3, [sp, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d040      	beq.n	8007b2a <_malloc_r+0xfa>
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	42a2      	cmp	r2, r4
 8007aac:	d133      	bne.n	8007b16 <_malloc_r+0xe6>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	605a      	str	r2, [r3, #4]
 8007ab2:	e014      	b.n	8007ade <_malloc_r+0xae>
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	dac5      	bge.n	8007a44 <_malloc_r+0x14>
 8007ab8:	230c      	movs	r3, #12
 8007aba:	2500      	movs	r5, #0
 8007abc:	6033      	str	r3, [r6, #0]
 8007abe:	0028      	movs	r0, r5
 8007ac0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ac2:	6821      	ldr	r1, [r4, #0]
 8007ac4:	1bc9      	subs	r1, r1, r7
 8007ac6:	d420      	bmi.n	8007b0a <_malloc_r+0xda>
 8007ac8:	290b      	cmp	r1, #11
 8007aca:	d918      	bls.n	8007afe <_malloc_r+0xce>
 8007acc:	19e2      	adds	r2, r4, r7
 8007ace:	6027      	str	r7, [r4, #0]
 8007ad0:	42a3      	cmp	r3, r4
 8007ad2:	d112      	bne.n	8007afa <_malloc_r+0xca>
 8007ad4:	9b00      	ldr	r3, [sp, #0]
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	6863      	ldr	r3, [r4, #4]
 8007ada:	6011      	str	r1, [r2, #0]
 8007adc:	6053      	str	r3, [r2, #4]
 8007ade:	0030      	movs	r0, r6
 8007ae0:	0025      	movs	r5, r4
 8007ae2:	f000 f82f 	bl	8007b44 <__malloc_unlock>
 8007ae6:	2207      	movs	r2, #7
 8007ae8:	350b      	adds	r5, #11
 8007aea:	1d23      	adds	r3, r4, #4
 8007aec:	4395      	bics	r5, r2
 8007aee:	1aea      	subs	r2, r5, r3
 8007af0:	429d      	cmp	r5, r3
 8007af2:	d0e4      	beq.n	8007abe <_malloc_r+0x8e>
 8007af4:	1b5b      	subs	r3, r3, r5
 8007af6:	50a3      	str	r3, [r4, r2]
 8007af8:	e7e1      	b.n	8007abe <_malloc_r+0x8e>
 8007afa:	605a      	str	r2, [r3, #4]
 8007afc:	e7ec      	b.n	8007ad8 <_malloc_r+0xa8>
 8007afe:	6862      	ldr	r2, [r4, #4]
 8007b00:	42a3      	cmp	r3, r4
 8007b02:	d1d5      	bne.n	8007ab0 <_malloc_r+0x80>
 8007b04:	9b00      	ldr	r3, [sp, #0]
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	e7e9      	b.n	8007ade <_malloc_r+0xae>
 8007b0a:	0023      	movs	r3, r4
 8007b0c:	6864      	ldr	r4, [r4, #4]
 8007b0e:	e7a2      	b.n	8007a56 <_malloc_r+0x26>
 8007b10:	002c      	movs	r4, r5
 8007b12:	686d      	ldr	r5, [r5, #4]
 8007b14:	e7ab      	b.n	8007a6e <_malloc_r+0x3e>
 8007b16:	0013      	movs	r3, r2
 8007b18:	e7c4      	b.n	8007aa4 <_malloc_r+0x74>
 8007b1a:	230c      	movs	r3, #12
 8007b1c:	0030      	movs	r0, r6
 8007b1e:	6033      	str	r3, [r6, #0]
 8007b20:	f000 f810 	bl	8007b44 <__malloc_unlock>
 8007b24:	e7cb      	b.n	8007abe <_malloc_r+0x8e>
 8007b26:	6027      	str	r7, [r4, #0]
 8007b28:	e7d9      	b.n	8007ade <_malloc_r+0xae>
 8007b2a:	605b      	str	r3, [r3, #4]
 8007b2c:	deff      	udf	#255	; 0xff
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	20000608 	.word	0x20000608

08007b34 <__malloc_lock>:
 8007b34:	b510      	push	{r4, lr}
 8007b36:	4802      	ldr	r0, [pc, #8]	; (8007b40 <__malloc_lock+0xc>)
 8007b38:	f7ff ff03 	bl	8007942 <__retarget_lock_acquire_recursive>
 8007b3c:	bd10      	pop	{r4, pc}
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	20000604 	.word	0x20000604

08007b44 <__malloc_unlock>:
 8007b44:	b510      	push	{r4, lr}
 8007b46:	4802      	ldr	r0, [pc, #8]	; (8007b50 <__malloc_unlock+0xc>)
 8007b48:	f7ff fefc 	bl	8007944 <__retarget_lock_release_recursive>
 8007b4c:	bd10      	pop	{r4, pc}
 8007b4e:	46c0      	nop			; (mov r8, r8)
 8007b50:	20000604 	.word	0x20000604

08007b54 <__ssputs_r>:
 8007b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b56:	b085      	sub	sp, #20
 8007b58:	9301      	str	r3, [sp, #4]
 8007b5a:	9203      	str	r2, [sp, #12]
 8007b5c:	688e      	ldr	r6, [r1, #8]
 8007b5e:	9a01      	ldr	r2, [sp, #4]
 8007b60:	0007      	movs	r7, r0
 8007b62:	000c      	movs	r4, r1
 8007b64:	680b      	ldr	r3, [r1, #0]
 8007b66:	4296      	cmp	r6, r2
 8007b68:	d831      	bhi.n	8007bce <__ssputs_r+0x7a>
 8007b6a:	898a      	ldrh	r2, [r1, #12]
 8007b6c:	2190      	movs	r1, #144	; 0x90
 8007b6e:	00c9      	lsls	r1, r1, #3
 8007b70:	420a      	tst	r2, r1
 8007b72:	d029      	beq.n	8007bc8 <__ssputs_r+0x74>
 8007b74:	2003      	movs	r0, #3
 8007b76:	6921      	ldr	r1, [r4, #16]
 8007b78:	1a5b      	subs	r3, r3, r1
 8007b7a:	9302      	str	r3, [sp, #8]
 8007b7c:	6963      	ldr	r3, [r4, #20]
 8007b7e:	4343      	muls	r3, r0
 8007b80:	0fdd      	lsrs	r5, r3, #31
 8007b82:	18ed      	adds	r5, r5, r3
 8007b84:	9b01      	ldr	r3, [sp, #4]
 8007b86:	9802      	ldr	r0, [sp, #8]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	181b      	adds	r3, r3, r0
 8007b8c:	106d      	asrs	r5, r5, #1
 8007b8e:	42ab      	cmp	r3, r5
 8007b90:	d900      	bls.n	8007b94 <__ssputs_r+0x40>
 8007b92:	001d      	movs	r5, r3
 8007b94:	0552      	lsls	r2, r2, #21
 8007b96:	d529      	bpl.n	8007bec <__ssputs_r+0x98>
 8007b98:	0029      	movs	r1, r5
 8007b9a:	0038      	movs	r0, r7
 8007b9c:	f7ff ff48 	bl	8007a30 <_malloc_r>
 8007ba0:	1e06      	subs	r6, r0, #0
 8007ba2:	d02d      	beq.n	8007c00 <__ssputs_r+0xac>
 8007ba4:	9a02      	ldr	r2, [sp, #8]
 8007ba6:	6921      	ldr	r1, [r4, #16]
 8007ba8:	f7ff fecd 	bl	8007946 <memcpy>
 8007bac:	89a2      	ldrh	r2, [r4, #12]
 8007bae:	4b19      	ldr	r3, [pc, #100]	; (8007c14 <__ssputs_r+0xc0>)
 8007bb0:	401a      	ands	r2, r3
 8007bb2:	2380      	movs	r3, #128	; 0x80
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	81a3      	strh	r3, [r4, #12]
 8007bb8:	9b02      	ldr	r3, [sp, #8]
 8007bba:	6126      	str	r6, [r4, #16]
 8007bbc:	18f6      	adds	r6, r6, r3
 8007bbe:	6026      	str	r6, [r4, #0]
 8007bc0:	6165      	str	r5, [r4, #20]
 8007bc2:	9e01      	ldr	r6, [sp, #4]
 8007bc4:	1aed      	subs	r5, r5, r3
 8007bc6:	60a5      	str	r5, [r4, #8]
 8007bc8:	9b01      	ldr	r3, [sp, #4]
 8007bca:	429e      	cmp	r6, r3
 8007bcc:	d900      	bls.n	8007bd0 <__ssputs_r+0x7c>
 8007bce:	9e01      	ldr	r6, [sp, #4]
 8007bd0:	0032      	movs	r2, r6
 8007bd2:	9903      	ldr	r1, [sp, #12]
 8007bd4:	6820      	ldr	r0, [r4, #0]
 8007bd6:	f000 fbbb 	bl	8008350 <memmove>
 8007bda:	2000      	movs	r0, #0
 8007bdc:	68a3      	ldr	r3, [r4, #8]
 8007bde:	1b9b      	subs	r3, r3, r6
 8007be0:	60a3      	str	r3, [r4, #8]
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	199b      	adds	r3, r3, r6
 8007be6:	6023      	str	r3, [r4, #0]
 8007be8:	b005      	add	sp, #20
 8007bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bec:	002a      	movs	r2, r5
 8007bee:	0038      	movs	r0, r7
 8007bf0:	f000 fc03 	bl	80083fa <_realloc_r>
 8007bf4:	1e06      	subs	r6, r0, #0
 8007bf6:	d1df      	bne.n	8007bb8 <__ssputs_r+0x64>
 8007bf8:	0038      	movs	r0, r7
 8007bfa:	6921      	ldr	r1, [r4, #16]
 8007bfc:	f7ff feac 	bl	8007958 <_free_r>
 8007c00:	230c      	movs	r3, #12
 8007c02:	2001      	movs	r0, #1
 8007c04:	603b      	str	r3, [r7, #0]
 8007c06:	89a2      	ldrh	r2, [r4, #12]
 8007c08:	3334      	adds	r3, #52	; 0x34
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	81a3      	strh	r3, [r4, #12]
 8007c0e:	4240      	negs	r0, r0
 8007c10:	e7ea      	b.n	8007be8 <__ssputs_r+0x94>
 8007c12:	46c0      	nop			; (mov r8, r8)
 8007c14:	fffffb7f 	.word	0xfffffb7f

08007c18 <_svfiprintf_r>:
 8007c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c1a:	b0a1      	sub	sp, #132	; 0x84
 8007c1c:	9003      	str	r0, [sp, #12]
 8007c1e:	001d      	movs	r5, r3
 8007c20:	898b      	ldrh	r3, [r1, #12]
 8007c22:	000f      	movs	r7, r1
 8007c24:	0016      	movs	r6, r2
 8007c26:	061b      	lsls	r3, r3, #24
 8007c28:	d511      	bpl.n	8007c4e <_svfiprintf_r+0x36>
 8007c2a:	690b      	ldr	r3, [r1, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10e      	bne.n	8007c4e <_svfiprintf_r+0x36>
 8007c30:	2140      	movs	r1, #64	; 0x40
 8007c32:	f7ff fefd 	bl	8007a30 <_malloc_r>
 8007c36:	6038      	str	r0, [r7, #0]
 8007c38:	6138      	str	r0, [r7, #16]
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d105      	bne.n	8007c4a <_svfiprintf_r+0x32>
 8007c3e:	230c      	movs	r3, #12
 8007c40:	9a03      	ldr	r2, [sp, #12]
 8007c42:	3801      	subs	r0, #1
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	b021      	add	sp, #132	; 0x84
 8007c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c4a:	2340      	movs	r3, #64	; 0x40
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	ac08      	add	r4, sp, #32
 8007c52:	6163      	str	r3, [r4, #20]
 8007c54:	3320      	adds	r3, #32
 8007c56:	7663      	strb	r3, [r4, #25]
 8007c58:	3310      	adds	r3, #16
 8007c5a:	76a3      	strb	r3, [r4, #26]
 8007c5c:	9507      	str	r5, [sp, #28]
 8007c5e:	0035      	movs	r5, r6
 8007c60:	782b      	ldrb	r3, [r5, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <_svfiprintf_r+0x52>
 8007c66:	2b25      	cmp	r3, #37	; 0x25
 8007c68:	d148      	bne.n	8007cfc <_svfiprintf_r+0xe4>
 8007c6a:	1bab      	subs	r3, r5, r6
 8007c6c:	9305      	str	r3, [sp, #20]
 8007c6e:	42b5      	cmp	r5, r6
 8007c70:	d00b      	beq.n	8007c8a <_svfiprintf_r+0x72>
 8007c72:	0032      	movs	r2, r6
 8007c74:	0039      	movs	r1, r7
 8007c76:	9803      	ldr	r0, [sp, #12]
 8007c78:	f7ff ff6c 	bl	8007b54 <__ssputs_r>
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d100      	bne.n	8007c82 <_svfiprintf_r+0x6a>
 8007c80:	e0af      	b.n	8007de2 <_svfiprintf_r+0x1ca>
 8007c82:	6963      	ldr	r3, [r4, #20]
 8007c84:	9a05      	ldr	r2, [sp, #20]
 8007c86:	189b      	adds	r3, r3, r2
 8007c88:	6163      	str	r3, [r4, #20]
 8007c8a:	782b      	ldrb	r3, [r5, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d100      	bne.n	8007c92 <_svfiprintf_r+0x7a>
 8007c90:	e0a7      	b.n	8007de2 <_svfiprintf_r+0x1ca>
 8007c92:	2201      	movs	r2, #1
 8007c94:	2300      	movs	r3, #0
 8007c96:	4252      	negs	r2, r2
 8007c98:	6062      	str	r2, [r4, #4]
 8007c9a:	a904      	add	r1, sp, #16
 8007c9c:	3254      	adds	r2, #84	; 0x54
 8007c9e:	1852      	adds	r2, r2, r1
 8007ca0:	1c6e      	adds	r6, r5, #1
 8007ca2:	6023      	str	r3, [r4, #0]
 8007ca4:	60e3      	str	r3, [r4, #12]
 8007ca6:	60a3      	str	r3, [r4, #8]
 8007ca8:	7013      	strb	r3, [r2, #0]
 8007caa:	65a3      	str	r3, [r4, #88]	; 0x58
 8007cac:	4b55      	ldr	r3, [pc, #340]	; (8007e04 <_svfiprintf_r+0x1ec>)
 8007cae:	2205      	movs	r2, #5
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	7831      	ldrb	r1, [r6, #0]
 8007cb4:	9305      	str	r3, [sp, #20]
 8007cb6:	f000 fb95 	bl	80083e4 <memchr>
 8007cba:	1c75      	adds	r5, r6, #1
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d11f      	bne.n	8007d00 <_svfiprintf_r+0xe8>
 8007cc0:	6822      	ldr	r2, [r4, #0]
 8007cc2:	06d3      	lsls	r3, r2, #27
 8007cc4:	d504      	bpl.n	8007cd0 <_svfiprintf_r+0xb8>
 8007cc6:	2353      	movs	r3, #83	; 0x53
 8007cc8:	a904      	add	r1, sp, #16
 8007cca:	185b      	adds	r3, r3, r1
 8007ccc:	2120      	movs	r1, #32
 8007cce:	7019      	strb	r1, [r3, #0]
 8007cd0:	0713      	lsls	r3, r2, #28
 8007cd2:	d504      	bpl.n	8007cde <_svfiprintf_r+0xc6>
 8007cd4:	2353      	movs	r3, #83	; 0x53
 8007cd6:	a904      	add	r1, sp, #16
 8007cd8:	185b      	adds	r3, r3, r1
 8007cda:	212b      	movs	r1, #43	; 0x2b
 8007cdc:	7019      	strb	r1, [r3, #0]
 8007cde:	7833      	ldrb	r3, [r6, #0]
 8007ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ce2:	d016      	beq.n	8007d12 <_svfiprintf_r+0xfa>
 8007ce4:	0035      	movs	r5, r6
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	200a      	movs	r0, #10
 8007cea:	68e3      	ldr	r3, [r4, #12]
 8007cec:	782a      	ldrb	r2, [r5, #0]
 8007cee:	1c6e      	adds	r6, r5, #1
 8007cf0:	3a30      	subs	r2, #48	; 0x30
 8007cf2:	2a09      	cmp	r2, #9
 8007cf4:	d94e      	bls.n	8007d94 <_svfiprintf_r+0x17c>
 8007cf6:	2900      	cmp	r1, #0
 8007cf8:	d111      	bne.n	8007d1e <_svfiprintf_r+0x106>
 8007cfa:	e017      	b.n	8007d2c <_svfiprintf_r+0x114>
 8007cfc:	3501      	adds	r5, #1
 8007cfe:	e7af      	b.n	8007c60 <_svfiprintf_r+0x48>
 8007d00:	9b05      	ldr	r3, [sp, #20]
 8007d02:	6822      	ldr	r2, [r4, #0]
 8007d04:	1ac0      	subs	r0, r0, r3
 8007d06:	2301      	movs	r3, #1
 8007d08:	4083      	lsls	r3, r0
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	002e      	movs	r6, r5
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	e7cc      	b.n	8007cac <_svfiprintf_r+0x94>
 8007d12:	9b07      	ldr	r3, [sp, #28]
 8007d14:	1d19      	adds	r1, r3, #4
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	9107      	str	r1, [sp, #28]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	db01      	blt.n	8007d22 <_svfiprintf_r+0x10a>
 8007d1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d20:	e004      	b.n	8007d2c <_svfiprintf_r+0x114>
 8007d22:	425b      	negs	r3, r3
 8007d24:	60e3      	str	r3, [r4, #12]
 8007d26:	2302      	movs	r3, #2
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	6023      	str	r3, [r4, #0]
 8007d2c:	782b      	ldrb	r3, [r5, #0]
 8007d2e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d30:	d10a      	bne.n	8007d48 <_svfiprintf_r+0x130>
 8007d32:	786b      	ldrb	r3, [r5, #1]
 8007d34:	2b2a      	cmp	r3, #42	; 0x2a
 8007d36:	d135      	bne.n	8007da4 <_svfiprintf_r+0x18c>
 8007d38:	9b07      	ldr	r3, [sp, #28]
 8007d3a:	3502      	adds	r5, #2
 8007d3c:	1d1a      	adds	r2, r3, #4
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	9207      	str	r2, [sp, #28]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	db2b      	blt.n	8007d9e <_svfiprintf_r+0x186>
 8007d46:	9309      	str	r3, [sp, #36]	; 0x24
 8007d48:	4e2f      	ldr	r6, [pc, #188]	; (8007e08 <_svfiprintf_r+0x1f0>)
 8007d4a:	2203      	movs	r2, #3
 8007d4c:	0030      	movs	r0, r6
 8007d4e:	7829      	ldrb	r1, [r5, #0]
 8007d50:	f000 fb48 	bl	80083e4 <memchr>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d006      	beq.n	8007d66 <_svfiprintf_r+0x14e>
 8007d58:	2340      	movs	r3, #64	; 0x40
 8007d5a:	1b80      	subs	r0, r0, r6
 8007d5c:	4083      	lsls	r3, r0
 8007d5e:	6822      	ldr	r2, [r4, #0]
 8007d60:	3501      	adds	r5, #1
 8007d62:	4313      	orrs	r3, r2
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	7829      	ldrb	r1, [r5, #0]
 8007d68:	2206      	movs	r2, #6
 8007d6a:	4828      	ldr	r0, [pc, #160]	; (8007e0c <_svfiprintf_r+0x1f4>)
 8007d6c:	1c6e      	adds	r6, r5, #1
 8007d6e:	7621      	strb	r1, [r4, #24]
 8007d70:	f000 fb38 	bl	80083e4 <memchr>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d03c      	beq.n	8007df2 <_svfiprintf_r+0x1da>
 8007d78:	4b25      	ldr	r3, [pc, #148]	; (8007e10 <_svfiprintf_r+0x1f8>)
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d125      	bne.n	8007dca <_svfiprintf_r+0x1b2>
 8007d7e:	2207      	movs	r2, #7
 8007d80:	9b07      	ldr	r3, [sp, #28]
 8007d82:	3307      	adds	r3, #7
 8007d84:	4393      	bics	r3, r2
 8007d86:	3308      	adds	r3, #8
 8007d88:	9307      	str	r3, [sp, #28]
 8007d8a:	6963      	ldr	r3, [r4, #20]
 8007d8c:	9a04      	ldr	r2, [sp, #16]
 8007d8e:	189b      	adds	r3, r3, r2
 8007d90:	6163      	str	r3, [r4, #20]
 8007d92:	e764      	b.n	8007c5e <_svfiprintf_r+0x46>
 8007d94:	4343      	muls	r3, r0
 8007d96:	0035      	movs	r5, r6
 8007d98:	2101      	movs	r1, #1
 8007d9a:	189b      	adds	r3, r3, r2
 8007d9c:	e7a6      	b.n	8007cec <_svfiprintf_r+0xd4>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	425b      	negs	r3, r3
 8007da2:	e7d0      	b.n	8007d46 <_svfiprintf_r+0x12e>
 8007da4:	2300      	movs	r3, #0
 8007da6:	200a      	movs	r0, #10
 8007da8:	001a      	movs	r2, r3
 8007daa:	3501      	adds	r5, #1
 8007dac:	6063      	str	r3, [r4, #4]
 8007dae:	7829      	ldrb	r1, [r5, #0]
 8007db0:	1c6e      	adds	r6, r5, #1
 8007db2:	3930      	subs	r1, #48	; 0x30
 8007db4:	2909      	cmp	r1, #9
 8007db6:	d903      	bls.n	8007dc0 <_svfiprintf_r+0x1a8>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d0c5      	beq.n	8007d48 <_svfiprintf_r+0x130>
 8007dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8007dbe:	e7c3      	b.n	8007d48 <_svfiprintf_r+0x130>
 8007dc0:	4342      	muls	r2, r0
 8007dc2:	0035      	movs	r5, r6
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	1852      	adds	r2, r2, r1
 8007dc8:	e7f1      	b.n	8007dae <_svfiprintf_r+0x196>
 8007dca:	aa07      	add	r2, sp, #28
 8007dcc:	9200      	str	r2, [sp, #0]
 8007dce:	0021      	movs	r1, r4
 8007dd0:	003a      	movs	r2, r7
 8007dd2:	4b10      	ldr	r3, [pc, #64]	; (8007e14 <_svfiprintf_r+0x1fc>)
 8007dd4:	9803      	ldr	r0, [sp, #12]
 8007dd6:	e000      	b.n	8007dda <_svfiprintf_r+0x1c2>
 8007dd8:	bf00      	nop
 8007dda:	9004      	str	r0, [sp, #16]
 8007ddc:	9b04      	ldr	r3, [sp, #16]
 8007dde:	3301      	adds	r3, #1
 8007de0:	d1d3      	bne.n	8007d8a <_svfiprintf_r+0x172>
 8007de2:	89bb      	ldrh	r3, [r7, #12]
 8007de4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007de6:	065b      	lsls	r3, r3, #25
 8007de8:	d400      	bmi.n	8007dec <_svfiprintf_r+0x1d4>
 8007dea:	e72c      	b.n	8007c46 <_svfiprintf_r+0x2e>
 8007dec:	2001      	movs	r0, #1
 8007dee:	4240      	negs	r0, r0
 8007df0:	e729      	b.n	8007c46 <_svfiprintf_r+0x2e>
 8007df2:	aa07      	add	r2, sp, #28
 8007df4:	9200      	str	r2, [sp, #0]
 8007df6:	0021      	movs	r1, r4
 8007df8:	003a      	movs	r2, r7
 8007dfa:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <_svfiprintf_r+0x1fc>)
 8007dfc:	9803      	ldr	r0, [sp, #12]
 8007dfe:	f000 f87b 	bl	8007ef8 <_printf_i>
 8007e02:	e7ea      	b.n	8007dda <_svfiprintf_r+0x1c2>
 8007e04:	080085fc 	.word	0x080085fc
 8007e08:	08008602 	.word	0x08008602
 8007e0c:	08008606 	.word	0x08008606
 8007e10:	00000000 	.word	0x00000000
 8007e14:	08007b55 	.word	0x08007b55

08007e18 <_printf_common>:
 8007e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e1a:	0016      	movs	r6, r2
 8007e1c:	9301      	str	r3, [sp, #4]
 8007e1e:	688a      	ldr	r2, [r1, #8]
 8007e20:	690b      	ldr	r3, [r1, #16]
 8007e22:	000c      	movs	r4, r1
 8007e24:	9000      	str	r0, [sp, #0]
 8007e26:	4293      	cmp	r3, r2
 8007e28:	da00      	bge.n	8007e2c <_printf_common+0x14>
 8007e2a:	0013      	movs	r3, r2
 8007e2c:	0022      	movs	r2, r4
 8007e2e:	6033      	str	r3, [r6, #0]
 8007e30:	3243      	adds	r2, #67	; 0x43
 8007e32:	7812      	ldrb	r2, [r2, #0]
 8007e34:	2a00      	cmp	r2, #0
 8007e36:	d001      	beq.n	8007e3c <_printf_common+0x24>
 8007e38:	3301      	adds	r3, #1
 8007e3a:	6033      	str	r3, [r6, #0]
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	069b      	lsls	r3, r3, #26
 8007e40:	d502      	bpl.n	8007e48 <_printf_common+0x30>
 8007e42:	6833      	ldr	r3, [r6, #0]
 8007e44:	3302      	adds	r3, #2
 8007e46:	6033      	str	r3, [r6, #0]
 8007e48:	6822      	ldr	r2, [r4, #0]
 8007e4a:	2306      	movs	r3, #6
 8007e4c:	0015      	movs	r5, r2
 8007e4e:	401d      	ands	r5, r3
 8007e50:	421a      	tst	r2, r3
 8007e52:	d027      	beq.n	8007ea4 <_printf_common+0x8c>
 8007e54:	0023      	movs	r3, r4
 8007e56:	3343      	adds	r3, #67	; 0x43
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	1e5a      	subs	r2, r3, #1
 8007e5c:	4193      	sbcs	r3, r2
 8007e5e:	6822      	ldr	r2, [r4, #0]
 8007e60:	0692      	lsls	r2, r2, #26
 8007e62:	d430      	bmi.n	8007ec6 <_printf_common+0xae>
 8007e64:	0022      	movs	r2, r4
 8007e66:	9901      	ldr	r1, [sp, #4]
 8007e68:	9800      	ldr	r0, [sp, #0]
 8007e6a:	9d08      	ldr	r5, [sp, #32]
 8007e6c:	3243      	adds	r2, #67	; 0x43
 8007e6e:	47a8      	blx	r5
 8007e70:	3001      	adds	r0, #1
 8007e72:	d025      	beq.n	8007ec0 <_printf_common+0xa8>
 8007e74:	2206      	movs	r2, #6
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	2500      	movs	r5, #0
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	2b04      	cmp	r3, #4
 8007e7e:	d105      	bne.n	8007e8c <_printf_common+0x74>
 8007e80:	6833      	ldr	r3, [r6, #0]
 8007e82:	68e5      	ldr	r5, [r4, #12]
 8007e84:	1aed      	subs	r5, r5, r3
 8007e86:	43eb      	mvns	r3, r5
 8007e88:	17db      	asrs	r3, r3, #31
 8007e8a:	401d      	ands	r5, r3
 8007e8c:	68a3      	ldr	r3, [r4, #8]
 8007e8e:	6922      	ldr	r2, [r4, #16]
 8007e90:	4293      	cmp	r3, r2
 8007e92:	dd01      	ble.n	8007e98 <_printf_common+0x80>
 8007e94:	1a9b      	subs	r3, r3, r2
 8007e96:	18ed      	adds	r5, r5, r3
 8007e98:	2600      	movs	r6, #0
 8007e9a:	42b5      	cmp	r5, r6
 8007e9c:	d120      	bne.n	8007ee0 <_printf_common+0xc8>
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	e010      	b.n	8007ec4 <_printf_common+0xac>
 8007ea2:	3501      	adds	r5, #1
 8007ea4:	68e3      	ldr	r3, [r4, #12]
 8007ea6:	6832      	ldr	r2, [r6, #0]
 8007ea8:	1a9b      	subs	r3, r3, r2
 8007eaa:	42ab      	cmp	r3, r5
 8007eac:	ddd2      	ble.n	8007e54 <_printf_common+0x3c>
 8007eae:	0022      	movs	r2, r4
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	9901      	ldr	r1, [sp, #4]
 8007eb4:	9800      	ldr	r0, [sp, #0]
 8007eb6:	9f08      	ldr	r7, [sp, #32]
 8007eb8:	3219      	adds	r2, #25
 8007eba:	47b8      	blx	r7
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d1f0      	bne.n	8007ea2 <_printf_common+0x8a>
 8007ec0:	2001      	movs	r0, #1
 8007ec2:	4240      	negs	r0, r0
 8007ec4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ec6:	2030      	movs	r0, #48	; 0x30
 8007ec8:	18e1      	adds	r1, r4, r3
 8007eca:	3143      	adds	r1, #67	; 0x43
 8007ecc:	7008      	strb	r0, [r1, #0]
 8007ece:	0021      	movs	r1, r4
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	3145      	adds	r1, #69	; 0x45
 8007ed4:	7809      	ldrb	r1, [r1, #0]
 8007ed6:	18a2      	adds	r2, r4, r2
 8007ed8:	3243      	adds	r2, #67	; 0x43
 8007eda:	3302      	adds	r3, #2
 8007edc:	7011      	strb	r1, [r2, #0]
 8007ede:	e7c1      	b.n	8007e64 <_printf_common+0x4c>
 8007ee0:	0022      	movs	r2, r4
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	9901      	ldr	r1, [sp, #4]
 8007ee6:	9800      	ldr	r0, [sp, #0]
 8007ee8:	9f08      	ldr	r7, [sp, #32]
 8007eea:	321a      	adds	r2, #26
 8007eec:	47b8      	blx	r7
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d0e6      	beq.n	8007ec0 <_printf_common+0xa8>
 8007ef2:	3601      	adds	r6, #1
 8007ef4:	e7d1      	b.n	8007e9a <_printf_common+0x82>
	...

08007ef8 <_printf_i>:
 8007ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007efa:	b08b      	sub	sp, #44	; 0x2c
 8007efc:	9206      	str	r2, [sp, #24]
 8007efe:	000a      	movs	r2, r1
 8007f00:	3243      	adds	r2, #67	; 0x43
 8007f02:	9307      	str	r3, [sp, #28]
 8007f04:	9005      	str	r0, [sp, #20]
 8007f06:	9204      	str	r2, [sp, #16]
 8007f08:	7e0a      	ldrb	r2, [r1, #24]
 8007f0a:	000c      	movs	r4, r1
 8007f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f0e:	2a78      	cmp	r2, #120	; 0x78
 8007f10:	d809      	bhi.n	8007f26 <_printf_i+0x2e>
 8007f12:	2a62      	cmp	r2, #98	; 0x62
 8007f14:	d80b      	bhi.n	8007f2e <_printf_i+0x36>
 8007f16:	2a00      	cmp	r2, #0
 8007f18:	d100      	bne.n	8007f1c <_printf_i+0x24>
 8007f1a:	e0be      	b.n	800809a <_printf_i+0x1a2>
 8007f1c:	497c      	ldr	r1, [pc, #496]	; (8008110 <_printf_i+0x218>)
 8007f1e:	9103      	str	r1, [sp, #12]
 8007f20:	2a58      	cmp	r2, #88	; 0x58
 8007f22:	d100      	bne.n	8007f26 <_printf_i+0x2e>
 8007f24:	e093      	b.n	800804e <_printf_i+0x156>
 8007f26:	0026      	movs	r6, r4
 8007f28:	3642      	adds	r6, #66	; 0x42
 8007f2a:	7032      	strb	r2, [r6, #0]
 8007f2c:	e022      	b.n	8007f74 <_printf_i+0x7c>
 8007f2e:	0010      	movs	r0, r2
 8007f30:	3863      	subs	r0, #99	; 0x63
 8007f32:	2815      	cmp	r0, #21
 8007f34:	d8f7      	bhi.n	8007f26 <_printf_i+0x2e>
 8007f36:	f7f8 f8e7 	bl	8000108 <__gnu_thumb1_case_shi>
 8007f3a:	0016      	.short	0x0016
 8007f3c:	fff6001f 	.word	0xfff6001f
 8007f40:	fff6fff6 	.word	0xfff6fff6
 8007f44:	001ffff6 	.word	0x001ffff6
 8007f48:	fff6fff6 	.word	0xfff6fff6
 8007f4c:	fff6fff6 	.word	0xfff6fff6
 8007f50:	003600a3 	.word	0x003600a3
 8007f54:	fff60083 	.word	0xfff60083
 8007f58:	00b4fff6 	.word	0x00b4fff6
 8007f5c:	0036fff6 	.word	0x0036fff6
 8007f60:	fff6fff6 	.word	0xfff6fff6
 8007f64:	0087      	.short	0x0087
 8007f66:	0026      	movs	r6, r4
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	3642      	adds	r6, #66	; 0x42
 8007f6c:	1d11      	adds	r1, r2, #4
 8007f6e:	6019      	str	r1, [r3, #0]
 8007f70:	6813      	ldr	r3, [r2, #0]
 8007f72:	7033      	strb	r3, [r6, #0]
 8007f74:	2301      	movs	r3, #1
 8007f76:	e0a2      	b.n	80080be <_printf_i+0x1c6>
 8007f78:	6818      	ldr	r0, [r3, #0]
 8007f7a:	6809      	ldr	r1, [r1, #0]
 8007f7c:	1d02      	adds	r2, r0, #4
 8007f7e:	060d      	lsls	r5, r1, #24
 8007f80:	d50b      	bpl.n	8007f9a <_printf_i+0xa2>
 8007f82:	6805      	ldr	r5, [r0, #0]
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	2d00      	cmp	r5, #0
 8007f88:	da03      	bge.n	8007f92 <_printf_i+0x9a>
 8007f8a:	232d      	movs	r3, #45	; 0x2d
 8007f8c:	9a04      	ldr	r2, [sp, #16]
 8007f8e:	426d      	negs	r5, r5
 8007f90:	7013      	strb	r3, [r2, #0]
 8007f92:	4b5f      	ldr	r3, [pc, #380]	; (8008110 <_printf_i+0x218>)
 8007f94:	270a      	movs	r7, #10
 8007f96:	9303      	str	r3, [sp, #12]
 8007f98:	e01b      	b.n	8007fd2 <_printf_i+0xda>
 8007f9a:	6805      	ldr	r5, [r0, #0]
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	0649      	lsls	r1, r1, #25
 8007fa0:	d5f1      	bpl.n	8007f86 <_printf_i+0x8e>
 8007fa2:	b22d      	sxth	r5, r5
 8007fa4:	e7ef      	b.n	8007f86 <_printf_i+0x8e>
 8007fa6:	680d      	ldr	r5, [r1, #0]
 8007fa8:	6819      	ldr	r1, [r3, #0]
 8007faa:	1d08      	adds	r0, r1, #4
 8007fac:	6018      	str	r0, [r3, #0]
 8007fae:	062e      	lsls	r6, r5, #24
 8007fb0:	d501      	bpl.n	8007fb6 <_printf_i+0xbe>
 8007fb2:	680d      	ldr	r5, [r1, #0]
 8007fb4:	e003      	b.n	8007fbe <_printf_i+0xc6>
 8007fb6:	066d      	lsls	r5, r5, #25
 8007fb8:	d5fb      	bpl.n	8007fb2 <_printf_i+0xba>
 8007fba:	680d      	ldr	r5, [r1, #0]
 8007fbc:	b2ad      	uxth	r5, r5
 8007fbe:	4b54      	ldr	r3, [pc, #336]	; (8008110 <_printf_i+0x218>)
 8007fc0:	2708      	movs	r7, #8
 8007fc2:	9303      	str	r3, [sp, #12]
 8007fc4:	2a6f      	cmp	r2, #111	; 0x6f
 8007fc6:	d000      	beq.n	8007fca <_printf_i+0xd2>
 8007fc8:	3702      	adds	r7, #2
 8007fca:	0023      	movs	r3, r4
 8007fcc:	2200      	movs	r2, #0
 8007fce:	3343      	adds	r3, #67	; 0x43
 8007fd0:	701a      	strb	r2, [r3, #0]
 8007fd2:	6863      	ldr	r3, [r4, #4]
 8007fd4:	60a3      	str	r3, [r4, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	db03      	blt.n	8007fe2 <_printf_i+0xea>
 8007fda:	2104      	movs	r1, #4
 8007fdc:	6822      	ldr	r2, [r4, #0]
 8007fde:	438a      	bics	r2, r1
 8007fe0:	6022      	str	r2, [r4, #0]
 8007fe2:	2d00      	cmp	r5, #0
 8007fe4:	d102      	bne.n	8007fec <_printf_i+0xf4>
 8007fe6:	9e04      	ldr	r6, [sp, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00c      	beq.n	8008006 <_printf_i+0x10e>
 8007fec:	9e04      	ldr	r6, [sp, #16]
 8007fee:	0028      	movs	r0, r5
 8007ff0:	0039      	movs	r1, r7
 8007ff2:	f7f8 f919 	bl	8000228 <__aeabi_uidivmod>
 8007ff6:	9b03      	ldr	r3, [sp, #12]
 8007ff8:	3e01      	subs	r6, #1
 8007ffa:	5c5b      	ldrb	r3, [r3, r1]
 8007ffc:	7033      	strb	r3, [r6, #0]
 8007ffe:	002b      	movs	r3, r5
 8008000:	0005      	movs	r5, r0
 8008002:	429f      	cmp	r7, r3
 8008004:	d9f3      	bls.n	8007fee <_printf_i+0xf6>
 8008006:	2f08      	cmp	r7, #8
 8008008:	d109      	bne.n	800801e <_printf_i+0x126>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	07db      	lsls	r3, r3, #31
 800800e:	d506      	bpl.n	800801e <_printf_i+0x126>
 8008010:	6862      	ldr	r2, [r4, #4]
 8008012:	6923      	ldr	r3, [r4, #16]
 8008014:	429a      	cmp	r2, r3
 8008016:	dc02      	bgt.n	800801e <_printf_i+0x126>
 8008018:	2330      	movs	r3, #48	; 0x30
 800801a:	3e01      	subs	r6, #1
 800801c:	7033      	strb	r3, [r6, #0]
 800801e:	9b04      	ldr	r3, [sp, #16]
 8008020:	1b9b      	subs	r3, r3, r6
 8008022:	6123      	str	r3, [r4, #16]
 8008024:	9b07      	ldr	r3, [sp, #28]
 8008026:	0021      	movs	r1, r4
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	9805      	ldr	r0, [sp, #20]
 800802c:	9b06      	ldr	r3, [sp, #24]
 800802e:	aa09      	add	r2, sp, #36	; 0x24
 8008030:	f7ff fef2 	bl	8007e18 <_printf_common>
 8008034:	3001      	adds	r0, #1
 8008036:	d147      	bne.n	80080c8 <_printf_i+0x1d0>
 8008038:	2001      	movs	r0, #1
 800803a:	4240      	negs	r0, r0
 800803c:	b00b      	add	sp, #44	; 0x2c
 800803e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008040:	2220      	movs	r2, #32
 8008042:	6809      	ldr	r1, [r1, #0]
 8008044:	430a      	orrs	r2, r1
 8008046:	6022      	str	r2, [r4, #0]
 8008048:	2278      	movs	r2, #120	; 0x78
 800804a:	4932      	ldr	r1, [pc, #200]	; (8008114 <_printf_i+0x21c>)
 800804c:	9103      	str	r1, [sp, #12]
 800804e:	0021      	movs	r1, r4
 8008050:	3145      	adds	r1, #69	; 0x45
 8008052:	700a      	strb	r2, [r1, #0]
 8008054:	6819      	ldr	r1, [r3, #0]
 8008056:	6822      	ldr	r2, [r4, #0]
 8008058:	c920      	ldmia	r1!, {r5}
 800805a:	0610      	lsls	r0, r2, #24
 800805c:	d402      	bmi.n	8008064 <_printf_i+0x16c>
 800805e:	0650      	lsls	r0, r2, #25
 8008060:	d500      	bpl.n	8008064 <_printf_i+0x16c>
 8008062:	b2ad      	uxth	r5, r5
 8008064:	6019      	str	r1, [r3, #0]
 8008066:	07d3      	lsls	r3, r2, #31
 8008068:	d502      	bpl.n	8008070 <_printf_i+0x178>
 800806a:	2320      	movs	r3, #32
 800806c:	4313      	orrs	r3, r2
 800806e:	6023      	str	r3, [r4, #0]
 8008070:	2710      	movs	r7, #16
 8008072:	2d00      	cmp	r5, #0
 8008074:	d1a9      	bne.n	8007fca <_printf_i+0xd2>
 8008076:	2220      	movs	r2, #32
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	4393      	bics	r3, r2
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	e7a4      	b.n	8007fca <_printf_i+0xd2>
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	680d      	ldr	r5, [r1, #0]
 8008084:	1d10      	adds	r0, r2, #4
 8008086:	6949      	ldr	r1, [r1, #20]
 8008088:	6018      	str	r0, [r3, #0]
 800808a:	6813      	ldr	r3, [r2, #0]
 800808c:	062e      	lsls	r6, r5, #24
 800808e:	d501      	bpl.n	8008094 <_printf_i+0x19c>
 8008090:	6019      	str	r1, [r3, #0]
 8008092:	e002      	b.n	800809a <_printf_i+0x1a2>
 8008094:	066d      	lsls	r5, r5, #25
 8008096:	d5fb      	bpl.n	8008090 <_printf_i+0x198>
 8008098:	8019      	strh	r1, [r3, #0]
 800809a:	2300      	movs	r3, #0
 800809c:	9e04      	ldr	r6, [sp, #16]
 800809e:	6123      	str	r3, [r4, #16]
 80080a0:	e7c0      	b.n	8008024 <_printf_i+0x12c>
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	1d11      	adds	r1, r2, #4
 80080a6:	6019      	str	r1, [r3, #0]
 80080a8:	6816      	ldr	r6, [r2, #0]
 80080aa:	2100      	movs	r1, #0
 80080ac:	0030      	movs	r0, r6
 80080ae:	6862      	ldr	r2, [r4, #4]
 80080b0:	f000 f998 	bl	80083e4 <memchr>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d001      	beq.n	80080bc <_printf_i+0x1c4>
 80080b8:	1b80      	subs	r0, r0, r6
 80080ba:	6060      	str	r0, [r4, #4]
 80080bc:	6863      	ldr	r3, [r4, #4]
 80080be:	6123      	str	r3, [r4, #16]
 80080c0:	2300      	movs	r3, #0
 80080c2:	9a04      	ldr	r2, [sp, #16]
 80080c4:	7013      	strb	r3, [r2, #0]
 80080c6:	e7ad      	b.n	8008024 <_printf_i+0x12c>
 80080c8:	0032      	movs	r2, r6
 80080ca:	6923      	ldr	r3, [r4, #16]
 80080cc:	9906      	ldr	r1, [sp, #24]
 80080ce:	9805      	ldr	r0, [sp, #20]
 80080d0:	9d07      	ldr	r5, [sp, #28]
 80080d2:	47a8      	blx	r5
 80080d4:	3001      	adds	r0, #1
 80080d6:	d0af      	beq.n	8008038 <_printf_i+0x140>
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	079b      	lsls	r3, r3, #30
 80080dc:	d415      	bmi.n	800810a <_printf_i+0x212>
 80080de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e0:	68e0      	ldr	r0, [r4, #12]
 80080e2:	4298      	cmp	r0, r3
 80080e4:	daaa      	bge.n	800803c <_printf_i+0x144>
 80080e6:	0018      	movs	r0, r3
 80080e8:	e7a8      	b.n	800803c <_printf_i+0x144>
 80080ea:	0022      	movs	r2, r4
 80080ec:	2301      	movs	r3, #1
 80080ee:	9906      	ldr	r1, [sp, #24]
 80080f0:	9805      	ldr	r0, [sp, #20]
 80080f2:	9e07      	ldr	r6, [sp, #28]
 80080f4:	3219      	adds	r2, #25
 80080f6:	47b0      	blx	r6
 80080f8:	3001      	adds	r0, #1
 80080fa:	d09d      	beq.n	8008038 <_printf_i+0x140>
 80080fc:	3501      	adds	r5, #1
 80080fe:	68e3      	ldr	r3, [r4, #12]
 8008100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008102:	1a9b      	subs	r3, r3, r2
 8008104:	42ab      	cmp	r3, r5
 8008106:	dcf0      	bgt.n	80080ea <_printf_i+0x1f2>
 8008108:	e7e9      	b.n	80080de <_printf_i+0x1e6>
 800810a:	2500      	movs	r5, #0
 800810c:	e7f7      	b.n	80080fe <_printf_i+0x206>
 800810e:	46c0      	nop			; (mov r8, r8)
 8008110:	0800860d 	.word	0x0800860d
 8008114:	0800861e 	.word	0x0800861e

08008118 <__sflush_r>:
 8008118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800811a:	898b      	ldrh	r3, [r1, #12]
 800811c:	0005      	movs	r5, r0
 800811e:	000c      	movs	r4, r1
 8008120:	071a      	lsls	r2, r3, #28
 8008122:	d45c      	bmi.n	80081de <__sflush_r+0xc6>
 8008124:	684a      	ldr	r2, [r1, #4]
 8008126:	2a00      	cmp	r2, #0
 8008128:	dc04      	bgt.n	8008134 <__sflush_r+0x1c>
 800812a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800812c:	2a00      	cmp	r2, #0
 800812e:	dc01      	bgt.n	8008134 <__sflush_r+0x1c>
 8008130:	2000      	movs	r0, #0
 8008132:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008134:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008136:	2f00      	cmp	r7, #0
 8008138:	d0fa      	beq.n	8008130 <__sflush_r+0x18>
 800813a:	2200      	movs	r2, #0
 800813c:	2080      	movs	r0, #128	; 0x80
 800813e:	682e      	ldr	r6, [r5, #0]
 8008140:	602a      	str	r2, [r5, #0]
 8008142:	001a      	movs	r2, r3
 8008144:	0140      	lsls	r0, r0, #5
 8008146:	6a21      	ldr	r1, [r4, #32]
 8008148:	4002      	ands	r2, r0
 800814a:	4203      	tst	r3, r0
 800814c:	d034      	beq.n	80081b8 <__sflush_r+0xa0>
 800814e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	075b      	lsls	r3, r3, #29
 8008154:	d506      	bpl.n	8008164 <__sflush_r+0x4c>
 8008156:	6863      	ldr	r3, [r4, #4]
 8008158:	1ac0      	subs	r0, r0, r3
 800815a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <__sflush_r+0x4c>
 8008160:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008162:	1ac0      	subs	r0, r0, r3
 8008164:	0002      	movs	r2, r0
 8008166:	2300      	movs	r3, #0
 8008168:	0028      	movs	r0, r5
 800816a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800816c:	6a21      	ldr	r1, [r4, #32]
 800816e:	47b8      	blx	r7
 8008170:	89a2      	ldrh	r2, [r4, #12]
 8008172:	1c43      	adds	r3, r0, #1
 8008174:	d106      	bne.n	8008184 <__sflush_r+0x6c>
 8008176:	6829      	ldr	r1, [r5, #0]
 8008178:	291d      	cmp	r1, #29
 800817a:	d82c      	bhi.n	80081d6 <__sflush_r+0xbe>
 800817c:	4b2a      	ldr	r3, [pc, #168]	; (8008228 <__sflush_r+0x110>)
 800817e:	410b      	asrs	r3, r1
 8008180:	07db      	lsls	r3, r3, #31
 8008182:	d428      	bmi.n	80081d6 <__sflush_r+0xbe>
 8008184:	2300      	movs	r3, #0
 8008186:	6063      	str	r3, [r4, #4]
 8008188:	6923      	ldr	r3, [r4, #16]
 800818a:	6023      	str	r3, [r4, #0]
 800818c:	04d2      	lsls	r2, r2, #19
 800818e:	d505      	bpl.n	800819c <__sflush_r+0x84>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	d102      	bne.n	800819a <__sflush_r+0x82>
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d100      	bne.n	800819c <__sflush_r+0x84>
 800819a:	6560      	str	r0, [r4, #84]	; 0x54
 800819c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800819e:	602e      	str	r6, [r5, #0]
 80081a0:	2900      	cmp	r1, #0
 80081a2:	d0c5      	beq.n	8008130 <__sflush_r+0x18>
 80081a4:	0023      	movs	r3, r4
 80081a6:	3344      	adds	r3, #68	; 0x44
 80081a8:	4299      	cmp	r1, r3
 80081aa:	d002      	beq.n	80081b2 <__sflush_r+0x9a>
 80081ac:	0028      	movs	r0, r5
 80081ae:	f7ff fbd3 	bl	8007958 <_free_r>
 80081b2:	2000      	movs	r0, #0
 80081b4:	6360      	str	r0, [r4, #52]	; 0x34
 80081b6:	e7bc      	b.n	8008132 <__sflush_r+0x1a>
 80081b8:	2301      	movs	r3, #1
 80081ba:	0028      	movs	r0, r5
 80081bc:	47b8      	blx	r7
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	d1c6      	bne.n	8008150 <__sflush_r+0x38>
 80081c2:	682b      	ldr	r3, [r5, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0c3      	beq.n	8008150 <__sflush_r+0x38>
 80081c8:	2b1d      	cmp	r3, #29
 80081ca:	d001      	beq.n	80081d0 <__sflush_r+0xb8>
 80081cc:	2b16      	cmp	r3, #22
 80081ce:	d101      	bne.n	80081d4 <__sflush_r+0xbc>
 80081d0:	602e      	str	r6, [r5, #0]
 80081d2:	e7ad      	b.n	8008130 <__sflush_r+0x18>
 80081d4:	89a2      	ldrh	r2, [r4, #12]
 80081d6:	2340      	movs	r3, #64	; 0x40
 80081d8:	4313      	orrs	r3, r2
 80081da:	81a3      	strh	r3, [r4, #12]
 80081dc:	e7a9      	b.n	8008132 <__sflush_r+0x1a>
 80081de:	690e      	ldr	r6, [r1, #16]
 80081e0:	2e00      	cmp	r6, #0
 80081e2:	d0a5      	beq.n	8008130 <__sflush_r+0x18>
 80081e4:	680f      	ldr	r7, [r1, #0]
 80081e6:	600e      	str	r6, [r1, #0]
 80081e8:	1bba      	subs	r2, r7, r6
 80081ea:	9201      	str	r2, [sp, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	079b      	lsls	r3, r3, #30
 80081f0:	d100      	bne.n	80081f4 <__sflush_r+0xdc>
 80081f2:	694a      	ldr	r2, [r1, #20]
 80081f4:	60a2      	str	r2, [r4, #8]
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	dd99      	ble.n	8008130 <__sflush_r+0x18>
 80081fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80081fe:	0032      	movs	r2, r6
 8008200:	001f      	movs	r7, r3
 8008202:	0028      	movs	r0, r5
 8008204:	9b01      	ldr	r3, [sp, #4]
 8008206:	6a21      	ldr	r1, [r4, #32]
 8008208:	47b8      	blx	r7
 800820a:	2800      	cmp	r0, #0
 800820c:	dc06      	bgt.n	800821c <__sflush_r+0x104>
 800820e:	2340      	movs	r3, #64	; 0x40
 8008210:	2001      	movs	r0, #1
 8008212:	89a2      	ldrh	r2, [r4, #12]
 8008214:	4240      	negs	r0, r0
 8008216:	4313      	orrs	r3, r2
 8008218:	81a3      	strh	r3, [r4, #12]
 800821a:	e78a      	b.n	8008132 <__sflush_r+0x1a>
 800821c:	9b01      	ldr	r3, [sp, #4]
 800821e:	1836      	adds	r6, r6, r0
 8008220:	1a1b      	subs	r3, r3, r0
 8008222:	9301      	str	r3, [sp, #4]
 8008224:	e7e7      	b.n	80081f6 <__sflush_r+0xde>
 8008226:	46c0      	nop			; (mov r8, r8)
 8008228:	dfbffffe 	.word	0xdfbffffe

0800822c <_fflush_r>:
 800822c:	690b      	ldr	r3, [r1, #16]
 800822e:	b570      	push	{r4, r5, r6, lr}
 8008230:	0005      	movs	r5, r0
 8008232:	000c      	movs	r4, r1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d102      	bne.n	800823e <_fflush_r+0x12>
 8008238:	2500      	movs	r5, #0
 800823a:	0028      	movs	r0, r5
 800823c:	bd70      	pop	{r4, r5, r6, pc}
 800823e:	2800      	cmp	r0, #0
 8008240:	d004      	beq.n	800824c <_fflush_r+0x20>
 8008242:	6a03      	ldr	r3, [r0, #32]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <_fflush_r+0x20>
 8008248:	f7ff f954 	bl	80074f4 <__sinit>
 800824c:	220c      	movs	r2, #12
 800824e:	5ea3      	ldrsh	r3, [r4, r2]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0f1      	beq.n	8008238 <_fflush_r+0xc>
 8008254:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008256:	07d2      	lsls	r2, r2, #31
 8008258:	d404      	bmi.n	8008264 <_fflush_r+0x38>
 800825a:	059b      	lsls	r3, r3, #22
 800825c:	d402      	bmi.n	8008264 <_fflush_r+0x38>
 800825e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008260:	f7ff fb6f 	bl	8007942 <__retarget_lock_acquire_recursive>
 8008264:	0028      	movs	r0, r5
 8008266:	0021      	movs	r1, r4
 8008268:	f7ff ff56 	bl	8008118 <__sflush_r>
 800826c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800826e:	0005      	movs	r5, r0
 8008270:	07db      	lsls	r3, r3, #31
 8008272:	d4e2      	bmi.n	800823a <_fflush_r+0xe>
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	059b      	lsls	r3, r3, #22
 8008278:	d4df      	bmi.n	800823a <_fflush_r+0xe>
 800827a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800827c:	f7ff fb62 	bl	8007944 <__retarget_lock_release_recursive>
 8008280:	e7db      	b.n	800823a <_fflush_r+0xe>
	...

08008284 <__swhatbuf_r>:
 8008284:	b570      	push	{r4, r5, r6, lr}
 8008286:	000e      	movs	r6, r1
 8008288:	001d      	movs	r5, r3
 800828a:	230e      	movs	r3, #14
 800828c:	5ec9      	ldrsh	r1, [r1, r3]
 800828e:	0014      	movs	r4, r2
 8008290:	b096      	sub	sp, #88	; 0x58
 8008292:	2900      	cmp	r1, #0
 8008294:	da0c      	bge.n	80082b0 <__swhatbuf_r+0x2c>
 8008296:	89b2      	ldrh	r2, [r6, #12]
 8008298:	2380      	movs	r3, #128	; 0x80
 800829a:	0011      	movs	r1, r2
 800829c:	4019      	ands	r1, r3
 800829e:	421a      	tst	r2, r3
 80082a0:	d013      	beq.n	80082ca <__swhatbuf_r+0x46>
 80082a2:	2100      	movs	r1, #0
 80082a4:	3b40      	subs	r3, #64	; 0x40
 80082a6:	2000      	movs	r0, #0
 80082a8:	6029      	str	r1, [r5, #0]
 80082aa:	6023      	str	r3, [r4, #0]
 80082ac:	b016      	add	sp, #88	; 0x58
 80082ae:	bd70      	pop	{r4, r5, r6, pc}
 80082b0:	466a      	mov	r2, sp
 80082b2:	f000 f861 	bl	8008378 <_fstat_r>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	dbed      	blt.n	8008296 <__swhatbuf_r+0x12>
 80082ba:	23f0      	movs	r3, #240	; 0xf0
 80082bc:	9901      	ldr	r1, [sp, #4]
 80082be:	021b      	lsls	r3, r3, #8
 80082c0:	4019      	ands	r1, r3
 80082c2:	4b03      	ldr	r3, [pc, #12]	; (80082d0 <__swhatbuf_r+0x4c>)
 80082c4:	18c9      	adds	r1, r1, r3
 80082c6:	424b      	negs	r3, r1
 80082c8:	4159      	adcs	r1, r3
 80082ca:	2380      	movs	r3, #128	; 0x80
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	e7ea      	b.n	80082a6 <__swhatbuf_r+0x22>
 80082d0:	ffffe000 	.word	0xffffe000

080082d4 <__smakebuf_r>:
 80082d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082d6:	2602      	movs	r6, #2
 80082d8:	898b      	ldrh	r3, [r1, #12]
 80082da:	0005      	movs	r5, r0
 80082dc:	000c      	movs	r4, r1
 80082de:	4233      	tst	r3, r6
 80082e0:	d006      	beq.n	80082f0 <__smakebuf_r+0x1c>
 80082e2:	0023      	movs	r3, r4
 80082e4:	3347      	adds	r3, #71	; 0x47
 80082e6:	6023      	str	r3, [r4, #0]
 80082e8:	6123      	str	r3, [r4, #16]
 80082ea:	2301      	movs	r3, #1
 80082ec:	6163      	str	r3, [r4, #20]
 80082ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80082f0:	466a      	mov	r2, sp
 80082f2:	ab01      	add	r3, sp, #4
 80082f4:	f7ff ffc6 	bl	8008284 <__swhatbuf_r>
 80082f8:	9900      	ldr	r1, [sp, #0]
 80082fa:	0007      	movs	r7, r0
 80082fc:	0028      	movs	r0, r5
 80082fe:	f7ff fb97 	bl	8007a30 <_malloc_r>
 8008302:	2800      	cmp	r0, #0
 8008304:	d108      	bne.n	8008318 <__smakebuf_r+0x44>
 8008306:	220c      	movs	r2, #12
 8008308:	5ea3      	ldrsh	r3, [r4, r2]
 800830a:	059a      	lsls	r2, r3, #22
 800830c:	d4ef      	bmi.n	80082ee <__smakebuf_r+0x1a>
 800830e:	2203      	movs	r2, #3
 8008310:	4393      	bics	r3, r2
 8008312:	431e      	orrs	r6, r3
 8008314:	81a6      	strh	r6, [r4, #12]
 8008316:	e7e4      	b.n	80082e2 <__smakebuf_r+0xe>
 8008318:	2380      	movs	r3, #128	; 0x80
 800831a:	89a2      	ldrh	r2, [r4, #12]
 800831c:	6020      	str	r0, [r4, #0]
 800831e:	4313      	orrs	r3, r2
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	9b00      	ldr	r3, [sp, #0]
 8008324:	6120      	str	r0, [r4, #16]
 8008326:	6163      	str	r3, [r4, #20]
 8008328:	9b01      	ldr	r3, [sp, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00c      	beq.n	8008348 <__smakebuf_r+0x74>
 800832e:	0028      	movs	r0, r5
 8008330:	230e      	movs	r3, #14
 8008332:	5ee1      	ldrsh	r1, [r4, r3]
 8008334:	f000 f832 	bl	800839c <_isatty_r>
 8008338:	2800      	cmp	r0, #0
 800833a:	d005      	beq.n	8008348 <__smakebuf_r+0x74>
 800833c:	2303      	movs	r3, #3
 800833e:	89a2      	ldrh	r2, [r4, #12]
 8008340:	439a      	bics	r2, r3
 8008342:	3b02      	subs	r3, #2
 8008344:	4313      	orrs	r3, r2
 8008346:	81a3      	strh	r3, [r4, #12]
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	433b      	orrs	r3, r7
 800834c:	81a3      	strh	r3, [r4, #12]
 800834e:	e7ce      	b.n	80082ee <__smakebuf_r+0x1a>

08008350 <memmove>:
 8008350:	b510      	push	{r4, lr}
 8008352:	4288      	cmp	r0, r1
 8008354:	d902      	bls.n	800835c <memmove+0xc>
 8008356:	188b      	adds	r3, r1, r2
 8008358:	4298      	cmp	r0, r3
 800835a:	d303      	bcc.n	8008364 <memmove+0x14>
 800835c:	2300      	movs	r3, #0
 800835e:	e007      	b.n	8008370 <memmove+0x20>
 8008360:	5c8b      	ldrb	r3, [r1, r2]
 8008362:	5483      	strb	r3, [r0, r2]
 8008364:	3a01      	subs	r2, #1
 8008366:	d2fb      	bcs.n	8008360 <memmove+0x10>
 8008368:	bd10      	pop	{r4, pc}
 800836a:	5ccc      	ldrb	r4, [r1, r3]
 800836c:	54c4      	strb	r4, [r0, r3]
 800836e:	3301      	adds	r3, #1
 8008370:	429a      	cmp	r2, r3
 8008372:	d1fa      	bne.n	800836a <memmove+0x1a>
 8008374:	e7f8      	b.n	8008368 <memmove+0x18>
	...

08008378 <_fstat_r>:
 8008378:	2300      	movs	r3, #0
 800837a:	b570      	push	{r4, r5, r6, lr}
 800837c:	4d06      	ldr	r5, [pc, #24]	; (8008398 <_fstat_r+0x20>)
 800837e:	0004      	movs	r4, r0
 8008380:	0008      	movs	r0, r1
 8008382:	0011      	movs	r1, r2
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	f7f9 ff68 	bl	800225a <_fstat>
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	d103      	bne.n	8008396 <_fstat_r+0x1e>
 800838e:	682b      	ldr	r3, [r5, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d000      	beq.n	8008396 <_fstat_r+0x1e>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd70      	pop	{r4, r5, r6, pc}
 8008398:	20000600 	.word	0x20000600

0800839c <_isatty_r>:
 800839c:	2300      	movs	r3, #0
 800839e:	b570      	push	{r4, r5, r6, lr}
 80083a0:	4d06      	ldr	r5, [pc, #24]	; (80083bc <_isatty_r+0x20>)
 80083a2:	0004      	movs	r4, r0
 80083a4:	0008      	movs	r0, r1
 80083a6:	602b      	str	r3, [r5, #0]
 80083a8:	f7f9 ff65 	bl	8002276 <_isatty>
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d103      	bne.n	80083b8 <_isatty_r+0x1c>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d000      	beq.n	80083b8 <_isatty_r+0x1c>
 80083b6:	6023      	str	r3, [r4, #0]
 80083b8:	bd70      	pop	{r4, r5, r6, pc}
 80083ba:	46c0      	nop			; (mov r8, r8)
 80083bc:	20000600 	.word	0x20000600

080083c0 <_sbrk_r>:
 80083c0:	2300      	movs	r3, #0
 80083c2:	b570      	push	{r4, r5, r6, lr}
 80083c4:	4d06      	ldr	r5, [pc, #24]	; (80083e0 <_sbrk_r+0x20>)
 80083c6:	0004      	movs	r4, r0
 80083c8:	0008      	movs	r0, r1
 80083ca:	602b      	str	r3, [r5, #0]
 80083cc:	f7f9 ff68 	bl	80022a0 <_sbrk>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d103      	bne.n	80083dc <_sbrk_r+0x1c>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d000      	beq.n	80083dc <_sbrk_r+0x1c>
 80083da:	6023      	str	r3, [r4, #0]
 80083dc:	bd70      	pop	{r4, r5, r6, pc}
 80083de:	46c0      	nop			; (mov r8, r8)
 80083e0:	20000600 	.word	0x20000600

080083e4 <memchr>:
 80083e4:	b2c9      	uxtb	r1, r1
 80083e6:	1882      	adds	r2, r0, r2
 80083e8:	4290      	cmp	r0, r2
 80083ea:	d101      	bne.n	80083f0 <memchr+0xc>
 80083ec:	2000      	movs	r0, #0
 80083ee:	4770      	bx	lr
 80083f0:	7803      	ldrb	r3, [r0, #0]
 80083f2:	428b      	cmp	r3, r1
 80083f4:	d0fb      	beq.n	80083ee <memchr+0xa>
 80083f6:	3001      	adds	r0, #1
 80083f8:	e7f6      	b.n	80083e8 <memchr+0x4>

080083fa <_realloc_r>:
 80083fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083fc:	0007      	movs	r7, r0
 80083fe:	000e      	movs	r6, r1
 8008400:	0014      	movs	r4, r2
 8008402:	2900      	cmp	r1, #0
 8008404:	d105      	bne.n	8008412 <_realloc_r+0x18>
 8008406:	0011      	movs	r1, r2
 8008408:	f7ff fb12 	bl	8007a30 <_malloc_r>
 800840c:	0005      	movs	r5, r0
 800840e:	0028      	movs	r0, r5
 8008410:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008412:	2a00      	cmp	r2, #0
 8008414:	d103      	bne.n	800841e <_realloc_r+0x24>
 8008416:	f7ff fa9f 	bl	8007958 <_free_r>
 800841a:	0025      	movs	r5, r4
 800841c:	e7f7      	b.n	800840e <_realloc_r+0x14>
 800841e:	f000 f81b 	bl	8008458 <_malloc_usable_size_r>
 8008422:	9001      	str	r0, [sp, #4]
 8008424:	4284      	cmp	r4, r0
 8008426:	d803      	bhi.n	8008430 <_realloc_r+0x36>
 8008428:	0035      	movs	r5, r6
 800842a:	0843      	lsrs	r3, r0, #1
 800842c:	42a3      	cmp	r3, r4
 800842e:	d3ee      	bcc.n	800840e <_realloc_r+0x14>
 8008430:	0021      	movs	r1, r4
 8008432:	0038      	movs	r0, r7
 8008434:	f7ff fafc 	bl	8007a30 <_malloc_r>
 8008438:	1e05      	subs	r5, r0, #0
 800843a:	d0e8      	beq.n	800840e <_realloc_r+0x14>
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	0022      	movs	r2, r4
 8008440:	429c      	cmp	r4, r3
 8008442:	d900      	bls.n	8008446 <_realloc_r+0x4c>
 8008444:	001a      	movs	r2, r3
 8008446:	0031      	movs	r1, r6
 8008448:	0028      	movs	r0, r5
 800844a:	f7ff fa7c 	bl	8007946 <memcpy>
 800844e:	0031      	movs	r1, r6
 8008450:	0038      	movs	r0, r7
 8008452:	f7ff fa81 	bl	8007958 <_free_r>
 8008456:	e7da      	b.n	800840e <_realloc_r+0x14>

08008458 <_malloc_usable_size_r>:
 8008458:	1f0b      	subs	r3, r1, #4
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	1f18      	subs	r0, r3, #4
 800845e:	2b00      	cmp	r3, #0
 8008460:	da01      	bge.n	8008466 <_malloc_usable_size_r+0xe>
 8008462:	580b      	ldr	r3, [r1, r0]
 8008464:	18c0      	adds	r0, r0, r3
 8008466:	4770      	bx	lr

08008468 <_init>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846e:	bc08      	pop	{r3}
 8008470:	469e      	mov	lr, r3
 8008472:	4770      	bx	lr

08008474 <_fini>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	46c0      	nop			; (mov r8, r8)
 8008478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847a:	bc08      	pop	{r3}
 800847c:	469e      	mov	lr, r3
 800847e:	4770      	bx	lr
