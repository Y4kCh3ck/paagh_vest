
sensory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e99c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800ea60  0800ea60  0001ea60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f07c  0800f07c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f07c  0800f07c  0001f07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f084  0800f084  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f084  0800f084  0001f084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f088  0800f088  0001f088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800f08c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  200001d8  0800f260  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  0800f260  000207e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001940b  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003da0  00000000  00000000  0003964a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  0003d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001410  00000000  00000000  0003e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018276  00000000  00000000  0003fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce47  00000000  00000000  00058036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088d77  00000000  00000000  00074e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006370  00000000  00000000  000fdbf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ea44 	.word	0x0800ea44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800ea44 	.word	0x0800ea44

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fd03 	bl	8001e48 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc53 	bl	8001cf8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fcf5 	bl	8001e48 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fceb 	bl	8001e48 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc7b 	bl	8001d7c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc71 	bl	8001d7c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 fb3b 	bl	8002bd4 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 ff94 	bl	8002494 <__aeabi_dsub>
 800056c:	f002 fb32 	bl	8002bd4 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 fca3 	bl	8001f10 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 fb66 	bl	8002ca0 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 fc9a 	bl	8001f10 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 ff56 	bl	8002494 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 fb1f 	bl	8002c40 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 fc83 	bl	8001f10 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 fb46 	bl	8002ca0 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fd20 	bl	800105c <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 fc3e 	bl	8002ec4 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 fc39 	bl	8002ec4 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fdiv>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0245      	lsls	r5, r0, #9
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	0047      	lsls	r7, r0, #1
 80007ca:	1c0c      	adds	r4, r1, #0
 80007cc:	0a6d      	lsrs	r5, r5, #9
 80007ce:	0e3f      	lsrs	r7, r7, #24
 80007d0:	0fc6      	lsrs	r6, r0, #31
 80007d2:	2f00      	cmp	r7, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fdiv+0x1c>
 80007d6:	e06f      	b.n	80008b8 <__aeabi_fdiv+0xfc>
 80007d8:	2fff      	cmp	r7, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fdiv+0x22>
 80007dc:	e074      	b.n	80008c8 <__aeabi_fdiv+0x10c>
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00ed      	lsls	r5, r5, #3
 80007e8:	04d2      	lsls	r2, r2, #19
 80007ea:	4315      	orrs	r5, r2
 80007ec:	3f7f      	subs	r7, #127	; 0x7f
 80007ee:	0263      	lsls	r3, r4, #9
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	0063      	lsls	r3, r4, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fe4      	lsrs	r4, r4, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d04d      	beq.n	800089a <__aeabi_fdiv+0xde>
 80007fe:	2bff      	cmp	r3, #255	; 0xff
 8000800:	d045      	beq.n	800088e <__aeabi_fdiv+0xd2>
 8000802:	4642      	mov	r2, r8
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	04c9      	lsls	r1, r1, #19
 800080a:	4311      	orrs	r1, r2
 800080c:	4688      	mov	r8, r1
 800080e:	2200      	movs	r2, #0
 8000810:	3b7f      	subs	r3, #127	; 0x7f
 8000812:	0031      	movs	r1, r6
 8000814:	1aff      	subs	r7, r7, r3
 8000816:	464b      	mov	r3, r9
 8000818:	4061      	eors	r1, r4
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d900      	bls.n	8000822 <__aeabi_fdiv+0x66>
 8000820:	e0b8      	b.n	8000994 <__aeabi_fdiv+0x1d8>
 8000822:	4870      	ldr	r0, [pc, #448]	; (80009e4 <__aeabi_fdiv+0x228>)
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	58c3      	ldr	r3, [r0, r3]
 8000828:	469f      	mov	pc, r3
 800082a:	2300      	movs	r3, #0
 800082c:	4698      	mov	r8, r3
 800082e:	0026      	movs	r6, r4
 8000830:	4645      	mov	r5, r8
 8000832:	4692      	mov	sl, r2
 8000834:	4653      	mov	r3, sl
 8000836:	2b02      	cmp	r3, #2
 8000838:	d100      	bne.n	800083c <__aeabi_fdiv+0x80>
 800083a:	e08d      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800083c:	2b03      	cmp	r3, #3
 800083e:	d100      	bne.n	8000842 <__aeabi_fdiv+0x86>
 8000840:	e0a1      	b.n	8000986 <__aeabi_fdiv+0x1ca>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d018      	beq.n	8000878 <__aeabi_fdiv+0xbc>
 8000846:	003b      	movs	r3, r7
 8000848:	337f      	adds	r3, #127	; 0x7f
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd6d      	ble.n	800092a <__aeabi_fdiv+0x16e>
 800084e:	076a      	lsls	r2, r5, #29
 8000850:	d004      	beq.n	800085c <__aeabi_fdiv+0xa0>
 8000852:	220f      	movs	r2, #15
 8000854:	402a      	ands	r2, r5
 8000856:	2a04      	cmp	r2, #4
 8000858:	d000      	beq.n	800085c <__aeabi_fdiv+0xa0>
 800085a:	3504      	adds	r5, #4
 800085c:	012a      	lsls	r2, r5, #4
 800085e:	d503      	bpl.n	8000868 <__aeabi_fdiv+0xac>
 8000860:	4b61      	ldr	r3, [pc, #388]	; (80009e8 <__aeabi_fdiv+0x22c>)
 8000862:	401d      	ands	r5, r3
 8000864:	003b      	movs	r3, r7
 8000866:	3380      	adds	r3, #128	; 0x80
 8000868:	2bfe      	cmp	r3, #254	; 0xfe
 800086a:	dd00      	ble.n	800086e <__aeabi_fdiv+0xb2>
 800086c:	e074      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800086e:	01aa      	lsls	r2, r5, #6
 8000870:	0a52      	lsrs	r2, r2, #9
 8000872:	b2d8      	uxtb	r0, r3
 8000874:	e002      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000876:	000e      	movs	r6, r1
 8000878:	2000      	movs	r0, #0
 800087a:	2200      	movs	r2, #0
 800087c:	05c0      	lsls	r0, r0, #23
 800087e:	07f6      	lsls	r6, r6, #31
 8000880:	4310      	orrs	r0, r2
 8000882:	4330      	orrs	r0, r6
 8000884:	bce0      	pop	{r5, r6, r7}
 8000886:	46ba      	mov	sl, r7
 8000888:	46b1      	mov	r9, r6
 800088a:	46a8      	mov	r8, r5
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	4643      	mov	r3, r8
 8000890:	2b00      	cmp	r3, #0
 8000892:	d13f      	bne.n	8000914 <__aeabi_fdiv+0x158>
 8000894:	2202      	movs	r2, #2
 8000896:	3fff      	subs	r7, #255	; 0xff
 8000898:	e003      	b.n	80008a2 <__aeabi_fdiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d12d      	bne.n	80008fc <__aeabi_fdiv+0x140>
 80008a0:	2201      	movs	r2, #1
 80008a2:	0031      	movs	r1, r6
 80008a4:	464b      	mov	r3, r9
 80008a6:	4061      	eors	r1, r4
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	4313      	orrs	r3, r2
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d838      	bhi.n	8000922 <__aeabi_fdiv+0x166>
 80008b0:	484e      	ldr	r0, [pc, #312]	; (80009ec <__aeabi_fdiv+0x230>)
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	58c3      	ldr	r3, [r0, r3]
 80008b6:	469f      	mov	pc, r3
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d113      	bne.n	80008e4 <__aeabi_fdiv+0x128>
 80008bc:	2304      	movs	r3, #4
 80008be:	4699      	mov	r9, r3
 80008c0:	3b03      	subs	r3, #3
 80008c2:	2700      	movs	r7, #0
 80008c4:	469a      	mov	sl, r3
 80008c6:	e792      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d105      	bne.n	80008d8 <__aeabi_fdiv+0x11c>
 80008cc:	2308      	movs	r3, #8
 80008ce:	4699      	mov	r9, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	27ff      	movs	r7, #255	; 0xff
 80008d4:	469a      	mov	sl, r3
 80008d6:	e78a      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008d8:	230c      	movs	r3, #12
 80008da:	4699      	mov	r9, r3
 80008dc:	3b09      	subs	r3, #9
 80008de:	27ff      	movs	r7, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e784      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008e4:	0028      	movs	r0, r5
 80008e6:	f002 facf 	bl	8002e88 <__clzsi2>
 80008ea:	2776      	movs	r7, #118	; 0x76
 80008ec:	1f43      	subs	r3, r0, #5
 80008ee:	409d      	lsls	r5, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	427f      	negs	r7, r7
 80008f4:	4699      	mov	r9, r3
 80008f6:	469a      	mov	sl, r3
 80008f8:	1a3f      	subs	r7, r7, r0
 80008fa:	e778      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008fc:	4640      	mov	r0, r8
 80008fe:	f002 fac3 	bl	8002e88 <__clzsi2>
 8000902:	4642      	mov	r2, r8
 8000904:	1f43      	subs	r3, r0, #5
 8000906:	409a      	lsls	r2, r3
 8000908:	2376      	movs	r3, #118	; 0x76
 800090a:	425b      	negs	r3, r3
 800090c:	4690      	mov	r8, r2
 800090e:	1a1b      	subs	r3, r3, r0
 8000910:	2200      	movs	r2, #0
 8000912:	e77e      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000914:	2303      	movs	r3, #3
 8000916:	464a      	mov	r2, r9
 8000918:	431a      	orrs	r2, r3
 800091a:	4691      	mov	r9, r2
 800091c:	33fc      	adds	r3, #252	; 0xfc
 800091e:	2203      	movs	r2, #3
 8000920:	e777      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000922:	000e      	movs	r6, r1
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	2200      	movs	r2, #0
 8000928:	e7a8      	b.n	800087c <__aeabi_fdiv+0xc0>
 800092a:	2201      	movs	r2, #1
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dca2      	bgt.n	8000878 <__aeabi_fdiv+0xbc>
 8000932:	379e      	adds	r7, #158	; 0x9e
 8000934:	002a      	movs	r2, r5
 8000936:	40bd      	lsls	r5, r7
 8000938:	40da      	lsrs	r2, r3
 800093a:	1e6b      	subs	r3, r5, #1
 800093c:	419d      	sbcs	r5, r3
 800093e:	4315      	orrs	r5, r2
 8000940:	076a      	lsls	r2, r5, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x192>
 8000944:	220f      	movs	r2, #15
 8000946:	402a      	ands	r2, r5
 8000948:	2a04      	cmp	r2, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x192>
 800094c:	3504      	adds	r5, #4
 800094e:	016a      	lsls	r2, r5, #5
 8000950:	d544      	bpl.n	80009dc <__aeabi_fdiv+0x220>
 8000952:	2001      	movs	r0, #1
 8000954:	2200      	movs	r2, #0
 8000956:	e791      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2200      	movs	r2, #0
 800095c:	e78e      	b.n	800087c <__aeabi_fdiv+0xc0>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	03d2      	lsls	r2, r2, #15
 8000966:	e789      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000968:	2300      	movs	r3, #0
 800096a:	4698      	mov	r8, r3
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	03d2      	lsls	r2, r2, #15
 8000970:	4215      	tst	r5, r2
 8000972:	d008      	beq.n	8000986 <__aeabi_fdiv+0x1ca>
 8000974:	4643      	mov	r3, r8
 8000976:	4213      	tst	r3, r2
 8000978:	d105      	bne.n	8000986 <__aeabi_fdiv+0x1ca>
 800097a:	431a      	orrs	r2, r3
 800097c:	0252      	lsls	r2, r2, #9
 800097e:	0026      	movs	r6, r4
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	0a52      	lsrs	r2, r2, #9
 8000984:	e77a      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	03d2      	lsls	r2, r2, #15
 800098a:	432a      	orrs	r2, r5
 800098c:	0252      	lsls	r2, r2, #9
 800098e:	20ff      	movs	r0, #255	; 0xff
 8000990:	0a52      	lsrs	r2, r2, #9
 8000992:	e773      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000994:	4642      	mov	r2, r8
 8000996:	016b      	lsls	r3, r5, #5
 8000998:	0155      	lsls	r5, r2, #5
 800099a:	42ab      	cmp	r3, r5
 800099c:	d21a      	bcs.n	80009d4 <__aeabi_fdiv+0x218>
 800099e:	201b      	movs	r0, #27
 80009a0:	2200      	movs	r2, #0
 80009a2:	3f01      	subs	r7, #1
 80009a4:	2601      	movs	r6, #1
 80009a6:	001c      	movs	r4, r3
 80009a8:	0052      	lsls	r2, r2, #1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	db01      	blt.n	80009b4 <__aeabi_fdiv+0x1f8>
 80009b0:	429d      	cmp	r5, r3
 80009b2:	d801      	bhi.n	80009b8 <__aeabi_fdiv+0x1fc>
 80009b4:	1b5b      	subs	r3, r3, r5
 80009b6:	4332      	orrs	r2, r6
 80009b8:	3801      	subs	r0, #1
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d1f3      	bne.n	80009a6 <__aeabi_fdiv+0x1ea>
 80009be:	1e58      	subs	r0, r3, #1
 80009c0:	4183      	sbcs	r3, r0
 80009c2:	4313      	orrs	r3, r2
 80009c4:	001d      	movs	r5, r3
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	000e      	movs	r6, r1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_fdiv+0x216>
 80009d0:	e73d      	b.n	800084e <__aeabi_fdiv+0x92>
 80009d2:	e7aa      	b.n	800092a <__aeabi_fdiv+0x16e>
 80009d4:	201a      	movs	r0, #26
 80009d6:	2201      	movs	r2, #1
 80009d8:	1b5b      	subs	r3, r3, r5
 80009da:	e7e3      	b.n	80009a4 <__aeabi_fdiv+0x1e8>
 80009dc:	01aa      	lsls	r2, r5, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a52      	lsrs	r2, r2, #9
 80009e2:	e74b      	b.n	800087c <__aeabi_fdiv+0xc0>
 80009e4:	0800eb24 	.word	0x0800eb24
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	0800eb64 	.word	0x0800eb64

080009f0 <__aeabi_fmul>:
 80009f0:	0243      	lsls	r3, r0, #9
 80009f2:	0a5b      	lsrs	r3, r3, #9
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	464f      	mov	r7, r9
 80009f8:	4646      	mov	r6, r8
 80009fa:	4699      	mov	r9, r3
 80009fc:	46d6      	mov	lr, sl
 80009fe:	0fc3      	lsrs	r3, r0, #31
 8000a00:	0045      	lsls	r5, r0, #1
 8000a02:	4698      	mov	r8, r3
 8000a04:	b5c0      	push	{r6, r7, lr}
 8000a06:	464b      	mov	r3, r9
 8000a08:	1c0f      	adds	r7, r1, #0
 8000a0a:	0e2d      	lsrs	r5, r5, #24
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fmul+0x20>
 8000a0e:	e0cb      	b.n	8000ba8 <__aeabi_fmul+0x1b8>
 8000a10:	2dff      	cmp	r5, #255	; 0xff
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fmul+0x26>
 8000a14:	e0cf      	b.n	8000bb6 <__aeabi_fmul+0x1c6>
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	04d2      	lsls	r2, r2, #19
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	2300      	movs	r3, #0
 8000a20:	4691      	mov	r9, r2
 8000a22:	2600      	movs	r6, #0
 8000a24:	469a      	mov	sl, r3
 8000a26:	3d7f      	subs	r5, #127	; 0x7f
 8000a28:	027c      	lsls	r4, r7, #9
 8000a2a:	007b      	lsls	r3, r7, #1
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	0e1b      	lsrs	r3, r3, #24
 8000a30:	0fff      	lsrs	r7, r7, #31
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fmul+0x48>
 8000a36:	e0a9      	b.n	8000b8c <__aeabi_fmul+0x19c>
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d011      	beq.n	8000a60 <__aeabi_fmul+0x70>
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	00e4      	lsls	r4, r4, #3
 8000a40:	04d2      	lsls	r2, r2, #19
 8000a42:	4314      	orrs	r4, r2
 8000a44:	4642      	mov	r2, r8
 8000a46:	3b7f      	subs	r3, #127	; 0x7f
 8000a48:	195b      	adds	r3, r3, r5
 8000a4a:	407a      	eors	r2, r7
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	1c5d      	adds	r5, r3, #1
 8000a52:	2e0a      	cmp	r6, #10
 8000a54:	dd13      	ble.n	8000a7e <__aeabi_fmul+0x8e>
 8000a56:	003a      	movs	r2, r7
 8000a58:	2e0b      	cmp	r6, #11
 8000a5a:	d047      	beq.n	8000aec <__aeabi_fmul+0xfc>
 8000a5c:	4647      	mov	r7, r8
 8000a5e:	e03f      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000a60:	002b      	movs	r3, r5
 8000a62:	33ff      	adds	r3, #255	; 0xff
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d11e      	bne.n	8000aa6 <__aeabi_fmul+0xb6>
 8000a68:	2202      	movs	r2, #2
 8000a6a:	4316      	orrs	r6, r2
 8000a6c:	4642      	mov	r2, r8
 8000a6e:	3501      	adds	r5, #1
 8000a70:	407a      	eors	r2, r7
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	35ff      	adds	r5, #255	; 0xff
 8000a76:	2e0a      	cmp	r6, #10
 8000a78:	dd00      	ble.n	8000a7c <__aeabi_fmul+0x8c>
 8000a7a:	e0e4      	b.n	8000c46 <__aeabi_fmul+0x256>
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	2e02      	cmp	r6, #2
 8000a80:	dc1c      	bgt.n	8000abc <__aeabi_fmul+0xcc>
 8000a82:	3e01      	subs	r6, #1
 8000a84:	2e01      	cmp	r6, #1
 8000a86:	d842      	bhi.n	8000b0e <__aeabi_fmul+0x11e>
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d03d      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000a8c:	2801      	cmp	r0, #1
 8000a8e:	d166      	bne.n	8000b5e <__aeabi_fmul+0x16e>
 8000a90:	2000      	movs	r0, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	05c0      	lsls	r0, r0, #23
 8000a96:	4308      	orrs	r0, r1
 8000a98:	07d2      	lsls	r2, r2, #31
 8000a9a:	4310      	orrs	r0, r2
 8000a9c:	bce0      	pop	{r5, r6, r7}
 8000a9e:	46ba      	mov	sl, r7
 8000aa0:	46b1      	mov	r9, r6
 8000aa2:	46a8      	mov	r8, r5
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	4316      	orrs	r6, r2
 8000aaa:	4642      	mov	r2, r8
 8000aac:	3501      	adds	r5, #1
 8000aae:	407a      	eors	r2, r7
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	35ff      	adds	r5, #255	; 0xff
 8000ab4:	2e0a      	cmp	r6, #10
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_fmul+0xca>
 8000ab8:	e0e4      	b.n	8000c84 <__aeabi_fmul+0x294>
 8000aba:	2003      	movs	r0, #3
 8000abc:	2101      	movs	r1, #1
 8000abe:	40b1      	lsls	r1, r6
 8000ac0:	26a6      	movs	r6, #166	; 0xa6
 8000ac2:	00f6      	lsls	r6, r6, #3
 8000ac4:	4231      	tst	r1, r6
 8000ac6:	d10a      	bne.n	8000ade <__aeabi_fmul+0xee>
 8000ac8:	2690      	movs	r6, #144	; 0x90
 8000aca:	00b6      	lsls	r6, r6, #2
 8000acc:	4231      	tst	r1, r6
 8000ace:	d116      	bne.n	8000afe <__aeabi_fmul+0x10e>
 8000ad0:	3eb9      	subs	r6, #185	; 0xb9
 8000ad2:	3eff      	subs	r6, #255	; 0xff
 8000ad4:	420e      	tst	r6, r1
 8000ad6:	d01a      	beq.n	8000b0e <__aeabi_fmul+0x11e>
 8000ad8:	46a1      	mov	r9, r4
 8000ada:	4682      	mov	sl, r0
 8000adc:	e000      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000ade:	0017      	movs	r7, r2
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	003a      	movs	r2, r7
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d00f      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	4650      	mov	r0, sl
 8000aec:	2803      	cmp	r0, #3
 8000aee:	d1cd      	bne.n	8000a8c <__aeabi_fmul+0x9c>
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	03c9      	lsls	r1, r1, #15
 8000af4:	4321      	orrs	r1, r4
 8000af6:	0249      	lsls	r1, r1, #9
 8000af8:	20ff      	movs	r0, #255	; 0xff
 8000afa:	0a49      	lsrs	r1, r1, #9
 8000afc:	e7ca      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	2200      	movs	r2, #0
 8000b02:	20ff      	movs	r0, #255	; 0xff
 8000b04:	03c9      	lsls	r1, r1, #15
 8000b06:	e7c5      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b08:	20ff      	movs	r0, #255	; 0xff
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e7c2      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b0e:	0c20      	lsrs	r0, r4, #16
 8000b10:	4649      	mov	r1, r9
 8000b12:	0424      	lsls	r4, r4, #16
 8000b14:	0c24      	lsrs	r4, r4, #16
 8000b16:	0027      	movs	r7, r4
 8000b18:	0c0e      	lsrs	r6, r1, #16
 8000b1a:	0409      	lsls	r1, r1, #16
 8000b1c:	0c09      	lsrs	r1, r1, #16
 8000b1e:	4374      	muls	r4, r6
 8000b20:	434f      	muls	r7, r1
 8000b22:	4346      	muls	r6, r0
 8000b24:	4348      	muls	r0, r1
 8000b26:	0c39      	lsrs	r1, r7, #16
 8000b28:	1900      	adds	r0, r0, r4
 8000b2a:	1809      	adds	r1, r1, r0
 8000b2c:	428c      	cmp	r4, r1
 8000b2e:	d903      	bls.n	8000b38 <__aeabi_fmul+0x148>
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	0240      	lsls	r0, r0, #9
 8000b34:	4684      	mov	ip, r0
 8000b36:	4466      	add	r6, ip
 8000b38:	043f      	lsls	r7, r7, #16
 8000b3a:	0408      	lsls	r0, r1, #16
 8000b3c:	0c3f      	lsrs	r7, r7, #16
 8000b3e:	19c0      	adds	r0, r0, r7
 8000b40:	0184      	lsls	r4, r0, #6
 8000b42:	1e67      	subs	r7, r4, #1
 8000b44:	41bc      	sbcs	r4, r7
 8000b46:	0c09      	lsrs	r1, r1, #16
 8000b48:	0e80      	lsrs	r0, r0, #26
 8000b4a:	1989      	adds	r1, r1, r6
 8000b4c:	4304      	orrs	r4, r0
 8000b4e:	0189      	lsls	r1, r1, #6
 8000b50:	430c      	orrs	r4, r1
 8000b52:	0109      	lsls	r1, r1, #4
 8000b54:	d571      	bpl.n	8000c3a <__aeabi_fmul+0x24a>
 8000b56:	2301      	movs	r3, #1
 8000b58:	0861      	lsrs	r1, r4, #1
 8000b5a:	401c      	ands	r4, r3
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	002b      	movs	r3, r5
 8000b60:	337f      	adds	r3, #127	; 0x7f
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dd51      	ble.n	8000c0a <__aeabi_fmul+0x21a>
 8000b66:	0761      	lsls	r1, r4, #29
 8000b68:	d004      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	4021      	ands	r1, r4
 8000b6e:	2904      	cmp	r1, #4
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b72:	3404      	adds	r4, #4
 8000b74:	0121      	lsls	r1, r4, #4
 8000b76:	d503      	bpl.n	8000b80 <__aeabi_fmul+0x190>
 8000b78:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <__aeabi_fmul+0x298>)
 8000b7a:	401c      	ands	r4, r3
 8000b7c:	002b      	movs	r3, r5
 8000b7e:	3380      	adds	r3, #128	; 0x80
 8000b80:	2bfe      	cmp	r3, #254	; 0xfe
 8000b82:	dcc1      	bgt.n	8000b08 <__aeabi_fmul+0x118>
 8000b84:	01a1      	lsls	r1, r4, #6
 8000b86:	0a49      	lsrs	r1, r1, #9
 8000b88:	b2d8      	uxtb	r0, r3
 8000b8a:	e783      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b8c:	2c00      	cmp	r4, #0
 8000b8e:	d12c      	bne.n	8000bea <__aeabi_fmul+0x1fa>
 8000b90:	2301      	movs	r3, #1
 8000b92:	4642      	mov	r2, r8
 8000b94:	431e      	orrs	r6, r3
 8000b96:	002b      	movs	r3, r5
 8000b98:	407a      	eors	r2, r7
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	1c5d      	adds	r5, r3, #1
 8000ba0:	2e0a      	cmp	r6, #10
 8000ba2:	dd00      	ble.n	8000ba6 <__aeabi_fmul+0x1b6>
 8000ba4:	e757      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000ba6:	e76a      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d110      	bne.n	8000bce <__aeabi_fmul+0x1de>
 8000bac:	2301      	movs	r3, #1
 8000bae:	2604      	movs	r6, #4
 8000bb0:	2500      	movs	r5, #0
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	e738      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d104      	bne.n	8000bc4 <__aeabi_fmul+0x1d4>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	2608      	movs	r6, #8
 8000bbe:	25ff      	movs	r5, #255	; 0xff
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	e731      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	260c      	movs	r6, #12
 8000bc8:	25ff      	movs	r5, #255	; 0xff
 8000bca:	469a      	mov	sl, r3
 8000bcc:	e72c      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bce:	4648      	mov	r0, r9
 8000bd0:	f002 f95a 	bl	8002e88 <__clzsi2>
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	1f43      	subs	r3, r0, #5
 8000bd8:	2576      	movs	r5, #118	; 0x76
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	2300      	movs	r3, #0
 8000bde:	426d      	negs	r5, r5
 8000be0:	4691      	mov	r9, r2
 8000be2:	2600      	movs	r6, #0
 8000be4:	469a      	mov	sl, r3
 8000be6:	1a2d      	subs	r5, r5, r0
 8000be8:	e71e      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bea:	0020      	movs	r0, r4
 8000bec:	f002 f94c 	bl	8002e88 <__clzsi2>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	1f43      	subs	r3, r0, #5
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	1a2b      	subs	r3, r5, r0
 8000bf8:	3b76      	subs	r3, #118	; 0x76
 8000bfa:	407a      	eors	r2, r7
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	1c5d      	adds	r5, r3, #1
 8000c02:	2e0a      	cmp	r6, #10
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_fmul+0x218>
 8000c06:	e726      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000c08:	e739      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	1acb      	subs	r3, r1, r3
 8000c0e:	2b1b      	cmp	r3, #27
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_fmul+0x224>
 8000c12:	e73d      	b.n	8000a90 <__aeabi_fmul+0xa0>
 8000c14:	359e      	adds	r5, #158	; 0x9e
 8000c16:	0021      	movs	r1, r4
 8000c18:	40ac      	lsls	r4, r5
 8000c1a:	40d9      	lsrs	r1, r3
 8000c1c:	1e63      	subs	r3, r4, #1
 8000c1e:	419c      	sbcs	r4, r3
 8000c20:	4321      	orrs	r1, r4
 8000c22:	074b      	lsls	r3, r1, #29
 8000c24:	d004      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c26:	230f      	movs	r3, #15
 8000c28:	400b      	ands	r3, r1
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c2e:	3104      	adds	r1, #4
 8000c30:	014b      	lsls	r3, r1, #5
 8000c32:	d504      	bpl.n	8000c3e <__aeabi_fmul+0x24e>
 8000c34:	2001      	movs	r0, #1
 8000c36:	2100      	movs	r1, #0
 8000c38:	e72c      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c3a:	001d      	movs	r5, r3
 8000c3c:	e78f      	b.n	8000b5e <__aeabi_fmul+0x16e>
 8000c3e:	0189      	lsls	r1, r1, #6
 8000c40:	2000      	movs	r0, #0
 8000c42:	0a49      	lsrs	r1, r1, #9
 8000c44:	e726      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c46:	2302      	movs	r3, #2
 8000c48:	2e0f      	cmp	r6, #15
 8000c4a:	d10c      	bne.n	8000c66 <__aeabi_fmul+0x276>
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	464b      	mov	r3, r9
 8000c50:	03c9      	lsls	r1, r1, #15
 8000c52:	420b      	tst	r3, r1
 8000c54:	d00d      	beq.n	8000c72 <__aeabi_fmul+0x282>
 8000c56:	420c      	tst	r4, r1
 8000c58:	d10b      	bne.n	8000c72 <__aeabi_fmul+0x282>
 8000c5a:	4321      	orrs	r1, r4
 8000c5c:	0249      	lsls	r1, r1, #9
 8000c5e:	003a      	movs	r2, r7
 8000c60:	20ff      	movs	r0, #255	; 0xff
 8000c62:	0a49      	lsrs	r1, r1, #9
 8000c64:	e716      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c66:	2e0b      	cmp	r6, #11
 8000c68:	d000      	beq.n	8000c6c <__aeabi_fmul+0x27c>
 8000c6a:	e6f7      	b.n	8000a5c <__aeabi_fmul+0x6c>
 8000c6c:	46a1      	mov	r9, r4
 8000c6e:	469a      	mov	sl, r3
 8000c70:	e736      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	464b      	mov	r3, r9
 8000c76:	03c9      	lsls	r1, r1, #15
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	0249      	lsls	r1, r1, #9
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	20ff      	movs	r0, #255	; 0xff
 8000c80:	0a49      	lsrs	r1, r1, #9
 8000c82:	e707      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c84:	2303      	movs	r3, #3
 8000c86:	e7df      	b.n	8000c48 <__aeabi_fmul+0x258>
 8000c88:	f7ffffff 	.word	0xf7ffffff

08000c8c <__aeabi_fsub>:
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	46c6      	mov	lr, r8
 8000c90:	0243      	lsls	r3, r0, #9
 8000c92:	0a5b      	lsrs	r3, r3, #9
 8000c94:	0045      	lsls	r5, r0, #1
 8000c96:	00da      	lsls	r2, r3, #3
 8000c98:	0fc4      	lsrs	r4, r0, #31
 8000c9a:	0248      	lsls	r0, r1, #9
 8000c9c:	004f      	lsls	r7, r1, #1
 8000c9e:	4694      	mov	ip, r2
 8000ca0:	0a42      	lsrs	r2, r0, #9
 8000ca2:	001e      	movs	r6, r3
 8000ca4:	4690      	mov	r8, r2
 8000ca6:	b500      	push	{lr}
 8000ca8:	0e2d      	lsrs	r5, r5, #24
 8000caa:	0e3f      	lsrs	r7, r7, #24
 8000cac:	0fc9      	lsrs	r1, r1, #31
 8000cae:	0980      	lsrs	r0, r0, #6
 8000cb0:	2fff      	cmp	r7, #255	; 0xff
 8000cb2:	d059      	beq.n	8000d68 <__aeabi_fsub+0xdc>
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4051      	eors	r1, r2
 8000cb8:	428c      	cmp	r4, r1
 8000cba:	d039      	beq.n	8000d30 <__aeabi_fsub+0xa4>
 8000cbc:	1bea      	subs	r2, r5, r7
 8000cbe:	2a00      	cmp	r2, #0
 8000cc0:	dd58      	ble.n	8000d74 <__aeabi_fsub+0xe8>
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d068      	beq.n	8000d98 <__aeabi_fsub+0x10c>
 8000cc6:	2dff      	cmp	r5, #255	; 0xff
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_fsub+0x40>
 8000cca:	e0d1      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	04db      	lsls	r3, r3, #19
 8000cd0:	4318      	orrs	r0, r3
 8000cd2:	2a1b      	cmp	r2, #27
 8000cd4:	dc00      	bgt.n	8000cd8 <__aeabi_fsub+0x4c>
 8000cd6:	e0e3      	b.n	8000ea0 <__aeabi_fsub+0x214>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	4662      	mov	r2, ip
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	015a      	lsls	r2, r3, #5
 8000ce0:	d400      	bmi.n	8000ce4 <__aeabi_fsub+0x58>
 8000ce2:	e0ac      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	099e      	lsrs	r6, r3, #6
 8000ce8:	0030      	movs	r0, r6
 8000cea:	f002 f8cd 	bl	8002e88 <__clzsi2>
 8000cee:	0033      	movs	r3, r6
 8000cf0:	3805      	subs	r0, #5
 8000cf2:	4083      	lsls	r3, r0
 8000cf4:	4285      	cmp	r5, r0
 8000cf6:	dc00      	bgt.n	8000cfa <__aeabi_fsub+0x6e>
 8000cf8:	e0c6      	b.n	8000e88 <__aeabi_fsub+0x1fc>
 8000cfa:	4ab2      	ldr	r2, [pc, #712]	; (8000fc4 <__aeabi_fsub+0x338>)
 8000cfc:	1a2d      	subs	r5, r5, r0
 8000cfe:	4013      	ands	r3, r2
 8000d00:	075a      	lsls	r2, r3, #29
 8000d02:	d004      	beq.n	8000d0e <__aeabi_fsub+0x82>
 8000d04:	220f      	movs	r2, #15
 8000d06:	401a      	ands	r2, r3
 8000d08:	2a04      	cmp	r2, #4
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_fsub+0x82>
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d400      	bmi.n	8000d14 <__aeabi_fsub+0x88>
 8000d12:	e097      	b.n	8000e44 <__aeabi_fsub+0x1b8>
 8000d14:	1c6a      	adds	r2, r5, #1
 8000d16:	2dfe      	cmp	r5, #254	; 0xfe
 8000d18:	d100      	bne.n	8000d1c <__aeabi_fsub+0x90>
 8000d1a:	e084      	b.n	8000e26 <__aeabi_fsub+0x19a>
 8000d1c:	019b      	lsls	r3, r3, #6
 8000d1e:	0a5e      	lsrs	r6, r3, #9
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	05d0      	lsls	r0, r2, #23
 8000d24:	4330      	orrs	r0, r6
 8000d26:	07e4      	lsls	r4, r4, #31
 8000d28:	4320      	orrs	r0, r4
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	46b8      	mov	r8, r7
 8000d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d30:	1bea      	subs	r2, r5, r7
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	dd41      	ble.n	8000dba <__aeabi_fsub+0x12e>
 8000d36:	2f00      	cmp	r7, #0
 8000d38:	d06b      	beq.n	8000e12 <__aeabi_fsub+0x186>
 8000d3a:	2dff      	cmp	r5, #255	; 0xff
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_fsub+0xb4>
 8000d3e:	e097      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	04db      	lsls	r3, r3, #19
 8000d44:	4318      	orrs	r0, r3
 8000d46:	2a1b      	cmp	r2, #27
 8000d48:	dc00      	bgt.n	8000d4c <__aeabi_fsub+0xc0>
 8000d4a:	e0cc      	b.n	8000ee6 <__aeabi_fsub+0x25a>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	4463      	add	r3, ip
 8000d50:	015a      	lsls	r2, r3, #5
 8000d52:	d574      	bpl.n	8000e3e <__aeabi_fsub+0x1b2>
 8000d54:	3501      	adds	r5, #1
 8000d56:	2dff      	cmp	r5, #255	; 0xff
 8000d58:	d065      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	499a      	ldr	r1, [pc, #616]	; (8000fc8 <__aeabi_fsub+0x33c>)
 8000d5e:	401a      	ands	r2, r3
 8000d60:	085b      	lsrs	r3, r3, #1
 8000d62:	400b      	ands	r3, r1
 8000d64:	4313      	orrs	r3, r2
 8000d66:	e7cb      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d01f      	beq.n	8000dac <__aeabi_fsub+0x120>
 8000d6c:	428c      	cmp	r4, r1
 8000d6e:	d022      	beq.n	8000db6 <__aeabi_fsub+0x12a>
 8000d70:	002a      	movs	r2, r5
 8000d72:	3aff      	subs	r2, #255	; 0xff
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	d035      	beq.n	8000de4 <__aeabi_fsub+0x158>
 8000d78:	1b7a      	subs	r2, r7, r5
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_fsub+0xf4>
 8000d7e:	e099      	b.n	8000eb4 <__aeabi_fsub+0x228>
 8000d80:	4663      	mov	r3, ip
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fsub+0xfc>
 8000d86:	e0dd      	b.n	8000f44 <__aeabi_fsub+0x2b8>
 8000d88:	1e53      	subs	r3, r2, #1
 8000d8a:	2a01      	cmp	r2, #1
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_fsub+0x104>
 8000d8e:	e105      	b.n	8000f9c <__aeabi_fsub+0x310>
 8000d90:	2aff      	cmp	r2, #255	; 0xff
 8000d92:	d06b      	beq.n	8000e6c <__aeabi_fsub+0x1e0>
 8000d94:	001a      	movs	r2, r3
 8000d96:	e094      	b.n	8000ec2 <__aeabi_fsub+0x236>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d073      	beq.n	8000e84 <__aeabi_fsub+0x1f8>
 8000d9c:	1e51      	subs	r1, r2, #1
 8000d9e:	2a01      	cmp	r2, #1
 8000da0:	d100      	bne.n	8000da4 <__aeabi_fsub+0x118>
 8000da2:	e0df      	b.n	8000f64 <__aeabi_fsub+0x2d8>
 8000da4:	2aff      	cmp	r2, #255	; 0xff
 8000da6:	d063      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000da8:	000a      	movs	r2, r1
 8000daa:	e792      	b.n	8000cd2 <__aeabi_fsub+0x46>
 8000dac:	2201      	movs	r2, #1
 8000dae:	4051      	eors	r1, r2
 8000db0:	42a1      	cmp	r1, r4
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fsub+0x12a>
 8000db4:	e782      	b.n	8000cbc <__aeabi_fsub+0x30>
 8000db6:	002a      	movs	r2, r5
 8000db8:	3aff      	subs	r2, #255	; 0xff
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d036      	beq.n	8000e2c <__aeabi_fsub+0x1a0>
 8000dbe:	1b7a      	subs	r2, r7, r5
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_fsub+0x13a>
 8000dc4:	e0aa      	b.n	8000f1c <__aeabi_fsub+0x290>
 8000dc6:	2fff      	cmp	r7, #255	; 0xff
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_fsub+0x140>
 8000dca:	e0da      	b.n	8000f82 <__aeabi_fsub+0x2f6>
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	4661      	mov	r1, ip
 8000dd0:	04db      	lsls	r3, r3, #19
 8000dd2:	4319      	orrs	r1, r3
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2a1b      	cmp	r2, #27
 8000dd8:	dc00      	bgt.n	8000ddc <__aeabi_fsub+0x150>
 8000dda:	e0d4      	b.n	8000f86 <__aeabi_fsub+0x2fa>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	003d      	movs	r5, r7
 8000de0:	181b      	adds	r3, r3, r0
 8000de2:	e7b5      	b.n	8000d50 <__aeabi_fsub+0xc4>
 8000de4:	27fe      	movs	r7, #254	; 0xfe
 8000de6:	1c6a      	adds	r2, r5, #1
 8000de8:	4217      	tst	r7, r2
 8000dea:	d171      	bne.n	8000ed0 <__aeabi_fsub+0x244>
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d000      	beq.n	8000df2 <__aeabi_fsub+0x166>
 8000df0:	e09e      	b.n	8000f30 <__aeabi_fsub+0x2a4>
 8000df2:	4663      	mov	r3, ip
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x16e>
 8000df8:	e0d5      	b.n	8000fa6 <__aeabi_fsub+0x31a>
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_fsub+0x176>
 8000e00:	e78f      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e02:	1a1b      	subs	r3, r3, r0
 8000e04:	015e      	lsls	r6, r3, #5
 8000e06:	d400      	bmi.n	8000e0a <__aeabi_fsub+0x17e>
 8000e08:	e0d6      	b.n	8000fb8 <__aeabi_fsub+0x32c>
 8000e0a:	4663      	mov	r3, ip
 8000e0c:	000c      	movs	r4, r1
 8000e0e:	1ac3      	subs	r3, r0, r3
 8000e10:	e776      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d036      	beq.n	8000e84 <__aeabi_fsub+0x1f8>
 8000e16:	1e51      	subs	r1, r2, #1
 8000e18:	2a01      	cmp	r2, #1
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_fsub+0x192>
 8000e1c:	e09a      	b.n	8000f54 <__aeabi_fsub+0x2c8>
 8000e1e:	2aff      	cmp	r2, #255	; 0xff
 8000e20:	d026      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e22:	000a      	movs	r2, r1
 8000e24:	e78f      	b.n	8000d46 <__aeabi_fsub+0xba>
 8000e26:	22ff      	movs	r2, #255	; 0xff
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e77a      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e2c:	27fe      	movs	r7, #254	; 0xfe
 8000e2e:	1c6a      	adds	r2, r5, #1
 8000e30:	4217      	tst	r7, r2
 8000e32:	d062      	beq.n	8000efa <__aeabi_fsub+0x26e>
 8000e34:	2aff      	cmp	r2, #255	; 0xff
 8000e36:	d0f6      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000e38:	0015      	movs	r5, r2
 8000e3a:	4460      	add	r0, ip
 8000e3c:	0843      	lsrs	r3, r0, #1
 8000e3e:	075a      	lsls	r2, r3, #29
 8000e40:	d000      	beq.n	8000e44 <__aeabi_fsub+0x1b8>
 8000e42:	e75f      	b.n	8000d04 <__aeabi_fsub+0x78>
 8000e44:	08db      	lsrs	r3, r3, #3
 8000e46:	2dff      	cmp	r5, #255	; 0xff
 8000e48:	d012      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e4a:	025b      	lsls	r3, r3, #9
 8000e4c:	0a5e      	lsrs	r6, r3, #9
 8000e4e:	b2ea      	uxtb	r2, r5
 8000e50:	e767      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e52:	4662      	mov	r2, ip
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d100      	bne.n	8000e5a <__aeabi_fsub+0x1ce>
 8000e58:	e093      	b.n	8000f82 <__aeabi_fsub+0x2f6>
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d008      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	03d2      	lsls	r2, r2, #15
 8000e62:	4213      	tst	r3, r2
 8000e64:	d004      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e66:	4640      	mov	r0, r8
 8000e68:	4210      	tst	r0, r2
 8000e6a:	d101      	bne.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e6c:	000c      	movs	r4, r1
 8000e6e:	4643      	mov	r3, r8
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0d8      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000e74:	2680      	movs	r6, #128	; 0x80
 8000e76:	03f6      	lsls	r6, r6, #15
 8000e78:	431e      	orrs	r6, r3
 8000e7a:	0276      	lsls	r6, r6, #9
 8000e7c:	22ff      	movs	r2, #255	; 0xff
 8000e7e:	0a76      	lsrs	r6, r6, #9
 8000e80:	e74f      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e82:	4643      	mov	r3, r8
 8000e84:	0015      	movs	r5, r2
 8000e86:	e7de      	b.n	8000e46 <__aeabi_fsub+0x1ba>
 8000e88:	2220      	movs	r2, #32
 8000e8a:	1b40      	subs	r0, r0, r5
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	1a12      	subs	r2, r2, r0
 8000e90:	0019      	movs	r1, r3
 8000e92:	4093      	lsls	r3, r2
 8000e94:	40c1      	lsrs	r1, r0
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	4193      	sbcs	r3, r2
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	e72f      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	0001      	movs	r1, r0
 8000ea6:	4098      	lsls	r0, r3
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	40d1      	lsrs	r1, r2
 8000eac:	1e5a      	subs	r2, r3, #1
 8000eae:	4193      	sbcs	r3, r2
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	e712      	b.n	8000cda <__aeabi_fsub+0x4e>
 8000eb4:	2fff      	cmp	r7, #255	; 0xff
 8000eb6:	d0d9      	beq.n	8000e6c <__aeabi_fsub+0x1e0>
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	4664      	mov	r4, ip
 8000ebc:	04db      	lsls	r3, r3, #19
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	46a4      	mov	ip, r4
 8000ec2:	2a1b      	cmp	r2, #27
 8000ec4:	dd52      	ble.n	8000f6c <__aeabi_fsub+0x2e0>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	000c      	movs	r4, r1
 8000eca:	003d      	movs	r5, r7
 8000ecc:	1ac3      	subs	r3, r0, r3
 8000ece:	e706      	b.n	8000cde <__aeabi_fsub+0x52>
 8000ed0:	4663      	mov	r3, ip
 8000ed2:	1a1e      	subs	r6, r3, r0
 8000ed4:	0173      	lsls	r3, r6, #5
 8000ed6:	d439      	bmi.n	8000f4c <__aeabi_fsub+0x2c0>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_fsub+0x252>
 8000edc:	e704      	b.n	8000ce8 <__aeabi_fsub+0x5c>
 8000ede:	2400      	movs	r4, #0
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	e71d      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	1a9b      	subs	r3, r3, r2
 8000eea:	0001      	movs	r1, r0
 8000eec:	4098      	lsls	r0, r3
 8000eee:	0003      	movs	r3, r0
 8000ef0:	40d1      	lsrs	r1, r2
 8000ef2:	1e5a      	subs	r2, r3, #1
 8000ef4:	4193      	sbcs	r3, r2
 8000ef6:	430b      	orrs	r3, r1
 8000ef8:	e729      	b.n	8000d4e <__aeabi_fsub+0xc2>
 8000efa:	2d00      	cmp	r5, #0
 8000efc:	d1a9      	bne.n	8000e52 <__aeabi_fsub+0x1c6>
 8000efe:	4663      	mov	r3, ip
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d056      	beq.n	8000fb2 <__aeabi_fsub+0x326>
 8000f04:	2200      	movs	r2, #0
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fsub+0x280>
 8000f0a:	e70a      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	4463      	add	r3, ip
 8000f10:	015a      	lsls	r2, r3, #5
 8000f12:	d594      	bpl.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f14:	4a2b      	ldr	r2, [pc, #172]	; (8000fc4 <__aeabi_fsub+0x338>)
 8000f16:	3501      	adds	r5, #1
 8000f18:	4013      	ands	r3, r2
 8000f1a:	e790      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f1c:	4663      	mov	r3, ip
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0af      	beq.n	8000e82 <__aeabi_fsub+0x1f6>
 8000f22:	1e53      	subs	r3, r2, #1
 8000f24:	2a01      	cmp	r2, #1
 8000f26:	d015      	beq.n	8000f54 <__aeabi_fsub+0x2c8>
 8000f28:	2aff      	cmp	r2, #255	; 0xff
 8000f2a:	d02a      	beq.n	8000f82 <__aeabi_fsub+0x2f6>
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	e752      	b.n	8000dd6 <__aeabi_fsub+0x14a>
 8000f30:	4662      	mov	r2, ip
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d191      	bne.n	8000e5a <__aeabi_fsub+0x1ce>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d198      	bne.n	8000e6c <__aeabi_fsub+0x1e0>
 8000f3a:	2680      	movs	r6, #128	; 0x80
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	22ff      	movs	r2, #255	; 0xff
 8000f40:	03f6      	lsls	r6, r6, #15
 8000f42:	e6ee      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000f44:	000c      	movs	r4, r1
 8000f46:	4643      	mov	r3, r8
 8000f48:	0015      	movs	r5, r2
 8000f4a:	e77c      	b.n	8000e46 <__aeabi_fsub+0x1ba>
 8000f4c:	4663      	mov	r3, ip
 8000f4e:	000c      	movs	r4, r1
 8000f50:	1ac6      	subs	r6, r0, r3
 8000f52:	e6c9      	b.n	8000ce8 <__aeabi_fsub+0x5c>
 8000f54:	0003      	movs	r3, r0
 8000f56:	4463      	add	r3, ip
 8000f58:	2501      	movs	r5, #1
 8000f5a:	015a      	lsls	r2, r3, #5
 8000f5c:	d400      	bmi.n	8000f60 <__aeabi_fsub+0x2d4>
 8000f5e:	e76e      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f60:	2502      	movs	r5, #2
 8000f62:	e6fa      	b.n	8000d5a <__aeabi_fsub+0xce>
 8000f64:	4663      	mov	r3, ip
 8000f66:	2501      	movs	r5, #1
 8000f68:	1a1b      	subs	r3, r3, r0
 8000f6a:	e6b8      	b.n	8000cde <__aeabi_fsub+0x52>
 8000f6c:	4664      	mov	r4, ip
 8000f6e:	2320      	movs	r3, #32
 8000f70:	40d4      	lsrs	r4, r2
 8000f72:	1a9b      	subs	r3, r3, r2
 8000f74:	4662      	mov	r2, ip
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	1e5a      	subs	r2, r3, #1
 8000f7c:	4193      	sbcs	r3, r2
 8000f7e:	4323      	orrs	r3, r4
 8000f80:	e7a2      	b.n	8000ec8 <__aeabi_fsub+0x23c>
 8000f82:	4643      	mov	r3, r8
 8000f84:	e774      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000f86:	4661      	mov	r1, ip
 8000f88:	2320      	movs	r3, #32
 8000f8a:	40d1      	lsrs	r1, r2
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	4662      	mov	r2, ip
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	4193      	sbcs	r3, r2
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	e720      	b.n	8000dde <__aeabi_fsub+0x152>
 8000f9c:	4663      	mov	r3, ip
 8000f9e:	000c      	movs	r4, r1
 8000fa0:	2501      	movs	r5, #1
 8000fa2:	1ac3      	subs	r3, r0, r3
 8000fa4:	e69b      	b.n	8000cde <__aeabi_fsub+0x52>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d099      	beq.n	8000ede <__aeabi_fsub+0x252>
 8000faa:	000c      	movs	r4, r1
 8000fac:	4646      	mov	r6, r8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	e6b7      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fb2:	4646      	mov	r6, r8
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	e6b4      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d000      	beq.n	8000fbe <__aeabi_fsub+0x332>
 8000fbc:	e73f      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000fbe:	2400      	movs	r4, #0
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	e6ae      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fc4:	fbffffff 	.word	0xfbffffff
 8000fc8:	7dffffff 	.word	0x7dffffff

08000fcc <__aeabi_ui2f>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	1e04      	subs	r4, r0, #0
 8000fd0:	d00e      	beq.n	8000ff0 <__aeabi_ui2f+0x24>
 8000fd2:	f001 ff59 	bl	8002e88 <__clzsi2>
 8000fd6:	239e      	movs	r3, #158	; 0x9e
 8000fd8:	0001      	movs	r1, r0
 8000fda:	1a1b      	subs	r3, r3, r0
 8000fdc:	2b96      	cmp	r3, #150	; 0x96
 8000fde:	dc0c      	bgt.n	8000ffa <__aeabi_ui2f+0x2e>
 8000fe0:	2808      	cmp	r0, #8
 8000fe2:	d02c      	beq.n	800103e <__aeabi_ui2f+0x72>
 8000fe4:	3908      	subs	r1, #8
 8000fe6:	408c      	lsls	r4, r1
 8000fe8:	0264      	lsls	r4, r4, #9
 8000fea:	0a64      	lsrs	r4, r4, #9
 8000fec:	b2d8      	uxtb	r0, r3
 8000fee:	e001      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	2400      	movs	r4, #0
 8000ff4:	05c0      	lsls	r0, r0, #23
 8000ff6:	4320      	orrs	r0, r4
 8000ff8:	bd70      	pop	{r4, r5, r6, pc}
 8000ffa:	2b99      	cmp	r3, #153	; 0x99
 8000ffc:	dd0a      	ble.n	8001014 <__aeabi_ui2f+0x48>
 8000ffe:	0002      	movs	r2, r0
 8001000:	0020      	movs	r0, r4
 8001002:	321b      	adds	r2, #27
 8001004:	4090      	lsls	r0, r2
 8001006:	0002      	movs	r2, r0
 8001008:	1e50      	subs	r0, r2, #1
 800100a:	4182      	sbcs	r2, r0
 800100c:	2005      	movs	r0, #5
 800100e:	1a40      	subs	r0, r0, r1
 8001010:	40c4      	lsrs	r4, r0
 8001012:	4314      	orrs	r4, r2
 8001014:	2905      	cmp	r1, #5
 8001016:	dc16      	bgt.n	8001046 <__aeabi_ui2f+0x7a>
 8001018:	0022      	movs	r2, r4
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <__aeabi_ui2f+0x8c>)
 800101c:	4002      	ands	r2, r0
 800101e:	0765      	lsls	r5, r4, #29
 8001020:	d009      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 8001022:	250f      	movs	r5, #15
 8001024:	402c      	ands	r4, r5
 8001026:	2c04      	cmp	r4, #4
 8001028:	d005      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 800102a:	3204      	adds	r2, #4
 800102c:	0154      	lsls	r4, r2, #5
 800102e:	d502      	bpl.n	8001036 <__aeabi_ui2f+0x6a>
 8001030:	239f      	movs	r3, #159	; 0x9f
 8001032:	4002      	ands	r2, r0
 8001034:	1a5b      	subs	r3, r3, r1
 8001036:	0192      	lsls	r2, r2, #6
 8001038:	0a54      	lsrs	r4, r2, #9
 800103a:	b2d8      	uxtb	r0, r3
 800103c:	e7da      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 800103e:	0264      	lsls	r4, r4, #9
 8001040:	2096      	movs	r0, #150	; 0x96
 8001042:	0a64      	lsrs	r4, r4, #9
 8001044:	e7d6      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 8001046:	1f4a      	subs	r2, r1, #5
 8001048:	4094      	lsls	r4, r2
 800104a:	0022      	movs	r2, r4
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <__aeabi_ui2f+0x8c>)
 800104e:	4002      	ands	r2, r0
 8001050:	0765      	lsls	r5, r4, #29
 8001052:	d0f0      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 8001054:	e7e5      	b.n	8001022 <__aeabi_ui2f+0x56>
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	fbffffff 	.word	0xfbffffff

0800105c <__aeabi_dadd>:
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	464f      	mov	r7, r9
 8001060:	4646      	mov	r6, r8
 8001062:	46d6      	mov	lr, sl
 8001064:	0004      	movs	r4, r0
 8001066:	b5c0      	push	{r6, r7, lr}
 8001068:	001f      	movs	r7, r3
 800106a:	030b      	lsls	r3, r1, #12
 800106c:	0010      	movs	r0, r2
 800106e:	004e      	lsls	r6, r1, #1
 8001070:	0a5b      	lsrs	r3, r3, #9
 8001072:	0fcd      	lsrs	r5, r1, #31
 8001074:	0f61      	lsrs	r1, r4, #29
 8001076:	007a      	lsls	r2, r7, #1
 8001078:	4319      	orrs	r1, r3
 800107a:	00e3      	lsls	r3, r4, #3
 800107c:	033c      	lsls	r4, r7, #12
 800107e:	0fff      	lsrs	r7, r7, #31
 8001080:	46bc      	mov	ip, r7
 8001082:	0a64      	lsrs	r4, r4, #9
 8001084:	0f47      	lsrs	r7, r0, #29
 8001086:	4327      	orrs	r7, r4
 8001088:	0d76      	lsrs	r6, r6, #21
 800108a:	0d52      	lsrs	r2, r2, #21
 800108c:	00c0      	lsls	r0, r0, #3
 800108e:	46b9      	mov	r9, r7
 8001090:	4680      	mov	r8, r0
 8001092:	1ab7      	subs	r7, r6, r2
 8001094:	4565      	cmp	r5, ip
 8001096:	d100      	bne.n	800109a <__aeabi_dadd+0x3e>
 8001098:	e09b      	b.n	80011d2 <__aeabi_dadd+0x176>
 800109a:	2f00      	cmp	r7, #0
 800109c:	dc00      	bgt.n	80010a0 <__aeabi_dadd+0x44>
 800109e:	e084      	b.n	80011aa <__aeabi_dadd+0x14e>
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dadd+0x4a>
 80010a4:	e0be      	b.n	8001224 <__aeabi_dadd+0x1c8>
 80010a6:	4ac8      	ldr	r2, [pc, #800]	; (80013c8 <__aeabi_dadd+0x36c>)
 80010a8:	4296      	cmp	r6, r2
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x52>
 80010ac:	e124      	b.n	80012f8 <__aeabi_dadd+0x29c>
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	464c      	mov	r4, r9
 80010b2:	0412      	lsls	r2, r2, #16
 80010b4:	4314      	orrs	r4, r2
 80010b6:	46a1      	mov	r9, r4
 80010b8:	2f38      	cmp	r7, #56	; 0x38
 80010ba:	dd00      	ble.n	80010be <__aeabi_dadd+0x62>
 80010bc:	e167      	b.n	800138e <__aeabi_dadd+0x332>
 80010be:	2f1f      	cmp	r7, #31
 80010c0:	dd00      	ble.n	80010c4 <__aeabi_dadd+0x68>
 80010c2:	e1d6      	b.n	8001472 <__aeabi_dadd+0x416>
 80010c4:	2220      	movs	r2, #32
 80010c6:	464c      	mov	r4, r9
 80010c8:	1bd2      	subs	r2, r2, r7
 80010ca:	4094      	lsls	r4, r2
 80010cc:	46a2      	mov	sl, r4
 80010ce:	4644      	mov	r4, r8
 80010d0:	40fc      	lsrs	r4, r7
 80010d2:	0020      	movs	r0, r4
 80010d4:	4654      	mov	r4, sl
 80010d6:	4304      	orrs	r4, r0
 80010d8:	4640      	mov	r0, r8
 80010da:	4090      	lsls	r0, r2
 80010dc:	1e42      	subs	r2, r0, #1
 80010de:	4190      	sbcs	r0, r2
 80010e0:	464a      	mov	r2, r9
 80010e2:	40fa      	lsrs	r2, r7
 80010e4:	4304      	orrs	r4, r0
 80010e6:	1a89      	subs	r1, r1, r2
 80010e8:	1b1c      	subs	r4, r3, r4
 80010ea:	42a3      	cmp	r3, r4
 80010ec:	4192      	sbcs	r2, r2
 80010ee:	4252      	negs	r2, r2
 80010f0:	1a8b      	subs	r3, r1, r2
 80010f2:	469a      	mov	sl, r3
 80010f4:	4653      	mov	r3, sl
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	d400      	bmi.n	80010fc <__aeabi_dadd+0xa0>
 80010fa:	e0d4      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80010fc:	4653      	mov	r3, sl
 80010fe:	025a      	lsls	r2, r3, #9
 8001100:	0a53      	lsrs	r3, r2, #9
 8001102:	469a      	mov	sl, r3
 8001104:	4653      	mov	r3, sl
 8001106:	2b00      	cmp	r3, #0
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0xb0>
 800110a:	e104      	b.n	8001316 <__aeabi_dadd+0x2ba>
 800110c:	4650      	mov	r0, sl
 800110e:	f001 febb 	bl	8002e88 <__clzsi2>
 8001112:	0003      	movs	r3, r0
 8001114:	3b08      	subs	r3, #8
 8001116:	2220      	movs	r2, #32
 8001118:	0020      	movs	r0, r4
 800111a:	1ad2      	subs	r2, r2, r3
 800111c:	4651      	mov	r1, sl
 800111e:	40d0      	lsrs	r0, r2
 8001120:	4099      	lsls	r1, r3
 8001122:	0002      	movs	r2, r0
 8001124:	409c      	lsls	r4, r3
 8001126:	430a      	orrs	r2, r1
 8001128:	42b3      	cmp	r3, r6
 800112a:	da00      	bge.n	800112e <__aeabi_dadd+0xd2>
 800112c:	e102      	b.n	8001334 <__aeabi_dadd+0x2d8>
 800112e:	1b9b      	subs	r3, r3, r6
 8001130:	1c59      	adds	r1, r3, #1
 8001132:	291f      	cmp	r1, #31
 8001134:	dd00      	ble.n	8001138 <__aeabi_dadd+0xdc>
 8001136:	e0a7      	b.n	8001288 <__aeabi_dadd+0x22c>
 8001138:	2320      	movs	r3, #32
 800113a:	0010      	movs	r0, r2
 800113c:	0026      	movs	r6, r4
 800113e:	1a5b      	subs	r3, r3, r1
 8001140:	409c      	lsls	r4, r3
 8001142:	4098      	lsls	r0, r3
 8001144:	40ce      	lsrs	r6, r1
 8001146:	40ca      	lsrs	r2, r1
 8001148:	1e63      	subs	r3, r4, #1
 800114a:	419c      	sbcs	r4, r3
 800114c:	4330      	orrs	r0, r6
 800114e:	4692      	mov	sl, r2
 8001150:	2600      	movs	r6, #0
 8001152:	4304      	orrs	r4, r0
 8001154:	0763      	lsls	r3, r4, #29
 8001156:	d009      	beq.n	800116c <__aeabi_dadd+0x110>
 8001158:	230f      	movs	r3, #15
 800115a:	4023      	ands	r3, r4
 800115c:	2b04      	cmp	r3, #4
 800115e:	d005      	beq.n	800116c <__aeabi_dadd+0x110>
 8001160:	1d23      	adds	r3, r4, #4
 8001162:	42a3      	cmp	r3, r4
 8001164:	41a4      	sbcs	r4, r4
 8001166:	4264      	negs	r4, r4
 8001168:	44a2      	add	sl, r4
 800116a:	001c      	movs	r4, r3
 800116c:	4653      	mov	r3, sl
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	d400      	bmi.n	8001174 <__aeabi_dadd+0x118>
 8001172:	e09b      	b.n	80012ac <__aeabi_dadd+0x250>
 8001174:	4b94      	ldr	r3, [pc, #592]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001176:	3601      	adds	r6, #1
 8001178:	429e      	cmp	r6, r3
 800117a:	d100      	bne.n	800117e <__aeabi_dadd+0x122>
 800117c:	e0b8      	b.n	80012f0 <__aeabi_dadd+0x294>
 800117e:	4653      	mov	r3, sl
 8001180:	4992      	ldr	r1, [pc, #584]	; (80013cc <__aeabi_dadd+0x370>)
 8001182:	08e4      	lsrs	r4, r4, #3
 8001184:	400b      	ands	r3, r1
 8001186:	0019      	movs	r1, r3
 8001188:	075b      	lsls	r3, r3, #29
 800118a:	4323      	orrs	r3, r4
 800118c:	0572      	lsls	r2, r6, #21
 800118e:	024c      	lsls	r4, r1, #9
 8001190:	0b24      	lsrs	r4, r4, #12
 8001192:	0d52      	lsrs	r2, r2, #21
 8001194:	0512      	lsls	r2, r2, #20
 8001196:	07ed      	lsls	r5, r5, #31
 8001198:	4322      	orrs	r2, r4
 800119a:	432a      	orrs	r2, r5
 800119c:	0018      	movs	r0, r3
 800119e:	0011      	movs	r1, r2
 80011a0:	bce0      	pop	{r5, r6, r7}
 80011a2:	46ba      	mov	sl, r7
 80011a4:	46b1      	mov	r9, r6
 80011a6:	46a8      	mov	r8, r5
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	2f00      	cmp	r7, #0
 80011ac:	d048      	beq.n	8001240 <__aeabi_dadd+0x1e4>
 80011ae:	1b97      	subs	r7, r2, r6
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	d000      	beq.n	80011b6 <__aeabi_dadd+0x15a>
 80011b4:	e10e      	b.n	80013d4 <__aeabi_dadd+0x378>
 80011b6:	000c      	movs	r4, r1
 80011b8:	431c      	orrs	r4, r3
 80011ba:	d100      	bne.n	80011be <__aeabi_dadd+0x162>
 80011bc:	e1b7      	b.n	800152e <__aeabi_dadd+0x4d2>
 80011be:	1e7c      	subs	r4, r7, #1
 80011c0:	2f01      	cmp	r7, #1
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x16a>
 80011c4:	e226      	b.n	8001614 <__aeabi_dadd+0x5b8>
 80011c6:	4d80      	ldr	r5, [pc, #512]	; (80013c8 <__aeabi_dadd+0x36c>)
 80011c8:	42af      	cmp	r7, r5
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x172>
 80011cc:	e1d5      	b.n	800157a <__aeabi_dadd+0x51e>
 80011ce:	0027      	movs	r7, r4
 80011d0:	e107      	b.n	80013e2 <__aeabi_dadd+0x386>
 80011d2:	2f00      	cmp	r7, #0
 80011d4:	dc00      	bgt.n	80011d8 <__aeabi_dadd+0x17c>
 80011d6:	e0b2      	b.n	800133e <__aeabi_dadd+0x2e2>
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d047      	beq.n	800126c <__aeabi_dadd+0x210>
 80011dc:	4a7a      	ldr	r2, [pc, #488]	; (80013c8 <__aeabi_dadd+0x36c>)
 80011de:	4296      	cmp	r6, r2
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x188>
 80011e2:	e089      	b.n	80012f8 <__aeabi_dadd+0x29c>
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	464c      	mov	r4, r9
 80011e8:	0412      	lsls	r2, r2, #16
 80011ea:	4314      	orrs	r4, r2
 80011ec:	46a1      	mov	r9, r4
 80011ee:	2f38      	cmp	r7, #56	; 0x38
 80011f0:	dc6b      	bgt.n	80012ca <__aeabi_dadd+0x26e>
 80011f2:	2f1f      	cmp	r7, #31
 80011f4:	dc00      	bgt.n	80011f8 <__aeabi_dadd+0x19c>
 80011f6:	e16e      	b.n	80014d6 <__aeabi_dadd+0x47a>
 80011f8:	003a      	movs	r2, r7
 80011fa:	4648      	mov	r0, r9
 80011fc:	3a20      	subs	r2, #32
 80011fe:	40d0      	lsrs	r0, r2
 8001200:	4684      	mov	ip, r0
 8001202:	2f20      	cmp	r7, #32
 8001204:	d007      	beq.n	8001216 <__aeabi_dadd+0x1ba>
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	4648      	mov	r0, r9
 800120a:	1bd2      	subs	r2, r2, r7
 800120c:	4090      	lsls	r0, r2
 800120e:	0002      	movs	r2, r0
 8001210:	4640      	mov	r0, r8
 8001212:	4310      	orrs	r0, r2
 8001214:	4680      	mov	r8, r0
 8001216:	4640      	mov	r0, r8
 8001218:	1e42      	subs	r2, r0, #1
 800121a:	4190      	sbcs	r0, r2
 800121c:	4662      	mov	r2, ip
 800121e:	0004      	movs	r4, r0
 8001220:	4314      	orrs	r4, r2
 8001222:	e057      	b.n	80012d4 <__aeabi_dadd+0x278>
 8001224:	464a      	mov	r2, r9
 8001226:	4302      	orrs	r2, r0
 8001228:	d100      	bne.n	800122c <__aeabi_dadd+0x1d0>
 800122a:	e103      	b.n	8001434 <__aeabi_dadd+0x3d8>
 800122c:	1e7a      	subs	r2, r7, #1
 800122e:	2f01      	cmp	r7, #1
 8001230:	d100      	bne.n	8001234 <__aeabi_dadd+0x1d8>
 8001232:	e193      	b.n	800155c <__aeabi_dadd+0x500>
 8001234:	4c64      	ldr	r4, [pc, #400]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001236:	42a7      	cmp	r7, r4
 8001238:	d100      	bne.n	800123c <__aeabi_dadd+0x1e0>
 800123a:	e18a      	b.n	8001552 <__aeabi_dadd+0x4f6>
 800123c:	0017      	movs	r7, r2
 800123e:	e73b      	b.n	80010b8 <__aeabi_dadd+0x5c>
 8001240:	4c63      	ldr	r4, [pc, #396]	; (80013d0 <__aeabi_dadd+0x374>)
 8001242:	1c72      	adds	r2, r6, #1
 8001244:	4222      	tst	r2, r4
 8001246:	d000      	beq.n	800124a <__aeabi_dadd+0x1ee>
 8001248:	e0e0      	b.n	800140c <__aeabi_dadd+0x3b0>
 800124a:	000a      	movs	r2, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	2e00      	cmp	r6, #0
 8001250:	d000      	beq.n	8001254 <__aeabi_dadd+0x1f8>
 8001252:	e174      	b.n	800153e <__aeabi_dadd+0x4e2>
 8001254:	2a00      	cmp	r2, #0
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x1fe>
 8001258:	e1d0      	b.n	80015fc <__aeabi_dadd+0x5a0>
 800125a:	464a      	mov	r2, r9
 800125c:	4302      	orrs	r2, r0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x206>
 8001260:	e1e3      	b.n	800162a <__aeabi_dadd+0x5ce>
 8001262:	074a      	lsls	r2, r1, #29
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	4313      	orrs	r3, r2
 8001268:	08c9      	lsrs	r1, r1, #3
 800126a:	e029      	b.n	80012c0 <__aeabi_dadd+0x264>
 800126c:	464a      	mov	r2, r9
 800126e:	4302      	orrs	r2, r0
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x218>
 8001272:	e17d      	b.n	8001570 <__aeabi_dadd+0x514>
 8001274:	1e7a      	subs	r2, r7, #1
 8001276:	2f01      	cmp	r7, #1
 8001278:	d100      	bne.n	800127c <__aeabi_dadd+0x220>
 800127a:	e0e0      	b.n	800143e <__aeabi_dadd+0x3e2>
 800127c:	4c52      	ldr	r4, [pc, #328]	; (80013c8 <__aeabi_dadd+0x36c>)
 800127e:	42a7      	cmp	r7, r4
 8001280:	d100      	bne.n	8001284 <__aeabi_dadd+0x228>
 8001282:	e166      	b.n	8001552 <__aeabi_dadd+0x4f6>
 8001284:	0017      	movs	r7, r2
 8001286:	e7b2      	b.n	80011ee <__aeabi_dadd+0x192>
 8001288:	0010      	movs	r0, r2
 800128a:	3b1f      	subs	r3, #31
 800128c:	40d8      	lsrs	r0, r3
 800128e:	2920      	cmp	r1, #32
 8001290:	d003      	beq.n	800129a <__aeabi_dadd+0x23e>
 8001292:	2340      	movs	r3, #64	; 0x40
 8001294:	1a5b      	subs	r3, r3, r1
 8001296:	409a      	lsls	r2, r3
 8001298:	4314      	orrs	r4, r2
 800129a:	1e63      	subs	r3, r4, #1
 800129c:	419c      	sbcs	r4, r3
 800129e:	2300      	movs	r3, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	469a      	mov	sl, r3
 80012a4:	4304      	orrs	r4, r0
 80012a6:	0763      	lsls	r3, r4, #29
 80012a8:	d000      	beq.n	80012ac <__aeabi_dadd+0x250>
 80012aa:	e755      	b.n	8001158 <__aeabi_dadd+0xfc>
 80012ac:	4652      	mov	r2, sl
 80012ae:	08e3      	lsrs	r3, r4, #3
 80012b0:	0752      	lsls	r2, r2, #29
 80012b2:	4313      	orrs	r3, r2
 80012b4:	4652      	mov	r2, sl
 80012b6:	0037      	movs	r7, r6
 80012b8:	08d1      	lsrs	r1, r2, #3
 80012ba:	4a43      	ldr	r2, [pc, #268]	; (80013c8 <__aeabi_dadd+0x36c>)
 80012bc:	4297      	cmp	r7, r2
 80012be:	d01f      	beq.n	8001300 <__aeabi_dadd+0x2a4>
 80012c0:	0309      	lsls	r1, r1, #12
 80012c2:	057a      	lsls	r2, r7, #21
 80012c4:	0b0c      	lsrs	r4, r1, #12
 80012c6:	0d52      	lsrs	r2, r2, #21
 80012c8:	e764      	b.n	8001194 <__aeabi_dadd+0x138>
 80012ca:	4642      	mov	r2, r8
 80012cc:	464c      	mov	r4, r9
 80012ce:	4314      	orrs	r4, r2
 80012d0:	1e62      	subs	r2, r4, #1
 80012d2:	4194      	sbcs	r4, r2
 80012d4:	18e4      	adds	r4, r4, r3
 80012d6:	429c      	cmp	r4, r3
 80012d8:	4192      	sbcs	r2, r2
 80012da:	4252      	negs	r2, r2
 80012dc:	4692      	mov	sl, r2
 80012de:	448a      	add	sl, r1
 80012e0:	4653      	mov	r3, sl
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	d5df      	bpl.n	80012a6 <__aeabi_dadd+0x24a>
 80012e6:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <__aeabi_dadd+0x36c>)
 80012e8:	3601      	adds	r6, #1
 80012ea:	429e      	cmp	r6, r3
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x294>
 80012ee:	e0b3      	b.n	8001458 <__aeabi_dadd+0x3fc>
 80012f0:	0032      	movs	r2, r6
 80012f2:	2400      	movs	r4, #0
 80012f4:	2300      	movs	r3, #0
 80012f6:	e74d      	b.n	8001194 <__aeabi_dadd+0x138>
 80012f8:	074a      	lsls	r2, r1, #29
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	08c9      	lsrs	r1, r1, #3
 8001300:	001a      	movs	r2, r3
 8001302:	430a      	orrs	r2, r1
 8001304:	d100      	bne.n	8001308 <__aeabi_dadd+0x2ac>
 8001306:	e200      	b.n	800170a <__aeabi_dadd+0x6ae>
 8001308:	2480      	movs	r4, #128	; 0x80
 800130a:	0324      	lsls	r4, r4, #12
 800130c:	430c      	orrs	r4, r1
 800130e:	0324      	lsls	r4, r4, #12
 8001310:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001312:	0b24      	lsrs	r4, r4, #12
 8001314:	e73e      	b.n	8001194 <__aeabi_dadd+0x138>
 8001316:	0020      	movs	r0, r4
 8001318:	f001 fdb6 	bl	8002e88 <__clzsi2>
 800131c:	0003      	movs	r3, r0
 800131e:	3318      	adds	r3, #24
 8001320:	2b1f      	cmp	r3, #31
 8001322:	dc00      	bgt.n	8001326 <__aeabi_dadd+0x2ca>
 8001324:	e6f7      	b.n	8001116 <__aeabi_dadd+0xba>
 8001326:	0022      	movs	r2, r4
 8001328:	3808      	subs	r0, #8
 800132a:	4082      	lsls	r2, r0
 800132c:	2400      	movs	r4, #0
 800132e:	42b3      	cmp	r3, r6
 8001330:	db00      	blt.n	8001334 <__aeabi_dadd+0x2d8>
 8001332:	e6fc      	b.n	800112e <__aeabi_dadd+0xd2>
 8001334:	1af6      	subs	r6, r6, r3
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <__aeabi_dadd+0x370>)
 8001338:	401a      	ands	r2, r3
 800133a:	4692      	mov	sl, r2
 800133c:	e70a      	b.n	8001154 <__aeabi_dadd+0xf8>
 800133e:	2f00      	cmp	r7, #0
 8001340:	d02b      	beq.n	800139a <__aeabi_dadd+0x33e>
 8001342:	1b97      	subs	r7, r2, r6
 8001344:	2e00      	cmp	r6, #0
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x2ee>
 8001348:	e0b8      	b.n	80014bc <__aeabi_dadd+0x460>
 800134a:	4c1f      	ldr	r4, [pc, #124]	; (80013c8 <__aeabi_dadd+0x36c>)
 800134c:	42a2      	cmp	r2, r4
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0x2f6>
 8001350:	e11c      	b.n	800158c <__aeabi_dadd+0x530>
 8001352:	2480      	movs	r4, #128	; 0x80
 8001354:	0424      	lsls	r4, r4, #16
 8001356:	4321      	orrs	r1, r4
 8001358:	2f38      	cmp	r7, #56	; 0x38
 800135a:	dd00      	ble.n	800135e <__aeabi_dadd+0x302>
 800135c:	e11e      	b.n	800159c <__aeabi_dadd+0x540>
 800135e:	2f1f      	cmp	r7, #31
 8001360:	dd00      	ble.n	8001364 <__aeabi_dadd+0x308>
 8001362:	e19e      	b.n	80016a2 <__aeabi_dadd+0x646>
 8001364:	2620      	movs	r6, #32
 8001366:	000c      	movs	r4, r1
 8001368:	1bf6      	subs	r6, r6, r7
 800136a:	0018      	movs	r0, r3
 800136c:	40b3      	lsls	r3, r6
 800136e:	40b4      	lsls	r4, r6
 8001370:	40f8      	lsrs	r0, r7
 8001372:	1e5e      	subs	r6, r3, #1
 8001374:	41b3      	sbcs	r3, r6
 8001376:	40f9      	lsrs	r1, r7
 8001378:	4304      	orrs	r4, r0
 800137a:	431c      	orrs	r4, r3
 800137c:	4489      	add	r9, r1
 800137e:	4444      	add	r4, r8
 8001380:	4544      	cmp	r4, r8
 8001382:	419b      	sbcs	r3, r3
 8001384:	425b      	negs	r3, r3
 8001386:	444b      	add	r3, r9
 8001388:	469a      	mov	sl, r3
 800138a:	0016      	movs	r6, r2
 800138c:	e7a8      	b.n	80012e0 <__aeabi_dadd+0x284>
 800138e:	4642      	mov	r2, r8
 8001390:	464c      	mov	r4, r9
 8001392:	4314      	orrs	r4, r2
 8001394:	1e62      	subs	r2, r4, #1
 8001396:	4194      	sbcs	r4, r2
 8001398:	e6a6      	b.n	80010e8 <__aeabi_dadd+0x8c>
 800139a:	4c0d      	ldr	r4, [pc, #52]	; (80013d0 <__aeabi_dadd+0x374>)
 800139c:	1c72      	adds	r2, r6, #1
 800139e:	4222      	tst	r2, r4
 80013a0:	d000      	beq.n	80013a4 <__aeabi_dadd+0x348>
 80013a2:	e0a8      	b.n	80014f6 <__aeabi_dadd+0x49a>
 80013a4:	000a      	movs	r2, r1
 80013a6:	431a      	orrs	r2, r3
 80013a8:	2e00      	cmp	r6, #0
 80013aa:	d000      	beq.n	80013ae <__aeabi_dadd+0x352>
 80013ac:	e10a      	b.n	80015c4 <__aeabi_dadd+0x568>
 80013ae:	2a00      	cmp	r2, #0
 80013b0:	d100      	bne.n	80013b4 <__aeabi_dadd+0x358>
 80013b2:	e15e      	b.n	8001672 <__aeabi_dadd+0x616>
 80013b4:	464a      	mov	r2, r9
 80013b6:	4302      	orrs	r2, r0
 80013b8:	d000      	beq.n	80013bc <__aeabi_dadd+0x360>
 80013ba:	e161      	b.n	8001680 <__aeabi_dadd+0x624>
 80013bc:	074a      	lsls	r2, r1, #29
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	08c9      	lsrs	r1, r1, #3
 80013c4:	e77c      	b.n	80012c0 <__aeabi_dadd+0x264>
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff
 80013cc:	ff7fffff 	.word	0xff7fffff
 80013d0:	000007fe 	.word	0x000007fe
 80013d4:	4ccf      	ldr	r4, [pc, #828]	; (8001714 <__aeabi_dadd+0x6b8>)
 80013d6:	42a2      	cmp	r2, r4
 80013d8:	d100      	bne.n	80013dc <__aeabi_dadd+0x380>
 80013da:	e0ce      	b.n	800157a <__aeabi_dadd+0x51e>
 80013dc:	2480      	movs	r4, #128	; 0x80
 80013de:	0424      	lsls	r4, r4, #16
 80013e0:	4321      	orrs	r1, r4
 80013e2:	2f38      	cmp	r7, #56	; 0x38
 80013e4:	dc5b      	bgt.n	800149e <__aeabi_dadd+0x442>
 80013e6:	2f1f      	cmp	r7, #31
 80013e8:	dd00      	ble.n	80013ec <__aeabi_dadd+0x390>
 80013ea:	e0dc      	b.n	80015a6 <__aeabi_dadd+0x54a>
 80013ec:	2520      	movs	r5, #32
 80013ee:	000c      	movs	r4, r1
 80013f0:	1bed      	subs	r5, r5, r7
 80013f2:	001e      	movs	r6, r3
 80013f4:	40ab      	lsls	r3, r5
 80013f6:	40ac      	lsls	r4, r5
 80013f8:	40fe      	lsrs	r6, r7
 80013fa:	1e5d      	subs	r5, r3, #1
 80013fc:	41ab      	sbcs	r3, r5
 80013fe:	4334      	orrs	r4, r6
 8001400:	40f9      	lsrs	r1, r7
 8001402:	431c      	orrs	r4, r3
 8001404:	464b      	mov	r3, r9
 8001406:	1a5b      	subs	r3, r3, r1
 8001408:	4699      	mov	r9, r3
 800140a:	e04c      	b.n	80014a6 <__aeabi_dadd+0x44a>
 800140c:	464a      	mov	r2, r9
 800140e:	1a1c      	subs	r4, r3, r0
 8001410:	1a88      	subs	r0, r1, r2
 8001412:	42a3      	cmp	r3, r4
 8001414:	4192      	sbcs	r2, r2
 8001416:	4252      	negs	r2, r2
 8001418:	4692      	mov	sl, r2
 800141a:	0002      	movs	r2, r0
 800141c:	4650      	mov	r0, sl
 800141e:	1a12      	subs	r2, r2, r0
 8001420:	4692      	mov	sl, r2
 8001422:	0212      	lsls	r2, r2, #8
 8001424:	d478      	bmi.n	8001518 <__aeabi_dadd+0x4bc>
 8001426:	4653      	mov	r3, sl
 8001428:	4323      	orrs	r3, r4
 800142a:	d000      	beq.n	800142e <__aeabi_dadd+0x3d2>
 800142c:	e66a      	b.n	8001104 <__aeabi_dadd+0xa8>
 800142e:	2100      	movs	r1, #0
 8001430:	2500      	movs	r5, #0
 8001432:	e745      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001434:	074a      	lsls	r2, r1, #29
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	4313      	orrs	r3, r2
 800143a:	08c9      	lsrs	r1, r1, #3
 800143c:	e73d      	b.n	80012ba <__aeabi_dadd+0x25e>
 800143e:	181c      	adds	r4, r3, r0
 8001440:	429c      	cmp	r4, r3
 8001442:	419b      	sbcs	r3, r3
 8001444:	4449      	add	r1, r9
 8001446:	468a      	mov	sl, r1
 8001448:	425b      	negs	r3, r3
 800144a:	449a      	add	sl, r3
 800144c:	4653      	mov	r3, sl
 800144e:	2601      	movs	r6, #1
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	d400      	bmi.n	8001456 <__aeabi_dadd+0x3fa>
 8001454:	e727      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001456:	2602      	movs	r6, #2
 8001458:	4652      	mov	r2, sl
 800145a:	4baf      	ldr	r3, [pc, #700]	; (8001718 <__aeabi_dadd+0x6bc>)
 800145c:	2101      	movs	r1, #1
 800145e:	401a      	ands	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	4021      	ands	r1, r4
 8001464:	0862      	lsrs	r2, r4, #1
 8001466:	430a      	orrs	r2, r1
 8001468:	07dc      	lsls	r4, r3, #31
 800146a:	085b      	lsrs	r3, r3, #1
 800146c:	469a      	mov	sl, r3
 800146e:	4314      	orrs	r4, r2
 8001470:	e670      	b.n	8001154 <__aeabi_dadd+0xf8>
 8001472:	003a      	movs	r2, r7
 8001474:	464c      	mov	r4, r9
 8001476:	3a20      	subs	r2, #32
 8001478:	40d4      	lsrs	r4, r2
 800147a:	46a4      	mov	ip, r4
 800147c:	2f20      	cmp	r7, #32
 800147e:	d007      	beq.n	8001490 <__aeabi_dadd+0x434>
 8001480:	2240      	movs	r2, #64	; 0x40
 8001482:	4648      	mov	r0, r9
 8001484:	1bd2      	subs	r2, r2, r7
 8001486:	4090      	lsls	r0, r2
 8001488:	0002      	movs	r2, r0
 800148a:	4640      	mov	r0, r8
 800148c:	4310      	orrs	r0, r2
 800148e:	4680      	mov	r8, r0
 8001490:	4640      	mov	r0, r8
 8001492:	1e42      	subs	r2, r0, #1
 8001494:	4190      	sbcs	r0, r2
 8001496:	4662      	mov	r2, ip
 8001498:	0004      	movs	r4, r0
 800149a:	4314      	orrs	r4, r2
 800149c:	e624      	b.n	80010e8 <__aeabi_dadd+0x8c>
 800149e:	4319      	orrs	r1, r3
 80014a0:	000c      	movs	r4, r1
 80014a2:	1e63      	subs	r3, r4, #1
 80014a4:	419c      	sbcs	r4, r3
 80014a6:	4643      	mov	r3, r8
 80014a8:	1b1c      	subs	r4, r3, r4
 80014aa:	45a0      	cmp	r8, r4
 80014ac:	419b      	sbcs	r3, r3
 80014ae:	4649      	mov	r1, r9
 80014b0:	425b      	negs	r3, r3
 80014b2:	1acb      	subs	r3, r1, r3
 80014b4:	469a      	mov	sl, r3
 80014b6:	4665      	mov	r5, ip
 80014b8:	0016      	movs	r6, r2
 80014ba:	e61b      	b.n	80010f4 <__aeabi_dadd+0x98>
 80014bc:	000c      	movs	r4, r1
 80014be:	431c      	orrs	r4, r3
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dadd+0x468>
 80014c2:	e0c7      	b.n	8001654 <__aeabi_dadd+0x5f8>
 80014c4:	1e7c      	subs	r4, r7, #1
 80014c6:	2f01      	cmp	r7, #1
 80014c8:	d100      	bne.n	80014cc <__aeabi_dadd+0x470>
 80014ca:	e0f9      	b.n	80016c0 <__aeabi_dadd+0x664>
 80014cc:	4e91      	ldr	r6, [pc, #580]	; (8001714 <__aeabi_dadd+0x6b8>)
 80014ce:	42b7      	cmp	r7, r6
 80014d0:	d05c      	beq.n	800158c <__aeabi_dadd+0x530>
 80014d2:	0027      	movs	r7, r4
 80014d4:	e740      	b.n	8001358 <__aeabi_dadd+0x2fc>
 80014d6:	2220      	movs	r2, #32
 80014d8:	464c      	mov	r4, r9
 80014da:	4640      	mov	r0, r8
 80014dc:	1bd2      	subs	r2, r2, r7
 80014de:	4094      	lsls	r4, r2
 80014e0:	40f8      	lsrs	r0, r7
 80014e2:	4304      	orrs	r4, r0
 80014e4:	4640      	mov	r0, r8
 80014e6:	4090      	lsls	r0, r2
 80014e8:	1e42      	subs	r2, r0, #1
 80014ea:	4190      	sbcs	r0, r2
 80014ec:	464a      	mov	r2, r9
 80014ee:	40fa      	lsrs	r2, r7
 80014f0:	4304      	orrs	r4, r0
 80014f2:	1889      	adds	r1, r1, r2
 80014f4:	e6ee      	b.n	80012d4 <__aeabi_dadd+0x278>
 80014f6:	4c87      	ldr	r4, [pc, #540]	; (8001714 <__aeabi_dadd+0x6b8>)
 80014f8:	42a2      	cmp	r2, r4
 80014fa:	d100      	bne.n	80014fe <__aeabi_dadd+0x4a2>
 80014fc:	e6f9      	b.n	80012f2 <__aeabi_dadd+0x296>
 80014fe:	1818      	adds	r0, r3, r0
 8001500:	4298      	cmp	r0, r3
 8001502:	419b      	sbcs	r3, r3
 8001504:	4449      	add	r1, r9
 8001506:	425b      	negs	r3, r3
 8001508:	18cb      	adds	r3, r1, r3
 800150a:	07dc      	lsls	r4, r3, #31
 800150c:	0840      	lsrs	r0, r0, #1
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	469a      	mov	sl, r3
 8001512:	0016      	movs	r6, r2
 8001514:	4304      	orrs	r4, r0
 8001516:	e6c6      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001518:	4642      	mov	r2, r8
 800151a:	1ad4      	subs	r4, r2, r3
 800151c:	45a0      	cmp	r8, r4
 800151e:	4180      	sbcs	r0, r0
 8001520:	464b      	mov	r3, r9
 8001522:	4240      	negs	r0, r0
 8001524:	1a59      	subs	r1, r3, r1
 8001526:	1a0b      	subs	r3, r1, r0
 8001528:	469a      	mov	sl, r3
 800152a:	4665      	mov	r5, ip
 800152c:	e5ea      	b.n	8001104 <__aeabi_dadd+0xa8>
 800152e:	464b      	mov	r3, r9
 8001530:	464a      	mov	r2, r9
 8001532:	08c0      	lsrs	r0, r0, #3
 8001534:	075b      	lsls	r3, r3, #29
 8001536:	4665      	mov	r5, ip
 8001538:	4303      	orrs	r3, r0
 800153a:	08d1      	lsrs	r1, r2, #3
 800153c:	e6bd      	b.n	80012ba <__aeabi_dadd+0x25e>
 800153e:	2a00      	cmp	r2, #0
 8001540:	d000      	beq.n	8001544 <__aeabi_dadd+0x4e8>
 8001542:	e08e      	b.n	8001662 <__aeabi_dadd+0x606>
 8001544:	464b      	mov	r3, r9
 8001546:	4303      	orrs	r3, r0
 8001548:	d117      	bne.n	800157a <__aeabi_dadd+0x51e>
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	2500      	movs	r5, #0
 800154e:	0309      	lsls	r1, r1, #12
 8001550:	e6da      	b.n	8001308 <__aeabi_dadd+0x2ac>
 8001552:	074a      	lsls	r2, r1, #29
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	4313      	orrs	r3, r2
 8001558:	08c9      	lsrs	r1, r1, #3
 800155a:	e6d1      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800155c:	1a1c      	subs	r4, r3, r0
 800155e:	464a      	mov	r2, r9
 8001560:	42a3      	cmp	r3, r4
 8001562:	419b      	sbcs	r3, r3
 8001564:	1a89      	subs	r1, r1, r2
 8001566:	425b      	negs	r3, r3
 8001568:	1acb      	subs	r3, r1, r3
 800156a:	469a      	mov	sl, r3
 800156c:	2601      	movs	r6, #1
 800156e:	e5c1      	b.n	80010f4 <__aeabi_dadd+0x98>
 8001570:	074a      	lsls	r2, r1, #29
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	4313      	orrs	r3, r2
 8001576:	08c9      	lsrs	r1, r1, #3
 8001578:	e69f      	b.n	80012ba <__aeabi_dadd+0x25e>
 800157a:	4643      	mov	r3, r8
 800157c:	08d8      	lsrs	r0, r3, #3
 800157e:	464b      	mov	r3, r9
 8001580:	464a      	mov	r2, r9
 8001582:	075b      	lsls	r3, r3, #29
 8001584:	4665      	mov	r5, ip
 8001586:	4303      	orrs	r3, r0
 8001588:	08d1      	lsrs	r1, r2, #3
 800158a:	e6b9      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800158c:	4643      	mov	r3, r8
 800158e:	08d8      	lsrs	r0, r3, #3
 8001590:	464b      	mov	r3, r9
 8001592:	464a      	mov	r2, r9
 8001594:	075b      	lsls	r3, r3, #29
 8001596:	4303      	orrs	r3, r0
 8001598:	08d1      	lsrs	r1, r2, #3
 800159a:	e6b1      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800159c:	4319      	orrs	r1, r3
 800159e:	000c      	movs	r4, r1
 80015a0:	1e63      	subs	r3, r4, #1
 80015a2:	419c      	sbcs	r4, r3
 80015a4:	e6eb      	b.n	800137e <__aeabi_dadd+0x322>
 80015a6:	003c      	movs	r4, r7
 80015a8:	000d      	movs	r5, r1
 80015aa:	3c20      	subs	r4, #32
 80015ac:	40e5      	lsrs	r5, r4
 80015ae:	2f20      	cmp	r7, #32
 80015b0:	d003      	beq.n	80015ba <__aeabi_dadd+0x55e>
 80015b2:	2440      	movs	r4, #64	; 0x40
 80015b4:	1be4      	subs	r4, r4, r7
 80015b6:	40a1      	lsls	r1, r4
 80015b8:	430b      	orrs	r3, r1
 80015ba:	001c      	movs	r4, r3
 80015bc:	1e63      	subs	r3, r4, #1
 80015be:	419c      	sbcs	r4, r3
 80015c0:	432c      	orrs	r4, r5
 80015c2:	e770      	b.n	80014a6 <__aeabi_dadd+0x44a>
 80015c4:	2a00      	cmp	r2, #0
 80015c6:	d0e1      	beq.n	800158c <__aeabi_dadd+0x530>
 80015c8:	464a      	mov	r2, r9
 80015ca:	4302      	orrs	r2, r0
 80015cc:	d0c1      	beq.n	8001552 <__aeabi_dadd+0x4f6>
 80015ce:	074a      	lsls	r2, r1, #29
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	08c9      	lsrs	r1, r1, #3
 80015d8:	0312      	lsls	r2, r2, #12
 80015da:	4211      	tst	r1, r2
 80015dc:	d008      	beq.n	80015f0 <__aeabi_dadd+0x594>
 80015de:	4648      	mov	r0, r9
 80015e0:	08c4      	lsrs	r4, r0, #3
 80015e2:	4214      	tst	r4, r2
 80015e4:	d104      	bne.n	80015f0 <__aeabi_dadd+0x594>
 80015e6:	4643      	mov	r3, r8
 80015e8:	0021      	movs	r1, r4
 80015ea:	08db      	lsrs	r3, r3, #3
 80015ec:	0742      	lsls	r2, r0, #29
 80015ee:	4313      	orrs	r3, r2
 80015f0:	0f5a      	lsrs	r2, r3, #29
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	0752      	lsls	r2, r2, #29
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	e681      	b.n	8001300 <__aeabi_dadd+0x2a4>
 80015fc:	464b      	mov	r3, r9
 80015fe:	4303      	orrs	r3, r0
 8001600:	d100      	bne.n	8001604 <__aeabi_dadd+0x5a8>
 8001602:	e714      	b.n	800142e <__aeabi_dadd+0x3d2>
 8001604:	464b      	mov	r3, r9
 8001606:	464a      	mov	r2, r9
 8001608:	08c0      	lsrs	r0, r0, #3
 800160a:	075b      	lsls	r3, r3, #29
 800160c:	4665      	mov	r5, ip
 800160e:	4303      	orrs	r3, r0
 8001610:	08d1      	lsrs	r1, r2, #3
 8001612:	e655      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001614:	1ac4      	subs	r4, r0, r3
 8001616:	45a0      	cmp	r8, r4
 8001618:	4180      	sbcs	r0, r0
 800161a:	464b      	mov	r3, r9
 800161c:	4240      	negs	r0, r0
 800161e:	1a59      	subs	r1, r3, r1
 8001620:	1a0b      	subs	r3, r1, r0
 8001622:	469a      	mov	sl, r3
 8001624:	4665      	mov	r5, ip
 8001626:	2601      	movs	r6, #1
 8001628:	e564      	b.n	80010f4 <__aeabi_dadd+0x98>
 800162a:	1a1c      	subs	r4, r3, r0
 800162c:	464a      	mov	r2, r9
 800162e:	42a3      	cmp	r3, r4
 8001630:	4180      	sbcs	r0, r0
 8001632:	1a8a      	subs	r2, r1, r2
 8001634:	4240      	negs	r0, r0
 8001636:	1a12      	subs	r2, r2, r0
 8001638:	4692      	mov	sl, r2
 800163a:	0212      	lsls	r2, r2, #8
 800163c:	d549      	bpl.n	80016d2 <__aeabi_dadd+0x676>
 800163e:	4642      	mov	r2, r8
 8001640:	1ad4      	subs	r4, r2, r3
 8001642:	45a0      	cmp	r8, r4
 8001644:	4180      	sbcs	r0, r0
 8001646:	464b      	mov	r3, r9
 8001648:	4240      	negs	r0, r0
 800164a:	1a59      	subs	r1, r3, r1
 800164c:	1a0b      	subs	r3, r1, r0
 800164e:	469a      	mov	sl, r3
 8001650:	4665      	mov	r5, ip
 8001652:	e57f      	b.n	8001154 <__aeabi_dadd+0xf8>
 8001654:	464b      	mov	r3, r9
 8001656:	464a      	mov	r2, r9
 8001658:	08c0      	lsrs	r0, r0, #3
 800165a:	075b      	lsls	r3, r3, #29
 800165c:	4303      	orrs	r3, r0
 800165e:	08d1      	lsrs	r1, r2, #3
 8001660:	e62b      	b.n	80012ba <__aeabi_dadd+0x25e>
 8001662:	464a      	mov	r2, r9
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	4302      	orrs	r2, r0
 8001668:	d138      	bne.n	80016dc <__aeabi_dadd+0x680>
 800166a:	074a      	lsls	r2, r1, #29
 800166c:	4313      	orrs	r3, r2
 800166e:	08c9      	lsrs	r1, r1, #3
 8001670:	e646      	b.n	8001300 <__aeabi_dadd+0x2a4>
 8001672:	464b      	mov	r3, r9
 8001674:	464a      	mov	r2, r9
 8001676:	08c0      	lsrs	r0, r0, #3
 8001678:	075b      	lsls	r3, r3, #29
 800167a:	4303      	orrs	r3, r0
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	e61f      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001680:	181c      	adds	r4, r3, r0
 8001682:	429c      	cmp	r4, r3
 8001684:	419b      	sbcs	r3, r3
 8001686:	4449      	add	r1, r9
 8001688:	468a      	mov	sl, r1
 800168a:	425b      	negs	r3, r3
 800168c:	449a      	add	sl, r3
 800168e:	4653      	mov	r3, sl
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	d400      	bmi.n	8001696 <__aeabi_dadd+0x63a>
 8001694:	e607      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001696:	4652      	mov	r2, sl
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <__aeabi_dadd+0x6bc>)
 800169a:	2601      	movs	r6, #1
 800169c:	401a      	ands	r2, r3
 800169e:	4692      	mov	sl, r2
 80016a0:	e601      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80016a2:	003c      	movs	r4, r7
 80016a4:	000e      	movs	r6, r1
 80016a6:	3c20      	subs	r4, #32
 80016a8:	40e6      	lsrs	r6, r4
 80016aa:	2f20      	cmp	r7, #32
 80016ac:	d003      	beq.n	80016b6 <__aeabi_dadd+0x65a>
 80016ae:	2440      	movs	r4, #64	; 0x40
 80016b0:	1be4      	subs	r4, r4, r7
 80016b2:	40a1      	lsls	r1, r4
 80016b4:	430b      	orrs	r3, r1
 80016b6:	001c      	movs	r4, r3
 80016b8:	1e63      	subs	r3, r4, #1
 80016ba:	419c      	sbcs	r4, r3
 80016bc:	4334      	orrs	r4, r6
 80016be:	e65e      	b.n	800137e <__aeabi_dadd+0x322>
 80016c0:	4443      	add	r3, r8
 80016c2:	4283      	cmp	r3, r0
 80016c4:	4180      	sbcs	r0, r0
 80016c6:	4449      	add	r1, r9
 80016c8:	468a      	mov	sl, r1
 80016ca:	4240      	negs	r0, r0
 80016cc:	001c      	movs	r4, r3
 80016ce:	4482      	add	sl, r0
 80016d0:	e6bc      	b.n	800144c <__aeabi_dadd+0x3f0>
 80016d2:	4653      	mov	r3, sl
 80016d4:	4323      	orrs	r3, r4
 80016d6:	d100      	bne.n	80016da <__aeabi_dadd+0x67e>
 80016d8:	e6a9      	b.n	800142e <__aeabi_dadd+0x3d2>
 80016da:	e5e4      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80016dc:	074a      	lsls	r2, r1, #29
 80016de:	4313      	orrs	r3, r2
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	08c9      	lsrs	r1, r1, #3
 80016e4:	0312      	lsls	r2, r2, #12
 80016e6:	4211      	tst	r1, r2
 80016e8:	d009      	beq.n	80016fe <__aeabi_dadd+0x6a2>
 80016ea:	4648      	mov	r0, r9
 80016ec:	08c4      	lsrs	r4, r0, #3
 80016ee:	4214      	tst	r4, r2
 80016f0:	d105      	bne.n	80016fe <__aeabi_dadd+0x6a2>
 80016f2:	4643      	mov	r3, r8
 80016f4:	4665      	mov	r5, ip
 80016f6:	0021      	movs	r1, r4
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	0742      	lsls	r2, r0, #29
 80016fc:	4313      	orrs	r3, r2
 80016fe:	0f5a      	lsrs	r2, r3, #29
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	0752      	lsls	r2, r2, #29
 8001706:	4313      	orrs	r3, r2
 8001708:	e5fa      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800170a:	2300      	movs	r3, #0
 800170c:	4a01      	ldr	r2, [pc, #4]	; (8001714 <__aeabi_dadd+0x6b8>)
 800170e:	001c      	movs	r4, r3
 8001710:	e540      	b.n	8001194 <__aeabi_dadd+0x138>
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	000007ff 	.word	0x000007ff
 8001718:	ff7fffff 	.word	0xff7fffff

0800171c <__aeabi_ddiv>:
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	4657      	mov	r7, sl
 8001720:	464e      	mov	r6, r9
 8001722:	4645      	mov	r5, r8
 8001724:	46de      	mov	lr, fp
 8001726:	b5e0      	push	{r5, r6, r7, lr}
 8001728:	030c      	lsls	r4, r1, #12
 800172a:	001f      	movs	r7, r3
 800172c:	004b      	lsls	r3, r1, #1
 800172e:	4681      	mov	r9, r0
 8001730:	4692      	mov	sl, r2
 8001732:	0005      	movs	r5, r0
 8001734:	b085      	sub	sp, #20
 8001736:	0b24      	lsrs	r4, r4, #12
 8001738:	0d5b      	lsrs	r3, r3, #21
 800173a:	0fce      	lsrs	r6, r1, #31
 800173c:	2b00      	cmp	r3, #0
 800173e:	d100      	bne.n	8001742 <__aeabi_ddiv+0x26>
 8001740:	e152      	b.n	80019e8 <__aeabi_ddiv+0x2cc>
 8001742:	4ad2      	ldr	r2, [pc, #840]	; (8001a8c <__aeabi_ddiv+0x370>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d100      	bne.n	800174a <__aeabi_ddiv+0x2e>
 8001748:	e16e      	b.n	8001a28 <__aeabi_ddiv+0x30c>
 800174a:	0f42      	lsrs	r2, r0, #29
 800174c:	00e4      	lsls	r4, r4, #3
 800174e:	4314      	orrs	r4, r2
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	0412      	lsls	r2, r2, #16
 8001754:	4322      	orrs	r2, r4
 8001756:	4690      	mov	r8, r2
 8001758:	4acd      	ldr	r2, [pc, #820]	; (8001a90 <__aeabi_ddiv+0x374>)
 800175a:	00c5      	lsls	r5, r0, #3
 800175c:	4693      	mov	fp, r2
 800175e:	449b      	add	fp, r3
 8001760:	2300      	movs	r3, #0
 8001762:	4699      	mov	r9, r3
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	033c      	lsls	r4, r7, #12
 8001768:	007b      	lsls	r3, r7, #1
 800176a:	4650      	mov	r0, sl
 800176c:	0b24      	lsrs	r4, r4, #12
 800176e:	0d5b      	lsrs	r3, r3, #21
 8001770:	0fff      	lsrs	r7, r7, #31
 8001772:	2b00      	cmp	r3, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_ddiv+0x5c>
 8001776:	e11a      	b.n	80019ae <__aeabi_ddiv+0x292>
 8001778:	4ac4      	ldr	r2, [pc, #784]	; (8001a8c <__aeabi_ddiv+0x370>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d100      	bne.n	8001780 <__aeabi_ddiv+0x64>
 800177e:	e15e      	b.n	8001a3e <__aeabi_ddiv+0x322>
 8001780:	0f42      	lsrs	r2, r0, #29
 8001782:	00e4      	lsls	r4, r4, #3
 8001784:	4322      	orrs	r2, r4
 8001786:	2480      	movs	r4, #128	; 0x80
 8001788:	0424      	lsls	r4, r4, #16
 800178a:	4314      	orrs	r4, r2
 800178c:	4ac0      	ldr	r2, [pc, #768]	; (8001a90 <__aeabi_ddiv+0x374>)
 800178e:	00c1      	lsls	r1, r0, #3
 8001790:	4694      	mov	ip, r2
 8001792:	465a      	mov	r2, fp
 8001794:	4463      	add	r3, ip
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	469b      	mov	fp, r3
 800179a:	2000      	movs	r0, #0
 800179c:	0033      	movs	r3, r6
 800179e:	407b      	eors	r3, r7
 80017a0:	469a      	mov	sl, r3
 80017a2:	464b      	mov	r3, r9
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d827      	bhi.n	80017f8 <__aeabi_ddiv+0xdc>
 80017a8:	4aba      	ldr	r2, [pc, #744]	; (8001a94 <__aeabi_ddiv+0x378>)
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	58d3      	ldr	r3, [r2, r3]
 80017ae:	469f      	mov	pc, r3
 80017b0:	46b2      	mov	sl, r6
 80017b2:	9b00      	ldr	r3, [sp, #0]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d016      	beq.n	80017e6 <__aeabi_ddiv+0xca>
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d100      	bne.n	80017be <__aeabi_ddiv+0xa2>
 80017bc:	e287      	b.n	8001cce <__aeabi_ddiv+0x5b2>
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d000      	beq.n	80017c4 <__aeabi_ddiv+0xa8>
 80017c2:	e0d5      	b.n	8001970 <__aeabi_ddiv+0x254>
 80017c4:	2300      	movs	r3, #0
 80017c6:	2200      	movs	r2, #0
 80017c8:	2500      	movs	r5, #0
 80017ca:	051b      	lsls	r3, r3, #20
 80017cc:	4313      	orrs	r3, r2
 80017ce:	4652      	mov	r2, sl
 80017d0:	07d2      	lsls	r2, r2, #31
 80017d2:	4313      	orrs	r3, r2
 80017d4:	0028      	movs	r0, r5
 80017d6:	0019      	movs	r1, r3
 80017d8:	b005      	add	sp, #20
 80017da:	bcf0      	pop	{r4, r5, r6, r7}
 80017dc:	46bb      	mov	fp, r7
 80017de:	46b2      	mov	sl, r6
 80017e0:	46a9      	mov	r9, r5
 80017e2:	46a0      	mov	r8, r4
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e6:	2200      	movs	r2, #0
 80017e8:	2500      	movs	r5, #0
 80017ea:	4ba8      	ldr	r3, [pc, #672]	; (8001a8c <__aeabi_ddiv+0x370>)
 80017ec:	e7ed      	b.n	80017ca <__aeabi_ddiv+0xae>
 80017ee:	46ba      	mov	sl, r7
 80017f0:	46a0      	mov	r8, r4
 80017f2:	000d      	movs	r5, r1
 80017f4:	9000      	str	r0, [sp, #0]
 80017f6:	e7dc      	b.n	80017b2 <__aeabi_ddiv+0x96>
 80017f8:	4544      	cmp	r4, r8
 80017fa:	d200      	bcs.n	80017fe <__aeabi_ddiv+0xe2>
 80017fc:	e1c4      	b.n	8001b88 <__aeabi_ddiv+0x46c>
 80017fe:	d100      	bne.n	8001802 <__aeabi_ddiv+0xe6>
 8001800:	e1bf      	b.n	8001b82 <__aeabi_ddiv+0x466>
 8001802:	2301      	movs	r3, #1
 8001804:	425b      	negs	r3, r3
 8001806:	469c      	mov	ip, r3
 8001808:	002e      	movs	r6, r5
 800180a:	4640      	mov	r0, r8
 800180c:	2500      	movs	r5, #0
 800180e:	44e3      	add	fp, ip
 8001810:	0223      	lsls	r3, r4, #8
 8001812:	0e0c      	lsrs	r4, r1, #24
 8001814:	431c      	orrs	r4, r3
 8001816:	0c1b      	lsrs	r3, r3, #16
 8001818:	4699      	mov	r9, r3
 800181a:	0423      	lsls	r3, r4, #16
 800181c:	020a      	lsls	r2, r1, #8
 800181e:	0c1f      	lsrs	r7, r3, #16
 8001820:	4649      	mov	r1, r9
 8001822:	9200      	str	r2, [sp, #0]
 8001824:	9701      	str	r7, [sp, #4]
 8001826:	f7fe fd11 	bl	800024c <__aeabi_uidivmod>
 800182a:	0002      	movs	r2, r0
 800182c:	437a      	muls	r2, r7
 800182e:	040b      	lsls	r3, r1, #16
 8001830:	0c31      	lsrs	r1, r6, #16
 8001832:	4680      	mov	r8, r0
 8001834:	4319      	orrs	r1, r3
 8001836:	428a      	cmp	r2, r1
 8001838:	d907      	bls.n	800184a <__aeabi_ddiv+0x12e>
 800183a:	2301      	movs	r3, #1
 800183c:	425b      	negs	r3, r3
 800183e:	469c      	mov	ip, r3
 8001840:	1909      	adds	r1, r1, r4
 8001842:	44e0      	add	r8, ip
 8001844:	428c      	cmp	r4, r1
 8001846:	d800      	bhi.n	800184a <__aeabi_ddiv+0x12e>
 8001848:	e201      	b.n	8001c4e <__aeabi_ddiv+0x532>
 800184a:	1a88      	subs	r0, r1, r2
 800184c:	4649      	mov	r1, r9
 800184e:	f7fe fcfd 	bl	800024c <__aeabi_uidivmod>
 8001852:	9a01      	ldr	r2, [sp, #4]
 8001854:	0436      	lsls	r6, r6, #16
 8001856:	4342      	muls	r2, r0
 8001858:	0409      	lsls	r1, r1, #16
 800185a:	0c36      	lsrs	r6, r6, #16
 800185c:	0003      	movs	r3, r0
 800185e:	430e      	orrs	r6, r1
 8001860:	42b2      	cmp	r2, r6
 8001862:	d904      	bls.n	800186e <__aeabi_ddiv+0x152>
 8001864:	1936      	adds	r6, r6, r4
 8001866:	3b01      	subs	r3, #1
 8001868:	42b4      	cmp	r4, r6
 800186a:	d800      	bhi.n	800186e <__aeabi_ddiv+0x152>
 800186c:	e1e9      	b.n	8001c42 <__aeabi_ddiv+0x526>
 800186e:	1ab0      	subs	r0, r6, r2
 8001870:	4642      	mov	r2, r8
 8001872:	9e00      	ldr	r6, [sp, #0]
 8001874:	0412      	lsls	r2, r2, #16
 8001876:	431a      	orrs	r2, r3
 8001878:	0c33      	lsrs	r3, r6, #16
 800187a:	001f      	movs	r7, r3
 800187c:	0c11      	lsrs	r1, r2, #16
 800187e:	4690      	mov	r8, r2
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	0413      	lsls	r3, r2, #16
 8001884:	0432      	lsls	r2, r6, #16
 8001886:	0c16      	lsrs	r6, r2, #16
 8001888:	0032      	movs	r2, r6
 800188a:	0c1b      	lsrs	r3, r3, #16
 800188c:	435a      	muls	r2, r3
 800188e:	9603      	str	r6, [sp, #12]
 8001890:	437b      	muls	r3, r7
 8001892:	434e      	muls	r6, r1
 8001894:	4379      	muls	r1, r7
 8001896:	0c17      	lsrs	r7, r2, #16
 8001898:	46bc      	mov	ip, r7
 800189a:	199b      	adds	r3, r3, r6
 800189c:	4463      	add	r3, ip
 800189e:	429e      	cmp	r6, r3
 80018a0:	d903      	bls.n	80018aa <__aeabi_ddiv+0x18e>
 80018a2:	2680      	movs	r6, #128	; 0x80
 80018a4:	0276      	lsls	r6, r6, #9
 80018a6:	46b4      	mov	ip, r6
 80018a8:	4461      	add	r1, ip
 80018aa:	0c1e      	lsrs	r6, r3, #16
 80018ac:	1871      	adds	r1, r6, r1
 80018ae:	0416      	lsls	r6, r2, #16
 80018b0:	041b      	lsls	r3, r3, #16
 80018b2:	0c36      	lsrs	r6, r6, #16
 80018b4:	199e      	adds	r6, r3, r6
 80018b6:	4288      	cmp	r0, r1
 80018b8:	d302      	bcc.n	80018c0 <__aeabi_ddiv+0x1a4>
 80018ba:	d112      	bne.n	80018e2 <__aeabi_ddiv+0x1c6>
 80018bc:	42b5      	cmp	r5, r6
 80018be:	d210      	bcs.n	80018e2 <__aeabi_ddiv+0x1c6>
 80018c0:	4643      	mov	r3, r8
 80018c2:	1e5a      	subs	r2, r3, #1
 80018c4:	9b00      	ldr	r3, [sp, #0]
 80018c6:	469c      	mov	ip, r3
 80018c8:	4465      	add	r5, ip
 80018ca:	001f      	movs	r7, r3
 80018cc:	429d      	cmp	r5, r3
 80018ce:	419b      	sbcs	r3, r3
 80018d0:	425b      	negs	r3, r3
 80018d2:	191b      	adds	r3, r3, r4
 80018d4:	18c0      	adds	r0, r0, r3
 80018d6:	4284      	cmp	r4, r0
 80018d8:	d200      	bcs.n	80018dc <__aeabi_ddiv+0x1c0>
 80018da:	e19e      	b.n	8001c1a <__aeabi_ddiv+0x4fe>
 80018dc:	d100      	bne.n	80018e0 <__aeabi_ddiv+0x1c4>
 80018de:	e199      	b.n	8001c14 <__aeabi_ddiv+0x4f8>
 80018e0:	4690      	mov	r8, r2
 80018e2:	1bae      	subs	r6, r5, r6
 80018e4:	42b5      	cmp	r5, r6
 80018e6:	41ad      	sbcs	r5, r5
 80018e8:	1a40      	subs	r0, r0, r1
 80018ea:	426d      	negs	r5, r5
 80018ec:	1b40      	subs	r0, r0, r5
 80018ee:	4284      	cmp	r4, r0
 80018f0:	d100      	bne.n	80018f4 <__aeabi_ddiv+0x1d8>
 80018f2:	e1d2      	b.n	8001c9a <__aeabi_ddiv+0x57e>
 80018f4:	4649      	mov	r1, r9
 80018f6:	f7fe fca9 	bl	800024c <__aeabi_uidivmod>
 80018fa:	9a01      	ldr	r2, [sp, #4]
 80018fc:	040b      	lsls	r3, r1, #16
 80018fe:	4342      	muls	r2, r0
 8001900:	0c31      	lsrs	r1, r6, #16
 8001902:	0005      	movs	r5, r0
 8001904:	4319      	orrs	r1, r3
 8001906:	428a      	cmp	r2, r1
 8001908:	d900      	bls.n	800190c <__aeabi_ddiv+0x1f0>
 800190a:	e16c      	b.n	8001be6 <__aeabi_ddiv+0x4ca>
 800190c:	1a88      	subs	r0, r1, r2
 800190e:	4649      	mov	r1, r9
 8001910:	f7fe fc9c 	bl	800024c <__aeabi_uidivmod>
 8001914:	9a01      	ldr	r2, [sp, #4]
 8001916:	0436      	lsls	r6, r6, #16
 8001918:	4342      	muls	r2, r0
 800191a:	0409      	lsls	r1, r1, #16
 800191c:	0c36      	lsrs	r6, r6, #16
 800191e:	0003      	movs	r3, r0
 8001920:	430e      	orrs	r6, r1
 8001922:	42b2      	cmp	r2, r6
 8001924:	d900      	bls.n	8001928 <__aeabi_ddiv+0x20c>
 8001926:	e153      	b.n	8001bd0 <__aeabi_ddiv+0x4b4>
 8001928:	9803      	ldr	r0, [sp, #12]
 800192a:	1ab6      	subs	r6, r6, r2
 800192c:	0002      	movs	r2, r0
 800192e:	042d      	lsls	r5, r5, #16
 8001930:	431d      	orrs	r5, r3
 8001932:	9f02      	ldr	r7, [sp, #8]
 8001934:	042b      	lsls	r3, r5, #16
 8001936:	0c1b      	lsrs	r3, r3, #16
 8001938:	435a      	muls	r2, r3
 800193a:	437b      	muls	r3, r7
 800193c:	469c      	mov	ip, r3
 800193e:	0c29      	lsrs	r1, r5, #16
 8001940:	4348      	muls	r0, r1
 8001942:	0c13      	lsrs	r3, r2, #16
 8001944:	4484      	add	ip, r0
 8001946:	4463      	add	r3, ip
 8001948:	4379      	muls	r1, r7
 800194a:	4298      	cmp	r0, r3
 800194c:	d903      	bls.n	8001956 <__aeabi_ddiv+0x23a>
 800194e:	2080      	movs	r0, #128	; 0x80
 8001950:	0240      	lsls	r0, r0, #9
 8001952:	4684      	mov	ip, r0
 8001954:	4461      	add	r1, ip
 8001956:	0c18      	lsrs	r0, r3, #16
 8001958:	0412      	lsls	r2, r2, #16
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	0c12      	lsrs	r2, r2, #16
 800195e:	1840      	adds	r0, r0, r1
 8001960:	189b      	adds	r3, r3, r2
 8001962:	4286      	cmp	r6, r0
 8001964:	d200      	bcs.n	8001968 <__aeabi_ddiv+0x24c>
 8001966:	e100      	b.n	8001b6a <__aeabi_ddiv+0x44e>
 8001968:	d100      	bne.n	800196c <__aeabi_ddiv+0x250>
 800196a:	e0fb      	b.n	8001b64 <__aeabi_ddiv+0x448>
 800196c:	2301      	movs	r3, #1
 800196e:	431d      	orrs	r5, r3
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <__aeabi_ddiv+0x37c>)
 8001972:	445b      	add	r3, fp
 8001974:	2b00      	cmp	r3, #0
 8001976:	dc00      	bgt.n	800197a <__aeabi_ddiv+0x25e>
 8001978:	e0aa      	b.n	8001ad0 <__aeabi_ddiv+0x3b4>
 800197a:	076a      	lsls	r2, r5, #29
 800197c:	d000      	beq.n	8001980 <__aeabi_ddiv+0x264>
 800197e:	e13d      	b.n	8001bfc <__aeabi_ddiv+0x4e0>
 8001980:	08e9      	lsrs	r1, r5, #3
 8001982:	4642      	mov	r2, r8
 8001984:	01d2      	lsls	r2, r2, #7
 8001986:	d506      	bpl.n	8001996 <__aeabi_ddiv+0x27a>
 8001988:	4642      	mov	r2, r8
 800198a:	4b44      	ldr	r3, [pc, #272]	; (8001a9c <__aeabi_ddiv+0x380>)
 800198c:	401a      	ands	r2, r3
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	4690      	mov	r8, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	445b      	add	r3, fp
 8001996:	4a42      	ldr	r2, [pc, #264]	; (8001aa0 <__aeabi_ddiv+0x384>)
 8001998:	4293      	cmp	r3, r2
 800199a:	dd00      	ble.n	800199e <__aeabi_ddiv+0x282>
 800199c:	e723      	b.n	80017e6 <__aeabi_ddiv+0xca>
 800199e:	4642      	mov	r2, r8
 80019a0:	055b      	lsls	r3, r3, #21
 80019a2:	0755      	lsls	r5, r2, #29
 80019a4:	0252      	lsls	r2, r2, #9
 80019a6:	430d      	orrs	r5, r1
 80019a8:	0b12      	lsrs	r2, r2, #12
 80019aa:	0d5b      	lsrs	r3, r3, #21
 80019ac:	e70d      	b.n	80017ca <__aeabi_ddiv+0xae>
 80019ae:	4651      	mov	r1, sl
 80019b0:	4321      	orrs	r1, r4
 80019b2:	d100      	bne.n	80019b6 <__aeabi_ddiv+0x29a>
 80019b4:	e07c      	b.n	8001ab0 <__aeabi_ddiv+0x394>
 80019b6:	2c00      	cmp	r4, #0
 80019b8:	d100      	bne.n	80019bc <__aeabi_ddiv+0x2a0>
 80019ba:	e0fb      	b.n	8001bb4 <__aeabi_ddiv+0x498>
 80019bc:	0020      	movs	r0, r4
 80019be:	f001 fa63 	bl	8002e88 <__clzsi2>
 80019c2:	0002      	movs	r2, r0
 80019c4:	3a0b      	subs	r2, #11
 80019c6:	231d      	movs	r3, #29
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	4652      	mov	r2, sl
 80019cc:	0001      	movs	r1, r0
 80019ce:	40da      	lsrs	r2, r3
 80019d0:	4653      	mov	r3, sl
 80019d2:	3908      	subs	r1, #8
 80019d4:	408b      	lsls	r3, r1
 80019d6:	408c      	lsls	r4, r1
 80019d8:	0019      	movs	r1, r3
 80019da:	4314      	orrs	r4, r2
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <__aeabi_ddiv+0x388>)
 80019de:	4458      	add	r0, fp
 80019e0:	469b      	mov	fp, r3
 80019e2:	4483      	add	fp, r0
 80019e4:	2000      	movs	r0, #0
 80019e6:	e6d9      	b.n	800179c <__aeabi_ddiv+0x80>
 80019e8:	0003      	movs	r3, r0
 80019ea:	4323      	orrs	r3, r4
 80019ec:	4698      	mov	r8, r3
 80019ee:	d044      	beq.n	8001a7a <__aeabi_ddiv+0x35e>
 80019f0:	2c00      	cmp	r4, #0
 80019f2:	d100      	bne.n	80019f6 <__aeabi_ddiv+0x2da>
 80019f4:	e0cf      	b.n	8001b96 <__aeabi_ddiv+0x47a>
 80019f6:	0020      	movs	r0, r4
 80019f8:	f001 fa46 	bl	8002e88 <__clzsi2>
 80019fc:	0001      	movs	r1, r0
 80019fe:	0002      	movs	r2, r0
 8001a00:	390b      	subs	r1, #11
 8001a02:	231d      	movs	r3, #29
 8001a04:	1a5b      	subs	r3, r3, r1
 8001a06:	4649      	mov	r1, r9
 8001a08:	0010      	movs	r0, r2
 8001a0a:	40d9      	lsrs	r1, r3
 8001a0c:	3808      	subs	r0, #8
 8001a0e:	4084      	lsls	r4, r0
 8001a10:	000b      	movs	r3, r1
 8001a12:	464d      	mov	r5, r9
 8001a14:	4323      	orrs	r3, r4
 8001a16:	4698      	mov	r8, r3
 8001a18:	4085      	lsls	r5, r0
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <__aeabi_ddiv+0x38c>)
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	469b      	mov	fp, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	4699      	mov	r9, r3
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	e69e      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	4322      	orrs	r2, r4
 8001a2c:	4690      	mov	r8, r2
 8001a2e:	d11d      	bne.n	8001a6c <__aeabi_ddiv+0x350>
 8001a30:	2208      	movs	r2, #8
 8001a32:	469b      	mov	fp, r3
 8001a34:	2302      	movs	r3, #2
 8001a36:	2500      	movs	r5, #0
 8001a38:	4691      	mov	r9, r2
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	e693      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a3e:	4651      	mov	r1, sl
 8001a40:	4321      	orrs	r1, r4
 8001a42:	d109      	bne.n	8001a58 <__aeabi_ddiv+0x33c>
 8001a44:	2302      	movs	r3, #2
 8001a46:	464a      	mov	r2, r9
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <__aeabi_ddiv+0x390>)
 8001a4c:	4691      	mov	r9, r2
 8001a4e:	469c      	mov	ip, r3
 8001a50:	2400      	movs	r4, #0
 8001a52:	2002      	movs	r0, #2
 8001a54:	44e3      	add	fp, ip
 8001a56:	e6a1      	b.n	800179c <__aeabi_ddiv+0x80>
 8001a58:	2303      	movs	r3, #3
 8001a5a:	464a      	mov	r2, r9
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <__aeabi_ddiv+0x390>)
 8001a60:	4691      	mov	r9, r2
 8001a62:	469c      	mov	ip, r3
 8001a64:	4651      	mov	r1, sl
 8001a66:	2003      	movs	r0, #3
 8001a68:	44e3      	add	fp, ip
 8001a6a:	e697      	b.n	800179c <__aeabi_ddiv+0x80>
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	469b      	mov	fp, r3
 8001a70:	2303      	movs	r3, #3
 8001a72:	46a0      	mov	r8, r4
 8001a74:	4691      	mov	r9, r2
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	e675      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	4699      	mov	r9, r3
 8001a7e:	2300      	movs	r3, #0
 8001a80:	469b      	mov	fp, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	2500      	movs	r5, #0
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	e66d      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	000007ff 	.word	0x000007ff
 8001a90:	fffffc01 	.word	0xfffffc01
 8001a94:	0800eba4 	.word	0x0800eba4
 8001a98:	000003ff 	.word	0x000003ff
 8001a9c:	feffffff 	.word	0xfeffffff
 8001aa0:	000007fe 	.word	0x000007fe
 8001aa4:	000003f3 	.word	0x000003f3
 8001aa8:	fffffc0d 	.word	0xfffffc0d
 8001aac:	fffff801 	.word	0xfffff801
 8001ab0:	464a      	mov	r2, r9
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	2400      	movs	r4, #0
 8001aba:	2001      	movs	r0, #1
 8001abc:	e66e      	b.n	800179c <__aeabi_ddiv+0x80>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	469a      	mov	sl, r3
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	4b88      	ldr	r3, [pc, #544]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001ac8:	0312      	lsls	r2, r2, #12
 8001aca:	e67e      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001acc:	2501      	movs	r5, #1
 8001ace:	426d      	negs	r5, r5
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	1ad2      	subs	r2, r2, r3
 8001ad4:	2a38      	cmp	r2, #56	; 0x38
 8001ad6:	dd00      	ble.n	8001ada <__aeabi_ddiv+0x3be>
 8001ad8:	e674      	b.n	80017c4 <__aeabi_ddiv+0xa8>
 8001ada:	2a1f      	cmp	r2, #31
 8001adc:	dc00      	bgt.n	8001ae0 <__aeabi_ddiv+0x3c4>
 8001ade:	e0bd      	b.n	8001c5c <__aeabi_ddiv+0x540>
 8001ae0:	211f      	movs	r1, #31
 8001ae2:	4249      	negs	r1, r1
 8001ae4:	1acb      	subs	r3, r1, r3
 8001ae6:	4641      	mov	r1, r8
 8001ae8:	40d9      	lsrs	r1, r3
 8001aea:	000b      	movs	r3, r1
 8001aec:	2a20      	cmp	r2, #32
 8001aee:	d004      	beq.n	8001afa <__aeabi_ddiv+0x3de>
 8001af0:	4641      	mov	r1, r8
 8001af2:	4a7e      	ldr	r2, [pc, #504]	; (8001cec <__aeabi_ddiv+0x5d0>)
 8001af4:	445a      	add	r2, fp
 8001af6:	4091      	lsls	r1, r2
 8001af8:	430d      	orrs	r5, r1
 8001afa:	0029      	movs	r1, r5
 8001afc:	1e4a      	subs	r2, r1, #1
 8001afe:	4191      	sbcs	r1, r2
 8001b00:	4319      	orrs	r1, r3
 8001b02:	2307      	movs	r3, #7
 8001b04:	001d      	movs	r5, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	400d      	ands	r5, r1
 8001b0a:	420b      	tst	r3, r1
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_ddiv+0x3f4>
 8001b0e:	e0d0      	b.n	8001cb2 <__aeabi_ddiv+0x596>
 8001b10:	220f      	movs	r2, #15
 8001b12:	2300      	movs	r3, #0
 8001b14:	400a      	ands	r2, r1
 8001b16:	2a04      	cmp	r2, #4
 8001b18:	d100      	bne.n	8001b1c <__aeabi_ddiv+0x400>
 8001b1a:	e0c7      	b.n	8001cac <__aeabi_ddiv+0x590>
 8001b1c:	1d0a      	adds	r2, r1, #4
 8001b1e:	428a      	cmp	r2, r1
 8001b20:	4189      	sbcs	r1, r1
 8001b22:	4249      	negs	r1, r1
 8001b24:	185b      	adds	r3, r3, r1
 8001b26:	0011      	movs	r1, r2
 8001b28:	021a      	lsls	r2, r3, #8
 8001b2a:	d400      	bmi.n	8001b2e <__aeabi_ddiv+0x412>
 8001b2c:	e0be      	b.n	8001cac <__aeabi_ddiv+0x590>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	2200      	movs	r2, #0
 8001b32:	2500      	movs	r5, #0
 8001b34:	e649      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	4643      	mov	r3, r8
 8001b3a:	0312      	lsls	r2, r2, #12
 8001b3c:	4213      	tst	r3, r2
 8001b3e:	d008      	beq.n	8001b52 <__aeabi_ddiv+0x436>
 8001b40:	4214      	tst	r4, r2
 8001b42:	d106      	bne.n	8001b52 <__aeabi_ddiv+0x436>
 8001b44:	4322      	orrs	r2, r4
 8001b46:	0312      	lsls	r2, r2, #12
 8001b48:	46ba      	mov	sl, r7
 8001b4a:	000d      	movs	r5, r1
 8001b4c:	4b66      	ldr	r3, [pc, #408]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001b4e:	0b12      	lsrs	r2, r2, #12
 8001b50:	e63b      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	4643      	mov	r3, r8
 8001b56:	0312      	lsls	r2, r2, #12
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	0312      	lsls	r2, r2, #12
 8001b5c:	46b2      	mov	sl, r6
 8001b5e:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001b60:	0b12      	lsrs	r2, r2, #12
 8001b62:	e632      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_ddiv+0x44e>
 8001b68:	e702      	b.n	8001970 <__aeabi_ddiv+0x254>
 8001b6a:	19a6      	adds	r6, r4, r6
 8001b6c:	1e6a      	subs	r2, r5, #1
 8001b6e:	42a6      	cmp	r6, r4
 8001b70:	d200      	bcs.n	8001b74 <__aeabi_ddiv+0x458>
 8001b72:	e089      	b.n	8001c88 <__aeabi_ddiv+0x56c>
 8001b74:	4286      	cmp	r6, r0
 8001b76:	d200      	bcs.n	8001b7a <__aeabi_ddiv+0x45e>
 8001b78:	e09f      	b.n	8001cba <__aeabi_ddiv+0x59e>
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_ddiv+0x462>
 8001b7c:	e0af      	b.n	8001cde <__aeabi_ddiv+0x5c2>
 8001b7e:	0015      	movs	r5, r2
 8001b80:	e6f4      	b.n	800196c <__aeabi_ddiv+0x250>
 8001b82:	42a9      	cmp	r1, r5
 8001b84:	d900      	bls.n	8001b88 <__aeabi_ddiv+0x46c>
 8001b86:	e63c      	b.n	8001802 <__aeabi_ddiv+0xe6>
 8001b88:	4643      	mov	r3, r8
 8001b8a:	07de      	lsls	r6, r3, #31
 8001b8c:	0858      	lsrs	r0, r3, #1
 8001b8e:	086b      	lsrs	r3, r5, #1
 8001b90:	431e      	orrs	r6, r3
 8001b92:	07ed      	lsls	r5, r5, #31
 8001b94:	e63c      	b.n	8001810 <__aeabi_ddiv+0xf4>
 8001b96:	f001 f977 	bl	8002e88 <__clzsi2>
 8001b9a:	0001      	movs	r1, r0
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	3115      	adds	r1, #21
 8001ba0:	3220      	adds	r2, #32
 8001ba2:	291c      	cmp	r1, #28
 8001ba4:	dc00      	bgt.n	8001ba8 <__aeabi_ddiv+0x48c>
 8001ba6:	e72c      	b.n	8001a02 <__aeabi_ddiv+0x2e6>
 8001ba8:	464b      	mov	r3, r9
 8001baa:	3808      	subs	r0, #8
 8001bac:	4083      	lsls	r3, r0
 8001bae:	2500      	movs	r5, #0
 8001bb0:	4698      	mov	r8, r3
 8001bb2:	e732      	b.n	8001a1a <__aeabi_ddiv+0x2fe>
 8001bb4:	f001 f968 	bl	8002e88 <__clzsi2>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	001a      	movs	r2, r3
 8001bbc:	3215      	adds	r2, #21
 8001bbe:	3020      	adds	r0, #32
 8001bc0:	2a1c      	cmp	r2, #28
 8001bc2:	dc00      	bgt.n	8001bc6 <__aeabi_ddiv+0x4aa>
 8001bc4:	e6ff      	b.n	80019c6 <__aeabi_ddiv+0x2aa>
 8001bc6:	4654      	mov	r4, sl
 8001bc8:	3b08      	subs	r3, #8
 8001bca:	2100      	movs	r1, #0
 8001bcc:	409c      	lsls	r4, r3
 8001bce:	e705      	b.n	80019dc <__aeabi_ddiv+0x2c0>
 8001bd0:	1936      	adds	r6, r6, r4
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	42b4      	cmp	r4, r6
 8001bd6:	d900      	bls.n	8001bda <__aeabi_ddiv+0x4be>
 8001bd8:	e6a6      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001bda:	42b2      	cmp	r2, r6
 8001bdc:	d800      	bhi.n	8001be0 <__aeabi_ddiv+0x4c4>
 8001bde:	e6a3      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001be0:	1e83      	subs	r3, r0, #2
 8001be2:	1936      	adds	r6, r6, r4
 8001be4:	e6a0      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001be6:	1909      	adds	r1, r1, r4
 8001be8:	3d01      	subs	r5, #1
 8001bea:	428c      	cmp	r4, r1
 8001bec:	d900      	bls.n	8001bf0 <__aeabi_ddiv+0x4d4>
 8001bee:	e68d      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bf0:	428a      	cmp	r2, r1
 8001bf2:	d800      	bhi.n	8001bf6 <__aeabi_ddiv+0x4da>
 8001bf4:	e68a      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bf6:	1e85      	subs	r5, r0, #2
 8001bf8:	1909      	adds	r1, r1, r4
 8001bfa:	e687      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	402a      	ands	r2, r5
 8001c00:	2a04      	cmp	r2, #4
 8001c02:	d100      	bne.n	8001c06 <__aeabi_ddiv+0x4ea>
 8001c04:	e6bc      	b.n	8001980 <__aeabi_ddiv+0x264>
 8001c06:	1d29      	adds	r1, r5, #4
 8001c08:	42a9      	cmp	r1, r5
 8001c0a:	41ad      	sbcs	r5, r5
 8001c0c:	426d      	negs	r5, r5
 8001c0e:	08c9      	lsrs	r1, r1, #3
 8001c10:	44a8      	add	r8, r5
 8001c12:	e6b6      	b.n	8001982 <__aeabi_ddiv+0x266>
 8001c14:	42af      	cmp	r7, r5
 8001c16:	d900      	bls.n	8001c1a <__aeabi_ddiv+0x4fe>
 8001c18:	e662      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c1a:	4281      	cmp	r1, r0
 8001c1c:	d804      	bhi.n	8001c28 <__aeabi_ddiv+0x50c>
 8001c1e:	d000      	beq.n	8001c22 <__aeabi_ddiv+0x506>
 8001c20:	e65e      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c22:	42ae      	cmp	r6, r5
 8001c24:	d800      	bhi.n	8001c28 <__aeabi_ddiv+0x50c>
 8001c26:	e65b      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	425b      	negs	r3, r3
 8001c2c:	469c      	mov	ip, r3
 8001c2e:	9b00      	ldr	r3, [sp, #0]
 8001c30:	44e0      	add	r8, ip
 8001c32:	469c      	mov	ip, r3
 8001c34:	4465      	add	r5, ip
 8001c36:	429d      	cmp	r5, r3
 8001c38:	419b      	sbcs	r3, r3
 8001c3a:	425b      	negs	r3, r3
 8001c3c:	191b      	adds	r3, r3, r4
 8001c3e:	18c0      	adds	r0, r0, r3
 8001c40:	e64f      	b.n	80018e2 <__aeabi_ddiv+0x1c6>
 8001c42:	42b2      	cmp	r2, r6
 8001c44:	d800      	bhi.n	8001c48 <__aeabi_ddiv+0x52c>
 8001c46:	e612      	b.n	800186e <__aeabi_ddiv+0x152>
 8001c48:	1e83      	subs	r3, r0, #2
 8001c4a:	1936      	adds	r6, r6, r4
 8001c4c:	e60f      	b.n	800186e <__aeabi_ddiv+0x152>
 8001c4e:	428a      	cmp	r2, r1
 8001c50:	d800      	bhi.n	8001c54 <__aeabi_ddiv+0x538>
 8001c52:	e5fa      	b.n	800184a <__aeabi_ddiv+0x12e>
 8001c54:	1e83      	subs	r3, r0, #2
 8001c56:	4698      	mov	r8, r3
 8001c58:	1909      	adds	r1, r1, r4
 8001c5a:	e5f6      	b.n	800184a <__aeabi_ddiv+0x12e>
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <__aeabi_ddiv+0x5d4>)
 8001c5e:	0028      	movs	r0, r5
 8001c60:	445b      	add	r3, fp
 8001c62:	4641      	mov	r1, r8
 8001c64:	409d      	lsls	r5, r3
 8001c66:	4099      	lsls	r1, r3
 8001c68:	40d0      	lsrs	r0, r2
 8001c6a:	1e6b      	subs	r3, r5, #1
 8001c6c:	419d      	sbcs	r5, r3
 8001c6e:	4643      	mov	r3, r8
 8001c70:	4301      	orrs	r1, r0
 8001c72:	4329      	orrs	r1, r5
 8001c74:	40d3      	lsrs	r3, r2
 8001c76:	074a      	lsls	r2, r1, #29
 8001c78:	d100      	bne.n	8001c7c <__aeabi_ddiv+0x560>
 8001c7a:	e755      	b.n	8001b28 <__aeabi_ddiv+0x40c>
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	400a      	ands	r2, r1
 8001c80:	2a04      	cmp	r2, #4
 8001c82:	d000      	beq.n	8001c86 <__aeabi_ddiv+0x56a>
 8001c84:	e74a      	b.n	8001b1c <__aeabi_ddiv+0x400>
 8001c86:	e74f      	b.n	8001b28 <__aeabi_ddiv+0x40c>
 8001c88:	0015      	movs	r5, r2
 8001c8a:	4286      	cmp	r6, r0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_ddiv+0x574>
 8001c8e:	e66d      	b.n	800196c <__aeabi_ddiv+0x250>
 8001c90:	9a00      	ldr	r2, [sp, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d000      	beq.n	8001c98 <__aeabi_ddiv+0x57c>
 8001c96:	e669      	b.n	800196c <__aeabi_ddiv+0x250>
 8001c98:	e66a      	b.n	8001970 <__aeabi_ddiv+0x254>
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <__aeabi_ddiv+0x5d8>)
 8001c9c:	445b      	add	r3, fp
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	dc00      	bgt.n	8001ca4 <__aeabi_ddiv+0x588>
 8001ca2:	e713      	b.n	8001acc <__aeabi_ddiv+0x3b0>
 8001ca4:	2501      	movs	r5, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	44a8      	add	r8, r5
 8001caa:	e66a      	b.n	8001982 <__aeabi_ddiv+0x266>
 8001cac:	075d      	lsls	r5, r3, #29
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	0b1a      	lsrs	r2, r3, #12
 8001cb2:	08c9      	lsrs	r1, r1, #3
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	430d      	orrs	r5, r1
 8001cb8:	e587      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001cba:	9900      	ldr	r1, [sp, #0]
 8001cbc:	3d02      	subs	r5, #2
 8001cbe:	004a      	lsls	r2, r1, #1
 8001cc0:	428a      	cmp	r2, r1
 8001cc2:	41bf      	sbcs	r7, r7
 8001cc4:	427f      	negs	r7, r7
 8001cc6:	193f      	adds	r7, r7, r4
 8001cc8:	19f6      	adds	r6, r6, r7
 8001cca:	9200      	str	r2, [sp, #0]
 8001ccc:	e7dd      	b.n	8001c8a <__aeabi_ddiv+0x56e>
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	4643      	mov	r3, r8
 8001cd2:	0312      	lsls	r2, r2, #12
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	0312      	lsls	r2, r2, #12
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001cda:	0b12      	lsrs	r2, r2, #12
 8001cdc:	e575      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001cde:	9900      	ldr	r1, [sp, #0]
 8001ce0:	4299      	cmp	r1, r3
 8001ce2:	d3ea      	bcc.n	8001cba <__aeabi_ddiv+0x59e>
 8001ce4:	0015      	movs	r5, r2
 8001ce6:	e7d3      	b.n	8001c90 <__aeabi_ddiv+0x574>
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	0000043e 	.word	0x0000043e
 8001cf0:	0000041e 	.word	0x0000041e
 8001cf4:	000003ff 	.word	0x000003ff

08001cf8 <__eqdf2>:
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	464e      	mov	r6, r9
 8001cfc:	4645      	mov	r5, r8
 8001cfe:	46de      	mov	lr, fp
 8001d00:	4657      	mov	r7, sl
 8001d02:	4690      	mov	r8, r2
 8001d04:	b5e0      	push	{r5, r6, r7, lr}
 8001d06:	0017      	movs	r7, r2
 8001d08:	031a      	lsls	r2, r3, #12
 8001d0a:	0b12      	lsrs	r2, r2, #12
 8001d0c:	0005      	movs	r5, r0
 8001d0e:	4684      	mov	ip, r0
 8001d10:	4819      	ldr	r0, [pc, #100]	; (8001d78 <__eqdf2+0x80>)
 8001d12:	030e      	lsls	r6, r1, #12
 8001d14:	004c      	lsls	r4, r1, #1
 8001d16:	4691      	mov	r9, r2
 8001d18:	005a      	lsls	r2, r3, #1
 8001d1a:	0fdb      	lsrs	r3, r3, #31
 8001d1c:	469b      	mov	fp, r3
 8001d1e:	0b36      	lsrs	r6, r6, #12
 8001d20:	0d64      	lsrs	r4, r4, #21
 8001d22:	0fc9      	lsrs	r1, r1, #31
 8001d24:	0d52      	lsrs	r2, r2, #21
 8001d26:	4284      	cmp	r4, r0
 8001d28:	d019      	beq.n	8001d5e <__eqdf2+0x66>
 8001d2a:	4282      	cmp	r2, r0
 8001d2c:	d010      	beq.n	8001d50 <__eqdf2+0x58>
 8001d2e:	2001      	movs	r0, #1
 8001d30:	4294      	cmp	r4, r2
 8001d32:	d10e      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d34:	454e      	cmp	r6, r9
 8001d36:	d10c      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d38:	2001      	movs	r0, #1
 8001d3a:	45c4      	cmp	ip, r8
 8001d3c:	d109      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d3e:	4559      	cmp	r1, fp
 8001d40:	d017      	beq.n	8001d72 <__eqdf2+0x7a>
 8001d42:	2c00      	cmp	r4, #0
 8001d44:	d105      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d46:	0030      	movs	r0, r6
 8001d48:	4328      	orrs	r0, r5
 8001d4a:	1e43      	subs	r3, r0, #1
 8001d4c:	4198      	sbcs	r0, r3
 8001d4e:	e000      	b.n	8001d52 <__eqdf2+0x5a>
 8001d50:	2001      	movs	r0, #1
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	0033      	movs	r3, r6
 8001d60:	2001      	movs	r0, #1
 8001d62:	432b      	orrs	r3, r5
 8001d64:	d1f5      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d66:	42a2      	cmp	r2, r4
 8001d68:	d1f3      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d6a:	464b      	mov	r3, r9
 8001d6c:	433b      	orrs	r3, r7
 8001d6e:	d1f0      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d70:	e7e2      	b.n	8001d38 <__eqdf2+0x40>
 8001d72:	2000      	movs	r0, #0
 8001d74:	e7ed      	b.n	8001d52 <__eqdf2+0x5a>
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	000007ff 	.word	0x000007ff

08001d7c <__gedf2>:
 8001d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7e:	4647      	mov	r7, r8
 8001d80:	46ce      	mov	lr, r9
 8001d82:	0004      	movs	r4, r0
 8001d84:	0018      	movs	r0, r3
 8001d86:	0016      	movs	r6, r2
 8001d88:	031b      	lsls	r3, r3, #12
 8001d8a:	0b1b      	lsrs	r3, r3, #12
 8001d8c:	4d2d      	ldr	r5, [pc, #180]	; (8001e44 <__gedf2+0xc8>)
 8001d8e:	004a      	lsls	r2, r1, #1
 8001d90:	4699      	mov	r9, r3
 8001d92:	b580      	push	{r7, lr}
 8001d94:	0043      	lsls	r3, r0, #1
 8001d96:	030f      	lsls	r7, r1, #12
 8001d98:	46a4      	mov	ip, r4
 8001d9a:	46b0      	mov	r8, r6
 8001d9c:	0b3f      	lsrs	r7, r7, #12
 8001d9e:	0d52      	lsrs	r2, r2, #21
 8001da0:	0fc9      	lsrs	r1, r1, #31
 8001da2:	0d5b      	lsrs	r3, r3, #21
 8001da4:	0fc0      	lsrs	r0, r0, #31
 8001da6:	42aa      	cmp	r2, r5
 8001da8:	d021      	beq.n	8001dee <__gedf2+0x72>
 8001daa:	42ab      	cmp	r3, r5
 8001dac:	d013      	beq.n	8001dd6 <__gedf2+0x5a>
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d122      	bne.n	8001df8 <__gedf2+0x7c>
 8001db2:	433c      	orrs	r4, r7
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <__gedf2+0x42>
 8001db8:	464d      	mov	r5, r9
 8001dba:	432e      	orrs	r6, r5
 8001dbc:	d022      	beq.n	8001e04 <__gedf2+0x88>
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d010      	beq.n	8001de4 <__gedf2+0x68>
 8001dc2:	4281      	cmp	r1, r0
 8001dc4:	d022      	beq.n	8001e0c <__gedf2+0x90>
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	3901      	subs	r1, #1
 8001dca:	4008      	ands	r0, r1
 8001dcc:	3801      	subs	r0, #1
 8001dce:	bcc0      	pop	{r6, r7}
 8001dd0:	46b9      	mov	r9, r7
 8001dd2:	46b0      	mov	r8, r6
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	432e      	orrs	r6, r5
 8001dda:	d129      	bne.n	8001e30 <__gedf2+0xb4>
 8001ddc:	2a00      	cmp	r2, #0
 8001dde:	d1f0      	bne.n	8001dc2 <__gedf2+0x46>
 8001de0:	433c      	orrs	r4, r7
 8001de2:	d1ee      	bne.n	8001dc2 <__gedf2+0x46>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d1f2      	bne.n	8001dce <__gedf2+0x52>
 8001de8:	2001      	movs	r0, #1
 8001dea:	4240      	negs	r0, r0
 8001dec:	e7ef      	b.n	8001dce <__gedf2+0x52>
 8001dee:	003d      	movs	r5, r7
 8001df0:	4325      	orrs	r5, r4
 8001df2:	d11d      	bne.n	8001e30 <__gedf2+0xb4>
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d0ee      	beq.n	8001dd6 <__gedf2+0x5a>
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e2      	bne.n	8001dc2 <__gedf2+0x46>
 8001dfc:	464c      	mov	r4, r9
 8001dfe:	4326      	orrs	r6, r4
 8001e00:	d1df      	bne.n	8001dc2 <__gedf2+0x46>
 8001e02:	e7e0      	b.n	8001dc6 <__gedf2+0x4a>
 8001e04:	2000      	movs	r0, #0
 8001e06:	2c00      	cmp	r4, #0
 8001e08:	d0e1      	beq.n	8001dce <__gedf2+0x52>
 8001e0a:	e7dc      	b.n	8001dc6 <__gedf2+0x4a>
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dc0a      	bgt.n	8001e26 <__gedf2+0xaa>
 8001e10:	dbe8      	blt.n	8001de4 <__gedf2+0x68>
 8001e12:	454f      	cmp	r7, r9
 8001e14:	d8d7      	bhi.n	8001dc6 <__gedf2+0x4a>
 8001e16:	d00e      	beq.n	8001e36 <__gedf2+0xba>
 8001e18:	2000      	movs	r0, #0
 8001e1a:	454f      	cmp	r7, r9
 8001e1c:	d2d7      	bcs.n	8001dce <__gedf2+0x52>
 8001e1e:	2900      	cmp	r1, #0
 8001e20:	d0e2      	beq.n	8001de8 <__gedf2+0x6c>
 8001e22:	0008      	movs	r0, r1
 8001e24:	e7d3      	b.n	8001dce <__gedf2+0x52>
 8001e26:	4243      	negs	r3, r0
 8001e28:	4158      	adcs	r0, r3
 8001e2a:	0040      	lsls	r0, r0, #1
 8001e2c:	3801      	subs	r0, #1
 8001e2e:	e7ce      	b.n	8001dce <__gedf2+0x52>
 8001e30:	2002      	movs	r0, #2
 8001e32:	4240      	negs	r0, r0
 8001e34:	e7cb      	b.n	8001dce <__gedf2+0x52>
 8001e36:	45c4      	cmp	ip, r8
 8001e38:	d8c5      	bhi.n	8001dc6 <__gedf2+0x4a>
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	45c4      	cmp	ip, r8
 8001e3e:	d2c6      	bcs.n	8001dce <__gedf2+0x52>
 8001e40:	e7ed      	b.n	8001e1e <__gedf2+0xa2>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	000007ff 	.word	0x000007ff

08001e48 <__ledf2>:
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	4647      	mov	r7, r8
 8001e4c:	46ce      	mov	lr, r9
 8001e4e:	0004      	movs	r4, r0
 8001e50:	0018      	movs	r0, r3
 8001e52:	0016      	movs	r6, r2
 8001e54:	031b      	lsls	r3, r3, #12
 8001e56:	0b1b      	lsrs	r3, r3, #12
 8001e58:	4d2c      	ldr	r5, [pc, #176]	; (8001f0c <__ledf2+0xc4>)
 8001e5a:	004a      	lsls	r2, r1, #1
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	0043      	lsls	r3, r0, #1
 8001e62:	030f      	lsls	r7, r1, #12
 8001e64:	46a4      	mov	ip, r4
 8001e66:	46b0      	mov	r8, r6
 8001e68:	0b3f      	lsrs	r7, r7, #12
 8001e6a:	0d52      	lsrs	r2, r2, #21
 8001e6c:	0fc9      	lsrs	r1, r1, #31
 8001e6e:	0d5b      	lsrs	r3, r3, #21
 8001e70:	0fc0      	lsrs	r0, r0, #31
 8001e72:	42aa      	cmp	r2, r5
 8001e74:	d00d      	beq.n	8001e92 <__ledf2+0x4a>
 8001e76:	42ab      	cmp	r3, r5
 8001e78:	d010      	beq.n	8001e9c <__ledf2+0x54>
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	d127      	bne.n	8001ece <__ledf2+0x86>
 8001e7e:	433c      	orrs	r4, r7
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <__ledf2+0x60>
 8001e84:	464d      	mov	r5, r9
 8001e86:	432e      	orrs	r6, r5
 8001e88:	d10e      	bne.n	8001ea8 <__ledf2+0x60>
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	2c00      	cmp	r4, #0
 8001e8e:	d015      	beq.n	8001ebc <__ledf2+0x74>
 8001e90:	e00e      	b.n	8001eb0 <__ledf2+0x68>
 8001e92:	003d      	movs	r5, r7
 8001e94:	4325      	orrs	r5, r4
 8001e96:	d110      	bne.n	8001eba <__ledf2+0x72>
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d118      	bne.n	8001ece <__ledf2+0x86>
 8001e9c:	464d      	mov	r5, r9
 8001e9e:	432e      	orrs	r6, r5
 8001ea0:	d10b      	bne.n	8001eba <__ledf2+0x72>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d102      	bne.n	8001eac <__ledf2+0x64>
 8001ea6:	433c      	orrs	r4, r7
 8001ea8:	2c00      	cmp	r4, #0
 8001eaa:	d00b      	beq.n	8001ec4 <__ledf2+0x7c>
 8001eac:	4281      	cmp	r1, r0
 8001eae:	d014      	beq.n	8001eda <__ledf2+0x92>
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	3901      	subs	r1, #1
 8001eb4:	4008      	ands	r0, r1
 8001eb6:	3801      	subs	r0, #1
 8001eb8:	e000      	b.n	8001ebc <__ledf2+0x74>
 8001eba:	2002      	movs	r0, #2
 8001ebc:	bcc0      	pop	{r6, r7}
 8001ebe:	46b9      	mov	r9, r7
 8001ec0:	46b0      	mov	r8, r6
 8001ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d1f9      	bne.n	8001ebc <__ledf2+0x74>
 8001ec8:	2001      	movs	r0, #1
 8001eca:	4240      	negs	r0, r0
 8001ecc:	e7f6      	b.n	8001ebc <__ledf2+0x74>
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ec      	bne.n	8001eac <__ledf2+0x64>
 8001ed2:	464c      	mov	r4, r9
 8001ed4:	4326      	orrs	r6, r4
 8001ed6:	d1e9      	bne.n	8001eac <__ledf2+0x64>
 8001ed8:	e7ea      	b.n	8001eb0 <__ledf2+0x68>
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dd04      	ble.n	8001ee8 <__ledf2+0xa0>
 8001ede:	4243      	negs	r3, r0
 8001ee0:	4158      	adcs	r0, r3
 8001ee2:	0040      	lsls	r0, r0, #1
 8001ee4:	3801      	subs	r0, #1
 8001ee6:	e7e9      	b.n	8001ebc <__ledf2+0x74>
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbeb      	blt.n	8001ec4 <__ledf2+0x7c>
 8001eec:	454f      	cmp	r7, r9
 8001eee:	d8df      	bhi.n	8001eb0 <__ledf2+0x68>
 8001ef0:	d006      	beq.n	8001f00 <__ledf2+0xb8>
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	454f      	cmp	r7, r9
 8001ef6:	d2e1      	bcs.n	8001ebc <__ledf2+0x74>
 8001ef8:	2900      	cmp	r1, #0
 8001efa:	d0e5      	beq.n	8001ec8 <__ledf2+0x80>
 8001efc:	0008      	movs	r0, r1
 8001efe:	e7dd      	b.n	8001ebc <__ledf2+0x74>
 8001f00:	45c4      	cmp	ip, r8
 8001f02:	d8d5      	bhi.n	8001eb0 <__ledf2+0x68>
 8001f04:	2000      	movs	r0, #0
 8001f06:	45c4      	cmp	ip, r8
 8001f08:	d2d8      	bcs.n	8001ebc <__ledf2+0x74>
 8001f0a:	e7f5      	b.n	8001ef8 <__ledf2+0xb0>
 8001f0c:	000007ff 	.word	0x000007ff

08001f10 <__aeabi_dmul>:
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	4645      	mov	r5, r8
 8001f14:	46de      	mov	lr, fp
 8001f16:	4657      	mov	r7, sl
 8001f18:	464e      	mov	r6, r9
 8001f1a:	b5e0      	push	{r5, r6, r7, lr}
 8001f1c:	001f      	movs	r7, r3
 8001f1e:	030b      	lsls	r3, r1, #12
 8001f20:	0b1b      	lsrs	r3, r3, #12
 8001f22:	469b      	mov	fp, r3
 8001f24:	004d      	lsls	r5, r1, #1
 8001f26:	0fcb      	lsrs	r3, r1, #31
 8001f28:	0004      	movs	r4, r0
 8001f2a:	4691      	mov	r9, r2
 8001f2c:	4698      	mov	r8, r3
 8001f2e:	b087      	sub	sp, #28
 8001f30:	0d6d      	lsrs	r5, r5, #21
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dmul+0x26>
 8001f34:	e1cd      	b.n	80022d2 <__aeabi_dmul+0x3c2>
 8001f36:	4bce      	ldr	r3, [pc, #824]	; (8002270 <__aeabi_dmul+0x360>)
 8001f38:	429d      	cmp	r5, r3
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dmul+0x2e>
 8001f3c:	e1e9      	b.n	8002312 <__aeabi_dmul+0x402>
 8001f3e:	465a      	mov	r2, fp
 8001f40:	0f43      	lsrs	r3, r0, #29
 8001f42:	00d2      	lsls	r2, r2, #3
 8001f44:	4313      	orrs	r3, r2
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	0412      	lsls	r2, r2, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	00c3      	lsls	r3, r0, #3
 8001f4e:	469a      	mov	sl, r3
 8001f50:	4bc8      	ldr	r3, [pc, #800]	; (8002274 <__aeabi_dmul+0x364>)
 8001f52:	4693      	mov	fp, r2
 8001f54:	469c      	mov	ip, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	2600      	movs	r6, #0
 8001f5a:	4465      	add	r5, ip
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	033c      	lsls	r4, r7, #12
 8001f60:	007b      	lsls	r3, r7, #1
 8001f62:	4648      	mov	r0, r9
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	0fff      	lsrs	r7, r7, #31
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dmul+0x60>
 8001f6e:	e189      	b.n	8002284 <__aeabi_dmul+0x374>
 8001f70:	4abf      	ldr	r2, [pc, #764]	; (8002270 <__aeabi_dmul+0x360>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d019      	beq.n	8001faa <__aeabi_dmul+0x9a>
 8001f76:	0f42      	lsrs	r2, r0, #29
 8001f78:	00e4      	lsls	r4, r4, #3
 8001f7a:	4322      	orrs	r2, r4
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0424      	lsls	r4, r4, #16
 8001f80:	4314      	orrs	r4, r2
 8001f82:	4abc      	ldr	r2, [pc, #752]	; (8002274 <__aeabi_dmul+0x364>)
 8001f84:	2100      	movs	r1, #0
 8001f86:	4694      	mov	ip, r2
 8001f88:	4642      	mov	r2, r8
 8001f8a:	4463      	add	r3, ip
 8001f8c:	195b      	adds	r3, r3, r5
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	9b01      	ldr	r3, [sp, #4]
 8001f92:	407a      	eors	r2, r7
 8001f94:	3301      	adds	r3, #1
 8001f96:	00c0      	lsls	r0, r0, #3
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2e0a      	cmp	r6, #10
 8001f9e:	dd1c      	ble.n	8001fda <__aeabi_dmul+0xca>
 8001fa0:	003a      	movs	r2, r7
 8001fa2:	2e0b      	cmp	r6, #11
 8001fa4:	d05e      	beq.n	8002064 <__aeabi_dmul+0x154>
 8001fa6:	4647      	mov	r7, r8
 8001fa8:	e056      	b.n	8002058 <__aeabi_dmul+0x148>
 8001faa:	4649      	mov	r1, r9
 8001fac:	4bb0      	ldr	r3, [pc, #704]	; (8002270 <__aeabi_dmul+0x360>)
 8001fae:	4321      	orrs	r1, r4
 8001fb0:	18eb      	adds	r3, r5, r3
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	2900      	cmp	r1, #0
 8001fb6:	d12a      	bne.n	800200e <__aeabi_dmul+0xfe>
 8001fb8:	2080      	movs	r0, #128	; 0x80
 8001fba:	2202      	movs	r2, #2
 8001fbc:	0100      	lsls	r0, r0, #4
 8001fbe:	002b      	movs	r3, r5
 8001fc0:	4684      	mov	ip, r0
 8001fc2:	4316      	orrs	r6, r2
 8001fc4:	4642      	mov	r2, r8
 8001fc6:	4463      	add	r3, ip
 8001fc8:	407a      	eors	r2, r7
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	9302      	str	r3, [sp, #8]
 8001fce:	2e0a      	cmp	r6, #10
 8001fd0:	dd00      	ble.n	8001fd4 <__aeabi_dmul+0xc4>
 8001fd2:	e231      	b.n	8002438 <__aeabi_dmul+0x528>
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	2400      	movs	r4, #0
 8001fd8:	2102      	movs	r1, #2
 8001fda:	2e02      	cmp	r6, #2
 8001fdc:	dc26      	bgt.n	800202c <__aeabi_dmul+0x11c>
 8001fde:	3e01      	subs	r6, #1
 8001fe0:	2e01      	cmp	r6, #1
 8001fe2:	d852      	bhi.n	800208a <__aeabi_dmul+0x17a>
 8001fe4:	2902      	cmp	r1, #2
 8001fe6:	d04c      	beq.n	8002082 <__aeabi_dmul+0x172>
 8001fe8:	2901      	cmp	r1, #1
 8001fea:	d000      	beq.n	8001fee <__aeabi_dmul+0xde>
 8001fec:	e118      	b.n	8002220 <__aeabi_dmul+0x310>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	051b      	lsls	r3, r3, #20
 8001ff6:	4323      	orrs	r3, r4
 8001ff8:	07d2      	lsls	r2, r2, #31
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	0019      	movs	r1, r3
 8002000:	b007      	add	sp, #28
 8002002:	bcf0      	pop	{r4, r5, r6, r7}
 8002004:	46bb      	mov	fp, r7
 8002006:	46b2      	mov	sl, r6
 8002008:	46a9      	mov	r9, r5
 800200a:	46a0      	mov	r8, r4
 800200c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	2203      	movs	r2, #3
 8002012:	0109      	lsls	r1, r1, #4
 8002014:	002b      	movs	r3, r5
 8002016:	468c      	mov	ip, r1
 8002018:	4316      	orrs	r6, r2
 800201a:	4642      	mov	r2, r8
 800201c:	4463      	add	r3, ip
 800201e:	407a      	eors	r2, r7
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	9302      	str	r3, [sp, #8]
 8002024:	2e0a      	cmp	r6, #10
 8002026:	dd00      	ble.n	800202a <__aeabi_dmul+0x11a>
 8002028:	e228      	b.n	800247c <__aeabi_dmul+0x56c>
 800202a:	2103      	movs	r1, #3
 800202c:	2501      	movs	r5, #1
 800202e:	40b5      	lsls	r5, r6
 8002030:	46ac      	mov	ip, r5
 8002032:	26a6      	movs	r6, #166	; 0xa6
 8002034:	4663      	mov	r3, ip
 8002036:	00f6      	lsls	r6, r6, #3
 8002038:	4035      	ands	r5, r6
 800203a:	4233      	tst	r3, r6
 800203c:	d10b      	bne.n	8002056 <__aeabi_dmul+0x146>
 800203e:	2690      	movs	r6, #144	; 0x90
 8002040:	00b6      	lsls	r6, r6, #2
 8002042:	4233      	tst	r3, r6
 8002044:	d118      	bne.n	8002078 <__aeabi_dmul+0x168>
 8002046:	3eb9      	subs	r6, #185	; 0xb9
 8002048:	3eff      	subs	r6, #255	; 0xff
 800204a:	421e      	tst	r6, r3
 800204c:	d01d      	beq.n	800208a <__aeabi_dmul+0x17a>
 800204e:	46a3      	mov	fp, r4
 8002050:	4682      	mov	sl, r0
 8002052:	9100      	str	r1, [sp, #0]
 8002054:	e000      	b.n	8002058 <__aeabi_dmul+0x148>
 8002056:	0017      	movs	r7, r2
 8002058:	9900      	ldr	r1, [sp, #0]
 800205a:	003a      	movs	r2, r7
 800205c:	2902      	cmp	r1, #2
 800205e:	d010      	beq.n	8002082 <__aeabi_dmul+0x172>
 8002060:	465c      	mov	r4, fp
 8002062:	4650      	mov	r0, sl
 8002064:	2903      	cmp	r1, #3
 8002066:	d1bf      	bne.n	8001fe8 <__aeabi_dmul+0xd8>
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	031b      	lsls	r3, r3, #12
 800206c:	431c      	orrs	r4, r3
 800206e:	0324      	lsls	r4, r4, #12
 8002070:	0005      	movs	r5, r0
 8002072:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <__aeabi_dmul+0x360>)
 8002074:	0b24      	lsrs	r4, r4, #12
 8002076:	e7bd      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002078:	2480      	movs	r4, #128	; 0x80
 800207a:	2200      	movs	r2, #0
 800207c:	4b7c      	ldr	r3, [pc, #496]	; (8002270 <__aeabi_dmul+0x360>)
 800207e:	0324      	lsls	r4, r4, #12
 8002080:	e7b8      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002082:	2400      	movs	r4, #0
 8002084:	2500      	movs	r5, #0
 8002086:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <__aeabi_dmul+0x360>)
 8002088:	e7b4      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800208a:	4653      	mov	r3, sl
 800208c:	041e      	lsls	r6, r3, #16
 800208e:	0c36      	lsrs	r6, r6, #16
 8002090:	0c1f      	lsrs	r7, r3, #16
 8002092:	0033      	movs	r3, r6
 8002094:	0c01      	lsrs	r1, r0, #16
 8002096:	0400      	lsls	r0, r0, #16
 8002098:	0c00      	lsrs	r0, r0, #16
 800209a:	4343      	muls	r3, r0
 800209c:	4698      	mov	r8, r3
 800209e:	0003      	movs	r3, r0
 80020a0:	437b      	muls	r3, r7
 80020a2:	4699      	mov	r9, r3
 80020a4:	0033      	movs	r3, r6
 80020a6:	434b      	muls	r3, r1
 80020a8:	469c      	mov	ip, r3
 80020aa:	4643      	mov	r3, r8
 80020ac:	000d      	movs	r5, r1
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	469a      	mov	sl, r3
 80020b2:	437d      	muls	r5, r7
 80020b4:	44cc      	add	ip, r9
 80020b6:	44d4      	add	ip, sl
 80020b8:	9500      	str	r5, [sp, #0]
 80020ba:	45e1      	cmp	r9, ip
 80020bc:	d904      	bls.n	80020c8 <__aeabi_dmul+0x1b8>
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	025b      	lsls	r3, r3, #9
 80020c2:	4699      	mov	r9, r3
 80020c4:	444d      	add	r5, r9
 80020c6:	9500      	str	r5, [sp, #0]
 80020c8:	4663      	mov	r3, ip
 80020ca:	0c1b      	lsrs	r3, r3, #16
 80020cc:	001d      	movs	r5, r3
 80020ce:	4663      	mov	r3, ip
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	469c      	mov	ip, r3
 80020d4:	4643      	mov	r3, r8
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	4698      	mov	r8, r3
 80020dc:	4663      	mov	r3, ip
 80020de:	4443      	add	r3, r8
 80020e0:	9303      	str	r3, [sp, #12]
 80020e2:	0c23      	lsrs	r3, r4, #16
 80020e4:	4698      	mov	r8, r3
 80020e6:	0033      	movs	r3, r6
 80020e8:	0424      	lsls	r4, r4, #16
 80020ea:	0c24      	lsrs	r4, r4, #16
 80020ec:	4363      	muls	r3, r4
 80020ee:	469c      	mov	ip, r3
 80020f0:	0023      	movs	r3, r4
 80020f2:	437b      	muls	r3, r7
 80020f4:	4699      	mov	r9, r3
 80020f6:	4643      	mov	r3, r8
 80020f8:	435e      	muls	r6, r3
 80020fa:	435f      	muls	r7, r3
 80020fc:	444e      	add	r6, r9
 80020fe:	4663      	mov	r3, ip
 8002100:	46b2      	mov	sl, r6
 8002102:	0c1e      	lsrs	r6, r3, #16
 8002104:	4456      	add	r6, sl
 8002106:	45b1      	cmp	r9, r6
 8002108:	d903      	bls.n	8002112 <__aeabi_dmul+0x202>
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	025b      	lsls	r3, r3, #9
 800210e:	4699      	mov	r9, r3
 8002110:	444f      	add	r7, r9
 8002112:	0c33      	lsrs	r3, r6, #16
 8002114:	4699      	mov	r9, r3
 8002116:	003b      	movs	r3, r7
 8002118:	444b      	add	r3, r9
 800211a:	9305      	str	r3, [sp, #20]
 800211c:	4663      	mov	r3, ip
 800211e:	46ac      	mov	ip, r5
 8002120:	041f      	lsls	r7, r3, #16
 8002122:	0c3f      	lsrs	r7, r7, #16
 8002124:	0436      	lsls	r6, r6, #16
 8002126:	19f6      	adds	r6, r6, r7
 8002128:	44b4      	add	ip, r6
 800212a:	4663      	mov	r3, ip
 800212c:	9304      	str	r3, [sp, #16]
 800212e:	465b      	mov	r3, fp
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	469c      	mov	ip, r3
 8002134:	465b      	mov	r3, fp
 8002136:	041f      	lsls	r7, r3, #16
 8002138:	0c3f      	lsrs	r7, r7, #16
 800213a:	003b      	movs	r3, r7
 800213c:	4343      	muls	r3, r0
 800213e:	4699      	mov	r9, r3
 8002140:	4663      	mov	r3, ip
 8002142:	4343      	muls	r3, r0
 8002144:	469a      	mov	sl, r3
 8002146:	464b      	mov	r3, r9
 8002148:	4660      	mov	r0, ip
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	469b      	mov	fp, r3
 800214e:	4348      	muls	r0, r1
 8002150:	4379      	muls	r1, r7
 8002152:	4451      	add	r1, sl
 8002154:	4459      	add	r1, fp
 8002156:	458a      	cmp	sl, r1
 8002158:	d903      	bls.n	8002162 <__aeabi_dmul+0x252>
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	025b      	lsls	r3, r3, #9
 800215e:	469a      	mov	sl, r3
 8002160:	4450      	add	r0, sl
 8002162:	0c0b      	lsrs	r3, r1, #16
 8002164:	469a      	mov	sl, r3
 8002166:	464b      	mov	r3, r9
 8002168:	041b      	lsls	r3, r3, #16
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	4699      	mov	r9, r3
 800216e:	003b      	movs	r3, r7
 8002170:	4363      	muls	r3, r4
 8002172:	0409      	lsls	r1, r1, #16
 8002174:	4645      	mov	r5, r8
 8002176:	4449      	add	r1, r9
 8002178:	4699      	mov	r9, r3
 800217a:	4663      	mov	r3, ip
 800217c:	435c      	muls	r4, r3
 800217e:	436b      	muls	r3, r5
 8002180:	469c      	mov	ip, r3
 8002182:	464b      	mov	r3, r9
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	4698      	mov	r8, r3
 8002188:	436f      	muls	r7, r5
 800218a:	193f      	adds	r7, r7, r4
 800218c:	4447      	add	r7, r8
 800218e:	4450      	add	r0, sl
 8002190:	42bc      	cmp	r4, r7
 8002192:	d903      	bls.n	800219c <__aeabi_dmul+0x28c>
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	4698      	mov	r8, r3
 800219a:	44c4      	add	ip, r8
 800219c:	9b04      	ldr	r3, [sp, #16]
 800219e:	9d00      	ldr	r5, [sp, #0]
 80021a0:	4698      	mov	r8, r3
 80021a2:	4445      	add	r5, r8
 80021a4:	42b5      	cmp	r5, r6
 80021a6:	41b6      	sbcs	r6, r6
 80021a8:	4273      	negs	r3, r6
 80021aa:	4698      	mov	r8, r3
 80021ac:	464b      	mov	r3, r9
 80021ae:	041e      	lsls	r6, r3, #16
 80021b0:	9b05      	ldr	r3, [sp, #20]
 80021b2:	043c      	lsls	r4, r7, #16
 80021b4:	4699      	mov	r9, r3
 80021b6:	0c36      	lsrs	r6, r6, #16
 80021b8:	19a4      	adds	r4, r4, r6
 80021ba:	444c      	add	r4, r9
 80021bc:	46a1      	mov	r9, r4
 80021be:	4683      	mov	fp, r0
 80021c0:	186e      	adds	r6, r5, r1
 80021c2:	44c1      	add	r9, r8
 80021c4:	428e      	cmp	r6, r1
 80021c6:	4189      	sbcs	r1, r1
 80021c8:	44cb      	add	fp, r9
 80021ca:	465d      	mov	r5, fp
 80021cc:	4249      	negs	r1, r1
 80021ce:	186d      	adds	r5, r5, r1
 80021d0:	429c      	cmp	r4, r3
 80021d2:	41a4      	sbcs	r4, r4
 80021d4:	45c1      	cmp	r9, r8
 80021d6:	419b      	sbcs	r3, r3
 80021d8:	4583      	cmp	fp, r0
 80021da:	4180      	sbcs	r0, r0
 80021dc:	428d      	cmp	r5, r1
 80021de:	4189      	sbcs	r1, r1
 80021e0:	425b      	negs	r3, r3
 80021e2:	4264      	negs	r4, r4
 80021e4:	431c      	orrs	r4, r3
 80021e6:	4240      	negs	r0, r0
 80021e8:	9b03      	ldr	r3, [sp, #12]
 80021ea:	4249      	negs	r1, r1
 80021ec:	4301      	orrs	r1, r0
 80021ee:	0270      	lsls	r0, r6, #9
 80021f0:	0c3f      	lsrs	r7, r7, #16
 80021f2:	4318      	orrs	r0, r3
 80021f4:	19e4      	adds	r4, r4, r7
 80021f6:	1e47      	subs	r7, r0, #1
 80021f8:	41b8      	sbcs	r0, r7
 80021fa:	1864      	adds	r4, r4, r1
 80021fc:	4464      	add	r4, ip
 80021fe:	0df6      	lsrs	r6, r6, #23
 8002200:	0261      	lsls	r1, r4, #9
 8002202:	4330      	orrs	r0, r6
 8002204:	0dec      	lsrs	r4, r5, #23
 8002206:	026e      	lsls	r6, r5, #9
 8002208:	430c      	orrs	r4, r1
 800220a:	4330      	orrs	r0, r6
 800220c:	01c9      	lsls	r1, r1, #7
 800220e:	d400      	bmi.n	8002212 <__aeabi_dmul+0x302>
 8002210:	e0f1      	b.n	80023f6 <__aeabi_dmul+0x4e6>
 8002212:	2101      	movs	r1, #1
 8002214:	0843      	lsrs	r3, r0, #1
 8002216:	4001      	ands	r1, r0
 8002218:	430b      	orrs	r3, r1
 800221a:	07e0      	lsls	r0, r4, #31
 800221c:	4318      	orrs	r0, r3
 800221e:	0864      	lsrs	r4, r4, #1
 8002220:	4915      	ldr	r1, [pc, #84]	; (8002278 <__aeabi_dmul+0x368>)
 8002222:	9b02      	ldr	r3, [sp, #8]
 8002224:	468c      	mov	ip, r1
 8002226:	4463      	add	r3, ip
 8002228:	2b00      	cmp	r3, #0
 800222a:	dc00      	bgt.n	800222e <__aeabi_dmul+0x31e>
 800222c:	e097      	b.n	800235e <__aeabi_dmul+0x44e>
 800222e:	0741      	lsls	r1, r0, #29
 8002230:	d009      	beq.n	8002246 <__aeabi_dmul+0x336>
 8002232:	210f      	movs	r1, #15
 8002234:	4001      	ands	r1, r0
 8002236:	2904      	cmp	r1, #4
 8002238:	d005      	beq.n	8002246 <__aeabi_dmul+0x336>
 800223a:	1d01      	adds	r1, r0, #4
 800223c:	4281      	cmp	r1, r0
 800223e:	4180      	sbcs	r0, r0
 8002240:	4240      	negs	r0, r0
 8002242:	1824      	adds	r4, r4, r0
 8002244:	0008      	movs	r0, r1
 8002246:	01e1      	lsls	r1, r4, #7
 8002248:	d506      	bpl.n	8002258 <__aeabi_dmul+0x348>
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	00c9      	lsls	r1, r1, #3
 800224e:	468c      	mov	ip, r1
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <__aeabi_dmul+0x36c>)
 8002252:	401c      	ands	r4, r3
 8002254:	9b02      	ldr	r3, [sp, #8]
 8002256:	4463      	add	r3, ip
 8002258:	4909      	ldr	r1, [pc, #36]	; (8002280 <__aeabi_dmul+0x370>)
 800225a:	428b      	cmp	r3, r1
 800225c:	dd00      	ble.n	8002260 <__aeabi_dmul+0x350>
 800225e:	e710      	b.n	8002082 <__aeabi_dmul+0x172>
 8002260:	0761      	lsls	r1, r4, #29
 8002262:	08c5      	lsrs	r5, r0, #3
 8002264:	0264      	lsls	r4, r4, #9
 8002266:	055b      	lsls	r3, r3, #21
 8002268:	430d      	orrs	r5, r1
 800226a:	0b24      	lsrs	r4, r4, #12
 800226c:	0d5b      	lsrs	r3, r3, #21
 800226e:	e6c1      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002270:	000007ff 	.word	0x000007ff
 8002274:	fffffc01 	.word	0xfffffc01
 8002278:	000003ff 	.word	0x000003ff
 800227c:	feffffff 	.word	0xfeffffff
 8002280:	000007fe 	.word	0x000007fe
 8002284:	464b      	mov	r3, r9
 8002286:	4323      	orrs	r3, r4
 8002288:	d059      	beq.n	800233e <__aeabi_dmul+0x42e>
 800228a:	2c00      	cmp	r4, #0
 800228c:	d100      	bne.n	8002290 <__aeabi_dmul+0x380>
 800228e:	e0a3      	b.n	80023d8 <__aeabi_dmul+0x4c8>
 8002290:	0020      	movs	r0, r4
 8002292:	f000 fdf9 	bl	8002e88 <__clzsi2>
 8002296:	0001      	movs	r1, r0
 8002298:	0003      	movs	r3, r0
 800229a:	390b      	subs	r1, #11
 800229c:	221d      	movs	r2, #29
 800229e:	1a52      	subs	r2, r2, r1
 80022a0:	4649      	mov	r1, r9
 80022a2:	0018      	movs	r0, r3
 80022a4:	40d1      	lsrs	r1, r2
 80022a6:	464a      	mov	r2, r9
 80022a8:	3808      	subs	r0, #8
 80022aa:	4082      	lsls	r2, r0
 80022ac:	4084      	lsls	r4, r0
 80022ae:	0010      	movs	r0, r2
 80022b0:	430c      	orrs	r4, r1
 80022b2:	4a74      	ldr	r2, [pc, #464]	; (8002484 <__aeabi_dmul+0x574>)
 80022b4:	1aeb      	subs	r3, r5, r3
 80022b6:	4694      	mov	ip, r2
 80022b8:	4642      	mov	r2, r8
 80022ba:	4463      	add	r3, ip
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	9b01      	ldr	r3, [sp, #4]
 80022c0:	407a      	eors	r2, r7
 80022c2:	3301      	adds	r3, #1
 80022c4:	2100      	movs	r1, #0
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	2e0a      	cmp	r6, #10
 80022cc:	dd00      	ble.n	80022d0 <__aeabi_dmul+0x3c0>
 80022ce:	e667      	b.n	8001fa0 <__aeabi_dmul+0x90>
 80022d0:	e683      	b.n	8001fda <__aeabi_dmul+0xca>
 80022d2:	465b      	mov	r3, fp
 80022d4:	4303      	orrs	r3, r0
 80022d6:	469a      	mov	sl, r3
 80022d8:	d02a      	beq.n	8002330 <__aeabi_dmul+0x420>
 80022da:	465b      	mov	r3, fp
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d06d      	beq.n	80023bc <__aeabi_dmul+0x4ac>
 80022e0:	4658      	mov	r0, fp
 80022e2:	f000 fdd1 	bl	8002e88 <__clzsi2>
 80022e6:	0001      	movs	r1, r0
 80022e8:	0003      	movs	r3, r0
 80022ea:	390b      	subs	r1, #11
 80022ec:	221d      	movs	r2, #29
 80022ee:	1a52      	subs	r2, r2, r1
 80022f0:	0021      	movs	r1, r4
 80022f2:	0018      	movs	r0, r3
 80022f4:	465d      	mov	r5, fp
 80022f6:	40d1      	lsrs	r1, r2
 80022f8:	3808      	subs	r0, #8
 80022fa:	4085      	lsls	r5, r0
 80022fc:	000a      	movs	r2, r1
 80022fe:	4084      	lsls	r4, r0
 8002300:	432a      	orrs	r2, r5
 8002302:	4693      	mov	fp, r2
 8002304:	46a2      	mov	sl, r4
 8002306:	4d5f      	ldr	r5, [pc, #380]	; (8002484 <__aeabi_dmul+0x574>)
 8002308:	2600      	movs	r6, #0
 800230a:	1aed      	subs	r5, r5, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	e625      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002312:	465b      	mov	r3, fp
 8002314:	4303      	orrs	r3, r0
 8002316:	469a      	mov	sl, r3
 8002318:	d105      	bne.n	8002326 <__aeabi_dmul+0x416>
 800231a:	2300      	movs	r3, #0
 800231c:	469b      	mov	fp, r3
 800231e:	3302      	adds	r3, #2
 8002320:	2608      	movs	r6, #8
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	e61b      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002326:	2303      	movs	r3, #3
 8002328:	4682      	mov	sl, r0
 800232a:	260c      	movs	r6, #12
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	e616      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002330:	2300      	movs	r3, #0
 8002332:	469b      	mov	fp, r3
 8002334:	3301      	adds	r3, #1
 8002336:	2604      	movs	r6, #4
 8002338:	2500      	movs	r5, #0
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	e60f      	b.n	8001f5e <__aeabi_dmul+0x4e>
 800233e:	4642      	mov	r2, r8
 8002340:	3301      	adds	r3, #1
 8002342:	9501      	str	r5, [sp, #4]
 8002344:	431e      	orrs	r6, r3
 8002346:	9b01      	ldr	r3, [sp, #4]
 8002348:	407a      	eors	r2, r7
 800234a:	3301      	adds	r3, #1
 800234c:	2400      	movs	r4, #0
 800234e:	2000      	movs	r0, #0
 8002350:	2101      	movs	r1, #1
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	2e0a      	cmp	r6, #10
 8002358:	dd00      	ble.n	800235c <__aeabi_dmul+0x44c>
 800235a:	e621      	b.n	8001fa0 <__aeabi_dmul+0x90>
 800235c:	e63d      	b.n	8001fda <__aeabi_dmul+0xca>
 800235e:	2101      	movs	r1, #1
 8002360:	1ac9      	subs	r1, r1, r3
 8002362:	2938      	cmp	r1, #56	; 0x38
 8002364:	dd00      	ble.n	8002368 <__aeabi_dmul+0x458>
 8002366:	e642      	b.n	8001fee <__aeabi_dmul+0xde>
 8002368:	291f      	cmp	r1, #31
 800236a:	dd47      	ble.n	80023fc <__aeabi_dmul+0x4ec>
 800236c:	261f      	movs	r6, #31
 800236e:	0025      	movs	r5, r4
 8002370:	4276      	negs	r6, r6
 8002372:	1af3      	subs	r3, r6, r3
 8002374:	40dd      	lsrs	r5, r3
 8002376:	002b      	movs	r3, r5
 8002378:	2920      	cmp	r1, #32
 800237a:	d005      	beq.n	8002388 <__aeabi_dmul+0x478>
 800237c:	4942      	ldr	r1, [pc, #264]	; (8002488 <__aeabi_dmul+0x578>)
 800237e:	9d02      	ldr	r5, [sp, #8]
 8002380:	468c      	mov	ip, r1
 8002382:	4465      	add	r5, ip
 8002384:	40ac      	lsls	r4, r5
 8002386:	4320      	orrs	r0, r4
 8002388:	1e41      	subs	r1, r0, #1
 800238a:	4188      	sbcs	r0, r1
 800238c:	4318      	orrs	r0, r3
 800238e:	2307      	movs	r3, #7
 8002390:	001d      	movs	r5, r3
 8002392:	2400      	movs	r4, #0
 8002394:	4005      	ands	r5, r0
 8002396:	4203      	tst	r3, r0
 8002398:	d04a      	beq.n	8002430 <__aeabi_dmul+0x520>
 800239a:	230f      	movs	r3, #15
 800239c:	2400      	movs	r4, #0
 800239e:	4003      	ands	r3, r0
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d042      	beq.n	800242a <__aeabi_dmul+0x51a>
 80023a4:	1d03      	adds	r3, r0, #4
 80023a6:	4283      	cmp	r3, r0
 80023a8:	4180      	sbcs	r0, r0
 80023aa:	4240      	negs	r0, r0
 80023ac:	1824      	adds	r4, r4, r0
 80023ae:	0018      	movs	r0, r3
 80023b0:	0223      	lsls	r3, r4, #8
 80023b2:	d53a      	bpl.n	800242a <__aeabi_dmul+0x51a>
 80023b4:	2301      	movs	r3, #1
 80023b6:	2400      	movs	r4, #0
 80023b8:	2500      	movs	r5, #0
 80023ba:	e61b      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 80023bc:	f000 fd64 	bl	8002e88 <__clzsi2>
 80023c0:	0001      	movs	r1, r0
 80023c2:	0003      	movs	r3, r0
 80023c4:	3115      	adds	r1, #21
 80023c6:	3320      	adds	r3, #32
 80023c8:	291c      	cmp	r1, #28
 80023ca:	dd8f      	ble.n	80022ec <__aeabi_dmul+0x3dc>
 80023cc:	3808      	subs	r0, #8
 80023ce:	2200      	movs	r2, #0
 80023d0:	4084      	lsls	r4, r0
 80023d2:	4692      	mov	sl, r2
 80023d4:	46a3      	mov	fp, r4
 80023d6:	e796      	b.n	8002306 <__aeabi_dmul+0x3f6>
 80023d8:	f000 fd56 	bl	8002e88 <__clzsi2>
 80023dc:	0001      	movs	r1, r0
 80023de:	0003      	movs	r3, r0
 80023e0:	3115      	adds	r1, #21
 80023e2:	3320      	adds	r3, #32
 80023e4:	291c      	cmp	r1, #28
 80023e6:	dc00      	bgt.n	80023ea <__aeabi_dmul+0x4da>
 80023e8:	e758      	b.n	800229c <__aeabi_dmul+0x38c>
 80023ea:	0002      	movs	r2, r0
 80023ec:	464c      	mov	r4, r9
 80023ee:	3a08      	subs	r2, #8
 80023f0:	2000      	movs	r0, #0
 80023f2:	4094      	lsls	r4, r2
 80023f4:	e75d      	b.n	80022b2 <__aeabi_dmul+0x3a2>
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	e711      	b.n	8002220 <__aeabi_dmul+0x310>
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <__aeabi_dmul+0x57c>)
 80023fe:	0026      	movs	r6, r4
 8002400:	469c      	mov	ip, r3
 8002402:	0003      	movs	r3, r0
 8002404:	9d02      	ldr	r5, [sp, #8]
 8002406:	40cb      	lsrs	r3, r1
 8002408:	4465      	add	r5, ip
 800240a:	40ae      	lsls	r6, r5
 800240c:	431e      	orrs	r6, r3
 800240e:	0003      	movs	r3, r0
 8002410:	40ab      	lsls	r3, r5
 8002412:	1e58      	subs	r0, r3, #1
 8002414:	4183      	sbcs	r3, r0
 8002416:	0030      	movs	r0, r6
 8002418:	4318      	orrs	r0, r3
 800241a:	40cc      	lsrs	r4, r1
 800241c:	0743      	lsls	r3, r0, #29
 800241e:	d0c7      	beq.n	80023b0 <__aeabi_dmul+0x4a0>
 8002420:	230f      	movs	r3, #15
 8002422:	4003      	ands	r3, r0
 8002424:	2b04      	cmp	r3, #4
 8002426:	d1bd      	bne.n	80023a4 <__aeabi_dmul+0x494>
 8002428:	e7c2      	b.n	80023b0 <__aeabi_dmul+0x4a0>
 800242a:	0765      	lsls	r5, r4, #29
 800242c:	0264      	lsls	r4, r4, #9
 800242e:	0b24      	lsrs	r4, r4, #12
 8002430:	08c0      	lsrs	r0, r0, #3
 8002432:	2300      	movs	r3, #0
 8002434:	4305      	orrs	r5, r0
 8002436:	e5dd      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002438:	2500      	movs	r5, #0
 800243a:	2302      	movs	r3, #2
 800243c:	2e0f      	cmp	r6, #15
 800243e:	d10c      	bne.n	800245a <__aeabi_dmul+0x54a>
 8002440:	2480      	movs	r4, #128	; 0x80
 8002442:	465b      	mov	r3, fp
 8002444:	0324      	lsls	r4, r4, #12
 8002446:	4223      	tst	r3, r4
 8002448:	d00e      	beq.n	8002468 <__aeabi_dmul+0x558>
 800244a:	4221      	tst	r1, r4
 800244c:	d10c      	bne.n	8002468 <__aeabi_dmul+0x558>
 800244e:	430c      	orrs	r4, r1
 8002450:	0324      	lsls	r4, r4, #12
 8002452:	003a      	movs	r2, r7
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <__aeabi_dmul+0x580>)
 8002456:	0b24      	lsrs	r4, r4, #12
 8002458:	e5cc      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800245a:	2e0b      	cmp	r6, #11
 800245c:	d000      	beq.n	8002460 <__aeabi_dmul+0x550>
 800245e:	e5a2      	b.n	8001fa6 <__aeabi_dmul+0x96>
 8002460:	468b      	mov	fp, r1
 8002462:	46aa      	mov	sl, r5
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	e5f7      	b.n	8002058 <__aeabi_dmul+0x148>
 8002468:	2480      	movs	r4, #128	; 0x80
 800246a:	465b      	mov	r3, fp
 800246c:	0324      	lsls	r4, r4, #12
 800246e:	431c      	orrs	r4, r3
 8002470:	0324      	lsls	r4, r4, #12
 8002472:	4642      	mov	r2, r8
 8002474:	4655      	mov	r5, sl
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <__aeabi_dmul+0x580>)
 8002478:	0b24      	lsrs	r4, r4, #12
 800247a:	e5bb      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800247c:	464d      	mov	r5, r9
 800247e:	0021      	movs	r1, r4
 8002480:	2303      	movs	r3, #3
 8002482:	e7db      	b.n	800243c <__aeabi_dmul+0x52c>
 8002484:	fffffc0d 	.word	0xfffffc0d
 8002488:	0000043e 	.word	0x0000043e
 800248c:	0000041e 	.word	0x0000041e
 8002490:	000007ff 	.word	0x000007ff

08002494 <__aeabi_dsub>:
 8002494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002496:	4657      	mov	r7, sl
 8002498:	464e      	mov	r6, r9
 800249a:	4645      	mov	r5, r8
 800249c:	46de      	mov	lr, fp
 800249e:	b5e0      	push	{r5, r6, r7, lr}
 80024a0:	000d      	movs	r5, r1
 80024a2:	0004      	movs	r4, r0
 80024a4:	0019      	movs	r1, r3
 80024a6:	0010      	movs	r0, r2
 80024a8:	032b      	lsls	r3, r5, #12
 80024aa:	0a5b      	lsrs	r3, r3, #9
 80024ac:	0f62      	lsrs	r2, r4, #29
 80024ae:	431a      	orrs	r2, r3
 80024b0:	00e3      	lsls	r3, r4, #3
 80024b2:	030c      	lsls	r4, r1, #12
 80024b4:	0a64      	lsrs	r4, r4, #9
 80024b6:	0f47      	lsrs	r7, r0, #29
 80024b8:	4327      	orrs	r7, r4
 80024ba:	4cd0      	ldr	r4, [pc, #832]	; (80027fc <__aeabi_dsub+0x368>)
 80024bc:	006e      	lsls	r6, r5, #1
 80024be:	4691      	mov	r9, r2
 80024c0:	b083      	sub	sp, #12
 80024c2:	004a      	lsls	r2, r1, #1
 80024c4:	00c0      	lsls	r0, r0, #3
 80024c6:	4698      	mov	r8, r3
 80024c8:	46a2      	mov	sl, r4
 80024ca:	0d76      	lsrs	r6, r6, #21
 80024cc:	0fed      	lsrs	r5, r5, #31
 80024ce:	0d52      	lsrs	r2, r2, #21
 80024d0:	0fc9      	lsrs	r1, r1, #31
 80024d2:	9001      	str	r0, [sp, #4]
 80024d4:	42a2      	cmp	r2, r4
 80024d6:	d100      	bne.n	80024da <__aeabi_dsub+0x46>
 80024d8:	e0b9      	b.n	800264e <__aeabi_dsub+0x1ba>
 80024da:	2401      	movs	r4, #1
 80024dc:	4061      	eors	r1, r4
 80024de:	468b      	mov	fp, r1
 80024e0:	428d      	cmp	r5, r1
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x52>
 80024e4:	e08d      	b.n	8002602 <__aeabi_dsub+0x16e>
 80024e6:	1ab4      	subs	r4, r6, r2
 80024e8:	46a4      	mov	ip, r4
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	dc00      	bgt.n	80024f0 <__aeabi_dsub+0x5c>
 80024ee:	e0b7      	b.n	8002660 <__aeabi_dsub+0x1cc>
 80024f0:	2a00      	cmp	r2, #0
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dsub+0x62>
 80024f4:	e0cb      	b.n	800268e <__aeabi_dsub+0x1fa>
 80024f6:	4ac1      	ldr	r2, [pc, #772]	; (80027fc <__aeabi_dsub+0x368>)
 80024f8:	4296      	cmp	r6, r2
 80024fa:	d100      	bne.n	80024fe <__aeabi_dsub+0x6a>
 80024fc:	e186      	b.n	800280c <__aeabi_dsub+0x378>
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	0412      	lsls	r2, r2, #16
 8002502:	4317      	orrs	r7, r2
 8002504:	4662      	mov	r2, ip
 8002506:	2a38      	cmp	r2, #56	; 0x38
 8002508:	dd00      	ble.n	800250c <__aeabi_dsub+0x78>
 800250a:	e1a4      	b.n	8002856 <__aeabi_dsub+0x3c2>
 800250c:	2a1f      	cmp	r2, #31
 800250e:	dd00      	ble.n	8002512 <__aeabi_dsub+0x7e>
 8002510:	e21d      	b.n	800294e <__aeabi_dsub+0x4ba>
 8002512:	4661      	mov	r1, ip
 8002514:	2220      	movs	r2, #32
 8002516:	003c      	movs	r4, r7
 8002518:	1a52      	subs	r2, r2, r1
 800251a:	0001      	movs	r1, r0
 800251c:	4090      	lsls	r0, r2
 800251e:	4094      	lsls	r4, r2
 8002520:	1e42      	subs	r2, r0, #1
 8002522:	4190      	sbcs	r0, r2
 8002524:	4662      	mov	r2, ip
 8002526:	46a0      	mov	r8, r4
 8002528:	4664      	mov	r4, ip
 800252a:	40d7      	lsrs	r7, r2
 800252c:	464a      	mov	r2, r9
 800252e:	40e1      	lsrs	r1, r4
 8002530:	4644      	mov	r4, r8
 8002532:	1bd2      	subs	r2, r2, r7
 8002534:	4691      	mov	r9, r2
 8002536:	430c      	orrs	r4, r1
 8002538:	4304      	orrs	r4, r0
 800253a:	1b1c      	subs	r4, r3, r4
 800253c:	42a3      	cmp	r3, r4
 800253e:	4192      	sbcs	r2, r2
 8002540:	464b      	mov	r3, r9
 8002542:	4252      	negs	r2, r2
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	469a      	mov	sl, r3
 8002548:	4653      	mov	r3, sl
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	d400      	bmi.n	8002550 <__aeabi_dsub+0xbc>
 800254e:	e12b      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002550:	4653      	mov	r3, sl
 8002552:	025a      	lsls	r2, r3, #9
 8002554:	0a53      	lsrs	r3, r2, #9
 8002556:	469a      	mov	sl, r3
 8002558:	4653      	mov	r3, sl
 800255a:	2b00      	cmp	r3, #0
 800255c:	d100      	bne.n	8002560 <__aeabi_dsub+0xcc>
 800255e:	e166      	b.n	800282e <__aeabi_dsub+0x39a>
 8002560:	4650      	mov	r0, sl
 8002562:	f000 fc91 	bl	8002e88 <__clzsi2>
 8002566:	0003      	movs	r3, r0
 8002568:	3b08      	subs	r3, #8
 800256a:	2220      	movs	r2, #32
 800256c:	0020      	movs	r0, r4
 800256e:	1ad2      	subs	r2, r2, r3
 8002570:	4651      	mov	r1, sl
 8002572:	40d0      	lsrs	r0, r2
 8002574:	4099      	lsls	r1, r3
 8002576:	0002      	movs	r2, r0
 8002578:	409c      	lsls	r4, r3
 800257a:	430a      	orrs	r2, r1
 800257c:	429e      	cmp	r6, r3
 800257e:	dd00      	ble.n	8002582 <__aeabi_dsub+0xee>
 8002580:	e164      	b.n	800284c <__aeabi_dsub+0x3b8>
 8002582:	1b9b      	subs	r3, r3, r6
 8002584:	1c59      	adds	r1, r3, #1
 8002586:	291f      	cmp	r1, #31
 8002588:	dd00      	ble.n	800258c <__aeabi_dsub+0xf8>
 800258a:	e0fe      	b.n	800278a <__aeabi_dsub+0x2f6>
 800258c:	2320      	movs	r3, #32
 800258e:	0010      	movs	r0, r2
 8002590:	0026      	movs	r6, r4
 8002592:	1a5b      	subs	r3, r3, r1
 8002594:	409c      	lsls	r4, r3
 8002596:	4098      	lsls	r0, r3
 8002598:	40ce      	lsrs	r6, r1
 800259a:	40ca      	lsrs	r2, r1
 800259c:	1e63      	subs	r3, r4, #1
 800259e:	419c      	sbcs	r4, r3
 80025a0:	4330      	orrs	r0, r6
 80025a2:	4692      	mov	sl, r2
 80025a4:	2600      	movs	r6, #0
 80025a6:	4304      	orrs	r4, r0
 80025a8:	0763      	lsls	r3, r4, #29
 80025aa:	d009      	beq.n	80025c0 <__aeabi_dsub+0x12c>
 80025ac:	230f      	movs	r3, #15
 80025ae:	4023      	ands	r3, r4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d005      	beq.n	80025c0 <__aeabi_dsub+0x12c>
 80025b4:	1d23      	adds	r3, r4, #4
 80025b6:	42a3      	cmp	r3, r4
 80025b8:	41a4      	sbcs	r4, r4
 80025ba:	4264      	negs	r4, r4
 80025bc:	44a2      	add	sl, r4
 80025be:	001c      	movs	r4, r3
 80025c0:	4653      	mov	r3, sl
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	d400      	bmi.n	80025c8 <__aeabi_dsub+0x134>
 80025c6:	e0f2      	b.n	80027ae <__aeabi_dsub+0x31a>
 80025c8:	4b8c      	ldr	r3, [pc, #560]	; (80027fc <__aeabi_dsub+0x368>)
 80025ca:	3601      	adds	r6, #1
 80025cc:	429e      	cmp	r6, r3
 80025ce:	d100      	bne.n	80025d2 <__aeabi_dsub+0x13e>
 80025d0:	e10f      	b.n	80027f2 <__aeabi_dsub+0x35e>
 80025d2:	4653      	mov	r3, sl
 80025d4:	498a      	ldr	r1, [pc, #552]	; (8002800 <__aeabi_dsub+0x36c>)
 80025d6:	08e4      	lsrs	r4, r4, #3
 80025d8:	400b      	ands	r3, r1
 80025da:	0019      	movs	r1, r3
 80025dc:	075b      	lsls	r3, r3, #29
 80025de:	4323      	orrs	r3, r4
 80025e0:	0572      	lsls	r2, r6, #21
 80025e2:	024c      	lsls	r4, r1, #9
 80025e4:	0b24      	lsrs	r4, r4, #12
 80025e6:	0d52      	lsrs	r2, r2, #21
 80025e8:	0512      	lsls	r2, r2, #20
 80025ea:	4322      	orrs	r2, r4
 80025ec:	07ed      	lsls	r5, r5, #31
 80025ee:	432a      	orrs	r2, r5
 80025f0:	0018      	movs	r0, r3
 80025f2:	0011      	movs	r1, r2
 80025f4:	b003      	add	sp, #12
 80025f6:	bcf0      	pop	{r4, r5, r6, r7}
 80025f8:	46bb      	mov	fp, r7
 80025fa:	46b2      	mov	sl, r6
 80025fc:	46a9      	mov	r9, r5
 80025fe:	46a0      	mov	r8, r4
 8002600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002602:	1ab4      	subs	r4, r6, r2
 8002604:	46a4      	mov	ip, r4
 8002606:	2c00      	cmp	r4, #0
 8002608:	dd59      	ble.n	80026be <__aeabi_dsub+0x22a>
 800260a:	2a00      	cmp	r2, #0
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x17c>
 800260e:	e0b0      	b.n	8002772 <__aeabi_dsub+0x2de>
 8002610:	4556      	cmp	r6, sl
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x182>
 8002614:	e0fa      	b.n	800280c <__aeabi_dsub+0x378>
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	0412      	lsls	r2, r2, #16
 800261a:	4317      	orrs	r7, r2
 800261c:	4662      	mov	r2, ip
 800261e:	2a38      	cmp	r2, #56	; 0x38
 8002620:	dd00      	ble.n	8002624 <__aeabi_dsub+0x190>
 8002622:	e0d4      	b.n	80027ce <__aeabi_dsub+0x33a>
 8002624:	2a1f      	cmp	r2, #31
 8002626:	dc00      	bgt.n	800262a <__aeabi_dsub+0x196>
 8002628:	e1c0      	b.n	80029ac <__aeabi_dsub+0x518>
 800262a:	0039      	movs	r1, r7
 800262c:	3a20      	subs	r2, #32
 800262e:	40d1      	lsrs	r1, r2
 8002630:	4662      	mov	r2, ip
 8002632:	2a20      	cmp	r2, #32
 8002634:	d006      	beq.n	8002644 <__aeabi_dsub+0x1b0>
 8002636:	4664      	mov	r4, ip
 8002638:	2240      	movs	r2, #64	; 0x40
 800263a:	1b12      	subs	r2, r2, r4
 800263c:	003c      	movs	r4, r7
 800263e:	4094      	lsls	r4, r2
 8002640:	4304      	orrs	r4, r0
 8002642:	9401      	str	r4, [sp, #4]
 8002644:	9c01      	ldr	r4, [sp, #4]
 8002646:	1e62      	subs	r2, r4, #1
 8002648:	4194      	sbcs	r4, r2
 800264a:	430c      	orrs	r4, r1
 800264c:	e0c3      	b.n	80027d6 <__aeabi_dsub+0x342>
 800264e:	003c      	movs	r4, r7
 8002650:	4304      	orrs	r4, r0
 8002652:	d02b      	beq.n	80026ac <__aeabi_dsub+0x218>
 8002654:	468b      	mov	fp, r1
 8002656:	428d      	cmp	r5, r1
 8002658:	d02e      	beq.n	80026b8 <__aeabi_dsub+0x224>
 800265a:	4c6a      	ldr	r4, [pc, #424]	; (8002804 <__aeabi_dsub+0x370>)
 800265c:	46a4      	mov	ip, r4
 800265e:	44b4      	add	ip, r6
 8002660:	4664      	mov	r4, ip
 8002662:	2c00      	cmp	r4, #0
 8002664:	d05f      	beq.n	8002726 <__aeabi_dsub+0x292>
 8002666:	1b94      	subs	r4, r2, r6
 8002668:	46a4      	mov	ip, r4
 800266a:	2e00      	cmp	r6, #0
 800266c:	d000      	beq.n	8002670 <__aeabi_dsub+0x1dc>
 800266e:	e120      	b.n	80028b2 <__aeabi_dsub+0x41e>
 8002670:	464c      	mov	r4, r9
 8002672:	431c      	orrs	r4, r3
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x1e4>
 8002676:	e1c7      	b.n	8002a08 <__aeabi_dsub+0x574>
 8002678:	4661      	mov	r1, ip
 800267a:	1e4c      	subs	r4, r1, #1
 800267c:	2901      	cmp	r1, #1
 800267e:	d100      	bne.n	8002682 <__aeabi_dsub+0x1ee>
 8002680:	e223      	b.n	8002aca <__aeabi_dsub+0x636>
 8002682:	4d5e      	ldr	r5, [pc, #376]	; (80027fc <__aeabi_dsub+0x368>)
 8002684:	45ac      	cmp	ip, r5
 8002686:	d100      	bne.n	800268a <__aeabi_dsub+0x1f6>
 8002688:	e1d8      	b.n	8002a3c <__aeabi_dsub+0x5a8>
 800268a:	46a4      	mov	ip, r4
 800268c:	e11a      	b.n	80028c4 <__aeabi_dsub+0x430>
 800268e:	003a      	movs	r2, r7
 8002690:	4302      	orrs	r2, r0
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x202>
 8002694:	e0e4      	b.n	8002860 <__aeabi_dsub+0x3cc>
 8002696:	0022      	movs	r2, r4
 8002698:	3a01      	subs	r2, #1
 800269a:	2c01      	cmp	r4, #1
 800269c:	d100      	bne.n	80026a0 <__aeabi_dsub+0x20c>
 800269e:	e1c3      	b.n	8002a28 <__aeabi_dsub+0x594>
 80026a0:	4956      	ldr	r1, [pc, #344]	; (80027fc <__aeabi_dsub+0x368>)
 80026a2:	428c      	cmp	r4, r1
 80026a4:	d100      	bne.n	80026a8 <__aeabi_dsub+0x214>
 80026a6:	e0b1      	b.n	800280c <__aeabi_dsub+0x378>
 80026a8:	4694      	mov	ip, r2
 80026aa:	e72b      	b.n	8002504 <__aeabi_dsub+0x70>
 80026ac:	2401      	movs	r4, #1
 80026ae:	4061      	eors	r1, r4
 80026b0:	468b      	mov	fp, r1
 80026b2:	428d      	cmp	r5, r1
 80026b4:	d000      	beq.n	80026b8 <__aeabi_dsub+0x224>
 80026b6:	e716      	b.n	80024e6 <__aeabi_dsub+0x52>
 80026b8:	4952      	ldr	r1, [pc, #328]	; (8002804 <__aeabi_dsub+0x370>)
 80026ba:	468c      	mov	ip, r1
 80026bc:	44b4      	add	ip, r6
 80026be:	4664      	mov	r4, ip
 80026c0:	2c00      	cmp	r4, #0
 80026c2:	d100      	bne.n	80026c6 <__aeabi_dsub+0x232>
 80026c4:	e0d3      	b.n	800286e <__aeabi_dsub+0x3da>
 80026c6:	1b91      	subs	r1, r2, r6
 80026c8:	468c      	mov	ip, r1
 80026ca:	2e00      	cmp	r6, #0
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x23c>
 80026ce:	e15e      	b.n	800298e <__aeabi_dsub+0x4fa>
 80026d0:	494a      	ldr	r1, [pc, #296]	; (80027fc <__aeabi_dsub+0x368>)
 80026d2:	428a      	cmp	r2, r1
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dsub+0x244>
 80026d6:	e1be      	b.n	8002a56 <__aeabi_dsub+0x5c2>
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	464c      	mov	r4, r9
 80026dc:	0409      	lsls	r1, r1, #16
 80026de:	430c      	orrs	r4, r1
 80026e0:	46a1      	mov	r9, r4
 80026e2:	4661      	mov	r1, ip
 80026e4:	2938      	cmp	r1, #56	; 0x38
 80026e6:	dd00      	ble.n	80026ea <__aeabi_dsub+0x256>
 80026e8:	e1ba      	b.n	8002a60 <__aeabi_dsub+0x5cc>
 80026ea:	291f      	cmp	r1, #31
 80026ec:	dd00      	ble.n	80026f0 <__aeabi_dsub+0x25c>
 80026ee:	e227      	b.n	8002b40 <__aeabi_dsub+0x6ac>
 80026f0:	2420      	movs	r4, #32
 80026f2:	1a64      	subs	r4, r4, r1
 80026f4:	4649      	mov	r1, r9
 80026f6:	40a1      	lsls	r1, r4
 80026f8:	001e      	movs	r6, r3
 80026fa:	4688      	mov	r8, r1
 80026fc:	4661      	mov	r1, ip
 80026fe:	40a3      	lsls	r3, r4
 8002700:	40ce      	lsrs	r6, r1
 8002702:	4641      	mov	r1, r8
 8002704:	1e5c      	subs	r4, r3, #1
 8002706:	41a3      	sbcs	r3, r4
 8002708:	4331      	orrs	r1, r6
 800270a:	4319      	orrs	r1, r3
 800270c:	000c      	movs	r4, r1
 800270e:	4663      	mov	r3, ip
 8002710:	4649      	mov	r1, r9
 8002712:	40d9      	lsrs	r1, r3
 8002714:	187f      	adds	r7, r7, r1
 8002716:	1824      	adds	r4, r4, r0
 8002718:	4284      	cmp	r4, r0
 800271a:	419b      	sbcs	r3, r3
 800271c:	425b      	negs	r3, r3
 800271e:	469a      	mov	sl, r3
 8002720:	0016      	movs	r6, r2
 8002722:	44ba      	add	sl, r7
 8002724:	e05d      	b.n	80027e2 <__aeabi_dsub+0x34e>
 8002726:	4c38      	ldr	r4, [pc, #224]	; (8002808 <__aeabi_dsub+0x374>)
 8002728:	1c72      	adds	r2, r6, #1
 800272a:	4222      	tst	r2, r4
 800272c:	d000      	beq.n	8002730 <__aeabi_dsub+0x29c>
 800272e:	e0df      	b.n	80028f0 <__aeabi_dsub+0x45c>
 8002730:	464a      	mov	r2, r9
 8002732:	431a      	orrs	r2, r3
 8002734:	2e00      	cmp	r6, #0
 8002736:	d000      	beq.n	800273a <__aeabi_dsub+0x2a6>
 8002738:	e15c      	b.n	80029f4 <__aeabi_dsub+0x560>
 800273a:	2a00      	cmp	r2, #0
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x2ac>
 800273e:	e1cf      	b.n	8002ae0 <__aeabi_dsub+0x64c>
 8002740:	003a      	movs	r2, r7
 8002742:	4302      	orrs	r2, r0
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x2b4>
 8002746:	e17f      	b.n	8002a48 <__aeabi_dsub+0x5b4>
 8002748:	1a1c      	subs	r4, r3, r0
 800274a:	464a      	mov	r2, r9
 800274c:	42a3      	cmp	r3, r4
 800274e:	4189      	sbcs	r1, r1
 8002750:	1bd2      	subs	r2, r2, r7
 8002752:	4249      	negs	r1, r1
 8002754:	1a52      	subs	r2, r2, r1
 8002756:	4692      	mov	sl, r2
 8002758:	0212      	lsls	r2, r2, #8
 800275a:	d400      	bmi.n	800275e <__aeabi_dsub+0x2ca>
 800275c:	e20a      	b.n	8002b74 <__aeabi_dsub+0x6e0>
 800275e:	1ac4      	subs	r4, r0, r3
 8002760:	42a0      	cmp	r0, r4
 8002762:	4180      	sbcs	r0, r0
 8002764:	464b      	mov	r3, r9
 8002766:	4240      	negs	r0, r0
 8002768:	1aff      	subs	r7, r7, r3
 800276a:	1a3b      	subs	r3, r7, r0
 800276c:	469a      	mov	sl, r3
 800276e:	465d      	mov	r5, fp
 8002770:	e71a      	b.n	80025a8 <__aeabi_dsub+0x114>
 8002772:	003a      	movs	r2, r7
 8002774:	4302      	orrs	r2, r0
 8002776:	d073      	beq.n	8002860 <__aeabi_dsub+0x3cc>
 8002778:	0022      	movs	r2, r4
 800277a:	3a01      	subs	r2, #1
 800277c:	2c01      	cmp	r4, #1
 800277e:	d100      	bne.n	8002782 <__aeabi_dsub+0x2ee>
 8002780:	e0cb      	b.n	800291a <__aeabi_dsub+0x486>
 8002782:	4554      	cmp	r4, sl
 8002784:	d042      	beq.n	800280c <__aeabi_dsub+0x378>
 8002786:	4694      	mov	ip, r2
 8002788:	e748      	b.n	800261c <__aeabi_dsub+0x188>
 800278a:	0010      	movs	r0, r2
 800278c:	3b1f      	subs	r3, #31
 800278e:	40d8      	lsrs	r0, r3
 8002790:	2920      	cmp	r1, #32
 8002792:	d003      	beq.n	800279c <__aeabi_dsub+0x308>
 8002794:	2340      	movs	r3, #64	; 0x40
 8002796:	1a5b      	subs	r3, r3, r1
 8002798:	409a      	lsls	r2, r3
 800279a:	4314      	orrs	r4, r2
 800279c:	1e63      	subs	r3, r4, #1
 800279e:	419c      	sbcs	r4, r3
 80027a0:	2300      	movs	r3, #0
 80027a2:	2600      	movs	r6, #0
 80027a4:	469a      	mov	sl, r3
 80027a6:	4304      	orrs	r4, r0
 80027a8:	0763      	lsls	r3, r4, #29
 80027aa:	d000      	beq.n	80027ae <__aeabi_dsub+0x31a>
 80027ac:	e6fe      	b.n	80025ac <__aeabi_dsub+0x118>
 80027ae:	4652      	mov	r2, sl
 80027b0:	08e3      	lsrs	r3, r4, #3
 80027b2:	0752      	lsls	r2, r2, #29
 80027b4:	4313      	orrs	r3, r2
 80027b6:	4652      	mov	r2, sl
 80027b8:	46b4      	mov	ip, r6
 80027ba:	08d2      	lsrs	r2, r2, #3
 80027bc:	490f      	ldr	r1, [pc, #60]	; (80027fc <__aeabi_dsub+0x368>)
 80027be:	458c      	cmp	ip, r1
 80027c0:	d02a      	beq.n	8002818 <__aeabi_dsub+0x384>
 80027c2:	0312      	lsls	r2, r2, #12
 80027c4:	0b14      	lsrs	r4, r2, #12
 80027c6:	4662      	mov	r2, ip
 80027c8:	0552      	lsls	r2, r2, #21
 80027ca:	0d52      	lsrs	r2, r2, #21
 80027cc:	e70c      	b.n	80025e8 <__aeabi_dsub+0x154>
 80027ce:	003c      	movs	r4, r7
 80027d0:	4304      	orrs	r4, r0
 80027d2:	1e62      	subs	r2, r4, #1
 80027d4:	4194      	sbcs	r4, r2
 80027d6:	18e4      	adds	r4, r4, r3
 80027d8:	429c      	cmp	r4, r3
 80027da:	4192      	sbcs	r2, r2
 80027dc:	4252      	negs	r2, r2
 80027de:	444a      	add	r2, r9
 80027e0:	4692      	mov	sl, r2
 80027e2:	4653      	mov	r3, sl
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	d5df      	bpl.n	80027a8 <__aeabi_dsub+0x314>
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <__aeabi_dsub+0x368>)
 80027ea:	3601      	adds	r6, #1
 80027ec:	429e      	cmp	r6, r3
 80027ee:	d000      	beq.n	80027f2 <__aeabi_dsub+0x35e>
 80027f0:	e0a0      	b.n	8002934 <__aeabi_dsub+0x4a0>
 80027f2:	0032      	movs	r2, r6
 80027f4:	2400      	movs	r4, #0
 80027f6:	2300      	movs	r3, #0
 80027f8:	e6f6      	b.n	80025e8 <__aeabi_dsub+0x154>
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	000007ff 	.word	0x000007ff
 8002800:	ff7fffff 	.word	0xff7fffff
 8002804:	fffff801 	.word	0xfffff801
 8002808:	000007fe 	.word	0x000007fe
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	464a      	mov	r2, r9
 8002810:	0752      	lsls	r2, r2, #29
 8002812:	4313      	orrs	r3, r2
 8002814:	464a      	mov	r2, r9
 8002816:	08d2      	lsrs	r2, r2, #3
 8002818:	0019      	movs	r1, r3
 800281a:	4311      	orrs	r1, r2
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x38c>
 800281e:	e1b5      	b.n	8002b8c <__aeabi_dsub+0x6f8>
 8002820:	2480      	movs	r4, #128	; 0x80
 8002822:	0324      	lsls	r4, r4, #12
 8002824:	4314      	orrs	r4, r2
 8002826:	0324      	lsls	r4, r4, #12
 8002828:	4ad5      	ldr	r2, [pc, #852]	; (8002b80 <__aeabi_dsub+0x6ec>)
 800282a:	0b24      	lsrs	r4, r4, #12
 800282c:	e6dc      	b.n	80025e8 <__aeabi_dsub+0x154>
 800282e:	0020      	movs	r0, r4
 8002830:	f000 fb2a 	bl	8002e88 <__clzsi2>
 8002834:	0003      	movs	r3, r0
 8002836:	3318      	adds	r3, #24
 8002838:	2b1f      	cmp	r3, #31
 800283a:	dc00      	bgt.n	800283e <__aeabi_dsub+0x3aa>
 800283c:	e695      	b.n	800256a <__aeabi_dsub+0xd6>
 800283e:	0022      	movs	r2, r4
 8002840:	3808      	subs	r0, #8
 8002842:	4082      	lsls	r2, r0
 8002844:	2400      	movs	r4, #0
 8002846:	429e      	cmp	r6, r3
 8002848:	dc00      	bgt.n	800284c <__aeabi_dsub+0x3b8>
 800284a:	e69a      	b.n	8002582 <__aeabi_dsub+0xee>
 800284c:	1af6      	subs	r6, r6, r3
 800284e:	4bcd      	ldr	r3, [pc, #820]	; (8002b84 <__aeabi_dsub+0x6f0>)
 8002850:	401a      	ands	r2, r3
 8002852:	4692      	mov	sl, r2
 8002854:	e6a8      	b.n	80025a8 <__aeabi_dsub+0x114>
 8002856:	003c      	movs	r4, r7
 8002858:	4304      	orrs	r4, r0
 800285a:	1e62      	subs	r2, r4, #1
 800285c:	4194      	sbcs	r4, r2
 800285e:	e66c      	b.n	800253a <__aeabi_dsub+0xa6>
 8002860:	464a      	mov	r2, r9
 8002862:	08db      	lsrs	r3, r3, #3
 8002864:	0752      	lsls	r2, r2, #29
 8002866:	4313      	orrs	r3, r2
 8002868:	464a      	mov	r2, r9
 800286a:	08d2      	lsrs	r2, r2, #3
 800286c:	e7a6      	b.n	80027bc <__aeabi_dsub+0x328>
 800286e:	4cc6      	ldr	r4, [pc, #792]	; (8002b88 <__aeabi_dsub+0x6f4>)
 8002870:	1c72      	adds	r2, r6, #1
 8002872:	4222      	tst	r2, r4
 8002874:	d000      	beq.n	8002878 <__aeabi_dsub+0x3e4>
 8002876:	e0ac      	b.n	80029d2 <__aeabi_dsub+0x53e>
 8002878:	464a      	mov	r2, r9
 800287a:	431a      	orrs	r2, r3
 800287c:	2e00      	cmp	r6, #0
 800287e:	d000      	beq.n	8002882 <__aeabi_dsub+0x3ee>
 8002880:	e105      	b.n	8002a8e <__aeabi_dsub+0x5fa>
 8002882:	2a00      	cmp	r2, #0
 8002884:	d100      	bne.n	8002888 <__aeabi_dsub+0x3f4>
 8002886:	e156      	b.n	8002b36 <__aeabi_dsub+0x6a2>
 8002888:	003a      	movs	r2, r7
 800288a:	4302      	orrs	r2, r0
 800288c:	d100      	bne.n	8002890 <__aeabi_dsub+0x3fc>
 800288e:	e0db      	b.n	8002a48 <__aeabi_dsub+0x5b4>
 8002890:	181c      	adds	r4, r3, r0
 8002892:	429c      	cmp	r4, r3
 8002894:	419b      	sbcs	r3, r3
 8002896:	444f      	add	r7, r9
 8002898:	46ba      	mov	sl, r7
 800289a:	425b      	negs	r3, r3
 800289c:	449a      	add	sl, r3
 800289e:	4653      	mov	r3, sl
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	d400      	bmi.n	80028a6 <__aeabi_dsub+0x412>
 80028a4:	e780      	b.n	80027a8 <__aeabi_dsub+0x314>
 80028a6:	4652      	mov	r2, sl
 80028a8:	4bb6      	ldr	r3, [pc, #728]	; (8002b84 <__aeabi_dsub+0x6f0>)
 80028aa:	2601      	movs	r6, #1
 80028ac:	401a      	ands	r2, r3
 80028ae:	4692      	mov	sl, r2
 80028b0:	e77a      	b.n	80027a8 <__aeabi_dsub+0x314>
 80028b2:	4cb3      	ldr	r4, [pc, #716]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80028b4:	42a2      	cmp	r2, r4
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x426>
 80028b8:	e0c0      	b.n	8002a3c <__aeabi_dsub+0x5a8>
 80028ba:	2480      	movs	r4, #128	; 0x80
 80028bc:	464d      	mov	r5, r9
 80028be:	0424      	lsls	r4, r4, #16
 80028c0:	4325      	orrs	r5, r4
 80028c2:	46a9      	mov	r9, r5
 80028c4:	4664      	mov	r4, ip
 80028c6:	2c38      	cmp	r4, #56	; 0x38
 80028c8:	dc53      	bgt.n	8002972 <__aeabi_dsub+0x4de>
 80028ca:	4661      	mov	r1, ip
 80028cc:	2c1f      	cmp	r4, #31
 80028ce:	dd00      	ble.n	80028d2 <__aeabi_dsub+0x43e>
 80028d0:	e0cd      	b.n	8002a6e <__aeabi_dsub+0x5da>
 80028d2:	2520      	movs	r5, #32
 80028d4:	001e      	movs	r6, r3
 80028d6:	1b2d      	subs	r5, r5, r4
 80028d8:	464c      	mov	r4, r9
 80028da:	40ab      	lsls	r3, r5
 80028dc:	40ac      	lsls	r4, r5
 80028de:	40ce      	lsrs	r6, r1
 80028e0:	1e5d      	subs	r5, r3, #1
 80028e2:	41ab      	sbcs	r3, r5
 80028e4:	4334      	orrs	r4, r6
 80028e6:	4323      	orrs	r3, r4
 80028e8:	464c      	mov	r4, r9
 80028ea:	40cc      	lsrs	r4, r1
 80028ec:	1b3f      	subs	r7, r7, r4
 80028ee:	e045      	b.n	800297c <__aeabi_dsub+0x4e8>
 80028f0:	464a      	mov	r2, r9
 80028f2:	1a1c      	subs	r4, r3, r0
 80028f4:	1bd1      	subs	r1, r2, r7
 80028f6:	42a3      	cmp	r3, r4
 80028f8:	4192      	sbcs	r2, r2
 80028fa:	4252      	negs	r2, r2
 80028fc:	4692      	mov	sl, r2
 80028fe:	000a      	movs	r2, r1
 8002900:	4651      	mov	r1, sl
 8002902:	1a52      	subs	r2, r2, r1
 8002904:	4692      	mov	sl, r2
 8002906:	0212      	lsls	r2, r2, #8
 8002908:	d500      	bpl.n	800290c <__aeabi_dsub+0x478>
 800290a:	e083      	b.n	8002a14 <__aeabi_dsub+0x580>
 800290c:	4653      	mov	r3, sl
 800290e:	4323      	orrs	r3, r4
 8002910:	d000      	beq.n	8002914 <__aeabi_dsub+0x480>
 8002912:	e621      	b.n	8002558 <__aeabi_dsub+0xc4>
 8002914:	2200      	movs	r2, #0
 8002916:	2500      	movs	r5, #0
 8002918:	e753      	b.n	80027c2 <__aeabi_dsub+0x32e>
 800291a:	181c      	adds	r4, r3, r0
 800291c:	429c      	cmp	r4, r3
 800291e:	419b      	sbcs	r3, r3
 8002920:	444f      	add	r7, r9
 8002922:	46ba      	mov	sl, r7
 8002924:	425b      	negs	r3, r3
 8002926:	449a      	add	sl, r3
 8002928:	4653      	mov	r3, sl
 800292a:	2601      	movs	r6, #1
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	d400      	bmi.n	8002932 <__aeabi_dsub+0x49e>
 8002930:	e73a      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002932:	2602      	movs	r6, #2
 8002934:	4652      	mov	r2, sl
 8002936:	4b93      	ldr	r3, [pc, #588]	; (8002b84 <__aeabi_dsub+0x6f0>)
 8002938:	2101      	movs	r1, #1
 800293a:	401a      	ands	r2, r3
 800293c:	0013      	movs	r3, r2
 800293e:	4021      	ands	r1, r4
 8002940:	0862      	lsrs	r2, r4, #1
 8002942:	430a      	orrs	r2, r1
 8002944:	07dc      	lsls	r4, r3, #31
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	469a      	mov	sl, r3
 800294a:	4314      	orrs	r4, r2
 800294c:	e62c      	b.n	80025a8 <__aeabi_dsub+0x114>
 800294e:	0039      	movs	r1, r7
 8002950:	3a20      	subs	r2, #32
 8002952:	40d1      	lsrs	r1, r2
 8002954:	4662      	mov	r2, ip
 8002956:	2a20      	cmp	r2, #32
 8002958:	d006      	beq.n	8002968 <__aeabi_dsub+0x4d4>
 800295a:	4664      	mov	r4, ip
 800295c:	2240      	movs	r2, #64	; 0x40
 800295e:	1b12      	subs	r2, r2, r4
 8002960:	003c      	movs	r4, r7
 8002962:	4094      	lsls	r4, r2
 8002964:	4304      	orrs	r4, r0
 8002966:	9401      	str	r4, [sp, #4]
 8002968:	9c01      	ldr	r4, [sp, #4]
 800296a:	1e62      	subs	r2, r4, #1
 800296c:	4194      	sbcs	r4, r2
 800296e:	430c      	orrs	r4, r1
 8002970:	e5e3      	b.n	800253a <__aeabi_dsub+0xa6>
 8002972:	4649      	mov	r1, r9
 8002974:	4319      	orrs	r1, r3
 8002976:	000b      	movs	r3, r1
 8002978:	1e5c      	subs	r4, r3, #1
 800297a:	41a3      	sbcs	r3, r4
 800297c:	1ac4      	subs	r4, r0, r3
 800297e:	42a0      	cmp	r0, r4
 8002980:	419b      	sbcs	r3, r3
 8002982:	425b      	negs	r3, r3
 8002984:	1afb      	subs	r3, r7, r3
 8002986:	469a      	mov	sl, r3
 8002988:	465d      	mov	r5, fp
 800298a:	0016      	movs	r6, r2
 800298c:	e5dc      	b.n	8002548 <__aeabi_dsub+0xb4>
 800298e:	4649      	mov	r1, r9
 8002990:	4319      	orrs	r1, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x502>
 8002994:	e0ae      	b.n	8002af4 <__aeabi_dsub+0x660>
 8002996:	4661      	mov	r1, ip
 8002998:	4664      	mov	r4, ip
 800299a:	3901      	subs	r1, #1
 800299c:	2c01      	cmp	r4, #1
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x50e>
 80029a0:	e0e0      	b.n	8002b64 <__aeabi_dsub+0x6d0>
 80029a2:	4c77      	ldr	r4, [pc, #476]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80029a4:	45a4      	cmp	ip, r4
 80029a6:	d056      	beq.n	8002a56 <__aeabi_dsub+0x5c2>
 80029a8:	468c      	mov	ip, r1
 80029aa:	e69a      	b.n	80026e2 <__aeabi_dsub+0x24e>
 80029ac:	4661      	mov	r1, ip
 80029ae:	2220      	movs	r2, #32
 80029b0:	003c      	movs	r4, r7
 80029b2:	1a52      	subs	r2, r2, r1
 80029b4:	4094      	lsls	r4, r2
 80029b6:	0001      	movs	r1, r0
 80029b8:	4090      	lsls	r0, r2
 80029ba:	46a0      	mov	r8, r4
 80029bc:	4664      	mov	r4, ip
 80029be:	1e42      	subs	r2, r0, #1
 80029c0:	4190      	sbcs	r0, r2
 80029c2:	4662      	mov	r2, ip
 80029c4:	40e1      	lsrs	r1, r4
 80029c6:	4644      	mov	r4, r8
 80029c8:	40d7      	lsrs	r7, r2
 80029ca:	430c      	orrs	r4, r1
 80029cc:	4304      	orrs	r4, r0
 80029ce:	44b9      	add	r9, r7
 80029d0:	e701      	b.n	80027d6 <__aeabi_dsub+0x342>
 80029d2:	496b      	ldr	r1, [pc, #428]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80029d4:	428a      	cmp	r2, r1
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x546>
 80029d8:	e70c      	b.n	80027f4 <__aeabi_dsub+0x360>
 80029da:	1818      	adds	r0, r3, r0
 80029dc:	4298      	cmp	r0, r3
 80029de:	419b      	sbcs	r3, r3
 80029e0:	444f      	add	r7, r9
 80029e2:	425b      	negs	r3, r3
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	07dc      	lsls	r4, r3, #31
 80029e8:	0840      	lsrs	r0, r0, #1
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	469a      	mov	sl, r3
 80029ee:	0016      	movs	r6, r2
 80029f0:	4304      	orrs	r4, r0
 80029f2:	e6d9      	b.n	80027a8 <__aeabi_dsub+0x314>
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	d000      	beq.n	80029fa <__aeabi_dsub+0x566>
 80029f8:	e081      	b.n	8002afe <__aeabi_dsub+0x66a>
 80029fa:	003b      	movs	r3, r7
 80029fc:	4303      	orrs	r3, r0
 80029fe:	d11d      	bne.n	8002a3c <__aeabi_dsub+0x5a8>
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	2500      	movs	r5, #0
 8002a04:	0312      	lsls	r2, r2, #12
 8002a06:	e70b      	b.n	8002820 <__aeabi_dsub+0x38c>
 8002a08:	08c0      	lsrs	r0, r0, #3
 8002a0a:	077b      	lsls	r3, r7, #29
 8002a0c:	465d      	mov	r5, fp
 8002a0e:	4303      	orrs	r3, r0
 8002a10:	08fa      	lsrs	r2, r7, #3
 8002a12:	e6d3      	b.n	80027bc <__aeabi_dsub+0x328>
 8002a14:	1ac4      	subs	r4, r0, r3
 8002a16:	42a0      	cmp	r0, r4
 8002a18:	4180      	sbcs	r0, r0
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	4240      	negs	r0, r0
 8002a1e:	1aff      	subs	r7, r7, r3
 8002a20:	1a3b      	subs	r3, r7, r0
 8002a22:	469a      	mov	sl, r3
 8002a24:	465d      	mov	r5, fp
 8002a26:	e597      	b.n	8002558 <__aeabi_dsub+0xc4>
 8002a28:	1a1c      	subs	r4, r3, r0
 8002a2a:	464a      	mov	r2, r9
 8002a2c:	42a3      	cmp	r3, r4
 8002a2e:	419b      	sbcs	r3, r3
 8002a30:	1bd7      	subs	r7, r2, r7
 8002a32:	425b      	negs	r3, r3
 8002a34:	1afb      	subs	r3, r7, r3
 8002a36:	469a      	mov	sl, r3
 8002a38:	2601      	movs	r6, #1
 8002a3a:	e585      	b.n	8002548 <__aeabi_dsub+0xb4>
 8002a3c:	08c0      	lsrs	r0, r0, #3
 8002a3e:	077b      	lsls	r3, r7, #29
 8002a40:	465d      	mov	r5, fp
 8002a42:	4303      	orrs	r3, r0
 8002a44:	08fa      	lsrs	r2, r7, #3
 8002a46:	e6e7      	b.n	8002818 <__aeabi_dsub+0x384>
 8002a48:	464a      	mov	r2, r9
 8002a4a:	08db      	lsrs	r3, r3, #3
 8002a4c:	0752      	lsls	r2, r2, #29
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	464a      	mov	r2, r9
 8002a52:	08d2      	lsrs	r2, r2, #3
 8002a54:	e6b5      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002a56:	08c0      	lsrs	r0, r0, #3
 8002a58:	077b      	lsls	r3, r7, #29
 8002a5a:	4303      	orrs	r3, r0
 8002a5c:	08fa      	lsrs	r2, r7, #3
 8002a5e:	e6db      	b.n	8002818 <__aeabi_dsub+0x384>
 8002a60:	4649      	mov	r1, r9
 8002a62:	4319      	orrs	r1, r3
 8002a64:	000b      	movs	r3, r1
 8002a66:	1e59      	subs	r1, r3, #1
 8002a68:	418b      	sbcs	r3, r1
 8002a6a:	001c      	movs	r4, r3
 8002a6c:	e653      	b.n	8002716 <__aeabi_dsub+0x282>
 8002a6e:	464d      	mov	r5, r9
 8002a70:	3c20      	subs	r4, #32
 8002a72:	40e5      	lsrs	r5, r4
 8002a74:	2920      	cmp	r1, #32
 8002a76:	d005      	beq.n	8002a84 <__aeabi_dsub+0x5f0>
 8002a78:	2440      	movs	r4, #64	; 0x40
 8002a7a:	1a64      	subs	r4, r4, r1
 8002a7c:	4649      	mov	r1, r9
 8002a7e:	40a1      	lsls	r1, r4
 8002a80:	430b      	orrs	r3, r1
 8002a82:	4698      	mov	r8, r3
 8002a84:	4643      	mov	r3, r8
 8002a86:	1e5c      	subs	r4, r3, #1
 8002a88:	41a3      	sbcs	r3, r4
 8002a8a:	432b      	orrs	r3, r5
 8002a8c:	e776      	b.n	800297c <__aeabi_dsub+0x4e8>
 8002a8e:	2a00      	cmp	r2, #0
 8002a90:	d0e1      	beq.n	8002a56 <__aeabi_dsub+0x5c2>
 8002a92:	003a      	movs	r2, r7
 8002a94:	08db      	lsrs	r3, r3, #3
 8002a96:	4302      	orrs	r2, r0
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x608>
 8002a9a:	e6b8      	b.n	800280e <__aeabi_dsub+0x37a>
 8002a9c:	464a      	mov	r2, r9
 8002a9e:	0752      	lsls	r2, r2, #29
 8002aa0:	2480      	movs	r4, #128	; 0x80
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	464a      	mov	r2, r9
 8002aa6:	0324      	lsls	r4, r4, #12
 8002aa8:	08d2      	lsrs	r2, r2, #3
 8002aaa:	4222      	tst	r2, r4
 8002aac:	d007      	beq.n	8002abe <__aeabi_dsub+0x62a>
 8002aae:	08fe      	lsrs	r6, r7, #3
 8002ab0:	4226      	tst	r6, r4
 8002ab2:	d104      	bne.n	8002abe <__aeabi_dsub+0x62a>
 8002ab4:	465d      	mov	r5, fp
 8002ab6:	0032      	movs	r2, r6
 8002ab8:	08c3      	lsrs	r3, r0, #3
 8002aba:	077f      	lsls	r7, r7, #29
 8002abc:	433b      	orrs	r3, r7
 8002abe:	0f59      	lsrs	r1, r3, #29
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	0749      	lsls	r1, r1, #29
 8002ac4:	08db      	lsrs	r3, r3, #3
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	e6a6      	b.n	8002818 <__aeabi_dsub+0x384>
 8002aca:	1ac4      	subs	r4, r0, r3
 8002acc:	42a0      	cmp	r0, r4
 8002ace:	4180      	sbcs	r0, r0
 8002ad0:	464b      	mov	r3, r9
 8002ad2:	4240      	negs	r0, r0
 8002ad4:	1aff      	subs	r7, r7, r3
 8002ad6:	1a3b      	subs	r3, r7, r0
 8002ad8:	469a      	mov	sl, r3
 8002ada:	465d      	mov	r5, fp
 8002adc:	2601      	movs	r6, #1
 8002ade:	e533      	b.n	8002548 <__aeabi_dsub+0xb4>
 8002ae0:	003b      	movs	r3, r7
 8002ae2:	4303      	orrs	r3, r0
 8002ae4:	d100      	bne.n	8002ae8 <__aeabi_dsub+0x654>
 8002ae6:	e715      	b.n	8002914 <__aeabi_dsub+0x480>
 8002ae8:	08c0      	lsrs	r0, r0, #3
 8002aea:	077b      	lsls	r3, r7, #29
 8002aec:	465d      	mov	r5, fp
 8002aee:	4303      	orrs	r3, r0
 8002af0:	08fa      	lsrs	r2, r7, #3
 8002af2:	e666      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002af4:	08c0      	lsrs	r0, r0, #3
 8002af6:	077b      	lsls	r3, r7, #29
 8002af8:	4303      	orrs	r3, r0
 8002afa:	08fa      	lsrs	r2, r7, #3
 8002afc:	e65e      	b.n	80027bc <__aeabi_dsub+0x328>
 8002afe:	003a      	movs	r2, r7
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	4302      	orrs	r2, r0
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x674>
 8002b06:	e682      	b.n	800280e <__aeabi_dsub+0x37a>
 8002b08:	464a      	mov	r2, r9
 8002b0a:	0752      	lsls	r2, r2, #29
 8002b0c:	2480      	movs	r4, #128	; 0x80
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	464a      	mov	r2, r9
 8002b12:	0324      	lsls	r4, r4, #12
 8002b14:	08d2      	lsrs	r2, r2, #3
 8002b16:	4222      	tst	r2, r4
 8002b18:	d007      	beq.n	8002b2a <__aeabi_dsub+0x696>
 8002b1a:	08fe      	lsrs	r6, r7, #3
 8002b1c:	4226      	tst	r6, r4
 8002b1e:	d104      	bne.n	8002b2a <__aeabi_dsub+0x696>
 8002b20:	465d      	mov	r5, fp
 8002b22:	0032      	movs	r2, r6
 8002b24:	08c3      	lsrs	r3, r0, #3
 8002b26:	077f      	lsls	r7, r7, #29
 8002b28:	433b      	orrs	r3, r7
 8002b2a:	0f59      	lsrs	r1, r3, #29
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	08db      	lsrs	r3, r3, #3
 8002b30:	0749      	lsls	r1, r1, #29
 8002b32:	430b      	orrs	r3, r1
 8002b34:	e670      	b.n	8002818 <__aeabi_dsub+0x384>
 8002b36:	08c0      	lsrs	r0, r0, #3
 8002b38:	077b      	lsls	r3, r7, #29
 8002b3a:	4303      	orrs	r3, r0
 8002b3c:	08fa      	lsrs	r2, r7, #3
 8002b3e:	e640      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002b40:	464c      	mov	r4, r9
 8002b42:	3920      	subs	r1, #32
 8002b44:	40cc      	lsrs	r4, r1
 8002b46:	4661      	mov	r1, ip
 8002b48:	2920      	cmp	r1, #32
 8002b4a:	d006      	beq.n	8002b5a <__aeabi_dsub+0x6c6>
 8002b4c:	4666      	mov	r6, ip
 8002b4e:	2140      	movs	r1, #64	; 0x40
 8002b50:	1b89      	subs	r1, r1, r6
 8002b52:	464e      	mov	r6, r9
 8002b54:	408e      	lsls	r6, r1
 8002b56:	4333      	orrs	r3, r6
 8002b58:	4698      	mov	r8, r3
 8002b5a:	4643      	mov	r3, r8
 8002b5c:	1e59      	subs	r1, r3, #1
 8002b5e:	418b      	sbcs	r3, r1
 8002b60:	431c      	orrs	r4, r3
 8002b62:	e5d8      	b.n	8002716 <__aeabi_dsub+0x282>
 8002b64:	181c      	adds	r4, r3, r0
 8002b66:	4284      	cmp	r4, r0
 8002b68:	4180      	sbcs	r0, r0
 8002b6a:	444f      	add	r7, r9
 8002b6c:	46ba      	mov	sl, r7
 8002b6e:	4240      	negs	r0, r0
 8002b70:	4482      	add	sl, r0
 8002b72:	e6d9      	b.n	8002928 <__aeabi_dsub+0x494>
 8002b74:	4653      	mov	r3, sl
 8002b76:	4323      	orrs	r3, r4
 8002b78:	d100      	bne.n	8002b7c <__aeabi_dsub+0x6e8>
 8002b7a:	e6cb      	b.n	8002914 <__aeabi_dsub+0x480>
 8002b7c:	e614      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	000007ff 	.word	0x000007ff
 8002b84:	ff7fffff 	.word	0xff7fffff
 8002b88:	000007fe 	.word	0x000007fe
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	4a01      	ldr	r2, [pc, #4]	; (8002b94 <__aeabi_dsub+0x700>)
 8002b90:	001c      	movs	r4, r3
 8002b92:	e529      	b.n	80025e8 <__aeabi_dsub+0x154>
 8002b94:	000007ff 	.word	0x000007ff

08002b98 <__aeabi_dcmpun>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	0005      	movs	r5, r0
 8002b9c:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <__aeabi_dcmpun+0x38>)
 8002b9e:	031c      	lsls	r4, r3, #12
 8002ba0:	0016      	movs	r6, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	030a      	lsls	r2, r1, #12
 8002ba6:	0049      	lsls	r1, r1, #1
 8002ba8:	0b12      	lsrs	r2, r2, #12
 8002baa:	0d49      	lsrs	r1, r1, #21
 8002bac:	0b24      	lsrs	r4, r4, #12
 8002bae:	0d5b      	lsrs	r3, r3, #21
 8002bb0:	4281      	cmp	r1, r0
 8002bb2:	d008      	beq.n	8002bc6 <__aeabi_dcmpun+0x2e>
 8002bb4:	4a06      	ldr	r2, [pc, #24]	; (8002bd0 <__aeabi_dcmpun+0x38>)
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d103      	bne.n	8002bc4 <__aeabi_dcmpun+0x2c>
 8002bbc:	0020      	movs	r0, r4
 8002bbe:	4330      	orrs	r0, r6
 8002bc0:	1e43      	subs	r3, r0, #1
 8002bc2:	4198      	sbcs	r0, r3
 8002bc4:	bd70      	pop	{r4, r5, r6, pc}
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	432a      	orrs	r2, r5
 8002bca:	d1fb      	bne.n	8002bc4 <__aeabi_dcmpun+0x2c>
 8002bcc:	e7f2      	b.n	8002bb4 <__aeabi_dcmpun+0x1c>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	000007ff 	.word	0x000007ff

08002bd4 <__aeabi_d2iz>:
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	b530      	push	{r4, r5, lr}
 8002bd8:	4c13      	ldr	r4, [pc, #76]	; (8002c28 <__aeabi_d2iz+0x54>)
 8002bda:	0053      	lsls	r3, r2, #1
 8002bdc:	0309      	lsls	r1, r1, #12
 8002bde:	0005      	movs	r5, r0
 8002be0:	0b09      	lsrs	r1, r1, #12
 8002be2:	2000      	movs	r0, #0
 8002be4:	0d5b      	lsrs	r3, r3, #21
 8002be6:	0fd2      	lsrs	r2, r2, #31
 8002be8:	42a3      	cmp	r3, r4
 8002bea:	dd04      	ble.n	8002bf6 <__aeabi_d2iz+0x22>
 8002bec:	480f      	ldr	r0, [pc, #60]	; (8002c2c <__aeabi_d2iz+0x58>)
 8002bee:	4283      	cmp	r3, r0
 8002bf0:	dd02      	ble.n	8002bf8 <__aeabi_d2iz+0x24>
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <__aeabi_d2iz+0x5c>)
 8002bf4:	18d0      	adds	r0, r2, r3
 8002bf6:	bd30      	pop	{r4, r5, pc}
 8002bf8:	2080      	movs	r0, #128	; 0x80
 8002bfa:	0340      	lsls	r0, r0, #13
 8002bfc:	4301      	orrs	r1, r0
 8002bfe:	480d      	ldr	r0, [pc, #52]	; (8002c34 <__aeabi_d2iz+0x60>)
 8002c00:	1ac0      	subs	r0, r0, r3
 8002c02:	281f      	cmp	r0, #31
 8002c04:	dd08      	ble.n	8002c18 <__aeabi_d2iz+0x44>
 8002c06:	480c      	ldr	r0, [pc, #48]	; (8002c38 <__aeabi_d2iz+0x64>)
 8002c08:	1ac3      	subs	r3, r0, r3
 8002c0a:	40d9      	lsrs	r1, r3
 8002c0c:	000b      	movs	r3, r1
 8002c0e:	4258      	negs	r0, r3
 8002c10:	2a00      	cmp	r2, #0
 8002c12:	d1f0      	bne.n	8002bf6 <__aeabi_d2iz+0x22>
 8002c14:	0018      	movs	r0, r3
 8002c16:	e7ee      	b.n	8002bf6 <__aeabi_d2iz+0x22>
 8002c18:	4c08      	ldr	r4, [pc, #32]	; (8002c3c <__aeabi_d2iz+0x68>)
 8002c1a:	40c5      	lsrs	r5, r0
 8002c1c:	46a4      	mov	ip, r4
 8002c1e:	4463      	add	r3, ip
 8002c20:	4099      	lsls	r1, r3
 8002c22:	000b      	movs	r3, r1
 8002c24:	432b      	orrs	r3, r5
 8002c26:	e7f2      	b.n	8002c0e <__aeabi_d2iz+0x3a>
 8002c28:	000003fe 	.word	0x000003fe
 8002c2c:	0000041d 	.word	0x0000041d
 8002c30:	7fffffff 	.word	0x7fffffff
 8002c34:	00000433 	.word	0x00000433
 8002c38:	00000413 	.word	0x00000413
 8002c3c:	fffffbed 	.word	0xfffffbed

08002c40 <__aeabi_i2d>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d016      	beq.n	8002c74 <__aeabi_i2d+0x34>
 8002c46:	17c3      	asrs	r3, r0, #31
 8002c48:	18c5      	adds	r5, r0, r3
 8002c4a:	405d      	eors	r5, r3
 8002c4c:	0fc4      	lsrs	r4, r0, #31
 8002c4e:	0028      	movs	r0, r5
 8002c50:	f000 f91a 	bl	8002e88 <__clzsi2>
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <__aeabi_i2d+0x5c>)
 8002c56:	1a1b      	subs	r3, r3, r0
 8002c58:	280a      	cmp	r0, #10
 8002c5a:	dc16      	bgt.n	8002c8a <__aeabi_i2d+0x4a>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	002e      	movs	r6, r5
 8002c60:	3215      	adds	r2, #21
 8002c62:	4096      	lsls	r6, r2
 8002c64:	220b      	movs	r2, #11
 8002c66:	1a12      	subs	r2, r2, r0
 8002c68:	40d5      	lsrs	r5, r2
 8002c6a:	055b      	lsls	r3, r3, #21
 8002c6c:	032d      	lsls	r5, r5, #12
 8002c6e:	0b2d      	lsrs	r5, r5, #12
 8002c70:	0d5b      	lsrs	r3, r3, #21
 8002c72:	e003      	b.n	8002c7c <__aeabi_i2d+0x3c>
 8002c74:	2400      	movs	r4, #0
 8002c76:	2300      	movs	r3, #0
 8002c78:	2500      	movs	r5, #0
 8002c7a:	2600      	movs	r6, #0
 8002c7c:	051b      	lsls	r3, r3, #20
 8002c7e:	432b      	orrs	r3, r5
 8002c80:	07e4      	lsls	r4, r4, #31
 8002c82:	4323      	orrs	r3, r4
 8002c84:	0030      	movs	r0, r6
 8002c86:	0019      	movs	r1, r3
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
 8002c8a:	380b      	subs	r0, #11
 8002c8c:	4085      	lsls	r5, r0
 8002c8e:	055b      	lsls	r3, r3, #21
 8002c90:	032d      	lsls	r5, r5, #12
 8002c92:	2600      	movs	r6, #0
 8002c94:	0b2d      	lsrs	r5, r5, #12
 8002c96:	0d5b      	lsrs	r3, r3, #21
 8002c98:	e7f0      	b.n	8002c7c <__aeabi_i2d+0x3c>
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	0000041e 	.word	0x0000041e

08002ca0 <__aeabi_ui2d>:
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	1e04      	subs	r4, r0, #0
 8002ca4:	d010      	beq.n	8002cc8 <__aeabi_ui2d+0x28>
 8002ca6:	f000 f8ef 	bl	8002e88 <__clzsi2>
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <__aeabi_ui2d+0x48>)
 8002cac:	1a1b      	subs	r3, r3, r0
 8002cae:	280a      	cmp	r0, #10
 8002cb0:	dc11      	bgt.n	8002cd6 <__aeabi_ui2d+0x36>
 8002cb2:	220b      	movs	r2, #11
 8002cb4:	0021      	movs	r1, r4
 8002cb6:	1a12      	subs	r2, r2, r0
 8002cb8:	40d1      	lsrs	r1, r2
 8002cba:	3015      	adds	r0, #21
 8002cbc:	030a      	lsls	r2, r1, #12
 8002cbe:	055b      	lsls	r3, r3, #21
 8002cc0:	4084      	lsls	r4, r0
 8002cc2:	0b12      	lsrs	r2, r2, #12
 8002cc4:	0d5b      	lsrs	r3, r3, #21
 8002cc6:	e001      	b.n	8002ccc <__aeabi_ui2d+0x2c>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2200      	movs	r2, #0
 8002ccc:	051b      	lsls	r3, r3, #20
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	bd10      	pop	{r4, pc}
 8002cd6:	0022      	movs	r2, r4
 8002cd8:	380b      	subs	r0, #11
 8002cda:	4082      	lsls	r2, r0
 8002cdc:	055b      	lsls	r3, r3, #21
 8002cde:	0312      	lsls	r2, r2, #12
 8002ce0:	2400      	movs	r4, #0
 8002ce2:	0b12      	lsrs	r2, r2, #12
 8002ce4:	0d5b      	lsrs	r3, r3, #21
 8002ce6:	e7f1      	b.n	8002ccc <__aeabi_ui2d+0x2c>
 8002ce8:	0000041e 	.word	0x0000041e

08002cec <__aeabi_f2d>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	0242      	lsls	r2, r0, #9
 8002cf0:	0043      	lsls	r3, r0, #1
 8002cf2:	0fc4      	lsrs	r4, r0, #31
 8002cf4:	20fe      	movs	r0, #254	; 0xfe
 8002cf6:	0e1b      	lsrs	r3, r3, #24
 8002cf8:	1c59      	adds	r1, r3, #1
 8002cfa:	0a55      	lsrs	r5, r2, #9
 8002cfc:	4208      	tst	r0, r1
 8002cfe:	d00c      	beq.n	8002d1a <__aeabi_f2d+0x2e>
 8002d00:	21e0      	movs	r1, #224	; 0xe0
 8002d02:	0089      	lsls	r1, r1, #2
 8002d04:	468c      	mov	ip, r1
 8002d06:	076d      	lsls	r5, r5, #29
 8002d08:	0b12      	lsrs	r2, r2, #12
 8002d0a:	4463      	add	r3, ip
 8002d0c:	051b      	lsls	r3, r3, #20
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	07e4      	lsls	r4, r4, #31
 8002d12:	4323      	orrs	r3, r4
 8002d14:	0028      	movs	r0, r5
 8002d16:	0019      	movs	r1, r3
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d114      	bne.n	8002d48 <__aeabi_f2d+0x5c>
 8002d1e:	2d00      	cmp	r5, #0
 8002d20:	d01b      	beq.n	8002d5a <__aeabi_f2d+0x6e>
 8002d22:	0028      	movs	r0, r5
 8002d24:	f000 f8b0 	bl	8002e88 <__clzsi2>
 8002d28:	280a      	cmp	r0, #10
 8002d2a:	dc1c      	bgt.n	8002d66 <__aeabi_f2d+0x7a>
 8002d2c:	230b      	movs	r3, #11
 8002d2e:	002a      	movs	r2, r5
 8002d30:	1a1b      	subs	r3, r3, r0
 8002d32:	40da      	lsrs	r2, r3
 8002d34:	0003      	movs	r3, r0
 8002d36:	3315      	adds	r3, #21
 8002d38:	409d      	lsls	r5, r3
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <__aeabi_f2d+0x88>)
 8002d3c:	0312      	lsls	r2, r2, #12
 8002d3e:	1a1b      	subs	r3, r3, r0
 8002d40:	055b      	lsls	r3, r3, #21
 8002d42:	0b12      	lsrs	r2, r2, #12
 8002d44:	0d5b      	lsrs	r3, r3, #21
 8002d46:	e7e1      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	d009      	beq.n	8002d60 <__aeabi_f2d+0x74>
 8002d4c:	0b13      	lsrs	r3, r2, #12
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	0312      	lsls	r2, r2, #12
 8002d52:	431a      	orrs	r2, r3
 8002d54:	076d      	lsls	r5, r5, #29
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <__aeabi_f2d+0x8c>)
 8002d58:	e7d8      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	e7d5      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d60:	2200      	movs	r2, #0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <__aeabi_f2d+0x8c>)
 8002d64:	e7d2      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d66:	0003      	movs	r3, r0
 8002d68:	002a      	movs	r2, r5
 8002d6a:	3b0b      	subs	r3, #11
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	2500      	movs	r5, #0
 8002d70:	e7e3      	b.n	8002d3a <__aeabi_f2d+0x4e>
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	00000389 	.word	0x00000389
 8002d78:	000007ff 	.word	0x000007ff

08002d7c <__aeabi_d2f>:
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d80:	004b      	lsls	r3, r1, #1
 8002d82:	030d      	lsls	r5, r1, #12
 8002d84:	0f40      	lsrs	r0, r0, #29
 8002d86:	0d5b      	lsrs	r3, r3, #21
 8002d88:	0fcc      	lsrs	r4, r1, #31
 8002d8a:	0a6d      	lsrs	r5, r5, #9
 8002d8c:	493a      	ldr	r1, [pc, #232]	; (8002e78 <__aeabi_d2f+0xfc>)
 8002d8e:	4305      	orrs	r5, r0
 8002d90:	1c58      	adds	r0, r3, #1
 8002d92:	00d7      	lsls	r7, r2, #3
 8002d94:	4208      	tst	r0, r1
 8002d96:	d00a      	beq.n	8002dae <__aeabi_d2f+0x32>
 8002d98:	4938      	ldr	r1, [pc, #224]	; (8002e7c <__aeabi_d2f+0x100>)
 8002d9a:	1859      	adds	r1, r3, r1
 8002d9c:	29fe      	cmp	r1, #254	; 0xfe
 8002d9e:	dd16      	ble.n	8002dce <__aeabi_d2f+0x52>
 8002da0:	20ff      	movs	r0, #255	; 0xff
 8002da2:	2200      	movs	r2, #0
 8002da4:	05c0      	lsls	r0, r0, #23
 8002da6:	4310      	orrs	r0, r2
 8002da8:	07e4      	lsls	r4, r4, #31
 8002daa:	4320      	orrs	r0, r4
 8002dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <__aeabi_d2f+0x44>
 8002db2:	433d      	orrs	r5, r7
 8002db4:	d026      	beq.n	8002e04 <__aeabi_d2f+0x88>
 8002db6:	2205      	movs	r2, #5
 8002db8:	0192      	lsls	r2, r2, #6
 8002dba:	0a52      	lsrs	r2, r2, #9
 8002dbc:	b2d8      	uxtb	r0, r3
 8002dbe:	e7f1      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002dc0:	432f      	orrs	r7, r5
 8002dc2:	d0ed      	beq.n	8002da0 <__aeabi_d2f+0x24>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	03d2      	lsls	r2, r2, #15
 8002dc8:	20ff      	movs	r0, #255	; 0xff
 8002dca:	432a      	orrs	r2, r5
 8002dcc:	e7ea      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002dce:	2900      	cmp	r1, #0
 8002dd0:	dd1b      	ble.n	8002e0a <__aeabi_d2f+0x8e>
 8002dd2:	0192      	lsls	r2, r2, #6
 8002dd4:	1e50      	subs	r0, r2, #1
 8002dd6:	4182      	sbcs	r2, r0
 8002dd8:	00ed      	lsls	r5, r5, #3
 8002dda:	0f7f      	lsrs	r7, r7, #29
 8002ddc:	432a      	orrs	r2, r5
 8002dde:	433a      	orrs	r2, r7
 8002de0:	0753      	lsls	r3, r2, #29
 8002de2:	d047      	beq.n	8002e74 <__aeabi_d2f+0xf8>
 8002de4:	230f      	movs	r3, #15
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d000      	beq.n	8002dee <__aeabi_d2f+0x72>
 8002dec:	3204      	adds	r2, #4
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	04db      	lsls	r3, r3, #19
 8002df2:	4013      	ands	r3, r2
 8002df4:	d03e      	beq.n	8002e74 <__aeabi_d2f+0xf8>
 8002df6:	1c48      	adds	r0, r1, #1
 8002df8:	29fe      	cmp	r1, #254	; 0xfe
 8002dfa:	d0d1      	beq.n	8002da0 <__aeabi_d2f+0x24>
 8002dfc:	0192      	lsls	r2, r2, #6
 8002dfe:	0a52      	lsrs	r2, r2, #9
 8002e00:	b2c0      	uxtb	r0, r0
 8002e02:	e7cf      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002e04:	2000      	movs	r0, #0
 8002e06:	2200      	movs	r2, #0
 8002e08:	e7cc      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002e0a:	000a      	movs	r2, r1
 8002e0c:	3217      	adds	r2, #23
 8002e0e:	db2f      	blt.n	8002e70 <__aeabi_d2f+0xf4>
 8002e10:	2680      	movs	r6, #128	; 0x80
 8002e12:	0436      	lsls	r6, r6, #16
 8002e14:	432e      	orrs	r6, r5
 8002e16:	251e      	movs	r5, #30
 8002e18:	1a6d      	subs	r5, r5, r1
 8002e1a:	2d1f      	cmp	r5, #31
 8002e1c:	dd11      	ble.n	8002e42 <__aeabi_d2f+0xc6>
 8002e1e:	2202      	movs	r2, #2
 8002e20:	4252      	negs	r2, r2
 8002e22:	1a52      	subs	r2, r2, r1
 8002e24:	0031      	movs	r1, r6
 8002e26:	40d1      	lsrs	r1, r2
 8002e28:	2d20      	cmp	r5, #32
 8002e2a:	d004      	beq.n	8002e36 <__aeabi_d2f+0xba>
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <__aeabi_d2f+0x104>)
 8002e2e:	4694      	mov	ip, r2
 8002e30:	4463      	add	r3, ip
 8002e32:	409e      	lsls	r6, r3
 8002e34:	4337      	orrs	r7, r6
 8002e36:	003a      	movs	r2, r7
 8002e38:	1e53      	subs	r3, r2, #1
 8002e3a:	419a      	sbcs	r2, r3
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	2100      	movs	r1, #0
 8002e40:	e7ce      	b.n	8002de0 <__aeabi_d2f+0x64>
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <__aeabi_d2f+0x108>)
 8002e44:	0038      	movs	r0, r7
 8002e46:	4694      	mov	ip, r2
 8002e48:	4463      	add	r3, ip
 8002e4a:	4098      	lsls	r0, r3
 8002e4c:	003a      	movs	r2, r7
 8002e4e:	1e41      	subs	r1, r0, #1
 8002e50:	4188      	sbcs	r0, r1
 8002e52:	409e      	lsls	r6, r3
 8002e54:	40ea      	lsrs	r2, r5
 8002e56:	4330      	orrs	r0, r6
 8002e58:	4302      	orrs	r2, r0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	0753      	lsls	r3, r2, #29
 8002e5e:	d1c1      	bne.n	8002de4 <__aeabi_d2f+0x68>
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	0013      	movs	r3, r2
 8002e64:	04c9      	lsls	r1, r1, #19
 8002e66:	2001      	movs	r0, #1
 8002e68:	400b      	ands	r3, r1
 8002e6a:	420a      	tst	r2, r1
 8002e6c:	d1c6      	bne.n	8002dfc <__aeabi_d2f+0x80>
 8002e6e:	e7a3      	b.n	8002db8 <__aeabi_d2f+0x3c>
 8002e70:	2300      	movs	r3, #0
 8002e72:	e7a0      	b.n	8002db6 <__aeabi_d2f+0x3a>
 8002e74:	000b      	movs	r3, r1
 8002e76:	e79f      	b.n	8002db8 <__aeabi_d2f+0x3c>
 8002e78:	000007fe 	.word	0x000007fe
 8002e7c:	fffffc80 	.word	0xfffffc80
 8002e80:	fffffca2 	.word	0xfffffca2
 8002e84:	fffffc82 	.word	0xfffffc82

08002e88 <__clzsi2>:
 8002e88:	211c      	movs	r1, #28
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	4298      	cmp	r0, r3
 8002e90:	d301      	bcc.n	8002e96 <__clzsi2+0xe>
 8002e92:	0c00      	lsrs	r0, r0, #16
 8002e94:	3910      	subs	r1, #16
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	4298      	cmp	r0, r3
 8002e9a:	d301      	bcc.n	8002ea0 <__clzsi2+0x18>
 8002e9c:	0a00      	lsrs	r0, r0, #8
 8002e9e:	3908      	subs	r1, #8
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	4298      	cmp	r0, r3
 8002ea4:	d301      	bcc.n	8002eaa <__clzsi2+0x22>
 8002ea6:	0900      	lsrs	r0, r0, #4
 8002ea8:	3904      	subs	r1, #4
 8002eaa:	a202      	add	r2, pc, #8	; (adr r2, 8002eb4 <__clzsi2+0x2c>)
 8002eac:	5c10      	ldrb	r0, [r2, r0]
 8002eae:	1840      	adds	r0, r0, r1
 8002eb0:	4770      	bx	lr
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	02020304 	.word	0x02020304
 8002eb8:	01010101 	.word	0x01010101
	...

08002ec4 <__clzdi2>:
 8002ec4:	b510      	push	{r4, lr}
 8002ec6:	2900      	cmp	r1, #0
 8002ec8:	d103      	bne.n	8002ed2 <__clzdi2+0xe>
 8002eca:	f7ff ffdd 	bl	8002e88 <__clzsi2>
 8002ece:	3020      	adds	r0, #32
 8002ed0:	e002      	b.n	8002ed8 <__clzdi2+0x14>
 8002ed2:	0008      	movs	r0, r1
 8002ed4:	f7ff ffd8 	bl	8002e88 <__clzsi2>
 8002ed8:	bd10      	pop	{r4, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)

08002edc <AHT20_Master_Transmit>:
 */

#include "AHT20.h"

HAL_StatusTypeDef AHT20_Master_Transmit(uint8_t *data, uint16_t size)
{
 8002edc:	b5b0      	push	{r4, r5, r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	000a      	movs	r2, r1
 8002ee6:	1cbb      	adds	r3, r7, #2
 8002ee8:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDR, data, size, HAL_MAX_DELAY);
 8002eea:	250f      	movs	r5, #15
 8002eec:	197c      	adds	r4, r7, r5
 8002eee:	1cbb      	adds	r3, r7, #2
 8002ef0:	8819      	ldrh	r1, [r3, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4807      	ldr	r0, [pc, #28]	; (8002f14 <AHT20_Master_Transmit+0x38>)
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	425b      	negs	r3, r3
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	000b      	movs	r3, r1
 8002efe:	2170      	movs	r1, #112	; 0x70
 8002f00:	f002 ff88 	bl	8005e14 <HAL_I2C_Master_Transmit>
 8002f04:	0003      	movs	r3, r0
 8002f06:	7023      	strb	r3, [r4, #0]

	return status;
 8002f08:	197b      	adds	r3, r7, r5
 8002f0a:	781b      	ldrb	r3, [r3, #0]
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b004      	add	sp, #16
 8002f12:	bdb0      	pop	{r4, r5, r7, pc}
 8002f14:	2000029c 	.word	0x2000029c

08002f18 <AHT20_Master_Receive>:

HAL_StatusTypeDef AHT20_Master_Receive(uint8_t *data, uint16_t size)
{
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	000a      	movs	r2, r1
 8002f22:	1cbb      	adds	r3, r7, #2
 8002f24:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Receive(&hi2c1, AHT20_READ_ADDR, data, size, HAL_MAX_DELAY);
 8002f26:	250f      	movs	r5, #15
 8002f28:	197c      	adds	r4, r7, r5
 8002f2a:	1cbb      	adds	r3, r7, #2
 8002f2c:	8819      	ldrh	r1, [r3, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4807      	ldr	r0, [pc, #28]	; (8002f50 <AHT20_Master_Receive+0x38>)
 8002f32:	2301      	movs	r3, #1
 8002f34:	425b      	negs	r3, r3
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	000b      	movs	r3, r1
 8002f3a:	2171      	movs	r1, #113	; 0x71
 8002f3c:	f003 f872 	bl	8006024 <HAL_I2C_Master_Receive>
 8002f40:	0003      	movs	r3, r0
 8002f42:	7023      	strb	r3, [r4, #0]

	return status;
 8002f44:	197b      	adds	r3, r7, r5
 8002f46:	781b      	ldrb	r3, [r3, #0]
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b004      	add	sp, #16
 8002f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f50:	2000029c 	.word	0x2000029c

08002f54 <AHT20_Init>:

	return read_value;
}

void AHT20_Init()
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
	uint8_t init_cmd[] = {0xBE, 0x08, 0x00};
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <AHT20_Init+0x70>)
 8002f5e:	8811      	ldrh	r1, [r2, #0]
 8002f60:	8019      	strh	r1, [r3, #0]
 8002f62:	7892      	ldrb	r2, [r2, #2]
 8002f64:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(init_cmd, sizeof(init_cmd)) != HAL_OK)
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	2103      	movs	r1, #3
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7ff ffb6 	bl	8002edc <AHT20_Master_Transmit>
 8002f70:	1e03      	subs	r3, r0, #0
 8002f72:	d004      	beq.n	8002f7e <AHT20_Init+0x2a>
	{
		printf("AHT20 initialisation error\n");
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <AHT20_Init+0x74>)
 8002f76:	0018      	movs	r0, r3
 8002f78:	f008 fec4 	bl	800bd04 <puts>
		else
		{
			printf("AHT20 not calibrated\n");
		}
	}
}
 8002f7c:	e01d      	b.n	8002fba <AHT20_Init+0x66>
		printf("AHT20 initialised\n");
 8002f7e:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <AHT20_Init+0x78>)
 8002f80:	0018      	movs	r0, r3
 8002f82:	f008 febf 	bl	800bd04 <puts>
		uint8_t value = 0x00;
 8002f86:	1cfb      	adds	r3, r7, #3
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8002f8c:	200a      	movs	r0, #10
 8002f8e:	f001 fd3b 	bl	8004a08 <HAL_Delay>
		AHT20_Master_Receive(&value, sizeof(value));
 8002f92:	1cfb      	adds	r3, r7, #3
 8002f94:	2101      	movs	r1, #1
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff ffbe 	bl	8002f18 <AHT20_Master_Receive>
		if ((value & 0x08) != 0x00) // check calibration bit
 8002f9c:	1cfb      	adds	r3, r7, #3
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <AHT20_Init+0x5e>
			printf("AHT20 calibrated\n");
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <AHT20_Init+0x7c>)
 8002faa:	0018      	movs	r0, r3
 8002fac:	f008 feaa 	bl	800bd04 <puts>
}
 8002fb0:	e003      	b.n	8002fba <AHT20_Init+0x66>
			printf("AHT20 not calibrated\n");
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <AHT20_Init+0x80>)
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f008 fea5 	bl	800bd04 <puts>
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	0800eabc 	.word	0x0800eabc
 8002fc8:	0800ea60 	.word	0x0800ea60
 8002fcc:	0800ea7c 	.word	0x0800ea7c
 8002fd0:	0800ea90 	.word	0x0800ea90
 8002fd4:	0800eaa4 	.word	0x0800eaa4

08002fd8 <AHT20_Read>:

void AHT20_Read(volatile float *Temp, volatile float *Hum)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
	uint8_t trig_measure_cmd[] = {0xAC, 0x33, 0x00};
 8002fe2:	2010      	movs	r0, #16
 8002fe4:	183b      	adds	r3, r7, r0
 8002fe6:	4a35      	ldr	r2, [pc, #212]	; (80030bc <AHT20_Read+0xe4>)
 8002fe8:	8811      	ldrh	r1, [r2, #0]
 8002fea:	8019      	strh	r1, [r3, #0]
 8002fec:	7892      	ldrb	r2, [r2, #2]
 8002fee:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(trig_measure_cmd, sizeof(trig_measure_cmd)) != HAL_OK)
 8002ff0:	183b      	adds	r3, r7, r0
 8002ff2:	2103      	movs	r1, #3
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7ff ff71 	bl	8002edc <AHT20_Master_Transmit>
 8002ffa:	1e03      	subs	r3, r0, #0
 8002ffc:	d004      	beq.n	8003008 <AHT20_Read+0x30>
	{
		printf("AHT20 trigger measurement error\n");
 8002ffe:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <AHT20_Read+0xe8>)
 8003000:	0018      	movs	r0, r3
 8003002:	f008 fe7f 	bl	800bd04 <puts>

			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
			*Temp = data * 200.0f / (1 << 20) - 50;
		}
	}
}
 8003006:	e054      	b.n	80030b2 <AHT20_Read+0xda>
		HAL_Delay(80); // wait for the measurements to be completed
 8003008:	2050      	movs	r0, #80	; 0x50
 800300a:	f001 fcfd 	bl	8004a08 <HAL_Delay>
		AHT20_Master_Receive(read_buffer, sizeof(read_buffer));
 800300e:	2408      	movs	r4, #8
 8003010:	193b      	adds	r3, r7, r4
 8003012:	2106      	movs	r1, #6
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff ff7f 	bl	8002f18 <AHT20_Master_Receive>
		if(((read_buffer[0]) & 0x80) == 0x00)
 800301a:	193b      	adds	r3, r7, r4
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b25b      	sxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	db46      	blt.n	80030b2 <AHT20_Read+0xda>
			uint32_t data = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
			data = (((uint32_t)read_buffer[3] >> 4) + ((uint32_t)read_buffer[2] << 4) + ((uint32_t)read_buffer[1] << 12));
 8003028:	193b      	adds	r3, r7, r4
 800302a:	78db      	ldrb	r3, [r3, #3]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	b2db      	uxtb	r3, r3
 8003030:	001a      	movs	r2, r3
 8003032:	193b      	adds	r3, r7, r4
 8003034:	789b      	ldrb	r3, [r3, #2]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	18d2      	adds	r2, r2, r3
 800303a:	193b      	adds	r3, r7, r4
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	031b      	lsls	r3, r3, #12
 8003040:	18d3      	adds	r3, r2, r3
 8003042:	617b      	str	r3, [r7, #20]
			*Hum = data * 100.0f / (1 << 20);
 8003044:	6978      	ldr	r0, [r7, #20]
 8003046:	f7fd ffc1 	bl	8000fcc <__aeabi_ui2f>
 800304a:	1c03      	adds	r3, r0, #0
 800304c:	491d      	ldr	r1, [pc, #116]	; (80030c4 <AHT20_Read+0xec>)
 800304e:	1c18      	adds	r0, r3, #0
 8003050:	f7fd fcce 	bl	80009f0 <__aeabi_fmul>
 8003054:	1c03      	adds	r3, r0, #0
 8003056:	2193      	movs	r1, #147	; 0x93
 8003058:	05c9      	lsls	r1, r1, #23
 800305a:	1c18      	adds	r0, r3, #0
 800305c:	f7fd fbae 	bl	80007bc <__aeabi_fdiv>
 8003060:	1c03      	adds	r3, r0, #0
 8003062:	1c1a      	adds	r2, r3, #0
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	601a      	str	r2, [r3, #0]
			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
 8003068:	193b      	adds	r3, r7, r4
 800306a:	78db      	ldrb	r3, [r3, #3]
 800306c:	041a      	lsls	r2, r3, #16
 800306e:	23f0      	movs	r3, #240	; 0xf0
 8003070:	031b      	lsls	r3, r3, #12
 8003072:	401a      	ands	r2, r3
 8003074:	193b      	adds	r3, r7, r4
 8003076:	791b      	ldrb	r3, [r3, #4]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	18d3      	adds	r3, r2, r3
 800307c:	193a      	adds	r2, r7, r4
 800307e:	7952      	ldrb	r2, [r2, #5]
 8003080:	189b      	adds	r3, r3, r2
 8003082:	617b      	str	r3, [r7, #20]
			*Temp = data * 200.0f / (1 << 20) - 50;
 8003084:	6978      	ldr	r0, [r7, #20]
 8003086:	f7fd ffa1 	bl	8000fcc <__aeabi_ui2f>
 800308a:	1c03      	adds	r3, r0, #0
 800308c:	490e      	ldr	r1, [pc, #56]	; (80030c8 <AHT20_Read+0xf0>)
 800308e:	1c18      	adds	r0, r3, #0
 8003090:	f7fd fcae 	bl	80009f0 <__aeabi_fmul>
 8003094:	1c03      	adds	r3, r0, #0
 8003096:	2193      	movs	r1, #147	; 0x93
 8003098:	05c9      	lsls	r1, r1, #23
 800309a:	1c18      	adds	r0, r3, #0
 800309c:	f7fd fb8e 	bl	80007bc <__aeabi_fdiv>
 80030a0:	1c03      	adds	r3, r0, #0
 80030a2:	490a      	ldr	r1, [pc, #40]	; (80030cc <AHT20_Read+0xf4>)
 80030a4:	1c18      	adds	r0, r3, #0
 80030a6:	f7fd fdf1 	bl	8000c8c <__aeabi_fsub>
 80030aa:	1c03      	adds	r3, r0, #0
 80030ac:	1c1a      	adds	r2, r3, #0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	601a      	str	r2, [r3, #0]
}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b007      	add	sp, #28
 80030b8:	bd90      	pop	{r4, r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	0800eae0 	.word	0x0800eae0
 80030c0:	0800eac0 	.word	0x0800eac0
 80030c4:	42c80000 	.word	0x42c80000
 80030c8:	43480000 	.word	0x43480000
 80030cc:	42480000 	.word	0x42480000

080030d0 <NEO6_ReceiveUartChar>:
  /* done */
  return token;
}

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	2382      	movs	r3, #130	; 0x82
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	5cd3      	ldrb	r3, [r2, r3]
 80030e0:	3301      	adds	r3, #1
 80030e2:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <NEO6_ReceiveUartChar+0xc0>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	d503      	bpl.n	80030f0 <NEO6_ReceiveUartChar+0x20>
 80030e8:	3b01      	subs	r3, #1
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <NEO6_ReceiveUartChar+0xc4>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	3301      	adds	r3, #1
 80030f0:	001a      	movs	r2, r3
 80030f2:	200f      	movs	r0, #15
 80030f4:	183b      	adds	r3, r7, r0
 80030f6:	701a      	strb	r2, [r3, #0]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	2306      	movs	r3, #6
 80030fc:	33ff      	adds	r3, #255	; 0xff
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	183a      	adds	r2, r7, r0
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d038      	beq.n	800317a <NEO6_ReceiveUartChar+0xaa>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 8003108:	4b23      	ldr	r3, [pc, #140]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b0d      	cmp	r3, #13
 8003110:	d119      	bne.n	8003146 <NEO6_ReceiveUartChar+0x76>
		{
			GpsStateHandler->UartBufferLines++;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	2383      	movs	r3, #131	; 0x83
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	5cd3      	ldrb	r3, [r2, r3]
 800311a:	3301      	adds	r3, #1
 800311c:	b2d9      	uxtb	r1, r3
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	2383      	movs	r3, #131	; 0x83
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBufferHead = TempHead;
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	1839      	adds	r1, r7, r0
 800312a:	2382      	movs	r3, #130	; 0x82
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	7809      	ldrb	r1, [r1, #0]
 8003130:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8003132:	183b      	adds	r3, r7, r0
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	4a18      	ldr	r2, [pc, #96]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	b2d1      	uxtb	r1, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	18d3      	adds	r3, r2, r3
 8003140:	1c0a      	adds	r2, r1, #0
 8003142:	711a      	strb	r2, [r3, #4]
 8003144:	e019      	b.n	800317a <NEO6_ReceiveUartChar+0xaa>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d014      	beq.n	800317a <NEO6_ReceiveUartChar+0xaa>
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b0a      	cmp	r3, #10
 8003158:	d00f      	beq.n	800317a <NEO6_ReceiveUartChar+0xaa>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	200f      	movs	r0, #15
 800315e:	1839      	adds	r1, r7, r0
 8003160:	2382      	movs	r3, #130	; 0x82
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	7809      	ldrb	r1, [r1, #0]
 8003166:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8003168:	183b      	adds	r3, r7, r0
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 800316e:	7812      	ldrb	r2, [r2, #0]
 8003170:	b2d1      	uxtb	r1, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	18d3      	adds	r3, r2, r3
 8003176:	1c0a      	adds	r2, r1, #0
 8003178:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4906      	ldr	r1, [pc, #24]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003180:	2201      	movs	r2, #1
 8003182:	0018      	movs	r0, r3
 8003184:	f005 fc78 	bl	8008a78 <HAL_UART_Receive_IT>
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b004      	add	sp, #16
 800318e:	bd80      	pop	{r7, pc}
 8003190:	800000ff 	.word	0x800000ff
 8003194:	ffffff00 	.word	0xffffff00
 8003198:	200001f4 	.word	0x200001f4

0800319c <NEO6_Init>:
		NEO6_ParseLine(GpsStateHandler);
	}
}

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	2382      	movs	r3, #130	; 0x82
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2100      	movs	r1, #0
 80031b4:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferTail = 0;
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	2306      	movs	r3, #6
 80031ba:	33ff      	adds	r3, #255	; 0xff
 80031bc:	2100      	movs	r1, #0
 80031be:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferLines = 0;
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	2383      	movs	r3, #131	; 0x83
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2100      	movs	r1, #0
 80031c8:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Hour = 0;
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	2388      	movs	r3, #136	; 0x88
 80031ce:	33ff      	adds	r3, #255	; 0xff
 80031d0:	2100      	movs	r1, #0
 80031d2:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Minute = 0;
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	23c4      	movs	r3, #196	; 0xc4
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2100      	movs	r1, #0
 80031dc:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Second = 0;
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	238a      	movs	r3, #138	; 0x8a
 80031e2:	33ff      	adds	r3, #255	; 0xff
 80031e4:	2100      	movs	r1, #0
 80031e6:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Day = 0;
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	23c5      	movs	r3, #197	; 0xc5
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2100      	movs	r1, #0
 80031f0:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Month = 0;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	238c      	movs	r3, #140	; 0x8c
 80031f6:	33ff      	adds	r3, #255	; 0xff
 80031f8:	2100      	movs	r1, #0
 80031fa:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Year = 0;
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	23c6      	movs	r3, #198	; 0xc6
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2100      	movs	r1, #0
 8003204:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Latitude = 0;
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	23c8      	movs	r3, #200	; 0xc8
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	18d1      	adds	r1, r2, r3
 800320e:	2200      	movs	r2, #0
 8003210:	2300      	movs	r3, #0
 8003212:	600a      	str	r2, [r1, #0]
 8003214:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LatitudeDirection = '0';
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	23cc      	movs	r3, #204	; 0xcc
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2130      	movs	r1, #48	; 0x30
 800321e:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Longitude = 0;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	23d0      	movs	r3, #208	; 0xd0
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	18d1      	adds	r1, r2, r3
 8003228:	2200      	movs	r2, #0
 800322a:	2300      	movs	r3, #0
 800322c:	600a      	str	r2, [r1, #0]
 800322e:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LongitudeDirection = '0';
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	23d4      	movs	r3, #212	; 0xd4
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2130      	movs	r1, #48	; 0x30
 8003238:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->SpeedKilometers = 0;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	23e0      	movs	r3, #224	; 0xe0
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	18d1      	adds	r1, r2, r3
 8003242:	2200      	movs	r2, #0
 8003244:	2300      	movs	r3, #0
 8003246:	600a      	str	r2, [r1, #0]
 8003248:	604b      	str	r3, [r1, #4]
	GpsStateHandler->SpeedKnots = 0;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	23dc      	movs	r3, #220	; 0xdc
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	18d1      	adds	r1, r2, r3
 8003252:	2200      	movs	r2, #0
 8003254:	2300      	movs	r3, #0
 8003256:	600a      	str	r2, [r1, #0]
 8003258:	604b      	str	r3, [r1, #4]

	GpsStateHandler->SatelitesNumber = 0;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	23e4      	movs	r3, #228	; 0xe4
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	2100      	movs	r1, #0
 8003262:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Quality = 0;
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	23ca      	movs	r3, #202	; 0xca
 8003268:	33ff      	adds	r3, #255	; 0xff
 800326a:	2100      	movs	r1, #0
 800326c:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Dop = 0;
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	23e8      	movs	r3, #232	; 0xe8
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	18d1      	adds	r1, r2, r3
 8003276:	2200      	movs	r2, #0
 8003278:	2300      	movs	r3, #0
 800327a:	600a      	str	r2, [r1, #0]
 800327c:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Hdop = 0;
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	23ec      	movs	r3, #236	; 0xec
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	18d1      	adds	r1, r2, r3
 8003286:	2200      	movs	r2, #0
 8003288:	2300      	movs	r3, #0
 800328a:	600a      	str	r2, [r1, #0]
 800328c:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Vdop = 0;
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	23f0      	movs	r3, #240	; 0xf0
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	18d1      	adds	r1, r2, r3
 8003296:	2200      	movs	r2, #0
 8003298:	2300      	movs	r3, #0
 800329a:	600a      	str	r2, [r1, #0]
 800329c:	604b      	str	r3, [r1, #4]

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4904      	ldr	r1, [pc, #16]	; (80032b4 <NEO6_Init+0x118>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	0018      	movs	r0, r3
 80032a8:	f005 fbe6 	bl	8008a78 <HAL_UART_Receive_IT>
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	200001f4 	.word	0x200001f4

080032b8 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032be:	003b      	movs	r3, r7
 80032c0:	0018      	movs	r0, r3
 80032c2:	2308      	movs	r3, #8
 80032c4:	001a      	movs	r2, r3
 80032c6:	2100      	movs	r1, #0
 80032c8:	f008 fe38 	bl	800bf3c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80032cc:	4b29      	ldr	r3, [pc, #164]	; (8003374 <MX_ADC_Init+0xbc>)
 80032ce:	4a2a      	ldr	r2, [pc, #168]	; (8003378 <MX_ADC_Init+0xc0>)
 80032d0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80032d2:	4b28      	ldr	r3, [pc, #160]	; (8003374 <MX_ADC_Init+0xbc>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80032d8:	4b26      	ldr	r3, [pc, #152]	; (8003374 <MX_ADC_Init+0xbc>)
 80032da:	2200      	movs	r2, #0
 80032dc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80032de:	4b25      	ldr	r3, [pc, #148]	; (8003374 <MX_ADC_Init+0xbc>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80032e4:	4b23      	ldr	r3, [pc, #140]	; (8003374 <MX_ADC_Init+0xbc>)
 80032e6:	2207      	movs	r2, #7
 80032e8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80032ea:	4b22      	ldr	r3, [pc, #136]	; (8003374 <MX_ADC_Init+0xbc>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032f0:	4b20      	ldr	r3, [pc, #128]	; (8003374 <MX_ADC_Init+0xbc>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80032f6:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <MX_ADC_Init+0xbc>)
 80032f8:	2220      	movs	r2, #32
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80032fe:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <MX_ADC_Init+0xbc>)
 8003300:	2221      	movs	r2, #33	; 0x21
 8003302:	2100      	movs	r1, #0
 8003304:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <MX_ADC_Init+0xbc>)
 8003308:	2200      	movs	r2, #0
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <MX_ADC_Init+0xbc>)
 800330e:	22c2      	movs	r2, #194	; 0xc2
 8003310:	32ff      	adds	r2, #255	; 0xff
 8003312:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003314:	4b17      	ldr	r3, [pc, #92]	; (8003374 <MX_ADC_Init+0xbc>)
 8003316:	222c      	movs	r2, #44	; 0x2c
 8003318:	2101      	movs	r1, #1
 800331a:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800331c:	4b15      	ldr	r3, [pc, #84]	; (8003374 <MX_ADC_Init+0xbc>)
 800331e:	2204      	movs	r2, #4
 8003320:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <MX_ADC_Init+0xbc>)
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <MX_ADC_Init+0xbc>)
 800332a:	2200      	movs	r2, #0
 800332c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <MX_ADC_Init+0xbc>)
 8003330:	2200      	movs	r2, #0
 8003332:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <MX_ADC_Init+0xbc>)
 8003336:	2200      	movs	r2, #0
 8003338:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <MX_ADC_Init+0xbc>)
 800333c:	0018      	movs	r0, r3
 800333e:	f001 fb87 	bl	8004a50 <HAL_ADC_Init>
 8003342:	1e03      	subs	r3, r0, #0
 8003344:	d001      	beq.n	800334a <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8003346:	f000 fb05 	bl	8003954 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800334a:	003b      	movs	r3, r7
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003350:	003b      	movs	r3, r7
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	0152      	lsls	r2, r2, #5
 8003356:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003358:	003a      	movs	r2, r7
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <MX_ADC_Init+0xbc>)
 800335c:	0011      	movs	r1, r2
 800335e:	0018      	movs	r0, r3
 8003360:	f001 fd84 	bl	8004e6c <HAL_ADC_ConfigChannel>
 8003364:	1e03      	subs	r3, r0, #0
 8003366:	d001      	beq.n	800336c <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 8003368:	f000 faf4 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}
 8003374:	200001f8 	.word	0x200001f8
 8003378:	40012400 	.word	0x40012400

0800337c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003384:	240c      	movs	r4, #12
 8003386:	193b      	adds	r3, r7, r4
 8003388:	0018      	movs	r0, r3
 800338a:	2314      	movs	r3, #20
 800338c:	001a      	movs	r2, r3
 800338e:	2100      	movs	r1, #0
 8003390:	f008 fdd4 	bl	800bf3c <memset>
  if(adcHandle->Instance==ADC1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2a      	ldr	r2, [pc, #168]	; (8003444 <HAL_ADC_MspInit+0xc8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d14d      	bne.n	800343a <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800339e:	4b2a      	ldr	r3, [pc, #168]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 80033a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a2:	4b29      	ldr	r3, [pc, #164]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 80033a4:	2180      	movs	r1, #128	; 0x80
 80033a6:	0089      	lsls	r1, r1, #2
 80033a8:	430a      	orrs	r2, r1
 80033aa:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ac:	4b26      	ldr	r3, [pc, #152]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 80033ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 80033b2:	2101      	movs	r1, #1
 80033b4:	430a      	orrs	r2, r1
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80033b8:	4b23      	ldr	r3, [pc, #140]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	2201      	movs	r2, #1
 80033be:	4013      	ands	r3, r2
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033c4:	193b      	adds	r3, r7, r4
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ca:	193b      	adds	r3, r7, r4
 80033cc:	2203      	movs	r2, #3
 80033ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	193b      	adds	r3, r7, r4
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d6:	193a      	adds	r2, r7, r4
 80033d8:	23a0      	movs	r3, #160	; 0xa0
 80033da:	05db      	lsls	r3, r3, #23
 80033dc:	0011      	movs	r1, r2
 80033de:	0018      	movs	r0, r3
 80033e0:	f002 faae 	bl	8005940 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80033e4:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_ADC_MspInit+0xd0>)
 80033e6:	4a1a      	ldr	r2, [pc, #104]	; (8003450 <HAL_ADC_MspInit+0xd4>)
 80033e8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80033ea:	4b18      	ldr	r3, [pc, #96]	; (800344c <HAL_ADC_MspInit+0xd0>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033f0:	4b16      	ldr	r3, [pc, #88]	; (800344c <HAL_ADC_MspInit+0xd0>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <HAL_ADC_MspInit+0xd0>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80033fc:	4b13      	ldr	r3, [pc, #76]	; (800344c <HAL_ADC_MspInit+0xd0>)
 80033fe:	2280      	movs	r2, #128	; 0x80
 8003400:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_ADC_MspInit+0xd0>)
 8003404:	2280      	movs	r2, #128	; 0x80
 8003406:	0092      	lsls	r2, r2, #2
 8003408:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <HAL_ADC_MspInit+0xd0>)
 800340c:	2280      	movs	r2, #128	; 0x80
 800340e:	0112      	lsls	r2, r2, #4
 8003410:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003412:	4b0e      	ldr	r3, [pc, #56]	; (800344c <HAL_ADC_MspInit+0xd0>)
 8003414:	2220      	movs	r2, #32
 8003416:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <HAL_ADC_MspInit+0xd0>)
 800341a:	2200      	movs	r2, #0
 800341c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_ADC_MspInit+0xd0>)
 8003420:	0018      	movs	r0, r3
 8003422:	f002 f84b 	bl	80054bc <HAL_DMA_Init>
 8003426:	1e03      	subs	r3, r0, #0
 8003428:	d001      	beq.n	800342e <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800342a:	f000 fa93 	bl	8003954 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a06      	ldr	r2, [pc, #24]	; (800344c <HAL_ADC_MspInit+0xd0>)
 8003432:	64da      	str	r2, [r3, #76]	; 0x4c
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_ADC_MspInit+0xd0>)
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	46bd      	mov	sp, r7
 800343e:	b009      	add	sp, #36	; 0x24
 8003440:	bd90      	pop	{r4, r7, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	40012400 	.word	0x40012400
 8003448:	40021000 	.word	0x40021000
 800344c:	20000254 	.word	0x20000254
 8003450:	40020008 	.word	0x40020008

08003454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <MX_DMA_Init+0x38>)
 800345c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <MX_DMA_Init+0x38>)
 8003460:	2101      	movs	r1, #1
 8003462:	430a      	orrs	r2, r1
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <MX_DMA_Init+0x38>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	2201      	movs	r2, #1
 800346c:	4013      	ands	r3, r2
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003472:	2200      	movs	r2, #0
 8003474:	2101      	movs	r1, #1
 8003476:	2009      	movs	r0, #9
 8003478:	f001 ffee 	bl	8005458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800347c:	2009      	movs	r0, #9
 800347e:	f002 f800 	bl	8005482 <HAL_NVIC_EnableIRQ>

}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	46bd      	mov	sp, r7
 8003486:	b002      	add	sp, #8
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	40021000 	.word	0x40021000

08003490 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b08b      	sub	sp, #44	; 0x2c
 8003494:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003496:	2414      	movs	r4, #20
 8003498:	193b      	adds	r3, r7, r4
 800349a:	0018      	movs	r0, r3
 800349c:	2314      	movs	r3, #20
 800349e:	001a      	movs	r2, r3
 80034a0:	2100      	movs	r1, #0
 80034a2:	f008 fd4b 	bl	800bf3c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a6:	4b48      	ldr	r3, [pc, #288]	; (80035c8 <MX_GPIO_Init+0x138>)
 80034a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034aa:	4b47      	ldr	r3, [pc, #284]	; (80035c8 <MX_GPIO_Init+0x138>)
 80034ac:	2104      	movs	r1, #4
 80034ae:	430a      	orrs	r2, r1
 80034b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80034b2:	4b45      	ldr	r3, [pc, #276]	; (80035c8 <MX_GPIO_Init+0x138>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	2204      	movs	r2, #4
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034be:	4b42      	ldr	r3, [pc, #264]	; (80035c8 <MX_GPIO_Init+0x138>)
 80034c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c2:	4b41      	ldr	r3, [pc, #260]	; (80035c8 <MX_GPIO_Init+0x138>)
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	430a      	orrs	r2, r1
 80034c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80034ca:	4b3f      	ldr	r3, [pc, #252]	; (80035c8 <MX_GPIO_Init+0x138>)
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	4013      	ands	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d6:	4b3c      	ldr	r3, [pc, #240]	; (80035c8 <MX_GPIO_Init+0x138>)
 80034d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034da:	4b3b      	ldr	r3, [pc, #236]	; (80035c8 <MX_GPIO_Init+0x138>)
 80034dc:	2101      	movs	r1, #1
 80034de:	430a      	orrs	r2, r1
 80034e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80034e2:	4b39      	ldr	r3, [pc, #228]	; (80035c8 <MX_GPIO_Init+0x138>)
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	2201      	movs	r2, #1
 80034e8:	4013      	ands	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ee:	4b36      	ldr	r3, [pc, #216]	; (80035c8 <MX_GPIO_Init+0x138>)
 80034f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f2:	4b35      	ldr	r3, [pc, #212]	; (80035c8 <MX_GPIO_Init+0x138>)
 80034f4:	2102      	movs	r1, #2
 80034f6:	430a      	orrs	r2, r1
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80034fa:	4b33      	ldr	r3, [pc, #204]	; (80035c8 <MX_GPIO_Init+0x138>)
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	2202      	movs	r2, #2
 8003500:	4013      	ands	r3, r2
 8003502:	607b      	str	r3, [r7, #4]
 8003504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003506:	23a0      	movs	r3, #160	; 0xa0
 8003508:	05db      	lsls	r3, r3, #23
 800350a:	2200      	movs	r2, #0
 800350c:	2120      	movs	r1, #32
 800350e:	0018      	movs	r0, r3
 8003510:	f002 fb8c 	bl	8005c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8003514:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <MX_GPIO_Init+0x13c>)
 8003516:	2200      	movs	r2, #0
 8003518:	21c0      	movs	r1, #192	; 0xc0
 800351a:	0018      	movs	r0, r3
 800351c:	f002 fb86 	bl	8005c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003520:	193b      	adds	r3, r7, r4
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	0192      	lsls	r2, r2, #6
 8003526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003528:	193b      	adds	r3, r7, r4
 800352a:	2284      	movs	r2, #132	; 0x84
 800352c:	0392      	lsls	r2, r2, #14
 800352e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	193b      	adds	r3, r7, r4
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003536:	193b      	adds	r3, r7, r4
 8003538:	4a24      	ldr	r2, [pc, #144]	; (80035cc <MX_GPIO_Init+0x13c>)
 800353a:	0019      	movs	r1, r3
 800353c:	0010      	movs	r0, r2
 800353e:	f002 f9ff 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003542:	193b      	adds	r3, r7, r4
 8003544:	2220      	movs	r2, #32
 8003546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003548:	193b      	adds	r3, r7, r4
 800354a:	2201      	movs	r2, #1
 800354c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	193b      	adds	r3, r7, r4
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003554:	193b      	adds	r3, r7, r4
 8003556:	2200      	movs	r2, #0
 8003558:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800355a:	193a      	adds	r2, r7, r4
 800355c:	23a0      	movs	r3, #160	; 0xa0
 800355e:	05db      	lsls	r3, r3, #23
 8003560:	0011      	movs	r1, r2
 8003562:	0018      	movs	r0, r3
 8003564:	f002 f9ec 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 8003568:	193b      	adds	r3, r7, r4
 800356a:	22c0      	movs	r2, #192	; 0xc0
 800356c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800356e:	193b      	adds	r3, r7, r4
 8003570:	2201      	movs	r2, #1
 8003572:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	193b      	adds	r3, r7, r4
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357a:	193b      	adds	r3, r7, r4
 800357c:	2200      	movs	r2, #0
 800357e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003580:	193b      	adds	r3, r7, r4
 8003582:	4a12      	ldr	r2, [pc, #72]	; (80035cc <MX_GPIO_Init+0x13c>)
 8003584:	0019      	movs	r1, r3
 8003586:	0010      	movs	r0, r2
 8003588:	f002 f9da 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 800358c:	0021      	movs	r1, r4
 800358e:	187b      	adds	r3, r7, r1
 8003590:	2280      	movs	r2, #128	; 0x80
 8003592:	0052      	lsls	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003596:	187b      	adds	r3, r7, r1
 8003598:	2288      	movs	r2, #136	; 0x88
 800359a:	0352      	lsls	r2, r2, #13
 800359c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	4a09      	ldr	r2, [pc, #36]	; (80035cc <MX_GPIO_Init+0x13c>)
 80035a8:	0019      	movs	r1, r3
 80035aa:	0010      	movs	r0, r2
 80035ac:	f002 f9c8 	bl	8005940 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80035b0:	2200      	movs	r2, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	2007      	movs	r0, #7
 80035b6:	f001 ff4f 	bl	8005458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80035ba:	2007      	movs	r0, #7
 80035bc:	f001 ff61 	bl	8005482 <HAL_NVIC_EnableIRQ>

}
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b00b      	add	sp, #44	; 0x2c
 80035c6:	bd90      	pop	{r4, r7, pc}
 80035c8:	40021000 	.word	0x40021000
 80035cc:	50000800 	.word	0x50000800

080035d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <MX_I2C1_Init+0x74>)
 80035d6:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <MX_I2C1_Init+0x78>)
 80035d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80035da:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <MX_I2C1_Init+0x74>)
 80035dc:	4a1b      	ldr	r2, [pc, #108]	; (800364c <MX_I2C1_Init+0x7c>)
 80035de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80035e0:	4b18      	ldr	r3, [pc, #96]	; (8003644 <MX_I2C1_Init+0x74>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035e6:	4b17      	ldr	r3, [pc, #92]	; (8003644 <MX_I2C1_Init+0x74>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035ec:	4b15      	ldr	r3, [pc, #84]	; (8003644 <MX_I2C1_Init+0x74>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80035f2:	4b14      	ldr	r3, [pc, #80]	; (8003644 <MX_I2C1_Init+0x74>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <MX_I2C1_Init+0x74>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <MX_I2C1_Init+0x74>)
 8003600:	2200      	movs	r2, #0
 8003602:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <MX_I2C1_Init+0x74>)
 8003606:	2200      	movs	r2, #0
 8003608:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800360a:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <MX_I2C1_Init+0x74>)
 800360c:	0018      	movs	r0, r3
 800360e:	f002 fb6b 	bl	8005ce8 <HAL_I2C_Init>
 8003612:	1e03      	subs	r3, r0, #0
 8003614:	d001      	beq.n	800361a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003616:	f000 f99d 	bl	8003954 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <MX_I2C1_Init+0x74>)
 800361c:	2100      	movs	r1, #0
 800361e:	0018      	movs	r0, r3
 8003620:	f003 f8be 	bl	80067a0 <HAL_I2CEx_ConfigAnalogFilter>
 8003624:	1e03      	subs	r3, r0, #0
 8003626:	d001      	beq.n	800362c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003628:	f000 f994 	bl	8003954 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <MX_I2C1_Init+0x74>)
 800362e:	2100      	movs	r1, #0
 8003630:	0018      	movs	r0, r3
 8003632:	f003 f901 	bl	8006838 <HAL_I2CEx_ConfigDigitalFilter>
 8003636:	1e03      	subs	r3, r0, #0
 8003638:	d001      	beq.n	800363e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800363a:	f000 f98b 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	2000029c 	.word	0x2000029c
 8003648:	40005400 	.word	0x40005400
 800364c:	00707cbb 	.word	0x00707cbb

08003650 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003658:	240c      	movs	r4, #12
 800365a:	193b      	adds	r3, r7, r4
 800365c:	0018      	movs	r0, r3
 800365e:	2314      	movs	r3, #20
 8003660:	001a      	movs	r2, r3
 8003662:	2100      	movs	r1, #0
 8003664:	f008 fc6a 	bl	800bf3c <memset>
  if(i2cHandle->Instance==I2C1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a17      	ldr	r2, [pc, #92]	; (80036cc <HAL_I2C_MspInit+0x7c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d128      	bne.n	80036c4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003672:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <HAL_I2C_MspInit+0x80>)
 8003674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003676:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <HAL_I2C_MspInit+0x80>)
 8003678:	2102      	movs	r1, #2
 800367a:	430a      	orrs	r2, r1
 800367c:	62da      	str	r2, [r3, #44]	; 0x2c
 800367e:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <HAL_I2C_MspInit+0x80>)
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	2202      	movs	r2, #2
 8003684:	4013      	ands	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800368a:	0021      	movs	r1, r4
 800368c:	187b      	adds	r3, r7, r1
 800368e:	22c0      	movs	r2, #192	; 0xc0
 8003690:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003692:	187b      	adds	r3, r7, r1
 8003694:	2212      	movs	r2, #18
 8003696:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	187b      	adds	r3, r7, r1
 800369a:	2200      	movs	r2, #0
 800369c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	2203      	movs	r2, #3
 80036a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80036a4:	187b      	adds	r3, r7, r1
 80036a6:	2201      	movs	r2, #1
 80036a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036aa:	187b      	adds	r3, r7, r1
 80036ac:	4a09      	ldr	r2, [pc, #36]	; (80036d4 <HAL_I2C_MspInit+0x84>)
 80036ae:	0019      	movs	r1, r3
 80036b0:	0010      	movs	r0, r2
 80036b2:	f002 f945 	bl	8005940 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_I2C_MspInit+0x80>)
 80036b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_I2C_MspInit+0x80>)
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	0389      	lsls	r1, r1, #14
 80036c0:	430a      	orrs	r2, r1
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80036c4:	46c0      	nop			; (mov r8, r8)
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b009      	add	sp, #36	; 0x24
 80036ca:	bd90      	pop	{r4, r7, pc}
 80036cc:	40005400 	.word	0x40005400
 80036d0:	40021000 	.word	0x40021000
 80036d4:	50000400 	.word	0x50000400

080036d8 <__io_putchar>:
uint8_t Message[32];
uint8_t MessageLength;


int __io_putchar(int ch) // to pc
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b0a      	cmp	r3, #10
 80036e4:	d102      	bne.n	80036ec <__io_putchar+0x14>
    __io_putchar('\r');
 80036e6:	200d      	movs	r0, #13
 80036e8:	f7ff fff6 	bl	80036d8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80036ec:	2301      	movs	r3, #1
 80036ee:	425b      	negs	r3, r3
 80036f0:	1d39      	adds	r1, r7, #4
 80036f2:	4804      	ldr	r0, [pc, #16]	; (8003704 <__io_putchar+0x2c>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	f005 f91f 	bl	8008938 <HAL_UART_Transmit>

  return 1;
 80036fa:	2301      	movs	r3, #1
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b002      	add	sp, #8
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000610 	.word	0x20000610

08003708 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  if(huart == GpsState.neo6_huart)
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_UART_RxCpltCallback+0x24>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	429a      	cmp	r2, r3
 8003718:	d103      	bne.n	8003722 <HAL_UART_RxCpltCallback+0x1a>
  {
    NEO6_ReceiveUartChar(&GpsState);
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <HAL_UART_RxCpltCallback+0x24>)
 800371c:	0018      	movs	r0, r3
 800371e:	f7ff fcd7 	bl	80030d0 <NEO6_ReceiveUartChar>
  }
}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	200002f0 	.word	0x200002f0

08003730 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b5b0      	push	{r4, r5, r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af02      	add	r7, sp, #8
 8003736:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4b14      	ldr	r3, [pc, #80]	; (800378c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800373c:	429a      	cmp	r2, r3
 800373e:	d121      	bne.n	8003784 <HAL_TIM_PeriodElapsedCallback+0x54>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003740:	23a0      	movs	r3, #160	; 0xa0
 8003742:	05db      	lsls	r3, r3, #23
 8003744:	2120      	movs	r1, #32
 8003746:	0018      	movs	r0, r3
 8003748:	f002 fa8d 	bl	8005c66 <HAL_GPIO_TogglePin>
    AHT20_Read(&Temp, &Hum); // reads AHT20 measurements every second
 800374c:	4a10      	ldr	r2, [pc, #64]	; (8003790 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003750:	0011      	movs	r1, r2
 8003752:	0018      	movs	r0, r3
 8003754:	f7ff fc40 	bl	8002fd8 <AHT20_Read>
    printf("Temperature = %.1fC\n Hum = %.1f\n", Temp, Hum);
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	1c18      	adds	r0, r3, #0
 800375e:	f7ff fac5 	bl	8002cec <__aeabi_f2d>
 8003762:	0004      	movs	r4, r0
 8003764:	000d      	movs	r5, r1
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	1c18      	adds	r0, r3, #0
 800376c:	f7ff fabe 	bl	8002cec <__aeabi_f2d>
 8003770:	0002      	movs	r2, r0
 8003772:	000b      	movs	r3, r1
 8003774:	4908      	ldr	r1, [pc, #32]	; (8003798 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003776:	9200      	str	r2, [sp, #0]
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	0022      	movs	r2, r4
 800377c:	002b      	movs	r3, r5
 800377e:	0008      	movs	r0, r1
 8003780:	f008 fa5a 	bl	800bc38 <iprintf>
  }
}
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bdb0      	pop	{r4, r5, r7, pc}
 800378c:	20000548 	.word	0x20000548
 8003790:	200004dc 	.word	0x200004dc
 8003794:	200004d8 	.word	0x200004d8
 8003798:	0800eae4 	.word	0x0800eae4

0800379c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037a2:	f001 f8c1 	bl	8004928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037a6:	f000 f857 	bl	8003858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037aa:	f7ff fe71 	bl	8003490 <MX_GPIO_Init>
  MX_DMA_Init();
 80037ae:	f7ff fe51 	bl	8003454 <MX_DMA_Init>
  MX_I2C1_Init();
 80037b2:	f7ff ff0d 	bl	80035d0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80037b6:	f000 ffaf 	bl	8004718 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80037ba:	f000 ffdd 	bl	8004778 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80037be:	f000 fd8f 	bl	80042e0 <MX_SPI1_Init>
  MX_TIM6_Init();
 80037c2:	f000 ff4b 	bl	800465c <MX_TIM6_Init>
  MX_ADC_Init();
 80037c6:	f7ff fd77 	bl	80032b8 <MX_ADC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  AHT20_Init();
 80037ca:	f7ff fbc3 	bl	8002f54 <AHT20_Init>
  NEO6_Init(&GpsState, &huart1);
 80037ce:	4a19      	ldr	r2, [pc, #100]	; (8003834 <main+0x98>)
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <main+0x9c>)
 80037d2:	0011      	movs	r1, r2
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7ff fce1 	bl	800319c <NEO6_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <main+0xa0>)
 80037dc:	0018      	movs	r0, r3
 80037de:	f004 fe57 	bl	8008490 <HAL_TIM_Base_Start_IT>


  // RECEIVER
  nRF24_Init(&hspi1);
 80037e2:	4b17      	ldr	r3, [pc, #92]	; (8003840 <main+0xa4>)
 80037e4:	0018      	movs	r0, r3
 80037e6:	f000 fd25 	bl	8004234 <nRF24_Init>
  nRF24_SetRXAddress(0, "Odb");
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <main+0xa8>)
 80037ec:	0019      	movs	r1, r3
 80037ee:	2000      	movs	r0, #0
 80037f0:	f000 fbf5 	bl	8003fde <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Nad");
 80037f4:	4b14      	ldr	r3, [pc, #80]	; (8003848 <main+0xac>)
 80037f6:	0018      	movs	r0, r3
 80037f8:	f000 fc38 	bl	800406c <nRF24_SetTXAddress>
  nRF24_RX_Mode();
 80037fc:	f000 f9a0 	bl	8003b40 <nRF24_RX_Mode>


  uint32_t Timer = HAL_GetTick();
 8003800:	f001 f8f8 	bl	80049f4 <HAL_GetTick>
 8003804:	0003      	movs	r3, r0
 8003806:	607b      	str	r3, [r7, #4]
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8003808:	4b10      	ldr	r3, [pc, #64]	; (800384c <main+0xb0>)
 800380a:	2100      	movs	r1, #0
 800380c:	0018      	movs	r0, r3
 800380e:	f001 fcd9 	bl	80051c4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)&HeartBeatValue, 2);
 8003812:	490f      	ldr	r1, [pc, #60]	; (8003850 <main+0xb4>)
 8003814:	4b0d      	ldr	r3, [pc, #52]	; (800384c <main+0xb0>)
 8003816:	2202      	movs	r2, #2
 8003818:	0018      	movs	r0, r3
 800381a:	f001 fa8d 	bl	8004d38 <HAL_ADC_Start_DMA>

  while (1)
  {
	  printf("Heart Beat =  %d\n", HeartBeatValue);
 800381e:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <main+0xb4>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <main+0xb8>)
 8003824:	0011      	movs	r1, r2
 8003826:	0018      	movs	r0, r3
 8003828:	f008 fa06 	bl	800bc38 <iprintf>
	  HAL_Delay(100);
 800382c:	2064      	movs	r0, #100	; 0x64
 800382e:	f001 f8eb 	bl	8004a08 <HAL_Delay>
	  printf("Heart Beat =  %d\n", HeartBeatValue);
 8003832:	e7f4      	b.n	800381e <main+0x82>
 8003834:	20000588 	.word	0x20000588
 8003838:	200002f0 	.word	0x200002f0
 800383c:	20000548 	.word	0x20000548
 8003840:	200004ec 	.word	0x200004ec
 8003844:	0800eb08 	.word	0x0800eb08
 8003848:	0800eb0c 	.word	0x0800eb0c
 800384c:	200001f8 	.word	0x200001f8
 8003850:	200004e0 	.word	0x200004e0
 8003854:	0800eb10 	.word	0x0800eb10

08003858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b09d      	sub	sp, #116	; 0x74
 800385c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800385e:	2438      	movs	r4, #56	; 0x38
 8003860:	193b      	adds	r3, r7, r4
 8003862:	0018      	movs	r0, r3
 8003864:	2338      	movs	r3, #56	; 0x38
 8003866:	001a      	movs	r2, r3
 8003868:	2100      	movs	r1, #0
 800386a:	f008 fb67 	bl	800bf3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800386e:	2324      	movs	r3, #36	; 0x24
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	0018      	movs	r0, r3
 8003874:	2314      	movs	r3, #20
 8003876:	001a      	movs	r2, r3
 8003878:	2100      	movs	r1, #0
 800387a:	f008 fb5f 	bl	800bf3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800387e:	003b      	movs	r3, r7
 8003880:	0018      	movs	r0, r3
 8003882:	2324      	movs	r3, #36	; 0x24
 8003884:	001a      	movs	r2, r3
 8003886:	2100      	movs	r1, #0
 8003888:	f008 fb58 	bl	800bf3c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800388c:	4b2f      	ldr	r3, [pc, #188]	; (800394c <SystemClock_Config+0xf4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2f      	ldr	r2, [pc, #188]	; (8003950 <SystemClock_Config+0xf8>)
 8003892:	401a      	ands	r2, r3
 8003894:	4b2d      	ldr	r3, [pc, #180]	; (800394c <SystemClock_Config+0xf4>)
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	0109      	lsls	r1, r1, #4
 800389a:	430a      	orrs	r2, r1
 800389c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800389e:	193b      	adds	r3, r7, r4
 80038a0:	2203      	movs	r2, #3
 80038a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80038a4:	193b      	adds	r3, r7, r4
 80038a6:	22a0      	movs	r2, #160	; 0xa0
 80038a8:	02d2      	lsls	r2, r2, #11
 80038aa:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038ac:	0021      	movs	r1, r4
 80038ae:	187b      	adds	r3, r7, r1
 80038b0:	2201      	movs	r2, #1
 80038b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038b4:	187b      	adds	r3, r7, r1
 80038b6:	2210      	movs	r2, #16
 80038b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038ba:	187b      	adds	r3, r7, r1
 80038bc:	2202      	movs	r2, #2
 80038be:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	2280      	movs	r2, #128	; 0x80
 80038c4:	0252      	lsls	r2, r2, #9
 80038c6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	22c0      	movs	r2, #192	; 0xc0
 80038cc:	0312      	lsls	r2, r2, #12
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80038d0:	187b      	adds	r3, r7, r1
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	03d2      	lsls	r2, r2, #15
 80038d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038d8:	187b      	adds	r3, r7, r1
 80038da:	0018      	movs	r0, r3
 80038dc:	f002 fff8 	bl	80068d0 <HAL_RCC_OscConfig>
 80038e0:	1e03      	subs	r3, r0, #0
 80038e2:	d001      	beq.n	80038e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80038e4:	f000 f836 	bl	8003954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038e8:	2124      	movs	r1, #36	; 0x24
 80038ea:	187b      	adds	r3, r7, r1
 80038ec:	220f      	movs	r2, #15
 80038ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038f0:	187b      	adds	r3, r7, r1
 80038f2:	2203      	movs	r2, #3
 80038f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038f6:	187b      	adds	r3, r7, r1
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003902:	187b      	adds	r3, r7, r1
 8003904:	2200      	movs	r2, #0
 8003906:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003908:	187b      	adds	r3, r7, r1
 800390a:	2101      	movs	r1, #1
 800390c:	0018      	movs	r0, r3
 800390e:	f003 fba3 	bl	8007058 <HAL_RCC_ClockConfig>
 8003912:	1e03      	subs	r3, r0, #0
 8003914:	d001      	beq.n	800391a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003916:	f000 f81d 	bl	8003954 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800391a:	003b      	movs	r3, r7
 800391c:	220b      	movs	r2, #11
 800391e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003920:	003b      	movs	r3, r7
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003926:	003b      	movs	r3, r7
 8003928:	2200      	movs	r2, #0
 800392a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800392c:	003b      	movs	r3, r7
 800392e:	2200      	movs	r2, #0
 8003930:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003932:	003b      	movs	r3, r7
 8003934:	0018      	movs	r0, r3
 8003936:	f003 fdb3 	bl	80074a0 <HAL_RCCEx_PeriphCLKConfig>
 800393a:	1e03      	subs	r3, r0, #0
 800393c:	d001      	beq.n	8003942 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800393e:	f000 f809 	bl	8003954 <Error_Handler>
  }
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b01d      	add	sp, #116	; 0x74
 8003948:	bd90      	pop	{r4, r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	40007000 	.word	0x40007000
 8003950:	ffffe7ff 	.word	0xffffe7ff

08003954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003958:	b672      	cpsid	i
}
 800395a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800395c:	e7fe      	b.n	800395c <Error_Handler+0x8>

0800395e <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	0002      	movs	r2, r0
 8003966:	1dfb      	adds	r3, r7, #7
 8003968:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800396a:	2001      	movs	r0, #1
 800396c:	f001 f84c 	bl	8004a08 <HAL_Delay>
}
 8003970:	46c0      	nop			; (mov r8, r8)
 8003972:	46bd      	mov	sp, r7
 8003974:	b002      	add	sp, #8
 8003976:	bd80      	pop	{r7, pc}

08003978 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	000a      	movs	r2, r1
 8003982:	1cfb      	adds	r3, r7, #3
 8003984:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8003986:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <nRF24_SendSpi+0x2c>)
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	1cfb      	adds	r3, r7, #3
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b29a      	uxth	r2, r3
 8003990:	23fa      	movs	r3, #250	; 0xfa
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	f003 ffa5 	bl	80078e4 <HAL_SPI_Transmit>
}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	b002      	add	sp, #8
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	200004e4 	.word	0x200004e4

080039a8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	000a      	movs	r2, r1
 80039b2:	1cfb      	adds	r3, r7, #3
 80039b4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 80039b6:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <nRF24_ReadSpi+0x2c>)
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	1cfb      	adds	r3, r7, #3
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	23fa      	movs	r3, #250	; 0xfa
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	f004 f8eb 	bl	8007ba0 <HAL_SPI_Receive>
}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b002      	add	sp, #8
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	200004e4 	.word	0x200004e4

080039d8 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 80039d8:	b590      	push	{r4, r7, lr}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	0002      	movs	r2, r0
 80039e0:	1dfb      	adds	r3, r7, #7
 80039e2:	701a      	strb	r2, [r3, #0]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 80039e4:	1dfb      	adds	r3, r7, #7
 80039e6:	781a      	ldrb	r2, [r3, #0]
 80039e8:	1dfb      	adds	r3, r7, #7
 80039ea:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <nRF24_ReadRegister+0x50>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	2140      	movs	r1, #64	; 0x40
 80039f2:	0018      	movs	r0, r3
 80039f4:	f002 f91a 	bl	8005c2c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 80039f8:	1dfb      	adds	r3, r7, #7
 80039fa:	2101      	movs	r1, #1
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7ff ffbb 	bl	8003978 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8003a02:	240f      	movs	r4, #15
 8003a04:	193b      	adds	r3, r7, r4
 8003a06:	2101      	movs	r1, #1
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7ff ffcd 	bl	80039a8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <nRF24_ReadRegister+0x50>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	2140      	movs	r1, #64	; 0x40
 8003a14:	0018      	movs	r0, r3
 8003a16:	f002 f909 	bl	8005c2c <HAL_GPIO_WritePin>

	return result;
 8003a1a:	193b      	adds	r3, r7, r4
 8003a1c:	781b      	ldrb	r3, [r3, #0]
}
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b005      	add	sp, #20
 8003a24:	bd90      	pop	{r4, r7, pc}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	50000800 	.word	0x50000800

08003a2c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6039      	str	r1, [r7, #0]
 8003a34:	0011      	movs	r1, r2
 8003a36:	1dfb      	adds	r3, r7, #7
 8003a38:	1c02      	adds	r2, r0, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	1dbb      	adds	r3, r7, #6
 8003a3e:	1c0a      	adds	r2, r1, #0
 8003a40:	701a      	strb	r2, [r3, #0]
	reg = NRF24_CMD_R_REGISTER | reg;
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	781a      	ldrb	r2, [r3, #0]
 8003a46:	1dfb      	adds	r3, r7, #7
 8003a48:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <nRF24_ReadRegisters+0x58>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2140      	movs	r1, #64	; 0x40
 8003a50:	0018      	movs	r0, r3
 8003a52:	f002 f8eb 	bl	8005c2c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8003a56:	1dfb      	adds	r3, r7, #7
 8003a58:	2101      	movs	r1, #1
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7ff ff8c 	bl	8003978 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8003a60:	1dbb      	adds	r3, r7, #6
 8003a62:	781a      	ldrb	r2, [r3, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	0011      	movs	r1, r2
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7ff ff9d 	bl	80039a8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8003a6e:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <nRF24_ReadRegisters+0x58>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	2140      	movs	r1, #64	; 0x40
 8003a74:	0018      	movs	r0, r3
 8003a76:	f002 f8d9 	bl	8005c2c <HAL_GPIO_WritePin>
}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b002      	add	sp, #8
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	50000800 	.word	0x50000800

08003a88 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	0002      	movs	r2, r0
 8003a90:	1dfb      	adds	r3, r7, #7
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	1dbb      	adds	r3, r7, #6
 8003a96:	1c0a      	adds	r2, r1, #0
 8003a98:	701a      	strb	r2, [r3, #0]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8003a9a:	1dfb      	adds	r3, r7, #7
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	240c      	movs	r4, #12
 8003aa6:	193b      	adds	r3, r7, r4
 8003aa8:	701a      	strb	r2, [r3, #0]
	tmp[1] = val;
 8003aaa:	193b      	adds	r3, r7, r4
 8003aac:	1dba      	adds	r2, r7, #6
 8003aae:	7812      	ldrb	r2, [r2, #0]
 8003ab0:	705a      	strb	r2, [r3, #1]

	NRF24_CSN_LOW;
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <nRF24_WriteRegister+0x54>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2140      	movs	r1, #64	; 0x40
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f002 f8b7 	bl	8005c2c <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8003abe:	193b      	adds	r3, r7, r4
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f7ff ff58 	bl	8003978 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <nRF24_WriteRegister+0x54>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	2140      	movs	r1, #64	; 0x40
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f002 f8ac 	bl	8005c2c <HAL_GPIO_WritePin>
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b005      	add	sp, #20
 8003ada:	bd90      	pop	{r4, r7, pc}
 8003adc:	50000800 	.word	0x50000800

08003ae0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6039      	str	r1, [r7, #0]
 8003ae8:	0011      	movs	r1, r2
 8003aea:	1dfb      	adds	r3, r7, #7
 8003aec:	1c02      	adds	r2, r0, #0
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	1dbb      	adds	r3, r7, #6
 8003af2:	1c0a      	adds	r2, r1, #0
 8003af4:	701a      	strb	r2, [r3, #0]
	reg = NRF24_CMD_W_REGISTER | reg;
 8003af6:	1dfb      	adds	r3, r7, #7
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2220      	movs	r2, #32
 8003afc:	4313      	orrs	r3, r2
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	1dfb      	adds	r3, r7, #7
 8003b02:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8003b04:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <nRF24_WriteRegisters+0x5c>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	2140      	movs	r1, #64	; 0x40
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f002 f88e 	bl	8005c2c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8003b10:	1dfb      	adds	r3, r7, #7
 8003b12:	2101      	movs	r1, #1
 8003b14:	0018      	movs	r0, r3
 8003b16:	f7ff ff2f 	bl	8003978 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8003b1a:	1dbb      	adds	r3, r7, #6
 8003b1c:	781a      	ldrb	r2, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	0011      	movs	r1, r2
 8003b22:	0018      	movs	r0, r3
 8003b24:	f7ff ff28 	bl	8003978 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <nRF24_WriteRegisters+0x5c>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	2140      	movs	r1, #64	; 0x40
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f002 f87c 	bl	8005c2c <HAL_GPIO_WritePin>
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b002      	add	sp, #8
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	50000800 	.word	0x50000800

08003b40 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8003b46:	1dfc      	adds	r4, r7, #7
 8003b48:	f000 f830 	bl	8003bac <nRF24_ReadConfig>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	7023      	strb	r3, [r4, #0]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8003b50:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <nRF24_RX_Mode+0x64>)
 8003b52:	0019      	movs	r1, r3
 8003b54:	2000      	movs	r0, #0
 8003b56:	f000 fa42 	bl	8003fde <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8003b5a:	1dfb      	adds	r3, r7, #7
 8003b5c:	1dfa      	adds	r2, r7, #7
 8003b5e:	7812      	ldrb	r2, [r2, #0]
 8003b60:	2102      	movs	r1, #2
 8003b62:	430a      	orrs	r2, r1
 8003b64:	701a      	strb	r2, [r3, #0]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8003b66:	1dfb      	adds	r3, r7, #7
 8003b68:	1dfa      	adds	r2, r7, #7
 8003b6a:	7812      	ldrb	r2, [r2, #0]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 8003b72:	1dfb      	adds	r3, r7, #7
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f000 f821 	bl	8003bbe <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8003b7c:	2070      	movs	r0, #112	; 0x70
 8003b7e:	f000 f895 	bl	8003cac <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8003b82:	f000 f8a3 	bl	8003ccc <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8003b86:	f000 f8bf 	bl	8003d08 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8003b8a:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <nRF24_RX_Mode+0x68>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	2180      	movs	r1, #128	; 0x80
 8003b90:	0018      	movs	r0, r3
 8003b92:	f002 f84b 	bl	8005c2c <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8003b96:	2001      	movs	r0, #1
 8003b98:	f7ff fee1 	bl	800395e <nRF24_Delay>
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b003      	add	sp, #12
 8003ba2:	bd90      	pop	{r4, r7, pc}
 8003ba4:	200004e8 	.word	0x200004e8
 8003ba8:	50000800 	.word	0x50000800

08003bac <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	f7ff ff11 	bl	80039d8 <nRF24_ReadRegister>
 8003bb6:	0003      	movs	r3, r0
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	0002      	movs	r2, r0
 8003bc6:	1dfb      	adds	r3, r7, #7
 8003bc8:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8003bca:	1dfb      	adds	r3, r7, #7
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	0019      	movs	r1, r3
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	f7ff ff59 	bl	8003a88 <nRF24_WriteRegister>
}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b002      	add	sp, #8
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8003bde:	b5b0      	push	{r4, r5, r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	0002      	movs	r2, r0
 8003be6:	1dfb      	adds	r3, r7, #7
 8003be8:	701a      	strb	r2, [r3, #0]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8003bea:	250f      	movs	r5, #15
 8003bec:	197c      	adds	r4, r7, r5
 8003bee:	2006      	movs	r0, #6
 8003bf0:	f7ff fef2 	bl	80039d8 <nRF24_ReadRegister>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	7023      	strb	r3, [r4, #0]
	rf_setup &= 0xF8; // Clear PWR bits
 8003bf8:	0028      	movs	r0, r5
 8003bfa:	183b      	adds	r3, r7, r0
 8003bfc:	183a      	adds	r2, r7, r0
 8003bfe:	7812      	ldrb	r2, [r2, #0]
 8003c00:	2107      	movs	r1, #7
 8003c02:	438a      	bics	r2, r1
 8003c04:	701a      	strb	r2, [r3, #0]
	rf_setup |= (lev<<1);
 8003c06:	1dfb      	adds	r3, r7, #7
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	b25a      	sxtb	r2, r3
 8003c0e:	183b      	adds	r3, r7, r0
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	b25b      	sxtb	r3, r3
 8003c14:	4313      	orrs	r3, r2
 8003c16:	b25a      	sxtb	r2, r3
 8003c18:	183b      	adds	r3, r7, r0
 8003c1a:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8003c1c:	183b      	adds	r3, r7, r0
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	0019      	movs	r1, r3
 8003c22:	2006      	movs	r0, #6
 8003c24:	f7ff ff30 	bl	8003a88 <nRF24_WriteRegister>
}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b004      	add	sp, #16
 8003c2e:	bdb0      	pop	{r4, r5, r7, pc}

08003c30 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8003c30:	b5b0      	push	{r4, r5, r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	0002      	movs	r2, r0
 8003c38:	1dfb      	adds	r3, r7, #7
 8003c3a:	701a      	strb	r2, [r3, #0]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8003c3c:	250f      	movs	r5, #15
 8003c3e:	197c      	adds	r4, r7, r5
 8003c40:	2006      	movs	r0, #6
 8003c42:	f7ff fec9 	bl	80039d8 <nRF24_ReadRegister>
 8003c46:	0003      	movs	r3, r0
 8003c48:	7023      	strb	r3, [r4, #0]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8003c4a:	0028      	movs	r0, r5
 8003c4c:	183b      	adds	r3, r7, r0
 8003c4e:	183a      	adds	r2, r7, r0
 8003c50:	7812      	ldrb	r2, [r2, #0]
 8003c52:	2128      	movs	r1, #40	; 0x28
 8003c54:	438a      	bics	r2, r1
 8003c56:	701a      	strb	r2, [r3, #0]
	if(dr == NRF24_RF_DR_250KBPS)
 8003c58:	1dfb      	adds	r3, r7, #7
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d106      	bne.n	8003c6e <nRF24_SetDataRate+0x3e>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8003c60:	183b      	adds	r3, r7, r0
 8003c62:	183a      	adds	r2, r7, r0
 8003c64:	7812      	ldrb	r2, [r2, #0]
 8003c66:	2120      	movs	r1, #32
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	701a      	strb	r2, [r3, #0]
 8003c6c:	e00a      	b.n	8003c84 <nRF24_SetDataRate+0x54>
	else if(dr == NRF24_RF_DR_2MBPS)
 8003c6e:	1dfb      	adds	r3, r7, #7
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d106      	bne.n	8003c84 <nRF24_SetDataRate+0x54>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8003c76:	220f      	movs	r2, #15
 8003c78:	18bb      	adds	r3, r7, r2
 8003c7a:	18ba      	adds	r2, r7, r2
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	2108      	movs	r1, #8
 8003c80:	430a      	orrs	r2, r1
 8003c82:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8003c84:	230f      	movs	r3, #15
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	2006      	movs	r0, #6
 8003c8e:	f7ff fefb 	bl	8003a88 <nRF24_WriteRegister>
}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bdb0      	pop	{r4, r5, r7, pc}

08003c9a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8003c9e:	2007      	movs	r0, #7
 8003ca0:	f7ff fe9a 	bl	80039d8 <nRF24_ReadRegister>
 8003ca4:	0003      	movs	r3, r0
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	0002      	movs	r2, r0
 8003cb4:	1dfb      	adds	r3, r7, #7
 8003cb6:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8003cb8:	1dfb      	adds	r3, r7, #7
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	2007      	movs	r0, #7
 8003cc0:	f7ff fee2 	bl	8003a88 <nRF24_WriteRegister>
}
 8003cc4:	46c0      	nop			; (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b002      	add	sp, #8
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8003cd2:	1dfb      	adds	r3, r7, #7
 8003cd4:	22e2      	movs	r2, #226	; 0xe2
 8003cd6:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <nRF24_FlushRX+0x38>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2140      	movs	r1, #64	; 0x40
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f001 ffa4 	bl	8005c2c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8003ce4:	1dfb      	adds	r3, r7, #7
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7ff fe45 	bl	8003978 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <nRF24_FlushRX+0x38>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	2140      	movs	r1, #64	; 0x40
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f001 ff99 	bl	8005c2c <HAL_GPIO_WritePin>
}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b002      	add	sp, #8
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	50000800 	.word	0x50000800

08003d08 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8003d0e:	1dfb      	adds	r3, r7, #7
 8003d10:	22e1      	movs	r2, #225	; 0xe1
 8003d12:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8003d14:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <nRF24_FlushTX+0x38>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	2140      	movs	r1, #64	; 0x40
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f001 ff86 	bl	8005c2c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8003d20:	1dfb      	adds	r3, r7, #7
 8003d22:	2101      	movs	r1, #1
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7ff fe27 	bl	8003978 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <nRF24_FlushTX+0x38>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	2140      	movs	r1, #64	; 0x40
 8003d30:	0018      	movs	r0, r3
 8003d32:	f001 ff7b 	bl	8005c2c <HAL_GPIO_WritePin>
}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b002      	add	sp, #8
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	50000800 	.word	0x50000800

08003d44 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8003d44:	b5b0      	push	{r4, r5, r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	1dfb      	adds	r3, r7, #7
 8003d4e:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8003d50:	250f      	movs	r5, #15
 8003d52:	197c      	adds	r4, r7, r5
 8003d54:	f7ff ff2a 	bl	8003bac <nRF24_ReadConfig>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	7023      	strb	r3, [r4, #0]

	if(onoff)
 8003d5c:	1dfb      	adds	r3, r7, #7
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d006      	beq.n	8003d72 <nRF24_EnableCRC+0x2e>
		config |= (1<<NRF24_EN_CRC);
 8003d64:	197b      	adds	r3, r7, r5
 8003d66:	197a      	adds	r2, r7, r5
 8003d68:	7812      	ldrb	r2, [r2, #0]
 8003d6a:	2108      	movs	r1, #8
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	e006      	b.n	8003d80 <nRF24_EnableCRC+0x3c>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8003d72:	220f      	movs	r2, #15
 8003d74:	18bb      	adds	r3, r7, r2
 8003d76:	18ba      	adds	r2, r7, r2
 8003d78:	7812      	ldrb	r2, [r2, #0]
 8003d7a:	2108      	movs	r1, #8
 8003d7c:	438a      	bics	r2, r1
 8003d7e:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 8003d80:	230f      	movs	r3, #15
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7ff ff19 	bl	8003bbe <nRF24_WriteConfig>
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b004      	add	sp, #16
 8003d92:	bdb0      	pop	{r4, r5, r7, pc}

08003d94 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8003d94:	b5b0      	push	{r4, r5, r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	1dfb      	adds	r3, r7, #7
 8003d9e:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8003da0:	250f      	movs	r5, #15
 8003da2:	197c      	adds	r4, r7, r5
 8003da4:	f7ff ff02 	bl	8003bac <nRF24_ReadConfig>
 8003da8:	0003      	movs	r3, r0
 8003daa:	7023      	strb	r3, [r4, #0]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8003dac:	1dfb      	adds	r3, r7, #7
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d106      	bne.n	8003dc2 <nRF24_SetCRCLength+0x2e>
		config |= (1<<NRF24_CRCO);
 8003db4:	197b      	adds	r3, r7, r5
 8003db6:	197a      	adds	r2, r7, r5
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	2104      	movs	r1, #4
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	701a      	strb	r2, [r3, #0]
 8003dc0:	e006      	b.n	8003dd0 <nRF24_SetCRCLength+0x3c>
	else
		config &= ~(1<<NRF24_CRCO);
 8003dc2:	220f      	movs	r2, #15
 8003dc4:	18bb      	adds	r3, r7, r2
 8003dc6:	18ba      	adds	r2, r7, r2
 8003dc8:	7812      	ldrb	r2, [r2, #0]
 8003dca:	2104      	movs	r1, #4
 8003dcc:	438a      	bics	r2, r1
 8003dce:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 8003dd0:	230f      	movs	r3, #15
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7ff fef1 	bl	8003bbe <nRF24_WriteConfig>
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b004      	add	sp, #16
 8003de2:	bdb0      	pop	{r4, r5, r7, pc}

08003de4 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	0002      	movs	r2, r0
 8003dec:	1dfb      	adds	r3, r7, #7
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	1dbb      	adds	r3, r7, #6
 8003df2:	1c0a      	adds	r2, r1, #0
 8003df4:	701a      	strb	r2, [r3, #0]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8003df6:	1dfb      	adds	r3, r7, #7
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	b25a      	sxtb	r2, r3
 8003dfe:	1dbb      	adds	r3, r7, #6
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	b25b      	sxtb	r3, r3
 8003e04:	210f      	movs	r1, #15
 8003e06:	400b      	ands	r3, r1
 8003e08:	b25b      	sxtb	r3, r3
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	b25b      	sxtb	r3, r3
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	0019      	movs	r1, r3
 8003e12:	2004      	movs	r0, #4
 8003e14:	f7ff fe38 	bl	8003a88 <nRF24_WriteRegister>
}
 8003e18:	46c0      	nop			; (mov r8, r8)
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b002      	add	sp, #8
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	0002      	movs	r2, r0
 8003e28:	1dfb      	adds	r3, r7, #7
 8003e2a:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8003e2c:	1dfb      	adds	r3, r7, #7
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	227f      	movs	r2, #127	; 0x7f
 8003e32:	4013      	ands	r3, r2
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	0019      	movs	r1, r3
 8003e38:	2005      	movs	r0, #5
 8003e3a:	f7ff fe25 	bl	8003a88 <nRF24_WriteRegister>
}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b002      	add	sp, #8
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	1dfb      	adds	r3, r7, #7
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	1dbb      	adds	r3, r7, #6
 8003e54:	1c0a      	adds	r2, r1, #0
 8003e56:	701a      	strb	r2, [r3, #0]
	if(pipe > 5)
 8003e58:	1dfb      	adds	r3, r7, #7
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b05      	cmp	r3, #5
 8003e5e:	d902      	bls.n	8003e66 <nRF24_SetPayloadSize+0x20>
		pipe = 5; // Block too high pipe number
 8003e60:	1dfb      	adds	r3, r7, #7
 8003e62:	2205      	movs	r2, #5
 8003e64:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8003e66:	1dfb      	adds	r3, r7, #7
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	3311      	adds	r3, #17
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	1dbb      	adds	r3, r7, #6
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	213f      	movs	r1, #63	; 0x3f
 8003e74:	400b      	ands	r3, r1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	0019      	movs	r1, r3
 8003e7a:	0010      	movs	r0, r2
 8003e7c:	f7ff fe04 	bl	8003a88 <nRF24_WriteRegister>
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b002      	add	sp, #8
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8003e88:	b5b0      	push	{r4, r5, r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	0002      	movs	r2, r0
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	1dbb      	adds	r3, r7, #6
 8003e96:	1c0a      	adds	r2, r1, #0
 8003e98:	701a      	strb	r2, [r3, #0]
	if(pipe > 5)
 8003e9a:	1dfb      	adds	r3, r7, #7
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d902      	bls.n	8003ea8 <nRF24_EnablePipe+0x20>
		pipe = 5; // Block too high pipe number
 8003ea2:	1dfb      	adds	r3, r7, #7
 8003ea4:	2205      	movs	r2, #5
 8003ea6:	701a      	strb	r2, [r3, #0]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8003ea8:	250f      	movs	r5, #15
 8003eaa:	197c      	adds	r4, r7, r5
 8003eac:	2002      	movs	r0, #2
 8003eae:	f7ff fd93 	bl	80039d8 <nRF24_ReadRegister>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	7023      	strb	r3, [r4, #0]
	if(onoff == 1)
 8003eb6:	1dbb      	adds	r3, r7, #6
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d10d      	bne.n	8003eda <nRF24_EnablePipe+0x52>
		enable_pipe |= (1<<pipe);
 8003ebe:	1dfb      	adds	r3, r7, #7
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	0013      	movs	r3, r2
 8003ec8:	b25a      	sxtb	r2, r3
 8003eca:	197b      	adds	r3, r7, r5
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	b25b      	sxtb	r3, r3
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	b25a      	sxtb	r2, r3
 8003ed4:	197b      	adds	r3, r7, r5
 8003ed6:	701a      	strb	r2, [r3, #0]
 8003ed8:	e00f      	b.n	8003efa <nRF24_EnablePipe+0x72>
	else
		enable_pipe &= ~(1<<pipe);
 8003eda:	1dfb      	adds	r3, r7, #7
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	0013      	movs	r3, r2
 8003ee4:	b25b      	sxtb	r3, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	b25b      	sxtb	r3, r3
 8003eea:	210f      	movs	r1, #15
 8003eec:	187a      	adds	r2, r7, r1
 8003eee:	7812      	ldrb	r2, [r2, #0]
 8003ef0:	b252      	sxtb	r2, r2
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	b25a      	sxtb	r2, r3
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8003efa:	230f      	movs	r3, #15
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	0019      	movs	r1, r3
 8003f02:	2002      	movs	r0, #2
 8003f04:	f7ff fdc0 	bl	8003a88 <nRF24_WriteRegister>
}
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b004      	add	sp, #16
 8003f0e:	bdb0      	pop	{r4, r5, r7, pc}

08003f10 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8003f10:	b5b0      	push	{r4, r5, r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	0002      	movs	r2, r0
 8003f18:	1dfb      	adds	r3, r7, #7
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	1dbb      	adds	r3, r7, #6
 8003f1e:	1c0a      	adds	r2, r1, #0
 8003f20:	701a      	strb	r2, [r3, #0]
	if(pipe > 5)
 8003f22:	1dfb      	adds	r3, r7, #7
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b05      	cmp	r3, #5
 8003f28:	d902      	bls.n	8003f30 <nRF24_AutoACK+0x20>
		pipe = 5; // Block too high pipe number
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	2205      	movs	r2, #5
 8003f2e:	701a      	strb	r2, [r3, #0]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8003f30:	250f      	movs	r5, #15
 8003f32:	197c      	adds	r4, r7, r5
 8003f34:	2001      	movs	r0, #1
 8003f36:	f7ff fd4f 	bl	80039d8 <nRF24_ReadRegister>
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	7023      	strb	r3, [r4, #0]
	if(onoff == 1)
 8003f3e:	1dbb      	adds	r3, r7, #6
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d10d      	bne.n	8003f62 <nRF24_AutoACK+0x52>
		enaa |= (1<<pipe);
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	0013      	movs	r3, r2
 8003f50:	b25a      	sxtb	r2, r3
 8003f52:	197b      	adds	r3, r7, r5
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b25b      	sxtb	r3, r3
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	b25a      	sxtb	r2, r3
 8003f5c:	197b      	adds	r3, r7, r5
 8003f5e:	701a      	strb	r2, [r3, #0]
 8003f60:	e00f      	b.n	8003f82 <nRF24_AutoACK+0x72>
	else
		enaa &= ~(1<<pipe);
 8003f62:	1dfb      	adds	r3, r7, #7
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2201      	movs	r2, #1
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	0013      	movs	r3, r2
 8003f6c:	b25b      	sxtb	r3, r3
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	b25b      	sxtb	r3, r3
 8003f72:	210f      	movs	r1, #15
 8003f74:	187a      	adds	r2, r7, r1
 8003f76:	7812      	ldrb	r2, [r2, #0]
 8003f78:	b252      	sxtb	r2, r2
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	b25a      	sxtb	r2, r3
 8003f7e:	187b      	adds	r3, r7, r1
 8003f80:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8003f82:	230f      	movs	r3, #15
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	0019      	movs	r1, r3
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f7ff fd7c 	bl	8003a88 <nRF24_WriteRegister>
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b004      	add	sp, #16
 8003f96:	bdb0      	pop	{r4, r5, r7, pc}

08003f98 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	0002      	movs	r2, r0
 8003fa0:	1dfb      	adds	r3, r7, #7
 8003fa2:	701a      	strb	r2, [r3, #0]
	if(size > 5)
 8003fa4:	1dfb      	adds	r3, r7, #7
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b05      	cmp	r3, #5
 8003faa:	d902      	bls.n	8003fb2 <nRF24_SetAddressWidth+0x1a>
		size = 5; // Maximum are 5 bytes
 8003fac:	1dfb      	adds	r3, r7, #7
 8003fae:	2205      	movs	r2, #5
 8003fb0:	701a      	strb	r2, [r3, #0]
	if(size < 3)
 8003fb2:	1dfb      	adds	r3, r7, #7
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d802      	bhi.n	8003fc0 <nRF24_SetAddressWidth+0x28>
		size = 3; // Minimum are 3 bytes
 8003fba:	1dfb      	adds	r3, r7, #7
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8003fc0:	1dfb      	adds	r3, r7, #7
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	3b02      	subs	r3, #2
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2203      	movs	r2, #3
 8003fca:	4013      	ands	r3, r2
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	0019      	movs	r1, r3
 8003fd0:	2003      	movs	r0, #3
 8003fd2:	f7ff fd59 	bl	8003a88 <nRF24_WriteRegister>
}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b002      	add	sp, #8
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	6039      	str	r1, [r7, #0]
 8003fe8:	1dfb      	adds	r3, r7, #7
 8003fea:	701a      	strb	r2, [r3, #0]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8003fec:	1dfb      	adds	r3, r7, #7
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <nRF24_SetRXAddress+0x1e>
 8003ff4:	1dfb      	adds	r3, r7, #7
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d126      	bne.n	800404a <nRF24_SetRXAddress+0x6c>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8003ffc:	230f      	movs	r3, #15
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	e011      	b.n	800402a <nRF24_SetRXAddress+0x4c>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8004006:	200f      	movs	r0, #15
 8004008:	183b      	adds	r3, r7, r0
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	18d2      	adds	r2, r2, r3
 8004010:	183b      	adds	r3, r7, r0
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2102      	movs	r1, #2
 8004016:	1acb      	subs	r3, r1, r3
 8004018:	7811      	ldrb	r1, [r2, #0]
 800401a:	220c      	movs	r2, #12
 800401c:	18ba      	adds	r2, r7, r2
 800401e:	54d1      	strb	r1, [r2, r3]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004020:	183b      	adds	r3, r7, r0
 8004022:	781a      	ldrb	r2, [r3, #0]
 8004024:	183b      	adds	r3, r7, r0
 8004026:	3201      	adds	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	230f      	movs	r3, #15
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b02      	cmp	r3, #2
 8004032:	d9e8      	bls.n	8004006 <nRF24_SetRXAddress+0x28>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8004034:	1dfb      	adds	r3, r7, #7
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	330a      	adds	r3, #10
 800403a:	b2db      	uxtb	r3, r3
 800403c:	220c      	movs	r2, #12
 800403e:	18b9      	adds	r1, r7, r2
 8004040:	2203      	movs	r2, #3
 8004042:	0018      	movs	r0, r3
 8004044:	f7ff fd4c 	bl	8003ae0 <nRF24_WriteRegisters>
	{
 8004048:	e00b      	b.n	8004062 <nRF24_SetRXAddress+0x84>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 800404a:	1dfb      	adds	r3, r7, #7
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	330a      	adds	r3, #10
 8004050:	b2da      	uxtb	r2, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	3302      	adds	r3, #2
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	0019      	movs	r1, r3
 800405a:	0010      	movs	r0, r2
 800405c:	f7ff fd14 	bl	8003a88 <nRF24_WriteRegister>
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	46bd      	mov	sp, r7
 8004066:	b004      	add	sp, #16
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8004074:	230c      	movs	r3, #12
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	2203      	movs	r2, #3
 800407a:	0019      	movs	r1, r3
 800407c:	200a      	movs	r0, #10
 800407e:	f7ff fcd5 	bl	8003a2c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004082:	230f      	movs	r3, #15
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	e010      	b.n	80040ae <nRF24_SetTXAddress+0x42>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 800408c:	200f      	movs	r0, #15
 800408e:	183b      	adds	r3, r7, r0
 8004090:	781a      	ldrb	r2, [r3, #0]
 8004092:	183b      	adds	r3, r7, r0
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2102      	movs	r1, #2
 8004098:	1acb      	subs	r3, r1, r3
 800409a:	210c      	movs	r1, #12
 800409c:	1879      	adds	r1, r7, r1
 800409e:	5c89      	ldrb	r1, [r1, r2]
 80040a0:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <nRF24_SetTXAddress+0xa4>)
 80040a2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80040a4:	183b      	adds	r3, r7, r0
 80040a6:	781a      	ldrb	r2, [r3, #0]
 80040a8:	183b      	adds	r3, r7, r0
 80040aa:	3201      	adds	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	220f      	movs	r2, #15
 80040b0:	18bb      	adds	r3, r7, r2
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d9e9      	bls.n	800408c <nRF24_SetTXAddress+0x20>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80040b8:	18bb      	adds	r3, r7, r2
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	e011      	b.n	80040e4 <nRF24_SetTXAddress+0x78>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80040c0:	200f      	movs	r0, #15
 80040c2:	183b      	adds	r3, r7, r0
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	18d2      	adds	r2, r2, r3
 80040ca:	183b      	adds	r3, r7, r0
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2102      	movs	r1, #2
 80040d0:	1acb      	subs	r3, r1, r3
 80040d2:	7811      	ldrb	r1, [r2, #0]
 80040d4:	220c      	movs	r2, #12
 80040d6:	18ba      	adds	r2, r7, r2
 80040d8:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80040da:	183b      	adds	r3, r7, r0
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	183b      	adds	r3, r7, r0
 80040e0:	3201      	adds	r2, #1
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	230f      	movs	r3, #15
 80040e6:	18fb      	adds	r3, r7, r3
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d9e8      	bls.n	80040c0 <nRF24_SetTXAddress+0x54>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80040ee:	240c      	movs	r4, #12
 80040f0:	193b      	adds	r3, r7, r4
 80040f2:	2203      	movs	r2, #3
 80040f4:	0019      	movs	r1, r3
 80040f6:	200a      	movs	r0, #10
 80040f8:	f7ff fcf2 	bl	8003ae0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80040fc:	193b      	adds	r3, r7, r4
 80040fe:	2203      	movs	r2, #3
 8004100:	0019      	movs	r1, r3
 8004102:	2010      	movs	r0, #16
 8004104:	f7ff fcec 	bl	8003ae0 <nRF24_WriteRegisters>

}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	b005      	add	sp, #20
 800410e:	bd90      	pop	{r4, r7, pc}
 8004110:	200004e8 	.word	0x200004e8

08004114 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 800411a:	1dfc      	adds	r4, r7, #7
 800411c:	f7ff fdbd 	bl	8003c9a <nRF24_ReadStatus>
 8004120:	0003      	movs	r3, r0
 8004122:	7023      	strb	r3, [r4, #0]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8004124:	1dfb      	adds	r3, r7, #7
 8004126:	1dfa      	adds	r2, r7, #7
 8004128:	7812      	ldrb	r2, [r2, #0]
 800412a:	2170      	movs	r1, #112	; 0x70
 800412c:	430a      	orrs	r2, r1
 800412e:	701a      	strb	r2, [r3, #0]
	nRF24_WriteStatus(status);
 8004130:	1dfb      	adds	r3, r7, #7
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	0018      	movs	r0, r3
 8004136:	f7ff fdb9 	bl	8003cac <nRF24_WriteStatus>
}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	46bd      	mov	sp, r7
 800413e:	b003      	add	sp, #12
 8004140:	bd90      	pop	{r4, r7, pc}

08004142 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8004142:	b5b0      	push	{r4, r5, r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	0002      	movs	r2, r0
 800414a:	1dfb      	adds	r3, r7, #7
 800414c:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 800414e:	250f      	movs	r5, #15
 8004150:	197c      	adds	r4, r7, r5
 8004152:	f7ff fd2b 	bl	8003bac <nRF24_ReadConfig>
 8004156:	0003      	movs	r3, r0
 8004158:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 800415a:	1dfb      	adds	r3, r7, #7
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <nRF24_EnableRXDataReadyIRQ+0x2e>
		config |= (1<<NRF24_RX_DR);
 8004162:	197b      	adds	r3, r7, r5
 8004164:	197a      	adds	r2, r7, r5
 8004166:	7812      	ldrb	r2, [r2, #0]
 8004168:	2140      	movs	r1, #64	; 0x40
 800416a:	430a      	orrs	r2, r1
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e006      	b.n	800417e <nRF24_EnableRXDataReadyIRQ+0x3c>
	else
		config &= ~(1<<NRF24_RX_DR);
 8004170:	220f      	movs	r2, #15
 8004172:	18bb      	adds	r3, r7, r2
 8004174:	18ba      	adds	r2, r7, r2
 8004176:	7812      	ldrb	r2, [r2, #0]
 8004178:	2140      	movs	r1, #64	; 0x40
 800417a:	438a      	bics	r2, r1
 800417c:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 800417e:	230f      	movs	r3, #15
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	0018      	movs	r0, r3
 8004186:	f7ff fd1a 	bl	8003bbe <nRF24_WriteConfig>
}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b004      	add	sp, #16
 8004190:	bdb0      	pop	{r4, r5, r7, pc}

08004192 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8004192:	b5b0      	push	{r4, r5, r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	0002      	movs	r2, r0
 800419a:	1dfb      	adds	r3, r7, #7
 800419c:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 800419e:	250f      	movs	r5, #15
 80041a0:	197c      	adds	r4, r7, r5
 80041a2:	f7ff fd03 	bl	8003bac <nRF24_ReadConfig>
 80041a6:	0003      	movs	r3, r0
 80041a8:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 80041aa:	1dfb      	adds	r3, r7, #7
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <nRF24_EnableTXDataSentIRQ+0x2e>
		config |= (1<<NRF24_TX_DS);
 80041b2:	197b      	adds	r3, r7, r5
 80041b4:	197a      	adds	r2, r7, r5
 80041b6:	7812      	ldrb	r2, [r2, #0]
 80041b8:	2120      	movs	r1, #32
 80041ba:	430a      	orrs	r2, r1
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	e006      	b.n	80041ce <nRF24_EnableTXDataSentIRQ+0x3c>
	else
		config &= ~(1<<NRF24_TX_DS);
 80041c0:	220f      	movs	r2, #15
 80041c2:	18bb      	adds	r3, r7, r2
 80041c4:	18ba      	adds	r2, r7, r2
 80041c6:	7812      	ldrb	r2, [r2, #0]
 80041c8:	2120      	movs	r1, #32
 80041ca:	438a      	bics	r2, r1
 80041cc:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 80041ce:	230f      	movs	r3, #15
 80041d0:	18fb      	adds	r3, r7, r3
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	0018      	movs	r0, r3
 80041d6:	f7ff fcf2 	bl	8003bbe <nRF24_WriteConfig>
}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	46bd      	mov	sp, r7
 80041de:	b004      	add	sp, #16
 80041e0:	bdb0      	pop	{r4, r5, r7, pc}

080041e2 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80041e2:	b5b0      	push	{r4, r5, r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	0002      	movs	r2, r0
 80041ea:	1dfb      	adds	r3, r7, #7
 80041ec:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 80041ee:	250f      	movs	r5, #15
 80041f0:	197c      	adds	r4, r7, r5
 80041f2:	f7ff fcdb 	bl	8003bac <nRF24_ReadConfig>
 80041f6:	0003      	movs	r3, r0
 80041f8:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 80041fa:	1dfb      	adds	r3, r7, #7
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <nRF24_EnableMaxRetransmitIRQ+0x2e>
		config |= (1<<NRF24_MAX_RT);
 8004202:	197b      	adds	r3, r7, r5
 8004204:	197a      	adds	r2, r7, r5
 8004206:	7812      	ldrb	r2, [r2, #0]
 8004208:	2110      	movs	r1, #16
 800420a:	430a      	orrs	r2, r1
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	e006      	b.n	800421e <nRF24_EnableMaxRetransmitIRQ+0x3c>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8004210:	220f      	movs	r2, #15
 8004212:	18bb      	adds	r3, r7, r2
 8004214:	18ba      	adds	r2, r7, r2
 8004216:	7812      	ldrb	r2, [r2, #0]
 8004218:	2110      	movs	r1, #16
 800421a:	438a      	bics	r2, r1
 800421c:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 800421e:	230f      	movs	r3, #15
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	0018      	movs	r0, r3
 8004226:	f7ff fcca 	bl	8003bbe <nRF24_WriteConfig>
}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	46bd      	mov	sp, r7
 800422e:	b004      	add	sp, #16
 8004230:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004234 <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 800423c:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <nRF24_Init+0xa4>)
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	601a      	str	r2, [r3, #0]

	NRF24_CE_LOW;
 8004242:	4b26      	ldr	r3, [pc, #152]	; (80042dc <nRF24_Init+0xa8>)
 8004244:	2200      	movs	r2, #0
 8004246:	2180      	movs	r1, #128	; 0x80
 8004248:	0018      	movs	r0, r3
 800424a:	f001 fcef 	bl	8005c2c <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 800424e:	4b23      	ldr	r3, [pc, #140]	; (80042dc <nRF24_Init+0xa8>)
 8004250:	2201      	movs	r2, #1
 8004252:	2140      	movs	r1, #64	; 0x40
 8004254:	0018      	movs	r0, r3
 8004256:	f001 fce9 	bl	8005c2c <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 800425a:	2005      	movs	r0, #5
 800425c:	f7ff fb7f 	bl	800395e <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8004260:	2003      	movs	r0, #3
 8004262:	f7ff fcbc 	bl	8003bde <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8004266:	2002      	movs	r0, #2
 8004268:	f7ff fce2 	bl	8003c30 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 800426c:	2001      	movs	r0, #1
 800426e:	f7ff fd69 	bl	8003d44 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8004272:	2000      	movs	r0, #0
 8004274:	f7ff fd8e 	bl	8003d94 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8004278:	2107      	movs	r1, #7
 800427a:	2004      	movs	r0, #4
 800427c:	f7ff fdb2 	bl	8003de4 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8004280:	2100      	movs	r1, #0
 8004282:	201c      	movs	r0, #28
 8004284:	f7ff fc00 	bl	8003a88 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8004288:	200a      	movs	r0, #10
 800428a:	f7ff fdc9 	bl	8003e20 <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 800428e:	2101      	movs	r1, #1
 8004290:	2000      	movs	r0, #0
 8004292:	f7ff fdd8 	bl	8003e46 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8004296:	2101      	movs	r1, #1
 8004298:	2000      	movs	r0, #0
 800429a:	f7ff fdf5 	bl	8003e88 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800429e:	2101      	movs	r1, #1
 80042a0:	2000      	movs	r0, #0
 80042a2:	f7ff fe35 	bl	8003f10 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80042a6:	2003      	movs	r0, #3
 80042a8:	f7ff fe76 	bl	8003f98 <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 80042ac:	2014      	movs	r0, #20
 80042ae:	f7ff fb56 	bl	800395e <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 80042b2:	2000      	movs	r0, #0
 80042b4:	f7ff ff45 	bl	8004142 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 80042b8:	2000      	movs	r0, #0
 80042ba:	f7ff ff6a 	bl	8004192 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80042be:	2000      	movs	r0, #0
 80042c0:	f7ff ff8f 	bl	80041e2 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 80042c4:	2014      	movs	r0, #20
 80042c6:	f7ff fb4a 	bl	800395e <nRF24_Delay>

	nRF24_ClearInterrupts();
 80042ca:	f7ff ff23 	bl	8004114 <nRF24_ClearInterrupts>
}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b002      	add	sp, #8
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	200004e4 	.word	0x200004e4
 80042dc:	50000800 	.word	0x50000800

080042e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80042e4:	4b17      	ldr	r3, [pc, #92]	; (8004344 <MX_SPI1_Init+0x64>)
 80042e6:	4a18      	ldr	r2, [pc, #96]	; (8004348 <MX_SPI1_Init+0x68>)
 80042e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80042ea:	4b16      	ldr	r3, [pc, #88]	; (8004344 <MX_SPI1_Init+0x64>)
 80042ec:	2282      	movs	r2, #130	; 0x82
 80042ee:	0052      	lsls	r2, r2, #1
 80042f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80042f2:	4b14      	ldr	r3, [pc, #80]	; (8004344 <MX_SPI1_Init+0x64>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80042f8:	4b12      	ldr	r3, [pc, #72]	; (8004344 <MX_SPI1_Init+0x64>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042fe:	4b11      	ldr	r3, [pc, #68]	; (8004344 <MX_SPI1_Init+0x64>)
 8004300:	2200      	movs	r2, #0
 8004302:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004304:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <MX_SPI1_Init+0x64>)
 8004306:	2200      	movs	r2, #0
 8004308:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800430a:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <MX_SPI1_Init+0x64>)
 800430c:	2200      	movs	r2, #0
 800430e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <MX_SPI1_Init+0x64>)
 8004312:	2218      	movs	r2, #24
 8004314:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <MX_SPI1_Init+0x64>)
 8004318:	2200      	movs	r2, #0
 800431a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <MX_SPI1_Init+0x64>)
 800431e:	2200      	movs	r2, #0
 8004320:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <MX_SPI1_Init+0x64>)
 8004324:	2200      	movs	r2, #0
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004328:	4b06      	ldr	r3, [pc, #24]	; (8004344 <MX_SPI1_Init+0x64>)
 800432a:	2207      	movs	r2, #7
 800432c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <MX_SPI1_Init+0x64>)
 8004330:	0018      	movs	r0, r3
 8004332:	f003 fa43 	bl	80077bc <HAL_SPI_Init>
 8004336:	1e03      	subs	r3, r0, #0
 8004338:	d001      	beq.n	800433e <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 800433a:	f7ff fb0b 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	200004ec 	.word	0x200004ec
 8004348:	40013000 	.word	0x40013000

0800434c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800434c:	b590      	push	{r4, r7, lr}
 800434e:	b08b      	sub	sp, #44	; 0x2c
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004354:	2414      	movs	r4, #20
 8004356:	193b      	adds	r3, r7, r4
 8004358:	0018      	movs	r0, r3
 800435a:	2314      	movs	r3, #20
 800435c:	001a      	movs	r2, r3
 800435e:	2100      	movs	r1, #0
 8004360:	f007 fdec 	bl	800bf3c <memset>
  if(spiHandle->Instance==SPI1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a28      	ldr	r2, [pc, #160]	; (800440c <HAL_SPI_MspInit+0xc0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d14a      	bne.n	8004404 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800436e:	4b28      	ldr	r3, [pc, #160]	; (8004410 <HAL_SPI_MspInit+0xc4>)
 8004370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004372:	4b27      	ldr	r3, [pc, #156]	; (8004410 <HAL_SPI_MspInit+0xc4>)
 8004374:	2180      	movs	r1, #128	; 0x80
 8004376:	0149      	lsls	r1, r1, #5
 8004378:	430a      	orrs	r2, r1
 800437a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800437c:	4b24      	ldr	r3, [pc, #144]	; (8004410 <HAL_SPI_MspInit+0xc4>)
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	4b23      	ldr	r3, [pc, #140]	; (8004410 <HAL_SPI_MspInit+0xc4>)
 8004382:	2101      	movs	r1, #1
 8004384:	430a      	orrs	r2, r1
 8004386:	62da      	str	r2, [r3, #44]	; 0x2c
 8004388:	4b21      	ldr	r3, [pc, #132]	; (8004410 <HAL_SPI_MspInit+0xc4>)
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	2201      	movs	r2, #1
 800438e:	4013      	ands	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004394:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <HAL_SPI_MspInit+0xc4>)
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <HAL_SPI_MspInit+0xc4>)
 800439a:	2102      	movs	r1, #2
 800439c:	430a      	orrs	r2, r1
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c
 80043a0:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <HAL_SPI_MspInit+0xc4>)
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	2202      	movs	r2, #2
 80043a6:	4013      	ands	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80043ac:	193b      	adds	r3, r7, r4
 80043ae:	22d0      	movs	r2, #208	; 0xd0
 80043b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b2:	193b      	adds	r3, r7, r4
 80043b4:	2202      	movs	r2, #2
 80043b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b8:	193b      	adds	r3, r7, r4
 80043ba:	2200      	movs	r2, #0
 80043bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043be:	193b      	adds	r3, r7, r4
 80043c0:	2203      	movs	r2, #3
 80043c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80043c4:	193b      	adds	r3, r7, r4
 80043c6:	2200      	movs	r2, #0
 80043c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ca:	193a      	adds	r2, r7, r4
 80043cc:	23a0      	movs	r3, #160	; 0xa0
 80043ce:	05db      	lsls	r3, r3, #23
 80043d0:	0011      	movs	r1, r2
 80043d2:	0018      	movs	r0, r3
 80043d4:	f001 fab4 	bl	8005940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80043d8:	0021      	movs	r1, r4
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	2208      	movs	r2, #8
 80043de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e0:	187b      	adds	r3, r7, r1
 80043e2:	2202      	movs	r2, #2
 80043e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e6:	187b      	adds	r3, r7, r1
 80043e8:	2200      	movs	r2, #0
 80043ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ec:	187b      	adds	r3, r7, r1
 80043ee:	2203      	movs	r2, #3
 80043f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80043f2:	187b      	adds	r3, r7, r1
 80043f4:	2200      	movs	r2, #0
 80043f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f8:	187b      	adds	r3, r7, r1
 80043fa:	4a06      	ldr	r2, [pc, #24]	; (8004414 <HAL_SPI_MspInit+0xc8>)
 80043fc:	0019      	movs	r1, r3
 80043fe:	0010      	movs	r0, r2
 8004400:	f001 fa9e 	bl	8005940 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004404:	46c0      	nop			; (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	b00b      	add	sp, #44	; 0x2c
 800440a:	bd90      	pop	{r4, r7, pc}
 800440c:	40013000 	.word	0x40013000
 8004410:	40021000 	.word	0x40021000
 8004414:	50000400 	.word	0x50000400

08004418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800441c:	4b07      	ldr	r3, [pc, #28]	; (800443c <HAL_MspInit+0x24>)
 800441e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004420:	4b06      	ldr	r3, [pc, #24]	; (800443c <HAL_MspInit+0x24>)
 8004422:	2101      	movs	r1, #1
 8004424:	430a      	orrs	r2, r1
 8004426:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004428:	4b04      	ldr	r3, [pc, #16]	; (800443c <HAL_MspInit+0x24>)
 800442a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <HAL_MspInit+0x24>)
 800442e:	2180      	movs	r1, #128	; 0x80
 8004430:	0549      	lsls	r1, r1, #21
 8004432:	430a      	orrs	r2, r1
 8004434:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000

08004440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004444:	e7fe      	b.n	8004444 <NMI_Handler+0x4>

08004446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800444a:	e7fe      	b.n	800444a <HardFault_Handler+0x4>

0800444c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004450:	46c0      	nop			; (mov r8, r8)
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004464:	f000 fab4 	bl	80049d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004468:	46c0      	nop			; (mov r8, r8)
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	0018      	movs	r0, r3
 8004478:	f001 fc10 	bl	8005c9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800447c:	2380      	movs	r3, #128	; 0x80
 800447e:	019b      	lsls	r3, r3, #6
 8004480:	0018      	movs	r0, r3
 8004482:	f001 fc0b 	bl	8005c9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004490:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <DMA1_Channel1_IRQHandler+0x14>)
 8004492:	0018      	movs	r0, r3
 8004494:	f001 f977 	bl	8005786 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004498:	46c0      	nop			; (mov r8, r8)
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	20000254 	.word	0x20000254

080044a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <TIM6_DAC_IRQHandler+0x14>)
 80044aa:	0018      	movs	r0, r3
 80044ac:	f004 f83c 	bl	8008528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80044b0:	46c0      	nop			; (mov r8, r8)
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	20000548 	.word	0x20000548

080044bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80044c0:	4b03      	ldr	r3, [pc, #12]	; (80044d0 <USART1_IRQHandler+0x14>)
 80044c2:	0018      	movs	r0, r3
 80044c4:	f004 fb36 	bl	8008b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	20000588 	.word	0x20000588

080044d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  return 1;
 80044d8:	2301      	movs	r3, #1
}
 80044da:	0018      	movs	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <_kill>:

int _kill(int pid, int sig)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044ea:	f007 fd93 	bl	800c014 <__errno>
 80044ee:	0003      	movs	r3, r0
 80044f0:	2216      	movs	r2, #22
 80044f2:	601a      	str	r2, [r3, #0]
  return -1;
 80044f4:	2301      	movs	r3, #1
 80044f6:	425b      	negs	r3, r3
}
 80044f8:	0018      	movs	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	b002      	add	sp, #8
 80044fe:	bd80      	pop	{r7, pc}

08004500 <_exit>:

void _exit (int status)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004508:	2301      	movs	r3, #1
 800450a:	425a      	negs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	0011      	movs	r1, r2
 8004510:	0018      	movs	r0, r3
 8004512:	f7ff ffe5 	bl	80044e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004516:	e7fe      	b.n	8004516 <_exit+0x16>

08004518 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	e00a      	b.n	8004540 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800452a:	e000      	b.n	800452e <_read+0x16>
 800452c:	bf00      	nop
 800452e:	0001      	movs	r1, r0
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	60ba      	str	r2, [r7, #8]
 8004536:	b2ca      	uxtb	r2, r1
 8004538:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	3301      	adds	r3, #1
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	dbf0      	blt.n	800452a <_read+0x12>
  }

  return len;
 8004548:	687b      	ldr	r3, [r7, #4]
}
 800454a:	0018      	movs	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	b006      	add	sp, #24
 8004550:	bd80      	pop	{r7, pc}

08004552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b086      	sub	sp, #24
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	e009      	b.n	8004578 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	60ba      	str	r2, [r7, #8]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	0018      	movs	r0, r3
 800456e:	f7ff f8b3 	bl	80036d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	3301      	adds	r3, #1
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	dbf1      	blt.n	8004564 <_write+0x12>
  }
  return len;
 8004580:	687b      	ldr	r3, [r7, #4]
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b006      	add	sp, #24
 8004588:	bd80      	pop	{r7, pc}

0800458a <_close>:

int _close(int file)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004592:	2301      	movs	r3, #1
 8004594:	425b      	negs	r3, r3
}
 8004596:	0018      	movs	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	b002      	add	sp, #8
 800459c:	bd80      	pop	{r7, pc}

0800459e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2280      	movs	r2, #128	; 0x80
 80045ac:	0192      	lsls	r2, r2, #6
 80045ae:	605a      	str	r2, [r3, #4]
  return 0;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	0018      	movs	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b002      	add	sp, #8
 80045b8:	bd80      	pop	{r7, pc}

080045ba <_isatty>:

int _isatty(int file)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80045c2:	2301      	movs	r3, #1
}
 80045c4:	0018      	movs	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b002      	add	sp, #8
 80045ca:	bd80      	pop	{r7, pc}

080045cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	0018      	movs	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	b004      	add	sp, #16
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045ec:	4a14      	ldr	r2, [pc, #80]	; (8004640 <_sbrk+0x5c>)
 80045ee:	4b15      	ldr	r3, [pc, #84]	; (8004644 <_sbrk+0x60>)
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045f8:	4b13      	ldr	r3, [pc, #76]	; (8004648 <_sbrk+0x64>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <_sbrk+0x64>)
 8004602:	4a12      	ldr	r2, [pc, #72]	; (800464c <_sbrk+0x68>)
 8004604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004606:	4b10      	ldr	r3, [pc, #64]	; (8004648 <_sbrk+0x64>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	18d3      	adds	r3, r2, r3
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	429a      	cmp	r2, r3
 8004612:	d207      	bcs.n	8004624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004614:	f007 fcfe 	bl	800c014 <__errno>
 8004618:	0003      	movs	r3, r0
 800461a:	220c      	movs	r2, #12
 800461c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800461e:	2301      	movs	r3, #1
 8004620:	425b      	negs	r3, r3
 8004622:	e009      	b.n	8004638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004624:	4b08      	ldr	r3, [pc, #32]	; (8004648 <_sbrk+0x64>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800462a:	4b07      	ldr	r3, [pc, #28]	; (8004648 <_sbrk+0x64>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	18d2      	adds	r2, r2, r3
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <_sbrk+0x64>)
 8004634:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004636:	68fb      	ldr	r3, [r7, #12]
}
 8004638:	0018      	movs	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	b006      	add	sp, #24
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20002000 	.word	0x20002000
 8004644:	00000400 	.word	0x00000400
 8004648:	20000544 	.word	0x20000544
 800464c:	200007e8 	.word	0x200007e8

08004650 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004654:	46c0      	nop			; (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004662:	003b      	movs	r3, r7
 8004664:	0018      	movs	r0, r3
 8004666:	2308      	movs	r3, #8
 8004668:	001a      	movs	r2, r3
 800466a:	2100      	movs	r1, #0
 800466c:	f007 fc66 	bl	800bf3c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004670:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <MX_TIM6_Init+0x6c>)
 8004672:	4a16      	ldr	r2, [pc, #88]	; (80046cc <MX_TIM6_Init+0x70>)
 8004674:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 8004676:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <MX_TIM6_Init+0x6c>)
 8004678:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <MX_TIM6_Init+0x74>)
 800467a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800467c:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <MX_TIM6_Init+0x6c>)
 800467e:	2200      	movs	r2, #0
 8004680:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8004682:	4b11      	ldr	r3, [pc, #68]	; (80046c8 <MX_TIM6_Init+0x6c>)
 8004684:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <MX_TIM6_Init+0x78>)
 8004686:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <MX_TIM6_Init+0x6c>)
 800468a:	2200      	movs	r2, #0
 800468c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800468e:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <MX_TIM6_Init+0x6c>)
 8004690:	0018      	movs	r0, r3
 8004692:	f003 febd 	bl	8008410 <HAL_TIM_Base_Init>
 8004696:	1e03      	subs	r3, r0, #0
 8004698:	d001      	beq.n	800469e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800469a:	f7ff f95b 	bl	8003954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800469e:	003b      	movs	r3, r7
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046a4:	003b      	movs	r3, r7
 80046a6:	2200      	movs	r2, #0
 80046a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80046aa:	003a      	movs	r2, r7
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <MX_TIM6_Init+0x6c>)
 80046ae:	0011      	movs	r1, r2
 80046b0:	0018      	movs	r0, r3
 80046b2:	f004 f895 	bl	80087e0 <HAL_TIMEx_MasterConfigSynchronization>
 80046b6:	1e03      	subs	r3, r0, #0
 80046b8:	d001      	beq.n	80046be <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80046ba:	f7ff f94b 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b002      	add	sp, #8
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	20000548 	.word	0x20000548
 80046cc:	40001000 	.word	0x40001000
 80046d0:	00000c7f 	.word	0x00000c7f
 80046d4:	0000270f 	.word	0x0000270f

080046d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <HAL_TIM_Base_MspInit+0x38>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d10d      	bne.n	8004706 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80046ea:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <HAL_TIM_Base_MspInit+0x3c>)
 80046ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <HAL_TIM_Base_MspInit+0x3c>)
 80046f0:	2110      	movs	r1, #16
 80046f2:	430a      	orrs	r2, r1
 80046f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80046f6:	2200      	movs	r2, #0
 80046f8:	2103      	movs	r1, #3
 80046fa:	2011      	movs	r0, #17
 80046fc:	f000 feac 	bl	8005458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004700:	2011      	movs	r0, #17
 8004702:	f000 febe 	bl	8005482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b002      	add	sp, #8
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	40001000 	.word	0x40001000
 8004714:	40021000 	.word	0x40021000

08004718 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800471c:	4b14      	ldr	r3, [pc, #80]	; (8004770 <MX_USART1_UART_Init+0x58>)
 800471e:	4a15      	ldr	r2, [pc, #84]	; (8004774 <MX_USART1_UART_Init+0x5c>)
 8004720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004722:	4b13      	ldr	r3, [pc, #76]	; (8004770 <MX_USART1_UART_Init+0x58>)
 8004724:	2296      	movs	r2, #150	; 0x96
 8004726:	0192      	lsls	r2, r2, #6
 8004728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800472a:	4b11      	ldr	r3, [pc, #68]	; (8004770 <MX_USART1_UART_Init+0x58>)
 800472c:	2200      	movs	r2, #0
 800472e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004730:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <MX_USART1_UART_Init+0x58>)
 8004732:	2200      	movs	r2, #0
 8004734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004736:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <MX_USART1_UART_Init+0x58>)
 8004738:	2200      	movs	r2, #0
 800473a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <MX_USART1_UART_Init+0x58>)
 800473e:	220c      	movs	r2, #12
 8004740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <MX_USART1_UART_Init+0x58>)
 8004744:	2200      	movs	r2, #0
 8004746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <MX_USART1_UART_Init+0x58>)
 800474a:	2200      	movs	r2, #0
 800474c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800474e:	4b08      	ldr	r3, [pc, #32]	; (8004770 <MX_USART1_UART_Init+0x58>)
 8004750:	2200      	movs	r2, #0
 8004752:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <MX_USART1_UART_Init+0x58>)
 8004756:	2200      	movs	r2, #0
 8004758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <MX_USART1_UART_Init+0x58>)
 800475c:	0018      	movs	r0, r3
 800475e:	f004 f897 	bl	8008890 <HAL_UART_Init>
 8004762:	1e03      	subs	r3, r0, #0
 8004764:	d001      	beq.n	800476a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004766:	f7ff f8f5 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20000588 	.word	0x20000588
 8004774:	40013800 	.word	0x40013800

08004778 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800477c:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <MX_USART2_UART_Init+0x58>)
 800477e:	4a15      	ldr	r2, [pc, #84]	; (80047d4 <MX_USART2_UART_Init+0x5c>)
 8004780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004782:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <MX_USART2_UART_Init+0x58>)
 8004784:	2296      	movs	r2, #150	; 0x96
 8004786:	0192      	lsls	r2, r2, #6
 8004788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800478a:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <MX_USART2_UART_Init+0x58>)
 800478c:	2200      	movs	r2, #0
 800478e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <MX_USART2_UART_Init+0x58>)
 8004792:	2200      	movs	r2, #0
 8004794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004796:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <MX_USART2_UART_Init+0x58>)
 8004798:	2200      	movs	r2, #0
 800479a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800479c:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <MX_USART2_UART_Init+0x58>)
 800479e:	220c      	movs	r2, #12
 80047a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <MX_USART2_UART_Init+0x58>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047a8:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <MX_USART2_UART_Init+0x58>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047ae:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <MX_USART2_UART_Init+0x58>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <MX_USART2_UART_Init+0x58>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80047ba:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <MX_USART2_UART_Init+0x58>)
 80047bc:	0018      	movs	r0, r3
 80047be:	f004 f867 	bl	8008890 <HAL_UART_Init>
 80047c2:	1e03      	subs	r3, r0, #0
 80047c4:	d001      	beq.n	80047ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80047c6:	f7ff f8c5 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20000610 	.word	0x20000610
 80047d4:	40004400 	.word	0x40004400

080047d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80047d8:	b590      	push	{r4, r7, lr}
 80047da:	b08b      	sub	sp, #44	; 0x2c
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e0:	2414      	movs	r4, #20
 80047e2:	193b      	adds	r3, r7, r4
 80047e4:	0018      	movs	r0, r3
 80047e6:	2314      	movs	r3, #20
 80047e8:	001a      	movs	r2, r3
 80047ea:	2100      	movs	r1, #0
 80047ec:	f007 fba6 	bl	800bf3c <memset>
  if(uartHandle->Instance==USART1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a34      	ldr	r2, [pc, #208]	; (80048c8 <HAL_UART_MspInit+0xf0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d133      	bne.n	8004862 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047fa:	4b34      	ldr	r3, [pc, #208]	; (80048cc <HAL_UART_MspInit+0xf4>)
 80047fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047fe:	4b33      	ldr	r3, [pc, #204]	; (80048cc <HAL_UART_MspInit+0xf4>)
 8004800:	2180      	movs	r1, #128	; 0x80
 8004802:	01c9      	lsls	r1, r1, #7
 8004804:	430a      	orrs	r2, r1
 8004806:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004808:	4b30      	ldr	r3, [pc, #192]	; (80048cc <HAL_UART_MspInit+0xf4>)
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480c:	4b2f      	ldr	r3, [pc, #188]	; (80048cc <HAL_UART_MspInit+0xf4>)
 800480e:	2101      	movs	r1, #1
 8004810:	430a      	orrs	r2, r1
 8004812:	62da      	str	r2, [r3, #44]	; 0x2c
 8004814:	4b2d      	ldr	r3, [pc, #180]	; (80048cc <HAL_UART_MspInit+0xf4>)
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	2201      	movs	r2, #1
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004820:	193b      	adds	r3, r7, r4
 8004822:	22c0      	movs	r2, #192	; 0xc0
 8004824:	00d2      	lsls	r2, r2, #3
 8004826:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004828:	0021      	movs	r1, r4
 800482a:	187b      	adds	r3, r7, r1
 800482c:	2202      	movs	r2, #2
 800482e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004830:	187b      	adds	r3, r7, r1
 8004832:	2200      	movs	r2, #0
 8004834:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004836:	187b      	adds	r3, r7, r1
 8004838:	2203      	movs	r2, #3
 800483a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800483c:	187b      	adds	r3, r7, r1
 800483e:	2204      	movs	r2, #4
 8004840:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004842:	187a      	adds	r2, r7, r1
 8004844:	23a0      	movs	r3, #160	; 0xa0
 8004846:	05db      	lsls	r3, r3, #23
 8004848:	0011      	movs	r1, r2
 800484a:	0018      	movs	r0, r3
 800484c:	f001 f878 	bl	8005940 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004850:	2200      	movs	r2, #0
 8004852:	2100      	movs	r1, #0
 8004854:	201b      	movs	r0, #27
 8004856:	f000 fdff 	bl	8005458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800485a:	201b      	movs	r0, #27
 800485c:	f000 fe11 	bl	8005482 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004860:	e02e      	b.n	80048c0 <HAL_UART_MspInit+0xe8>
  else if(uartHandle->Instance==USART2)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1a      	ldr	r2, [pc, #104]	; (80048d0 <HAL_UART_MspInit+0xf8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d129      	bne.n	80048c0 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800486c:	4b17      	ldr	r3, [pc, #92]	; (80048cc <HAL_UART_MspInit+0xf4>)
 800486e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004870:	4b16      	ldr	r3, [pc, #88]	; (80048cc <HAL_UART_MspInit+0xf4>)
 8004872:	2180      	movs	r1, #128	; 0x80
 8004874:	0289      	lsls	r1, r1, #10
 8004876:	430a      	orrs	r2, r1
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800487a:	4b14      	ldr	r3, [pc, #80]	; (80048cc <HAL_UART_MspInit+0xf4>)
 800487c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487e:	4b13      	ldr	r3, [pc, #76]	; (80048cc <HAL_UART_MspInit+0xf4>)
 8004880:	2101      	movs	r1, #1
 8004882:	430a      	orrs	r2, r1
 8004884:	62da      	str	r2, [r3, #44]	; 0x2c
 8004886:	4b11      	ldr	r3, [pc, #68]	; (80048cc <HAL_UART_MspInit+0xf4>)
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	2201      	movs	r2, #1
 800488c:	4013      	ands	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004892:	2114      	movs	r1, #20
 8004894:	187b      	adds	r3, r7, r1
 8004896:	220c      	movs	r2, #12
 8004898:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489a:	187b      	adds	r3, r7, r1
 800489c:	2202      	movs	r2, #2
 800489e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a0:	187b      	adds	r3, r7, r1
 80048a2:	2200      	movs	r2, #0
 80048a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a6:	187b      	adds	r3, r7, r1
 80048a8:	2203      	movs	r2, #3
 80048aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80048ac:	187b      	adds	r3, r7, r1
 80048ae:	2204      	movs	r2, #4
 80048b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b2:	187a      	adds	r2, r7, r1
 80048b4:	23a0      	movs	r3, #160	; 0xa0
 80048b6:	05db      	lsls	r3, r3, #23
 80048b8:	0011      	movs	r1, r2
 80048ba:	0018      	movs	r0, r3
 80048bc:	f001 f840 	bl	8005940 <HAL_GPIO_Init>
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b00b      	add	sp, #44	; 0x2c
 80048c6:	bd90      	pop	{r4, r7, pc}
 80048c8:	40013800 	.word	0x40013800
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40004400 	.word	0x40004400

080048d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80048d4:	480d      	ldr	r0, [pc, #52]	; (800490c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80048d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80048d8:	f7ff feba 	bl	8004650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048dc:	480c      	ldr	r0, [pc, #48]	; (8004910 <LoopForever+0x6>)
  ldr r1, =_edata
 80048de:	490d      	ldr	r1, [pc, #52]	; (8004914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80048e0:	4a0d      	ldr	r2, [pc, #52]	; (8004918 <LoopForever+0xe>)
  movs r3, #0
 80048e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048e4:	e002      	b.n	80048ec <LoopCopyDataInit>

080048e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048ea:	3304      	adds	r3, #4

080048ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048f0:	d3f9      	bcc.n	80048e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048f2:	4a0a      	ldr	r2, [pc, #40]	; (800491c <LoopForever+0x12>)
  ldr r4, =_ebss
 80048f4:	4c0a      	ldr	r4, [pc, #40]	; (8004920 <LoopForever+0x16>)
  movs r3, #0
 80048f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048f8:	e001      	b.n	80048fe <LoopFillZerobss>

080048fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048fc:	3204      	adds	r2, #4

080048fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004900:	d3fb      	bcc.n	80048fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004902:	f007 fb8d 	bl	800c020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004906:	f7fe ff49 	bl	800379c <main>

0800490a <LoopForever>:

LoopForever:
    b LoopForever
 800490a:	e7fe      	b.n	800490a <LoopForever>
  ldr   r0, =_estack
 800490c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004914:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004918:	0800f08c 	.word	0x0800f08c
  ldr r2, =_sbss
 800491c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004920:	200007e8 	.word	0x200007e8

08004924 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004924:	e7fe      	b.n	8004924 <ADC1_COMP_IRQHandler>
	...

08004928 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800492e:	1dfb      	adds	r3, r7, #7
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <HAL_Init+0x3c>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <HAL_Init+0x3c>)
 800493a:	2140      	movs	r1, #64	; 0x40
 800493c:	430a      	orrs	r2, r1
 800493e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004940:	2000      	movs	r0, #0
 8004942:	f000 f811 	bl	8004968 <HAL_InitTick>
 8004946:	1e03      	subs	r3, r0, #0
 8004948:	d003      	beq.n	8004952 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800494a:	1dfb      	adds	r3, r7, #7
 800494c:	2201      	movs	r2, #1
 800494e:	701a      	strb	r2, [r3, #0]
 8004950:	e001      	b.n	8004956 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004952:	f7ff fd61 	bl	8004418 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004956:	1dfb      	adds	r3, r7, #7
 8004958:	781b      	ldrb	r3, [r3, #0]
}
 800495a:	0018      	movs	r0, r3
 800495c:	46bd      	mov	sp, r7
 800495e:	b002      	add	sp, #8
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	40022000 	.word	0x40022000

08004968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004970:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <HAL_InitTick+0x5c>)
 8004972:	681c      	ldr	r4, [r3, #0]
 8004974:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <HAL_InitTick+0x60>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	0019      	movs	r1, r3
 800497a:	23fa      	movs	r3, #250	; 0xfa
 800497c:	0098      	lsls	r0, r3, #2
 800497e:	f7fb fbdf 	bl	8000140 <__udivsi3>
 8004982:	0003      	movs	r3, r0
 8004984:	0019      	movs	r1, r3
 8004986:	0020      	movs	r0, r4
 8004988:	f7fb fbda 	bl	8000140 <__udivsi3>
 800498c:	0003      	movs	r3, r0
 800498e:	0018      	movs	r0, r3
 8004990:	f000 fd87 	bl	80054a2 <HAL_SYSTICK_Config>
 8004994:	1e03      	subs	r3, r0, #0
 8004996:	d001      	beq.n	800499c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e00f      	b.n	80049bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d80b      	bhi.n	80049ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	2301      	movs	r3, #1
 80049a6:	425b      	negs	r3, r3
 80049a8:	2200      	movs	r2, #0
 80049aa:	0018      	movs	r0, r3
 80049ac:	f000 fd54 	bl	8005458 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049b0:	4b06      	ldr	r3, [pc, #24]	; (80049cc <HAL_InitTick+0x64>)
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e000      	b.n	80049bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
}
 80049bc:	0018      	movs	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	b003      	add	sp, #12
 80049c2:	bd90      	pop	{r4, r7, pc}
 80049c4:	20000000 	.word	0x20000000
 80049c8:	20000008 	.word	0x20000008
 80049cc:	20000004 	.word	0x20000004

080049d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_IncTick+0x1c>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	001a      	movs	r2, r3
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_IncTick+0x20>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	18d2      	adds	r2, r2, r3
 80049e0:	4b03      	ldr	r3, [pc, #12]	; (80049f0 <HAL_IncTick+0x20>)
 80049e2:	601a      	str	r2, [r3, #0]
}
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	20000008 	.word	0x20000008
 80049f0:	20000698 	.word	0x20000698

080049f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  return uwTick;
 80049f8:	4b02      	ldr	r3, [pc, #8]	; (8004a04 <HAL_GetTick+0x10>)
 80049fa:	681b      	ldr	r3, [r3, #0]
}
 80049fc:	0018      	movs	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	20000698 	.word	0x20000698

08004a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a10:	f7ff fff0 	bl	80049f4 <HAL_GetTick>
 8004a14:	0003      	movs	r3, r0
 8004a16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	d005      	beq.n	8004a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a22:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <HAL_Delay+0x44>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	001a      	movs	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	189b      	adds	r3, r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	f7ff ffe0 	bl	80049f4 <HAL_GetTick>
 8004a34:	0002      	movs	r2, r0
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d8f7      	bhi.n	8004a30 <HAL_Delay+0x28>
  {
  }
}
 8004a40:	46c0      	nop			; (mov r8, r8)
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b004      	add	sp, #16
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	20000008 	.word	0x20000008

08004a50 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e159      	b.n	8004d16 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2250      	movs	r2, #80	; 0x50
 8004a74:	2100      	movs	r1, #0
 8004a76:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f7fe fc7e 	bl	800337c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a84:	2210      	movs	r2, #16
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d005      	beq.n	8004a98 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2204      	movs	r2, #4
 8004a94:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004a96:	d00b      	beq.n	8004ab0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9c:	2210      	movs	r2, #16
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2250      	movs	r2, #80	; 0x50
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e132      	b.n	8004d16 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	4a9a      	ldr	r2, [pc, #616]	; (8004d20 <HAL_ADC_Init+0x2d0>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2202      	movs	r2, #2
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d108      	bne.n	8004ae0 <HAL_ADC_Init+0x90>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_ADC_Init+0x90>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <HAL_ADC_Init+0x92>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d149      	bne.n	8004b7a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	23c0      	movs	r3, #192	; 0xc0
 8004aec:	061b      	lsls	r3, r3, #24
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d00b      	beq.n	8004b0a <HAL_ADC_Init+0xba>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	2380      	movs	r3, #128	; 0x80
 8004af8:	05db      	lsls	r3, r3, #23
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d005      	beq.n	8004b0a <HAL_ADC_Init+0xba>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d111      	bne.n	8004b2e <HAL_ADC_Init+0xde>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	0092      	lsls	r2, r2, #2
 8004b16:	0892      	lsrs	r2, r2, #2
 8004b18:	611a      	str	r2, [r3, #16]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6919      	ldr	r1, [r3, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	611a      	str	r2, [r3, #16]
 8004b2c:	e014      	b.n	8004b58 <HAL_ADC_Init+0x108>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	0092      	lsls	r2, r2, #2
 8004b3a:	0892      	lsrs	r2, r2, #2
 8004b3c:	611a      	str	r2, [r3, #16]
 8004b3e:	4b79      	ldr	r3, [pc, #484]	; (8004d24 <HAL_ADC_Init+0x2d4>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b78      	ldr	r3, [pc, #480]	; (8004d24 <HAL_ADC_Init+0x2d4>)
 8004b44:	4978      	ldr	r1, [pc, #480]	; (8004d28 <HAL_ADC_Init+0x2d8>)
 8004b46:	400a      	ands	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	4b76      	ldr	r3, [pc, #472]	; (8004d24 <HAL_ADC_Init+0x2d4>)
 8004b4c:	6819      	ldr	r1, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	4b74      	ldr	r3, [pc, #464]	; (8004d24 <HAL_ADC_Init+0x2d4>)
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2118      	movs	r1, #24
 8004b64:	438a      	bics	r2, r1
 8004b66:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68d9      	ldr	r1, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004b7a:	4b6a      	ldr	r3, [pc, #424]	; (8004d24 <HAL_ADC_Init+0x2d4>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	4b69      	ldr	r3, [pc, #420]	; (8004d24 <HAL_ADC_Init+0x2d4>)
 8004b80:	496a      	ldr	r1, [pc, #424]	; (8004d2c <HAL_ADC_Init+0x2dc>)
 8004b82:	400a      	ands	r2, r1
 8004b84:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8004b86:	4b67      	ldr	r3, [pc, #412]	; (8004d24 <HAL_ADC_Init+0x2d4>)
 8004b88:	6819      	ldr	r1, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8e:	065a      	lsls	r2, r3, #25
 8004b90:	4b64      	ldr	r3, [pc, #400]	; (8004d24 <HAL_ADC_Init+0x2d4>)
 8004b92:	430a      	orrs	r2, r1
 8004b94:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	055b      	lsls	r3, r3, #21
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d108      	bne.n	8004bb6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2180      	movs	r1, #128	; 0x80
 8004bb0:	0549      	lsls	r1, r1, #21
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	495b      	ldr	r1, [pc, #364]	; (8004d30 <HAL_ADC_Init+0x2e0>)
 8004bc2:	400a      	ands	r2, r1
 8004bc4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68d9      	ldr	r1, [r3, #12]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d101      	bne.n	8004bdc <HAL_ADC_Init+0x18c>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	e000      	b.n	8004bde <HAL_ADC_Init+0x18e>
 8004bdc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004bde:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2020      	movs	r0, #32
 8004be4:	5c1b      	ldrb	r3, [r3, r0]
 8004be6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004be8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	202c      	movs	r0, #44	; 0x2c
 8004bee:	5c1b      	ldrb	r3, [r3, r0]
 8004bf0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004bf2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004bf8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004c00:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004c08:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c16:	23c2      	movs	r3, #194	; 0xc2
 8004c18:	33ff      	adds	r3, #255	; 0xff
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d00b      	beq.n	8004c36 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68d9      	ldr	r1, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2221      	movs	r2, #33	; 0x21
 8004c3a:	5c9b      	ldrb	r3, [r3, r2]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d11a      	bne.n	8004c76 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	5c9b      	ldrb	r3, [r3, r2]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2180      	movs	r1, #128	; 0x80
 8004c56:	0249      	lsls	r1, r1, #9
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	60da      	str	r2, [r3, #12]
 8004c5c:	e00b      	b.n	8004c76 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	2220      	movs	r2, #32
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6e:	2201      	movs	r2, #1
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d11f      	bne.n	8004cbe <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	492a      	ldr	r1, [pc, #168]	; (8004d34 <HAL_ADC_Init+0x2e4>)
 8004c8a:	400a      	ands	r2, r1
 8004c8c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6919      	ldr	r1, [r3, #16]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004c9c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8004ca2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	611a      	str	r2, [r3, #16]
 8004cbc:	e00e      	b.n	8004cdc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d107      	bne.n	8004cdc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	438a      	bics	r2, r1
 8004cda:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695a      	ldr	r2, [r3, #20]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2107      	movs	r1, #7
 8004ce8:	438a      	bics	r2, r1
 8004cea:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6959      	ldr	r1, [r3, #20]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d08:	2203      	movs	r2, #3
 8004d0a:	4393      	bics	r3, r2
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	0018      	movs	r0, r3
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b002      	add	sp, #8
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	fffffefd 	.word	0xfffffefd
 8004d24:	40012708 	.word	0x40012708
 8004d28:	ffc3ffff 	.word	0xffc3ffff
 8004d2c:	fdffffff 	.word	0xfdffffff
 8004d30:	fffe0219 	.word	0xfffe0219
 8004d34:	fffffc03 	.word	0xfffffc03

08004d38 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004d38:	b590      	push	{r4, r7, lr}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d44:	2317      	movs	r3, #23
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2204      	movs	r2, #4
 8004d54:	4013      	ands	r3, r2
 8004d56:	d15e      	bne.n	8004e16 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2250      	movs	r2, #80	; 0x50
 8004d5c:	5c9b      	ldrb	r3, [r3, r2]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_ADC_Start_DMA+0x2e>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e05e      	b.n	8004e24 <HAL_ADC_Start_DMA+0xec>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2250      	movs	r2, #80	; 0x50
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2101      	movs	r1, #1
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d007      	beq.n	8004d96 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004d86:	2317      	movs	r3, #23
 8004d88:	18fc      	adds	r4, r7, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f000 f90d 	bl	8004fac <ADC_Enable>
 8004d92:	0003      	movs	r3, r0
 8004d94:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004d96:	2317      	movs	r3, #23
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d13e      	bne.n	8004e1e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da4:	4a21      	ldr	r2, [pc, #132]	; (8004e2c <HAL_ADC_Start_DMA+0xf4>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	2280      	movs	r2, #128	; 0x80
 8004daa:	0052      	lsls	r2, r2, #1
 8004dac:	431a      	orrs	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2250      	movs	r2, #80	; 0x50
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc4:	4a1a      	ldr	r2, [pc, #104]	; (8004e30 <HAL_ADC_Start_DMA+0xf8>)
 8004dc6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dcc:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <HAL_ADC_Start_DMA+0xfc>)
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd4:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <HAL_ADC_Start_DMA+0x100>)
 8004dd6:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	221c      	movs	r2, #28
 8004dde:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2110      	movs	r1, #16
 8004dec:	430a      	orrs	r2, r1
 8004dee:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3340      	adds	r3, #64	; 0x40
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f000 fbd4 	bl	80055ac <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2104      	movs	r1, #4
 8004e10:	430a      	orrs	r2, r1
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	e003      	b.n	8004e1e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004e16:	2317      	movs	r3, #23
 8004e18:	18fb      	adds	r3, r7, r3
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e1e:	2317      	movs	r3, #23
 8004e20:	18fb      	adds	r3, r7, r3
 8004e22:	781b      	ldrb	r3, [r3, #0]
}
 8004e24:	0018      	movs	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b007      	add	sp, #28
 8004e2a:	bd90      	pop	{r4, r7, pc}
 8004e2c:	fffff0fe 	.word	0xfffff0fe
 8004e30:	0800507d 	.word	0x0800507d
 8004e34:	08005131 	.word	0x08005131
 8004e38:	0800514f 	.word	0x0800514f

08004e3c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004e44:	46c0      	nop			; (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b002      	add	sp, #8
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2250      	movs	r2, #80	; 0x50
 8004e7a:	5c9b      	ldrb	r3, [r3, r2]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_ADC_ConfigChannel+0x18>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e085      	b.n	8004f90 <HAL_ADC_ConfigChannel+0x124>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2250      	movs	r2, #80	; 0x50
 8004e88:	2101      	movs	r1, #1
 8004e8a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2204      	movs	r2, #4
 8004e94:	4013      	ands	r3, r2
 8004e96:	d00b      	beq.n	8004eb0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2250      	movs	r2, #80	; 0x50
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e06f      	b.n	8004f90 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	4a38      	ldr	r2, [pc, #224]	; (8004f98 <HAL_ADC_ConfigChannel+0x12c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d035      	beq.n	8004f26 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	035b      	lsls	r3, r3, #13
 8004ec6:	0b5a      	lsrs	r2, r3, #13
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	02db      	lsls	r3, r3, #11
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d009      	beq.n	8004ef0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8004edc:	4b2f      	ldr	r3, [pc, #188]	; (8004f9c <HAL_ADC_ConfigChannel+0x130>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	4b2e      	ldr	r3, [pc, #184]	; (8004f9c <HAL_ADC_ConfigChannel+0x130>)
 8004ee2:	2180      	movs	r1, #128	; 0x80
 8004ee4:	0409      	lsls	r1, r1, #16
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004eea:	200a      	movs	r0, #10
 8004eec:	f000 f94a 	bl	8005184 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	029b      	lsls	r3, r3, #10
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d006      	beq.n	8004f0a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8004efc:	4b27      	ldr	r3, [pc, #156]	; (8004f9c <HAL_ADC_ConfigChannel+0x130>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4b26      	ldr	r3, [pc, #152]	; (8004f9c <HAL_ADC_ConfigChannel+0x130>)
 8004f02:	2180      	movs	r1, #128	; 0x80
 8004f04:	03c9      	lsls	r1, r1, #15
 8004f06:	430a      	orrs	r2, r1
 8004f08:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	2380      	movs	r3, #128	; 0x80
 8004f10:	025b      	lsls	r3, r3, #9
 8004f12:	4013      	ands	r3, r2
 8004f14:	d037      	beq.n	8004f86 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8004f16:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <HAL_ADC_ConfigChannel+0x130>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4b20      	ldr	r3, [pc, #128]	; (8004f9c <HAL_ADC_ConfigChannel+0x130>)
 8004f1c:	2180      	movs	r1, #128	; 0x80
 8004f1e:	0449      	lsls	r1, r1, #17
 8004f20:	430a      	orrs	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	e02f      	b.n	8004f86 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	035b      	lsls	r3, r3, #13
 8004f32:	0b5b      	lsrs	r3, r3, #13
 8004f34:	43d9      	mvns	r1, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	400a      	ands	r2, r1
 8004f3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	02db      	lsls	r3, r3, #11
 8004f46:	4013      	ands	r3, r2
 8004f48:	d005      	beq.n	8004f56 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8004f4a:	4b14      	ldr	r3, [pc, #80]	; (8004f9c <HAL_ADC_ConfigChannel+0x130>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <HAL_ADC_ConfigChannel+0x130>)
 8004f50:	4913      	ldr	r1, [pc, #76]	; (8004fa0 <HAL_ADC_ConfigChannel+0x134>)
 8004f52:	400a      	ands	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	029b      	lsls	r3, r3, #10
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d005      	beq.n	8004f6e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8004f62:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <HAL_ADC_ConfigChannel+0x130>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <HAL_ADC_ConfigChannel+0x130>)
 8004f68:	490e      	ldr	r1, [pc, #56]	; (8004fa4 <HAL_ADC_ConfigChannel+0x138>)
 8004f6a:	400a      	ands	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	2380      	movs	r3, #128	; 0x80
 8004f74:	025b      	lsls	r3, r3, #9
 8004f76:	4013      	ands	r3, r2
 8004f78:	d005      	beq.n	8004f86 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8004f7a:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <HAL_ADC_ConfigChannel+0x130>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <HAL_ADC_ConfigChannel+0x130>)
 8004f80:	4909      	ldr	r1, [pc, #36]	; (8004fa8 <HAL_ADC_ConfigChannel+0x13c>)
 8004f82:	400a      	ands	r2, r1
 8004f84:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2250      	movs	r2, #80	; 0x50
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	0018      	movs	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b002      	add	sp, #8
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	00001001 	.word	0x00001001
 8004f9c:	40012708 	.word	0x40012708
 8004fa0:	ff7fffff 	.word	0xff7fffff
 8004fa4:	ffbfffff 	.word	0xffbfffff
 8004fa8:	feffffff 	.word	0xfeffffff

08004fac <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2203      	movs	r2, #3
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d108      	bne.n	8004fd8 <ADC_Enable+0x2c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	4013      	ands	r3, r2
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <ADC_Enable+0x2c>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <ADC_Enable+0x2e>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d146      	bne.n	800506c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4a24      	ldr	r2, [pc, #144]	; (8005078 <ADC_Enable+0xcc>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d00d      	beq.n	8005006 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	2210      	movs	r2, #16
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e033      	b.n	800506e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2101      	movs	r1, #1
 8005012:	430a      	orrs	r2, r1
 8005014:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8005016:	2001      	movs	r0, #1
 8005018:	f000 f8b4 	bl	8005184 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800501c:	f7ff fcea 	bl	80049f4 <HAL_GetTick>
 8005020:	0003      	movs	r3, r0
 8005022:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005024:	e01b      	b.n	800505e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005026:	f7ff fce5 	bl	80049f4 <HAL_GetTick>
 800502a:	0002      	movs	r2, r0
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b0a      	cmp	r3, #10
 8005032:	d914      	bls.n	800505e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2201      	movs	r2, #1
 800503c:	4013      	ands	r3, r2
 800503e:	2b01      	cmp	r3, #1
 8005040:	d00d      	beq.n	800505e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005046:	2210      	movs	r2, #16
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005052:	2201      	movs	r2, #1
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e007      	b.n	800506e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2201      	movs	r2, #1
 8005066:	4013      	ands	r3, r2
 8005068:	2b01      	cmp	r3, #1
 800506a:	d1dc      	bne.n	8005026 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	0018      	movs	r0, r3
 8005070:	46bd      	mov	sp, r7
 8005072:	b004      	add	sp, #16
 8005074:	bd80      	pop	{r7, pc}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	80000017 	.word	0x80000017

0800507c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	2250      	movs	r2, #80	; 0x50
 8005090:	4013      	ands	r3, r2
 8005092:	d141      	bne.n	8005118 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	2280      	movs	r2, #128	; 0x80
 800509a:	0092      	lsls	r2, r2, #2
 800509c:	431a      	orrs	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	23c0      	movs	r3, #192	; 0xc0
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	4013      	ands	r3, r2
 80050ae:	d12e      	bne.n	800510e <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d129      	bne.n	800510e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2208      	movs	r2, #8
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d122      	bne.n	800510e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2204      	movs	r2, #4
 80050d0:	4013      	ands	r3, r2
 80050d2:	d110      	bne.n	80050f6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	210c      	movs	r1, #12
 80050e0:	438a      	bics	r2, r1
 80050e2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e8:	4a10      	ldr	r2, [pc, #64]	; (800512c <ADC_DMAConvCplt+0xb0>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	2201      	movs	r2, #1
 80050ee:	431a      	orrs	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	655a      	str	r2, [r3, #84]	; 0x54
 80050f4:	e00b      	b.n	800510e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	2220      	movs	r2, #32
 80050fc:	431a      	orrs	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005106:	2201      	movs	r2, #1
 8005108:	431a      	orrs	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	0018      	movs	r0, r3
 8005112:	f7ff fe93 	bl	8004e3c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005116:	e005      	b.n	8005124 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	0010      	movs	r0, r2
 8005122:	4798      	blx	r3
}
 8005124:	46c0      	nop			; (mov r8, r8)
 8005126:	46bd      	mov	sp, r7
 8005128:	b004      	add	sp, #16
 800512a:	bd80      	pop	{r7, pc}
 800512c:	fffffefe 	.word	0xfffffefe

08005130 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	0018      	movs	r0, r3
 8005142:	f7ff fe83 	bl	8004e4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	46bd      	mov	sp, r7
 800514a:	b004      	add	sp, #16
 800514c:	bd80      	pop	{r7, pc}

0800514e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	2240      	movs	r2, #64	; 0x40
 8005162:	431a      	orrs	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516c:	2204      	movs	r2, #4
 800516e:	431a      	orrs	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	0018      	movs	r0, r3
 8005178:	f7ff fe70 	bl	8004e5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800517c:	46c0      	nop			; (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	b004      	add	sp, #16
 8005182:	bd80      	pop	{r7, pc}

08005184 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <ADC_DelayMicroSecond+0x38>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	490b      	ldr	r1, [pc, #44]	; (80051c0 <ADC_DelayMicroSecond+0x3c>)
 8005192:	0018      	movs	r0, r3
 8005194:	f7fa ffd4 	bl	8000140 <__udivsi3>
 8005198:	0003      	movs	r3, r0
 800519a:	001a      	movs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4353      	muls	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80051a2:	e002      	b.n	80051aa <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f9      	bne.n	80051a4 <ADC_DelayMicroSecond+0x20>
  }
}
 80051b0:	46c0      	nop			; (mov r8, r8)
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	46bd      	mov	sp, r7
 80051b6:	b004      	add	sp, #16
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	20000000 	.word	0x20000000
 80051c0:	000f4240 	.word	0x000f4240

080051c4 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051ce:	2317      	movs	r3, #23
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2250      	movs	r2, #80	; 0x50
 80051e2:	5c9b      	ldrb	r3, [r3, r2]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_ADCEx_Calibration_Start+0x28>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e083      	b.n	80052f4 <HAL_ADCEx_Calibration_Start+0x130>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2250      	movs	r2, #80	; 0x50
 80051f0:	2101      	movs	r1, #1
 80051f2:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2203      	movs	r2, #3
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d108      	bne.n	8005214 <HAL_ADCEx_Calibration_Start+0x50>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2201      	movs	r2, #1
 800520a:	4013      	ands	r3, r2
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_ADCEx_Calibration_Start+0x50>
 8005210:	2301      	movs	r3, #1
 8005212:	e000      	b.n	8005216 <HAL_ADCEx_Calibration_Start+0x52>
 8005214:	2300      	movs	r3, #0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d15b      	bne.n	80052d2 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	4a37      	ldr	r2, [pc, #220]	; (80052fc <HAL_ADCEx_Calibration_Start+0x138>)
 8005220:	4013      	ands	r3, r2
 8005222:	2202      	movs	r2, #2
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2203      	movs	r2, #3
 8005232:	4013      	ands	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2103      	movs	r1, #3
 8005242:	438a      	bics	r2, r1
 8005244:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2180      	movs	r1, #128	; 0x80
 8005252:	0609      	lsls	r1, r1, #24
 8005254:	430a      	orrs	r2, r1
 8005256:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8005258:	f7ff fbcc 	bl	80049f4 <HAL_GetTick>
 800525c:	0003      	movs	r3, r0
 800525e:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005260:	e01d      	b.n	800529e <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005262:	f7ff fbc7 	bl	80049f4 <HAL_GetTick>
 8005266:	0002      	movs	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b0a      	cmp	r3, #10
 800526e:	d916      	bls.n	800529e <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	0fdb      	lsrs	r3, r3, #31
 8005278:	07da      	lsls	r2, r3, #31
 800527a:	2380      	movs	r3, #128	; 0x80
 800527c:	061b      	lsls	r3, r3, #24
 800527e:	429a      	cmp	r2, r3
 8005280:	d10d      	bne.n	800529e <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	2212      	movs	r2, #18
 8005288:	4393      	bics	r3, r2
 800528a:	2210      	movs	r2, #16
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2250      	movs	r2, #80	; 0x50
 8005296:	2100      	movs	r1, #0
 8005298:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e02a      	b.n	80052f4 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	0fdb      	lsrs	r3, r3, #31
 80052a6:	07da      	lsls	r2, r3, #31
 80052a8:	2380      	movs	r3, #128	; 0x80
 80052aa:	061b      	lsls	r3, r3, #24
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d0d8      	beq.n	8005262 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68d9      	ldr	r1, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	430a      	orrs	r2, r1
 80052be:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c4:	2203      	movs	r2, #3
 80052c6:	4393      	bics	r3, r2
 80052c8:	2201      	movs	r2, #1
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	655a      	str	r2, [r3, #84]	; 0x54
 80052d0:	e009      	b.n	80052e6 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d6:	2220      	movs	r2, #32
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80052de:	2317      	movs	r3, #23
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	2201      	movs	r2, #1
 80052e4:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2250      	movs	r2, #80	; 0x50
 80052ea:	2100      	movs	r1, #0
 80052ec:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80052ee:	2317      	movs	r3, #23
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	781b      	ldrb	r3, [r3, #0]
}
 80052f4:	0018      	movs	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b006      	add	sp, #24
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	fffffefd 	.word	0xfffffefd

08005300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	0002      	movs	r2, r0
 8005308:	1dfb      	adds	r3, r7, #7
 800530a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800530c:	1dfb      	adds	r3, r7, #7
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b7f      	cmp	r3, #127	; 0x7f
 8005312:	d809      	bhi.n	8005328 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005314:	1dfb      	adds	r3, r7, #7
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	001a      	movs	r2, r3
 800531a:	231f      	movs	r3, #31
 800531c:	401a      	ands	r2, r3
 800531e:	4b04      	ldr	r3, [pc, #16]	; (8005330 <__NVIC_EnableIRQ+0x30>)
 8005320:	2101      	movs	r1, #1
 8005322:	4091      	lsls	r1, r2
 8005324:	000a      	movs	r2, r1
 8005326:	601a      	str	r2, [r3, #0]
  }
}
 8005328:	46c0      	nop			; (mov r8, r8)
 800532a:	46bd      	mov	sp, r7
 800532c:	b002      	add	sp, #8
 800532e:	bd80      	pop	{r7, pc}
 8005330:	e000e100 	.word	0xe000e100

08005334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005334:	b590      	push	{r4, r7, lr}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	0002      	movs	r2, r0
 800533c:	6039      	str	r1, [r7, #0]
 800533e:	1dfb      	adds	r3, r7, #7
 8005340:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005342:	1dfb      	adds	r3, r7, #7
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b7f      	cmp	r3, #127	; 0x7f
 8005348:	d828      	bhi.n	800539c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800534a:	4a2f      	ldr	r2, [pc, #188]	; (8005408 <__NVIC_SetPriority+0xd4>)
 800534c:	1dfb      	adds	r3, r7, #7
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	b25b      	sxtb	r3, r3
 8005352:	089b      	lsrs	r3, r3, #2
 8005354:	33c0      	adds	r3, #192	; 0xc0
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	589b      	ldr	r3, [r3, r2]
 800535a:	1dfa      	adds	r2, r7, #7
 800535c:	7812      	ldrb	r2, [r2, #0]
 800535e:	0011      	movs	r1, r2
 8005360:	2203      	movs	r2, #3
 8005362:	400a      	ands	r2, r1
 8005364:	00d2      	lsls	r2, r2, #3
 8005366:	21ff      	movs	r1, #255	; 0xff
 8005368:	4091      	lsls	r1, r2
 800536a:	000a      	movs	r2, r1
 800536c:	43d2      	mvns	r2, r2
 800536e:	401a      	ands	r2, r3
 8005370:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	019b      	lsls	r3, r3, #6
 8005376:	22ff      	movs	r2, #255	; 0xff
 8005378:	401a      	ands	r2, r3
 800537a:	1dfb      	adds	r3, r7, #7
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	0018      	movs	r0, r3
 8005380:	2303      	movs	r3, #3
 8005382:	4003      	ands	r3, r0
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005388:	481f      	ldr	r0, [pc, #124]	; (8005408 <__NVIC_SetPriority+0xd4>)
 800538a:	1dfb      	adds	r3, r7, #7
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	b25b      	sxtb	r3, r3
 8005390:	089b      	lsrs	r3, r3, #2
 8005392:	430a      	orrs	r2, r1
 8005394:	33c0      	adds	r3, #192	; 0xc0
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800539a:	e031      	b.n	8005400 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800539c:	4a1b      	ldr	r2, [pc, #108]	; (800540c <__NVIC_SetPriority+0xd8>)
 800539e:	1dfb      	adds	r3, r7, #7
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	0019      	movs	r1, r3
 80053a4:	230f      	movs	r3, #15
 80053a6:	400b      	ands	r3, r1
 80053a8:	3b08      	subs	r3, #8
 80053aa:	089b      	lsrs	r3, r3, #2
 80053ac:	3306      	adds	r3, #6
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	18d3      	adds	r3, r2, r3
 80053b2:	3304      	adds	r3, #4
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	1dfa      	adds	r2, r7, #7
 80053b8:	7812      	ldrb	r2, [r2, #0]
 80053ba:	0011      	movs	r1, r2
 80053bc:	2203      	movs	r2, #3
 80053be:	400a      	ands	r2, r1
 80053c0:	00d2      	lsls	r2, r2, #3
 80053c2:	21ff      	movs	r1, #255	; 0xff
 80053c4:	4091      	lsls	r1, r2
 80053c6:	000a      	movs	r2, r1
 80053c8:	43d2      	mvns	r2, r2
 80053ca:	401a      	ands	r2, r3
 80053cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	019b      	lsls	r3, r3, #6
 80053d2:	22ff      	movs	r2, #255	; 0xff
 80053d4:	401a      	ands	r2, r3
 80053d6:	1dfb      	adds	r3, r7, #7
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	0018      	movs	r0, r3
 80053dc:	2303      	movs	r3, #3
 80053de:	4003      	ands	r3, r0
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053e4:	4809      	ldr	r0, [pc, #36]	; (800540c <__NVIC_SetPriority+0xd8>)
 80053e6:	1dfb      	adds	r3, r7, #7
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	001c      	movs	r4, r3
 80053ec:	230f      	movs	r3, #15
 80053ee:	4023      	ands	r3, r4
 80053f0:	3b08      	subs	r3, #8
 80053f2:	089b      	lsrs	r3, r3, #2
 80053f4:	430a      	orrs	r2, r1
 80053f6:	3306      	adds	r3, #6
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	18c3      	adds	r3, r0, r3
 80053fc:	3304      	adds	r3, #4
 80053fe:	601a      	str	r2, [r3, #0]
}
 8005400:	46c0      	nop			; (mov r8, r8)
 8005402:	46bd      	mov	sp, r7
 8005404:	b003      	add	sp, #12
 8005406:	bd90      	pop	{r4, r7, pc}
 8005408:	e000e100 	.word	0xe000e100
 800540c:	e000ed00 	.word	0xe000ed00

08005410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	1e5a      	subs	r2, r3, #1
 800541c:	2380      	movs	r3, #128	; 0x80
 800541e:	045b      	lsls	r3, r3, #17
 8005420:	429a      	cmp	r2, r3
 8005422:	d301      	bcc.n	8005428 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005424:	2301      	movs	r3, #1
 8005426:	e010      	b.n	800544a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <SysTick_Config+0x44>)
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	3a01      	subs	r2, #1
 800542e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005430:	2301      	movs	r3, #1
 8005432:	425b      	negs	r3, r3
 8005434:	2103      	movs	r1, #3
 8005436:	0018      	movs	r0, r3
 8005438:	f7ff ff7c 	bl	8005334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <SysTick_Config+0x44>)
 800543e:	2200      	movs	r2, #0
 8005440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005442:	4b04      	ldr	r3, [pc, #16]	; (8005454 <SysTick_Config+0x44>)
 8005444:	2207      	movs	r2, #7
 8005446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005448:	2300      	movs	r3, #0
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b002      	add	sp, #8
 8005450:	bd80      	pop	{r7, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	e000e010 	.word	0xe000e010

08005458 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	607a      	str	r2, [r7, #4]
 8005462:	210f      	movs	r1, #15
 8005464:	187b      	adds	r3, r7, r1
 8005466:	1c02      	adds	r2, r0, #0
 8005468:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	187b      	adds	r3, r7, r1
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	b25b      	sxtb	r3, r3
 8005472:	0011      	movs	r1, r2
 8005474:	0018      	movs	r0, r3
 8005476:	f7ff ff5d 	bl	8005334 <__NVIC_SetPriority>
}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	46bd      	mov	sp, r7
 800547e:	b004      	add	sp, #16
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
 8005488:	0002      	movs	r2, r0
 800548a:	1dfb      	adds	r3, r7, #7
 800548c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800548e:	1dfb      	adds	r3, r7, #7
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	b25b      	sxtb	r3, r3
 8005494:	0018      	movs	r0, r3
 8005496:	f7ff ff33 	bl	8005300 <__NVIC_EnableIRQ>
}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	46bd      	mov	sp, r7
 800549e:	b002      	add	sp, #8
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	0018      	movs	r0, r3
 80054ae:	f7ff ffaf 	bl	8005410 <SysTick_Config>
 80054b2:	0003      	movs	r3, r0
}
 80054b4:	0018      	movs	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b002      	add	sp, #8
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e061      	b.n	8005592 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a32      	ldr	r2, [pc, #200]	; (800559c <HAL_DMA_Init+0xe0>)
 80054d4:	4694      	mov	ip, r2
 80054d6:	4463      	add	r3, ip
 80054d8:	2114      	movs	r1, #20
 80054da:	0018      	movs	r0, r3
 80054dc:	f7fa fe30 	bl	8000140 <__udivsi3>
 80054e0:	0003      	movs	r3, r0
 80054e2:	009a      	lsls	r2, r3, #2
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a2d      	ldr	r2, [pc, #180]	; (80055a0 <HAL_DMA_Init+0xe4>)
 80054ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2225      	movs	r2, #37	; 0x25
 80054f2:	2102      	movs	r1, #2
 80054f4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4a28      	ldr	r2, [pc, #160]	; (80055a4 <HAL_DMA_Init+0xe8>)
 8005502:	4013      	ands	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800550e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800551a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	01db      	lsls	r3, r3, #7
 8005544:	429a      	cmp	r2, r3
 8005546:	d018      	beq.n	800557a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005548:	4b17      	ldr	r3, [pc, #92]	; (80055a8 <HAL_DMA_Init+0xec>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005550:	211c      	movs	r1, #28
 8005552:	400b      	ands	r3, r1
 8005554:	210f      	movs	r1, #15
 8005556:	4099      	lsls	r1, r3
 8005558:	000b      	movs	r3, r1
 800555a:	43d9      	mvns	r1, r3
 800555c:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <HAL_DMA_Init+0xec>)
 800555e:	400a      	ands	r2, r1
 8005560:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005562:	4b11      	ldr	r3, [pc, #68]	; (80055a8 <HAL_DMA_Init+0xec>)
 8005564:	6819      	ldr	r1, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556e:	201c      	movs	r0, #28
 8005570:	4003      	ands	r3, r0
 8005572:	409a      	lsls	r2, r3
 8005574:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <HAL_DMA_Init+0xec>)
 8005576:	430a      	orrs	r2, r1
 8005578:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2225      	movs	r2, #37	; 0x25
 8005584:	2101      	movs	r1, #1
 8005586:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2224      	movs	r2, #36	; 0x24
 800558c:	2100      	movs	r1, #0
 800558e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	0018      	movs	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	b004      	add	sp, #16
 8005598:	bd80      	pop	{r7, pc}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	bffdfff8 	.word	0xbffdfff8
 80055a0:	40020000 	.word	0x40020000
 80055a4:	ffff800f 	.word	0xffff800f
 80055a8:	400200a8 	.word	0x400200a8

080055ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ba:	2317      	movs	r3, #23
 80055bc:	18fb      	adds	r3, r7, r3
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2224      	movs	r2, #36	; 0x24
 80055c6:	5c9b      	ldrb	r3, [r3, r2]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_DMA_Start_IT+0x24>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e04f      	b.n	8005670 <HAL_DMA_Start_IT+0xc4>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2224      	movs	r2, #36	; 0x24
 80055d4:	2101      	movs	r1, #1
 80055d6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2225      	movs	r2, #37	; 0x25
 80055dc:	5c9b      	ldrb	r3, [r3, r2]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d13a      	bne.n	800565a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2225      	movs	r2, #37	; 0x25
 80055e8:	2102      	movs	r1, #2
 80055ea:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2101      	movs	r1, #1
 80055fe:	438a      	bics	r2, r1
 8005600:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f96a 	bl	80058e2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	2b00      	cmp	r3, #0
 8005614:	d008      	beq.n	8005628 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	210e      	movs	r1, #14
 8005622:	430a      	orrs	r2, r1
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e00f      	b.n	8005648 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2104      	movs	r1, #4
 8005634:	438a      	bics	r2, r1
 8005636:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	210a      	movs	r1, #10
 8005644:	430a      	orrs	r2, r1
 8005646:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2101      	movs	r1, #1
 8005654:	430a      	orrs	r2, r1
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	e007      	b.n	800566a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2224      	movs	r2, #36	; 0x24
 800565e:	2100      	movs	r1, #0
 8005660:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005662:	2317      	movs	r3, #23
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	2202      	movs	r2, #2
 8005668:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800566a:	2317      	movs	r3, #23
 800566c:	18fb      	adds	r3, r7, r3
 800566e:	781b      	ldrb	r3, [r3, #0]
}
 8005670:	0018      	movs	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	b006      	add	sp, #24
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005680:	230f      	movs	r3, #15
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2225      	movs	r2, #37	; 0x25
 800568c:	5c9b      	ldrb	r3, [r3, r2]
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d008      	beq.n	80056a6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2204      	movs	r2, #4
 8005698:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2224      	movs	r2, #36	; 0x24
 800569e:	2100      	movs	r1, #0
 80056a0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e024      	b.n	80056f0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	210e      	movs	r1, #14
 80056b2:	438a      	bics	r2, r1
 80056b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2101      	movs	r1, #1
 80056c2:	438a      	bics	r2, r1
 80056c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ca:	221c      	movs	r2, #28
 80056cc:	401a      	ands	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	2101      	movs	r1, #1
 80056d4:	4091      	lsls	r1, r2
 80056d6:	000a      	movs	r2, r1
 80056d8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2225      	movs	r2, #37	; 0x25
 80056de:	2101      	movs	r1, #1
 80056e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2224      	movs	r2, #36	; 0x24
 80056e6:	2100      	movs	r1, #0
 80056e8:	5499      	strb	r1, [r3, r2]

    return status;
 80056ea:	230f      	movs	r3, #15
 80056ec:	18fb      	adds	r3, r7, r3
 80056ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80056f0:	0018      	movs	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b004      	add	sp, #16
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005700:	210f      	movs	r1, #15
 8005702:	187b      	adds	r3, r7, r1
 8005704:	2200      	movs	r2, #0
 8005706:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2225      	movs	r2, #37	; 0x25
 800570c:	5c9b      	ldrb	r3, [r3, r2]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d006      	beq.n	8005722 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2204      	movs	r2, #4
 8005718:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800571a:	187b      	adds	r3, r7, r1
 800571c:	2201      	movs	r2, #1
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	e02a      	b.n	8005778 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	210e      	movs	r1, #14
 800572e:	438a      	bics	r2, r1
 8005730:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2101      	movs	r1, #1
 800573e:	438a      	bics	r2, r1
 8005740:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005746:	221c      	movs	r2, #28
 8005748:	401a      	ands	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	2101      	movs	r1, #1
 8005750:	4091      	lsls	r1, r2
 8005752:	000a      	movs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2225      	movs	r2, #37	; 0x25
 800575a:	2101      	movs	r1, #1
 800575c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2224      	movs	r2, #36	; 0x24
 8005762:	2100      	movs	r1, #0
 8005764:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	2b00      	cmp	r3, #0
 800576c:	d004      	beq.n	8005778 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	0010      	movs	r0, r2
 8005776:	4798      	blx	r3
    }
  }
  return status;
 8005778:	230f      	movs	r3, #15
 800577a:	18fb      	adds	r3, r7, r3
 800577c:	781b      	ldrb	r3, [r3, #0]
}
 800577e:	0018      	movs	r0, r3
 8005780:	46bd      	mov	sp, r7
 8005782:	b004      	add	sp, #16
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a2:	221c      	movs	r2, #28
 80057a4:	4013      	ands	r3, r2
 80057a6:	2204      	movs	r2, #4
 80057a8:	409a      	lsls	r2, r3
 80057aa:	0013      	movs	r3, r2
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4013      	ands	r3, r2
 80057b0:	d026      	beq.n	8005800 <HAL_DMA_IRQHandler+0x7a>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2204      	movs	r2, #4
 80057b6:	4013      	ands	r3, r2
 80057b8:	d022      	beq.n	8005800 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2220      	movs	r2, #32
 80057c2:	4013      	ands	r3, r2
 80057c4:	d107      	bne.n	80057d6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2104      	movs	r1, #4
 80057d2:	438a      	bics	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057da:	221c      	movs	r2, #28
 80057dc:	401a      	ands	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	2104      	movs	r1, #4
 80057e4:	4091      	lsls	r1, r2
 80057e6:	000a      	movs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d100      	bne.n	80057f4 <HAL_DMA_IRQHandler+0x6e>
 80057f2:	e071      	b.n	80058d8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	0010      	movs	r0, r2
 80057fc:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80057fe:	e06b      	b.n	80058d8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005804:	221c      	movs	r2, #28
 8005806:	4013      	ands	r3, r2
 8005808:	2202      	movs	r2, #2
 800580a:	409a      	lsls	r2, r3
 800580c:	0013      	movs	r3, r2
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4013      	ands	r3, r2
 8005812:	d02d      	beq.n	8005870 <HAL_DMA_IRQHandler+0xea>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2202      	movs	r2, #2
 8005818:	4013      	ands	r3, r2
 800581a:	d029      	beq.n	8005870 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2220      	movs	r2, #32
 8005824:	4013      	ands	r3, r2
 8005826:	d10b      	bne.n	8005840 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	210a      	movs	r1, #10
 8005834:	438a      	bics	r2, r1
 8005836:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2225      	movs	r2, #37	; 0x25
 800583c:	2101      	movs	r1, #1
 800583e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005844:	221c      	movs	r2, #28
 8005846:	401a      	ands	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	2102      	movs	r1, #2
 800584e:	4091      	lsls	r1, r2
 8005850:	000a      	movs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2224      	movs	r2, #36	; 0x24
 8005858:	2100      	movs	r1, #0
 800585a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	2b00      	cmp	r3, #0
 8005862:	d039      	beq.n	80058d8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	0010      	movs	r0, r2
 800586c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800586e:	e033      	b.n	80058d8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005874:	221c      	movs	r2, #28
 8005876:	4013      	ands	r3, r2
 8005878:	2208      	movs	r2, #8
 800587a:	409a      	lsls	r2, r3
 800587c:	0013      	movs	r3, r2
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4013      	ands	r3, r2
 8005882:	d02a      	beq.n	80058da <HAL_DMA_IRQHandler+0x154>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2208      	movs	r2, #8
 8005888:	4013      	ands	r3, r2
 800588a:	d026      	beq.n	80058da <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	210e      	movs	r1, #14
 8005898:	438a      	bics	r2, r1
 800589a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a0:	221c      	movs	r2, #28
 80058a2:	401a      	ands	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	2101      	movs	r1, #1
 80058aa:	4091      	lsls	r1, r2
 80058ac:	000a      	movs	r2, r1
 80058ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2225      	movs	r2, #37	; 0x25
 80058ba:	2101      	movs	r1, #1
 80058bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2224      	movs	r2, #36	; 0x24
 80058c2:	2100      	movs	r1, #0
 80058c4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	0010      	movs	r0, r2
 80058d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80058d8:	46c0      	nop			; (mov r8, r8)
 80058da:	46c0      	nop			; (mov r8, r8)
}
 80058dc:	46bd      	mov	sp, r7
 80058de:	b004      	add	sp, #16
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b084      	sub	sp, #16
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	607a      	str	r2, [r7, #4]
 80058ee:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f4:	221c      	movs	r2, #28
 80058f6:	401a      	ands	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	2101      	movs	r1, #1
 80058fe:	4091      	lsls	r1, r2
 8005900:	000a      	movs	r2, r1
 8005902:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b10      	cmp	r3, #16
 8005912:	d108      	bne.n	8005926 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005924:	e007      	b.n	8005936 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	60da      	str	r2, [r3, #12]
}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	46bd      	mov	sp, r7
 800593a:	b004      	add	sp, #16
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005956:	e14f      	b.n	8005bf8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2101      	movs	r1, #1
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4091      	lsls	r1, r2
 8005962:	000a      	movs	r2, r1
 8005964:	4013      	ands	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d100      	bne.n	8005970 <HAL_GPIO_Init+0x30>
 800596e:	e140      	b.n	8005bf2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2203      	movs	r2, #3
 8005976:	4013      	ands	r3, r2
 8005978:	2b01      	cmp	r3, #1
 800597a:	d005      	beq.n	8005988 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2203      	movs	r2, #3
 8005982:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005984:	2b02      	cmp	r3, #2
 8005986:	d130      	bne.n	80059ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	2203      	movs	r2, #3
 8005994:	409a      	lsls	r2, r3
 8005996:	0013      	movs	r3, r2
 8005998:	43da      	mvns	r2, r3
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	4013      	ands	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	409a      	lsls	r2, r3
 80059aa:	0013      	movs	r3, r2
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059be:	2201      	movs	r2, #1
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	409a      	lsls	r2, r3
 80059c4:	0013      	movs	r3, r2
 80059c6:	43da      	mvns	r2, r3
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	4013      	ands	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	091b      	lsrs	r3, r3, #4
 80059d4:	2201      	movs	r2, #1
 80059d6:	401a      	ands	r2, r3
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	409a      	lsls	r2, r3
 80059dc:	0013      	movs	r3, r2
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2203      	movs	r2, #3
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d017      	beq.n	8005a26 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	2203      	movs	r2, #3
 8005a02:	409a      	lsls	r2, r3
 8005a04:	0013      	movs	r3, r2
 8005a06:	43da      	mvns	r2, r3
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	409a      	lsls	r2, r3
 8005a18:	0013      	movs	r3, r2
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2203      	movs	r2, #3
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d123      	bne.n	8005a7a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	08da      	lsrs	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3208      	adds	r2, #8
 8005a3a:	0092      	lsls	r2, r2, #2
 8005a3c:	58d3      	ldr	r3, [r2, r3]
 8005a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2207      	movs	r2, #7
 8005a44:	4013      	ands	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	220f      	movs	r2, #15
 8005a4a:	409a      	lsls	r2, r3
 8005a4c:	0013      	movs	r3, r2
 8005a4e:	43da      	mvns	r2, r3
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	4013      	ands	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2107      	movs	r1, #7
 8005a5e:	400b      	ands	r3, r1
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	409a      	lsls	r2, r3
 8005a64:	0013      	movs	r3, r2
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	08da      	lsrs	r2, r3, #3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3208      	adds	r2, #8
 8005a74:	0092      	lsls	r2, r2, #2
 8005a76:	6939      	ldr	r1, [r7, #16]
 8005a78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	2203      	movs	r2, #3
 8005a86:	409a      	lsls	r2, r3
 8005a88:	0013      	movs	r3, r2
 8005a8a:	43da      	mvns	r2, r3
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2203      	movs	r2, #3
 8005a98:	401a      	ands	r2, r3
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	409a      	lsls	r2, r3
 8005aa0:	0013      	movs	r3, r2
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	23c0      	movs	r3, #192	; 0xc0
 8005ab4:	029b      	lsls	r3, r3, #10
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d100      	bne.n	8005abc <HAL_GPIO_Init+0x17c>
 8005aba:	e09a      	b.n	8005bf2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005abc:	4b54      	ldr	r3, [pc, #336]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ac0:	4b53      	ldr	r3, [pc, #332]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ac8:	4a52      	ldr	r2, [pc, #328]	; (8005c14 <HAL_GPIO_Init+0x2d4>)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	089b      	lsrs	r3, r3, #2
 8005ace:	3302      	adds	r3, #2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	589b      	ldr	r3, [r3, r2]
 8005ad4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2203      	movs	r2, #3
 8005ada:	4013      	ands	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	220f      	movs	r2, #15
 8005ae0:	409a      	lsls	r2, r3
 8005ae2:	0013      	movs	r3, r2
 8005ae4:	43da      	mvns	r2, r3
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	23a0      	movs	r3, #160	; 0xa0
 8005af0:	05db      	lsls	r3, r3, #23
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d019      	beq.n	8005b2a <HAL_GPIO_Init+0x1ea>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a47      	ldr	r2, [pc, #284]	; (8005c18 <HAL_GPIO_Init+0x2d8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d013      	beq.n	8005b26 <HAL_GPIO_Init+0x1e6>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a46      	ldr	r2, [pc, #280]	; (8005c1c <HAL_GPIO_Init+0x2dc>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00d      	beq.n	8005b22 <HAL_GPIO_Init+0x1e2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a45      	ldr	r2, [pc, #276]	; (8005c20 <HAL_GPIO_Init+0x2e0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d007      	beq.n	8005b1e <HAL_GPIO_Init+0x1de>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a44      	ldr	r2, [pc, #272]	; (8005c24 <HAL_GPIO_Init+0x2e4>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d101      	bne.n	8005b1a <HAL_GPIO_Init+0x1da>
 8005b16:	2305      	movs	r3, #5
 8005b18:	e008      	b.n	8005b2c <HAL_GPIO_Init+0x1ec>
 8005b1a:	2306      	movs	r3, #6
 8005b1c:	e006      	b.n	8005b2c <HAL_GPIO_Init+0x1ec>
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e004      	b.n	8005b2c <HAL_GPIO_Init+0x1ec>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e002      	b.n	8005b2c <HAL_GPIO_Init+0x1ec>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <HAL_GPIO_Init+0x1ec>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	2103      	movs	r1, #3
 8005b30:	400a      	ands	r2, r1
 8005b32:	0092      	lsls	r2, r2, #2
 8005b34:	4093      	lsls	r3, r2
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b3c:	4935      	ldr	r1, [pc, #212]	; (8005c14 <HAL_GPIO_Init+0x2d4>)
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	089b      	lsrs	r3, r3, #2
 8005b42:	3302      	adds	r3, #2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b4a:	4b37      	ldr	r3, [pc, #220]	; (8005c28 <HAL_GPIO_Init+0x2e8>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	43da      	mvns	r2, r3
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4013      	ands	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	2380      	movs	r3, #128	; 0x80
 8005b60:	035b      	lsls	r3, r3, #13
 8005b62:	4013      	ands	r3, r2
 8005b64:	d003      	beq.n	8005b6e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005b6e:	4b2e      	ldr	r3, [pc, #184]	; (8005c28 <HAL_GPIO_Init+0x2e8>)
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005b74:	4b2c      	ldr	r3, [pc, #176]	; (8005c28 <HAL_GPIO_Init+0x2e8>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	43da      	mvns	r2, r3
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	4013      	ands	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	039b      	lsls	r3, r3, #14
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d003      	beq.n	8005b98 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005b98:	4b23      	ldr	r3, [pc, #140]	; (8005c28 <HAL_GPIO_Init+0x2e8>)
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8005b9e:	4b22      	ldr	r3, [pc, #136]	; (8005c28 <HAL_GPIO_Init+0x2e8>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	43da      	mvns	r2, r3
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4013      	ands	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	2380      	movs	r3, #128	; 0x80
 8005bb4:	029b      	lsls	r3, r3, #10
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d003      	beq.n	8005bc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005bc2:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <HAL_GPIO_Init+0x2e8>)
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bc8:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <HAL_GPIO_Init+0x2e8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	43da      	mvns	r2, r3
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	025b      	lsls	r3, r3, #9
 8005be0:	4013      	ands	r3, r2
 8005be2:	d003      	beq.n	8005bec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005bec:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <HAL_GPIO_Init+0x2e8>)
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	40da      	lsrs	r2, r3
 8005c00:	1e13      	subs	r3, r2, #0
 8005c02:	d000      	beq.n	8005c06 <HAL_GPIO_Init+0x2c6>
 8005c04:	e6a8      	b.n	8005958 <HAL_GPIO_Init+0x18>
  }
}
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	46c0      	nop			; (mov r8, r8)
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b006      	add	sp, #24
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40021000 	.word	0x40021000
 8005c14:	40010000 	.word	0x40010000
 8005c18:	50000400 	.word	0x50000400
 8005c1c:	50000800 	.word	0x50000800
 8005c20:	50000c00 	.word	0x50000c00
 8005c24:	50001c00 	.word	0x50001c00
 8005c28:	40010400 	.word	0x40010400

08005c2c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	0008      	movs	r0, r1
 8005c36:	0011      	movs	r1, r2
 8005c38:	1cbb      	adds	r3, r7, #2
 8005c3a:	1c02      	adds	r2, r0, #0
 8005c3c:	801a      	strh	r2, [r3, #0]
 8005c3e:	1c7b      	adds	r3, r7, #1
 8005c40:	1c0a      	adds	r2, r1, #0
 8005c42:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c44:	1c7b      	adds	r3, r7, #1
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d004      	beq.n	8005c56 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c4c:	1cbb      	adds	r3, r7, #2
 8005c4e:	881a      	ldrh	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005c54:	e003      	b.n	8005c5e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005c56:	1cbb      	adds	r3, r7, #2
 8005c58:	881a      	ldrh	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c5e:	46c0      	nop			; (mov r8, r8)
 8005c60:	46bd      	mov	sp, r7
 8005c62:	b002      	add	sp, #8
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	000a      	movs	r2, r1
 8005c70:	1cbb      	adds	r3, r7, #2
 8005c72:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c7a:	1cbb      	adds	r3, r7, #2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4013      	ands	r3, r2
 8005c82:	041a      	lsls	r2, r3, #16
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	43db      	mvns	r3, r3
 8005c88:	1cb9      	adds	r1, r7, #2
 8005c8a:	8809      	ldrh	r1, [r1, #0]
 8005c8c:	400b      	ands	r3, r1
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	619a      	str	r2, [r3, #24]
}
 8005c94:	46c0      	nop			; (mov r8, r8)
 8005c96:	46bd      	mov	sp, r7
 8005c98:	b004      	add	sp, #16
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	0002      	movs	r2, r0
 8005ca4:	1dbb      	adds	r3, r7, #6
 8005ca6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ca8:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	1dba      	adds	r2, r7, #6
 8005cae:	8812      	ldrh	r2, [r2, #0]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	d008      	beq.n	8005cc6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005cb4:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005cb6:	1dba      	adds	r2, r7, #6
 8005cb8:	8812      	ldrh	r2, [r2, #0]
 8005cba:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005cbc:	1dbb      	adds	r3, r7, #6
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f000 f807 	bl	8005cd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	b002      	add	sp, #8
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	40010400 	.word	0x40010400

08005cd4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	0002      	movs	r2, r0
 8005cdc:	1dbb      	adds	r3, r7, #6
 8005cde:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005ce0:	46c0      	nop			; (mov r8, r8)
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b002      	add	sp, #8
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e082      	b.n	8005e00 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2241      	movs	r2, #65	; 0x41
 8005cfe:	5c9b      	ldrb	r3, [r3, r2]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d107      	bne.n	8005d16 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2240      	movs	r2, #64	; 0x40
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	0018      	movs	r0, r3
 8005d12:	f7fd fc9d 	bl	8003650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2241      	movs	r2, #65	; 0x41
 8005d1a:	2124      	movs	r1, #36	; 0x24
 8005d1c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2101      	movs	r1, #1
 8005d2a:	438a      	bics	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4934      	ldr	r1, [pc, #208]	; (8005e08 <HAL_I2C_Init+0x120>)
 8005d38:	400a      	ands	r2, r1
 8005d3a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4931      	ldr	r1, [pc, #196]	; (8005e0c <HAL_I2C_Init+0x124>)
 8005d48:	400a      	ands	r2, r1
 8005d4a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d108      	bne.n	8005d66 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2180      	movs	r1, #128	; 0x80
 8005d5e:	0209      	lsls	r1, r1, #8
 8005d60:	430a      	orrs	r2, r1
 8005d62:	609a      	str	r2, [r3, #8]
 8005d64:	e007      	b.n	8005d76 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2184      	movs	r1, #132	; 0x84
 8005d70:	0209      	lsls	r1, r1, #8
 8005d72:	430a      	orrs	r2, r1
 8005d74:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d104      	bne.n	8005d88 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2280      	movs	r2, #128	; 0x80
 8005d84:	0112      	lsls	r2, r2, #4
 8005d86:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	491f      	ldr	r1, [pc, #124]	; (8005e10 <HAL_I2C_Init+0x128>)
 8005d94:	430a      	orrs	r2, r1
 8005d96:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	491a      	ldr	r1, [pc, #104]	; (8005e0c <HAL_I2C_Init+0x124>)
 8005da4:	400a      	ands	r2, r1
 8005da6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	431a      	orrs	r2, r3
 8005db2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69d9      	ldr	r1, [r3, #28]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1a      	ldr	r2, [r3, #32]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2101      	movs	r1, #1
 8005dde:	430a      	orrs	r2, r1
 8005de0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2241      	movs	r2, #65	; 0x41
 8005dec:	2120      	movs	r1, #32
 8005dee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2242      	movs	r2, #66	; 0x42
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	0018      	movs	r0, r3
 8005e02:	46bd      	mov	sp, r7
 8005e04:	b002      	add	sp, #8
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	f0ffffff 	.word	0xf0ffffff
 8005e0c:	ffff7fff 	.word	0xffff7fff
 8005e10:	02008000 	.word	0x02008000

08005e14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e14:	b590      	push	{r4, r7, lr}
 8005e16:	b089      	sub	sp, #36	; 0x24
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	0008      	movs	r0, r1
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	0019      	movs	r1, r3
 8005e22:	230a      	movs	r3, #10
 8005e24:	18fb      	adds	r3, r7, r3
 8005e26:	1c02      	adds	r2, r0, #0
 8005e28:	801a      	strh	r2, [r3, #0]
 8005e2a:	2308      	movs	r3, #8
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	1c0a      	adds	r2, r1, #0
 8005e30:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2241      	movs	r2, #65	; 0x41
 8005e36:	5c9b      	ldrb	r3, [r3, r2]
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	d000      	beq.n	8005e40 <HAL_I2C_Master_Transmit+0x2c>
 8005e3e:	e0e7      	b.n	8006010 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2240      	movs	r2, #64	; 0x40
 8005e44:	5c9b      	ldrb	r3, [r3, r2]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_I2C_Master_Transmit+0x3a>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e0e1      	b.n	8006012 <HAL_I2C_Master_Transmit+0x1fe>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2240      	movs	r2, #64	; 0x40
 8005e52:	2101      	movs	r1, #1
 8005e54:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e56:	f7fe fdcd 	bl	80049f4 <HAL_GetTick>
 8005e5a:	0003      	movs	r3, r0
 8005e5c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e5e:	2380      	movs	r3, #128	; 0x80
 8005e60:	0219      	lsls	r1, r3, #8
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	2319      	movs	r3, #25
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f000 fa04 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 8005e70:	1e03      	subs	r3, r0, #0
 8005e72:	d001      	beq.n	8005e78 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e0cc      	b.n	8006012 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2241      	movs	r2, #65	; 0x41
 8005e7c:	2121      	movs	r1, #33	; 0x21
 8005e7e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2242      	movs	r2, #66	; 0x42
 8005e84:	2110      	movs	r1, #16
 8005e86:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2208      	movs	r2, #8
 8005e98:	18ba      	adds	r2, r7, r2
 8005e9a:	8812      	ldrh	r2, [r2, #0]
 8005e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2bff      	cmp	r3, #255	; 0xff
 8005eac:	d911      	bls.n	8005ed2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	22ff      	movs	r2, #255	; 0xff
 8005eb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	2380      	movs	r3, #128	; 0x80
 8005ebc:	045c      	lsls	r4, r3, #17
 8005ebe:	230a      	movs	r3, #10
 8005ec0:	18fb      	adds	r3, r7, r3
 8005ec2:	8819      	ldrh	r1, [r3, #0]
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	4b55      	ldr	r3, [pc, #340]	; (800601c <HAL_I2C_Master_Transmit+0x208>)
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	0023      	movs	r3, r4
 8005ecc:	f000 fc2e 	bl	800672c <I2C_TransferConfig>
 8005ed0:	e075      	b.n	8005fbe <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	2380      	movs	r3, #128	; 0x80
 8005ee4:	049c      	lsls	r4, r3, #18
 8005ee6:	230a      	movs	r3, #10
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	8819      	ldrh	r1, [r3, #0]
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	4b4b      	ldr	r3, [pc, #300]	; (800601c <HAL_I2C_Master_Transmit+0x208>)
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	0023      	movs	r3, r4
 8005ef4:	f000 fc1a 	bl	800672c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005ef8:	e061      	b.n	8005fbe <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	0018      	movs	r0, r3
 8005f02:	f000 fa07 	bl	8006314 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f06:	1e03      	subs	r3, r0, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e081      	b.n	8006012 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	781a      	ldrb	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d03a      	beq.n	8005fbe <HAL_I2C_Master_Transmit+0x1aa>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d136      	bne.n	8005fbe <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	0013      	movs	r3, r2
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2180      	movs	r1, #128	; 0x80
 8005f5e:	f000 f98b 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 8005f62:	1e03      	subs	r3, r0, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e053      	b.n	8006012 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2bff      	cmp	r3, #255	; 0xff
 8005f72:	d911      	bls.n	8005f98 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	22ff      	movs	r2, #255	; 0xff
 8005f78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	2380      	movs	r3, #128	; 0x80
 8005f82:	045c      	lsls	r4, r3, #17
 8005f84:	230a      	movs	r3, #10
 8005f86:	18fb      	adds	r3, r7, r3
 8005f88:	8819      	ldrh	r1, [r3, #0]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	0023      	movs	r3, r4
 8005f92:	f000 fbcb 	bl	800672c <I2C_TransferConfig>
 8005f96:	e012      	b.n	8005fbe <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	049c      	lsls	r4, r3, #18
 8005fac:	230a      	movs	r3, #10
 8005fae:	18fb      	adds	r3, r7, r3
 8005fb0:	8819      	ldrh	r1, [r3, #0]
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	0023      	movs	r3, r4
 8005fba:	f000 fbb7 	bl	800672c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d198      	bne.n	8005efa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	0018      	movs	r0, r3
 8005fd0:	f000 f9e6 	bl	80063a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fd4:	1e03      	subs	r3, r0, #0
 8005fd6:	d001      	beq.n	8005fdc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e01a      	b.n	8006012 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	490c      	ldr	r1, [pc, #48]	; (8006020 <HAL_I2C_Master_Transmit+0x20c>)
 8005ff0:	400a      	ands	r2, r1
 8005ff2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2241      	movs	r2, #65	; 0x41
 8005ff8:	2120      	movs	r1, #32
 8005ffa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2242      	movs	r2, #66	; 0x42
 8006000:	2100      	movs	r1, #0
 8006002:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2240      	movs	r2, #64	; 0x40
 8006008:	2100      	movs	r1, #0
 800600a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	e000      	b.n	8006012 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8006010:	2302      	movs	r3, #2
  }
}
 8006012:	0018      	movs	r0, r3
 8006014:	46bd      	mov	sp, r7
 8006016:	b007      	add	sp, #28
 8006018:	bd90      	pop	{r4, r7, pc}
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	80002000 	.word	0x80002000
 8006020:	fe00e800 	.word	0xfe00e800

08006024 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006024:	b590      	push	{r4, r7, lr}
 8006026:	b089      	sub	sp, #36	; 0x24
 8006028:	af02      	add	r7, sp, #8
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	0008      	movs	r0, r1
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	0019      	movs	r1, r3
 8006032:	230a      	movs	r3, #10
 8006034:	18fb      	adds	r3, r7, r3
 8006036:	1c02      	adds	r2, r0, #0
 8006038:	801a      	strh	r2, [r3, #0]
 800603a:	2308      	movs	r3, #8
 800603c:	18fb      	adds	r3, r7, r3
 800603e:	1c0a      	adds	r2, r1, #0
 8006040:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2241      	movs	r2, #65	; 0x41
 8006046:	5c9b      	ldrb	r3, [r3, r2]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b20      	cmp	r3, #32
 800604c:	d000      	beq.n	8006050 <HAL_I2C_Master_Receive+0x2c>
 800604e:	e0e8      	b.n	8006222 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2240      	movs	r2, #64	; 0x40
 8006054:	5c9b      	ldrb	r3, [r3, r2]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_I2C_Master_Receive+0x3a>
 800605a:	2302      	movs	r3, #2
 800605c:	e0e2      	b.n	8006224 <HAL_I2C_Master_Receive+0x200>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2240      	movs	r2, #64	; 0x40
 8006062:	2101      	movs	r1, #1
 8006064:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006066:	f7fe fcc5 	bl	80049f4 <HAL_GetTick>
 800606a:	0003      	movs	r3, r0
 800606c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800606e:	2380      	movs	r3, #128	; 0x80
 8006070:	0219      	lsls	r1, r3, #8
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	2319      	movs	r3, #25
 800607a:	2201      	movs	r2, #1
 800607c:	f000 f8fc 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 8006080:	1e03      	subs	r3, r0, #0
 8006082:	d001      	beq.n	8006088 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e0cd      	b.n	8006224 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2241      	movs	r2, #65	; 0x41
 800608c:	2122      	movs	r1, #34	; 0x22
 800608e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2242      	movs	r2, #66	; 0x42
 8006094:	2110      	movs	r1, #16
 8006096:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2208      	movs	r2, #8
 80060a8:	18ba      	adds	r2, r7, r2
 80060aa:	8812      	ldrh	r2, [r2, #0]
 80060ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2bff      	cmp	r3, #255	; 0xff
 80060bc:	d911      	bls.n	80060e2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	22ff      	movs	r2, #255	; 0xff
 80060c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	2380      	movs	r3, #128	; 0x80
 80060cc:	045c      	lsls	r4, r3, #17
 80060ce:	230a      	movs	r3, #10
 80060d0:	18fb      	adds	r3, r7, r3
 80060d2:	8819      	ldrh	r1, [r3, #0]
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	4b55      	ldr	r3, [pc, #340]	; (800622c <HAL_I2C_Master_Receive+0x208>)
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	0023      	movs	r3, r4
 80060dc:	f000 fb26 	bl	800672c <I2C_TransferConfig>
 80060e0:	e076      	b.n	80061d0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	2380      	movs	r3, #128	; 0x80
 80060f4:	049c      	lsls	r4, r3, #18
 80060f6:	230a      	movs	r3, #10
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	8819      	ldrh	r1, [r3, #0]
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	4b4b      	ldr	r3, [pc, #300]	; (800622c <HAL_I2C_Master_Receive+0x208>)
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	0023      	movs	r3, r4
 8006104:	f000 fb12 	bl	800672c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006108:	e062      	b.n	80061d0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	0018      	movs	r0, r3
 8006112:	f000 f989 	bl	8006428 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006116:	1e03      	subs	r3, r0, #0
 8006118:	d001      	beq.n	800611e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e082      	b.n	8006224 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006146:	b29b      	uxth	r3, r3
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d03a      	beq.n	80061d0 <HAL_I2C_Master_Receive+0x1ac>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615e:	2b00      	cmp	r3, #0
 8006160:	d136      	bne.n	80061d0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	0013      	movs	r3, r2
 800616c:	2200      	movs	r2, #0
 800616e:	2180      	movs	r1, #128	; 0x80
 8006170:	f000 f882 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 8006174:	1e03      	subs	r3, r0, #0
 8006176:	d001      	beq.n	800617c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e053      	b.n	8006224 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	2bff      	cmp	r3, #255	; 0xff
 8006184:	d911      	bls.n	80061aa <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	22ff      	movs	r2, #255	; 0xff
 800618a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006190:	b2da      	uxtb	r2, r3
 8006192:	2380      	movs	r3, #128	; 0x80
 8006194:	045c      	lsls	r4, r3, #17
 8006196:	230a      	movs	r3, #10
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	8819      	ldrh	r1, [r3, #0]
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	2300      	movs	r3, #0
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	0023      	movs	r3, r4
 80061a4:	f000 fac2 	bl	800672c <I2C_TransferConfig>
 80061a8:	e012      	b.n	80061d0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	2380      	movs	r3, #128	; 0x80
 80061bc:	049c      	lsls	r4, r3, #18
 80061be:	230a      	movs	r3, #10
 80061c0:	18fb      	adds	r3, r7, r3
 80061c2:	8819      	ldrh	r1, [r3, #0]
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	2300      	movs	r3, #0
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	0023      	movs	r3, r4
 80061cc:	f000 faae 	bl	800672c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d197      	bne.n	800610a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	0018      	movs	r0, r3
 80061e2:	f000 f8dd 	bl	80063a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061e6:	1e03      	subs	r3, r0, #0
 80061e8:	d001      	beq.n	80061ee <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e01a      	b.n	8006224 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2220      	movs	r2, #32
 80061f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	490b      	ldr	r1, [pc, #44]	; (8006230 <HAL_I2C_Master_Receive+0x20c>)
 8006202:	400a      	ands	r2, r1
 8006204:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2241      	movs	r2, #65	; 0x41
 800620a:	2120      	movs	r1, #32
 800620c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2242      	movs	r2, #66	; 0x42
 8006212:	2100      	movs	r1, #0
 8006214:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2240      	movs	r2, #64	; 0x40
 800621a:	2100      	movs	r1, #0
 800621c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	e000      	b.n	8006224 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8006222:	2302      	movs	r3, #2
  }
}
 8006224:	0018      	movs	r0, r3
 8006226:	46bd      	mov	sp, r7
 8006228:	b007      	add	sp, #28
 800622a:	bd90      	pop	{r4, r7, pc}
 800622c:	80002400 	.word	0x80002400
 8006230:	fe00e800 	.word	0xfe00e800

08006234 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	2202      	movs	r2, #2
 8006244:	4013      	ands	r3, r2
 8006246:	2b02      	cmp	r3, #2
 8006248:	d103      	bne.n	8006252 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2200      	movs	r2, #0
 8006250:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	2201      	movs	r2, #1
 800625a:	4013      	ands	r3, r2
 800625c:	2b01      	cmp	r3, #1
 800625e:	d007      	beq.n	8006270 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2101      	movs	r1, #1
 800626c:	430a      	orrs	r2, r1
 800626e:	619a      	str	r2, [r3, #24]
  }
}
 8006270:	46c0      	nop			; (mov r8, r8)
 8006272:	46bd      	mov	sp, r7
 8006274:	b002      	add	sp, #8
 8006276:	bd80      	pop	{r7, pc}

08006278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	1dfb      	adds	r3, r7, #7
 8006286:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006288:	e030      	b.n	80062ec <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	3301      	adds	r3, #1
 800628e:	d02d      	beq.n	80062ec <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006290:	f7fe fbb0 	bl	80049f4 <HAL_GetTick>
 8006294:	0002      	movs	r2, r0
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d302      	bcc.n	80062a6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d122      	bne.n	80062ec <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	4013      	ands	r3, r2
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	425a      	negs	r2, r3
 80062b6:	4153      	adcs	r3, r2
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	001a      	movs	r2, r3
 80062bc:	1dfb      	adds	r3, r7, #7
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d113      	bne.n	80062ec <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c8:	2220      	movs	r2, #32
 80062ca:	431a      	orrs	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2241      	movs	r2, #65	; 0x41
 80062d4:	2120      	movs	r1, #32
 80062d6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2242      	movs	r2, #66	; 0x42
 80062dc:	2100      	movs	r1, #0
 80062de:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2240      	movs	r2, #64	; 0x40
 80062e4:	2100      	movs	r1, #0
 80062e6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e00f      	b.n	800630c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	4013      	ands	r3, r2
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	425a      	negs	r2, r3
 80062fc:	4153      	adcs	r3, r2
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	001a      	movs	r2, r3
 8006302:	1dfb      	adds	r3, r7, #7
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d0bf      	beq.n	800628a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	0018      	movs	r0, r3
 800630e:	46bd      	mov	sp, r7
 8006310:	b004      	add	sp, #16
 8006312:	bd80      	pop	{r7, pc}

08006314 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006320:	e032      	b.n	8006388 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	0018      	movs	r0, r3
 800632a:	f000 f8ff 	bl	800652c <I2C_IsErrorOccurred>
 800632e:	1e03      	subs	r3, r0, #0
 8006330:	d001      	beq.n	8006336 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e030      	b.n	8006398 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	3301      	adds	r3, #1
 800633a:	d025      	beq.n	8006388 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800633c:	f7fe fb5a 	bl	80049f4 <HAL_GetTick>
 8006340:	0002      	movs	r2, r0
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	429a      	cmp	r2, r3
 800634a:	d302      	bcc.n	8006352 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d11a      	bne.n	8006388 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	2202      	movs	r2, #2
 800635a:	4013      	ands	r3, r2
 800635c:	2b02      	cmp	r3, #2
 800635e:	d013      	beq.n	8006388 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006364:	2220      	movs	r2, #32
 8006366:	431a      	orrs	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2241      	movs	r2, #65	; 0x41
 8006370:	2120      	movs	r1, #32
 8006372:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2242      	movs	r2, #66	; 0x42
 8006378:	2100      	movs	r1, #0
 800637a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2240      	movs	r2, #64	; 0x40
 8006380:	2100      	movs	r1, #0
 8006382:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e007      	b.n	8006398 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	2202      	movs	r2, #2
 8006390:	4013      	ands	r3, r2
 8006392:	2b02      	cmp	r3, #2
 8006394:	d1c5      	bne.n	8006322 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	0018      	movs	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	b004      	add	sp, #16
 800639e:	bd80      	pop	{r7, pc}

080063a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063ac:	e02f      	b.n	800640e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	0018      	movs	r0, r3
 80063b6:	f000 f8b9 	bl	800652c <I2C_IsErrorOccurred>
 80063ba:	1e03      	subs	r3, r0, #0
 80063bc:	d001      	beq.n	80063c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e02d      	b.n	800641e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c2:	f7fe fb17 	bl	80049f4 <HAL_GetTick>
 80063c6:	0002      	movs	r2, r0
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d302      	bcc.n	80063d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d11a      	bne.n	800640e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	2220      	movs	r2, #32
 80063e0:	4013      	ands	r3, r2
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d013      	beq.n	800640e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ea:	2220      	movs	r2, #32
 80063ec:	431a      	orrs	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2241      	movs	r2, #65	; 0x41
 80063f6:	2120      	movs	r1, #32
 80063f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2242      	movs	r2, #66	; 0x42
 80063fe:	2100      	movs	r1, #0
 8006400:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2240      	movs	r2, #64	; 0x40
 8006406:	2100      	movs	r1, #0
 8006408:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e007      	b.n	800641e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	2220      	movs	r2, #32
 8006416:	4013      	ands	r3, r2
 8006418:	2b20      	cmp	r3, #32
 800641a:	d1c8      	bne.n	80063ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	0018      	movs	r0, r3
 8006420:	46bd      	mov	sp, r7
 8006422:	b004      	add	sp, #16
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006434:	e06b      	b.n	800650e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	0018      	movs	r0, r3
 800643e:	f000 f875 	bl	800652c <I2C_IsErrorOccurred>
 8006442:	1e03      	subs	r3, r0, #0
 8006444:	d001      	beq.n	800644a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e069      	b.n	800651e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	2220      	movs	r2, #32
 8006452:	4013      	ands	r3, r2
 8006454:	2b20      	cmp	r3, #32
 8006456:	d138      	bne.n	80064ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	2204      	movs	r2, #4
 8006460:	4013      	ands	r3, r2
 8006462:	2b04      	cmp	r3, #4
 8006464:	d105      	bne.n	8006472 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e055      	b.n	800651e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	2210      	movs	r2, #16
 800647a:	4013      	ands	r3, r2
 800647c:	2b10      	cmp	r3, #16
 800647e:	d107      	bne.n	8006490 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2210      	movs	r2, #16
 8006486:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2204      	movs	r2, #4
 800648c:	645a      	str	r2, [r3, #68]	; 0x44
 800648e:	e002      	b.n	8006496 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2220      	movs	r2, #32
 800649c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	491f      	ldr	r1, [pc, #124]	; (8006528 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80064aa:	400a      	ands	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2241      	movs	r2, #65	; 0x41
 80064b2:	2120      	movs	r1, #32
 80064b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2242      	movs	r2, #66	; 0x42
 80064ba:	2100      	movs	r1, #0
 80064bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2240      	movs	r2, #64	; 0x40
 80064c2:	2100      	movs	r1, #0
 80064c4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e029      	b.n	800651e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ca:	f7fe fa93 	bl	80049f4 <HAL_GetTick>
 80064ce:	0002      	movs	r2, r0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d302      	bcc.n	80064e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d116      	bne.n	800650e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	2204      	movs	r2, #4
 80064e8:	4013      	ands	r3, r2
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d00f      	beq.n	800650e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f2:	2220      	movs	r2, #32
 80064f4:	431a      	orrs	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2241      	movs	r2, #65	; 0x41
 80064fe:	2120      	movs	r1, #32
 8006500:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2240      	movs	r2, #64	; 0x40
 8006506:	2100      	movs	r1, #0
 8006508:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e007      	b.n	800651e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	2204      	movs	r2, #4
 8006516:	4013      	ands	r3, r2
 8006518:	2b04      	cmp	r3, #4
 800651a:	d18c      	bne.n	8006436 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	0018      	movs	r0, r3
 8006520:	46bd      	mov	sp, r7
 8006522:	b004      	add	sp, #16
 8006524:	bd80      	pop	{r7, pc}
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	fe00e800 	.word	0xfe00e800

0800652c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800652c:	b590      	push	{r4, r7, lr}
 800652e:	b08b      	sub	sp, #44	; 0x2c
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006538:	2327      	movs	r3, #39	; 0x27
 800653a:	18fb      	adds	r3, r7, r3
 800653c:	2200      	movs	r2, #0
 800653e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006548:	2300      	movs	r3, #0
 800654a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2210      	movs	r2, #16
 8006554:	4013      	ands	r3, r2
 8006556:	d100      	bne.n	800655a <I2C_IsErrorOccurred+0x2e>
 8006558:	e082      	b.n	8006660 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2210      	movs	r2, #16
 8006560:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006562:	e060      	b.n	8006626 <I2C_IsErrorOccurred+0xfa>
 8006564:	2427      	movs	r4, #39	; 0x27
 8006566:	193b      	adds	r3, r7, r4
 8006568:	193a      	adds	r2, r7, r4
 800656a:	7812      	ldrb	r2, [r2, #0]
 800656c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	3301      	adds	r3, #1
 8006572:	d058      	beq.n	8006626 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006574:	f7fe fa3e 	bl	80049f4 <HAL_GetTick>
 8006578:	0002      	movs	r2, r0
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	429a      	cmp	r2, r3
 8006582:	d306      	bcc.n	8006592 <I2C_IsErrorOccurred+0x66>
 8006584:	193b      	adds	r3, r7, r4
 8006586:	193a      	adds	r2, r7, r4
 8006588:	7812      	ldrb	r2, [r2, #0]
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d149      	bne.n	8006626 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	2380      	movs	r3, #128	; 0x80
 800659a:	01db      	lsls	r3, r3, #7
 800659c:	4013      	ands	r3, r2
 800659e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065a0:	2013      	movs	r0, #19
 80065a2:	183b      	adds	r3, r7, r0
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	2142      	movs	r1, #66	; 0x42
 80065a8:	5c52      	ldrb	r2, [r2, r1]
 80065aa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	2380      	movs	r3, #128	; 0x80
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	401a      	ands	r2, r3
 80065b8:	2380      	movs	r3, #128	; 0x80
 80065ba:	021b      	lsls	r3, r3, #8
 80065bc:	429a      	cmp	r2, r3
 80065be:	d126      	bne.n	800660e <I2C_IsErrorOccurred+0xe2>
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	2380      	movs	r3, #128	; 0x80
 80065c4:	01db      	lsls	r3, r3, #7
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d021      	beq.n	800660e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80065ca:	183b      	adds	r3, r7, r0
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	d01d      	beq.n	800660e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2180      	movs	r1, #128	; 0x80
 80065de:	01c9      	lsls	r1, r1, #7
 80065e0:	430a      	orrs	r2, r1
 80065e2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80065e4:	f7fe fa06 	bl	80049f4 <HAL_GetTick>
 80065e8:	0003      	movs	r3, r0
 80065ea:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065ec:	e00f      	b.n	800660e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80065ee:	f7fe fa01 	bl	80049f4 <HAL_GetTick>
 80065f2:	0002      	movs	r2, r0
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b19      	cmp	r3, #25
 80065fa:	d908      	bls.n	800660e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	2220      	movs	r2, #32
 8006600:	4313      	orrs	r3, r2
 8006602:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006604:	2327      	movs	r3, #39	; 0x27
 8006606:	18fb      	adds	r3, r7, r3
 8006608:	2201      	movs	r2, #1
 800660a:	701a      	strb	r2, [r3, #0]

              break;
 800660c:	e00b      	b.n	8006626 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	2220      	movs	r2, #32
 8006616:	4013      	ands	r3, r2
 8006618:	2127      	movs	r1, #39	; 0x27
 800661a:	187a      	adds	r2, r7, r1
 800661c:	1879      	adds	r1, r7, r1
 800661e:	7809      	ldrb	r1, [r1, #0]
 8006620:	7011      	strb	r1, [r2, #0]
 8006622:	2b20      	cmp	r3, #32
 8006624:	d1e3      	bne.n	80065ee <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	2220      	movs	r2, #32
 800662e:	4013      	ands	r3, r2
 8006630:	2b20      	cmp	r3, #32
 8006632:	d004      	beq.n	800663e <I2C_IsErrorOccurred+0x112>
 8006634:	2327      	movs	r3, #39	; 0x27
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d092      	beq.n	8006564 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800663e:	2327      	movs	r3, #39	; 0x27
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d103      	bne.n	8006650 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2220      	movs	r2, #32
 800664e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	2204      	movs	r2, #4
 8006654:	4313      	orrs	r3, r2
 8006656:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006658:	2327      	movs	r3, #39	; 0x27
 800665a:	18fb      	adds	r3, r7, r3
 800665c:	2201      	movs	r2, #1
 800665e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	2380      	movs	r3, #128	; 0x80
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	4013      	ands	r3, r2
 8006670:	d00c      	beq.n	800668c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	2201      	movs	r2, #1
 8006676:	4313      	orrs	r3, r2
 8006678:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2280      	movs	r2, #128	; 0x80
 8006680:	0052      	lsls	r2, r2, #1
 8006682:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006684:	2327      	movs	r3, #39	; 0x27
 8006686:	18fb      	adds	r3, r7, r3
 8006688:	2201      	movs	r2, #1
 800668a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	2380      	movs	r3, #128	; 0x80
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	4013      	ands	r3, r2
 8006694:	d00c      	beq.n	80066b0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	2208      	movs	r2, #8
 800669a:	4313      	orrs	r3, r2
 800669c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2280      	movs	r2, #128	; 0x80
 80066a4:	00d2      	lsls	r2, r2, #3
 80066a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066a8:	2327      	movs	r3, #39	; 0x27
 80066aa:	18fb      	adds	r3, r7, r3
 80066ac:	2201      	movs	r2, #1
 80066ae:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	2380      	movs	r3, #128	; 0x80
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4013      	ands	r3, r2
 80066b8:	d00c      	beq.n	80066d4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	2202      	movs	r2, #2
 80066be:	4313      	orrs	r3, r2
 80066c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2280      	movs	r2, #128	; 0x80
 80066c8:	0092      	lsls	r2, r2, #2
 80066ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066cc:	2327      	movs	r3, #39	; 0x27
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	2201      	movs	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80066d4:	2327      	movs	r3, #39	; 0x27
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d01d      	beq.n	800671a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	0018      	movs	r0, r3
 80066e2:	f7ff fda7 	bl	8006234 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	490d      	ldr	r1, [pc, #52]	; (8006728 <I2C_IsErrorOccurred+0x1fc>)
 80066f2:	400a      	ands	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	431a      	orrs	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2241      	movs	r2, #65	; 0x41
 8006706:	2120      	movs	r1, #32
 8006708:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2242      	movs	r2, #66	; 0x42
 800670e:	2100      	movs	r1, #0
 8006710:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2240      	movs	r2, #64	; 0x40
 8006716:	2100      	movs	r1, #0
 8006718:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800671a:	2327      	movs	r3, #39	; 0x27
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	781b      	ldrb	r3, [r3, #0]
}
 8006720:	0018      	movs	r0, r3
 8006722:	46bd      	mov	sp, r7
 8006724:	b00b      	add	sp, #44	; 0x2c
 8006726:	bd90      	pop	{r4, r7, pc}
 8006728:	fe00e800 	.word	0xfe00e800

0800672c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800672c:	b590      	push	{r4, r7, lr}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	0008      	movs	r0, r1
 8006736:	0011      	movs	r1, r2
 8006738:	607b      	str	r3, [r7, #4]
 800673a:	240a      	movs	r4, #10
 800673c:	193b      	adds	r3, r7, r4
 800673e:	1c02      	adds	r2, r0, #0
 8006740:	801a      	strh	r2, [r3, #0]
 8006742:	2009      	movs	r0, #9
 8006744:	183b      	adds	r3, r7, r0
 8006746:	1c0a      	adds	r2, r1, #0
 8006748:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800674a:	193b      	adds	r3, r7, r4
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	059b      	lsls	r3, r3, #22
 8006750:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006752:	183b      	adds	r3, r7, r0
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	0419      	lsls	r1, r3, #16
 8006758:	23ff      	movs	r3, #255	; 0xff
 800675a:	041b      	lsls	r3, r3, #16
 800675c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800675e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006766:	4313      	orrs	r3, r2
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	085b      	lsrs	r3, r3, #1
 800676c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006776:	0d51      	lsrs	r1, r2, #21
 8006778:	2280      	movs	r2, #128	; 0x80
 800677a:	00d2      	lsls	r2, r2, #3
 800677c:	400a      	ands	r2, r1
 800677e:	4907      	ldr	r1, [pc, #28]	; (800679c <I2C_TransferConfig+0x70>)
 8006780:	430a      	orrs	r2, r1
 8006782:	43d2      	mvns	r2, r2
 8006784:	401a      	ands	r2, r3
 8006786:	0011      	movs	r1, r2
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	430a      	orrs	r2, r1
 8006790:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006792:	46c0      	nop			; (mov r8, r8)
 8006794:	46bd      	mov	sp, r7
 8006796:	b007      	add	sp, #28
 8006798:	bd90      	pop	{r4, r7, pc}
 800679a:	46c0      	nop			; (mov r8, r8)
 800679c:	03ff63ff 	.word	0x03ff63ff

080067a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2241      	movs	r2, #65	; 0x41
 80067ae:	5c9b      	ldrb	r3, [r3, r2]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d138      	bne.n	8006828 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2240      	movs	r2, #64	; 0x40
 80067ba:	5c9b      	ldrb	r3, [r3, r2]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e032      	b.n	800682a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2240      	movs	r2, #64	; 0x40
 80067c8:	2101      	movs	r1, #1
 80067ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2241      	movs	r2, #65	; 0x41
 80067d0:	2124      	movs	r1, #36	; 0x24
 80067d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2101      	movs	r1, #1
 80067e0:	438a      	bics	r2, r1
 80067e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4911      	ldr	r1, [pc, #68]	; (8006834 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80067f0:	400a      	ands	r2, r1
 80067f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6819      	ldr	r1, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2101      	movs	r1, #1
 8006810:	430a      	orrs	r2, r1
 8006812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2241      	movs	r2, #65	; 0x41
 8006818:	2120      	movs	r1, #32
 800681a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2240      	movs	r2, #64	; 0x40
 8006820:	2100      	movs	r1, #0
 8006822:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	e000      	b.n	800682a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006828:	2302      	movs	r3, #2
  }
}
 800682a:	0018      	movs	r0, r3
 800682c:	46bd      	mov	sp, r7
 800682e:	b002      	add	sp, #8
 8006830:	bd80      	pop	{r7, pc}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	ffffefff 	.word	0xffffefff

08006838 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2241      	movs	r2, #65	; 0x41
 8006846:	5c9b      	ldrb	r3, [r3, r2]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b20      	cmp	r3, #32
 800684c:	d139      	bne.n	80068c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2240      	movs	r2, #64	; 0x40
 8006852:	5c9b      	ldrb	r3, [r3, r2]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006858:	2302      	movs	r3, #2
 800685a:	e033      	b.n	80068c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2240      	movs	r2, #64	; 0x40
 8006860:	2101      	movs	r1, #1
 8006862:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2241      	movs	r2, #65	; 0x41
 8006868:	2124      	movs	r1, #36	; 0x24
 800686a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2101      	movs	r1, #1
 8006878:	438a      	bics	r2, r1
 800687a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4a11      	ldr	r2, [pc, #68]	; (80068cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006888:	4013      	ands	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	021b      	lsls	r3, r3, #8
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2101      	movs	r1, #1
 80068aa:	430a      	orrs	r2, r1
 80068ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2241      	movs	r2, #65	; 0x41
 80068b2:	2120      	movs	r1, #32
 80068b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2240      	movs	r2, #64	; 0x40
 80068ba:	2100      	movs	r1, #0
 80068bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e000      	b.n	80068c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
  }
}
 80068c4:	0018      	movs	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b004      	add	sp, #16
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	fffff0ff 	.word	0xfffff0ff

080068d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068d0:	b5b0      	push	{r4, r5, r7, lr}
 80068d2:	b08a      	sub	sp, #40	; 0x28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d102      	bne.n	80068e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	f000 fbaf 	bl	8007042 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068e4:	4bcf      	ldr	r3, [pc, #828]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	220c      	movs	r2, #12
 80068ea:	4013      	ands	r3, r2
 80068ec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068ee:	4bcd      	ldr	r3, [pc, #820]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	2380      	movs	r3, #128	; 0x80
 80068f4:	025b      	lsls	r3, r3, #9
 80068f6:	4013      	ands	r3, r2
 80068f8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2201      	movs	r2, #1
 8006900:	4013      	ands	r3, r2
 8006902:	d100      	bne.n	8006906 <HAL_RCC_OscConfig+0x36>
 8006904:	e07e      	b.n	8006a04 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	2b08      	cmp	r3, #8
 800690a:	d007      	beq.n	800691c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	2b0c      	cmp	r3, #12
 8006910:	d112      	bne.n	8006938 <HAL_RCC_OscConfig+0x68>
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	2380      	movs	r3, #128	; 0x80
 8006916:	025b      	lsls	r3, r3, #9
 8006918:	429a      	cmp	r2, r3
 800691a:	d10d      	bne.n	8006938 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800691c:	4bc1      	ldr	r3, [pc, #772]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	2380      	movs	r3, #128	; 0x80
 8006922:	029b      	lsls	r3, r3, #10
 8006924:	4013      	ands	r3, r2
 8006926:	d100      	bne.n	800692a <HAL_RCC_OscConfig+0x5a>
 8006928:	e06b      	b.n	8006a02 <HAL_RCC_OscConfig+0x132>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d167      	bne.n	8006a02 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	f000 fb85 	bl	8007042 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	2380      	movs	r3, #128	; 0x80
 800693e:	025b      	lsls	r3, r3, #9
 8006940:	429a      	cmp	r2, r3
 8006942:	d107      	bne.n	8006954 <HAL_RCC_OscConfig+0x84>
 8006944:	4bb7      	ldr	r3, [pc, #732]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	4bb6      	ldr	r3, [pc, #728]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 800694a:	2180      	movs	r1, #128	; 0x80
 800694c:	0249      	lsls	r1, r1, #9
 800694e:	430a      	orrs	r2, r1
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	e027      	b.n	80069a4 <HAL_RCC_OscConfig+0xd4>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	23a0      	movs	r3, #160	; 0xa0
 800695a:	02db      	lsls	r3, r3, #11
 800695c:	429a      	cmp	r2, r3
 800695e:	d10e      	bne.n	800697e <HAL_RCC_OscConfig+0xae>
 8006960:	4bb0      	ldr	r3, [pc, #704]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	4baf      	ldr	r3, [pc, #700]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006966:	2180      	movs	r1, #128	; 0x80
 8006968:	02c9      	lsls	r1, r1, #11
 800696a:	430a      	orrs	r2, r1
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	4bad      	ldr	r3, [pc, #692]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	4bac      	ldr	r3, [pc, #688]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006974:	2180      	movs	r1, #128	; 0x80
 8006976:	0249      	lsls	r1, r1, #9
 8006978:	430a      	orrs	r2, r1
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	e012      	b.n	80069a4 <HAL_RCC_OscConfig+0xd4>
 800697e:	4ba9      	ldr	r3, [pc, #676]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4ba8      	ldr	r3, [pc, #672]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006984:	49a8      	ldr	r1, [pc, #672]	; (8006c28 <HAL_RCC_OscConfig+0x358>)
 8006986:	400a      	ands	r2, r1
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	4ba6      	ldr	r3, [pc, #664]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	2380      	movs	r3, #128	; 0x80
 8006990:	025b      	lsls	r3, r3, #9
 8006992:	4013      	ands	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4ba2      	ldr	r3, [pc, #648]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	4ba1      	ldr	r3, [pc, #644]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 800699e:	49a3      	ldr	r1, [pc, #652]	; (8006c2c <HAL_RCC_OscConfig+0x35c>)
 80069a0:	400a      	ands	r2, r1
 80069a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d015      	beq.n	80069d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ac:	f7fe f822 	bl	80049f4 <HAL_GetTick>
 80069b0:	0003      	movs	r3, r0
 80069b2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069b4:	e009      	b.n	80069ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069b6:	f7fe f81d 	bl	80049f4 <HAL_GetTick>
 80069ba:	0002      	movs	r2, r0
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	2b64      	cmp	r3, #100	; 0x64
 80069c2:	d902      	bls.n	80069ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	f000 fb3c 	bl	8007042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069ca:	4b96      	ldr	r3, [pc, #600]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	2380      	movs	r3, #128	; 0x80
 80069d0:	029b      	lsls	r3, r3, #10
 80069d2:	4013      	ands	r3, r2
 80069d4:	d0ef      	beq.n	80069b6 <HAL_RCC_OscConfig+0xe6>
 80069d6:	e015      	b.n	8006a04 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d8:	f7fe f80c 	bl	80049f4 <HAL_GetTick>
 80069dc:	0003      	movs	r3, r0
 80069de:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069e0:	e008      	b.n	80069f4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069e2:	f7fe f807 	bl	80049f4 <HAL_GetTick>
 80069e6:	0002      	movs	r2, r0
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b64      	cmp	r3, #100	; 0x64
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e326      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069f4:	4b8b      	ldr	r3, [pc, #556]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	2380      	movs	r3, #128	; 0x80
 80069fa:	029b      	lsls	r3, r3, #10
 80069fc:	4013      	ands	r3, r2
 80069fe:	d1f0      	bne.n	80069e2 <HAL_RCC_OscConfig+0x112>
 8006a00:	e000      	b.n	8006a04 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a02:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	d100      	bne.n	8006a10 <HAL_RCC_OscConfig+0x140>
 8006a0e:	e08b      	b.n	8006b28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d005      	beq.n	8006a28 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	2b0c      	cmp	r3, #12
 8006a20:	d13e      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x1d0>
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d13b      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006a28:	4b7e      	ldr	r3, [pc, #504]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2204      	movs	r2, #4
 8006a2e:	4013      	ands	r3, r2
 8006a30:	d004      	beq.n	8006a3c <HAL_RCC_OscConfig+0x16c>
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e302      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a3c:	4b79      	ldr	r3, [pc, #484]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	4a7b      	ldr	r2, [pc, #492]	; (8006c30 <HAL_RCC_OscConfig+0x360>)
 8006a42:	4013      	ands	r3, r2
 8006a44:	0019      	movs	r1, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	021a      	lsls	r2, r3, #8
 8006a4c:	4b75      	ldr	r3, [pc, #468]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006a52:	4b74      	ldr	r3, [pc, #464]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2209      	movs	r2, #9
 8006a58:	4393      	bics	r3, r2
 8006a5a:	0019      	movs	r1, r3
 8006a5c:	4b71      	ldr	r3, [pc, #452]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a64:	f000 fc40 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 8006a68:	0001      	movs	r1, r0
 8006a6a:	4b6e      	ldr	r3, [pc, #440]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	091b      	lsrs	r3, r3, #4
 8006a70:	220f      	movs	r2, #15
 8006a72:	4013      	ands	r3, r2
 8006a74:	4a6f      	ldr	r2, [pc, #444]	; (8006c34 <HAL_RCC_OscConfig+0x364>)
 8006a76:	5cd3      	ldrb	r3, [r2, r3]
 8006a78:	000a      	movs	r2, r1
 8006a7a:	40da      	lsrs	r2, r3
 8006a7c:	4b6e      	ldr	r3, [pc, #440]	; (8006c38 <HAL_RCC_OscConfig+0x368>)
 8006a7e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006a80:	4b6e      	ldr	r3, [pc, #440]	; (8006c3c <HAL_RCC_OscConfig+0x36c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2513      	movs	r5, #19
 8006a86:	197c      	adds	r4, r7, r5
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f7fd ff6d 	bl	8004968 <HAL_InitTick>
 8006a8e:	0003      	movs	r3, r0
 8006a90:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006a92:	197b      	adds	r3, r7, r5
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d046      	beq.n	8006b28 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8006a9a:	197b      	adds	r3, r7, r5
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	e2d0      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d027      	beq.n	8006af6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006aa6:	4b5f      	ldr	r3, [pc, #380]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2209      	movs	r2, #9
 8006aac:	4393      	bics	r3, r2
 8006aae:	0019      	movs	r1, r3
 8006ab0:	4b5c      	ldr	r3, [pc, #368]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab8:	f7fd ff9c 	bl	80049f4 <HAL_GetTick>
 8006abc:	0003      	movs	r3, r0
 8006abe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ac0:	e008      	b.n	8006ad4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ac2:	f7fd ff97 	bl	80049f4 <HAL_GetTick>
 8006ac6:	0002      	movs	r2, r0
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e2b6      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ad4:	4b53      	ldr	r3, [pc, #332]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2204      	movs	r2, #4
 8006ada:	4013      	ands	r3, r2
 8006adc:	d0f1      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ade:	4b51      	ldr	r3, [pc, #324]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	4a53      	ldr	r2, [pc, #332]	; (8006c30 <HAL_RCC_OscConfig+0x360>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	0019      	movs	r1, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	021a      	lsls	r2, r3, #8
 8006aee:	4b4d      	ldr	r3, [pc, #308]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006af0:	430a      	orrs	r2, r1
 8006af2:	605a      	str	r2, [r3, #4]
 8006af4:	e018      	b.n	8006b28 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006af6:	4b4b      	ldr	r3, [pc, #300]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b4a      	ldr	r3, [pc, #296]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006afc:	2101      	movs	r1, #1
 8006afe:	438a      	bics	r2, r1
 8006b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b02:	f7fd ff77 	bl	80049f4 <HAL_GetTick>
 8006b06:	0003      	movs	r3, r0
 8006b08:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b0c:	f7fd ff72 	bl	80049f4 <HAL_GetTick>
 8006b10:	0002      	movs	r2, r0
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e291      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b1e:	4b41      	ldr	r3, [pc, #260]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2204      	movs	r2, #4
 8006b24:	4013      	ands	r3, r2
 8006b26:	d1f1      	bne.n	8006b0c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2210      	movs	r2, #16
 8006b2e:	4013      	ands	r3, r2
 8006b30:	d100      	bne.n	8006b34 <HAL_RCC_OscConfig+0x264>
 8006b32:	e0a1      	b.n	8006c78 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d140      	bne.n	8006bbc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b3a:	4b3a      	ldr	r3, [pc, #232]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	2380      	movs	r3, #128	; 0x80
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4013      	ands	r3, r2
 8006b44:	d005      	beq.n	8006b52 <HAL_RCC_OscConfig+0x282>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e277      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b52:	4b34      	ldr	r3, [pc, #208]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	4a3a      	ldr	r2, [pc, #232]	; (8006c40 <HAL_RCC_OscConfig+0x370>)
 8006b58:	4013      	ands	r3, r2
 8006b5a:	0019      	movs	r1, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b60:	4b30      	ldr	r3, [pc, #192]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b66:	4b2f      	ldr	r3, [pc, #188]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	0a19      	lsrs	r1, r3, #8
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	061a      	lsls	r2, r3, #24
 8006b74:	4b2b      	ldr	r3, [pc, #172]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006b76:	430a      	orrs	r2, r1
 8006b78:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	0b5b      	lsrs	r3, r3, #13
 8006b80:	3301      	adds	r3, #1
 8006b82:	2280      	movs	r2, #128	; 0x80
 8006b84:	0212      	lsls	r2, r2, #8
 8006b86:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006b88:	4b26      	ldr	r3, [pc, #152]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	091b      	lsrs	r3, r3, #4
 8006b8e:	210f      	movs	r1, #15
 8006b90:	400b      	ands	r3, r1
 8006b92:	4928      	ldr	r1, [pc, #160]	; (8006c34 <HAL_RCC_OscConfig+0x364>)
 8006b94:	5ccb      	ldrb	r3, [r1, r3]
 8006b96:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006b98:	4b27      	ldr	r3, [pc, #156]	; (8006c38 <HAL_RCC_OscConfig+0x368>)
 8006b9a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006b9c:	4b27      	ldr	r3, [pc, #156]	; (8006c3c <HAL_RCC_OscConfig+0x36c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2513      	movs	r5, #19
 8006ba2:	197c      	adds	r4, r7, r5
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f7fd fedf 	bl	8004968 <HAL_InitTick>
 8006baa:	0003      	movs	r3, r0
 8006bac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006bae:	197b      	adds	r3, r7, r5
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d060      	beq.n	8006c78 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8006bb6:	197b      	adds	r3, r7, r5
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	e242      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d03f      	beq.n	8006c44 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006bc4:	4b17      	ldr	r3, [pc, #92]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	4b16      	ldr	r3, [pc, #88]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006bca:	2180      	movs	r1, #128	; 0x80
 8006bcc:	0049      	lsls	r1, r1, #1
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd2:	f7fd ff0f 	bl	80049f4 <HAL_GetTick>
 8006bd6:	0003      	movs	r3, r0
 8006bd8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006bda:	e008      	b.n	8006bee <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006bdc:	f7fd ff0a 	bl	80049f4 <HAL_GetTick>
 8006be0:	0002      	movs	r2, r0
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e229      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006bee:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	2380      	movs	r3, #128	; 0x80
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d0f0      	beq.n	8006bdc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	4a10      	ldr	r2, [pc, #64]	; (8006c40 <HAL_RCC_OscConfig+0x370>)
 8006c00:	4013      	ands	r3, r2
 8006c02:	0019      	movs	r1, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c08:	4b06      	ldr	r3, [pc, #24]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c0e:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	0a19      	lsrs	r1, r3, #8
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	061a      	lsls	r2, r3, #24
 8006c1c:	4b01      	ldr	r3, [pc, #4]	; (8006c24 <HAL_RCC_OscConfig+0x354>)
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
 8006c22:	e029      	b.n	8006c78 <HAL_RCC_OscConfig+0x3a8>
 8006c24:	40021000 	.word	0x40021000
 8006c28:	fffeffff 	.word	0xfffeffff
 8006c2c:	fffbffff 	.word	0xfffbffff
 8006c30:	ffffe0ff 	.word	0xffffe0ff
 8006c34:	0800ebe4 	.word	0x0800ebe4
 8006c38:	20000000 	.word	0x20000000
 8006c3c:	20000004 	.word	0x20000004
 8006c40:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006c44:	4bbd      	ldr	r3, [pc, #756]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	4bbc      	ldr	r3, [pc, #752]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006c4a:	49bd      	ldr	r1, [pc, #756]	; (8006f40 <HAL_RCC_OscConfig+0x670>)
 8006c4c:	400a      	ands	r2, r1
 8006c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c50:	f7fd fed0 	bl	80049f4 <HAL_GetTick>
 8006c54:	0003      	movs	r3, r0
 8006c56:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006c58:	e008      	b.n	8006c6c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c5a:	f7fd fecb 	bl	80049f4 <HAL_GetTick>
 8006c5e:	0002      	movs	r2, r0
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e1ea      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006c6c:	4bb3      	ldr	r3, [pc, #716]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	2380      	movs	r3, #128	; 0x80
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4013      	ands	r3, r2
 8006c76:	d1f0      	bne.n	8006c5a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	4013      	ands	r3, r2
 8006c80:	d036      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d019      	beq.n	8006cbe <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c8a:	4bac      	ldr	r3, [pc, #688]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c8e:	4bab      	ldr	r3, [pc, #684]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006c90:	2101      	movs	r1, #1
 8006c92:	430a      	orrs	r2, r1
 8006c94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c96:	f7fd fead 	bl	80049f4 <HAL_GetTick>
 8006c9a:	0003      	movs	r3, r0
 8006c9c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ca0:	f7fd fea8 	bl	80049f4 <HAL_GetTick>
 8006ca4:	0002      	movs	r2, r0
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e1c7      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cb2:	4ba2      	ldr	r3, [pc, #648]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	4013      	ands	r3, r2
 8006cba:	d0f1      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x3d0>
 8006cbc:	e018      	b.n	8006cf0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cbe:	4b9f      	ldr	r3, [pc, #636]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006cc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006cc2:	4b9e      	ldr	r3, [pc, #632]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	438a      	bics	r2, r1
 8006cc8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cca:	f7fd fe93 	bl	80049f4 <HAL_GetTick>
 8006cce:	0003      	movs	r3, r0
 8006cd0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cd4:	f7fd fe8e 	bl	80049f4 <HAL_GetTick>
 8006cd8:	0002      	movs	r2, r0
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e1ad      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ce6:	4b95      	ldr	r3, [pc, #596]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cea:	2202      	movs	r2, #2
 8006cec:	4013      	ands	r3, r2
 8006cee:	d1f1      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	d100      	bne.n	8006cfc <HAL_RCC_OscConfig+0x42c>
 8006cfa:	e0ae      	b.n	8006e5a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cfc:	2027      	movs	r0, #39	; 0x27
 8006cfe:	183b      	adds	r3, r7, r0
 8006d00:	2200      	movs	r2, #0
 8006d02:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d04:	4b8d      	ldr	r3, [pc, #564]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d08:	2380      	movs	r3, #128	; 0x80
 8006d0a:	055b      	lsls	r3, r3, #21
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	d109      	bne.n	8006d24 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d10:	4b8a      	ldr	r3, [pc, #552]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d14:	4b89      	ldr	r3, [pc, #548]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006d16:	2180      	movs	r1, #128	; 0x80
 8006d18:	0549      	lsls	r1, r1, #21
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006d1e:	183b      	adds	r3, r7, r0
 8006d20:	2201      	movs	r2, #1
 8006d22:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d24:	4b87      	ldr	r3, [pc, #540]	; (8006f44 <HAL_RCC_OscConfig+0x674>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	2380      	movs	r3, #128	; 0x80
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	d11a      	bne.n	8006d66 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d30:	4b84      	ldr	r3, [pc, #528]	; (8006f44 <HAL_RCC_OscConfig+0x674>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	4b83      	ldr	r3, [pc, #524]	; (8006f44 <HAL_RCC_OscConfig+0x674>)
 8006d36:	2180      	movs	r1, #128	; 0x80
 8006d38:	0049      	lsls	r1, r1, #1
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d3e:	f7fd fe59 	bl	80049f4 <HAL_GetTick>
 8006d42:	0003      	movs	r3, r0
 8006d44:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d48:	f7fd fe54 	bl	80049f4 <HAL_GetTick>
 8006d4c:	0002      	movs	r2, r0
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b64      	cmp	r3, #100	; 0x64
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e173      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d5a:	4b7a      	ldr	r3, [pc, #488]	; (8006f44 <HAL_RCC_OscConfig+0x674>)
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	2380      	movs	r3, #128	; 0x80
 8006d60:	005b      	lsls	r3, r3, #1
 8006d62:	4013      	ands	r3, r2
 8006d64:	d0f0      	beq.n	8006d48 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	2380      	movs	r3, #128	; 0x80
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d107      	bne.n	8006d82 <HAL_RCC_OscConfig+0x4b2>
 8006d72:	4b72      	ldr	r3, [pc, #456]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006d74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d76:	4b71      	ldr	r3, [pc, #452]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006d78:	2180      	movs	r1, #128	; 0x80
 8006d7a:	0049      	lsls	r1, r1, #1
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	651a      	str	r2, [r3, #80]	; 0x50
 8006d80:	e031      	b.n	8006de6 <HAL_RCC_OscConfig+0x516>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10c      	bne.n	8006da4 <HAL_RCC_OscConfig+0x4d4>
 8006d8a:	4b6c      	ldr	r3, [pc, #432]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006d8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d8e:	4b6b      	ldr	r3, [pc, #428]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006d90:	496b      	ldr	r1, [pc, #428]	; (8006f40 <HAL_RCC_OscConfig+0x670>)
 8006d92:	400a      	ands	r2, r1
 8006d94:	651a      	str	r2, [r3, #80]	; 0x50
 8006d96:	4b69      	ldr	r3, [pc, #420]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006d98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d9a:	4b68      	ldr	r3, [pc, #416]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006d9c:	496a      	ldr	r1, [pc, #424]	; (8006f48 <HAL_RCC_OscConfig+0x678>)
 8006d9e:	400a      	ands	r2, r1
 8006da0:	651a      	str	r2, [r3, #80]	; 0x50
 8006da2:	e020      	b.n	8006de6 <HAL_RCC_OscConfig+0x516>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	23a0      	movs	r3, #160	; 0xa0
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d10e      	bne.n	8006dce <HAL_RCC_OscConfig+0x4fe>
 8006db0:	4b62      	ldr	r3, [pc, #392]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006db2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006db4:	4b61      	ldr	r3, [pc, #388]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006db6:	2180      	movs	r1, #128	; 0x80
 8006db8:	00c9      	lsls	r1, r1, #3
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	651a      	str	r2, [r3, #80]	; 0x50
 8006dbe:	4b5f      	ldr	r3, [pc, #380]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006dc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dc2:	4b5e      	ldr	r3, [pc, #376]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006dc4:	2180      	movs	r1, #128	; 0x80
 8006dc6:	0049      	lsls	r1, r1, #1
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	651a      	str	r2, [r3, #80]	; 0x50
 8006dcc:	e00b      	b.n	8006de6 <HAL_RCC_OscConfig+0x516>
 8006dce:	4b5b      	ldr	r3, [pc, #364]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006dd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dd2:	4b5a      	ldr	r3, [pc, #360]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006dd4:	495a      	ldr	r1, [pc, #360]	; (8006f40 <HAL_RCC_OscConfig+0x670>)
 8006dd6:	400a      	ands	r2, r1
 8006dd8:	651a      	str	r2, [r3, #80]	; 0x50
 8006dda:	4b58      	ldr	r3, [pc, #352]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006ddc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dde:	4b57      	ldr	r3, [pc, #348]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006de0:	4959      	ldr	r1, [pc, #356]	; (8006f48 <HAL_RCC_OscConfig+0x678>)
 8006de2:	400a      	ands	r2, r1
 8006de4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d015      	beq.n	8006e1a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dee:	f7fd fe01 	bl	80049f4 <HAL_GetTick>
 8006df2:	0003      	movs	r3, r0
 8006df4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006df6:	e009      	b.n	8006e0c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006df8:	f7fd fdfc 	bl	80049f4 <HAL_GetTick>
 8006dfc:	0002      	movs	r2, r0
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	4a52      	ldr	r2, [pc, #328]	; (8006f4c <HAL_RCC_OscConfig+0x67c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e11a      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e0c:	4b4b      	ldr	r3, [pc, #300]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e10:	2380      	movs	r3, #128	; 0x80
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4013      	ands	r3, r2
 8006e16:	d0ef      	beq.n	8006df8 <HAL_RCC_OscConfig+0x528>
 8006e18:	e014      	b.n	8006e44 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e1a:	f7fd fdeb 	bl	80049f4 <HAL_GetTick>
 8006e1e:	0003      	movs	r3, r0
 8006e20:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e22:	e009      	b.n	8006e38 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e24:	f7fd fde6 	bl	80049f4 <HAL_GetTick>
 8006e28:	0002      	movs	r2, r0
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	4a47      	ldr	r2, [pc, #284]	; (8006f4c <HAL_RCC_OscConfig+0x67c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e104      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e38:	4b40      	ldr	r3, [pc, #256]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006e3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e3c:	2380      	movs	r3, #128	; 0x80
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4013      	ands	r3, r2
 8006e42:	d1ef      	bne.n	8006e24 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006e44:	2327      	movs	r3, #39	; 0x27
 8006e46:	18fb      	adds	r3, r7, r3
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d105      	bne.n	8006e5a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e4e:	4b3b      	ldr	r3, [pc, #236]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e52:	4b3a      	ldr	r3, [pc, #232]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006e54:	493e      	ldr	r1, [pc, #248]	; (8006f50 <HAL_RCC_OscConfig+0x680>)
 8006e56:	400a      	ands	r2, r1
 8006e58:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	4013      	ands	r3, r2
 8006e62:	d049      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d026      	beq.n	8006eba <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006e6c:	4b33      	ldr	r3, [pc, #204]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	4b32      	ldr	r3, [pc, #200]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006e72:	2101      	movs	r1, #1
 8006e74:	430a      	orrs	r2, r1
 8006e76:	609a      	str	r2, [r3, #8]
 8006e78:	4b30      	ldr	r3, [pc, #192]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e7c:	4b2f      	ldr	r3, [pc, #188]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006e7e:	2101      	movs	r1, #1
 8006e80:	430a      	orrs	r2, r1
 8006e82:	635a      	str	r2, [r3, #52]	; 0x34
 8006e84:	4b33      	ldr	r3, [pc, #204]	; (8006f54 <HAL_RCC_OscConfig+0x684>)
 8006e86:	6a1a      	ldr	r2, [r3, #32]
 8006e88:	4b32      	ldr	r3, [pc, #200]	; (8006f54 <HAL_RCC_OscConfig+0x684>)
 8006e8a:	2180      	movs	r1, #128	; 0x80
 8006e8c:	0189      	lsls	r1, r1, #6
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e92:	f7fd fdaf 	bl	80049f4 <HAL_GetTick>
 8006e96:	0003      	movs	r3, r0
 8006e98:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e9c:	f7fd fdaa 	bl	80049f4 <HAL_GetTick>
 8006ea0:	0002      	movs	r2, r0
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e0c9      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006eae:	4b23      	ldr	r3, [pc, #140]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	d0f1      	beq.n	8006e9c <HAL_RCC_OscConfig+0x5cc>
 8006eb8:	e01e      	b.n	8006ef8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006eba:	4b20      	ldr	r3, [pc, #128]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006ebc:	689a      	ldr	r2, [r3, #8]
 8006ebe:	4b1f      	ldr	r3, [pc, #124]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	438a      	bics	r2, r1
 8006ec4:	609a      	str	r2, [r3, #8]
 8006ec6:	4b23      	ldr	r3, [pc, #140]	; (8006f54 <HAL_RCC_OscConfig+0x684>)
 8006ec8:	6a1a      	ldr	r2, [r3, #32]
 8006eca:	4b22      	ldr	r3, [pc, #136]	; (8006f54 <HAL_RCC_OscConfig+0x684>)
 8006ecc:	4922      	ldr	r1, [pc, #136]	; (8006f58 <HAL_RCC_OscConfig+0x688>)
 8006ece:	400a      	ands	r2, r1
 8006ed0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed2:	f7fd fd8f 	bl	80049f4 <HAL_GetTick>
 8006ed6:	0003      	movs	r3, r0
 8006ed8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006edc:	f7fd fd8a 	bl	80049f4 <HAL_GetTick>
 8006ee0:	0002      	movs	r2, r0
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e0a9      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006eee:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	d1f1      	bne.n	8006edc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d100      	bne.n	8006f02 <HAL_RCC_OscConfig+0x632>
 8006f00:	e09e      	b.n	8007040 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	2b0c      	cmp	r3, #12
 8006f06:	d100      	bne.n	8006f0a <HAL_RCC_OscConfig+0x63a>
 8006f08:	e077      	b.n	8006ffa <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d158      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f12:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <HAL_RCC_OscConfig+0x66c>)
 8006f18:	4910      	ldr	r1, [pc, #64]	; (8006f5c <HAL_RCC_OscConfig+0x68c>)
 8006f1a:	400a      	ands	r2, r1
 8006f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f1e:	f7fd fd69 	bl	80049f4 <HAL_GetTick>
 8006f22:	0003      	movs	r3, r0
 8006f24:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006f26:	e01b      	b.n	8006f60 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f28:	f7fd fd64 	bl	80049f4 <HAL_GetTick>
 8006f2c:	0002      	movs	r2, r0
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d914      	bls.n	8006f60 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e083      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	40021000 	.word	0x40021000
 8006f40:	fffffeff 	.word	0xfffffeff
 8006f44:	40007000 	.word	0x40007000
 8006f48:	fffffbff 	.word	0xfffffbff
 8006f4c:	00001388 	.word	0x00001388
 8006f50:	efffffff 	.word	0xefffffff
 8006f54:	40010000 	.word	0x40010000
 8006f58:	ffffdfff 	.word	0xffffdfff
 8006f5c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006f60:	4b3a      	ldr	r3, [pc, #232]	; (800704c <HAL_RCC_OscConfig+0x77c>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	2380      	movs	r3, #128	; 0x80
 8006f66:	049b      	lsls	r3, r3, #18
 8006f68:	4013      	ands	r3, r2
 8006f6a:	d1dd      	bne.n	8006f28 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f6c:	4b37      	ldr	r3, [pc, #220]	; (800704c <HAL_RCC_OscConfig+0x77c>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	4a37      	ldr	r2, [pc, #220]	; (8007050 <HAL_RCC_OscConfig+0x780>)
 8006f72:	4013      	ands	r3, r2
 8006f74:	0019      	movs	r1, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f84:	431a      	orrs	r2, r3
 8006f86:	4b31      	ldr	r3, [pc, #196]	; (800704c <HAL_RCC_OscConfig+0x77c>)
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f8c:	4b2f      	ldr	r3, [pc, #188]	; (800704c <HAL_RCC_OscConfig+0x77c>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	4b2e      	ldr	r3, [pc, #184]	; (800704c <HAL_RCC_OscConfig+0x77c>)
 8006f92:	2180      	movs	r1, #128	; 0x80
 8006f94:	0449      	lsls	r1, r1, #17
 8006f96:	430a      	orrs	r2, r1
 8006f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f9a:	f7fd fd2b 	bl	80049f4 <HAL_GetTick>
 8006f9e:	0003      	movs	r3, r0
 8006fa0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fa4:	f7fd fd26 	bl	80049f4 <HAL_GetTick>
 8006fa8:	0002      	movs	r2, r0
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e045      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006fb6:	4b25      	ldr	r3, [pc, #148]	; (800704c <HAL_RCC_OscConfig+0x77c>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	2380      	movs	r3, #128	; 0x80
 8006fbc:	049b      	lsls	r3, r3, #18
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	d0f0      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x6d4>
 8006fc2:	e03d      	b.n	8007040 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc4:	4b21      	ldr	r3, [pc, #132]	; (800704c <HAL_RCC_OscConfig+0x77c>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	4b20      	ldr	r3, [pc, #128]	; (800704c <HAL_RCC_OscConfig+0x77c>)
 8006fca:	4922      	ldr	r1, [pc, #136]	; (8007054 <HAL_RCC_OscConfig+0x784>)
 8006fcc:	400a      	ands	r2, r1
 8006fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd0:	f7fd fd10 	bl	80049f4 <HAL_GetTick>
 8006fd4:	0003      	movs	r3, r0
 8006fd6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006fd8:	e008      	b.n	8006fec <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fda:	f7fd fd0b 	bl	80049f4 <HAL_GetTick>
 8006fde:	0002      	movs	r2, r0
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e02a      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006fec:	4b17      	ldr	r3, [pc, #92]	; (800704c <HAL_RCC_OscConfig+0x77c>)
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	2380      	movs	r3, #128	; 0x80
 8006ff2:	049b      	lsls	r3, r3, #18
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	d1f0      	bne.n	8006fda <HAL_RCC_OscConfig+0x70a>
 8006ff8:	e022      	b.n	8007040 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d101      	bne.n	8007006 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e01d      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007006:	4b11      	ldr	r3, [pc, #68]	; (800704c <HAL_RCC_OscConfig+0x77c>)
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	2380      	movs	r3, #128	; 0x80
 8007010:	025b      	lsls	r3, r3, #9
 8007012:	401a      	ands	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	429a      	cmp	r2, r3
 800701a:	d10f      	bne.n	800703c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	23f0      	movs	r3, #240	; 0xf0
 8007020:	039b      	lsls	r3, r3, #14
 8007022:	401a      	ands	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007028:	429a      	cmp	r2, r3
 800702a:	d107      	bne.n	800703c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800702c:	69fa      	ldr	r2, [r7, #28]
 800702e:	23c0      	movs	r3, #192	; 0xc0
 8007030:	041b      	lsls	r3, r3, #16
 8007032:	401a      	ands	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007038:	429a      	cmp	r2, r3
 800703a:	d001      	beq.n	8007040 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e000      	b.n	8007042 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	0018      	movs	r0, r3
 8007044:	46bd      	mov	sp, r7
 8007046:	b00a      	add	sp, #40	; 0x28
 8007048:	bdb0      	pop	{r4, r5, r7, pc}
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	40021000 	.word	0x40021000
 8007050:	ff02ffff 	.word	0xff02ffff
 8007054:	feffffff 	.word	0xfeffffff

08007058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007058:	b5b0      	push	{r4, r5, r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e128      	b.n	80072be <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800706c:	4b96      	ldr	r3, [pc, #600]	; (80072c8 <HAL_RCC_ClockConfig+0x270>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2201      	movs	r2, #1
 8007072:	4013      	ands	r3, r2
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d91e      	bls.n	80070b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707a:	4b93      	ldr	r3, [pc, #588]	; (80072c8 <HAL_RCC_ClockConfig+0x270>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2201      	movs	r2, #1
 8007080:	4393      	bics	r3, r2
 8007082:	0019      	movs	r1, r3
 8007084:	4b90      	ldr	r3, [pc, #576]	; (80072c8 <HAL_RCC_ClockConfig+0x270>)
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800708c:	f7fd fcb2 	bl	80049f4 <HAL_GetTick>
 8007090:	0003      	movs	r3, r0
 8007092:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007094:	e009      	b.n	80070aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007096:	f7fd fcad 	bl	80049f4 <HAL_GetTick>
 800709a:	0002      	movs	r2, r0
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	4a8a      	ldr	r2, [pc, #552]	; (80072cc <HAL_RCC_ClockConfig+0x274>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e109      	b.n	80072be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070aa:	4b87      	ldr	r3, [pc, #540]	; (80072c8 <HAL_RCC_ClockConfig+0x270>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2201      	movs	r2, #1
 80070b0:	4013      	ands	r3, r2
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d1ee      	bne.n	8007096 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2202      	movs	r2, #2
 80070be:	4013      	ands	r3, r2
 80070c0:	d009      	beq.n	80070d6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070c2:	4b83      	ldr	r3, [pc, #524]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	22f0      	movs	r2, #240	; 0xf0
 80070c8:	4393      	bics	r3, r2
 80070ca:	0019      	movs	r1, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	4b7f      	ldr	r3, [pc, #508]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 80070d2:	430a      	orrs	r2, r1
 80070d4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2201      	movs	r2, #1
 80070dc:	4013      	ands	r3, r2
 80070de:	d100      	bne.n	80070e2 <HAL_RCC_ClockConfig+0x8a>
 80070e0:	e089      	b.n	80071f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d107      	bne.n	80070fa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070ea:	4b79      	ldr	r3, [pc, #484]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	2380      	movs	r3, #128	; 0x80
 80070f0:	029b      	lsls	r3, r3, #10
 80070f2:	4013      	ands	r3, r2
 80070f4:	d120      	bne.n	8007138 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e0e1      	b.n	80072be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d107      	bne.n	8007112 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007102:	4b73      	ldr	r3, [pc, #460]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	2380      	movs	r3, #128	; 0x80
 8007108:	049b      	lsls	r3, r3, #18
 800710a:	4013      	ands	r3, r2
 800710c:	d114      	bne.n	8007138 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e0d5      	b.n	80072be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d106      	bne.n	8007128 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800711a:	4b6d      	ldr	r3, [pc, #436]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2204      	movs	r2, #4
 8007120:	4013      	ands	r3, r2
 8007122:	d109      	bne.n	8007138 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e0ca      	b.n	80072be <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007128:	4b69      	ldr	r3, [pc, #420]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	2380      	movs	r3, #128	; 0x80
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4013      	ands	r3, r2
 8007132:	d101      	bne.n	8007138 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e0c2      	b.n	80072be <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007138:	4b65      	ldr	r3, [pc, #404]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	2203      	movs	r2, #3
 800713e:	4393      	bics	r3, r2
 8007140:	0019      	movs	r1, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	4b62      	ldr	r3, [pc, #392]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 8007148:	430a      	orrs	r2, r1
 800714a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800714c:	f7fd fc52 	bl	80049f4 <HAL_GetTick>
 8007150:	0003      	movs	r3, r0
 8007152:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2b02      	cmp	r3, #2
 800715a:	d111      	bne.n	8007180 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800715c:	e009      	b.n	8007172 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800715e:	f7fd fc49 	bl	80049f4 <HAL_GetTick>
 8007162:	0002      	movs	r2, r0
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	4a58      	ldr	r2, [pc, #352]	; (80072cc <HAL_RCC_ClockConfig+0x274>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e0a5      	b.n	80072be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007172:	4b57      	ldr	r3, [pc, #348]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	220c      	movs	r2, #12
 8007178:	4013      	ands	r3, r2
 800717a:	2b08      	cmp	r3, #8
 800717c:	d1ef      	bne.n	800715e <HAL_RCC_ClockConfig+0x106>
 800717e:	e03a      	b.n	80071f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b03      	cmp	r3, #3
 8007186:	d111      	bne.n	80071ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007188:	e009      	b.n	800719e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800718a:	f7fd fc33 	bl	80049f4 <HAL_GetTick>
 800718e:	0002      	movs	r2, r0
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	4a4d      	ldr	r2, [pc, #308]	; (80072cc <HAL_RCC_ClockConfig+0x274>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d901      	bls.n	800719e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e08f      	b.n	80072be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800719e:	4b4c      	ldr	r3, [pc, #304]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	220c      	movs	r2, #12
 80071a4:	4013      	ands	r3, r2
 80071a6:	2b0c      	cmp	r3, #12
 80071a8:	d1ef      	bne.n	800718a <HAL_RCC_ClockConfig+0x132>
 80071aa:	e024      	b.n	80071f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d11b      	bne.n	80071ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80071b4:	e009      	b.n	80071ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071b6:	f7fd fc1d 	bl	80049f4 <HAL_GetTick>
 80071ba:	0002      	movs	r2, r0
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	4a42      	ldr	r2, [pc, #264]	; (80072cc <HAL_RCC_ClockConfig+0x274>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e079      	b.n	80072be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80071ca:	4b41      	ldr	r3, [pc, #260]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	220c      	movs	r2, #12
 80071d0:	4013      	ands	r3, r2
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d1ef      	bne.n	80071b6 <HAL_RCC_ClockConfig+0x15e>
 80071d6:	e00e      	b.n	80071f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071d8:	f7fd fc0c 	bl	80049f4 <HAL_GetTick>
 80071dc:	0002      	movs	r2, r0
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	4a3a      	ldr	r2, [pc, #232]	; (80072cc <HAL_RCC_ClockConfig+0x274>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e068      	b.n	80072be <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80071ec:	4b38      	ldr	r3, [pc, #224]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	220c      	movs	r2, #12
 80071f2:	4013      	ands	r3, r2
 80071f4:	d1f0      	bne.n	80071d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071f6:	4b34      	ldr	r3, [pc, #208]	; (80072c8 <HAL_RCC_ClockConfig+0x270>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2201      	movs	r2, #1
 80071fc:	4013      	ands	r3, r2
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d21e      	bcs.n	8007242 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007204:	4b30      	ldr	r3, [pc, #192]	; (80072c8 <HAL_RCC_ClockConfig+0x270>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2201      	movs	r2, #1
 800720a:	4393      	bics	r3, r2
 800720c:	0019      	movs	r1, r3
 800720e:	4b2e      	ldr	r3, [pc, #184]	; (80072c8 <HAL_RCC_ClockConfig+0x270>)
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007216:	f7fd fbed 	bl	80049f4 <HAL_GetTick>
 800721a:	0003      	movs	r3, r0
 800721c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800721e:	e009      	b.n	8007234 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007220:	f7fd fbe8 	bl	80049f4 <HAL_GetTick>
 8007224:	0002      	movs	r2, r0
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	4a28      	ldr	r2, [pc, #160]	; (80072cc <HAL_RCC_ClockConfig+0x274>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e044      	b.n	80072be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007234:	4b24      	ldr	r3, [pc, #144]	; (80072c8 <HAL_RCC_ClockConfig+0x270>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2201      	movs	r2, #1
 800723a:	4013      	ands	r3, r2
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d1ee      	bne.n	8007220 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2204      	movs	r2, #4
 8007248:	4013      	ands	r3, r2
 800724a:	d009      	beq.n	8007260 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800724c:	4b20      	ldr	r3, [pc, #128]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	4a20      	ldr	r2, [pc, #128]	; (80072d4 <HAL_RCC_ClockConfig+0x27c>)
 8007252:	4013      	ands	r3, r2
 8007254:	0019      	movs	r1, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	4b1d      	ldr	r3, [pc, #116]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 800725c:	430a      	orrs	r2, r1
 800725e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2208      	movs	r2, #8
 8007266:	4013      	ands	r3, r2
 8007268:	d00a      	beq.n	8007280 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800726a:	4b19      	ldr	r3, [pc, #100]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	4a1a      	ldr	r2, [pc, #104]	; (80072d8 <HAL_RCC_ClockConfig+0x280>)
 8007270:	4013      	ands	r3, r2
 8007272:	0019      	movs	r1, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	00da      	lsls	r2, r3, #3
 800727a:	4b15      	ldr	r3, [pc, #84]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 800727c:	430a      	orrs	r2, r1
 800727e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007280:	f000 f832 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 8007284:	0001      	movs	r1, r0
 8007286:	4b12      	ldr	r3, [pc, #72]	; (80072d0 <HAL_RCC_ClockConfig+0x278>)
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	091b      	lsrs	r3, r3, #4
 800728c:	220f      	movs	r2, #15
 800728e:	4013      	ands	r3, r2
 8007290:	4a12      	ldr	r2, [pc, #72]	; (80072dc <HAL_RCC_ClockConfig+0x284>)
 8007292:	5cd3      	ldrb	r3, [r2, r3]
 8007294:	000a      	movs	r2, r1
 8007296:	40da      	lsrs	r2, r3
 8007298:	4b11      	ldr	r3, [pc, #68]	; (80072e0 <HAL_RCC_ClockConfig+0x288>)
 800729a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800729c:	4b11      	ldr	r3, [pc, #68]	; (80072e4 <HAL_RCC_ClockConfig+0x28c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	250b      	movs	r5, #11
 80072a2:	197c      	adds	r4, r7, r5
 80072a4:	0018      	movs	r0, r3
 80072a6:	f7fd fb5f 	bl	8004968 <HAL_InitTick>
 80072aa:	0003      	movs	r3, r0
 80072ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80072ae:	197b      	adds	r3, r7, r5
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80072b6:	197b      	adds	r3, r7, r5
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	e000      	b.n	80072be <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	0018      	movs	r0, r3
 80072c0:	46bd      	mov	sp, r7
 80072c2:	b004      	add	sp, #16
 80072c4:	bdb0      	pop	{r4, r5, r7, pc}
 80072c6:	46c0      	nop			; (mov r8, r8)
 80072c8:	40022000 	.word	0x40022000
 80072cc:	00001388 	.word	0x00001388
 80072d0:	40021000 	.word	0x40021000
 80072d4:	fffff8ff 	.word	0xfffff8ff
 80072d8:	ffffc7ff 	.word	0xffffc7ff
 80072dc:	0800ebe4 	.word	0x0800ebe4
 80072e0:	20000000 	.word	0x20000000
 80072e4:	20000004 	.word	0x20000004

080072e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072e8:	b5b0      	push	{r4, r5, r7, lr}
 80072ea:	b08e      	sub	sp, #56	; 0x38
 80072ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80072ee:	4b4c      	ldr	r3, [pc, #304]	; (8007420 <HAL_RCC_GetSysClockFreq+0x138>)
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072f6:	230c      	movs	r3, #12
 80072f8:	4013      	ands	r3, r2
 80072fa:	2b0c      	cmp	r3, #12
 80072fc:	d014      	beq.n	8007328 <HAL_RCC_GetSysClockFreq+0x40>
 80072fe:	d900      	bls.n	8007302 <HAL_RCC_GetSysClockFreq+0x1a>
 8007300:	e07b      	b.n	80073fa <HAL_RCC_GetSysClockFreq+0x112>
 8007302:	2b04      	cmp	r3, #4
 8007304:	d002      	beq.n	800730c <HAL_RCC_GetSysClockFreq+0x24>
 8007306:	2b08      	cmp	r3, #8
 8007308:	d00b      	beq.n	8007322 <HAL_RCC_GetSysClockFreq+0x3a>
 800730a:	e076      	b.n	80073fa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800730c:	4b44      	ldr	r3, [pc, #272]	; (8007420 <HAL_RCC_GetSysClockFreq+0x138>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2210      	movs	r2, #16
 8007312:	4013      	ands	r3, r2
 8007314:	d002      	beq.n	800731c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8007316:	4b43      	ldr	r3, [pc, #268]	; (8007424 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007318:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800731a:	e07c      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800731c:	4b42      	ldr	r3, [pc, #264]	; (8007428 <HAL_RCC_GetSysClockFreq+0x140>)
 800731e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007320:	e079      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007322:	4b42      	ldr	r3, [pc, #264]	; (800742c <HAL_RCC_GetSysClockFreq+0x144>)
 8007324:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007326:	e076      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732a:	0c9a      	lsrs	r2, r3, #18
 800732c:	230f      	movs	r3, #15
 800732e:	401a      	ands	r2, r3
 8007330:	4b3f      	ldr	r3, [pc, #252]	; (8007430 <HAL_RCC_GetSysClockFreq+0x148>)
 8007332:	5c9b      	ldrb	r3, [r3, r2]
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	0d9a      	lsrs	r2, r3, #22
 800733a:	2303      	movs	r3, #3
 800733c:	4013      	ands	r3, r2
 800733e:	3301      	adds	r3, #1
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007342:	4b37      	ldr	r3, [pc, #220]	; (8007420 <HAL_RCC_GetSysClockFreq+0x138>)
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	2380      	movs	r3, #128	; 0x80
 8007348:	025b      	lsls	r3, r3, #9
 800734a:	4013      	ands	r3, r2
 800734c:	d01a      	beq.n	8007384 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	2300      	movs	r3, #0
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	4a35      	ldr	r2, [pc, #212]	; (800742c <HAL_RCC_GetSysClockFreq+0x144>)
 8007358:	2300      	movs	r3, #0
 800735a:	69b8      	ldr	r0, [r7, #24]
 800735c:	69f9      	ldr	r1, [r7, #28]
 800735e:	f7f9 f8c3 	bl	80004e8 <__aeabi_lmul>
 8007362:	0002      	movs	r2, r0
 8007364:	000b      	movs	r3, r1
 8007366:	0010      	movs	r0, r2
 8007368:	0019      	movs	r1, r3
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	613b      	str	r3, [r7, #16]
 800736e:	2300      	movs	r3, #0
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f7f9 f897 	bl	80004a8 <__aeabi_uldivmod>
 800737a:	0002      	movs	r2, r0
 800737c:	000b      	movs	r3, r1
 800737e:	0013      	movs	r3, r2
 8007380:	637b      	str	r3, [r7, #52]	; 0x34
 8007382:	e037      	b.n	80073f4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007384:	4b26      	ldr	r3, [pc, #152]	; (8007420 <HAL_RCC_GetSysClockFreq+0x138>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2210      	movs	r2, #16
 800738a:	4013      	ands	r3, r2
 800738c:	d01a      	beq.n	80073c4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	60bb      	str	r3, [r7, #8]
 8007392:	2300      	movs	r3, #0
 8007394:	60fb      	str	r3, [r7, #12]
 8007396:	4a23      	ldr	r2, [pc, #140]	; (8007424 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007398:	2300      	movs	r3, #0
 800739a:	68b8      	ldr	r0, [r7, #8]
 800739c:	68f9      	ldr	r1, [r7, #12]
 800739e:	f7f9 f8a3 	bl	80004e8 <__aeabi_lmul>
 80073a2:	0002      	movs	r2, r0
 80073a4:	000b      	movs	r3, r1
 80073a6:	0010      	movs	r0, r2
 80073a8:	0019      	movs	r1, r3
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	603b      	str	r3, [r7, #0]
 80073ae:	2300      	movs	r3, #0
 80073b0:	607b      	str	r3, [r7, #4]
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f7f9 f877 	bl	80004a8 <__aeabi_uldivmod>
 80073ba:	0002      	movs	r2, r0
 80073bc:	000b      	movs	r3, r1
 80073be:	0013      	movs	r3, r2
 80073c0:	637b      	str	r3, [r7, #52]	; 0x34
 80073c2:	e017      	b.n	80073f4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80073c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c6:	0018      	movs	r0, r3
 80073c8:	2300      	movs	r3, #0
 80073ca:	0019      	movs	r1, r3
 80073cc:	4a16      	ldr	r2, [pc, #88]	; (8007428 <HAL_RCC_GetSysClockFreq+0x140>)
 80073ce:	2300      	movs	r3, #0
 80073d0:	f7f9 f88a 	bl	80004e8 <__aeabi_lmul>
 80073d4:	0002      	movs	r2, r0
 80073d6:	000b      	movs	r3, r1
 80073d8:	0010      	movs	r0, r2
 80073da:	0019      	movs	r1, r3
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	001c      	movs	r4, r3
 80073e0:	2300      	movs	r3, #0
 80073e2:	001d      	movs	r5, r3
 80073e4:	0022      	movs	r2, r4
 80073e6:	002b      	movs	r3, r5
 80073e8:	f7f9 f85e 	bl	80004a8 <__aeabi_uldivmod>
 80073ec:	0002      	movs	r2, r0
 80073ee:	000b      	movs	r3, r1
 80073f0:	0013      	movs	r3, r2
 80073f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80073f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80073f8:	e00d      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80073fa:	4b09      	ldr	r3, [pc, #36]	; (8007420 <HAL_RCC_GetSysClockFreq+0x138>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	0b5b      	lsrs	r3, r3, #13
 8007400:	2207      	movs	r2, #7
 8007402:	4013      	ands	r3, r2
 8007404:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	3301      	adds	r3, #1
 800740a:	2280      	movs	r2, #128	; 0x80
 800740c:	0212      	lsls	r2, r2, #8
 800740e:	409a      	lsls	r2, r3
 8007410:	0013      	movs	r3, r2
 8007412:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007414:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007418:	0018      	movs	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	b00e      	add	sp, #56	; 0x38
 800741e:	bdb0      	pop	{r4, r5, r7, pc}
 8007420:	40021000 	.word	0x40021000
 8007424:	003d0900 	.word	0x003d0900
 8007428:	00f42400 	.word	0x00f42400
 800742c:	007a1200 	.word	0x007a1200
 8007430:	0800ebfc 	.word	0x0800ebfc

08007434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007438:	4b02      	ldr	r3, [pc, #8]	; (8007444 <HAL_RCC_GetHCLKFreq+0x10>)
 800743a:	681b      	ldr	r3, [r3, #0]
}
 800743c:	0018      	movs	r0, r3
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	20000000 	.word	0x20000000

08007448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800744c:	f7ff fff2 	bl	8007434 <HAL_RCC_GetHCLKFreq>
 8007450:	0001      	movs	r1, r0
 8007452:	4b06      	ldr	r3, [pc, #24]	; (800746c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	0a1b      	lsrs	r3, r3, #8
 8007458:	2207      	movs	r2, #7
 800745a:	4013      	ands	r3, r2
 800745c:	4a04      	ldr	r2, [pc, #16]	; (8007470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800745e:	5cd3      	ldrb	r3, [r2, r3]
 8007460:	40d9      	lsrs	r1, r3
 8007462:	000b      	movs	r3, r1
}
 8007464:	0018      	movs	r0, r3
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	46c0      	nop			; (mov r8, r8)
 800746c:	40021000 	.word	0x40021000
 8007470:	0800ebf4 	.word	0x0800ebf4

08007474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007478:	f7ff ffdc 	bl	8007434 <HAL_RCC_GetHCLKFreq>
 800747c:	0001      	movs	r1, r0
 800747e:	4b06      	ldr	r3, [pc, #24]	; (8007498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	0adb      	lsrs	r3, r3, #11
 8007484:	2207      	movs	r2, #7
 8007486:	4013      	ands	r3, r2
 8007488:	4a04      	ldr	r2, [pc, #16]	; (800749c <HAL_RCC_GetPCLK2Freq+0x28>)
 800748a:	5cd3      	ldrb	r3, [r2, r3]
 800748c:	40d9      	lsrs	r1, r3
 800748e:	000b      	movs	r3, r1
}
 8007490:	0018      	movs	r0, r3
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	46c0      	nop			; (mov r8, r8)
 8007498:	40021000 	.word	0x40021000
 800749c:	0800ebf4 	.word	0x0800ebf4

080074a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80074a8:	2317      	movs	r3, #23
 80074aa:	18fb      	adds	r3, r7, r3
 80074ac:	2200      	movs	r2, #0
 80074ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2220      	movs	r2, #32
 80074b6:	4013      	ands	r3, r2
 80074b8:	d106      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	2380      	movs	r3, #128	; 0x80
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	4013      	ands	r3, r2
 80074c4:	d100      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80074c6:	e104      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074c8:	4bb1      	ldr	r3, [pc, #708]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074cc:	2380      	movs	r3, #128	; 0x80
 80074ce:	055b      	lsls	r3, r3, #21
 80074d0:	4013      	ands	r3, r2
 80074d2:	d10a      	bne.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074d4:	4bae      	ldr	r3, [pc, #696]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074d8:	4bad      	ldr	r3, [pc, #692]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074da:	2180      	movs	r1, #128	; 0x80
 80074dc:	0549      	lsls	r1, r1, #21
 80074de:	430a      	orrs	r2, r1
 80074e0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80074e2:	2317      	movs	r3, #23
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	2201      	movs	r2, #1
 80074e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074ea:	4baa      	ldr	r3, [pc, #680]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	2380      	movs	r3, #128	; 0x80
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	4013      	ands	r3, r2
 80074f4:	d11a      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074f6:	4ba7      	ldr	r3, [pc, #668]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4ba6      	ldr	r3, [pc, #664]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074fc:	2180      	movs	r1, #128	; 0x80
 80074fe:	0049      	lsls	r1, r1, #1
 8007500:	430a      	orrs	r2, r1
 8007502:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007504:	f7fd fa76 	bl	80049f4 <HAL_GetTick>
 8007508:	0003      	movs	r3, r0
 800750a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800750c:	e008      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800750e:	f7fd fa71 	bl	80049f4 <HAL_GetTick>
 8007512:	0002      	movs	r2, r0
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b64      	cmp	r3, #100	; 0x64
 800751a:	d901      	bls.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e133      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007520:	4b9c      	ldr	r3, [pc, #624]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	2380      	movs	r3, #128	; 0x80
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	4013      	ands	r3, r2
 800752a:	d0f0      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800752c:	4b98      	ldr	r3, [pc, #608]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	23c0      	movs	r3, #192	; 0xc0
 8007532:	039b      	lsls	r3, r3, #14
 8007534:	4013      	ands	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	23c0      	movs	r3, #192	; 0xc0
 800753e:	039b      	lsls	r3, r3, #14
 8007540:	4013      	ands	r3, r2
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	429a      	cmp	r2, r3
 8007546:	d107      	bne.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	23c0      	movs	r3, #192	; 0xc0
 800754e:	039b      	lsls	r3, r3, #14
 8007550:	4013      	ands	r3, r2
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	429a      	cmp	r2, r3
 8007556:	d013      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	23c0      	movs	r3, #192	; 0xc0
 800755e:	029b      	lsls	r3, r3, #10
 8007560:	401a      	ands	r2, r3
 8007562:	23c0      	movs	r3, #192	; 0xc0
 8007564:	029b      	lsls	r3, r3, #10
 8007566:	429a      	cmp	r2, r3
 8007568:	d10a      	bne.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800756a:	4b89      	ldr	r3, [pc, #548]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	2380      	movs	r3, #128	; 0x80
 8007570:	029b      	lsls	r3, r3, #10
 8007572:	401a      	ands	r2, r3
 8007574:	2380      	movs	r3, #128	; 0x80
 8007576:	029b      	lsls	r3, r3, #10
 8007578:	429a      	cmp	r2, r3
 800757a:	d101      	bne.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e103      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8007580:	4b83      	ldr	r3, [pc, #524]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007584:	23c0      	movs	r3, #192	; 0xc0
 8007586:	029b      	lsls	r3, r3, #10
 8007588:	4013      	ands	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d049      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	23c0      	movs	r3, #192	; 0xc0
 8007598:	029b      	lsls	r3, r3, #10
 800759a:	4013      	ands	r3, r2
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d004      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2220      	movs	r2, #32
 80075a8:	4013      	ands	r3, r2
 80075aa:	d10d      	bne.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	23c0      	movs	r3, #192	; 0xc0
 80075b2:	029b      	lsls	r3, r3, #10
 80075b4:	4013      	ands	r3, r2
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d034      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	2380      	movs	r3, #128	; 0x80
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	4013      	ands	r3, r2
 80075c6:	d02e      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80075c8:	4b71      	ldr	r3, [pc, #452]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075cc:	4a72      	ldr	r2, [pc, #456]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075d2:	4b6f      	ldr	r3, [pc, #444]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075d6:	4b6e      	ldr	r3, [pc, #440]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075d8:	2180      	movs	r1, #128	; 0x80
 80075da:	0309      	lsls	r1, r1, #12
 80075dc:	430a      	orrs	r2, r1
 80075de:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075e0:	4b6b      	ldr	r3, [pc, #428]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075e4:	4b6a      	ldr	r3, [pc, #424]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075e6:	496d      	ldr	r1, [pc, #436]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80075e8:	400a      	ands	r2, r1
 80075ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80075ec:	4b68      	ldr	r3, [pc, #416]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	2380      	movs	r3, #128	; 0x80
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	4013      	ands	r3, r2
 80075fa:	d014      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075fc:	f7fd f9fa 	bl	80049f4 <HAL_GetTick>
 8007600:	0003      	movs	r3, r0
 8007602:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007604:	e009      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007606:	f7fd f9f5 	bl	80049f4 <HAL_GetTick>
 800760a:	0002      	movs	r2, r0
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	4a63      	ldr	r2, [pc, #396]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d901      	bls.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e0b6      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800761a:	4b5d      	ldr	r3, [pc, #372]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800761c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800761e:	2380      	movs	r3, #128	; 0x80
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4013      	ands	r3, r2
 8007624:	d0ef      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	2380      	movs	r3, #128	; 0x80
 800762c:	011b      	lsls	r3, r3, #4
 800762e:	4013      	ands	r3, r2
 8007630:	d01f      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	23c0      	movs	r3, #192	; 0xc0
 8007638:	029b      	lsls	r3, r3, #10
 800763a:	401a      	ands	r2, r3
 800763c:	23c0      	movs	r3, #192	; 0xc0
 800763e:	029b      	lsls	r3, r3, #10
 8007640:	429a      	cmp	r2, r3
 8007642:	d10c      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8007644:	4b52      	ldr	r3, [pc, #328]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a56      	ldr	r2, [pc, #344]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800764a:	4013      	ands	r3, r2
 800764c:	0019      	movs	r1, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	23c0      	movs	r3, #192	; 0xc0
 8007654:	039b      	lsls	r3, r3, #14
 8007656:	401a      	ands	r2, r3
 8007658:	4b4d      	ldr	r3, [pc, #308]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800765a:	430a      	orrs	r2, r1
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	4b4c      	ldr	r3, [pc, #304]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007660:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	23c0      	movs	r3, #192	; 0xc0
 8007668:	029b      	lsls	r3, r3, #10
 800766a:	401a      	ands	r2, r3
 800766c:	4b48      	ldr	r3, [pc, #288]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800766e:	430a      	orrs	r2, r1
 8007670:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2220      	movs	r2, #32
 8007678:	4013      	ands	r3, r2
 800767a:	d01f      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	23c0      	movs	r3, #192	; 0xc0
 8007682:	029b      	lsls	r3, r3, #10
 8007684:	401a      	ands	r2, r3
 8007686:	23c0      	movs	r3, #192	; 0xc0
 8007688:	029b      	lsls	r3, r3, #10
 800768a:	429a      	cmp	r2, r3
 800768c:	d10c      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800768e:	4b40      	ldr	r3, [pc, #256]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a44      	ldr	r2, [pc, #272]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007694:	4013      	ands	r3, r2
 8007696:	0019      	movs	r1, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	23c0      	movs	r3, #192	; 0xc0
 800769e:	039b      	lsls	r3, r3, #14
 80076a0:	401a      	ands	r2, r3
 80076a2:	4b3b      	ldr	r3, [pc, #236]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076a4:	430a      	orrs	r2, r1
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	4b39      	ldr	r3, [pc, #228]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076aa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	23c0      	movs	r3, #192	; 0xc0
 80076b2:	029b      	lsls	r3, r3, #10
 80076b4:	401a      	ands	r2, r3
 80076b6:	4b36      	ldr	r3, [pc, #216]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076b8:	430a      	orrs	r2, r1
 80076ba:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80076bc:	2317      	movs	r3, #23
 80076be:	18fb      	adds	r3, r7, r3
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d105      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076c6:	4b32      	ldr	r3, [pc, #200]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ca:	4b31      	ldr	r3, [pc, #196]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076cc:	4936      	ldr	r1, [pc, #216]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80076ce:	400a      	ands	r2, r1
 80076d0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2201      	movs	r2, #1
 80076d8:	4013      	ands	r3, r2
 80076da:	d009      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076dc:	4b2c      	ldr	r3, [pc, #176]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e0:	2203      	movs	r2, #3
 80076e2:	4393      	bics	r3, r2
 80076e4:	0019      	movs	r1, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	4b29      	ldr	r3, [pc, #164]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076ec:	430a      	orrs	r2, r1
 80076ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2202      	movs	r2, #2
 80076f6:	4013      	ands	r3, r2
 80076f8:	d009      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076fa:	4b25      	ldr	r3, [pc, #148]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076fe:	220c      	movs	r2, #12
 8007700:	4393      	bics	r3, r2
 8007702:	0019      	movs	r1, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	691a      	ldr	r2, [r3, #16]
 8007708:	4b21      	ldr	r3, [pc, #132]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800770a:	430a      	orrs	r2, r1
 800770c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2204      	movs	r2, #4
 8007714:	4013      	ands	r3, r2
 8007716:	d009      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007718:	4b1d      	ldr	r3, [pc, #116]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800771a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771c:	4a23      	ldr	r2, [pc, #140]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800771e:	4013      	ands	r3, r2
 8007720:	0019      	movs	r1, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	695a      	ldr	r2, [r3, #20]
 8007726:	4b1a      	ldr	r3, [pc, #104]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007728:	430a      	orrs	r2, r1
 800772a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2208      	movs	r2, #8
 8007732:	4013      	ands	r3, r2
 8007734:	d009      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007736:	4b16      	ldr	r3, [pc, #88]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800773a:	4a1d      	ldr	r2, [pc, #116]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800773c:	4013      	ands	r3, r2
 800773e:	0019      	movs	r1, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	699a      	ldr	r2, [r3, #24]
 8007744:	4b12      	ldr	r3, [pc, #72]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007746:	430a      	orrs	r2, r1
 8007748:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2240      	movs	r2, #64	; 0x40
 8007750:	4013      	ands	r3, r2
 8007752:	d009      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007754:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007758:	4a16      	ldr	r2, [pc, #88]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800775a:	4013      	ands	r3, r2
 800775c:	0019      	movs	r1, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1a      	ldr	r2, [r3, #32]
 8007762:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007764:	430a      	orrs	r2, r1
 8007766:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2280      	movs	r2, #128	; 0x80
 800776e:	4013      	ands	r3, r2
 8007770:	d009      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007772:	4b07      	ldr	r3, [pc, #28]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007776:	4a10      	ldr	r2, [pc, #64]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8007778:	4013      	ands	r3, r2
 800777a:	0019      	movs	r1, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	4b03      	ldr	r3, [pc, #12]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007782:	430a      	orrs	r2, r1
 8007784:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	0018      	movs	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	b006      	add	sp, #24
 800778e:	bd80      	pop	{r7, pc}
 8007790:	40021000 	.word	0x40021000
 8007794:	40007000 	.word	0x40007000
 8007798:	fffcffff 	.word	0xfffcffff
 800779c:	fff7ffff 	.word	0xfff7ffff
 80077a0:	00001388 	.word	0x00001388
 80077a4:	ffcfffff 	.word	0xffcfffff
 80077a8:	efffffff 	.word	0xefffffff
 80077ac:	fffff3ff 	.word	0xfffff3ff
 80077b0:	ffffcfff 	.word	0xffffcfff
 80077b4:	fbffffff 	.word	0xfbffffff
 80077b8:	fff3ffff 	.word	0xfff3ffff

080077bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e083      	b.n	80078d6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d109      	bne.n	80077ea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	2382      	movs	r3, #130	; 0x82
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	429a      	cmp	r2, r3
 80077e0:	d009      	beq.n	80077f6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	61da      	str	r2, [r3, #28]
 80077e8:	e005      	b.n	80077f6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2251      	movs	r2, #81	; 0x51
 8007800:	5c9b      	ldrb	r3, [r3, r2]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d107      	bne.n	8007818 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2250      	movs	r2, #80	; 0x50
 800780c:	2100      	movs	r1, #0
 800780e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	0018      	movs	r0, r3
 8007814:	f7fc fd9a 	bl	800434c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2251      	movs	r2, #81	; 0x51
 800781c:	2102      	movs	r1, #2
 800781e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2140      	movs	r1, #64	; 0x40
 800782c:	438a      	bics	r2, r1
 800782e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	2382      	movs	r3, #130	; 0x82
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	401a      	ands	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6899      	ldr	r1, [r3, #8]
 800783e:	2384      	movs	r3, #132	; 0x84
 8007840:	021b      	lsls	r3, r3, #8
 8007842:	400b      	ands	r3, r1
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68d9      	ldr	r1, [r3, #12]
 800784a:	2380      	movs	r3, #128	; 0x80
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	400b      	ands	r3, r1
 8007850:	431a      	orrs	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2102      	movs	r1, #2
 8007858:	400b      	ands	r3, r1
 800785a:	431a      	orrs	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	2101      	movs	r1, #1
 8007862:	400b      	ands	r3, r1
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6999      	ldr	r1, [r3, #24]
 800786a:	2380      	movs	r3, #128	; 0x80
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	400b      	ands	r3, r1
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	2138      	movs	r1, #56	; 0x38
 8007878:	400b      	ands	r3, r1
 800787a:	431a      	orrs	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	2180      	movs	r1, #128	; 0x80
 8007882:	400b      	ands	r3, r1
 8007884:	431a      	orrs	r2, r3
 8007886:	0011      	movs	r1, r2
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800788c:	2380      	movs	r3, #128	; 0x80
 800788e:	019b      	lsls	r3, r3, #6
 8007890:	401a      	ands	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	0c1b      	lsrs	r3, r3, #16
 80078a0:	2204      	movs	r2, #4
 80078a2:	4013      	ands	r3, r2
 80078a4:	0019      	movs	r1, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	2210      	movs	r2, #16
 80078ac:	401a      	ands	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69da      	ldr	r2, [r3, #28]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4907      	ldr	r1, [pc, #28]	; (80078e0 <HAL_SPI_Init+0x124>)
 80078c2:	400a      	ands	r2, r1
 80078c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2251      	movs	r2, #81	; 0x51
 80078d0:	2101      	movs	r1, #1
 80078d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	0018      	movs	r0, r3
 80078d8:	46bd      	mov	sp, r7
 80078da:	b002      	add	sp, #8
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	46c0      	nop			; (mov r8, r8)
 80078e0:	fffff7ff 	.word	0xfffff7ff

080078e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	1dbb      	adds	r3, r7, #6
 80078f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078f4:	231f      	movs	r3, #31
 80078f6:	18fb      	adds	r3, r7, r3
 80078f8:	2200      	movs	r2, #0
 80078fa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2250      	movs	r2, #80	; 0x50
 8007900:	5c9b      	ldrb	r3, [r3, r2]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_SPI_Transmit+0x26>
 8007906:	2302      	movs	r3, #2
 8007908:	e145      	b.n	8007b96 <HAL_SPI_Transmit+0x2b2>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2250      	movs	r2, #80	; 0x50
 800790e:	2101      	movs	r1, #1
 8007910:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007912:	f7fd f86f 	bl	80049f4 <HAL_GetTick>
 8007916:	0003      	movs	r3, r0
 8007918:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800791a:	2316      	movs	r3, #22
 800791c:	18fb      	adds	r3, r7, r3
 800791e:	1dba      	adds	r2, r7, #6
 8007920:	8812      	ldrh	r2, [r2, #0]
 8007922:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2251      	movs	r2, #81	; 0x51
 8007928:	5c9b      	ldrb	r3, [r3, r2]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b01      	cmp	r3, #1
 800792e:	d004      	beq.n	800793a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007930:	231f      	movs	r3, #31
 8007932:	18fb      	adds	r3, r7, r3
 8007934:	2202      	movs	r2, #2
 8007936:	701a      	strb	r2, [r3, #0]
    goto error;
 8007938:	e126      	b.n	8007b88 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <HAL_SPI_Transmit+0x64>
 8007940:	1dbb      	adds	r3, r7, #6
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d104      	bne.n	8007952 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007948:	231f      	movs	r3, #31
 800794a:	18fb      	adds	r3, r7, r3
 800794c:	2201      	movs	r2, #1
 800794e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007950:	e11a      	b.n	8007b88 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2251      	movs	r2, #81	; 0x51
 8007956:	2103      	movs	r1, #3
 8007958:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	1dba      	adds	r2, r7, #6
 800796a:	8812      	ldrh	r2, [r2, #0]
 800796c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	1dba      	adds	r2, r7, #6
 8007972:	8812      	ldrh	r2, [r2, #0]
 8007974:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	2380      	movs	r3, #128	; 0x80
 800799a:	021b      	lsls	r3, r3, #8
 800799c:	429a      	cmp	r2, r3
 800799e:	d110      	bne.n	80079c2 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2140      	movs	r1, #64	; 0x40
 80079ac:	438a      	bics	r2, r1
 80079ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2180      	movs	r1, #128	; 0x80
 80079bc:	01c9      	lsls	r1, r1, #7
 80079be:	430a      	orrs	r2, r1
 80079c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2240      	movs	r2, #64	; 0x40
 80079ca:	4013      	ands	r3, r2
 80079cc:	2b40      	cmp	r3, #64	; 0x40
 80079ce:	d007      	beq.n	80079e0 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2140      	movs	r1, #64	; 0x40
 80079dc:	430a      	orrs	r2, r1
 80079de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	2380      	movs	r3, #128	; 0x80
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d152      	bne.n	8007a92 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d004      	beq.n	80079fe <HAL_SPI_Transmit+0x11a>
 80079f4:	2316      	movs	r3, #22
 80079f6:	18fb      	adds	r3, r7, r3
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d143      	bne.n	8007a86 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a02:	881a      	ldrh	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0e:	1c9a      	adds	r2, r3, #2
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a22:	e030      	b.n	8007a86 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d112      	bne.n	8007a58 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a36:	881a      	ldrh	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a42:	1c9a      	adds	r2, r3, #2
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a56:	e016      	b.n	8007a86 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a58:	f7fc ffcc 	bl	80049f4 <HAL_GetTick>
 8007a5c:	0002      	movs	r2, r0
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d802      	bhi.n	8007a6e <HAL_SPI_Transmit+0x18a>
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	d102      	bne.n	8007a74 <HAL_SPI_Transmit+0x190>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d108      	bne.n	8007a86 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8007a74:	231f      	movs	r3, #31
 8007a76:	18fb      	adds	r3, r7, r3
 8007a78:	2203      	movs	r2, #3
 8007a7a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2251      	movs	r2, #81	; 0x51
 8007a80:	2101      	movs	r1, #1
 8007a82:	5499      	strb	r1, [r3, r2]
          goto error;
 8007a84:	e080      	b.n	8007b88 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1c9      	bne.n	8007a24 <HAL_SPI_Transmit+0x140>
 8007a90:	e053      	b.n	8007b3a <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d004      	beq.n	8007aa4 <HAL_SPI_Transmit+0x1c0>
 8007a9a:	2316      	movs	r3, #22
 8007a9c:	18fb      	adds	r3, r7, r3
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d145      	bne.n	8007b30 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	330c      	adds	r3, #12
 8007aae:	7812      	ldrb	r2, [r2, #0]
 8007ab0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab6:	1c5a      	adds	r2, r3, #1
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007aca:	e031      	b.n	8007b30 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d113      	bne.n	8007b02 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	330c      	adds	r3, #12
 8007ae4:	7812      	ldrb	r2, [r2, #0]
 8007ae6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	3b01      	subs	r3, #1
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	86da      	strh	r2, [r3, #54]	; 0x36
 8007b00:	e016      	b.n	8007b30 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b02:	f7fc ff77 	bl	80049f4 <HAL_GetTick>
 8007b06:	0002      	movs	r2, r0
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d802      	bhi.n	8007b18 <HAL_SPI_Transmit+0x234>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	3301      	adds	r3, #1
 8007b16:	d102      	bne.n	8007b1e <HAL_SPI_Transmit+0x23a>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d108      	bne.n	8007b30 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8007b1e:	231f      	movs	r3, #31
 8007b20:	18fb      	adds	r3, r7, r3
 8007b22:	2203      	movs	r2, #3
 8007b24:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2251      	movs	r2, #81	; 0x51
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	5499      	strb	r1, [r3, r2]
          goto error;
 8007b2e:	e02b      	b.n	8007b88 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1c8      	bne.n	8007acc <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	0018      	movs	r0, r3
 8007b42:	f000 fc1f 	bl	8008384 <SPI_EndRxTxTransaction>
 8007b46:	1e03      	subs	r3, r0, #0
 8007b48:	d002      	beq.n	8007b50 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10a      	bne.n	8007b6e <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b58:	2300      	movs	r3, #0
 8007b5a:	613b      	str	r3, [r7, #16]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	613b      	str	r3, [r7, #16]
 8007b6c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d004      	beq.n	8007b80 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8007b76:	231f      	movs	r3, #31
 8007b78:	18fb      	adds	r3, r7, r3
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	701a      	strb	r2, [r3, #0]
 8007b7e:	e003      	b.n	8007b88 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2251      	movs	r2, #81	; 0x51
 8007b84:	2101      	movs	r1, #1
 8007b86:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2250      	movs	r2, #80	; 0x50
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007b90:	231f      	movs	r3, #31
 8007b92:	18fb      	adds	r3, r7, r3
 8007b94:	781b      	ldrb	r3, [r3, #0]
}
 8007b96:	0018      	movs	r0, r3
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	b008      	add	sp, #32
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ba0:	b590      	push	{r4, r7, lr}
 8007ba2:	b089      	sub	sp, #36	; 0x24
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	1dbb      	adds	r3, r7, #6
 8007bae:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bb0:	2117      	movs	r1, #23
 8007bb2:	187b      	adds	r3, r7, r1
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2251      	movs	r2, #81	; 0x51
 8007bbc:	5c9b      	ldrb	r3, [r3, r2]
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d003      	beq.n	8007bcc <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8007bc4:	187b      	adds	r3, r7, r1
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	701a      	strb	r2, [r3, #0]
    goto error;
 8007bca:	e109      	b.n	8007de0 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	2382      	movs	r3, #130	; 0x82
 8007bd2:	005b      	lsls	r3, r3, #1
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d113      	bne.n	8007c00 <HAL_SPI_Receive+0x60>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10f      	bne.n	8007c00 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2251      	movs	r2, #81	; 0x51
 8007be4:	2104      	movs	r1, #4
 8007be6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007be8:	1dbb      	adds	r3, r7, #6
 8007bea:	881c      	ldrh	r4, [r3, #0]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	68b9      	ldr	r1, [r7, #8]
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	0023      	movs	r3, r4
 8007bf8:	f000 f900 	bl	8007dfc <HAL_SPI_TransmitReceive>
 8007bfc:	0003      	movs	r3, r0
 8007bfe:	e0f6      	b.n	8007dee <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2250      	movs	r2, #80	; 0x50
 8007c04:	5c9b      	ldrb	r3, [r3, r2]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d101      	bne.n	8007c0e <HAL_SPI_Receive+0x6e>
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	e0ef      	b.n	8007dee <HAL_SPI_Receive+0x24e>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2250      	movs	r2, #80	; 0x50
 8007c12:	2101      	movs	r1, #1
 8007c14:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c16:	f7fc feed 	bl	80049f4 <HAL_GetTick>
 8007c1a:	0003      	movs	r3, r0
 8007c1c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d003      	beq.n	8007c2c <HAL_SPI_Receive+0x8c>
 8007c24:	1dbb      	adds	r3, r7, #6
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d104      	bne.n	8007c36 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8007c2c:	2317      	movs	r3, #23
 8007c2e:	18fb      	adds	r3, r7, r3
 8007c30:	2201      	movs	r2, #1
 8007c32:	701a      	strb	r2, [r3, #0]
    goto error;
 8007c34:	e0d4      	b.n	8007de0 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2251      	movs	r2, #81	; 0x51
 8007c3a:	2104      	movs	r1, #4
 8007c3c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	1dba      	adds	r2, r7, #6
 8007c4e:	8812      	ldrh	r2, [r2, #0]
 8007c50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	1dba      	adds	r2, r7, #6
 8007c56:	8812      	ldrh	r2, [r2, #0]
 8007c58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	2380      	movs	r3, #128	; 0x80
 8007c7e:	021b      	lsls	r3, r3, #8
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d10f      	bne.n	8007ca4 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2140      	movs	r1, #64	; 0x40
 8007c90:	438a      	bics	r2, r1
 8007c92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4956      	ldr	r1, [pc, #344]	; (8007df8 <HAL_SPI_Receive+0x258>)
 8007ca0:	400a      	ands	r2, r1
 8007ca2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2240      	movs	r2, #64	; 0x40
 8007cac:	4013      	ands	r3, r2
 8007cae:	2b40      	cmp	r3, #64	; 0x40
 8007cb0:	d007      	beq.n	8007cc2 <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2140      	movs	r1, #64	; 0x40
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d000      	beq.n	8007ccc <HAL_SPI_Receive+0x12c>
 8007cca:	e06c      	b.n	8007da6 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007ccc:	e033      	b.n	8007d36 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d115      	bne.n	8007d08 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	330c      	adds	r3, #12
 8007ce2:	001a      	movs	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce8:	7812      	ldrb	r2, [r2, #0]
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d06:	e016      	b.n	8007d36 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d08:	f7fc fe74 	bl	80049f4 <HAL_GetTick>
 8007d0c:	0002      	movs	r2, r0
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d802      	bhi.n	8007d1e <HAL_SPI_Receive+0x17e>
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	d102      	bne.n	8007d24 <HAL_SPI_Receive+0x184>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d108      	bne.n	8007d36 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8007d24:	2317      	movs	r3, #23
 8007d26:	18fb      	adds	r3, r7, r3
 8007d28:	2203      	movs	r2, #3
 8007d2a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2251      	movs	r2, #81	; 0x51
 8007d30:	2101      	movs	r1, #1
 8007d32:	5499      	strb	r1, [r3, r2]
          goto error;
 8007d34:	e054      	b.n	8007de0 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1c6      	bne.n	8007cce <HAL_SPI_Receive+0x12e>
 8007d40:	e036      	b.n	8007db0 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d113      	bne.n	8007d78 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	b292      	uxth	r2, r2
 8007d5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	1c9a      	adds	r2, r3, #2
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d76:	e016      	b.n	8007da6 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d78:	f7fc fe3c 	bl	80049f4 <HAL_GetTick>
 8007d7c:	0002      	movs	r2, r0
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d802      	bhi.n	8007d8e <HAL_SPI_Receive+0x1ee>
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	d102      	bne.n	8007d94 <HAL_SPI_Receive+0x1f4>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d108      	bne.n	8007da6 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8007d94:	2317      	movs	r3, #23
 8007d96:	18fb      	adds	r3, r7, r3
 8007d98:	2203      	movs	r2, #3
 8007d9a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2251      	movs	r2, #81	; 0x51
 8007da0:	2101      	movs	r1, #1
 8007da2:	5499      	strb	r1, [r3, r2]
          goto error;
 8007da4:	e01c      	b.n	8007de0 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1c8      	bne.n	8007d42 <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	0018      	movs	r0, r3
 8007db8:	f000 fa7a 	bl	80082b0 <SPI_EndRxTransaction>
 8007dbc:	1e03      	subs	r3, r0, #0
 8007dbe:	d002      	beq.n	8007dc6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d004      	beq.n	8007dd8 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8007dce:	2317      	movs	r3, #23
 8007dd0:	18fb      	adds	r3, r7, r3
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	e003      	b.n	8007de0 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2251      	movs	r2, #81	; 0x51
 8007ddc:	2101      	movs	r1, #1
 8007dde:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2250      	movs	r2, #80	; 0x50
 8007de4:	2100      	movs	r1, #0
 8007de6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007de8:	2317      	movs	r3, #23
 8007dea:	18fb      	adds	r3, r7, r3
 8007dec:	781b      	ldrb	r3, [r3, #0]
}
 8007dee:	0018      	movs	r0, r3
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b007      	add	sp, #28
 8007df4:	bd90      	pop	{r4, r7, pc}
 8007df6:	46c0      	nop			; (mov r8, r8)
 8007df8:	ffffbfff 	.word	0xffffbfff

08007dfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08c      	sub	sp, #48	; 0x30
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	001a      	movs	r2, r3
 8007e0a:	1cbb      	adds	r3, r7, #2
 8007e0c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007e12:	232b      	movs	r3, #43	; 0x2b
 8007e14:	18fb      	adds	r3, r7, r3
 8007e16:	2200      	movs	r2, #0
 8007e18:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2250      	movs	r2, #80	; 0x50
 8007e1e:	5c9b      	ldrb	r3, [r3, r2]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d101      	bne.n	8007e28 <HAL_SPI_TransmitReceive+0x2c>
 8007e24:	2302      	movs	r3, #2
 8007e26:	e1b0      	b.n	800818a <HAL_SPI_TransmitReceive+0x38e>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2250      	movs	r2, #80	; 0x50
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e30:	f7fc fde0 	bl	80049f4 <HAL_GetTick>
 8007e34:	0003      	movs	r3, r0
 8007e36:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e38:	2023      	movs	r0, #35	; 0x23
 8007e3a:	183b      	adds	r3, r7, r0
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	2151      	movs	r1, #81	; 0x51
 8007e40:	5c52      	ldrb	r2, [r2, r1]
 8007e42:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007e4a:	231a      	movs	r3, #26
 8007e4c:	18fb      	adds	r3, r7, r3
 8007e4e:	1cba      	adds	r2, r7, #2
 8007e50:	8812      	ldrh	r2, [r2, #0]
 8007e52:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e54:	183b      	adds	r3, r7, r0
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d011      	beq.n	8007e80 <HAL_SPI_TransmitReceive+0x84>
 8007e5c:	69fa      	ldr	r2, [r7, #28]
 8007e5e:	2382      	movs	r3, #130	; 0x82
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d107      	bne.n	8007e76 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d103      	bne.n	8007e76 <HAL_SPI_TransmitReceive+0x7a>
 8007e6e:	183b      	adds	r3, r7, r0
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d004      	beq.n	8007e80 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007e76:	232b      	movs	r3, #43	; 0x2b
 8007e78:	18fb      	adds	r3, r7, r3
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	701a      	strb	r2, [r3, #0]
    goto error;
 8007e7e:	e17d      	b.n	800817c <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d006      	beq.n	8007e94 <HAL_SPI_TransmitReceive+0x98>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d003      	beq.n	8007e94 <HAL_SPI_TransmitReceive+0x98>
 8007e8c:	1cbb      	adds	r3, r7, #2
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d104      	bne.n	8007e9e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007e94:	232b      	movs	r3, #43	; 0x2b
 8007e96:	18fb      	adds	r3, r7, r3
 8007e98:	2201      	movs	r2, #1
 8007e9a:	701a      	strb	r2, [r3, #0]
    goto error;
 8007e9c:	e16e      	b.n	800817c <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2251      	movs	r2, #81	; 0x51
 8007ea2:	5c9b      	ldrb	r3, [r3, r2]
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d003      	beq.n	8007eb2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2251      	movs	r2, #81	; 0x51
 8007eae:	2105      	movs	r1, #5
 8007eb0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	1cba      	adds	r2, r7, #2
 8007ec2:	8812      	ldrh	r2, [r2, #0]
 8007ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	1cba      	adds	r2, r7, #2
 8007eca:	8812      	ldrh	r2, [r2, #0]
 8007ecc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	1cba      	adds	r2, r7, #2
 8007ed8:	8812      	ldrh	r2, [r2, #0]
 8007eda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	1cba      	adds	r2, r7, #2
 8007ee0:	8812      	ldrh	r2, [r2, #0]
 8007ee2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2240      	movs	r2, #64	; 0x40
 8007ef8:	4013      	ands	r3, r2
 8007efa:	2b40      	cmp	r3, #64	; 0x40
 8007efc:	d007      	beq.n	8007f0e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2140      	movs	r1, #64	; 0x40
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	2380      	movs	r3, #128	; 0x80
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d000      	beq.n	8007f1c <HAL_SPI_TransmitReceive+0x120>
 8007f1a:	e07f      	b.n	800801c <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d005      	beq.n	8007f30 <HAL_SPI_TransmitReceive+0x134>
 8007f24:	231a      	movs	r3, #26
 8007f26:	18fb      	adds	r3, r7, r3
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d000      	beq.n	8007f30 <HAL_SPI_TransmitReceive+0x134>
 8007f2e:	e06a      	b.n	8008006 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f34:	881a      	ldrh	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f40:	1c9a      	adds	r2, r3, #2
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f54:	e057      	b.n	8008006 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	4013      	ands	r3, r2
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d11b      	bne.n	8007f9c <HAL_SPI_TransmitReceive+0x1a0>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d016      	beq.n	8007f9c <HAL_SPI_TransmitReceive+0x1a0>
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d113      	bne.n	8007f9c <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f78:	881a      	ldrh	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f84:	1c9a      	adds	r2, r3, #2
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	3b01      	subs	r3, #1
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d119      	bne.n	8007fde <HAL_SPI_TransmitReceive+0x1e2>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d014      	beq.n	8007fde <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68da      	ldr	r2, [r3, #12]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	b292      	uxth	r2, r2
 8007fc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	1c9a      	adds	r2, r3, #2
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007fde:	f7fc fd09 	bl	80049f4 <HAL_GetTick>
 8007fe2:	0002      	movs	r2, r0
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d80b      	bhi.n	8008006 <HAL_SPI_TransmitReceive+0x20a>
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	d008      	beq.n	8008006 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8007ff4:	232b      	movs	r3, #43	; 0x2b
 8007ff6:	18fb      	adds	r3, r7, r3
 8007ff8:	2203      	movs	r2, #3
 8007ffa:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2251      	movs	r2, #81	; 0x51
 8008000:	2101      	movs	r1, #1
 8008002:	5499      	strb	r1, [r3, r2]
        goto error;
 8008004:	e0ba      	b.n	800817c <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800800a:	b29b      	uxth	r3, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1a2      	bne.n	8007f56 <HAL_SPI_TransmitReceive+0x15a>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008014:	b29b      	uxth	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d19d      	bne.n	8007f56 <HAL_SPI_TransmitReceive+0x15a>
 800801a:	e083      	b.n	8008124 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d005      	beq.n	8008030 <HAL_SPI_TransmitReceive+0x234>
 8008024:	231a      	movs	r3, #26
 8008026:	18fb      	adds	r3, r7, r3
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d000      	beq.n	8008030 <HAL_SPI_TransmitReceive+0x234>
 800802e:	e06f      	b.n	8008110 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	330c      	adds	r3, #12
 800803a:	7812      	ldrb	r2, [r2, #0]
 800803c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800804c:	b29b      	uxth	r3, r3
 800804e:	3b01      	subs	r3, #1
 8008050:	b29a      	uxth	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008056:	e05b      	b.n	8008110 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	2202      	movs	r2, #2
 8008060:	4013      	ands	r3, r2
 8008062:	2b02      	cmp	r3, #2
 8008064:	d11c      	bne.n	80080a0 <HAL_SPI_TransmitReceive+0x2a4>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800806a:	b29b      	uxth	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d017      	beq.n	80080a0 <HAL_SPI_TransmitReceive+0x2a4>
 8008070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008072:	2b01      	cmp	r3, #1
 8008074:	d114      	bne.n	80080a0 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	330c      	adds	r3, #12
 8008080:	7812      	ldrb	r2, [r2, #0]
 8008082:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008092:	b29b      	uxth	r3, r3
 8008094:	3b01      	subs	r3, #1
 8008096:	b29a      	uxth	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800809c:	2300      	movs	r3, #0
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	2201      	movs	r2, #1
 80080a8:	4013      	ands	r3, r2
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d119      	bne.n	80080e2 <HAL_SPI_TransmitReceive+0x2e6>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d014      	beq.n	80080e2 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c2:	b2d2      	uxtb	r2, r2
 80080c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080de:	2301      	movs	r3, #1
 80080e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080e2:	f7fc fc87 	bl	80049f4 <HAL_GetTick>
 80080e6:	0002      	movs	r2, r0
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d802      	bhi.n	80080f8 <HAL_SPI_TransmitReceive+0x2fc>
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	3301      	adds	r3, #1
 80080f6:	d102      	bne.n	80080fe <HAL_SPI_TransmitReceive+0x302>
 80080f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d108      	bne.n	8008110 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 80080fe:	232b      	movs	r3, #43	; 0x2b
 8008100:	18fb      	adds	r3, r7, r3
 8008102:	2203      	movs	r2, #3
 8008104:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2251      	movs	r2, #81	; 0x51
 800810a:	2101      	movs	r1, #1
 800810c:	5499      	strb	r1, [r3, r2]
        goto error;
 800810e:	e035      	b.n	800817c <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008114:	b29b      	uxth	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d19e      	bne.n	8008058 <HAL_SPI_TransmitReceive+0x25c>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800811e:	b29b      	uxth	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d199      	bne.n	8008058 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008126:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	0018      	movs	r0, r3
 800812c:	f000 f92a 	bl	8008384 <SPI_EndRxTxTransaction>
 8008130:	1e03      	subs	r3, r0, #0
 8008132:	d007      	beq.n	8008144 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8008134:	232b      	movs	r3, #43	; 0x2b
 8008136:	18fb      	adds	r3, r7, r3
 8008138:	2201      	movs	r2, #1
 800813a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008142:	e01b      	b.n	800817c <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10a      	bne.n	8008162 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800814c:	2300      	movs	r3, #0
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008166:	2b00      	cmp	r3, #0
 8008168:	d004      	beq.n	8008174 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 800816a:	232b      	movs	r3, #43	; 0x2b
 800816c:	18fb      	adds	r3, r7, r3
 800816e:	2201      	movs	r2, #1
 8008170:	701a      	strb	r2, [r3, #0]
 8008172:	e003      	b.n	800817c <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2251      	movs	r2, #81	; 0x51
 8008178:	2101      	movs	r1, #1
 800817a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2250      	movs	r2, #80	; 0x50
 8008180:	2100      	movs	r1, #0
 8008182:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008184:	232b      	movs	r3, #43	; 0x2b
 8008186:	18fb      	adds	r3, r7, r3
 8008188:	781b      	ldrb	r3, [r3, #0]
}
 800818a:	0018      	movs	r0, r3
 800818c:	46bd      	mov	sp, r7
 800818e:	b00c      	add	sp, #48	; 0x30
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	603b      	str	r3, [r7, #0]
 80081a0:	1dfb      	adds	r3, r7, #7
 80081a2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80081a4:	f7fc fc26 	bl	80049f4 <HAL_GetTick>
 80081a8:	0002      	movs	r2, r0
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	1a9b      	subs	r3, r3, r2
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	18d3      	adds	r3, r2, r3
 80081b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80081b4:	f7fc fc1e 	bl	80049f4 <HAL_GetTick>
 80081b8:	0003      	movs	r3, r0
 80081ba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80081bc:	4b3a      	ldr	r3, [pc, #232]	; (80082a8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	015b      	lsls	r3, r3, #5
 80081c2:	0d1b      	lsrs	r3, r3, #20
 80081c4:	69fa      	ldr	r2, [r7, #28]
 80081c6:	4353      	muls	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081ca:	e058      	b.n	800827e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	3301      	adds	r3, #1
 80081d0:	d055      	beq.n	800827e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081d2:	f7fc fc0f 	bl	80049f4 <HAL_GetTick>
 80081d6:	0002      	movs	r2, r0
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	69fa      	ldr	r2, [r7, #28]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d902      	bls.n	80081e8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d142      	bne.n	800826e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	21e0      	movs	r1, #224	; 0xe0
 80081f4:	438a      	bics	r2, r1
 80081f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	2382      	movs	r3, #130	; 0x82
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	429a      	cmp	r2, r3
 8008202:	d113      	bne.n	800822c <SPI_WaitFlagStateUntilTimeout+0x98>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	2380      	movs	r3, #128	; 0x80
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	429a      	cmp	r2, r3
 800820e:	d005      	beq.n	800821c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	2380      	movs	r3, #128	; 0x80
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	429a      	cmp	r2, r3
 800821a:	d107      	bne.n	800822c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2140      	movs	r1, #64	; 0x40
 8008228:	438a      	bics	r2, r1
 800822a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008230:	2380      	movs	r3, #128	; 0x80
 8008232:	019b      	lsls	r3, r3, #6
 8008234:	429a      	cmp	r2, r3
 8008236:	d110      	bne.n	800825a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	491a      	ldr	r1, [pc, #104]	; (80082ac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008244:	400a      	ands	r2, r1
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2180      	movs	r1, #128	; 0x80
 8008254:	0189      	lsls	r1, r1, #6
 8008256:	430a      	orrs	r2, r1
 8008258:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2251      	movs	r2, #81	; 0x51
 800825e:	2101      	movs	r1, #1
 8008260:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2250      	movs	r2, #80	; 0x50
 8008266:	2100      	movs	r1, #0
 8008268:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e017      	b.n	800829e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	3b01      	subs	r3, #1
 800827c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	4013      	ands	r3, r2
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	425a      	negs	r2, r3
 800828e:	4153      	adcs	r3, r2
 8008290:	b2db      	uxtb	r3, r3
 8008292:	001a      	movs	r2, r3
 8008294:	1dfb      	adds	r3, r7, #7
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d197      	bne.n	80081cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	0018      	movs	r0, r3
 80082a0:	46bd      	mov	sp, r7
 80082a2:	b008      	add	sp, #32
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	46c0      	nop			; (mov r8, r8)
 80082a8:	20000000 	.word	0x20000000
 80082ac:	ffffdfff 	.word	0xffffdfff

080082b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	2382      	movs	r3, #130	; 0x82
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d113      	bne.n	80082f0 <SPI_EndRxTransaction+0x40>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	2380      	movs	r3, #128	; 0x80
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d005      	beq.n	80082e0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	689a      	ldr	r2, [r3, #8]
 80082d8:	2380      	movs	r3, #128	; 0x80
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	429a      	cmp	r2, r3
 80082de:	d107      	bne.n	80082f0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2140      	movs	r1, #64	; 0x40
 80082ec:	438a      	bics	r2, r1
 80082ee:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	2382      	movs	r3, #130	; 0x82
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d12b      	bne.n	8008354 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	2380      	movs	r3, #128	; 0x80
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	429a      	cmp	r2, r3
 8008306:	d012      	beq.n	800832e <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	0013      	movs	r3, r2
 8008312:	2200      	movs	r2, #0
 8008314:	2180      	movs	r1, #128	; 0x80
 8008316:	f7ff ff3d 	bl	8008194 <SPI_WaitFlagStateUntilTimeout>
 800831a:	1e03      	subs	r3, r0, #0
 800831c:	d02d      	beq.n	800837a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008322:	2220      	movs	r2, #32
 8008324:	431a      	orrs	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e026      	b.n	800837c <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	0013      	movs	r3, r2
 8008338:	2200      	movs	r2, #0
 800833a:	2101      	movs	r1, #1
 800833c:	f7ff ff2a 	bl	8008194 <SPI_WaitFlagStateUntilTimeout>
 8008340:	1e03      	subs	r3, r0, #0
 8008342:	d01a      	beq.n	800837a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008348:	2220      	movs	r2, #32
 800834a:	431a      	orrs	r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e013      	b.n	800837c <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	0013      	movs	r3, r2
 800835e:	2200      	movs	r2, #0
 8008360:	2101      	movs	r1, #1
 8008362:	f7ff ff17 	bl	8008194 <SPI_WaitFlagStateUntilTimeout>
 8008366:	1e03      	subs	r3, r0, #0
 8008368:	d007      	beq.n	800837a <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800836e:	2220      	movs	r2, #32
 8008370:	431a      	orrs	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e000      	b.n	800837c <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	0018      	movs	r0, r3
 800837e:	46bd      	mov	sp, r7
 8008380:	b004      	add	sp, #16
 8008382:	bd80      	pop	{r7, pc}

08008384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b088      	sub	sp, #32
 8008388:	af02      	add	r7, sp, #8
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008390:	4b1d      	ldr	r3, [pc, #116]	; (8008408 <SPI_EndRxTxTransaction+0x84>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	491d      	ldr	r1, [pc, #116]	; (800840c <SPI_EndRxTxTransaction+0x88>)
 8008396:	0018      	movs	r0, r3
 8008398:	f7f7 fed2 	bl	8000140 <__udivsi3>
 800839c:	0003      	movs	r3, r0
 800839e:	001a      	movs	r2, r3
 80083a0:	0013      	movs	r3, r2
 80083a2:	015b      	lsls	r3, r3, #5
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	189b      	adds	r3, r3, r2
 80083aa:	00db      	lsls	r3, r3, #3
 80083ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	2382      	movs	r3, #130	; 0x82
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d112      	bne.n	80083e0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	0013      	movs	r3, r2
 80083c4:	2200      	movs	r2, #0
 80083c6:	2180      	movs	r1, #128	; 0x80
 80083c8:	f7ff fee4 	bl	8008194 <SPI_WaitFlagStateUntilTimeout>
 80083cc:	1e03      	subs	r3, r0, #0
 80083ce:	d016      	beq.n	80083fe <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d4:	2220      	movs	r2, #32
 80083d6:	431a      	orrs	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e00f      	b.n	8008400 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	2280      	movs	r2, #128	; 0x80
 80083f4:	4013      	ands	r3, r2
 80083f6:	2b80      	cmp	r3, #128	; 0x80
 80083f8:	d0f2      	beq.n	80083e0 <SPI_EndRxTxTransaction+0x5c>
 80083fa:	e000      	b.n	80083fe <SPI_EndRxTxTransaction+0x7a>
        break;
 80083fc:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	0018      	movs	r0, r3
 8008402:	46bd      	mov	sp, r7
 8008404:	b006      	add	sp, #24
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20000000 	.word	0x20000000
 800840c:	016e3600 	.word	0x016e3600

08008410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e032      	b.n	8008488 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2239      	movs	r2, #57	; 0x39
 8008426:	5c9b      	ldrb	r3, [r3, r2]
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d107      	bne.n	800843e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2238      	movs	r2, #56	; 0x38
 8008432:	2100      	movs	r1, #0
 8008434:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	0018      	movs	r0, r3
 800843a:	f7fc f94d 	bl	80046d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2239      	movs	r2, #57	; 0x39
 8008442:	2102      	movs	r1, #2
 8008444:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3304      	adds	r3, #4
 800844e:	0019      	movs	r1, r3
 8008450:	0010      	movs	r0, r2
 8008452:	f000 f971 	bl	8008738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	223e      	movs	r2, #62	; 0x3e
 800845a:	2101      	movs	r1, #1
 800845c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	223a      	movs	r2, #58	; 0x3a
 8008462:	2101      	movs	r1, #1
 8008464:	5499      	strb	r1, [r3, r2]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	223b      	movs	r2, #59	; 0x3b
 800846a:	2101      	movs	r1, #1
 800846c:	5499      	strb	r1, [r3, r2]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	223c      	movs	r2, #60	; 0x3c
 8008472:	2101      	movs	r1, #1
 8008474:	5499      	strb	r1, [r3, r2]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	223d      	movs	r2, #61	; 0x3d
 800847a:	2101      	movs	r1, #1
 800847c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2239      	movs	r2, #57	; 0x39
 8008482:	2101      	movs	r1, #1
 8008484:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	0018      	movs	r0, r3
 800848a:	46bd      	mov	sp, r7
 800848c:	b002      	add	sp, #8
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2239      	movs	r2, #57	; 0x39
 800849c:	5c9b      	ldrb	r3, [r3, r2]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d001      	beq.n	80084a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e036      	b.n	8008516 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2239      	movs	r2, #57	; 0x39
 80084ac:	2102      	movs	r1, #2
 80084ae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2101      	movs	r1, #1
 80084bc:	430a      	orrs	r2, r1
 80084be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	2380      	movs	r3, #128	; 0x80
 80084c6:	05db      	lsls	r3, r3, #23
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d009      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x50>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a13      	ldr	r2, [pc, #76]	; (8008520 <HAL_TIM_Base_Start_IT+0x90>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d004      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x50>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a12      	ldr	r2, [pc, #72]	; (8008524 <HAL_TIM_Base_Start_IT+0x94>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d111      	bne.n	8008504 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	2207      	movs	r2, #7
 80084e8:	4013      	ands	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b06      	cmp	r3, #6
 80084f0:	d010      	beq.n	8008514 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2101      	movs	r1, #1
 80084fe:	430a      	orrs	r2, r1
 8008500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008502:	e007      	b.n	8008514 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2101      	movs	r1, #1
 8008510:	430a      	orrs	r2, r1
 8008512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	0018      	movs	r0, r3
 8008518:	46bd      	mov	sp, r7
 800851a:	b004      	add	sp, #16
 800851c:	bd80      	pop	{r7, pc}
 800851e:	46c0      	nop			; (mov r8, r8)
 8008520:	40010800 	.word	0x40010800
 8008524:	40011400 	.word	0x40011400

08008528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	2202      	movs	r2, #2
 8008538:	4013      	ands	r3, r2
 800853a:	2b02      	cmp	r3, #2
 800853c:	d124      	bne.n	8008588 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	2202      	movs	r2, #2
 8008546:	4013      	ands	r3, r2
 8008548:	2b02      	cmp	r3, #2
 800854a:	d11d      	bne.n	8008588 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2203      	movs	r2, #3
 8008552:	4252      	negs	r2, r2
 8008554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	2203      	movs	r2, #3
 8008564:	4013      	ands	r3, r2
 8008566:	d004      	beq.n	8008572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	0018      	movs	r0, r3
 800856c:	f000 f8cc 	bl	8008708 <HAL_TIM_IC_CaptureCallback>
 8008570:	e007      	b.n	8008582 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	0018      	movs	r0, r3
 8008576:	f000 f8bf 	bl	80086f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	0018      	movs	r0, r3
 800857e:	f000 f8cb 	bl	8008718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	2204      	movs	r2, #4
 8008590:	4013      	ands	r3, r2
 8008592:	2b04      	cmp	r3, #4
 8008594:	d125      	bne.n	80085e2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	2204      	movs	r2, #4
 800859e:	4013      	ands	r3, r2
 80085a0:	2b04      	cmp	r3, #4
 80085a2:	d11e      	bne.n	80085e2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2205      	movs	r2, #5
 80085aa:	4252      	negs	r2, r2
 80085ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2202      	movs	r2, #2
 80085b2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	699a      	ldr	r2, [r3, #24]
 80085ba:	23c0      	movs	r3, #192	; 0xc0
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4013      	ands	r3, r2
 80085c0:	d004      	beq.n	80085cc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	0018      	movs	r0, r3
 80085c6:	f000 f89f 	bl	8008708 <HAL_TIM_IC_CaptureCallback>
 80085ca:	e007      	b.n	80085dc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	0018      	movs	r0, r3
 80085d0:	f000 f892 	bl	80086f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	0018      	movs	r0, r3
 80085d8:	f000 f89e 	bl	8008718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	2208      	movs	r2, #8
 80085ea:	4013      	ands	r3, r2
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d124      	bne.n	800863a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	2208      	movs	r2, #8
 80085f8:	4013      	ands	r3, r2
 80085fa:	2b08      	cmp	r3, #8
 80085fc:	d11d      	bne.n	800863a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2209      	movs	r2, #9
 8008604:	4252      	negs	r2, r2
 8008606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2204      	movs	r2, #4
 800860c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	2203      	movs	r2, #3
 8008616:	4013      	ands	r3, r2
 8008618:	d004      	beq.n	8008624 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	0018      	movs	r0, r3
 800861e:	f000 f873 	bl	8008708 <HAL_TIM_IC_CaptureCallback>
 8008622:	e007      	b.n	8008634 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	0018      	movs	r0, r3
 8008628:	f000 f866 	bl	80086f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	0018      	movs	r0, r3
 8008630:	f000 f872 	bl	8008718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	2210      	movs	r2, #16
 8008642:	4013      	ands	r3, r2
 8008644:	2b10      	cmp	r3, #16
 8008646:	d125      	bne.n	8008694 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	2210      	movs	r2, #16
 8008650:	4013      	ands	r3, r2
 8008652:	2b10      	cmp	r3, #16
 8008654:	d11e      	bne.n	8008694 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2211      	movs	r2, #17
 800865c:	4252      	negs	r2, r2
 800865e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2208      	movs	r2, #8
 8008664:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69da      	ldr	r2, [r3, #28]
 800866c:	23c0      	movs	r3, #192	; 0xc0
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4013      	ands	r3, r2
 8008672:	d004      	beq.n	800867e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	0018      	movs	r0, r3
 8008678:	f000 f846 	bl	8008708 <HAL_TIM_IC_CaptureCallback>
 800867c:	e007      	b.n	800868e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	0018      	movs	r0, r3
 8008682:	f000 f839 	bl	80086f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	0018      	movs	r0, r3
 800868a:	f000 f845 	bl	8008718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	2201      	movs	r2, #1
 800869c:	4013      	ands	r3, r2
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d10f      	bne.n	80086c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	2201      	movs	r2, #1
 80086aa:	4013      	ands	r3, r2
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d108      	bne.n	80086c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2202      	movs	r2, #2
 80086b6:	4252      	negs	r2, r2
 80086b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	0018      	movs	r0, r3
 80086be:	f7fb f837 	bl	8003730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	2240      	movs	r2, #64	; 0x40
 80086ca:	4013      	ands	r3, r2
 80086cc:	2b40      	cmp	r3, #64	; 0x40
 80086ce:	d10f      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	2240      	movs	r2, #64	; 0x40
 80086d8:	4013      	ands	r3, r2
 80086da:	2b40      	cmp	r3, #64	; 0x40
 80086dc:	d108      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2241      	movs	r2, #65	; 0x41
 80086e4:	4252      	negs	r2, r2
 80086e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	0018      	movs	r0, r3
 80086ec:	f000 f81c 	bl	8008728 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086f0:	46c0      	nop			; (mov r8, r8)
 80086f2:	46bd      	mov	sp, r7
 80086f4:	b002      	add	sp, #8
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008700:	46c0      	nop			; (mov r8, r8)
 8008702:	46bd      	mov	sp, r7
 8008704:	b002      	add	sp, #8
 8008706:	bd80      	pop	{r7, pc}

08008708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008710:	46c0      	nop			; (mov r8, r8)
 8008712:	46bd      	mov	sp, r7
 8008714:	b002      	add	sp, #8
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008720:	46c0      	nop			; (mov r8, r8)
 8008722:	46bd      	mov	sp, r7
 8008724:	b002      	add	sp, #8
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008730:	46c0      	nop			; (mov r8, r8)
 8008732:	46bd      	mov	sp, r7
 8008734:	b002      	add	sp, #8
 8008736:	bd80      	pop	{r7, pc}

08008738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	2380      	movs	r3, #128	; 0x80
 800874c:	05db      	lsls	r3, r3, #23
 800874e:	429a      	cmp	r2, r3
 8008750:	d007      	beq.n	8008762 <TIM_Base_SetConfig+0x2a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a1f      	ldr	r2, [pc, #124]	; (80087d4 <TIM_Base_SetConfig+0x9c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d003      	beq.n	8008762 <TIM_Base_SetConfig+0x2a>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a1e      	ldr	r2, [pc, #120]	; (80087d8 <TIM_Base_SetConfig+0xa0>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d108      	bne.n	8008774 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2270      	movs	r2, #112	; 0x70
 8008766:	4393      	bics	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	4313      	orrs	r3, r2
 8008772:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	2380      	movs	r3, #128	; 0x80
 8008778:	05db      	lsls	r3, r3, #23
 800877a:	429a      	cmp	r2, r3
 800877c:	d007      	beq.n	800878e <TIM_Base_SetConfig+0x56>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a14      	ldr	r2, [pc, #80]	; (80087d4 <TIM_Base_SetConfig+0x9c>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d003      	beq.n	800878e <TIM_Base_SetConfig+0x56>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a13      	ldr	r2, [pc, #76]	; (80087d8 <TIM_Base_SetConfig+0xa0>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d108      	bne.n	80087a0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	4a12      	ldr	r2, [pc, #72]	; (80087dc <TIM_Base_SetConfig+0xa4>)
 8008792:	4013      	ands	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4313      	orrs	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2280      	movs	r2, #128	; 0x80
 80087a4:	4393      	bics	r3, r2
 80087a6:	001a      	movs	r2, r3
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	689a      	ldr	r2, [r3, #8]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	615a      	str	r2, [r3, #20]
}
 80087cc:	46c0      	nop			; (mov r8, r8)
 80087ce:	46bd      	mov	sp, r7
 80087d0:	b004      	add	sp, #16
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	40010800 	.word	0x40010800
 80087d8:	40011400 	.word	0x40011400
 80087dc:	fffffcff 	.word	0xfffffcff

080087e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2238      	movs	r2, #56	; 0x38
 80087ee:	5c9b      	ldrb	r3, [r3, r2]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e042      	b.n	800887e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2238      	movs	r2, #56	; 0x38
 80087fc:	2101      	movs	r1, #1
 80087fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2239      	movs	r2, #57	; 0x39
 8008804:	2102      	movs	r1, #2
 8008806:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2270      	movs	r2, #112	; 0x70
 800881c:	4393      	bics	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	4313      	orrs	r3, r2
 8008828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	2380      	movs	r3, #128	; 0x80
 8008838:	05db      	lsls	r3, r3, #23
 800883a:	429a      	cmp	r2, r3
 800883c:	d009      	beq.n	8008852 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a11      	ldr	r2, [pc, #68]	; (8008888 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d004      	beq.n	8008852 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a0f      	ldr	r2, [pc, #60]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d10c      	bne.n	800886c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2280      	movs	r2, #128	; 0x80
 8008856:	4393      	bics	r3, r2
 8008858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	4313      	orrs	r3, r2
 8008862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2239      	movs	r2, #57	; 0x39
 8008870:	2101      	movs	r1, #1
 8008872:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2238      	movs	r2, #56	; 0x38
 8008878:	2100      	movs	r1, #0
 800887a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	0018      	movs	r0, r3
 8008880:	46bd      	mov	sp, r7
 8008882:	b004      	add	sp, #16
 8008884:	bd80      	pop	{r7, pc}
 8008886:	46c0      	nop			; (mov r8, r8)
 8008888:	40010800 	.word	0x40010800
 800888c:	40011400 	.word	0x40011400

08008890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e044      	b.n	800892c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d107      	bne.n	80088ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2278      	movs	r2, #120	; 0x78
 80088ae:	2100      	movs	r1, #0
 80088b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	0018      	movs	r0, r3
 80088b6:	f7fb ff8f 	bl	80047d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2224      	movs	r2, #36	; 0x24
 80088be:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2101      	movs	r1, #1
 80088cc:	438a      	bics	r2, r1
 80088ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	0018      	movs	r0, r3
 80088d4:	f000 fc2c 	bl	8009130 <UART_SetConfig>
 80088d8:	0003      	movs	r3, r0
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d101      	bne.n	80088e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e024      	b.n	800892c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	0018      	movs	r0, r3
 80088ee:	f000 fea3 	bl	8009638 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	490d      	ldr	r1, [pc, #52]	; (8008934 <HAL_UART_Init+0xa4>)
 80088fe:	400a      	ands	r2, r1
 8008900:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	689a      	ldr	r2, [r3, #8]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	212a      	movs	r1, #42	; 0x2a
 800890e:	438a      	bics	r2, r1
 8008910:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2101      	movs	r1, #1
 800891e:	430a      	orrs	r2, r1
 8008920:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	0018      	movs	r0, r3
 8008926:	f000 ff3b 	bl	80097a0 <UART_CheckIdleState>
 800892a:	0003      	movs	r3, r0
}
 800892c:	0018      	movs	r0, r3
 800892e:	46bd      	mov	sp, r7
 8008930:	b002      	add	sp, #8
 8008932:	bd80      	pop	{r7, pc}
 8008934:	ffffb7ff 	.word	0xffffb7ff

08008938 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08a      	sub	sp, #40	; 0x28
 800893c:	af02      	add	r7, sp, #8
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	1dbb      	adds	r3, r7, #6
 8008946:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800894c:	2b20      	cmp	r3, #32
 800894e:	d000      	beq.n	8008952 <HAL_UART_Transmit+0x1a>
 8008950:	e08c      	b.n	8008a6c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <HAL_UART_Transmit+0x28>
 8008958:	1dbb      	adds	r3, r7, #6
 800895a:	881b      	ldrh	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e084      	b.n	8008a6e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689a      	ldr	r2, [r3, #8]
 8008968:	2380      	movs	r3, #128	; 0x80
 800896a:	015b      	lsls	r3, r3, #5
 800896c:	429a      	cmp	r2, r3
 800896e:	d109      	bne.n	8008984 <HAL_UART_Transmit+0x4c>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d105      	bne.n	8008984 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	2201      	movs	r2, #1
 800897c:	4013      	ands	r3, r2
 800897e:	d001      	beq.n	8008984 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e074      	b.n	8008a6e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2284      	movs	r2, #132	; 0x84
 8008988:	2100      	movs	r1, #0
 800898a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2221      	movs	r2, #33	; 0x21
 8008990:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008992:	f7fc f82f 	bl	80049f4 <HAL_GetTick>
 8008996:	0003      	movs	r3, r0
 8008998:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	1dba      	adds	r2, r7, #6
 800899e:	2150      	movs	r1, #80	; 0x50
 80089a0:	8812      	ldrh	r2, [r2, #0]
 80089a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	1dba      	adds	r2, r7, #6
 80089a8:	2152      	movs	r1, #82	; 0x52
 80089aa:	8812      	ldrh	r2, [r2, #0]
 80089ac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	2380      	movs	r3, #128	; 0x80
 80089b4:	015b      	lsls	r3, r3, #5
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d108      	bne.n	80089cc <HAL_UART_Transmit+0x94>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80089c2:	2300      	movs	r3, #0
 80089c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	61bb      	str	r3, [r7, #24]
 80089ca:	e003      	b.n	80089d4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089d0:	2300      	movs	r3, #0
 80089d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089d4:	e02f      	b.n	8008a36 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	0013      	movs	r3, r2
 80089e0:	2200      	movs	r2, #0
 80089e2:	2180      	movs	r1, #128	; 0x80
 80089e4:	f000 ff84 	bl	80098f0 <UART_WaitOnFlagUntilTimeout>
 80089e8:	1e03      	subs	r3, r0, #0
 80089ea:	d004      	beq.n	80089f6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2220      	movs	r2, #32
 80089f0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e03b      	b.n	8008a6e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10b      	bne.n	8008a14 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	001a      	movs	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	05d2      	lsls	r2, r2, #23
 8008a08:	0dd2      	lsrs	r2, r2, #23
 8008a0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	3302      	adds	r3, #2
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	e007      	b.n	8008a24 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	781a      	ldrb	r2, [r3, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	3301      	adds	r3, #1
 8008a22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2252      	movs	r2, #82	; 0x52
 8008a28:	5a9b      	ldrh	r3, [r3, r2]
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	b299      	uxth	r1, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2252      	movs	r2, #82	; 0x52
 8008a34:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2252      	movs	r2, #82	; 0x52
 8008a3a:	5a9b      	ldrh	r3, [r3, r2]
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1c9      	bne.n	80089d6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	0013      	movs	r3, r2
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2140      	movs	r1, #64	; 0x40
 8008a50:	f000 ff4e 	bl	80098f0 <UART_WaitOnFlagUntilTimeout>
 8008a54:	1e03      	subs	r3, r0, #0
 8008a56:	d004      	beq.n	8008a62 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e005      	b.n	8008a6e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2220      	movs	r2, #32
 8008a66:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	e000      	b.n	8008a6e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8008a6c:	2302      	movs	r3, #2
  }
}
 8008a6e:	0018      	movs	r0, r3
 8008a70:	46bd      	mov	sp, r7
 8008a72:	b008      	add	sp, #32
 8008a74:	bd80      	pop	{r7, pc}
	...

08008a78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	1dbb      	adds	r3, r7, #6
 8008a84:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2280      	movs	r2, #128	; 0x80
 8008a8a:	589b      	ldr	r3, [r3, r2]
 8008a8c:	2b20      	cmp	r3, #32
 8008a8e:	d14a      	bne.n	8008b26 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <HAL_UART_Receive_IT+0x26>
 8008a96:	1dbb      	adds	r3, r7, #6
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e042      	b.n	8008b28 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	689a      	ldr	r2, [r3, #8]
 8008aa6:	2380      	movs	r3, #128	; 0x80
 8008aa8:	015b      	lsls	r3, r3, #5
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d109      	bne.n	8008ac2 <HAL_UART_Receive_IT+0x4a>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d105      	bne.n	8008ac2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	4013      	ands	r3, r2
 8008abc:	d001      	beq.n	8008ac2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e032      	b.n	8008b28 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a18      	ldr	r2, [pc, #96]	; (8008b30 <HAL_UART_Receive_IT+0xb8>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d020      	beq.n	8008b14 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	2380      	movs	r3, #128	; 0x80
 8008ada:	041b      	lsls	r3, r3, #16
 8008adc:	4013      	ands	r3, r2
 8008ade:	d019      	beq.n	8008b14 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ae4:	613b      	str	r3, [r7, #16]
  return(result);
 8008ae6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ae8:	61fb      	str	r3, [r7, #28]
 8008aea:	2301      	movs	r3, #1
 8008aec:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f383 8810 	msr	PRIMASK, r3
}
 8008af4:	46c0      	nop			; (mov r8, r8)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2180      	movs	r1, #128	; 0x80
 8008b02:	04c9      	lsls	r1, r1, #19
 8008b04:	430a      	orrs	r2, r1
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	f383 8810 	msr	PRIMASK, r3
}
 8008b12:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b14:	1dbb      	adds	r3, r7, #6
 8008b16:	881a      	ldrh	r2, [r3, #0]
 8008b18:	68b9      	ldr	r1, [r7, #8]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	0018      	movs	r0, r3
 8008b1e:	f000 ff51 	bl	80099c4 <UART_Start_Receive_IT>
 8008b22:	0003      	movs	r3, r0
 8008b24:	e000      	b.n	8008b28 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8008b26:	2302      	movs	r3, #2
  }
}
 8008b28:	0018      	movs	r0, r3
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	b008      	add	sp, #32
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	40004800 	.word	0x40004800

08008b34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b34:	b590      	push	{r4, r7, lr}
 8008b36:	b0ab      	sub	sp, #172	; 0xac
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	69db      	ldr	r3, [r3, #28]
 8008b42:	22a4      	movs	r2, #164	; 0xa4
 8008b44:	18b9      	adds	r1, r7, r2
 8008b46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	20a0      	movs	r0, #160	; 0xa0
 8008b50:	1839      	adds	r1, r7, r0
 8008b52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	219c      	movs	r1, #156	; 0x9c
 8008b5c:	1879      	adds	r1, r7, r1
 8008b5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b60:	0011      	movs	r1, r2
 8008b62:	18bb      	adds	r3, r7, r2
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a99      	ldr	r2, [pc, #612]	; (8008dcc <HAL_UART_IRQHandler+0x298>)
 8008b68:	4013      	ands	r3, r2
 8008b6a:	2298      	movs	r2, #152	; 0x98
 8008b6c:	18bc      	adds	r4, r7, r2
 8008b6e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8008b70:	18bb      	adds	r3, r7, r2
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d114      	bne.n	8008ba2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b78:	187b      	adds	r3, r7, r1
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	4013      	ands	r3, r2
 8008b80:	d00f      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b82:	183b      	adds	r3, r7, r0
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2220      	movs	r2, #32
 8008b88:	4013      	ands	r3, r2
 8008b8a:	d00a      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d100      	bne.n	8008b96 <HAL_UART_IRQHandler+0x62>
 8008b94:	e2a0      	b.n	80090d8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	0010      	movs	r0, r2
 8008b9e:	4798      	blx	r3
      }
      return;
 8008ba0:	e29a      	b.n	80090d8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ba2:	2398      	movs	r3, #152	; 0x98
 8008ba4:	18fb      	adds	r3, r7, r3
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d100      	bne.n	8008bae <HAL_UART_IRQHandler+0x7a>
 8008bac:	e114      	b.n	8008dd8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008bae:	239c      	movs	r3, #156	; 0x9c
 8008bb0:	18fb      	adds	r3, r7, r3
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	d106      	bne.n	8008bc8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008bba:	23a0      	movs	r3, #160	; 0xa0
 8008bbc:	18fb      	adds	r3, r7, r3
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a83      	ldr	r2, [pc, #524]	; (8008dd0 <HAL_UART_IRQHandler+0x29c>)
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	d100      	bne.n	8008bc8 <HAL_UART_IRQHandler+0x94>
 8008bc6:	e107      	b.n	8008dd8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008bc8:	23a4      	movs	r3, #164	; 0xa4
 8008bca:	18fb      	adds	r3, r7, r3
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	d012      	beq.n	8008bfa <HAL_UART_IRQHandler+0xc6>
 8008bd4:	23a0      	movs	r3, #160	; 0xa0
 8008bd6:	18fb      	adds	r3, r7, r3
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	2380      	movs	r3, #128	; 0x80
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	4013      	ands	r3, r2
 8008be0:	d00b      	beq.n	8008bfa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2201      	movs	r2, #1
 8008be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2284      	movs	r2, #132	; 0x84
 8008bee:	589b      	ldr	r3, [r3, r2]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2184      	movs	r1, #132	; 0x84
 8008bf8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bfa:	23a4      	movs	r3, #164	; 0xa4
 8008bfc:	18fb      	adds	r3, r7, r3
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2202      	movs	r2, #2
 8008c02:	4013      	ands	r3, r2
 8008c04:	d011      	beq.n	8008c2a <HAL_UART_IRQHandler+0xf6>
 8008c06:	239c      	movs	r3, #156	; 0x9c
 8008c08:	18fb      	adds	r3, r7, r3
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	4013      	ands	r3, r2
 8008c10:	d00b      	beq.n	8008c2a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2202      	movs	r2, #2
 8008c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2284      	movs	r2, #132	; 0x84
 8008c1e:	589b      	ldr	r3, [r3, r2]
 8008c20:	2204      	movs	r2, #4
 8008c22:	431a      	orrs	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2184      	movs	r1, #132	; 0x84
 8008c28:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c2a:	23a4      	movs	r3, #164	; 0xa4
 8008c2c:	18fb      	adds	r3, r7, r3
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2204      	movs	r2, #4
 8008c32:	4013      	ands	r3, r2
 8008c34:	d011      	beq.n	8008c5a <HAL_UART_IRQHandler+0x126>
 8008c36:	239c      	movs	r3, #156	; 0x9c
 8008c38:	18fb      	adds	r3, r7, r3
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	4013      	ands	r3, r2
 8008c40:	d00b      	beq.n	8008c5a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2204      	movs	r2, #4
 8008c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2284      	movs	r2, #132	; 0x84
 8008c4e:	589b      	ldr	r3, [r3, r2]
 8008c50:	2202      	movs	r2, #2
 8008c52:	431a      	orrs	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2184      	movs	r1, #132	; 0x84
 8008c58:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c5a:	23a4      	movs	r3, #164	; 0xa4
 8008c5c:	18fb      	adds	r3, r7, r3
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2208      	movs	r2, #8
 8008c62:	4013      	ands	r3, r2
 8008c64:	d017      	beq.n	8008c96 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c66:	23a0      	movs	r3, #160	; 0xa0
 8008c68:	18fb      	adds	r3, r7, r3
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	4013      	ands	r3, r2
 8008c70:	d105      	bne.n	8008c7e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008c72:	239c      	movs	r3, #156	; 0x9c
 8008c74:	18fb      	adds	r3, r7, r3
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c7c:	d00b      	beq.n	8008c96 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2208      	movs	r2, #8
 8008c84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2284      	movs	r2, #132	; 0x84
 8008c8a:	589b      	ldr	r3, [r3, r2]
 8008c8c:	2208      	movs	r2, #8
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2184      	movs	r1, #132	; 0x84
 8008c94:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c96:	23a4      	movs	r3, #164	; 0xa4
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	2380      	movs	r3, #128	; 0x80
 8008c9e:	011b      	lsls	r3, r3, #4
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	d013      	beq.n	8008ccc <HAL_UART_IRQHandler+0x198>
 8008ca4:	23a0      	movs	r3, #160	; 0xa0
 8008ca6:	18fb      	adds	r3, r7, r3
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	2380      	movs	r3, #128	; 0x80
 8008cac:	04db      	lsls	r3, r3, #19
 8008cae:	4013      	ands	r3, r2
 8008cb0:	d00c      	beq.n	8008ccc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2280      	movs	r2, #128	; 0x80
 8008cb8:	0112      	lsls	r2, r2, #4
 8008cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2284      	movs	r2, #132	; 0x84
 8008cc0:	589b      	ldr	r3, [r3, r2]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2184      	movs	r1, #132	; 0x84
 8008cca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2284      	movs	r2, #132	; 0x84
 8008cd0:	589b      	ldr	r3, [r3, r2]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d100      	bne.n	8008cd8 <HAL_UART_IRQHandler+0x1a4>
 8008cd6:	e201      	b.n	80090dc <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008cd8:	23a4      	movs	r3, #164	; 0xa4
 8008cda:	18fb      	adds	r3, r7, r3
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2220      	movs	r2, #32
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	d00e      	beq.n	8008d02 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ce4:	23a0      	movs	r3, #160	; 0xa0
 8008ce6:	18fb      	adds	r3, r7, r3
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2220      	movs	r2, #32
 8008cec:	4013      	ands	r3, r2
 8008cee:	d008      	beq.n	8008d02 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	0010      	movs	r0, r2
 8008d00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2284      	movs	r2, #132	; 0x84
 8008d06:	589b      	ldr	r3, [r3, r2]
 8008d08:	2194      	movs	r1, #148	; 0x94
 8008d0a:	187a      	adds	r2, r7, r1
 8008d0c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	2240      	movs	r2, #64	; 0x40
 8008d16:	4013      	ands	r3, r2
 8008d18:	2b40      	cmp	r3, #64	; 0x40
 8008d1a:	d004      	beq.n	8008d26 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d1c:	187b      	adds	r3, r7, r1
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2228      	movs	r2, #40	; 0x28
 8008d22:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d24:	d047      	beq.n	8008db6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	0018      	movs	r0, r3
 8008d2a:	f000 ff15 	bl	8009b58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	2240      	movs	r2, #64	; 0x40
 8008d36:	4013      	ands	r3, r2
 8008d38:	2b40      	cmp	r3, #64	; 0x40
 8008d3a:	d137      	bne.n	8008dac <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d40:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8008d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d44:	2090      	movs	r0, #144	; 0x90
 8008d46:	183a      	adds	r2, r7, r0
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d50:	f383 8810 	msr	PRIMASK, r3
}
 8008d54:	46c0      	nop			; (mov r8, r8)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2140      	movs	r1, #64	; 0x40
 8008d62:	438a      	bics	r2, r1
 8008d64:	609a      	str	r2, [r3, #8]
 8008d66:	183b      	adds	r3, r7, r0
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d6e:	f383 8810 	msr	PRIMASK, r3
}
 8008d72:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d012      	beq.n	8008da2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d80:	4a14      	ldr	r2, [pc, #80]	; (8008dd4 <HAL_UART_IRQHandler+0x2a0>)
 8008d82:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d88:	0018      	movs	r0, r3
 8008d8a:	f7fc fcb5 	bl	80056f8 <HAL_DMA_Abort_IT>
 8008d8e:	1e03      	subs	r3, r0, #0
 8008d90:	d01a      	beq.n	8008dc8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008da0:	e012      	b.n	8008dc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	0018      	movs	r0, r3
 8008da6:	f000 f9af 	bl	8009108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008daa:	e00d      	b.n	8008dc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	0018      	movs	r0, r3
 8008db0:	f000 f9aa 	bl	8009108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db4:	e008      	b.n	8008dc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	0018      	movs	r0, r3
 8008dba:	f000 f9a5 	bl	8009108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2284      	movs	r2, #132	; 0x84
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008dc6:	e189      	b.n	80090dc <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dc8:	46c0      	nop			; (mov r8, r8)
    return;
 8008dca:	e187      	b.n	80090dc <HAL_UART_IRQHandler+0x5a8>
 8008dcc:	0000080f 	.word	0x0000080f
 8008dd0:	04000120 	.word	0x04000120
 8008dd4:	08009c21 	.word	0x08009c21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d000      	beq.n	8008de2 <HAL_UART_IRQHandler+0x2ae>
 8008de0:	e13b      	b.n	800905a <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008de2:	23a4      	movs	r3, #164	; 0xa4
 8008de4:	18fb      	adds	r3, r7, r3
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2210      	movs	r2, #16
 8008dea:	4013      	ands	r3, r2
 8008dec:	d100      	bne.n	8008df0 <HAL_UART_IRQHandler+0x2bc>
 8008dee:	e134      	b.n	800905a <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008df0:	23a0      	movs	r3, #160	; 0xa0
 8008df2:	18fb      	adds	r3, r7, r3
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2210      	movs	r2, #16
 8008df8:	4013      	ands	r3, r2
 8008dfa:	d100      	bne.n	8008dfe <HAL_UART_IRQHandler+0x2ca>
 8008dfc:	e12d      	b.n	800905a <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2210      	movs	r2, #16
 8008e04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	2240      	movs	r2, #64	; 0x40
 8008e0e:	4013      	ands	r3, r2
 8008e10:	2b40      	cmp	r3, #64	; 0x40
 8008e12:	d000      	beq.n	8008e16 <HAL_UART_IRQHandler+0x2e2>
 8008e14:	e0a1      	b.n	8008f5a <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	217e      	movs	r1, #126	; 0x7e
 8008e20:	187b      	adds	r3, r7, r1
 8008e22:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008e24:	187b      	adds	r3, r7, r1
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d100      	bne.n	8008e2e <HAL_UART_IRQHandler+0x2fa>
 8008e2c:	e158      	b.n	80090e0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2258      	movs	r2, #88	; 0x58
 8008e32:	5a9b      	ldrh	r3, [r3, r2]
 8008e34:	187a      	adds	r2, r7, r1
 8008e36:	8812      	ldrh	r2, [r2, #0]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d300      	bcc.n	8008e3e <HAL_UART_IRQHandler+0x30a>
 8008e3c:	e150      	b.n	80090e0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	187a      	adds	r2, r7, r1
 8008e42:	215a      	movs	r1, #90	; 0x5a
 8008e44:	8812      	ldrh	r2, [r2, #0]
 8008e46:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2220      	movs	r2, #32
 8008e52:	4013      	ands	r3, r2
 8008e54:	d16f      	bne.n	8008f36 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e56:	f3ef 8310 	mrs	r3, PRIMASK
 8008e5a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e60:	2301      	movs	r3, #1
 8008e62:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e66:	f383 8810 	msr	PRIMASK, r3
}
 8008e6a:	46c0      	nop			; (mov r8, r8)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	499e      	ldr	r1, [pc, #632]	; (80090f0 <HAL_UART_IRQHandler+0x5bc>)
 8008e78:	400a      	ands	r2, r1
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	f383 8810 	msr	PRIMASK, r3
}
 8008e86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e88:	f3ef 8310 	mrs	r3, PRIMASK
 8008e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e90:	677b      	str	r3, [r7, #116]	; 0x74
 8008e92:	2301      	movs	r3, #1
 8008e94:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e98:	f383 8810 	msr	PRIMASK, r3
}
 8008e9c:	46c0      	nop			; (mov r8, r8)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	689a      	ldr	r2, [r3, #8]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	438a      	bics	r2, r1
 8008eac:	609a      	str	r2, [r3, #8]
 8008eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eb0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eb4:	f383 8810 	msr	PRIMASK, r3
}
 8008eb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eba:	f3ef 8310 	mrs	r3, PRIMASK
 8008ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ec2:	673b      	str	r3, [r7, #112]	; 0x70
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eca:	f383 8810 	msr	PRIMASK, r3
}
 8008ece:	46c0      	nop			; (mov r8, r8)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689a      	ldr	r2, [r3, #8]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2140      	movs	r1, #64	; 0x40
 8008edc:	438a      	bics	r2, r1
 8008ede:	609a      	str	r2, [r3, #8]
 8008ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ee2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ee6:	f383 8810 	msr	PRIMASK, r3
}
 8008eea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2280      	movs	r2, #128	; 0x80
 8008ef0:	2120      	movs	r1, #32
 8008ef2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008efa:	f3ef 8310 	mrs	r3, PRIMASK
 8008efe:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f04:	2301      	movs	r3, #1
 8008f06:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f0a:	f383 8810 	msr	PRIMASK, r3
}
 8008f0e:	46c0      	nop			; (mov r8, r8)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2110      	movs	r1, #16
 8008f1c:	438a      	bics	r2, r1
 8008f1e:	601a      	str	r2, [r3, #0]
 8008f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f22:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f26:	f383 8810 	msr	PRIMASK, r3
}
 8008f2a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f30:	0018      	movs	r0, r3
 8008f32:	f7fc fba1 	bl	8005678 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2202      	movs	r2, #2
 8008f3a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2258      	movs	r2, #88	; 0x58
 8008f40:	5a9a      	ldrh	r2, [r3, r2]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	215a      	movs	r1, #90	; 0x5a
 8008f46:	5a5b      	ldrh	r3, [r3, r1]
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	0011      	movs	r1, r2
 8008f52:	0018      	movs	r0, r3
 8008f54:	f000 f8e0 	bl	8009118 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f58:	e0c2      	b.n	80090e0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2258      	movs	r2, #88	; 0x58
 8008f5e:	5a99      	ldrh	r1, [r3, r2]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	225a      	movs	r2, #90	; 0x5a
 8008f64:	5a9b      	ldrh	r3, [r3, r2]
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	208e      	movs	r0, #142	; 0x8e
 8008f6a:	183b      	adds	r3, r7, r0
 8008f6c:	1a8a      	subs	r2, r1, r2
 8008f6e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	225a      	movs	r2, #90	; 0x5a
 8008f74:	5a9b      	ldrh	r3, [r3, r2]
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d100      	bne.n	8008f7e <HAL_UART_IRQHandler+0x44a>
 8008f7c:	e0b2      	b.n	80090e4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8008f7e:	183b      	adds	r3, r7, r0
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d100      	bne.n	8008f88 <HAL_UART_IRQHandler+0x454>
 8008f86:	e0ad      	b.n	80090e4 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f88:	f3ef 8310 	mrs	r3, PRIMASK
 8008f8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f90:	2488      	movs	r4, #136	; 0x88
 8008f92:	193a      	adds	r2, r7, r4
 8008f94:	6013      	str	r3, [r2, #0]
 8008f96:	2301      	movs	r3, #1
 8008f98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	f383 8810 	msr	PRIMASK, r3
}
 8008fa0:	46c0      	nop			; (mov r8, r8)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4951      	ldr	r1, [pc, #324]	; (80090f4 <HAL_UART_IRQHandler+0x5c0>)
 8008fae:	400a      	ands	r2, r1
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	193b      	adds	r3, r7, r4
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f383 8810 	msr	PRIMASK, r3
}
 8008fbe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8008fc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8008fc6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc8:	2484      	movs	r4, #132	; 0x84
 8008fca:	193a      	adds	r2, r7, r4
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	2301      	movs	r3, #1
 8008fd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	f383 8810 	msr	PRIMASK, r3
}
 8008fd8:	46c0      	nop			; (mov r8, r8)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689a      	ldr	r2, [r3, #8]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	438a      	bics	r2, r1
 8008fe8:	609a      	str	r2, [r3, #8]
 8008fea:	193b      	adds	r3, r7, r4
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	f383 8810 	msr	PRIMASK, r3
}
 8008ff6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2280      	movs	r2, #128	; 0x80
 8008ffc:	2120      	movs	r1, #32
 8008ffe:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800900c:	f3ef 8310 	mrs	r3, PRIMASK
 8009010:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009014:	2480      	movs	r4, #128	; 0x80
 8009016:	193a      	adds	r2, r7, r4
 8009018:	6013      	str	r3, [r2, #0]
 800901a:	2301      	movs	r3, #1
 800901c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009020:	f383 8810 	msr	PRIMASK, r3
}
 8009024:	46c0      	nop			; (mov r8, r8)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2110      	movs	r1, #16
 8009032:	438a      	bics	r2, r1
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	193b      	adds	r3, r7, r4
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903e:	f383 8810 	msr	PRIMASK, r3
}
 8009042:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2202      	movs	r2, #2
 8009048:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800904a:	183b      	adds	r3, r7, r0
 800904c:	881a      	ldrh	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	0011      	movs	r1, r2
 8009052:	0018      	movs	r0, r3
 8009054:	f000 f860 	bl	8009118 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009058:	e044      	b.n	80090e4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800905a:	23a4      	movs	r3, #164	; 0xa4
 800905c:	18fb      	adds	r3, r7, r3
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	2380      	movs	r3, #128	; 0x80
 8009062:	035b      	lsls	r3, r3, #13
 8009064:	4013      	ands	r3, r2
 8009066:	d010      	beq.n	800908a <HAL_UART_IRQHandler+0x556>
 8009068:	239c      	movs	r3, #156	; 0x9c
 800906a:	18fb      	adds	r3, r7, r3
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	2380      	movs	r3, #128	; 0x80
 8009070:	03db      	lsls	r3, r3, #15
 8009072:	4013      	ands	r3, r2
 8009074:	d009      	beq.n	800908a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2280      	movs	r2, #128	; 0x80
 800907c:	0352      	lsls	r2, r2, #13
 800907e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	0018      	movs	r0, r3
 8009084:	f000 ffd2 	bl	800a02c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009088:	e02f      	b.n	80090ea <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800908a:	23a4      	movs	r3, #164	; 0xa4
 800908c:	18fb      	adds	r3, r7, r3
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2280      	movs	r2, #128	; 0x80
 8009092:	4013      	ands	r3, r2
 8009094:	d00f      	beq.n	80090b6 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009096:	23a0      	movs	r3, #160	; 0xa0
 8009098:	18fb      	adds	r3, r7, r3
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2280      	movs	r2, #128	; 0x80
 800909e:	4013      	ands	r3, r2
 80090a0:	d009      	beq.n	80090b6 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d01e      	beq.n	80090e8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	0010      	movs	r0, r2
 80090b2:	4798      	blx	r3
    }
    return;
 80090b4:	e018      	b.n	80090e8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80090b6:	23a4      	movs	r3, #164	; 0xa4
 80090b8:	18fb      	adds	r3, r7, r3
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2240      	movs	r2, #64	; 0x40
 80090be:	4013      	ands	r3, r2
 80090c0:	d013      	beq.n	80090ea <HAL_UART_IRQHandler+0x5b6>
 80090c2:	23a0      	movs	r3, #160	; 0xa0
 80090c4:	18fb      	adds	r3, r7, r3
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2240      	movs	r2, #64	; 0x40
 80090ca:	4013      	ands	r3, r2
 80090cc:	d00d      	beq.n	80090ea <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	0018      	movs	r0, r3
 80090d2:	f000 fdbc 	bl	8009c4e <UART_EndTransmit_IT>
    return;
 80090d6:	e008      	b.n	80090ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80090d8:	46c0      	nop			; (mov r8, r8)
 80090da:	e006      	b.n	80090ea <HAL_UART_IRQHandler+0x5b6>
    return;
 80090dc:	46c0      	nop			; (mov r8, r8)
 80090de:	e004      	b.n	80090ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80090e0:	46c0      	nop			; (mov r8, r8)
 80090e2:	e002      	b.n	80090ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80090e4:	46c0      	nop			; (mov r8, r8)
 80090e6:	e000      	b.n	80090ea <HAL_UART_IRQHandler+0x5b6>
    return;
 80090e8:	46c0      	nop			; (mov r8, r8)
  }

}
 80090ea:	46bd      	mov	sp, r7
 80090ec:	b02b      	add	sp, #172	; 0xac
 80090ee:	bd90      	pop	{r4, r7, pc}
 80090f0:	fffffeff 	.word	0xfffffeff
 80090f4:	fffffedf 	.word	0xfffffedf

080090f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009100:	46c0      	nop			; (mov r8, r8)
 8009102:	46bd      	mov	sp, r7
 8009104:	b002      	add	sp, #8
 8009106:	bd80      	pop	{r7, pc}

08009108 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009110:	46c0      	nop			; (mov r8, r8)
 8009112:	46bd      	mov	sp, r7
 8009114:	b002      	add	sp, #8
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	000a      	movs	r2, r1
 8009122:	1cbb      	adds	r3, r7, #2
 8009124:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009126:	46c0      	nop			; (mov r8, r8)
 8009128:	46bd      	mov	sp, r7
 800912a:	b002      	add	sp, #8
 800912c:	bd80      	pop	{r7, pc}
	...

08009130 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009130:	b5b0      	push	{r4, r5, r7, lr}
 8009132:	b08e      	sub	sp, #56	; 0x38
 8009134:	af00      	add	r7, sp, #0
 8009136:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009138:	231a      	movs	r3, #26
 800913a:	2218      	movs	r2, #24
 800913c:	189b      	adds	r3, r3, r2
 800913e:	19db      	adds	r3, r3, r7
 8009140:	2200      	movs	r2, #0
 8009142:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	689a      	ldr	r2, [r3, #8]
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	431a      	orrs	r2, r3
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	431a      	orrs	r2, r3
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	4313      	orrs	r3, r2
 800915a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4ac6      	ldr	r2, [pc, #792]	; (800947c <UART_SetConfig+0x34c>)
 8009164:	4013      	ands	r3, r2
 8009166:	0019      	movs	r1, r3
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800916e:	430a      	orrs	r2, r1
 8009170:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	4ac1      	ldr	r2, [pc, #772]	; (8009480 <UART_SetConfig+0x350>)
 800917a:	4013      	ands	r3, r2
 800917c:	0019      	movs	r1, r3
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	430a      	orrs	r2, r1
 8009188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4abb      	ldr	r2, [pc, #748]	; (8009484 <UART_SetConfig+0x354>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d004      	beq.n	80091a4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091a0:	4313      	orrs	r3, r2
 80091a2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	4ab7      	ldr	r2, [pc, #732]	; (8009488 <UART_SetConfig+0x358>)
 80091ac:	4013      	ands	r3, r2
 80091ae:	0019      	movs	r1, r3
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091b6:	430a      	orrs	r2, r1
 80091b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4ab3      	ldr	r2, [pc, #716]	; (800948c <UART_SetConfig+0x35c>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d131      	bne.n	8009228 <UART_SetConfig+0xf8>
 80091c4:	4bb2      	ldr	r3, [pc, #712]	; (8009490 <UART_SetConfig+0x360>)
 80091c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c8:	2203      	movs	r2, #3
 80091ca:	4013      	ands	r3, r2
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	d01d      	beq.n	800920c <UART_SetConfig+0xdc>
 80091d0:	d823      	bhi.n	800921a <UART_SetConfig+0xea>
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d00c      	beq.n	80091f0 <UART_SetConfig+0xc0>
 80091d6:	d820      	bhi.n	800921a <UART_SetConfig+0xea>
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <UART_SetConfig+0xb2>
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d00e      	beq.n	80091fe <UART_SetConfig+0xce>
 80091e0:	e01b      	b.n	800921a <UART_SetConfig+0xea>
 80091e2:	231b      	movs	r3, #27
 80091e4:	2218      	movs	r2, #24
 80091e6:	189b      	adds	r3, r3, r2
 80091e8:	19db      	adds	r3, r3, r7
 80091ea:	2201      	movs	r2, #1
 80091ec:	701a      	strb	r2, [r3, #0]
 80091ee:	e09c      	b.n	800932a <UART_SetConfig+0x1fa>
 80091f0:	231b      	movs	r3, #27
 80091f2:	2218      	movs	r2, #24
 80091f4:	189b      	adds	r3, r3, r2
 80091f6:	19db      	adds	r3, r3, r7
 80091f8:	2202      	movs	r2, #2
 80091fa:	701a      	strb	r2, [r3, #0]
 80091fc:	e095      	b.n	800932a <UART_SetConfig+0x1fa>
 80091fe:	231b      	movs	r3, #27
 8009200:	2218      	movs	r2, #24
 8009202:	189b      	adds	r3, r3, r2
 8009204:	19db      	adds	r3, r3, r7
 8009206:	2204      	movs	r2, #4
 8009208:	701a      	strb	r2, [r3, #0]
 800920a:	e08e      	b.n	800932a <UART_SetConfig+0x1fa>
 800920c:	231b      	movs	r3, #27
 800920e:	2218      	movs	r2, #24
 8009210:	189b      	adds	r3, r3, r2
 8009212:	19db      	adds	r3, r3, r7
 8009214:	2208      	movs	r2, #8
 8009216:	701a      	strb	r2, [r3, #0]
 8009218:	e087      	b.n	800932a <UART_SetConfig+0x1fa>
 800921a:	231b      	movs	r3, #27
 800921c:	2218      	movs	r2, #24
 800921e:	189b      	adds	r3, r3, r2
 8009220:	19db      	adds	r3, r3, r7
 8009222:	2210      	movs	r2, #16
 8009224:	701a      	strb	r2, [r3, #0]
 8009226:	e080      	b.n	800932a <UART_SetConfig+0x1fa>
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a99      	ldr	r2, [pc, #612]	; (8009494 <UART_SetConfig+0x364>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d131      	bne.n	8009296 <UART_SetConfig+0x166>
 8009232:	4b97      	ldr	r3, [pc, #604]	; (8009490 <UART_SetConfig+0x360>)
 8009234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009236:	220c      	movs	r2, #12
 8009238:	4013      	ands	r3, r2
 800923a:	2b0c      	cmp	r3, #12
 800923c:	d01d      	beq.n	800927a <UART_SetConfig+0x14a>
 800923e:	d823      	bhi.n	8009288 <UART_SetConfig+0x158>
 8009240:	2b08      	cmp	r3, #8
 8009242:	d00c      	beq.n	800925e <UART_SetConfig+0x12e>
 8009244:	d820      	bhi.n	8009288 <UART_SetConfig+0x158>
 8009246:	2b00      	cmp	r3, #0
 8009248:	d002      	beq.n	8009250 <UART_SetConfig+0x120>
 800924a:	2b04      	cmp	r3, #4
 800924c:	d00e      	beq.n	800926c <UART_SetConfig+0x13c>
 800924e:	e01b      	b.n	8009288 <UART_SetConfig+0x158>
 8009250:	231b      	movs	r3, #27
 8009252:	2218      	movs	r2, #24
 8009254:	189b      	adds	r3, r3, r2
 8009256:	19db      	adds	r3, r3, r7
 8009258:	2200      	movs	r2, #0
 800925a:	701a      	strb	r2, [r3, #0]
 800925c:	e065      	b.n	800932a <UART_SetConfig+0x1fa>
 800925e:	231b      	movs	r3, #27
 8009260:	2218      	movs	r2, #24
 8009262:	189b      	adds	r3, r3, r2
 8009264:	19db      	adds	r3, r3, r7
 8009266:	2202      	movs	r2, #2
 8009268:	701a      	strb	r2, [r3, #0]
 800926a:	e05e      	b.n	800932a <UART_SetConfig+0x1fa>
 800926c:	231b      	movs	r3, #27
 800926e:	2218      	movs	r2, #24
 8009270:	189b      	adds	r3, r3, r2
 8009272:	19db      	adds	r3, r3, r7
 8009274:	2204      	movs	r2, #4
 8009276:	701a      	strb	r2, [r3, #0]
 8009278:	e057      	b.n	800932a <UART_SetConfig+0x1fa>
 800927a:	231b      	movs	r3, #27
 800927c:	2218      	movs	r2, #24
 800927e:	189b      	adds	r3, r3, r2
 8009280:	19db      	adds	r3, r3, r7
 8009282:	2208      	movs	r2, #8
 8009284:	701a      	strb	r2, [r3, #0]
 8009286:	e050      	b.n	800932a <UART_SetConfig+0x1fa>
 8009288:	231b      	movs	r3, #27
 800928a:	2218      	movs	r2, #24
 800928c:	189b      	adds	r3, r3, r2
 800928e:	19db      	adds	r3, r3, r7
 8009290:	2210      	movs	r2, #16
 8009292:	701a      	strb	r2, [r3, #0]
 8009294:	e049      	b.n	800932a <UART_SetConfig+0x1fa>
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a7a      	ldr	r2, [pc, #488]	; (8009484 <UART_SetConfig+0x354>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d13e      	bne.n	800931e <UART_SetConfig+0x1ee>
 80092a0:	4b7b      	ldr	r3, [pc, #492]	; (8009490 <UART_SetConfig+0x360>)
 80092a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092a4:	23c0      	movs	r3, #192	; 0xc0
 80092a6:	011b      	lsls	r3, r3, #4
 80092a8:	4013      	ands	r3, r2
 80092aa:	22c0      	movs	r2, #192	; 0xc0
 80092ac:	0112      	lsls	r2, r2, #4
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d027      	beq.n	8009302 <UART_SetConfig+0x1d2>
 80092b2:	22c0      	movs	r2, #192	; 0xc0
 80092b4:	0112      	lsls	r2, r2, #4
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d82a      	bhi.n	8009310 <UART_SetConfig+0x1e0>
 80092ba:	2280      	movs	r2, #128	; 0x80
 80092bc:	0112      	lsls	r2, r2, #4
 80092be:	4293      	cmp	r3, r2
 80092c0:	d011      	beq.n	80092e6 <UART_SetConfig+0x1b6>
 80092c2:	2280      	movs	r2, #128	; 0x80
 80092c4:	0112      	lsls	r2, r2, #4
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d822      	bhi.n	8009310 <UART_SetConfig+0x1e0>
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d004      	beq.n	80092d8 <UART_SetConfig+0x1a8>
 80092ce:	2280      	movs	r2, #128	; 0x80
 80092d0:	00d2      	lsls	r2, r2, #3
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d00e      	beq.n	80092f4 <UART_SetConfig+0x1c4>
 80092d6:	e01b      	b.n	8009310 <UART_SetConfig+0x1e0>
 80092d8:	231b      	movs	r3, #27
 80092da:	2218      	movs	r2, #24
 80092dc:	189b      	adds	r3, r3, r2
 80092de:	19db      	adds	r3, r3, r7
 80092e0:	2200      	movs	r2, #0
 80092e2:	701a      	strb	r2, [r3, #0]
 80092e4:	e021      	b.n	800932a <UART_SetConfig+0x1fa>
 80092e6:	231b      	movs	r3, #27
 80092e8:	2218      	movs	r2, #24
 80092ea:	189b      	adds	r3, r3, r2
 80092ec:	19db      	adds	r3, r3, r7
 80092ee:	2202      	movs	r2, #2
 80092f0:	701a      	strb	r2, [r3, #0]
 80092f2:	e01a      	b.n	800932a <UART_SetConfig+0x1fa>
 80092f4:	231b      	movs	r3, #27
 80092f6:	2218      	movs	r2, #24
 80092f8:	189b      	adds	r3, r3, r2
 80092fa:	19db      	adds	r3, r3, r7
 80092fc:	2204      	movs	r2, #4
 80092fe:	701a      	strb	r2, [r3, #0]
 8009300:	e013      	b.n	800932a <UART_SetConfig+0x1fa>
 8009302:	231b      	movs	r3, #27
 8009304:	2218      	movs	r2, #24
 8009306:	189b      	adds	r3, r3, r2
 8009308:	19db      	adds	r3, r3, r7
 800930a:	2208      	movs	r2, #8
 800930c:	701a      	strb	r2, [r3, #0]
 800930e:	e00c      	b.n	800932a <UART_SetConfig+0x1fa>
 8009310:	231b      	movs	r3, #27
 8009312:	2218      	movs	r2, #24
 8009314:	189b      	adds	r3, r3, r2
 8009316:	19db      	adds	r3, r3, r7
 8009318:	2210      	movs	r2, #16
 800931a:	701a      	strb	r2, [r3, #0]
 800931c:	e005      	b.n	800932a <UART_SetConfig+0x1fa>
 800931e:	231b      	movs	r3, #27
 8009320:	2218      	movs	r2, #24
 8009322:	189b      	adds	r3, r3, r2
 8009324:	19db      	adds	r3, r3, r7
 8009326:	2210      	movs	r2, #16
 8009328:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a55      	ldr	r2, [pc, #340]	; (8009484 <UART_SetConfig+0x354>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d000      	beq.n	8009336 <UART_SetConfig+0x206>
 8009334:	e084      	b.n	8009440 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009336:	231b      	movs	r3, #27
 8009338:	2218      	movs	r2, #24
 800933a:	189b      	adds	r3, r3, r2
 800933c:	19db      	adds	r3, r3, r7
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	2b08      	cmp	r3, #8
 8009342:	d01d      	beq.n	8009380 <UART_SetConfig+0x250>
 8009344:	dc20      	bgt.n	8009388 <UART_SetConfig+0x258>
 8009346:	2b04      	cmp	r3, #4
 8009348:	d015      	beq.n	8009376 <UART_SetConfig+0x246>
 800934a:	dc1d      	bgt.n	8009388 <UART_SetConfig+0x258>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <UART_SetConfig+0x226>
 8009350:	2b02      	cmp	r3, #2
 8009352:	d005      	beq.n	8009360 <UART_SetConfig+0x230>
 8009354:	e018      	b.n	8009388 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009356:	f7fe f877 	bl	8007448 <HAL_RCC_GetPCLK1Freq>
 800935a:	0003      	movs	r3, r0
 800935c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800935e:	e01c      	b.n	800939a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009360:	4b4b      	ldr	r3, [pc, #300]	; (8009490 <UART_SetConfig+0x360>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2210      	movs	r2, #16
 8009366:	4013      	ands	r3, r2
 8009368:	d002      	beq.n	8009370 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800936a:	4b4b      	ldr	r3, [pc, #300]	; (8009498 <UART_SetConfig+0x368>)
 800936c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800936e:	e014      	b.n	800939a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8009370:	4b4a      	ldr	r3, [pc, #296]	; (800949c <UART_SetConfig+0x36c>)
 8009372:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009374:	e011      	b.n	800939a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009376:	f7fd ffb7 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 800937a:	0003      	movs	r3, r0
 800937c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800937e:	e00c      	b.n	800939a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009380:	2380      	movs	r3, #128	; 0x80
 8009382:	021b      	lsls	r3, r3, #8
 8009384:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009386:	e008      	b.n	800939a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8009388:	2300      	movs	r3, #0
 800938a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800938c:	231a      	movs	r3, #26
 800938e:	2218      	movs	r2, #24
 8009390:	189b      	adds	r3, r3, r2
 8009392:	19db      	adds	r3, r3, r7
 8009394:	2201      	movs	r2, #1
 8009396:	701a      	strb	r2, [r3, #0]
        break;
 8009398:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939c:	2b00      	cmp	r3, #0
 800939e:	d100      	bne.n	80093a2 <UART_SetConfig+0x272>
 80093a0:	e132      	b.n	8009608 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	0013      	movs	r3, r2
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	189b      	adds	r3, r3, r2
 80093ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d305      	bcc.n	80093be <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80093b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d906      	bls.n	80093cc <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80093be:	231a      	movs	r3, #26
 80093c0:	2218      	movs	r2, #24
 80093c2:	189b      	adds	r3, r3, r2
 80093c4:	19db      	adds	r3, r3, r7
 80093c6:	2201      	movs	r2, #1
 80093c8:	701a      	strb	r2, [r3, #0]
 80093ca:	e11d      	b.n	8009608 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80093cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ce:	613b      	str	r3, [r7, #16]
 80093d0:	2300      	movs	r3, #0
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	6939      	ldr	r1, [r7, #16]
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	000b      	movs	r3, r1
 80093da:	0e1b      	lsrs	r3, r3, #24
 80093dc:	0010      	movs	r0, r2
 80093de:	0205      	lsls	r5, r0, #8
 80093e0:	431d      	orrs	r5, r3
 80093e2:	000b      	movs	r3, r1
 80093e4:	021c      	lsls	r4, r3, #8
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	085b      	lsrs	r3, r3, #1
 80093ec:	60bb      	str	r3, [r7, #8]
 80093ee:	2300      	movs	r3, #0
 80093f0:	60fb      	str	r3, [r7, #12]
 80093f2:	68b8      	ldr	r0, [r7, #8]
 80093f4:	68f9      	ldr	r1, [r7, #12]
 80093f6:	1900      	adds	r0, r0, r4
 80093f8:	4169      	adcs	r1, r5
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	603b      	str	r3, [r7, #0]
 8009400:	2300      	movs	r3, #0
 8009402:	607b      	str	r3, [r7, #4]
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f7f7 f84e 	bl	80004a8 <__aeabi_uldivmod>
 800940c:	0002      	movs	r2, r0
 800940e:	000b      	movs	r3, r1
 8009410:	0013      	movs	r3, r2
 8009412:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009416:	23c0      	movs	r3, #192	; 0xc0
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	429a      	cmp	r2, r3
 800941c:	d309      	bcc.n	8009432 <UART_SetConfig+0x302>
 800941e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009420:	2380      	movs	r3, #128	; 0x80
 8009422:	035b      	lsls	r3, r3, #13
 8009424:	429a      	cmp	r2, r3
 8009426:	d204      	bcs.n	8009432 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800942e:	60da      	str	r2, [r3, #12]
 8009430:	e0ea      	b.n	8009608 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8009432:	231a      	movs	r3, #26
 8009434:	2218      	movs	r2, #24
 8009436:	189b      	adds	r3, r3, r2
 8009438:	19db      	adds	r3, r3, r7
 800943a:	2201      	movs	r2, #1
 800943c:	701a      	strb	r2, [r3, #0]
 800943e:	e0e3      	b.n	8009608 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	69da      	ldr	r2, [r3, #28]
 8009444:	2380      	movs	r3, #128	; 0x80
 8009446:	021b      	lsls	r3, r3, #8
 8009448:	429a      	cmp	r2, r3
 800944a:	d000      	beq.n	800944e <UART_SetConfig+0x31e>
 800944c:	e085      	b.n	800955a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800944e:	231b      	movs	r3, #27
 8009450:	2218      	movs	r2, #24
 8009452:	189b      	adds	r3, r3, r2
 8009454:	19db      	adds	r3, r3, r7
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b08      	cmp	r3, #8
 800945a:	d837      	bhi.n	80094cc <UART_SetConfig+0x39c>
 800945c:	009a      	lsls	r2, r3, #2
 800945e:	4b10      	ldr	r3, [pc, #64]	; (80094a0 <UART_SetConfig+0x370>)
 8009460:	18d3      	adds	r3, r2, r3
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009466:	f7fd ffef 	bl	8007448 <HAL_RCC_GetPCLK1Freq>
 800946a:	0003      	movs	r3, r0
 800946c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800946e:	e036      	b.n	80094de <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009470:	f7fe f800 	bl	8007474 <HAL_RCC_GetPCLK2Freq>
 8009474:	0003      	movs	r3, r0
 8009476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009478:	e031      	b.n	80094de <UART_SetConfig+0x3ae>
 800947a:	46c0      	nop			; (mov r8, r8)
 800947c:	efff69f3 	.word	0xefff69f3
 8009480:	ffffcfff 	.word	0xffffcfff
 8009484:	40004800 	.word	0x40004800
 8009488:	fffff4ff 	.word	0xfffff4ff
 800948c:	40013800 	.word	0x40013800
 8009490:	40021000 	.word	0x40021000
 8009494:	40004400 	.word	0x40004400
 8009498:	003d0900 	.word	0x003d0900
 800949c:	00f42400 	.word	0x00f42400
 80094a0:	0800ec08 	.word	0x0800ec08
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094a4:	4b60      	ldr	r3, [pc, #384]	; (8009628 <UART_SetConfig+0x4f8>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2210      	movs	r2, #16
 80094aa:	4013      	ands	r3, r2
 80094ac:	d002      	beq.n	80094b4 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80094ae:	4b5f      	ldr	r3, [pc, #380]	; (800962c <UART_SetConfig+0x4fc>)
 80094b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094b2:	e014      	b.n	80094de <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80094b4:	4b5e      	ldr	r3, [pc, #376]	; (8009630 <UART_SetConfig+0x500>)
 80094b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094b8:	e011      	b.n	80094de <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094ba:	f7fd ff15 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 80094be:	0003      	movs	r3, r0
 80094c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094c2:	e00c      	b.n	80094de <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094c4:	2380      	movs	r3, #128	; 0x80
 80094c6:	021b      	lsls	r3, r3, #8
 80094c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094ca:	e008      	b.n	80094de <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80094d0:	231a      	movs	r3, #26
 80094d2:	2218      	movs	r2, #24
 80094d4:	189b      	adds	r3, r3, r2
 80094d6:	19db      	adds	r3, r3, r7
 80094d8:	2201      	movs	r2, #1
 80094da:	701a      	strb	r2, [r3, #0]
        break;
 80094dc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d100      	bne.n	80094e6 <UART_SetConfig+0x3b6>
 80094e4:	e090      	b.n	8009608 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80094e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e8:	005a      	lsls	r2, r3, #1
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	085b      	lsrs	r3, r3, #1
 80094f0:	18d2      	adds	r2, r2, r3
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	0019      	movs	r1, r3
 80094f8:	0010      	movs	r0, r2
 80094fa:	f7f6 fe21 	bl	8000140 <__udivsi3>
 80094fe:	0003      	movs	r3, r0
 8009500:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	2b0f      	cmp	r3, #15
 8009506:	d921      	bls.n	800954c <UART_SetConfig+0x41c>
 8009508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800950a:	2380      	movs	r3, #128	; 0x80
 800950c:	025b      	lsls	r3, r3, #9
 800950e:	429a      	cmp	r2, r3
 8009510:	d21c      	bcs.n	800954c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	b29a      	uxth	r2, r3
 8009516:	200e      	movs	r0, #14
 8009518:	2418      	movs	r4, #24
 800951a:	1903      	adds	r3, r0, r4
 800951c:	19db      	adds	r3, r3, r7
 800951e:	210f      	movs	r1, #15
 8009520:	438a      	bics	r2, r1
 8009522:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	085b      	lsrs	r3, r3, #1
 8009528:	b29b      	uxth	r3, r3
 800952a:	2207      	movs	r2, #7
 800952c:	4013      	ands	r3, r2
 800952e:	b299      	uxth	r1, r3
 8009530:	1903      	adds	r3, r0, r4
 8009532:	19db      	adds	r3, r3, r7
 8009534:	1902      	adds	r2, r0, r4
 8009536:	19d2      	adds	r2, r2, r7
 8009538:	8812      	ldrh	r2, [r2, #0]
 800953a:	430a      	orrs	r2, r1
 800953c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	1902      	adds	r2, r0, r4
 8009544:	19d2      	adds	r2, r2, r7
 8009546:	8812      	ldrh	r2, [r2, #0]
 8009548:	60da      	str	r2, [r3, #12]
 800954a:	e05d      	b.n	8009608 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800954c:	231a      	movs	r3, #26
 800954e:	2218      	movs	r2, #24
 8009550:	189b      	adds	r3, r3, r2
 8009552:	19db      	adds	r3, r3, r7
 8009554:	2201      	movs	r2, #1
 8009556:	701a      	strb	r2, [r3, #0]
 8009558:	e056      	b.n	8009608 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800955a:	231b      	movs	r3, #27
 800955c:	2218      	movs	r2, #24
 800955e:	189b      	adds	r3, r3, r2
 8009560:	19db      	adds	r3, r3, r7
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	2b08      	cmp	r3, #8
 8009566:	d822      	bhi.n	80095ae <UART_SetConfig+0x47e>
 8009568:	009a      	lsls	r2, r3, #2
 800956a:	4b32      	ldr	r3, [pc, #200]	; (8009634 <UART_SetConfig+0x504>)
 800956c:	18d3      	adds	r3, r2, r3
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009572:	f7fd ff69 	bl	8007448 <HAL_RCC_GetPCLK1Freq>
 8009576:	0003      	movs	r3, r0
 8009578:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800957a:	e021      	b.n	80095c0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800957c:	f7fd ff7a 	bl	8007474 <HAL_RCC_GetPCLK2Freq>
 8009580:	0003      	movs	r3, r0
 8009582:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009584:	e01c      	b.n	80095c0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009586:	4b28      	ldr	r3, [pc, #160]	; (8009628 <UART_SetConfig+0x4f8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2210      	movs	r2, #16
 800958c:	4013      	ands	r3, r2
 800958e:	d002      	beq.n	8009596 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009590:	4b26      	ldr	r3, [pc, #152]	; (800962c <UART_SetConfig+0x4fc>)
 8009592:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009594:	e014      	b.n	80095c0 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8009596:	4b26      	ldr	r3, [pc, #152]	; (8009630 <UART_SetConfig+0x500>)
 8009598:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800959a:	e011      	b.n	80095c0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800959c:	f7fd fea4 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 80095a0:	0003      	movs	r3, r0
 80095a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095a4:	e00c      	b.n	80095c0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095a6:	2380      	movs	r3, #128	; 0x80
 80095a8:	021b      	lsls	r3, r3, #8
 80095aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095ac:	e008      	b.n	80095c0 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80095b2:	231a      	movs	r3, #26
 80095b4:	2218      	movs	r2, #24
 80095b6:	189b      	adds	r3, r3, r2
 80095b8:	19db      	adds	r3, r3, r7
 80095ba:	2201      	movs	r2, #1
 80095bc:	701a      	strb	r2, [r3, #0]
        break;
 80095be:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80095c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d020      	beq.n	8009608 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	085a      	lsrs	r2, r3, #1
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	18d2      	adds	r2, r2, r3
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	0019      	movs	r1, r3
 80095d6:	0010      	movs	r0, r2
 80095d8:	f7f6 fdb2 	bl	8000140 <__udivsi3>
 80095dc:	0003      	movs	r3, r0
 80095de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	2b0f      	cmp	r3, #15
 80095e4:	d90a      	bls.n	80095fc <UART_SetConfig+0x4cc>
 80095e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095e8:	2380      	movs	r3, #128	; 0x80
 80095ea:	025b      	lsls	r3, r3, #9
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d205      	bcs.n	80095fc <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60da      	str	r2, [r3, #12]
 80095fa:	e005      	b.n	8009608 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80095fc:	231a      	movs	r3, #26
 80095fe:	2218      	movs	r2, #24
 8009600:	189b      	adds	r3, r3, r2
 8009602:	19db      	adds	r3, r3, r7
 8009604:	2201      	movs	r2, #1
 8009606:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	2200      	movs	r2, #0
 800960c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	2200      	movs	r2, #0
 8009612:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009614:	231a      	movs	r3, #26
 8009616:	2218      	movs	r2, #24
 8009618:	189b      	adds	r3, r3, r2
 800961a:	19db      	adds	r3, r3, r7
 800961c:	781b      	ldrb	r3, [r3, #0]
}
 800961e:	0018      	movs	r0, r3
 8009620:	46bd      	mov	sp, r7
 8009622:	b00e      	add	sp, #56	; 0x38
 8009624:	bdb0      	pop	{r4, r5, r7, pc}
 8009626:	46c0      	nop			; (mov r8, r8)
 8009628:	40021000 	.word	0x40021000
 800962c:	003d0900 	.word	0x003d0900
 8009630:	00f42400 	.word	0x00f42400
 8009634:	0800ec2c 	.word	0x0800ec2c

08009638 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009644:	2201      	movs	r2, #1
 8009646:	4013      	ands	r3, r2
 8009648:	d00b      	beq.n	8009662 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	4a4a      	ldr	r2, [pc, #296]	; (800977c <UART_AdvFeatureConfig+0x144>)
 8009652:	4013      	ands	r3, r2
 8009654:	0019      	movs	r1, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	430a      	orrs	r2, r1
 8009660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009666:	2202      	movs	r2, #2
 8009668:	4013      	ands	r3, r2
 800966a:	d00b      	beq.n	8009684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	4a43      	ldr	r2, [pc, #268]	; (8009780 <UART_AdvFeatureConfig+0x148>)
 8009674:	4013      	ands	r3, r2
 8009676:	0019      	movs	r1, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	430a      	orrs	r2, r1
 8009682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009688:	2204      	movs	r2, #4
 800968a:	4013      	ands	r3, r2
 800968c:	d00b      	beq.n	80096a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	4a3b      	ldr	r2, [pc, #236]	; (8009784 <UART_AdvFeatureConfig+0x14c>)
 8009696:	4013      	ands	r3, r2
 8009698:	0019      	movs	r1, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	430a      	orrs	r2, r1
 80096a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096aa:	2208      	movs	r2, #8
 80096ac:	4013      	ands	r3, r2
 80096ae:	d00b      	beq.n	80096c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	4a34      	ldr	r2, [pc, #208]	; (8009788 <UART_AdvFeatureConfig+0x150>)
 80096b8:	4013      	ands	r3, r2
 80096ba:	0019      	movs	r1, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096cc:	2210      	movs	r2, #16
 80096ce:	4013      	ands	r3, r2
 80096d0:	d00b      	beq.n	80096ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	4a2c      	ldr	r2, [pc, #176]	; (800978c <UART_AdvFeatureConfig+0x154>)
 80096da:	4013      	ands	r3, r2
 80096dc:	0019      	movs	r1, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ee:	2220      	movs	r2, #32
 80096f0:	4013      	ands	r3, r2
 80096f2:	d00b      	beq.n	800970c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	4a25      	ldr	r2, [pc, #148]	; (8009790 <UART_AdvFeatureConfig+0x158>)
 80096fc:	4013      	ands	r3, r2
 80096fe:	0019      	movs	r1, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	430a      	orrs	r2, r1
 800970a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009710:	2240      	movs	r2, #64	; 0x40
 8009712:	4013      	ands	r3, r2
 8009714:	d01d      	beq.n	8009752 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	4a1d      	ldr	r2, [pc, #116]	; (8009794 <UART_AdvFeatureConfig+0x15c>)
 800971e:	4013      	ands	r3, r2
 8009720:	0019      	movs	r1, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	430a      	orrs	r2, r1
 800972c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009732:	2380      	movs	r3, #128	; 0x80
 8009734:	035b      	lsls	r3, r3, #13
 8009736:	429a      	cmp	r2, r3
 8009738:	d10b      	bne.n	8009752 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	4a15      	ldr	r2, [pc, #84]	; (8009798 <UART_AdvFeatureConfig+0x160>)
 8009742:	4013      	ands	r3, r2
 8009744:	0019      	movs	r1, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	430a      	orrs	r2, r1
 8009750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	2280      	movs	r2, #128	; 0x80
 8009758:	4013      	ands	r3, r2
 800975a:	d00b      	beq.n	8009774 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	4a0e      	ldr	r2, [pc, #56]	; (800979c <UART_AdvFeatureConfig+0x164>)
 8009764:	4013      	ands	r3, r2
 8009766:	0019      	movs	r1, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	430a      	orrs	r2, r1
 8009772:	605a      	str	r2, [r3, #4]
  }
}
 8009774:	46c0      	nop			; (mov r8, r8)
 8009776:	46bd      	mov	sp, r7
 8009778:	b002      	add	sp, #8
 800977a:	bd80      	pop	{r7, pc}
 800977c:	fffdffff 	.word	0xfffdffff
 8009780:	fffeffff 	.word	0xfffeffff
 8009784:	fffbffff 	.word	0xfffbffff
 8009788:	ffff7fff 	.word	0xffff7fff
 800978c:	ffffefff 	.word	0xffffefff
 8009790:	ffffdfff 	.word	0xffffdfff
 8009794:	ffefffff 	.word	0xffefffff
 8009798:	ff9fffff 	.word	0xff9fffff
 800979c:	fff7ffff 	.word	0xfff7ffff

080097a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b092      	sub	sp, #72	; 0x48
 80097a4:	af02      	add	r7, sp, #8
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2284      	movs	r2, #132	; 0x84
 80097ac:	2100      	movs	r1, #0
 80097ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097b0:	f7fb f920 	bl	80049f4 <HAL_GetTick>
 80097b4:	0003      	movs	r3, r0
 80097b6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2208      	movs	r2, #8
 80097c0:	4013      	ands	r3, r2
 80097c2:	2b08      	cmp	r3, #8
 80097c4:	d12c      	bne.n	8009820 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c8:	2280      	movs	r2, #128	; 0x80
 80097ca:	0391      	lsls	r1, r2, #14
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	4a46      	ldr	r2, [pc, #280]	; (80098e8 <UART_CheckIdleState+0x148>)
 80097d0:	9200      	str	r2, [sp, #0]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f000 f88c 	bl	80098f0 <UART_WaitOnFlagUntilTimeout>
 80097d8:	1e03      	subs	r3, r0, #0
 80097da:	d021      	beq.n	8009820 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097dc:	f3ef 8310 	mrs	r3, PRIMASK
 80097e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80097e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80097e6:	2301      	movs	r3, #1
 80097e8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ec:	f383 8810 	msr	PRIMASK, r3
}
 80097f0:	46c0      	nop			; (mov r8, r8)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2180      	movs	r1, #128	; 0x80
 80097fe:	438a      	bics	r2, r1
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009804:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009808:	f383 8810 	msr	PRIMASK, r3
}
 800980c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2220      	movs	r2, #32
 8009812:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2278      	movs	r2, #120	; 0x78
 8009818:	2100      	movs	r1, #0
 800981a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800981c:	2303      	movs	r3, #3
 800981e:	e05f      	b.n	80098e0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2204      	movs	r2, #4
 8009828:	4013      	ands	r3, r2
 800982a:	2b04      	cmp	r3, #4
 800982c:	d146      	bne.n	80098bc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800982e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009830:	2280      	movs	r2, #128	; 0x80
 8009832:	03d1      	lsls	r1, r2, #15
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	4a2c      	ldr	r2, [pc, #176]	; (80098e8 <UART_CheckIdleState+0x148>)
 8009838:	9200      	str	r2, [sp, #0]
 800983a:	2200      	movs	r2, #0
 800983c:	f000 f858 	bl	80098f0 <UART_WaitOnFlagUntilTimeout>
 8009840:	1e03      	subs	r3, r0, #0
 8009842:	d03b      	beq.n	80098bc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009844:	f3ef 8310 	mrs	r3, PRIMASK
 8009848:	60fb      	str	r3, [r7, #12]
  return(result);
 800984a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800984c:	637b      	str	r3, [r7, #52]	; 0x34
 800984e:	2301      	movs	r3, #1
 8009850:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f383 8810 	msr	PRIMASK, r3
}
 8009858:	46c0      	nop			; (mov r8, r8)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4921      	ldr	r1, [pc, #132]	; (80098ec <UART_CheckIdleState+0x14c>)
 8009866:	400a      	ands	r2, r1
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800986c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f383 8810 	msr	PRIMASK, r3
}
 8009874:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009876:	f3ef 8310 	mrs	r3, PRIMASK
 800987a:	61bb      	str	r3, [r7, #24]
  return(result);
 800987c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800987e:	633b      	str	r3, [r7, #48]	; 0x30
 8009880:	2301      	movs	r3, #1
 8009882:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	f383 8810 	msr	PRIMASK, r3
}
 800988a:	46c0      	nop			; (mov r8, r8)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689a      	ldr	r2, [r3, #8]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2101      	movs	r1, #1
 8009898:	438a      	bics	r2, r1
 800989a:	609a      	str	r2, [r3, #8]
 800989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098a0:	6a3b      	ldr	r3, [r7, #32]
 80098a2:	f383 8810 	msr	PRIMASK, r3
}
 80098a6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2280      	movs	r2, #128	; 0x80
 80098ac:	2120      	movs	r1, #32
 80098ae:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2278      	movs	r2, #120	; 0x78
 80098b4:	2100      	movs	r1, #0
 80098b6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098b8:	2303      	movs	r3, #3
 80098ba:	e011      	b.n	80098e0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2220      	movs	r2, #32
 80098c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2280      	movs	r2, #128	; 0x80
 80098c6:	2120      	movs	r1, #32
 80098c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2278      	movs	r2, #120	; 0x78
 80098da:	2100      	movs	r1, #0
 80098dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	0018      	movs	r0, r3
 80098e2:	46bd      	mov	sp, r7
 80098e4:	b010      	add	sp, #64	; 0x40
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	01ffffff 	.word	0x01ffffff
 80098ec:	fffffedf 	.word	0xfffffedf

080098f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	603b      	str	r3, [r7, #0]
 80098fc:	1dfb      	adds	r3, r7, #7
 80098fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009900:	e04b      	b.n	800999a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	3301      	adds	r3, #1
 8009906:	d048      	beq.n	800999a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009908:	f7fb f874 	bl	80049f4 <HAL_GetTick>
 800990c:	0002      	movs	r2, r0
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	69ba      	ldr	r2, [r7, #24]
 8009914:	429a      	cmp	r2, r3
 8009916:	d302      	bcc.n	800991e <UART_WaitOnFlagUntilTimeout+0x2e>
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d101      	bne.n	8009922 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800991e:	2303      	movs	r3, #3
 8009920:	e04b      	b.n	80099ba <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2204      	movs	r2, #4
 800992a:	4013      	ands	r3, r2
 800992c:	d035      	beq.n	800999a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	2208      	movs	r2, #8
 8009936:	4013      	ands	r3, r2
 8009938:	2b08      	cmp	r3, #8
 800993a:	d111      	bne.n	8009960 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2208      	movs	r2, #8
 8009942:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	0018      	movs	r0, r3
 8009948:	f000 f906 	bl	8009b58 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2284      	movs	r2, #132	; 0x84
 8009950:	2108      	movs	r1, #8
 8009952:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2278      	movs	r2, #120	; 0x78
 8009958:	2100      	movs	r1, #0
 800995a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	e02c      	b.n	80099ba <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	69da      	ldr	r2, [r3, #28]
 8009966:	2380      	movs	r3, #128	; 0x80
 8009968:	011b      	lsls	r3, r3, #4
 800996a:	401a      	ands	r2, r3
 800996c:	2380      	movs	r3, #128	; 0x80
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	429a      	cmp	r2, r3
 8009972:	d112      	bne.n	800999a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2280      	movs	r2, #128	; 0x80
 800997a:	0112      	lsls	r2, r2, #4
 800997c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	0018      	movs	r0, r3
 8009982:	f000 f8e9 	bl	8009b58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2284      	movs	r2, #132	; 0x84
 800998a:	2120      	movs	r1, #32
 800998c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2278      	movs	r2, #120	; 0x78
 8009992:	2100      	movs	r1, #0
 8009994:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e00f      	b.n	80099ba <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	4013      	ands	r3, r2
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	425a      	negs	r2, r3
 80099aa:	4153      	adcs	r3, r2
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	001a      	movs	r2, r3
 80099b0:	1dfb      	adds	r3, r7, #7
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d0a4      	beq.n	8009902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	0018      	movs	r0, r3
 80099bc:	46bd      	mov	sp, r7
 80099be:	b004      	add	sp, #16
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b090      	sub	sp, #64	; 0x40
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	1dbb      	adds	r3, r7, #6
 80099d0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	1dba      	adds	r2, r7, #6
 80099dc:	2158      	movs	r1, #88	; 0x58
 80099de:	8812      	ldrh	r2, [r2, #0]
 80099e0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	1dba      	adds	r2, r7, #6
 80099e6:	215a      	movs	r1, #90	; 0x5a
 80099e8:	8812      	ldrh	r2, [r2, #0]
 80099ea:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	689a      	ldr	r2, [r3, #8]
 80099f6:	2380      	movs	r3, #128	; 0x80
 80099f8:	015b      	lsls	r3, r3, #5
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d10d      	bne.n	8009a1a <UART_Start_Receive_IT+0x56>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d104      	bne.n	8009a10 <UART_Start_Receive_IT+0x4c>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	225c      	movs	r2, #92	; 0x5c
 8009a0a:	4950      	ldr	r1, [pc, #320]	; (8009b4c <UART_Start_Receive_IT+0x188>)
 8009a0c:	5299      	strh	r1, [r3, r2]
 8009a0e:	e02e      	b.n	8009a6e <UART_Start_Receive_IT+0xaa>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	225c      	movs	r2, #92	; 0x5c
 8009a14:	21ff      	movs	r1, #255	; 0xff
 8009a16:	5299      	strh	r1, [r3, r2]
 8009a18:	e029      	b.n	8009a6e <UART_Start_Receive_IT+0xaa>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10d      	bne.n	8009a3e <UART_Start_Receive_IT+0x7a>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d104      	bne.n	8009a34 <UART_Start_Receive_IT+0x70>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	225c      	movs	r2, #92	; 0x5c
 8009a2e:	21ff      	movs	r1, #255	; 0xff
 8009a30:	5299      	strh	r1, [r3, r2]
 8009a32:	e01c      	b.n	8009a6e <UART_Start_Receive_IT+0xaa>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	225c      	movs	r2, #92	; 0x5c
 8009a38:	217f      	movs	r1, #127	; 0x7f
 8009a3a:	5299      	strh	r1, [r3, r2]
 8009a3c:	e017      	b.n	8009a6e <UART_Start_Receive_IT+0xaa>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	689a      	ldr	r2, [r3, #8]
 8009a42:	2380      	movs	r3, #128	; 0x80
 8009a44:	055b      	lsls	r3, r3, #21
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d10d      	bne.n	8009a66 <UART_Start_Receive_IT+0xa2>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d104      	bne.n	8009a5c <UART_Start_Receive_IT+0x98>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	225c      	movs	r2, #92	; 0x5c
 8009a56:	217f      	movs	r1, #127	; 0x7f
 8009a58:	5299      	strh	r1, [r3, r2]
 8009a5a:	e008      	b.n	8009a6e <UART_Start_Receive_IT+0xaa>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	225c      	movs	r2, #92	; 0x5c
 8009a60:	213f      	movs	r1, #63	; 0x3f
 8009a62:	5299      	strh	r1, [r3, r2]
 8009a64:	e003      	b.n	8009a6e <UART_Start_Receive_IT+0xaa>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	225c      	movs	r2, #92	; 0x5c
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2284      	movs	r2, #132	; 0x84
 8009a72:	2100      	movs	r1, #0
 8009a74:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2280      	movs	r2, #128	; 0x80
 8009a7a:	2122      	movs	r1, #34	; 0x22
 8009a7c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009a84:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a88:	2301      	movs	r3, #1
 8009a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8e:	f383 8810 	msr	PRIMASK, r3
}
 8009a92:	46c0      	nop			; (mov r8, r8)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689a      	ldr	r2, [r3, #8]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	609a      	str	r2, [r3, #8]
 8009aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aa6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aaa:	f383 8810 	msr	PRIMASK, r3
}
 8009aae:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	689a      	ldr	r2, [r3, #8]
 8009ab4:	2380      	movs	r3, #128	; 0x80
 8009ab6:	015b      	lsls	r3, r3, #5
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d107      	bne.n	8009acc <UART_Start_Receive_IT+0x108>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d103      	bne.n	8009acc <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4a22      	ldr	r2, [pc, #136]	; (8009b50 <UART_Start_Receive_IT+0x18c>)
 8009ac8:	669a      	str	r2, [r3, #104]	; 0x68
 8009aca:	e002      	b.n	8009ad2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4a21      	ldr	r2, [pc, #132]	; (8009b54 <UART_Start_Receive_IT+0x190>)
 8009ad0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d019      	beq.n	8009b0e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ada:	f3ef 8310 	mrs	r3, PRIMASK
 8009ade:	61fb      	str	r3, [r7, #28]
  return(result);
 8009ae0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	f383 8810 	msr	PRIMASK, r3
}
 8009aee:	46c0      	nop			; (mov r8, r8)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2190      	movs	r1, #144	; 0x90
 8009afc:	0049      	lsls	r1, r1, #1
 8009afe:	430a      	orrs	r2, r1
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b04:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b08:	f383 8810 	msr	PRIMASK, r3
}
 8009b0c:	e018      	b.n	8009b40 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8009b12:	613b      	str	r3, [r7, #16]
  return(result);
 8009b14:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b18:	2301      	movs	r3, #1
 8009b1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f383 8810 	msr	PRIMASK, r3
}
 8009b22:	46c0      	nop			; (mov r8, r8)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2120      	movs	r1, #32
 8009b30:	430a      	orrs	r2, r1
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	f383 8810 	msr	PRIMASK, r3
}
 8009b3e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	0018      	movs	r0, r3
 8009b44:	46bd      	mov	sp, r7
 8009b46:	b010      	add	sp, #64	; 0x40
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	46c0      	nop			; (mov r8, r8)
 8009b4c:	000001ff 	.word	0x000001ff
 8009b50:	08009e69 	.word	0x08009e69
 8009b54:	08009ca5 	.word	0x08009ca5

08009b58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08e      	sub	sp, #56	; 0x38
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b60:	f3ef 8310 	mrs	r3, PRIMASK
 8009b64:	617b      	str	r3, [r7, #20]
  return(result);
 8009b66:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b68:	637b      	str	r3, [r7, #52]	; 0x34
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	f383 8810 	msr	PRIMASK, r3
}
 8009b74:	46c0      	nop			; (mov r8, r8)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4926      	ldr	r1, [pc, #152]	; (8009c1c <UART_EndRxTransfer+0xc4>)
 8009b82:	400a      	ands	r2, r1
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	f383 8810 	msr	PRIMASK, r3
}
 8009b90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b92:	f3ef 8310 	mrs	r3, PRIMASK
 8009b96:	623b      	str	r3, [r7, #32]
  return(result);
 8009b98:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b9a:	633b      	str	r3, [r7, #48]	; 0x30
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	f383 8810 	msr	PRIMASK, r3
}
 8009ba6:	46c0      	nop			; (mov r8, r8)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	689a      	ldr	r2, [r3, #8]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	438a      	bics	r2, r1
 8009bb6:	609a      	str	r2, [r3, #8]
 8009bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	f383 8810 	msr	PRIMASK, r3
}
 8009bc2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d118      	bne.n	8009bfe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8009bd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009bd2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f383 8810 	msr	PRIMASK, r3
}
 8009be0:	46c0      	nop			; (mov r8, r8)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2110      	movs	r1, #16
 8009bee:	438a      	bics	r2, r1
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	f383 8810 	msr	PRIMASK, r3
}
 8009bfc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2280      	movs	r2, #128	; 0x80
 8009c02:	2120      	movs	r1, #32
 8009c04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	46bd      	mov	sp, r7
 8009c16:	b00e      	add	sp, #56	; 0x38
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	46c0      	nop			; (mov r8, r8)
 8009c1c:	fffffedf 	.word	0xfffffedf

08009c20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	225a      	movs	r2, #90	; 0x5a
 8009c32:	2100      	movs	r1, #0
 8009c34:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2252      	movs	r2, #82	; 0x52
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	0018      	movs	r0, r3
 8009c42:	f7ff fa61 	bl	8009108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c46:	46c0      	nop			; (mov r8, r8)
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	b004      	add	sp, #16
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b086      	sub	sp, #24
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c56:	f3ef 8310 	mrs	r3, PRIMASK
 8009c5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c5c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c5e:	617b      	str	r3, [r7, #20]
 8009c60:	2301      	movs	r3, #1
 8009c62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f383 8810 	msr	PRIMASK, r3
}
 8009c6a:	46c0      	nop			; (mov r8, r8)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2140      	movs	r1, #64	; 0x40
 8009c78:	438a      	bics	r2, r1
 8009c7a:	601a      	str	r2, [r3, #0]
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	f383 8810 	msr	PRIMASK, r3
}
 8009c86:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	0018      	movs	r0, r3
 8009c98:	f7ff fa2e 	bl	80090f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c9c:	46c0      	nop			; (mov r8, r8)
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	b006      	add	sp, #24
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b094      	sub	sp, #80	; 0x50
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009cac:	204e      	movs	r0, #78	; 0x4e
 8009cae:	183b      	adds	r3, r7, r0
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	215c      	movs	r1, #92	; 0x5c
 8009cb4:	5a52      	ldrh	r2, [r2, r1]
 8009cb6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2280      	movs	r2, #128	; 0x80
 8009cbc:	589b      	ldr	r3, [r3, r2]
 8009cbe:	2b22      	cmp	r3, #34	; 0x22
 8009cc0:	d000      	beq.n	8009cc4 <UART_RxISR_8BIT+0x20>
 8009cc2:	e0bf      	b.n	8009e44 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cca:	214c      	movs	r1, #76	; 0x4c
 8009ccc:	187b      	adds	r3, r7, r1
 8009cce:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009cd0:	187b      	adds	r3, r7, r1
 8009cd2:	881b      	ldrh	r3, [r3, #0]
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	183b      	adds	r3, r7, r0
 8009cd8:	881b      	ldrh	r3, [r3, #0]
 8009cda:	b2d9      	uxtb	r1, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce0:	400a      	ands	r2, r1
 8009ce2:	b2d2      	uxtb	r2, r2
 8009ce4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	225a      	movs	r2, #90	; 0x5a
 8009cf4:	5a9b      	ldrh	r3, [r3, r2]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	b299      	uxth	r1, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	225a      	movs	r2, #90	; 0x5a
 8009d00:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	225a      	movs	r2, #90	; 0x5a
 8009d06:	5a9b      	ldrh	r3, [r3, r2]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d000      	beq.n	8009d10 <UART_RxISR_8BIT+0x6c>
 8009d0e:	e0a1      	b.n	8009e54 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d10:	f3ef 8310 	mrs	r3, PRIMASK
 8009d14:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d18:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d20:	f383 8810 	msr	PRIMASK, r3
}
 8009d24:	46c0      	nop			; (mov r8, r8)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	494a      	ldr	r1, [pc, #296]	; (8009e5c <UART_RxISR_8BIT+0x1b8>)
 8009d32:	400a      	ands	r2, r1
 8009d34:	601a      	str	r2, [r3, #0]
 8009d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3c:	f383 8810 	msr	PRIMASK, r3
}
 8009d40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d42:	f3ef 8310 	mrs	r3, PRIMASK
 8009d46:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d52:	f383 8810 	msr	PRIMASK, r3
}
 8009d56:	46c0      	nop			; (mov r8, r8)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	689a      	ldr	r2, [r3, #8]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2101      	movs	r1, #1
 8009d64:	438a      	bics	r2, r1
 8009d66:	609a      	str	r2, [r3, #8]
 8009d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6e:	f383 8810 	msr	PRIMASK, r3
}
 8009d72:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2280      	movs	r2, #128	; 0x80
 8009d78:	2120      	movs	r1, #32
 8009d7a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a34      	ldr	r2, [pc, #208]	; (8009e60 <UART_RxISR_8BIT+0x1bc>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d01f      	beq.n	8009dd2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	2380      	movs	r3, #128	; 0x80
 8009d9a:	041b      	lsls	r3, r3, #16
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	d018      	beq.n	8009dd2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009da0:	f3ef 8310 	mrs	r3, PRIMASK
 8009da4:	61bb      	str	r3, [r7, #24]
  return(result);
 8009da6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009da8:	643b      	str	r3, [r7, #64]	; 0x40
 8009daa:	2301      	movs	r3, #1
 8009dac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	f383 8810 	msr	PRIMASK, r3
}
 8009db4:	46c0      	nop			; (mov r8, r8)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4928      	ldr	r1, [pc, #160]	; (8009e64 <UART_RxISR_8BIT+0x1c0>)
 8009dc2:	400a      	ands	r2, r1
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	f383 8810 	msr	PRIMASK, r3
}
 8009dd0:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d12f      	bne.n	8009e3a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009de0:	f3ef 8310 	mrs	r3, PRIMASK
 8009de4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009de6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dea:	2301      	movs	r3, #1
 8009dec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	f383 8810 	msr	PRIMASK, r3
}
 8009df4:	46c0      	nop			; (mov r8, r8)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2110      	movs	r1, #16
 8009e02:	438a      	bics	r2, r1
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f383 8810 	msr	PRIMASK, r3
}
 8009e10:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	2210      	movs	r2, #16
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	2b10      	cmp	r3, #16
 8009e1e:	d103      	bne.n	8009e28 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2210      	movs	r2, #16
 8009e26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2258      	movs	r2, #88	; 0x58
 8009e2c:	5a9a      	ldrh	r2, [r3, r2]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	0011      	movs	r1, r2
 8009e32:	0018      	movs	r0, r3
 8009e34:	f7ff f970 	bl	8009118 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e38:	e00c      	b.n	8009e54 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	f7f9 fc63 	bl	8003708 <HAL_UART_RxCpltCallback>
}
 8009e42:	e007      	b.n	8009e54 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	699a      	ldr	r2, [r3, #24]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2108      	movs	r1, #8
 8009e50:	430a      	orrs	r2, r1
 8009e52:	619a      	str	r2, [r3, #24]
}
 8009e54:	46c0      	nop			; (mov r8, r8)
 8009e56:	46bd      	mov	sp, r7
 8009e58:	b014      	add	sp, #80	; 0x50
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	fffffedf 	.word	0xfffffedf
 8009e60:	40004800 	.word	0x40004800
 8009e64:	fbffffff 	.word	0xfbffffff

08009e68 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b094      	sub	sp, #80	; 0x50
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009e70:	204e      	movs	r0, #78	; 0x4e
 8009e72:	183b      	adds	r3, r7, r0
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	215c      	movs	r1, #92	; 0x5c
 8009e78:	5a52      	ldrh	r2, [r2, r1]
 8009e7a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2280      	movs	r2, #128	; 0x80
 8009e80:	589b      	ldr	r3, [r3, r2]
 8009e82:	2b22      	cmp	r3, #34	; 0x22
 8009e84:	d000      	beq.n	8009e88 <UART_RxISR_16BIT+0x20>
 8009e86:	e0bf      	b.n	800a008 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e8e:	214c      	movs	r1, #76	; 0x4c
 8009e90:	187b      	adds	r3, r7, r1
 8009e92:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e98:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8009e9a:	187b      	adds	r3, r7, r1
 8009e9c:	183a      	adds	r2, r7, r0
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	8812      	ldrh	r2, [r2, #0]
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ea8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eae:	1c9a      	adds	r2, r3, #2
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	225a      	movs	r2, #90	; 0x5a
 8009eb8:	5a9b      	ldrh	r3, [r3, r2]
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	b299      	uxth	r1, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	225a      	movs	r2, #90	; 0x5a
 8009ec4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	225a      	movs	r2, #90	; 0x5a
 8009eca:	5a9b      	ldrh	r3, [r3, r2]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d000      	beq.n	8009ed4 <UART_RxISR_16BIT+0x6c>
 8009ed2:	e0a1      	b.n	800a018 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ed8:	623b      	str	r3, [r7, #32]
  return(result);
 8009eda:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009edc:	647b      	str	r3, [r7, #68]	; 0x44
 8009ede:	2301      	movs	r3, #1
 8009ee0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	f383 8810 	msr	PRIMASK, r3
}
 8009ee8:	46c0      	nop			; (mov r8, r8)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	494a      	ldr	r1, [pc, #296]	; (800a020 <UART_RxISR_16BIT+0x1b8>)
 8009ef6:	400a      	ands	r2, r1
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009efc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	f383 8810 	msr	PRIMASK, r3
}
 8009f04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f06:	f3ef 8310 	mrs	r3, PRIMASK
 8009f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8009f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f0e:	643b      	str	r3, [r7, #64]	; 0x40
 8009f10:	2301      	movs	r3, #1
 8009f12:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f16:	f383 8810 	msr	PRIMASK, r3
}
 8009f1a:	46c0      	nop			; (mov r8, r8)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	689a      	ldr	r2, [r3, #8]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2101      	movs	r1, #1
 8009f28:	438a      	bics	r2, r1
 8009f2a:	609a      	str	r2, [r3, #8]
 8009f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f2e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f32:	f383 8810 	msr	PRIMASK, r3
}
 8009f36:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2280      	movs	r2, #128	; 0x80
 8009f3c:	2120      	movs	r1, #32
 8009f3e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a34      	ldr	r2, [pc, #208]	; (800a024 <UART_RxISR_16BIT+0x1bc>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d01f      	beq.n	8009f96 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	2380      	movs	r3, #128	; 0x80
 8009f5e:	041b      	lsls	r3, r3, #16
 8009f60:	4013      	ands	r3, r2
 8009f62:	d018      	beq.n	8009f96 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f64:	f3ef 8310 	mrs	r3, PRIMASK
 8009f68:	617b      	str	r3, [r7, #20]
  return(result);
 8009f6a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f6e:	2301      	movs	r3, #1
 8009f70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	f383 8810 	msr	PRIMASK, r3
}
 8009f78:	46c0      	nop			; (mov r8, r8)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4928      	ldr	r1, [pc, #160]	; (800a028 <UART_RxISR_16BIT+0x1c0>)
 8009f86:	400a      	ands	r2, r1
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	f383 8810 	msr	PRIMASK, r3
}
 8009f94:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d12f      	bne.n	8009ffe <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8009fa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009faa:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fac:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fae:	2301      	movs	r3, #1
 8009fb0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f383 8810 	msr	PRIMASK, r3
}
 8009fb8:	46c0      	nop			; (mov r8, r8)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2110      	movs	r1, #16
 8009fc6:	438a      	bics	r2, r1
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	f383 8810 	msr	PRIMASK, r3
}
 8009fd4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69db      	ldr	r3, [r3, #28]
 8009fdc:	2210      	movs	r2, #16
 8009fde:	4013      	ands	r3, r2
 8009fe0:	2b10      	cmp	r3, #16
 8009fe2:	d103      	bne.n	8009fec <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2210      	movs	r2, #16
 8009fea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2258      	movs	r2, #88	; 0x58
 8009ff0:	5a9a      	ldrh	r2, [r3, r2]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	0011      	movs	r1, r2
 8009ff6:	0018      	movs	r0, r3
 8009ff8:	f7ff f88e 	bl	8009118 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ffc:	e00c      	b.n	800a018 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	0018      	movs	r0, r3
 800a002:	f7f9 fb81 	bl	8003708 <HAL_UART_RxCpltCallback>
}
 800a006:	e007      	b.n	800a018 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	699a      	ldr	r2, [r3, #24]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2108      	movs	r1, #8
 800a014:	430a      	orrs	r2, r1
 800a016:	619a      	str	r2, [r3, #24]
}
 800a018:	46c0      	nop			; (mov r8, r8)
 800a01a:	46bd      	mov	sp, r7
 800a01c:	b014      	add	sp, #80	; 0x50
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	fffffedf 	.word	0xfffffedf
 800a024:	40004800 	.word	0x40004800
 800a028:	fbffffff 	.word	0xfbffffff

0800a02c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a034:	46c0      	nop			; (mov r8, r8)
 800a036:	46bd      	mov	sp, r7
 800a038:	b002      	add	sp, #8
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <sulp>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	0016      	movs	r6, r2
 800a040:	000d      	movs	r5, r1
 800a042:	f003 fecd 	bl	800dde0 <__ulp>
 800a046:	2e00      	cmp	r6, #0
 800a048:	d00d      	beq.n	800a066 <sulp+0x2a>
 800a04a:	236b      	movs	r3, #107	; 0x6b
 800a04c:	006a      	lsls	r2, r5, #1
 800a04e:	0d52      	lsrs	r2, r2, #21
 800a050:	1a9b      	subs	r3, r3, r2
 800a052:	2b00      	cmp	r3, #0
 800a054:	dd07      	ble.n	800a066 <sulp+0x2a>
 800a056:	2400      	movs	r4, #0
 800a058:	4a03      	ldr	r2, [pc, #12]	; (800a068 <sulp+0x2c>)
 800a05a:	051b      	lsls	r3, r3, #20
 800a05c:	189d      	adds	r5, r3, r2
 800a05e:	002b      	movs	r3, r5
 800a060:	0022      	movs	r2, r4
 800a062:	f7f7 ff55 	bl	8001f10 <__aeabi_dmul>
 800a066:	bd70      	pop	{r4, r5, r6, pc}
 800a068:	3ff00000 	.word	0x3ff00000

0800a06c <_strtod_l>:
 800a06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a06e:	b0a1      	sub	sp, #132	; 0x84
 800a070:	9219      	str	r2, [sp, #100]	; 0x64
 800a072:	2200      	movs	r2, #0
 800a074:	2600      	movs	r6, #0
 800a076:	2700      	movs	r7, #0
 800a078:	9004      	str	r0, [sp, #16]
 800a07a:	9107      	str	r1, [sp, #28]
 800a07c:	921c      	str	r2, [sp, #112]	; 0x70
 800a07e:	911b      	str	r1, [sp, #108]	; 0x6c
 800a080:	780a      	ldrb	r2, [r1, #0]
 800a082:	2a2b      	cmp	r2, #43	; 0x2b
 800a084:	d055      	beq.n	800a132 <_strtod_l+0xc6>
 800a086:	d841      	bhi.n	800a10c <_strtod_l+0xa0>
 800a088:	2a0d      	cmp	r2, #13
 800a08a:	d83b      	bhi.n	800a104 <_strtod_l+0x98>
 800a08c:	2a08      	cmp	r2, #8
 800a08e:	d83b      	bhi.n	800a108 <_strtod_l+0x9c>
 800a090:	2a00      	cmp	r2, #0
 800a092:	d044      	beq.n	800a11e <_strtod_l+0xb2>
 800a094:	2200      	movs	r2, #0
 800a096:	920f      	str	r2, [sp, #60]	; 0x3c
 800a098:	2100      	movs	r1, #0
 800a09a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a09c:	9109      	str	r1, [sp, #36]	; 0x24
 800a09e:	782a      	ldrb	r2, [r5, #0]
 800a0a0:	2a30      	cmp	r2, #48	; 0x30
 800a0a2:	d000      	beq.n	800a0a6 <_strtod_l+0x3a>
 800a0a4:	e085      	b.n	800a1b2 <_strtod_l+0x146>
 800a0a6:	786a      	ldrb	r2, [r5, #1]
 800a0a8:	3120      	adds	r1, #32
 800a0aa:	438a      	bics	r2, r1
 800a0ac:	2a58      	cmp	r2, #88	; 0x58
 800a0ae:	d000      	beq.n	800a0b2 <_strtod_l+0x46>
 800a0b0:	e075      	b.n	800a19e <_strtod_l+0x132>
 800a0b2:	9302      	str	r3, [sp, #8]
 800a0b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0b6:	4a97      	ldr	r2, [pc, #604]	; (800a314 <_strtod_l+0x2a8>)
 800a0b8:	9301      	str	r3, [sp, #4]
 800a0ba:	ab1c      	add	r3, sp, #112	; 0x70
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	9804      	ldr	r0, [sp, #16]
 800a0c0:	ab1d      	add	r3, sp, #116	; 0x74
 800a0c2:	a91b      	add	r1, sp, #108	; 0x6c
 800a0c4:	f002 ff44 	bl	800cf50 <__gethex>
 800a0c8:	230f      	movs	r3, #15
 800a0ca:	0002      	movs	r2, r0
 800a0cc:	401a      	ands	r2, r3
 800a0ce:	0004      	movs	r4, r0
 800a0d0:	9205      	str	r2, [sp, #20]
 800a0d2:	4218      	tst	r0, r3
 800a0d4:	d005      	beq.n	800a0e2 <_strtod_l+0x76>
 800a0d6:	2a06      	cmp	r2, #6
 800a0d8:	d12d      	bne.n	800a136 <_strtod_l+0xca>
 800a0da:	1c6b      	adds	r3, r5, #1
 800a0dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800a0de:	2300      	movs	r3, #0
 800a0e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <_strtod_l+0x82>
 800a0e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d01b      	beq.n	800a12c <_strtod_l+0xc0>
 800a0f4:	2380      	movs	r3, #128	; 0x80
 800a0f6:	0032      	movs	r2, r6
 800a0f8:	061b      	lsls	r3, r3, #24
 800a0fa:	18fb      	adds	r3, r7, r3
 800a0fc:	0010      	movs	r0, r2
 800a0fe:	0019      	movs	r1, r3
 800a100:	b021      	add	sp, #132	; 0x84
 800a102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a104:	2a20      	cmp	r2, #32
 800a106:	d1c5      	bne.n	800a094 <_strtod_l+0x28>
 800a108:	3101      	adds	r1, #1
 800a10a:	e7b8      	b.n	800a07e <_strtod_l+0x12>
 800a10c:	2a2d      	cmp	r2, #45	; 0x2d
 800a10e:	d1c1      	bne.n	800a094 <_strtod_l+0x28>
 800a110:	3a2c      	subs	r2, #44	; 0x2c
 800a112:	920f      	str	r2, [sp, #60]	; 0x3c
 800a114:	1c4a      	adds	r2, r1, #1
 800a116:	921b      	str	r2, [sp, #108]	; 0x6c
 800a118:	784a      	ldrb	r2, [r1, #1]
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	d1bc      	bne.n	800a098 <_strtod_l+0x2c>
 800a11e:	9b07      	ldr	r3, [sp, #28]
 800a120:	931b      	str	r3, [sp, #108]	; 0x6c
 800a122:	2300      	movs	r3, #0
 800a124:	930f      	str	r3, [sp, #60]	; 0x3c
 800a126:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1dd      	bne.n	800a0e8 <_strtod_l+0x7c>
 800a12c:	0032      	movs	r2, r6
 800a12e:	003b      	movs	r3, r7
 800a130:	e7e4      	b.n	800a0fc <_strtod_l+0x90>
 800a132:	2200      	movs	r2, #0
 800a134:	e7ed      	b.n	800a112 <_strtod_l+0xa6>
 800a136:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a138:	2a00      	cmp	r2, #0
 800a13a:	d007      	beq.n	800a14c <_strtod_l+0xe0>
 800a13c:	2135      	movs	r1, #53	; 0x35
 800a13e:	a81e      	add	r0, sp, #120	; 0x78
 800a140:	f003 ff3f 	bl	800dfc2 <__copybits>
 800a144:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a146:	9804      	ldr	r0, [sp, #16]
 800a148:	f003 fb08 	bl	800d75c <_Bfree>
 800a14c:	9805      	ldr	r0, [sp, #20]
 800a14e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a150:	3801      	subs	r0, #1
 800a152:	2804      	cmp	r0, #4
 800a154:	d806      	bhi.n	800a164 <_strtod_l+0xf8>
 800a156:	f7f5 ffdf 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a15a:	0312      	.short	0x0312
 800a15c:	1e1c      	.short	0x1e1c
 800a15e:	12          	.byte	0x12
 800a15f:	00          	.byte	0x00
 800a160:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a162:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800a164:	05e4      	lsls	r4, r4, #23
 800a166:	d502      	bpl.n	800a16e <_strtod_l+0x102>
 800a168:	2380      	movs	r3, #128	; 0x80
 800a16a:	061b      	lsls	r3, r3, #24
 800a16c:	431f      	orrs	r7, r3
 800a16e:	4b6a      	ldr	r3, [pc, #424]	; (800a318 <_strtod_l+0x2ac>)
 800a170:	423b      	tst	r3, r7
 800a172:	d1b6      	bne.n	800a0e2 <_strtod_l+0x76>
 800a174:	f001 ff4e 	bl	800c014 <__errno>
 800a178:	2322      	movs	r3, #34	; 0x22
 800a17a:	6003      	str	r3, [r0, #0]
 800a17c:	e7b1      	b.n	800a0e2 <_strtod_l+0x76>
 800a17e:	4967      	ldr	r1, [pc, #412]	; (800a31c <_strtod_l+0x2b0>)
 800a180:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a182:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a184:	400a      	ands	r2, r1
 800a186:	4966      	ldr	r1, [pc, #408]	; (800a320 <_strtod_l+0x2b4>)
 800a188:	185b      	adds	r3, r3, r1
 800a18a:	051b      	lsls	r3, r3, #20
 800a18c:	431a      	orrs	r2, r3
 800a18e:	0017      	movs	r7, r2
 800a190:	e7e8      	b.n	800a164 <_strtod_l+0xf8>
 800a192:	4f61      	ldr	r7, [pc, #388]	; (800a318 <_strtod_l+0x2ac>)
 800a194:	e7e6      	b.n	800a164 <_strtod_l+0xf8>
 800a196:	2601      	movs	r6, #1
 800a198:	4f62      	ldr	r7, [pc, #392]	; (800a324 <_strtod_l+0x2b8>)
 800a19a:	4276      	negs	r6, r6
 800a19c:	e7e2      	b.n	800a164 <_strtod_l+0xf8>
 800a19e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1a0:	1c5a      	adds	r2, r3, #1
 800a1a2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a1a4:	785b      	ldrb	r3, [r3, #1]
 800a1a6:	2b30      	cmp	r3, #48	; 0x30
 800a1a8:	d0f9      	beq.n	800a19e <_strtod_l+0x132>
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d099      	beq.n	800a0e2 <_strtod_l+0x76>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b2:	2500      	movs	r5, #0
 800a1b4:	220a      	movs	r2, #10
 800a1b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1b8:	950d      	str	r5, [sp, #52]	; 0x34
 800a1ba:	9310      	str	r3, [sp, #64]	; 0x40
 800a1bc:	9508      	str	r5, [sp, #32]
 800a1be:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a1c0:	7804      	ldrb	r4, [r0, #0]
 800a1c2:	0023      	movs	r3, r4
 800a1c4:	3b30      	subs	r3, #48	; 0x30
 800a1c6:	b2d9      	uxtb	r1, r3
 800a1c8:	2909      	cmp	r1, #9
 800a1ca:	d927      	bls.n	800a21c <_strtod_l+0x1b0>
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	4956      	ldr	r1, [pc, #344]	; (800a328 <_strtod_l+0x2bc>)
 800a1d0:	f001 febc 	bl	800bf4c <strncmp>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d031      	beq.n	800a23c <_strtod_l+0x1d0>
 800a1d8:	2000      	movs	r0, #0
 800a1da:	0023      	movs	r3, r4
 800a1dc:	4684      	mov	ip, r0
 800a1de:	9a08      	ldr	r2, [sp, #32]
 800a1e0:	900c      	str	r0, [sp, #48]	; 0x30
 800a1e2:	9205      	str	r2, [sp, #20]
 800a1e4:	2220      	movs	r2, #32
 800a1e6:	0019      	movs	r1, r3
 800a1e8:	4391      	bics	r1, r2
 800a1ea:	000a      	movs	r2, r1
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	9106      	str	r1, [sp, #24]
 800a1f0:	2a45      	cmp	r2, #69	; 0x45
 800a1f2:	d000      	beq.n	800a1f6 <_strtod_l+0x18a>
 800a1f4:	e0c2      	b.n	800a37c <_strtod_l+0x310>
 800a1f6:	9b05      	ldr	r3, [sp, #20]
 800a1f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1fa:	4303      	orrs	r3, r0
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	428b      	cmp	r3, r1
 800a200:	d08d      	beq.n	800a11e <_strtod_l+0xb2>
 800a202:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a204:	9307      	str	r3, [sp, #28]
 800a206:	3301      	adds	r3, #1
 800a208:	931b      	str	r3, [sp, #108]	; 0x6c
 800a20a:	9b07      	ldr	r3, [sp, #28]
 800a20c:	785b      	ldrb	r3, [r3, #1]
 800a20e:	2b2b      	cmp	r3, #43	; 0x2b
 800a210:	d071      	beq.n	800a2f6 <_strtod_l+0x28a>
 800a212:	000c      	movs	r4, r1
 800a214:	2b2d      	cmp	r3, #45	; 0x2d
 800a216:	d174      	bne.n	800a302 <_strtod_l+0x296>
 800a218:	2401      	movs	r4, #1
 800a21a:	e06d      	b.n	800a2f8 <_strtod_l+0x28c>
 800a21c:	9908      	ldr	r1, [sp, #32]
 800a21e:	2908      	cmp	r1, #8
 800a220:	dc09      	bgt.n	800a236 <_strtod_l+0x1ca>
 800a222:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a224:	4351      	muls	r1, r2
 800a226:	185b      	adds	r3, r3, r1
 800a228:	930d      	str	r3, [sp, #52]	; 0x34
 800a22a:	9b08      	ldr	r3, [sp, #32]
 800a22c:	3001      	adds	r0, #1
 800a22e:	3301      	adds	r3, #1
 800a230:	9308      	str	r3, [sp, #32]
 800a232:	901b      	str	r0, [sp, #108]	; 0x6c
 800a234:	e7c3      	b.n	800a1be <_strtod_l+0x152>
 800a236:	4355      	muls	r5, r2
 800a238:	195d      	adds	r5, r3, r5
 800a23a:	e7f6      	b.n	800a22a <_strtod_l+0x1be>
 800a23c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a23e:	1c5a      	adds	r2, r3, #1
 800a240:	921b      	str	r2, [sp, #108]	; 0x6c
 800a242:	9a08      	ldr	r2, [sp, #32]
 800a244:	785b      	ldrb	r3, [r3, #1]
 800a246:	2a00      	cmp	r2, #0
 800a248:	d03a      	beq.n	800a2c0 <_strtod_l+0x254>
 800a24a:	900c      	str	r0, [sp, #48]	; 0x30
 800a24c:	9205      	str	r2, [sp, #20]
 800a24e:	001a      	movs	r2, r3
 800a250:	3a30      	subs	r2, #48	; 0x30
 800a252:	2a09      	cmp	r2, #9
 800a254:	d912      	bls.n	800a27c <_strtod_l+0x210>
 800a256:	2201      	movs	r2, #1
 800a258:	4694      	mov	ip, r2
 800a25a:	e7c3      	b.n	800a1e4 <_strtod_l+0x178>
 800a25c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a25e:	3001      	adds	r0, #1
 800a260:	1c5a      	adds	r2, r3, #1
 800a262:	921b      	str	r2, [sp, #108]	; 0x6c
 800a264:	785b      	ldrb	r3, [r3, #1]
 800a266:	2b30      	cmp	r3, #48	; 0x30
 800a268:	d0f8      	beq.n	800a25c <_strtod_l+0x1f0>
 800a26a:	001a      	movs	r2, r3
 800a26c:	3a31      	subs	r2, #49	; 0x31
 800a26e:	2a08      	cmp	r2, #8
 800a270:	d83c      	bhi.n	800a2ec <_strtod_l+0x280>
 800a272:	900c      	str	r0, [sp, #48]	; 0x30
 800a274:	2000      	movs	r0, #0
 800a276:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a278:	9005      	str	r0, [sp, #20]
 800a27a:	9210      	str	r2, [sp, #64]	; 0x40
 800a27c:	001a      	movs	r2, r3
 800a27e:	1c41      	adds	r1, r0, #1
 800a280:	3a30      	subs	r2, #48	; 0x30
 800a282:	2b30      	cmp	r3, #48	; 0x30
 800a284:	d016      	beq.n	800a2b4 <_strtod_l+0x248>
 800a286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a288:	185b      	adds	r3, r3, r1
 800a28a:	930c      	str	r3, [sp, #48]	; 0x30
 800a28c:	9b05      	ldr	r3, [sp, #20]
 800a28e:	210a      	movs	r1, #10
 800a290:	469c      	mov	ip, r3
 800a292:	4484      	add	ip, r0
 800a294:	4563      	cmp	r3, ip
 800a296:	d115      	bne.n	800a2c4 <_strtod_l+0x258>
 800a298:	9905      	ldr	r1, [sp, #20]
 800a29a:	9b05      	ldr	r3, [sp, #20]
 800a29c:	3101      	adds	r1, #1
 800a29e:	1809      	adds	r1, r1, r0
 800a2a0:	181b      	adds	r3, r3, r0
 800a2a2:	9105      	str	r1, [sp, #20]
 800a2a4:	2b08      	cmp	r3, #8
 800a2a6:	dc19      	bgt.n	800a2dc <_strtod_l+0x270>
 800a2a8:	230a      	movs	r3, #10
 800a2aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a2ac:	434b      	muls	r3, r1
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	18d3      	adds	r3, r2, r3
 800a2b2:	930d      	str	r3, [sp, #52]	; 0x34
 800a2b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2b6:	0008      	movs	r0, r1
 800a2b8:	1c5a      	adds	r2, r3, #1
 800a2ba:	921b      	str	r2, [sp, #108]	; 0x6c
 800a2bc:	785b      	ldrb	r3, [r3, #1]
 800a2be:	e7c6      	b.n	800a24e <_strtod_l+0x1e2>
 800a2c0:	9808      	ldr	r0, [sp, #32]
 800a2c2:	e7d0      	b.n	800a266 <_strtod_l+0x1fa>
 800a2c4:	1c5c      	adds	r4, r3, #1
 800a2c6:	2b08      	cmp	r3, #8
 800a2c8:	dc04      	bgt.n	800a2d4 <_strtod_l+0x268>
 800a2ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2cc:	434b      	muls	r3, r1
 800a2ce:	930d      	str	r3, [sp, #52]	; 0x34
 800a2d0:	0023      	movs	r3, r4
 800a2d2:	e7df      	b.n	800a294 <_strtod_l+0x228>
 800a2d4:	2c10      	cmp	r4, #16
 800a2d6:	dcfb      	bgt.n	800a2d0 <_strtod_l+0x264>
 800a2d8:	434d      	muls	r5, r1
 800a2da:	e7f9      	b.n	800a2d0 <_strtod_l+0x264>
 800a2dc:	9b05      	ldr	r3, [sp, #20]
 800a2de:	2100      	movs	r1, #0
 800a2e0:	2b10      	cmp	r3, #16
 800a2e2:	dce7      	bgt.n	800a2b4 <_strtod_l+0x248>
 800a2e4:	230a      	movs	r3, #10
 800a2e6:	435d      	muls	r5, r3
 800a2e8:	1955      	adds	r5, r2, r5
 800a2ea:	e7e3      	b.n	800a2b4 <_strtod_l+0x248>
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	920c      	str	r2, [sp, #48]	; 0x30
 800a2f0:	9205      	str	r2, [sp, #20]
 800a2f2:	3201      	adds	r2, #1
 800a2f4:	e7b0      	b.n	800a258 <_strtod_l+0x1ec>
 800a2f6:	2400      	movs	r4, #0
 800a2f8:	9b07      	ldr	r3, [sp, #28]
 800a2fa:	3302      	adds	r3, #2
 800a2fc:	931b      	str	r3, [sp, #108]	; 0x6c
 800a2fe:	9b07      	ldr	r3, [sp, #28]
 800a300:	789b      	ldrb	r3, [r3, #2]
 800a302:	001a      	movs	r2, r3
 800a304:	3a30      	subs	r2, #48	; 0x30
 800a306:	2a09      	cmp	r2, #9
 800a308:	d914      	bls.n	800a334 <_strtod_l+0x2c8>
 800a30a:	9a07      	ldr	r2, [sp, #28]
 800a30c:	921b      	str	r2, [sp, #108]	; 0x6c
 800a30e:	2200      	movs	r2, #0
 800a310:	e033      	b.n	800a37a <_strtod_l+0x30e>
 800a312:	46c0      	nop			; (mov r8, r8)
 800a314:	0800ec54 	.word	0x0800ec54
 800a318:	7ff00000 	.word	0x7ff00000
 800a31c:	ffefffff 	.word	0xffefffff
 800a320:	00000433 	.word	0x00000433
 800a324:	7fffffff 	.word	0x7fffffff
 800a328:	0800ec50 	.word	0x0800ec50
 800a32c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a32e:	1c5a      	adds	r2, r3, #1
 800a330:	921b      	str	r2, [sp, #108]	; 0x6c
 800a332:	785b      	ldrb	r3, [r3, #1]
 800a334:	2b30      	cmp	r3, #48	; 0x30
 800a336:	d0f9      	beq.n	800a32c <_strtod_l+0x2c0>
 800a338:	2200      	movs	r2, #0
 800a33a:	9206      	str	r2, [sp, #24]
 800a33c:	001a      	movs	r2, r3
 800a33e:	3a31      	subs	r2, #49	; 0x31
 800a340:	2a08      	cmp	r2, #8
 800a342:	d81b      	bhi.n	800a37c <_strtod_l+0x310>
 800a344:	3b30      	subs	r3, #48	; 0x30
 800a346:	930e      	str	r3, [sp, #56]	; 0x38
 800a348:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a34a:	9306      	str	r3, [sp, #24]
 800a34c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a34e:	1c59      	adds	r1, r3, #1
 800a350:	911b      	str	r1, [sp, #108]	; 0x6c
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	001a      	movs	r2, r3
 800a356:	3a30      	subs	r2, #48	; 0x30
 800a358:	2a09      	cmp	r2, #9
 800a35a:	d93a      	bls.n	800a3d2 <_strtod_l+0x366>
 800a35c:	9a06      	ldr	r2, [sp, #24]
 800a35e:	1a8a      	subs	r2, r1, r2
 800a360:	49b2      	ldr	r1, [pc, #712]	; (800a62c <_strtod_l+0x5c0>)
 800a362:	9106      	str	r1, [sp, #24]
 800a364:	2a08      	cmp	r2, #8
 800a366:	dc04      	bgt.n	800a372 <_strtod_l+0x306>
 800a368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a36a:	9206      	str	r2, [sp, #24]
 800a36c:	428a      	cmp	r2, r1
 800a36e:	dd00      	ble.n	800a372 <_strtod_l+0x306>
 800a370:	9106      	str	r1, [sp, #24]
 800a372:	2c00      	cmp	r4, #0
 800a374:	d002      	beq.n	800a37c <_strtod_l+0x310>
 800a376:	9a06      	ldr	r2, [sp, #24]
 800a378:	4252      	negs	r2, r2
 800a37a:	9206      	str	r2, [sp, #24]
 800a37c:	9a05      	ldr	r2, [sp, #20]
 800a37e:	2a00      	cmp	r2, #0
 800a380:	d14d      	bne.n	800a41e <_strtod_l+0x3b2>
 800a382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a384:	4310      	orrs	r0, r2
 800a386:	d000      	beq.n	800a38a <_strtod_l+0x31e>
 800a388:	e6ab      	b.n	800a0e2 <_strtod_l+0x76>
 800a38a:	4662      	mov	r2, ip
 800a38c:	2a00      	cmp	r2, #0
 800a38e:	d000      	beq.n	800a392 <_strtod_l+0x326>
 800a390:	e6c5      	b.n	800a11e <_strtod_l+0xb2>
 800a392:	2b69      	cmp	r3, #105	; 0x69
 800a394:	d027      	beq.n	800a3e6 <_strtod_l+0x37a>
 800a396:	dc23      	bgt.n	800a3e0 <_strtod_l+0x374>
 800a398:	2b49      	cmp	r3, #73	; 0x49
 800a39a:	d024      	beq.n	800a3e6 <_strtod_l+0x37a>
 800a39c:	2b4e      	cmp	r3, #78	; 0x4e
 800a39e:	d000      	beq.n	800a3a2 <_strtod_l+0x336>
 800a3a0:	e6bd      	b.n	800a11e <_strtod_l+0xb2>
 800a3a2:	49a3      	ldr	r1, [pc, #652]	; (800a630 <_strtod_l+0x5c4>)
 800a3a4:	a81b      	add	r0, sp, #108	; 0x6c
 800a3a6:	f003 f809 	bl	800d3bc <__match>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d100      	bne.n	800a3b0 <_strtod_l+0x344>
 800a3ae:	e6b6      	b.n	800a11e <_strtod_l+0xb2>
 800a3b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b28      	cmp	r3, #40	; 0x28
 800a3b6:	d12c      	bne.n	800a412 <_strtod_l+0x3a6>
 800a3b8:	499e      	ldr	r1, [pc, #632]	; (800a634 <_strtod_l+0x5c8>)
 800a3ba:	aa1e      	add	r2, sp, #120	; 0x78
 800a3bc:	a81b      	add	r0, sp, #108	; 0x6c
 800a3be:	f003 f811 	bl	800d3e4 <__hexnan>
 800a3c2:	2805      	cmp	r0, #5
 800a3c4:	d125      	bne.n	800a412 <_strtod_l+0x3a6>
 800a3c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3c8:	4a9b      	ldr	r2, [pc, #620]	; (800a638 <_strtod_l+0x5cc>)
 800a3ca:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a3cc:	431a      	orrs	r2, r3
 800a3ce:	0017      	movs	r7, r2
 800a3d0:	e687      	b.n	800a0e2 <_strtod_l+0x76>
 800a3d2:	220a      	movs	r2, #10
 800a3d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a3d6:	434a      	muls	r2, r1
 800a3d8:	18d2      	adds	r2, r2, r3
 800a3da:	3a30      	subs	r2, #48	; 0x30
 800a3dc:	920e      	str	r2, [sp, #56]	; 0x38
 800a3de:	e7b5      	b.n	800a34c <_strtod_l+0x2e0>
 800a3e0:	2b6e      	cmp	r3, #110	; 0x6e
 800a3e2:	d0de      	beq.n	800a3a2 <_strtod_l+0x336>
 800a3e4:	e69b      	b.n	800a11e <_strtod_l+0xb2>
 800a3e6:	4995      	ldr	r1, [pc, #596]	; (800a63c <_strtod_l+0x5d0>)
 800a3e8:	a81b      	add	r0, sp, #108	; 0x6c
 800a3ea:	f002 ffe7 	bl	800d3bc <__match>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d100      	bne.n	800a3f4 <_strtod_l+0x388>
 800a3f2:	e694      	b.n	800a11e <_strtod_l+0xb2>
 800a3f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3f6:	4992      	ldr	r1, [pc, #584]	; (800a640 <_strtod_l+0x5d4>)
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	a81b      	add	r0, sp, #108	; 0x6c
 800a3fc:	931b      	str	r3, [sp, #108]	; 0x6c
 800a3fe:	f002 ffdd 	bl	800d3bc <__match>
 800a402:	2800      	cmp	r0, #0
 800a404:	d102      	bne.n	800a40c <_strtod_l+0x3a0>
 800a406:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a408:	3301      	adds	r3, #1
 800a40a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a40c:	2600      	movs	r6, #0
 800a40e:	4f8a      	ldr	r7, [pc, #552]	; (800a638 <_strtod_l+0x5cc>)
 800a410:	e667      	b.n	800a0e2 <_strtod_l+0x76>
 800a412:	488c      	ldr	r0, [pc, #560]	; (800a644 <_strtod_l+0x5d8>)
 800a414:	f001 fe40 	bl	800c098 <nan>
 800a418:	0006      	movs	r6, r0
 800a41a:	000f      	movs	r7, r1
 800a41c:	e661      	b.n	800a0e2 <_strtod_l+0x76>
 800a41e:	9b06      	ldr	r3, [sp, #24]
 800a420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a422:	1a9b      	subs	r3, r3, r2
 800a424:	9309      	str	r3, [sp, #36]	; 0x24
 800a426:	9b08      	ldr	r3, [sp, #32]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d101      	bne.n	800a430 <_strtod_l+0x3c4>
 800a42c:	9b05      	ldr	r3, [sp, #20]
 800a42e:	9308      	str	r3, [sp, #32]
 800a430:	9c05      	ldr	r4, [sp, #20]
 800a432:	2c10      	cmp	r4, #16
 800a434:	dd00      	ble.n	800a438 <_strtod_l+0x3cc>
 800a436:	2410      	movs	r4, #16
 800a438:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a43a:	f7f8 fc31 	bl	8002ca0 <__aeabi_ui2d>
 800a43e:	9b05      	ldr	r3, [sp, #20]
 800a440:	0006      	movs	r6, r0
 800a442:	000f      	movs	r7, r1
 800a444:	2b09      	cmp	r3, #9
 800a446:	dd15      	ble.n	800a474 <_strtod_l+0x408>
 800a448:	0022      	movs	r2, r4
 800a44a:	4b7f      	ldr	r3, [pc, #508]	; (800a648 <_strtod_l+0x5dc>)
 800a44c:	3a09      	subs	r2, #9
 800a44e:	00d2      	lsls	r2, r2, #3
 800a450:	189b      	adds	r3, r3, r2
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	f7f7 fd5b 	bl	8001f10 <__aeabi_dmul>
 800a45a:	0006      	movs	r6, r0
 800a45c:	0028      	movs	r0, r5
 800a45e:	000f      	movs	r7, r1
 800a460:	f7f8 fc1e 	bl	8002ca0 <__aeabi_ui2d>
 800a464:	0002      	movs	r2, r0
 800a466:	000b      	movs	r3, r1
 800a468:	0030      	movs	r0, r6
 800a46a:	0039      	movs	r1, r7
 800a46c:	f7f6 fdf6 	bl	800105c <__aeabi_dadd>
 800a470:	0006      	movs	r6, r0
 800a472:	000f      	movs	r7, r1
 800a474:	9b05      	ldr	r3, [sp, #20]
 800a476:	2b0f      	cmp	r3, #15
 800a478:	dc39      	bgt.n	800a4ee <_strtod_l+0x482>
 800a47a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d100      	bne.n	800a482 <_strtod_l+0x416>
 800a480:	e62f      	b.n	800a0e2 <_strtod_l+0x76>
 800a482:	dd24      	ble.n	800a4ce <_strtod_l+0x462>
 800a484:	2b16      	cmp	r3, #22
 800a486:	dc09      	bgt.n	800a49c <_strtod_l+0x430>
 800a488:	496f      	ldr	r1, [pc, #444]	; (800a648 <_strtod_l+0x5dc>)
 800a48a:	00db      	lsls	r3, r3, #3
 800a48c:	18c9      	adds	r1, r1, r3
 800a48e:	0032      	movs	r2, r6
 800a490:	6808      	ldr	r0, [r1, #0]
 800a492:	6849      	ldr	r1, [r1, #4]
 800a494:	003b      	movs	r3, r7
 800a496:	f7f7 fd3b 	bl	8001f10 <__aeabi_dmul>
 800a49a:	e7bd      	b.n	800a418 <_strtod_l+0x3ac>
 800a49c:	2325      	movs	r3, #37	; 0x25
 800a49e:	9a05      	ldr	r2, [sp, #20]
 800a4a0:	1a9b      	subs	r3, r3, r2
 800a4a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	db22      	blt.n	800a4ee <_strtod_l+0x482>
 800a4a8:	240f      	movs	r4, #15
 800a4aa:	9b05      	ldr	r3, [sp, #20]
 800a4ac:	4d66      	ldr	r5, [pc, #408]	; (800a648 <_strtod_l+0x5dc>)
 800a4ae:	1ae4      	subs	r4, r4, r3
 800a4b0:	00e1      	lsls	r1, r4, #3
 800a4b2:	1869      	adds	r1, r5, r1
 800a4b4:	0032      	movs	r2, r6
 800a4b6:	6808      	ldr	r0, [r1, #0]
 800a4b8:	6849      	ldr	r1, [r1, #4]
 800a4ba:	003b      	movs	r3, r7
 800a4bc:	f7f7 fd28 	bl	8001f10 <__aeabi_dmul>
 800a4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c2:	1b1c      	subs	r4, r3, r4
 800a4c4:	00e4      	lsls	r4, r4, #3
 800a4c6:	192d      	adds	r5, r5, r4
 800a4c8:	682a      	ldr	r2, [r5, #0]
 800a4ca:	686b      	ldr	r3, [r5, #4]
 800a4cc:	e7e3      	b.n	800a496 <_strtod_l+0x42a>
 800a4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d0:	3316      	adds	r3, #22
 800a4d2:	db0c      	blt.n	800a4ee <_strtod_l+0x482>
 800a4d4:	9906      	ldr	r1, [sp, #24]
 800a4d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4d8:	4b5b      	ldr	r3, [pc, #364]	; (800a648 <_strtod_l+0x5dc>)
 800a4da:	1a52      	subs	r2, r2, r1
 800a4dc:	00d2      	lsls	r2, r2, #3
 800a4de:	189b      	adds	r3, r3, r2
 800a4e0:	0030      	movs	r0, r6
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	0039      	movs	r1, r7
 800a4e8:	f7f7 f918 	bl	800171c <__aeabi_ddiv>
 800a4ec:	e794      	b.n	800a418 <_strtod_l+0x3ac>
 800a4ee:	9b05      	ldr	r3, [sp, #20]
 800a4f0:	1b1c      	subs	r4, r3, r4
 800a4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f4:	18e4      	adds	r4, r4, r3
 800a4f6:	2c00      	cmp	r4, #0
 800a4f8:	dd72      	ble.n	800a5e0 <_strtod_l+0x574>
 800a4fa:	220f      	movs	r2, #15
 800a4fc:	0023      	movs	r3, r4
 800a4fe:	4013      	ands	r3, r2
 800a500:	4214      	tst	r4, r2
 800a502:	d00a      	beq.n	800a51a <_strtod_l+0x4ae>
 800a504:	4950      	ldr	r1, [pc, #320]	; (800a648 <_strtod_l+0x5dc>)
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	18c9      	adds	r1, r1, r3
 800a50a:	0032      	movs	r2, r6
 800a50c:	6808      	ldr	r0, [r1, #0]
 800a50e:	6849      	ldr	r1, [r1, #4]
 800a510:	003b      	movs	r3, r7
 800a512:	f7f7 fcfd 	bl	8001f10 <__aeabi_dmul>
 800a516:	0006      	movs	r6, r0
 800a518:	000f      	movs	r7, r1
 800a51a:	230f      	movs	r3, #15
 800a51c:	439c      	bics	r4, r3
 800a51e:	d04a      	beq.n	800a5b6 <_strtod_l+0x54a>
 800a520:	3326      	adds	r3, #38	; 0x26
 800a522:	33ff      	adds	r3, #255	; 0xff
 800a524:	429c      	cmp	r4, r3
 800a526:	dd22      	ble.n	800a56e <_strtod_l+0x502>
 800a528:	2300      	movs	r3, #0
 800a52a:	9305      	str	r3, [sp, #20]
 800a52c:	9306      	str	r3, [sp, #24]
 800a52e:	930d      	str	r3, [sp, #52]	; 0x34
 800a530:	9308      	str	r3, [sp, #32]
 800a532:	2322      	movs	r3, #34	; 0x22
 800a534:	2600      	movs	r6, #0
 800a536:	9a04      	ldr	r2, [sp, #16]
 800a538:	4f3f      	ldr	r7, [pc, #252]	; (800a638 <_strtod_l+0x5cc>)
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a53e:	42b3      	cmp	r3, r6
 800a540:	d100      	bne.n	800a544 <_strtod_l+0x4d8>
 800a542:	e5ce      	b.n	800a0e2 <_strtod_l+0x76>
 800a544:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a546:	9804      	ldr	r0, [sp, #16]
 800a548:	f003 f908 	bl	800d75c <_Bfree>
 800a54c:	9908      	ldr	r1, [sp, #32]
 800a54e:	9804      	ldr	r0, [sp, #16]
 800a550:	f003 f904 	bl	800d75c <_Bfree>
 800a554:	9906      	ldr	r1, [sp, #24]
 800a556:	9804      	ldr	r0, [sp, #16]
 800a558:	f003 f900 	bl	800d75c <_Bfree>
 800a55c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a55e:	9804      	ldr	r0, [sp, #16]
 800a560:	f003 f8fc 	bl	800d75c <_Bfree>
 800a564:	9905      	ldr	r1, [sp, #20]
 800a566:	9804      	ldr	r0, [sp, #16]
 800a568:	f003 f8f8 	bl	800d75c <_Bfree>
 800a56c:	e5b9      	b.n	800a0e2 <_strtod_l+0x76>
 800a56e:	2300      	movs	r3, #0
 800a570:	0030      	movs	r0, r6
 800a572:	0039      	movs	r1, r7
 800a574:	4d35      	ldr	r5, [pc, #212]	; (800a64c <_strtod_l+0x5e0>)
 800a576:	1124      	asrs	r4, r4, #4
 800a578:	9307      	str	r3, [sp, #28]
 800a57a:	2c01      	cmp	r4, #1
 800a57c:	dc1e      	bgt.n	800a5bc <_strtod_l+0x550>
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <_strtod_l+0x51a>
 800a582:	0006      	movs	r6, r0
 800a584:	000f      	movs	r7, r1
 800a586:	4b32      	ldr	r3, [pc, #200]	; (800a650 <_strtod_l+0x5e4>)
 800a588:	9a07      	ldr	r2, [sp, #28]
 800a58a:	18ff      	adds	r7, r7, r3
 800a58c:	4b2f      	ldr	r3, [pc, #188]	; (800a64c <_strtod_l+0x5e0>)
 800a58e:	00d2      	lsls	r2, r2, #3
 800a590:	189d      	adds	r5, r3, r2
 800a592:	6828      	ldr	r0, [r5, #0]
 800a594:	6869      	ldr	r1, [r5, #4]
 800a596:	0032      	movs	r2, r6
 800a598:	003b      	movs	r3, r7
 800a59a:	f7f7 fcb9 	bl	8001f10 <__aeabi_dmul>
 800a59e:	4b26      	ldr	r3, [pc, #152]	; (800a638 <_strtod_l+0x5cc>)
 800a5a0:	4a2c      	ldr	r2, [pc, #176]	; (800a654 <_strtod_l+0x5e8>)
 800a5a2:	0006      	movs	r6, r0
 800a5a4:	400b      	ands	r3, r1
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d8be      	bhi.n	800a528 <_strtod_l+0x4bc>
 800a5aa:	4a2b      	ldr	r2, [pc, #172]	; (800a658 <_strtod_l+0x5ec>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d913      	bls.n	800a5d8 <_strtod_l+0x56c>
 800a5b0:	2601      	movs	r6, #1
 800a5b2:	4f2a      	ldr	r7, [pc, #168]	; (800a65c <_strtod_l+0x5f0>)
 800a5b4:	4276      	negs	r6, r6
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	9307      	str	r3, [sp, #28]
 800a5ba:	e088      	b.n	800a6ce <_strtod_l+0x662>
 800a5bc:	2201      	movs	r2, #1
 800a5be:	4214      	tst	r4, r2
 800a5c0:	d004      	beq.n	800a5cc <_strtod_l+0x560>
 800a5c2:	682a      	ldr	r2, [r5, #0]
 800a5c4:	686b      	ldr	r3, [r5, #4]
 800a5c6:	f7f7 fca3 	bl	8001f10 <__aeabi_dmul>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	9a07      	ldr	r2, [sp, #28]
 800a5ce:	1064      	asrs	r4, r4, #1
 800a5d0:	3201      	adds	r2, #1
 800a5d2:	9207      	str	r2, [sp, #28]
 800a5d4:	3508      	adds	r5, #8
 800a5d6:	e7d0      	b.n	800a57a <_strtod_l+0x50e>
 800a5d8:	23d4      	movs	r3, #212	; 0xd4
 800a5da:	049b      	lsls	r3, r3, #18
 800a5dc:	18cf      	adds	r7, r1, r3
 800a5de:	e7ea      	b.n	800a5b6 <_strtod_l+0x54a>
 800a5e0:	2c00      	cmp	r4, #0
 800a5e2:	d0e8      	beq.n	800a5b6 <_strtod_l+0x54a>
 800a5e4:	4264      	negs	r4, r4
 800a5e6:	230f      	movs	r3, #15
 800a5e8:	0022      	movs	r2, r4
 800a5ea:	401a      	ands	r2, r3
 800a5ec:	421c      	tst	r4, r3
 800a5ee:	d00a      	beq.n	800a606 <_strtod_l+0x59a>
 800a5f0:	4b15      	ldr	r3, [pc, #84]	; (800a648 <_strtod_l+0x5dc>)
 800a5f2:	00d2      	lsls	r2, r2, #3
 800a5f4:	189b      	adds	r3, r3, r2
 800a5f6:	0030      	movs	r0, r6
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	0039      	movs	r1, r7
 800a5fe:	f7f7 f88d 	bl	800171c <__aeabi_ddiv>
 800a602:	0006      	movs	r6, r0
 800a604:	000f      	movs	r7, r1
 800a606:	1124      	asrs	r4, r4, #4
 800a608:	d0d5      	beq.n	800a5b6 <_strtod_l+0x54a>
 800a60a:	2c1f      	cmp	r4, #31
 800a60c:	dd28      	ble.n	800a660 <_strtod_l+0x5f4>
 800a60e:	2300      	movs	r3, #0
 800a610:	9305      	str	r3, [sp, #20]
 800a612:	9306      	str	r3, [sp, #24]
 800a614:	930d      	str	r3, [sp, #52]	; 0x34
 800a616:	9308      	str	r3, [sp, #32]
 800a618:	2322      	movs	r3, #34	; 0x22
 800a61a:	9a04      	ldr	r2, [sp, #16]
 800a61c:	2600      	movs	r6, #0
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a622:	2700      	movs	r7, #0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d18d      	bne.n	800a544 <_strtod_l+0x4d8>
 800a628:	e55b      	b.n	800a0e2 <_strtod_l+0x76>
 800a62a:	46c0      	nop			; (mov r8, r8)
 800a62c:	00004e1f 	.word	0x00004e1f
 800a630:	0800edb6 	.word	0x0800edb6
 800a634:	0800ec68 	.word	0x0800ec68
 800a638:	7ff00000 	.word	0x7ff00000
 800a63c:	0800edae 	.word	0x0800edae
 800a640:	0800eded 	.word	0x0800eded
 800a644:	0800f078 	.word	0x0800f078
 800a648:	0800ef58 	.word	0x0800ef58
 800a64c:	0800ef30 	.word	0x0800ef30
 800a650:	fcb00000 	.word	0xfcb00000
 800a654:	7ca00000 	.word	0x7ca00000
 800a658:	7c900000 	.word	0x7c900000
 800a65c:	7fefffff 	.word	0x7fefffff
 800a660:	2310      	movs	r3, #16
 800a662:	0022      	movs	r2, r4
 800a664:	401a      	ands	r2, r3
 800a666:	9207      	str	r2, [sp, #28]
 800a668:	421c      	tst	r4, r3
 800a66a:	d001      	beq.n	800a670 <_strtod_l+0x604>
 800a66c:	335a      	adds	r3, #90	; 0x5a
 800a66e:	9307      	str	r3, [sp, #28]
 800a670:	0030      	movs	r0, r6
 800a672:	0039      	movs	r1, r7
 800a674:	2300      	movs	r3, #0
 800a676:	4dc4      	ldr	r5, [pc, #784]	; (800a988 <_strtod_l+0x91c>)
 800a678:	2201      	movs	r2, #1
 800a67a:	4214      	tst	r4, r2
 800a67c:	d004      	beq.n	800a688 <_strtod_l+0x61c>
 800a67e:	682a      	ldr	r2, [r5, #0]
 800a680:	686b      	ldr	r3, [r5, #4]
 800a682:	f7f7 fc45 	bl	8001f10 <__aeabi_dmul>
 800a686:	2301      	movs	r3, #1
 800a688:	1064      	asrs	r4, r4, #1
 800a68a:	3508      	adds	r5, #8
 800a68c:	2c00      	cmp	r4, #0
 800a68e:	d1f3      	bne.n	800a678 <_strtod_l+0x60c>
 800a690:	2b00      	cmp	r3, #0
 800a692:	d001      	beq.n	800a698 <_strtod_l+0x62c>
 800a694:	0006      	movs	r6, r0
 800a696:	000f      	movs	r7, r1
 800a698:	9b07      	ldr	r3, [sp, #28]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00f      	beq.n	800a6be <_strtod_l+0x652>
 800a69e:	236b      	movs	r3, #107	; 0x6b
 800a6a0:	007a      	lsls	r2, r7, #1
 800a6a2:	0d52      	lsrs	r2, r2, #21
 800a6a4:	0039      	movs	r1, r7
 800a6a6:	1a9b      	subs	r3, r3, r2
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	dd08      	ble.n	800a6be <_strtod_l+0x652>
 800a6ac:	2b1f      	cmp	r3, #31
 800a6ae:	dc00      	bgt.n	800a6b2 <_strtod_l+0x646>
 800a6b0:	e121      	b.n	800a8f6 <_strtod_l+0x88a>
 800a6b2:	2600      	movs	r6, #0
 800a6b4:	2b34      	cmp	r3, #52	; 0x34
 800a6b6:	dc00      	bgt.n	800a6ba <_strtod_l+0x64e>
 800a6b8:	e116      	b.n	800a8e8 <_strtod_l+0x87c>
 800a6ba:	27dc      	movs	r7, #220	; 0xdc
 800a6bc:	04bf      	lsls	r7, r7, #18
 800a6be:	2200      	movs	r2, #0
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	0030      	movs	r0, r6
 800a6c4:	0039      	movs	r1, r7
 800a6c6:	f7f5 fec1 	bl	800044c <__aeabi_dcmpeq>
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	d19f      	bne.n	800a60e <_strtod_l+0x5a2>
 800a6ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6d0:	9a08      	ldr	r2, [sp, #32]
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a6d6:	9b05      	ldr	r3, [sp, #20]
 800a6d8:	9804      	ldr	r0, [sp, #16]
 800a6da:	f003 f8a7 	bl	800d82c <__s2b>
 800a6de:	900d      	str	r0, [sp, #52]	; 0x34
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d100      	bne.n	800a6e6 <_strtod_l+0x67a>
 800a6e4:	e720      	b.n	800a528 <_strtod_l+0x4bc>
 800a6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e8:	9906      	ldr	r1, [sp, #24]
 800a6ea:	17da      	asrs	r2, r3, #31
 800a6ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6ee:	1a5b      	subs	r3, r3, r1
 800a6f0:	401a      	ands	r2, r3
 800a6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f4:	9215      	str	r2, [sp, #84]	; 0x54
 800a6f6:	43db      	mvns	r3, r3
 800a6f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6fa:	17db      	asrs	r3, r3, #31
 800a6fc:	401a      	ands	r2, r3
 800a6fe:	2300      	movs	r3, #0
 800a700:	9218      	str	r2, [sp, #96]	; 0x60
 800a702:	9305      	str	r3, [sp, #20]
 800a704:	9306      	str	r3, [sp, #24]
 800a706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a708:	9804      	ldr	r0, [sp, #16]
 800a70a:	6859      	ldr	r1, [r3, #4]
 800a70c:	f002 ffe2 	bl	800d6d4 <_Balloc>
 800a710:	9008      	str	r0, [sp, #32]
 800a712:	2800      	cmp	r0, #0
 800a714:	d100      	bne.n	800a718 <_strtod_l+0x6ac>
 800a716:	e70c      	b.n	800a532 <_strtod_l+0x4c6>
 800a718:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a71a:	300c      	adds	r0, #12
 800a71c:	0019      	movs	r1, r3
 800a71e:	691a      	ldr	r2, [r3, #16]
 800a720:	310c      	adds	r1, #12
 800a722:	3202      	adds	r2, #2
 800a724:	0092      	lsls	r2, r2, #2
 800a726:	f001 fcad 	bl	800c084 <memcpy>
 800a72a:	ab1e      	add	r3, sp, #120	; 0x78
 800a72c:	9301      	str	r3, [sp, #4]
 800a72e:	ab1d      	add	r3, sp, #116	; 0x74
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	0032      	movs	r2, r6
 800a734:	003b      	movs	r3, r7
 800a736:	9804      	ldr	r0, [sp, #16]
 800a738:	9610      	str	r6, [sp, #64]	; 0x40
 800a73a:	9711      	str	r7, [sp, #68]	; 0x44
 800a73c:	f003 fbb8 	bl	800deb0 <__d2b>
 800a740:	901c      	str	r0, [sp, #112]	; 0x70
 800a742:	2800      	cmp	r0, #0
 800a744:	d100      	bne.n	800a748 <_strtod_l+0x6dc>
 800a746:	e6f4      	b.n	800a532 <_strtod_l+0x4c6>
 800a748:	2101      	movs	r1, #1
 800a74a:	9804      	ldr	r0, [sp, #16]
 800a74c:	f003 f902 	bl	800d954 <__i2b>
 800a750:	9006      	str	r0, [sp, #24]
 800a752:	2800      	cmp	r0, #0
 800a754:	d100      	bne.n	800a758 <_strtod_l+0x6ec>
 800a756:	e6ec      	b.n	800a532 <_strtod_l+0x4c6>
 800a758:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a75a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a75c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a75e:	1ad4      	subs	r4, r2, r3
 800a760:	2b00      	cmp	r3, #0
 800a762:	db01      	blt.n	800a768 <_strtod_l+0x6fc>
 800a764:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a766:	195d      	adds	r5, r3, r5
 800a768:	9907      	ldr	r1, [sp, #28]
 800a76a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a76c:	1a5b      	subs	r3, r3, r1
 800a76e:	2136      	movs	r1, #54	; 0x36
 800a770:	189b      	adds	r3, r3, r2
 800a772:	1a8a      	subs	r2, r1, r2
 800a774:	4985      	ldr	r1, [pc, #532]	; (800a98c <_strtod_l+0x920>)
 800a776:	2001      	movs	r0, #1
 800a778:	468c      	mov	ip, r1
 800a77a:	2100      	movs	r1, #0
 800a77c:	3b01      	subs	r3, #1
 800a77e:	9114      	str	r1, [sp, #80]	; 0x50
 800a780:	9012      	str	r0, [sp, #72]	; 0x48
 800a782:	4563      	cmp	r3, ip
 800a784:	da07      	bge.n	800a796 <_strtod_l+0x72a>
 800a786:	4661      	mov	r1, ip
 800a788:	1ac9      	subs	r1, r1, r3
 800a78a:	1a52      	subs	r2, r2, r1
 800a78c:	291f      	cmp	r1, #31
 800a78e:	dd00      	ble.n	800a792 <_strtod_l+0x726>
 800a790:	e0b6      	b.n	800a900 <_strtod_l+0x894>
 800a792:	4088      	lsls	r0, r1
 800a794:	9012      	str	r0, [sp, #72]	; 0x48
 800a796:	18ab      	adds	r3, r5, r2
 800a798:	930c      	str	r3, [sp, #48]	; 0x30
 800a79a:	18a4      	adds	r4, r4, r2
 800a79c:	9b07      	ldr	r3, [sp, #28]
 800a79e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7a0:	191c      	adds	r4, r3, r4
 800a7a2:	002b      	movs	r3, r5
 800a7a4:	4295      	cmp	r5, r2
 800a7a6:	dd00      	ble.n	800a7aa <_strtod_l+0x73e>
 800a7a8:	0013      	movs	r3, r2
 800a7aa:	42a3      	cmp	r3, r4
 800a7ac:	dd00      	ble.n	800a7b0 <_strtod_l+0x744>
 800a7ae:	0023      	movs	r3, r4
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	dd04      	ble.n	800a7be <_strtod_l+0x752>
 800a7b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7b6:	1ae4      	subs	r4, r4, r3
 800a7b8:	1ad2      	subs	r2, r2, r3
 800a7ba:	920c      	str	r2, [sp, #48]	; 0x30
 800a7bc:	1aed      	subs	r5, r5, r3
 800a7be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	dd17      	ble.n	800a7f4 <_strtod_l+0x788>
 800a7c4:	001a      	movs	r2, r3
 800a7c6:	9906      	ldr	r1, [sp, #24]
 800a7c8:	9804      	ldr	r0, [sp, #16]
 800a7ca:	f003 f98b 	bl	800dae4 <__pow5mult>
 800a7ce:	9006      	str	r0, [sp, #24]
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d100      	bne.n	800a7d6 <_strtod_l+0x76a>
 800a7d4:	e6ad      	b.n	800a532 <_strtod_l+0x4c6>
 800a7d6:	0001      	movs	r1, r0
 800a7d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a7da:	9804      	ldr	r0, [sp, #16]
 800a7dc:	f003 f8d2 	bl	800d984 <__multiply>
 800a7e0:	900e      	str	r0, [sp, #56]	; 0x38
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d100      	bne.n	800a7e8 <_strtod_l+0x77c>
 800a7e6:	e6a4      	b.n	800a532 <_strtod_l+0x4c6>
 800a7e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a7ea:	9804      	ldr	r0, [sp, #16]
 800a7ec:	f002 ffb6 	bl	800d75c <_Bfree>
 800a7f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7f2:	931c      	str	r3, [sp, #112]	; 0x70
 800a7f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	dd00      	ble.n	800a7fc <_strtod_l+0x790>
 800a7fa:	e087      	b.n	800a90c <_strtod_l+0x8a0>
 800a7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	dd08      	ble.n	800a814 <_strtod_l+0x7a8>
 800a802:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a804:	9908      	ldr	r1, [sp, #32]
 800a806:	9804      	ldr	r0, [sp, #16]
 800a808:	f003 f96c 	bl	800dae4 <__pow5mult>
 800a80c:	9008      	str	r0, [sp, #32]
 800a80e:	2800      	cmp	r0, #0
 800a810:	d100      	bne.n	800a814 <_strtod_l+0x7a8>
 800a812:	e68e      	b.n	800a532 <_strtod_l+0x4c6>
 800a814:	2c00      	cmp	r4, #0
 800a816:	dd08      	ble.n	800a82a <_strtod_l+0x7be>
 800a818:	0022      	movs	r2, r4
 800a81a:	9908      	ldr	r1, [sp, #32]
 800a81c:	9804      	ldr	r0, [sp, #16]
 800a81e:	f003 f9bd 	bl	800db9c <__lshift>
 800a822:	9008      	str	r0, [sp, #32]
 800a824:	2800      	cmp	r0, #0
 800a826:	d100      	bne.n	800a82a <_strtod_l+0x7be>
 800a828:	e683      	b.n	800a532 <_strtod_l+0x4c6>
 800a82a:	2d00      	cmp	r5, #0
 800a82c:	dd08      	ble.n	800a840 <_strtod_l+0x7d4>
 800a82e:	002a      	movs	r2, r5
 800a830:	9906      	ldr	r1, [sp, #24]
 800a832:	9804      	ldr	r0, [sp, #16]
 800a834:	f003 f9b2 	bl	800db9c <__lshift>
 800a838:	9006      	str	r0, [sp, #24]
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d100      	bne.n	800a840 <_strtod_l+0x7d4>
 800a83e:	e678      	b.n	800a532 <_strtod_l+0x4c6>
 800a840:	9a08      	ldr	r2, [sp, #32]
 800a842:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a844:	9804      	ldr	r0, [sp, #16]
 800a846:	f003 fa33 	bl	800dcb0 <__mdiff>
 800a84a:	9005      	str	r0, [sp, #20]
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d100      	bne.n	800a852 <_strtod_l+0x7e6>
 800a850:	e66f      	b.n	800a532 <_strtod_l+0x4c6>
 800a852:	2200      	movs	r2, #0
 800a854:	68c3      	ldr	r3, [r0, #12]
 800a856:	9906      	ldr	r1, [sp, #24]
 800a858:	60c2      	str	r2, [r0, #12]
 800a85a:	930c      	str	r3, [sp, #48]	; 0x30
 800a85c:	f003 fa0c 	bl	800dc78 <__mcmp>
 800a860:	2800      	cmp	r0, #0
 800a862:	da5d      	bge.n	800a920 <_strtod_l+0x8b4>
 800a864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a866:	4333      	orrs	r3, r6
 800a868:	d000      	beq.n	800a86c <_strtod_l+0x800>
 800a86a:	e088      	b.n	800a97e <_strtod_l+0x912>
 800a86c:	033b      	lsls	r3, r7, #12
 800a86e:	d000      	beq.n	800a872 <_strtod_l+0x806>
 800a870:	e085      	b.n	800a97e <_strtod_l+0x912>
 800a872:	22d6      	movs	r2, #214	; 0xd6
 800a874:	4b46      	ldr	r3, [pc, #280]	; (800a990 <_strtod_l+0x924>)
 800a876:	04d2      	lsls	r2, r2, #19
 800a878:	403b      	ands	r3, r7
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d97f      	bls.n	800a97e <_strtod_l+0x912>
 800a87e:	9b05      	ldr	r3, [sp, #20]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d103      	bne.n	800a88e <_strtod_l+0x822>
 800a886:	9b05      	ldr	r3, [sp, #20]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	dd77      	ble.n	800a97e <_strtod_l+0x912>
 800a88e:	9905      	ldr	r1, [sp, #20]
 800a890:	2201      	movs	r2, #1
 800a892:	9804      	ldr	r0, [sp, #16]
 800a894:	f003 f982 	bl	800db9c <__lshift>
 800a898:	9906      	ldr	r1, [sp, #24]
 800a89a:	9005      	str	r0, [sp, #20]
 800a89c:	f003 f9ec 	bl	800dc78 <__mcmp>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	dd6c      	ble.n	800a97e <_strtod_l+0x912>
 800a8a4:	9907      	ldr	r1, [sp, #28]
 800a8a6:	003b      	movs	r3, r7
 800a8a8:	4a39      	ldr	r2, [pc, #228]	; (800a990 <_strtod_l+0x924>)
 800a8aa:	2900      	cmp	r1, #0
 800a8ac:	d100      	bne.n	800a8b0 <_strtod_l+0x844>
 800a8ae:	e094      	b.n	800a9da <_strtod_l+0x96e>
 800a8b0:	0011      	movs	r1, r2
 800a8b2:	20d6      	movs	r0, #214	; 0xd6
 800a8b4:	4039      	ands	r1, r7
 800a8b6:	04c0      	lsls	r0, r0, #19
 800a8b8:	4281      	cmp	r1, r0
 800a8ba:	dd00      	ble.n	800a8be <_strtod_l+0x852>
 800a8bc:	e08d      	b.n	800a9da <_strtod_l+0x96e>
 800a8be:	23dc      	movs	r3, #220	; 0xdc
 800a8c0:	049b      	lsls	r3, r3, #18
 800a8c2:	4299      	cmp	r1, r3
 800a8c4:	dc00      	bgt.n	800a8c8 <_strtod_l+0x85c>
 800a8c6:	e6a7      	b.n	800a618 <_strtod_l+0x5ac>
 800a8c8:	0030      	movs	r0, r6
 800a8ca:	0039      	movs	r1, r7
 800a8cc:	4b31      	ldr	r3, [pc, #196]	; (800a994 <_strtod_l+0x928>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f7f7 fb1e 	bl	8001f10 <__aeabi_dmul>
 800a8d4:	4b2e      	ldr	r3, [pc, #184]	; (800a990 <_strtod_l+0x924>)
 800a8d6:	0006      	movs	r6, r0
 800a8d8:	000f      	movs	r7, r1
 800a8da:	420b      	tst	r3, r1
 800a8dc:	d000      	beq.n	800a8e0 <_strtod_l+0x874>
 800a8de:	e631      	b.n	800a544 <_strtod_l+0x4d8>
 800a8e0:	2322      	movs	r3, #34	; 0x22
 800a8e2:	9a04      	ldr	r2, [sp, #16]
 800a8e4:	6013      	str	r3, [r2, #0]
 800a8e6:	e62d      	b.n	800a544 <_strtod_l+0x4d8>
 800a8e8:	234b      	movs	r3, #75	; 0x4b
 800a8ea:	1a9a      	subs	r2, r3, r2
 800a8ec:	3b4c      	subs	r3, #76	; 0x4c
 800a8ee:	4093      	lsls	r3, r2
 800a8f0:	4019      	ands	r1, r3
 800a8f2:	000f      	movs	r7, r1
 800a8f4:	e6e3      	b.n	800a6be <_strtod_l+0x652>
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	4252      	negs	r2, r2
 800a8fa:	409a      	lsls	r2, r3
 800a8fc:	4016      	ands	r6, r2
 800a8fe:	e6de      	b.n	800a6be <_strtod_l+0x652>
 800a900:	4925      	ldr	r1, [pc, #148]	; (800a998 <_strtod_l+0x92c>)
 800a902:	1acb      	subs	r3, r1, r3
 800a904:	0001      	movs	r1, r0
 800a906:	4099      	lsls	r1, r3
 800a908:	9114      	str	r1, [sp, #80]	; 0x50
 800a90a:	e743      	b.n	800a794 <_strtod_l+0x728>
 800a90c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a90e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a910:	9804      	ldr	r0, [sp, #16]
 800a912:	f003 f943 	bl	800db9c <__lshift>
 800a916:	901c      	str	r0, [sp, #112]	; 0x70
 800a918:	2800      	cmp	r0, #0
 800a91a:	d000      	beq.n	800a91e <_strtod_l+0x8b2>
 800a91c:	e76e      	b.n	800a7fc <_strtod_l+0x790>
 800a91e:	e608      	b.n	800a532 <_strtod_l+0x4c6>
 800a920:	970e      	str	r7, [sp, #56]	; 0x38
 800a922:	2800      	cmp	r0, #0
 800a924:	d177      	bne.n	800aa16 <_strtod_l+0x9aa>
 800a926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a928:	033b      	lsls	r3, r7, #12
 800a92a:	0b1b      	lsrs	r3, r3, #12
 800a92c:	2a00      	cmp	r2, #0
 800a92e:	d039      	beq.n	800a9a4 <_strtod_l+0x938>
 800a930:	4a1a      	ldr	r2, [pc, #104]	; (800a99c <_strtod_l+0x930>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d139      	bne.n	800a9aa <_strtod_l+0x93e>
 800a936:	2101      	movs	r1, #1
 800a938:	9b07      	ldr	r3, [sp, #28]
 800a93a:	4249      	negs	r1, r1
 800a93c:	0032      	movs	r2, r6
 800a93e:	0008      	movs	r0, r1
 800a940:	2b00      	cmp	r3, #0
 800a942:	d00b      	beq.n	800a95c <_strtod_l+0x8f0>
 800a944:	24d4      	movs	r4, #212	; 0xd4
 800a946:	4b12      	ldr	r3, [pc, #72]	; (800a990 <_strtod_l+0x924>)
 800a948:	0008      	movs	r0, r1
 800a94a:	403b      	ands	r3, r7
 800a94c:	04e4      	lsls	r4, r4, #19
 800a94e:	42a3      	cmp	r3, r4
 800a950:	d804      	bhi.n	800a95c <_strtod_l+0x8f0>
 800a952:	306c      	adds	r0, #108	; 0x6c
 800a954:	0d1b      	lsrs	r3, r3, #20
 800a956:	1ac3      	subs	r3, r0, r3
 800a958:	4099      	lsls	r1, r3
 800a95a:	0008      	movs	r0, r1
 800a95c:	4282      	cmp	r2, r0
 800a95e:	d124      	bne.n	800a9aa <_strtod_l+0x93e>
 800a960:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <_strtod_l+0x934>)
 800a962:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a964:	4299      	cmp	r1, r3
 800a966:	d102      	bne.n	800a96e <_strtod_l+0x902>
 800a968:	3201      	adds	r2, #1
 800a96a:	d100      	bne.n	800a96e <_strtod_l+0x902>
 800a96c:	e5e1      	b.n	800a532 <_strtod_l+0x4c6>
 800a96e:	4b08      	ldr	r3, [pc, #32]	; (800a990 <_strtod_l+0x924>)
 800a970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a972:	2600      	movs	r6, #0
 800a974:	401a      	ands	r2, r3
 800a976:	0013      	movs	r3, r2
 800a978:	2280      	movs	r2, #128	; 0x80
 800a97a:	0352      	lsls	r2, r2, #13
 800a97c:	189f      	adds	r7, r3, r2
 800a97e:	9b07      	ldr	r3, [sp, #28]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1a1      	bne.n	800a8c8 <_strtod_l+0x85c>
 800a984:	e5de      	b.n	800a544 <_strtod_l+0x4d8>
 800a986:	46c0      	nop			; (mov r8, r8)
 800a988:	0800ec80 	.word	0x0800ec80
 800a98c:	fffffc02 	.word	0xfffffc02
 800a990:	7ff00000 	.word	0x7ff00000
 800a994:	39500000 	.word	0x39500000
 800a998:	fffffbe2 	.word	0xfffffbe2
 800a99c:	000fffff 	.word	0x000fffff
 800a9a0:	7fefffff 	.word	0x7fefffff
 800a9a4:	4333      	orrs	r3, r6
 800a9a6:	d100      	bne.n	800a9aa <_strtod_l+0x93e>
 800a9a8:	e77c      	b.n	800a8a4 <_strtod_l+0x838>
 800a9aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d01d      	beq.n	800a9ec <_strtod_l+0x980>
 800a9b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a9b4:	4213      	tst	r3, r2
 800a9b6:	d0e2      	beq.n	800a97e <_strtod_l+0x912>
 800a9b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9ba:	0030      	movs	r0, r6
 800a9bc:	0039      	movs	r1, r7
 800a9be:	9a07      	ldr	r2, [sp, #28]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d017      	beq.n	800a9f4 <_strtod_l+0x988>
 800a9c4:	f7ff fb3a 	bl	800a03c <sulp>
 800a9c8:	0002      	movs	r2, r0
 800a9ca:	000b      	movs	r3, r1
 800a9cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a9ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a9d0:	f7f6 fb44 	bl	800105c <__aeabi_dadd>
 800a9d4:	0006      	movs	r6, r0
 800a9d6:	000f      	movs	r7, r1
 800a9d8:	e7d1      	b.n	800a97e <_strtod_l+0x912>
 800a9da:	2601      	movs	r6, #1
 800a9dc:	4013      	ands	r3, r2
 800a9de:	4a98      	ldr	r2, [pc, #608]	; (800ac40 <_strtod_l+0xbd4>)
 800a9e0:	4276      	negs	r6, r6
 800a9e2:	189b      	adds	r3, r3, r2
 800a9e4:	4a97      	ldr	r2, [pc, #604]	; (800ac44 <_strtod_l+0xbd8>)
 800a9e6:	431a      	orrs	r2, r3
 800a9e8:	0017      	movs	r7, r2
 800a9ea:	e7c8      	b.n	800a97e <_strtod_l+0x912>
 800a9ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9ee:	4233      	tst	r3, r6
 800a9f0:	d0c5      	beq.n	800a97e <_strtod_l+0x912>
 800a9f2:	e7e1      	b.n	800a9b8 <_strtod_l+0x94c>
 800a9f4:	f7ff fb22 	bl	800a03c <sulp>
 800a9f8:	0002      	movs	r2, r0
 800a9fa:	000b      	movs	r3, r1
 800a9fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a9fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aa00:	f7f7 fd48 	bl	8002494 <__aeabi_dsub>
 800aa04:	2200      	movs	r2, #0
 800aa06:	2300      	movs	r3, #0
 800aa08:	0006      	movs	r6, r0
 800aa0a:	000f      	movs	r7, r1
 800aa0c:	f7f5 fd1e 	bl	800044c <__aeabi_dcmpeq>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d0b4      	beq.n	800a97e <_strtod_l+0x912>
 800aa14:	e600      	b.n	800a618 <_strtod_l+0x5ac>
 800aa16:	9906      	ldr	r1, [sp, #24]
 800aa18:	9805      	ldr	r0, [sp, #20]
 800aa1a:	f003 faa9 	bl	800df70 <__ratio>
 800aa1e:	2380      	movs	r3, #128	; 0x80
 800aa20:	2200      	movs	r2, #0
 800aa22:	05db      	lsls	r3, r3, #23
 800aa24:	0004      	movs	r4, r0
 800aa26:	000d      	movs	r5, r1
 800aa28:	f7f5 fd20 	bl	800046c <__aeabi_dcmple>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d06d      	beq.n	800ab0c <_strtod_l+0xaa0>
 800aa30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d000      	beq.n	800aa38 <_strtod_l+0x9cc>
 800aa36:	e07e      	b.n	800ab36 <_strtod_l+0xaca>
 800aa38:	2e00      	cmp	r6, #0
 800aa3a:	d158      	bne.n	800aaee <_strtod_l+0xa82>
 800aa3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa3e:	031b      	lsls	r3, r3, #12
 800aa40:	d000      	beq.n	800aa44 <_strtod_l+0x9d8>
 800aa42:	e07f      	b.n	800ab44 <_strtod_l+0xad8>
 800aa44:	2200      	movs	r2, #0
 800aa46:	0020      	movs	r0, r4
 800aa48:	0029      	movs	r1, r5
 800aa4a:	4b7f      	ldr	r3, [pc, #508]	; (800ac48 <_strtod_l+0xbdc>)
 800aa4c:	f7f5 fd04 	bl	8000458 <__aeabi_dcmplt>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d158      	bne.n	800ab06 <_strtod_l+0xa9a>
 800aa54:	0020      	movs	r0, r4
 800aa56:	0029      	movs	r1, r5
 800aa58:	2200      	movs	r2, #0
 800aa5a:	4b7c      	ldr	r3, [pc, #496]	; (800ac4c <_strtod_l+0xbe0>)
 800aa5c:	f7f7 fa58 	bl	8001f10 <__aeabi_dmul>
 800aa60:	0004      	movs	r4, r0
 800aa62:	000d      	movs	r5, r1
 800aa64:	2380      	movs	r3, #128	; 0x80
 800aa66:	061b      	lsls	r3, r3, #24
 800aa68:	940a      	str	r4, [sp, #40]	; 0x28
 800aa6a:	18eb      	adds	r3, r5, r3
 800aa6c:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa72:	9212      	str	r2, [sp, #72]	; 0x48
 800aa74:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa76:	4a76      	ldr	r2, [pc, #472]	; (800ac50 <_strtod_l+0xbe4>)
 800aa78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa7a:	4013      	ands	r3, r2
 800aa7c:	9314      	str	r3, [sp, #80]	; 0x50
 800aa7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa80:	4b74      	ldr	r3, [pc, #464]	; (800ac54 <_strtod_l+0xbe8>)
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d000      	beq.n	800aa88 <_strtod_l+0xa1c>
 800aa86:	e091      	b.n	800abac <_strtod_l+0xb40>
 800aa88:	4a73      	ldr	r2, [pc, #460]	; (800ac58 <_strtod_l+0xbec>)
 800aa8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa8c:	4694      	mov	ip, r2
 800aa8e:	4463      	add	r3, ip
 800aa90:	001f      	movs	r7, r3
 800aa92:	0030      	movs	r0, r6
 800aa94:	0019      	movs	r1, r3
 800aa96:	f003 f9a3 	bl	800dde0 <__ulp>
 800aa9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa9e:	f7f7 fa37 	bl	8001f10 <__aeabi_dmul>
 800aaa2:	0032      	movs	r2, r6
 800aaa4:	003b      	movs	r3, r7
 800aaa6:	f7f6 fad9 	bl	800105c <__aeabi_dadd>
 800aaaa:	4a69      	ldr	r2, [pc, #420]	; (800ac50 <_strtod_l+0xbe4>)
 800aaac:	4b6b      	ldr	r3, [pc, #428]	; (800ac5c <_strtod_l+0xbf0>)
 800aaae:	0006      	movs	r6, r0
 800aab0:	400a      	ands	r2, r1
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d949      	bls.n	800ab4a <_strtod_l+0xade>
 800aab6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aab8:	4b69      	ldr	r3, [pc, #420]	; (800ac60 <_strtod_l+0xbf4>)
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d103      	bne.n	800aac6 <_strtod_l+0xa5a>
 800aabe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aac0:	3301      	adds	r3, #1
 800aac2:	d100      	bne.n	800aac6 <_strtod_l+0xa5a>
 800aac4:	e535      	b.n	800a532 <_strtod_l+0x4c6>
 800aac6:	2601      	movs	r6, #1
 800aac8:	4f65      	ldr	r7, [pc, #404]	; (800ac60 <_strtod_l+0xbf4>)
 800aaca:	4276      	negs	r6, r6
 800aacc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aace:	9804      	ldr	r0, [sp, #16]
 800aad0:	f002 fe44 	bl	800d75c <_Bfree>
 800aad4:	9908      	ldr	r1, [sp, #32]
 800aad6:	9804      	ldr	r0, [sp, #16]
 800aad8:	f002 fe40 	bl	800d75c <_Bfree>
 800aadc:	9906      	ldr	r1, [sp, #24]
 800aade:	9804      	ldr	r0, [sp, #16]
 800aae0:	f002 fe3c 	bl	800d75c <_Bfree>
 800aae4:	9905      	ldr	r1, [sp, #20]
 800aae6:	9804      	ldr	r0, [sp, #16]
 800aae8:	f002 fe38 	bl	800d75c <_Bfree>
 800aaec:	e60b      	b.n	800a706 <_strtod_l+0x69a>
 800aaee:	2e01      	cmp	r6, #1
 800aaf0:	d103      	bne.n	800aafa <_strtod_l+0xa8e>
 800aaf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d100      	bne.n	800aafa <_strtod_l+0xa8e>
 800aaf8:	e58e      	b.n	800a618 <_strtod_l+0x5ac>
 800aafa:	2300      	movs	r3, #0
 800aafc:	4c59      	ldr	r4, [pc, #356]	; (800ac64 <_strtod_l+0xbf8>)
 800aafe:	930a      	str	r3, [sp, #40]	; 0x28
 800ab00:	940b      	str	r4, [sp, #44]	; 0x2c
 800ab02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ab04:	e01c      	b.n	800ab40 <_strtod_l+0xad4>
 800ab06:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ab08:	4d50      	ldr	r5, [pc, #320]	; (800ac4c <_strtod_l+0xbe0>)
 800ab0a:	e7ab      	b.n	800aa64 <_strtod_l+0x9f8>
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	0020      	movs	r0, r4
 800ab10:	0029      	movs	r1, r5
 800ab12:	4b4e      	ldr	r3, [pc, #312]	; (800ac4c <_strtod_l+0xbe0>)
 800ab14:	f7f7 f9fc 	bl	8001f10 <__aeabi_dmul>
 800ab18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab1a:	0004      	movs	r4, r0
 800ab1c:	000b      	movs	r3, r1
 800ab1e:	000d      	movs	r5, r1
 800ab20:	2a00      	cmp	r2, #0
 800ab22:	d104      	bne.n	800ab2e <_strtod_l+0xac2>
 800ab24:	2280      	movs	r2, #128	; 0x80
 800ab26:	0612      	lsls	r2, r2, #24
 800ab28:	900a      	str	r0, [sp, #40]	; 0x28
 800ab2a:	188b      	adds	r3, r1, r2
 800ab2c:	e79e      	b.n	800aa6c <_strtod_l+0xa00>
 800ab2e:	0002      	movs	r2, r0
 800ab30:	920a      	str	r2, [sp, #40]	; 0x28
 800ab32:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab34:	e79b      	b.n	800aa6e <_strtod_l+0xa02>
 800ab36:	2300      	movs	r3, #0
 800ab38:	4c43      	ldr	r4, [pc, #268]	; (800ac48 <_strtod_l+0xbdc>)
 800ab3a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab3c:	940b      	str	r4, [sp, #44]	; 0x2c
 800ab3e:	2400      	movs	r4, #0
 800ab40:	4d41      	ldr	r5, [pc, #260]	; (800ac48 <_strtod_l+0xbdc>)
 800ab42:	e794      	b.n	800aa6e <_strtod_l+0xa02>
 800ab44:	2300      	movs	r3, #0
 800ab46:	4c47      	ldr	r4, [pc, #284]	; (800ac64 <_strtod_l+0xbf8>)
 800ab48:	e7f7      	b.n	800ab3a <_strtod_l+0xace>
 800ab4a:	23d4      	movs	r3, #212	; 0xd4
 800ab4c:	049b      	lsls	r3, r3, #18
 800ab4e:	18cf      	adds	r7, r1, r3
 800ab50:	9b07      	ldr	r3, [sp, #28]
 800ab52:	970e      	str	r7, [sp, #56]	; 0x38
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1b9      	bne.n	800aacc <_strtod_l+0xa60>
 800ab58:	4b3d      	ldr	r3, [pc, #244]	; (800ac50 <_strtod_l+0xbe4>)
 800ab5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab5c:	403b      	ands	r3, r7
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d1b4      	bne.n	800aacc <_strtod_l+0xa60>
 800ab62:	0020      	movs	r0, r4
 800ab64:	0029      	movs	r1, r5
 800ab66:	f7f5 fd0b 	bl	8000580 <__aeabi_d2lz>
 800ab6a:	f7f5 fd45 	bl	80005f8 <__aeabi_l2d>
 800ab6e:	0002      	movs	r2, r0
 800ab70:	000b      	movs	r3, r1
 800ab72:	0020      	movs	r0, r4
 800ab74:	0029      	movs	r1, r5
 800ab76:	f7f7 fc8d 	bl	8002494 <__aeabi_dsub>
 800ab7a:	033b      	lsls	r3, r7, #12
 800ab7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab7e:	0b1b      	lsrs	r3, r3, #12
 800ab80:	4333      	orrs	r3, r6
 800ab82:	4313      	orrs	r3, r2
 800ab84:	0004      	movs	r4, r0
 800ab86:	000d      	movs	r5, r1
 800ab88:	4a37      	ldr	r2, [pc, #220]	; (800ac68 <_strtod_l+0xbfc>)
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d054      	beq.n	800ac38 <_strtod_l+0xbcc>
 800ab8e:	4b37      	ldr	r3, [pc, #220]	; (800ac6c <_strtod_l+0xc00>)
 800ab90:	f7f5 fc62 	bl	8000458 <__aeabi_dcmplt>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d000      	beq.n	800ab9a <_strtod_l+0xb2e>
 800ab98:	e4d4      	b.n	800a544 <_strtod_l+0x4d8>
 800ab9a:	0020      	movs	r0, r4
 800ab9c:	0029      	movs	r1, r5
 800ab9e:	4a34      	ldr	r2, [pc, #208]	; (800ac70 <_strtod_l+0xc04>)
 800aba0:	4b2a      	ldr	r3, [pc, #168]	; (800ac4c <_strtod_l+0xbe0>)
 800aba2:	f7f5 fc6d 	bl	8000480 <__aeabi_dcmpgt>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d090      	beq.n	800aacc <_strtod_l+0xa60>
 800abaa:	e4cb      	b.n	800a544 <_strtod_l+0x4d8>
 800abac:	9b07      	ldr	r3, [sp, #28]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d02b      	beq.n	800ac0a <_strtod_l+0xb9e>
 800abb2:	23d4      	movs	r3, #212	; 0xd4
 800abb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800abb6:	04db      	lsls	r3, r3, #19
 800abb8:	429a      	cmp	r2, r3
 800abba:	d826      	bhi.n	800ac0a <_strtod_l+0xb9e>
 800abbc:	0020      	movs	r0, r4
 800abbe:	0029      	movs	r1, r5
 800abc0:	4a2c      	ldr	r2, [pc, #176]	; (800ac74 <_strtod_l+0xc08>)
 800abc2:	4b2d      	ldr	r3, [pc, #180]	; (800ac78 <_strtod_l+0xc0c>)
 800abc4:	f7f5 fc52 	bl	800046c <__aeabi_dcmple>
 800abc8:	2800      	cmp	r0, #0
 800abca:	d017      	beq.n	800abfc <_strtod_l+0xb90>
 800abcc:	0020      	movs	r0, r4
 800abce:	0029      	movs	r1, r5
 800abd0:	f7f5 fcb8 	bl	8000544 <__aeabi_d2uiz>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d100      	bne.n	800abda <_strtod_l+0xb6e>
 800abd8:	3001      	adds	r0, #1
 800abda:	f7f8 f861 	bl	8002ca0 <__aeabi_ui2d>
 800abde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abe0:	0004      	movs	r4, r0
 800abe2:	000b      	movs	r3, r1
 800abe4:	000d      	movs	r5, r1
 800abe6:	2a00      	cmp	r2, #0
 800abe8:	d122      	bne.n	800ac30 <_strtod_l+0xbc4>
 800abea:	2280      	movs	r2, #128	; 0x80
 800abec:	0612      	lsls	r2, r2, #24
 800abee:	188b      	adds	r3, r1, r2
 800abf0:	9016      	str	r0, [sp, #88]	; 0x58
 800abf2:	9317      	str	r3, [sp, #92]	; 0x5c
 800abf4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800abf6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abf8:	9212      	str	r2, [sp, #72]	; 0x48
 800abfa:	9313      	str	r3, [sp, #76]	; 0x4c
 800abfc:	22d6      	movs	r2, #214	; 0xd6
 800abfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac00:	04d2      	lsls	r2, r2, #19
 800ac02:	189b      	adds	r3, r3, r2
 800ac04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac06:	1a9b      	subs	r3, r3, r2
 800ac08:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac0a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ac0c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac0e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ac10:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800ac12:	f003 f8e5 	bl	800dde0 <__ulp>
 800ac16:	0002      	movs	r2, r0
 800ac18:	000b      	movs	r3, r1
 800ac1a:	0030      	movs	r0, r6
 800ac1c:	0039      	movs	r1, r7
 800ac1e:	f7f7 f977 	bl	8001f10 <__aeabi_dmul>
 800ac22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac26:	f7f6 fa19 	bl	800105c <__aeabi_dadd>
 800ac2a:	0006      	movs	r6, r0
 800ac2c:	000f      	movs	r7, r1
 800ac2e:	e78f      	b.n	800ab50 <_strtod_l+0xae4>
 800ac30:	0002      	movs	r2, r0
 800ac32:	9216      	str	r2, [sp, #88]	; 0x58
 800ac34:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac36:	e7dd      	b.n	800abf4 <_strtod_l+0xb88>
 800ac38:	4b10      	ldr	r3, [pc, #64]	; (800ac7c <_strtod_l+0xc10>)
 800ac3a:	f7f5 fc0d 	bl	8000458 <__aeabi_dcmplt>
 800ac3e:	e7b2      	b.n	800aba6 <_strtod_l+0xb3a>
 800ac40:	fff00000 	.word	0xfff00000
 800ac44:	000fffff 	.word	0x000fffff
 800ac48:	3ff00000 	.word	0x3ff00000
 800ac4c:	3fe00000 	.word	0x3fe00000
 800ac50:	7ff00000 	.word	0x7ff00000
 800ac54:	7fe00000 	.word	0x7fe00000
 800ac58:	fcb00000 	.word	0xfcb00000
 800ac5c:	7c9fffff 	.word	0x7c9fffff
 800ac60:	7fefffff 	.word	0x7fefffff
 800ac64:	bff00000 	.word	0xbff00000
 800ac68:	94a03595 	.word	0x94a03595
 800ac6c:	3fdfffff 	.word	0x3fdfffff
 800ac70:	35afe535 	.word	0x35afe535
 800ac74:	ffc00000 	.word	0xffc00000
 800ac78:	41dfffff 	.word	0x41dfffff
 800ac7c:	3fcfffff 	.word	0x3fcfffff

0800ac80 <_strtod_r>:
 800ac80:	b510      	push	{r4, lr}
 800ac82:	4b02      	ldr	r3, [pc, #8]	; (800ac8c <_strtod_r+0xc>)
 800ac84:	f7ff f9f2 	bl	800a06c <_strtod_l>
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	20000018 	.word	0x20000018

0800ac90 <_strtol_l.constprop.0>:
 800ac90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac92:	b087      	sub	sp, #28
 800ac94:	001e      	movs	r6, r3
 800ac96:	9005      	str	r0, [sp, #20]
 800ac98:	9101      	str	r1, [sp, #4]
 800ac9a:	9202      	str	r2, [sp, #8]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d048      	beq.n	800ad32 <_strtol_l.constprop.0+0xa2>
 800aca0:	000b      	movs	r3, r1
 800aca2:	2e24      	cmp	r6, #36	; 0x24
 800aca4:	d845      	bhi.n	800ad32 <_strtol_l.constprop.0+0xa2>
 800aca6:	4a3b      	ldr	r2, [pc, #236]	; (800ad94 <_strtol_l.constprop.0+0x104>)
 800aca8:	2108      	movs	r1, #8
 800acaa:	4694      	mov	ip, r2
 800acac:	001a      	movs	r2, r3
 800acae:	4660      	mov	r0, ip
 800acb0:	7814      	ldrb	r4, [r2, #0]
 800acb2:	3301      	adds	r3, #1
 800acb4:	5d00      	ldrb	r0, [r0, r4]
 800acb6:	001d      	movs	r5, r3
 800acb8:	0007      	movs	r7, r0
 800acba:	400f      	ands	r7, r1
 800acbc:	4208      	tst	r0, r1
 800acbe:	d1f5      	bne.n	800acac <_strtol_l.constprop.0+0x1c>
 800acc0:	2c2d      	cmp	r4, #45	; 0x2d
 800acc2:	d13d      	bne.n	800ad40 <_strtol_l.constprop.0+0xb0>
 800acc4:	2701      	movs	r7, #1
 800acc6:	781c      	ldrb	r4, [r3, #0]
 800acc8:	1c95      	adds	r5, r2, #2
 800acca:	2e00      	cmp	r6, #0
 800accc:	d05e      	beq.n	800ad8c <_strtol_l.constprop.0+0xfc>
 800acce:	2e10      	cmp	r6, #16
 800acd0:	d109      	bne.n	800ace6 <_strtol_l.constprop.0+0x56>
 800acd2:	2c30      	cmp	r4, #48	; 0x30
 800acd4:	d107      	bne.n	800ace6 <_strtol_l.constprop.0+0x56>
 800acd6:	2220      	movs	r2, #32
 800acd8:	782b      	ldrb	r3, [r5, #0]
 800acda:	4393      	bics	r3, r2
 800acdc:	2b58      	cmp	r3, #88	; 0x58
 800acde:	d150      	bne.n	800ad82 <_strtol_l.constprop.0+0xf2>
 800ace0:	2610      	movs	r6, #16
 800ace2:	786c      	ldrb	r4, [r5, #1]
 800ace4:	3502      	adds	r5, #2
 800ace6:	4b2c      	ldr	r3, [pc, #176]	; (800ad98 <_strtol_l.constprop.0+0x108>)
 800ace8:	0031      	movs	r1, r6
 800acea:	18fb      	adds	r3, r7, r3
 800acec:	0018      	movs	r0, r3
 800acee:	9303      	str	r3, [sp, #12]
 800acf0:	f7f5 faac 	bl	800024c <__aeabi_uidivmod>
 800acf4:	2200      	movs	r2, #0
 800acf6:	9104      	str	r1, [sp, #16]
 800acf8:	2101      	movs	r1, #1
 800acfa:	4684      	mov	ip, r0
 800acfc:	0010      	movs	r0, r2
 800acfe:	4249      	negs	r1, r1
 800ad00:	0023      	movs	r3, r4
 800ad02:	3b30      	subs	r3, #48	; 0x30
 800ad04:	2b09      	cmp	r3, #9
 800ad06:	d903      	bls.n	800ad10 <_strtol_l.constprop.0+0x80>
 800ad08:	3b11      	subs	r3, #17
 800ad0a:	2b19      	cmp	r3, #25
 800ad0c:	d81d      	bhi.n	800ad4a <_strtol_l.constprop.0+0xba>
 800ad0e:	330a      	adds	r3, #10
 800ad10:	429e      	cmp	r6, r3
 800ad12:	dd1e      	ble.n	800ad52 <_strtol_l.constprop.0+0xc2>
 800ad14:	1c54      	adds	r4, r2, #1
 800ad16:	d009      	beq.n	800ad2c <_strtol_l.constprop.0+0x9c>
 800ad18:	000a      	movs	r2, r1
 800ad1a:	4584      	cmp	ip, r0
 800ad1c:	d306      	bcc.n	800ad2c <_strtol_l.constprop.0+0x9c>
 800ad1e:	d102      	bne.n	800ad26 <_strtol_l.constprop.0+0x96>
 800ad20:	9c04      	ldr	r4, [sp, #16]
 800ad22:	429c      	cmp	r4, r3
 800ad24:	db02      	blt.n	800ad2c <_strtol_l.constprop.0+0x9c>
 800ad26:	2201      	movs	r2, #1
 800ad28:	4370      	muls	r0, r6
 800ad2a:	1818      	adds	r0, r3, r0
 800ad2c:	782c      	ldrb	r4, [r5, #0]
 800ad2e:	3501      	adds	r5, #1
 800ad30:	e7e6      	b.n	800ad00 <_strtol_l.constprop.0+0x70>
 800ad32:	f001 f96f 	bl	800c014 <__errno>
 800ad36:	2316      	movs	r3, #22
 800ad38:	6003      	str	r3, [r0, #0]
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	b007      	add	sp, #28
 800ad3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad40:	2c2b      	cmp	r4, #43	; 0x2b
 800ad42:	d1c2      	bne.n	800acca <_strtol_l.constprop.0+0x3a>
 800ad44:	781c      	ldrb	r4, [r3, #0]
 800ad46:	1c95      	adds	r5, r2, #2
 800ad48:	e7bf      	b.n	800acca <_strtol_l.constprop.0+0x3a>
 800ad4a:	0023      	movs	r3, r4
 800ad4c:	3b61      	subs	r3, #97	; 0x61
 800ad4e:	2b19      	cmp	r3, #25
 800ad50:	d9dd      	bls.n	800ad0e <_strtol_l.constprop.0+0x7e>
 800ad52:	1c53      	adds	r3, r2, #1
 800ad54:	d109      	bne.n	800ad6a <_strtol_l.constprop.0+0xda>
 800ad56:	2322      	movs	r3, #34	; 0x22
 800ad58:	9a05      	ldr	r2, [sp, #20]
 800ad5a:	9803      	ldr	r0, [sp, #12]
 800ad5c:	6013      	str	r3, [r2, #0]
 800ad5e:	9b02      	ldr	r3, [sp, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d0eb      	beq.n	800ad3c <_strtol_l.constprop.0+0xac>
 800ad64:	1e6b      	subs	r3, r5, #1
 800ad66:	9301      	str	r3, [sp, #4]
 800ad68:	e007      	b.n	800ad7a <_strtol_l.constprop.0+0xea>
 800ad6a:	2f00      	cmp	r7, #0
 800ad6c:	d000      	beq.n	800ad70 <_strtol_l.constprop.0+0xe0>
 800ad6e:	4240      	negs	r0, r0
 800ad70:	9b02      	ldr	r3, [sp, #8]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d0e2      	beq.n	800ad3c <_strtol_l.constprop.0+0xac>
 800ad76:	2a00      	cmp	r2, #0
 800ad78:	d1f4      	bne.n	800ad64 <_strtol_l.constprop.0+0xd4>
 800ad7a:	9b02      	ldr	r3, [sp, #8]
 800ad7c:	9a01      	ldr	r2, [sp, #4]
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	e7dc      	b.n	800ad3c <_strtol_l.constprop.0+0xac>
 800ad82:	2430      	movs	r4, #48	; 0x30
 800ad84:	2e00      	cmp	r6, #0
 800ad86:	d1ae      	bne.n	800ace6 <_strtol_l.constprop.0+0x56>
 800ad88:	3608      	adds	r6, #8
 800ad8a:	e7ac      	b.n	800ace6 <_strtol_l.constprop.0+0x56>
 800ad8c:	2c30      	cmp	r4, #48	; 0x30
 800ad8e:	d0a2      	beq.n	800acd6 <_strtol_l.constprop.0+0x46>
 800ad90:	260a      	movs	r6, #10
 800ad92:	e7a8      	b.n	800ace6 <_strtol_l.constprop.0+0x56>
 800ad94:	0800eca9 	.word	0x0800eca9
 800ad98:	7fffffff 	.word	0x7fffffff

0800ad9c <_strtol_r>:
 800ad9c:	b510      	push	{r4, lr}
 800ad9e:	f7ff ff77 	bl	800ac90 <_strtol_l.constprop.0>
 800ada2:	bd10      	pop	{r4, pc}

0800ada4 <__cvt>:
 800ada4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ada6:	001e      	movs	r6, r3
 800ada8:	2300      	movs	r3, #0
 800adaa:	0014      	movs	r4, r2
 800adac:	b08b      	sub	sp, #44	; 0x2c
 800adae:	429e      	cmp	r6, r3
 800adb0:	da04      	bge.n	800adbc <__cvt+0x18>
 800adb2:	2180      	movs	r1, #128	; 0x80
 800adb4:	0609      	lsls	r1, r1, #24
 800adb6:	1873      	adds	r3, r6, r1
 800adb8:	001e      	movs	r6, r3
 800adba:	232d      	movs	r3, #45	; 0x2d
 800adbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800adbe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800adc0:	7013      	strb	r3, [r2, #0]
 800adc2:	2320      	movs	r3, #32
 800adc4:	2203      	movs	r2, #3
 800adc6:	439f      	bics	r7, r3
 800adc8:	2f46      	cmp	r7, #70	; 0x46
 800adca:	d007      	beq.n	800addc <__cvt+0x38>
 800adcc:	003b      	movs	r3, r7
 800adce:	3b45      	subs	r3, #69	; 0x45
 800add0:	4259      	negs	r1, r3
 800add2:	414b      	adcs	r3, r1
 800add4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800add6:	3a01      	subs	r2, #1
 800add8:	18cb      	adds	r3, r1, r3
 800adda:	9310      	str	r3, [sp, #64]	; 0x40
 800addc:	ab09      	add	r3, sp, #36	; 0x24
 800adde:	9304      	str	r3, [sp, #16]
 800ade0:	ab08      	add	r3, sp, #32
 800ade2:	9303      	str	r3, [sp, #12]
 800ade4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ade6:	9200      	str	r2, [sp, #0]
 800ade8:	9302      	str	r3, [sp, #8]
 800adea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adec:	0022      	movs	r2, r4
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	0033      	movs	r3, r6
 800adf2:	f001 f9eb 	bl	800c1cc <_dtoa_r>
 800adf6:	0005      	movs	r5, r0
 800adf8:	2f47      	cmp	r7, #71	; 0x47
 800adfa:	d102      	bne.n	800ae02 <__cvt+0x5e>
 800adfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800adfe:	07db      	lsls	r3, r3, #31
 800ae00:	d528      	bpl.n	800ae54 <__cvt+0xb0>
 800ae02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae04:	18eb      	adds	r3, r5, r3
 800ae06:	9307      	str	r3, [sp, #28]
 800ae08:	2f46      	cmp	r7, #70	; 0x46
 800ae0a:	d114      	bne.n	800ae36 <__cvt+0x92>
 800ae0c:	782b      	ldrb	r3, [r5, #0]
 800ae0e:	2b30      	cmp	r3, #48	; 0x30
 800ae10:	d10c      	bne.n	800ae2c <__cvt+0x88>
 800ae12:	2200      	movs	r2, #0
 800ae14:	2300      	movs	r3, #0
 800ae16:	0020      	movs	r0, r4
 800ae18:	0031      	movs	r1, r6
 800ae1a:	f7f5 fb17 	bl	800044c <__aeabi_dcmpeq>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d104      	bne.n	800ae2c <__cvt+0x88>
 800ae22:	2301      	movs	r3, #1
 800ae24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae26:	1a9b      	subs	r3, r3, r2
 800ae28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae2a:	6013      	str	r3, [r2, #0]
 800ae2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae2e:	9a07      	ldr	r2, [sp, #28]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	18d3      	adds	r3, r2, r3
 800ae34:	9307      	str	r3, [sp, #28]
 800ae36:	2200      	movs	r2, #0
 800ae38:	2300      	movs	r3, #0
 800ae3a:	0020      	movs	r0, r4
 800ae3c:	0031      	movs	r1, r6
 800ae3e:	f7f5 fb05 	bl	800044c <__aeabi_dcmpeq>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d001      	beq.n	800ae4a <__cvt+0xa6>
 800ae46:	9b07      	ldr	r3, [sp, #28]
 800ae48:	9309      	str	r3, [sp, #36]	; 0x24
 800ae4a:	2230      	movs	r2, #48	; 0x30
 800ae4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4e:	9907      	ldr	r1, [sp, #28]
 800ae50:	428b      	cmp	r3, r1
 800ae52:	d306      	bcc.n	800ae62 <__cvt+0xbe>
 800ae54:	0028      	movs	r0, r5
 800ae56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae58:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ae5a:	1b5b      	subs	r3, r3, r5
 800ae5c:	6013      	str	r3, [r2, #0]
 800ae5e:	b00b      	add	sp, #44	; 0x2c
 800ae60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae62:	1c59      	adds	r1, r3, #1
 800ae64:	9109      	str	r1, [sp, #36]	; 0x24
 800ae66:	701a      	strb	r2, [r3, #0]
 800ae68:	e7f0      	b.n	800ae4c <__cvt+0xa8>

0800ae6a <__exponent>:
 800ae6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae6c:	1c83      	adds	r3, r0, #2
 800ae6e:	b087      	sub	sp, #28
 800ae70:	9303      	str	r3, [sp, #12]
 800ae72:	0005      	movs	r5, r0
 800ae74:	000c      	movs	r4, r1
 800ae76:	232b      	movs	r3, #43	; 0x2b
 800ae78:	7002      	strb	r2, [r0, #0]
 800ae7a:	2900      	cmp	r1, #0
 800ae7c:	da01      	bge.n	800ae82 <__exponent+0x18>
 800ae7e:	424c      	negs	r4, r1
 800ae80:	3302      	adds	r3, #2
 800ae82:	706b      	strb	r3, [r5, #1]
 800ae84:	2c09      	cmp	r4, #9
 800ae86:	dd2f      	ble.n	800aee8 <__exponent+0x7e>
 800ae88:	270a      	movs	r7, #10
 800ae8a:	ab04      	add	r3, sp, #16
 800ae8c:	1dde      	adds	r6, r3, #7
 800ae8e:	0020      	movs	r0, r4
 800ae90:	0039      	movs	r1, r7
 800ae92:	9601      	str	r6, [sp, #4]
 800ae94:	f7f5 fac4 	bl	8000420 <__aeabi_idivmod>
 800ae98:	3e01      	subs	r6, #1
 800ae9a:	3130      	adds	r1, #48	; 0x30
 800ae9c:	0020      	movs	r0, r4
 800ae9e:	7031      	strb	r1, [r6, #0]
 800aea0:	0039      	movs	r1, r7
 800aea2:	9402      	str	r4, [sp, #8]
 800aea4:	f7f5 f9d6 	bl	8000254 <__divsi3>
 800aea8:	9b02      	ldr	r3, [sp, #8]
 800aeaa:	0004      	movs	r4, r0
 800aeac:	2b63      	cmp	r3, #99	; 0x63
 800aeae:	dcee      	bgt.n	800ae8e <__exponent+0x24>
 800aeb0:	9b01      	ldr	r3, [sp, #4]
 800aeb2:	3430      	adds	r4, #48	; 0x30
 800aeb4:	1e9a      	subs	r2, r3, #2
 800aeb6:	0013      	movs	r3, r2
 800aeb8:	9903      	ldr	r1, [sp, #12]
 800aeba:	7014      	strb	r4, [r2, #0]
 800aebc:	a804      	add	r0, sp, #16
 800aebe:	3007      	adds	r0, #7
 800aec0:	4298      	cmp	r0, r3
 800aec2:	d80c      	bhi.n	800aede <__exponent+0x74>
 800aec4:	2300      	movs	r3, #0
 800aec6:	4282      	cmp	r2, r0
 800aec8:	d804      	bhi.n	800aed4 <__exponent+0x6a>
 800aeca:	aa04      	add	r2, sp, #16
 800aecc:	3309      	adds	r3, #9
 800aece:	189b      	adds	r3, r3, r2
 800aed0:	9a01      	ldr	r2, [sp, #4]
 800aed2:	1a9b      	subs	r3, r3, r2
 800aed4:	9a03      	ldr	r2, [sp, #12]
 800aed6:	18d3      	adds	r3, r2, r3
 800aed8:	1b58      	subs	r0, r3, r5
 800aeda:	b007      	add	sp, #28
 800aedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aede:	7818      	ldrb	r0, [r3, #0]
 800aee0:	3301      	adds	r3, #1
 800aee2:	7008      	strb	r0, [r1, #0]
 800aee4:	3101      	adds	r1, #1
 800aee6:	e7e9      	b.n	800aebc <__exponent+0x52>
 800aee8:	2330      	movs	r3, #48	; 0x30
 800aeea:	3430      	adds	r4, #48	; 0x30
 800aeec:	70ab      	strb	r3, [r5, #2]
 800aeee:	70ec      	strb	r4, [r5, #3]
 800aef0:	1d2b      	adds	r3, r5, #4
 800aef2:	e7f1      	b.n	800aed8 <__exponent+0x6e>

0800aef4 <_printf_float>:
 800aef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aef6:	b095      	sub	sp, #84	; 0x54
 800aef8:	000c      	movs	r4, r1
 800aefa:	9208      	str	r2, [sp, #32]
 800aefc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800aefe:	9309      	str	r3, [sp, #36]	; 0x24
 800af00:	0007      	movs	r7, r0
 800af02:	f001 f835 	bl	800bf70 <_localeconv_r>
 800af06:	6803      	ldr	r3, [r0, #0]
 800af08:	0018      	movs	r0, r3
 800af0a:	930c      	str	r3, [sp, #48]	; 0x30
 800af0c:	f7f5 f8fc 	bl	8000108 <strlen>
 800af10:	2300      	movs	r3, #0
 800af12:	9312      	str	r3, [sp, #72]	; 0x48
 800af14:	7e23      	ldrb	r3, [r4, #24]
 800af16:	2207      	movs	r2, #7
 800af18:	930a      	str	r3, [sp, #40]	; 0x28
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	900d      	str	r0, [sp, #52]	; 0x34
 800af1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800af20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af22:	682b      	ldr	r3, [r5, #0]
 800af24:	05c9      	lsls	r1, r1, #23
 800af26:	d547      	bpl.n	800afb8 <_printf_float+0xc4>
 800af28:	189b      	adds	r3, r3, r2
 800af2a:	4393      	bics	r3, r2
 800af2c:	001a      	movs	r2, r3
 800af2e:	3208      	adds	r2, #8
 800af30:	602a      	str	r2, [r5, #0]
 800af32:	681e      	ldr	r6, [r3, #0]
 800af34:	685d      	ldr	r5, [r3, #4]
 800af36:	0032      	movs	r2, r6
 800af38:	002b      	movs	r3, r5
 800af3a:	64a2      	str	r2, [r4, #72]	; 0x48
 800af3c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800af3e:	2201      	movs	r2, #1
 800af40:	006b      	lsls	r3, r5, #1
 800af42:	085b      	lsrs	r3, r3, #1
 800af44:	930e      	str	r3, [sp, #56]	; 0x38
 800af46:	0030      	movs	r0, r6
 800af48:	4bab      	ldr	r3, [pc, #684]	; (800b1f8 <_printf_float+0x304>)
 800af4a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800af4c:	4252      	negs	r2, r2
 800af4e:	f7f7 fe23 	bl	8002b98 <__aeabi_dcmpun>
 800af52:	2800      	cmp	r0, #0
 800af54:	d132      	bne.n	800afbc <_printf_float+0xc8>
 800af56:	2201      	movs	r2, #1
 800af58:	0030      	movs	r0, r6
 800af5a:	4ba7      	ldr	r3, [pc, #668]	; (800b1f8 <_printf_float+0x304>)
 800af5c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800af5e:	4252      	negs	r2, r2
 800af60:	f7f5 fa84 	bl	800046c <__aeabi_dcmple>
 800af64:	2800      	cmp	r0, #0
 800af66:	d129      	bne.n	800afbc <_printf_float+0xc8>
 800af68:	2200      	movs	r2, #0
 800af6a:	2300      	movs	r3, #0
 800af6c:	0030      	movs	r0, r6
 800af6e:	0029      	movs	r1, r5
 800af70:	f7f5 fa72 	bl	8000458 <__aeabi_dcmplt>
 800af74:	2800      	cmp	r0, #0
 800af76:	d003      	beq.n	800af80 <_printf_float+0x8c>
 800af78:	0023      	movs	r3, r4
 800af7a:	222d      	movs	r2, #45	; 0x2d
 800af7c:	3343      	adds	r3, #67	; 0x43
 800af7e:	701a      	strb	r2, [r3, #0]
 800af80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af82:	4d9e      	ldr	r5, [pc, #632]	; (800b1fc <_printf_float+0x308>)
 800af84:	2b47      	cmp	r3, #71	; 0x47
 800af86:	d900      	bls.n	800af8a <_printf_float+0x96>
 800af88:	4d9d      	ldr	r5, [pc, #628]	; (800b200 <_printf_float+0x30c>)
 800af8a:	2303      	movs	r3, #3
 800af8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af8e:	6123      	str	r3, [r4, #16]
 800af90:	3301      	adds	r3, #1
 800af92:	439a      	bics	r2, r3
 800af94:	2300      	movs	r3, #0
 800af96:	6022      	str	r2, [r4, #0]
 800af98:	930b      	str	r3, [sp, #44]	; 0x2c
 800af9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af9c:	0021      	movs	r1, r4
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	0038      	movs	r0, r7
 800afa2:	9b08      	ldr	r3, [sp, #32]
 800afa4:	aa13      	add	r2, sp, #76	; 0x4c
 800afa6:	f000 f9fb 	bl	800b3a0 <_printf_common>
 800afaa:	3001      	adds	r0, #1
 800afac:	d000      	beq.n	800afb0 <_printf_float+0xbc>
 800afae:	e0a3      	b.n	800b0f8 <_printf_float+0x204>
 800afb0:	2001      	movs	r0, #1
 800afb2:	4240      	negs	r0, r0
 800afb4:	b015      	add	sp, #84	; 0x54
 800afb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afb8:	3307      	adds	r3, #7
 800afba:	e7b6      	b.n	800af2a <_printf_float+0x36>
 800afbc:	0032      	movs	r2, r6
 800afbe:	002b      	movs	r3, r5
 800afc0:	0030      	movs	r0, r6
 800afc2:	0029      	movs	r1, r5
 800afc4:	f7f7 fde8 	bl	8002b98 <__aeabi_dcmpun>
 800afc8:	2800      	cmp	r0, #0
 800afca:	d00b      	beq.n	800afe4 <_printf_float+0xf0>
 800afcc:	2d00      	cmp	r5, #0
 800afce:	da03      	bge.n	800afd8 <_printf_float+0xe4>
 800afd0:	0023      	movs	r3, r4
 800afd2:	222d      	movs	r2, #45	; 0x2d
 800afd4:	3343      	adds	r3, #67	; 0x43
 800afd6:	701a      	strb	r2, [r3, #0]
 800afd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afda:	4d8a      	ldr	r5, [pc, #552]	; (800b204 <_printf_float+0x310>)
 800afdc:	2b47      	cmp	r3, #71	; 0x47
 800afde:	d9d4      	bls.n	800af8a <_printf_float+0x96>
 800afe0:	4d89      	ldr	r5, [pc, #548]	; (800b208 <_printf_float+0x314>)
 800afe2:	e7d2      	b.n	800af8a <_printf_float+0x96>
 800afe4:	2220      	movs	r2, #32
 800afe6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800afe8:	6863      	ldr	r3, [r4, #4]
 800afea:	4391      	bics	r1, r2
 800afec:	910e      	str	r1, [sp, #56]	; 0x38
 800afee:	1c5a      	adds	r2, r3, #1
 800aff0:	d14a      	bne.n	800b088 <_printf_float+0x194>
 800aff2:	3307      	adds	r3, #7
 800aff4:	6063      	str	r3, [r4, #4]
 800aff6:	2380      	movs	r3, #128	; 0x80
 800aff8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800affa:	00db      	lsls	r3, r3, #3
 800affc:	4313      	orrs	r3, r2
 800affe:	2200      	movs	r2, #0
 800b000:	9206      	str	r2, [sp, #24]
 800b002:	aa12      	add	r2, sp, #72	; 0x48
 800b004:	9205      	str	r2, [sp, #20]
 800b006:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	9204      	str	r2, [sp, #16]
 800b00c:	aa11      	add	r2, sp, #68	; 0x44
 800b00e:	9203      	str	r2, [sp, #12]
 800b010:	2223      	movs	r2, #35	; 0x23
 800b012:	a908      	add	r1, sp, #32
 800b014:	9301      	str	r3, [sp, #4]
 800b016:	6863      	ldr	r3, [r4, #4]
 800b018:	1852      	adds	r2, r2, r1
 800b01a:	9202      	str	r2, [sp, #8]
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	0032      	movs	r2, r6
 800b020:	002b      	movs	r3, r5
 800b022:	0038      	movs	r0, r7
 800b024:	f7ff febe 	bl	800ada4 <__cvt>
 800b028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b02a:	0005      	movs	r5, r0
 800b02c:	2b47      	cmp	r3, #71	; 0x47
 800b02e:	d109      	bne.n	800b044 <_printf_float+0x150>
 800b030:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b032:	1cda      	adds	r2, r3, #3
 800b034:	db02      	blt.n	800b03c <_printf_float+0x148>
 800b036:	6862      	ldr	r2, [r4, #4]
 800b038:	4293      	cmp	r3, r2
 800b03a:	dd49      	ble.n	800b0d0 <_printf_float+0x1dc>
 800b03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b03e:	3b02      	subs	r3, #2
 800b040:	b2db      	uxtb	r3, r3
 800b042:	930a      	str	r3, [sp, #40]	; 0x28
 800b044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b046:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b048:	2b65      	cmp	r3, #101	; 0x65
 800b04a:	d824      	bhi.n	800b096 <_printf_float+0x1a2>
 800b04c:	0020      	movs	r0, r4
 800b04e:	001a      	movs	r2, r3
 800b050:	3901      	subs	r1, #1
 800b052:	3050      	adds	r0, #80	; 0x50
 800b054:	9111      	str	r1, [sp, #68]	; 0x44
 800b056:	f7ff ff08 	bl	800ae6a <__exponent>
 800b05a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b05c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b05e:	1813      	adds	r3, r2, r0
 800b060:	6123      	str	r3, [r4, #16]
 800b062:	2a01      	cmp	r2, #1
 800b064:	dc02      	bgt.n	800b06c <_printf_float+0x178>
 800b066:	6822      	ldr	r2, [r4, #0]
 800b068:	07d2      	lsls	r2, r2, #31
 800b06a:	d501      	bpl.n	800b070 <_printf_float+0x17c>
 800b06c:	3301      	adds	r3, #1
 800b06e:	6123      	str	r3, [r4, #16]
 800b070:	2323      	movs	r3, #35	; 0x23
 800b072:	aa08      	add	r2, sp, #32
 800b074:	189b      	adds	r3, r3, r2
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d100      	bne.n	800b07e <_printf_float+0x18a>
 800b07c:	e78d      	b.n	800af9a <_printf_float+0xa6>
 800b07e:	0023      	movs	r3, r4
 800b080:	222d      	movs	r2, #45	; 0x2d
 800b082:	3343      	adds	r3, #67	; 0x43
 800b084:	701a      	strb	r2, [r3, #0]
 800b086:	e788      	b.n	800af9a <_printf_float+0xa6>
 800b088:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b08a:	2a47      	cmp	r2, #71	; 0x47
 800b08c:	d1b3      	bne.n	800aff6 <_printf_float+0x102>
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1b1      	bne.n	800aff6 <_printf_float+0x102>
 800b092:	3301      	adds	r3, #1
 800b094:	e7ae      	b.n	800aff4 <_printf_float+0x100>
 800b096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b098:	2b66      	cmp	r3, #102	; 0x66
 800b09a:	d11b      	bne.n	800b0d4 <_printf_float+0x1e0>
 800b09c:	6863      	ldr	r3, [r4, #4]
 800b09e:	2900      	cmp	r1, #0
 800b0a0:	dd09      	ble.n	800b0b6 <_printf_float+0x1c2>
 800b0a2:	6121      	str	r1, [r4, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d102      	bne.n	800b0ae <_printf_float+0x1ba>
 800b0a8:	6822      	ldr	r2, [r4, #0]
 800b0aa:	07d2      	lsls	r2, r2, #31
 800b0ac:	d50b      	bpl.n	800b0c6 <_printf_float+0x1d2>
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	185b      	adds	r3, r3, r1
 800b0b2:	6123      	str	r3, [r4, #16]
 800b0b4:	e007      	b.n	800b0c6 <_printf_float+0x1d2>
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d103      	bne.n	800b0c2 <_printf_float+0x1ce>
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	6821      	ldr	r1, [r4, #0]
 800b0be:	4211      	tst	r1, r2
 800b0c0:	d000      	beq.n	800b0c4 <_printf_float+0x1d0>
 800b0c2:	1c9a      	adds	r2, r3, #2
 800b0c4:	6122      	str	r2, [r4, #16]
 800b0c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0c8:	65a3      	str	r3, [r4, #88]	; 0x58
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0ce:	e7cf      	b.n	800b070 <_printf_float+0x17c>
 800b0d0:	2367      	movs	r3, #103	; 0x67
 800b0d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b0d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b0d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0d8:	4299      	cmp	r1, r3
 800b0da:	db06      	blt.n	800b0ea <_printf_float+0x1f6>
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	6121      	str	r1, [r4, #16]
 800b0e0:	07db      	lsls	r3, r3, #31
 800b0e2:	d5f0      	bpl.n	800b0c6 <_printf_float+0x1d2>
 800b0e4:	3101      	adds	r1, #1
 800b0e6:	6121      	str	r1, [r4, #16]
 800b0e8:	e7ed      	b.n	800b0c6 <_printf_float+0x1d2>
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	2900      	cmp	r1, #0
 800b0ee:	dc01      	bgt.n	800b0f4 <_printf_float+0x200>
 800b0f0:	1892      	adds	r2, r2, r2
 800b0f2:	1a52      	subs	r2, r2, r1
 800b0f4:	189b      	adds	r3, r3, r2
 800b0f6:	e7dc      	b.n	800b0b2 <_printf_float+0x1be>
 800b0f8:	6822      	ldr	r2, [r4, #0]
 800b0fa:	0553      	lsls	r3, r2, #21
 800b0fc:	d408      	bmi.n	800b110 <_printf_float+0x21c>
 800b0fe:	6923      	ldr	r3, [r4, #16]
 800b100:	002a      	movs	r2, r5
 800b102:	0038      	movs	r0, r7
 800b104:	9908      	ldr	r1, [sp, #32]
 800b106:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b108:	47a8      	blx	r5
 800b10a:	3001      	adds	r0, #1
 800b10c:	d12a      	bne.n	800b164 <_printf_float+0x270>
 800b10e:	e74f      	b.n	800afb0 <_printf_float+0xbc>
 800b110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b112:	2b65      	cmp	r3, #101	; 0x65
 800b114:	d800      	bhi.n	800b118 <_printf_float+0x224>
 800b116:	e0ec      	b.n	800b2f2 <_printf_float+0x3fe>
 800b118:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b11a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b11c:	2200      	movs	r2, #0
 800b11e:	2300      	movs	r3, #0
 800b120:	f7f5 f994 	bl	800044c <__aeabi_dcmpeq>
 800b124:	2800      	cmp	r0, #0
 800b126:	d034      	beq.n	800b192 <_printf_float+0x29e>
 800b128:	2301      	movs	r3, #1
 800b12a:	0038      	movs	r0, r7
 800b12c:	4a37      	ldr	r2, [pc, #220]	; (800b20c <_printf_float+0x318>)
 800b12e:	9908      	ldr	r1, [sp, #32]
 800b130:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b132:	47a8      	blx	r5
 800b134:	3001      	adds	r0, #1
 800b136:	d100      	bne.n	800b13a <_printf_float+0x246>
 800b138:	e73a      	b.n	800afb0 <_printf_float+0xbc>
 800b13a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b13c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b13e:	429a      	cmp	r2, r3
 800b140:	db02      	blt.n	800b148 <_printf_float+0x254>
 800b142:	6823      	ldr	r3, [r4, #0]
 800b144:	07db      	lsls	r3, r3, #31
 800b146:	d50d      	bpl.n	800b164 <_printf_float+0x270>
 800b148:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b14a:	0038      	movs	r0, r7
 800b14c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b14e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b150:	9908      	ldr	r1, [sp, #32]
 800b152:	47a8      	blx	r5
 800b154:	2500      	movs	r5, #0
 800b156:	3001      	adds	r0, #1
 800b158:	d100      	bne.n	800b15c <_printf_float+0x268>
 800b15a:	e729      	b.n	800afb0 <_printf_float+0xbc>
 800b15c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b15e:	3b01      	subs	r3, #1
 800b160:	42ab      	cmp	r3, r5
 800b162:	dc0a      	bgt.n	800b17a <_printf_float+0x286>
 800b164:	6823      	ldr	r3, [r4, #0]
 800b166:	079b      	lsls	r3, r3, #30
 800b168:	d500      	bpl.n	800b16c <_printf_float+0x278>
 800b16a:	e116      	b.n	800b39a <_printf_float+0x4a6>
 800b16c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b16e:	68e0      	ldr	r0, [r4, #12]
 800b170:	4298      	cmp	r0, r3
 800b172:	db00      	blt.n	800b176 <_printf_float+0x282>
 800b174:	e71e      	b.n	800afb4 <_printf_float+0xc0>
 800b176:	0018      	movs	r0, r3
 800b178:	e71c      	b.n	800afb4 <_printf_float+0xc0>
 800b17a:	0022      	movs	r2, r4
 800b17c:	2301      	movs	r3, #1
 800b17e:	0038      	movs	r0, r7
 800b180:	9908      	ldr	r1, [sp, #32]
 800b182:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b184:	321a      	adds	r2, #26
 800b186:	47b0      	blx	r6
 800b188:	3001      	adds	r0, #1
 800b18a:	d100      	bne.n	800b18e <_printf_float+0x29a>
 800b18c:	e710      	b.n	800afb0 <_printf_float+0xbc>
 800b18e:	3501      	adds	r5, #1
 800b190:	e7e4      	b.n	800b15c <_printf_float+0x268>
 800b192:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b194:	2b00      	cmp	r3, #0
 800b196:	dc3b      	bgt.n	800b210 <_printf_float+0x31c>
 800b198:	2301      	movs	r3, #1
 800b19a:	0038      	movs	r0, r7
 800b19c:	4a1b      	ldr	r2, [pc, #108]	; (800b20c <_printf_float+0x318>)
 800b19e:	9908      	ldr	r1, [sp, #32]
 800b1a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b1a2:	47b0      	blx	r6
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d100      	bne.n	800b1aa <_printf_float+0x2b6>
 800b1a8:	e702      	b.n	800afb0 <_printf_float+0xbc>
 800b1aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	d102      	bne.n	800b1b8 <_printf_float+0x2c4>
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	07db      	lsls	r3, r3, #31
 800b1b6:	d5d5      	bpl.n	800b164 <_printf_float+0x270>
 800b1b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1ba:	0038      	movs	r0, r7
 800b1bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1be:	9908      	ldr	r1, [sp, #32]
 800b1c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b1c2:	47b0      	blx	r6
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	d100      	bne.n	800b1cc <_printf_float+0x2d8>
 800b1ca:	e6f1      	b.n	800afb0 <_printf_float+0xbc>
 800b1cc:	930a      	str	r3, [sp, #40]	; 0x28
 800b1ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1d2:	425b      	negs	r3, r3
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	dc01      	bgt.n	800b1dc <_printf_float+0x2e8>
 800b1d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1da:	e791      	b.n	800b100 <_printf_float+0x20c>
 800b1dc:	0022      	movs	r2, r4
 800b1de:	2301      	movs	r3, #1
 800b1e0:	0038      	movs	r0, r7
 800b1e2:	9908      	ldr	r1, [sp, #32]
 800b1e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b1e6:	321a      	adds	r2, #26
 800b1e8:	47b0      	blx	r6
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	d100      	bne.n	800b1f0 <_printf_float+0x2fc>
 800b1ee:	e6df      	b.n	800afb0 <_printf_float+0xbc>
 800b1f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	e7ea      	b.n	800b1cc <_printf_float+0x2d8>
 800b1f6:	46c0      	nop			; (mov r8, r8)
 800b1f8:	7fefffff 	.word	0x7fefffff
 800b1fc:	0800eda9 	.word	0x0800eda9
 800b200:	0800edad 	.word	0x0800edad
 800b204:	0800edb1 	.word	0x0800edb1
 800b208:	0800edb5 	.word	0x0800edb5
 800b20c:	0800edb9 	.word	0x0800edb9
 800b210:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b212:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b214:	920a      	str	r2, [sp, #40]	; 0x28
 800b216:	429a      	cmp	r2, r3
 800b218:	dd00      	ble.n	800b21c <_printf_float+0x328>
 800b21a:	930a      	str	r3, [sp, #40]	; 0x28
 800b21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b21e:	2b00      	cmp	r3, #0
 800b220:	dc3d      	bgt.n	800b29e <_printf_float+0x3aa>
 800b222:	2300      	movs	r3, #0
 800b224:	930e      	str	r3, [sp, #56]	; 0x38
 800b226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b228:	43db      	mvns	r3, r3
 800b22a:	17db      	asrs	r3, r3, #31
 800b22c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b22e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b232:	930b      	str	r3, [sp, #44]	; 0x2c
 800b234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b236:	4013      	ands	r3, r2
 800b238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b23e:	4293      	cmp	r3, r2
 800b240:	dc36      	bgt.n	800b2b0 <_printf_float+0x3bc>
 800b242:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b244:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b246:	429a      	cmp	r2, r3
 800b248:	db40      	blt.n	800b2cc <_printf_float+0x3d8>
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	07db      	lsls	r3, r3, #31
 800b24e:	d43d      	bmi.n	800b2cc <_printf_float+0x3d8>
 800b250:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b252:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b256:	1af3      	subs	r3, r6, r3
 800b258:	1ab6      	subs	r6, r6, r2
 800b25a:	429e      	cmp	r6, r3
 800b25c:	dd00      	ble.n	800b260 <_printf_float+0x36c>
 800b25e:	001e      	movs	r6, r3
 800b260:	2e00      	cmp	r6, #0
 800b262:	dc3c      	bgt.n	800b2de <_printf_float+0x3ea>
 800b264:	2300      	movs	r3, #0
 800b266:	930a      	str	r3, [sp, #40]	; 0x28
 800b268:	43f3      	mvns	r3, r6
 800b26a:	17db      	asrs	r3, r3, #31
 800b26c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b26e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b270:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b272:	1a9b      	subs	r3, r3, r2
 800b274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b276:	4032      	ands	r2, r6
 800b278:	1a9b      	subs	r3, r3, r2
 800b27a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b27c:	4293      	cmp	r3, r2
 800b27e:	dc00      	bgt.n	800b282 <_printf_float+0x38e>
 800b280:	e770      	b.n	800b164 <_printf_float+0x270>
 800b282:	0022      	movs	r2, r4
 800b284:	2301      	movs	r3, #1
 800b286:	0038      	movs	r0, r7
 800b288:	9908      	ldr	r1, [sp, #32]
 800b28a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b28c:	321a      	adds	r2, #26
 800b28e:	47a8      	blx	r5
 800b290:	3001      	adds	r0, #1
 800b292:	d100      	bne.n	800b296 <_printf_float+0x3a2>
 800b294:	e68c      	b.n	800afb0 <_printf_float+0xbc>
 800b296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b298:	3301      	adds	r3, #1
 800b29a:	930a      	str	r3, [sp, #40]	; 0x28
 800b29c:	e7e7      	b.n	800b26e <_printf_float+0x37a>
 800b29e:	002a      	movs	r2, r5
 800b2a0:	0038      	movs	r0, r7
 800b2a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2a4:	9908      	ldr	r1, [sp, #32]
 800b2a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b2a8:	47b0      	blx	r6
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	d1b9      	bne.n	800b222 <_printf_float+0x32e>
 800b2ae:	e67f      	b.n	800afb0 <_printf_float+0xbc>
 800b2b0:	0022      	movs	r2, r4
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	0038      	movs	r0, r7
 800b2b6:	9908      	ldr	r1, [sp, #32]
 800b2b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b2ba:	321a      	adds	r2, #26
 800b2bc:	47b0      	blx	r6
 800b2be:	3001      	adds	r0, #1
 800b2c0:	d100      	bne.n	800b2c4 <_printf_float+0x3d0>
 800b2c2:	e675      	b.n	800afb0 <_printf_float+0xbc>
 800b2c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	930e      	str	r3, [sp, #56]	; 0x38
 800b2ca:	e7b0      	b.n	800b22e <_printf_float+0x33a>
 800b2cc:	0038      	movs	r0, r7
 800b2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2d2:	9908      	ldr	r1, [sp, #32]
 800b2d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b2d6:	47b0      	blx	r6
 800b2d8:	3001      	adds	r0, #1
 800b2da:	d1b9      	bne.n	800b250 <_printf_float+0x35c>
 800b2dc:	e668      	b.n	800afb0 <_printf_float+0xbc>
 800b2de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2e0:	0038      	movs	r0, r7
 800b2e2:	18ea      	adds	r2, r5, r3
 800b2e4:	9908      	ldr	r1, [sp, #32]
 800b2e6:	0033      	movs	r3, r6
 800b2e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b2ea:	47a8      	blx	r5
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d1b9      	bne.n	800b264 <_printf_float+0x370>
 800b2f0:	e65e      	b.n	800afb0 <_printf_float+0xbc>
 800b2f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	dc02      	bgt.n	800b2fe <_printf_float+0x40a>
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	421a      	tst	r2, r3
 800b2fc:	d03a      	beq.n	800b374 <_printf_float+0x480>
 800b2fe:	2301      	movs	r3, #1
 800b300:	002a      	movs	r2, r5
 800b302:	0038      	movs	r0, r7
 800b304:	9908      	ldr	r1, [sp, #32]
 800b306:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b308:	47b0      	blx	r6
 800b30a:	3001      	adds	r0, #1
 800b30c:	d100      	bne.n	800b310 <_printf_float+0x41c>
 800b30e:	e64f      	b.n	800afb0 <_printf_float+0xbc>
 800b310:	0038      	movs	r0, r7
 800b312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b316:	9908      	ldr	r1, [sp, #32]
 800b318:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b31a:	47b0      	blx	r6
 800b31c:	3001      	adds	r0, #1
 800b31e:	d100      	bne.n	800b322 <_printf_float+0x42e>
 800b320:	e646      	b.n	800afb0 <_printf_float+0xbc>
 800b322:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b324:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b326:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b328:	2200      	movs	r2, #0
 800b32a:	001e      	movs	r6, r3
 800b32c:	2300      	movs	r3, #0
 800b32e:	f7f5 f88d 	bl	800044c <__aeabi_dcmpeq>
 800b332:	2800      	cmp	r0, #0
 800b334:	d11c      	bne.n	800b370 <_printf_float+0x47c>
 800b336:	0033      	movs	r3, r6
 800b338:	1c6a      	adds	r2, r5, #1
 800b33a:	3b01      	subs	r3, #1
 800b33c:	0038      	movs	r0, r7
 800b33e:	9908      	ldr	r1, [sp, #32]
 800b340:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b342:	47a8      	blx	r5
 800b344:	3001      	adds	r0, #1
 800b346:	d10f      	bne.n	800b368 <_printf_float+0x474>
 800b348:	e632      	b.n	800afb0 <_printf_float+0xbc>
 800b34a:	0022      	movs	r2, r4
 800b34c:	2301      	movs	r3, #1
 800b34e:	0038      	movs	r0, r7
 800b350:	9908      	ldr	r1, [sp, #32]
 800b352:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b354:	321a      	adds	r2, #26
 800b356:	47b0      	blx	r6
 800b358:	3001      	adds	r0, #1
 800b35a:	d100      	bne.n	800b35e <_printf_float+0x46a>
 800b35c:	e628      	b.n	800afb0 <_printf_float+0xbc>
 800b35e:	3501      	adds	r5, #1
 800b360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b362:	3b01      	subs	r3, #1
 800b364:	42ab      	cmp	r3, r5
 800b366:	dcf0      	bgt.n	800b34a <_printf_float+0x456>
 800b368:	0022      	movs	r2, r4
 800b36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b36c:	3250      	adds	r2, #80	; 0x50
 800b36e:	e6c8      	b.n	800b102 <_printf_float+0x20e>
 800b370:	2500      	movs	r5, #0
 800b372:	e7f5      	b.n	800b360 <_printf_float+0x46c>
 800b374:	002a      	movs	r2, r5
 800b376:	e7e1      	b.n	800b33c <_printf_float+0x448>
 800b378:	0022      	movs	r2, r4
 800b37a:	2301      	movs	r3, #1
 800b37c:	0038      	movs	r0, r7
 800b37e:	9908      	ldr	r1, [sp, #32]
 800b380:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b382:	3219      	adds	r2, #25
 800b384:	47b0      	blx	r6
 800b386:	3001      	adds	r0, #1
 800b388:	d100      	bne.n	800b38c <_printf_float+0x498>
 800b38a:	e611      	b.n	800afb0 <_printf_float+0xbc>
 800b38c:	3501      	adds	r5, #1
 800b38e:	68e3      	ldr	r3, [r4, #12]
 800b390:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b392:	1a9b      	subs	r3, r3, r2
 800b394:	42ab      	cmp	r3, r5
 800b396:	dcef      	bgt.n	800b378 <_printf_float+0x484>
 800b398:	e6e8      	b.n	800b16c <_printf_float+0x278>
 800b39a:	2500      	movs	r5, #0
 800b39c:	e7f7      	b.n	800b38e <_printf_float+0x49a>
 800b39e:	46c0      	nop			; (mov r8, r8)

0800b3a0 <_printf_common>:
 800b3a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3a2:	0016      	movs	r6, r2
 800b3a4:	9301      	str	r3, [sp, #4]
 800b3a6:	688a      	ldr	r2, [r1, #8]
 800b3a8:	690b      	ldr	r3, [r1, #16]
 800b3aa:	000c      	movs	r4, r1
 800b3ac:	9000      	str	r0, [sp, #0]
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	da00      	bge.n	800b3b4 <_printf_common+0x14>
 800b3b2:	0013      	movs	r3, r2
 800b3b4:	0022      	movs	r2, r4
 800b3b6:	6033      	str	r3, [r6, #0]
 800b3b8:	3243      	adds	r2, #67	; 0x43
 800b3ba:	7812      	ldrb	r2, [r2, #0]
 800b3bc:	2a00      	cmp	r2, #0
 800b3be:	d001      	beq.n	800b3c4 <_printf_common+0x24>
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	6033      	str	r3, [r6, #0]
 800b3c4:	6823      	ldr	r3, [r4, #0]
 800b3c6:	069b      	lsls	r3, r3, #26
 800b3c8:	d502      	bpl.n	800b3d0 <_printf_common+0x30>
 800b3ca:	6833      	ldr	r3, [r6, #0]
 800b3cc:	3302      	adds	r3, #2
 800b3ce:	6033      	str	r3, [r6, #0]
 800b3d0:	6822      	ldr	r2, [r4, #0]
 800b3d2:	2306      	movs	r3, #6
 800b3d4:	0015      	movs	r5, r2
 800b3d6:	401d      	ands	r5, r3
 800b3d8:	421a      	tst	r2, r3
 800b3da:	d027      	beq.n	800b42c <_printf_common+0x8c>
 800b3dc:	0023      	movs	r3, r4
 800b3de:	3343      	adds	r3, #67	; 0x43
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	1e5a      	subs	r2, r3, #1
 800b3e4:	4193      	sbcs	r3, r2
 800b3e6:	6822      	ldr	r2, [r4, #0]
 800b3e8:	0692      	lsls	r2, r2, #26
 800b3ea:	d430      	bmi.n	800b44e <_printf_common+0xae>
 800b3ec:	0022      	movs	r2, r4
 800b3ee:	9901      	ldr	r1, [sp, #4]
 800b3f0:	9800      	ldr	r0, [sp, #0]
 800b3f2:	9d08      	ldr	r5, [sp, #32]
 800b3f4:	3243      	adds	r2, #67	; 0x43
 800b3f6:	47a8      	blx	r5
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	d025      	beq.n	800b448 <_printf_common+0xa8>
 800b3fc:	2206      	movs	r2, #6
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	2500      	movs	r5, #0
 800b402:	4013      	ands	r3, r2
 800b404:	2b04      	cmp	r3, #4
 800b406:	d105      	bne.n	800b414 <_printf_common+0x74>
 800b408:	6833      	ldr	r3, [r6, #0]
 800b40a:	68e5      	ldr	r5, [r4, #12]
 800b40c:	1aed      	subs	r5, r5, r3
 800b40e:	43eb      	mvns	r3, r5
 800b410:	17db      	asrs	r3, r3, #31
 800b412:	401d      	ands	r5, r3
 800b414:	68a3      	ldr	r3, [r4, #8]
 800b416:	6922      	ldr	r2, [r4, #16]
 800b418:	4293      	cmp	r3, r2
 800b41a:	dd01      	ble.n	800b420 <_printf_common+0x80>
 800b41c:	1a9b      	subs	r3, r3, r2
 800b41e:	18ed      	adds	r5, r5, r3
 800b420:	2600      	movs	r6, #0
 800b422:	42b5      	cmp	r5, r6
 800b424:	d120      	bne.n	800b468 <_printf_common+0xc8>
 800b426:	2000      	movs	r0, #0
 800b428:	e010      	b.n	800b44c <_printf_common+0xac>
 800b42a:	3501      	adds	r5, #1
 800b42c:	68e3      	ldr	r3, [r4, #12]
 800b42e:	6832      	ldr	r2, [r6, #0]
 800b430:	1a9b      	subs	r3, r3, r2
 800b432:	42ab      	cmp	r3, r5
 800b434:	ddd2      	ble.n	800b3dc <_printf_common+0x3c>
 800b436:	0022      	movs	r2, r4
 800b438:	2301      	movs	r3, #1
 800b43a:	9901      	ldr	r1, [sp, #4]
 800b43c:	9800      	ldr	r0, [sp, #0]
 800b43e:	9f08      	ldr	r7, [sp, #32]
 800b440:	3219      	adds	r2, #25
 800b442:	47b8      	blx	r7
 800b444:	3001      	adds	r0, #1
 800b446:	d1f0      	bne.n	800b42a <_printf_common+0x8a>
 800b448:	2001      	movs	r0, #1
 800b44a:	4240      	negs	r0, r0
 800b44c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b44e:	2030      	movs	r0, #48	; 0x30
 800b450:	18e1      	adds	r1, r4, r3
 800b452:	3143      	adds	r1, #67	; 0x43
 800b454:	7008      	strb	r0, [r1, #0]
 800b456:	0021      	movs	r1, r4
 800b458:	1c5a      	adds	r2, r3, #1
 800b45a:	3145      	adds	r1, #69	; 0x45
 800b45c:	7809      	ldrb	r1, [r1, #0]
 800b45e:	18a2      	adds	r2, r4, r2
 800b460:	3243      	adds	r2, #67	; 0x43
 800b462:	3302      	adds	r3, #2
 800b464:	7011      	strb	r1, [r2, #0]
 800b466:	e7c1      	b.n	800b3ec <_printf_common+0x4c>
 800b468:	0022      	movs	r2, r4
 800b46a:	2301      	movs	r3, #1
 800b46c:	9901      	ldr	r1, [sp, #4]
 800b46e:	9800      	ldr	r0, [sp, #0]
 800b470:	9f08      	ldr	r7, [sp, #32]
 800b472:	321a      	adds	r2, #26
 800b474:	47b8      	blx	r7
 800b476:	3001      	adds	r0, #1
 800b478:	d0e6      	beq.n	800b448 <_printf_common+0xa8>
 800b47a:	3601      	adds	r6, #1
 800b47c:	e7d1      	b.n	800b422 <_printf_common+0x82>
	...

0800b480 <_printf_i>:
 800b480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b482:	b08b      	sub	sp, #44	; 0x2c
 800b484:	9206      	str	r2, [sp, #24]
 800b486:	000a      	movs	r2, r1
 800b488:	3243      	adds	r2, #67	; 0x43
 800b48a:	9307      	str	r3, [sp, #28]
 800b48c:	9005      	str	r0, [sp, #20]
 800b48e:	9204      	str	r2, [sp, #16]
 800b490:	7e0a      	ldrb	r2, [r1, #24]
 800b492:	000c      	movs	r4, r1
 800b494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b496:	2a78      	cmp	r2, #120	; 0x78
 800b498:	d809      	bhi.n	800b4ae <_printf_i+0x2e>
 800b49a:	2a62      	cmp	r2, #98	; 0x62
 800b49c:	d80b      	bhi.n	800b4b6 <_printf_i+0x36>
 800b49e:	2a00      	cmp	r2, #0
 800b4a0:	d100      	bne.n	800b4a4 <_printf_i+0x24>
 800b4a2:	e0be      	b.n	800b622 <_printf_i+0x1a2>
 800b4a4:	497c      	ldr	r1, [pc, #496]	; (800b698 <_printf_i+0x218>)
 800b4a6:	9103      	str	r1, [sp, #12]
 800b4a8:	2a58      	cmp	r2, #88	; 0x58
 800b4aa:	d100      	bne.n	800b4ae <_printf_i+0x2e>
 800b4ac:	e093      	b.n	800b5d6 <_printf_i+0x156>
 800b4ae:	0026      	movs	r6, r4
 800b4b0:	3642      	adds	r6, #66	; 0x42
 800b4b2:	7032      	strb	r2, [r6, #0]
 800b4b4:	e022      	b.n	800b4fc <_printf_i+0x7c>
 800b4b6:	0010      	movs	r0, r2
 800b4b8:	3863      	subs	r0, #99	; 0x63
 800b4ba:	2815      	cmp	r0, #21
 800b4bc:	d8f7      	bhi.n	800b4ae <_printf_i+0x2e>
 800b4be:	f7f4 fe35 	bl	800012c <__gnu_thumb1_case_shi>
 800b4c2:	0016      	.short	0x0016
 800b4c4:	fff6001f 	.word	0xfff6001f
 800b4c8:	fff6fff6 	.word	0xfff6fff6
 800b4cc:	001ffff6 	.word	0x001ffff6
 800b4d0:	fff6fff6 	.word	0xfff6fff6
 800b4d4:	fff6fff6 	.word	0xfff6fff6
 800b4d8:	003600a3 	.word	0x003600a3
 800b4dc:	fff60083 	.word	0xfff60083
 800b4e0:	00b4fff6 	.word	0x00b4fff6
 800b4e4:	0036fff6 	.word	0x0036fff6
 800b4e8:	fff6fff6 	.word	0xfff6fff6
 800b4ec:	0087      	.short	0x0087
 800b4ee:	0026      	movs	r6, r4
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	3642      	adds	r6, #66	; 0x42
 800b4f4:	1d11      	adds	r1, r2, #4
 800b4f6:	6019      	str	r1, [r3, #0]
 800b4f8:	6813      	ldr	r3, [r2, #0]
 800b4fa:	7033      	strb	r3, [r6, #0]
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	e0a2      	b.n	800b646 <_printf_i+0x1c6>
 800b500:	6818      	ldr	r0, [r3, #0]
 800b502:	6809      	ldr	r1, [r1, #0]
 800b504:	1d02      	adds	r2, r0, #4
 800b506:	060d      	lsls	r5, r1, #24
 800b508:	d50b      	bpl.n	800b522 <_printf_i+0xa2>
 800b50a:	6805      	ldr	r5, [r0, #0]
 800b50c:	601a      	str	r2, [r3, #0]
 800b50e:	2d00      	cmp	r5, #0
 800b510:	da03      	bge.n	800b51a <_printf_i+0x9a>
 800b512:	232d      	movs	r3, #45	; 0x2d
 800b514:	9a04      	ldr	r2, [sp, #16]
 800b516:	426d      	negs	r5, r5
 800b518:	7013      	strb	r3, [r2, #0]
 800b51a:	4b5f      	ldr	r3, [pc, #380]	; (800b698 <_printf_i+0x218>)
 800b51c:	270a      	movs	r7, #10
 800b51e:	9303      	str	r3, [sp, #12]
 800b520:	e01b      	b.n	800b55a <_printf_i+0xda>
 800b522:	6805      	ldr	r5, [r0, #0]
 800b524:	601a      	str	r2, [r3, #0]
 800b526:	0649      	lsls	r1, r1, #25
 800b528:	d5f1      	bpl.n	800b50e <_printf_i+0x8e>
 800b52a:	b22d      	sxth	r5, r5
 800b52c:	e7ef      	b.n	800b50e <_printf_i+0x8e>
 800b52e:	680d      	ldr	r5, [r1, #0]
 800b530:	6819      	ldr	r1, [r3, #0]
 800b532:	1d08      	adds	r0, r1, #4
 800b534:	6018      	str	r0, [r3, #0]
 800b536:	062e      	lsls	r6, r5, #24
 800b538:	d501      	bpl.n	800b53e <_printf_i+0xbe>
 800b53a:	680d      	ldr	r5, [r1, #0]
 800b53c:	e003      	b.n	800b546 <_printf_i+0xc6>
 800b53e:	066d      	lsls	r5, r5, #25
 800b540:	d5fb      	bpl.n	800b53a <_printf_i+0xba>
 800b542:	680d      	ldr	r5, [r1, #0]
 800b544:	b2ad      	uxth	r5, r5
 800b546:	4b54      	ldr	r3, [pc, #336]	; (800b698 <_printf_i+0x218>)
 800b548:	2708      	movs	r7, #8
 800b54a:	9303      	str	r3, [sp, #12]
 800b54c:	2a6f      	cmp	r2, #111	; 0x6f
 800b54e:	d000      	beq.n	800b552 <_printf_i+0xd2>
 800b550:	3702      	adds	r7, #2
 800b552:	0023      	movs	r3, r4
 800b554:	2200      	movs	r2, #0
 800b556:	3343      	adds	r3, #67	; 0x43
 800b558:	701a      	strb	r2, [r3, #0]
 800b55a:	6863      	ldr	r3, [r4, #4]
 800b55c:	60a3      	str	r3, [r4, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	db03      	blt.n	800b56a <_printf_i+0xea>
 800b562:	2104      	movs	r1, #4
 800b564:	6822      	ldr	r2, [r4, #0]
 800b566:	438a      	bics	r2, r1
 800b568:	6022      	str	r2, [r4, #0]
 800b56a:	2d00      	cmp	r5, #0
 800b56c:	d102      	bne.n	800b574 <_printf_i+0xf4>
 800b56e:	9e04      	ldr	r6, [sp, #16]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00c      	beq.n	800b58e <_printf_i+0x10e>
 800b574:	9e04      	ldr	r6, [sp, #16]
 800b576:	0028      	movs	r0, r5
 800b578:	0039      	movs	r1, r7
 800b57a:	f7f4 fe67 	bl	800024c <__aeabi_uidivmod>
 800b57e:	9b03      	ldr	r3, [sp, #12]
 800b580:	3e01      	subs	r6, #1
 800b582:	5c5b      	ldrb	r3, [r3, r1]
 800b584:	7033      	strb	r3, [r6, #0]
 800b586:	002b      	movs	r3, r5
 800b588:	0005      	movs	r5, r0
 800b58a:	429f      	cmp	r7, r3
 800b58c:	d9f3      	bls.n	800b576 <_printf_i+0xf6>
 800b58e:	2f08      	cmp	r7, #8
 800b590:	d109      	bne.n	800b5a6 <_printf_i+0x126>
 800b592:	6823      	ldr	r3, [r4, #0]
 800b594:	07db      	lsls	r3, r3, #31
 800b596:	d506      	bpl.n	800b5a6 <_printf_i+0x126>
 800b598:	6862      	ldr	r2, [r4, #4]
 800b59a:	6923      	ldr	r3, [r4, #16]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	dc02      	bgt.n	800b5a6 <_printf_i+0x126>
 800b5a0:	2330      	movs	r3, #48	; 0x30
 800b5a2:	3e01      	subs	r6, #1
 800b5a4:	7033      	strb	r3, [r6, #0]
 800b5a6:	9b04      	ldr	r3, [sp, #16]
 800b5a8:	1b9b      	subs	r3, r3, r6
 800b5aa:	6123      	str	r3, [r4, #16]
 800b5ac:	9b07      	ldr	r3, [sp, #28]
 800b5ae:	0021      	movs	r1, r4
 800b5b0:	9300      	str	r3, [sp, #0]
 800b5b2:	9805      	ldr	r0, [sp, #20]
 800b5b4:	9b06      	ldr	r3, [sp, #24]
 800b5b6:	aa09      	add	r2, sp, #36	; 0x24
 800b5b8:	f7ff fef2 	bl	800b3a0 <_printf_common>
 800b5bc:	3001      	adds	r0, #1
 800b5be:	d147      	bne.n	800b650 <_printf_i+0x1d0>
 800b5c0:	2001      	movs	r0, #1
 800b5c2:	4240      	negs	r0, r0
 800b5c4:	b00b      	add	sp, #44	; 0x2c
 800b5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5c8:	2220      	movs	r2, #32
 800b5ca:	6809      	ldr	r1, [r1, #0]
 800b5cc:	430a      	orrs	r2, r1
 800b5ce:	6022      	str	r2, [r4, #0]
 800b5d0:	2278      	movs	r2, #120	; 0x78
 800b5d2:	4932      	ldr	r1, [pc, #200]	; (800b69c <_printf_i+0x21c>)
 800b5d4:	9103      	str	r1, [sp, #12]
 800b5d6:	0021      	movs	r1, r4
 800b5d8:	3145      	adds	r1, #69	; 0x45
 800b5da:	700a      	strb	r2, [r1, #0]
 800b5dc:	6819      	ldr	r1, [r3, #0]
 800b5de:	6822      	ldr	r2, [r4, #0]
 800b5e0:	c920      	ldmia	r1!, {r5}
 800b5e2:	0610      	lsls	r0, r2, #24
 800b5e4:	d402      	bmi.n	800b5ec <_printf_i+0x16c>
 800b5e6:	0650      	lsls	r0, r2, #25
 800b5e8:	d500      	bpl.n	800b5ec <_printf_i+0x16c>
 800b5ea:	b2ad      	uxth	r5, r5
 800b5ec:	6019      	str	r1, [r3, #0]
 800b5ee:	07d3      	lsls	r3, r2, #31
 800b5f0:	d502      	bpl.n	800b5f8 <_printf_i+0x178>
 800b5f2:	2320      	movs	r3, #32
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	6023      	str	r3, [r4, #0]
 800b5f8:	2710      	movs	r7, #16
 800b5fa:	2d00      	cmp	r5, #0
 800b5fc:	d1a9      	bne.n	800b552 <_printf_i+0xd2>
 800b5fe:	2220      	movs	r2, #32
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	4393      	bics	r3, r2
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	e7a4      	b.n	800b552 <_printf_i+0xd2>
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	680d      	ldr	r5, [r1, #0]
 800b60c:	1d10      	adds	r0, r2, #4
 800b60e:	6949      	ldr	r1, [r1, #20]
 800b610:	6018      	str	r0, [r3, #0]
 800b612:	6813      	ldr	r3, [r2, #0]
 800b614:	062e      	lsls	r6, r5, #24
 800b616:	d501      	bpl.n	800b61c <_printf_i+0x19c>
 800b618:	6019      	str	r1, [r3, #0]
 800b61a:	e002      	b.n	800b622 <_printf_i+0x1a2>
 800b61c:	066d      	lsls	r5, r5, #25
 800b61e:	d5fb      	bpl.n	800b618 <_printf_i+0x198>
 800b620:	8019      	strh	r1, [r3, #0]
 800b622:	2300      	movs	r3, #0
 800b624:	9e04      	ldr	r6, [sp, #16]
 800b626:	6123      	str	r3, [r4, #16]
 800b628:	e7c0      	b.n	800b5ac <_printf_i+0x12c>
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	1d11      	adds	r1, r2, #4
 800b62e:	6019      	str	r1, [r3, #0]
 800b630:	6816      	ldr	r6, [r2, #0]
 800b632:	2100      	movs	r1, #0
 800b634:	0030      	movs	r0, r6
 800b636:	6862      	ldr	r2, [r4, #4]
 800b638:	f000 fd19 	bl	800c06e <memchr>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d001      	beq.n	800b644 <_printf_i+0x1c4>
 800b640:	1b80      	subs	r0, r0, r6
 800b642:	6060      	str	r0, [r4, #4]
 800b644:	6863      	ldr	r3, [r4, #4]
 800b646:	6123      	str	r3, [r4, #16]
 800b648:	2300      	movs	r3, #0
 800b64a:	9a04      	ldr	r2, [sp, #16]
 800b64c:	7013      	strb	r3, [r2, #0]
 800b64e:	e7ad      	b.n	800b5ac <_printf_i+0x12c>
 800b650:	0032      	movs	r2, r6
 800b652:	6923      	ldr	r3, [r4, #16]
 800b654:	9906      	ldr	r1, [sp, #24]
 800b656:	9805      	ldr	r0, [sp, #20]
 800b658:	9d07      	ldr	r5, [sp, #28]
 800b65a:	47a8      	blx	r5
 800b65c:	3001      	adds	r0, #1
 800b65e:	d0af      	beq.n	800b5c0 <_printf_i+0x140>
 800b660:	6823      	ldr	r3, [r4, #0]
 800b662:	079b      	lsls	r3, r3, #30
 800b664:	d415      	bmi.n	800b692 <_printf_i+0x212>
 800b666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b668:	68e0      	ldr	r0, [r4, #12]
 800b66a:	4298      	cmp	r0, r3
 800b66c:	daaa      	bge.n	800b5c4 <_printf_i+0x144>
 800b66e:	0018      	movs	r0, r3
 800b670:	e7a8      	b.n	800b5c4 <_printf_i+0x144>
 800b672:	0022      	movs	r2, r4
 800b674:	2301      	movs	r3, #1
 800b676:	9906      	ldr	r1, [sp, #24]
 800b678:	9805      	ldr	r0, [sp, #20]
 800b67a:	9e07      	ldr	r6, [sp, #28]
 800b67c:	3219      	adds	r2, #25
 800b67e:	47b0      	blx	r6
 800b680:	3001      	adds	r0, #1
 800b682:	d09d      	beq.n	800b5c0 <_printf_i+0x140>
 800b684:	3501      	adds	r5, #1
 800b686:	68e3      	ldr	r3, [r4, #12]
 800b688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b68a:	1a9b      	subs	r3, r3, r2
 800b68c:	42ab      	cmp	r3, r5
 800b68e:	dcf0      	bgt.n	800b672 <_printf_i+0x1f2>
 800b690:	e7e9      	b.n	800b666 <_printf_i+0x1e6>
 800b692:	2500      	movs	r5, #0
 800b694:	e7f7      	b.n	800b686 <_printf_i+0x206>
 800b696:	46c0      	nop			; (mov r8, r8)
 800b698:	0800edbb 	.word	0x0800edbb
 800b69c:	0800edcc 	.word	0x0800edcc

0800b6a0 <_scanf_float>:
 800b6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6a2:	b08b      	sub	sp, #44	; 0x2c
 800b6a4:	0016      	movs	r6, r2
 800b6a6:	9002      	str	r0, [sp, #8]
 800b6a8:	22ae      	movs	r2, #174	; 0xae
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	9307      	str	r3, [sp, #28]
 800b6ae:	688b      	ldr	r3, [r1, #8]
 800b6b0:	000f      	movs	r7, r1
 800b6b2:	1e59      	subs	r1, r3, #1
 800b6b4:	0052      	lsls	r2, r2, #1
 800b6b6:	9006      	str	r0, [sp, #24]
 800b6b8:	4291      	cmp	r1, r2
 800b6ba:	d905      	bls.n	800b6c8 <_scanf_float+0x28>
 800b6bc:	3b5e      	subs	r3, #94	; 0x5e
 800b6be:	3bff      	subs	r3, #255	; 0xff
 800b6c0:	9306      	str	r3, [sp, #24]
 800b6c2:	235e      	movs	r3, #94	; 0x5e
 800b6c4:	33ff      	adds	r3, #255	; 0xff
 800b6c6:	60bb      	str	r3, [r7, #8]
 800b6c8:	23f0      	movs	r3, #240	; 0xf0
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	00db      	lsls	r3, r3, #3
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	603b      	str	r3, [r7, #0]
 800b6d2:	003b      	movs	r3, r7
 800b6d4:	2400      	movs	r4, #0
 800b6d6:	331c      	adds	r3, #28
 800b6d8:	001d      	movs	r5, r3
 800b6da:	9304      	str	r3, [sp, #16]
 800b6dc:	9403      	str	r4, [sp, #12]
 800b6de:	9409      	str	r4, [sp, #36]	; 0x24
 800b6e0:	9408      	str	r4, [sp, #32]
 800b6e2:	9401      	str	r4, [sp, #4]
 800b6e4:	9405      	str	r4, [sp, #20]
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	2a00      	cmp	r2, #0
 800b6ea:	d00a      	beq.n	800b702 <_scanf_float+0x62>
 800b6ec:	6833      	ldr	r3, [r6, #0]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	2b4e      	cmp	r3, #78	; 0x4e
 800b6f2:	d844      	bhi.n	800b77e <_scanf_float+0xde>
 800b6f4:	0018      	movs	r0, r3
 800b6f6:	2b40      	cmp	r3, #64	; 0x40
 800b6f8:	d82c      	bhi.n	800b754 <_scanf_float+0xb4>
 800b6fa:	382b      	subs	r0, #43	; 0x2b
 800b6fc:	b2c1      	uxtb	r1, r0
 800b6fe:	290e      	cmp	r1, #14
 800b700:	d92a      	bls.n	800b758 <_scanf_float+0xb8>
 800b702:	9b01      	ldr	r3, [sp, #4]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d003      	beq.n	800b710 <_scanf_float+0x70>
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	4aa3      	ldr	r2, [pc, #652]	; (800b998 <_scanf_float+0x2f8>)
 800b70c:	4013      	ands	r3, r2
 800b70e:	603b      	str	r3, [r7, #0]
 800b710:	9b03      	ldr	r3, [sp, #12]
 800b712:	3b01      	subs	r3, #1
 800b714:	2b01      	cmp	r3, #1
 800b716:	d900      	bls.n	800b71a <_scanf_float+0x7a>
 800b718:	e0f9      	b.n	800b90e <_scanf_float+0x26e>
 800b71a:	24be      	movs	r4, #190	; 0xbe
 800b71c:	0064      	lsls	r4, r4, #1
 800b71e:	9b04      	ldr	r3, [sp, #16]
 800b720:	429d      	cmp	r5, r3
 800b722:	d900      	bls.n	800b726 <_scanf_float+0x86>
 800b724:	e0e9      	b.n	800b8fa <_scanf_float+0x25a>
 800b726:	2301      	movs	r3, #1
 800b728:	9303      	str	r3, [sp, #12]
 800b72a:	e183      	b.n	800ba34 <_scanf_float+0x394>
 800b72c:	0018      	movs	r0, r3
 800b72e:	3861      	subs	r0, #97	; 0x61
 800b730:	280d      	cmp	r0, #13
 800b732:	d8e6      	bhi.n	800b702 <_scanf_float+0x62>
 800b734:	f7f4 fcfa 	bl	800012c <__gnu_thumb1_case_shi>
 800b738:	ffe50083 	.word	0xffe50083
 800b73c:	ffe5ffe5 	.word	0xffe5ffe5
 800b740:	00a200b6 	.word	0x00a200b6
 800b744:	ffe5ffe5 	.word	0xffe5ffe5
 800b748:	ffe50089 	.word	0xffe50089
 800b74c:	ffe5ffe5 	.word	0xffe5ffe5
 800b750:	0065ffe5 	.word	0x0065ffe5
 800b754:	3841      	subs	r0, #65	; 0x41
 800b756:	e7eb      	b.n	800b730 <_scanf_float+0x90>
 800b758:	280e      	cmp	r0, #14
 800b75a:	d8d2      	bhi.n	800b702 <_scanf_float+0x62>
 800b75c:	f7f4 fce6 	bl	800012c <__gnu_thumb1_case_shi>
 800b760:	ffd1004b 	.word	0xffd1004b
 800b764:	0098004b 	.word	0x0098004b
 800b768:	0020ffd1 	.word	0x0020ffd1
 800b76c:	00400040 	.word	0x00400040
 800b770:	00400040 	.word	0x00400040
 800b774:	00400040 	.word	0x00400040
 800b778:	00400040 	.word	0x00400040
 800b77c:	0040      	.short	0x0040
 800b77e:	2b6e      	cmp	r3, #110	; 0x6e
 800b780:	d809      	bhi.n	800b796 <_scanf_float+0xf6>
 800b782:	2b60      	cmp	r3, #96	; 0x60
 800b784:	d8d2      	bhi.n	800b72c <_scanf_float+0x8c>
 800b786:	2b54      	cmp	r3, #84	; 0x54
 800b788:	d07d      	beq.n	800b886 <_scanf_float+0x1e6>
 800b78a:	2b59      	cmp	r3, #89	; 0x59
 800b78c:	d1b9      	bne.n	800b702 <_scanf_float+0x62>
 800b78e:	2c07      	cmp	r4, #7
 800b790:	d1b7      	bne.n	800b702 <_scanf_float+0x62>
 800b792:	2408      	movs	r4, #8
 800b794:	e02c      	b.n	800b7f0 <_scanf_float+0x150>
 800b796:	2b74      	cmp	r3, #116	; 0x74
 800b798:	d075      	beq.n	800b886 <_scanf_float+0x1e6>
 800b79a:	2b79      	cmp	r3, #121	; 0x79
 800b79c:	d0f7      	beq.n	800b78e <_scanf_float+0xee>
 800b79e:	e7b0      	b.n	800b702 <_scanf_float+0x62>
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	05c8      	lsls	r0, r1, #23
 800b7a4:	d51c      	bpl.n	800b7e0 <_scanf_float+0x140>
 800b7a6:	2380      	movs	r3, #128	; 0x80
 800b7a8:	4399      	bics	r1, r3
 800b7aa:	9b01      	ldr	r3, [sp, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	9301      	str	r3, [sp, #4]
 800b7b2:	9b06      	ldr	r3, [sp, #24]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d003      	beq.n	800b7c0 <_scanf_float+0x120>
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	3201      	adds	r2, #1
 800b7bc:	9306      	str	r3, [sp, #24]
 800b7be:	60ba      	str	r2, [r7, #8]
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	60bb      	str	r3, [r7, #8]
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	613b      	str	r3, [r7, #16]
 800b7cc:	6873      	ldr	r3, [r6, #4]
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	6073      	str	r3, [r6, #4]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	dc00      	bgt.n	800b7d8 <_scanf_float+0x138>
 800b7d6:	e086      	b.n	800b8e6 <_scanf_float+0x246>
 800b7d8:	6833      	ldr	r3, [r6, #0]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	6033      	str	r3, [r6, #0]
 800b7de:	e782      	b.n	800b6e6 <_scanf_float+0x46>
 800b7e0:	9a03      	ldr	r2, [sp, #12]
 800b7e2:	1912      	adds	r2, r2, r4
 800b7e4:	2a00      	cmp	r2, #0
 800b7e6:	d18c      	bne.n	800b702 <_scanf_float+0x62>
 800b7e8:	683a      	ldr	r2, [r7, #0]
 800b7ea:	496c      	ldr	r1, [pc, #432]	; (800b99c <_scanf_float+0x2fc>)
 800b7ec:	400a      	ands	r2, r1
 800b7ee:	603a      	str	r2, [r7, #0]
 800b7f0:	702b      	strb	r3, [r5, #0]
 800b7f2:	3501      	adds	r5, #1
 800b7f4:	e7e4      	b.n	800b7c0 <_scanf_float+0x120>
 800b7f6:	2180      	movs	r1, #128	; 0x80
 800b7f8:	683a      	ldr	r2, [r7, #0]
 800b7fa:	420a      	tst	r2, r1
 800b7fc:	d081      	beq.n	800b702 <_scanf_float+0x62>
 800b7fe:	438a      	bics	r2, r1
 800b800:	e7f5      	b.n	800b7ee <_scanf_float+0x14e>
 800b802:	9a03      	ldr	r2, [sp, #12]
 800b804:	2a00      	cmp	r2, #0
 800b806:	d10f      	bne.n	800b828 <_scanf_float+0x188>
 800b808:	9a01      	ldr	r2, [sp, #4]
 800b80a:	2a00      	cmp	r2, #0
 800b80c:	d10f      	bne.n	800b82e <_scanf_float+0x18e>
 800b80e:	683a      	ldr	r2, [r7, #0]
 800b810:	21e0      	movs	r1, #224	; 0xe0
 800b812:	0010      	movs	r0, r2
 800b814:	00c9      	lsls	r1, r1, #3
 800b816:	4008      	ands	r0, r1
 800b818:	4288      	cmp	r0, r1
 800b81a:	d108      	bne.n	800b82e <_scanf_float+0x18e>
 800b81c:	4960      	ldr	r1, [pc, #384]	; (800b9a0 <_scanf_float+0x300>)
 800b81e:	400a      	ands	r2, r1
 800b820:	603a      	str	r2, [r7, #0]
 800b822:	2201      	movs	r2, #1
 800b824:	9203      	str	r2, [sp, #12]
 800b826:	e7e3      	b.n	800b7f0 <_scanf_float+0x150>
 800b828:	9a03      	ldr	r2, [sp, #12]
 800b82a:	2a02      	cmp	r2, #2
 800b82c:	d059      	beq.n	800b8e2 <_scanf_float+0x242>
 800b82e:	2c01      	cmp	r4, #1
 800b830:	d002      	beq.n	800b838 <_scanf_float+0x198>
 800b832:	2c04      	cmp	r4, #4
 800b834:	d000      	beq.n	800b838 <_scanf_float+0x198>
 800b836:	e764      	b.n	800b702 <_scanf_float+0x62>
 800b838:	3401      	adds	r4, #1
 800b83a:	b2e4      	uxtb	r4, r4
 800b83c:	e7d8      	b.n	800b7f0 <_scanf_float+0x150>
 800b83e:	9a03      	ldr	r2, [sp, #12]
 800b840:	2a01      	cmp	r2, #1
 800b842:	d000      	beq.n	800b846 <_scanf_float+0x1a6>
 800b844:	e75d      	b.n	800b702 <_scanf_float+0x62>
 800b846:	2202      	movs	r2, #2
 800b848:	e7ec      	b.n	800b824 <_scanf_float+0x184>
 800b84a:	2c00      	cmp	r4, #0
 800b84c:	d110      	bne.n	800b870 <_scanf_float+0x1d0>
 800b84e:	9a01      	ldr	r2, [sp, #4]
 800b850:	2a00      	cmp	r2, #0
 800b852:	d000      	beq.n	800b856 <_scanf_float+0x1b6>
 800b854:	e758      	b.n	800b708 <_scanf_float+0x68>
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	21e0      	movs	r1, #224	; 0xe0
 800b85a:	0010      	movs	r0, r2
 800b85c:	00c9      	lsls	r1, r1, #3
 800b85e:	4008      	ands	r0, r1
 800b860:	4288      	cmp	r0, r1
 800b862:	d000      	beq.n	800b866 <_scanf_float+0x1c6>
 800b864:	e754      	b.n	800b710 <_scanf_float+0x70>
 800b866:	494e      	ldr	r1, [pc, #312]	; (800b9a0 <_scanf_float+0x300>)
 800b868:	3401      	adds	r4, #1
 800b86a:	400a      	ands	r2, r1
 800b86c:	603a      	str	r2, [r7, #0]
 800b86e:	e7bf      	b.n	800b7f0 <_scanf_float+0x150>
 800b870:	21fd      	movs	r1, #253	; 0xfd
 800b872:	1ee2      	subs	r2, r4, #3
 800b874:	420a      	tst	r2, r1
 800b876:	d000      	beq.n	800b87a <_scanf_float+0x1da>
 800b878:	e743      	b.n	800b702 <_scanf_float+0x62>
 800b87a:	e7dd      	b.n	800b838 <_scanf_float+0x198>
 800b87c:	2c02      	cmp	r4, #2
 800b87e:	d000      	beq.n	800b882 <_scanf_float+0x1e2>
 800b880:	e73f      	b.n	800b702 <_scanf_float+0x62>
 800b882:	2403      	movs	r4, #3
 800b884:	e7b4      	b.n	800b7f0 <_scanf_float+0x150>
 800b886:	2c06      	cmp	r4, #6
 800b888:	d000      	beq.n	800b88c <_scanf_float+0x1ec>
 800b88a:	e73a      	b.n	800b702 <_scanf_float+0x62>
 800b88c:	2407      	movs	r4, #7
 800b88e:	e7af      	b.n	800b7f0 <_scanf_float+0x150>
 800b890:	683a      	ldr	r2, [r7, #0]
 800b892:	0591      	lsls	r1, r2, #22
 800b894:	d400      	bmi.n	800b898 <_scanf_float+0x1f8>
 800b896:	e734      	b.n	800b702 <_scanf_float+0x62>
 800b898:	4942      	ldr	r1, [pc, #264]	; (800b9a4 <_scanf_float+0x304>)
 800b89a:	400a      	ands	r2, r1
 800b89c:	603a      	str	r2, [r7, #0]
 800b89e:	9a01      	ldr	r2, [sp, #4]
 800b8a0:	9205      	str	r2, [sp, #20]
 800b8a2:	e7a5      	b.n	800b7f0 <_scanf_float+0x150>
 800b8a4:	21a0      	movs	r1, #160	; 0xa0
 800b8a6:	2080      	movs	r0, #128	; 0x80
 800b8a8:	683a      	ldr	r2, [r7, #0]
 800b8aa:	00c9      	lsls	r1, r1, #3
 800b8ac:	4011      	ands	r1, r2
 800b8ae:	00c0      	lsls	r0, r0, #3
 800b8b0:	4281      	cmp	r1, r0
 800b8b2:	d006      	beq.n	800b8c2 <_scanf_float+0x222>
 800b8b4:	4202      	tst	r2, r0
 800b8b6:	d100      	bne.n	800b8ba <_scanf_float+0x21a>
 800b8b8:	e723      	b.n	800b702 <_scanf_float+0x62>
 800b8ba:	9901      	ldr	r1, [sp, #4]
 800b8bc:	2900      	cmp	r1, #0
 800b8be:	d100      	bne.n	800b8c2 <_scanf_float+0x222>
 800b8c0:	e726      	b.n	800b710 <_scanf_float+0x70>
 800b8c2:	0591      	lsls	r1, r2, #22
 800b8c4:	d404      	bmi.n	800b8d0 <_scanf_float+0x230>
 800b8c6:	9901      	ldr	r1, [sp, #4]
 800b8c8:	9805      	ldr	r0, [sp, #20]
 800b8ca:	9509      	str	r5, [sp, #36]	; 0x24
 800b8cc:	1a09      	subs	r1, r1, r0
 800b8ce:	9108      	str	r1, [sp, #32]
 800b8d0:	4933      	ldr	r1, [pc, #204]	; (800b9a0 <_scanf_float+0x300>)
 800b8d2:	400a      	ands	r2, r1
 800b8d4:	21c0      	movs	r1, #192	; 0xc0
 800b8d6:	0049      	lsls	r1, r1, #1
 800b8d8:	430a      	orrs	r2, r1
 800b8da:	603a      	str	r2, [r7, #0]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	9201      	str	r2, [sp, #4]
 800b8e0:	e786      	b.n	800b7f0 <_scanf_float+0x150>
 800b8e2:	2203      	movs	r2, #3
 800b8e4:	e79e      	b.n	800b824 <_scanf_float+0x184>
 800b8e6:	23c0      	movs	r3, #192	; 0xc0
 800b8e8:	005b      	lsls	r3, r3, #1
 800b8ea:	0031      	movs	r1, r6
 800b8ec:	58fb      	ldr	r3, [r7, r3]
 800b8ee:	9802      	ldr	r0, [sp, #8]
 800b8f0:	4798      	blx	r3
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d100      	bne.n	800b8f8 <_scanf_float+0x258>
 800b8f6:	e6f6      	b.n	800b6e6 <_scanf_float+0x46>
 800b8f8:	e703      	b.n	800b702 <_scanf_float+0x62>
 800b8fa:	3d01      	subs	r5, #1
 800b8fc:	593b      	ldr	r3, [r7, r4]
 800b8fe:	0032      	movs	r2, r6
 800b900:	7829      	ldrb	r1, [r5, #0]
 800b902:	9802      	ldr	r0, [sp, #8]
 800b904:	4798      	blx	r3
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	3b01      	subs	r3, #1
 800b90a:	613b      	str	r3, [r7, #16]
 800b90c:	e707      	b.n	800b71e <_scanf_float+0x7e>
 800b90e:	1e63      	subs	r3, r4, #1
 800b910:	2b06      	cmp	r3, #6
 800b912:	d80e      	bhi.n	800b932 <_scanf_float+0x292>
 800b914:	9503      	str	r5, [sp, #12]
 800b916:	2c02      	cmp	r4, #2
 800b918:	d920      	bls.n	800b95c <_scanf_float+0x2bc>
 800b91a:	1b63      	subs	r3, r4, r5
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	9306      	str	r3, [sp, #24]
 800b920:	9b03      	ldr	r3, [sp, #12]
 800b922:	9a06      	ldr	r2, [sp, #24]
 800b924:	189b      	adds	r3, r3, r2
 800b926:	b2db      	uxtb	r3, r3
 800b928:	2b03      	cmp	r3, #3
 800b92a:	d827      	bhi.n	800b97c <_scanf_float+0x2dc>
 800b92c:	3c03      	subs	r4, #3
 800b92e:	b2e4      	uxtb	r4, r4
 800b930:	1b2d      	subs	r5, r5, r4
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	05da      	lsls	r2, r3, #23
 800b936:	d552      	bpl.n	800b9de <_scanf_float+0x33e>
 800b938:	055b      	lsls	r3, r3, #21
 800b93a:	d535      	bpl.n	800b9a8 <_scanf_float+0x308>
 800b93c:	24be      	movs	r4, #190	; 0xbe
 800b93e:	0064      	lsls	r4, r4, #1
 800b940:	9b04      	ldr	r3, [sp, #16]
 800b942:	429d      	cmp	r5, r3
 800b944:	d800      	bhi.n	800b948 <_scanf_float+0x2a8>
 800b946:	e6ee      	b.n	800b726 <_scanf_float+0x86>
 800b948:	3d01      	subs	r5, #1
 800b94a:	593b      	ldr	r3, [r7, r4]
 800b94c:	0032      	movs	r2, r6
 800b94e:	7829      	ldrb	r1, [r5, #0]
 800b950:	9802      	ldr	r0, [sp, #8]
 800b952:	4798      	blx	r3
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	3b01      	subs	r3, #1
 800b958:	613b      	str	r3, [r7, #16]
 800b95a:	e7f1      	b.n	800b940 <_scanf_float+0x2a0>
 800b95c:	24be      	movs	r4, #190	; 0xbe
 800b95e:	0064      	lsls	r4, r4, #1
 800b960:	9b04      	ldr	r3, [sp, #16]
 800b962:	429d      	cmp	r5, r3
 800b964:	d800      	bhi.n	800b968 <_scanf_float+0x2c8>
 800b966:	e6de      	b.n	800b726 <_scanf_float+0x86>
 800b968:	3d01      	subs	r5, #1
 800b96a:	593b      	ldr	r3, [r7, r4]
 800b96c:	0032      	movs	r2, r6
 800b96e:	7829      	ldrb	r1, [r5, #0]
 800b970:	9802      	ldr	r0, [sp, #8]
 800b972:	4798      	blx	r3
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	3b01      	subs	r3, #1
 800b978:	613b      	str	r3, [r7, #16]
 800b97a:	e7f1      	b.n	800b960 <_scanf_float+0x2c0>
 800b97c:	9b03      	ldr	r3, [sp, #12]
 800b97e:	0032      	movs	r2, r6
 800b980:	3b01      	subs	r3, #1
 800b982:	7819      	ldrb	r1, [r3, #0]
 800b984:	9303      	str	r3, [sp, #12]
 800b986:	23be      	movs	r3, #190	; 0xbe
 800b988:	005b      	lsls	r3, r3, #1
 800b98a:	58fb      	ldr	r3, [r7, r3]
 800b98c:	9802      	ldr	r0, [sp, #8]
 800b98e:	4798      	blx	r3
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	3b01      	subs	r3, #1
 800b994:	613b      	str	r3, [r7, #16]
 800b996:	e7c3      	b.n	800b920 <_scanf_float+0x280>
 800b998:	fffffeff 	.word	0xfffffeff
 800b99c:	fffffe7f 	.word	0xfffffe7f
 800b9a0:	fffff87f 	.word	0xfffff87f
 800b9a4:	fffffd7f 	.word	0xfffffd7f
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	1e6c      	subs	r4, r5, #1
 800b9ac:	7821      	ldrb	r1, [r4, #0]
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	613b      	str	r3, [r7, #16]
 800b9b2:	2965      	cmp	r1, #101	; 0x65
 800b9b4:	d00c      	beq.n	800b9d0 <_scanf_float+0x330>
 800b9b6:	2945      	cmp	r1, #69	; 0x45
 800b9b8:	d00a      	beq.n	800b9d0 <_scanf_float+0x330>
 800b9ba:	23be      	movs	r3, #190	; 0xbe
 800b9bc:	005b      	lsls	r3, r3, #1
 800b9be:	58fb      	ldr	r3, [r7, r3]
 800b9c0:	0032      	movs	r2, r6
 800b9c2:	9802      	ldr	r0, [sp, #8]
 800b9c4:	4798      	blx	r3
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	1eac      	subs	r4, r5, #2
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	7821      	ldrb	r1, [r4, #0]
 800b9ce:	613b      	str	r3, [r7, #16]
 800b9d0:	23be      	movs	r3, #190	; 0xbe
 800b9d2:	005b      	lsls	r3, r3, #1
 800b9d4:	0032      	movs	r2, r6
 800b9d6:	58fb      	ldr	r3, [r7, r3]
 800b9d8:	9802      	ldr	r0, [sp, #8]
 800b9da:	4798      	blx	r3
 800b9dc:	0025      	movs	r5, r4
 800b9de:	683a      	ldr	r2, [r7, #0]
 800b9e0:	2310      	movs	r3, #16
 800b9e2:	0011      	movs	r1, r2
 800b9e4:	4019      	ands	r1, r3
 800b9e6:	9103      	str	r1, [sp, #12]
 800b9e8:	421a      	tst	r2, r3
 800b9ea:	d15b      	bne.n	800baa4 <_scanf_float+0x404>
 800b9ec:	22c0      	movs	r2, #192	; 0xc0
 800b9ee:	7029      	strb	r1, [r5, #0]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	00d2      	lsls	r2, r2, #3
 800b9f4:	4013      	ands	r3, r2
 800b9f6:	2280      	movs	r2, #128	; 0x80
 800b9f8:	00d2      	lsls	r2, r2, #3
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d11d      	bne.n	800ba3a <_scanf_float+0x39a>
 800b9fe:	9b05      	ldr	r3, [sp, #20]
 800ba00:	9a01      	ldr	r2, [sp, #4]
 800ba02:	9901      	ldr	r1, [sp, #4]
 800ba04:	1a9a      	subs	r2, r3, r2
 800ba06:	428b      	cmp	r3, r1
 800ba08:	d124      	bne.n	800ba54 <_scanf_float+0x3b4>
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	9904      	ldr	r1, [sp, #16]
 800ba0e:	9802      	ldr	r0, [sp, #8]
 800ba10:	f7ff f936 	bl	800ac80 <_strtod_r>
 800ba14:	9b07      	ldr	r3, [sp, #28]
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	0004      	movs	r4, r0
 800ba1a:	000d      	movs	r5, r1
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	0791      	lsls	r1, r2, #30
 800ba20:	d525      	bpl.n	800ba6e <_scanf_float+0x3ce>
 800ba22:	9907      	ldr	r1, [sp, #28]
 800ba24:	1d1a      	adds	r2, r3, #4
 800ba26:	600a      	str	r2, [r1, #0]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	601c      	str	r4, [r3, #0]
 800ba2c:	605d      	str	r5, [r3, #4]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	3301      	adds	r3, #1
 800ba32:	60fb      	str	r3, [r7, #12]
 800ba34:	9803      	ldr	r0, [sp, #12]
 800ba36:	b00b      	add	sp, #44	; 0x2c
 800ba38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba3a:	9b08      	ldr	r3, [sp, #32]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d0e4      	beq.n	800ba0a <_scanf_float+0x36a>
 800ba40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba42:	9a03      	ldr	r2, [sp, #12]
 800ba44:	1c59      	adds	r1, r3, #1
 800ba46:	9802      	ldr	r0, [sp, #8]
 800ba48:	230a      	movs	r3, #10
 800ba4a:	f7ff f9a7 	bl	800ad9c <_strtol_r>
 800ba4e:	9b08      	ldr	r3, [sp, #32]
 800ba50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ba52:	1ac2      	subs	r2, r0, r3
 800ba54:	003b      	movs	r3, r7
 800ba56:	3370      	adds	r3, #112	; 0x70
 800ba58:	33ff      	adds	r3, #255	; 0xff
 800ba5a:	429d      	cmp	r5, r3
 800ba5c:	d302      	bcc.n	800ba64 <_scanf_float+0x3c4>
 800ba5e:	003d      	movs	r5, r7
 800ba60:	356f      	adds	r5, #111	; 0x6f
 800ba62:	35ff      	adds	r5, #255	; 0xff
 800ba64:	0028      	movs	r0, r5
 800ba66:	4910      	ldr	r1, [pc, #64]	; (800baa8 <_scanf_float+0x408>)
 800ba68:	f000 f956 	bl	800bd18 <siprintf>
 800ba6c:	e7cd      	b.n	800ba0a <_scanf_float+0x36a>
 800ba6e:	1d19      	adds	r1, r3, #4
 800ba70:	0752      	lsls	r2, r2, #29
 800ba72:	d502      	bpl.n	800ba7a <_scanf_float+0x3da>
 800ba74:	9a07      	ldr	r2, [sp, #28]
 800ba76:	6011      	str	r1, [r2, #0]
 800ba78:	e7d6      	b.n	800ba28 <_scanf_float+0x388>
 800ba7a:	9a07      	ldr	r2, [sp, #28]
 800ba7c:	0020      	movs	r0, r4
 800ba7e:	6011      	str	r1, [r2, #0]
 800ba80:	681e      	ldr	r6, [r3, #0]
 800ba82:	0022      	movs	r2, r4
 800ba84:	002b      	movs	r3, r5
 800ba86:	0029      	movs	r1, r5
 800ba88:	f7f7 f886 	bl	8002b98 <__aeabi_dcmpun>
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d004      	beq.n	800ba9a <_scanf_float+0x3fa>
 800ba90:	4806      	ldr	r0, [pc, #24]	; (800baac <_scanf_float+0x40c>)
 800ba92:	f000 fb07 	bl	800c0a4 <nanf>
 800ba96:	6030      	str	r0, [r6, #0]
 800ba98:	e7c9      	b.n	800ba2e <_scanf_float+0x38e>
 800ba9a:	0020      	movs	r0, r4
 800ba9c:	0029      	movs	r1, r5
 800ba9e:	f7f7 f96d 	bl	8002d7c <__aeabi_d2f>
 800baa2:	e7f8      	b.n	800ba96 <_scanf_float+0x3f6>
 800baa4:	2300      	movs	r3, #0
 800baa6:	e63f      	b.n	800b728 <_scanf_float+0x88>
 800baa8:	0800eddd 	.word	0x0800eddd
 800baac:	0800f078 	.word	0x0800f078

0800bab0 <std>:
 800bab0:	2300      	movs	r3, #0
 800bab2:	b510      	push	{r4, lr}
 800bab4:	0004      	movs	r4, r0
 800bab6:	6003      	str	r3, [r0, #0]
 800bab8:	6043      	str	r3, [r0, #4]
 800baba:	6083      	str	r3, [r0, #8]
 800babc:	8181      	strh	r1, [r0, #12]
 800babe:	6643      	str	r3, [r0, #100]	; 0x64
 800bac0:	81c2      	strh	r2, [r0, #14]
 800bac2:	6103      	str	r3, [r0, #16]
 800bac4:	6143      	str	r3, [r0, #20]
 800bac6:	6183      	str	r3, [r0, #24]
 800bac8:	0019      	movs	r1, r3
 800baca:	2208      	movs	r2, #8
 800bacc:	305c      	adds	r0, #92	; 0x5c
 800bace:	f000 fa35 	bl	800bf3c <memset>
 800bad2:	4b0b      	ldr	r3, [pc, #44]	; (800bb00 <std+0x50>)
 800bad4:	6224      	str	r4, [r4, #32]
 800bad6:	6263      	str	r3, [r4, #36]	; 0x24
 800bad8:	4b0a      	ldr	r3, [pc, #40]	; (800bb04 <std+0x54>)
 800bada:	62a3      	str	r3, [r4, #40]	; 0x28
 800badc:	4b0a      	ldr	r3, [pc, #40]	; (800bb08 <std+0x58>)
 800bade:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bae0:	4b0a      	ldr	r3, [pc, #40]	; (800bb0c <std+0x5c>)
 800bae2:	6323      	str	r3, [r4, #48]	; 0x30
 800bae4:	4b0a      	ldr	r3, [pc, #40]	; (800bb10 <std+0x60>)
 800bae6:	429c      	cmp	r4, r3
 800bae8:	d005      	beq.n	800baf6 <std+0x46>
 800baea:	4b0a      	ldr	r3, [pc, #40]	; (800bb14 <std+0x64>)
 800baec:	429c      	cmp	r4, r3
 800baee:	d002      	beq.n	800baf6 <std+0x46>
 800baf0:	4b09      	ldr	r3, [pc, #36]	; (800bb18 <std+0x68>)
 800baf2:	429c      	cmp	r4, r3
 800baf4:	d103      	bne.n	800bafe <std+0x4e>
 800baf6:	0020      	movs	r0, r4
 800baf8:	3058      	adds	r0, #88	; 0x58
 800bafa:	f000 fab5 	bl	800c068 <__retarget_lock_init_recursive>
 800bafe:	bd10      	pop	{r4, pc}
 800bb00:	0800bd59 	.word	0x0800bd59
 800bb04:	0800bd81 	.word	0x0800bd81
 800bb08:	0800bdb9 	.word	0x0800bdb9
 800bb0c:	0800bde5 	.word	0x0800bde5
 800bb10:	2000069c 	.word	0x2000069c
 800bb14:	20000704 	.word	0x20000704
 800bb18:	2000076c 	.word	0x2000076c

0800bb1c <stdio_exit_handler>:
 800bb1c:	b510      	push	{r4, lr}
 800bb1e:	4a03      	ldr	r2, [pc, #12]	; (800bb2c <stdio_exit_handler+0x10>)
 800bb20:	4903      	ldr	r1, [pc, #12]	; (800bb30 <stdio_exit_handler+0x14>)
 800bb22:	4804      	ldr	r0, [pc, #16]	; (800bb34 <stdio_exit_handler+0x18>)
 800bb24:	f000 f86c 	bl	800bc00 <_fwalk_sglue>
 800bb28:	bd10      	pop	{r4, pc}
 800bb2a:	46c0      	nop			; (mov r8, r8)
 800bb2c:	2000000c 	.word	0x2000000c
 800bb30:	0800e6c5 	.word	0x0800e6c5
 800bb34:	20000184 	.word	0x20000184

0800bb38 <cleanup_stdio>:
 800bb38:	6841      	ldr	r1, [r0, #4]
 800bb3a:	4b0b      	ldr	r3, [pc, #44]	; (800bb68 <cleanup_stdio+0x30>)
 800bb3c:	b510      	push	{r4, lr}
 800bb3e:	0004      	movs	r4, r0
 800bb40:	4299      	cmp	r1, r3
 800bb42:	d001      	beq.n	800bb48 <cleanup_stdio+0x10>
 800bb44:	f002 fdbe 	bl	800e6c4 <_fflush_r>
 800bb48:	68a1      	ldr	r1, [r4, #8]
 800bb4a:	4b08      	ldr	r3, [pc, #32]	; (800bb6c <cleanup_stdio+0x34>)
 800bb4c:	4299      	cmp	r1, r3
 800bb4e:	d002      	beq.n	800bb56 <cleanup_stdio+0x1e>
 800bb50:	0020      	movs	r0, r4
 800bb52:	f002 fdb7 	bl	800e6c4 <_fflush_r>
 800bb56:	68e1      	ldr	r1, [r4, #12]
 800bb58:	4b05      	ldr	r3, [pc, #20]	; (800bb70 <cleanup_stdio+0x38>)
 800bb5a:	4299      	cmp	r1, r3
 800bb5c:	d002      	beq.n	800bb64 <cleanup_stdio+0x2c>
 800bb5e:	0020      	movs	r0, r4
 800bb60:	f002 fdb0 	bl	800e6c4 <_fflush_r>
 800bb64:	bd10      	pop	{r4, pc}
 800bb66:	46c0      	nop			; (mov r8, r8)
 800bb68:	2000069c 	.word	0x2000069c
 800bb6c:	20000704 	.word	0x20000704
 800bb70:	2000076c 	.word	0x2000076c

0800bb74 <global_stdio_init.part.0>:
 800bb74:	b510      	push	{r4, lr}
 800bb76:	4b09      	ldr	r3, [pc, #36]	; (800bb9c <global_stdio_init.part.0+0x28>)
 800bb78:	4a09      	ldr	r2, [pc, #36]	; (800bba0 <global_stdio_init.part.0+0x2c>)
 800bb7a:	2104      	movs	r1, #4
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	4809      	ldr	r0, [pc, #36]	; (800bba4 <global_stdio_init.part.0+0x30>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	f7ff ff95 	bl	800bab0 <std>
 800bb86:	2201      	movs	r2, #1
 800bb88:	2109      	movs	r1, #9
 800bb8a:	4807      	ldr	r0, [pc, #28]	; (800bba8 <global_stdio_init.part.0+0x34>)
 800bb8c:	f7ff ff90 	bl	800bab0 <std>
 800bb90:	2202      	movs	r2, #2
 800bb92:	2112      	movs	r1, #18
 800bb94:	4805      	ldr	r0, [pc, #20]	; (800bbac <global_stdio_init.part.0+0x38>)
 800bb96:	f7ff ff8b 	bl	800bab0 <std>
 800bb9a:	bd10      	pop	{r4, pc}
 800bb9c:	200007d4 	.word	0x200007d4
 800bba0:	0800bb1d 	.word	0x0800bb1d
 800bba4:	2000069c 	.word	0x2000069c
 800bba8:	20000704 	.word	0x20000704
 800bbac:	2000076c 	.word	0x2000076c

0800bbb0 <__sfp_lock_acquire>:
 800bbb0:	b510      	push	{r4, lr}
 800bbb2:	4802      	ldr	r0, [pc, #8]	; (800bbbc <__sfp_lock_acquire+0xc>)
 800bbb4:	f000 fa59 	bl	800c06a <__retarget_lock_acquire_recursive>
 800bbb8:	bd10      	pop	{r4, pc}
 800bbba:	46c0      	nop			; (mov r8, r8)
 800bbbc:	200007dd 	.word	0x200007dd

0800bbc0 <__sfp_lock_release>:
 800bbc0:	b510      	push	{r4, lr}
 800bbc2:	4802      	ldr	r0, [pc, #8]	; (800bbcc <__sfp_lock_release+0xc>)
 800bbc4:	f000 fa52 	bl	800c06c <__retarget_lock_release_recursive>
 800bbc8:	bd10      	pop	{r4, pc}
 800bbca:	46c0      	nop			; (mov r8, r8)
 800bbcc:	200007dd 	.word	0x200007dd

0800bbd0 <__sinit>:
 800bbd0:	b510      	push	{r4, lr}
 800bbd2:	0004      	movs	r4, r0
 800bbd4:	f7ff ffec 	bl	800bbb0 <__sfp_lock_acquire>
 800bbd8:	6a23      	ldr	r3, [r4, #32]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d002      	beq.n	800bbe4 <__sinit+0x14>
 800bbde:	f7ff ffef 	bl	800bbc0 <__sfp_lock_release>
 800bbe2:	bd10      	pop	{r4, pc}
 800bbe4:	4b04      	ldr	r3, [pc, #16]	; (800bbf8 <__sinit+0x28>)
 800bbe6:	6223      	str	r3, [r4, #32]
 800bbe8:	4b04      	ldr	r3, [pc, #16]	; (800bbfc <__sinit+0x2c>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1f6      	bne.n	800bbde <__sinit+0xe>
 800bbf0:	f7ff ffc0 	bl	800bb74 <global_stdio_init.part.0>
 800bbf4:	e7f3      	b.n	800bbde <__sinit+0xe>
 800bbf6:	46c0      	nop			; (mov r8, r8)
 800bbf8:	0800bb39 	.word	0x0800bb39
 800bbfc:	200007d4 	.word	0x200007d4

0800bc00 <_fwalk_sglue>:
 800bc00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc02:	0014      	movs	r4, r2
 800bc04:	2600      	movs	r6, #0
 800bc06:	9000      	str	r0, [sp, #0]
 800bc08:	9101      	str	r1, [sp, #4]
 800bc0a:	68a5      	ldr	r5, [r4, #8]
 800bc0c:	6867      	ldr	r7, [r4, #4]
 800bc0e:	3f01      	subs	r7, #1
 800bc10:	d504      	bpl.n	800bc1c <_fwalk_sglue+0x1c>
 800bc12:	6824      	ldr	r4, [r4, #0]
 800bc14:	2c00      	cmp	r4, #0
 800bc16:	d1f8      	bne.n	800bc0a <_fwalk_sglue+0xa>
 800bc18:	0030      	movs	r0, r6
 800bc1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc1c:	89ab      	ldrh	r3, [r5, #12]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d908      	bls.n	800bc34 <_fwalk_sglue+0x34>
 800bc22:	220e      	movs	r2, #14
 800bc24:	5eab      	ldrsh	r3, [r5, r2]
 800bc26:	3301      	adds	r3, #1
 800bc28:	d004      	beq.n	800bc34 <_fwalk_sglue+0x34>
 800bc2a:	0029      	movs	r1, r5
 800bc2c:	9800      	ldr	r0, [sp, #0]
 800bc2e:	9b01      	ldr	r3, [sp, #4]
 800bc30:	4798      	blx	r3
 800bc32:	4306      	orrs	r6, r0
 800bc34:	3568      	adds	r5, #104	; 0x68
 800bc36:	e7ea      	b.n	800bc0e <_fwalk_sglue+0xe>

0800bc38 <iprintf>:
 800bc38:	b40f      	push	{r0, r1, r2, r3}
 800bc3a:	b507      	push	{r0, r1, r2, lr}
 800bc3c:	4905      	ldr	r1, [pc, #20]	; (800bc54 <iprintf+0x1c>)
 800bc3e:	ab04      	add	r3, sp, #16
 800bc40:	6808      	ldr	r0, [r1, #0]
 800bc42:	cb04      	ldmia	r3!, {r2}
 800bc44:	6881      	ldr	r1, [r0, #8]
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	f002 fb96 	bl	800e378 <_vfiprintf_r>
 800bc4c:	b003      	add	sp, #12
 800bc4e:	bc08      	pop	{r3}
 800bc50:	b004      	add	sp, #16
 800bc52:	4718      	bx	r3
 800bc54:	200001d0 	.word	0x200001d0

0800bc58 <_puts_r>:
 800bc58:	6a03      	ldr	r3, [r0, #32]
 800bc5a:	b570      	push	{r4, r5, r6, lr}
 800bc5c:	0005      	movs	r5, r0
 800bc5e:	000e      	movs	r6, r1
 800bc60:	6884      	ldr	r4, [r0, #8]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d101      	bne.n	800bc6a <_puts_r+0x12>
 800bc66:	f7ff ffb3 	bl	800bbd0 <__sinit>
 800bc6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc6c:	07db      	lsls	r3, r3, #31
 800bc6e:	d405      	bmi.n	800bc7c <_puts_r+0x24>
 800bc70:	89a3      	ldrh	r3, [r4, #12]
 800bc72:	059b      	lsls	r3, r3, #22
 800bc74:	d402      	bmi.n	800bc7c <_puts_r+0x24>
 800bc76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc78:	f000 f9f7 	bl	800c06a <__retarget_lock_acquire_recursive>
 800bc7c:	89a3      	ldrh	r3, [r4, #12]
 800bc7e:	071b      	lsls	r3, r3, #28
 800bc80:	d502      	bpl.n	800bc88 <_puts_r+0x30>
 800bc82:	6923      	ldr	r3, [r4, #16]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d11f      	bne.n	800bcc8 <_puts_r+0x70>
 800bc88:	0021      	movs	r1, r4
 800bc8a:	0028      	movs	r0, r5
 800bc8c:	f000 f8f2 	bl	800be74 <__swsetup_r>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d019      	beq.n	800bcc8 <_puts_r+0x70>
 800bc94:	2501      	movs	r5, #1
 800bc96:	426d      	negs	r5, r5
 800bc98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc9a:	07db      	lsls	r3, r3, #31
 800bc9c:	d405      	bmi.n	800bcaa <_puts_r+0x52>
 800bc9e:	89a3      	ldrh	r3, [r4, #12]
 800bca0:	059b      	lsls	r3, r3, #22
 800bca2:	d402      	bmi.n	800bcaa <_puts_r+0x52>
 800bca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bca6:	f000 f9e1 	bl	800c06c <__retarget_lock_release_recursive>
 800bcaa:	0028      	movs	r0, r5
 800bcac:	bd70      	pop	{r4, r5, r6, pc}
 800bcae:	3601      	adds	r6, #1
 800bcb0:	60a3      	str	r3, [r4, #8]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	da04      	bge.n	800bcc0 <_puts_r+0x68>
 800bcb6:	69a2      	ldr	r2, [r4, #24]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	dc16      	bgt.n	800bcea <_puts_r+0x92>
 800bcbc:	290a      	cmp	r1, #10
 800bcbe:	d014      	beq.n	800bcea <_puts_r+0x92>
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	1c5a      	adds	r2, r3, #1
 800bcc4:	6022      	str	r2, [r4, #0]
 800bcc6:	7019      	strb	r1, [r3, #0]
 800bcc8:	68a3      	ldr	r3, [r4, #8]
 800bcca:	7831      	ldrb	r1, [r6, #0]
 800bccc:	3b01      	subs	r3, #1
 800bcce:	2900      	cmp	r1, #0
 800bcd0:	d1ed      	bne.n	800bcae <_puts_r+0x56>
 800bcd2:	60a3      	str	r3, [r4, #8]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	da0f      	bge.n	800bcf8 <_puts_r+0xa0>
 800bcd8:	0028      	movs	r0, r5
 800bcda:	0022      	movs	r2, r4
 800bcdc:	310a      	adds	r1, #10
 800bcde:	f000 f887 	bl	800bdf0 <__swbuf_r>
 800bce2:	250a      	movs	r5, #10
 800bce4:	3001      	adds	r0, #1
 800bce6:	d1d7      	bne.n	800bc98 <_puts_r+0x40>
 800bce8:	e7d4      	b.n	800bc94 <_puts_r+0x3c>
 800bcea:	0022      	movs	r2, r4
 800bcec:	0028      	movs	r0, r5
 800bcee:	f000 f87f 	bl	800bdf0 <__swbuf_r>
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	d1e8      	bne.n	800bcc8 <_puts_r+0x70>
 800bcf6:	e7cd      	b.n	800bc94 <_puts_r+0x3c>
 800bcf8:	250a      	movs	r5, #10
 800bcfa:	6823      	ldr	r3, [r4, #0]
 800bcfc:	1c5a      	adds	r2, r3, #1
 800bcfe:	6022      	str	r2, [r4, #0]
 800bd00:	701d      	strb	r5, [r3, #0]
 800bd02:	e7c9      	b.n	800bc98 <_puts_r+0x40>

0800bd04 <puts>:
 800bd04:	b510      	push	{r4, lr}
 800bd06:	4b03      	ldr	r3, [pc, #12]	; (800bd14 <puts+0x10>)
 800bd08:	0001      	movs	r1, r0
 800bd0a:	6818      	ldr	r0, [r3, #0]
 800bd0c:	f7ff ffa4 	bl	800bc58 <_puts_r>
 800bd10:	bd10      	pop	{r4, pc}
 800bd12:	46c0      	nop			; (mov r8, r8)
 800bd14:	200001d0 	.word	0x200001d0

0800bd18 <siprintf>:
 800bd18:	b40e      	push	{r1, r2, r3}
 800bd1a:	b500      	push	{lr}
 800bd1c:	490b      	ldr	r1, [pc, #44]	; (800bd4c <siprintf+0x34>)
 800bd1e:	b09c      	sub	sp, #112	; 0x70
 800bd20:	ab1d      	add	r3, sp, #116	; 0x74
 800bd22:	9002      	str	r0, [sp, #8]
 800bd24:	9006      	str	r0, [sp, #24]
 800bd26:	9107      	str	r1, [sp, #28]
 800bd28:	9104      	str	r1, [sp, #16]
 800bd2a:	4809      	ldr	r0, [pc, #36]	; (800bd50 <siprintf+0x38>)
 800bd2c:	4909      	ldr	r1, [pc, #36]	; (800bd54 <siprintf+0x3c>)
 800bd2e:	cb04      	ldmia	r3!, {r2}
 800bd30:	9105      	str	r1, [sp, #20]
 800bd32:	6800      	ldr	r0, [r0, #0]
 800bd34:	a902      	add	r1, sp, #8
 800bd36:	9301      	str	r3, [sp, #4]
 800bd38:	f002 f9f6 	bl	800e128 <_svfiprintf_r>
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	9b02      	ldr	r3, [sp, #8]
 800bd40:	701a      	strb	r2, [r3, #0]
 800bd42:	b01c      	add	sp, #112	; 0x70
 800bd44:	bc08      	pop	{r3}
 800bd46:	b003      	add	sp, #12
 800bd48:	4718      	bx	r3
 800bd4a:	46c0      	nop			; (mov r8, r8)
 800bd4c:	7fffffff 	.word	0x7fffffff
 800bd50:	200001d0 	.word	0x200001d0
 800bd54:	ffff0208 	.word	0xffff0208

0800bd58 <__sread>:
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	000c      	movs	r4, r1
 800bd5c:	250e      	movs	r5, #14
 800bd5e:	5f49      	ldrsh	r1, [r1, r5]
 800bd60:	f000 f930 	bl	800bfc4 <_read_r>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	db03      	blt.n	800bd70 <__sread+0x18>
 800bd68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bd6a:	181b      	adds	r3, r3, r0
 800bd6c:	6563      	str	r3, [r4, #84]	; 0x54
 800bd6e:	bd70      	pop	{r4, r5, r6, pc}
 800bd70:	89a3      	ldrh	r3, [r4, #12]
 800bd72:	4a02      	ldr	r2, [pc, #8]	; (800bd7c <__sread+0x24>)
 800bd74:	4013      	ands	r3, r2
 800bd76:	81a3      	strh	r3, [r4, #12]
 800bd78:	e7f9      	b.n	800bd6e <__sread+0x16>
 800bd7a:	46c0      	nop			; (mov r8, r8)
 800bd7c:	ffffefff 	.word	0xffffefff

0800bd80 <__swrite>:
 800bd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd82:	001f      	movs	r7, r3
 800bd84:	898b      	ldrh	r3, [r1, #12]
 800bd86:	0005      	movs	r5, r0
 800bd88:	000c      	movs	r4, r1
 800bd8a:	0016      	movs	r6, r2
 800bd8c:	05db      	lsls	r3, r3, #23
 800bd8e:	d505      	bpl.n	800bd9c <__swrite+0x1c>
 800bd90:	230e      	movs	r3, #14
 800bd92:	5ec9      	ldrsh	r1, [r1, r3]
 800bd94:	2200      	movs	r2, #0
 800bd96:	2302      	movs	r3, #2
 800bd98:	f000 f900 	bl	800bf9c <_lseek_r>
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	4a05      	ldr	r2, [pc, #20]	; (800bdb4 <__swrite+0x34>)
 800bda0:	0028      	movs	r0, r5
 800bda2:	4013      	ands	r3, r2
 800bda4:	81a3      	strh	r3, [r4, #12]
 800bda6:	0032      	movs	r2, r6
 800bda8:	230e      	movs	r3, #14
 800bdaa:	5ee1      	ldrsh	r1, [r4, r3]
 800bdac:	003b      	movs	r3, r7
 800bdae:	f000 f91d 	bl	800bfec <_write_r>
 800bdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdb4:	ffffefff 	.word	0xffffefff

0800bdb8 <__sseek>:
 800bdb8:	b570      	push	{r4, r5, r6, lr}
 800bdba:	000c      	movs	r4, r1
 800bdbc:	250e      	movs	r5, #14
 800bdbe:	5f49      	ldrsh	r1, [r1, r5]
 800bdc0:	f000 f8ec 	bl	800bf9c <_lseek_r>
 800bdc4:	89a3      	ldrh	r3, [r4, #12]
 800bdc6:	1c42      	adds	r2, r0, #1
 800bdc8:	d103      	bne.n	800bdd2 <__sseek+0x1a>
 800bdca:	4a05      	ldr	r2, [pc, #20]	; (800bde0 <__sseek+0x28>)
 800bdcc:	4013      	ands	r3, r2
 800bdce:	81a3      	strh	r3, [r4, #12]
 800bdd0:	bd70      	pop	{r4, r5, r6, pc}
 800bdd2:	2280      	movs	r2, #128	; 0x80
 800bdd4:	0152      	lsls	r2, r2, #5
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	81a3      	strh	r3, [r4, #12]
 800bdda:	6560      	str	r0, [r4, #84]	; 0x54
 800bddc:	e7f8      	b.n	800bdd0 <__sseek+0x18>
 800bdde:	46c0      	nop			; (mov r8, r8)
 800bde0:	ffffefff 	.word	0xffffefff

0800bde4 <__sclose>:
 800bde4:	b510      	push	{r4, lr}
 800bde6:	230e      	movs	r3, #14
 800bde8:	5ec9      	ldrsh	r1, [r1, r3]
 800bdea:	f000 f8c5 	bl	800bf78 <_close_r>
 800bdee:	bd10      	pop	{r4, pc}

0800bdf0 <__swbuf_r>:
 800bdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf2:	0006      	movs	r6, r0
 800bdf4:	000d      	movs	r5, r1
 800bdf6:	0014      	movs	r4, r2
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	d004      	beq.n	800be06 <__swbuf_r+0x16>
 800bdfc:	6a03      	ldr	r3, [r0, #32]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <__swbuf_r+0x16>
 800be02:	f7ff fee5 	bl	800bbd0 <__sinit>
 800be06:	69a3      	ldr	r3, [r4, #24]
 800be08:	60a3      	str	r3, [r4, #8]
 800be0a:	89a3      	ldrh	r3, [r4, #12]
 800be0c:	071b      	lsls	r3, r3, #28
 800be0e:	d528      	bpl.n	800be62 <__swbuf_r+0x72>
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d025      	beq.n	800be62 <__swbuf_r+0x72>
 800be16:	6923      	ldr	r3, [r4, #16]
 800be18:	6820      	ldr	r0, [r4, #0]
 800be1a:	b2ef      	uxtb	r7, r5
 800be1c:	1ac0      	subs	r0, r0, r3
 800be1e:	6963      	ldr	r3, [r4, #20]
 800be20:	b2ed      	uxtb	r5, r5
 800be22:	4283      	cmp	r3, r0
 800be24:	dc05      	bgt.n	800be32 <__swbuf_r+0x42>
 800be26:	0021      	movs	r1, r4
 800be28:	0030      	movs	r0, r6
 800be2a:	f002 fc4b 	bl	800e6c4 <_fflush_r>
 800be2e:	2800      	cmp	r0, #0
 800be30:	d11d      	bne.n	800be6e <__swbuf_r+0x7e>
 800be32:	68a3      	ldr	r3, [r4, #8]
 800be34:	3001      	adds	r0, #1
 800be36:	3b01      	subs	r3, #1
 800be38:	60a3      	str	r3, [r4, #8]
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	1c5a      	adds	r2, r3, #1
 800be3e:	6022      	str	r2, [r4, #0]
 800be40:	701f      	strb	r7, [r3, #0]
 800be42:	6963      	ldr	r3, [r4, #20]
 800be44:	4283      	cmp	r3, r0
 800be46:	d004      	beq.n	800be52 <__swbuf_r+0x62>
 800be48:	89a3      	ldrh	r3, [r4, #12]
 800be4a:	07db      	lsls	r3, r3, #31
 800be4c:	d507      	bpl.n	800be5e <__swbuf_r+0x6e>
 800be4e:	2d0a      	cmp	r5, #10
 800be50:	d105      	bne.n	800be5e <__swbuf_r+0x6e>
 800be52:	0021      	movs	r1, r4
 800be54:	0030      	movs	r0, r6
 800be56:	f002 fc35 	bl	800e6c4 <_fflush_r>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d107      	bne.n	800be6e <__swbuf_r+0x7e>
 800be5e:	0028      	movs	r0, r5
 800be60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be62:	0021      	movs	r1, r4
 800be64:	0030      	movs	r0, r6
 800be66:	f000 f805 	bl	800be74 <__swsetup_r>
 800be6a:	2800      	cmp	r0, #0
 800be6c:	d0d3      	beq.n	800be16 <__swbuf_r+0x26>
 800be6e:	2501      	movs	r5, #1
 800be70:	426d      	negs	r5, r5
 800be72:	e7f4      	b.n	800be5e <__swbuf_r+0x6e>

0800be74 <__swsetup_r>:
 800be74:	4b30      	ldr	r3, [pc, #192]	; (800bf38 <__swsetup_r+0xc4>)
 800be76:	b570      	push	{r4, r5, r6, lr}
 800be78:	0005      	movs	r5, r0
 800be7a:	6818      	ldr	r0, [r3, #0]
 800be7c:	000c      	movs	r4, r1
 800be7e:	2800      	cmp	r0, #0
 800be80:	d004      	beq.n	800be8c <__swsetup_r+0x18>
 800be82:	6a03      	ldr	r3, [r0, #32]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d101      	bne.n	800be8c <__swsetup_r+0x18>
 800be88:	f7ff fea2 	bl	800bbd0 <__sinit>
 800be8c:	230c      	movs	r3, #12
 800be8e:	5ee2      	ldrsh	r2, [r4, r3]
 800be90:	b293      	uxth	r3, r2
 800be92:	0711      	lsls	r1, r2, #28
 800be94:	d423      	bmi.n	800bede <__swsetup_r+0x6a>
 800be96:	06d9      	lsls	r1, r3, #27
 800be98:	d407      	bmi.n	800beaa <__swsetup_r+0x36>
 800be9a:	2309      	movs	r3, #9
 800be9c:	2001      	movs	r0, #1
 800be9e:	602b      	str	r3, [r5, #0]
 800bea0:	3337      	adds	r3, #55	; 0x37
 800bea2:	4313      	orrs	r3, r2
 800bea4:	81a3      	strh	r3, [r4, #12]
 800bea6:	4240      	negs	r0, r0
 800bea8:	bd70      	pop	{r4, r5, r6, pc}
 800beaa:	075b      	lsls	r3, r3, #29
 800beac:	d513      	bpl.n	800bed6 <__swsetup_r+0x62>
 800beae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beb0:	2900      	cmp	r1, #0
 800beb2:	d008      	beq.n	800bec6 <__swsetup_r+0x52>
 800beb4:	0023      	movs	r3, r4
 800beb6:	3344      	adds	r3, #68	; 0x44
 800beb8:	4299      	cmp	r1, r3
 800beba:	d002      	beq.n	800bec2 <__swsetup_r+0x4e>
 800bebc:	0028      	movs	r0, r5
 800bebe:	f000 ff93 	bl	800cde8 <_free_r>
 800bec2:	2300      	movs	r3, #0
 800bec4:	6363      	str	r3, [r4, #52]	; 0x34
 800bec6:	2224      	movs	r2, #36	; 0x24
 800bec8:	89a3      	ldrh	r3, [r4, #12]
 800beca:	4393      	bics	r3, r2
 800becc:	81a3      	strh	r3, [r4, #12]
 800bece:	2300      	movs	r3, #0
 800bed0:	6063      	str	r3, [r4, #4]
 800bed2:	6923      	ldr	r3, [r4, #16]
 800bed4:	6023      	str	r3, [r4, #0]
 800bed6:	2308      	movs	r3, #8
 800bed8:	89a2      	ldrh	r2, [r4, #12]
 800beda:	4313      	orrs	r3, r2
 800bedc:	81a3      	strh	r3, [r4, #12]
 800bede:	6923      	ldr	r3, [r4, #16]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d10b      	bne.n	800befc <__swsetup_r+0x88>
 800bee4:	21a0      	movs	r1, #160	; 0xa0
 800bee6:	2280      	movs	r2, #128	; 0x80
 800bee8:	89a3      	ldrh	r3, [r4, #12]
 800beea:	0089      	lsls	r1, r1, #2
 800beec:	0092      	lsls	r2, r2, #2
 800beee:	400b      	ands	r3, r1
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d003      	beq.n	800befc <__swsetup_r+0x88>
 800bef4:	0021      	movs	r1, r4
 800bef6:	0028      	movs	r0, r5
 800bef8:	f002 fc38 	bl	800e76c <__smakebuf_r>
 800befc:	220c      	movs	r2, #12
 800befe:	5ea3      	ldrsh	r3, [r4, r2]
 800bf00:	2001      	movs	r0, #1
 800bf02:	001a      	movs	r2, r3
 800bf04:	b299      	uxth	r1, r3
 800bf06:	4002      	ands	r2, r0
 800bf08:	4203      	tst	r3, r0
 800bf0a:	d00f      	beq.n	800bf2c <__swsetup_r+0xb8>
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	60a2      	str	r2, [r4, #8]
 800bf10:	6962      	ldr	r2, [r4, #20]
 800bf12:	4252      	negs	r2, r2
 800bf14:	61a2      	str	r2, [r4, #24]
 800bf16:	2000      	movs	r0, #0
 800bf18:	6922      	ldr	r2, [r4, #16]
 800bf1a:	4282      	cmp	r2, r0
 800bf1c:	d1c4      	bne.n	800bea8 <__swsetup_r+0x34>
 800bf1e:	0609      	lsls	r1, r1, #24
 800bf20:	d5c2      	bpl.n	800bea8 <__swsetup_r+0x34>
 800bf22:	2240      	movs	r2, #64	; 0x40
 800bf24:	4313      	orrs	r3, r2
 800bf26:	81a3      	strh	r3, [r4, #12]
 800bf28:	3801      	subs	r0, #1
 800bf2a:	e7bd      	b.n	800bea8 <__swsetup_r+0x34>
 800bf2c:	0788      	lsls	r0, r1, #30
 800bf2e:	d400      	bmi.n	800bf32 <__swsetup_r+0xbe>
 800bf30:	6962      	ldr	r2, [r4, #20]
 800bf32:	60a2      	str	r2, [r4, #8]
 800bf34:	e7ef      	b.n	800bf16 <__swsetup_r+0xa2>
 800bf36:	46c0      	nop			; (mov r8, r8)
 800bf38:	200001d0 	.word	0x200001d0

0800bf3c <memset>:
 800bf3c:	0003      	movs	r3, r0
 800bf3e:	1882      	adds	r2, r0, r2
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d100      	bne.n	800bf46 <memset+0xa>
 800bf44:	4770      	bx	lr
 800bf46:	7019      	strb	r1, [r3, #0]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	e7f9      	b.n	800bf40 <memset+0x4>

0800bf4c <strncmp>:
 800bf4c:	b530      	push	{r4, r5, lr}
 800bf4e:	0005      	movs	r5, r0
 800bf50:	1e10      	subs	r0, r2, #0
 800bf52:	d00b      	beq.n	800bf6c <strncmp+0x20>
 800bf54:	2400      	movs	r4, #0
 800bf56:	3a01      	subs	r2, #1
 800bf58:	5d2b      	ldrb	r3, [r5, r4]
 800bf5a:	5d08      	ldrb	r0, [r1, r4]
 800bf5c:	4283      	cmp	r3, r0
 800bf5e:	d104      	bne.n	800bf6a <strncmp+0x1e>
 800bf60:	42a2      	cmp	r2, r4
 800bf62:	d002      	beq.n	800bf6a <strncmp+0x1e>
 800bf64:	3401      	adds	r4, #1
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1f6      	bne.n	800bf58 <strncmp+0xc>
 800bf6a:	1a18      	subs	r0, r3, r0
 800bf6c:	bd30      	pop	{r4, r5, pc}
	...

0800bf70 <_localeconv_r>:
 800bf70:	4800      	ldr	r0, [pc, #0]	; (800bf74 <_localeconv_r+0x4>)
 800bf72:	4770      	bx	lr
 800bf74:	20000108 	.word	0x20000108

0800bf78 <_close_r>:
 800bf78:	2300      	movs	r3, #0
 800bf7a:	b570      	push	{r4, r5, r6, lr}
 800bf7c:	4d06      	ldr	r5, [pc, #24]	; (800bf98 <_close_r+0x20>)
 800bf7e:	0004      	movs	r4, r0
 800bf80:	0008      	movs	r0, r1
 800bf82:	602b      	str	r3, [r5, #0]
 800bf84:	f7f8 fb01 	bl	800458a <_close>
 800bf88:	1c43      	adds	r3, r0, #1
 800bf8a:	d103      	bne.n	800bf94 <_close_r+0x1c>
 800bf8c:	682b      	ldr	r3, [r5, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d000      	beq.n	800bf94 <_close_r+0x1c>
 800bf92:	6023      	str	r3, [r4, #0]
 800bf94:	bd70      	pop	{r4, r5, r6, pc}
 800bf96:	46c0      	nop			; (mov r8, r8)
 800bf98:	200007d8 	.word	0x200007d8

0800bf9c <_lseek_r>:
 800bf9c:	b570      	push	{r4, r5, r6, lr}
 800bf9e:	0004      	movs	r4, r0
 800bfa0:	0008      	movs	r0, r1
 800bfa2:	0011      	movs	r1, r2
 800bfa4:	001a      	movs	r2, r3
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	4d05      	ldr	r5, [pc, #20]	; (800bfc0 <_lseek_r+0x24>)
 800bfaa:	602b      	str	r3, [r5, #0]
 800bfac:	f7f8 fb0e 	bl	80045cc <_lseek>
 800bfb0:	1c43      	adds	r3, r0, #1
 800bfb2:	d103      	bne.n	800bfbc <_lseek_r+0x20>
 800bfb4:	682b      	ldr	r3, [r5, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d000      	beq.n	800bfbc <_lseek_r+0x20>
 800bfba:	6023      	str	r3, [r4, #0]
 800bfbc:	bd70      	pop	{r4, r5, r6, pc}
 800bfbe:	46c0      	nop			; (mov r8, r8)
 800bfc0:	200007d8 	.word	0x200007d8

0800bfc4 <_read_r>:
 800bfc4:	b570      	push	{r4, r5, r6, lr}
 800bfc6:	0004      	movs	r4, r0
 800bfc8:	0008      	movs	r0, r1
 800bfca:	0011      	movs	r1, r2
 800bfcc:	001a      	movs	r2, r3
 800bfce:	2300      	movs	r3, #0
 800bfd0:	4d05      	ldr	r5, [pc, #20]	; (800bfe8 <_read_r+0x24>)
 800bfd2:	602b      	str	r3, [r5, #0]
 800bfd4:	f7f8 faa0 	bl	8004518 <_read>
 800bfd8:	1c43      	adds	r3, r0, #1
 800bfda:	d103      	bne.n	800bfe4 <_read_r+0x20>
 800bfdc:	682b      	ldr	r3, [r5, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d000      	beq.n	800bfe4 <_read_r+0x20>
 800bfe2:	6023      	str	r3, [r4, #0]
 800bfe4:	bd70      	pop	{r4, r5, r6, pc}
 800bfe6:	46c0      	nop			; (mov r8, r8)
 800bfe8:	200007d8 	.word	0x200007d8

0800bfec <_write_r>:
 800bfec:	b570      	push	{r4, r5, r6, lr}
 800bfee:	0004      	movs	r4, r0
 800bff0:	0008      	movs	r0, r1
 800bff2:	0011      	movs	r1, r2
 800bff4:	001a      	movs	r2, r3
 800bff6:	2300      	movs	r3, #0
 800bff8:	4d05      	ldr	r5, [pc, #20]	; (800c010 <_write_r+0x24>)
 800bffa:	602b      	str	r3, [r5, #0]
 800bffc:	f7f8 faa9 	bl	8004552 <_write>
 800c000:	1c43      	adds	r3, r0, #1
 800c002:	d103      	bne.n	800c00c <_write_r+0x20>
 800c004:	682b      	ldr	r3, [r5, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d000      	beq.n	800c00c <_write_r+0x20>
 800c00a:	6023      	str	r3, [r4, #0]
 800c00c:	bd70      	pop	{r4, r5, r6, pc}
 800c00e:	46c0      	nop			; (mov r8, r8)
 800c010:	200007d8 	.word	0x200007d8

0800c014 <__errno>:
 800c014:	4b01      	ldr	r3, [pc, #4]	; (800c01c <__errno+0x8>)
 800c016:	6818      	ldr	r0, [r3, #0]
 800c018:	4770      	bx	lr
 800c01a:	46c0      	nop			; (mov r8, r8)
 800c01c:	200001d0 	.word	0x200001d0

0800c020 <__libc_init_array>:
 800c020:	b570      	push	{r4, r5, r6, lr}
 800c022:	2600      	movs	r6, #0
 800c024:	4c0c      	ldr	r4, [pc, #48]	; (800c058 <__libc_init_array+0x38>)
 800c026:	4d0d      	ldr	r5, [pc, #52]	; (800c05c <__libc_init_array+0x3c>)
 800c028:	1b64      	subs	r4, r4, r5
 800c02a:	10a4      	asrs	r4, r4, #2
 800c02c:	42a6      	cmp	r6, r4
 800c02e:	d109      	bne.n	800c044 <__libc_init_array+0x24>
 800c030:	2600      	movs	r6, #0
 800c032:	f002 fd07 	bl	800ea44 <_init>
 800c036:	4c0a      	ldr	r4, [pc, #40]	; (800c060 <__libc_init_array+0x40>)
 800c038:	4d0a      	ldr	r5, [pc, #40]	; (800c064 <__libc_init_array+0x44>)
 800c03a:	1b64      	subs	r4, r4, r5
 800c03c:	10a4      	asrs	r4, r4, #2
 800c03e:	42a6      	cmp	r6, r4
 800c040:	d105      	bne.n	800c04e <__libc_init_array+0x2e>
 800c042:	bd70      	pop	{r4, r5, r6, pc}
 800c044:	00b3      	lsls	r3, r6, #2
 800c046:	58eb      	ldr	r3, [r5, r3]
 800c048:	4798      	blx	r3
 800c04a:	3601      	adds	r6, #1
 800c04c:	e7ee      	b.n	800c02c <__libc_init_array+0xc>
 800c04e:	00b3      	lsls	r3, r6, #2
 800c050:	58eb      	ldr	r3, [r5, r3]
 800c052:	4798      	blx	r3
 800c054:	3601      	adds	r6, #1
 800c056:	e7f2      	b.n	800c03e <__libc_init_array+0x1e>
 800c058:	0800f084 	.word	0x0800f084
 800c05c:	0800f084 	.word	0x0800f084
 800c060:	0800f088 	.word	0x0800f088
 800c064:	0800f084 	.word	0x0800f084

0800c068 <__retarget_lock_init_recursive>:
 800c068:	4770      	bx	lr

0800c06a <__retarget_lock_acquire_recursive>:
 800c06a:	4770      	bx	lr

0800c06c <__retarget_lock_release_recursive>:
 800c06c:	4770      	bx	lr

0800c06e <memchr>:
 800c06e:	b2c9      	uxtb	r1, r1
 800c070:	1882      	adds	r2, r0, r2
 800c072:	4290      	cmp	r0, r2
 800c074:	d101      	bne.n	800c07a <memchr+0xc>
 800c076:	2000      	movs	r0, #0
 800c078:	4770      	bx	lr
 800c07a:	7803      	ldrb	r3, [r0, #0]
 800c07c:	428b      	cmp	r3, r1
 800c07e:	d0fb      	beq.n	800c078 <memchr+0xa>
 800c080:	3001      	adds	r0, #1
 800c082:	e7f6      	b.n	800c072 <memchr+0x4>

0800c084 <memcpy>:
 800c084:	2300      	movs	r3, #0
 800c086:	b510      	push	{r4, lr}
 800c088:	429a      	cmp	r2, r3
 800c08a:	d100      	bne.n	800c08e <memcpy+0xa>
 800c08c:	bd10      	pop	{r4, pc}
 800c08e:	5ccc      	ldrb	r4, [r1, r3]
 800c090:	54c4      	strb	r4, [r0, r3]
 800c092:	3301      	adds	r3, #1
 800c094:	e7f8      	b.n	800c088 <memcpy+0x4>
	...

0800c098 <nan>:
 800c098:	2000      	movs	r0, #0
 800c09a:	4901      	ldr	r1, [pc, #4]	; (800c0a0 <nan+0x8>)
 800c09c:	4770      	bx	lr
 800c09e:	46c0      	nop			; (mov r8, r8)
 800c0a0:	7ff80000 	.word	0x7ff80000

0800c0a4 <nanf>:
 800c0a4:	4800      	ldr	r0, [pc, #0]	; (800c0a8 <nanf+0x4>)
 800c0a6:	4770      	bx	lr
 800c0a8:	7fc00000 	.word	0x7fc00000

0800c0ac <quorem>:
 800c0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ae:	6902      	ldr	r2, [r0, #16]
 800c0b0:	690b      	ldr	r3, [r1, #16]
 800c0b2:	b089      	sub	sp, #36	; 0x24
 800c0b4:	0007      	movs	r7, r0
 800c0b6:	9104      	str	r1, [sp, #16]
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	db69      	blt.n	800c192 <quorem+0xe6>
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	009c      	lsls	r4, r3, #2
 800c0c2:	9301      	str	r3, [sp, #4]
 800c0c4:	000b      	movs	r3, r1
 800c0c6:	3314      	adds	r3, #20
 800c0c8:	9306      	str	r3, [sp, #24]
 800c0ca:	191b      	adds	r3, r3, r4
 800c0cc:	9305      	str	r3, [sp, #20]
 800c0ce:	003b      	movs	r3, r7
 800c0d0:	3314      	adds	r3, #20
 800c0d2:	9303      	str	r3, [sp, #12]
 800c0d4:	191c      	adds	r4, r3, r4
 800c0d6:	9b05      	ldr	r3, [sp, #20]
 800c0d8:	6826      	ldr	r6, [r4, #0]
 800c0da:	681d      	ldr	r5, [r3, #0]
 800c0dc:	0030      	movs	r0, r6
 800c0de:	3501      	adds	r5, #1
 800c0e0:	0029      	movs	r1, r5
 800c0e2:	f7f4 f82d 	bl	8000140 <__udivsi3>
 800c0e6:	9002      	str	r0, [sp, #8]
 800c0e8:	42ae      	cmp	r6, r5
 800c0ea:	d329      	bcc.n	800c140 <quorem+0x94>
 800c0ec:	9b06      	ldr	r3, [sp, #24]
 800c0ee:	2600      	movs	r6, #0
 800c0f0:	469c      	mov	ip, r3
 800c0f2:	9d03      	ldr	r5, [sp, #12]
 800c0f4:	9606      	str	r6, [sp, #24]
 800c0f6:	4662      	mov	r2, ip
 800c0f8:	ca08      	ldmia	r2!, {r3}
 800c0fa:	6828      	ldr	r0, [r5, #0]
 800c0fc:	4694      	mov	ip, r2
 800c0fe:	9a02      	ldr	r2, [sp, #8]
 800c100:	b299      	uxth	r1, r3
 800c102:	4351      	muls	r1, r2
 800c104:	0c1b      	lsrs	r3, r3, #16
 800c106:	4353      	muls	r3, r2
 800c108:	1989      	adds	r1, r1, r6
 800c10a:	0c0a      	lsrs	r2, r1, #16
 800c10c:	189b      	adds	r3, r3, r2
 800c10e:	9307      	str	r3, [sp, #28]
 800c110:	0c1e      	lsrs	r6, r3, #16
 800c112:	9b06      	ldr	r3, [sp, #24]
 800c114:	b282      	uxth	r2, r0
 800c116:	18d2      	adds	r2, r2, r3
 800c118:	466b      	mov	r3, sp
 800c11a:	b289      	uxth	r1, r1
 800c11c:	8b9b      	ldrh	r3, [r3, #28]
 800c11e:	1a52      	subs	r2, r2, r1
 800c120:	0c01      	lsrs	r1, r0, #16
 800c122:	1ac9      	subs	r1, r1, r3
 800c124:	1413      	asrs	r3, r2, #16
 800c126:	18cb      	adds	r3, r1, r3
 800c128:	1419      	asrs	r1, r3, #16
 800c12a:	b292      	uxth	r2, r2
 800c12c:	041b      	lsls	r3, r3, #16
 800c12e:	4313      	orrs	r3, r2
 800c130:	c508      	stmia	r5!, {r3}
 800c132:	9b05      	ldr	r3, [sp, #20]
 800c134:	9106      	str	r1, [sp, #24]
 800c136:	4563      	cmp	r3, ip
 800c138:	d2dd      	bcs.n	800c0f6 <quorem+0x4a>
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d030      	beq.n	800c1a2 <quorem+0xf6>
 800c140:	0038      	movs	r0, r7
 800c142:	9904      	ldr	r1, [sp, #16]
 800c144:	f001 fd98 	bl	800dc78 <__mcmp>
 800c148:	2800      	cmp	r0, #0
 800c14a:	db21      	blt.n	800c190 <quorem+0xe4>
 800c14c:	0038      	movs	r0, r7
 800c14e:	2600      	movs	r6, #0
 800c150:	9b02      	ldr	r3, [sp, #8]
 800c152:	9c04      	ldr	r4, [sp, #16]
 800c154:	3301      	adds	r3, #1
 800c156:	9302      	str	r3, [sp, #8]
 800c158:	3014      	adds	r0, #20
 800c15a:	3414      	adds	r4, #20
 800c15c:	6803      	ldr	r3, [r0, #0]
 800c15e:	cc02      	ldmia	r4!, {r1}
 800c160:	b29d      	uxth	r5, r3
 800c162:	19ad      	adds	r5, r5, r6
 800c164:	b28a      	uxth	r2, r1
 800c166:	1aaa      	subs	r2, r5, r2
 800c168:	0c09      	lsrs	r1, r1, #16
 800c16a:	0c1b      	lsrs	r3, r3, #16
 800c16c:	1a5b      	subs	r3, r3, r1
 800c16e:	1411      	asrs	r1, r2, #16
 800c170:	185b      	adds	r3, r3, r1
 800c172:	141e      	asrs	r6, r3, #16
 800c174:	b292      	uxth	r2, r2
 800c176:	041b      	lsls	r3, r3, #16
 800c178:	4313      	orrs	r3, r2
 800c17a:	c008      	stmia	r0!, {r3}
 800c17c:	9b05      	ldr	r3, [sp, #20]
 800c17e:	42a3      	cmp	r3, r4
 800c180:	d2ec      	bcs.n	800c15c <quorem+0xb0>
 800c182:	9b01      	ldr	r3, [sp, #4]
 800c184:	9a03      	ldr	r2, [sp, #12]
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	18d3      	adds	r3, r2, r3
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	2a00      	cmp	r2, #0
 800c18e:	d015      	beq.n	800c1bc <quorem+0x110>
 800c190:	9802      	ldr	r0, [sp, #8]
 800c192:	b009      	add	sp, #36	; 0x24
 800c194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c196:	6823      	ldr	r3, [r4, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d106      	bne.n	800c1aa <quorem+0xfe>
 800c19c:	9b01      	ldr	r3, [sp, #4]
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	9301      	str	r3, [sp, #4]
 800c1a2:	9b03      	ldr	r3, [sp, #12]
 800c1a4:	3c04      	subs	r4, #4
 800c1a6:	42a3      	cmp	r3, r4
 800c1a8:	d3f5      	bcc.n	800c196 <quorem+0xea>
 800c1aa:	9b01      	ldr	r3, [sp, #4]
 800c1ac:	613b      	str	r3, [r7, #16]
 800c1ae:	e7c7      	b.n	800c140 <quorem+0x94>
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	2a00      	cmp	r2, #0
 800c1b4:	d106      	bne.n	800c1c4 <quorem+0x118>
 800c1b6:	9a01      	ldr	r2, [sp, #4]
 800c1b8:	3a01      	subs	r2, #1
 800c1ba:	9201      	str	r2, [sp, #4]
 800c1bc:	9a03      	ldr	r2, [sp, #12]
 800c1be:	3b04      	subs	r3, #4
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d3f5      	bcc.n	800c1b0 <quorem+0x104>
 800c1c4:	9b01      	ldr	r3, [sp, #4]
 800c1c6:	613b      	str	r3, [r7, #16]
 800c1c8:	e7e2      	b.n	800c190 <quorem+0xe4>
	...

0800c1cc <_dtoa_r>:
 800c1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ce:	0014      	movs	r4, r2
 800c1d0:	001d      	movs	r5, r3
 800c1d2:	69c6      	ldr	r6, [r0, #28]
 800c1d4:	b09d      	sub	sp, #116	; 0x74
 800c1d6:	9408      	str	r4, [sp, #32]
 800c1d8:	9509      	str	r5, [sp, #36]	; 0x24
 800c1da:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800c1dc:	9004      	str	r0, [sp, #16]
 800c1de:	2e00      	cmp	r6, #0
 800c1e0:	d10f      	bne.n	800c202 <_dtoa_r+0x36>
 800c1e2:	2010      	movs	r0, #16
 800c1e4:	f001 f9a6 	bl	800d534 <malloc>
 800c1e8:	9b04      	ldr	r3, [sp, #16]
 800c1ea:	1e02      	subs	r2, r0, #0
 800c1ec:	61d8      	str	r0, [r3, #28]
 800c1ee:	d104      	bne.n	800c1fa <_dtoa_r+0x2e>
 800c1f0:	21ef      	movs	r1, #239	; 0xef
 800c1f2:	4bc6      	ldr	r3, [pc, #792]	; (800c50c <_dtoa_r+0x340>)
 800c1f4:	48c6      	ldr	r0, [pc, #792]	; (800c510 <_dtoa_r+0x344>)
 800c1f6:	f002 fb41 	bl	800e87c <__assert_func>
 800c1fa:	6046      	str	r6, [r0, #4]
 800c1fc:	6086      	str	r6, [r0, #8]
 800c1fe:	6006      	str	r6, [r0, #0]
 800c200:	60c6      	str	r6, [r0, #12]
 800c202:	9b04      	ldr	r3, [sp, #16]
 800c204:	69db      	ldr	r3, [r3, #28]
 800c206:	6819      	ldr	r1, [r3, #0]
 800c208:	2900      	cmp	r1, #0
 800c20a:	d00b      	beq.n	800c224 <_dtoa_r+0x58>
 800c20c:	685a      	ldr	r2, [r3, #4]
 800c20e:	2301      	movs	r3, #1
 800c210:	4093      	lsls	r3, r2
 800c212:	604a      	str	r2, [r1, #4]
 800c214:	608b      	str	r3, [r1, #8]
 800c216:	9804      	ldr	r0, [sp, #16]
 800c218:	f001 faa0 	bl	800d75c <_Bfree>
 800c21c:	2200      	movs	r2, #0
 800c21e:	9b04      	ldr	r3, [sp, #16]
 800c220:	69db      	ldr	r3, [r3, #28]
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	2d00      	cmp	r5, #0
 800c226:	da1e      	bge.n	800c266 <_dtoa_r+0x9a>
 800c228:	2301      	movs	r3, #1
 800c22a:	603b      	str	r3, [r7, #0]
 800c22c:	006b      	lsls	r3, r5, #1
 800c22e:	085b      	lsrs	r3, r3, #1
 800c230:	9309      	str	r3, [sp, #36]	; 0x24
 800c232:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c234:	4bb7      	ldr	r3, [pc, #732]	; (800c514 <_dtoa_r+0x348>)
 800c236:	4ab7      	ldr	r2, [pc, #732]	; (800c514 <_dtoa_r+0x348>)
 800c238:	403b      	ands	r3, r7
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d116      	bne.n	800c26c <_dtoa_r+0xa0>
 800c23e:	4bb6      	ldr	r3, [pc, #728]	; (800c518 <_dtoa_r+0x34c>)
 800c240:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c242:	6013      	str	r3, [r2, #0]
 800c244:	033b      	lsls	r3, r7, #12
 800c246:	0b1b      	lsrs	r3, r3, #12
 800c248:	4323      	orrs	r3, r4
 800c24a:	d101      	bne.n	800c250 <_dtoa_r+0x84>
 800c24c:	f000 fdb5 	bl	800cdba <_dtoa_r+0xbee>
 800c250:	4bb2      	ldr	r3, [pc, #712]	; (800c51c <_dtoa_r+0x350>)
 800c252:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c254:	9306      	str	r3, [sp, #24]
 800c256:	2a00      	cmp	r2, #0
 800c258:	d002      	beq.n	800c260 <_dtoa_r+0x94>
 800c25a:	4bb1      	ldr	r3, [pc, #708]	; (800c520 <_dtoa_r+0x354>)
 800c25c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c25e:	6013      	str	r3, [r2, #0]
 800c260:	9806      	ldr	r0, [sp, #24]
 800c262:	b01d      	add	sp, #116	; 0x74
 800c264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c266:	2300      	movs	r3, #0
 800c268:	603b      	str	r3, [r7, #0]
 800c26a:	e7e2      	b.n	800c232 <_dtoa_r+0x66>
 800c26c:	9a08      	ldr	r2, [sp, #32]
 800c26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c270:	9210      	str	r2, [sp, #64]	; 0x40
 800c272:	9311      	str	r3, [sp, #68]	; 0x44
 800c274:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c276:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c278:	2200      	movs	r2, #0
 800c27a:	2300      	movs	r3, #0
 800c27c:	f7f4 f8e6 	bl	800044c <__aeabi_dcmpeq>
 800c280:	1e06      	subs	r6, r0, #0
 800c282:	d009      	beq.n	800c298 <_dtoa_r+0xcc>
 800c284:	2301      	movs	r3, #1
 800c286:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c288:	6013      	str	r3, [r2, #0]
 800c28a:	4ba6      	ldr	r3, [pc, #664]	; (800c524 <_dtoa_r+0x358>)
 800c28c:	9306      	str	r3, [sp, #24]
 800c28e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c290:	2b00      	cmp	r3, #0
 800c292:	d0e5      	beq.n	800c260 <_dtoa_r+0x94>
 800c294:	4ba4      	ldr	r3, [pc, #656]	; (800c528 <_dtoa_r+0x35c>)
 800c296:	e7e1      	b.n	800c25c <_dtoa_r+0x90>
 800c298:	ab1a      	add	r3, sp, #104	; 0x68
 800c29a:	9301      	str	r3, [sp, #4]
 800c29c:	ab1b      	add	r3, sp, #108	; 0x6c
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	9804      	ldr	r0, [sp, #16]
 800c2a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c2a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2a6:	f001 fe03 	bl	800deb0 <__d2b>
 800c2aa:	007a      	lsls	r2, r7, #1
 800c2ac:	9005      	str	r0, [sp, #20]
 800c2ae:	0d52      	lsrs	r2, r2, #21
 800c2b0:	d100      	bne.n	800c2b4 <_dtoa_r+0xe8>
 800c2b2:	e07b      	b.n	800c3ac <_dtoa_r+0x1e0>
 800c2b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2b6:	9617      	str	r6, [sp, #92]	; 0x5c
 800c2b8:	0319      	lsls	r1, r3, #12
 800c2ba:	4b9c      	ldr	r3, [pc, #624]	; (800c52c <_dtoa_r+0x360>)
 800c2bc:	0b09      	lsrs	r1, r1, #12
 800c2be:	430b      	orrs	r3, r1
 800c2c0:	499b      	ldr	r1, [pc, #620]	; (800c530 <_dtoa_r+0x364>)
 800c2c2:	1857      	adds	r7, r2, r1
 800c2c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c2c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c2c8:	0019      	movs	r1, r3
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	4b99      	ldr	r3, [pc, #612]	; (800c534 <_dtoa_r+0x368>)
 800c2ce:	f7f6 f8e1 	bl	8002494 <__aeabi_dsub>
 800c2d2:	4a99      	ldr	r2, [pc, #612]	; (800c538 <_dtoa_r+0x36c>)
 800c2d4:	4b99      	ldr	r3, [pc, #612]	; (800c53c <_dtoa_r+0x370>)
 800c2d6:	f7f5 fe1b 	bl	8001f10 <__aeabi_dmul>
 800c2da:	4a99      	ldr	r2, [pc, #612]	; (800c540 <_dtoa_r+0x374>)
 800c2dc:	4b99      	ldr	r3, [pc, #612]	; (800c544 <_dtoa_r+0x378>)
 800c2de:	f7f4 febd 	bl	800105c <__aeabi_dadd>
 800c2e2:	0004      	movs	r4, r0
 800c2e4:	0038      	movs	r0, r7
 800c2e6:	000d      	movs	r5, r1
 800c2e8:	f7f6 fcaa 	bl	8002c40 <__aeabi_i2d>
 800c2ec:	4a96      	ldr	r2, [pc, #600]	; (800c548 <_dtoa_r+0x37c>)
 800c2ee:	4b97      	ldr	r3, [pc, #604]	; (800c54c <_dtoa_r+0x380>)
 800c2f0:	f7f5 fe0e 	bl	8001f10 <__aeabi_dmul>
 800c2f4:	0002      	movs	r2, r0
 800c2f6:	000b      	movs	r3, r1
 800c2f8:	0020      	movs	r0, r4
 800c2fa:	0029      	movs	r1, r5
 800c2fc:	f7f4 feae 	bl	800105c <__aeabi_dadd>
 800c300:	0004      	movs	r4, r0
 800c302:	000d      	movs	r5, r1
 800c304:	f7f6 fc66 	bl	8002bd4 <__aeabi_d2iz>
 800c308:	2200      	movs	r2, #0
 800c30a:	9003      	str	r0, [sp, #12]
 800c30c:	2300      	movs	r3, #0
 800c30e:	0020      	movs	r0, r4
 800c310:	0029      	movs	r1, r5
 800c312:	f7f4 f8a1 	bl	8000458 <__aeabi_dcmplt>
 800c316:	2800      	cmp	r0, #0
 800c318:	d00b      	beq.n	800c332 <_dtoa_r+0x166>
 800c31a:	9803      	ldr	r0, [sp, #12]
 800c31c:	f7f6 fc90 	bl	8002c40 <__aeabi_i2d>
 800c320:	002b      	movs	r3, r5
 800c322:	0022      	movs	r2, r4
 800c324:	f7f4 f892 	bl	800044c <__aeabi_dcmpeq>
 800c328:	4243      	negs	r3, r0
 800c32a:	4158      	adcs	r0, r3
 800c32c:	9b03      	ldr	r3, [sp, #12]
 800c32e:	1a1b      	subs	r3, r3, r0
 800c330:	9303      	str	r3, [sp, #12]
 800c332:	2301      	movs	r3, #1
 800c334:	9316      	str	r3, [sp, #88]	; 0x58
 800c336:	9b03      	ldr	r3, [sp, #12]
 800c338:	2b16      	cmp	r3, #22
 800c33a:	d810      	bhi.n	800c35e <_dtoa_r+0x192>
 800c33c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c33e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c340:	9a03      	ldr	r2, [sp, #12]
 800c342:	4b83      	ldr	r3, [pc, #524]	; (800c550 <_dtoa_r+0x384>)
 800c344:	00d2      	lsls	r2, r2, #3
 800c346:	189b      	adds	r3, r3, r2
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	f7f4 f884 	bl	8000458 <__aeabi_dcmplt>
 800c350:	2800      	cmp	r0, #0
 800c352:	d047      	beq.n	800c3e4 <_dtoa_r+0x218>
 800c354:	9b03      	ldr	r3, [sp, #12]
 800c356:	3b01      	subs	r3, #1
 800c358:	9303      	str	r3, [sp, #12]
 800c35a:	2300      	movs	r3, #0
 800c35c:	9316      	str	r3, [sp, #88]	; 0x58
 800c35e:	2200      	movs	r2, #0
 800c360:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c362:	920a      	str	r2, [sp, #40]	; 0x28
 800c364:	1bdb      	subs	r3, r3, r7
 800c366:	1e5a      	subs	r2, r3, #1
 800c368:	d53e      	bpl.n	800c3e8 <_dtoa_r+0x21c>
 800c36a:	2201      	movs	r2, #1
 800c36c:	1ad3      	subs	r3, r2, r3
 800c36e:	930a      	str	r3, [sp, #40]	; 0x28
 800c370:	2300      	movs	r3, #0
 800c372:	930c      	str	r3, [sp, #48]	; 0x30
 800c374:	9b03      	ldr	r3, [sp, #12]
 800c376:	2b00      	cmp	r3, #0
 800c378:	db38      	blt.n	800c3ec <_dtoa_r+0x220>
 800c37a:	9a03      	ldr	r2, [sp, #12]
 800c37c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c37e:	4694      	mov	ip, r2
 800c380:	4463      	add	r3, ip
 800c382:	930c      	str	r3, [sp, #48]	; 0x30
 800c384:	2300      	movs	r3, #0
 800c386:	9213      	str	r2, [sp, #76]	; 0x4c
 800c388:	930d      	str	r3, [sp, #52]	; 0x34
 800c38a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c38c:	2401      	movs	r4, #1
 800c38e:	2b09      	cmp	r3, #9
 800c390:	d867      	bhi.n	800c462 <_dtoa_r+0x296>
 800c392:	2b05      	cmp	r3, #5
 800c394:	dd02      	ble.n	800c39c <_dtoa_r+0x1d0>
 800c396:	2400      	movs	r4, #0
 800c398:	3b04      	subs	r3, #4
 800c39a:	9322      	str	r3, [sp, #136]	; 0x88
 800c39c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c39e:	1e98      	subs	r0, r3, #2
 800c3a0:	2803      	cmp	r0, #3
 800c3a2:	d867      	bhi.n	800c474 <_dtoa_r+0x2a8>
 800c3a4:	f7f3 feb8 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c3a8:	5b383a2b 	.word	0x5b383a2b
 800c3ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3ae:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800c3b0:	18f6      	adds	r6, r6, r3
 800c3b2:	4b68      	ldr	r3, [pc, #416]	; (800c554 <_dtoa_r+0x388>)
 800c3b4:	18f2      	adds	r2, r6, r3
 800c3b6:	2a20      	cmp	r2, #32
 800c3b8:	dd0f      	ble.n	800c3da <_dtoa_r+0x20e>
 800c3ba:	2340      	movs	r3, #64	; 0x40
 800c3bc:	1a9b      	subs	r3, r3, r2
 800c3be:	409f      	lsls	r7, r3
 800c3c0:	4b65      	ldr	r3, [pc, #404]	; (800c558 <_dtoa_r+0x38c>)
 800c3c2:	0038      	movs	r0, r7
 800c3c4:	18f3      	adds	r3, r6, r3
 800c3c6:	40dc      	lsrs	r4, r3
 800c3c8:	4320      	orrs	r0, r4
 800c3ca:	f7f6 fc69 	bl	8002ca0 <__aeabi_ui2d>
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	4b62      	ldr	r3, [pc, #392]	; (800c55c <_dtoa_r+0x390>)
 800c3d2:	1e77      	subs	r7, r6, #1
 800c3d4:	18cb      	adds	r3, r1, r3
 800c3d6:	9217      	str	r2, [sp, #92]	; 0x5c
 800c3d8:	e776      	b.n	800c2c8 <_dtoa_r+0xfc>
 800c3da:	2320      	movs	r3, #32
 800c3dc:	0020      	movs	r0, r4
 800c3de:	1a9b      	subs	r3, r3, r2
 800c3e0:	4098      	lsls	r0, r3
 800c3e2:	e7f2      	b.n	800c3ca <_dtoa_r+0x1fe>
 800c3e4:	9016      	str	r0, [sp, #88]	; 0x58
 800c3e6:	e7ba      	b.n	800c35e <_dtoa_r+0x192>
 800c3e8:	920c      	str	r2, [sp, #48]	; 0x30
 800c3ea:	e7c3      	b.n	800c374 <_dtoa_r+0x1a8>
 800c3ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ee:	9a03      	ldr	r2, [sp, #12]
 800c3f0:	1a9b      	subs	r3, r3, r2
 800c3f2:	930a      	str	r3, [sp, #40]	; 0x28
 800c3f4:	4253      	negs	r3, r2
 800c3f6:	930d      	str	r3, [sp, #52]	; 0x34
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	9313      	str	r3, [sp, #76]	; 0x4c
 800c3fc:	e7c5      	b.n	800c38a <_dtoa_r+0x1be>
 800c3fe:	2300      	movs	r3, #0
 800c400:	930f      	str	r3, [sp, #60]	; 0x3c
 800c402:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c404:	930b      	str	r3, [sp, #44]	; 0x2c
 800c406:	9307      	str	r3, [sp, #28]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	dc13      	bgt.n	800c434 <_dtoa_r+0x268>
 800c40c:	2301      	movs	r3, #1
 800c40e:	001a      	movs	r2, r3
 800c410:	930b      	str	r3, [sp, #44]	; 0x2c
 800c412:	9307      	str	r3, [sp, #28]
 800c414:	9223      	str	r2, [sp, #140]	; 0x8c
 800c416:	e00d      	b.n	800c434 <_dtoa_r+0x268>
 800c418:	2301      	movs	r3, #1
 800c41a:	e7f1      	b.n	800c400 <_dtoa_r+0x234>
 800c41c:	2300      	movs	r3, #0
 800c41e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c420:	930f      	str	r3, [sp, #60]	; 0x3c
 800c422:	4694      	mov	ip, r2
 800c424:	9b03      	ldr	r3, [sp, #12]
 800c426:	4463      	add	r3, ip
 800c428:	930b      	str	r3, [sp, #44]	; 0x2c
 800c42a:	3301      	adds	r3, #1
 800c42c:	9307      	str	r3, [sp, #28]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	dc00      	bgt.n	800c434 <_dtoa_r+0x268>
 800c432:	2301      	movs	r3, #1
 800c434:	9a04      	ldr	r2, [sp, #16]
 800c436:	2100      	movs	r1, #0
 800c438:	69d0      	ldr	r0, [r2, #28]
 800c43a:	2204      	movs	r2, #4
 800c43c:	0015      	movs	r5, r2
 800c43e:	3514      	adds	r5, #20
 800c440:	429d      	cmp	r5, r3
 800c442:	d91b      	bls.n	800c47c <_dtoa_r+0x2b0>
 800c444:	6041      	str	r1, [r0, #4]
 800c446:	9804      	ldr	r0, [sp, #16]
 800c448:	f001 f944 	bl	800d6d4 <_Balloc>
 800c44c:	9006      	str	r0, [sp, #24]
 800c44e:	2800      	cmp	r0, #0
 800c450:	d117      	bne.n	800c482 <_dtoa_r+0x2b6>
 800c452:	21b0      	movs	r1, #176	; 0xb0
 800c454:	4b42      	ldr	r3, [pc, #264]	; (800c560 <_dtoa_r+0x394>)
 800c456:	482e      	ldr	r0, [pc, #184]	; (800c510 <_dtoa_r+0x344>)
 800c458:	9a06      	ldr	r2, [sp, #24]
 800c45a:	31ff      	adds	r1, #255	; 0xff
 800c45c:	e6cb      	b.n	800c1f6 <_dtoa_r+0x2a>
 800c45e:	2301      	movs	r3, #1
 800c460:	e7dd      	b.n	800c41e <_dtoa_r+0x252>
 800c462:	2300      	movs	r3, #0
 800c464:	940f      	str	r4, [sp, #60]	; 0x3c
 800c466:	9322      	str	r3, [sp, #136]	; 0x88
 800c468:	3b01      	subs	r3, #1
 800c46a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c46c:	9307      	str	r3, [sp, #28]
 800c46e:	2200      	movs	r2, #0
 800c470:	3313      	adds	r3, #19
 800c472:	e7cf      	b.n	800c414 <_dtoa_r+0x248>
 800c474:	2301      	movs	r3, #1
 800c476:	930f      	str	r3, [sp, #60]	; 0x3c
 800c478:	3b02      	subs	r3, #2
 800c47a:	e7f6      	b.n	800c46a <_dtoa_r+0x29e>
 800c47c:	3101      	adds	r1, #1
 800c47e:	0052      	lsls	r2, r2, #1
 800c480:	e7dc      	b.n	800c43c <_dtoa_r+0x270>
 800c482:	9b04      	ldr	r3, [sp, #16]
 800c484:	9a06      	ldr	r2, [sp, #24]
 800c486:	69db      	ldr	r3, [r3, #28]
 800c488:	601a      	str	r2, [r3, #0]
 800c48a:	9b07      	ldr	r3, [sp, #28]
 800c48c:	2b0e      	cmp	r3, #14
 800c48e:	d900      	bls.n	800c492 <_dtoa_r+0x2c6>
 800c490:	e0e5      	b.n	800c65e <_dtoa_r+0x492>
 800c492:	2c00      	cmp	r4, #0
 800c494:	d100      	bne.n	800c498 <_dtoa_r+0x2cc>
 800c496:	e0e2      	b.n	800c65e <_dtoa_r+0x492>
 800c498:	9b03      	ldr	r3, [sp, #12]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	dd64      	ble.n	800c568 <_dtoa_r+0x39c>
 800c49e:	210f      	movs	r1, #15
 800c4a0:	9a03      	ldr	r2, [sp, #12]
 800c4a2:	4b2b      	ldr	r3, [pc, #172]	; (800c550 <_dtoa_r+0x384>)
 800c4a4:	400a      	ands	r2, r1
 800c4a6:	00d2      	lsls	r2, r2, #3
 800c4a8:	189b      	adds	r3, r3, r2
 800c4aa:	681e      	ldr	r6, [r3, #0]
 800c4ac:	685f      	ldr	r7, [r3, #4]
 800c4ae:	9b03      	ldr	r3, [sp, #12]
 800c4b0:	2402      	movs	r4, #2
 800c4b2:	111d      	asrs	r5, r3, #4
 800c4b4:	05db      	lsls	r3, r3, #23
 800c4b6:	d50a      	bpl.n	800c4ce <_dtoa_r+0x302>
 800c4b8:	4b2a      	ldr	r3, [pc, #168]	; (800c564 <_dtoa_r+0x398>)
 800c4ba:	400d      	ands	r5, r1
 800c4bc:	6a1a      	ldr	r2, [r3, #32]
 800c4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c4c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c4c4:	f7f5 f92a 	bl	800171c <__aeabi_ddiv>
 800c4c8:	9008      	str	r0, [sp, #32]
 800c4ca:	9109      	str	r1, [sp, #36]	; 0x24
 800c4cc:	3401      	adds	r4, #1
 800c4ce:	4b25      	ldr	r3, [pc, #148]	; (800c564 <_dtoa_r+0x398>)
 800c4d0:	930e      	str	r3, [sp, #56]	; 0x38
 800c4d2:	2d00      	cmp	r5, #0
 800c4d4:	d108      	bne.n	800c4e8 <_dtoa_r+0x31c>
 800c4d6:	9808      	ldr	r0, [sp, #32]
 800c4d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4da:	0032      	movs	r2, r6
 800c4dc:	003b      	movs	r3, r7
 800c4de:	f7f5 f91d 	bl	800171c <__aeabi_ddiv>
 800c4e2:	9008      	str	r0, [sp, #32]
 800c4e4:	9109      	str	r1, [sp, #36]	; 0x24
 800c4e6:	e05a      	b.n	800c59e <_dtoa_r+0x3d2>
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	421d      	tst	r5, r3
 800c4ec:	d009      	beq.n	800c502 <_dtoa_r+0x336>
 800c4ee:	18e4      	adds	r4, r4, r3
 800c4f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4f2:	0030      	movs	r0, r6
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	0039      	movs	r1, r7
 800c4fa:	f7f5 fd09 	bl	8001f10 <__aeabi_dmul>
 800c4fe:	0006      	movs	r6, r0
 800c500:	000f      	movs	r7, r1
 800c502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c504:	106d      	asrs	r5, r5, #1
 800c506:	3308      	adds	r3, #8
 800c508:	e7e2      	b.n	800c4d0 <_dtoa_r+0x304>
 800c50a:	46c0      	nop			; (mov r8, r8)
 800c50c:	0800edf7 	.word	0x0800edf7
 800c510:	0800ee0e 	.word	0x0800ee0e
 800c514:	7ff00000 	.word	0x7ff00000
 800c518:	0000270f 	.word	0x0000270f
 800c51c:	0800edf3 	.word	0x0800edf3
 800c520:	0800edf6 	.word	0x0800edf6
 800c524:	0800edb9 	.word	0x0800edb9
 800c528:	0800edba 	.word	0x0800edba
 800c52c:	3ff00000 	.word	0x3ff00000
 800c530:	fffffc01 	.word	0xfffffc01
 800c534:	3ff80000 	.word	0x3ff80000
 800c538:	636f4361 	.word	0x636f4361
 800c53c:	3fd287a7 	.word	0x3fd287a7
 800c540:	8b60c8b3 	.word	0x8b60c8b3
 800c544:	3fc68a28 	.word	0x3fc68a28
 800c548:	509f79fb 	.word	0x509f79fb
 800c54c:	3fd34413 	.word	0x3fd34413
 800c550:	0800ef58 	.word	0x0800ef58
 800c554:	00000432 	.word	0x00000432
 800c558:	00000412 	.word	0x00000412
 800c55c:	fe100000 	.word	0xfe100000
 800c560:	0800ee66 	.word	0x0800ee66
 800c564:	0800ef30 	.word	0x0800ef30
 800c568:	9b03      	ldr	r3, [sp, #12]
 800c56a:	2402      	movs	r4, #2
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d016      	beq.n	800c59e <_dtoa_r+0x3d2>
 800c570:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c572:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c574:	220f      	movs	r2, #15
 800c576:	425d      	negs	r5, r3
 800c578:	402a      	ands	r2, r5
 800c57a:	4bdd      	ldr	r3, [pc, #884]	; (800c8f0 <_dtoa_r+0x724>)
 800c57c:	00d2      	lsls	r2, r2, #3
 800c57e:	189b      	adds	r3, r3, r2
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	f7f5 fcc4 	bl	8001f10 <__aeabi_dmul>
 800c588:	2701      	movs	r7, #1
 800c58a:	2300      	movs	r3, #0
 800c58c:	9008      	str	r0, [sp, #32]
 800c58e:	9109      	str	r1, [sp, #36]	; 0x24
 800c590:	4ed8      	ldr	r6, [pc, #864]	; (800c8f4 <_dtoa_r+0x728>)
 800c592:	112d      	asrs	r5, r5, #4
 800c594:	2d00      	cmp	r5, #0
 800c596:	d000      	beq.n	800c59a <_dtoa_r+0x3ce>
 800c598:	e091      	b.n	800c6be <_dtoa_r+0x4f2>
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1a1      	bne.n	800c4e2 <_dtoa_r+0x316>
 800c59e:	9e08      	ldr	r6, [sp, #32]
 800c5a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c5a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d100      	bne.n	800c5aa <_dtoa_r+0x3de>
 800c5a8:	e094      	b.n	800c6d4 <_dtoa_r+0x508>
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	0030      	movs	r0, r6
 800c5ae:	0039      	movs	r1, r7
 800c5b0:	4bd1      	ldr	r3, [pc, #836]	; (800c8f8 <_dtoa_r+0x72c>)
 800c5b2:	f7f3 ff51 	bl	8000458 <__aeabi_dcmplt>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d100      	bne.n	800c5bc <_dtoa_r+0x3f0>
 800c5ba:	e08b      	b.n	800c6d4 <_dtoa_r+0x508>
 800c5bc:	9b07      	ldr	r3, [sp, #28]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d100      	bne.n	800c5c4 <_dtoa_r+0x3f8>
 800c5c2:	e087      	b.n	800c6d4 <_dtoa_r+0x508>
 800c5c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	dd45      	ble.n	800c656 <_dtoa_r+0x48a>
 800c5ca:	9b03      	ldr	r3, [sp, #12]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	930e      	str	r3, [sp, #56]	; 0x38
 800c5d2:	0030      	movs	r0, r6
 800c5d4:	4bc9      	ldr	r3, [pc, #804]	; (800c8fc <_dtoa_r+0x730>)
 800c5d6:	0039      	movs	r1, r7
 800c5d8:	f7f5 fc9a 	bl	8001f10 <__aeabi_dmul>
 800c5dc:	9008      	str	r0, [sp, #32]
 800c5de:	9109      	str	r1, [sp, #36]	; 0x24
 800c5e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5e2:	3401      	adds	r4, #1
 800c5e4:	0020      	movs	r0, r4
 800c5e6:	9e08      	ldr	r6, [sp, #32]
 800c5e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c5ea:	9312      	str	r3, [sp, #72]	; 0x48
 800c5ec:	f7f6 fb28 	bl	8002c40 <__aeabi_i2d>
 800c5f0:	0032      	movs	r2, r6
 800c5f2:	003b      	movs	r3, r7
 800c5f4:	f7f5 fc8c 	bl	8001f10 <__aeabi_dmul>
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	4bc1      	ldr	r3, [pc, #772]	; (800c900 <_dtoa_r+0x734>)
 800c5fc:	f7f4 fd2e 	bl	800105c <__aeabi_dadd>
 800c600:	4ac0      	ldr	r2, [pc, #768]	; (800c904 <_dtoa_r+0x738>)
 800c602:	9014      	str	r0, [sp, #80]	; 0x50
 800c604:	9115      	str	r1, [sp, #84]	; 0x54
 800c606:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c608:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800c60a:	4694      	mov	ip, r2
 800c60c:	9308      	str	r3, [sp, #32]
 800c60e:	9409      	str	r4, [sp, #36]	; 0x24
 800c610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c612:	4463      	add	r3, ip
 800c614:	9318      	str	r3, [sp, #96]	; 0x60
 800c616:	9309      	str	r3, [sp, #36]	; 0x24
 800c618:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d15e      	bne.n	800c6dc <_dtoa_r+0x510>
 800c61e:	2200      	movs	r2, #0
 800c620:	4bb9      	ldr	r3, [pc, #740]	; (800c908 <_dtoa_r+0x73c>)
 800c622:	0030      	movs	r0, r6
 800c624:	0039      	movs	r1, r7
 800c626:	f7f5 ff35 	bl	8002494 <__aeabi_dsub>
 800c62a:	9a08      	ldr	r2, [sp, #32]
 800c62c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c62e:	0004      	movs	r4, r0
 800c630:	000d      	movs	r5, r1
 800c632:	f7f3 ff25 	bl	8000480 <__aeabi_dcmpgt>
 800c636:	2800      	cmp	r0, #0
 800c638:	d000      	beq.n	800c63c <_dtoa_r+0x470>
 800c63a:	e2b3      	b.n	800cba4 <_dtoa_r+0x9d8>
 800c63c:	48b3      	ldr	r0, [pc, #716]	; (800c90c <_dtoa_r+0x740>)
 800c63e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c640:	4684      	mov	ip, r0
 800c642:	4461      	add	r1, ip
 800c644:	000b      	movs	r3, r1
 800c646:	0020      	movs	r0, r4
 800c648:	0029      	movs	r1, r5
 800c64a:	9a08      	ldr	r2, [sp, #32]
 800c64c:	f7f3 ff04 	bl	8000458 <__aeabi_dcmplt>
 800c650:	2800      	cmp	r0, #0
 800c652:	d000      	beq.n	800c656 <_dtoa_r+0x48a>
 800c654:	e2a3      	b.n	800cb9e <_dtoa_r+0x9d2>
 800c656:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c658:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800c65a:	9308      	str	r3, [sp, #32]
 800c65c:	9409      	str	r4, [sp, #36]	; 0x24
 800c65e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c660:	2b00      	cmp	r3, #0
 800c662:	da00      	bge.n	800c666 <_dtoa_r+0x49a>
 800c664:	e179      	b.n	800c95a <_dtoa_r+0x78e>
 800c666:	9a03      	ldr	r2, [sp, #12]
 800c668:	2a0e      	cmp	r2, #14
 800c66a:	dd00      	ble.n	800c66e <_dtoa_r+0x4a2>
 800c66c:	e175      	b.n	800c95a <_dtoa_r+0x78e>
 800c66e:	4ba0      	ldr	r3, [pc, #640]	; (800c8f0 <_dtoa_r+0x724>)
 800c670:	00d2      	lsls	r2, r2, #3
 800c672:	189b      	adds	r3, r3, r2
 800c674:	681e      	ldr	r6, [r3, #0]
 800c676:	685f      	ldr	r7, [r3, #4]
 800c678:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	db00      	blt.n	800c680 <_dtoa_r+0x4b4>
 800c67e:	e0e5      	b.n	800c84c <_dtoa_r+0x680>
 800c680:	9b07      	ldr	r3, [sp, #28]
 800c682:	2b00      	cmp	r3, #0
 800c684:	dd00      	ble.n	800c688 <_dtoa_r+0x4bc>
 800c686:	e0e1      	b.n	800c84c <_dtoa_r+0x680>
 800c688:	d000      	beq.n	800c68c <_dtoa_r+0x4c0>
 800c68a:	e288      	b.n	800cb9e <_dtoa_r+0x9d2>
 800c68c:	2200      	movs	r2, #0
 800c68e:	0030      	movs	r0, r6
 800c690:	0039      	movs	r1, r7
 800c692:	4b9d      	ldr	r3, [pc, #628]	; (800c908 <_dtoa_r+0x73c>)
 800c694:	f7f5 fc3c 	bl	8001f10 <__aeabi_dmul>
 800c698:	9a08      	ldr	r2, [sp, #32]
 800c69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c69c:	f7f3 fefa 	bl	8000494 <__aeabi_dcmpge>
 800c6a0:	9e07      	ldr	r6, [sp, #28]
 800c6a2:	0037      	movs	r7, r6
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d000      	beq.n	800c6aa <_dtoa_r+0x4de>
 800c6a8:	e25f      	b.n	800cb6a <_dtoa_r+0x99e>
 800c6aa:	9b06      	ldr	r3, [sp, #24]
 800c6ac:	9a06      	ldr	r2, [sp, #24]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	9308      	str	r3, [sp, #32]
 800c6b2:	2331      	movs	r3, #49	; 0x31
 800c6b4:	7013      	strb	r3, [r2, #0]
 800c6b6:	9b03      	ldr	r3, [sp, #12]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	9303      	str	r3, [sp, #12]
 800c6bc:	e25a      	b.n	800cb74 <_dtoa_r+0x9a8>
 800c6be:	423d      	tst	r5, r7
 800c6c0:	d005      	beq.n	800c6ce <_dtoa_r+0x502>
 800c6c2:	6832      	ldr	r2, [r6, #0]
 800c6c4:	6873      	ldr	r3, [r6, #4]
 800c6c6:	f7f5 fc23 	bl	8001f10 <__aeabi_dmul>
 800c6ca:	003b      	movs	r3, r7
 800c6cc:	3401      	adds	r4, #1
 800c6ce:	106d      	asrs	r5, r5, #1
 800c6d0:	3608      	adds	r6, #8
 800c6d2:	e75f      	b.n	800c594 <_dtoa_r+0x3c8>
 800c6d4:	9b03      	ldr	r3, [sp, #12]
 800c6d6:	930e      	str	r3, [sp, #56]	; 0x38
 800c6d8:	9b07      	ldr	r3, [sp, #28]
 800c6da:	e783      	b.n	800c5e4 <_dtoa_r+0x418>
 800c6dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c6de:	4b84      	ldr	r3, [pc, #528]	; (800c8f0 <_dtoa_r+0x724>)
 800c6e0:	3a01      	subs	r2, #1
 800c6e2:	00d2      	lsls	r2, r2, #3
 800c6e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c6e6:	189b      	adds	r3, r3, r2
 800c6e8:	9c08      	ldr	r4, [sp, #32]
 800c6ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	2900      	cmp	r1, #0
 800c6f2:	d051      	beq.n	800c798 <_dtoa_r+0x5cc>
 800c6f4:	2000      	movs	r0, #0
 800c6f6:	4986      	ldr	r1, [pc, #536]	; (800c910 <_dtoa_r+0x744>)
 800c6f8:	f7f5 f810 	bl	800171c <__aeabi_ddiv>
 800c6fc:	0022      	movs	r2, r4
 800c6fe:	002b      	movs	r3, r5
 800c700:	f7f5 fec8 	bl	8002494 <__aeabi_dsub>
 800c704:	9a06      	ldr	r2, [sp, #24]
 800c706:	0004      	movs	r4, r0
 800c708:	4694      	mov	ip, r2
 800c70a:	000d      	movs	r5, r1
 800c70c:	9b06      	ldr	r3, [sp, #24]
 800c70e:	9314      	str	r3, [sp, #80]	; 0x50
 800c710:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c712:	4463      	add	r3, ip
 800c714:	9318      	str	r3, [sp, #96]	; 0x60
 800c716:	0039      	movs	r1, r7
 800c718:	0030      	movs	r0, r6
 800c71a:	f7f6 fa5b 	bl	8002bd4 <__aeabi_d2iz>
 800c71e:	9012      	str	r0, [sp, #72]	; 0x48
 800c720:	f7f6 fa8e 	bl	8002c40 <__aeabi_i2d>
 800c724:	0002      	movs	r2, r0
 800c726:	000b      	movs	r3, r1
 800c728:	0030      	movs	r0, r6
 800c72a:	0039      	movs	r1, r7
 800c72c:	f7f5 feb2 	bl	8002494 <__aeabi_dsub>
 800c730:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c732:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c734:	3301      	adds	r3, #1
 800c736:	9308      	str	r3, [sp, #32]
 800c738:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c73a:	0006      	movs	r6, r0
 800c73c:	3330      	adds	r3, #48	; 0x30
 800c73e:	7013      	strb	r3, [r2, #0]
 800c740:	0022      	movs	r2, r4
 800c742:	002b      	movs	r3, r5
 800c744:	000f      	movs	r7, r1
 800c746:	f7f3 fe87 	bl	8000458 <__aeabi_dcmplt>
 800c74a:	2800      	cmp	r0, #0
 800c74c:	d174      	bne.n	800c838 <_dtoa_r+0x66c>
 800c74e:	0032      	movs	r2, r6
 800c750:	003b      	movs	r3, r7
 800c752:	2000      	movs	r0, #0
 800c754:	4968      	ldr	r1, [pc, #416]	; (800c8f8 <_dtoa_r+0x72c>)
 800c756:	f7f5 fe9d 	bl	8002494 <__aeabi_dsub>
 800c75a:	0022      	movs	r2, r4
 800c75c:	002b      	movs	r3, r5
 800c75e:	f7f3 fe7b 	bl	8000458 <__aeabi_dcmplt>
 800c762:	2800      	cmp	r0, #0
 800c764:	d000      	beq.n	800c768 <_dtoa_r+0x59c>
 800c766:	e0d7      	b.n	800c918 <_dtoa_r+0x74c>
 800c768:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c76a:	9a08      	ldr	r2, [sp, #32]
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d100      	bne.n	800c772 <_dtoa_r+0x5a6>
 800c770:	e771      	b.n	800c656 <_dtoa_r+0x48a>
 800c772:	2200      	movs	r2, #0
 800c774:	0020      	movs	r0, r4
 800c776:	0029      	movs	r1, r5
 800c778:	4b60      	ldr	r3, [pc, #384]	; (800c8fc <_dtoa_r+0x730>)
 800c77a:	f7f5 fbc9 	bl	8001f10 <__aeabi_dmul>
 800c77e:	4b5f      	ldr	r3, [pc, #380]	; (800c8fc <_dtoa_r+0x730>)
 800c780:	0004      	movs	r4, r0
 800c782:	000d      	movs	r5, r1
 800c784:	0030      	movs	r0, r6
 800c786:	0039      	movs	r1, r7
 800c788:	2200      	movs	r2, #0
 800c78a:	f7f5 fbc1 	bl	8001f10 <__aeabi_dmul>
 800c78e:	9b08      	ldr	r3, [sp, #32]
 800c790:	0006      	movs	r6, r0
 800c792:	000f      	movs	r7, r1
 800c794:	9314      	str	r3, [sp, #80]	; 0x50
 800c796:	e7be      	b.n	800c716 <_dtoa_r+0x54a>
 800c798:	0020      	movs	r0, r4
 800c79a:	0029      	movs	r1, r5
 800c79c:	f7f5 fbb8 	bl	8001f10 <__aeabi_dmul>
 800c7a0:	9a06      	ldr	r2, [sp, #24]
 800c7a2:	9b06      	ldr	r3, [sp, #24]
 800c7a4:	4694      	mov	ip, r2
 800c7a6:	9308      	str	r3, [sp, #32]
 800c7a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c7aa:	9014      	str	r0, [sp, #80]	; 0x50
 800c7ac:	9115      	str	r1, [sp, #84]	; 0x54
 800c7ae:	4463      	add	r3, ip
 800c7b0:	9319      	str	r3, [sp, #100]	; 0x64
 800c7b2:	0030      	movs	r0, r6
 800c7b4:	0039      	movs	r1, r7
 800c7b6:	f7f6 fa0d 	bl	8002bd4 <__aeabi_d2iz>
 800c7ba:	9018      	str	r0, [sp, #96]	; 0x60
 800c7bc:	f7f6 fa40 	bl	8002c40 <__aeabi_i2d>
 800c7c0:	0002      	movs	r2, r0
 800c7c2:	000b      	movs	r3, r1
 800c7c4:	0030      	movs	r0, r6
 800c7c6:	0039      	movs	r1, r7
 800c7c8:	f7f5 fe64 	bl	8002494 <__aeabi_dsub>
 800c7cc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800c7ce:	9b08      	ldr	r3, [sp, #32]
 800c7d0:	3630      	adds	r6, #48	; 0x30
 800c7d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c7d4:	701e      	strb	r6, [r3, #0]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	0004      	movs	r4, r0
 800c7da:	000d      	movs	r5, r1
 800c7dc:	9308      	str	r3, [sp, #32]
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d12d      	bne.n	800c83e <_dtoa_r+0x672>
 800c7e2:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c7e4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c7e6:	9a06      	ldr	r2, [sp, #24]
 800c7e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c7ea:	4694      	mov	ip, r2
 800c7ec:	4463      	add	r3, ip
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	9308      	str	r3, [sp, #32]
 800c7f2:	4b47      	ldr	r3, [pc, #284]	; (800c910 <_dtoa_r+0x744>)
 800c7f4:	f7f4 fc32 	bl	800105c <__aeabi_dadd>
 800c7f8:	0002      	movs	r2, r0
 800c7fa:	000b      	movs	r3, r1
 800c7fc:	0020      	movs	r0, r4
 800c7fe:	0029      	movs	r1, r5
 800c800:	f7f3 fe3e 	bl	8000480 <__aeabi_dcmpgt>
 800c804:	2800      	cmp	r0, #0
 800c806:	d000      	beq.n	800c80a <_dtoa_r+0x63e>
 800c808:	e086      	b.n	800c918 <_dtoa_r+0x74c>
 800c80a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c80c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c80e:	2000      	movs	r0, #0
 800c810:	493f      	ldr	r1, [pc, #252]	; (800c910 <_dtoa_r+0x744>)
 800c812:	f7f5 fe3f 	bl	8002494 <__aeabi_dsub>
 800c816:	0002      	movs	r2, r0
 800c818:	000b      	movs	r3, r1
 800c81a:	0020      	movs	r0, r4
 800c81c:	0029      	movs	r1, r5
 800c81e:	f7f3 fe1b 	bl	8000458 <__aeabi_dcmplt>
 800c822:	2800      	cmp	r0, #0
 800c824:	d100      	bne.n	800c828 <_dtoa_r+0x65c>
 800c826:	e716      	b.n	800c656 <_dtoa_r+0x48a>
 800c828:	9b08      	ldr	r3, [sp, #32]
 800c82a:	001a      	movs	r2, r3
 800c82c:	3a01      	subs	r2, #1
 800c82e:	9208      	str	r2, [sp, #32]
 800c830:	7812      	ldrb	r2, [r2, #0]
 800c832:	2a30      	cmp	r2, #48	; 0x30
 800c834:	d0f8      	beq.n	800c828 <_dtoa_r+0x65c>
 800c836:	9308      	str	r3, [sp, #32]
 800c838:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c83a:	9303      	str	r3, [sp, #12]
 800c83c:	e046      	b.n	800c8cc <_dtoa_r+0x700>
 800c83e:	2200      	movs	r2, #0
 800c840:	4b2e      	ldr	r3, [pc, #184]	; (800c8fc <_dtoa_r+0x730>)
 800c842:	f7f5 fb65 	bl	8001f10 <__aeabi_dmul>
 800c846:	0006      	movs	r6, r0
 800c848:	000f      	movs	r7, r1
 800c84a:	e7b2      	b.n	800c7b2 <_dtoa_r+0x5e6>
 800c84c:	9b06      	ldr	r3, [sp, #24]
 800c84e:	9a06      	ldr	r2, [sp, #24]
 800c850:	930a      	str	r3, [sp, #40]	; 0x28
 800c852:	9b07      	ldr	r3, [sp, #28]
 800c854:	9c08      	ldr	r4, [sp, #32]
 800c856:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c858:	3b01      	subs	r3, #1
 800c85a:	189b      	adds	r3, r3, r2
 800c85c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c85e:	0032      	movs	r2, r6
 800c860:	003b      	movs	r3, r7
 800c862:	0020      	movs	r0, r4
 800c864:	0029      	movs	r1, r5
 800c866:	f7f4 ff59 	bl	800171c <__aeabi_ddiv>
 800c86a:	f7f6 f9b3 	bl	8002bd4 <__aeabi_d2iz>
 800c86e:	9007      	str	r0, [sp, #28]
 800c870:	f7f6 f9e6 	bl	8002c40 <__aeabi_i2d>
 800c874:	0032      	movs	r2, r6
 800c876:	003b      	movs	r3, r7
 800c878:	f7f5 fb4a 	bl	8001f10 <__aeabi_dmul>
 800c87c:	0002      	movs	r2, r0
 800c87e:	000b      	movs	r3, r1
 800c880:	0020      	movs	r0, r4
 800c882:	0029      	movs	r1, r5
 800c884:	f7f5 fe06 	bl	8002494 <__aeabi_dsub>
 800c888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c88a:	001a      	movs	r2, r3
 800c88c:	3201      	adds	r2, #1
 800c88e:	920a      	str	r2, [sp, #40]	; 0x28
 800c890:	9208      	str	r2, [sp, #32]
 800c892:	9a07      	ldr	r2, [sp, #28]
 800c894:	3230      	adds	r2, #48	; 0x30
 800c896:	701a      	strb	r2, [r3, #0]
 800c898:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d14f      	bne.n	800c93e <_dtoa_r+0x772>
 800c89e:	0002      	movs	r2, r0
 800c8a0:	000b      	movs	r3, r1
 800c8a2:	f7f4 fbdb 	bl	800105c <__aeabi_dadd>
 800c8a6:	0032      	movs	r2, r6
 800c8a8:	003b      	movs	r3, r7
 800c8aa:	0004      	movs	r4, r0
 800c8ac:	000d      	movs	r5, r1
 800c8ae:	f7f3 fde7 	bl	8000480 <__aeabi_dcmpgt>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d12e      	bne.n	800c914 <_dtoa_r+0x748>
 800c8b6:	0032      	movs	r2, r6
 800c8b8:	003b      	movs	r3, r7
 800c8ba:	0020      	movs	r0, r4
 800c8bc:	0029      	movs	r1, r5
 800c8be:	f7f3 fdc5 	bl	800044c <__aeabi_dcmpeq>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d002      	beq.n	800c8cc <_dtoa_r+0x700>
 800c8c6:	9b07      	ldr	r3, [sp, #28]
 800c8c8:	07de      	lsls	r6, r3, #31
 800c8ca:	d423      	bmi.n	800c914 <_dtoa_r+0x748>
 800c8cc:	9905      	ldr	r1, [sp, #20]
 800c8ce:	9804      	ldr	r0, [sp, #16]
 800c8d0:	f000 ff44 	bl	800d75c <_Bfree>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	9a08      	ldr	r2, [sp, #32]
 800c8d8:	7013      	strb	r3, [r2, #0]
 800c8da:	9b03      	ldr	r3, [sp, #12]
 800c8dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c8de:	3301      	adds	r3, #1
 800c8e0:	6013      	str	r3, [r2, #0]
 800c8e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d100      	bne.n	800c8ea <_dtoa_r+0x71e>
 800c8e8:	e4ba      	b.n	800c260 <_dtoa_r+0x94>
 800c8ea:	9a08      	ldr	r2, [sp, #32]
 800c8ec:	601a      	str	r2, [r3, #0]
 800c8ee:	e4b7      	b.n	800c260 <_dtoa_r+0x94>
 800c8f0:	0800ef58 	.word	0x0800ef58
 800c8f4:	0800ef30 	.word	0x0800ef30
 800c8f8:	3ff00000 	.word	0x3ff00000
 800c8fc:	40240000 	.word	0x40240000
 800c900:	401c0000 	.word	0x401c0000
 800c904:	fcc00000 	.word	0xfcc00000
 800c908:	40140000 	.word	0x40140000
 800c90c:	7cc00000 	.word	0x7cc00000
 800c910:	3fe00000 	.word	0x3fe00000
 800c914:	9b03      	ldr	r3, [sp, #12]
 800c916:	930e      	str	r3, [sp, #56]	; 0x38
 800c918:	9b08      	ldr	r3, [sp, #32]
 800c91a:	9308      	str	r3, [sp, #32]
 800c91c:	3b01      	subs	r3, #1
 800c91e:	781a      	ldrb	r2, [r3, #0]
 800c920:	2a39      	cmp	r2, #57	; 0x39
 800c922:	d108      	bne.n	800c936 <_dtoa_r+0x76a>
 800c924:	9a06      	ldr	r2, [sp, #24]
 800c926:	429a      	cmp	r2, r3
 800c928:	d1f7      	bne.n	800c91a <_dtoa_r+0x74e>
 800c92a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c92c:	9906      	ldr	r1, [sp, #24]
 800c92e:	3201      	adds	r2, #1
 800c930:	920e      	str	r2, [sp, #56]	; 0x38
 800c932:	2230      	movs	r2, #48	; 0x30
 800c934:	700a      	strb	r2, [r1, #0]
 800c936:	781a      	ldrb	r2, [r3, #0]
 800c938:	3201      	adds	r2, #1
 800c93a:	701a      	strb	r2, [r3, #0]
 800c93c:	e77c      	b.n	800c838 <_dtoa_r+0x66c>
 800c93e:	2200      	movs	r2, #0
 800c940:	4ba9      	ldr	r3, [pc, #676]	; (800cbe8 <_dtoa_r+0xa1c>)
 800c942:	f7f5 fae5 	bl	8001f10 <__aeabi_dmul>
 800c946:	2200      	movs	r2, #0
 800c948:	2300      	movs	r3, #0
 800c94a:	0004      	movs	r4, r0
 800c94c:	000d      	movs	r5, r1
 800c94e:	f7f3 fd7d 	bl	800044c <__aeabi_dcmpeq>
 800c952:	2800      	cmp	r0, #0
 800c954:	d100      	bne.n	800c958 <_dtoa_r+0x78c>
 800c956:	e782      	b.n	800c85e <_dtoa_r+0x692>
 800c958:	e7b8      	b.n	800c8cc <_dtoa_r+0x700>
 800c95a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800c95c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c95e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c960:	2f00      	cmp	r7, #0
 800c962:	d012      	beq.n	800c98a <_dtoa_r+0x7be>
 800c964:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c966:	2a01      	cmp	r2, #1
 800c968:	dc6e      	bgt.n	800ca48 <_dtoa_r+0x87c>
 800c96a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c96c:	2a00      	cmp	r2, #0
 800c96e:	d065      	beq.n	800ca3c <_dtoa_r+0x870>
 800c970:	4a9e      	ldr	r2, [pc, #632]	; (800cbec <_dtoa_r+0xa20>)
 800c972:	189b      	adds	r3, r3, r2
 800c974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c976:	2101      	movs	r1, #1
 800c978:	18d2      	adds	r2, r2, r3
 800c97a:	920a      	str	r2, [sp, #40]	; 0x28
 800c97c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c97e:	9804      	ldr	r0, [sp, #16]
 800c980:	18d3      	adds	r3, r2, r3
 800c982:	930c      	str	r3, [sp, #48]	; 0x30
 800c984:	f000 ffe6 	bl	800d954 <__i2b>
 800c988:	0007      	movs	r7, r0
 800c98a:	2c00      	cmp	r4, #0
 800c98c:	d00e      	beq.n	800c9ac <_dtoa_r+0x7e0>
 800c98e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c990:	2b00      	cmp	r3, #0
 800c992:	dd0b      	ble.n	800c9ac <_dtoa_r+0x7e0>
 800c994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c996:	0023      	movs	r3, r4
 800c998:	4294      	cmp	r4, r2
 800c99a:	dd00      	ble.n	800c99e <_dtoa_r+0x7d2>
 800c99c:	0013      	movs	r3, r2
 800c99e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9a0:	1ae4      	subs	r4, r4, r3
 800c9a2:	1ad2      	subs	r2, r2, r3
 800c9a4:	920a      	str	r2, [sp, #40]	; 0x28
 800c9a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	930c      	str	r3, [sp, #48]	; 0x30
 800c9ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d01e      	beq.n	800c9f0 <_dtoa_r+0x824>
 800c9b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d05c      	beq.n	800ca72 <_dtoa_r+0x8a6>
 800c9b8:	2d00      	cmp	r5, #0
 800c9ba:	dd10      	ble.n	800c9de <_dtoa_r+0x812>
 800c9bc:	0039      	movs	r1, r7
 800c9be:	002a      	movs	r2, r5
 800c9c0:	9804      	ldr	r0, [sp, #16]
 800c9c2:	f001 f88f 	bl	800dae4 <__pow5mult>
 800c9c6:	9a05      	ldr	r2, [sp, #20]
 800c9c8:	0001      	movs	r1, r0
 800c9ca:	0007      	movs	r7, r0
 800c9cc:	9804      	ldr	r0, [sp, #16]
 800c9ce:	f000 ffd9 	bl	800d984 <__multiply>
 800c9d2:	0006      	movs	r6, r0
 800c9d4:	9905      	ldr	r1, [sp, #20]
 800c9d6:	9804      	ldr	r0, [sp, #16]
 800c9d8:	f000 fec0 	bl	800d75c <_Bfree>
 800c9dc:	9605      	str	r6, [sp, #20]
 800c9de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9e0:	1b5a      	subs	r2, r3, r5
 800c9e2:	42ab      	cmp	r3, r5
 800c9e4:	d004      	beq.n	800c9f0 <_dtoa_r+0x824>
 800c9e6:	9905      	ldr	r1, [sp, #20]
 800c9e8:	9804      	ldr	r0, [sp, #16]
 800c9ea:	f001 f87b 	bl	800dae4 <__pow5mult>
 800c9ee:	9005      	str	r0, [sp, #20]
 800c9f0:	2101      	movs	r1, #1
 800c9f2:	9804      	ldr	r0, [sp, #16]
 800c9f4:	f000 ffae 	bl	800d954 <__i2b>
 800c9f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c9fa:	0006      	movs	r6, r0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	dd3a      	ble.n	800ca76 <_dtoa_r+0x8aa>
 800ca00:	001a      	movs	r2, r3
 800ca02:	0001      	movs	r1, r0
 800ca04:	9804      	ldr	r0, [sp, #16]
 800ca06:	f001 f86d 	bl	800dae4 <__pow5mult>
 800ca0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ca0c:	0006      	movs	r6, r0
 800ca0e:	2500      	movs	r5, #0
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	dc38      	bgt.n	800ca86 <_dtoa_r+0x8ba>
 800ca14:	2500      	movs	r5, #0
 800ca16:	9b08      	ldr	r3, [sp, #32]
 800ca18:	42ab      	cmp	r3, r5
 800ca1a:	d130      	bne.n	800ca7e <_dtoa_r+0x8b2>
 800ca1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca1e:	031b      	lsls	r3, r3, #12
 800ca20:	42ab      	cmp	r3, r5
 800ca22:	d12c      	bne.n	800ca7e <_dtoa_r+0x8b2>
 800ca24:	4b72      	ldr	r3, [pc, #456]	; (800cbf0 <_dtoa_r+0xa24>)
 800ca26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca28:	4213      	tst	r3, r2
 800ca2a:	d028      	beq.n	800ca7e <_dtoa_r+0x8b2>
 800ca2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca2e:	3501      	adds	r5, #1
 800ca30:	3301      	adds	r3, #1
 800ca32:	930a      	str	r3, [sp, #40]	; 0x28
 800ca34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca36:	3301      	adds	r3, #1
 800ca38:	930c      	str	r3, [sp, #48]	; 0x30
 800ca3a:	e020      	b.n	800ca7e <_dtoa_r+0x8b2>
 800ca3c:	2336      	movs	r3, #54	; 0x36
 800ca3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ca40:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ca42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ca44:	1a9b      	subs	r3, r3, r2
 800ca46:	e795      	b.n	800c974 <_dtoa_r+0x7a8>
 800ca48:	9b07      	ldr	r3, [sp, #28]
 800ca4a:	1e5d      	subs	r5, r3, #1
 800ca4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca4e:	42ab      	cmp	r3, r5
 800ca50:	db07      	blt.n	800ca62 <_dtoa_r+0x896>
 800ca52:	1b5d      	subs	r5, r3, r5
 800ca54:	9b07      	ldr	r3, [sp, #28]
 800ca56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	da8b      	bge.n	800c974 <_dtoa_r+0x7a8>
 800ca5c:	1ae4      	subs	r4, r4, r3
 800ca5e:	2300      	movs	r3, #0
 800ca60:	e788      	b.n	800c974 <_dtoa_r+0x7a8>
 800ca62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ca66:	1aeb      	subs	r3, r5, r3
 800ca68:	18d3      	adds	r3, r2, r3
 800ca6a:	950d      	str	r5, [sp, #52]	; 0x34
 800ca6c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ca6e:	2500      	movs	r5, #0
 800ca70:	e7f0      	b.n	800ca54 <_dtoa_r+0x888>
 800ca72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca74:	e7b7      	b.n	800c9e6 <_dtoa_r+0x81a>
 800ca76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ca78:	2500      	movs	r5, #0
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	ddca      	ble.n	800ca14 <_dtoa_r+0x848>
 800ca7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca80:	2001      	movs	r0, #1
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d008      	beq.n	800ca98 <_dtoa_r+0x8cc>
 800ca86:	6933      	ldr	r3, [r6, #16]
 800ca88:	3303      	adds	r3, #3
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	18f3      	adds	r3, r6, r3
 800ca8e:	6858      	ldr	r0, [r3, #4]
 800ca90:	f000 ff18 	bl	800d8c4 <__hi0bits>
 800ca94:	2320      	movs	r3, #32
 800ca96:	1a18      	subs	r0, r3, r0
 800ca98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca9a:	1818      	adds	r0, r3, r0
 800ca9c:	0002      	movs	r2, r0
 800ca9e:	231f      	movs	r3, #31
 800caa0:	401a      	ands	r2, r3
 800caa2:	4218      	tst	r0, r3
 800caa4:	d047      	beq.n	800cb36 <_dtoa_r+0x96a>
 800caa6:	3301      	adds	r3, #1
 800caa8:	1a9b      	subs	r3, r3, r2
 800caaa:	2b04      	cmp	r3, #4
 800caac:	dd3f      	ble.n	800cb2e <_dtoa_r+0x962>
 800caae:	231c      	movs	r3, #28
 800cab0:	1a9b      	subs	r3, r3, r2
 800cab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cab4:	18e4      	adds	r4, r4, r3
 800cab6:	18d2      	adds	r2, r2, r3
 800cab8:	920a      	str	r2, [sp, #40]	; 0x28
 800caba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cabc:	18d3      	adds	r3, r2, r3
 800cabe:	930c      	str	r3, [sp, #48]	; 0x30
 800cac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	dd05      	ble.n	800cad2 <_dtoa_r+0x906>
 800cac6:	001a      	movs	r2, r3
 800cac8:	9905      	ldr	r1, [sp, #20]
 800caca:	9804      	ldr	r0, [sp, #16]
 800cacc:	f001 f866 	bl	800db9c <__lshift>
 800cad0:	9005      	str	r0, [sp, #20]
 800cad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	dd05      	ble.n	800cae4 <_dtoa_r+0x918>
 800cad8:	0031      	movs	r1, r6
 800cada:	001a      	movs	r2, r3
 800cadc:	9804      	ldr	r0, [sp, #16]
 800cade:	f001 f85d 	bl	800db9c <__lshift>
 800cae2:	0006      	movs	r6, r0
 800cae4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d027      	beq.n	800cb3a <_dtoa_r+0x96e>
 800caea:	0031      	movs	r1, r6
 800caec:	9805      	ldr	r0, [sp, #20]
 800caee:	f001 f8c3 	bl	800dc78 <__mcmp>
 800caf2:	2800      	cmp	r0, #0
 800caf4:	da21      	bge.n	800cb3a <_dtoa_r+0x96e>
 800caf6:	9b03      	ldr	r3, [sp, #12]
 800caf8:	220a      	movs	r2, #10
 800cafa:	3b01      	subs	r3, #1
 800cafc:	9303      	str	r3, [sp, #12]
 800cafe:	9905      	ldr	r1, [sp, #20]
 800cb00:	2300      	movs	r3, #0
 800cb02:	9804      	ldr	r0, [sp, #16]
 800cb04:	f000 fe4e 	bl	800d7a4 <__multadd>
 800cb08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb0a:	9005      	str	r0, [sp, #20]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d100      	bne.n	800cb12 <_dtoa_r+0x946>
 800cb10:	e15d      	b.n	800cdce <_dtoa_r+0xc02>
 800cb12:	2300      	movs	r3, #0
 800cb14:	0039      	movs	r1, r7
 800cb16:	220a      	movs	r2, #10
 800cb18:	9804      	ldr	r0, [sp, #16]
 800cb1a:	f000 fe43 	bl	800d7a4 <__multadd>
 800cb1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb20:	0007      	movs	r7, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	dc49      	bgt.n	800cbba <_dtoa_r+0x9ee>
 800cb26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb28:	2b02      	cmp	r3, #2
 800cb2a:	dc0e      	bgt.n	800cb4a <_dtoa_r+0x97e>
 800cb2c:	e045      	b.n	800cbba <_dtoa_r+0x9ee>
 800cb2e:	2b04      	cmp	r3, #4
 800cb30:	d0c6      	beq.n	800cac0 <_dtoa_r+0x8f4>
 800cb32:	331c      	adds	r3, #28
 800cb34:	e7bd      	b.n	800cab2 <_dtoa_r+0x8e6>
 800cb36:	0013      	movs	r3, r2
 800cb38:	e7fb      	b.n	800cb32 <_dtoa_r+0x966>
 800cb3a:	9b07      	ldr	r3, [sp, #28]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	dc36      	bgt.n	800cbae <_dtoa_r+0x9e2>
 800cb40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb42:	2b02      	cmp	r3, #2
 800cb44:	dd33      	ble.n	800cbae <_dtoa_r+0x9e2>
 800cb46:	9b07      	ldr	r3, [sp, #28]
 800cb48:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10c      	bne.n	800cb6a <_dtoa_r+0x99e>
 800cb50:	0031      	movs	r1, r6
 800cb52:	2205      	movs	r2, #5
 800cb54:	9804      	ldr	r0, [sp, #16]
 800cb56:	f000 fe25 	bl	800d7a4 <__multadd>
 800cb5a:	0006      	movs	r6, r0
 800cb5c:	0001      	movs	r1, r0
 800cb5e:	9805      	ldr	r0, [sp, #20]
 800cb60:	f001 f88a 	bl	800dc78 <__mcmp>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	dd00      	ble.n	800cb6a <_dtoa_r+0x99e>
 800cb68:	e59f      	b.n	800c6aa <_dtoa_r+0x4de>
 800cb6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cb6c:	43db      	mvns	r3, r3
 800cb6e:	9303      	str	r3, [sp, #12]
 800cb70:	9b06      	ldr	r3, [sp, #24]
 800cb72:	9308      	str	r3, [sp, #32]
 800cb74:	2500      	movs	r5, #0
 800cb76:	0031      	movs	r1, r6
 800cb78:	9804      	ldr	r0, [sp, #16]
 800cb7a:	f000 fdef 	bl	800d75c <_Bfree>
 800cb7e:	2f00      	cmp	r7, #0
 800cb80:	d100      	bne.n	800cb84 <_dtoa_r+0x9b8>
 800cb82:	e6a3      	b.n	800c8cc <_dtoa_r+0x700>
 800cb84:	2d00      	cmp	r5, #0
 800cb86:	d005      	beq.n	800cb94 <_dtoa_r+0x9c8>
 800cb88:	42bd      	cmp	r5, r7
 800cb8a:	d003      	beq.n	800cb94 <_dtoa_r+0x9c8>
 800cb8c:	0029      	movs	r1, r5
 800cb8e:	9804      	ldr	r0, [sp, #16]
 800cb90:	f000 fde4 	bl	800d75c <_Bfree>
 800cb94:	0039      	movs	r1, r7
 800cb96:	9804      	ldr	r0, [sp, #16]
 800cb98:	f000 fde0 	bl	800d75c <_Bfree>
 800cb9c:	e696      	b.n	800c8cc <_dtoa_r+0x700>
 800cb9e:	2600      	movs	r6, #0
 800cba0:	0037      	movs	r7, r6
 800cba2:	e7e2      	b.n	800cb6a <_dtoa_r+0x99e>
 800cba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cba6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800cba8:	9303      	str	r3, [sp, #12]
 800cbaa:	0037      	movs	r7, r6
 800cbac:	e57d      	b.n	800c6aa <_dtoa_r+0x4de>
 800cbae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d100      	bne.n	800cbb6 <_dtoa_r+0x9ea>
 800cbb4:	e0c3      	b.n	800cd3e <_dtoa_r+0xb72>
 800cbb6:	9b07      	ldr	r3, [sp, #28]
 800cbb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbba:	2c00      	cmp	r4, #0
 800cbbc:	dd05      	ble.n	800cbca <_dtoa_r+0x9fe>
 800cbbe:	0039      	movs	r1, r7
 800cbc0:	0022      	movs	r2, r4
 800cbc2:	9804      	ldr	r0, [sp, #16]
 800cbc4:	f000 ffea 	bl	800db9c <__lshift>
 800cbc8:	0007      	movs	r7, r0
 800cbca:	0038      	movs	r0, r7
 800cbcc:	2d00      	cmp	r5, #0
 800cbce:	d024      	beq.n	800cc1a <_dtoa_r+0xa4e>
 800cbd0:	6879      	ldr	r1, [r7, #4]
 800cbd2:	9804      	ldr	r0, [sp, #16]
 800cbd4:	f000 fd7e 	bl	800d6d4 <_Balloc>
 800cbd8:	1e04      	subs	r4, r0, #0
 800cbda:	d111      	bne.n	800cc00 <_dtoa_r+0xa34>
 800cbdc:	0022      	movs	r2, r4
 800cbde:	4b05      	ldr	r3, [pc, #20]	; (800cbf4 <_dtoa_r+0xa28>)
 800cbe0:	4805      	ldr	r0, [pc, #20]	; (800cbf8 <_dtoa_r+0xa2c>)
 800cbe2:	4906      	ldr	r1, [pc, #24]	; (800cbfc <_dtoa_r+0xa30>)
 800cbe4:	f7ff fb07 	bl	800c1f6 <_dtoa_r+0x2a>
 800cbe8:	40240000 	.word	0x40240000
 800cbec:	00000433 	.word	0x00000433
 800cbf0:	7ff00000 	.word	0x7ff00000
 800cbf4:	0800ee66 	.word	0x0800ee66
 800cbf8:	0800ee0e 	.word	0x0800ee0e
 800cbfc:	000002ef 	.word	0x000002ef
 800cc00:	0039      	movs	r1, r7
 800cc02:	693a      	ldr	r2, [r7, #16]
 800cc04:	310c      	adds	r1, #12
 800cc06:	3202      	adds	r2, #2
 800cc08:	0092      	lsls	r2, r2, #2
 800cc0a:	300c      	adds	r0, #12
 800cc0c:	f7ff fa3a 	bl	800c084 <memcpy>
 800cc10:	2201      	movs	r2, #1
 800cc12:	0021      	movs	r1, r4
 800cc14:	9804      	ldr	r0, [sp, #16]
 800cc16:	f000 ffc1 	bl	800db9c <__lshift>
 800cc1a:	9b06      	ldr	r3, [sp, #24]
 800cc1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc1e:	9307      	str	r3, [sp, #28]
 800cc20:	3b01      	subs	r3, #1
 800cc22:	189b      	adds	r3, r3, r2
 800cc24:	2201      	movs	r2, #1
 800cc26:	003d      	movs	r5, r7
 800cc28:	0007      	movs	r7, r0
 800cc2a:	930e      	str	r3, [sp, #56]	; 0x38
 800cc2c:	9b08      	ldr	r3, [sp, #32]
 800cc2e:	4013      	ands	r3, r2
 800cc30:	930d      	str	r3, [sp, #52]	; 0x34
 800cc32:	0031      	movs	r1, r6
 800cc34:	9805      	ldr	r0, [sp, #20]
 800cc36:	f7ff fa39 	bl	800c0ac <quorem>
 800cc3a:	0029      	movs	r1, r5
 800cc3c:	0004      	movs	r4, r0
 800cc3e:	900b      	str	r0, [sp, #44]	; 0x2c
 800cc40:	9805      	ldr	r0, [sp, #20]
 800cc42:	f001 f819 	bl	800dc78 <__mcmp>
 800cc46:	003a      	movs	r2, r7
 800cc48:	900c      	str	r0, [sp, #48]	; 0x30
 800cc4a:	0031      	movs	r1, r6
 800cc4c:	9804      	ldr	r0, [sp, #16]
 800cc4e:	f001 f82f 	bl	800dcb0 <__mdiff>
 800cc52:	2201      	movs	r2, #1
 800cc54:	68c3      	ldr	r3, [r0, #12]
 800cc56:	3430      	adds	r4, #48	; 0x30
 800cc58:	9008      	str	r0, [sp, #32]
 800cc5a:	920a      	str	r2, [sp, #40]	; 0x28
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d104      	bne.n	800cc6a <_dtoa_r+0xa9e>
 800cc60:	0001      	movs	r1, r0
 800cc62:	9805      	ldr	r0, [sp, #20]
 800cc64:	f001 f808 	bl	800dc78 <__mcmp>
 800cc68:	900a      	str	r0, [sp, #40]	; 0x28
 800cc6a:	9908      	ldr	r1, [sp, #32]
 800cc6c:	9804      	ldr	r0, [sp, #16]
 800cc6e:	f000 fd75 	bl	800d75c <_Bfree>
 800cc72:	9b07      	ldr	r3, [sp, #28]
 800cc74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc76:	3301      	adds	r3, #1
 800cc78:	9308      	str	r3, [sp, #32]
 800cc7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc80:	4313      	orrs	r3, r2
 800cc82:	d109      	bne.n	800cc98 <_dtoa_r+0xacc>
 800cc84:	2c39      	cmp	r4, #57	; 0x39
 800cc86:	d022      	beq.n	800ccce <_dtoa_r+0xb02>
 800cc88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	dd01      	ble.n	800cc92 <_dtoa_r+0xac6>
 800cc8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800cc90:	3431      	adds	r4, #49	; 0x31
 800cc92:	9b07      	ldr	r3, [sp, #28]
 800cc94:	701c      	strb	r4, [r3, #0]
 800cc96:	e76e      	b.n	800cb76 <_dtoa_r+0x9aa>
 800cc98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	db04      	blt.n	800cca8 <_dtoa_r+0xadc>
 800cc9e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cca0:	4313      	orrs	r3, r2
 800cca2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cca4:	4313      	orrs	r3, r2
 800cca6:	d11e      	bne.n	800cce6 <_dtoa_r+0xb1a>
 800cca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	ddf1      	ble.n	800cc92 <_dtoa_r+0xac6>
 800ccae:	9905      	ldr	r1, [sp, #20]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	9804      	ldr	r0, [sp, #16]
 800ccb4:	f000 ff72 	bl	800db9c <__lshift>
 800ccb8:	0031      	movs	r1, r6
 800ccba:	9005      	str	r0, [sp, #20]
 800ccbc:	f000 ffdc 	bl	800dc78 <__mcmp>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	dc02      	bgt.n	800ccca <_dtoa_r+0xafe>
 800ccc4:	d1e5      	bne.n	800cc92 <_dtoa_r+0xac6>
 800ccc6:	07e3      	lsls	r3, r4, #31
 800ccc8:	d5e3      	bpl.n	800cc92 <_dtoa_r+0xac6>
 800ccca:	2c39      	cmp	r4, #57	; 0x39
 800cccc:	d1df      	bne.n	800cc8e <_dtoa_r+0xac2>
 800ccce:	2339      	movs	r3, #57	; 0x39
 800ccd0:	9a07      	ldr	r2, [sp, #28]
 800ccd2:	7013      	strb	r3, [r2, #0]
 800ccd4:	9b08      	ldr	r3, [sp, #32]
 800ccd6:	9308      	str	r3, [sp, #32]
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	781a      	ldrb	r2, [r3, #0]
 800ccdc:	2a39      	cmp	r2, #57	; 0x39
 800ccde:	d063      	beq.n	800cda8 <_dtoa_r+0xbdc>
 800cce0:	3201      	adds	r2, #1
 800cce2:	701a      	strb	r2, [r3, #0]
 800cce4:	e747      	b.n	800cb76 <_dtoa_r+0x9aa>
 800cce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	dd03      	ble.n	800ccf4 <_dtoa_r+0xb28>
 800ccec:	2c39      	cmp	r4, #57	; 0x39
 800ccee:	d0ee      	beq.n	800ccce <_dtoa_r+0xb02>
 800ccf0:	3401      	adds	r4, #1
 800ccf2:	e7ce      	b.n	800cc92 <_dtoa_r+0xac6>
 800ccf4:	9b07      	ldr	r3, [sp, #28]
 800ccf6:	9a07      	ldr	r2, [sp, #28]
 800ccf8:	701c      	strb	r4, [r3, #0]
 800ccfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d03e      	beq.n	800cd7e <_dtoa_r+0xbb2>
 800cd00:	2300      	movs	r3, #0
 800cd02:	220a      	movs	r2, #10
 800cd04:	9905      	ldr	r1, [sp, #20]
 800cd06:	9804      	ldr	r0, [sp, #16]
 800cd08:	f000 fd4c 	bl	800d7a4 <__multadd>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	9005      	str	r0, [sp, #20]
 800cd10:	220a      	movs	r2, #10
 800cd12:	0029      	movs	r1, r5
 800cd14:	9804      	ldr	r0, [sp, #16]
 800cd16:	42bd      	cmp	r5, r7
 800cd18:	d106      	bne.n	800cd28 <_dtoa_r+0xb5c>
 800cd1a:	f000 fd43 	bl	800d7a4 <__multadd>
 800cd1e:	0005      	movs	r5, r0
 800cd20:	0007      	movs	r7, r0
 800cd22:	9b08      	ldr	r3, [sp, #32]
 800cd24:	9307      	str	r3, [sp, #28]
 800cd26:	e784      	b.n	800cc32 <_dtoa_r+0xa66>
 800cd28:	f000 fd3c 	bl	800d7a4 <__multadd>
 800cd2c:	0039      	movs	r1, r7
 800cd2e:	0005      	movs	r5, r0
 800cd30:	2300      	movs	r3, #0
 800cd32:	220a      	movs	r2, #10
 800cd34:	9804      	ldr	r0, [sp, #16]
 800cd36:	f000 fd35 	bl	800d7a4 <__multadd>
 800cd3a:	0007      	movs	r7, r0
 800cd3c:	e7f1      	b.n	800cd22 <_dtoa_r+0xb56>
 800cd3e:	9b07      	ldr	r3, [sp, #28]
 800cd40:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd42:	2500      	movs	r5, #0
 800cd44:	0031      	movs	r1, r6
 800cd46:	9805      	ldr	r0, [sp, #20]
 800cd48:	f7ff f9b0 	bl	800c0ac <quorem>
 800cd4c:	9b06      	ldr	r3, [sp, #24]
 800cd4e:	3030      	adds	r0, #48	; 0x30
 800cd50:	5558      	strb	r0, [r3, r5]
 800cd52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd54:	3501      	adds	r5, #1
 800cd56:	0004      	movs	r4, r0
 800cd58:	42ab      	cmp	r3, r5
 800cd5a:	dd07      	ble.n	800cd6c <_dtoa_r+0xba0>
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	220a      	movs	r2, #10
 800cd60:	9905      	ldr	r1, [sp, #20]
 800cd62:	9804      	ldr	r0, [sp, #16]
 800cd64:	f000 fd1e 	bl	800d7a4 <__multadd>
 800cd68:	9005      	str	r0, [sp, #20]
 800cd6a:	e7eb      	b.n	800cd44 <_dtoa_r+0xb78>
 800cd6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd6e:	2301      	movs	r3, #1
 800cd70:	2a00      	cmp	r2, #0
 800cd72:	dd00      	ble.n	800cd76 <_dtoa_r+0xbaa>
 800cd74:	0013      	movs	r3, r2
 800cd76:	2500      	movs	r5, #0
 800cd78:	9a06      	ldr	r2, [sp, #24]
 800cd7a:	18d3      	adds	r3, r2, r3
 800cd7c:	9308      	str	r3, [sp, #32]
 800cd7e:	9905      	ldr	r1, [sp, #20]
 800cd80:	2201      	movs	r2, #1
 800cd82:	9804      	ldr	r0, [sp, #16]
 800cd84:	f000 ff0a 	bl	800db9c <__lshift>
 800cd88:	0031      	movs	r1, r6
 800cd8a:	9005      	str	r0, [sp, #20]
 800cd8c:	f000 ff74 	bl	800dc78 <__mcmp>
 800cd90:	2800      	cmp	r0, #0
 800cd92:	dc9f      	bgt.n	800ccd4 <_dtoa_r+0xb08>
 800cd94:	d101      	bne.n	800cd9a <_dtoa_r+0xbce>
 800cd96:	07e4      	lsls	r4, r4, #31
 800cd98:	d49c      	bmi.n	800ccd4 <_dtoa_r+0xb08>
 800cd9a:	9b08      	ldr	r3, [sp, #32]
 800cd9c:	9308      	str	r3, [sp, #32]
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	781a      	ldrb	r2, [r3, #0]
 800cda2:	2a30      	cmp	r2, #48	; 0x30
 800cda4:	d0fa      	beq.n	800cd9c <_dtoa_r+0xbd0>
 800cda6:	e6e6      	b.n	800cb76 <_dtoa_r+0x9aa>
 800cda8:	9a06      	ldr	r2, [sp, #24]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d193      	bne.n	800ccd6 <_dtoa_r+0xb0a>
 800cdae:	9b03      	ldr	r3, [sp, #12]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	9303      	str	r3, [sp, #12]
 800cdb4:	2331      	movs	r3, #49	; 0x31
 800cdb6:	7013      	strb	r3, [r2, #0]
 800cdb8:	e6dd      	b.n	800cb76 <_dtoa_r+0x9aa>
 800cdba:	4b09      	ldr	r3, [pc, #36]	; (800cde0 <_dtoa_r+0xc14>)
 800cdbc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cdbe:	9306      	str	r3, [sp, #24]
 800cdc0:	4b08      	ldr	r3, [pc, #32]	; (800cde4 <_dtoa_r+0xc18>)
 800cdc2:	2a00      	cmp	r2, #0
 800cdc4:	d001      	beq.n	800cdca <_dtoa_r+0xbfe>
 800cdc6:	f7ff fa49 	bl	800c25c <_dtoa_r+0x90>
 800cdca:	f7ff fa49 	bl	800c260 <_dtoa_r+0x94>
 800cdce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	dcb6      	bgt.n	800cd42 <_dtoa_r+0xb76>
 800cdd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	dd00      	ble.n	800cddc <_dtoa_r+0xc10>
 800cdda:	e6b6      	b.n	800cb4a <_dtoa_r+0x97e>
 800cddc:	e7b1      	b.n	800cd42 <_dtoa_r+0xb76>
 800cdde:	46c0      	nop			; (mov r8, r8)
 800cde0:	0800edea 	.word	0x0800edea
 800cde4:	0800edf2 	.word	0x0800edf2

0800cde8 <_free_r>:
 800cde8:	b570      	push	{r4, r5, r6, lr}
 800cdea:	0005      	movs	r5, r0
 800cdec:	2900      	cmp	r1, #0
 800cdee:	d010      	beq.n	800ce12 <_free_r+0x2a>
 800cdf0:	1f0c      	subs	r4, r1, #4
 800cdf2:	6823      	ldr	r3, [r4, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	da00      	bge.n	800cdfa <_free_r+0x12>
 800cdf8:	18e4      	adds	r4, r4, r3
 800cdfa:	0028      	movs	r0, r5
 800cdfc:	f000 fc5a 	bl	800d6b4 <__malloc_lock>
 800ce00:	4a1d      	ldr	r2, [pc, #116]	; (800ce78 <_free_r+0x90>)
 800ce02:	6813      	ldr	r3, [r2, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d105      	bne.n	800ce14 <_free_r+0x2c>
 800ce08:	6063      	str	r3, [r4, #4]
 800ce0a:	6014      	str	r4, [r2, #0]
 800ce0c:	0028      	movs	r0, r5
 800ce0e:	f000 fc59 	bl	800d6c4 <__malloc_unlock>
 800ce12:	bd70      	pop	{r4, r5, r6, pc}
 800ce14:	42a3      	cmp	r3, r4
 800ce16:	d908      	bls.n	800ce2a <_free_r+0x42>
 800ce18:	6820      	ldr	r0, [r4, #0]
 800ce1a:	1821      	adds	r1, r4, r0
 800ce1c:	428b      	cmp	r3, r1
 800ce1e:	d1f3      	bne.n	800ce08 <_free_r+0x20>
 800ce20:	6819      	ldr	r1, [r3, #0]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	1809      	adds	r1, r1, r0
 800ce26:	6021      	str	r1, [r4, #0]
 800ce28:	e7ee      	b.n	800ce08 <_free_r+0x20>
 800ce2a:	001a      	movs	r2, r3
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d001      	beq.n	800ce36 <_free_r+0x4e>
 800ce32:	42a3      	cmp	r3, r4
 800ce34:	d9f9      	bls.n	800ce2a <_free_r+0x42>
 800ce36:	6811      	ldr	r1, [r2, #0]
 800ce38:	1850      	adds	r0, r2, r1
 800ce3a:	42a0      	cmp	r0, r4
 800ce3c:	d10b      	bne.n	800ce56 <_free_r+0x6e>
 800ce3e:	6820      	ldr	r0, [r4, #0]
 800ce40:	1809      	adds	r1, r1, r0
 800ce42:	1850      	adds	r0, r2, r1
 800ce44:	6011      	str	r1, [r2, #0]
 800ce46:	4283      	cmp	r3, r0
 800ce48:	d1e0      	bne.n	800ce0c <_free_r+0x24>
 800ce4a:	6818      	ldr	r0, [r3, #0]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	1841      	adds	r1, r0, r1
 800ce50:	6011      	str	r1, [r2, #0]
 800ce52:	6053      	str	r3, [r2, #4]
 800ce54:	e7da      	b.n	800ce0c <_free_r+0x24>
 800ce56:	42a0      	cmp	r0, r4
 800ce58:	d902      	bls.n	800ce60 <_free_r+0x78>
 800ce5a:	230c      	movs	r3, #12
 800ce5c:	602b      	str	r3, [r5, #0]
 800ce5e:	e7d5      	b.n	800ce0c <_free_r+0x24>
 800ce60:	6820      	ldr	r0, [r4, #0]
 800ce62:	1821      	adds	r1, r4, r0
 800ce64:	428b      	cmp	r3, r1
 800ce66:	d103      	bne.n	800ce70 <_free_r+0x88>
 800ce68:	6819      	ldr	r1, [r3, #0]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	1809      	adds	r1, r1, r0
 800ce6e:	6021      	str	r1, [r4, #0]
 800ce70:	6063      	str	r3, [r4, #4]
 800ce72:	6054      	str	r4, [r2, #4]
 800ce74:	e7ca      	b.n	800ce0c <_free_r+0x24>
 800ce76:	46c0      	nop			; (mov r8, r8)
 800ce78:	200007e0 	.word	0x200007e0

0800ce7c <rshift>:
 800ce7c:	0002      	movs	r2, r0
 800ce7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce80:	6904      	ldr	r4, [r0, #16]
 800ce82:	114b      	asrs	r3, r1, #5
 800ce84:	b085      	sub	sp, #20
 800ce86:	3214      	adds	r2, #20
 800ce88:	9302      	str	r3, [sp, #8]
 800ce8a:	114d      	asrs	r5, r1, #5
 800ce8c:	0013      	movs	r3, r2
 800ce8e:	42ac      	cmp	r4, r5
 800ce90:	dd32      	ble.n	800cef8 <rshift+0x7c>
 800ce92:	261f      	movs	r6, #31
 800ce94:	000f      	movs	r7, r1
 800ce96:	114b      	asrs	r3, r1, #5
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	00a5      	lsls	r5, r4, #2
 800ce9c:	18d3      	adds	r3, r2, r3
 800ce9e:	4037      	ands	r7, r6
 800cea0:	1955      	adds	r5, r2, r5
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	9701      	str	r7, [sp, #4]
 800cea6:	4231      	tst	r1, r6
 800cea8:	d10d      	bne.n	800cec6 <rshift+0x4a>
 800ceaa:	0016      	movs	r6, r2
 800ceac:	0019      	movs	r1, r3
 800ceae:	428d      	cmp	r5, r1
 800ceb0:	d836      	bhi.n	800cf20 <rshift+0xa4>
 800ceb2:	9900      	ldr	r1, [sp, #0]
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	3903      	subs	r1, #3
 800ceb8:	428d      	cmp	r5, r1
 800ceba:	d302      	bcc.n	800cec2 <rshift+0x46>
 800cebc:	9b02      	ldr	r3, [sp, #8]
 800cebe:	1ae4      	subs	r4, r4, r3
 800cec0:	00a3      	lsls	r3, r4, #2
 800cec2:	18d3      	adds	r3, r2, r3
 800cec4:	e018      	b.n	800cef8 <rshift+0x7c>
 800cec6:	2120      	movs	r1, #32
 800cec8:	9e01      	ldr	r6, [sp, #4]
 800ceca:	9f01      	ldr	r7, [sp, #4]
 800cecc:	1b89      	subs	r1, r1, r6
 800cece:	9e00      	ldr	r6, [sp, #0]
 800ced0:	9103      	str	r1, [sp, #12]
 800ced2:	ce02      	ldmia	r6!, {r1}
 800ced4:	4694      	mov	ip, r2
 800ced6:	40f9      	lsrs	r1, r7
 800ced8:	42b5      	cmp	r5, r6
 800ceda:	d816      	bhi.n	800cf0a <rshift+0x8e>
 800cedc:	9e00      	ldr	r6, [sp, #0]
 800cede:	2300      	movs	r3, #0
 800cee0:	3601      	adds	r6, #1
 800cee2:	42b5      	cmp	r5, r6
 800cee4:	d303      	bcc.n	800ceee <rshift+0x72>
 800cee6:	9b02      	ldr	r3, [sp, #8]
 800cee8:	1ae3      	subs	r3, r4, r3
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	3b04      	subs	r3, #4
 800ceee:	18d3      	adds	r3, r2, r3
 800cef0:	6019      	str	r1, [r3, #0]
 800cef2:	2900      	cmp	r1, #0
 800cef4:	d000      	beq.n	800cef8 <rshift+0x7c>
 800cef6:	3304      	adds	r3, #4
 800cef8:	1a99      	subs	r1, r3, r2
 800cefa:	1089      	asrs	r1, r1, #2
 800cefc:	6101      	str	r1, [r0, #16]
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d101      	bne.n	800cf06 <rshift+0x8a>
 800cf02:	2300      	movs	r3, #0
 800cf04:	6143      	str	r3, [r0, #20]
 800cf06:	b005      	add	sp, #20
 800cf08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf0a:	6837      	ldr	r7, [r6, #0]
 800cf0c:	9b03      	ldr	r3, [sp, #12]
 800cf0e:	409f      	lsls	r7, r3
 800cf10:	430f      	orrs	r7, r1
 800cf12:	4661      	mov	r1, ip
 800cf14:	c180      	stmia	r1!, {r7}
 800cf16:	468c      	mov	ip, r1
 800cf18:	9b01      	ldr	r3, [sp, #4]
 800cf1a:	ce02      	ldmia	r6!, {r1}
 800cf1c:	40d9      	lsrs	r1, r3
 800cf1e:	e7db      	b.n	800ced8 <rshift+0x5c>
 800cf20:	c980      	ldmia	r1!, {r7}
 800cf22:	c680      	stmia	r6!, {r7}
 800cf24:	e7c3      	b.n	800ceae <rshift+0x32>

0800cf26 <__hexdig_fun>:
 800cf26:	0002      	movs	r2, r0
 800cf28:	3a30      	subs	r2, #48	; 0x30
 800cf2a:	0003      	movs	r3, r0
 800cf2c:	2a09      	cmp	r2, #9
 800cf2e:	d802      	bhi.n	800cf36 <__hexdig_fun+0x10>
 800cf30:	3b20      	subs	r3, #32
 800cf32:	b2d8      	uxtb	r0, r3
 800cf34:	4770      	bx	lr
 800cf36:	0002      	movs	r2, r0
 800cf38:	3a61      	subs	r2, #97	; 0x61
 800cf3a:	2a05      	cmp	r2, #5
 800cf3c:	d801      	bhi.n	800cf42 <__hexdig_fun+0x1c>
 800cf3e:	3b47      	subs	r3, #71	; 0x47
 800cf40:	e7f7      	b.n	800cf32 <__hexdig_fun+0xc>
 800cf42:	001a      	movs	r2, r3
 800cf44:	3a41      	subs	r2, #65	; 0x41
 800cf46:	2000      	movs	r0, #0
 800cf48:	2a05      	cmp	r2, #5
 800cf4a:	d8f3      	bhi.n	800cf34 <__hexdig_fun+0xe>
 800cf4c:	3b27      	subs	r3, #39	; 0x27
 800cf4e:	e7f0      	b.n	800cf32 <__hexdig_fun+0xc>

0800cf50 <__gethex>:
 800cf50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf52:	b089      	sub	sp, #36	; 0x24
 800cf54:	9307      	str	r3, [sp, #28]
 800cf56:	2302      	movs	r3, #2
 800cf58:	9201      	str	r2, [sp, #4]
 800cf5a:	680a      	ldr	r2, [r1, #0]
 800cf5c:	425b      	negs	r3, r3
 800cf5e:	9003      	str	r0, [sp, #12]
 800cf60:	9106      	str	r1, [sp, #24]
 800cf62:	1c96      	adds	r6, r2, #2
 800cf64:	1a9b      	subs	r3, r3, r2
 800cf66:	199a      	adds	r2, r3, r6
 800cf68:	9600      	str	r6, [sp, #0]
 800cf6a:	9205      	str	r2, [sp, #20]
 800cf6c:	9a00      	ldr	r2, [sp, #0]
 800cf6e:	3601      	adds	r6, #1
 800cf70:	7810      	ldrb	r0, [r2, #0]
 800cf72:	2830      	cmp	r0, #48	; 0x30
 800cf74:	d0f7      	beq.n	800cf66 <__gethex+0x16>
 800cf76:	f7ff ffd6 	bl	800cf26 <__hexdig_fun>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	001d      	movs	r5, r3
 800cf7e:	9302      	str	r3, [sp, #8]
 800cf80:	4298      	cmp	r0, r3
 800cf82:	d11d      	bne.n	800cfc0 <__gethex+0x70>
 800cf84:	2201      	movs	r2, #1
 800cf86:	49a6      	ldr	r1, [pc, #664]	; (800d220 <__gethex+0x2d0>)
 800cf88:	9800      	ldr	r0, [sp, #0]
 800cf8a:	f7fe ffdf 	bl	800bf4c <strncmp>
 800cf8e:	0007      	movs	r7, r0
 800cf90:	42a8      	cmp	r0, r5
 800cf92:	d169      	bne.n	800d068 <__gethex+0x118>
 800cf94:	9b00      	ldr	r3, [sp, #0]
 800cf96:	0034      	movs	r4, r6
 800cf98:	7858      	ldrb	r0, [r3, #1]
 800cf9a:	f7ff ffc4 	bl	800cf26 <__hexdig_fun>
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	9302      	str	r3, [sp, #8]
 800cfa2:	42a8      	cmp	r0, r5
 800cfa4:	d02f      	beq.n	800d006 <__gethex+0xb6>
 800cfa6:	9600      	str	r6, [sp, #0]
 800cfa8:	9b00      	ldr	r3, [sp, #0]
 800cfaa:	7818      	ldrb	r0, [r3, #0]
 800cfac:	2830      	cmp	r0, #48	; 0x30
 800cfae:	d009      	beq.n	800cfc4 <__gethex+0x74>
 800cfb0:	f7ff ffb9 	bl	800cf26 <__hexdig_fun>
 800cfb4:	4242      	negs	r2, r0
 800cfb6:	4142      	adcs	r2, r0
 800cfb8:	2301      	movs	r3, #1
 800cfba:	0035      	movs	r5, r6
 800cfbc:	9202      	str	r2, [sp, #8]
 800cfbe:	9305      	str	r3, [sp, #20]
 800cfc0:	9c00      	ldr	r4, [sp, #0]
 800cfc2:	e004      	b.n	800cfce <__gethex+0x7e>
 800cfc4:	9b00      	ldr	r3, [sp, #0]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	e7ed      	b.n	800cfa8 <__gethex+0x58>
 800cfcc:	3401      	adds	r4, #1
 800cfce:	7820      	ldrb	r0, [r4, #0]
 800cfd0:	f7ff ffa9 	bl	800cf26 <__hexdig_fun>
 800cfd4:	1e07      	subs	r7, r0, #0
 800cfd6:	d1f9      	bne.n	800cfcc <__gethex+0x7c>
 800cfd8:	2201      	movs	r2, #1
 800cfda:	0020      	movs	r0, r4
 800cfdc:	4990      	ldr	r1, [pc, #576]	; (800d220 <__gethex+0x2d0>)
 800cfde:	f7fe ffb5 	bl	800bf4c <strncmp>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	d10d      	bne.n	800d002 <__gethex+0xb2>
 800cfe6:	2d00      	cmp	r5, #0
 800cfe8:	d106      	bne.n	800cff8 <__gethex+0xa8>
 800cfea:	3401      	adds	r4, #1
 800cfec:	0025      	movs	r5, r4
 800cfee:	7820      	ldrb	r0, [r4, #0]
 800cff0:	f7ff ff99 	bl	800cf26 <__hexdig_fun>
 800cff4:	2800      	cmp	r0, #0
 800cff6:	d102      	bne.n	800cffe <__gethex+0xae>
 800cff8:	1b2d      	subs	r5, r5, r4
 800cffa:	00af      	lsls	r7, r5, #2
 800cffc:	e003      	b.n	800d006 <__gethex+0xb6>
 800cffe:	3401      	adds	r4, #1
 800d000:	e7f5      	b.n	800cfee <__gethex+0x9e>
 800d002:	2d00      	cmp	r5, #0
 800d004:	d1f8      	bne.n	800cff8 <__gethex+0xa8>
 800d006:	2220      	movs	r2, #32
 800d008:	7823      	ldrb	r3, [r4, #0]
 800d00a:	0026      	movs	r6, r4
 800d00c:	4393      	bics	r3, r2
 800d00e:	2b50      	cmp	r3, #80	; 0x50
 800d010:	d11d      	bne.n	800d04e <__gethex+0xfe>
 800d012:	7863      	ldrb	r3, [r4, #1]
 800d014:	2b2b      	cmp	r3, #43	; 0x2b
 800d016:	d02c      	beq.n	800d072 <__gethex+0x122>
 800d018:	2b2d      	cmp	r3, #45	; 0x2d
 800d01a:	d02e      	beq.n	800d07a <__gethex+0x12a>
 800d01c:	2300      	movs	r3, #0
 800d01e:	1c66      	adds	r6, r4, #1
 800d020:	9304      	str	r3, [sp, #16]
 800d022:	7830      	ldrb	r0, [r6, #0]
 800d024:	f7ff ff7f 	bl	800cf26 <__hexdig_fun>
 800d028:	1e43      	subs	r3, r0, #1
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	2b18      	cmp	r3, #24
 800d02e:	d82b      	bhi.n	800d088 <__gethex+0x138>
 800d030:	3810      	subs	r0, #16
 800d032:	0005      	movs	r5, r0
 800d034:	7870      	ldrb	r0, [r6, #1]
 800d036:	f7ff ff76 	bl	800cf26 <__hexdig_fun>
 800d03a:	1e43      	subs	r3, r0, #1
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	3601      	adds	r6, #1
 800d040:	2b18      	cmp	r3, #24
 800d042:	d91c      	bls.n	800d07e <__gethex+0x12e>
 800d044:	9b04      	ldr	r3, [sp, #16]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d000      	beq.n	800d04c <__gethex+0xfc>
 800d04a:	426d      	negs	r5, r5
 800d04c:	197f      	adds	r7, r7, r5
 800d04e:	9b06      	ldr	r3, [sp, #24]
 800d050:	601e      	str	r6, [r3, #0]
 800d052:	9b02      	ldr	r3, [sp, #8]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d019      	beq.n	800d08c <__gethex+0x13c>
 800d058:	2600      	movs	r6, #0
 800d05a:	9b05      	ldr	r3, [sp, #20]
 800d05c:	42b3      	cmp	r3, r6
 800d05e:	d100      	bne.n	800d062 <__gethex+0x112>
 800d060:	3606      	adds	r6, #6
 800d062:	0030      	movs	r0, r6
 800d064:	b009      	add	sp, #36	; 0x24
 800d066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d068:	2301      	movs	r3, #1
 800d06a:	2700      	movs	r7, #0
 800d06c:	9c00      	ldr	r4, [sp, #0]
 800d06e:	9302      	str	r3, [sp, #8]
 800d070:	e7c9      	b.n	800d006 <__gethex+0xb6>
 800d072:	2300      	movs	r3, #0
 800d074:	9304      	str	r3, [sp, #16]
 800d076:	1ca6      	adds	r6, r4, #2
 800d078:	e7d3      	b.n	800d022 <__gethex+0xd2>
 800d07a:	2301      	movs	r3, #1
 800d07c:	e7fa      	b.n	800d074 <__gethex+0x124>
 800d07e:	230a      	movs	r3, #10
 800d080:	435d      	muls	r5, r3
 800d082:	182d      	adds	r5, r5, r0
 800d084:	3d10      	subs	r5, #16
 800d086:	e7d5      	b.n	800d034 <__gethex+0xe4>
 800d088:	0026      	movs	r6, r4
 800d08a:	e7e0      	b.n	800d04e <__gethex+0xfe>
 800d08c:	9b00      	ldr	r3, [sp, #0]
 800d08e:	9902      	ldr	r1, [sp, #8]
 800d090:	1ae3      	subs	r3, r4, r3
 800d092:	3b01      	subs	r3, #1
 800d094:	2b07      	cmp	r3, #7
 800d096:	dc0a      	bgt.n	800d0ae <__gethex+0x15e>
 800d098:	9803      	ldr	r0, [sp, #12]
 800d09a:	f000 fb1b 	bl	800d6d4 <_Balloc>
 800d09e:	1e05      	subs	r5, r0, #0
 800d0a0:	d108      	bne.n	800d0b4 <__gethex+0x164>
 800d0a2:	002a      	movs	r2, r5
 800d0a4:	21e4      	movs	r1, #228	; 0xe4
 800d0a6:	4b5f      	ldr	r3, [pc, #380]	; (800d224 <__gethex+0x2d4>)
 800d0a8:	485f      	ldr	r0, [pc, #380]	; (800d228 <__gethex+0x2d8>)
 800d0aa:	f001 fbe7 	bl	800e87c <__assert_func>
 800d0ae:	3101      	adds	r1, #1
 800d0b0:	105b      	asrs	r3, r3, #1
 800d0b2:	e7ef      	b.n	800d094 <__gethex+0x144>
 800d0b4:	0003      	movs	r3, r0
 800d0b6:	3314      	adds	r3, #20
 800d0b8:	9302      	str	r3, [sp, #8]
 800d0ba:	9305      	str	r3, [sp, #20]
 800d0bc:	2300      	movs	r3, #0
 800d0be:	001e      	movs	r6, r3
 800d0c0:	9304      	str	r3, [sp, #16]
 800d0c2:	9b00      	ldr	r3, [sp, #0]
 800d0c4:	42a3      	cmp	r3, r4
 800d0c6:	d33f      	bcc.n	800d148 <__gethex+0x1f8>
 800d0c8:	9c05      	ldr	r4, [sp, #20]
 800d0ca:	9b02      	ldr	r3, [sp, #8]
 800d0cc:	c440      	stmia	r4!, {r6}
 800d0ce:	1ae4      	subs	r4, r4, r3
 800d0d0:	10a4      	asrs	r4, r4, #2
 800d0d2:	0030      	movs	r0, r6
 800d0d4:	612c      	str	r4, [r5, #16]
 800d0d6:	f000 fbf5 	bl	800d8c4 <__hi0bits>
 800d0da:	9b01      	ldr	r3, [sp, #4]
 800d0dc:	0164      	lsls	r4, r4, #5
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	1a26      	subs	r6, r4, r0
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	429e      	cmp	r6, r3
 800d0e6:	dd51      	ble.n	800d18c <__gethex+0x23c>
 800d0e8:	1af6      	subs	r6, r6, r3
 800d0ea:	0031      	movs	r1, r6
 800d0ec:	0028      	movs	r0, r5
 800d0ee:	f000 ff89 	bl	800e004 <__any_on>
 800d0f2:	1e04      	subs	r4, r0, #0
 800d0f4:	d016      	beq.n	800d124 <__gethex+0x1d4>
 800d0f6:	2401      	movs	r4, #1
 800d0f8:	231f      	movs	r3, #31
 800d0fa:	0020      	movs	r0, r4
 800d0fc:	1e72      	subs	r2, r6, #1
 800d0fe:	4013      	ands	r3, r2
 800d100:	4098      	lsls	r0, r3
 800d102:	0003      	movs	r3, r0
 800d104:	1151      	asrs	r1, r2, #5
 800d106:	9802      	ldr	r0, [sp, #8]
 800d108:	0089      	lsls	r1, r1, #2
 800d10a:	5809      	ldr	r1, [r1, r0]
 800d10c:	4219      	tst	r1, r3
 800d10e:	d009      	beq.n	800d124 <__gethex+0x1d4>
 800d110:	42a2      	cmp	r2, r4
 800d112:	dd06      	ble.n	800d122 <__gethex+0x1d2>
 800d114:	0028      	movs	r0, r5
 800d116:	1eb1      	subs	r1, r6, #2
 800d118:	f000 ff74 	bl	800e004 <__any_on>
 800d11c:	3402      	adds	r4, #2
 800d11e:	2800      	cmp	r0, #0
 800d120:	d100      	bne.n	800d124 <__gethex+0x1d4>
 800d122:	2402      	movs	r4, #2
 800d124:	0031      	movs	r1, r6
 800d126:	0028      	movs	r0, r5
 800d128:	f7ff fea8 	bl	800ce7c <rshift>
 800d12c:	19bf      	adds	r7, r7, r6
 800d12e:	9b01      	ldr	r3, [sp, #4]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	42bb      	cmp	r3, r7
 800d134:	da3a      	bge.n	800d1ac <__gethex+0x25c>
 800d136:	0029      	movs	r1, r5
 800d138:	9803      	ldr	r0, [sp, #12]
 800d13a:	f000 fb0f 	bl	800d75c <_Bfree>
 800d13e:	2300      	movs	r3, #0
 800d140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d142:	26a3      	movs	r6, #163	; 0xa3
 800d144:	6013      	str	r3, [r2, #0]
 800d146:	e78c      	b.n	800d062 <__gethex+0x112>
 800d148:	3c01      	subs	r4, #1
 800d14a:	7823      	ldrb	r3, [r4, #0]
 800d14c:	2b2e      	cmp	r3, #46	; 0x2e
 800d14e:	d012      	beq.n	800d176 <__gethex+0x226>
 800d150:	9b04      	ldr	r3, [sp, #16]
 800d152:	2b20      	cmp	r3, #32
 800d154:	d104      	bne.n	800d160 <__gethex+0x210>
 800d156:	9b05      	ldr	r3, [sp, #20]
 800d158:	c340      	stmia	r3!, {r6}
 800d15a:	2600      	movs	r6, #0
 800d15c:	9305      	str	r3, [sp, #20]
 800d15e:	9604      	str	r6, [sp, #16]
 800d160:	7820      	ldrb	r0, [r4, #0]
 800d162:	f7ff fee0 	bl	800cf26 <__hexdig_fun>
 800d166:	230f      	movs	r3, #15
 800d168:	4018      	ands	r0, r3
 800d16a:	9b04      	ldr	r3, [sp, #16]
 800d16c:	4098      	lsls	r0, r3
 800d16e:	3304      	adds	r3, #4
 800d170:	4306      	orrs	r6, r0
 800d172:	9304      	str	r3, [sp, #16]
 800d174:	e7a5      	b.n	800d0c2 <__gethex+0x172>
 800d176:	9b00      	ldr	r3, [sp, #0]
 800d178:	42a3      	cmp	r3, r4
 800d17a:	d8e9      	bhi.n	800d150 <__gethex+0x200>
 800d17c:	2201      	movs	r2, #1
 800d17e:	0020      	movs	r0, r4
 800d180:	4927      	ldr	r1, [pc, #156]	; (800d220 <__gethex+0x2d0>)
 800d182:	f7fe fee3 	bl	800bf4c <strncmp>
 800d186:	2800      	cmp	r0, #0
 800d188:	d1e2      	bne.n	800d150 <__gethex+0x200>
 800d18a:	e79a      	b.n	800d0c2 <__gethex+0x172>
 800d18c:	9b00      	ldr	r3, [sp, #0]
 800d18e:	2400      	movs	r4, #0
 800d190:	429e      	cmp	r6, r3
 800d192:	dacc      	bge.n	800d12e <__gethex+0x1de>
 800d194:	1b9e      	subs	r6, r3, r6
 800d196:	0029      	movs	r1, r5
 800d198:	0032      	movs	r2, r6
 800d19a:	9803      	ldr	r0, [sp, #12]
 800d19c:	f000 fcfe 	bl	800db9c <__lshift>
 800d1a0:	0003      	movs	r3, r0
 800d1a2:	3314      	adds	r3, #20
 800d1a4:	0005      	movs	r5, r0
 800d1a6:	1bbf      	subs	r7, r7, r6
 800d1a8:	9302      	str	r3, [sp, #8]
 800d1aa:	e7c0      	b.n	800d12e <__gethex+0x1de>
 800d1ac:	9b01      	ldr	r3, [sp, #4]
 800d1ae:	685e      	ldr	r6, [r3, #4]
 800d1b0:	42be      	cmp	r6, r7
 800d1b2:	dd70      	ble.n	800d296 <__gethex+0x346>
 800d1b4:	9b00      	ldr	r3, [sp, #0]
 800d1b6:	1bf6      	subs	r6, r6, r7
 800d1b8:	42b3      	cmp	r3, r6
 800d1ba:	dc37      	bgt.n	800d22c <__gethex+0x2dc>
 800d1bc:	9b01      	ldr	r3, [sp, #4]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	d024      	beq.n	800d20e <__gethex+0x2be>
 800d1c4:	2b03      	cmp	r3, #3
 800d1c6:	d026      	beq.n	800d216 <__gethex+0x2c6>
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d117      	bne.n	800d1fc <__gethex+0x2ac>
 800d1cc:	9b00      	ldr	r3, [sp, #0]
 800d1ce:	42b3      	cmp	r3, r6
 800d1d0:	d114      	bne.n	800d1fc <__gethex+0x2ac>
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d10b      	bne.n	800d1ee <__gethex+0x29e>
 800d1d6:	9b01      	ldr	r3, [sp, #4]
 800d1d8:	9a07      	ldr	r2, [sp, #28]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	2662      	movs	r6, #98	; 0x62
 800d1de:	6013      	str	r3, [r2, #0]
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	9a02      	ldr	r2, [sp, #8]
 800d1e4:	612b      	str	r3, [r5, #16]
 800d1e6:	6013      	str	r3, [r2, #0]
 800d1e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1ea:	601d      	str	r5, [r3, #0]
 800d1ec:	e739      	b.n	800d062 <__gethex+0x112>
 800d1ee:	9900      	ldr	r1, [sp, #0]
 800d1f0:	0028      	movs	r0, r5
 800d1f2:	3901      	subs	r1, #1
 800d1f4:	f000 ff06 	bl	800e004 <__any_on>
 800d1f8:	2800      	cmp	r0, #0
 800d1fa:	d1ec      	bne.n	800d1d6 <__gethex+0x286>
 800d1fc:	0029      	movs	r1, r5
 800d1fe:	9803      	ldr	r0, [sp, #12]
 800d200:	f000 faac 	bl	800d75c <_Bfree>
 800d204:	2300      	movs	r3, #0
 800d206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d208:	2650      	movs	r6, #80	; 0x50
 800d20a:	6013      	str	r3, [r2, #0]
 800d20c:	e729      	b.n	800d062 <__gethex+0x112>
 800d20e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d210:	2b00      	cmp	r3, #0
 800d212:	d1f3      	bne.n	800d1fc <__gethex+0x2ac>
 800d214:	e7df      	b.n	800d1d6 <__gethex+0x286>
 800d216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d1dc      	bne.n	800d1d6 <__gethex+0x286>
 800d21c:	e7ee      	b.n	800d1fc <__gethex+0x2ac>
 800d21e:	46c0      	nop			; (mov r8, r8)
 800d220:	0800ec50 	.word	0x0800ec50
 800d224:	0800ee66 	.word	0x0800ee66
 800d228:	0800ee77 	.word	0x0800ee77
 800d22c:	1e77      	subs	r7, r6, #1
 800d22e:	2c00      	cmp	r4, #0
 800d230:	d12f      	bne.n	800d292 <__gethex+0x342>
 800d232:	2f00      	cmp	r7, #0
 800d234:	d004      	beq.n	800d240 <__gethex+0x2f0>
 800d236:	0039      	movs	r1, r7
 800d238:	0028      	movs	r0, r5
 800d23a:	f000 fee3 	bl	800e004 <__any_on>
 800d23e:	0004      	movs	r4, r0
 800d240:	231f      	movs	r3, #31
 800d242:	117a      	asrs	r2, r7, #5
 800d244:	401f      	ands	r7, r3
 800d246:	3b1e      	subs	r3, #30
 800d248:	40bb      	lsls	r3, r7
 800d24a:	9902      	ldr	r1, [sp, #8]
 800d24c:	0092      	lsls	r2, r2, #2
 800d24e:	5852      	ldr	r2, [r2, r1]
 800d250:	421a      	tst	r2, r3
 800d252:	d001      	beq.n	800d258 <__gethex+0x308>
 800d254:	2302      	movs	r3, #2
 800d256:	431c      	orrs	r4, r3
 800d258:	9b00      	ldr	r3, [sp, #0]
 800d25a:	0031      	movs	r1, r6
 800d25c:	1b9b      	subs	r3, r3, r6
 800d25e:	2602      	movs	r6, #2
 800d260:	0028      	movs	r0, r5
 800d262:	9300      	str	r3, [sp, #0]
 800d264:	f7ff fe0a 	bl	800ce7c <rshift>
 800d268:	9b01      	ldr	r3, [sp, #4]
 800d26a:	685f      	ldr	r7, [r3, #4]
 800d26c:	2c00      	cmp	r4, #0
 800d26e:	d041      	beq.n	800d2f4 <__gethex+0x3a4>
 800d270:	9b01      	ldr	r3, [sp, #4]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	2b02      	cmp	r3, #2
 800d276:	d010      	beq.n	800d29a <__gethex+0x34a>
 800d278:	2b03      	cmp	r3, #3
 800d27a:	d012      	beq.n	800d2a2 <__gethex+0x352>
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d106      	bne.n	800d28e <__gethex+0x33e>
 800d280:	07a2      	lsls	r2, r4, #30
 800d282:	d504      	bpl.n	800d28e <__gethex+0x33e>
 800d284:	9a02      	ldr	r2, [sp, #8]
 800d286:	6812      	ldr	r2, [r2, #0]
 800d288:	4314      	orrs	r4, r2
 800d28a:	421c      	tst	r4, r3
 800d28c:	d10c      	bne.n	800d2a8 <__gethex+0x358>
 800d28e:	2310      	movs	r3, #16
 800d290:	e02f      	b.n	800d2f2 <__gethex+0x3a2>
 800d292:	2401      	movs	r4, #1
 800d294:	e7d4      	b.n	800d240 <__gethex+0x2f0>
 800d296:	2601      	movs	r6, #1
 800d298:	e7e8      	b.n	800d26c <__gethex+0x31c>
 800d29a:	2301      	movs	r3, #1
 800d29c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d29e:	1a9b      	subs	r3, r3, r2
 800d2a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d0f2      	beq.n	800d28e <__gethex+0x33e>
 800d2a8:	692b      	ldr	r3, [r5, #16]
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	9302      	str	r3, [sp, #8]
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	9304      	str	r3, [sp, #16]
 800d2b2:	002b      	movs	r3, r5
 800d2b4:	9a04      	ldr	r2, [sp, #16]
 800d2b6:	3314      	adds	r3, #20
 800d2b8:	1899      	adds	r1, r3, r2
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	1c54      	adds	r4, r2, #1
 800d2be:	d01e      	beq.n	800d2fe <__gethex+0x3ae>
 800d2c0:	3201      	adds	r2, #1
 800d2c2:	601a      	str	r2, [r3, #0]
 800d2c4:	002b      	movs	r3, r5
 800d2c6:	3314      	adds	r3, #20
 800d2c8:	2e02      	cmp	r6, #2
 800d2ca:	d141      	bne.n	800d350 <__gethex+0x400>
 800d2cc:	9a01      	ldr	r2, [sp, #4]
 800d2ce:	9900      	ldr	r1, [sp, #0]
 800d2d0:	6812      	ldr	r2, [r2, #0]
 800d2d2:	3a01      	subs	r2, #1
 800d2d4:	428a      	cmp	r2, r1
 800d2d6:	d10b      	bne.n	800d2f0 <__gethex+0x3a0>
 800d2d8:	221f      	movs	r2, #31
 800d2da:	9800      	ldr	r0, [sp, #0]
 800d2dc:	1149      	asrs	r1, r1, #5
 800d2de:	4002      	ands	r2, r0
 800d2e0:	2001      	movs	r0, #1
 800d2e2:	0004      	movs	r4, r0
 800d2e4:	4094      	lsls	r4, r2
 800d2e6:	0089      	lsls	r1, r1, #2
 800d2e8:	58cb      	ldr	r3, [r1, r3]
 800d2ea:	4223      	tst	r3, r4
 800d2ec:	d000      	beq.n	800d2f0 <__gethex+0x3a0>
 800d2ee:	2601      	movs	r6, #1
 800d2f0:	2320      	movs	r3, #32
 800d2f2:	431e      	orrs	r6, r3
 800d2f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2f6:	601d      	str	r5, [r3, #0]
 800d2f8:	9b07      	ldr	r3, [sp, #28]
 800d2fa:	601f      	str	r7, [r3, #0]
 800d2fc:	e6b1      	b.n	800d062 <__gethex+0x112>
 800d2fe:	c301      	stmia	r3!, {r0}
 800d300:	4299      	cmp	r1, r3
 800d302:	d8da      	bhi.n	800d2ba <__gethex+0x36a>
 800d304:	68ab      	ldr	r3, [r5, #8]
 800d306:	9a02      	ldr	r2, [sp, #8]
 800d308:	429a      	cmp	r2, r3
 800d30a:	db18      	blt.n	800d33e <__gethex+0x3ee>
 800d30c:	6869      	ldr	r1, [r5, #4]
 800d30e:	9803      	ldr	r0, [sp, #12]
 800d310:	3101      	adds	r1, #1
 800d312:	f000 f9df 	bl	800d6d4 <_Balloc>
 800d316:	1e04      	subs	r4, r0, #0
 800d318:	d104      	bne.n	800d324 <__gethex+0x3d4>
 800d31a:	0022      	movs	r2, r4
 800d31c:	2184      	movs	r1, #132	; 0x84
 800d31e:	4b1c      	ldr	r3, [pc, #112]	; (800d390 <__gethex+0x440>)
 800d320:	481c      	ldr	r0, [pc, #112]	; (800d394 <__gethex+0x444>)
 800d322:	e6c2      	b.n	800d0aa <__gethex+0x15a>
 800d324:	0029      	movs	r1, r5
 800d326:	692a      	ldr	r2, [r5, #16]
 800d328:	310c      	adds	r1, #12
 800d32a:	3202      	adds	r2, #2
 800d32c:	0092      	lsls	r2, r2, #2
 800d32e:	300c      	adds	r0, #12
 800d330:	f7fe fea8 	bl	800c084 <memcpy>
 800d334:	0029      	movs	r1, r5
 800d336:	9803      	ldr	r0, [sp, #12]
 800d338:	f000 fa10 	bl	800d75c <_Bfree>
 800d33c:	0025      	movs	r5, r4
 800d33e:	692b      	ldr	r3, [r5, #16]
 800d340:	1c5a      	adds	r2, r3, #1
 800d342:	612a      	str	r2, [r5, #16]
 800d344:	2201      	movs	r2, #1
 800d346:	3304      	adds	r3, #4
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	18eb      	adds	r3, r5, r3
 800d34c:	605a      	str	r2, [r3, #4]
 800d34e:	e7b9      	b.n	800d2c4 <__gethex+0x374>
 800d350:	692a      	ldr	r2, [r5, #16]
 800d352:	9902      	ldr	r1, [sp, #8]
 800d354:	428a      	cmp	r2, r1
 800d356:	dd09      	ble.n	800d36c <__gethex+0x41c>
 800d358:	2101      	movs	r1, #1
 800d35a:	0028      	movs	r0, r5
 800d35c:	f7ff fd8e 	bl	800ce7c <rshift>
 800d360:	9b01      	ldr	r3, [sp, #4]
 800d362:	3701      	adds	r7, #1
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	42bb      	cmp	r3, r7
 800d368:	dac1      	bge.n	800d2ee <__gethex+0x39e>
 800d36a:	e6e4      	b.n	800d136 <__gethex+0x1e6>
 800d36c:	221f      	movs	r2, #31
 800d36e:	9c00      	ldr	r4, [sp, #0]
 800d370:	9900      	ldr	r1, [sp, #0]
 800d372:	2601      	movs	r6, #1
 800d374:	4014      	ands	r4, r2
 800d376:	4211      	tst	r1, r2
 800d378:	d0ba      	beq.n	800d2f0 <__gethex+0x3a0>
 800d37a:	9a04      	ldr	r2, [sp, #16]
 800d37c:	189b      	adds	r3, r3, r2
 800d37e:	3b04      	subs	r3, #4
 800d380:	6818      	ldr	r0, [r3, #0]
 800d382:	f000 fa9f 	bl	800d8c4 <__hi0bits>
 800d386:	2320      	movs	r3, #32
 800d388:	1b1b      	subs	r3, r3, r4
 800d38a:	4298      	cmp	r0, r3
 800d38c:	dbe4      	blt.n	800d358 <__gethex+0x408>
 800d38e:	e7af      	b.n	800d2f0 <__gethex+0x3a0>
 800d390:	0800ee66 	.word	0x0800ee66
 800d394:	0800ee77 	.word	0x0800ee77

0800d398 <L_shift>:
 800d398:	2308      	movs	r3, #8
 800d39a:	b570      	push	{r4, r5, r6, lr}
 800d39c:	2520      	movs	r5, #32
 800d39e:	1a9a      	subs	r2, r3, r2
 800d3a0:	0092      	lsls	r2, r2, #2
 800d3a2:	1aad      	subs	r5, r5, r2
 800d3a4:	6843      	ldr	r3, [r0, #4]
 800d3a6:	6804      	ldr	r4, [r0, #0]
 800d3a8:	001e      	movs	r6, r3
 800d3aa:	40ae      	lsls	r6, r5
 800d3ac:	40d3      	lsrs	r3, r2
 800d3ae:	4334      	orrs	r4, r6
 800d3b0:	6004      	str	r4, [r0, #0]
 800d3b2:	6043      	str	r3, [r0, #4]
 800d3b4:	3004      	adds	r0, #4
 800d3b6:	4288      	cmp	r0, r1
 800d3b8:	d3f4      	bcc.n	800d3a4 <L_shift+0xc>
 800d3ba:	bd70      	pop	{r4, r5, r6, pc}

0800d3bc <__match>:
 800d3bc:	b530      	push	{r4, r5, lr}
 800d3be:	6803      	ldr	r3, [r0, #0]
 800d3c0:	780c      	ldrb	r4, [r1, #0]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	2c00      	cmp	r4, #0
 800d3c6:	d102      	bne.n	800d3ce <__match+0x12>
 800d3c8:	6003      	str	r3, [r0, #0]
 800d3ca:	2001      	movs	r0, #1
 800d3cc:	bd30      	pop	{r4, r5, pc}
 800d3ce:	781a      	ldrb	r2, [r3, #0]
 800d3d0:	0015      	movs	r5, r2
 800d3d2:	3d41      	subs	r5, #65	; 0x41
 800d3d4:	2d19      	cmp	r5, #25
 800d3d6:	d800      	bhi.n	800d3da <__match+0x1e>
 800d3d8:	3220      	adds	r2, #32
 800d3da:	3101      	adds	r1, #1
 800d3dc:	42a2      	cmp	r2, r4
 800d3de:	d0ef      	beq.n	800d3c0 <__match+0x4>
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	e7f3      	b.n	800d3cc <__match+0x10>

0800d3e4 <__hexnan>:
 800d3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3e6:	680b      	ldr	r3, [r1, #0]
 800d3e8:	b08b      	sub	sp, #44	; 0x2c
 800d3ea:	9201      	str	r2, [sp, #4]
 800d3ec:	9901      	ldr	r1, [sp, #4]
 800d3ee:	115a      	asrs	r2, r3, #5
 800d3f0:	0092      	lsls	r2, r2, #2
 800d3f2:	188a      	adds	r2, r1, r2
 800d3f4:	9202      	str	r2, [sp, #8]
 800d3f6:	0019      	movs	r1, r3
 800d3f8:	221f      	movs	r2, #31
 800d3fa:	4011      	ands	r1, r2
 800d3fc:	9008      	str	r0, [sp, #32]
 800d3fe:	9106      	str	r1, [sp, #24]
 800d400:	4213      	tst	r3, r2
 800d402:	d002      	beq.n	800d40a <__hexnan+0x26>
 800d404:	9b02      	ldr	r3, [sp, #8]
 800d406:	3304      	adds	r3, #4
 800d408:	9302      	str	r3, [sp, #8]
 800d40a:	9b02      	ldr	r3, [sp, #8]
 800d40c:	2500      	movs	r5, #0
 800d40e:	1f1f      	subs	r7, r3, #4
 800d410:	003e      	movs	r6, r7
 800d412:	003c      	movs	r4, r7
 800d414:	9b08      	ldr	r3, [sp, #32]
 800d416:	603d      	str	r5, [r7, #0]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	9507      	str	r5, [sp, #28]
 800d41c:	9305      	str	r3, [sp, #20]
 800d41e:	9503      	str	r5, [sp, #12]
 800d420:	9b05      	ldr	r3, [sp, #20]
 800d422:	3301      	adds	r3, #1
 800d424:	9309      	str	r3, [sp, #36]	; 0x24
 800d426:	9b05      	ldr	r3, [sp, #20]
 800d428:	785b      	ldrb	r3, [r3, #1]
 800d42a:	9304      	str	r3, [sp, #16]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d028      	beq.n	800d482 <__hexnan+0x9e>
 800d430:	9804      	ldr	r0, [sp, #16]
 800d432:	f7ff fd78 	bl	800cf26 <__hexdig_fun>
 800d436:	2800      	cmp	r0, #0
 800d438:	d154      	bne.n	800d4e4 <__hexnan+0x100>
 800d43a:	9b04      	ldr	r3, [sp, #16]
 800d43c:	2b20      	cmp	r3, #32
 800d43e:	d819      	bhi.n	800d474 <__hexnan+0x90>
 800d440:	9b03      	ldr	r3, [sp, #12]
 800d442:	9a07      	ldr	r2, [sp, #28]
 800d444:	4293      	cmp	r3, r2
 800d446:	dd12      	ble.n	800d46e <__hexnan+0x8a>
 800d448:	42b4      	cmp	r4, r6
 800d44a:	d206      	bcs.n	800d45a <__hexnan+0x76>
 800d44c:	2d07      	cmp	r5, #7
 800d44e:	dc04      	bgt.n	800d45a <__hexnan+0x76>
 800d450:	002a      	movs	r2, r5
 800d452:	0031      	movs	r1, r6
 800d454:	0020      	movs	r0, r4
 800d456:	f7ff ff9f 	bl	800d398 <L_shift>
 800d45a:	9b01      	ldr	r3, [sp, #4]
 800d45c:	2508      	movs	r5, #8
 800d45e:	429c      	cmp	r4, r3
 800d460:	d905      	bls.n	800d46e <__hexnan+0x8a>
 800d462:	1f26      	subs	r6, r4, #4
 800d464:	2500      	movs	r5, #0
 800d466:	0034      	movs	r4, r6
 800d468:	9b03      	ldr	r3, [sp, #12]
 800d46a:	6035      	str	r5, [r6, #0]
 800d46c:	9307      	str	r3, [sp, #28]
 800d46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d470:	9305      	str	r3, [sp, #20]
 800d472:	e7d5      	b.n	800d420 <__hexnan+0x3c>
 800d474:	9b04      	ldr	r3, [sp, #16]
 800d476:	2b29      	cmp	r3, #41	; 0x29
 800d478:	d159      	bne.n	800d52e <__hexnan+0x14a>
 800d47a:	9b05      	ldr	r3, [sp, #20]
 800d47c:	9a08      	ldr	r2, [sp, #32]
 800d47e:	3302      	adds	r3, #2
 800d480:	6013      	str	r3, [r2, #0]
 800d482:	9b03      	ldr	r3, [sp, #12]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d052      	beq.n	800d52e <__hexnan+0x14a>
 800d488:	42b4      	cmp	r4, r6
 800d48a:	d206      	bcs.n	800d49a <__hexnan+0xb6>
 800d48c:	2d07      	cmp	r5, #7
 800d48e:	dc04      	bgt.n	800d49a <__hexnan+0xb6>
 800d490:	002a      	movs	r2, r5
 800d492:	0031      	movs	r1, r6
 800d494:	0020      	movs	r0, r4
 800d496:	f7ff ff7f 	bl	800d398 <L_shift>
 800d49a:	9b01      	ldr	r3, [sp, #4]
 800d49c:	429c      	cmp	r4, r3
 800d49e:	d935      	bls.n	800d50c <__hexnan+0x128>
 800d4a0:	001a      	movs	r2, r3
 800d4a2:	0023      	movs	r3, r4
 800d4a4:	cb02      	ldmia	r3!, {r1}
 800d4a6:	c202      	stmia	r2!, {r1}
 800d4a8:	429f      	cmp	r7, r3
 800d4aa:	d2fb      	bcs.n	800d4a4 <__hexnan+0xc0>
 800d4ac:	9b02      	ldr	r3, [sp, #8]
 800d4ae:	1c62      	adds	r2, r4, #1
 800d4b0:	1ed9      	subs	r1, r3, #3
 800d4b2:	2304      	movs	r3, #4
 800d4b4:	4291      	cmp	r1, r2
 800d4b6:	d305      	bcc.n	800d4c4 <__hexnan+0xe0>
 800d4b8:	9b02      	ldr	r3, [sp, #8]
 800d4ba:	3b04      	subs	r3, #4
 800d4bc:	1b1b      	subs	r3, r3, r4
 800d4be:	089b      	lsrs	r3, r3, #2
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	9a01      	ldr	r2, [sp, #4]
 800d4c6:	18d3      	adds	r3, r2, r3
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	c304      	stmia	r3!, {r2}
 800d4cc:	429f      	cmp	r7, r3
 800d4ce:	d2fc      	bcs.n	800d4ca <__hexnan+0xe6>
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d104      	bne.n	800d4e0 <__hexnan+0xfc>
 800d4d6:	9b01      	ldr	r3, [sp, #4]
 800d4d8:	429f      	cmp	r7, r3
 800d4da:	d126      	bne.n	800d52a <__hexnan+0x146>
 800d4dc:	2301      	movs	r3, #1
 800d4de:	603b      	str	r3, [r7, #0]
 800d4e0:	2005      	movs	r0, #5
 800d4e2:	e025      	b.n	800d530 <__hexnan+0x14c>
 800d4e4:	9b03      	ldr	r3, [sp, #12]
 800d4e6:	3501      	adds	r5, #1
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	9303      	str	r3, [sp, #12]
 800d4ec:	2d08      	cmp	r5, #8
 800d4ee:	dd06      	ble.n	800d4fe <__hexnan+0x11a>
 800d4f0:	9b01      	ldr	r3, [sp, #4]
 800d4f2:	429c      	cmp	r4, r3
 800d4f4:	d9bb      	bls.n	800d46e <__hexnan+0x8a>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	2501      	movs	r5, #1
 800d4fa:	3c04      	subs	r4, #4
 800d4fc:	6023      	str	r3, [r4, #0]
 800d4fe:	220f      	movs	r2, #15
 800d500:	6823      	ldr	r3, [r4, #0]
 800d502:	4010      	ands	r0, r2
 800d504:	011b      	lsls	r3, r3, #4
 800d506:	4303      	orrs	r3, r0
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	e7b0      	b.n	800d46e <__hexnan+0x8a>
 800d50c:	9b06      	ldr	r3, [sp, #24]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d0de      	beq.n	800d4d0 <__hexnan+0xec>
 800d512:	2320      	movs	r3, #32
 800d514:	9a06      	ldr	r2, [sp, #24]
 800d516:	9902      	ldr	r1, [sp, #8]
 800d518:	1a9b      	subs	r3, r3, r2
 800d51a:	2201      	movs	r2, #1
 800d51c:	4252      	negs	r2, r2
 800d51e:	40da      	lsrs	r2, r3
 800d520:	3904      	subs	r1, #4
 800d522:	680b      	ldr	r3, [r1, #0]
 800d524:	4013      	ands	r3, r2
 800d526:	600b      	str	r3, [r1, #0]
 800d528:	e7d2      	b.n	800d4d0 <__hexnan+0xec>
 800d52a:	3f04      	subs	r7, #4
 800d52c:	e7d0      	b.n	800d4d0 <__hexnan+0xec>
 800d52e:	2004      	movs	r0, #4
 800d530:	b00b      	add	sp, #44	; 0x2c
 800d532:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d534 <malloc>:
 800d534:	b510      	push	{r4, lr}
 800d536:	4b03      	ldr	r3, [pc, #12]	; (800d544 <malloc+0x10>)
 800d538:	0001      	movs	r1, r0
 800d53a:	6818      	ldr	r0, [r3, #0]
 800d53c:	f000 f826 	bl	800d58c <_malloc_r>
 800d540:	bd10      	pop	{r4, pc}
 800d542:	46c0      	nop			; (mov r8, r8)
 800d544:	200001d0 	.word	0x200001d0

0800d548 <sbrk_aligned>:
 800d548:	b570      	push	{r4, r5, r6, lr}
 800d54a:	4e0f      	ldr	r6, [pc, #60]	; (800d588 <sbrk_aligned+0x40>)
 800d54c:	000d      	movs	r5, r1
 800d54e:	6831      	ldr	r1, [r6, #0]
 800d550:	0004      	movs	r4, r0
 800d552:	2900      	cmp	r1, #0
 800d554:	d102      	bne.n	800d55c <sbrk_aligned+0x14>
 800d556:	f001 f97f 	bl	800e858 <_sbrk_r>
 800d55a:	6030      	str	r0, [r6, #0]
 800d55c:	0029      	movs	r1, r5
 800d55e:	0020      	movs	r0, r4
 800d560:	f001 f97a 	bl	800e858 <_sbrk_r>
 800d564:	1c43      	adds	r3, r0, #1
 800d566:	d00a      	beq.n	800d57e <sbrk_aligned+0x36>
 800d568:	2303      	movs	r3, #3
 800d56a:	1cc5      	adds	r5, r0, #3
 800d56c:	439d      	bics	r5, r3
 800d56e:	42a8      	cmp	r0, r5
 800d570:	d007      	beq.n	800d582 <sbrk_aligned+0x3a>
 800d572:	1a29      	subs	r1, r5, r0
 800d574:	0020      	movs	r0, r4
 800d576:	f001 f96f 	bl	800e858 <_sbrk_r>
 800d57a:	3001      	adds	r0, #1
 800d57c:	d101      	bne.n	800d582 <sbrk_aligned+0x3a>
 800d57e:	2501      	movs	r5, #1
 800d580:	426d      	negs	r5, r5
 800d582:	0028      	movs	r0, r5
 800d584:	bd70      	pop	{r4, r5, r6, pc}
 800d586:	46c0      	nop			; (mov r8, r8)
 800d588:	200007e4 	.word	0x200007e4

0800d58c <_malloc_r>:
 800d58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d58e:	2203      	movs	r2, #3
 800d590:	1ccb      	adds	r3, r1, #3
 800d592:	4393      	bics	r3, r2
 800d594:	3308      	adds	r3, #8
 800d596:	0006      	movs	r6, r0
 800d598:	001f      	movs	r7, r3
 800d59a:	2b0c      	cmp	r3, #12
 800d59c:	d238      	bcs.n	800d610 <_malloc_r+0x84>
 800d59e:	270c      	movs	r7, #12
 800d5a0:	42b9      	cmp	r1, r7
 800d5a2:	d837      	bhi.n	800d614 <_malloc_r+0x88>
 800d5a4:	0030      	movs	r0, r6
 800d5a6:	f000 f885 	bl	800d6b4 <__malloc_lock>
 800d5aa:	4b38      	ldr	r3, [pc, #224]	; (800d68c <_malloc_r+0x100>)
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	001c      	movs	r4, r3
 800d5b2:	2c00      	cmp	r4, #0
 800d5b4:	d133      	bne.n	800d61e <_malloc_r+0x92>
 800d5b6:	0039      	movs	r1, r7
 800d5b8:	0030      	movs	r0, r6
 800d5ba:	f7ff ffc5 	bl	800d548 <sbrk_aligned>
 800d5be:	0004      	movs	r4, r0
 800d5c0:	1c43      	adds	r3, r0, #1
 800d5c2:	d15e      	bne.n	800d682 <_malloc_r+0xf6>
 800d5c4:	9b00      	ldr	r3, [sp, #0]
 800d5c6:	681c      	ldr	r4, [r3, #0]
 800d5c8:	0025      	movs	r5, r4
 800d5ca:	2d00      	cmp	r5, #0
 800d5cc:	d14e      	bne.n	800d66c <_malloc_r+0xe0>
 800d5ce:	2c00      	cmp	r4, #0
 800d5d0:	d051      	beq.n	800d676 <_malloc_r+0xea>
 800d5d2:	6823      	ldr	r3, [r4, #0]
 800d5d4:	0029      	movs	r1, r5
 800d5d6:	18e3      	adds	r3, r4, r3
 800d5d8:	0030      	movs	r0, r6
 800d5da:	9301      	str	r3, [sp, #4]
 800d5dc:	f001 f93c 	bl	800e858 <_sbrk_r>
 800d5e0:	9b01      	ldr	r3, [sp, #4]
 800d5e2:	4283      	cmp	r3, r0
 800d5e4:	d147      	bne.n	800d676 <_malloc_r+0xea>
 800d5e6:	6823      	ldr	r3, [r4, #0]
 800d5e8:	0030      	movs	r0, r6
 800d5ea:	1aff      	subs	r7, r7, r3
 800d5ec:	0039      	movs	r1, r7
 800d5ee:	f7ff ffab 	bl	800d548 <sbrk_aligned>
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	d03f      	beq.n	800d676 <_malloc_r+0xea>
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	19db      	adds	r3, r3, r7
 800d5fa:	6023      	str	r3, [r4, #0]
 800d5fc:	9b00      	ldr	r3, [sp, #0]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d040      	beq.n	800d686 <_malloc_r+0xfa>
 800d604:	685a      	ldr	r2, [r3, #4]
 800d606:	42a2      	cmp	r2, r4
 800d608:	d133      	bne.n	800d672 <_malloc_r+0xe6>
 800d60a:	2200      	movs	r2, #0
 800d60c:	605a      	str	r2, [r3, #4]
 800d60e:	e014      	b.n	800d63a <_malloc_r+0xae>
 800d610:	2b00      	cmp	r3, #0
 800d612:	dac5      	bge.n	800d5a0 <_malloc_r+0x14>
 800d614:	230c      	movs	r3, #12
 800d616:	2500      	movs	r5, #0
 800d618:	6033      	str	r3, [r6, #0]
 800d61a:	0028      	movs	r0, r5
 800d61c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d61e:	6821      	ldr	r1, [r4, #0]
 800d620:	1bc9      	subs	r1, r1, r7
 800d622:	d420      	bmi.n	800d666 <_malloc_r+0xda>
 800d624:	290b      	cmp	r1, #11
 800d626:	d918      	bls.n	800d65a <_malloc_r+0xce>
 800d628:	19e2      	adds	r2, r4, r7
 800d62a:	6027      	str	r7, [r4, #0]
 800d62c:	42a3      	cmp	r3, r4
 800d62e:	d112      	bne.n	800d656 <_malloc_r+0xca>
 800d630:	9b00      	ldr	r3, [sp, #0]
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	6863      	ldr	r3, [r4, #4]
 800d636:	6011      	str	r1, [r2, #0]
 800d638:	6053      	str	r3, [r2, #4]
 800d63a:	0030      	movs	r0, r6
 800d63c:	0025      	movs	r5, r4
 800d63e:	f000 f841 	bl	800d6c4 <__malloc_unlock>
 800d642:	2207      	movs	r2, #7
 800d644:	350b      	adds	r5, #11
 800d646:	1d23      	adds	r3, r4, #4
 800d648:	4395      	bics	r5, r2
 800d64a:	1aea      	subs	r2, r5, r3
 800d64c:	429d      	cmp	r5, r3
 800d64e:	d0e4      	beq.n	800d61a <_malloc_r+0x8e>
 800d650:	1b5b      	subs	r3, r3, r5
 800d652:	50a3      	str	r3, [r4, r2]
 800d654:	e7e1      	b.n	800d61a <_malloc_r+0x8e>
 800d656:	605a      	str	r2, [r3, #4]
 800d658:	e7ec      	b.n	800d634 <_malloc_r+0xa8>
 800d65a:	6862      	ldr	r2, [r4, #4]
 800d65c:	42a3      	cmp	r3, r4
 800d65e:	d1d5      	bne.n	800d60c <_malloc_r+0x80>
 800d660:	9b00      	ldr	r3, [sp, #0]
 800d662:	601a      	str	r2, [r3, #0]
 800d664:	e7e9      	b.n	800d63a <_malloc_r+0xae>
 800d666:	0023      	movs	r3, r4
 800d668:	6864      	ldr	r4, [r4, #4]
 800d66a:	e7a2      	b.n	800d5b2 <_malloc_r+0x26>
 800d66c:	002c      	movs	r4, r5
 800d66e:	686d      	ldr	r5, [r5, #4]
 800d670:	e7ab      	b.n	800d5ca <_malloc_r+0x3e>
 800d672:	0013      	movs	r3, r2
 800d674:	e7c4      	b.n	800d600 <_malloc_r+0x74>
 800d676:	230c      	movs	r3, #12
 800d678:	0030      	movs	r0, r6
 800d67a:	6033      	str	r3, [r6, #0]
 800d67c:	f000 f822 	bl	800d6c4 <__malloc_unlock>
 800d680:	e7cb      	b.n	800d61a <_malloc_r+0x8e>
 800d682:	6027      	str	r7, [r4, #0]
 800d684:	e7d9      	b.n	800d63a <_malloc_r+0xae>
 800d686:	605b      	str	r3, [r3, #4]
 800d688:	deff      	udf	#255	; 0xff
 800d68a:	46c0      	nop			; (mov r8, r8)
 800d68c:	200007e0 	.word	0x200007e0

0800d690 <__ascii_mbtowc>:
 800d690:	b082      	sub	sp, #8
 800d692:	2900      	cmp	r1, #0
 800d694:	d100      	bne.n	800d698 <__ascii_mbtowc+0x8>
 800d696:	a901      	add	r1, sp, #4
 800d698:	1e10      	subs	r0, r2, #0
 800d69a:	d006      	beq.n	800d6aa <__ascii_mbtowc+0x1a>
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d006      	beq.n	800d6ae <__ascii_mbtowc+0x1e>
 800d6a0:	7813      	ldrb	r3, [r2, #0]
 800d6a2:	600b      	str	r3, [r1, #0]
 800d6a4:	7810      	ldrb	r0, [r2, #0]
 800d6a6:	1e43      	subs	r3, r0, #1
 800d6a8:	4198      	sbcs	r0, r3
 800d6aa:	b002      	add	sp, #8
 800d6ac:	4770      	bx	lr
 800d6ae:	2002      	movs	r0, #2
 800d6b0:	4240      	negs	r0, r0
 800d6b2:	e7fa      	b.n	800d6aa <__ascii_mbtowc+0x1a>

0800d6b4 <__malloc_lock>:
 800d6b4:	b510      	push	{r4, lr}
 800d6b6:	4802      	ldr	r0, [pc, #8]	; (800d6c0 <__malloc_lock+0xc>)
 800d6b8:	f7fe fcd7 	bl	800c06a <__retarget_lock_acquire_recursive>
 800d6bc:	bd10      	pop	{r4, pc}
 800d6be:	46c0      	nop			; (mov r8, r8)
 800d6c0:	200007dc 	.word	0x200007dc

0800d6c4 <__malloc_unlock>:
 800d6c4:	b510      	push	{r4, lr}
 800d6c6:	4802      	ldr	r0, [pc, #8]	; (800d6d0 <__malloc_unlock+0xc>)
 800d6c8:	f7fe fcd0 	bl	800c06c <__retarget_lock_release_recursive>
 800d6cc:	bd10      	pop	{r4, pc}
 800d6ce:	46c0      	nop			; (mov r8, r8)
 800d6d0:	200007dc 	.word	0x200007dc

0800d6d4 <_Balloc>:
 800d6d4:	b570      	push	{r4, r5, r6, lr}
 800d6d6:	69c5      	ldr	r5, [r0, #28]
 800d6d8:	0006      	movs	r6, r0
 800d6da:	000c      	movs	r4, r1
 800d6dc:	2d00      	cmp	r5, #0
 800d6de:	d10e      	bne.n	800d6fe <_Balloc+0x2a>
 800d6e0:	2010      	movs	r0, #16
 800d6e2:	f7ff ff27 	bl	800d534 <malloc>
 800d6e6:	1e02      	subs	r2, r0, #0
 800d6e8:	61f0      	str	r0, [r6, #28]
 800d6ea:	d104      	bne.n	800d6f6 <_Balloc+0x22>
 800d6ec:	216b      	movs	r1, #107	; 0x6b
 800d6ee:	4b19      	ldr	r3, [pc, #100]	; (800d754 <_Balloc+0x80>)
 800d6f0:	4819      	ldr	r0, [pc, #100]	; (800d758 <_Balloc+0x84>)
 800d6f2:	f001 f8c3 	bl	800e87c <__assert_func>
 800d6f6:	6045      	str	r5, [r0, #4]
 800d6f8:	6085      	str	r5, [r0, #8]
 800d6fa:	6005      	str	r5, [r0, #0]
 800d6fc:	60c5      	str	r5, [r0, #12]
 800d6fe:	69f5      	ldr	r5, [r6, #28]
 800d700:	68eb      	ldr	r3, [r5, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d013      	beq.n	800d72e <_Balloc+0x5a>
 800d706:	69f3      	ldr	r3, [r6, #28]
 800d708:	00a2      	lsls	r2, r4, #2
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	189b      	adds	r3, r3, r2
 800d70e:	6818      	ldr	r0, [r3, #0]
 800d710:	2800      	cmp	r0, #0
 800d712:	d118      	bne.n	800d746 <_Balloc+0x72>
 800d714:	2101      	movs	r1, #1
 800d716:	000d      	movs	r5, r1
 800d718:	40a5      	lsls	r5, r4
 800d71a:	1d6a      	adds	r2, r5, #5
 800d71c:	0030      	movs	r0, r6
 800d71e:	0092      	lsls	r2, r2, #2
 800d720:	f001 f8ca 	bl	800e8b8 <_calloc_r>
 800d724:	2800      	cmp	r0, #0
 800d726:	d00c      	beq.n	800d742 <_Balloc+0x6e>
 800d728:	6044      	str	r4, [r0, #4]
 800d72a:	6085      	str	r5, [r0, #8]
 800d72c:	e00d      	b.n	800d74a <_Balloc+0x76>
 800d72e:	2221      	movs	r2, #33	; 0x21
 800d730:	2104      	movs	r1, #4
 800d732:	0030      	movs	r0, r6
 800d734:	f001 f8c0 	bl	800e8b8 <_calloc_r>
 800d738:	69f3      	ldr	r3, [r6, #28]
 800d73a:	60e8      	str	r0, [r5, #12]
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d1e1      	bne.n	800d706 <_Balloc+0x32>
 800d742:	2000      	movs	r0, #0
 800d744:	bd70      	pop	{r4, r5, r6, pc}
 800d746:	6802      	ldr	r2, [r0, #0]
 800d748:	601a      	str	r2, [r3, #0]
 800d74a:	2300      	movs	r3, #0
 800d74c:	6103      	str	r3, [r0, #16]
 800d74e:	60c3      	str	r3, [r0, #12]
 800d750:	e7f8      	b.n	800d744 <_Balloc+0x70>
 800d752:	46c0      	nop			; (mov r8, r8)
 800d754:	0800edf7 	.word	0x0800edf7
 800d758:	0800eed7 	.word	0x0800eed7

0800d75c <_Bfree>:
 800d75c:	b570      	push	{r4, r5, r6, lr}
 800d75e:	69c6      	ldr	r6, [r0, #28]
 800d760:	0005      	movs	r5, r0
 800d762:	000c      	movs	r4, r1
 800d764:	2e00      	cmp	r6, #0
 800d766:	d10e      	bne.n	800d786 <_Bfree+0x2a>
 800d768:	2010      	movs	r0, #16
 800d76a:	f7ff fee3 	bl	800d534 <malloc>
 800d76e:	1e02      	subs	r2, r0, #0
 800d770:	61e8      	str	r0, [r5, #28]
 800d772:	d104      	bne.n	800d77e <_Bfree+0x22>
 800d774:	218f      	movs	r1, #143	; 0x8f
 800d776:	4b09      	ldr	r3, [pc, #36]	; (800d79c <_Bfree+0x40>)
 800d778:	4809      	ldr	r0, [pc, #36]	; (800d7a0 <_Bfree+0x44>)
 800d77a:	f001 f87f 	bl	800e87c <__assert_func>
 800d77e:	6046      	str	r6, [r0, #4]
 800d780:	6086      	str	r6, [r0, #8]
 800d782:	6006      	str	r6, [r0, #0]
 800d784:	60c6      	str	r6, [r0, #12]
 800d786:	2c00      	cmp	r4, #0
 800d788:	d007      	beq.n	800d79a <_Bfree+0x3e>
 800d78a:	69eb      	ldr	r3, [r5, #28]
 800d78c:	6862      	ldr	r2, [r4, #4]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	0092      	lsls	r2, r2, #2
 800d792:	189b      	adds	r3, r3, r2
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	6022      	str	r2, [r4, #0]
 800d798:	601c      	str	r4, [r3, #0]
 800d79a:	bd70      	pop	{r4, r5, r6, pc}
 800d79c:	0800edf7 	.word	0x0800edf7
 800d7a0:	0800eed7 	.word	0x0800eed7

0800d7a4 <__multadd>:
 800d7a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7a6:	000e      	movs	r6, r1
 800d7a8:	9001      	str	r0, [sp, #4]
 800d7aa:	000c      	movs	r4, r1
 800d7ac:	001d      	movs	r5, r3
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	690f      	ldr	r7, [r1, #16]
 800d7b2:	3614      	adds	r6, #20
 800d7b4:	6833      	ldr	r3, [r6, #0]
 800d7b6:	3001      	adds	r0, #1
 800d7b8:	b299      	uxth	r1, r3
 800d7ba:	4351      	muls	r1, r2
 800d7bc:	0c1b      	lsrs	r3, r3, #16
 800d7be:	4353      	muls	r3, r2
 800d7c0:	1949      	adds	r1, r1, r5
 800d7c2:	0c0d      	lsrs	r5, r1, #16
 800d7c4:	195b      	adds	r3, r3, r5
 800d7c6:	0c1d      	lsrs	r5, r3, #16
 800d7c8:	b289      	uxth	r1, r1
 800d7ca:	041b      	lsls	r3, r3, #16
 800d7cc:	185b      	adds	r3, r3, r1
 800d7ce:	c608      	stmia	r6!, {r3}
 800d7d0:	4287      	cmp	r7, r0
 800d7d2:	dcef      	bgt.n	800d7b4 <__multadd+0x10>
 800d7d4:	2d00      	cmp	r5, #0
 800d7d6:	d022      	beq.n	800d81e <__multadd+0x7a>
 800d7d8:	68a3      	ldr	r3, [r4, #8]
 800d7da:	42bb      	cmp	r3, r7
 800d7dc:	dc19      	bgt.n	800d812 <__multadd+0x6e>
 800d7de:	6861      	ldr	r1, [r4, #4]
 800d7e0:	9801      	ldr	r0, [sp, #4]
 800d7e2:	3101      	adds	r1, #1
 800d7e4:	f7ff ff76 	bl	800d6d4 <_Balloc>
 800d7e8:	1e06      	subs	r6, r0, #0
 800d7ea:	d105      	bne.n	800d7f8 <__multadd+0x54>
 800d7ec:	0032      	movs	r2, r6
 800d7ee:	21ba      	movs	r1, #186	; 0xba
 800d7f0:	4b0c      	ldr	r3, [pc, #48]	; (800d824 <__multadd+0x80>)
 800d7f2:	480d      	ldr	r0, [pc, #52]	; (800d828 <__multadd+0x84>)
 800d7f4:	f001 f842 	bl	800e87c <__assert_func>
 800d7f8:	0021      	movs	r1, r4
 800d7fa:	6922      	ldr	r2, [r4, #16]
 800d7fc:	310c      	adds	r1, #12
 800d7fe:	3202      	adds	r2, #2
 800d800:	0092      	lsls	r2, r2, #2
 800d802:	300c      	adds	r0, #12
 800d804:	f7fe fc3e 	bl	800c084 <memcpy>
 800d808:	0021      	movs	r1, r4
 800d80a:	9801      	ldr	r0, [sp, #4]
 800d80c:	f7ff ffa6 	bl	800d75c <_Bfree>
 800d810:	0034      	movs	r4, r6
 800d812:	1d3b      	adds	r3, r7, #4
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	18e3      	adds	r3, r4, r3
 800d818:	605d      	str	r5, [r3, #4]
 800d81a:	1c7b      	adds	r3, r7, #1
 800d81c:	6123      	str	r3, [r4, #16]
 800d81e:	0020      	movs	r0, r4
 800d820:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d822:	46c0      	nop			; (mov r8, r8)
 800d824:	0800ee66 	.word	0x0800ee66
 800d828:	0800eed7 	.word	0x0800eed7

0800d82c <__s2b>:
 800d82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d82e:	0006      	movs	r6, r0
 800d830:	0018      	movs	r0, r3
 800d832:	000c      	movs	r4, r1
 800d834:	3008      	adds	r0, #8
 800d836:	2109      	movs	r1, #9
 800d838:	9301      	str	r3, [sp, #4]
 800d83a:	0015      	movs	r5, r2
 800d83c:	f7f2 fd0a 	bl	8000254 <__divsi3>
 800d840:	2301      	movs	r3, #1
 800d842:	2100      	movs	r1, #0
 800d844:	4283      	cmp	r3, r0
 800d846:	db0a      	blt.n	800d85e <__s2b+0x32>
 800d848:	0030      	movs	r0, r6
 800d84a:	f7ff ff43 	bl	800d6d4 <_Balloc>
 800d84e:	1e01      	subs	r1, r0, #0
 800d850:	d108      	bne.n	800d864 <__s2b+0x38>
 800d852:	000a      	movs	r2, r1
 800d854:	4b19      	ldr	r3, [pc, #100]	; (800d8bc <__s2b+0x90>)
 800d856:	481a      	ldr	r0, [pc, #104]	; (800d8c0 <__s2b+0x94>)
 800d858:	31d3      	adds	r1, #211	; 0xd3
 800d85a:	f001 f80f 	bl	800e87c <__assert_func>
 800d85e:	005b      	lsls	r3, r3, #1
 800d860:	3101      	adds	r1, #1
 800d862:	e7ef      	b.n	800d844 <__s2b+0x18>
 800d864:	9b08      	ldr	r3, [sp, #32]
 800d866:	6143      	str	r3, [r0, #20]
 800d868:	2301      	movs	r3, #1
 800d86a:	6103      	str	r3, [r0, #16]
 800d86c:	2d09      	cmp	r5, #9
 800d86e:	dd18      	ble.n	800d8a2 <__s2b+0x76>
 800d870:	0023      	movs	r3, r4
 800d872:	3309      	adds	r3, #9
 800d874:	001f      	movs	r7, r3
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	1964      	adds	r4, r4, r5
 800d87a:	783b      	ldrb	r3, [r7, #0]
 800d87c:	220a      	movs	r2, #10
 800d87e:	0030      	movs	r0, r6
 800d880:	3b30      	subs	r3, #48	; 0x30
 800d882:	f7ff ff8f 	bl	800d7a4 <__multadd>
 800d886:	3701      	adds	r7, #1
 800d888:	0001      	movs	r1, r0
 800d88a:	42a7      	cmp	r7, r4
 800d88c:	d1f5      	bne.n	800d87a <__s2b+0x4e>
 800d88e:	002c      	movs	r4, r5
 800d890:	9b00      	ldr	r3, [sp, #0]
 800d892:	3c08      	subs	r4, #8
 800d894:	191c      	adds	r4, r3, r4
 800d896:	002f      	movs	r7, r5
 800d898:	9b01      	ldr	r3, [sp, #4]
 800d89a:	429f      	cmp	r7, r3
 800d89c:	db04      	blt.n	800d8a8 <__s2b+0x7c>
 800d89e:	0008      	movs	r0, r1
 800d8a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d8a2:	2509      	movs	r5, #9
 800d8a4:	340a      	adds	r4, #10
 800d8a6:	e7f6      	b.n	800d896 <__s2b+0x6a>
 800d8a8:	1b63      	subs	r3, r4, r5
 800d8aa:	5ddb      	ldrb	r3, [r3, r7]
 800d8ac:	220a      	movs	r2, #10
 800d8ae:	0030      	movs	r0, r6
 800d8b0:	3b30      	subs	r3, #48	; 0x30
 800d8b2:	f7ff ff77 	bl	800d7a4 <__multadd>
 800d8b6:	3701      	adds	r7, #1
 800d8b8:	0001      	movs	r1, r0
 800d8ba:	e7ed      	b.n	800d898 <__s2b+0x6c>
 800d8bc:	0800ee66 	.word	0x0800ee66
 800d8c0:	0800eed7 	.word	0x0800eed7

0800d8c4 <__hi0bits>:
 800d8c4:	0003      	movs	r3, r0
 800d8c6:	0c02      	lsrs	r2, r0, #16
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	4282      	cmp	r2, r0
 800d8cc:	d101      	bne.n	800d8d2 <__hi0bits+0xe>
 800d8ce:	041b      	lsls	r3, r3, #16
 800d8d0:	3010      	adds	r0, #16
 800d8d2:	0e1a      	lsrs	r2, r3, #24
 800d8d4:	d101      	bne.n	800d8da <__hi0bits+0x16>
 800d8d6:	3008      	adds	r0, #8
 800d8d8:	021b      	lsls	r3, r3, #8
 800d8da:	0f1a      	lsrs	r2, r3, #28
 800d8dc:	d101      	bne.n	800d8e2 <__hi0bits+0x1e>
 800d8de:	3004      	adds	r0, #4
 800d8e0:	011b      	lsls	r3, r3, #4
 800d8e2:	0f9a      	lsrs	r2, r3, #30
 800d8e4:	d101      	bne.n	800d8ea <__hi0bits+0x26>
 800d8e6:	3002      	adds	r0, #2
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	db03      	blt.n	800d8f6 <__hi0bits+0x32>
 800d8ee:	3001      	adds	r0, #1
 800d8f0:	005b      	lsls	r3, r3, #1
 800d8f2:	d400      	bmi.n	800d8f6 <__hi0bits+0x32>
 800d8f4:	2020      	movs	r0, #32
 800d8f6:	4770      	bx	lr

0800d8f8 <__lo0bits>:
 800d8f8:	6803      	ldr	r3, [r0, #0]
 800d8fa:	0001      	movs	r1, r0
 800d8fc:	2207      	movs	r2, #7
 800d8fe:	0018      	movs	r0, r3
 800d900:	4010      	ands	r0, r2
 800d902:	4213      	tst	r3, r2
 800d904:	d00d      	beq.n	800d922 <__lo0bits+0x2a>
 800d906:	3a06      	subs	r2, #6
 800d908:	2000      	movs	r0, #0
 800d90a:	4213      	tst	r3, r2
 800d90c:	d105      	bne.n	800d91a <__lo0bits+0x22>
 800d90e:	3002      	adds	r0, #2
 800d910:	4203      	tst	r3, r0
 800d912:	d003      	beq.n	800d91c <__lo0bits+0x24>
 800d914:	40d3      	lsrs	r3, r2
 800d916:	0010      	movs	r0, r2
 800d918:	600b      	str	r3, [r1, #0]
 800d91a:	4770      	bx	lr
 800d91c:	089b      	lsrs	r3, r3, #2
 800d91e:	600b      	str	r3, [r1, #0]
 800d920:	e7fb      	b.n	800d91a <__lo0bits+0x22>
 800d922:	b29a      	uxth	r2, r3
 800d924:	2a00      	cmp	r2, #0
 800d926:	d101      	bne.n	800d92c <__lo0bits+0x34>
 800d928:	2010      	movs	r0, #16
 800d92a:	0c1b      	lsrs	r3, r3, #16
 800d92c:	b2da      	uxtb	r2, r3
 800d92e:	2a00      	cmp	r2, #0
 800d930:	d101      	bne.n	800d936 <__lo0bits+0x3e>
 800d932:	3008      	adds	r0, #8
 800d934:	0a1b      	lsrs	r3, r3, #8
 800d936:	071a      	lsls	r2, r3, #28
 800d938:	d101      	bne.n	800d93e <__lo0bits+0x46>
 800d93a:	3004      	adds	r0, #4
 800d93c:	091b      	lsrs	r3, r3, #4
 800d93e:	079a      	lsls	r2, r3, #30
 800d940:	d101      	bne.n	800d946 <__lo0bits+0x4e>
 800d942:	3002      	adds	r0, #2
 800d944:	089b      	lsrs	r3, r3, #2
 800d946:	07da      	lsls	r2, r3, #31
 800d948:	d4e9      	bmi.n	800d91e <__lo0bits+0x26>
 800d94a:	3001      	adds	r0, #1
 800d94c:	085b      	lsrs	r3, r3, #1
 800d94e:	d1e6      	bne.n	800d91e <__lo0bits+0x26>
 800d950:	2020      	movs	r0, #32
 800d952:	e7e2      	b.n	800d91a <__lo0bits+0x22>

0800d954 <__i2b>:
 800d954:	b510      	push	{r4, lr}
 800d956:	000c      	movs	r4, r1
 800d958:	2101      	movs	r1, #1
 800d95a:	f7ff febb 	bl	800d6d4 <_Balloc>
 800d95e:	2800      	cmp	r0, #0
 800d960:	d107      	bne.n	800d972 <__i2b+0x1e>
 800d962:	2146      	movs	r1, #70	; 0x46
 800d964:	4c05      	ldr	r4, [pc, #20]	; (800d97c <__i2b+0x28>)
 800d966:	0002      	movs	r2, r0
 800d968:	4b05      	ldr	r3, [pc, #20]	; (800d980 <__i2b+0x2c>)
 800d96a:	0020      	movs	r0, r4
 800d96c:	31ff      	adds	r1, #255	; 0xff
 800d96e:	f000 ff85 	bl	800e87c <__assert_func>
 800d972:	2301      	movs	r3, #1
 800d974:	6144      	str	r4, [r0, #20]
 800d976:	6103      	str	r3, [r0, #16]
 800d978:	bd10      	pop	{r4, pc}
 800d97a:	46c0      	nop			; (mov r8, r8)
 800d97c:	0800eed7 	.word	0x0800eed7
 800d980:	0800ee66 	.word	0x0800ee66

0800d984 <__multiply>:
 800d984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d986:	0015      	movs	r5, r2
 800d988:	690a      	ldr	r2, [r1, #16]
 800d98a:	692b      	ldr	r3, [r5, #16]
 800d98c:	000c      	movs	r4, r1
 800d98e:	b08b      	sub	sp, #44	; 0x2c
 800d990:	429a      	cmp	r2, r3
 800d992:	da01      	bge.n	800d998 <__multiply+0x14>
 800d994:	002c      	movs	r4, r5
 800d996:	000d      	movs	r5, r1
 800d998:	6927      	ldr	r7, [r4, #16]
 800d99a:	692e      	ldr	r6, [r5, #16]
 800d99c:	6861      	ldr	r1, [r4, #4]
 800d99e:	19bb      	adds	r3, r7, r6
 800d9a0:	9303      	str	r3, [sp, #12]
 800d9a2:	68a3      	ldr	r3, [r4, #8]
 800d9a4:	19ba      	adds	r2, r7, r6
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	da00      	bge.n	800d9ac <__multiply+0x28>
 800d9aa:	3101      	adds	r1, #1
 800d9ac:	f7ff fe92 	bl	800d6d4 <_Balloc>
 800d9b0:	9002      	str	r0, [sp, #8]
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d106      	bne.n	800d9c4 <__multiply+0x40>
 800d9b6:	21b1      	movs	r1, #177	; 0xb1
 800d9b8:	4b48      	ldr	r3, [pc, #288]	; (800dadc <__multiply+0x158>)
 800d9ba:	4849      	ldr	r0, [pc, #292]	; (800dae0 <__multiply+0x15c>)
 800d9bc:	9a02      	ldr	r2, [sp, #8]
 800d9be:	0049      	lsls	r1, r1, #1
 800d9c0:	f000 ff5c 	bl	800e87c <__assert_func>
 800d9c4:	9b02      	ldr	r3, [sp, #8]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	3314      	adds	r3, #20
 800d9ca:	469c      	mov	ip, r3
 800d9cc:	19bb      	adds	r3, r7, r6
 800d9ce:	009b      	lsls	r3, r3, #2
 800d9d0:	4463      	add	r3, ip
 800d9d2:	9304      	str	r3, [sp, #16]
 800d9d4:	4663      	mov	r3, ip
 800d9d6:	9904      	ldr	r1, [sp, #16]
 800d9d8:	428b      	cmp	r3, r1
 800d9da:	d32a      	bcc.n	800da32 <__multiply+0xae>
 800d9dc:	0023      	movs	r3, r4
 800d9de:	00bf      	lsls	r7, r7, #2
 800d9e0:	3314      	adds	r3, #20
 800d9e2:	3514      	adds	r5, #20
 800d9e4:	9308      	str	r3, [sp, #32]
 800d9e6:	00b6      	lsls	r6, r6, #2
 800d9e8:	19db      	adds	r3, r3, r7
 800d9ea:	9305      	str	r3, [sp, #20]
 800d9ec:	19ab      	adds	r3, r5, r6
 800d9ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d9f0:	2304      	movs	r3, #4
 800d9f2:	9306      	str	r3, [sp, #24]
 800d9f4:	0023      	movs	r3, r4
 800d9f6:	9a05      	ldr	r2, [sp, #20]
 800d9f8:	3315      	adds	r3, #21
 800d9fa:	9501      	str	r5, [sp, #4]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d305      	bcc.n	800da0c <__multiply+0x88>
 800da00:	1b13      	subs	r3, r2, r4
 800da02:	3b15      	subs	r3, #21
 800da04:	089b      	lsrs	r3, r3, #2
 800da06:	3301      	adds	r3, #1
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	9306      	str	r3, [sp, #24]
 800da0c:	9b01      	ldr	r3, [sp, #4]
 800da0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da10:	4293      	cmp	r3, r2
 800da12:	d310      	bcc.n	800da36 <__multiply+0xb2>
 800da14:	9b03      	ldr	r3, [sp, #12]
 800da16:	2b00      	cmp	r3, #0
 800da18:	dd05      	ble.n	800da26 <__multiply+0xa2>
 800da1a:	9b04      	ldr	r3, [sp, #16]
 800da1c:	3b04      	subs	r3, #4
 800da1e:	9304      	str	r3, [sp, #16]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d056      	beq.n	800dad4 <__multiply+0x150>
 800da26:	9b02      	ldr	r3, [sp, #8]
 800da28:	9a03      	ldr	r2, [sp, #12]
 800da2a:	0018      	movs	r0, r3
 800da2c:	611a      	str	r2, [r3, #16]
 800da2e:	b00b      	add	sp, #44	; 0x2c
 800da30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da32:	c304      	stmia	r3!, {r2}
 800da34:	e7cf      	b.n	800d9d6 <__multiply+0x52>
 800da36:	9b01      	ldr	r3, [sp, #4]
 800da38:	6818      	ldr	r0, [r3, #0]
 800da3a:	b280      	uxth	r0, r0
 800da3c:	2800      	cmp	r0, #0
 800da3e:	d01e      	beq.n	800da7e <__multiply+0xfa>
 800da40:	4667      	mov	r7, ip
 800da42:	2500      	movs	r5, #0
 800da44:	9e08      	ldr	r6, [sp, #32]
 800da46:	ce02      	ldmia	r6!, {r1}
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	9307      	str	r3, [sp, #28]
 800da4c:	b28b      	uxth	r3, r1
 800da4e:	4343      	muls	r3, r0
 800da50:	001a      	movs	r2, r3
 800da52:	466b      	mov	r3, sp
 800da54:	8b9b      	ldrh	r3, [r3, #28]
 800da56:	18d3      	adds	r3, r2, r3
 800da58:	195b      	adds	r3, r3, r5
 800da5a:	0c0d      	lsrs	r5, r1, #16
 800da5c:	4345      	muls	r5, r0
 800da5e:	9a07      	ldr	r2, [sp, #28]
 800da60:	0c11      	lsrs	r1, r2, #16
 800da62:	1869      	adds	r1, r5, r1
 800da64:	0c1a      	lsrs	r2, r3, #16
 800da66:	188a      	adds	r2, r1, r2
 800da68:	b29b      	uxth	r3, r3
 800da6a:	0c15      	lsrs	r5, r2, #16
 800da6c:	0412      	lsls	r2, r2, #16
 800da6e:	431a      	orrs	r2, r3
 800da70:	9b05      	ldr	r3, [sp, #20]
 800da72:	c704      	stmia	r7!, {r2}
 800da74:	42b3      	cmp	r3, r6
 800da76:	d8e6      	bhi.n	800da46 <__multiply+0xc2>
 800da78:	4663      	mov	r3, ip
 800da7a:	9a06      	ldr	r2, [sp, #24]
 800da7c:	509d      	str	r5, [r3, r2]
 800da7e:	9b01      	ldr	r3, [sp, #4]
 800da80:	6818      	ldr	r0, [r3, #0]
 800da82:	0c00      	lsrs	r0, r0, #16
 800da84:	d020      	beq.n	800dac8 <__multiply+0x144>
 800da86:	4663      	mov	r3, ip
 800da88:	0025      	movs	r5, r4
 800da8a:	4661      	mov	r1, ip
 800da8c:	2700      	movs	r7, #0
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	3514      	adds	r5, #20
 800da92:	682a      	ldr	r2, [r5, #0]
 800da94:	680e      	ldr	r6, [r1, #0]
 800da96:	b292      	uxth	r2, r2
 800da98:	4342      	muls	r2, r0
 800da9a:	0c36      	lsrs	r6, r6, #16
 800da9c:	1992      	adds	r2, r2, r6
 800da9e:	19d2      	adds	r2, r2, r7
 800daa0:	0416      	lsls	r6, r2, #16
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	431e      	orrs	r6, r3
 800daa6:	600e      	str	r6, [r1, #0]
 800daa8:	cd40      	ldmia	r5!, {r6}
 800daaa:	684b      	ldr	r3, [r1, #4]
 800daac:	0c36      	lsrs	r6, r6, #16
 800daae:	4346      	muls	r6, r0
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	0c12      	lsrs	r2, r2, #16
 800dab4:	18f3      	adds	r3, r6, r3
 800dab6:	189b      	adds	r3, r3, r2
 800dab8:	9a05      	ldr	r2, [sp, #20]
 800daba:	0c1f      	lsrs	r7, r3, #16
 800dabc:	3104      	adds	r1, #4
 800dabe:	42aa      	cmp	r2, r5
 800dac0:	d8e7      	bhi.n	800da92 <__multiply+0x10e>
 800dac2:	4662      	mov	r2, ip
 800dac4:	9906      	ldr	r1, [sp, #24]
 800dac6:	5053      	str	r3, [r2, r1]
 800dac8:	9b01      	ldr	r3, [sp, #4]
 800daca:	3304      	adds	r3, #4
 800dacc:	9301      	str	r3, [sp, #4]
 800dace:	2304      	movs	r3, #4
 800dad0:	449c      	add	ip, r3
 800dad2:	e79b      	b.n	800da0c <__multiply+0x88>
 800dad4:	9b03      	ldr	r3, [sp, #12]
 800dad6:	3b01      	subs	r3, #1
 800dad8:	9303      	str	r3, [sp, #12]
 800dada:	e79b      	b.n	800da14 <__multiply+0x90>
 800dadc:	0800ee66 	.word	0x0800ee66
 800dae0:	0800eed7 	.word	0x0800eed7

0800dae4 <__pow5mult>:
 800dae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dae6:	2303      	movs	r3, #3
 800dae8:	0015      	movs	r5, r2
 800daea:	0007      	movs	r7, r0
 800daec:	000e      	movs	r6, r1
 800daee:	401a      	ands	r2, r3
 800daf0:	421d      	tst	r5, r3
 800daf2:	d008      	beq.n	800db06 <__pow5mult+0x22>
 800daf4:	4925      	ldr	r1, [pc, #148]	; (800db8c <__pow5mult+0xa8>)
 800daf6:	3a01      	subs	r2, #1
 800daf8:	0092      	lsls	r2, r2, #2
 800dafa:	5852      	ldr	r2, [r2, r1]
 800dafc:	2300      	movs	r3, #0
 800dafe:	0031      	movs	r1, r6
 800db00:	f7ff fe50 	bl	800d7a4 <__multadd>
 800db04:	0006      	movs	r6, r0
 800db06:	10ad      	asrs	r5, r5, #2
 800db08:	d03d      	beq.n	800db86 <__pow5mult+0xa2>
 800db0a:	69fc      	ldr	r4, [r7, #28]
 800db0c:	2c00      	cmp	r4, #0
 800db0e:	d10f      	bne.n	800db30 <__pow5mult+0x4c>
 800db10:	2010      	movs	r0, #16
 800db12:	f7ff fd0f 	bl	800d534 <malloc>
 800db16:	1e02      	subs	r2, r0, #0
 800db18:	61f8      	str	r0, [r7, #28]
 800db1a:	d105      	bne.n	800db28 <__pow5mult+0x44>
 800db1c:	21b4      	movs	r1, #180	; 0xb4
 800db1e:	4b1c      	ldr	r3, [pc, #112]	; (800db90 <__pow5mult+0xac>)
 800db20:	481c      	ldr	r0, [pc, #112]	; (800db94 <__pow5mult+0xb0>)
 800db22:	31ff      	adds	r1, #255	; 0xff
 800db24:	f000 feaa 	bl	800e87c <__assert_func>
 800db28:	6044      	str	r4, [r0, #4]
 800db2a:	6084      	str	r4, [r0, #8]
 800db2c:	6004      	str	r4, [r0, #0]
 800db2e:	60c4      	str	r4, [r0, #12]
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	689c      	ldr	r4, [r3, #8]
 800db34:	9301      	str	r3, [sp, #4]
 800db36:	2c00      	cmp	r4, #0
 800db38:	d108      	bne.n	800db4c <__pow5mult+0x68>
 800db3a:	0038      	movs	r0, r7
 800db3c:	4916      	ldr	r1, [pc, #88]	; (800db98 <__pow5mult+0xb4>)
 800db3e:	f7ff ff09 	bl	800d954 <__i2b>
 800db42:	9b01      	ldr	r3, [sp, #4]
 800db44:	0004      	movs	r4, r0
 800db46:	6098      	str	r0, [r3, #8]
 800db48:	2300      	movs	r3, #0
 800db4a:	6003      	str	r3, [r0, #0]
 800db4c:	2301      	movs	r3, #1
 800db4e:	421d      	tst	r5, r3
 800db50:	d00a      	beq.n	800db68 <__pow5mult+0x84>
 800db52:	0031      	movs	r1, r6
 800db54:	0022      	movs	r2, r4
 800db56:	0038      	movs	r0, r7
 800db58:	f7ff ff14 	bl	800d984 <__multiply>
 800db5c:	0031      	movs	r1, r6
 800db5e:	9001      	str	r0, [sp, #4]
 800db60:	0038      	movs	r0, r7
 800db62:	f7ff fdfb 	bl	800d75c <_Bfree>
 800db66:	9e01      	ldr	r6, [sp, #4]
 800db68:	106d      	asrs	r5, r5, #1
 800db6a:	d00c      	beq.n	800db86 <__pow5mult+0xa2>
 800db6c:	6820      	ldr	r0, [r4, #0]
 800db6e:	2800      	cmp	r0, #0
 800db70:	d107      	bne.n	800db82 <__pow5mult+0x9e>
 800db72:	0022      	movs	r2, r4
 800db74:	0021      	movs	r1, r4
 800db76:	0038      	movs	r0, r7
 800db78:	f7ff ff04 	bl	800d984 <__multiply>
 800db7c:	2300      	movs	r3, #0
 800db7e:	6020      	str	r0, [r4, #0]
 800db80:	6003      	str	r3, [r0, #0]
 800db82:	0004      	movs	r4, r0
 800db84:	e7e2      	b.n	800db4c <__pow5mult+0x68>
 800db86:	0030      	movs	r0, r6
 800db88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db8a:	46c0      	nop			; (mov r8, r8)
 800db8c:	0800f020 	.word	0x0800f020
 800db90:	0800edf7 	.word	0x0800edf7
 800db94:	0800eed7 	.word	0x0800eed7
 800db98:	00000271 	.word	0x00000271

0800db9c <__lshift>:
 800db9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db9e:	000c      	movs	r4, r1
 800dba0:	0017      	movs	r7, r2
 800dba2:	6923      	ldr	r3, [r4, #16]
 800dba4:	1155      	asrs	r5, r2, #5
 800dba6:	b087      	sub	sp, #28
 800dba8:	18eb      	adds	r3, r5, r3
 800dbaa:	9302      	str	r3, [sp, #8]
 800dbac:	3301      	adds	r3, #1
 800dbae:	9301      	str	r3, [sp, #4]
 800dbb0:	6849      	ldr	r1, [r1, #4]
 800dbb2:	68a3      	ldr	r3, [r4, #8]
 800dbb4:	9004      	str	r0, [sp, #16]
 800dbb6:	9a01      	ldr	r2, [sp, #4]
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	db10      	blt.n	800dbde <__lshift+0x42>
 800dbbc:	9804      	ldr	r0, [sp, #16]
 800dbbe:	f7ff fd89 	bl	800d6d4 <_Balloc>
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	0002      	movs	r2, r0
 800dbc6:	0006      	movs	r6, r0
 800dbc8:	0019      	movs	r1, r3
 800dbca:	3214      	adds	r2, #20
 800dbcc:	4298      	cmp	r0, r3
 800dbce:	d10c      	bne.n	800dbea <__lshift+0x4e>
 800dbd0:	31df      	adds	r1, #223	; 0xdf
 800dbd2:	0032      	movs	r2, r6
 800dbd4:	4b26      	ldr	r3, [pc, #152]	; (800dc70 <__lshift+0xd4>)
 800dbd6:	4827      	ldr	r0, [pc, #156]	; (800dc74 <__lshift+0xd8>)
 800dbd8:	31ff      	adds	r1, #255	; 0xff
 800dbda:	f000 fe4f 	bl	800e87c <__assert_func>
 800dbde:	3101      	adds	r1, #1
 800dbe0:	005b      	lsls	r3, r3, #1
 800dbe2:	e7e8      	b.n	800dbb6 <__lshift+0x1a>
 800dbe4:	0098      	lsls	r0, r3, #2
 800dbe6:	5011      	str	r1, [r2, r0]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	42ab      	cmp	r3, r5
 800dbec:	dbfa      	blt.n	800dbe4 <__lshift+0x48>
 800dbee:	43eb      	mvns	r3, r5
 800dbf0:	17db      	asrs	r3, r3, #31
 800dbf2:	401d      	ands	r5, r3
 800dbf4:	211f      	movs	r1, #31
 800dbf6:	0023      	movs	r3, r4
 800dbf8:	0038      	movs	r0, r7
 800dbfa:	00ad      	lsls	r5, r5, #2
 800dbfc:	1955      	adds	r5, r2, r5
 800dbfe:	6922      	ldr	r2, [r4, #16]
 800dc00:	3314      	adds	r3, #20
 800dc02:	0092      	lsls	r2, r2, #2
 800dc04:	4008      	ands	r0, r1
 800dc06:	4684      	mov	ip, r0
 800dc08:	189a      	adds	r2, r3, r2
 800dc0a:	420f      	tst	r7, r1
 800dc0c:	d02a      	beq.n	800dc64 <__lshift+0xc8>
 800dc0e:	3101      	adds	r1, #1
 800dc10:	1a09      	subs	r1, r1, r0
 800dc12:	9105      	str	r1, [sp, #20]
 800dc14:	2100      	movs	r1, #0
 800dc16:	9503      	str	r5, [sp, #12]
 800dc18:	4667      	mov	r7, ip
 800dc1a:	6818      	ldr	r0, [r3, #0]
 800dc1c:	40b8      	lsls	r0, r7
 800dc1e:	4308      	orrs	r0, r1
 800dc20:	9903      	ldr	r1, [sp, #12]
 800dc22:	c101      	stmia	r1!, {r0}
 800dc24:	9103      	str	r1, [sp, #12]
 800dc26:	9805      	ldr	r0, [sp, #20]
 800dc28:	cb02      	ldmia	r3!, {r1}
 800dc2a:	40c1      	lsrs	r1, r0
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d8f3      	bhi.n	800dc18 <__lshift+0x7c>
 800dc30:	0020      	movs	r0, r4
 800dc32:	3015      	adds	r0, #21
 800dc34:	2304      	movs	r3, #4
 800dc36:	4282      	cmp	r2, r0
 800dc38:	d304      	bcc.n	800dc44 <__lshift+0xa8>
 800dc3a:	1b13      	subs	r3, r2, r4
 800dc3c:	3b15      	subs	r3, #21
 800dc3e:	089b      	lsrs	r3, r3, #2
 800dc40:	3301      	adds	r3, #1
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	50e9      	str	r1, [r5, r3]
 800dc46:	2900      	cmp	r1, #0
 800dc48:	d002      	beq.n	800dc50 <__lshift+0xb4>
 800dc4a:	9b02      	ldr	r3, [sp, #8]
 800dc4c:	3302      	adds	r3, #2
 800dc4e:	9301      	str	r3, [sp, #4]
 800dc50:	9b01      	ldr	r3, [sp, #4]
 800dc52:	9804      	ldr	r0, [sp, #16]
 800dc54:	3b01      	subs	r3, #1
 800dc56:	0021      	movs	r1, r4
 800dc58:	6133      	str	r3, [r6, #16]
 800dc5a:	f7ff fd7f 	bl	800d75c <_Bfree>
 800dc5e:	0030      	movs	r0, r6
 800dc60:	b007      	add	sp, #28
 800dc62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc64:	cb02      	ldmia	r3!, {r1}
 800dc66:	c502      	stmia	r5!, {r1}
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d8fb      	bhi.n	800dc64 <__lshift+0xc8>
 800dc6c:	e7f0      	b.n	800dc50 <__lshift+0xb4>
 800dc6e:	46c0      	nop			; (mov r8, r8)
 800dc70:	0800ee66 	.word	0x0800ee66
 800dc74:	0800eed7 	.word	0x0800eed7

0800dc78 <__mcmp>:
 800dc78:	b530      	push	{r4, r5, lr}
 800dc7a:	690b      	ldr	r3, [r1, #16]
 800dc7c:	6904      	ldr	r4, [r0, #16]
 800dc7e:	0002      	movs	r2, r0
 800dc80:	1ae0      	subs	r0, r4, r3
 800dc82:	429c      	cmp	r4, r3
 800dc84:	d10e      	bne.n	800dca4 <__mcmp+0x2c>
 800dc86:	3214      	adds	r2, #20
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	3114      	adds	r1, #20
 800dc8c:	0014      	movs	r4, r2
 800dc8e:	18c9      	adds	r1, r1, r3
 800dc90:	18d2      	adds	r2, r2, r3
 800dc92:	3a04      	subs	r2, #4
 800dc94:	3904      	subs	r1, #4
 800dc96:	6815      	ldr	r5, [r2, #0]
 800dc98:	680b      	ldr	r3, [r1, #0]
 800dc9a:	429d      	cmp	r5, r3
 800dc9c:	d003      	beq.n	800dca6 <__mcmp+0x2e>
 800dc9e:	2001      	movs	r0, #1
 800dca0:	429d      	cmp	r5, r3
 800dca2:	d303      	bcc.n	800dcac <__mcmp+0x34>
 800dca4:	bd30      	pop	{r4, r5, pc}
 800dca6:	4294      	cmp	r4, r2
 800dca8:	d3f3      	bcc.n	800dc92 <__mcmp+0x1a>
 800dcaa:	e7fb      	b.n	800dca4 <__mcmp+0x2c>
 800dcac:	4240      	negs	r0, r0
 800dcae:	e7f9      	b.n	800dca4 <__mcmp+0x2c>

0800dcb0 <__mdiff>:
 800dcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcb2:	000e      	movs	r6, r1
 800dcb4:	0007      	movs	r7, r0
 800dcb6:	0011      	movs	r1, r2
 800dcb8:	0030      	movs	r0, r6
 800dcba:	b087      	sub	sp, #28
 800dcbc:	0014      	movs	r4, r2
 800dcbe:	f7ff ffdb 	bl	800dc78 <__mcmp>
 800dcc2:	1e05      	subs	r5, r0, #0
 800dcc4:	d110      	bne.n	800dce8 <__mdiff+0x38>
 800dcc6:	0001      	movs	r1, r0
 800dcc8:	0038      	movs	r0, r7
 800dcca:	f7ff fd03 	bl	800d6d4 <_Balloc>
 800dcce:	1e02      	subs	r2, r0, #0
 800dcd0:	d104      	bne.n	800dcdc <__mdiff+0x2c>
 800dcd2:	4b3f      	ldr	r3, [pc, #252]	; (800ddd0 <__mdiff+0x120>)
 800dcd4:	483f      	ldr	r0, [pc, #252]	; (800ddd4 <__mdiff+0x124>)
 800dcd6:	4940      	ldr	r1, [pc, #256]	; (800ddd8 <__mdiff+0x128>)
 800dcd8:	f000 fdd0 	bl	800e87c <__assert_func>
 800dcdc:	2301      	movs	r3, #1
 800dcde:	6145      	str	r5, [r0, #20]
 800dce0:	6103      	str	r3, [r0, #16]
 800dce2:	0010      	movs	r0, r2
 800dce4:	b007      	add	sp, #28
 800dce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dce8:	2301      	movs	r3, #1
 800dcea:	9301      	str	r3, [sp, #4]
 800dcec:	2800      	cmp	r0, #0
 800dcee:	db04      	blt.n	800dcfa <__mdiff+0x4a>
 800dcf0:	0023      	movs	r3, r4
 800dcf2:	0034      	movs	r4, r6
 800dcf4:	001e      	movs	r6, r3
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	9301      	str	r3, [sp, #4]
 800dcfa:	0038      	movs	r0, r7
 800dcfc:	6861      	ldr	r1, [r4, #4]
 800dcfe:	f7ff fce9 	bl	800d6d4 <_Balloc>
 800dd02:	1e02      	subs	r2, r0, #0
 800dd04:	d103      	bne.n	800dd0e <__mdiff+0x5e>
 800dd06:	4b32      	ldr	r3, [pc, #200]	; (800ddd0 <__mdiff+0x120>)
 800dd08:	4832      	ldr	r0, [pc, #200]	; (800ddd4 <__mdiff+0x124>)
 800dd0a:	4934      	ldr	r1, [pc, #208]	; (800dddc <__mdiff+0x12c>)
 800dd0c:	e7e4      	b.n	800dcd8 <__mdiff+0x28>
 800dd0e:	9b01      	ldr	r3, [sp, #4]
 800dd10:	2700      	movs	r7, #0
 800dd12:	60c3      	str	r3, [r0, #12]
 800dd14:	6920      	ldr	r0, [r4, #16]
 800dd16:	3414      	adds	r4, #20
 800dd18:	0083      	lsls	r3, r0, #2
 800dd1a:	18e3      	adds	r3, r4, r3
 800dd1c:	0021      	movs	r1, r4
 800dd1e:	9401      	str	r4, [sp, #4]
 800dd20:	0034      	movs	r4, r6
 800dd22:	9302      	str	r3, [sp, #8]
 800dd24:	6933      	ldr	r3, [r6, #16]
 800dd26:	3414      	adds	r4, #20
 800dd28:	009b      	lsls	r3, r3, #2
 800dd2a:	18e3      	adds	r3, r4, r3
 800dd2c:	9303      	str	r3, [sp, #12]
 800dd2e:	0013      	movs	r3, r2
 800dd30:	3314      	adds	r3, #20
 800dd32:	469c      	mov	ip, r3
 800dd34:	9305      	str	r3, [sp, #20]
 800dd36:	9104      	str	r1, [sp, #16]
 800dd38:	9b04      	ldr	r3, [sp, #16]
 800dd3a:	cc02      	ldmia	r4!, {r1}
 800dd3c:	cb20      	ldmia	r3!, {r5}
 800dd3e:	9304      	str	r3, [sp, #16]
 800dd40:	b2ab      	uxth	r3, r5
 800dd42:	19df      	adds	r7, r3, r7
 800dd44:	b28b      	uxth	r3, r1
 800dd46:	1afb      	subs	r3, r7, r3
 800dd48:	0c09      	lsrs	r1, r1, #16
 800dd4a:	0c2d      	lsrs	r5, r5, #16
 800dd4c:	1a6d      	subs	r5, r5, r1
 800dd4e:	1419      	asrs	r1, r3, #16
 800dd50:	1869      	adds	r1, r5, r1
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	140f      	asrs	r7, r1, #16
 800dd56:	0409      	lsls	r1, r1, #16
 800dd58:	4319      	orrs	r1, r3
 800dd5a:	4663      	mov	r3, ip
 800dd5c:	c302      	stmia	r3!, {r1}
 800dd5e:	469c      	mov	ip, r3
 800dd60:	9b03      	ldr	r3, [sp, #12]
 800dd62:	42a3      	cmp	r3, r4
 800dd64:	d8e8      	bhi.n	800dd38 <__mdiff+0x88>
 800dd66:	0031      	movs	r1, r6
 800dd68:	9c03      	ldr	r4, [sp, #12]
 800dd6a:	3115      	adds	r1, #21
 800dd6c:	2304      	movs	r3, #4
 800dd6e:	428c      	cmp	r4, r1
 800dd70:	d304      	bcc.n	800dd7c <__mdiff+0xcc>
 800dd72:	1ba3      	subs	r3, r4, r6
 800dd74:	3b15      	subs	r3, #21
 800dd76:	089b      	lsrs	r3, r3, #2
 800dd78:	3301      	adds	r3, #1
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	9901      	ldr	r1, [sp, #4]
 800dd7e:	18cd      	adds	r5, r1, r3
 800dd80:	9905      	ldr	r1, [sp, #20]
 800dd82:	002e      	movs	r6, r5
 800dd84:	18cb      	adds	r3, r1, r3
 800dd86:	469c      	mov	ip, r3
 800dd88:	9902      	ldr	r1, [sp, #8]
 800dd8a:	428e      	cmp	r6, r1
 800dd8c:	d310      	bcc.n	800ddb0 <__mdiff+0x100>
 800dd8e:	9e02      	ldr	r6, [sp, #8]
 800dd90:	1ee9      	subs	r1, r5, #3
 800dd92:	2400      	movs	r4, #0
 800dd94:	428e      	cmp	r6, r1
 800dd96:	d304      	bcc.n	800dda2 <__mdiff+0xf2>
 800dd98:	0031      	movs	r1, r6
 800dd9a:	3103      	adds	r1, #3
 800dd9c:	1b49      	subs	r1, r1, r5
 800dd9e:	0889      	lsrs	r1, r1, #2
 800dda0:	008c      	lsls	r4, r1, #2
 800dda2:	191b      	adds	r3, r3, r4
 800dda4:	3b04      	subs	r3, #4
 800dda6:	6819      	ldr	r1, [r3, #0]
 800dda8:	2900      	cmp	r1, #0
 800ddaa:	d00f      	beq.n	800ddcc <__mdiff+0x11c>
 800ddac:	6110      	str	r0, [r2, #16]
 800ddae:	e798      	b.n	800dce2 <__mdiff+0x32>
 800ddb0:	ce02      	ldmia	r6!, {r1}
 800ddb2:	b28c      	uxth	r4, r1
 800ddb4:	19e4      	adds	r4, r4, r7
 800ddb6:	0c0f      	lsrs	r7, r1, #16
 800ddb8:	1421      	asrs	r1, r4, #16
 800ddba:	1879      	adds	r1, r7, r1
 800ddbc:	b2a4      	uxth	r4, r4
 800ddbe:	140f      	asrs	r7, r1, #16
 800ddc0:	0409      	lsls	r1, r1, #16
 800ddc2:	4321      	orrs	r1, r4
 800ddc4:	4664      	mov	r4, ip
 800ddc6:	c402      	stmia	r4!, {r1}
 800ddc8:	46a4      	mov	ip, r4
 800ddca:	e7dd      	b.n	800dd88 <__mdiff+0xd8>
 800ddcc:	3801      	subs	r0, #1
 800ddce:	e7e9      	b.n	800dda4 <__mdiff+0xf4>
 800ddd0:	0800ee66 	.word	0x0800ee66
 800ddd4:	0800eed7 	.word	0x0800eed7
 800ddd8:	00000237 	.word	0x00000237
 800dddc:	00000245 	.word	0x00000245

0800dde0 <__ulp>:
 800dde0:	2000      	movs	r0, #0
 800dde2:	4b0b      	ldr	r3, [pc, #44]	; (800de10 <__ulp+0x30>)
 800dde4:	4019      	ands	r1, r3
 800dde6:	4b0b      	ldr	r3, [pc, #44]	; (800de14 <__ulp+0x34>)
 800dde8:	18c9      	adds	r1, r1, r3
 800ddea:	4281      	cmp	r1, r0
 800ddec:	dc06      	bgt.n	800ddfc <__ulp+0x1c>
 800ddee:	4249      	negs	r1, r1
 800ddf0:	150b      	asrs	r3, r1, #20
 800ddf2:	2b13      	cmp	r3, #19
 800ddf4:	dc03      	bgt.n	800ddfe <__ulp+0x1e>
 800ddf6:	2180      	movs	r1, #128	; 0x80
 800ddf8:	0309      	lsls	r1, r1, #12
 800ddfa:	4119      	asrs	r1, r3
 800ddfc:	4770      	bx	lr
 800ddfe:	3b14      	subs	r3, #20
 800de00:	2001      	movs	r0, #1
 800de02:	2b1e      	cmp	r3, #30
 800de04:	dc02      	bgt.n	800de0c <__ulp+0x2c>
 800de06:	2080      	movs	r0, #128	; 0x80
 800de08:	0600      	lsls	r0, r0, #24
 800de0a:	40d8      	lsrs	r0, r3
 800de0c:	2100      	movs	r1, #0
 800de0e:	e7f5      	b.n	800ddfc <__ulp+0x1c>
 800de10:	7ff00000 	.word	0x7ff00000
 800de14:	fcc00000 	.word	0xfcc00000

0800de18 <__b2d>:
 800de18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de1a:	0006      	movs	r6, r0
 800de1c:	6903      	ldr	r3, [r0, #16]
 800de1e:	3614      	adds	r6, #20
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	18f3      	adds	r3, r6, r3
 800de24:	1f1d      	subs	r5, r3, #4
 800de26:	682c      	ldr	r4, [r5, #0]
 800de28:	000f      	movs	r7, r1
 800de2a:	0020      	movs	r0, r4
 800de2c:	9301      	str	r3, [sp, #4]
 800de2e:	f7ff fd49 	bl	800d8c4 <__hi0bits>
 800de32:	2220      	movs	r2, #32
 800de34:	1a12      	subs	r2, r2, r0
 800de36:	603a      	str	r2, [r7, #0]
 800de38:	0003      	movs	r3, r0
 800de3a:	4a1c      	ldr	r2, [pc, #112]	; (800deac <__b2d+0x94>)
 800de3c:	280a      	cmp	r0, #10
 800de3e:	dc15      	bgt.n	800de6c <__b2d+0x54>
 800de40:	210b      	movs	r1, #11
 800de42:	0027      	movs	r7, r4
 800de44:	1a09      	subs	r1, r1, r0
 800de46:	40cf      	lsrs	r7, r1
 800de48:	433a      	orrs	r2, r7
 800de4a:	468c      	mov	ip, r1
 800de4c:	0011      	movs	r1, r2
 800de4e:	2200      	movs	r2, #0
 800de50:	42ae      	cmp	r6, r5
 800de52:	d202      	bcs.n	800de5a <__b2d+0x42>
 800de54:	9a01      	ldr	r2, [sp, #4]
 800de56:	3a08      	subs	r2, #8
 800de58:	6812      	ldr	r2, [r2, #0]
 800de5a:	3315      	adds	r3, #21
 800de5c:	409c      	lsls	r4, r3
 800de5e:	4663      	mov	r3, ip
 800de60:	0027      	movs	r7, r4
 800de62:	40da      	lsrs	r2, r3
 800de64:	4317      	orrs	r7, r2
 800de66:	0038      	movs	r0, r7
 800de68:	b003      	add	sp, #12
 800de6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de6c:	2700      	movs	r7, #0
 800de6e:	42ae      	cmp	r6, r5
 800de70:	d202      	bcs.n	800de78 <__b2d+0x60>
 800de72:	9d01      	ldr	r5, [sp, #4]
 800de74:	3d08      	subs	r5, #8
 800de76:	682f      	ldr	r7, [r5, #0]
 800de78:	210b      	movs	r1, #11
 800de7a:	4249      	negs	r1, r1
 800de7c:	468c      	mov	ip, r1
 800de7e:	449c      	add	ip, r3
 800de80:	2b0b      	cmp	r3, #11
 800de82:	d010      	beq.n	800dea6 <__b2d+0x8e>
 800de84:	4661      	mov	r1, ip
 800de86:	2320      	movs	r3, #32
 800de88:	408c      	lsls	r4, r1
 800de8a:	1a5b      	subs	r3, r3, r1
 800de8c:	0039      	movs	r1, r7
 800de8e:	40d9      	lsrs	r1, r3
 800de90:	430c      	orrs	r4, r1
 800de92:	4322      	orrs	r2, r4
 800de94:	0011      	movs	r1, r2
 800de96:	2200      	movs	r2, #0
 800de98:	42b5      	cmp	r5, r6
 800de9a:	d901      	bls.n	800dea0 <__b2d+0x88>
 800de9c:	3d04      	subs	r5, #4
 800de9e:	682a      	ldr	r2, [r5, #0]
 800dea0:	4664      	mov	r4, ip
 800dea2:	40a7      	lsls	r7, r4
 800dea4:	e7dd      	b.n	800de62 <__b2d+0x4a>
 800dea6:	4322      	orrs	r2, r4
 800dea8:	0011      	movs	r1, r2
 800deaa:	e7dc      	b.n	800de66 <__b2d+0x4e>
 800deac:	3ff00000 	.word	0x3ff00000

0800deb0 <__d2b>:
 800deb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800deb2:	2101      	movs	r1, #1
 800deb4:	0014      	movs	r4, r2
 800deb6:	001d      	movs	r5, r3
 800deb8:	9f08      	ldr	r7, [sp, #32]
 800deba:	f7ff fc0b 	bl	800d6d4 <_Balloc>
 800debe:	1e06      	subs	r6, r0, #0
 800dec0:	d105      	bne.n	800dece <__d2b+0x1e>
 800dec2:	0032      	movs	r2, r6
 800dec4:	4b24      	ldr	r3, [pc, #144]	; (800df58 <__d2b+0xa8>)
 800dec6:	4825      	ldr	r0, [pc, #148]	; (800df5c <__d2b+0xac>)
 800dec8:	4925      	ldr	r1, [pc, #148]	; (800df60 <__d2b+0xb0>)
 800deca:	f000 fcd7 	bl	800e87c <__assert_func>
 800dece:	032b      	lsls	r3, r5, #12
 800ded0:	006d      	lsls	r5, r5, #1
 800ded2:	0b1b      	lsrs	r3, r3, #12
 800ded4:	0d6d      	lsrs	r5, r5, #21
 800ded6:	d125      	bne.n	800df24 <__d2b+0x74>
 800ded8:	9301      	str	r3, [sp, #4]
 800deda:	2c00      	cmp	r4, #0
 800dedc:	d028      	beq.n	800df30 <__d2b+0x80>
 800dede:	4668      	mov	r0, sp
 800dee0:	9400      	str	r4, [sp, #0]
 800dee2:	f7ff fd09 	bl	800d8f8 <__lo0bits>
 800dee6:	9b01      	ldr	r3, [sp, #4]
 800dee8:	9900      	ldr	r1, [sp, #0]
 800deea:	2800      	cmp	r0, #0
 800deec:	d01e      	beq.n	800df2c <__d2b+0x7c>
 800deee:	2220      	movs	r2, #32
 800def0:	001c      	movs	r4, r3
 800def2:	1a12      	subs	r2, r2, r0
 800def4:	4094      	lsls	r4, r2
 800def6:	0022      	movs	r2, r4
 800def8:	40c3      	lsrs	r3, r0
 800defa:	430a      	orrs	r2, r1
 800defc:	6172      	str	r2, [r6, #20]
 800defe:	9301      	str	r3, [sp, #4]
 800df00:	9c01      	ldr	r4, [sp, #4]
 800df02:	61b4      	str	r4, [r6, #24]
 800df04:	1e63      	subs	r3, r4, #1
 800df06:	419c      	sbcs	r4, r3
 800df08:	3401      	adds	r4, #1
 800df0a:	6134      	str	r4, [r6, #16]
 800df0c:	2d00      	cmp	r5, #0
 800df0e:	d017      	beq.n	800df40 <__d2b+0x90>
 800df10:	2435      	movs	r4, #53	; 0x35
 800df12:	4b14      	ldr	r3, [pc, #80]	; (800df64 <__d2b+0xb4>)
 800df14:	18ed      	adds	r5, r5, r3
 800df16:	182d      	adds	r5, r5, r0
 800df18:	603d      	str	r5, [r7, #0]
 800df1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df1c:	1a24      	subs	r4, r4, r0
 800df1e:	601c      	str	r4, [r3, #0]
 800df20:	0030      	movs	r0, r6
 800df22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800df24:	2280      	movs	r2, #128	; 0x80
 800df26:	0352      	lsls	r2, r2, #13
 800df28:	4313      	orrs	r3, r2
 800df2a:	e7d5      	b.n	800ded8 <__d2b+0x28>
 800df2c:	6171      	str	r1, [r6, #20]
 800df2e:	e7e7      	b.n	800df00 <__d2b+0x50>
 800df30:	a801      	add	r0, sp, #4
 800df32:	f7ff fce1 	bl	800d8f8 <__lo0bits>
 800df36:	9b01      	ldr	r3, [sp, #4]
 800df38:	2401      	movs	r4, #1
 800df3a:	6173      	str	r3, [r6, #20]
 800df3c:	3020      	adds	r0, #32
 800df3e:	e7e4      	b.n	800df0a <__d2b+0x5a>
 800df40:	4b09      	ldr	r3, [pc, #36]	; (800df68 <__d2b+0xb8>)
 800df42:	18c0      	adds	r0, r0, r3
 800df44:	4b09      	ldr	r3, [pc, #36]	; (800df6c <__d2b+0xbc>)
 800df46:	6038      	str	r0, [r7, #0]
 800df48:	18e3      	adds	r3, r4, r3
 800df4a:	009b      	lsls	r3, r3, #2
 800df4c:	18f3      	adds	r3, r6, r3
 800df4e:	6958      	ldr	r0, [r3, #20]
 800df50:	f7ff fcb8 	bl	800d8c4 <__hi0bits>
 800df54:	0164      	lsls	r4, r4, #5
 800df56:	e7e0      	b.n	800df1a <__d2b+0x6a>
 800df58:	0800ee66 	.word	0x0800ee66
 800df5c:	0800eed7 	.word	0x0800eed7
 800df60:	0000030f 	.word	0x0000030f
 800df64:	fffffbcd 	.word	0xfffffbcd
 800df68:	fffffbce 	.word	0xfffffbce
 800df6c:	3fffffff 	.word	0x3fffffff

0800df70 <__ratio>:
 800df70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df72:	b087      	sub	sp, #28
 800df74:	000f      	movs	r7, r1
 800df76:	a904      	add	r1, sp, #16
 800df78:	0006      	movs	r6, r0
 800df7a:	f7ff ff4d 	bl	800de18 <__b2d>
 800df7e:	9000      	str	r0, [sp, #0]
 800df80:	9101      	str	r1, [sp, #4]
 800df82:	9c00      	ldr	r4, [sp, #0]
 800df84:	9d01      	ldr	r5, [sp, #4]
 800df86:	0038      	movs	r0, r7
 800df88:	a905      	add	r1, sp, #20
 800df8a:	f7ff ff45 	bl	800de18 <__b2d>
 800df8e:	9002      	str	r0, [sp, #8]
 800df90:	9103      	str	r1, [sp, #12]
 800df92:	9a02      	ldr	r2, [sp, #8]
 800df94:	9b03      	ldr	r3, [sp, #12]
 800df96:	6930      	ldr	r0, [r6, #16]
 800df98:	6939      	ldr	r1, [r7, #16]
 800df9a:	9e04      	ldr	r6, [sp, #16]
 800df9c:	1a40      	subs	r0, r0, r1
 800df9e:	9905      	ldr	r1, [sp, #20]
 800dfa0:	0140      	lsls	r0, r0, #5
 800dfa2:	1a71      	subs	r1, r6, r1
 800dfa4:	1841      	adds	r1, r0, r1
 800dfa6:	0508      	lsls	r0, r1, #20
 800dfa8:	2900      	cmp	r1, #0
 800dfaa:	dd07      	ble.n	800dfbc <__ratio+0x4c>
 800dfac:	9901      	ldr	r1, [sp, #4]
 800dfae:	1845      	adds	r5, r0, r1
 800dfb0:	0020      	movs	r0, r4
 800dfb2:	0029      	movs	r1, r5
 800dfb4:	f7f3 fbb2 	bl	800171c <__aeabi_ddiv>
 800dfb8:	b007      	add	sp, #28
 800dfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfbc:	9903      	ldr	r1, [sp, #12]
 800dfbe:	1a0b      	subs	r3, r1, r0
 800dfc0:	e7f6      	b.n	800dfb0 <__ratio+0x40>

0800dfc2 <__copybits>:
 800dfc2:	b570      	push	{r4, r5, r6, lr}
 800dfc4:	0014      	movs	r4, r2
 800dfc6:	0005      	movs	r5, r0
 800dfc8:	3901      	subs	r1, #1
 800dfca:	6913      	ldr	r3, [r2, #16]
 800dfcc:	1149      	asrs	r1, r1, #5
 800dfce:	3101      	adds	r1, #1
 800dfd0:	0089      	lsls	r1, r1, #2
 800dfd2:	3414      	adds	r4, #20
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	1841      	adds	r1, r0, r1
 800dfd8:	18e3      	adds	r3, r4, r3
 800dfda:	42a3      	cmp	r3, r4
 800dfdc:	d80d      	bhi.n	800dffa <__copybits+0x38>
 800dfde:	0014      	movs	r4, r2
 800dfe0:	3411      	adds	r4, #17
 800dfe2:	2500      	movs	r5, #0
 800dfe4:	429c      	cmp	r4, r3
 800dfe6:	d803      	bhi.n	800dff0 <__copybits+0x2e>
 800dfe8:	1a9b      	subs	r3, r3, r2
 800dfea:	3b11      	subs	r3, #17
 800dfec:	089b      	lsrs	r3, r3, #2
 800dfee:	009d      	lsls	r5, r3, #2
 800dff0:	2300      	movs	r3, #0
 800dff2:	1940      	adds	r0, r0, r5
 800dff4:	4281      	cmp	r1, r0
 800dff6:	d803      	bhi.n	800e000 <__copybits+0x3e>
 800dff8:	bd70      	pop	{r4, r5, r6, pc}
 800dffa:	cc40      	ldmia	r4!, {r6}
 800dffc:	c540      	stmia	r5!, {r6}
 800dffe:	e7ec      	b.n	800dfda <__copybits+0x18>
 800e000:	c008      	stmia	r0!, {r3}
 800e002:	e7f7      	b.n	800dff4 <__copybits+0x32>

0800e004 <__any_on>:
 800e004:	0002      	movs	r2, r0
 800e006:	6900      	ldr	r0, [r0, #16]
 800e008:	b510      	push	{r4, lr}
 800e00a:	3214      	adds	r2, #20
 800e00c:	114b      	asrs	r3, r1, #5
 800e00e:	4298      	cmp	r0, r3
 800e010:	db13      	blt.n	800e03a <__any_on+0x36>
 800e012:	dd0c      	ble.n	800e02e <__any_on+0x2a>
 800e014:	241f      	movs	r4, #31
 800e016:	0008      	movs	r0, r1
 800e018:	4020      	ands	r0, r4
 800e01a:	4221      	tst	r1, r4
 800e01c:	d007      	beq.n	800e02e <__any_on+0x2a>
 800e01e:	0099      	lsls	r1, r3, #2
 800e020:	588c      	ldr	r4, [r1, r2]
 800e022:	0021      	movs	r1, r4
 800e024:	40c1      	lsrs	r1, r0
 800e026:	4081      	lsls	r1, r0
 800e028:	2001      	movs	r0, #1
 800e02a:	428c      	cmp	r4, r1
 800e02c:	d104      	bne.n	800e038 <__any_on+0x34>
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	18d3      	adds	r3, r2, r3
 800e032:	4293      	cmp	r3, r2
 800e034:	d803      	bhi.n	800e03e <__any_on+0x3a>
 800e036:	2000      	movs	r0, #0
 800e038:	bd10      	pop	{r4, pc}
 800e03a:	0003      	movs	r3, r0
 800e03c:	e7f7      	b.n	800e02e <__any_on+0x2a>
 800e03e:	3b04      	subs	r3, #4
 800e040:	6819      	ldr	r1, [r3, #0]
 800e042:	2900      	cmp	r1, #0
 800e044:	d0f5      	beq.n	800e032 <__any_on+0x2e>
 800e046:	2001      	movs	r0, #1
 800e048:	e7f6      	b.n	800e038 <__any_on+0x34>

0800e04a <__ascii_wctomb>:
 800e04a:	0003      	movs	r3, r0
 800e04c:	1e08      	subs	r0, r1, #0
 800e04e:	d005      	beq.n	800e05c <__ascii_wctomb+0x12>
 800e050:	2aff      	cmp	r2, #255	; 0xff
 800e052:	d904      	bls.n	800e05e <__ascii_wctomb+0x14>
 800e054:	228a      	movs	r2, #138	; 0x8a
 800e056:	2001      	movs	r0, #1
 800e058:	601a      	str	r2, [r3, #0]
 800e05a:	4240      	negs	r0, r0
 800e05c:	4770      	bx	lr
 800e05e:	2001      	movs	r0, #1
 800e060:	700a      	strb	r2, [r1, #0]
 800e062:	e7fb      	b.n	800e05c <__ascii_wctomb+0x12>

0800e064 <__ssputs_r>:
 800e064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e066:	b085      	sub	sp, #20
 800e068:	9301      	str	r3, [sp, #4]
 800e06a:	9203      	str	r2, [sp, #12]
 800e06c:	688e      	ldr	r6, [r1, #8]
 800e06e:	9a01      	ldr	r2, [sp, #4]
 800e070:	0007      	movs	r7, r0
 800e072:	000c      	movs	r4, r1
 800e074:	680b      	ldr	r3, [r1, #0]
 800e076:	4296      	cmp	r6, r2
 800e078:	d831      	bhi.n	800e0de <__ssputs_r+0x7a>
 800e07a:	898a      	ldrh	r2, [r1, #12]
 800e07c:	2190      	movs	r1, #144	; 0x90
 800e07e:	00c9      	lsls	r1, r1, #3
 800e080:	420a      	tst	r2, r1
 800e082:	d029      	beq.n	800e0d8 <__ssputs_r+0x74>
 800e084:	2003      	movs	r0, #3
 800e086:	6921      	ldr	r1, [r4, #16]
 800e088:	1a5b      	subs	r3, r3, r1
 800e08a:	9302      	str	r3, [sp, #8]
 800e08c:	6963      	ldr	r3, [r4, #20]
 800e08e:	4343      	muls	r3, r0
 800e090:	0fdd      	lsrs	r5, r3, #31
 800e092:	18ed      	adds	r5, r5, r3
 800e094:	9b01      	ldr	r3, [sp, #4]
 800e096:	9802      	ldr	r0, [sp, #8]
 800e098:	3301      	adds	r3, #1
 800e09a:	181b      	adds	r3, r3, r0
 800e09c:	106d      	asrs	r5, r5, #1
 800e09e:	42ab      	cmp	r3, r5
 800e0a0:	d900      	bls.n	800e0a4 <__ssputs_r+0x40>
 800e0a2:	001d      	movs	r5, r3
 800e0a4:	0552      	lsls	r2, r2, #21
 800e0a6:	d529      	bpl.n	800e0fc <__ssputs_r+0x98>
 800e0a8:	0029      	movs	r1, r5
 800e0aa:	0038      	movs	r0, r7
 800e0ac:	f7ff fa6e 	bl	800d58c <_malloc_r>
 800e0b0:	1e06      	subs	r6, r0, #0
 800e0b2:	d02d      	beq.n	800e110 <__ssputs_r+0xac>
 800e0b4:	9a02      	ldr	r2, [sp, #8]
 800e0b6:	6921      	ldr	r1, [r4, #16]
 800e0b8:	f7fd ffe4 	bl	800c084 <memcpy>
 800e0bc:	89a2      	ldrh	r2, [r4, #12]
 800e0be:	4b19      	ldr	r3, [pc, #100]	; (800e124 <__ssputs_r+0xc0>)
 800e0c0:	401a      	ands	r2, r3
 800e0c2:	2380      	movs	r3, #128	; 0x80
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	81a3      	strh	r3, [r4, #12]
 800e0c8:	9b02      	ldr	r3, [sp, #8]
 800e0ca:	6126      	str	r6, [r4, #16]
 800e0cc:	18f6      	adds	r6, r6, r3
 800e0ce:	6026      	str	r6, [r4, #0]
 800e0d0:	6165      	str	r5, [r4, #20]
 800e0d2:	9e01      	ldr	r6, [sp, #4]
 800e0d4:	1aed      	subs	r5, r5, r3
 800e0d6:	60a5      	str	r5, [r4, #8]
 800e0d8:	9b01      	ldr	r3, [sp, #4]
 800e0da:	429e      	cmp	r6, r3
 800e0dc:	d900      	bls.n	800e0e0 <__ssputs_r+0x7c>
 800e0de:	9e01      	ldr	r6, [sp, #4]
 800e0e0:	0032      	movs	r2, r6
 800e0e2:	9903      	ldr	r1, [sp, #12]
 800e0e4:	6820      	ldr	r0, [r4, #0]
 800e0e6:	f000 fb7f 	bl	800e7e8 <memmove>
 800e0ea:	2000      	movs	r0, #0
 800e0ec:	68a3      	ldr	r3, [r4, #8]
 800e0ee:	1b9b      	subs	r3, r3, r6
 800e0f0:	60a3      	str	r3, [r4, #8]
 800e0f2:	6823      	ldr	r3, [r4, #0]
 800e0f4:	199b      	adds	r3, r3, r6
 800e0f6:	6023      	str	r3, [r4, #0]
 800e0f8:	b005      	add	sp, #20
 800e0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0fc:	002a      	movs	r2, r5
 800e0fe:	0038      	movs	r0, r7
 800e100:	f000 fc07 	bl	800e912 <_realloc_r>
 800e104:	1e06      	subs	r6, r0, #0
 800e106:	d1df      	bne.n	800e0c8 <__ssputs_r+0x64>
 800e108:	0038      	movs	r0, r7
 800e10a:	6921      	ldr	r1, [r4, #16]
 800e10c:	f7fe fe6c 	bl	800cde8 <_free_r>
 800e110:	230c      	movs	r3, #12
 800e112:	2001      	movs	r0, #1
 800e114:	603b      	str	r3, [r7, #0]
 800e116:	89a2      	ldrh	r2, [r4, #12]
 800e118:	3334      	adds	r3, #52	; 0x34
 800e11a:	4313      	orrs	r3, r2
 800e11c:	81a3      	strh	r3, [r4, #12]
 800e11e:	4240      	negs	r0, r0
 800e120:	e7ea      	b.n	800e0f8 <__ssputs_r+0x94>
 800e122:	46c0      	nop			; (mov r8, r8)
 800e124:	fffffb7f 	.word	0xfffffb7f

0800e128 <_svfiprintf_r>:
 800e128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e12a:	b0a1      	sub	sp, #132	; 0x84
 800e12c:	9003      	str	r0, [sp, #12]
 800e12e:	001d      	movs	r5, r3
 800e130:	898b      	ldrh	r3, [r1, #12]
 800e132:	000f      	movs	r7, r1
 800e134:	0016      	movs	r6, r2
 800e136:	061b      	lsls	r3, r3, #24
 800e138:	d511      	bpl.n	800e15e <_svfiprintf_r+0x36>
 800e13a:	690b      	ldr	r3, [r1, #16]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d10e      	bne.n	800e15e <_svfiprintf_r+0x36>
 800e140:	2140      	movs	r1, #64	; 0x40
 800e142:	f7ff fa23 	bl	800d58c <_malloc_r>
 800e146:	6038      	str	r0, [r7, #0]
 800e148:	6138      	str	r0, [r7, #16]
 800e14a:	2800      	cmp	r0, #0
 800e14c:	d105      	bne.n	800e15a <_svfiprintf_r+0x32>
 800e14e:	230c      	movs	r3, #12
 800e150:	9a03      	ldr	r2, [sp, #12]
 800e152:	3801      	subs	r0, #1
 800e154:	6013      	str	r3, [r2, #0]
 800e156:	b021      	add	sp, #132	; 0x84
 800e158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e15a:	2340      	movs	r3, #64	; 0x40
 800e15c:	617b      	str	r3, [r7, #20]
 800e15e:	2300      	movs	r3, #0
 800e160:	ac08      	add	r4, sp, #32
 800e162:	6163      	str	r3, [r4, #20]
 800e164:	3320      	adds	r3, #32
 800e166:	7663      	strb	r3, [r4, #25]
 800e168:	3310      	adds	r3, #16
 800e16a:	76a3      	strb	r3, [r4, #26]
 800e16c:	9507      	str	r5, [sp, #28]
 800e16e:	0035      	movs	r5, r6
 800e170:	782b      	ldrb	r3, [r5, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d001      	beq.n	800e17a <_svfiprintf_r+0x52>
 800e176:	2b25      	cmp	r3, #37	; 0x25
 800e178:	d148      	bne.n	800e20c <_svfiprintf_r+0xe4>
 800e17a:	1bab      	subs	r3, r5, r6
 800e17c:	9305      	str	r3, [sp, #20]
 800e17e:	42b5      	cmp	r5, r6
 800e180:	d00b      	beq.n	800e19a <_svfiprintf_r+0x72>
 800e182:	0032      	movs	r2, r6
 800e184:	0039      	movs	r1, r7
 800e186:	9803      	ldr	r0, [sp, #12]
 800e188:	f7ff ff6c 	bl	800e064 <__ssputs_r>
 800e18c:	3001      	adds	r0, #1
 800e18e:	d100      	bne.n	800e192 <_svfiprintf_r+0x6a>
 800e190:	e0af      	b.n	800e2f2 <_svfiprintf_r+0x1ca>
 800e192:	6963      	ldr	r3, [r4, #20]
 800e194:	9a05      	ldr	r2, [sp, #20]
 800e196:	189b      	adds	r3, r3, r2
 800e198:	6163      	str	r3, [r4, #20]
 800e19a:	782b      	ldrb	r3, [r5, #0]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d100      	bne.n	800e1a2 <_svfiprintf_r+0x7a>
 800e1a0:	e0a7      	b.n	800e2f2 <_svfiprintf_r+0x1ca>
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	4252      	negs	r2, r2
 800e1a8:	6062      	str	r2, [r4, #4]
 800e1aa:	a904      	add	r1, sp, #16
 800e1ac:	3254      	adds	r2, #84	; 0x54
 800e1ae:	1852      	adds	r2, r2, r1
 800e1b0:	1c6e      	adds	r6, r5, #1
 800e1b2:	6023      	str	r3, [r4, #0]
 800e1b4:	60e3      	str	r3, [r4, #12]
 800e1b6:	60a3      	str	r3, [r4, #8]
 800e1b8:	7013      	strb	r3, [r2, #0]
 800e1ba:	65a3      	str	r3, [r4, #88]	; 0x58
 800e1bc:	4b55      	ldr	r3, [pc, #340]	; (800e314 <_svfiprintf_r+0x1ec>)
 800e1be:	2205      	movs	r2, #5
 800e1c0:	0018      	movs	r0, r3
 800e1c2:	7831      	ldrb	r1, [r6, #0]
 800e1c4:	9305      	str	r3, [sp, #20]
 800e1c6:	f7fd ff52 	bl	800c06e <memchr>
 800e1ca:	1c75      	adds	r5, r6, #1
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	d11f      	bne.n	800e210 <_svfiprintf_r+0xe8>
 800e1d0:	6822      	ldr	r2, [r4, #0]
 800e1d2:	06d3      	lsls	r3, r2, #27
 800e1d4:	d504      	bpl.n	800e1e0 <_svfiprintf_r+0xb8>
 800e1d6:	2353      	movs	r3, #83	; 0x53
 800e1d8:	a904      	add	r1, sp, #16
 800e1da:	185b      	adds	r3, r3, r1
 800e1dc:	2120      	movs	r1, #32
 800e1de:	7019      	strb	r1, [r3, #0]
 800e1e0:	0713      	lsls	r3, r2, #28
 800e1e2:	d504      	bpl.n	800e1ee <_svfiprintf_r+0xc6>
 800e1e4:	2353      	movs	r3, #83	; 0x53
 800e1e6:	a904      	add	r1, sp, #16
 800e1e8:	185b      	adds	r3, r3, r1
 800e1ea:	212b      	movs	r1, #43	; 0x2b
 800e1ec:	7019      	strb	r1, [r3, #0]
 800e1ee:	7833      	ldrb	r3, [r6, #0]
 800e1f0:	2b2a      	cmp	r3, #42	; 0x2a
 800e1f2:	d016      	beq.n	800e222 <_svfiprintf_r+0xfa>
 800e1f4:	0035      	movs	r5, r6
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	200a      	movs	r0, #10
 800e1fa:	68e3      	ldr	r3, [r4, #12]
 800e1fc:	782a      	ldrb	r2, [r5, #0]
 800e1fe:	1c6e      	adds	r6, r5, #1
 800e200:	3a30      	subs	r2, #48	; 0x30
 800e202:	2a09      	cmp	r2, #9
 800e204:	d94e      	bls.n	800e2a4 <_svfiprintf_r+0x17c>
 800e206:	2900      	cmp	r1, #0
 800e208:	d111      	bne.n	800e22e <_svfiprintf_r+0x106>
 800e20a:	e017      	b.n	800e23c <_svfiprintf_r+0x114>
 800e20c:	3501      	adds	r5, #1
 800e20e:	e7af      	b.n	800e170 <_svfiprintf_r+0x48>
 800e210:	9b05      	ldr	r3, [sp, #20]
 800e212:	6822      	ldr	r2, [r4, #0]
 800e214:	1ac0      	subs	r0, r0, r3
 800e216:	2301      	movs	r3, #1
 800e218:	4083      	lsls	r3, r0
 800e21a:	4313      	orrs	r3, r2
 800e21c:	002e      	movs	r6, r5
 800e21e:	6023      	str	r3, [r4, #0]
 800e220:	e7cc      	b.n	800e1bc <_svfiprintf_r+0x94>
 800e222:	9b07      	ldr	r3, [sp, #28]
 800e224:	1d19      	adds	r1, r3, #4
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	9107      	str	r1, [sp, #28]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	db01      	blt.n	800e232 <_svfiprintf_r+0x10a>
 800e22e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e230:	e004      	b.n	800e23c <_svfiprintf_r+0x114>
 800e232:	425b      	negs	r3, r3
 800e234:	60e3      	str	r3, [r4, #12]
 800e236:	2302      	movs	r3, #2
 800e238:	4313      	orrs	r3, r2
 800e23a:	6023      	str	r3, [r4, #0]
 800e23c:	782b      	ldrb	r3, [r5, #0]
 800e23e:	2b2e      	cmp	r3, #46	; 0x2e
 800e240:	d10a      	bne.n	800e258 <_svfiprintf_r+0x130>
 800e242:	786b      	ldrb	r3, [r5, #1]
 800e244:	2b2a      	cmp	r3, #42	; 0x2a
 800e246:	d135      	bne.n	800e2b4 <_svfiprintf_r+0x18c>
 800e248:	9b07      	ldr	r3, [sp, #28]
 800e24a:	3502      	adds	r5, #2
 800e24c:	1d1a      	adds	r2, r3, #4
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	9207      	str	r2, [sp, #28]
 800e252:	2b00      	cmp	r3, #0
 800e254:	db2b      	blt.n	800e2ae <_svfiprintf_r+0x186>
 800e256:	9309      	str	r3, [sp, #36]	; 0x24
 800e258:	4e2f      	ldr	r6, [pc, #188]	; (800e318 <_svfiprintf_r+0x1f0>)
 800e25a:	2203      	movs	r2, #3
 800e25c:	0030      	movs	r0, r6
 800e25e:	7829      	ldrb	r1, [r5, #0]
 800e260:	f7fd ff05 	bl	800c06e <memchr>
 800e264:	2800      	cmp	r0, #0
 800e266:	d006      	beq.n	800e276 <_svfiprintf_r+0x14e>
 800e268:	2340      	movs	r3, #64	; 0x40
 800e26a:	1b80      	subs	r0, r0, r6
 800e26c:	4083      	lsls	r3, r0
 800e26e:	6822      	ldr	r2, [r4, #0]
 800e270:	3501      	adds	r5, #1
 800e272:	4313      	orrs	r3, r2
 800e274:	6023      	str	r3, [r4, #0]
 800e276:	7829      	ldrb	r1, [r5, #0]
 800e278:	2206      	movs	r2, #6
 800e27a:	4828      	ldr	r0, [pc, #160]	; (800e31c <_svfiprintf_r+0x1f4>)
 800e27c:	1c6e      	adds	r6, r5, #1
 800e27e:	7621      	strb	r1, [r4, #24]
 800e280:	f7fd fef5 	bl	800c06e <memchr>
 800e284:	2800      	cmp	r0, #0
 800e286:	d03c      	beq.n	800e302 <_svfiprintf_r+0x1da>
 800e288:	4b25      	ldr	r3, [pc, #148]	; (800e320 <_svfiprintf_r+0x1f8>)
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d125      	bne.n	800e2da <_svfiprintf_r+0x1b2>
 800e28e:	2207      	movs	r2, #7
 800e290:	9b07      	ldr	r3, [sp, #28]
 800e292:	3307      	adds	r3, #7
 800e294:	4393      	bics	r3, r2
 800e296:	3308      	adds	r3, #8
 800e298:	9307      	str	r3, [sp, #28]
 800e29a:	6963      	ldr	r3, [r4, #20]
 800e29c:	9a04      	ldr	r2, [sp, #16]
 800e29e:	189b      	adds	r3, r3, r2
 800e2a0:	6163      	str	r3, [r4, #20]
 800e2a2:	e764      	b.n	800e16e <_svfiprintf_r+0x46>
 800e2a4:	4343      	muls	r3, r0
 800e2a6:	0035      	movs	r5, r6
 800e2a8:	2101      	movs	r1, #1
 800e2aa:	189b      	adds	r3, r3, r2
 800e2ac:	e7a6      	b.n	800e1fc <_svfiprintf_r+0xd4>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	425b      	negs	r3, r3
 800e2b2:	e7d0      	b.n	800e256 <_svfiprintf_r+0x12e>
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	200a      	movs	r0, #10
 800e2b8:	001a      	movs	r2, r3
 800e2ba:	3501      	adds	r5, #1
 800e2bc:	6063      	str	r3, [r4, #4]
 800e2be:	7829      	ldrb	r1, [r5, #0]
 800e2c0:	1c6e      	adds	r6, r5, #1
 800e2c2:	3930      	subs	r1, #48	; 0x30
 800e2c4:	2909      	cmp	r1, #9
 800e2c6:	d903      	bls.n	800e2d0 <_svfiprintf_r+0x1a8>
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d0c5      	beq.n	800e258 <_svfiprintf_r+0x130>
 800e2cc:	9209      	str	r2, [sp, #36]	; 0x24
 800e2ce:	e7c3      	b.n	800e258 <_svfiprintf_r+0x130>
 800e2d0:	4342      	muls	r2, r0
 800e2d2:	0035      	movs	r5, r6
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	1852      	adds	r2, r2, r1
 800e2d8:	e7f1      	b.n	800e2be <_svfiprintf_r+0x196>
 800e2da:	aa07      	add	r2, sp, #28
 800e2dc:	9200      	str	r2, [sp, #0]
 800e2de:	0021      	movs	r1, r4
 800e2e0:	003a      	movs	r2, r7
 800e2e2:	4b10      	ldr	r3, [pc, #64]	; (800e324 <_svfiprintf_r+0x1fc>)
 800e2e4:	9803      	ldr	r0, [sp, #12]
 800e2e6:	f7fc fe05 	bl	800aef4 <_printf_float>
 800e2ea:	9004      	str	r0, [sp, #16]
 800e2ec:	9b04      	ldr	r3, [sp, #16]
 800e2ee:	3301      	adds	r3, #1
 800e2f0:	d1d3      	bne.n	800e29a <_svfiprintf_r+0x172>
 800e2f2:	89bb      	ldrh	r3, [r7, #12]
 800e2f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e2f6:	065b      	lsls	r3, r3, #25
 800e2f8:	d400      	bmi.n	800e2fc <_svfiprintf_r+0x1d4>
 800e2fa:	e72c      	b.n	800e156 <_svfiprintf_r+0x2e>
 800e2fc:	2001      	movs	r0, #1
 800e2fe:	4240      	negs	r0, r0
 800e300:	e729      	b.n	800e156 <_svfiprintf_r+0x2e>
 800e302:	aa07      	add	r2, sp, #28
 800e304:	9200      	str	r2, [sp, #0]
 800e306:	0021      	movs	r1, r4
 800e308:	003a      	movs	r2, r7
 800e30a:	4b06      	ldr	r3, [pc, #24]	; (800e324 <_svfiprintf_r+0x1fc>)
 800e30c:	9803      	ldr	r0, [sp, #12]
 800e30e:	f7fd f8b7 	bl	800b480 <_printf_i>
 800e312:	e7ea      	b.n	800e2ea <_svfiprintf_r+0x1c2>
 800e314:	0800f02c 	.word	0x0800f02c
 800e318:	0800f032 	.word	0x0800f032
 800e31c:	0800f036 	.word	0x0800f036
 800e320:	0800aef5 	.word	0x0800aef5
 800e324:	0800e065 	.word	0x0800e065

0800e328 <__sfputc_r>:
 800e328:	6893      	ldr	r3, [r2, #8]
 800e32a:	b510      	push	{r4, lr}
 800e32c:	3b01      	subs	r3, #1
 800e32e:	6093      	str	r3, [r2, #8]
 800e330:	2b00      	cmp	r3, #0
 800e332:	da04      	bge.n	800e33e <__sfputc_r+0x16>
 800e334:	6994      	ldr	r4, [r2, #24]
 800e336:	42a3      	cmp	r3, r4
 800e338:	db07      	blt.n	800e34a <__sfputc_r+0x22>
 800e33a:	290a      	cmp	r1, #10
 800e33c:	d005      	beq.n	800e34a <__sfputc_r+0x22>
 800e33e:	6813      	ldr	r3, [r2, #0]
 800e340:	1c58      	adds	r0, r3, #1
 800e342:	6010      	str	r0, [r2, #0]
 800e344:	7019      	strb	r1, [r3, #0]
 800e346:	0008      	movs	r0, r1
 800e348:	bd10      	pop	{r4, pc}
 800e34a:	f7fd fd51 	bl	800bdf0 <__swbuf_r>
 800e34e:	0001      	movs	r1, r0
 800e350:	e7f9      	b.n	800e346 <__sfputc_r+0x1e>

0800e352 <__sfputs_r>:
 800e352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e354:	0006      	movs	r6, r0
 800e356:	000f      	movs	r7, r1
 800e358:	0014      	movs	r4, r2
 800e35a:	18d5      	adds	r5, r2, r3
 800e35c:	42ac      	cmp	r4, r5
 800e35e:	d101      	bne.n	800e364 <__sfputs_r+0x12>
 800e360:	2000      	movs	r0, #0
 800e362:	e007      	b.n	800e374 <__sfputs_r+0x22>
 800e364:	7821      	ldrb	r1, [r4, #0]
 800e366:	003a      	movs	r2, r7
 800e368:	0030      	movs	r0, r6
 800e36a:	f7ff ffdd 	bl	800e328 <__sfputc_r>
 800e36e:	3401      	adds	r4, #1
 800e370:	1c43      	adds	r3, r0, #1
 800e372:	d1f3      	bne.n	800e35c <__sfputs_r+0xa>
 800e374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e378 <_vfiprintf_r>:
 800e378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e37a:	b0a1      	sub	sp, #132	; 0x84
 800e37c:	000f      	movs	r7, r1
 800e37e:	0015      	movs	r5, r2
 800e380:	001e      	movs	r6, r3
 800e382:	9003      	str	r0, [sp, #12]
 800e384:	2800      	cmp	r0, #0
 800e386:	d004      	beq.n	800e392 <_vfiprintf_r+0x1a>
 800e388:	6a03      	ldr	r3, [r0, #32]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d101      	bne.n	800e392 <_vfiprintf_r+0x1a>
 800e38e:	f7fd fc1f 	bl	800bbd0 <__sinit>
 800e392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e394:	07db      	lsls	r3, r3, #31
 800e396:	d405      	bmi.n	800e3a4 <_vfiprintf_r+0x2c>
 800e398:	89bb      	ldrh	r3, [r7, #12]
 800e39a:	059b      	lsls	r3, r3, #22
 800e39c:	d402      	bmi.n	800e3a4 <_vfiprintf_r+0x2c>
 800e39e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e3a0:	f7fd fe63 	bl	800c06a <__retarget_lock_acquire_recursive>
 800e3a4:	89bb      	ldrh	r3, [r7, #12]
 800e3a6:	071b      	lsls	r3, r3, #28
 800e3a8:	d502      	bpl.n	800e3b0 <_vfiprintf_r+0x38>
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d113      	bne.n	800e3d8 <_vfiprintf_r+0x60>
 800e3b0:	0039      	movs	r1, r7
 800e3b2:	9803      	ldr	r0, [sp, #12]
 800e3b4:	f7fd fd5e 	bl	800be74 <__swsetup_r>
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	d00d      	beq.n	800e3d8 <_vfiprintf_r+0x60>
 800e3bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3be:	07db      	lsls	r3, r3, #31
 800e3c0:	d503      	bpl.n	800e3ca <_vfiprintf_r+0x52>
 800e3c2:	2001      	movs	r0, #1
 800e3c4:	4240      	negs	r0, r0
 800e3c6:	b021      	add	sp, #132	; 0x84
 800e3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ca:	89bb      	ldrh	r3, [r7, #12]
 800e3cc:	059b      	lsls	r3, r3, #22
 800e3ce:	d4f8      	bmi.n	800e3c2 <_vfiprintf_r+0x4a>
 800e3d0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e3d2:	f7fd fe4b 	bl	800c06c <__retarget_lock_release_recursive>
 800e3d6:	e7f4      	b.n	800e3c2 <_vfiprintf_r+0x4a>
 800e3d8:	2300      	movs	r3, #0
 800e3da:	ac08      	add	r4, sp, #32
 800e3dc:	6163      	str	r3, [r4, #20]
 800e3de:	3320      	adds	r3, #32
 800e3e0:	7663      	strb	r3, [r4, #25]
 800e3e2:	3310      	adds	r3, #16
 800e3e4:	76a3      	strb	r3, [r4, #26]
 800e3e6:	9607      	str	r6, [sp, #28]
 800e3e8:	002e      	movs	r6, r5
 800e3ea:	7833      	ldrb	r3, [r6, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d001      	beq.n	800e3f4 <_vfiprintf_r+0x7c>
 800e3f0:	2b25      	cmp	r3, #37	; 0x25
 800e3f2:	d148      	bne.n	800e486 <_vfiprintf_r+0x10e>
 800e3f4:	1b73      	subs	r3, r6, r5
 800e3f6:	9305      	str	r3, [sp, #20]
 800e3f8:	42ae      	cmp	r6, r5
 800e3fa:	d00b      	beq.n	800e414 <_vfiprintf_r+0x9c>
 800e3fc:	002a      	movs	r2, r5
 800e3fe:	0039      	movs	r1, r7
 800e400:	9803      	ldr	r0, [sp, #12]
 800e402:	f7ff ffa6 	bl	800e352 <__sfputs_r>
 800e406:	3001      	adds	r0, #1
 800e408:	d100      	bne.n	800e40c <_vfiprintf_r+0x94>
 800e40a:	e0af      	b.n	800e56c <_vfiprintf_r+0x1f4>
 800e40c:	6963      	ldr	r3, [r4, #20]
 800e40e:	9a05      	ldr	r2, [sp, #20]
 800e410:	189b      	adds	r3, r3, r2
 800e412:	6163      	str	r3, [r4, #20]
 800e414:	7833      	ldrb	r3, [r6, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d100      	bne.n	800e41c <_vfiprintf_r+0xa4>
 800e41a:	e0a7      	b.n	800e56c <_vfiprintf_r+0x1f4>
 800e41c:	2201      	movs	r2, #1
 800e41e:	2300      	movs	r3, #0
 800e420:	4252      	negs	r2, r2
 800e422:	6062      	str	r2, [r4, #4]
 800e424:	a904      	add	r1, sp, #16
 800e426:	3254      	adds	r2, #84	; 0x54
 800e428:	1852      	adds	r2, r2, r1
 800e42a:	1c75      	adds	r5, r6, #1
 800e42c:	6023      	str	r3, [r4, #0]
 800e42e:	60e3      	str	r3, [r4, #12]
 800e430:	60a3      	str	r3, [r4, #8]
 800e432:	7013      	strb	r3, [r2, #0]
 800e434:	65a3      	str	r3, [r4, #88]	; 0x58
 800e436:	4b59      	ldr	r3, [pc, #356]	; (800e59c <_vfiprintf_r+0x224>)
 800e438:	2205      	movs	r2, #5
 800e43a:	0018      	movs	r0, r3
 800e43c:	7829      	ldrb	r1, [r5, #0]
 800e43e:	9305      	str	r3, [sp, #20]
 800e440:	f7fd fe15 	bl	800c06e <memchr>
 800e444:	1c6e      	adds	r6, r5, #1
 800e446:	2800      	cmp	r0, #0
 800e448:	d11f      	bne.n	800e48a <_vfiprintf_r+0x112>
 800e44a:	6822      	ldr	r2, [r4, #0]
 800e44c:	06d3      	lsls	r3, r2, #27
 800e44e:	d504      	bpl.n	800e45a <_vfiprintf_r+0xe2>
 800e450:	2353      	movs	r3, #83	; 0x53
 800e452:	a904      	add	r1, sp, #16
 800e454:	185b      	adds	r3, r3, r1
 800e456:	2120      	movs	r1, #32
 800e458:	7019      	strb	r1, [r3, #0]
 800e45a:	0713      	lsls	r3, r2, #28
 800e45c:	d504      	bpl.n	800e468 <_vfiprintf_r+0xf0>
 800e45e:	2353      	movs	r3, #83	; 0x53
 800e460:	a904      	add	r1, sp, #16
 800e462:	185b      	adds	r3, r3, r1
 800e464:	212b      	movs	r1, #43	; 0x2b
 800e466:	7019      	strb	r1, [r3, #0]
 800e468:	782b      	ldrb	r3, [r5, #0]
 800e46a:	2b2a      	cmp	r3, #42	; 0x2a
 800e46c:	d016      	beq.n	800e49c <_vfiprintf_r+0x124>
 800e46e:	002e      	movs	r6, r5
 800e470:	2100      	movs	r1, #0
 800e472:	200a      	movs	r0, #10
 800e474:	68e3      	ldr	r3, [r4, #12]
 800e476:	7832      	ldrb	r2, [r6, #0]
 800e478:	1c75      	adds	r5, r6, #1
 800e47a:	3a30      	subs	r2, #48	; 0x30
 800e47c:	2a09      	cmp	r2, #9
 800e47e:	d94e      	bls.n	800e51e <_vfiprintf_r+0x1a6>
 800e480:	2900      	cmp	r1, #0
 800e482:	d111      	bne.n	800e4a8 <_vfiprintf_r+0x130>
 800e484:	e017      	b.n	800e4b6 <_vfiprintf_r+0x13e>
 800e486:	3601      	adds	r6, #1
 800e488:	e7af      	b.n	800e3ea <_vfiprintf_r+0x72>
 800e48a:	9b05      	ldr	r3, [sp, #20]
 800e48c:	6822      	ldr	r2, [r4, #0]
 800e48e:	1ac0      	subs	r0, r0, r3
 800e490:	2301      	movs	r3, #1
 800e492:	4083      	lsls	r3, r0
 800e494:	4313      	orrs	r3, r2
 800e496:	0035      	movs	r5, r6
 800e498:	6023      	str	r3, [r4, #0]
 800e49a:	e7cc      	b.n	800e436 <_vfiprintf_r+0xbe>
 800e49c:	9b07      	ldr	r3, [sp, #28]
 800e49e:	1d19      	adds	r1, r3, #4
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	9107      	str	r1, [sp, #28]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	db01      	blt.n	800e4ac <_vfiprintf_r+0x134>
 800e4a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4aa:	e004      	b.n	800e4b6 <_vfiprintf_r+0x13e>
 800e4ac:	425b      	negs	r3, r3
 800e4ae:	60e3      	str	r3, [r4, #12]
 800e4b0:	2302      	movs	r3, #2
 800e4b2:	4313      	orrs	r3, r2
 800e4b4:	6023      	str	r3, [r4, #0]
 800e4b6:	7833      	ldrb	r3, [r6, #0]
 800e4b8:	2b2e      	cmp	r3, #46	; 0x2e
 800e4ba:	d10a      	bne.n	800e4d2 <_vfiprintf_r+0x15a>
 800e4bc:	7873      	ldrb	r3, [r6, #1]
 800e4be:	2b2a      	cmp	r3, #42	; 0x2a
 800e4c0:	d135      	bne.n	800e52e <_vfiprintf_r+0x1b6>
 800e4c2:	9b07      	ldr	r3, [sp, #28]
 800e4c4:	3602      	adds	r6, #2
 800e4c6:	1d1a      	adds	r2, r3, #4
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	9207      	str	r2, [sp, #28]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	db2b      	blt.n	800e528 <_vfiprintf_r+0x1b0>
 800e4d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e4d2:	4d33      	ldr	r5, [pc, #204]	; (800e5a0 <_vfiprintf_r+0x228>)
 800e4d4:	2203      	movs	r2, #3
 800e4d6:	0028      	movs	r0, r5
 800e4d8:	7831      	ldrb	r1, [r6, #0]
 800e4da:	f7fd fdc8 	bl	800c06e <memchr>
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	d006      	beq.n	800e4f0 <_vfiprintf_r+0x178>
 800e4e2:	2340      	movs	r3, #64	; 0x40
 800e4e4:	1b40      	subs	r0, r0, r5
 800e4e6:	4083      	lsls	r3, r0
 800e4e8:	6822      	ldr	r2, [r4, #0]
 800e4ea:	3601      	adds	r6, #1
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	6023      	str	r3, [r4, #0]
 800e4f0:	7831      	ldrb	r1, [r6, #0]
 800e4f2:	2206      	movs	r2, #6
 800e4f4:	482b      	ldr	r0, [pc, #172]	; (800e5a4 <_vfiprintf_r+0x22c>)
 800e4f6:	1c75      	adds	r5, r6, #1
 800e4f8:	7621      	strb	r1, [r4, #24]
 800e4fa:	f7fd fdb8 	bl	800c06e <memchr>
 800e4fe:	2800      	cmp	r0, #0
 800e500:	d043      	beq.n	800e58a <_vfiprintf_r+0x212>
 800e502:	4b29      	ldr	r3, [pc, #164]	; (800e5a8 <_vfiprintf_r+0x230>)
 800e504:	2b00      	cmp	r3, #0
 800e506:	d125      	bne.n	800e554 <_vfiprintf_r+0x1dc>
 800e508:	2207      	movs	r2, #7
 800e50a:	9b07      	ldr	r3, [sp, #28]
 800e50c:	3307      	adds	r3, #7
 800e50e:	4393      	bics	r3, r2
 800e510:	3308      	adds	r3, #8
 800e512:	9307      	str	r3, [sp, #28]
 800e514:	6963      	ldr	r3, [r4, #20]
 800e516:	9a04      	ldr	r2, [sp, #16]
 800e518:	189b      	adds	r3, r3, r2
 800e51a:	6163      	str	r3, [r4, #20]
 800e51c:	e764      	b.n	800e3e8 <_vfiprintf_r+0x70>
 800e51e:	4343      	muls	r3, r0
 800e520:	002e      	movs	r6, r5
 800e522:	2101      	movs	r1, #1
 800e524:	189b      	adds	r3, r3, r2
 800e526:	e7a6      	b.n	800e476 <_vfiprintf_r+0xfe>
 800e528:	2301      	movs	r3, #1
 800e52a:	425b      	negs	r3, r3
 800e52c:	e7d0      	b.n	800e4d0 <_vfiprintf_r+0x158>
 800e52e:	2300      	movs	r3, #0
 800e530:	200a      	movs	r0, #10
 800e532:	001a      	movs	r2, r3
 800e534:	3601      	adds	r6, #1
 800e536:	6063      	str	r3, [r4, #4]
 800e538:	7831      	ldrb	r1, [r6, #0]
 800e53a:	1c75      	adds	r5, r6, #1
 800e53c:	3930      	subs	r1, #48	; 0x30
 800e53e:	2909      	cmp	r1, #9
 800e540:	d903      	bls.n	800e54a <_vfiprintf_r+0x1d2>
 800e542:	2b00      	cmp	r3, #0
 800e544:	d0c5      	beq.n	800e4d2 <_vfiprintf_r+0x15a>
 800e546:	9209      	str	r2, [sp, #36]	; 0x24
 800e548:	e7c3      	b.n	800e4d2 <_vfiprintf_r+0x15a>
 800e54a:	4342      	muls	r2, r0
 800e54c:	002e      	movs	r6, r5
 800e54e:	2301      	movs	r3, #1
 800e550:	1852      	adds	r2, r2, r1
 800e552:	e7f1      	b.n	800e538 <_vfiprintf_r+0x1c0>
 800e554:	aa07      	add	r2, sp, #28
 800e556:	9200      	str	r2, [sp, #0]
 800e558:	0021      	movs	r1, r4
 800e55a:	003a      	movs	r2, r7
 800e55c:	4b13      	ldr	r3, [pc, #76]	; (800e5ac <_vfiprintf_r+0x234>)
 800e55e:	9803      	ldr	r0, [sp, #12]
 800e560:	f7fc fcc8 	bl	800aef4 <_printf_float>
 800e564:	9004      	str	r0, [sp, #16]
 800e566:	9b04      	ldr	r3, [sp, #16]
 800e568:	3301      	adds	r3, #1
 800e56a:	d1d3      	bne.n	800e514 <_vfiprintf_r+0x19c>
 800e56c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e56e:	07db      	lsls	r3, r3, #31
 800e570:	d405      	bmi.n	800e57e <_vfiprintf_r+0x206>
 800e572:	89bb      	ldrh	r3, [r7, #12]
 800e574:	059b      	lsls	r3, r3, #22
 800e576:	d402      	bmi.n	800e57e <_vfiprintf_r+0x206>
 800e578:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e57a:	f7fd fd77 	bl	800c06c <__retarget_lock_release_recursive>
 800e57e:	89bb      	ldrh	r3, [r7, #12]
 800e580:	065b      	lsls	r3, r3, #25
 800e582:	d500      	bpl.n	800e586 <_vfiprintf_r+0x20e>
 800e584:	e71d      	b.n	800e3c2 <_vfiprintf_r+0x4a>
 800e586:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e588:	e71d      	b.n	800e3c6 <_vfiprintf_r+0x4e>
 800e58a:	aa07      	add	r2, sp, #28
 800e58c:	9200      	str	r2, [sp, #0]
 800e58e:	0021      	movs	r1, r4
 800e590:	003a      	movs	r2, r7
 800e592:	4b06      	ldr	r3, [pc, #24]	; (800e5ac <_vfiprintf_r+0x234>)
 800e594:	9803      	ldr	r0, [sp, #12]
 800e596:	f7fc ff73 	bl	800b480 <_printf_i>
 800e59a:	e7e3      	b.n	800e564 <_vfiprintf_r+0x1ec>
 800e59c:	0800f02c 	.word	0x0800f02c
 800e5a0:	0800f032 	.word	0x0800f032
 800e5a4:	0800f036 	.word	0x0800f036
 800e5a8:	0800aef5 	.word	0x0800aef5
 800e5ac:	0800e353 	.word	0x0800e353

0800e5b0 <__sflush_r>:
 800e5b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5b2:	898b      	ldrh	r3, [r1, #12]
 800e5b4:	0005      	movs	r5, r0
 800e5b6:	000c      	movs	r4, r1
 800e5b8:	071a      	lsls	r2, r3, #28
 800e5ba:	d45c      	bmi.n	800e676 <__sflush_r+0xc6>
 800e5bc:	684a      	ldr	r2, [r1, #4]
 800e5be:	2a00      	cmp	r2, #0
 800e5c0:	dc04      	bgt.n	800e5cc <__sflush_r+0x1c>
 800e5c2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800e5c4:	2a00      	cmp	r2, #0
 800e5c6:	dc01      	bgt.n	800e5cc <__sflush_r+0x1c>
 800e5c8:	2000      	movs	r0, #0
 800e5ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e5cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e5ce:	2f00      	cmp	r7, #0
 800e5d0:	d0fa      	beq.n	800e5c8 <__sflush_r+0x18>
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	2080      	movs	r0, #128	; 0x80
 800e5d6:	682e      	ldr	r6, [r5, #0]
 800e5d8:	602a      	str	r2, [r5, #0]
 800e5da:	001a      	movs	r2, r3
 800e5dc:	0140      	lsls	r0, r0, #5
 800e5de:	6a21      	ldr	r1, [r4, #32]
 800e5e0:	4002      	ands	r2, r0
 800e5e2:	4203      	tst	r3, r0
 800e5e4:	d034      	beq.n	800e650 <__sflush_r+0xa0>
 800e5e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e5e8:	89a3      	ldrh	r3, [r4, #12]
 800e5ea:	075b      	lsls	r3, r3, #29
 800e5ec:	d506      	bpl.n	800e5fc <__sflush_r+0x4c>
 800e5ee:	6863      	ldr	r3, [r4, #4]
 800e5f0:	1ac0      	subs	r0, r0, r3
 800e5f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d001      	beq.n	800e5fc <__sflush_r+0x4c>
 800e5f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e5fa:	1ac0      	subs	r0, r0, r3
 800e5fc:	0002      	movs	r2, r0
 800e5fe:	2300      	movs	r3, #0
 800e600:	0028      	movs	r0, r5
 800e602:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e604:	6a21      	ldr	r1, [r4, #32]
 800e606:	47b8      	blx	r7
 800e608:	89a2      	ldrh	r2, [r4, #12]
 800e60a:	1c43      	adds	r3, r0, #1
 800e60c:	d106      	bne.n	800e61c <__sflush_r+0x6c>
 800e60e:	6829      	ldr	r1, [r5, #0]
 800e610:	291d      	cmp	r1, #29
 800e612:	d82c      	bhi.n	800e66e <__sflush_r+0xbe>
 800e614:	4b2a      	ldr	r3, [pc, #168]	; (800e6c0 <__sflush_r+0x110>)
 800e616:	410b      	asrs	r3, r1
 800e618:	07db      	lsls	r3, r3, #31
 800e61a:	d428      	bmi.n	800e66e <__sflush_r+0xbe>
 800e61c:	2300      	movs	r3, #0
 800e61e:	6063      	str	r3, [r4, #4]
 800e620:	6923      	ldr	r3, [r4, #16]
 800e622:	6023      	str	r3, [r4, #0]
 800e624:	04d2      	lsls	r2, r2, #19
 800e626:	d505      	bpl.n	800e634 <__sflush_r+0x84>
 800e628:	1c43      	adds	r3, r0, #1
 800e62a:	d102      	bne.n	800e632 <__sflush_r+0x82>
 800e62c:	682b      	ldr	r3, [r5, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d100      	bne.n	800e634 <__sflush_r+0x84>
 800e632:	6560      	str	r0, [r4, #84]	; 0x54
 800e634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e636:	602e      	str	r6, [r5, #0]
 800e638:	2900      	cmp	r1, #0
 800e63a:	d0c5      	beq.n	800e5c8 <__sflush_r+0x18>
 800e63c:	0023      	movs	r3, r4
 800e63e:	3344      	adds	r3, #68	; 0x44
 800e640:	4299      	cmp	r1, r3
 800e642:	d002      	beq.n	800e64a <__sflush_r+0x9a>
 800e644:	0028      	movs	r0, r5
 800e646:	f7fe fbcf 	bl	800cde8 <_free_r>
 800e64a:	2000      	movs	r0, #0
 800e64c:	6360      	str	r0, [r4, #52]	; 0x34
 800e64e:	e7bc      	b.n	800e5ca <__sflush_r+0x1a>
 800e650:	2301      	movs	r3, #1
 800e652:	0028      	movs	r0, r5
 800e654:	47b8      	blx	r7
 800e656:	1c43      	adds	r3, r0, #1
 800e658:	d1c6      	bne.n	800e5e8 <__sflush_r+0x38>
 800e65a:	682b      	ldr	r3, [r5, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d0c3      	beq.n	800e5e8 <__sflush_r+0x38>
 800e660:	2b1d      	cmp	r3, #29
 800e662:	d001      	beq.n	800e668 <__sflush_r+0xb8>
 800e664:	2b16      	cmp	r3, #22
 800e666:	d101      	bne.n	800e66c <__sflush_r+0xbc>
 800e668:	602e      	str	r6, [r5, #0]
 800e66a:	e7ad      	b.n	800e5c8 <__sflush_r+0x18>
 800e66c:	89a2      	ldrh	r2, [r4, #12]
 800e66e:	2340      	movs	r3, #64	; 0x40
 800e670:	4313      	orrs	r3, r2
 800e672:	81a3      	strh	r3, [r4, #12]
 800e674:	e7a9      	b.n	800e5ca <__sflush_r+0x1a>
 800e676:	690e      	ldr	r6, [r1, #16]
 800e678:	2e00      	cmp	r6, #0
 800e67a:	d0a5      	beq.n	800e5c8 <__sflush_r+0x18>
 800e67c:	680f      	ldr	r7, [r1, #0]
 800e67e:	600e      	str	r6, [r1, #0]
 800e680:	1bba      	subs	r2, r7, r6
 800e682:	9201      	str	r2, [sp, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	079b      	lsls	r3, r3, #30
 800e688:	d100      	bne.n	800e68c <__sflush_r+0xdc>
 800e68a:	694a      	ldr	r2, [r1, #20]
 800e68c:	60a2      	str	r2, [r4, #8]
 800e68e:	9b01      	ldr	r3, [sp, #4]
 800e690:	2b00      	cmp	r3, #0
 800e692:	dd99      	ble.n	800e5c8 <__sflush_r+0x18>
 800e694:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e696:	0032      	movs	r2, r6
 800e698:	001f      	movs	r7, r3
 800e69a:	0028      	movs	r0, r5
 800e69c:	9b01      	ldr	r3, [sp, #4]
 800e69e:	6a21      	ldr	r1, [r4, #32]
 800e6a0:	47b8      	blx	r7
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	dc06      	bgt.n	800e6b4 <__sflush_r+0x104>
 800e6a6:	2340      	movs	r3, #64	; 0x40
 800e6a8:	2001      	movs	r0, #1
 800e6aa:	89a2      	ldrh	r2, [r4, #12]
 800e6ac:	4240      	negs	r0, r0
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	81a3      	strh	r3, [r4, #12]
 800e6b2:	e78a      	b.n	800e5ca <__sflush_r+0x1a>
 800e6b4:	9b01      	ldr	r3, [sp, #4]
 800e6b6:	1836      	adds	r6, r6, r0
 800e6b8:	1a1b      	subs	r3, r3, r0
 800e6ba:	9301      	str	r3, [sp, #4]
 800e6bc:	e7e7      	b.n	800e68e <__sflush_r+0xde>
 800e6be:	46c0      	nop			; (mov r8, r8)
 800e6c0:	dfbffffe 	.word	0xdfbffffe

0800e6c4 <_fflush_r>:
 800e6c4:	690b      	ldr	r3, [r1, #16]
 800e6c6:	b570      	push	{r4, r5, r6, lr}
 800e6c8:	0005      	movs	r5, r0
 800e6ca:	000c      	movs	r4, r1
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d102      	bne.n	800e6d6 <_fflush_r+0x12>
 800e6d0:	2500      	movs	r5, #0
 800e6d2:	0028      	movs	r0, r5
 800e6d4:	bd70      	pop	{r4, r5, r6, pc}
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	d004      	beq.n	800e6e4 <_fflush_r+0x20>
 800e6da:	6a03      	ldr	r3, [r0, #32]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d101      	bne.n	800e6e4 <_fflush_r+0x20>
 800e6e0:	f7fd fa76 	bl	800bbd0 <__sinit>
 800e6e4:	220c      	movs	r2, #12
 800e6e6:	5ea3      	ldrsh	r3, [r4, r2]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d0f1      	beq.n	800e6d0 <_fflush_r+0xc>
 800e6ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e6ee:	07d2      	lsls	r2, r2, #31
 800e6f0:	d404      	bmi.n	800e6fc <_fflush_r+0x38>
 800e6f2:	059b      	lsls	r3, r3, #22
 800e6f4:	d402      	bmi.n	800e6fc <_fflush_r+0x38>
 800e6f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6f8:	f7fd fcb7 	bl	800c06a <__retarget_lock_acquire_recursive>
 800e6fc:	0028      	movs	r0, r5
 800e6fe:	0021      	movs	r1, r4
 800e700:	f7ff ff56 	bl	800e5b0 <__sflush_r>
 800e704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e706:	0005      	movs	r5, r0
 800e708:	07db      	lsls	r3, r3, #31
 800e70a:	d4e2      	bmi.n	800e6d2 <_fflush_r+0xe>
 800e70c:	89a3      	ldrh	r3, [r4, #12]
 800e70e:	059b      	lsls	r3, r3, #22
 800e710:	d4df      	bmi.n	800e6d2 <_fflush_r+0xe>
 800e712:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e714:	f7fd fcaa 	bl	800c06c <__retarget_lock_release_recursive>
 800e718:	e7db      	b.n	800e6d2 <_fflush_r+0xe>
	...

0800e71c <__swhatbuf_r>:
 800e71c:	b570      	push	{r4, r5, r6, lr}
 800e71e:	000e      	movs	r6, r1
 800e720:	001d      	movs	r5, r3
 800e722:	230e      	movs	r3, #14
 800e724:	5ec9      	ldrsh	r1, [r1, r3]
 800e726:	0014      	movs	r4, r2
 800e728:	b096      	sub	sp, #88	; 0x58
 800e72a:	2900      	cmp	r1, #0
 800e72c:	da0c      	bge.n	800e748 <__swhatbuf_r+0x2c>
 800e72e:	89b2      	ldrh	r2, [r6, #12]
 800e730:	2380      	movs	r3, #128	; 0x80
 800e732:	0011      	movs	r1, r2
 800e734:	4019      	ands	r1, r3
 800e736:	421a      	tst	r2, r3
 800e738:	d013      	beq.n	800e762 <__swhatbuf_r+0x46>
 800e73a:	2100      	movs	r1, #0
 800e73c:	3b40      	subs	r3, #64	; 0x40
 800e73e:	2000      	movs	r0, #0
 800e740:	6029      	str	r1, [r5, #0]
 800e742:	6023      	str	r3, [r4, #0]
 800e744:	b016      	add	sp, #88	; 0x58
 800e746:	bd70      	pop	{r4, r5, r6, pc}
 800e748:	466a      	mov	r2, sp
 800e74a:	f000 f861 	bl	800e810 <_fstat_r>
 800e74e:	2800      	cmp	r0, #0
 800e750:	dbed      	blt.n	800e72e <__swhatbuf_r+0x12>
 800e752:	23f0      	movs	r3, #240	; 0xf0
 800e754:	9901      	ldr	r1, [sp, #4]
 800e756:	021b      	lsls	r3, r3, #8
 800e758:	4019      	ands	r1, r3
 800e75a:	4b03      	ldr	r3, [pc, #12]	; (800e768 <__swhatbuf_r+0x4c>)
 800e75c:	18c9      	adds	r1, r1, r3
 800e75e:	424b      	negs	r3, r1
 800e760:	4159      	adcs	r1, r3
 800e762:	2380      	movs	r3, #128	; 0x80
 800e764:	00db      	lsls	r3, r3, #3
 800e766:	e7ea      	b.n	800e73e <__swhatbuf_r+0x22>
 800e768:	ffffe000 	.word	0xffffe000

0800e76c <__smakebuf_r>:
 800e76c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e76e:	2602      	movs	r6, #2
 800e770:	898b      	ldrh	r3, [r1, #12]
 800e772:	0005      	movs	r5, r0
 800e774:	000c      	movs	r4, r1
 800e776:	4233      	tst	r3, r6
 800e778:	d006      	beq.n	800e788 <__smakebuf_r+0x1c>
 800e77a:	0023      	movs	r3, r4
 800e77c:	3347      	adds	r3, #71	; 0x47
 800e77e:	6023      	str	r3, [r4, #0]
 800e780:	6123      	str	r3, [r4, #16]
 800e782:	2301      	movs	r3, #1
 800e784:	6163      	str	r3, [r4, #20]
 800e786:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e788:	466a      	mov	r2, sp
 800e78a:	ab01      	add	r3, sp, #4
 800e78c:	f7ff ffc6 	bl	800e71c <__swhatbuf_r>
 800e790:	9900      	ldr	r1, [sp, #0]
 800e792:	0007      	movs	r7, r0
 800e794:	0028      	movs	r0, r5
 800e796:	f7fe fef9 	bl	800d58c <_malloc_r>
 800e79a:	2800      	cmp	r0, #0
 800e79c:	d108      	bne.n	800e7b0 <__smakebuf_r+0x44>
 800e79e:	220c      	movs	r2, #12
 800e7a0:	5ea3      	ldrsh	r3, [r4, r2]
 800e7a2:	059a      	lsls	r2, r3, #22
 800e7a4:	d4ef      	bmi.n	800e786 <__smakebuf_r+0x1a>
 800e7a6:	2203      	movs	r2, #3
 800e7a8:	4393      	bics	r3, r2
 800e7aa:	431e      	orrs	r6, r3
 800e7ac:	81a6      	strh	r6, [r4, #12]
 800e7ae:	e7e4      	b.n	800e77a <__smakebuf_r+0xe>
 800e7b0:	2380      	movs	r3, #128	; 0x80
 800e7b2:	89a2      	ldrh	r2, [r4, #12]
 800e7b4:	6020      	str	r0, [r4, #0]
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	81a3      	strh	r3, [r4, #12]
 800e7ba:	9b00      	ldr	r3, [sp, #0]
 800e7bc:	6120      	str	r0, [r4, #16]
 800e7be:	6163      	str	r3, [r4, #20]
 800e7c0:	9b01      	ldr	r3, [sp, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00c      	beq.n	800e7e0 <__smakebuf_r+0x74>
 800e7c6:	0028      	movs	r0, r5
 800e7c8:	230e      	movs	r3, #14
 800e7ca:	5ee1      	ldrsh	r1, [r4, r3]
 800e7cc:	f000 f832 	bl	800e834 <_isatty_r>
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	d005      	beq.n	800e7e0 <__smakebuf_r+0x74>
 800e7d4:	2303      	movs	r3, #3
 800e7d6:	89a2      	ldrh	r2, [r4, #12]
 800e7d8:	439a      	bics	r2, r3
 800e7da:	3b02      	subs	r3, #2
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	81a3      	strh	r3, [r4, #12]
 800e7e0:	89a3      	ldrh	r3, [r4, #12]
 800e7e2:	433b      	orrs	r3, r7
 800e7e4:	81a3      	strh	r3, [r4, #12]
 800e7e6:	e7ce      	b.n	800e786 <__smakebuf_r+0x1a>

0800e7e8 <memmove>:
 800e7e8:	b510      	push	{r4, lr}
 800e7ea:	4288      	cmp	r0, r1
 800e7ec:	d902      	bls.n	800e7f4 <memmove+0xc>
 800e7ee:	188b      	adds	r3, r1, r2
 800e7f0:	4298      	cmp	r0, r3
 800e7f2:	d303      	bcc.n	800e7fc <memmove+0x14>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	e007      	b.n	800e808 <memmove+0x20>
 800e7f8:	5c8b      	ldrb	r3, [r1, r2]
 800e7fa:	5483      	strb	r3, [r0, r2]
 800e7fc:	3a01      	subs	r2, #1
 800e7fe:	d2fb      	bcs.n	800e7f8 <memmove+0x10>
 800e800:	bd10      	pop	{r4, pc}
 800e802:	5ccc      	ldrb	r4, [r1, r3]
 800e804:	54c4      	strb	r4, [r0, r3]
 800e806:	3301      	adds	r3, #1
 800e808:	429a      	cmp	r2, r3
 800e80a:	d1fa      	bne.n	800e802 <memmove+0x1a>
 800e80c:	e7f8      	b.n	800e800 <memmove+0x18>
	...

0800e810 <_fstat_r>:
 800e810:	2300      	movs	r3, #0
 800e812:	b570      	push	{r4, r5, r6, lr}
 800e814:	4d06      	ldr	r5, [pc, #24]	; (800e830 <_fstat_r+0x20>)
 800e816:	0004      	movs	r4, r0
 800e818:	0008      	movs	r0, r1
 800e81a:	0011      	movs	r1, r2
 800e81c:	602b      	str	r3, [r5, #0]
 800e81e:	f7f5 febe 	bl	800459e <_fstat>
 800e822:	1c43      	adds	r3, r0, #1
 800e824:	d103      	bne.n	800e82e <_fstat_r+0x1e>
 800e826:	682b      	ldr	r3, [r5, #0]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d000      	beq.n	800e82e <_fstat_r+0x1e>
 800e82c:	6023      	str	r3, [r4, #0]
 800e82e:	bd70      	pop	{r4, r5, r6, pc}
 800e830:	200007d8 	.word	0x200007d8

0800e834 <_isatty_r>:
 800e834:	2300      	movs	r3, #0
 800e836:	b570      	push	{r4, r5, r6, lr}
 800e838:	4d06      	ldr	r5, [pc, #24]	; (800e854 <_isatty_r+0x20>)
 800e83a:	0004      	movs	r4, r0
 800e83c:	0008      	movs	r0, r1
 800e83e:	602b      	str	r3, [r5, #0]
 800e840:	f7f5 febb 	bl	80045ba <_isatty>
 800e844:	1c43      	adds	r3, r0, #1
 800e846:	d103      	bne.n	800e850 <_isatty_r+0x1c>
 800e848:	682b      	ldr	r3, [r5, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d000      	beq.n	800e850 <_isatty_r+0x1c>
 800e84e:	6023      	str	r3, [r4, #0]
 800e850:	bd70      	pop	{r4, r5, r6, pc}
 800e852:	46c0      	nop			; (mov r8, r8)
 800e854:	200007d8 	.word	0x200007d8

0800e858 <_sbrk_r>:
 800e858:	2300      	movs	r3, #0
 800e85a:	b570      	push	{r4, r5, r6, lr}
 800e85c:	4d06      	ldr	r5, [pc, #24]	; (800e878 <_sbrk_r+0x20>)
 800e85e:	0004      	movs	r4, r0
 800e860:	0008      	movs	r0, r1
 800e862:	602b      	str	r3, [r5, #0]
 800e864:	f7f5 febe 	bl	80045e4 <_sbrk>
 800e868:	1c43      	adds	r3, r0, #1
 800e86a:	d103      	bne.n	800e874 <_sbrk_r+0x1c>
 800e86c:	682b      	ldr	r3, [r5, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d000      	beq.n	800e874 <_sbrk_r+0x1c>
 800e872:	6023      	str	r3, [r4, #0]
 800e874:	bd70      	pop	{r4, r5, r6, pc}
 800e876:	46c0      	nop			; (mov r8, r8)
 800e878:	200007d8 	.word	0x200007d8

0800e87c <__assert_func>:
 800e87c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e87e:	0014      	movs	r4, r2
 800e880:	001a      	movs	r2, r3
 800e882:	4b09      	ldr	r3, [pc, #36]	; (800e8a8 <__assert_func+0x2c>)
 800e884:	0005      	movs	r5, r0
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	000e      	movs	r6, r1
 800e88a:	68d8      	ldr	r0, [r3, #12]
 800e88c:	4b07      	ldr	r3, [pc, #28]	; (800e8ac <__assert_func+0x30>)
 800e88e:	2c00      	cmp	r4, #0
 800e890:	d101      	bne.n	800e896 <__assert_func+0x1a>
 800e892:	4b07      	ldr	r3, [pc, #28]	; (800e8b0 <__assert_func+0x34>)
 800e894:	001c      	movs	r4, r3
 800e896:	4907      	ldr	r1, [pc, #28]	; (800e8b4 <__assert_func+0x38>)
 800e898:	9301      	str	r3, [sp, #4]
 800e89a:	9402      	str	r4, [sp, #8]
 800e89c:	002b      	movs	r3, r5
 800e89e:	9600      	str	r6, [sp, #0]
 800e8a0:	f000 f866 	bl	800e970 <fiprintf>
 800e8a4:	f000 f874 	bl	800e990 <abort>
 800e8a8:	200001d0 	.word	0x200001d0
 800e8ac:	0800f03d 	.word	0x0800f03d
 800e8b0:	0800f078 	.word	0x0800f078
 800e8b4:	0800f04a 	.word	0x0800f04a

0800e8b8 <_calloc_r>:
 800e8b8:	b570      	push	{r4, r5, r6, lr}
 800e8ba:	0c0b      	lsrs	r3, r1, #16
 800e8bc:	0c15      	lsrs	r5, r2, #16
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d11e      	bne.n	800e900 <_calloc_r+0x48>
 800e8c2:	2d00      	cmp	r5, #0
 800e8c4:	d10c      	bne.n	800e8e0 <_calloc_r+0x28>
 800e8c6:	b289      	uxth	r1, r1
 800e8c8:	b294      	uxth	r4, r2
 800e8ca:	434c      	muls	r4, r1
 800e8cc:	0021      	movs	r1, r4
 800e8ce:	f7fe fe5d 	bl	800d58c <_malloc_r>
 800e8d2:	1e05      	subs	r5, r0, #0
 800e8d4:	d01b      	beq.n	800e90e <_calloc_r+0x56>
 800e8d6:	0022      	movs	r2, r4
 800e8d8:	2100      	movs	r1, #0
 800e8da:	f7fd fb2f 	bl	800bf3c <memset>
 800e8de:	e016      	b.n	800e90e <_calloc_r+0x56>
 800e8e0:	1c2b      	adds	r3, r5, #0
 800e8e2:	1c0c      	adds	r4, r1, #0
 800e8e4:	b289      	uxth	r1, r1
 800e8e6:	b292      	uxth	r2, r2
 800e8e8:	434a      	muls	r2, r1
 800e8ea:	b2a1      	uxth	r1, r4
 800e8ec:	b29c      	uxth	r4, r3
 800e8ee:	434c      	muls	r4, r1
 800e8f0:	0c13      	lsrs	r3, r2, #16
 800e8f2:	18e4      	adds	r4, r4, r3
 800e8f4:	0c23      	lsrs	r3, r4, #16
 800e8f6:	d107      	bne.n	800e908 <_calloc_r+0x50>
 800e8f8:	0424      	lsls	r4, r4, #16
 800e8fa:	b292      	uxth	r2, r2
 800e8fc:	4314      	orrs	r4, r2
 800e8fe:	e7e5      	b.n	800e8cc <_calloc_r+0x14>
 800e900:	2d00      	cmp	r5, #0
 800e902:	d101      	bne.n	800e908 <_calloc_r+0x50>
 800e904:	1c14      	adds	r4, r2, #0
 800e906:	e7ed      	b.n	800e8e4 <_calloc_r+0x2c>
 800e908:	230c      	movs	r3, #12
 800e90a:	2500      	movs	r5, #0
 800e90c:	6003      	str	r3, [r0, #0]
 800e90e:	0028      	movs	r0, r5
 800e910:	bd70      	pop	{r4, r5, r6, pc}

0800e912 <_realloc_r>:
 800e912:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e914:	0007      	movs	r7, r0
 800e916:	000e      	movs	r6, r1
 800e918:	0014      	movs	r4, r2
 800e91a:	2900      	cmp	r1, #0
 800e91c:	d105      	bne.n	800e92a <_realloc_r+0x18>
 800e91e:	0011      	movs	r1, r2
 800e920:	f7fe fe34 	bl	800d58c <_malloc_r>
 800e924:	0005      	movs	r5, r0
 800e926:	0028      	movs	r0, r5
 800e928:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e92a:	2a00      	cmp	r2, #0
 800e92c:	d103      	bne.n	800e936 <_realloc_r+0x24>
 800e92e:	f7fe fa5b 	bl	800cde8 <_free_r>
 800e932:	0025      	movs	r5, r4
 800e934:	e7f7      	b.n	800e926 <_realloc_r+0x14>
 800e936:	f000 f832 	bl	800e99e <_malloc_usable_size_r>
 800e93a:	9001      	str	r0, [sp, #4]
 800e93c:	4284      	cmp	r4, r0
 800e93e:	d803      	bhi.n	800e948 <_realloc_r+0x36>
 800e940:	0035      	movs	r5, r6
 800e942:	0843      	lsrs	r3, r0, #1
 800e944:	42a3      	cmp	r3, r4
 800e946:	d3ee      	bcc.n	800e926 <_realloc_r+0x14>
 800e948:	0021      	movs	r1, r4
 800e94a:	0038      	movs	r0, r7
 800e94c:	f7fe fe1e 	bl	800d58c <_malloc_r>
 800e950:	1e05      	subs	r5, r0, #0
 800e952:	d0e8      	beq.n	800e926 <_realloc_r+0x14>
 800e954:	9b01      	ldr	r3, [sp, #4]
 800e956:	0022      	movs	r2, r4
 800e958:	429c      	cmp	r4, r3
 800e95a:	d900      	bls.n	800e95e <_realloc_r+0x4c>
 800e95c:	001a      	movs	r2, r3
 800e95e:	0031      	movs	r1, r6
 800e960:	0028      	movs	r0, r5
 800e962:	f7fd fb8f 	bl	800c084 <memcpy>
 800e966:	0031      	movs	r1, r6
 800e968:	0038      	movs	r0, r7
 800e96a:	f7fe fa3d 	bl	800cde8 <_free_r>
 800e96e:	e7da      	b.n	800e926 <_realloc_r+0x14>

0800e970 <fiprintf>:
 800e970:	b40e      	push	{r1, r2, r3}
 800e972:	b517      	push	{r0, r1, r2, r4, lr}
 800e974:	4c05      	ldr	r4, [pc, #20]	; (800e98c <fiprintf+0x1c>)
 800e976:	ab05      	add	r3, sp, #20
 800e978:	cb04      	ldmia	r3!, {r2}
 800e97a:	0001      	movs	r1, r0
 800e97c:	6820      	ldr	r0, [r4, #0]
 800e97e:	9301      	str	r3, [sp, #4]
 800e980:	f7ff fcfa 	bl	800e378 <_vfiprintf_r>
 800e984:	bc1e      	pop	{r1, r2, r3, r4}
 800e986:	bc08      	pop	{r3}
 800e988:	b003      	add	sp, #12
 800e98a:	4718      	bx	r3
 800e98c:	200001d0 	.word	0x200001d0

0800e990 <abort>:
 800e990:	2006      	movs	r0, #6
 800e992:	b510      	push	{r4, lr}
 800e994:	f000 f836 	bl	800ea04 <raise>
 800e998:	2001      	movs	r0, #1
 800e99a:	f7f5 fdb1 	bl	8004500 <_exit>

0800e99e <_malloc_usable_size_r>:
 800e99e:	1f0b      	subs	r3, r1, #4
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	1f18      	subs	r0, r3, #4
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	da01      	bge.n	800e9ac <_malloc_usable_size_r+0xe>
 800e9a8:	580b      	ldr	r3, [r1, r0]
 800e9aa:	18c0      	adds	r0, r0, r3
 800e9ac:	4770      	bx	lr

0800e9ae <_raise_r>:
 800e9ae:	b570      	push	{r4, r5, r6, lr}
 800e9b0:	0004      	movs	r4, r0
 800e9b2:	000d      	movs	r5, r1
 800e9b4:	291f      	cmp	r1, #31
 800e9b6:	d904      	bls.n	800e9c2 <_raise_r+0x14>
 800e9b8:	2316      	movs	r3, #22
 800e9ba:	6003      	str	r3, [r0, #0]
 800e9bc:	2001      	movs	r0, #1
 800e9be:	4240      	negs	r0, r0
 800e9c0:	bd70      	pop	{r4, r5, r6, pc}
 800e9c2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d004      	beq.n	800e9d2 <_raise_r+0x24>
 800e9c8:	008a      	lsls	r2, r1, #2
 800e9ca:	189b      	adds	r3, r3, r2
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	2a00      	cmp	r2, #0
 800e9d0:	d108      	bne.n	800e9e4 <_raise_r+0x36>
 800e9d2:	0020      	movs	r0, r4
 800e9d4:	f000 f832 	bl	800ea3c <_getpid_r>
 800e9d8:	002a      	movs	r2, r5
 800e9da:	0001      	movs	r1, r0
 800e9dc:	0020      	movs	r0, r4
 800e9de:	f000 f81b 	bl	800ea18 <_kill_r>
 800e9e2:	e7ed      	b.n	800e9c0 <_raise_r+0x12>
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	2a01      	cmp	r2, #1
 800e9e8:	d0ea      	beq.n	800e9c0 <_raise_r+0x12>
 800e9ea:	1c51      	adds	r1, r2, #1
 800e9ec:	d103      	bne.n	800e9f6 <_raise_r+0x48>
 800e9ee:	2316      	movs	r3, #22
 800e9f0:	3001      	adds	r0, #1
 800e9f2:	6023      	str	r3, [r4, #0]
 800e9f4:	e7e4      	b.n	800e9c0 <_raise_r+0x12>
 800e9f6:	2400      	movs	r4, #0
 800e9f8:	0028      	movs	r0, r5
 800e9fa:	601c      	str	r4, [r3, #0]
 800e9fc:	4790      	blx	r2
 800e9fe:	0020      	movs	r0, r4
 800ea00:	e7de      	b.n	800e9c0 <_raise_r+0x12>
	...

0800ea04 <raise>:
 800ea04:	b510      	push	{r4, lr}
 800ea06:	4b03      	ldr	r3, [pc, #12]	; (800ea14 <raise+0x10>)
 800ea08:	0001      	movs	r1, r0
 800ea0a:	6818      	ldr	r0, [r3, #0]
 800ea0c:	f7ff ffcf 	bl	800e9ae <_raise_r>
 800ea10:	bd10      	pop	{r4, pc}
 800ea12:	46c0      	nop			; (mov r8, r8)
 800ea14:	200001d0 	.word	0x200001d0

0800ea18 <_kill_r>:
 800ea18:	2300      	movs	r3, #0
 800ea1a:	b570      	push	{r4, r5, r6, lr}
 800ea1c:	4d06      	ldr	r5, [pc, #24]	; (800ea38 <_kill_r+0x20>)
 800ea1e:	0004      	movs	r4, r0
 800ea20:	0008      	movs	r0, r1
 800ea22:	0011      	movs	r1, r2
 800ea24:	602b      	str	r3, [r5, #0]
 800ea26:	f7f5 fd5b 	bl	80044e0 <_kill>
 800ea2a:	1c43      	adds	r3, r0, #1
 800ea2c:	d103      	bne.n	800ea36 <_kill_r+0x1e>
 800ea2e:	682b      	ldr	r3, [r5, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d000      	beq.n	800ea36 <_kill_r+0x1e>
 800ea34:	6023      	str	r3, [r4, #0]
 800ea36:	bd70      	pop	{r4, r5, r6, pc}
 800ea38:	200007d8 	.word	0x200007d8

0800ea3c <_getpid_r>:
 800ea3c:	b510      	push	{r4, lr}
 800ea3e:	f7f5 fd49 	bl	80044d4 <_getpid>
 800ea42:	bd10      	pop	{r4, pc}

0800ea44 <_init>:
 800ea44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea46:	46c0      	nop			; (mov r8, r8)
 800ea48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea4a:	bc08      	pop	{r3}
 800ea4c:	469e      	mov	lr, r3
 800ea4e:	4770      	bx	lr

0800ea50 <_fini>:
 800ea50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea52:	46c0      	nop			; (mov r8, r8)
 800ea54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea56:	bc08      	pop	{r3}
 800ea58:	469e      	mov	lr, r3
 800ea5a:	4770      	bx	lr
