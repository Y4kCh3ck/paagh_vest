
sensory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d08c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800d150  0800d150  0001d150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d638  0800d638  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d638  0800d638  0001d638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d640  0800d640  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d640  0800d640  0001d640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d644  0800d644  0001d644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800d648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  200001d4  0800d81c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  0800d81c  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000174b5  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036e1  00000000  00000000  000376f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  0003add8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001398  00000000  00000000  0003c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a20  00000000  00000000  0003d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001af7f  00000000  00000000  000550c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088a3e  00000000  00000000  0007003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006058  00000000  00000000  000f8a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d134 	.word	0x0800d134

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800d134 	.word	0x0800d134

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8b3 	bl	80015a8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f803 	bl	8001458 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8a5 	bl	80015a8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f89b 	bl	80015a8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f82b 	bl	80014dc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f821 	bl	80014dc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f001 feeb 	bl	8002334 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fb44 	bl	8001bf4 <__aeabi_dsub>
 800056c:	f001 fee2 	bl	8002334 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 f853 	bl	8001670 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f001 ff16 	bl	8002400 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 f84a 	bl	8001670 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fb06 	bl	8001bf4 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f001 fecf 	bl	80023a0 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 f833 	bl	8001670 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f001 fef6 	bl	8002400 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 f8d0 	bl	80007bc <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f001 ffa6 	bl	8002594 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f001 ffa1 	bl	8002594 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_dadd>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0004      	movs	r4, r0
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	001f      	movs	r7, r3
 80007ca:	030b      	lsls	r3, r1, #12
 80007cc:	0010      	movs	r0, r2
 80007ce:	004e      	lsls	r6, r1, #1
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	0fcd      	lsrs	r5, r1, #31
 80007d4:	0f61      	lsrs	r1, r4, #29
 80007d6:	007a      	lsls	r2, r7, #1
 80007d8:	4319      	orrs	r1, r3
 80007da:	00e3      	lsls	r3, r4, #3
 80007dc:	033c      	lsls	r4, r7, #12
 80007de:	0fff      	lsrs	r7, r7, #31
 80007e0:	46bc      	mov	ip, r7
 80007e2:	0a64      	lsrs	r4, r4, #9
 80007e4:	0f47      	lsrs	r7, r0, #29
 80007e6:	4327      	orrs	r7, r4
 80007e8:	0d76      	lsrs	r6, r6, #21
 80007ea:	0d52      	lsrs	r2, r2, #21
 80007ec:	00c0      	lsls	r0, r0, #3
 80007ee:	46b9      	mov	r9, r7
 80007f0:	4680      	mov	r8, r0
 80007f2:	1ab7      	subs	r7, r6, r2
 80007f4:	4565      	cmp	r5, ip
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x3e>
 80007f8:	e09b      	b.n	8000932 <__aeabi_dadd+0x176>
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	dc00      	bgt.n	8000800 <__aeabi_dadd+0x44>
 80007fe:	e084      	b.n	800090a <__aeabi_dadd+0x14e>
 8000800:	2a00      	cmp	r2, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x4a>
 8000804:	e0be      	b.n	8000984 <__aeabi_dadd+0x1c8>
 8000806:	4ac8      	ldr	r2, [pc, #800]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000808:	4296      	cmp	r6, r2
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x52>
 800080c:	e124      	b.n	8000a58 <__aeabi_dadd+0x29c>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	464c      	mov	r4, r9
 8000812:	0412      	lsls	r2, r2, #16
 8000814:	4314      	orrs	r4, r2
 8000816:	46a1      	mov	r9, r4
 8000818:	2f38      	cmp	r7, #56	; 0x38
 800081a:	dd00      	ble.n	800081e <__aeabi_dadd+0x62>
 800081c:	e167      	b.n	8000aee <__aeabi_dadd+0x332>
 800081e:	2f1f      	cmp	r7, #31
 8000820:	dd00      	ble.n	8000824 <__aeabi_dadd+0x68>
 8000822:	e1d6      	b.n	8000bd2 <__aeabi_dadd+0x416>
 8000824:	2220      	movs	r2, #32
 8000826:	464c      	mov	r4, r9
 8000828:	1bd2      	subs	r2, r2, r7
 800082a:	4094      	lsls	r4, r2
 800082c:	46a2      	mov	sl, r4
 800082e:	4644      	mov	r4, r8
 8000830:	40fc      	lsrs	r4, r7
 8000832:	0020      	movs	r0, r4
 8000834:	4654      	mov	r4, sl
 8000836:	4304      	orrs	r4, r0
 8000838:	4640      	mov	r0, r8
 800083a:	4090      	lsls	r0, r2
 800083c:	1e42      	subs	r2, r0, #1
 800083e:	4190      	sbcs	r0, r2
 8000840:	464a      	mov	r2, r9
 8000842:	40fa      	lsrs	r2, r7
 8000844:	4304      	orrs	r4, r0
 8000846:	1a89      	subs	r1, r1, r2
 8000848:	1b1c      	subs	r4, r3, r4
 800084a:	42a3      	cmp	r3, r4
 800084c:	4192      	sbcs	r2, r2
 800084e:	4252      	negs	r2, r2
 8000850:	1a8b      	subs	r3, r1, r2
 8000852:	469a      	mov	sl, r3
 8000854:	4653      	mov	r3, sl
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	d400      	bmi.n	800085c <__aeabi_dadd+0xa0>
 800085a:	e0d4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 800085c:	4653      	mov	r3, sl
 800085e:	025a      	lsls	r2, r3, #9
 8000860:	0a53      	lsrs	r3, r2, #9
 8000862:	469a      	mov	sl, r3
 8000864:	4653      	mov	r3, sl
 8000866:	2b00      	cmp	r3, #0
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0xb0>
 800086a:	e104      	b.n	8000a76 <__aeabi_dadd+0x2ba>
 800086c:	4650      	mov	r0, sl
 800086e:	f001 fe73 	bl	8002558 <__clzsi2>
 8000872:	0003      	movs	r3, r0
 8000874:	3b08      	subs	r3, #8
 8000876:	2220      	movs	r2, #32
 8000878:	0020      	movs	r0, r4
 800087a:	1ad2      	subs	r2, r2, r3
 800087c:	4651      	mov	r1, sl
 800087e:	40d0      	lsrs	r0, r2
 8000880:	4099      	lsls	r1, r3
 8000882:	0002      	movs	r2, r0
 8000884:	409c      	lsls	r4, r3
 8000886:	430a      	orrs	r2, r1
 8000888:	42b3      	cmp	r3, r6
 800088a:	da00      	bge.n	800088e <__aeabi_dadd+0xd2>
 800088c:	e102      	b.n	8000a94 <__aeabi_dadd+0x2d8>
 800088e:	1b9b      	subs	r3, r3, r6
 8000890:	1c59      	adds	r1, r3, #1
 8000892:	291f      	cmp	r1, #31
 8000894:	dd00      	ble.n	8000898 <__aeabi_dadd+0xdc>
 8000896:	e0a7      	b.n	80009e8 <__aeabi_dadd+0x22c>
 8000898:	2320      	movs	r3, #32
 800089a:	0010      	movs	r0, r2
 800089c:	0026      	movs	r6, r4
 800089e:	1a5b      	subs	r3, r3, r1
 80008a0:	409c      	lsls	r4, r3
 80008a2:	4098      	lsls	r0, r3
 80008a4:	40ce      	lsrs	r6, r1
 80008a6:	40ca      	lsrs	r2, r1
 80008a8:	1e63      	subs	r3, r4, #1
 80008aa:	419c      	sbcs	r4, r3
 80008ac:	4330      	orrs	r0, r6
 80008ae:	4692      	mov	sl, r2
 80008b0:	2600      	movs	r6, #0
 80008b2:	4304      	orrs	r4, r0
 80008b4:	0763      	lsls	r3, r4, #29
 80008b6:	d009      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008b8:	230f      	movs	r3, #15
 80008ba:	4023      	ands	r3, r4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008c0:	1d23      	adds	r3, r4, #4
 80008c2:	42a3      	cmp	r3, r4
 80008c4:	41a4      	sbcs	r4, r4
 80008c6:	4264      	negs	r4, r4
 80008c8:	44a2      	add	sl, r4
 80008ca:	001c      	movs	r4, r3
 80008cc:	4653      	mov	r3, sl
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_dadd+0x118>
 80008d2:	e09b      	b.n	8000a0c <__aeabi_dadd+0x250>
 80008d4:	4b94      	ldr	r3, [pc, #592]	; (8000b28 <__aeabi_dadd+0x36c>)
 80008d6:	3601      	adds	r6, #1
 80008d8:	429e      	cmp	r6, r3
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x122>
 80008dc:	e0b8      	b.n	8000a50 <__aeabi_dadd+0x294>
 80008de:	4653      	mov	r3, sl
 80008e0:	4992      	ldr	r1, [pc, #584]	; (8000b2c <__aeabi_dadd+0x370>)
 80008e2:	08e4      	lsrs	r4, r4, #3
 80008e4:	400b      	ands	r3, r1
 80008e6:	0019      	movs	r1, r3
 80008e8:	075b      	lsls	r3, r3, #29
 80008ea:	4323      	orrs	r3, r4
 80008ec:	0572      	lsls	r2, r6, #21
 80008ee:	024c      	lsls	r4, r1, #9
 80008f0:	0b24      	lsrs	r4, r4, #12
 80008f2:	0d52      	lsrs	r2, r2, #21
 80008f4:	0512      	lsls	r2, r2, #20
 80008f6:	07ed      	lsls	r5, r5, #31
 80008f8:	4322      	orrs	r2, r4
 80008fa:	432a      	orrs	r2, r5
 80008fc:	0018      	movs	r0, r3
 80008fe:	0011      	movs	r1, r2
 8000900:	bce0      	pop	{r5, r6, r7}
 8000902:	46ba      	mov	sl, r7
 8000904:	46b1      	mov	r9, r6
 8000906:	46a8      	mov	r8, r5
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090a:	2f00      	cmp	r7, #0
 800090c:	d048      	beq.n	80009a0 <__aeabi_dadd+0x1e4>
 800090e:	1b97      	subs	r7, r2, r6
 8000910:	2e00      	cmp	r6, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x15a>
 8000914:	e10e      	b.n	8000b34 <__aeabi_dadd+0x378>
 8000916:	000c      	movs	r4, r1
 8000918:	431c      	orrs	r4, r3
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x162>
 800091c:	e1b7      	b.n	8000c8e <__aeabi_dadd+0x4d2>
 800091e:	1e7c      	subs	r4, r7, #1
 8000920:	2f01      	cmp	r7, #1
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x16a>
 8000924:	e226      	b.n	8000d74 <__aeabi_dadd+0x5b8>
 8000926:	4d80      	ldr	r5, [pc, #512]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000928:	42af      	cmp	r7, r5
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x172>
 800092c:	e1d5      	b.n	8000cda <__aeabi_dadd+0x51e>
 800092e:	0027      	movs	r7, r4
 8000930:	e107      	b.n	8000b42 <__aeabi_dadd+0x386>
 8000932:	2f00      	cmp	r7, #0
 8000934:	dc00      	bgt.n	8000938 <__aeabi_dadd+0x17c>
 8000936:	e0b2      	b.n	8000a9e <__aeabi_dadd+0x2e2>
 8000938:	2a00      	cmp	r2, #0
 800093a:	d047      	beq.n	80009cc <__aeabi_dadd+0x210>
 800093c:	4a7a      	ldr	r2, [pc, #488]	; (8000b28 <__aeabi_dadd+0x36c>)
 800093e:	4296      	cmp	r6, r2
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x188>
 8000942:	e089      	b.n	8000a58 <__aeabi_dadd+0x29c>
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	464c      	mov	r4, r9
 8000948:	0412      	lsls	r2, r2, #16
 800094a:	4314      	orrs	r4, r2
 800094c:	46a1      	mov	r9, r4
 800094e:	2f38      	cmp	r7, #56	; 0x38
 8000950:	dc6b      	bgt.n	8000a2a <__aeabi_dadd+0x26e>
 8000952:	2f1f      	cmp	r7, #31
 8000954:	dc00      	bgt.n	8000958 <__aeabi_dadd+0x19c>
 8000956:	e16e      	b.n	8000c36 <__aeabi_dadd+0x47a>
 8000958:	003a      	movs	r2, r7
 800095a:	4648      	mov	r0, r9
 800095c:	3a20      	subs	r2, #32
 800095e:	40d0      	lsrs	r0, r2
 8000960:	4684      	mov	ip, r0
 8000962:	2f20      	cmp	r7, #32
 8000964:	d007      	beq.n	8000976 <__aeabi_dadd+0x1ba>
 8000966:	2240      	movs	r2, #64	; 0x40
 8000968:	4648      	mov	r0, r9
 800096a:	1bd2      	subs	r2, r2, r7
 800096c:	4090      	lsls	r0, r2
 800096e:	0002      	movs	r2, r0
 8000970:	4640      	mov	r0, r8
 8000972:	4310      	orrs	r0, r2
 8000974:	4680      	mov	r8, r0
 8000976:	4640      	mov	r0, r8
 8000978:	1e42      	subs	r2, r0, #1
 800097a:	4190      	sbcs	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	0004      	movs	r4, r0
 8000980:	4314      	orrs	r4, r2
 8000982:	e057      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000984:	464a      	mov	r2, r9
 8000986:	4302      	orrs	r2, r0
 8000988:	d100      	bne.n	800098c <__aeabi_dadd+0x1d0>
 800098a:	e103      	b.n	8000b94 <__aeabi_dadd+0x3d8>
 800098c:	1e7a      	subs	r2, r7, #1
 800098e:	2f01      	cmp	r7, #1
 8000990:	d100      	bne.n	8000994 <__aeabi_dadd+0x1d8>
 8000992:	e193      	b.n	8000cbc <__aeabi_dadd+0x500>
 8000994:	4c64      	ldr	r4, [pc, #400]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000996:	42a7      	cmp	r7, r4
 8000998:	d100      	bne.n	800099c <__aeabi_dadd+0x1e0>
 800099a:	e18a      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 800099c:	0017      	movs	r7, r2
 800099e:	e73b      	b.n	8000818 <__aeabi_dadd+0x5c>
 80009a0:	4c63      	ldr	r4, [pc, #396]	; (8000b30 <__aeabi_dadd+0x374>)
 80009a2:	1c72      	adds	r2, r6, #1
 80009a4:	4222      	tst	r2, r4
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x1ee>
 80009a8:	e0e0      	b.n	8000b6c <__aeabi_dadd+0x3b0>
 80009aa:	000a      	movs	r2, r1
 80009ac:	431a      	orrs	r2, r3
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dadd+0x1f8>
 80009b2:	e174      	b.n	8000c9e <__aeabi_dadd+0x4e2>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x1fe>
 80009b8:	e1d0      	b.n	8000d5c <__aeabi_dadd+0x5a0>
 80009ba:	464a      	mov	r2, r9
 80009bc:	4302      	orrs	r2, r0
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x206>
 80009c0:	e1e3      	b.n	8000d8a <__aeabi_dadd+0x5ce>
 80009c2:	074a      	lsls	r2, r1, #29
 80009c4:	08db      	lsrs	r3, r3, #3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	08c9      	lsrs	r1, r1, #3
 80009ca:	e029      	b.n	8000a20 <__aeabi_dadd+0x264>
 80009cc:	464a      	mov	r2, r9
 80009ce:	4302      	orrs	r2, r0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x218>
 80009d2:	e17d      	b.n	8000cd0 <__aeabi_dadd+0x514>
 80009d4:	1e7a      	subs	r2, r7, #1
 80009d6:	2f01      	cmp	r7, #1
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x220>
 80009da:	e0e0      	b.n	8000b9e <__aeabi_dadd+0x3e2>
 80009dc:	4c52      	ldr	r4, [pc, #328]	; (8000b28 <__aeabi_dadd+0x36c>)
 80009de:	42a7      	cmp	r7, r4
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x228>
 80009e2:	e166      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 80009e4:	0017      	movs	r7, r2
 80009e6:	e7b2      	b.n	800094e <__aeabi_dadd+0x192>
 80009e8:	0010      	movs	r0, r2
 80009ea:	3b1f      	subs	r3, #31
 80009ec:	40d8      	lsrs	r0, r3
 80009ee:	2920      	cmp	r1, #32
 80009f0:	d003      	beq.n	80009fa <__aeabi_dadd+0x23e>
 80009f2:	2340      	movs	r3, #64	; 0x40
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	409a      	lsls	r2, r3
 80009f8:	4314      	orrs	r4, r2
 80009fa:	1e63      	subs	r3, r4, #1
 80009fc:	419c      	sbcs	r4, r3
 80009fe:	2300      	movs	r3, #0
 8000a00:	2600      	movs	r6, #0
 8000a02:	469a      	mov	sl, r3
 8000a04:	4304      	orrs	r4, r0
 8000a06:	0763      	lsls	r3, r4, #29
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dadd+0x250>
 8000a0a:	e755      	b.n	80008b8 <__aeabi_dadd+0xfc>
 8000a0c:	4652      	mov	r2, sl
 8000a0e:	08e3      	lsrs	r3, r4, #3
 8000a10:	0752      	lsls	r2, r2, #29
 8000a12:	4313      	orrs	r3, r2
 8000a14:	4652      	mov	r2, sl
 8000a16:	0037      	movs	r7, r6
 8000a18:	08d1      	lsrs	r1, r2, #3
 8000a1a:	4a43      	ldr	r2, [pc, #268]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a1c:	4297      	cmp	r7, r2
 8000a1e:	d01f      	beq.n	8000a60 <__aeabi_dadd+0x2a4>
 8000a20:	0309      	lsls	r1, r1, #12
 8000a22:	057a      	lsls	r2, r7, #21
 8000a24:	0b0c      	lsrs	r4, r1, #12
 8000a26:	0d52      	lsrs	r2, r2, #21
 8000a28:	e764      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a2a:	4642      	mov	r2, r8
 8000a2c:	464c      	mov	r4, r9
 8000a2e:	4314      	orrs	r4, r2
 8000a30:	1e62      	subs	r2, r4, #1
 8000a32:	4194      	sbcs	r4, r2
 8000a34:	18e4      	adds	r4, r4, r3
 8000a36:	429c      	cmp	r4, r3
 8000a38:	4192      	sbcs	r2, r2
 8000a3a:	4252      	negs	r2, r2
 8000a3c:	4692      	mov	sl, r2
 8000a3e:	448a      	add	sl, r1
 8000a40:	4653      	mov	r3, sl
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	d5df      	bpl.n	8000a06 <__aeabi_dadd+0x24a>
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a48:	3601      	adds	r6, #1
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_dadd+0x294>
 8000a4e:	e0b3      	b.n	8000bb8 <__aeabi_dadd+0x3fc>
 8000a50:	0032      	movs	r2, r6
 8000a52:	2400      	movs	r4, #0
 8000a54:	2300      	movs	r3, #0
 8000a56:	e74d      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a58:	074a      	lsls	r2, r1, #29
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	08c9      	lsrs	r1, r1, #3
 8000a60:	001a      	movs	r2, r3
 8000a62:	430a      	orrs	r2, r1
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dadd+0x2ac>
 8000a66:	e200      	b.n	8000e6a <__aeabi_dadd+0x6ae>
 8000a68:	2480      	movs	r4, #128	; 0x80
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	430c      	orrs	r4, r1
 8000a6e:	0324      	lsls	r4, r4, #12
 8000a70:	4a2d      	ldr	r2, [pc, #180]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a72:	0b24      	lsrs	r4, r4, #12
 8000a74:	e73e      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a76:	0020      	movs	r0, r4
 8000a78:	f001 fd6e 	bl	8002558 <__clzsi2>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	3318      	adds	r3, #24
 8000a80:	2b1f      	cmp	r3, #31
 8000a82:	dc00      	bgt.n	8000a86 <__aeabi_dadd+0x2ca>
 8000a84:	e6f7      	b.n	8000876 <__aeabi_dadd+0xba>
 8000a86:	0022      	movs	r2, r4
 8000a88:	3808      	subs	r0, #8
 8000a8a:	4082      	lsls	r2, r0
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	42b3      	cmp	r3, r6
 8000a90:	db00      	blt.n	8000a94 <__aeabi_dadd+0x2d8>
 8000a92:	e6fc      	b.n	800088e <__aeabi_dadd+0xd2>
 8000a94:	1af6      	subs	r6, r6, r3
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <__aeabi_dadd+0x370>)
 8000a98:	401a      	ands	r2, r3
 8000a9a:	4692      	mov	sl, r2
 8000a9c:	e70a      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	d02b      	beq.n	8000afa <__aeabi_dadd+0x33e>
 8000aa2:	1b97      	subs	r7, r2, r6
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x2ee>
 8000aa8:	e0b8      	b.n	8000c1c <__aeabi_dadd+0x460>
 8000aaa:	4c1f      	ldr	r4, [pc, #124]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000aac:	42a2      	cmp	r2, r4
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x2f6>
 8000ab0:	e11c      	b.n	8000cec <__aeabi_dadd+0x530>
 8000ab2:	2480      	movs	r4, #128	; 0x80
 8000ab4:	0424      	lsls	r4, r4, #16
 8000ab6:	4321      	orrs	r1, r4
 8000ab8:	2f38      	cmp	r7, #56	; 0x38
 8000aba:	dd00      	ble.n	8000abe <__aeabi_dadd+0x302>
 8000abc:	e11e      	b.n	8000cfc <__aeabi_dadd+0x540>
 8000abe:	2f1f      	cmp	r7, #31
 8000ac0:	dd00      	ble.n	8000ac4 <__aeabi_dadd+0x308>
 8000ac2:	e19e      	b.n	8000e02 <__aeabi_dadd+0x646>
 8000ac4:	2620      	movs	r6, #32
 8000ac6:	000c      	movs	r4, r1
 8000ac8:	1bf6      	subs	r6, r6, r7
 8000aca:	0018      	movs	r0, r3
 8000acc:	40b3      	lsls	r3, r6
 8000ace:	40b4      	lsls	r4, r6
 8000ad0:	40f8      	lsrs	r0, r7
 8000ad2:	1e5e      	subs	r6, r3, #1
 8000ad4:	41b3      	sbcs	r3, r6
 8000ad6:	40f9      	lsrs	r1, r7
 8000ad8:	4304      	orrs	r4, r0
 8000ada:	431c      	orrs	r4, r3
 8000adc:	4489      	add	r9, r1
 8000ade:	4444      	add	r4, r8
 8000ae0:	4544      	cmp	r4, r8
 8000ae2:	419b      	sbcs	r3, r3
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	444b      	add	r3, r9
 8000ae8:	469a      	mov	sl, r3
 8000aea:	0016      	movs	r6, r2
 8000aec:	e7a8      	b.n	8000a40 <__aeabi_dadd+0x284>
 8000aee:	4642      	mov	r2, r8
 8000af0:	464c      	mov	r4, r9
 8000af2:	4314      	orrs	r4, r2
 8000af4:	1e62      	subs	r2, r4, #1
 8000af6:	4194      	sbcs	r4, r2
 8000af8:	e6a6      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000afa:	4c0d      	ldr	r4, [pc, #52]	; (8000b30 <__aeabi_dadd+0x374>)
 8000afc:	1c72      	adds	r2, r6, #1
 8000afe:	4222      	tst	r2, r4
 8000b00:	d000      	beq.n	8000b04 <__aeabi_dadd+0x348>
 8000b02:	e0a8      	b.n	8000c56 <__aeabi_dadd+0x49a>
 8000b04:	000a      	movs	r2, r1
 8000b06:	431a      	orrs	r2, r3
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_dadd+0x352>
 8000b0c:	e10a      	b.n	8000d24 <__aeabi_dadd+0x568>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x358>
 8000b12:	e15e      	b.n	8000dd2 <__aeabi_dadd+0x616>
 8000b14:	464a      	mov	r2, r9
 8000b16:	4302      	orrs	r2, r0
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dadd+0x360>
 8000b1a:	e161      	b.n	8000de0 <__aeabi_dadd+0x624>
 8000b1c:	074a      	lsls	r2, r1, #29
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	08c9      	lsrs	r1, r1, #3
 8000b24:	e77c      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	000007ff 	.word	0x000007ff
 8000b2c:	ff7fffff 	.word	0xff7fffff
 8000b30:	000007fe 	.word	0x000007fe
 8000b34:	4ccf      	ldr	r4, [pc, #828]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000b36:	42a2      	cmp	r2, r4
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x380>
 8000b3a:	e0ce      	b.n	8000cda <__aeabi_dadd+0x51e>
 8000b3c:	2480      	movs	r4, #128	; 0x80
 8000b3e:	0424      	lsls	r4, r4, #16
 8000b40:	4321      	orrs	r1, r4
 8000b42:	2f38      	cmp	r7, #56	; 0x38
 8000b44:	dc5b      	bgt.n	8000bfe <__aeabi_dadd+0x442>
 8000b46:	2f1f      	cmp	r7, #31
 8000b48:	dd00      	ble.n	8000b4c <__aeabi_dadd+0x390>
 8000b4a:	e0dc      	b.n	8000d06 <__aeabi_dadd+0x54a>
 8000b4c:	2520      	movs	r5, #32
 8000b4e:	000c      	movs	r4, r1
 8000b50:	1bed      	subs	r5, r5, r7
 8000b52:	001e      	movs	r6, r3
 8000b54:	40ab      	lsls	r3, r5
 8000b56:	40ac      	lsls	r4, r5
 8000b58:	40fe      	lsrs	r6, r7
 8000b5a:	1e5d      	subs	r5, r3, #1
 8000b5c:	41ab      	sbcs	r3, r5
 8000b5e:	4334      	orrs	r4, r6
 8000b60:	40f9      	lsrs	r1, r7
 8000b62:	431c      	orrs	r4, r3
 8000b64:	464b      	mov	r3, r9
 8000b66:	1a5b      	subs	r3, r3, r1
 8000b68:	4699      	mov	r9, r3
 8000b6a:	e04c      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	1a1c      	subs	r4, r3, r0
 8000b70:	1a88      	subs	r0, r1, r2
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	4192      	sbcs	r2, r2
 8000b76:	4252      	negs	r2, r2
 8000b78:	4692      	mov	sl, r2
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	4650      	mov	r0, sl
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	4692      	mov	sl, r2
 8000b82:	0212      	lsls	r2, r2, #8
 8000b84:	d478      	bmi.n	8000c78 <__aeabi_dadd+0x4bc>
 8000b86:	4653      	mov	r3, sl
 8000b88:	4323      	orrs	r3, r4
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_dadd+0x3d2>
 8000b8c:	e66a      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2500      	movs	r5, #0
 8000b92:	e745      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b94:	074a      	lsls	r2, r1, #29
 8000b96:	08db      	lsrs	r3, r3, #3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	e73d      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000b9e:	181c      	adds	r4, r3, r0
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	419b      	sbcs	r3, r3
 8000ba4:	4449      	add	r1, r9
 8000ba6:	468a      	mov	sl, r1
 8000ba8:	425b      	negs	r3, r3
 8000baa:	449a      	add	sl, r3
 8000bac:	4653      	mov	r3, sl
 8000bae:	2601      	movs	r6, #1
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_dadd+0x3fa>
 8000bb4:	e727      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000bb6:	2602      	movs	r6, #2
 8000bb8:	4652      	mov	r2, sl
 8000bba:	4baf      	ldr	r3, [pc, #700]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	4021      	ands	r1, r4
 8000bc4:	0862      	lsrs	r2, r4, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	07dc      	lsls	r4, r3, #31
 8000bca:	085b      	lsrs	r3, r3, #1
 8000bcc:	469a      	mov	sl, r3
 8000bce:	4314      	orrs	r4, r2
 8000bd0:	e670      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000bd2:	003a      	movs	r2, r7
 8000bd4:	464c      	mov	r4, r9
 8000bd6:	3a20      	subs	r2, #32
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	46a4      	mov	ip, r4
 8000bdc:	2f20      	cmp	r7, #32
 8000bde:	d007      	beq.n	8000bf0 <__aeabi_dadd+0x434>
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	4648      	mov	r0, r9
 8000be4:	1bd2      	subs	r2, r2, r7
 8000be6:	4090      	lsls	r0, r2
 8000be8:	0002      	movs	r2, r0
 8000bea:	4640      	mov	r0, r8
 8000bec:	4310      	orrs	r0, r2
 8000bee:	4680      	mov	r8, r0
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	1e42      	subs	r2, r0, #1
 8000bf4:	4190      	sbcs	r0, r2
 8000bf6:	4662      	mov	r2, ip
 8000bf8:	0004      	movs	r4, r0
 8000bfa:	4314      	orrs	r4, r2
 8000bfc:	e624      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000bfe:	4319      	orrs	r1, r3
 8000c00:	000c      	movs	r4, r1
 8000c02:	1e63      	subs	r3, r4, #1
 8000c04:	419c      	sbcs	r4, r3
 8000c06:	4643      	mov	r3, r8
 8000c08:	1b1c      	subs	r4, r3, r4
 8000c0a:	45a0      	cmp	r8, r4
 8000c0c:	419b      	sbcs	r3, r3
 8000c0e:	4649      	mov	r1, r9
 8000c10:	425b      	negs	r3, r3
 8000c12:	1acb      	subs	r3, r1, r3
 8000c14:	469a      	mov	sl, r3
 8000c16:	4665      	mov	r5, ip
 8000c18:	0016      	movs	r6, r2
 8000c1a:	e61b      	b.n	8000854 <__aeabi_dadd+0x98>
 8000c1c:	000c      	movs	r4, r1
 8000c1e:	431c      	orrs	r4, r3
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x468>
 8000c22:	e0c7      	b.n	8000db4 <__aeabi_dadd+0x5f8>
 8000c24:	1e7c      	subs	r4, r7, #1
 8000c26:	2f01      	cmp	r7, #1
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dadd+0x470>
 8000c2a:	e0f9      	b.n	8000e20 <__aeabi_dadd+0x664>
 8000c2c:	4e91      	ldr	r6, [pc, #580]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c2e:	42b7      	cmp	r7, r6
 8000c30:	d05c      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000c32:	0027      	movs	r7, r4
 8000c34:	e740      	b.n	8000ab8 <__aeabi_dadd+0x2fc>
 8000c36:	2220      	movs	r2, #32
 8000c38:	464c      	mov	r4, r9
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	1bd2      	subs	r2, r2, r7
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	40f8      	lsrs	r0, r7
 8000c42:	4304      	orrs	r4, r0
 8000c44:	4640      	mov	r0, r8
 8000c46:	4090      	lsls	r0, r2
 8000c48:	1e42      	subs	r2, r0, #1
 8000c4a:	4190      	sbcs	r0, r2
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	40fa      	lsrs	r2, r7
 8000c50:	4304      	orrs	r4, r0
 8000c52:	1889      	adds	r1, r1, r2
 8000c54:	e6ee      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000c56:	4c87      	ldr	r4, [pc, #540]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c58:	42a2      	cmp	r2, r4
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x4a2>
 8000c5c:	e6f9      	b.n	8000a52 <__aeabi_dadd+0x296>
 8000c5e:	1818      	adds	r0, r3, r0
 8000c60:	4298      	cmp	r0, r3
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	4449      	add	r1, r9
 8000c66:	425b      	negs	r3, r3
 8000c68:	18cb      	adds	r3, r1, r3
 8000c6a:	07dc      	lsls	r4, r3, #31
 8000c6c:	0840      	lsrs	r0, r0, #1
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	469a      	mov	sl, r3
 8000c72:	0016      	movs	r6, r2
 8000c74:	4304      	orrs	r4, r0
 8000c76:	e6c6      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000c78:	4642      	mov	r2, r8
 8000c7a:	1ad4      	subs	r4, r2, r3
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	4180      	sbcs	r0, r0
 8000c80:	464b      	mov	r3, r9
 8000c82:	4240      	negs	r0, r0
 8000c84:	1a59      	subs	r1, r3, r1
 8000c86:	1a0b      	subs	r3, r1, r0
 8000c88:	469a      	mov	sl, r3
 8000c8a:	4665      	mov	r5, ip
 8000c8c:	e5ea      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000c8e:	464b      	mov	r3, r9
 8000c90:	464a      	mov	r2, r9
 8000c92:	08c0      	lsrs	r0, r0, #3
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4665      	mov	r5, ip
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	08d1      	lsrs	r1, r2, #3
 8000c9c:	e6bd      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d000      	beq.n	8000ca4 <__aeabi_dadd+0x4e8>
 8000ca2:	e08e      	b.n	8000dc2 <__aeabi_dadd+0x606>
 8000ca4:	464b      	mov	r3, r9
 8000ca6:	4303      	orrs	r3, r0
 8000ca8:	d117      	bne.n	8000cda <__aeabi_dadd+0x51e>
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	2500      	movs	r5, #0
 8000cae:	0309      	lsls	r1, r1, #12
 8000cb0:	e6da      	b.n	8000a68 <__aeabi_dadd+0x2ac>
 8000cb2:	074a      	lsls	r2, r1, #29
 8000cb4:	08db      	lsrs	r3, r3, #3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	08c9      	lsrs	r1, r1, #3
 8000cba:	e6d1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cbc:	1a1c      	subs	r4, r3, r0
 8000cbe:	464a      	mov	r2, r9
 8000cc0:	42a3      	cmp	r3, r4
 8000cc2:	419b      	sbcs	r3, r3
 8000cc4:	1a89      	subs	r1, r1, r2
 8000cc6:	425b      	negs	r3, r3
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	469a      	mov	sl, r3
 8000ccc:	2601      	movs	r6, #1
 8000cce:	e5c1      	b.n	8000854 <__aeabi_dadd+0x98>
 8000cd0:	074a      	lsls	r2, r1, #29
 8000cd2:	08db      	lsrs	r3, r3, #3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	e69f      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	08d8      	lsrs	r0, r3, #3
 8000cde:	464b      	mov	r3, r9
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	075b      	lsls	r3, r3, #29
 8000ce4:	4665      	mov	r5, ip
 8000ce6:	4303      	orrs	r3, r0
 8000ce8:	08d1      	lsrs	r1, r2, #3
 8000cea:	e6b9      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cec:	4643      	mov	r3, r8
 8000cee:	08d8      	lsrs	r0, r3, #3
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	075b      	lsls	r3, r3, #29
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	08d1      	lsrs	r1, r2, #3
 8000cfa:	e6b1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	000c      	movs	r4, r1
 8000d00:	1e63      	subs	r3, r4, #1
 8000d02:	419c      	sbcs	r4, r3
 8000d04:	e6eb      	b.n	8000ade <__aeabi_dadd+0x322>
 8000d06:	003c      	movs	r4, r7
 8000d08:	000d      	movs	r5, r1
 8000d0a:	3c20      	subs	r4, #32
 8000d0c:	40e5      	lsrs	r5, r4
 8000d0e:	2f20      	cmp	r7, #32
 8000d10:	d003      	beq.n	8000d1a <__aeabi_dadd+0x55e>
 8000d12:	2440      	movs	r4, #64	; 0x40
 8000d14:	1be4      	subs	r4, r4, r7
 8000d16:	40a1      	lsls	r1, r4
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	1e63      	subs	r3, r4, #1
 8000d1e:	419c      	sbcs	r4, r3
 8000d20:	432c      	orrs	r4, r5
 8000d22:	e770      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d0e1      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000d28:	464a      	mov	r2, r9
 8000d2a:	4302      	orrs	r2, r0
 8000d2c:	d0c1      	beq.n	8000cb2 <__aeabi_dadd+0x4f6>
 8000d2e:	074a      	lsls	r2, r1, #29
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	08c9      	lsrs	r1, r1, #3
 8000d38:	0312      	lsls	r2, r2, #12
 8000d3a:	4211      	tst	r1, r2
 8000d3c:	d008      	beq.n	8000d50 <__aeabi_dadd+0x594>
 8000d3e:	4648      	mov	r0, r9
 8000d40:	08c4      	lsrs	r4, r0, #3
 8000d42:	4214      	tst	r4, r2
 8000d44:	d104      	bne.n	8000d50 <__aeabi_dadd+0x594>
 8000d46:	4643      	mov	r3, r8
 8000d48:	0021      	movs	r1, r4
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	0742      	lsls	r2, r0, #29
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	0f5a      	lsrs	r2, r3, #29
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	0752      	lsls	r2, r2, #29
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	e681      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000d5c:	464b      	mov	r3, r9
 8000d5e:	4303      	orrs	r3, r0
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dadd+0x5a8>
 8000d62:	e714      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000d64:	464b      	mov	r3, r9
 8000d66:	464a      	mov	r2, r9
 8000d68:	08c0      	lsrs	r0, r0, #3
 8000d6a:	075b      	lsls	r3, r3, #29
 8000d6c:	4665      	mov	r5, ip
 8000d6e:	4303      	orrs	r3, r0
 8000d70:	08d1      	lsrs	r1, r2, #3
 8000d72:	e655      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000d74:	1ac4      	subs	r4, r0, r3
 8000d76:	45a0      	cmp	r8, r4
 8000d78:	4180      	sbcs	r0, r0
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	4240      	negs	r0, r0
 8000d7e:	1a59      	subs	r1, r3, r1
 8000d80:	1a0b      	subs	r3, r1, r0
 8000d82:	469a      	mov	sl, r3
 8000d84:	4665      	mov	r5, ip
 8000d86:	2601      	movs	r6, #1
 8000d88:	e564      	b.n	8000854 <__aeabi_dadd+0x98>
 8000d8a:	1a1c      	subs	r4, r3, r0
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	4180      	sbcs	r0, r0
 8000d92:	1a8a      	subs	r2, r1, r2
 8000d94:	4240      	negs	r0, r0
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	4692      	mov	sl, r2
 8000d9a:	0212      	lsls	r2, r2, #8
 8000d9c:	d549      	bpl.n	8000e32 <__aeabi_dadd+0x676>
 8000d9e:	4642      	mov	r2, r8
 8000da0:	1ad4      	subs	r4, r2, r3
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	4180      	sbcs	r0, r0
 8000da6:	464b      	mov	r3, r9
 8000da8:	4240      	negs	r0, r0
 8000daa:	1a59      	subs	r1, r3, r1
 8000dac:	1a0b      	subs	r3, r1, r0
 8000dae:	469a      	mov	sl, r3
 8000db0:	4665      	mov	r5, ip
 8000db2:	e57f      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000db4:	464b      	mov	r3, r9
 8000db6:	464a      	mov	r2, r9
 8000db8:	08c0      	lsrs	r0, r0, #3
 8000dba:	075b      	lsls	r3, r3, #29
 8000dbc:	4303      	orrs	r3, r0
 8000dbe:	08d1      	lsrs	r1, r2, #3
 8000dc0:	e62b      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000dc2:	464a      	mov	r2, r9
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	4302      	orrs	r2, r0
 8000dc8:	d138      	bne.n	8000e3c <__aeabi_dadd+0x680>
 8000dca:	074a      	lsls	r2, r1, #29
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	08c9      	lsrs	r1, r1, #3
 8000dd0:	e646      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	08c0      	lsrs	r0, r0, #3
 8000dd8:	075b      	lsls	r3, r3, #29
 8000dda:	4303      	orrs	r3, r0
 8000ddc:	08d1      	lsrs	r1, r2, #3
 8000dde:	e61f      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000de0:	181c      	adds	r4, r3, r0
 8000de2:	429c      	cmp	r4, r3
 8000de4:	419b      	sbcs	r3, r3
 8000de6:	4449      	add	r1, r9
 8000de8:	468a      	mov	sl, r1
 8000dea:	425b      	negs	r3, r3
 8000dec:	449a      	add	sl, r3
 8000dee:	4653      	mov	r3, sl
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	d400      	bmi.n	8000df6 <__aeabi_dadd+0x63a>
 8000df4:	e607      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000df6:	4652      	mov	r2, sl
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	4692      	mov	sl, r2
 8000e00:	e601      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e02:	003c      	movs	r4, r7
 8000e04:	000e      	movs	r6, r1
 8000e06:	3c20      	subs	r4, #32
 8000e08:	40e6      	lsrs	r6, r4
 8000e0a:	2f20      	cmp	r7, #32
 8000e0c:	d003      	beq.n	8000e16 <__aeabi_dadd+0x65a>
 8000e0e:	2440      	movs	r4, #64	; 0x40
 8000e10:	1be4      	subs	r4, r4, r7
 8000e12:	40a1      	lsls	r1, r4
 8000e14:	430b      	orrs	r3, r1
 8000e16:	001c      	movs	r4, r3
 8000e18:	1e63      	subs	r3, r4, #1
 8000e1a:	419c      	sbcs	r4, r3
 8000e1c:	4334      	orrs	r4, r6
 8000e1e:	e65e      	b.n	8000ade <__aeabi_dadd+0x322>
 8000e20:	4443      	add	r3, r8
 8000e22:	4283      	cmp	r3, r0
 8000e24:	4180      	sbcs	r0, r0
 8000e26:	4449      	add	r1, r9
 8000e28:	468a      	mov	sl, r1
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	001c      	movs	r4, r3
 8000e2e:	4482      	add	sl, r0
 8000e30:	e6bc      	b.n	8000bac <__aeabi_dadd+0x3f0>
 8000e32:	4653      	mov	r3, sl
 8000e34:	4323      	orrs	r3, r4
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x67e>
 8000e38:	e6a9      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000e3a:	e5e4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e3c:	074a      	lsls	r2, r1, #29
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	08c9      	lsrs	r1, r1, #3
 8000e44:	0312      	lsls	r2, r2, #12
 8000e46:	4211      	tst	r1, r2
 8000e48:	d009      	beq.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e4a:	4648      	mov	r0, r9
 8000e4c:	08c4      	lsrs	r4, r0, #3
 8000e4e:	4214      	tst	r4, r2
 8000e50:	d105      	bne.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e52:	4643      	mov	r3, r8
 8000e54:	4665      	mov	r5, ip
 8000e56:	0021      	movs	r1, r4
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	0742      	lsls	r2, r0, #29
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	0f5a      	lsrs	r2, r3, #29
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	0752      	lsls	r2, r2, #29
 8000e66:	4313      	orrs	r3, r2
 8000e68:	e5fa      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	4a01      	ldr	r2, [pc, #4]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000e6e:	001c      	movs	r4, r3
 8000e70:	e540      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	000007ff 	.word	0x000007ff
 8000e78:	ff7fffff 	.word	0xff7fffff

08000e7c <__aeabi_ddiv>:
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	4657      	mov	r7, sl
 8000e80:	464e      	mov	r6, r9
 8000e82:	4645      	mov	r5, r8
 8000e84:	46de      	mov	lr, fp
 8000e86:	b5e0      	push	{r5, r6, r7, lr}
 8000e88:	030c      	lsls	r4, r1, #12
 8000e8a:	001f      	movs	r7, r3
 8000e8c:	004b      	lsls	r3, r1, #1
 8000e8e:	4681      	mov	r9, r0
 8000e90:	4692      	mov	sl, r2
 8000e92:	0005      	movs	r5, r0
 8000e94:	b085      	sub	sp, #20
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d5b      	lsrs	r3, r3, #21
 8000e9a:	0fce      	lsrs	r6, r1, #31
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_ddiv+0x26>
 8000ea0:	e152      	b.n	8001148 <__aeabi_ddiv+0x2cc>
 8000ea2:	4ad2      	ldr	r2, [pc, #840]	; (80011ec <__aeabi_ddiv+0x370>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2e>
 8000ea8:	e16e      	b.n	8001188 <__aeabi_ddiv+0x30c>
 8000eaa:	0f42      	lsrs	r2, r0, #29
 8000eac:	00e4      	lsls	r4, r4, #3
 8000eae:	4314      	orrs	r4, r2
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	0412      	lsls	r2, r2, #16
 8000eb4:	4322      	orrs	r2, r4
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	4acd      	ldr	r2, [pc, #820]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eba:	00c5      	lsls	r5, r0, #3
 8000ebc:	4693      	mov	fp, r2
 8000ebe:	449b      	add	fp, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	033c      	lsls	r4, r7, #12
 8000ec8:	007b      	lsls	r3, r7, #1
 8000eca:	4650      	mov	r0, sl
 8000ecc:	0b24      	lsrs	r4, r4, #12
 8000ece:	0d5b      	lsrs	r3, r3, #21
 8000ed0:	0fff      	lsrs	r7, r7, #31
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x5c>
 8000ed6:	e11a      	b.n	800110e <__aeabi_ddiv+0x292>
 8000ed8:	4ac4      	ldr	r2, [pc, #784]	; (80011ec <__aeabi_ddiv+0x370>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_ddiv+0x64>
 8000ede:	e15e      	b.n	800119e <__aeabi_ddiv+0x322>
 8000ee0:	0f42      	lsrs	r2, r0, #29
 8000ee2:	00e4      	lsls	r4, r4, #3
 8000ee4:	4322      	orrs	r2, r4
 8000ee6:	2480      	movs	r4, #128	; 0x80
 8000ee8:	0424      	lsls	r4, r4, #16
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4ac0      	ldr	r2, [pc, #768]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eee:	00c1      	lsls	r1, r0, #3
 8000ef0:	4694      	mov	ip, r2
 8000ef2:	465a      	mov	r2, fp
 8000ef4:	4463      	add	r3, ip
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	469b      	mov	fp, r3
 8000efa:	2000      	movs	r0, #0
 8000efc:	0033      	movs	r3, r6
 8000efe:	407b      	eors	r3, r7
 8000f00:	469a      	mov	sl, r3
 8000f02:	464b      	mov	r3, r9
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d827      	bhi.n	8000f58 <__aeabi_ddiv+0xdc>
 8000f08:	4aba      	ldr	r2, [pc, #744]	; (80011f4 <__aeabi_ddiv+0x378>)
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	58d3      	ldr	r3, [r2, r3]
 8000f0e:	469f      	mov	pc, r3
 8000f10:	46b2      	mov	sl, r6
 8000f12:	9b00      	ldr	r3, [sp, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d016      	beq.n	8000f46 <__aeabi_ddiv+0xca>
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_ddiv+0xa2>
 8000f1c:	e287      	b.n	800142e <__aeabi_ddiv+0x5b2>
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d000      	beq.n	8000f24 <__aeabi_ddiv+0xa8>
 8000f22:	e0d5      	b.n	80010d0 <__aeabi_ddiv+0x254>
 8000f24:	2300      	movs	r3, #0
 8000f26:	2200      	movs	r2, #0
 8000f28:	2500      	movs	r5, #0
 8000f2a:	051b      	lsls	r3, r3, #20
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	4652      	mov	r2, sl
 8000f30:	07d2      	lsls	r2, r2, #31
 8000f32:	4313      	orrs	r3, r2
 8000f34:	0028      	movs	r0, r5
 8000f36:	0019      	movs	r1, r3
 8000f38:	b005      	add	sp, #20
 8000f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f3c:	46bb      	mov	fp, r7
 8000f3e:	46b2      	mov	sl, r6
 8000f40:	46a9      	mov	r9, r5
 8000f42:	46a0      	mov	r8, r4
 8000f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f46:	2200      	movs	r2, #0
 8000f48:	2500      	movs	r5, #0
 8000f4a:	4ba8      	ldr	r3, [pc, #672]	; (80011ec <__aeabi_ddiv+0x370>)
 8000f4c:	e7ed      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8000f4e:	46ba      	mov	sl, r7
 8000f50:	46a0      	mov	r8, r4
 8000f52:	000d      	movs	r5, r1
 8000f54:	9000      	str	r0, [sp, #0]
 8000f56:	e7dc      	b.n	8000f12 <__aeabi_ddiv+0x96>
 8000f58:	4544      	cmp	r4, r8
 8000f5a:	d200      	bcs.n	8000f5e <__aeabi_ddiv+0xe2>
 8000f5c:	e1c4      	b.n	80012e8 <__aeabi_ddiv+0x46c>
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0xe6>
 8000f60:	e1bf      	b.n	80012e2 <__aeabi_ddiv+0x466>
 8000f62:	2301      	movs	r3, #1
 8000f64:	425b      	negs	r3, r3
 8000f66:	469c      	mov	ip, r3
 8000f68:	002e      	movs	r6, r5
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	44e3      	add	fp, ip
 8000f70:	0223      	lsls	r3, r4, #8
 8000f72:	0e0c      	lsrs	r4, r1, #24
 8000f74:	431c      	orrs	r4, r3
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	4699      	mov	r9, r3
 8000f7a:	0423      	lsls	r3, r4, #16
 8000f7c:	020a      	lsls	r2, r1, #8
 8000f7e:	0c1f      	lsrs	r7, r3, #16
 8000f80:	4649      	mov	r1, r9
 8000f82:	9200      	str	r2, [sp, #0]
 8000f84:	9701      	str	r7, [sp, #4]
 8000f86:	f7ff f961 	bl	800024c <__aeabi_uidivmod>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	437a      	muls	r2, r7
 8000f8e:	040b      	lsls	r3, r1, #16
 8000f90:	0c31      	lsrs	r1, r6, #16
 8000f92:	4680      	mov	r8, r0
 8000f94:	4319      	orrs	r1, r3
 8000f96:	428a      	cmp	r2, r1
 8000f98:	d907      	bls.n	8000faa <__aeabi_ddiv+0x12e>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	425b      	negs	r3, r3
 8000f9e:	469c      	mov	ip, r3
 8000fa0:	1909      	adds	r1, r1, r4
 8000fa2:	44e0      	add	r8, ip
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d800      	bhi.n	8000faa <__aeabi_ddiv+0x12e>
 8000fa8:	e201      	b.n	80013ae <__aeabi_ddiv+0x532>
 8000faa:	1a88      	subs	r0, r1, r2
 8000fac:	4649      	mov	r1, r9
 8000fae:	f7ff f94d 	bl	800024c <__aeabi_uidivmod>
 8000fb2:	9a01      	ldr	r2, [sp, #4]
 8000fb4:	0436      	lsls	r6, r6, #16
 8000fb6:	4342      	muls	r2, r0
 8000fb8:	0409      	lsls	r1, r1, #16
 8000fba:	0c36      	lsrs	r6, r6, #16
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	430e      	orrs	r6, r1
 8000fc0:	42b2      	cmp	r2, r6
 8000fc2:	d904      	bls.n	8000fce <__aeabi_ddiv+0x152>
 8000fc4:	1936      	adds	r6, r6, r4
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	42b4      	cmp	r4, r6
 8000fca:	d800      	bhi.n	8000fce <__aeabi_ddiv+0x152>
 8000fcc:	e1e9      	b.n	80013a2 <__aeabi_ddiv+0x526>
 8000fce:	1ab0      	subs	r0, r6, r2
 8000fd0:	4642      	mov	r2, r8
 8000fd2:	9e00      	ldr	r6, [sp, #0]
 8000fd4:	0412      	lsls	r2, r2, #16
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	0c33      	lsrs	r3, r6, #16
 8000fda:	001f      	movs	r7, r3
 8000fdc:	0c11      	lsrs	r1, r2, #16
 8000fde:	4690      	mov	r8, r2
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	0413      	lsls	r3, r2, #16
 8000fe4:	0432      	lsls	r2, r6, #16
 8000fe6:	0c16      	lsrs	r6, r2, #16
 8000fe8:	0032      	movs	r2, r6
 8000fea:	0c1b      	lsrs	r3, r3, #16
 8000fec:	435a      	muls	r2, r3
 8000fee:	9603      	str	r6, [sp, #12]
 8000ff0:	437b      	muls	r3, r7
 8000ff2:	434e      	muls	r6, r1
 8000ff4:	4379      	muls	r1, r7
 8000ff6:	0c17      	lsrs	r7, r2, #16
 8000ff8:	46bc      	mov	ip, r7
 8000ffa:	199b      	adds	r3, r3, r6
 8000ffc:	4463      	add	r3, ip
 8000ffe:	429e      	cmp	r6, r3
 8001000:	d903      	bls.n	800100a <__aeabi_ddiv+0x18e>
 8001002:	2680      	movs	r6, #128	; 0x80
 8001004:	0276      	lsls	r6, r6, #9
 8001006:	46b4      	mov	ip, r6
 8001008:	4461      	add	r1, ip
 800100a:	0c1e      	lsrs	r6, r3, #16
 800100c:	1871      	adds	r1, r6, r1
 800100e:	0416      	lsls	r6, r2, #16
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	0c36      	lsrs	r6, r6, #16
 8001014:	199e      	adds	r6, r3, r6
 8001016:	4288      	cmp	r0, r1
 8001018:	d302      	bcc.n	8001020 <__aeabi_ddiv+0x1a4>
 800101a:	d112      	bne.n	8001042 <__aeabi_ddiv+0x1c6>
 800101c:	42b5      	cmp	r5, r6
 800101e:	d210      	bcs.n	8001042 <__aeabi_ddiv+0x1c6>
 8001020:	4643      	mov	r3, r8
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	469c      	mov	ip, r3
 8001028:	4465      	add	r5, ip
 800102a:	001f      	movs	r7, r3
 800102c:	429d      	cmp	r5, r3
 800102e:	419b      	sbcs	r3, r3
 8001030:	425b      	negs	r3, r3
 8001032:	191b      	adds	r3, r3, r4
 8001034:	18c0      	adds	r0, r0, r3
 8001036:	4284      	cmp	r4, r0
 8001038:	d200      	bcs.n	800103c <__aeabi_ddiv+0x1c0>
 800103a:	e19e      	b.n	800137a <__aeabi_ddiv+0x4fe>
 800103c:	d100      	bne.n	8001040 <__aeabi_ddiv+0x1c4>
 800103e:	e199      	b.n	8001374 <__aeabi_ddiv+0x4f8>
 8001040:	4690      	mov	r8, r2
 8001042:	1bae      	subs	r6, r5, r6
 8001044:	42b5      	cmp	r5, r6
 8001046:	41ad      	sbcs	r5, r5
 8001048:	1a40      	subs	r0, r0, r1
 800104a:	426d      	negs	r5, r5
 800104c:	1b40      	subs	r0, r0, r5
 800104e:	4284      	cmp	r4, r0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x1d8>
 8001052:	e1d2      	b.n	80013fa <__aeabi_ddiv+0x57e>
 8001054:	4649      	mov	r1, r9
 8001056:	f7ff f8f9 	bl	800024c <__aeabi_uidivmod>
 800105a:	9a01      	ldr	r2, [sp, #4]
 800105c:	040b      	lsls	r3, r1, #16
 800105e:	4342      	muls	r2, r0
 8001060:	0c31      	lsrs	r1, r6, #16
 8001062:	0005      	movs	r5, r0
 8001064:	4319      	orrs	r1, r3
 8001066:	428a      	cmp	r2, r1
 8001068:	d900      	bls.n	800106c <__aeabi_ddiv+0x1f0>
 800106a:	e16c      	b.n	8001346 <__aeabi_ddiv+0x4ca>
 800106c:	1a88      	subs	r0, r1, r2
 800106e:	4649      	mov	r1, r9
 8001070:	f7ff f8ec 	bl	800024c <__aeabi_uidivmod>
 8001074:	9a01      	ldr	r2, [sp, #4]
 8001076:	0436      	lsls	r6, r6, #16
 8001078:	4342      	muls	r2, r0
 800107a:	0409      	lsls	r1, r1, #16
 800107c:	0c36      	lsrs	r6, r6, #16
 800107e:	0003      	movs	r3, r0
 8001080:	430e      	orrs	r6, r1
 8001082:	42b2      	cmp	r2, r6
 8001084:	d900      	bls.n	8001088 <__aeabi_ddiv+0x20c>
 8001086:	e153      	b.n	8001330 <__aeabi_ddiv+0x4b4>
 8001088:	9803      	ldr	r0, [sp, #12]
 800108a:	1ab6      	subs	r6, r6, r2
 800108c:	0002      	movs	r2, r0
 800108e:	042d      	lsls	r5, r5, #16
 8001090:	431d      	orrs	r5, r3
 8001092:	9f02      	ldr	r7, [sp, #8]
 8001094:	042b      	lsls	r3, r5, #16
 8001096:	0c1b      	lsrs	r3, r3, #16
 8001098:	435a      	muls	r2, r3
 800109a:	437b      	muls	r3, r7
 800109c:	469c      	mov	ip, r3
 800109e:	0c29      	lsrs	r1, r5, #16
 80010a0:	4348      	muls	r0, r1
 80010a2:	0c13      	lsrs	r3, r2, #16
 80010a4:	4484      	add	ip, r0
 80010a6:	4463      	add	r3, ip
 80010a8:	4379      	muls	r1, r7
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d903      	bls.n	80010b6 <__aeabi_ddiv+0x23a>
 80010ae:	2080      	movs	r0, #128	; 0x80
 80010b0:	0240      	lsls	r0, r0, #9
 80010b2:	4684      	mov	ip, r0
 80010b4:	4461      	add	r1, ip
 80010b6:	0c18      	lsrs	r0, r3, #16
 80010b8:	0412      	lsls	r2, r2, #16
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	0c12      	lsrs	r2, r2, #16
 80010be:	1840      	adds	r0, r0, r1
 80010c0:	189b      	adds	r3, r3, r2
 80010c2:	4286      	cmp	r6, r0
 80010c4:	d200      	bcs.n	80010c8 <__aeabi_ddiv+0x24c>
 80010c6:	e100      	b.n	80012ca <__aeabi_ddiv+0x44e>
 80010c8:	d100      	bne.n	80010cc <__aeabi_ddiv+0x250>
 80010ca:	e0fb      	b.n	80012c4 <__aeabi_ddiv+0x448>
 80010cc:	2301      	movs	r3, #1
 80010ce:	431d      	orrs	r5, r3
 80010d0:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <__aeabi_ddiv+0x37c>)
 80010d2:	445b      	add	r3, fp
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dc00      	bgt.n	80010da <__aeabi_ddiv+0x25e>
 80010d8:	e0aa      	b.n	8001230 <__aeabi_ddiv+0x3b4>
 80010da:	076a      	lsls	r2, r5, #29
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0x264>
 80010de:	e13d      	b.n	800135c <__aeabi_ddiv+0x4e0>
 80010e0:	08e9      	lsrs	r1, r5, #3
 80010e2:	4642      	mov	r2, r8
 80010e4:	01d2      	lsls	r2, r2, #7
 80010e6:	d506      	bpl.n	80010f6 <__aeabi_ddiv+0x27a>
 80010e8:	4642      	mov	r2, r8
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <__aeabi_ddiv+0x380>)
 80010ec:	401a      	ands	r2, r3
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	4690      	mov	r8, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	445b      	add	r3, fp
 80010f6:	4a42      	ldr	r2, [pc, #264]	; (8001200 <__aeabi_ddiv+0x384>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	dd00      	ble.n	80010fe <__aeabi_ddiv+0x282>
 80010fc:	e723      	b.n	8000f46 <__aeabi_ddiv+0xca>
 80010fe:	4642      	mov	r2, r8
 8001100:	055b      	lsls	r3, r3, #21
 8001102:	0755      	lsls	r5, r2, #29
 8001104:	0252      	lsls	r2, r2, #9
 8001106:	430d      	orrs	r5, r1
 8001108:	0b12      	lsrs	r2, r2, #12
 800110a:	0d5b      	lsrs	r3, r3, #21
 800110c:	e70d      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800110e:	4651      	mov	r1, sl
 8001110:	4321      	orrs	r1, r4
 8001112:	d100      	bne.n	8001116 <__aeabi_ddiv+0x29a>
 8001114:	e07c      	b.n	8001210 <__aeabi_ddiv+0x394>
 8001116:	2c00      	cmp	r4, #0
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x2a0>
 800111a:	e0fb      	b.n	8001314 <__aeabi_ddiv+0x498>
 800111c:	0020      	movs	r0, r4
 800111e:	f001 fa1b 	bl	8002558 <__clzsi2>
 8001122:	0002      	movs	r2, r0
 8001124:	3a0b      	subs	r2, #11
 8001126:	231d      	movs	r3, #29
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	4652      	mov	r2, sl
 800112c:	0001      	movs	r1, r0
 800112e:	40da      	lsrs	r2, r3
 8001130:	4653      	mov	r3, sl
 8001132:	3908      	subs	r1, #8
 8001134:	408b      	lsls	r3, r1
 8001136:	408c      	lsls	r4, r1
 8001138:	0019      	movs	r1, r3
 800113a:	4314      	orrs	r4, r2
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <__aeabi_ddiv+0x388>)
 800113e:	4458      	add	r0, fp
 8001140:	469b      	mov	fp, r3
 8001142:	4483      	add	fp, r0
 8001144:	2000      	movs	r0, #0
 8001146:	e6d9      	b.n	8000efc <__aeabi_ddiv+0x80>
 8001148:	0003      	movs	r3, r0
 800114a:	4323      	orrs	r3, r4
 800114c:	4698      	mov	r8, r3
 800114e:	d044      	beq.n	80011da <__aeabi_ddiv+0x35e>
 8001150:	2c00      	cmp	r4, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_ddiv+0x2da>
 8001154:	e0cf      	b.n	80012f6 <__aeabi_ddiv+0x47a>
 8001156:	0020      	movs	r0, r4
 8001158:	f001 f9fe 	bl	8002558 <__clzsi2>
 800115c:	0001      	movs	r1, r0
 800115e:	0002      	movs	r2, r0
 8001160:	390b      	subs	r1, #11
 8001162:	231d      	movs	r3, #29
 8001164:	1a5b      	subs	r3, r3, r1
 8001166:	4649      	mov	r1, r9
 8001168:	0010      	movs	r0, r2
 800116a:	40d9      	lsrs	r1, r3
 800116c:	3808      	subs	r0, #8
 800116e:	4084      	lsls	r4, r0
 8001170:	000b      	movs	r3, r1
 8001172:	464d      	mov	r5, r9
 8001174:	4323      	orrs	r3, r4
 8001176:	4698      	mov	r8, r3
 8001178:	4085      	lsls	r5, r0
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <__aeabi_ddiv+0x38c>)
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	469b      	mov	fp, r3
 8001180:	2300      	movs	r3, #0
 8001182:	4699      	mov	r9, r3
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	e69e      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 8001188:	0002      	movs	r2, r0
 800118a:	4322      	orrs	r2, r4
 800118c:	4690      	mov	r8, r2
 800118e:	d11d      	bne.n	80011cc <__aeabi_ddiv+0x350>
 8001190:	2208      	movs	r2, #8
 8001192:	469b      	mov	fp, r3
 8001194:	2302      	movs	r3, #2
 8001196:	2500      	movs	r5, #0
 8001198:	4691      	mov	r9, r2
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	e693      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 800119e:	4651      	mov	r1, sl
 80011a0:	4321      	orrs	r1, r4
 80011a2:	d109      	bne.n	80011b8 <__aeabi_ddiv+0x33c>
 80011a4:	2302      	movs	r3, #2
 80011a6:	464a      	mov	r2, r9
 80011a8:	431a      	orrs	r2, r3
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <__aeabi_ddiv+0x390>)
 80011ac:	4691      	mov	r9, r2
 80011ae:	469c      	mov	ip, r3
 80011b0:	2400      	movs	r4, #0
 80011b2:	2002      	movs	r0, #2
 80011b4:	44e3      	add	fp, ip
 80011b6:	e6a1      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011b8:	2303      	movs	r3, #3
 80011ba:	464a      	mov	r2, r9
 80011bc:	431a      	orrs	r2, r3
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <__aeabi_ddiv+0x390>)
 80011c0:	4691      	mov	r9, r2
 80011c2:	469c      	mov	ip, r3
 80011c4:	4651      	mov	r1, sl
 80011c6:	2003      	movs	r0, #3
 80011c8:	44e3      	add	fp, ip
 80011ca:	e697      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011cc:	220c      	movs	r2, #12
 80011ce:	469b      	mov	fp, r3
 80011d0:	2303      	movs	r3, #3
 80011d2:	46a0      	mov	r8, r4
 80011d4:	4691      	mov	r9, r2
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	e675      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011da:	2304      	movs	r3, #4
 80011dc:	4699      	mov	r9, r3
 80011de:	2300      	movs	r3, #0
 80011e0:	469b      	mov	fp, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	2500      	movs	r5, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	e66d      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	fffffc01 	.word	0xfffffc01
 80011f4:	0800d164 	.word	0x0800d164
 80011f8:	000003ff 	.word	0x000003ff
 80011fc:	feffffff 	.word	0xfeffffff
 8001200:	000007fe 	.word	0x000007fe
 8001204:	000003f3 	.word	0x000003f3
 8001208:	fffffc0d 	.word	0xfffffc0d
 800120c:	fffff801 	.word	0xfffff801
 8001210:	464a      	mov	r2, r9
 8001212:	2301      	movs	r3, #1
 8001214:	431a      	orrs	r2, r3
 8001216:	4691      	mov	r9, r2
 8001218:	2400      	movs	r4, #0
 800121a:	2001      	movs	r0, #1
 800121c:	e66e      	b.n	8000efc <__aeabi_ddiv+0x80>
 800121e:	2300      	movs	r3, #0
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	469a      	mov	sl, r3
 8001224:	2500      	movs	r5, #0
 8001226:	4b88      	ldr	r3, [pc, #544]	; (8001448 <__aeabi_ddiv+0x5cc>)
 8001228:	0312      	lsls	r2, r2, #12
 800122a:	e67e      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800122c:	2501      	movs	r5, #1
 800122e:	426d      	negs	r5, r5
 8001230:	2201      	movs	r2, #1
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	2a38      	cmp	r2, #56	; 0x38
 8001236:	dd00      	ble.n	800123a <__aeabi_ddiv+0x3be>
 8001238:	e674      	b.n	8000f24 <__aeabi_ddiv+0xa8>
 800123a:	2a1f      	cmp	r2, #31
 800123c:	dc00      	bgt.n	8001240 <__aeabi_ddiv+0x3c4>
 800123e:	e0bd      	b.n	80013bc <__aeabi_ddiv+0x540>
 8001240:	211f      	movs	r1, #31
 8001242:	4249      	negs	r1, r1
 8001244:	1acb      	subs	r3, r1, r3
 8001246:	4641      	mov	r1, r8
 8001248:	40d9      	lsrs	r1, r3
 800124a:	000b      	movs	r3, r1
 800124c:	2a20      	cmp	r2, #32
 800124e:	d004      	beq.n	800125a <__aeabi_ddiv+0x3de>
 8001250:	4641      	mov	r1, r8
 8001252:	4a7e      	ldr	r2, [pc, #504]	; (800144c <__aeabi_ddiv+0x5d0>)
 8001254:	445a      	add	r2, fp
 8001256:	4091      	lsls	r1, r2
 8001258:	430d      	orrs	r5, r1
 800125a:	0029      	movs	r1, r5
 800125c:	1e4a      	subs	r2, r1, #1
 800125e:	4191      	sbcs	r1, r2
 8001260:	4319      	orrs	r1, r3
 8001262:	2307      	movs	r3, #7
 8001264:	001d      	movs	r5, r3
 8001266:	2200      	movs	r2, #0
 8001268:	400d      	ands	r5, r1
 800126a:	420b      	tst	r3, r1
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x3f4>
 800126e:	e0d0      	b.n	8001412 <__aeabi_ddiv+0x596>
 8001270:	220f      	movs	r2, #15
 8001272:	2300      	movs	r3, #0
 8001274:	400a      	ands	r2, r1
 8001276:	2a04      	cmp	r2, #4
 8001278:	d100      	bne.n	800127c <__aeabi_ddiv+0x400>
 800127a:	e0c7      	b.n	800140c <__aeabi_ddiv+0x590>
 800127c:	1d0a      	adds	r2, r1, #4
 800127e:	428a      	cmp	r2, r1
 8001280:	4189      	sbcs	r1, r1
 8001282:	4249      	negs	r1, r1
 8001284:	185b      	adds	r3, r3, r1
 8001286:	0011      	movs	r1, r2
 8001288:	021a      	lsls	r2, r3, #8
 800128a:	d400      	bmi.n	800128e <__aeabi_ddiv+0x412>
 800128c:	e0be      	b.n	800140c <__aeabi_ddiv+0x590>
 800128e:	2301      	movs	r3, #1
 8001290:	2200      	movs	r2, #0
 8001292:	2500      	movs	r5, #0
 8001294:	e649      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	4643      	mov	r3, r8
 800129a:	0312      	lsls	r2, r2, #12
 800129c:	4213      	tst	r3, r2
 800129e:	d008      	beq.n	80012b2 <__aeabi_ddiv+0x436>
 80012a0:	4214      	tst	r4, r2
 80012a2:	d106      	bne.n	80012b2 <__aeabi_ddiv+0x436>
 80012a4:	4322      	orrs	r2, r4
 80012a6:	0312      	lsls	r2, r2, #12
 80012a8:	46ba      	mov	sl, r7
 80012aa:	000d      	movs	r5, r1
 80012ac:	4b66      	ldr	r3, [pc, #408]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012ae:	0b12      	lsrs	r2, r2, #12
 80012b0:	e63b      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	4643      	mov	r3, r8
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	431a      	orrs	r2, r3
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	46b2      	mov	sl, r6
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012c0:	0b12      	lsrs	r2, r2, #12
 80012c2:	e632      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d100      	bne.n	80012ca <__aeabi_ddiv+0x44e>
 80012c8:	e702      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80012ca:	19a6      	adds	r6, r4, r6
 80012cc:	1e6a      	subs	r2, r5, #1
 80012ce:	42a6      	cmp	r6, r4
 80012d0:	d200      	bcs.n	80012d4 <__aeabi_ddiv+0x458>
 80012d2:	e089      	b.n	80013e8 <__aeabi_ddiv+0x56c>
 80012d4:	4286      	cmp	r6, r0
 80012d6:	d200      	bcs.n	80012da <__aeabi_ddiv+0x45e>
 80012d8:	e09f      	b.n	800141a <__aeabi_ddiv+0x59e>
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x462>
 80012dc:	e0af      	b.n	800143e <__aeabi_ddiv+0x5c2>
 80012de:	0015      	movs	r5, r2
 80012e0:	e6f4      	b.n	80010cc <__aeabi_ddiv+0x250>
 80012e2:	42a9      	cmp	r1, r5
 80012e4:	d900      	bls.n	80012e8 <__aeabi_ddiv+0x46c>
 80012e6:	e63c      	b.n	8000f62 <__aeabi_ddiv+0xe6>
 80012e8:	4643      	mov	r3, r8
 80012ea:	07de      	lsls	r6, r3, #31
 80012ec:	0858      	lsrs	r0, r3, #1
 80012ee:	086b      	lsrs	r3, r5, #1
 80012f0:	431e      	orrs	r6, r3
 80012f2:	07ed      	lsls	r5, r5, #31
 80012f4:	e63c      	b.n	8000f70 <__aeabi_ddiv+0xf4>
 80012f6:	f001 f92f 	bl	8002558 <__clzsi2>
 80012fa:	0001      	movs	r1, r0
 80012fc:	0002      	movs	r2, r0
 80012fe:	3115      	adds	r1, #21
 8001300:	3220      	adds	r2, #32
 8001302:	291c      	cmp	r1, #28
 8001304:	dc00      	bgt.n	8001308 <__aeabi_ddiv+0x48c>
 8001306:	e72c      	b.n	8001162 <__aeabi_ddiv+0x2e6>
 8001308:	464b      	mov	r3, r9
 800130a:	3808      	subs	r0, #8
 800130c:	4083      	lsls	r3, r0
 800130e:	2500      	movs	r5, #0
 8001310:	4698      	mov	r8, r3
 8001312:	e732      	b.n	800117a <__aeabi_ddiv+0x2fe>
 8001314:	f001 f920 	bl	8002558 <__clzsi2>
 8001318:	0003      	movs	r3, r0
 800131a:	001a      	movs	r2, r3
 800131c:	3215      	adds	r2, #21
 800131e:	3020      	adds	r0, #32
 8001320:	2a1c      	cmp	r2, #28
 8001322:	dc00      	bgt.n	8001326 <__aeabi_ddiv+0x4aa>
 8001324:	e6ff      	b.n	8001126 <__aeabi_ddiv+0x2aa>
 8001326:	4654      	mov	r4, sl
 8001328:	3b08      	subs	r3, #8
 800132a:	2100      	movs	r1, #0
 800132c:	409c      	lsls	r4, r3
 800132e:	e705      	b.n	800113c <__aeabi_ddiv+0x2c0>
 8001330:	1936      	adds	r6, r6, r4
 8001332:	3b01      	subs	r3, #1
 8001334:	42b4      	cmp	r4, r6
 8001336:	d900      	bls.n	800133a <__aeabi_ddiv+0x4be>
 8001338:	e6a6      	b.n	8001088 <__aeabi_ddiv+0x20c>
 800133a:	42b2      	cmp	r2, r6
 800133c:	d800      	bhi.n	8001340 <__aeabi_ddiv+0x4c4>
 800133e:	e6a3      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001340:	1e83      	subs	r3, r0, #2
 8001342:	1936      	adds	r6, r6, r4
 8001344:	e6a0      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001346:	1909      	adds	r1, r1, r4
 8001348:	3d01      	subs	r5, #1
 800134a:	428c      	cmp	r4, r1
 800134c:	d900      	bls.n	8001350 <__aeabi_ddiv+0x4d4>
 800134e:	e68d      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001350:	428a      	cmp	r2, r1
 8001352:	d800      	bhi.n	8001356 <__aeabi_ddiv+0x4da>
 8001354:	e68a      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001356:	1e85      	subs	r5, r0, #2
 8001358:	1909      	adds	r1, r1, r4
 800135a:	e687      	b.n	800106c <__aeabi_ddiv+0x1f0>
 800135c:	220f      	movs	r2, #15
 800135e:	402a      	ands	r2, r5
 8001360:	2a04      	cmp	r2, #4
 8001362:	d100      	bne.n	8001366 <__aeabi_ddiv+0x4ea>
 8001364:	e6bc      	b.n	80010e0 <__aeabi_ddiv+0x264>
 8001366:	1d29      	adds	r1, r5, #4
 8001368:	42a9      	cmp	r1, r5
 800136a:	41ad      	sbcs	r5, r5
 800136c:	426d      	negs	r5, r5
 800136e:	08c9      	lsrs	r1, r1, #3
 8001370:	44a8      	add	r8, r5
 8001372:	e6b6      	b.n	80010e2 <__aeabi_ddiv+0x266>
 8001374:	42af      	cmp	r7, r5
 8001376:	d900      	bls.n	800137a <__aeabi_ddiv+0x4fe>
 8001378:	e662      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 800137a:	4281      	cmp	r1, r0
 800137c:	d804      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 800137e:	d000      	beq.n	8001382 <__aeabi_ddiv+0x506>
 8001380:	e65e      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001382:	42ae      	cmp	r6, r5
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 8001386:	e65b      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001388:	2302      	movs	r3, #2
 800138a:	425b      	negs	r3, r3
 800138c:	469c      	mov	ip, r3
 800138e:	9b00      	ldr	r3, [sp, #0]
 8001390:	44e0      	add	r8, ip
 8001392:	469c      	mov	ip, r3
 8001394:	4465      	add	r5, ip
 8001396:	429d      	cmp	r5, r3
 8001398:	419b      	sbcs	r3, r3
 800139a:	425b      	negs	r3, r3
 800139c:	191b      	adds	r3, r3, r4
 800139e:	18c0      	adds	r0, r0, r3
 80013a0:	e64f      	b.n	8001042 <__aeabi_ddiv+0x1c6>
 80013a2:	42b2      	cmp	r2, r6
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x52c>
 80013a6:	e612      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013a8:	1e83      	subs	r3, r0, #2
 80013aa:	1936      	adds	r6, r6, r4
 80013ac:	e60f      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013ae:	428a      	cmp	r2, r1
 80013b0:	d800      	bhi.n	80013b4 <__aeabi_ddiv+0x538>
 80013b2:	e5fa      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013b4:	1e83      	subs	r3, r0, #2
 80013b6:	4698      	mov	r8, r3
 80013b8:	1909      	adds	r1, r1, r4
 80013ba:	e5f6      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <__aeabi_ddiv+0x5d4>)
 80013be:	0028      	movs	r0, r5
 80013c0:	445b      	add	r3, fp
 80013c2:	4641      	mov	r1, r8
 80013c4:	409d      	lsls	r5, r3
 80013c6:	4099      	lsls	r1, r3
 80013c8:	40d0      	lsrs	r0, r2
 80013ca:	1e6b      	subs	r3, r5, #1
 80013cc:	419d      	sbcs	r5, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4301      	orrs	r1, r0
 80013d2:	4329      	orrs	r1, r5
 80013d4:	40d3      	lsrs	r3, r2
 80013d6:	074a      	lsls	r2, r1, #29
 80013d8:	d100      	bne.n	80013dc <__aeabi_ddiv+0x560>
 80013da:	e755      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013dc:	220f      	movs	r2, #15
 80013de:	400a      	ands	r2, r1
 80013e0:	2a04      	cmp	r2, #4
 80013e2:	d000      	beq.n	80013e6 <__aeabi_ddiv+0x56a>
 80013e4:	e74a      	b.n	800127c <__aeabi_ddiv+0x400>
 80013e6:	e74f      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013e8:	0015      	movs	r5, r2
 80013ea:	4286      	cmp	r6, r0
 80013ec:	d000      	beq.n	80013f0 <__aeabi_ddiv+0x574>
 80013ee:	e66d      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f0:	9a00      	ldr	r2, [sp, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d000      	beq.n	80013f8 <__aeabi_ddiv+0x57c>
 80013f6:	e669      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f8:	e66a      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <__aeabi_ddiv+0x5d8>)
 80013fc:	445b      	add	r3, fp
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dc00      	bgt.n	8001404 <__aeabi_ddiv+0x588>
 8001402:	e713      	b.n	800122c <__aeabi_ddiv+0x3b0>
 8001404:	2501      	movs	r5, #1
 8001406:	2100      	movs	r1, #0
 8001408:	44a8      	add	r8, r5
 800140a:	e66a      	b.n	80010e2 <__aeabi_ddiv+0x266>
 800140c:	075d      	lsls	r5, r3, #29
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	0b1a      	lsrs	r2, r3, #12
 8001412:	08c9      	lsrs	r1, r1, #3
 8001414:	2300      	movs	r3, #0
 8001416:	430d      	orrs	r5, r1
 8001418:	e587      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800141a:	9900      	ldr	r1, [sp, #0]
 800141c:	3d02      	subs	r5, #2
 800141e:	004a      	lsls	r2, r1, #1
 8001420:	428a      	cmp	r2, r1
 8001422:	41bf      	sbcs	r7, r7
 8001424:	427f      	negs	r7, r7
 8001426:	193f      	adds	r7, r7, r4
 8001428:	19f6      	adds	r6, r6, r7
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	e7dd      	b.n	80013ea <__aeabi_ddiv+0x56e>
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	4643      	mov	r3, r8
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	431a      	orrs	r2, r3
 8001436:	0312      	lsls	r2, r2, #12
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <__aeabi_ddiv+0x5cc>)
 800143a:	0b12      	lsrs	r2, r2, #12
 800143c:	e575      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800143e:	9900      	ldr	r1, [sp, #0]
 8001440:	4299      	cmp	r1, r3
 8001442:	d3ea      	bcc.n	800141a <__aeabi_ddiv+0x59e>
 8001444:	0015      	movs	r5, r2
 8001446:	e7d3      	b.n	80013f0 <__aeabi_ddiv+0x574>
 8001448:	000007ff 	.word	0x000007ff
 800144c:	0000043e 	.word	0x0000043e
 8001450:	0000041e 	.word	0x0000041e
 8001454:	000003ff 	.word	0x000003ff

08001458 <__eqdf2>:
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	464e      	mov	r6, r9
 800145c:	4645      	mov	r5, r8
 800145e:	46de      	mov	lr, fp
 8001460:	4657      	mov	r7, sl
 8001462:	4690      	mov	r8, r2
 8001464:	b5e0      	push	{r5, r6, r7, lr}
 8001466:	0017      	movs	r7, r2
 8001468:	031a      	lsls	r2, r3, #12
 800146a:	0b12      	lsrs	r2, r2, #12
 800146c:	0005      	movs	r5, r0
 800146e:	4684      	mov	ip, r0
 8001470:	4819      	ldr	r0, [pc, #100]	; (80014d8 <__eqdf2+0x80>)
 8001472:	030e      	lsls	r6, r1, #12
 8001474:	004c      	lsls	r4, r1, #1
 8001476:	4691      	mov	r9, r2
 8001478:	005a      	lsls	r2, r3, #1
 800147a:	0fdb      	lsrs	r3, r3, #31
 800147c:	469b      	mov	fp, r3
 800147e:	0b36      	lsrs	r6, r6, #12
 8001480:	0d64      	lsrs	r4, r4, #21
 8001482:	0fc9      	lsrs	r1, r1, #31
 8001484:	0d52      	lsrs	r2, r2, #21
 8001486:	4284      	cmp	r4, r0
 8001488:	d019      	beq.n	80014be <__eqdf2+0x66>
 800148a:	4282      	cmp	r2, r0
 800148c:	d010      	beq.n	80014b0 <__eqdf2+0x58>
 800148e:	2001      	movs	r0, #1
 8001490:	4294      	cmp	r4, r2
 8001492:	d10e      	bne.n	80014b2 <__eqdf2+0x5a>
 8001494:	454e      	cmp	r6, r9
 8001496:	d10c      	bne.n	80014b2 <__eqdf2+0x5a>
 8001498:	2001      	movs	r0, #1
 800149a:	45c4      	cmp	ip, r8
 800149c:	d109      	bne.n	80014b2 <__eqdf2+0x5a>
 800149e:	4559      	cmp	r1, fp
 80014a0:	d017      	beq.n	80014d2 <__eqdf2+0x7a>
 80014a2:	2c00      	cmp	r4, #0
 80014a4:	d105      	bne.n	80014b2 <__eqdf2+0x5a>
 80014a6:	0030      	movs	r0, r6
 80014a8:	4328      	orrs	r0, r5
 80014aa:	1e43      	subs	r3, r0, #1
 80014ac:	4198      	sbcs	r0, r3
 80014ae:	e000      	b.n	80014b2 <__eqdf2+0x5a>
 80014b0:	2001      	movs	r0, #1
 80014b2:	bcf0      	pop	{r4, r5, r6, r7}
 80014b4:	46bb      	mov	fp, r7
 80014b6:	46b2      	mov	sl, r6
 80014b8:	46a9      	mov	r9, r5
 80014ba:	46a0      	mov	r8, r4
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014be:	0033      	movs	r3, r6
 80014c0:	2001      	movs	r0, #1
 80014c2:	432b      	orrs	r3, r5
 80014c4:	d1f5      	bne.n	80014b2 <__eqdf2+0x5a>
 80014c6:	42a2      	cmp	r2, r4
 80014c8:	d1f3      	bne.n	80014b2 <__eqdf2+0x5a>
 80014ca:	464b      	mov	r3, r9
 80014cc:	433b      	orrs	r3, r7
 80014ce:	d1f0      	bne.n	80014b2 <__eqdf2+0x5a>
 80014d0:	e7e2      	b.n	8001498 <__eqdf2+0x40>
 80014d2:	2000      	movs	r0, #0
 80014d4:	e7ed      	b.n	80014b2 <__eqdf2+0x5a>
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	000007ff 	.word	0x000007ff

080014dc <__gedf2>:
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	4647      	mov	r7, r8
 80014e0:	46ce      	mov	lr, r9
 80014e2:	0004      	movs	r4, r0
 80014e4:	0018      	movs	r0, r3
 80014e6:	0016      	movs	r6, r2
 80014e8:	031b      	lsls	r3, r3, #12
 80014ea:	0b1b      	lsrs	r3, r3, #12
 80014ec:	4d2d      	ldr	r5, [pc, #180]	; (80015a4 <__gedf2+0xc8>)
 80014ee:	004a      	lsls	r2, r1, #1
 80014f0:	4699      	mov	r9, r3
 80014f2:	b580      	push	{r7, lr}
 80014f4:	0043      	lsls	r3, r0, #1
 80014f6:	030f      	lsls	r7, r1, #12
 80014f8:	46a4      	mov	ip, r4
 80014fa:	46b0      	mov	r8, r6
 80014fc:	0b3f      	lsrs	r7, r7, #12
 80014fe:	0d52      	lsrs	r2, r2, #21
 8001500:	0fc9      	lsrs	r1, r1, #31
 8001502:	0d5b      	lsrs	r3, r3, #21
 8001504:	0fc0      	lsrs	r0, r0, #31
 8001506:	42aa      	cmp	r2, r5
 8001508:	d021      	beq.n	800154e <__gedf2+0x72>
 800150a:	42ab      	cmp	r3, r5
 800150c:	d013      	beq.n	8001536 <__gedf2+0x5a>
 800150e:	2a00      	cmp	r2, #0
 8001510:	d122      	bne.n	8001558 <__gedf2+0x7c>
 8001512:	433c      	orrs	r4, r7
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <__gedf2+0x42>
 8001518:	464d      	mov	r5, r9
 800151a:	432e      	orrs	r6, r5
 800151c:	d022      	beq.n	8001564 <__gedf2+0x88>
 800151e:	2c00      	cmp	r4, #0
 8001520:	d010      	beq.n	8001544 <__gedf2+0x68>
 8001522:	4281      	cmp	r1, r0
 8001524:	d022      	beq.n	800156c <__gedf2+0x90>
 8001526:	2002      	movs	r0, #2
 8001528:	3901      	subs	r1, #1
 800152a:	4008      	ands	r0, r1
 800152c:	3801      	subs	r0, #1
 800152e:	bcc0      	pop	{r6, r7}
 8001530:	46b9      	mov	r9, r7
 8001532:	46b0      	mov	r8, r6
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001536:	464d      	mov	r5, r9
 8001538:	432e      	orrs	r6, r5
 800153a:	d129      	bne.n	8001590 <__gedf2+0xb4>
 800153c:	2a00      	cmp	r2, #0
 800153e:	d1f0      	bne.n	8001522 <__gedf2+0x46>
 8001540:	433c      	orrs	r4, r7
 8001542:	d1ee      	bne.n	8001522 <__gedf2+0x46>
 8001544:	2800      	cmp	r0, #0
 8001546:	d1f2      	bne.n	800152e <__gedf2+0x52>
 8001548:	2001      	movs	r0, #1
 800154a:	4240      	negs	r0, r0
 800154c:	e7ef      	b.n	800152e <__gedf2+0x52>
 800154e:	003d      	movs	r5, r7
 8001550:	4325      	orrs	r5, r4
 8001552:	d11d      	bne.n	8001590 <__gedf2+0xb4>
 8001554:	4293      	cmp	r3, r2
 8001556:	d0ee      	beq.n	8001536 <__gedf2+0x5a>
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e2      	bne.n	8001522 <__gedf2+0x46>
 800155c:	464c      	mov	r4, r9
 800155e:	4326      	orrs	r6, r4
 8001560:	d1df      	bne.n	8001522 <__gedf2+0x46>
 8001562:	e7e0      	b.n	8001526 <__gedf2+0x4a>
 8001564:	2000      	movs	r0, #0
 8001566:	2c00      	cmp	r4, #0
 8001568:	d0e1      	beq.n	800152e <__gedf2+0x52>
 800156a:	e7dc      	b.n	8001526 <__gedf2+0x4a>
 800156c:	429a      	cmp	r2, r3
 800156e:	dc0a      	bgt.n	8001586 <__gedf2+0xaa>
 8001570:	dbe8      	blt.n	8001544 <__gedf2+0x68>
 8001572:	454f      	cmp	r7, r9
 8001574:	d8d7      	bhi.n	8001526 <__gedf2+0x4a>
 8001576:	d00e      	beq.n	8001596 <__gedf2+0xba>
 8001578:	2000      	movs	r0, #0
 800157a:	454f      	cmp	r7, r9
 800157c:	d2d7      	bcs.n	800152e <__gedf2+0x52>
 800157e:	2900      	cmp	r1, #0
 8001580:	d0e2      	beq.n	8001548 <__gedf2+0x6c>
 8001582:	0008      	movs	r0, r1
 8001584:	e7d3      	b.n	800152e <__gedf2+0x52>
 8001586:	4243      	negs	r3, r0
 8001588:	4158      	adcs	r0, r3
 800158a:	0040      	lsls	r0, r0, #1
 800158c:	3801      	subs	r0, #1
 800158e:	e7ce      	b.n	800152e <__gedf2+0x52>
 8001590:	2002      	movs	r0, #2
 8001592:	4240      	negs	r0, r0
 8001594:	e7cb      	b.n	800152e <__gedf2+0x52>
 8001596:	45c4      	cmp	ip, r8
 8001598:	d8c5      	bhi.n	8001526 <__gedf2+0x4a>
 800159a:	2000      	movs	r0, #0
 800159c:	45c4      	cmp	ip, r8
 800159e:	d2c6      	bcs.n	800152e <__gedf2+0x52>
 80015a0:	e7ed      	b.n	800157e <__gedf2+0xa2>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	000007ff 	.word	0x000007ff

080015a8 <__ledf2>:
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	4647      	mov	r7, r8
 80015ac:	46ce      	mov	lr, r9
 80015ae:	0004      	movs	r4, r0
 80015b0:	0018      	movs	r0, r3
 80015b2:	0016      	movs	r6, r2
 80015b4:	031b      	lsls	r3, r3, #12
 80015b6:	0b1b      	lsrs	r3, r3, #12
 80015b8:	4d2c      	ldr	r5, [pc, #176]	; (800166c <__ledf2+0xc4>)
 80015ba:	004a      	lsls	r2, r1, #1
 80015bc:	4699      	mov	r9, r3
 80015be:	b580      	push	{r7, lr}
 80015c0:	0043      	lsls	r3, r0, #1
 80015c2:	030f      	lsls	r7, r1, #12
 80015c4:	46a4      	mov	ip, r4
 80015c6:	46b0      	mov	r8, r6
 80015c8:	0b3f      	lsrs	r7, r7, #12
 80015ca:	0d52      	lsrs	r2, r2, #21
 80015cc:	0fc9      	lsrs	r1, r1, #31
 80015ce:	0d5b      	lsrs	r3, r3, #21
 80015d0:	0fc0      	lsrs	r0, r0, #31
 80015d2:	42aa      	cmp	r2, r5
 80015d4:	d00d      	beq.n	80015f2 <__ledf2+0x4a>
 80015d6:	42ab      	cmp	r3, r5
 80015d8:	d010      	beq.n	80015fc <__ledf2+0x54>
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d127      	bne.n	800162e <__ledf2+0x86>
 80015de:	433c      	orrs	r4, r7
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d111      	bne.n	8001608 <__ledf2+0x60>
 80015e4:	464d      	mov	r5, r9
 80015e6:	432e      	orrs	r6, r5
 80015e8:	d10e      	bne.n	8001608 <__ledf2+0x60>
 80015ea:	2000      	movs	r0, #0
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d015      	beq.n	800161c <__ledf2+0x74>
 80015f0:	e00e      	b.n	8001610 <__ledf2+0x68>
 80015f2:	003d      	movs	r5, r7
 80015f4:	4325      	orrs	r5, r4
 80015f6:	d110      	bne.n	800161a <__ledf2+0x72>
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d118      	bne.n	800162e <__ledf2+0x86>
 80015fc:	464d      	mov	r5, r9
 80015fe:	432e      	orrs	r6, r5
 8001600:	d10b      	bne.n	800161a <__ledf2+0x72>
 8001602:	2a00      	cmp	r2, #0
 8001604:	d102      	bne.n	800160c <__ledf2+0x64>
 8001606:	433c      	orrs	r4, r7
 8001608:	2c00      	cmp	r4, #0
 800160a:	d00b      	beq.n	8001624 <__ledf2+0x7c>
 800160c:	4281      	cmp	r1, r0
 800160e:	d014      	beq.n	800163a <__ledf2+0x92>
 8001610:	2002      	movs	r0, #2
 8001612:	3901      	subs	r1, #1
 8001614:	4008      	ands	r0, r1
 8001616:	3801      	subs	r0, #1
 8001618:	e000      	b.n	800161c <__ledf2+0x74>
 800161a:	2002      	movs	r0, #2
 800161c:	bcc0      	pop	{r6, r7}
 800161e:	46b9      	mov	r9, r7
 8001620:	46b0      	mov	r8, r6
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001624:	2800      	cmp	r0, #0
 8001626:	d1f9      	bne.n	800161c <__ledf2+0x74>
 8001628:	2001      	movs	r0, #1
 800162a:	4240      	negs	r0, r0
 800162c:	e7f6      	b.n	800161c <__ledf2+0x74>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ec      	bne.n	800160c <__ledf2+0x64>
 8001632:	464c      	mov	r4, r9
 8001634:	4326      	orrs	r6, r4
 8001636:	d1e9      	bne.n	800160c <__ledf2+0x64>
 8001638:	e7ea      	b.n	8001610 <__ledf2+0x68>
 800163a:	429a      	cmp	r2, r3
 800163c:	dd04      	ble.n	8001648 <__ledf2+0xa0>
 800163e:	4243      	negs	r3, r0
 8001640:	4158      	adcs	r0, r3
 8001642:	0040      	lsls	r0, r0, #1
 8001644:	3801      	subs	r0, #1
 8001646:	e7e9      	b.n	800161c <__ledf2+0x74>
 8001648:	429a      	cmp	r2, r3
 800164a:	dbeb      	blt.n	8001624 <__ledf2+0x7c>
 800164c:	454f      	cmp	r7, r9
 800164e:	d8df      	bhi.n	8001610 <__ledf2+0x68>
 8001650:	d006      	beq.n	8001660 <__ledf2+0xb8>
 8001652:	2000      	movs	r0, #0
 8001654:	454f      	cmp	r7, r9
 8001656:	d2e1      	bcs.n	800161c <__ledf2+0x74>
 8001658:	2900      	cmp	r1, #0
 800165a:	d0e5      	beq.n	8001628 <__ledf2+0x80>
 800165c:	0008      	movs	r0, r1
 800165e:	e7dd      	b.n	800161c <__ledf2+0x74>
 8001660:	45c4      	cmp	ip, r8
 8001662:	d8d5      	bhi.n	8001610 <__ledf2+0x68>
 8001664:	2000      	movs	r0, #0
 8001666:	45c4      	cmp	ip, r8
 8001668:	d2d8      	bcs.n	800161c <__ledf2+0x74>
 800166a:	e7f5      	b.n	8001658 <__ledf2+0xb0>
 800166c:	000007ff 	.word	0x000007ff

08001670 <__aeabi_dmul>:
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	4645      	mov	r5, r8
 8001674:	46de      	mov	lr, fp
 8001676:	4657      	mov	r7, sl
 8001678:	464e      	mov	r6, r9
 800167a:	b5e0      	push	{r5, r6, r7, lr}
 800167c:	001f      	movs	r7, r3
 800167e:	030b      	lsls	r3, r1, #12
 8001680:	0b1b      	lsrs	r3, r3, #12
 8001682:	469b      	mov	fp, r3
 8001684:	004d      	lsls	r5, r1, #1
 8001686:	0fcb      	lsrs	r3, r1, #31
 8001688:	0004      	movs	r4, r0
 800168a:	4691      	mov	r9, r2
 800168c:	4698      	mov	r8, r3
 800168e:	b087      	sub	sp, #28
 8001690:	0d6d      	lsrs	r5, r5, #21
 8001692:	d100      	bne.n	8001696 <__aeabi_dmul+0x26>
 8001694:	e1cd      	b.n	8001a32 <__aeabi_dmul+0x3c2>
 8001696:	4bce      	ldr	r3, [pc, #824]	; (80019d0 <__aeabi_dmul+0x360>)
 8001698:	429d      	cmp	r5, r3
 800169a:	d100      	bne.n	800169e <__aeabi_dmul+0x2e>
 800169c:	e1e9      	b.n	8001a72 <__aeabi_dmul+0x402>
 800169e:	465a      	mov	r2, fp
 80016a0:	0f43      	lsrs	r3, r0, #29
 80016a2:	00d2      	lsls	r2, r2, #3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	0412      	lsls	r2, r2, #16
 80016aa:	431a      	orrs	r2, r3
 80016ac:	00c3      	lsls	r3, r0, #3
 80016ae:	469a      	mov	sl, r3
 80016b0:	4bc8      	ldr	r3, [pc, #800]	; (80019d4 <__aeabi_dmul+0x364>)
 80016b2:	4693      	mov	fp, r2
 80016b4:	469c      	mov	ip, r3
 80016b6:	2300      	movs	r3, #0
 80016b8:	2600      	movs	r6, #0
 80016ba:	4465      	add	r5, ip
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	033c      	lsls	r4, r7, #12
 80016c0:	007b      	lsls	r3, r7, #1
 80016c2:	4648      	mov	r0, r9
 80016c4:	0b24      	lsrs	r4, r4, #12
 80016c6:	0d5b      	lsrs	r3, r3, #21
 80016c8:	0fff      	lsrs	r7, r7, #31
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dmul+0x60>
 80016ce:	e189      	b.n	80019e4 <__aeabi_dmul+0x374>
 80016d0:	4abf      	ldr	r2, [pc, #764]	; (80019d0 <__aeabi_dmul+0x360>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <__aeabi_dmul+0x9a>
 80016d6:	0f42      	lsrs	r2, r0, #29
 80016d8:	00e4      	lsls	r4, r4, #3
 80016da:	4322      	orrs	r2, r4
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	0424      	lsls	r4, r4, #16
 80016e0:	4314      	orrs	r4, r2
 80016e2:	4abc      	ldr	r2, [pc, #752]	; (80019d4 <__aeabi_dmul+0x364>)
 80016e4:	2100      	movs	r1, #0
 80016e6:	4694      	mov	ip, r2
 80016e8:	4642      	mov	r2, r8
 80016ea:	4463      	add	r3, ip
 80016ec:	195b      	adds	r3, r3, r5
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	9b01      	ldr	r3, [sp, #4]
 80016f2:	407a      	eors	r2, r7
 80016f4:	3301      	adds	r3, #1
 80016f6:	00c0      	lsls	r0, r0, #3
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2e0a      	cmp	r6, #10
 80016fe:	dd1c      	ble.n	800173a <__aeabi_dmul+0xca>
 8001700:	003a      	movs	r2, r7
 8001702:	2e0b      	cmp	r6, #11
 8001704:	d05e      	beq.n	80017c4 <__aeabi_dmul+0x154>
 8001706:	4647      	mov	r7, r8
 8001708:	e056      	b.n	80017b8 <__aeabi_dmul+0x148>
 800170a:	4649      	mov	r1, r9
 800170c:	4bb0      	ldr	r3, [pc, #704]	; (80019d0 <__aeabi_dmul+0x360>)
 800170e:	4321      	orrs	r1, r4
 8001710:	18eb      	adds	r3, r5, r3
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2900      	cmp	r1, #0
 8001716:	d12a      	bne.n	800176e <__aeabi_dmul+0xfe>
 8001718:	2080      	movs	r0, #128	; 0x80
 800171a:	2202      	movs	r2, #2
 800171c:	0100      	lsls	r0, r0, #4
 800171e:	002b      	movs	r3, r5
 8001720:	4684      	mov	ip, r0
 8001722:	4316      	orrs	r6, r2
 8001724:	4642      	mov	r2, r8
 8001726:	4463      	add	r3, ip
 8001728:	407a      	eors	r2, r7
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	2e0a      	cmp	r6, #10
 8001730:	dd00      	ble.n	8001734 <__aeabi_dmul+0xc4>
 8001732:	e231      	b.n	8001b98 <__aeabi_dmul+0x528>
 8001734:	2000      	movs	r0, #0
 8001736:	2400      	movs	r4, #0
 8001738:	2102      	movs	r1, #2
 800173a:	2e02      	cmp	r6, #2
 800173c:	dc26      	bgt.n	800178c <__aeabi_dmul+0x11c>
 800173e:	3e01      	subs	r6, #1
 8001740:	2e01      	cmp	r6, #1
 8001742:	d852      	bhi.n	80017ea <__aeabi_dmul+0x17a>
 8001744:	2902      	cmp	r1, #2
 8001746:	d04c      	beq.n	80017e2 <__aeabi_dmul+0x172>
 8001748:	2901      	cmp	r1, #1
 800174a:	d000      	beq.n	800174e <__aeabi_dmul+0xde>
 800174c:	e118      	b.n	8001980 <__aeabi_dmul+0x310>
 800174e:	2300      	movs	r3, #0
 8001750:	2400      	movs	r4, #0
 8001752:	2500      	movs	r5, #0
 8001754:	051b      	lsls	r3, r3, #20
 8001756:	4323      	orrs	r3, r4
 8001758:	07d2      	lsls	r2, r2, #31
 800175a:	4313      	orrs	r3, r2
 800175c:	0028      	movs	r0, r5
 800175e:	0019      	movs	r1, r3
 8001760:	b007      	add	sp, #28
 8001762:	bcf0      	pop	{r4, r5, r6, r7}
 8001764:	46bb      	mov	fp, r7
 8001766:	46b2      	mov	sl, r6
 8001768:	46a9      	mov	r9, r5
 800176a:	46a0      	mov	r8, r4
 800176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	2203      	movs	r2, #3
 8001772:	0109      	lsls	r1, r1, #4
 8001774:	002b      	movs	r3, r5
 8001776:	468c      	mov	ip, r1
 8001778:	4316      	orrs	r6, r2
 800177a:	4642      	mov	r2, r8
 800177c:	4463      	add	r3, ip
 800177e:	407a      	eors	r2, r7
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2e0a      	cmp	r6, #10
 8001786:	dd00      	ble.n	800178a <__aeabi_dmul+0x11a>
 8001788:	e228      	b.n	8001bdc <__aeabi_dmul+0x56c>
 800178a:	2103      	movs	r1, #3
 800178c:	2501      	movs	r5, #1
 800178e:	40b5      	lsls	r5, r6
 8001790:	46ac      	mov	ip, r5
 8001792:	26a6      	movs	r6, #166	; 0xa6
 8001794:	4663      	mov	r3, ip
 8001796:	00f6      	lsls	r6, r6, #3
 8001798:	4035      	ands	r5, r6
 800179a:	4233      	tst	r3, r6
 800179c:	d10b      	bne.n	80017b6 <__aeabi_dmul+0x146>
 800179e:	2690      	movs	r6, #144	; 0x90
 80017a0:	00b6      	lsls	r6, r6, #2
 80017a2:	4233      	tst	r3, r6
 80017a4:	d118      	bne.n	80017d8 <__aeabi_dmul+0x168>
 80017a6:	3eb9      	subs	r6, #185	; 0xb9
 80017a8:	3eff      	subs	r6, #255	; 0xff
 80017aa:	421e      	tst	r6, r3
 80017ac:	d01d      	beq.n	80017ea <__aeabi_dmul+0x17a>
 80017ae:	46a3      	mov	fp, r4
 80017b0:	4682      	mov	sl, r0
 80017b2:	9100      	str	r1, [sp, #0]
 80017b4:	e000      	b.n	80017b8 <__aeabi_dmul+0x148>
 80017b6:	0017      	movs	r7, r2
 80017b8:	9900      	ldr	r1, [sp, #0]
 80017ba:	003a      	movs	r2, r7
 80017bc:	2902      	cmp	r1, #2
 80017be:	d010      	beq.n	80017e2 <__aeabi_dmul+0x172>
 80017c0:	465c      	mov	r4, fp
 80017c2:	4650      	mov	r0, sl
 80017c4:	2903      	cmp	r1, #3
 80017c6:	d1bf      	bne.n	8001748 <__aeabi_dmul+0xd8>
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	031b      	lsls	r3, r3, #12
 80017cc:	431c      	orrs	r4, r3
 80017ce:	0324      	lsls	r4, r4, #12
 80017d0:	0005      	movs	r5, r0
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <__aeabi_dmul+0x360>)
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	e7bd      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017d8:	2480      	movs	r4, #128	; 0x80
 80017da:	2200      	movs	r2, #0
 80017dc:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <__aeabi_dmul+0x360>)
 80017de:	0324      	lsls	r4, r4, #12
 80017e0:	e7b8      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017e2:	2400      	movs	r4, #0
 80017e4:	2500      	movs	r5, #0
 80017e6:	4b7a      	ldr	r3, [pc, #488]	; (80019d0 <__aeabi_dmul+0x360>)
 80017e8:	e7b4      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017ea:	4653      	mov	r3, sl
 80017ec:	041e      	lsls	r6, r3, #16
 80017ee:	0c36      	lsrs	r6, r6, #16
 80017f0:	0c1f      	lsrs	r7, r3, #16
 80017f2:	0033      	movs	r3, r6
 80017f4:	0c01      	lsrs	r1, r0, #16
 80017f6:	0400      	lsls	r0, r0, #16
 80017f8:	0c00      	lsrs	r0, r0, #16
 80017fa:	4343      	muls	r3, r0
 80017fc:	4698      	mov	r8, r3
 80017fe:	0003      	movs	r3, r0
 8001800:	437b      	muls	r3, r7
 8001802:	4699      	mov	r9, r3
 8001804:	0033      	movs	r3, r6
 8001806:	434b      	muls	r3, r1
 8001808:	469c      	mov	ip, r3
 800180a:	4643      	mov	r3, r8
 800180c:	000d      	movs	r5, r1
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	469a      	mov	sl, r3
 8001812:	437d      	muls	r5, r7
 8001814:	44cc      	add	ip, r9
 8001816:	44d4      	add	ip, sl
 8001818:	9500      	str	r5, [sp, #0]
 800181a:	45e1      	cmp	r9, ip
 800181c:	d904      	bls.n	8001828 <__aeabi_dmul+0x1b8>
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	025b      	lsls	r3, r3, #9
 8001822:	4699      	mov	r9, r3
 8001824:	444d      	add	r5, r9
 8001826:	9500      	str	r5, [sp, #0]
 8001828:	4663      	mov	r3, ip
 800182a:	0c1b      	lsrs	r3, r3, #16
 800182c:	001d      	movs	r5, r3
 800182e:	4663      	mov	r3, ip
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	469c      	mov	ip, r3
 8001834:	4643      	mov	r3, r8
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	4698      	mov	r8, r3
 800183c:	4663      	mov	r3, ip
 800183e:	4443      	add	r3, r8
 8001840:	9303      	str	r3, [sp, #12]
 8001842:	0c23      	lsrs	r3, r4, #16
 8001844:	4698      	mov	r8, r3
 8001846:	0033      	movs	r3, r6
 8001848:	0424      	lsls	r4, r4, #16
 800184a:	0c24      	lsrs	r4, r4, #16
 800184c:	4363      	muls	r3, r4
 800184e:	469c      	mov	ip, r3
 8001850:	0023      	movs	r3, r4
 8001852:	437b      	muls	r3, r7
 8001854:	4699      	mov	r9, r3
 8001856:	4643      	mov	r3, r8
 8001858:	435e      	muls	r6, r3
 800185a:	435f      	muls	r7, r3
 800185c:	444e      	add	r6, r9
 800185e:	4663      	mov	r3, ip
 8001860:	46b2      	mov	sl, r6
 8001862:	0c1e      	lsrs	r6, r3, #16
 8001864:	4456      	add	r6, sl
 8001866:	45b1      	cmp	r9, r6
 8001868:	d903      	bls.n	8001872 <__aeabi_dmul+0x202>
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	025b      	lsls	r3, r3, #9
 800186e:	4699      	mov	r9, r3
 8001870:	444f      	add	r7, r9
 8001872:	0c33      	lsrs	r3, r6, #16
 8001874:	4699      	mov	r9, r3
 8001876:	003b      	movs	r3, r7
 8001878:	444b      	add	r3, r9
 800187a:	9305      	str	r3, [sp, #20]
 800187c:	4663      	mov	r3, ip
 800187e:	46ac      	mov	ip, r5
 8001880:	041f      	lsls	r7, r3, #16
 8001882:	0c3f      	lsrs	r7, r7, #16
 8001884:	0436      	lsls	r6, r6, #16
 8001886:	19f6      	adds	r6, r6, r7
 8001888:	44b4      	add	ip, r6
 800188a:	4663      	mov	r3, ip
 800188c:	9304      	str	r3, [sp, #16]
 800188e:	465b      	mov	r3, fp
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	469c      	mov	ip, r3
 8001894:	465b      	mov	r3, fp
 8001896:	041f      	lsls	r7, r3, #16
 8001898:	0c3f      	lsrs	r7, r7, #16
 800189a:	003b      	movs	r3, r7
 800189c:	4343      	muls	r3, r0
 800189e:	4699      	mov	r9, r3
 80018a0:	4663      	mov	r3, ip
 80018a2:	4343      	muls	r3, r0
 80018a4:	469a      	mov	sl, r3
 80018a6:	464b      	mov	r3, r9
 80018a8:	4660      	mov	r0, ip
 80018aa:	0c1b      	lsrs	r3, r3, #16
 80018ac:	469b      	mov	fp, r3
 80018ae:	4348      	muls	r0, r1
 80018b0:	4379      	muls	r1, r7
 80018b2:	4451      	add	r1, sl
 80018b4:	4459      	add	r1, fp
 80018b6:	458a      	cmp	sl, r1
 80018b8:	d903      	bls.n	80018c2 <__aeabi_dmul+0x252>
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	469a      	mov	sl, r3
 80018c0:	4450      	add	r0, sl
 80018c2:	0c0b      	lsrs	r3, r1, #16
 80018c4:	469a      	mov	sl, r3
 80018c6:	464b      	mov	r3, r9
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	4699      	mov	r9, r3
 80018ce:	003b      	movs	r3, r7
 80018d0:	4363      	muls	r3, r4
 80018d2:	0409      	lsls	r1, r1, #16
 80018d4:	4645      	mov	r5, r8
 80018d6:	4449      	add	r1, r9
 80018d8:	4699      	mov	r9, r3
 80018da:	4663      	mov	r3, ip
 80018dc:	435c      	muls	r4, r3
 80018de:	436b      	muls	r3, r5
 80018e0:	469c      	mov	ip, r3
 80018e2:	464b      	mov	r3, r9
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	4698      	mov	r8, r3
 80018e8:	436f      	muls	r7, r5
 80018ea:	193f      	adds	r7, r7, r4
 80018ec:	4447      	add	r7, r8
 80018ee:	4450      	add	r0, sl
 80018f0:	42bc      	cmp	r4, r7
 80018f2:	d903      	bls.n	80018fc <__aeabi_dmul+0x28c>
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	4698      	mov	r8, r3
 80018fa:	44c4      	add	ip, r8
 80018fc:	9b04      	ldr	r3, [sp, #16]
 80018fe:	9d00      	ldr	r5, [sp, #0]
 8001900:	4698      	mov	r8, r3
 8001902:	4445      	add	r5, r8
 8001904:	42b5      	cmp	r5, r6
 8001906:	41b6      	sbcs	r6, r6
 8001908:	4273      	negs	r3, r6
 800190a:	4698      	mov	r8, r3
 800190c:	464b      	mov	r3, r9
 800190e:	041e      	lsls	r6, r3, #16
 8001910:	9b05      	ldr	r3, [sp, #20]
 8001912:	043c      	lsls	r4, r7, #16
 8001914:	4699      	mov	r9, r3
 8001916:	0c36      	lsrs	r6, r6, #16
 8001918:	19a4      	adds	r4, r4, r6
 800191a:	444c      	add	r4, r9
 800191c:	46a1      	mov	r9, r4
 800191e:	4683      	mov	fp, r0
 8001920:	186e      	adds	r6, r5, r1
 8001922:	44c1      	add	r9, r8
 8001924:	428e      	cmp	r6, r1
 8001926:	4189      	sbcs	r1, r1
 8001928:	44cb      	add	fp, r9
 800192a:	465d      	mov	r5, fp
 800192c:	4249      	negs	r1, r1
 800192e:	186d      	adds	r5, r5, r1
 8001930:	429c      	cmp	r4, r3
 8001932:	41a4      	sbcs	r4, r4
 8001934:	45c1      	cmp	r9, r8
 8001936:	419b      	sbcs	r3, r3
 8001938:	4583      	cmp	fp, r0
 800193a:	4180      	sbcs	r0, r0
 800193c:	428d      	cmp	r5, r1
 800193e:	4189      	sbcs	r1, r1
 8001940:	425b      	negs	r3, r3
 8001942:	4264      	negs	r4, r4
 8001944:	431c      	orrs	r4, r3
 8001946:	4240      	negs	r0, r0
 8001948:	9b03      	ldr	r3, [sp, #12]
 800194a:	4249      	negs	r1, r1
 800194c:	4301      	orrs	r1, r0
 800194e:	0270      	lsls	r0, r6, #9
 8001950:	0c3f      	lsrs	r7, r7, #16
 8001952:	4318      	orrs	r0, r3
 8001954:	19e4      	adds	r4, r4, r7
 8001956:	1e47      	subs	r7, r0, #1
 8001958:	41b8      	sbcs	r0, r7
 800195a:	1864      	adds	r4, r4, r1
 800195c:	4464      	add	r4, ip
 800195e:	0df6      	lsrs	r6, r6, #23
 8001960:	0261      	lsls	r1, r4, #9
 8001962:	4330      	orrs	r0, r6
 8001964:	0dec      	lsrs	r4, r5, #23
 8001966:	026e      	lsls	r6, r5, #9
 8001968:	430c      	orrs	r4, r1
 800196a:	4330      	orrs	r0, r6
 800196c:	01c9      	lsls	r1, r1, #7
 800196e:	d400      	bmi.n	8001972 <__aeabi_dmul+0x302>
 8001970:	e0f1      	b.n	8001b56 <__aeabi_dmul+0x4e6>
 8001972:	2101      	movs	r1, #1
 8001974:	0843      	lsrs	r3, r0, #1
 8001976:	4001      	ands	r1, r0
 8001978:	430b      	orrs	r3, r1
 800197a:	07e0      	lsls	r0, r4, #31
 800197c:	4318      	orrs	r0, r3
 800197e:	0864      	lsrs	r4, r4, #1
 8001980:	4915      	ldr	r1, [pc, #84]	; (80019d8 <__aeabi_dmul+0x368>)
 8001982:	9b02      	ldr	r3, [sp, #8]
 8001984:	468c      	mov	ip, r1
 8001986:	4463      	add	r3, ip
 8001988:	2b00      	cmp	r3, #0
 800198a:	dc00      	bgt.n	800198e <__aeabi_dmul+0x31e>
 800198c:	e097      	b.n	8001abe <__aeabi_dmul+0x44e>
 800198e:	0741      	lsls	r1, r0, #29
 8001990:	d009      	beq.n	80019a6 <__aeabi_dmul+0x336>
 8001992:	210f      	movs	r1, #15
 8001994:	4001      	ands	r1, r0
 8001996:	2904      	cmp	r1, #4
 8001998:	d005      	beq.n	80019a6 <__aeabi_dmul+0x336>
 800199a:	1d01      	adds	r1, r0, #4
 800199c:	4281      	cmp	r1, r0
 800199e:	4180      	sbcs	r0, r0
 80019a0:	4240      	negs	r0, r0
 80019a2:	1824      	adds	r4, r4, r0
 80019a4:	0008      	movs	r0, r1
 80019a6:	01e1      	lsls	r1, r4, #7
 80019a8:	d506      	bpl.n	80019b8 <__aeabi_dmul+0x348>
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	00c9      	lsls	r1, r1, #3
 80019ae:	468c      	mov	ip, r1
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <__aeabi_dmul+0x36c>)
 80019b2:	401c      	ands	r4, r3
 80019b4:	9b02      	ldr	r3, [sp, #8]
 80019b6:	4463      	add	r3, ip
 80019b8:	4909      	ldr	r1, [pc, #36]	; (80019e0 <__aeabi_dmul+0x370>)
 80019ba:	428b      	cmp	r3, r1
 80019bc:	dd00      	ble.n	80019c0 <__aeabi_dmul+0x350>
 80019be:	e710      	b.n	80017e2 <__aeabi_dmul+0x172>
 80019c0:	0761      	lsls	r1, r4, #29
 80019c2:	08c5      	lsrs	r5, r0, #3
 80019c4:	0264      	lsls	r4, r4, #9
 80019c6:	055b      	lsls	r3, r3, #21
 80019c8:	430d      	orrs	r5, r1
 80019ca:	0b24      	lsrs	r4, r4, #12
 80019cc:	0d5b      	lsrs	r3, r3, #21
 80019ce:	e6c1      	b.n	8001754 <__aeabi_dmul+0xe4>
 80019d0:	000007ff 	.word	0x000007ff
 80019d4:	fffffc01 	.word	0xfffffc01
 80019d8:	000003ff 	.word	0x000003ff
 80019dc:	feffffff 	.word	0xfeffffff
 80019e0:	000007fe 	.word	0x000007fe
 80019e4:	464b      	mov	r3, r9
 80019e6:	4323      	orrs	r3, r4
 80019e8:	d059      	beq.n	8001a9e <__aeabi_dmul+0x42e>
 80019ea:	2c00      	cmp	r4, #0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dmul+0x380>
 80019ee:	e0a3      	b.n	8001b38 <__aeabi_dmul+0x4c8>
 80019f0:	0020      	movs	r0, r4
 80019f2:	f000 fdb1 	bl	8002558 <__clzsi2>
 80019f6:	0001      	movs	r1, r0
 80019f8:	0003      	movs	r3, r0
 80019fa:	390b      	subs	r1, #11
 80019fc:	221d      	movs	r2, #29
 80019fe:	1a52      	subs	r2, r2, r1
 8001a00:	4649      	mov	r1, r9
 8001a02:	0018      	movs	r0, r3
 8001a04:	40d1      	lsrs	r1, r2
 8001a06:	464a      	mov	r2, r9
 8001a08:	3808      	subs	r0, #8
 8001a0a:	4082      	lsls	r2, r0
 8001a0c:	4084      	lsls	r4, r0
 8001a0e:	0010      	movs	r0, r2
 8001a10:	430c      	orrs	r4, r1
 8001a12:	4a74      	ldr	r2, [pc, #464]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a14:	1aeb      	subs	r3, r5, r3
 8001a16:	4694      	mov	ip, r2
 8001a18:	4642      	mov	r2, r8
 8001a1a:	4463      	add	r3, ip
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	9b01      	ldr	r3, [sp, #4]
 8001a20:	407a      	eors	r2, r7
 8001a22:	3301      	adds	r3, #1
 8001a24:	2100      	movs	r1, #0
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	2e0a      	cmp	r6, #10
 8001a2c:	dd00      	ble.n	8001a30 <__aeabi_dmul+0x3c0>
 8001a2e:	e667      	b.n	8001700 <__aeabi_dmul+0x90>
 8001a30:	e683      	b.n	800173a <__aeabi_dmul+0xca>
 8001a32:	465b      	mov	r3, fp
 8001a34:	4303      	orrs	r3, r0
 8001a36:	469a      	mov	sl, r3
 8001a38:	d02a      	beq.n	8001a90 <__aeabi_dmul+0x420>
 8001a3a:	465b      	mov	r3, fp
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d06d      	beq.n	8001b1c <__aeabi_dmul+0x4ac>
 8001a40:	4658      	mov	r0, fp
 8001a42:	f000 fd89 	bl	8002558 <__clzsi2>
 8001a46:	0001      	movs	r1, r0
 8001a48:	0003      	movs	r3, r0
 8001a4a:	390b      	subs	r1, #11
 8001a4c:	221d      	movs	r2, #29
 8001a4e:	1a52      	subs	r2, r2, r1
 8001a50:	0021      	movs	r1, r4
 8001a52:	0018      	movs	r0, r3
 8001a54:	465d      	mov	r5, fp
 8001a56:	40d1      	lsrs	r1, r2
 8001a58:	3808      	subs	r0, #8
 8001a5a:	4085      	lsls	r5, r0
 8001a5c:	000a      	movs	r2, r1
 8001a5e:	4084      	lsls	r4, r0
 8001a60:	432a      	orrs	r2, r5
 8001a62:	4693      	mov	fp, r2
 8001a64:	46a2      	mov	sl, r4
 8001a66:	4d5f      	ldr	r5, [pc, #380]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a68:	2600      	movs	r6, #0
 8001a6a:	1aed      	subs	r5, r5, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	e625      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a72:	465b      	mov	r3, fp
 8001a74:	4303      	orrs	r3, r0
 8001a76:	469a      	mov	sl, r3
 8001a78:	d105      	bne.n	8001a86 <__aeabi_dmul+0x416>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	3302      	adds	r3, #2
 8001a80:	2608      	movs	r6, #8
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	e61b      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a86:	2303      	movs	r3, #3
 8001a88:	4682      	mov	sl, r0
 8001a8a:	260c      	movs	r6, #12
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	e616      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a90:	2300      	movs	r3, #0
 8001a92:	469b      	mov	fp, r3
 8001a94:	3301      	adds	r3, #1
 8001a96:	2604      	movs	r6, #4
 8001a98:	2500      	movs	r5, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	e60f      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a9e:	4642      	mov	r2, r8
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	9501      	str	r5, [sp, #4]
 8001aa4:	431e      	orrs	r6, r3
 8001aa6:	9b01      	ldr	r3, [sp, #4]
 8001aa8:	407a      	eors	r2, r7
 8001aaa:	3301      	adds	r3, #1
 8001aac:	2400      	movs	r4, #0
 8001aae:	2000      	movs	r0, #0
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2e0a      	cmp	r6, #10
 8001ab8:	dd00      	ble.n	8001abc <__aeabi_dmul+0x44c>
 8001aba:	e621      	b.n	8001700 <__aeabi_dmul+0x90>
 8001abc:	e63d      	b.n	800173a <__aeabi_dmul+0xca>
 8001abe:	2101      	movs	r1, #1
 8001ac0:	1ac9      	subs	r1, r1, r3
 8001ac2:	2938      	cmp	r1, #56	; 0x38
 8001ac4:	dd00      	ble.n	8001ac8 <__aeabi_dmul+0x458>
 8001ac6:	e642      	b.n	800174e <__aeabi_dmul+0xde>
 8001ac8:	291f      	cmp	r1, #31
 8001aca:	dd47      	ble.n	8001b5c <__aeabi_dmul+0x4ec>
 8001acc:	261f      	movs	r6, #31
 8001ace:	0025      	movs	r5, r4
 8001ad0:	4276      	negs	r6, r6
 8001ad2:	1af3      	subs	r3, r6, r3
 8001ad4:	40dd      	lsrs	r5, r3
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	2920      	cmp	r1, #32
 8001ada:	d005      	beq.n	8001ae8 <__aeabi_dmul+0x478>
 8001adc:	4942      	ldr	r1, [pc, #264]	; (8001be8 <__aeabi_dmul+0x578>)
 8001ade:	9d02      	ldr	r5, [sp, #8]
 8001ae0:	468c      	mov	ip, r1
 8001ae2:	4465      	add	r5, ip
 8001ae4:	40ac      	lsls	r4, r5
 8001ae6:	4320      	orrs	r0, r4
 8001ae8:	1e41      	subs	r1, r0, #1
 8001aea:	4188      	sbcs	r0, r1
 8001aec:	4318      	orrs	r0, r3
 8001aee:	2307      	movs	r3, #7
 8001af0:	001d      	movs	r5, r3
 8001af2:	2400      	movs	r4, #0
 8001af4:	4005      	ands	r5, r0
 8001af6:	4203      	tst	r3, r0
 8001af8:	d04a      	beq.n	8001b90 <__aeabi_dmul+0x520>
 8001afa:	230f      	movs	r3, #15
 8001afc:	2400      	movs	r4, #0
 8001afe:	4003      	ands	r3, r0
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d042      	beq.n	8001b8a <__aeabi_dmul+0x51a>
 8001b04:	1d03      	adds	r3, r0, #4
 8001b06:	4283      	cmp	r3, r0
 8001b08:	4180      	sbcs	r0, r0
 8001b0a:	4240      	negs	r0, r0
 8001b0c:	1824      	adds	r4, r4, r0
 8001b0e:	0018      	movs	r0, r3
 8001b10:	0223      	lsls	r3, r4, #8
 8001b12:	d53a      	bpl.n	8001b8a <__aeabi_dmul+0x51a>
 8001b14:	2301      	movs	r3, #1
 8001b16:	2400      	movs	r4, #0
 8001b18:	2500      	movs	r5, #0
 8001b1a:	e61b      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b1c:	f000 fd1c 	bl	8002558 <__clzsi2>
 8001b20:	0001      	movs	r1, r0
 8001b22:	0003      	movs	r3, r0
 8001b24:	3115      	adds	r1, #21
 8001b26:	3320      	adds	r3, #32
 8001b28:	291c      	cmp	r1, #28
 8001b2a:	dd8f      	ble.n	8001a4c <__aeabi_dmul+0x3dc>
 8001b2c:	3808      	subs	r0, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4084      	lsls	r4, r0
 8001b32:	4692      	mov	sl, r2
 8001b34:	46a3      	mov	fp, r4
 8001b36:	e796      	b.n	8001a66 <__aeabi_dmul+0x3f6>
 8001b38:	f000 fd0e 	bl	8002558 <__clzsi2>
 8001b3c:	0001      	movs	r1, r0
 8001b3e:	0003      	movs	r3, r0
 8001b40:	3115      	adds	r1, #21
 8001b42:	3320      	adds	r3, #32
 8001b44:	291c      	cmp	r1, #28
 8001b46:	dc00      	bgt.n	8001b4a <__aeabi_dmul+0x4da>
 8001b48:	e758      	b.n	80019fc <__aeabi_dmul+0x38c>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	464c      	mov	r4, r9
 8001b4e:	3a08      	subs	r2, #8
 8001b50:	2000      	movs	r0, #0
 8001b52:	4094      	lsls	r4, r2
 8001b54:	e75d      	b.n	8001a12 <__aeabi_dmul+0x3a2>
 8001b56:	9b01      	ldr	r3, [sp, #4]
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	e711      	b.n	8001980 <__aeabi_dmul+0x310>
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <__aeabi_dmul+0x57c>)
 8001b5e:	0026      	movs	r6, r4
 8001b60:	469c      	mov	ip, r3
 8001b62:	0003      	movs	r3, r0
 8001b64:	9d02      	ldr	r5, [sp, #8]
 8001b66:	40cb      	lsrs	r3, r1
 8001b68:	4465      	add	r5, ip
 8001b6a:	40ae      	lsls	r6, r5
 8001b6c:	431e      	orrs	r6, r3
 8001b6e:	0003      	movs	r3, r0
 8001b70:	40ab      	lsls	r3, r5
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	4183      	sbcs	r3, r0
 8001b76:	0030      	movs	r0, r6
 8001b78:	4318      	orrs	r0, r3
 8001b7a:	40cc      	lsrs	r4, r1
 8001b7c:	0743      	lsls	r3, r0, #29
 8001b7e:	d0c7      	beq.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b80:	230f      	movs	r3, #15
 8001b82:	4003      	ands	r3, r0
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d1bd      	bne.n	8001b04 <__aeabi_dmul+0x494>
 8001b88:	e7c2      	b.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b8a:	0765      	lsls	r5, r4, #29
 8001b8c:	0264      	lsls	r4, r4, #9
 8001b8e:	0b24      	lsrs	r4, r4, #12
 8001b90:	08c0      	lsrs	r0, r0, #3
 8001b92:	2300      	movs	r3, #0
 8001b94:	4305      	orrs	r5, r0
 8001b96:	e5dd      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b98:	2500      	movs	r5, #0
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	2e0f      	cmp	r6, #15
 8001b9e:	d10c      	bne.n	8001bba <__aeabi_dmul+0x54a>
 8001ba0:	2480      	movs	r4, #128	; 0x80
 8001ba2:	465b      	mov	r3, fp
 8001ba4:	0324      	lsls	r4, r4, #12
 8001ba6:	4223      	tst	r3, r4
 8001ba8:	d00e      	beq.n	8001bc8 <__aeabi_dmul+0x558>
 8001baa:	4221      	tst	r1, r4
 8001bac:	d10c      	bne.n	8001bc8 <__aeabi_dmul+0x558>
 8001bae:	430c      	orrs	r4, r1
 8001bb0:	0324      	lsls	r4, r4, #12
 8001bb2:	003a      	movs	r2, r7
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bb6:	0b24      	lsrs	r4, r4, #12
 8001bb8:	e5cc      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bba:	2e0b      	cmp	r6, #11
 8001bbc:	d000      	beq.n	8001bc0 <__aeabi_dmul+0x550>
 8001bbe:	e5a2      	b.n	8001706 <__aeabi_dmul+0x96>
 8001bc0:	468b      	mov	fp, r1
 8001bc2:	46aa      	mov	sl, r5
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	e5f7      	b.n	80017b8 <__aeabi_dmul+0x148>
 8001bc8:	2480      	movs	r4, #128	; 0x80
 8001bca:	465b      	mov	r3, fp
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	431c      	orrs	r4, r3
 8001bd0:	0324      	lsls	r4, r4, #12
 8001bd2:	4642      	mov	r2, r8
 8001bd4:	4655      	mov	r5, sl
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bd8:	0b24      	lsrs	r4, r4, #12
 8001bda:	e5bb      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bdc:	464d      	mov	r5, r9
 8001bde:	0021      	movs	r1, r4
 8001be0:	2303      	movs	r3, #3
 8001be2:	e7db      	b.n	8001b9c <__aeabi_dmul+0x52c>
 8001be4:	fffffc0d 	.word	0xfffffc0d
 8001be8:	0000043e 	.word	0x0000043e
 8001bec:	0000041e 	.word	0x0000041e
 8001bf0:	000007ff 	.word	0x000007ff

08001bf4 <__aeabi_dsub>:
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	4657      	mov	r7, sl
 8001bf8:	464e      	mov	r6, r9
 8001bfa:	4645      	mov	r5, r8
 8001bfc:	46de      	mov	lr, fp
 8001bfe:	b5e0      	push	{r5, r6, r7, lr}
 8001c00:	000d      	movs	r5, r1
 8001c02:	0004      	movs	r4, r0
 8001c04:	0019      	movs	r1, r3
 8001c06:	0010      	movs	r0, r2
 8001c08:	032b      	lsls	r3, r5, #12
 8001c0a:	0a5b      	lsrs	r3, r3, #9
 8001c0c:	0f62      	lsrs	r2, r4, #29
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	00e3      	lsls	r3, r4, #3
 8001c12:	030c      	lsls	r4, r1, #12
 8001c14:	0a64      	lsrs	r4, r4, #9
 8001c16:	0f47      	lsrs	r7, r0, #29
 8001c18:	4327      	orrs	r7, r4
 8001c1a:	4cd0      	ldr	r4, [pc, #832]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c1c:	006e      	lsls	r6, r5, #1
 8001c1e:	4691      	mov	r9, r2
 8001c20:	b083      	sub	sp, #12
 8001c22:	004a      	lsls	r2, r1, #1
 8001c24:	00c0      	lsls	r0, r0, #3
 8001c26:	4698      	mov	r8, r3
 8001c28:	46a2      	mov	sl, r4
 8001c2a:	0d76      	lsrs	r6, r6, #21
 8001c2c:	0fed      	lsrs	r5, r5, #31
 8001c2e:	0d52      	lsrs	r2, r2, #21
 8001c30:	0fc9      	lsrs	r1, r1, #31
 8001c32:	9001      	str	r0, [sp, #4]
 8001c34:	42a2      	cmp	r2, r4
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x46>
 8001c38:	e0b9      	b.n	8001dae <__aeabi_dsub+0x1ba>
 8001c3a:	2401      	movs	r4, #1
 8001c3c:	4061      	eors	r1, r4
 8001c3e:	468b      	mov	fp, r1
 8001c40:	428d      	cmp	r5, r1
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dsub+0x52>
 8001c44:	e08d      	b.n	8001d62 <__aeabi_dsub+0x16e>
 8001c46:	1ab4      	subs	r4, r6, r2
 8001c48:	46a4      	mov	ip, r4
 8001c4a:	2c00      	cmp	r4, #0
 8001c4c:	dc00      	bgt.n	8001c50 <__aeabi_dsub+0x5c>
 8001c4e:	e0b7      	b.n	8001dc0 <__aeabi_dsub+0x1cc>
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x62>
 8001c54:	e0cb      	b.n	8001dee <__aeabi_dsub+0x1fa>
 8001c56:	4ac1      	ldr	r2, [pc, #772]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c58:	4296      	cmp	r6, r2
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x6a>
 8001c5c:	e186      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	0412      	lsls	r2, r2, #16
 8001c62:	4317      	orrs	r7, r2
 8001c64:	4662      	mov	r2, ip
 8001c66:	2a38      	cmp	r2, #56	; 0x38
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x78>
 8001c6a:	e1a4      	b.n	8001fb6 <__aeabi_dsub+0x3c2>
 8001c6c:	2a1f      	cmp	r2, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x7e>
 8001c70:	e21d      	b.n	80020ae <__aeabi_dsub+0x4ba>
 8001c72:	4661      	mov	r1, ip
 8001c74:	2220      	movs	r2, #32
 8001c76:	003c      	movs	r4, r7
 8001c78:	1a52      	subs	r2, r2, r1
 8001c7a:	0001      	movs	r1, r0
 8001c7c:	4090      	lsls	r0, r2
 8001c7e:	4094      	lsls	r4, r2
 8001c80:	1e42      	subs	r2, r0, #1
 8001c82:	4190      	sbcs	r0, r2
 8001c84:	4662      	mov	r2, ip
 8001c86:	46a0      	mov	r8, r4
 8001c88:	4664      	mov	r4, ip
 8001c8a:	40d7      	lsrs	r7, r2
 8001c8c:	464a      	mov	r2, r9
 8001c8e:	40e1      	lsrs	r1, r4
 8001c90:	4644      	mov	r4, r8
 8001c92:	1bd2      	subs	r2, r2, r7
 8001c94:	4691      	mov	r9, r2
 8001c96:	430c      	orrs	r4, r1
 8001c98:	4304      	orrs	r4, r0
 8001c9a:	1b1c      	subs	r4, r3, r4
 8001c9c:	42a3      	cmp	r3, r4
 8001c9e:	4192      	sbcs	r2, r2
 8001ca0:	464b      	mov	r3, r9
 8001ca2:	4252      	negs	r2, r2
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	469a      	mov	sl, r3
 8001ca8:	4653      	mov	r3, sl
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	d400      	bmi.n	8001cb0 <__aeabi_dsub+0xbc>
 8001cae:	e12b      	b.n	8001f08 <__aeabi_dsub+0x314>
 8001cb0:	4653      	mov	r3, sl
 8001cb2:	025a      	lsls	r2, r3, #9
 8001cb4:	0a53      	lsrs	r3, r2, #9
 8001cb6:	469a      	mov	sl, r3
 8001cb8:	4653      	mov	r3, sl
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0xcc>
 8001cbe:	e166      	b.n	8001f8e <__aeabi_dsub+0x39a>
 8001cc0:	4650      	mov	r0, sl
 8001cc2:	f000 fc49 	bl	8002558 <__clzsi2>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	3b08      	subs	r3, #8
 8001cca:	2220      	movs	r2, #32
 8001ccc:	0020      	movs	r0, r4
 8001cce:	1ad2      	subs	r2, r2, r3
 8001cd0:	4651      	mov	r1, sl
 8001cd2:	40d0      	lsrs	r0, r2
 8001cd4:	4099      	lsls	r1, r3
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	409c      	lsls	r4, r3
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	429e      	cmp	r6, r3
 8001cde:	dd00      	ble.n	8001ce2 <__aeabi_dsub+0xee>
 8001ce0:	e164      	b.n	8001fac <__aeabi_dsub+0x3b8>
 8001ce2:	1b9b      	subs	r3, r3, r6
 8001ce4:	1c59      	adds	r1, r3, #1
 8001ce6:	291f      	cmp	r1, #31
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0xf8>
 8001cea:	e0fe      	b.n	8001eea <__aeabi_dsub+0x2f6>
 8001cec:	2320      	movs	r3, #32
 8001cee:	0010      	movs	r0, r2
 8001cf0:	0026      	movs	r6, r4
 8001cf2:	1a5b      	subs	r3, r3, r1
 8001cf4:	409c      	lsls	r4, r3
 8001cf6:	4098      	lsls	r0, r3
 8001cf8:	40ce      	lsrs	r6, r1
 8001cfa:	40ca      	lsrs	r2, r1
 8001cfc:	1e63      	subs	r3, r4, #1
 8001cfe:	419c      	sbcs	r4, r3
 8001d00:	4330      	orrs	r0, r6
 8001d02:	4692      	mov	sl, r2
 8001d04:	2600      	movs	r6, #0
 8001d06:	4304      	orrs	r4, r0
 8001d08:	0763      	lsls	r3, r4, #29
 8001d0a:	d009      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	4023      	ands	r3, r4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d005      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d14:	1d23      	adds	r3, r4, #4
 8001d16:	42a3      	cmp	r3, r4
 8001d18:	41a4      	sbcs	r4, r4
 8001d1a:	4264      	negs	r4, r4
 8001d1c:	44a2      	add	sl, r4
 8001d1e:	001c      	movs	r4, r3
 8001d20:	4653      	mov	r3, sl
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	d400      	bmi.n	8001d28 <__aeabi_dsub+0x134>
 8001d26:	e0f2      	b.n	8001f0e <__aeabi_dsub+0x31a>
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <__aeabi_dsub+0x368>)
 8001d2a:	3601      	adds	r6, #1
 8001d2c:	429e      	cmp	r6, r3
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x13e>
 8001d30:	e10f      	b.n	8001f52 <__aeabi_dsub+0x35e>
 8001d32:	4653      	mov	r3, sl
 8001d34:	498a      	ldr	r1, [pc, #552]	; (8001f60 <__aeabi_dsub+0x36c>)
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	400b      	ands	r3, r1
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	075b      	lsls	r3, r3, #29
 8001d3e:	4323      	orrs	r3, r4
 8001d40:	0572      	lsls	r2, r6, #21
 8001d42:	024c      	lsls	r4, r1, #9
 8001d44:	0b24      	lsrs	r4, r4, #12
 8001d46:	0d52      	lsrs	r2, r2, #21
 8001d48:	0512      	lsls	r2, r2, #20
 8001d4a:	4322      	orrs	r2, r4
 8001d4c:	07ed      	lsls	r5, r5, #31
 8001d4e:	432a      	orrs	r2, r5
 8001d50:	0018      	movs	r0, r3
 8001d52:	0011      	movs	r1, r2
 8001d54:	b003      	add	sp, #12
 8001d56:	bcf0      	pop	{r4, r5, r6, r7}
 8001d58:	46bb      	mov	fp, r7
 8001d5a:	46b2      	mov	sl, r6
 8001d5c:	46a9      	mov	r9, r5
 8001d5e:	46a0      	mov	r8, r4
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d62:	1ab4      	subs	r4, r6, r2
 8001d64:	46a4      	mov	ip, r4
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	dd59      	ble.n	8001e1e <__aeabi_dsub+0x22a>
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x17c>
 8001d6e:	e0b0      	b.n	8001ed2 <__aeabi_dsub+0x2de>
 8001d70:	4556      	cmp	r6, sl
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x182>
 8001d74:	e0fa      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0412      	lsls	r2, r2, #16
 8001d7a:	4317      	orrs	r7, r2
 8001d7c:	4662      	mov	r2, ip
 8001d7e:	2a38      	cmp	r2, #56	; 0x38
 8001d80:	dd00      	ble.n	8001d84 <__aeabi_dsub+0x190>
 8001d82:	e0d4      	b.n	8001f2e <__aeabi_dsub+0x33a>
 8001d84:	2a1f      	cmp	r2, #31
 8001d86:	dc00      	bgt.n	8001d8a <__aeabi_dsub+0x196>
 8001d88:	e1c0      	b.n	800210c <__aeabi_dsub+0x518>
 8001d8a:	0039      	movs	r1, r7
 8001d8c:	3a20      	subs	r2, #32
 8001d8e:	40d1      	lsrs	r1, r2
 8001d90:	4662      	mov	r2, ip
 8001d92:	2a20      	cmp	r2, #32
 8001d94:	d006      	beq.n	8001da4 <__aeabi_dsub+0x1b0>
 8001d96:	4664      	mov	r4, ip
 8001d98:	2240      	movs	r2, #64	; 0x40
 8001d9a:	1b12      	subs	r2, r2, r4
 8001d9c:	003c      	movs	r4, r7
 8001d9e:	4094      	lsls	r4, r2
 8001da0:	4304      	orrs	r4, r0
 8001da2:	9401      	str	r4, [sp, #4]
 8001da4:	9c01      	ldr	r4, [sp, #4]
 8001da6:	1e62      	subs	r2, r4, #1
 8001da8:	4194      	sbcs	r4, r2
 8001daa:	430c      	orrs	r4, r1
 8001dac:	e0c3      	b.n	8001f36 <__aeabi_dsub+0x342>
 8001dae:	003c      	movs	r4, r7
 8001db0:	4304      	orrs	r4, r0
 8001db2:	d02b      	beq.n	8001e0c <__aeabi_dsub+0x218>
 8001db4:	468b      	mov	fp, r1
 8001db6:	428d      	cmp	r5, r1
 8001db8:	d02e      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001dba:	4c6a      	ldr	r4, [pc, #424]	; (8001f64 <__aeabi_dsub+0x370>)
 8001dbc:	46a4      	mov	ip, r4
 8001dbe:	44b4      	add	ip, r6
 8001dc0:	4664      	mov	r4, ip
 8001dc2:	2c00      	cmp	r4, #0
 8001dc4:	d05f      	beq.n	8001e86 <__aeabi_dsub+0x292>
 8001dc6:	1b94      	subs	r4, r2, r6
 8001dc8:	46a4      	mov	ip, r4
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_dsub+0x1dc>
 8001dce:	e120      	b.n	8002012 <__aeabi_dsub+0x41e>
 8001dd0:	464c      	mov	r4, r9
 8001dd2:	431c      	orrs	r4, r3
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x1e4>
 8001dd6:	e1c7      	b.n	8002168 <__aeabi_dsub+0x574>
 8001dd8:	4661      	mov	r1, ip
 8001dda:	1e4c      	subs	r4, r1, #1
 8001ddc:	2901      	cmp	r1, #1
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x1ee>
 8001de0:	e223      	b.n	800222a <__aeabi_dsub+0x636>
 8001de2:	4d5e      	ldr	r5, [pc, #376]	; (8001f5c <__aeabi_dsub+0x368>)
 8001de4:	45ac      	cmp	ip, r5
 8001de6:	d100      	bne.n	8001dea <__aeabi_dsub+0x1f6>
 8001de8:	e1d8      	b.n	800219c <__aeabi_dsub+0x5a8>
 8001dea:	46a4      	mov	ip, r4
 8001dec:	e11a      	b.n	8002024 <__aeabi_dsub+0x430>
 8001dee:	003a      	movs	r2, r7
 8001df0:	4302      	orrs	r2, r0
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x202>
 8001df4:	e0e4      	b.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001df6:	0022      	movs	r2, r4
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	2c01      	cmp	r4, #1
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x20c>
 8001dfe:	e1c3      	b.n	8002188 <__aeabi_dsub+0x594>
 8001e00:	4956      	ldr	r1, [pc, #344]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e02:	428c      	cmp	r4, r1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x214>
 8001e06:	e0b1      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001e08:	4694      	mov	ip, r2
 8001e0a:	e72b      	b.n	8001c64 <__aeabi_dsub+0x70>
 8001e0c:	2401      	movs	r4, #1
 8001e0e:	4061      	eors	r1, r4
 8001e10:	468b      	mov	fp, r1
 8001e12:	428d      	cmp	r5, r1
 8001e14:	d000      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001e16:	e716      	b.n	8001c46 <__aeabi_dsub+0x52>
 8001e18:	4952      	ldr	r1, [pc, #328]	; (8001f64 <__aeabi_dsub+0x370>)
 8001e1a:	468c      	mov	ip, r1
 8001e1c:	44b4      	add	ip, r6
 8001e1e:	4664      	mov	r4, ip
 8001e20:	2c00      	cmp	r4, #0
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x232>
 8001e24:	e0d3      	b.n	8001fce <__aeabi_dsub+0x3da>
 8001e26:	1b91      	subs	r1, r2, r6
 8001e28:	468c      	mov	ip, r1
 8001e2a:	2e00      	cmp	r6, #0
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x23c>
 8001e2e:	e15e      	b.n	80020ee <__aeabi_dsub+0x4fa>
 8001e30:	494a      	ldr	r1, [pc, #296]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e32:	428a      	cmp	r2, r1
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x244>
 8001e36:	e1be      	b.n	80021b6 <__aeabi_dsub+0x5c2>
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	464c      	mov	r4, r9
 8001e3c:	0409      	lsls	r1, r1, #16
 8001e3e:	430c      	orrs	r4, r1
 8001e40:	46a1      	mov	r9, r4
 8001e42:	4661      	mov	r1, ip
 8001e44:	2938      	cmp	r1, #56	; 0x38
 8001e46:	dd00      	ble.n	8001e4a <__aeabi_dsub+0x256>
 8001e48:	e1ba      	b.n	80021c0 <__aeabi_dsub+0x5cc>
 8001e4a:	291f      	cmp	r1, #31
 8001e4c:	dd00      	ble.n	8001e50 <__aeabi_dsub+0x25c>
 8001e4e:	e227      	b.n	80022a0 <__aeabi_dsub+0x6ac>
 8001e50:	2420      	movs	r4, #32
 8001e52:	1a64      	subs	r4, r4, r1
 8001e54:	4649      	mov	r1, r9
 8001e56:	40a1      	lsls	r1, r4
 8001e58:	001e      	movs	r6, r3
 8001e5a:	4688      	mov	r8, r1
 8001e5c:	4661      	mov	r1, ip
 8001e5e:	40a3      	lsls	r3, r4
 8001e60:	40ce      	lsrs	r6, r1
 8001e62:	4641      	mov	r1, r8
 8001e64:	1e5c      	subs	r4, r3, #1
 8001e66:	41a3      	sbcs	r3, r4
 8001e68:	4331      	orrs	r1, r6
 8001e6a:	4319      	orrs	r1, r3
 8001e6c:	000c      	movs	r4, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	4649      	mov	r1, r9
 8001e72:	40d9      	lsrs	r1, r3
 8001e74:	187f      	adds	r7, r7, r1
 8001e76:	1824      	adds	r4, r4, r0
 8001e78:	4284      	cmp	r4, r0
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	469a      	mov	sl, r3
 8001e80:	0016      	movs	r6, r2
 8001e82:	44ba      	add	sl, r7
 8001e84:	e05d      	b.n	8001f42 <__aeabi_dsub+0x34e>
 8001e86:	4c38      	ldr	r4, [pc, #224]	; (8001f68 <__aeabi_dsub+0x374>)
 8001e88:	1c72      	adds	r2, r6, #1
 8001e8a:	4222      	tst	r2, r4
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x29c>
 8001e8e:	e0df      	b.n	8002050 <__aeabi_dsub+0x45c>
 8001e90:	464a      	mov	r2, r9
 8001e92:	431a      	orrs	r2, r3
 8001e94:	2e00      	cmp	r6, #0
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dsub+0x2a6>
 8001e98:	e15c      	b.n	8002154 <__aeabi_dsub+0x560>
 8001e9a:	2a00      	cmp	r2, #0
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x2ac>
 8001e9e:	e1cf      	b.n	8002240 <__aeabi_dsub+0x64c>
 8001ea0:	003a      	movs	r2, r7
 8001ea2:	4302      	orrs	r2, r0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x2b4>
 8001ea6:	e17f      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ea8:	1a1c      	subs	r4, r3, r0
 8001eaa:	464a      	mov	r2, r9
 8001eac:	42a3      	cmp	r3, r4
 8001eae:	4189      	sbcs	r1, r1
 8001eb0:	1bd2      	subs	r2, r2, r7
 8001eb2:	4249      	negs	r1, r1
 8001eb4:	1a52      	subs	r2, r2, r1
 8001eb6:	4692      	mov	sl, r2
 8001eb8:	0212      	lsls	r2, r2, #8
 8001eba:	d400      	bmi.n	8001ebe <__aeabi_dsub+0x2ca>
 8001ebc:	e20a      	b.n	80022d4 <__aeabi_dsub+0x6e0>
 8001ebe:	1ac4      	subs	r4, r0, r3
 8001ec0:	42a0      	cmp	r0, r4
 8001ec2:	4180      	sbcs	r0, r0
 8001ec4:	464b      	mov	r3, r9
 8001ec6:	4240      	negs	r0, r0
 8001ec8:	1aff      	subs	r7, r7, r3
 8001eca:	1a3b      	subs	r3, r7, r0
 8001ecc:	469a      	mov	sl, r3
 8001ece:	465d      	mov	r5, fp
 8001ed0:	e71a      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001ed2:	003a      	movs	r2, r7
 8001ed4:	4302      	orrs	r2, r0
 8001ed6:	d073      	beq.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001ed8:	0022      	movs	r2, r4
 8001eda:	3a01      	subs	r2, #1
 8001edc:	2c01      	cmp	r4, #1
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_dsub+0x2ee>
 8001ee0:	e0cb      	b.n	800207a <__aeabi_dsub+0x486>
 8001ee2:	4554      	cmp	r4, sl
 8001ee4:	d042      	beq.n	8001f6c <__aeabi_dsub+0x378>
 8001ee6:	4694      	mov	ip, r2
 8001ee8:	e748      	b.n	8001d7c <__aeabi_dsub+0x188>
 8001eea:	0010      	movs	r0, r2
 8001eec:	3b1f      	subs	r3, #31
 8001eee:	40d8      	lsrs	r0, r3
 8001ef0:	2920      	cmp	r1, #32
 8001ef2:	d003      	beq.n	8001efc <__aeabi_dsub+0x308>
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	1a5b      	subs	r3, r3, r1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	4314      	orrs	r4, r2
 8001efc:	1e63      	subs	r3, r4, #1
 8001efe:	419c      	sbcs	r4, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	2600      	movs	r6, #0
 8001f04:	469a      	mov	sl, r3
 8001f06:	4304      	orrs	r4, r0
 8001f08:	0763      	lsls	r3, r4, #29
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_dsub+0x31a>
 8001f0c:	e6fe      	b.n	8001d0c <__aeabi_dsub+0x118>
 8001f0e:	4652      	mov	r2, sl
 8001f10:	08e3      	lsrs	r3, r4, #3
 8001f12:	0752      	lsls	r2, r2, #29
 8001f14:	4313      	orrs	r3, r2
 8001f16:	4652      	mov	r2, sl
 8001f18:	46b4      	mov	ip, r6
 8001f1a:	08d2      	lsrs	r2, r2, #3
 8001f1c:	490f      	ldr	r1, [pc, #60]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f1e:	458c      	cmp	ip, r1
 8001f20:	d02a      	beq.n	8001f78 <__aeabi_dsub+0x384>
 8001f22:	0312      	lsls	r2, r2, #12
 8001f24:	0b14      	lsrs	r4, r2, #12
 8001f26:	4662      	mov	r2, ip
 8001f28:	0552      	lsls	r2, r2, #21
 8001f2a:	0d52      	lsrs	r2, r2, #21
 8001f2c:	e70c      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f2e:	003c      	movs	r4, r7
 8001f30:	4304      	orrs	r4, r0
 8001f32:	1e62      	subs	r2, r4, #1
 8001f34:	4194      	sbcs	r4, r2
 8001f36:	18e4      	adds	r4, r4, r3
 8001f38:	429c      	cmp	r4, r3
 8001f3a:	4192      	sbcs	r2, r2
 8001f3c:	4252      	negs	r2, r2
 8001f3e:	444a      	add	r2, r9
 8001f40:	4692      	mov	sl, r2
 8001f42:	4653      	mov	r3, sl
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	d5df      	bpl.n	8001f08 <__aeabi_dsub+0x314>
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f4a:	3601      	adds	r6, #1
 8001f4c:	429e      	cmp	r6, r3
 8001f4e:	d000      	beq.n	8001f52 <__aeabi_dsub+0x35e>
 8001f50:	e0a0      	b.n	8002094 <__aeabi_dsub+0x4a0>
 8001f52:	0032      	movs	r2, r6
 8001f54:	2400      	movs	r4, #0
 8001f56:	2300      	movs	r3, #0
 8001f58:	e6f6      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	000007ff 	.word	0x000007ff
 8001f60:	ff7fffff 	.word	0xff7fffff
 8001f64:	fffff801 	.word	0xfffff801
 8001f68:	000007fe 	.word	0x000007fe
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	464a      	mov	r2, r9
 8001f70:	0752      	lsls	r2, r2, #29
 8001f72:	4313      	orrs	r3, r2
 8001f74:	464a      	mov	r2, r9
 8001f76:	08d2      	lsrs	r2, r2, #3
 8001f78:	0019      	movs	r1, r3
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x38c>
 8001f7e:	e1b5      	b.n	80022ec <__aeabi_dsub+0x6f8>
 8001f80:	2480      	movs	r4, #128	; 0x80
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4314      	orrs	r4, r2
 8001f86:	0324      	lsls	r4, r4, #12
 8001f88:	4ad5      	ldr	r2, [pc, #852]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	e6dc      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f8e:	0020      	movs	r0, r4
 8001f90:	f000 fae2 	bl	8002558 <__clzsi2>
 8001f94:	0003      	movs	r3, r0
 8001f96:	3318      	adds	r3, #24
 8001f98:	2b1f      	cmp	r3, #31
 8001f9a:	dc00      	bgt.n	8001f9e <__aeabi_dsub+0x3aa>
 8001f9c:	e695      	b.n	8001cca <__aeabi_dsub+0xd6>
 8001f9e:	0022      	movs	r2, r4
 8001fa0:	3808      	subs	r0, #8
 8001fa2:	4082      	lsls	r2, r0
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	429e      	cmp	r6, r3
 8001fa8:	dc00      	bgt.n	8001fac <__aeabi_dsub+0x3b8>
 8001faa:	e69a      	b.n	8001ce2 <__aeabi_dsub+0xee>
 8001fac:	1af6      	subs	r6, r6, r3
 8001fae:	4bcd      	ldr	r3, [pc, #820]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	4692      	mov	sl, r2
 8001fb4:	e6a8      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001fb6:	003c      	movs	r4, r7
 8001fb8:	4304      	orrs	r4, r0
 8001fba:	1e62      	subs	r2, r4, #1
 8001fbc:	4194      	sbcs	r4, r2
 8001fbe:	e66c      	b.n	8001c9a <__aeabi_dsub+0xa6>
 8001fc0:	464a      	mov	r2, r9
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	0752      	lsls	r2, r2, #29
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	464a      	mov	r2, r9
 8001fca:	08d2      	lsrs	r2, r2, #3
 8001fcc:	e7a6      	b.n	8001f1c <__aeabi_dsub+0x328>
 8001fce:	4cc6      	ldr	r4, [pc, #792]	; (80022e8 <__aeabi_dsub+0x6f4>)
 8001fd0:	1c72      	adds	r2, r6, #1
 8001fd2:	4222      	tst	r2, r4
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x3e4>
 8001fd6:	e0ac      	b.n	8002132 <__aeabi_dsub+0x53e>
 8001fd8:	464a      	mov	r2, r9
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	2e00      	cmp	r6, #0
 8001fde:	d000      	beq.n	8001fe2 <__aeabi_dsub+0x3ee>
 8001fe0:	e105      	b.n	80021ee <__aeabi_dsub+0x5fa>
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x3f4>
 8001fe6:	e156      	b.n	8002296 <__aeabi_dsub+0x6a2>
 8001fe8:	003a      	movs	r2, r7
 8001fea:	4302      	orrs	r2, r0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x3fc>
 8001fee:	e0db      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ff0:	181c      	adds	r4, r3, r0
 8001ff2:	429c      	cmp	r4, r3
 8001ff4:	419b      	sbcs	r3, r3
 8001ff6:	444f      	add	r7, r9
 8001ff8:	46ba      	mov	sl, r7
 8001ffa:	425b      	negs	r3, r3
 8001ffc:	449a      	add	sl, r3
 8001ffe:	4653      	mov	r3, sl
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	d400      	bmi.n	8002006 <__aeabi_dsub+0x412>
 8002004:	e780      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002006:	4652      	mov	r2, sl
 8002008:	4bb6      	ldr	r3, [pc, #728]	; (80022e4 <__aeabi_dsub+0x6f0>)
 800200a:	2601      	movs	r6, #1
 800200c:	401a      	ands	r2, r3
 800200e:	4692      	mov	sl, r2
 8002010:	e77a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002012:	4cb3      	ldr	r4, [pc, #716]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002014:	42a2      	cmp	r2, r4
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x426>
 8002018:	e0c0      	b.n	800219c <__aeabi_dsub+0x5a8>
 800201a:	2480      	movs	r4, #128	; 0x80
 800201c:	464d      	mov	r5, r9
 800201e:	0424      	lsls	r4, r4, #16
 8002020:	4325      	orrs	r5, r4
 8002022:	46a9      	mov	r9, r5
 8002024:	4664      	mov	r4, ip
 8002026:	2c38      	cmp	r4, #56	; 0x38
 8002028:	dc53      	bgt.n	80020d2 <__aeabi_dsub+0x4de>
 800202a:	4661      	mov	r1, ip
 800202c:	2c1f      	cmp	r4, #31
 800202e:	dd00      	ble.n	8002032 <__aeabi_dsub+0x43e>
 8002030:	e0cd      	b.n	80021ce <__aeabi_dsub+0x5da>
 8002032:	2520      	movs	r5, #32
 8002034:	001e      	movs	r6, r3
 8002036:	1b2d      	subs	r5, r5, r4
 8002038:	464c      	mov	r4, r9
 800203a:	40ab      	lsls	r3, r5
 800203c:	40ac      	lsls	r4, r5
 800203e:	40ce      	lsrs	r6, r1
 8002040:	1e5d      	subs	r5, r3, #1
 8002042:	41ab      	sbcs	r3, r5
 8002044:	4334      	orrs	r4, r6
 8002046:	4323      	orrs	r3, r4
 8002048:	464c      	mov	r4, r9
 800204a:	40cc      	lsrs	r4, r1
 800204c:	1b3f      	subs	r7, r7, r4
 800204e:	e045      	b.n	80020dc <__aeabi_dsub+0x4e8>
 8002050:	464a      	mov	r2, r9
 8002052:	1a1c      	subs	r4, r3, r0
 8002054:	1bd1      	subs	r1, r2, r7
 8002056:	42a3      	cmp	r3, r4
 8002058:	4192      	sbcs	r2, r2
 800205a:	4252      	negs	r2, r2
 800205c:	4692      	mov	sl, r2
 800205e:	000a      	movs	r2, r1
 8002060:	4651      	mov	r1, sl
 8002062:	1a52      	subs	r2, r2, r1
 8002064:	4692      	mov	sl, r2
 8002066:	0212      	lsls	r2, r2, #8
 8002068:	d500      	bpl.n	800206c <__aeabi_dsub+0x478>
 800206a:	e083      	b.n	8002174 <__aeabi_dsub+0x580>
 800206c:	4653      	mov	r3, sl
 800206e:	4323      	orrs	r3, r4
 8002070:	d000      	beq.n	8002074 <__aeabi_dsub+0x480>
 8002072:	e621      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002074:	2200      	movs	r2, #0
 8002076:	2500      	movs	r5, #0
 8002078:	e753      	b.n	8001f22 <__aeabi_dsub+0x32e>
 800207a:	181c      	adds	r4, r3, r0
 800207c:	429c      	cmp	r4, r3
 800207e:	419b      	sbcs	r3, r3
 8002080:	444f      	add	r7, r9
 8002082:	46ba      	mov	sl, r7
 8002084:	425b      	negs	r3, r3
 8002086:	449a      	add	sl, r3
 8002088:	4653      	mov	r3, sl
 800208a:	2601      	movs	r6, #1
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	d400      	bmi.n	8002092 <__aeabi_dsub+0x49e>
 8002090:	e73a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002092:	2602      	movs	r6, #2
 8002094:	4652      	mov	r2, sl
 8002096:	4b93      	ldr	r3, [pc, #588]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8002098:	2101      	movs	r1, #1
 800209a:	401a      	ands	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	4021      	ands	r1, r4
 80020a0:	0862      	lsrs	r2, r4, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	07dc      	lsls	r4, r3, #31
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	469a      	mov	sl, r3
 80020aa:	4314      	orrs	r4, r2
 80020ac:	e62c      	b.n	8001d08 <__aeabi_dsub+0x114>
 80020ae:	0039      	movs	r1, r7
 80020b0:	3a20      	subs	r2, #32
 80020b2:	40d1      	lsrs	r1, r2
 80020b4:	4662      	mov	r2, ip
 80020b6:	2a20      	cmp	r2, #32
 80020b8:	d006      	beq.n	80020c8 <__aeabi_dsub+0x4d4>
 80020ba:	4664      	mov	r4, ip
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	1b12      	subs	r2, r2, r4
 80020c0:	003c      	movs	r4, r7
 80020c2:	4094      	lsls	r4, r2
 80020c4:	4304      	orrs	r4, r0
 80020c6:	9401      	str	r4, [sp, #4]
 80020c8:	9c01      	ldr	r4, [sp, #4]
 80020ca:	1e62      	subs	r2, r4, #1
 80020cc:	4194      	sbcs	r4, r2
 80020ce:	430c      	orrs	r4, r1
 80020d0:	e5e3      	b.n	8001c9a <__aeabi_dsub+0xa6>
 80020d2:	4649      	mov	r1, r9
 80020d4:	4319      	orrs	r1, r3
 80020d6:	000b      	movs	r3, r1
 80020d8:	1e5c      	subs	r4, r3, #1
 80020da:	41a3      	sbcs	r3, r4
 80020dc:	1ac4      	subs	r4, r0, r3
 80020de:	42a0      	cmp	r0, r4
 80020e0:	419b      	sbcs	r3, r3
 80020e2:	425b      	negs	r3, r3
 80020e4:	1afb      	subs	r3, r7, r3
 80020e6:	469a      	mov	sl, r3
 80020e8:	465d      	mov	r5, fp
 80020ea:	0016      	movs	r6, r2
 80020ec:	e5dc      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 80020ee:	4649      	mov	r1, r9
 80020f0:	4319      	orrs	r1, r3
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x502>
 80020f4:	e0ae      	b.n	8002254 <__aeabi_dsub+0x660>
 80020f6:	4661      	mov	r1, ip
 80020f8:	4664      	mov	r4, ip
 80020fa:	3901      	subs	r1, #1
 80020fc:	2c01      	cmp	r4, #1
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x50e>
 8002100:	e0e0      	b.n	80022c4 <__aeabi_dsub+0x6d0>
 8002102:	4c77      	ldr	r4, [pc, #476]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002104:	45a4      	cmp	ip, r4
 8002106:	d056      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 8002108:	468c      	mov	ip, r1
 800210a:	e69a      	b.n	8001e42 <__aeabi_dsub+0x24e>
 800210c:	4661      	mov	r1, ip
 800210e:	2220      	movs	r2, #32
 8002110:	003c      	movs	r4, r7
 8002112:	1a52      	subs	r2, r2, r1
 8002114:	4094      	lsls	r4, r2
 8002116:	0001      	movs	r1, r0
 8002118:	4090      	lsls	r0, r2
 800211a:	46a0      	mov	r8, r4
 800211c:	4664      	mov	r4, ip
 800211e:	1e42      	subs	r2, r0, #1
 8002120:	4190      	sbcs	r0, r2
 8002122:	4662      	mov	r2, ip
 8002124:	40e1      	lsrs	r1, r4
 8002126:	4644      	mov	r4, r8
 8002128:	40d7      	lsrs	r7, r2
 800212a:	430c      	orrs	r4, r1
 800212c:	4304      	orrs	r4, r0
 800212e:	44b9      	add	r9, r7
 8002130:	e701      	b.n	8001f36 <__aeabi_dsub+0x342>
 8002132:	496b      	ldr	r1, [pc, #428]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002134:	428a      	cmp	r2, r1
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x546>
 8002138:	e70c      	b.n	8001f54 <__aeabi_dsub+0x360>
 800213a:	1818      	adds	r0, r3, r0
 800213c:	4298      	cmp	r0, r3
 800213e:	419b      	sbcs	r3, r3
 8002140:	444f      	add	r7, r9
 8002142:	425b      	negs	r3, r3
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	07dc      	lsls	r4, r3, #31
 8002148:	0840      	lsrs	r0, r0, #1
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	469a      	mov	sl, r3
 800214e:	0016      	movs	r6, r2
 8002150:	4304      	orrs	r4, r0
 8002152:	e6d9      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002154:	2a00      	cmp	r2, #0
 8002156:	d000      	beq.n	800215a <__aeabi_dsub+0x566>
 8002158:	e081      	b.n	800225e <__aeabi_dsub+0x66a>
 800215a:	003b      	movs	r3, r7
 800215c:	4303      	orrs	r3, r0
 800215e:	d11d      	bne.n	800219c <__aeabi_dsub+0x5a8>
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	2500      	movs	r5, #0
 8002164:	0312      	lsls	r2, r2, #12
 8002166:	e70b      	b.n	8001f80 <__aeabi_dsub+0x38c>
 8002168:	08c0      	lsrs	r0, r0, #3
 800216a:	077b      	lsls	r3, r7, #29
 800216c:	465d      	mov	r5, fp
 800216e:	4303      	orrs	r3, r0
 8002170:	08fa      	lsrs	r2, r7, #3
 8002172:	e6d3      	b.n	8001f1c <__aeabi_dsub+0x328>
 8002174:	1ac4      	subs	r4, r0, r3
 8002176:	42a0      	cmp	r0, r4
 8002178:	4180      	sbcs	r0, r0
 800217a:	464b      	mov	r3, r9
 800217c:	4240      	negs	r0, r0
 800217e:	1aff      	subs	r7, r7, r3
 8002180:	1a3b      	subs	r3, r7, r0
 8002182:	469a      	mov	sl, r3
 8002184:	465d      	mov	r5, fp
 8002186:	e597      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002188:	1a1c      	subs	r4, r3, r0
 800218a:	464a      	mov	r2, r9
 800218c:	42a3      	cmp	r3, r4
 800218e:	419b      	sbcs	r3, r3
 8002190:	1bd7      	subs	r7, r2, r7
 8002192:	425b      	negs	r3, r3
 8002194:	1afb      	subs	r3, r7, r3
 8002196:	469a      	mov	sl, r3
 8002198:	2601      	movs	r6, #1
 800219a:	e585      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 800219c:	08c0      	lsrs	r0, r0, #3
 800219e:	077b      	lsls	r3, r7, #29
 80021a0:	465d      	mov	r5, fp
 80021a2:	4303      	orrs	r3, r0
 80021a4:	08fa      	lsrs	r2, r7, #3
 80021a6:	e6e7      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021a8:	464a      	mov	r2, r9
 80021aa:	08db      	lsrs	r3, r3, #3
 80021ac:	0752      	lsls	r2, r2, #29
 80021ae:	4313      	orrs	r3, r2
 80021b0:	464a      	mov	r2, r9
 80021b2:	08d2      	lsrs	r2, r2, #3
 80021b4:	e6b5      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80021b6:	08c0      	lsrs	r0, r0, #3
 80021b8:	077b      	lsls	r3, r7, #29
 80021ba:	4303      	orrs	r3, r0
 80021bc:	08fa      	lsrs	r2, r7, #3
 80021be:	e6db      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021c0:	4649      	mov	r1, r9
 80021c2:	4319      	orrs	r1, r3
 80021c4:	000b      	movs	r3, r1
 80021c6:	1e59      	subs	r1, r3, #1
 80021c8:	418b      	sbcs	r3, r1
 80021ca:	001c      	movs	r4, r3
 80021cc:	e653      	b.n	8001e76 <__aeabi_dsub+0x282>
 80021ce:	464d      	mov	r5, r9
 80021d0:	3c20      	subs	r4, #32
 80021d2:	40e5      	lsrs	r5, r4
 80021d4:	2920      	cmp	r1, #32
 80021d6:	d005      	beq.n	80021e4 <__aeabi_dsub+0x5f0>
 80021d8:	2440      	movs	r4, #64	; 0x40
 80021da:	1a64      	subs	r4, r4, r1
 80021dc:	4649      	mov	r1, r9
 80021de:	40a1      	lsls	r1, r4
 80021e0:	430b      	orrs	r3, r1
 80021e2:	4698      	mov	r8, r3
 80021e4:	4643      	mov	r3, r8
 80021e6:	1e5c      	subs	r4, r3, #1
 80021e8:	41a3      	sbcs	r3, r4
 80021ea:	432b      	orrs	r3, r5
 80021ec:	e776      	b.n	80020dc <__aeabi_dsub+0x4e8>
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d0e1      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 80021f2:	003a      	movs	r2, r7
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	4302      	orrs	r2, r0
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x608>
 80021fa:	e6b8      	b.n	8001f6e <__aeabi_dsub+0x37a>
 80021fc:	464a      	mov	r2, r9
 80021fe:	0752      	lsls	r2, r2, #29
 8002200:	2480      	movs	r4, #128	; 0x80
 8002202:	4313      	orrs	r3, r2
 8002204:	464a      	mov	r2, r9
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	08d2      	lsrs	r2, r2, #3
 800220a:	4222      	tst	r2, r4
 800220c:	d007      	beq.n	800221e <__aeabi_dsub+0x62a>
 800220e:	08fe      	lsrs	r6, r7, #3
 8002210:	4226      	tst	r6, r4
 8002212:	d104      	bne.n	800221e <__aeabi_dsub+0x62a>
 8002214:	465d      	mov	r5, fp
 8002216:	0032      	movs	r2, r6
 8002218:	08c3      	lsrs	r3, r0, #3
 800221a:	077f      	lsls	r7, r7, #29
 800221c:	433b      	orrs	r3, r7
 800221e:	0f59      	lsrs	r1, r3, #29
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	0749      	lsls	r1, r1, #29
 8002224:	08db      	lsrs	r3, r3, #3
 8002226:	430b      	orrs	r3, r1
 8002228:	e6a6      	b.n	8001f78 <__aeabi_dsub+0x384>
 800222a:	1ac4      	subs	r4, r0, r3
 800222c:	42a0      	cmp	r0, r4
 800222e:	4180      	sbcs	r0, r0
 8002230:	464b      	mov	r3, r9
 8002232:	4240      	negs	r0, r0
 8002234:	1aff      	subs	r7, r7, r3
 8002236:	1a3b      	subs	r3, r7, r0
 8002238:	469a      	mov	sl, r3
 800223a:	465d      	mov	r5, fp
 800223c:	2601      	movs	r6, #1
 800223e:	e533      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 8002240:	003b      	movs	r3, r7
 8002242:	4303      	orrs	r3, r0
 8002244:	d100      	bne.n	8002248 <__aeabi_dsub+0x654>
 8002246:	e715      	b.n	8002074 <__aeabi_dsub+0x480>
 8002248:	08c0      	lsrs	r0, r0, #3
 800224a:	077b      	lsls	r3, r7, #29
 800224c:	465d      	mov	r5, fp
 800224e:	4303      	orrs	r3, r0
 8002250:	08fa      	lsrs	r2, r7, #3
 8002252:	e666      	b.n	8001f22 <__aeabi_dsub+0x32e>
 8002254:	08c0      	lsrs	r0, r0, #3
 8002256:	077b      	lsls	r3, r7, #29
 8002258:	4303      	orrs	r3, r0
 800225a:	08fa      	lsrs	r2, r7, #3
 800225c:	e65e      	b.n	8001f1c <__aeabi_dsub+0x328>
 800225e:	003a      	movs	r2, r7
 8002260:	08db      	lsrs	r3, r3, #3
 8002262:	4302      	orrs	r2, r0
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x674>
 8002266:	e682      	b.n	8001f6e <__aeabi_dsub+0x37a>
 8002268:	464a      	mov	r2, r9
 800226a:	0752      	lsls	r2, r2, #29
 800226c:	2480      	movs	r4, #128	; 0x80
 800226e:	4313      	orrs	r3, r2
 8002270:	464a      	mov	r2, r9
 8002272:	0324      	lsls	r4, r4, #12
 8002274:	08d2      	lsrs	r2, r2, #3
 8002276:	4222      	tst	r2, r4
 8002278:	d007      	beq.n	800228a <__aeabi_dsub+0x696>
 800227a:	08fe      	lsrs	r6, r7, #3
 800227c:	4226      	tst	r6, r4
 800227e:	d104      	bne.n	800228a <__aeabi_dsub+0x696>
 8002280:	465d      	mov	r5, fp
 8002282:	0032      	movs	r2, r6
 8002284:	08c3      	lsrs	r3, r0, #3
 8002286:	077f      	lsls	r7, r7, #29
 8002288:	433b      	orrs	r3, r7
 800228a:	0f59      	lsrs	r1, r3, #29
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	08db      	lsrs	r3, r3, #3
 8002290:	0749      	lsls	r1, r1, #29
 8002292:	430b      	orrs	r3, r1
 8002294:	e670      	b.n	8001f78 <__aeabi_dsub+0x384>
 8002296:	08c0      	lsrs	r0, r0, #3
 8002298:	077b      	lsls	r3, r7, #29
 800229a:	4303      	orrs	r3, r0
 800229c:	08fa      	lsrs	r2, r7, #3
 800229e:	e640      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80022a0:	464c      	mov	r4, r9
 80022a2:	3920      	subs	r1, #32
 80022a4:	40cc      	lsrs	r4, r1
 80022a6:	4661      	mov	r1, ip
 80022a8:	2920      	cmp	r1, #32
 80022aa:	d006      	beq.n	80022ba <__aeabi_dsub+0x6c6>
 80022ac:	4666      	mov	r6, ip
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	1b89      	subs	r1, r1, r6
 80022b2:	464e      	mov	r6, r9
 80022b4:	408e      	lsls	r6, r1
 80022b6:	4333      	orrs	r3, r6
 80022b8:	4698      	mov	r8, r3
 80022ba:	4643      	mov	r3, r8
 80022bc:	1e59      	subs	r1, r3, #1
 80022be:	418b      	sbcs	r3, r1
 80022c0:	431c      	orrs	r4, r3
 80022c2:	e5d8      	b.n	8001e76 <__aeabi_dsub+0x282>
 80022c4:	181c      	adds	r4, r3, r0
 80022c6:	4284      	cmp	r4, r0
 80022c8:	4180      	sbcs	r0, r0
 80022ca:	444f      	add	r7, r9
 80022cc:	46ba      	mov	sl, r7
 80022ce:	4240      	negs	r0, r0
 80022d0:	4482      	add	sl, r0
 80022d2:	e6d9      	b.n	8002088 <__aeabi_dsub+0x494>
 80022d4:	4653      	mov	r3, sl
 80022d6:	4323      	orrs	r3, r4
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x6e8>
 80022da:	e6cb      	b.n	8002074 <__aeabi_dsub+0x480>
 80022dc:	e614      	b.n	8001f08 <__aeabi_dsub+0x314>
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2300      	movs	r3, #0
 80022ee:	4a01      	ldr	r2, [pc, #4]	; (80022f4 <__aeabi_dsub+0x700>)
 80022f0:	001c      	movs	r4, r3
 80022f2:	e529      	b.n	8001d48 <__aeabi_dsub+0x154>
 80022f4:	000007ff 	.word	0x000007ff

080022f8 <__aeabi_dcmpun>:
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	0005      	movs	r5, r0
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <__aeabi_dcmpun+0x38>)
 80022fe:	031c      	lsls	r4, r3, #12
 8002300:	0016      	movs	r6, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	030a      	lsls	r2, r1, #12
 8002306:	0049      	lsls	r1, r1, #1
 8002308:	0b12      	lsrs	r2, r2, #12
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b24      	lsrs	r4, r4, #12
 800230e:	0d5b      	lsrs	r3, r3, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d008      	beq.n	8002326 <__aeabi_dcmpun+0x2e>
 8002314:	4a06      	ldr	r2, [pc, #24]	; (8002330 <__aeabi_dcmpun+0x38>)
 8002316:	2000      	movs	r0, #0
 8002318:	4293      	cmp	r3, r2
 800231a:	d103      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800231c:	0020      	movs	r0, r4
 800231e:	4330      	orrs	r0, r6
 8002320:	1e43      	subs	r3, r0, #1
 8002322:	4198      	sbcs	r0, r3
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	2001      	movs	r0, #1
 8002328:	432a      	orrs	r2, r5
 800232a:	d1fb      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800232c:	e7f2      	b.n	8002314 <__aeabi_dcmpun+0x1c>
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	000007ff 	.word	0x000007ff

08002334 <__aeabi_d2iz>:
 8002334:	000a      	movs	r2, r1
 8002336:	b530      	push	{r4, r5, lr}
 8002338:	4c13      	ldr	r4, [pc, #76]	; (8002388 <__aeabi_d2iz+0x54>)
 800233a:	0053      	lsls	r3, r2, #1
 800233c:	0309      	lsls	r1, r1, #12
 800233e:	0005      	movs	r5, r0
 8002340:	0b09      	lsrs	r1, r1, #12
 8002342:	2000      	movs	r0, #0
 8002344:	0d5b      	lsrs	r3, r3, #21
 8002346:	0fd2      	lsrs	r2, r2, #31
 8002348:	42a3      	cmp	r3, r4
 800234a:	dd04      	ble.n	8002356 <__aeabi_d2iz+0x22>
 800234c:	480f      	ldr	r0, [pc, #60]	; (800238c <__aeabi_d2iz+0x58>)
 800234e:	4283      	cmp	r3, r0
 8002350:	dd02      	ble.n	8002358 <__aeabi_d2iz+0x24>
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <__aeabi_d2iz+0x5c>)
 8002354:	18d0      	adds	r0, r2, r3
 8002356:	bd30      	pop	{r4, r5, pc}
 8002358:	2080      	movs	r0, #128	; 0x80
 800235a:	0340      	lsls	r0, r0, #13
 800235c:	4301      	orrs	r1, r0
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <__aeabi_d2iz+0x60>)
 8002360:	1ac0      	subs	r0, r0, r3
 8002362:	281f      	cmp	r0, #31
 8002364:	dd08      	ble.n	8002378 <__aeabi_d2iz+0x44>
 8002366:	480c      	ldr	r0, [pc, #48]	; (8002398 <__aeabi_d2iz+0x64>)
 8002368:	1ac3      	subs	r3, r0, r3
 800236a:	40d9      	lsrs	r1, r3
 800236c:	000b      	movs	r3, r1
 800236e:	4258      	negs	r0, r3
 8002370:	2a00      	cmp	r2, #0
 8002372:	d1f0      	bne.n	8002356 <__aeabi_d2iz+0x22>
 8002374:	0018      	movs	r0, r3
 8002376:	e7ee      	b.n	8002356 <__aeabi_d2iz+0x22>
 8002378:	4c08      	ldr	r4, [pc, #32]	; (800239c <__aeabi_d2iz+0x68>)
 800237a:	40c5      	lsrs	r5, r0
 800237c:	46a4      	mov	ip, r4
 800237e:	4463      	add	r3, ip
 8002380:	4099      	lsls	r1, r3
 8002382:	000b      	movs	r3, r1
 8002384:	432b      	orrs	r3, r5
 8002386:	e7f2      	b.n	800236e <__aeabi_d2iz+0x3a>
 8002388:	000003fe 	.word	0x000003fe
 800238c:	0000041d 	.word	0x0000041d
 8002390:	7fffffff 	.word	0x7fffffff
 8002394:	00000433 	.word	0x00000433
 8002398:	00000413 	.word	0x00000413
 800239c:	fffffbed 	.word	0xfffffbed

080023a0 <__aeabi_i2d>:
 80023a0:	b570      	push	{r4, r5, r6, lr}
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d016      	beq.n	80023d4 <__aeabi_i2d+0x34>
 80023a6:	17c3      	asrs	r3, r0, #31
 80023a8:	18c5      	adds	r5, r0, r3
 80023aa:	405d      	eors	r5, r3
 80023ac:	0fc4      	lsrs	r4, r0, #31
 80023ae:	0028      	movs	r0, r5
 80023b0:	f000 f8d2 	bl	8002558 <__clzsi2>
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <__aeabi_i2d+0x5c>)
 80023b6:	1a1b      	subs	r3, r3, r0
 80023b8:	280a      	cmp	r0, #10
 80023ba:	dc16      	bgt.n	80023ea <__aeabi_i2d+0x4a>
 80023bc:	0002      	movs	r2, r0
 80023be:	002e      	movs	r6, r5
 80023c0:	3215      	adds	r2, #21
 80023c2:	4096      	lsls	r6, r2
 80023c4:	220b      	movs	r2, #11
 80023c6:	1a12      	subs	r2, r2, r0
 80023c8:	40d5      	lsrs	r5, r2
 80023ca:	055b      	lsls	r3, r3, #21
 80023cc:	032d      	lsls	r5, r5, #12
 80023ce:	0b2d      	lsrs	r5, r5, #12
 80023d0:	0d5b      	lsrs	r3, r3, #21
 80023d2:	e003      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023d4:	2400      	movs	r4, #0
 80023d6:	2300      	movs	r3, #0
 80023d8:	2500      	movs	r5, #0
 80023da:	2600      	movs	r6, #0
 80023dc:	051b      	lsls	r3, r3, #20
 80023de:	432b      	orrs	r3, r5
 80023e0:	07e4      	lsls	r4, r4, #31
 80023e2:	4323      	orrs	r3, r4
 80023e4:	0030      	movs	r0, r6
 80023e6:	0019      	movs	r1, r3
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
 80023ea:	380b      	subs	r0, #11
 80023ec:	4085      	lsls	r5, r0
 80023ee:	055b      	lsls	r3, r3, #21
 80023f0:	032d      	lsls	r5, r5, #12
 80023f2:	2600      	movs	r6, #0
 80023f4:	0b2d      	lsrs	r5, r5, #12
 80023f6:	0d5b      	lsrs	r3, r3, #21
 80023f8:	e7f0      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	0000041e 	.word	0x0000041e

08002400 <__aeabi_ui2d>:
 8002400:	b510      	push	{r4, lr}
 8002402:	1e04      	subs	r4, r0, #0
 8002404:	d010      	beq.n	8002428 <__aeabi_ui2d+0x28>
 8002406:	f000 f8a7 	bl	8002558 <__clzsi2>
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <__aeabi_ui2d+0x48>)
 800240c:	1a1b      	subs	r3, r3, r0
 800240e:	280a      	cmp	r0, #10
 8002410:	dc11      	bgt.n	8002436 <__aeabi_ui2d+0x36>
 8002412:	220b      	movs	r2, #11
 8002414:	0021      	movs	r1, r4
 8002416:	1a12      	subs	r2, r2, r0
 8002418:	40d1      	lsrs	r1, r2
 800241a:	3015      	adds	r0, #21
 800241c:	030a      	lsls	r2, r1, #12
 800241e:	055b      	lsls	r3, r3, #21
 8002420:	4084      	lsls	r4, r0
 8002422:	0b12      	lsrs	r2, r2, #12
 8002424:	0d5b      	lsrs	r3, r3, #21
 8002426:	e001      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002428:	2300      	movs	r3, #0
 800242a:	2200      	movs	r2, #0
 800242c:	051b      	lsls	r3, r3, #20
 800242e:	4313      	orrs	r3, r2
 8002430:	0020      	movs	r0, r4
 8002432:	0019      	movs	r1, r3
 8002434:	bd10      	pop	{r4, pc}
 8002436:	0022      	movs	r2, r4
 8002438:	380b      	subs	r0, #11
 800243a:	4082      	lsls	r2, r0
 800243c:	055b      	lsls	r3, r3, #21
 800243e:	0312      	lsls	r2, r2, #12
 8002440:	2400      	movs	r4, #0
 8002442:	0b12      	lsrs	r2, r2, #12
 8002444:	0d5b      	lsrs	r3, r3, #21
 8002446:	e7f1      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002448:	0000041e 	.word	0x0000041e

0800244c <__aeabi_d2f>:
 800244c:	0002      	movs	r2, r0
 800244e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002450:	004b      	lsls	r3, r1, #1
 8002452:	030d      	lsls	r5, r1, #12
 8002454:	0f40      	lsrs	r0, r0, #29
 8002456:	0d5b      	lsrs	r3, r3, #21
 8002458:	0fcc      	lsrs	r4, r1, #31
 800245a:	0a6d      	lsrs	r5, r5, #9
 800245c:	493a      	ldr	r1, [pc, #232]	; (8002548 <__aeabi_d2f+0xfc>)
 800245e:	4305      	orrs	r5, r0
 8002460:	1c58      	adds	r0, r3, #1
 8002462:	00d7      	lsls	r7, r2, #3
 8002464:	4208      	tst	r0, r1
 8002466:	d00a      	beq.n	800247e <__aeabi_d2f+0x32>
 8002468:	4938      	ldr	r1, [pc, #224]	; (800254c <__aeabi_d2f+0x100>)
 800246a:	1859      	adds	r1, r3, r1
 800246c:	29fe      	cmp	r1, #254	; 0xfe
 800246e:	dd16      	ble.n	800249e <__aeabi_d2f+0x52>
 8002470:	20ff      	movs	r0, #255	; 0xff
 8002472:	2200      	movs	r2, #0
 8002474:	05c0      	lsls	r0, r0, #23
 8002476:	4310      	orrs	r0, r2
 8002478:	07e4      	lsls	r4, r4, #31
 800247a:	4320      	orrs	r0, r4
 800247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <__aeabi_d2f+0x44>
 8002482:	433d      	orrs	r5, r7
 8002484:	d026      	beq.n	80024d4 <__aeabi_d2f+0x88>
 8002486:	2205      	movs	r2, #5
 8002488:	0192      	lsls	r2, r2, #6
 800248a:	0a52      	lsrs	r2, r2, #9
 800248c:	b2d8      	uxtb	r0, r3
 800248e:	e7f1      	b.n	8002474 <__aeabi_d2f+0x28>
 8002490:	432f      	orrs	r7, r5
 8002492:	d0ed      	beq.n	8002470 <__aeabi_d2f+0x24>
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	03d2      	lsls	r2, r2, #15
 8002498:	20ff      	movs	r0, #255	; 0xff
 800249a:	432a      	orrs	r2, r5
 800249c:	e7ea      	b.n	8002474 <__aeabi_d2f+0x28>
 800249e:	2900      	cmp	r1, #0
 80024a0:	dd1b      	ble.n	80024da <__aeabi_d2f+0x8e>
 80024a2:	0192      	lsls	r2, r2, #6
 80024a4:	1e50      	subs	r0, r2, #1
 80024a6:	4182      	sbcs	r2, r0
 80024a8:	00ed      	lsls	r5, r5, #3
 80024aa:	0f7f      	lsrs	r7, r7, #29
 80024ac:	432a      	orrs	r2, r5
 80024ae:	433a      	orrs	r2, r7
 80024b0:	0753      	lsls	r3, r2, #29
 80024b2:	d047      	beq.n	8002544 <__aeabi_d2f+0xf8>
 80024b4:	230f      	movs	r3, #15
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d000      	beq.n	80024be <__aeabi_d2f+0x72>
 80024bc:	3204      	adds	r2, #4
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	04db      	lsls	r3, r3, #19
 80024c2:	4013      	ands	r3, r2
 80024c4:	d03e      	beq.n	8002544 <__aeabi_d2f+0xf8>
 80024c6:	1c48      	adds	r0, r1, #1
 80024c8:	29fe      	cmp	r1, #254	; 0xfe
 80024ca:	d0d1      	beq.n	8002470 <__aeabi_d2f+0x24>
 80024cc:	0192      	lsls	r2, r2, #6
 80024ce:	0a52      	lsrs	r2, r2, #9
 80024d0:	b2c0      	uxtb	r0, r0
 80024d2:	e7cf      	b.n	8002474 <__aeabi_d2f+0x28>
 80024d4:	2000      	movs	r0, #0
 80024d6:	2200      	movs	r2, #0
 80024d8:	e7cc      	b.n	8002474 <__aeabi_d2f+0x28>
 80024da:	000a      	movs	r2, r1
 80024dc:	3217      	adds	r2, #23
 80024de:	db2f      	blt.n	8002540 <__aeabi_d2f+0xf4>
 80024e0:	2680      	movs	r6, #128	; 0x80
 80024e2:	0436      	lsls	r6, r6, #16
 80024e4:	432e      	orrs	r6, r5
 80024e6:	251e      	movs	r5, #30
 80024e8:	1a6d      	subs	r5, r5, r1
 80024ea:	2d1f      	cmp	r5, #31
 80024ec:	dd11      	ble.n	8002512 <__aeabi_d2f+0xc6>
 80024ee:	2202      	movs	r2, #2
 80024f0:	4252      	negs	r2, r2
 80024f2:	1a52      	subs	r2, r2, r1
 80024f4:	0031      	movs	r1, r6
 80024f6:	40d1      	lsrs	r1, r2
 80024f8:	2d20      	cmp	r5, #32
 80024fa:	d004      	beq.n	8002506 <__aeabi_d2f+0xba>
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <__aeabi_d2f+0x104>)
 80024fe:	4694      	mov	ip, r2
 8002500:	4463      	add	r3, ip
 8002502:	409e      	lsls	r6, r3
 8002504:	4337      	orrs	r7, r6
 8002506:	003a      	movs	r2, r7
 8002508:	1e53      	subs	r3, r2, #1
 800250a:	419a      	sbcs	r2, r3
 800250c:	430a      	orrs	r2, r1
 800250e:	2100      	movs	r1, #0
 8002510:	e7ce      	b.n	80024b0 <__aeabi_d2f+0x64>
 8002512:	4a10      	ldr	r2, [pc, #64]	; (8002554 <__aeabi_d2f+0x108>)
 8002514:	0038      	movs	r0, r7
 8002516:	4694      	mov	ip, r2
 8002518:	4463      	add	r3, ip
 800251a:	4098      	lsls	r0, r3
 800251c:	003a      	movs	r2, r7
 800251e:	1e41      	subs	r1, r0, #1
 8002520:	4188      	sbcs	r0, r1
 8002522:	409e      	lsls	r6, r3
 8002524:	40ea      	lsrs	r2, r5
 8002526:	4330      	orrs	r0, r6
 8002528:	4302      	orrs	r2, r0
 800252a:	2100      	movs	r1, #0
 800252c:	0753      	lsls	r3, r2, #29
 800252e:	d1c1      	bne.n	80024b4 <__aeabi_d2f+0x68>
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	0013      	movs	r3, r2
 8002534:	04c9      	lsls	r1, r1, #19
 8002536:	2001      	movs	r0, #1
 8002538:	400b      	ands	r3, r1
 800253a:	420a      	tst	r2, r1
 800253c:	d1c6      	bne.n	80024cc <__aeabi_d2f+0x80>
 800253e:	e7a3      	b.n	8002488 <__aeabi_d2f+0x3c>
 8002540:	2300      	movs	r3, #0
 8002542:	e7a0      	b.n	8002486 <__aeabi_d2f+0x3a>
 8002544:	000b      	movs	r3, r1
 8002546:	e79f      	b.n	8002488 <__aeabi_d2f+0x3c>
 8002548:	000007fe 	.word	0x000007fe
 800254c:	fffffc80 	.word	0xfffffc80
 8002550:	fffffca2 	.word	0xfffffca2
 8002554:	fffffc82 	.word	0xfffffc82

08002558 <__clzsi2>:
 8002558:	211c      	movs	r1, #28
 800255a:	2301      	movs	r3, #1
 800255c:	041b      	lsls	r3, r3, #16
 800255e:	4298      	cmp	r0, r3
 8002560:	d301      	bcc.n	8002566 <__clzsi2+0xe>
 8002562:	0c00      	lsrs	r0, r0, #16
 8002564:	3910      	subs	r1, #16
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	4298      	cmp	r0, r3
 800256a:	d301      	bcc.n	8002570 <__clzsi2+0x18>
 800256c:	0a00      	lsrs	r0, r0, #8
 800256e:	3908      	subs	r1, #8
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	4298      	cmp	r0, r3
 8002574:	d301      	bcc.n	800257a <__clzsi2+0x22>
 8002576:	0900      	lsrs	r0, r0, #4
 8002578:	3904      	subs	r1, #4
 800257a:	a202      	add	r2, pc, #8	; (adr r2, 8002584 <__clzsi2+0x2c>)
 800257c:	5c10      	ldrb	r0, [r2, r0]
 800257e:	1840      	adds	r0, r0, r1
 8002580:	4770      	bx	lr
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	02020304 	.word	0x02020304
 8002588:	01010101 	.word	0x01010101
	...

08002594 <__clzdi2>:
 8002594:	b510      	push	{r4, lr}
 8002596:	2900      	cmp	r1, #0
 8002598:	d103      	bne.n	80025a2 <__clzdi2+0xe>
 800259a:	f7ff ffdd 	bl	8002558 <__clzsi2>
 800259e:	3020      	adds	r0, #32
 80025a0:	e002      	b.n	80025a8 <__clzdi2+0x14>
 80025a2:	0008      	movs	r0, r1
 80025a4:	f7ff ffd8 	bl	8002558 <__clzsi2>
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)

080025ac <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025b2:	003b      	movs	r3, r7
 80025b4:	0018      	movs	r0, r3
 80025b6:	2308      	movs	r3, #8
 80025b8:	001a      	movs	r2, r3
 80025ba:	2100      	movs	r1, #0
 80025bc:	f007 f8de 	bl	800977c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <MX_ADC_Init+0xbc>)
 80025c2:	4a2a      	ldr	r2, [pc, #168]	; (800266c <MX_ADC_Init+0xc0>)
 80025c4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80025c6:	4b28      	ldr	r3, [pc, #160]	; (8002668 <MX_ADC_Init+0xbc>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <MX_ADC_Init+0xbc>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80025d2:	4b25      	ldr	r3, [pc, #148]	; (8002668 <MX_ADC_Init+0xbc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80025d8:	4b23      	ldr	r3, [pc, #140]	; (8002668 <MX_ADC_Init+0xbc>)
 80025da:	2207      	movs	r2, #7
 80025dc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80025de:	4b22      	ldr	r3, [pc, #136]	; (8002668 <MX_ADC_Init+0xbc>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025e4:	4b20      	ldr	r3, [pc, #128]	; (8002668 <MX_ADC_Init+0xbc>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80025ea:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <MX_ADC_Init+0xbc>)
 80025ec:	2220      	movs	r2, #32
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <MX_ADC_Init+0xbc>)
 80025f4:	2221      	movs	r2, #33	; 0x21
 80025f6:	2100      	movs	r1, #0
 80025f8:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <MX_ADC_Init+0xbc>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <MX_ADC_Init+0xbc>)
 8002602:	22c2      	movs	r2, #194	; 0xc2
 8002604:	32ff      	adds	r2, #255	; 0xff
 8002606:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002608:	4b17      	ldr	r3, [pc, #92]	; (8002668 <MX_ADC_Init+0xbc>)
 800260a:	222c      	movs	r2, #44	; 0x2c
 800260c:	2101      	movs	r1, #1
 800260e:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002610:	4b15      	ldr	r3, [pc, #84]	; (8002668 <MX_ADC_Init+0xbc>)
 8002612:	2204      	movs	r2, #4
 8002614:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002616:	4b14      	ldr	r3, [pc, #80]	; (8002668 <MX_ADC_Init+0xbc>)
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <MX_ADC_Init+0xbc>)
 800261e:	2200      	movs	r2, #0
 8002620:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <MX_ADC_Init+0xbc>)
 8002624:	2200      	movs	r2, #0
 8002626:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002628:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <MX_ADC_Init+0xbc>)
 800262a:	2200      	movs	r2, #0
 800262c:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <MX_ADC_Init+0xbc>)
 8002630:	0018      	movs	r0, r3
 8002632:	f001 fc4d 	bl	8003ed0 <HAL_ADC_Init>
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d001      	beq.n	800263e <MX_ADC_Init+0x92>
  {
    Error_Handler();
 800263a:	f000 faed 	bl	8002c18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800263e:	003b      	movs	r3, r7
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002644:	003b      	movs	r3, r7
 8002646:	2280      	movs	r2, #128	; 0x80
 8002648:	0152      	lsls	r2, r2, #5
 800264a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800264c:	003a      	movs	r2, r7
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <MX_ADC_Init+0xbc>)
 8002650:	0011      	movs	r1, r2
 8002652:	0018      	movs	r0, r3
 8002654:	f001 fdb0 	bl	80041b8 <HAL_ADC_ConfigChannel>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d001      	beq.n	8002660 <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 800265c:	f000 fadc 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200001f0 	.word	0x200001f0
 800266c:	40012400 	.word	0x40012400

08002670 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	240c      	movs	r4, #12
 800267a:	193b      	adds	r3, r7, r4
 800267c:	0018      	movs	r0, r3
 800267e:	2314      	movs	r3, #20
 8002680:	001a      	movs	r2, r3
 8002682:	2100      	movs	r1, #0
 8002684:	f007 f87a 	bl	800977c <memset>
  if(adcHandle->Instance==ADC1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a2a      	ldr	r2, [pc, #168]	; (8002738 <HAL_ADC_MspInit+0xc8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d14d      	bne.n	800272e <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002692:	4b2a      	ldr	r3, [pc, #168]	; (800273c <HAL_ADC_MspInit+0xcc>)
 8002694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002696:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_ADC_MspInit+0xcc>)
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	0089      	lsls	r1, r1, #2
 800269c:	430a      	orrs	r2, r1
 800269e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	4b26      	ldr	r3, [pc, #152]	; (800273c <HAL_ADC_MspInit+0xcc>)
 80026a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a4:	4b25      	ldr	r3, [pc, #148]	; (800273c <HAL_ADC_MspInit+0xcc>)
 80026a6:	2101      	movs	r1, #1
 80026a8:	430a      	orrs	r2, r1
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <HAL_ADC_MspInit+0xcc>)
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	2201      	movs	r2, #1
 80026b2:	4013      	ands	r3, r2
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026b8:	193b      	adds	r3, r7, r4
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026be:	193b      	adds	r3, r7, r4
 80026c0:	2203      	movs	r2, #3
 80026c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	193b      	adds	r3, r7, r4
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ca:	193a      	adds	r2, r7, r4
 80026cc:	23a0      	movs	r3, #160	; 0xa0
 80026ce:	05db      	lsls	r3, r3, #23
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f002 f8bc 	bl	8004850 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 80026da:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_ADC_MspInit+0xd4>)
 80026dc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 8002700:	2280      	movs	r2, #128	; 0x80
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 8002708:	2220      	movs	r2, #32
 800270a:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 800270e:	2200      	movs	r2, #0
 8002710:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 8002714:	0018      	movs	r0, r3
 8002716:	f001 feed 	bl	80044f4 <HAL_DMA_Init>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d001      	beq.n	8002722 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800271e:	f000 fa7b 	bl	8002c18 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a06      	ldr	r2, [pc, #24]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 8002726:	64da      	str	r2, [r3, #76]	; 0x4c
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_ADC_MspInit+0xd0>)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b009      	add	sp, #36	; 0x24
 8002734:	bd90      	pop	{r4, r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	40012400 	.word	0x40012400
 800273c:	40021000 	.word	0x40021000
 8002740:	2000024c 	.word	0x2000024c
 8002744:	40020008 	.word	0x40020008

08002748 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <MX_DMA_Init+0x38>)
 8002750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <MX_DMA_Init+0x38>)
 8002754:	2101      	movs	r1, #1
 8002756:	430a      	orrs	r2, r1
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <MX_DMA_Init+0x38>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	2201      	movs	r2, #1
 8002760:	4013      	ands	r3, r2
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2101      	movs	r1, #1
 800276a:	2009      	movs	r0, #9
 800276c:	f001 fe90 	bl	8004490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002770:	2009      	movs	r0, #9
 8002772:	f001 fea2 	bl	80044ba <HAL_NVIC_EnableIRQ>

}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	b002      	add	sp, #8
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	40021000 	.word	0x40021000

08002784 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b08b      	sub	sp, #44	; 0x2c
 8002788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278a:	2414      	movs	r4, #20
 800278c:	193b      	adds	r3, r7, r4
 800278e:	0018      	movs	r0, r3
 8002790:	2314      	movs	r3, #20
 8002792:	001a      	movs	r2, r3
 8002794:	2100      	movs	r1, #0
 8002796:	f006 fff1 	bl	800977c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800279a:	4b48      	ldr	r3, [pc, #288]	; (80028bc <MX_GPIO_Init+0x138>)
 800279c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <MX_GPIO_Init+0x138>)
 80027a0:	2104      	movs	r1, #4
 80027a2:	430a      	orrs	r2, r1
 80027a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027a6:	4b45      	ldr	r3, [pc, #276]	; (80028bc <MX_GPIO_Init+0x138>)
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	2204      	movs	r2, #4
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027b2:	4b42      	ldr	r3, [pc, #264]	; (80028bc <MX_GPIO_Init+0x138>)
 80027b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b6:	4b41      	ldr	r3, [pc, #260]	; (80028bc <MX_GPIO_Init+0x138>)
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	430a      	orrs	r2, r1
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80027be:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <MX_GPIO_Init+0x138>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	4013      	ands	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <MX_GPIO_Init+0x138>)
 80027cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ce:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <MX_GPIO_Init+0x138>)
 80027d0:	2101      	movs	r1, #1
 80027d2:	430a      	orrs	r2, r1
 80027d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027d6:	4b39      	ldr	r3, [pc, #228]	; (80028bc <MX_GPIO_Init+0x138>)
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	2201      	movs	r2, #1
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	4b36      	ldr	r3, [pc, #216]	; (80028bc <MX_GPIO_Init+0x138>)
 80027e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e6:	4b35      	ldr	r3, [pc, #212]	; (80028bc <MX_GPIO_Init+0x138>)
 80027e8:	2102      	movs	r1, #2
 80027ea:	430a      	orrs	r2, r1
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80027ee:	4b33      	ldr	r3, [pc, #204]	; (80028bc <MX_GPIO_Init+0x138>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	2202      	movs	r2, #2
 80027f4:	4013      	ands	r3, r2
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80027fa:	23a0      	movs	r3, #160	; 0xa0
 80027fc:	05db      	lsls	r3, r3, #23
 80027fe:	2200      	movs	r2, #0
 8002800:	2120      	movs	r1, #32
 8002802:	0018      	movs	r0, r3
 8002804:	f002 f99a 	bl	8004b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8002808:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <MX_GPIO_Init+0x13c>)
 800280a:	2200      	movs	r2, #0
 800280c:	21c0      	movs	r1, #192	; 0xc0
 800280e:	0018      	movs	r0, r3
 8002810:	f002 f994 	bl	8004b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002814:	193b      	adds	r3, r7, r4
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	0192      	lsls	r2, r2, #6
 800281a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800281c:	193b      	adds	r3, r7, r4
 800281e:	2284      	movs	r2, #132	; 0x84
 8002820:	0392      	lsls	r2, r2, #14
 8002822:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	193b      	adds	r3, r7, r4
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800282a:	193b      	adds	r3, r7, r4
 800282c:	4a24      	ldr	r2, [pc, #144]	; (80028c0 <MX_GPIO_Init+0x13c>)
 800282e:	0019      	movs	r1, r3
 8002830:	0010      	movs	r0, r2
 8002832:	f002 f80d 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002836:	193b      	adds	r3, r7, r4
 8002838:	2220      	movs	r2, #32
 800283a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283c:	193b      	adds	r3, r7, r4
 800283e:	2201      	movs	r2, #1
 8002840:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	193b      	adds	r3, r7, r4
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	193b      	adds	r3, r7, r4
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800284e:	193a      	adds	r2, r7, r4
 8002850:	23a0      	movs	r3, #160	; 0xa0
 8002852:	05db      	lsls	r3, r3, #23
 8002854:	0011      	movs	r1, r2
 8002856:	0018      	movs	r0, r3
 8002858:	f001 fffa 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 800285c:	193b      	adds	r3, r7, r4
 800285e:	22c0      	movs	r2, #192	; 0xc0
 8002860:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002862:	193b      	adds	r3, r7, r4
 8002864:	2201      	movs	r2, #1
 8002866:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	193b      	adds	r3, r7, r4
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	193b      	adds	r3, r7, r4
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002874:	193b      	adds	r3, r7, r4
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <MX_GPIO_Init+0x13c>)
 8002878:	0019      	movs	r1, r3
 800287a:	0010      	movs	r0, r2
 800287c:	f001 ffe8 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8002880:	0021      	movs	r1, r4
 8002882:	187b      	adds	r3, r7, r1
 8002884:	2280      	movs	r2, #128	; 0x80
 8002886:	0052      	lsls	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800288a:	187b      	adds	r3, r7, r1
 800288c:	2288      	movs	r2, #136	; 0x88
 800288e:	0352      	lsls	r2, r2, #13
 8002890:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	187b      	adds	r3, r7, r1
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002898:	187b      	adds	r3, r7, r1
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <MX_GPIO_Init+0x13c>)
 800289c:	0019      	movs	r1, r3
 800289e:	0010      	movs	r0, r2
 80028a0:	f001 ffd6 	bl	8004850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	2100      	movs	r1, #0
 80028a8:	2007      	movs	r0, #7
 80028aa:	f001 fdf1 	bl	8004490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80028ae:	2007      	movs	r0, #7
 80028b0:	f001 fe03 	bl	80044ba <HAL_NVIC_EnableIRQ>

}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b00b      	add	sp, #44	; 0x2c
 80028ba:	bd90      	pop	{r4, r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	50000800 	.word	0x50000800

080028c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <MX_I2C1_Init+0x74>)
 80028ca:	4a1c      	ldr	r2, [pc, #112]	; (800293c <MX_I2C1_Init+0x78>)
 80028cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <MX_I2C1_Init+0x74>)
 80028d0:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <MX_I2C1_Init+0x7c>)
 80028d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028d4:	4b18      	ldr	r3, [pc, #96]	; (8002938 <MX_I2C1_Init+0x74>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <MX_I2C1_Init+0x74>)
 80028dc:	2201      	movs	r2, #1
 80028de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <MX_I2C1_Init+0x74>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028e6:	4b14      	ldr	r3, [pc, #80]	; (8002938 <MX_I2C1_Init+0x74>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <MX_I2C1_Init+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <MX_I2C1_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <MX_I2C1_Init+0x74>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <MX_I2C1_Init+0x74>)
 8002900:	0018      	movs	r0, r3
 8002902:	f002 f979 	bl	8004bf8 <HAL_I2C_Init>
 8002906:	1e03      	subs	r3, r0, #0
 8002908:	d001      	beq.n	800290e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800290a:	f000 f985 	bl	8002c18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <MX_I2C1_Init+0x74>)
 8002910:	2100      	movs	r1, #0
 8002912:	0018      	movs	r0, r3
 8002914:	f002 fa06 	bl	8004d24 <HAL_I2CEx_ConfigAnalogFilter>
 8002918:	1e03      	subs	r3, r0, #0
 800291a:	d001      	beq.n	8002920 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800291c:	f000 f97c 	bl	8002c18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <MX_I2C1_Init+0x74>)
 8002922:	2100      	movs	r1, #0
 8002924:	0018      	movs	r0, r3
 8002926:	f002 fa49 	bl	8004dbc <HAL_I2CEx_ConfigDigitalFilter>
 800292a:	1e03      	subs	r3, r0, #0
 800292c:	d001      	beq.n	8002932 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800292e:	f000 f973 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000294 	.word	0x20000294
 800293c:	40005400 	.word	0x40005400
 8002940:	00707cbb 	.word	0x00707cbb

08002944 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	240c      	movs	r4, #12
 800294e:	193b      	adds	r3, r7, r4
 8002950:	0018      	movs	r0, r3
 8002952:	2314      	movs	r3, #20
 8002954:	001a      	movs	r2, r3
 8002956:	2100      	movs	r1, #0
 8002958:	f006 ff10 	bl	800977c <memset>
  if(i2cHandle->Instance==I2C1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a17      	ldr	r2, [pc, #92]	; (80029c0 <HAL_I2C_MspInit+0x7c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d128      	bne.n	80029b8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_I2C_MspInit+0x80>)
 8002968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_I2C_MspInit+0x80>)
 800296c:	2102      	movs	r1, #2
 800296e:	430a      	orrs	r2, r1
 8002970:	62da      	str	r2, [r3, #44]	; 0x2c
 8002972:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <HAL_I2C_MspInit+0x80>)
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	2202      	movs	r2, #2
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800297e:	0021      	movs	r1, r4
 8002980:	187b      	adds	r3, r7, r1
 8002982:	22c0      	movs	r2, #192	; 0xc0
 8002984:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002986:	187b      	adds	r3, r7, r1
 8002988:	2212      	movs	r2, #18
 800298a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	187b      	adds	r3, r7, r1
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	187b      	adds	r3, r7, r1
 8002994:	2203      	movs	r2, #3
 8002996:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002998:	187b      	adds	r3, r7, r1
 800299a:	2201      	movs	r2, #1
 800299c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299e:	187b      	adds	r3, r7, r1
 80029a0:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <HAL_I2C_MspInit+0x84>)
 80029a2:	0019      	movs	r1, r3
 80029a4:	0010      	movs	r0, r2
 80029a6:	f001 ff53 	bl	8004850 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_I2C_MspInit+0x80>)
 80029ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_I2C_MspInit+0x80>)
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	0389      	lsls	r1, r1, #14
 80029b4:	430a      	orrs	r2, r1
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b009      	add	sp, #36	; 0x24
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	40005400 	.word	0x40005400
 80029c4:	40021000 	.word	0x40021000
 80029c8:	50000400 	.word	0x50000400

080029cc <HAL_UART_RxCpltCallback>:
uint8_t UARTMessage[NRF24_PAYLOAD_SIZE];
uint8_t Message[NRF24_PAYLOAD_SIZE];
uint8_t MessageLength;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if(huart == &hlpuart1)
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_UART_RxCpltCallback+0x30>)
 80029d8:	429a      	cmp	r2, r3
 80029da:	d10b      	bne.n	80029f4 <HAL_UART_RxCpltCallback+0x28>
  {
	  HAL_UART_Receive_IT(&hlpuart1, UARTMessage, sizeof(UARTMessage)); // receive from pcb
 80029dc:	4908      	ldr	r1, [pc, #32]	; (8002a00 <HAL_UART_RxCpltCallback+0x34>)
 80029de:	4b07      	ldr	r3, [pc, #28]	; (80029fc <HAL_UART_RxCpltCallback+0x30>)
 80029e0:	22ff      	movs	r2, #255	; 0xff
 80029e2:	0018      	movs	r0, r3
 80029e4:	f004 fb7a 	bl	80070dc <HAL_UART_Receive_IT>
	  HAL_UART_Transmit_IT(&huart2, UARTMessage, sizeof(UARTMessage)); // send to pc
 80029e8:	4905      	ldr	r1, [pc, #20]	; (8002a00 <HAL_UART_RxCpltCallback+0x34>)
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_UART_RxCpltCallback+0x38>)
 80029ec:	22ff      	movs	r2, #255	; 0xff
 80029ee:	0018      	movs	r0, r3
 80029f0:	f004 fb04 	bl	8006ffc <HAL_UART_Transmit_IT>
  }
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	2000068c 	.word	0x2000068c
 8002a00:	200003e8 	.word	0x200003e8
 8002a04:	2000079c 	.word	0x2000079c

08002a08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d10b      	bne.n	8002a30 <HAL_TIM_PeriodElapsedCallback+0x28>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002a18:	23a0      	movs	r3, #160	; 0xa0
 8002a1a:	05db      	lsls	r3, r3, #23
 8002a1c:	2120      	movs	r1, #32
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f002 f8a9 	bl	8004b76 <HAL_GPIO_TogglePin>

    HAL_UART_Transmit_IT(&huart2, ".", 1);
 8002a24:	4905      	ldr	r1, [pc, #20]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f004 fae6 	bl	8006ffc <HAL_UART_Transmit_IT>
  }
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	2000064c 	.word	0x2000064c
 8002a3c:	0800d150 	.word	0x0800d150
 8002a40:	2000079c 	.word	0x2000079c

08002a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a4a:	f001 f9ad 	bl	8003da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a4e:	f000 f863 	bl	8002b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a52:	f7ff fe97 	bl	8002784 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a56:	f7ff fe77 	bl	8002748 <MX_DMA_Init>
  MX_I2C1_Init();
 8002a5a:	f7ff ff33 	bl	80028c4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002a5e:	f001 f853 	bl	8003b08 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002a62:	f001 f885 	bl	8003b70 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002a66:	f000 fde9 	bl	800363c <MX_SPI1_Init>
  MX_TIM6_Init();
 8002a6a:	f000 ffbd 	bl	80039e8 <MX_TIM6_Init>
  MX_ADC_Init();
 8002a6e:	f7ff fd9d 	bl	80025ac <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 8002a72:	f001 f817 	bl	8003aa4 <MX_LPUART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim6);
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <main+0xa8>)
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f003 ffcb 	bl	8006a14 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&hlpuart1, UARTMessage, sizeof(UARTMessage));
 8002a7e:	491c      	ldr	r1, [pc, #112]	; (8002af0 <main+0xac>)
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <main+0xb0>)
 8002a82:	22ff      	movs	r2, #255	; 0xff
 8002a84:	0018      	movs	r0, r3
 8002a86:	f004 fb29 	bl	80070dc <HAL_UART_Receive_IT>

  // NRF RECEIVER
  nRF24_Init(&hspi1);
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <main+0xb4>)
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 fd69 	bl	8003564 <nRF24_Init>
  nRF24_SetRXAddress(0, "Odb");
 8002a92:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <main+0xb8>)
 8002a94:	0019      	movs	r1, r3
 8002a96:	2000      	movs	r0, #0
 8002a98:	f000 fbe4 	bl	8003264 <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Nad");
 8002a9c:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <main+0xbc>)
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 fc26 	bl	80032f0 <nRF24_SetTXAddress>
  nRF24_RX_Mode();
 8002aa4:	f000 f9b0 	bl	8002e08 <nRF24_RX_Mode>
  uint8_t size = 0;
 8002aa8:	1dfb      	adds	r3, r7, #7
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	  /////////////// NRF ///////////////

	  if(nRF24_RXAvailible())
 8002aae:	f000 fd35 	bl	800351c <nRF24_RXAvailible>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d0fb      	beq.n	8002aae <main+0x6a>
	  {
		  nRF24_ReadRXPaylaod(Nrf24_Message, &size);
 8002ab6:	1dfa      	adds	r2, r7, #7
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <main+0xc0>)
 8002aba:	0011      	movs	r1, r2
 8002abc:	0018      	movs	r0, r3
 8002abe:	f000 fd17 	bl	80034f0 <nRF24_ReadRXPaylaod>
		  MessageLength = sprintf(Message, "%c\n\r", Nrf24_Message);
 8002ac2:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <main+0xc0>)
 8002ac4:	4910      	ldr	r1, [pc, #64]	; (8002b08 <main+0xc4>)
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <main+0xc8>)
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f006 fdeb 	bl	80096a4 <siprintf>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <main+0xcc>)
 8002ad4:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <main+0xcc>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	23fa      	movs	r3, #250	; 0xfa
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	490a      	ldr	r1, [pc, #40]	; (8002b0c <main+0xc8>)
 8002ae2:	480c      	ldr	r0, [pc, #48]	; (8002b14 <main+0xd0>)
 8002ae4:	f004 f9ea 	bl	8006ebc <HAL_UART_Transmit>
	  if(nRF24_RXAvailible())
 8002ae8:	e7e1      	b.n	8002aae <main+0x6a>
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	2000064c 	.word	0x2000064c
 8002af0:	200003e8 	.word	0x200003e8
 8002af4:	2000068c 	.word	0x2000068c
 8002af8:	200005f0 	.word	0x200005f0
 8002afc:	0800d154 	.word	0x0800d154
 8002b00:	0800d158 	.word	0x0800d158
 8002b04:	200002e8 	.word	0x200002e8
 8002b08:	0800d15c 	.word	0x0800d15c
 8002b0c:	200004e8 	.word	0x200004e8
 8002b10:	200005e7 	.word	0x200005e7
 8002b14:	2000079c 	.word	0x2000079c

08002b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b09d      	sub	sp, #116	; 0x74
 8002b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b1e:	2438      	movs	r4, #56	; 0x38
 8002b20:	193b      	adds	r3, r7, r4
 8002b22:	0018      	movs	r0, r3
 8002b24:	2338      	movs	r3, #56	; 0x38
 8002b26:	001a      	movs	r2, r3
 8002b28:	2100      	movs	r1, #0
 8002b2a:	f006 fe27 	bl	800977c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b2e:	2324      	movs	r3, #36	; 0x24
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	0018      	movs	r0, r3
 8002b34:	2314      	movs	r3, #20
 8002b36:	001a      	movs	r2, r3
 8002b38:	2100      	movs	r1, #0
 8002b3a:	f006 fe1f 	bl	800977c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b3e:	003b      	movs	r3, r7
 8002b40:	0018      	movs	r0, r3
 8002b42:	2324      	movs	r3, #36	; 0x24
 8002b44:	001a      	movs	r2, r3
 8002b46:	2100      	movs	r1, #0
 8002b48:	f006 fe18 	bl	800977c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b4c:	4b30      	ldr	r3, [pc, #192]	; (8002c10 <SystemClock_Config+0xf8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a30      	ldr	r2, [pc, #192]	; (8002c14 <SystemClock_Config+0xfc>)
 8002b52:	401a      	ands	r2, r3
 8002b54:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <SystemClock_Config+0xf8>)
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	0109      	lsls	r1, r1, #4
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002b5e:	193b      	adds	r3, r7, r4
 8002b60:	2203      	movs	r2, #3
 8002b62:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002b64:	193b      	adds	r3, r7, r4
 8002b66:	22a0      	movs	r2, #160	; 0xa0
 8002b68:	02d2      	lsls	r2, r2, #11
 8002b6a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b6c:	0021      	movs	r1, r4
 8002b6e:	187b      	adds	r3, r7, r1
 8002b70:	2201      	movs	r2, #1
 8002b72:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	2210      	movs	r2, #16
 8002b78:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b7a:	187b      	adds	r3, r7, r1
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b80:	187b      	adds	r3, r7, r1
 8002b82:	2280      	movs	r2, #128	; 0x80
 8002b84:	0252      	lsls	r2, r2, #9
 8002b86:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8002b88:	187b      	adds	r3, r7, r1
 8002b8a:	22c0      	movs	r2, #192	; 0xc0
 8002b8c:	0312      	lsls	r2, r2, #12
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	2280      	movs	r2, #128	; 0x80
 8002b94:	03d2      	lsls	r2, r2, #15
 8002b96:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f002 f95a 	bl	8004e54 <HAL_RCC_OscConfig>
 8002ba0:	1e03      	subs	r3, r0, #0
 8002ba2:	d001      	beq.n	8002ba8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002ba4:	f000 f838 	bl	8002c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ba8:	2124      	movs	r1, #36	; 0x24
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	220f      	movs	r2, #15
 8002bae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bb0:	187b      	adds	r3, r7, r1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	2101      	movs	r1, #1
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f002 fd05 	bl	80055dc <HAL_RCC_ClockConfig>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d001      	beq.n	8002bda <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002bd6:	f000 f81f 	bl	8002c18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002bda:	003b      	movs	r3, r7
 8002bdc:	220f      	movs	r2, #15
 8002bde:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002be0:	003b      	movs	r3, r7
 8002be2:	2200      	movs	r2, #0
 8002be4:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002be6:	003b      	movs	r3, r7
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002bec:	003b      	movs	r3, r7
 8002bee:	2200      	movs	r2, #0
 8002bf0:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002bf2:	003b      	movs	r3, r7
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bf8:	003b      	movs	r3, r7
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f002 ff12 	bl	8005a24 <HAL_RCCEx_PeriphCLKConfig>
 8002c00:	1e03      	subs	r3, r0, #0
 8002c02:	d001      	beq.n	8002c08 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8002c04:	f000 f808 	bl	8002c18 <Error_Handler>
  }
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b01d      	add	sp, #116	; 0x74
 8002c0e:	bd90      	pop	{r4, r7, pc}
 8002c10:	40007000 	.word	0x40007000
 8002c14:	ffffe7ff 	.word	0xffffe7ff

08002c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c1c:	b672      	cpsid	i
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <Error_Handler+0x8>

08002c22 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH           HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW            HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	0002      	movs	r2, r0
 8002c2a:	1dfb      	adds	r3, r7, #7
 8002c2c:	701a      	strb	r2, [r3, #0]
        HAL_Delay(Time);
 8002c2e:	1dfb      	adds	r3, r7, #7
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f001 f928 	bl	8003e88 <HAL_Delay>
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	000a      	movs	r2, r1
 8002c4a:	1cfb      	adds	r3, r7, #3
 8002c4c:	701a      	strb	r2, [r3, #0]
        HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <nRF24_SendSpi+0x2c>)
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	1cfb      	adds	r3, r7, #3
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	23fa      	movs	r3, #250	; 0xfa
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	f003 f903 	bl	8005e68 <HAL_SPI_Transmit>
}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b002      	add	sp, #8
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	200005e8 	.word	0x200005e8

08002c70 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1cfb      	adds	r3, r7, #3
 8002c7c:	701a      	strb	r2, [r3, #0]
        HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <nRF24_ReadSpi+0x2c>)
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	1cfb      	adds	r3, r7, #3
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	23fa      	movs	r3, #250	; 0xfa
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	f003 fa49 	bl	8006124 <HAL_SPI_Receive>
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b002      	add	sp, #8
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	200005e8 	.word	0x200005e8

08002ca0 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	1dfb      	adds	r3, r7, #7
 8002caa:	701a      	strb	r2, [r3, #0]
        uint8_t result;

        reg = NRF24_CMD_R_REGISTER | reg;
 8002cac:	1dfb      	adds	r3, r7, #7
 8002cae:	781a      	ldrb	r2, [r3, #0]
 8002cb0:	1dfb      	adds	r3, r7, #7
 8002cb2:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <nRF24_ReadRegister+0x50>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2140      	movs	r1, #64	; 0x40
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f001 ff3e 	bl	8004b3c <HAL_GPIO_WritePin>
        nRF24_SendSpi(&reg, 1);
 8002cc0:	1dfb      	adds	r3, r7, #7
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7ff ffbb 	bl	8002c40 <nRF24_SendSpi>
        nRF24_ReadSpi(&result, 1);
 8002cca:	240f      	movs	r4, #15
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	2101      	movs	r1, #1
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f7ff ffcd 	bl	8002c70 <nRF24_ReadSpi>
        NRF24_CSN_HIGH;
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <nRF24_ReadRegister+0x50>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	2140      	movs	r1, #64	; 0x40
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f001 ff2d 	bl	8004b3c <HAL_GPIO_WritePin>

        return result;
 8002ce2:	193b      	adds	r3, r7, r4
 8002ce4:	781b      	ldrb	r3, [r3, #0]
}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b005      	add	sp, #20
 8002cec:	bd90      	pop	{r4, r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	50000800 	.word	0x50000800

08002cf4 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6039      	str	r1, [r7, #0]
 8002cfc:	0011      	movs	r1, r2
 8002cfe:	1dfb      	adds	r3, r7, #7
 8002d00:	1c02      	adds	r2, r0, #0
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	1dbb      	adds	r3, r7, #6
 8002d06:	1c0a      	adds	r2, r1, #0
 8002d08:	701a      	strb	r2, [r3, #0]
        reg = NRF24_CMD_R_REGISTER | reg;
 8002d0a:	1dfb      	adds	r3, r7, #7
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	1dfb      	adds	r3, r7, #7
 8002d10:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <nRF24_ReadRegisters+0x58>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	2140      	movs	r1, #64	; 0x40
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f001 ff0f 	bl	8004b3c <HAL_GPIO_WritePin>

        nRF24_SendSpi(&reg, 1);
 8002d1e:	1dfb      	adds	r3, r7, #7
 8002d20:	2101      	movs	r1, #1
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7ff ff8c 	bl	8002c40 <nRF24_SendSpi>
        nRF24_ReadSpi(ret, len);
 8002d28:	1dbb      	adds	r3, r7, #6
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	0011      	movs	r1, r2
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7ff ff9d 	bl	8002c70 <nRF24_ReadSpi>

        NRF24_CSN_HIGH;
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <nRF24_ReadRegisters+0x58>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	2140      	movs	r1, #64	; 0x40
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f001 fefd 	bl	8004b3c <HAL_GPIO_WritePin>
}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b002      	add	sp, #8
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	50000800 	.word	0x50000800

08002d50 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	0002      	movs	r2, r0
 8002d58:	1dfb      	adds	r3, r7, #7
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	1dbb      	adds	r3, r7, #6
 8002d5e:	1c0a      	adds	r2, r1, #0
 8002d60:	701a      	strb	r2, [r3, #0]
        uint8_t tmp[2];

        tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2220      	movs	r2, #32
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	240c      	movs	r4, #12
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	701a      	strb	r2, [r3, #0]
        tmp[1] = val;
 8002d72:	193b      	adds	r3, r7, r4
 8002d74:	1dba      	adds	r2, r7, #6
 8002d76:	7812      	ldrb	r2, [r2, #0]
 8002d78:	705a      	strb	r2, [r3, #1]

        NRF24_CSN_LOW;
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <nRF24_WriteRegister+0x54>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2140      	movs	r1, #64	; 0x40
 8002d80:	0018      	movs	r0, r3
 8002d82:	f001 fedb 	bl	8004b3c <HAL_GPIO_WritePin>

        nRF24_SendSpi(tmp, 2);
 8002d86:	193b      	adds	r3, r7, r4
 8002d88:	2102      	movs	r1, #2
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f7ff ff58 	bl	8002c40 <nRF24_SendSpi>

        NRF24_CSN_HIGH;
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <nRF24_WriteRegister+0x54>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	2140      	movs	r1, #64	; 0x40
 8002d96:	0018      	movs	r0, r3
 8002d98:	f001 fed0 	bl	8004b3c <HAL_GPIO_WritePin>
}
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b005      	add	sp, #20
 8002da2:	bd90      	pop	{r4, r7, pc}
 8002da4:	50000800 	.word	0x50000800

08002da8 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6039      	str	r1, [r7, #0]
 8002db0:	0011      	movs	r1, r2
 8002db2:	1dfb      	adds	r3, r7, #7
 8002db4:	1c02      	adds	r2, r0, #0
 8002db6:	701a      	strb	r2, [r3, #0]
 8002db8:	1dbb      	adds	r3, r7, #6
 8002dba:	1c0a      	adds	r2, r1, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
        reg = NRF24_CMD_W_REGISTER | reg;
 8002dbe:	1dfb      	adds	r3, r7, #7
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	1dfb      	adds	r3, r7, #7
 8002dca:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <nRF24_WriteRegisters+0x5c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2140      	movs	r1, #64	; 0x40
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f001 feb2 	bl	8004b3c <HAL_GPIO_WritePin>

        nRF24_SendSpi(&reg, 1);
 8002dd8:	1dfb      	adds	r3, r7, #7
 8002dda:	2101      	movs	r1, #1
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f7ff ff2f 	bl	8002c40 <nRF24_SendSpi>
        nRF24_SendSpi(val, len);
 8002de2:	1dbb      	adds	r3, r7, #6
 8002de4:	781a      	ldrb	r2, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	0011      	movs	r1, r2
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7ff ff28 	bl	8002c40 <nRF24_SendSpi>

        NRF24_CSN_HIGH;
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <nRF24_WriteRegisters+0x5c>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	2140      	movs	r1, #64	; 0x40
 8002df6:	0018      	movs	r0, r3
 8002df8:	f001 fea0 	bl	8004b3c <HAL_GPIO_WritePin>
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b002      	add	sp, #8
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	50000800 	.word	0x50000800

08002e08 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
        uint8_t config = nRF24_ReadConfig();
 8002e0e:	1dfc      	adds	r4, r7, #7
 8002e10:	f000 f830 	bl	8002e74 <nRF24_ReadConfig>
 8002e14:	0003      	movs	r3, r0
 8002e16:	7023      	strb	r3, [r4, #0]
        // Restore pipe 0 adress after comeback from TX mode
        nRF24_SetRXAddress(0, addr_p0_backup);
 8002e18:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <nRF24_RX_Mode+0x64>)
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f000 fa21 	bl	8003264 <nRF24_SetRXAddress>
        // PWR_UP bit set
        config |= (1<<NRF24_PWR_UP);
 8002e22:	1dfb      	adds	r3, r7, #7
 8002e24:	1dfa      	adds	r2, r7, #7
 8002e26:	7812      	ldrb	r2, [r2, #0]
 8002e28:	2102      	movs	r1, #2
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	701a      	strb	r2, [r3, #0]
        // PRIM_RX bit set
        config |= (1<<NRF24_PRIM_RX);
 8002e2e:	1dfb      	adds	r3, r7, #7
 8002e30:	1dfa      	adds	r2, r7, #7
 8002e32:	7812      	ldrb	r2, [r2, #0]
 8002e34:	2101      	movs	r1, #1
 8002e36:	430a      	orrs	r2, r1
 8002e38:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 8002e3a:	1dfb      	adds	r3, r7, #7
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 f821 	bl	8002e86 <nRF24_WriteConfig>
        // Reset status
        nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002e44:	2070      	movs	r0, #112	; 0x70
 8002e46:	f000 f895 	bl	8002f74 <nRF24_WriteStatus>
        // Flush RX
        nRF24_FlushRX();
 8002e4a:	f000 f8a3 	bl	8002f94 <nRF24_FlushRX>
        // Flush TX
        nRF24_FlushTX();
 8002e4e:	f000 f8bf 	bl	8002fd0 <nRF24_FlushTX>

        NRF24_CE_HIGH;
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <nRF24_RX_Mode+0x68>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f001 fe6f 	bl	8004b3c <HAL_GPIO_WritePin>
        nRF24_Delay_ms(1);
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f7ff fedf 	bl	8002c22 <nRF24_Delay_ms>
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b003      	add	sp, #12
 8002e6a:	bd90      	pop	{r4, r7, pc}
 8002e6c:	200005ec 	.word	0x200005ec
 8002e70:	50000800 	.word	0x50000800

08002e74 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
        return (nRF24_ReadRegister(NRF24_CONFIG));
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7ff ff11 	bl	8002ca0 <nRF24_ReadRegister>
 8002e7e:	0003      	movs	r3, r0
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	0002      	movs	r2, r0
 8002e8e:	1dfb      	adds	r3, r7, #7
 8002e90:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_CONFIG, conf);
 8002e92:	1dfb      	adds	r3, r7, #7
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	0019      	movs	r1, r3
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7ff ff59 	bl	8002d50 <nRF24_WriteRegister>
}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b002      	add	sp, #8
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8002ea6:	b5b0      	push	{r4, r5, r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	0002      	movs	r2, r0
 8002eae:	1dfb      	adds	r3, r7, #7
 8002eb0:	701a      	strb	r2, [r3, #0]
        uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002eb2:	250f      	movs	r5, #15
 8002eb4:	197c      	adds	r4, r7, r5
 8002eb6:	2006      	movs	r0, #6
 8002eb8:	f7ff fef2 	bl	8002ca0 <nRF24_ReadRegister>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	7023      	strb	r3, [r4, #0]
        rf_setup &= 0xF8; // Clear PWR bits
 8002ec0:	0028      	movs	r0, r5
 8002ec2:	183b      	adds	r3, r7, r0
 8002ec4:	183a      	adds	r2, r7, r0
 8002ec6:	7812      	ldrb	r2, [r2, #0]
 8002ec8:	2107      	movs	r1, #7
 8002eca:	438a      	bics	r2, r1
 8002ecc:	701a      	strb	r2, [r3, #0]
        rf_setup |= (lev<<1);
 8002ece:	1dfb      	adds	r3, r7, #7
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	b25a      	sxtb	r2, r3
 8002ed6:	183b      	adds	r3, r7, r0
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	b25b      	sxtb	r3, r3
 8002edc:	4313      	orrs	r3, r2
 8002ede:	b25a      	sxtb	r2, r3
 8002ee0:	183b      	adds	r3, r7, r0
 8002ee2:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002ee4:	183b      	adds	r3, r7, r0
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	0019      	movs	r1, r3
 8002eea:	2006      	movs	r0, #6
 8002eec:	f7ff ff30 	bl	8002d50 <nRF24_WriteRegister>
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b004      	add	sp, #16
 8002ef6:	bdb0      	pop	{r4, r5, r7, pc}

08002ef8 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8002ef8:	b5b0      	push	{r4, r5, r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	0002      	movs	r2, r0
 8002f00:	1dfb      	adds	r3, r7, #7
 8002f02:	701a      	strb	r2, [r3, #0]
        uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002f04:	250f      	movs	r5, #15
 8002f06:	197c      	adds	r4, r7, r5
 8002f08:	2006      	movs	r0, #6
 8002f0a:	f7ff fec9 	bl	8002ca0 <nRF24_ReadRegister>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	7023      	strb	r3, [r4, #0]
        rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002f12:	0028      	movs	r0, r5
 8002f14:	183b      	adds	r3, r7, r0
 8002f16:	183a      	adds	r2, r7, r0
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	2128      	movs	r1, #40	; 0x28
 8002f1c:	438a      	bics	r2, r1
 8002f1e:	701a      	strb	r2, [r3, #0]
        if(dr == NRF24_RF_DR_250KBPS)
 8002f20:	1dfb      	adds	r3, r7, #7
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d106      	bne.n	8002f36 <nRF24_SetDataRate+0x3e>
                rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002f28:	183b      	adds	r3, r7, r0
 8002f2a:	183a      	adds	r2, r7, r0
 8002f2c:	7812      	ldrb	r2, [r2, #0]
 8002f2e:	2120      	movs	r1, #32
 8002f30:	430a      	orrs	r2, r1
 8002f32:	701a      	strb	r2, [r3, #0]
 8002f34:	e00a      	b.n	8002f4c <nRF24_SetDataRate+0x54>
        else if(dr == NRF24_RF_DR_2MBPS)
 8002f36:	1dfb      	adds	r3, r7, #7
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d106      	bne.n	8002f4c <nRF24_SetDataRate+0x54>
                rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002f3e:	220f      	movs	r2, #15
 8002f40:	18bb      	adds	r3, r7, r2
 8002f42:	18ba      	adds	r2, r7, r2
 8002f44:	7812      	ldrb	r2, [r2, #0]
 8002f46:	2108      	movs	r1, #8
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002f4c:	230f      	movs	r3, #15
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	0019      	movs	r1, r3
 8002f54:	2006      	movs	r0, #6
 8002f56:	f7ff fefb 	bl	8002d50 <nRF24_WriteRegister>
}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b004      	add	sp, #16
 8002f60:	bdb0      	pop	{r4, r5, r7, pc}

08002f62 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	af00      	add	r7, sp, #0
        return (nRF24_ReadRegister(NRF24_STATUS));
 8002f66:	2007      	movs	r0, #7
 8002f68:	f7ff fe9a 	bl	8002ca0 <nRF24_ReadRegister>
 8002f6c:	0003      	movs	r3, r0
}
 8002f6e:	0018      	movs	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	1dfb      	adds	r3, r7, #7
 8002f7e:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_STATUS, st);
 8002f80:	1dfb      	adds	r3, r7, #7
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	0019      	movs	r1, r3
 8002f86:	2007      	movs	r0, #7
 8002f88:	f7ff fee2 	bl	8002d50 <nRF24_WriteRegister>
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <nRF24_FlushRX>:
{
        return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
        uint8_t command = NRF24_CMD_FLUSH_RX;
 8002f9a:	1dfb      	adds	r3, r7, #7
 8002f9c:	22e2      	movs	r2, #226	; 0xe2
 8002f9e:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8002fa0:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <nRF24_FlushRX+0x38>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2140      	movs	r1, #64	; 0x40
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f001 fdc8 	bl	8004b3c <HAL_GPIO_WritePin>
        nRF24_SendSpi(&command, 1);
 8002fac:	1dfb      	adds	r3, r7, #7
 8002fae:	2101      	movs	r1, #1
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7ff fe45 	bl	8002c40 <nRF24_SendSpi>
        NRF24_CSN_HIGH;
 8002fb6:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <nRF24_FlushRX+0x38>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	2140      	movs	r1, #64	; 0x40
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f001 fdbd 	bl	8004b3c <HAL_GPIO_WritePin>
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b002      	add	sp, #8
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	50000800 	.word	0x50000800

08002fd0 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
        uint8_t command = NRF24_CMD_FLUSH_TX;
 8002fd6:	1dfb      	adds	r3, r7, #7
 8002fd8:	22e1      	movs	r2, #225	; 0xe1
 8002fda:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <nRF24_FlushTX+0x38>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2140      	movs	r1, #64	; 0x40
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f001 fdaa 	bl	8004b3c <HAL_GPIO_WritePin>
        nRF24_SendSpi(&command, 1);
 8002fe8:	1dfb      	adds	r3, r7, #7
 8002fea:	2101      	movs	r1, #1
 8002fec:	0018      	movs	r0, r3
 8002fee:	f7ff fe27 	bl	8002c40 <nRF24_SendSpi>
        NRF24_CSN_HIGH;
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <nRF24_FlushTX+0x38>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	2140      	movs	r1, #64	; 0x40
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f001 fd9f 	bl	8004b3c <HAL_GPIO_WritePin>
}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	b002      	add	sp, #8
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	50000800 	.word	0x50000800

0800300c <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 800300c:	b5b0      	push	{r4, r5, r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	0002      	movs	r2, r0
 8003014:	1dfb      	adds	r3, r7, #7
 8003016:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 8003018:	250f      	movs	r5, #15
 800301a:	197c      	adds	r4, r7, r5
 800301c:	f7ff ff2a 	bl	8002e74 <nRF24_ReadConfig>
 8003020:	0003      	movs	r3, r0
 8003022:	7023      	strb	r3, [r4, #0]

        if(onoff)
 8003024:	1dfb      	adds	r3, r7, #7
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <nRF24_EnableCRC+0x2e>
                config |= (1<<NRF24_EN_CRC);
 800302c:	197b      	adds	r3, r7, r5
 800302e:	197a      	adds	r2, r7, r5
 8003030:	7812      	ldrb	r2, [r2, #0]
 8003032:	2108      	movs	r1, #8
 8003034:	430a      	orrs	r2, r1
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e006      	b.n	8003048 <nRF24_EnableCRC+0x3c>
        else
                config &= ~(1<<NRF24_EN_CRC);
 800303a:	220f      	movs	r2, #15
 800303c:	18bb      	adds	r3, r7, r2
 800303e:	18ba      	adds	r2, r7, r2
 8003040:	7812      	ldrb	r2, [r2, #0]
 8003042:	2108      	movs	r1, #8
 8003044:	438a      	bics	r2, r1
 8003046:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 8003048:	230f      	movs	r3, #15
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	0018      	movs	r0, r3
 8003050:	f7ff ff19 	bl	8002e86 <nRF24_WriteConfig>
}
 8003054:	46c0      	nop			; (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b004      	add	sp, #16
 800305a:	bdb0      	pop	{r4, r5, r7, pc}

0800305c <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800305c:	b5b0      	push	{r4, r5, r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	0002      	movs	r2, r0
 8003064:	1dfb      	adds	r3, r7, #7
 8003066:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 8003068:	250f      	movs	r5, #15
 800306a:	197c      	adds	r4, r7, r5
 800306c:	f7ff ff02 	bl	8002e74 <nRF24_ReadConfig>
 8003070:	0003      	movs	r3, r0
 8003072:	7023      	strb	r3, [r4, #0]
        if(crcl == NRF24_CRC_WIDTH_2B)
 8003074:	1dfb      	adds	r3, r7, #7
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d106      	bne.n	800308a <nRF24_SetCRCLength+0x2e>
                config |= (1<<NRF24_CRCO);
 800307c:	197b      	adds	r3, r7, r5
 800307e:	197a      	adds	r2, r7, r5
 8003080:	7812      	ldrb	r2, [r2, #0]
 8003082:	2104      	movs	r1, #4
 8003084:	430a      	orrs	r2, r1
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e006      	b.n	8003098 <nRF24_SetCRCLength+0x3c>
        else
                config &= ~(1<<NRF24_CRCO);
 800308a:	220f      	movs	r2, #15
 800308c:	18bb      	adds	r3, r7, r2
 800308e:	18ba      	adds	r2, r7, r2
 8003090:	7812      	ldrb	r2, [r2, #0]
 8003092:	2104      	movs	r1, #4
 8003094:	438a      	bics	r2, r1
 8003096:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 8003098:	230f      	movs	r3, #15
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	0018      	movs	r0, r3
 80030a0:	f7ff fef1 	bl	8002e86 <nRF24_WriteConfig>
}
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b004      	add	sp, #16
 80030aa:	bdb0      	pop	{r4, r5, r7, pc}

080030ac <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{ //ard = delay   arc = count (ilość i odległość czasowa
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	0002      	movs	r2, r0
 80030b4:	1dfb      	adds	r3, r7, #7
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	1dbb      	adds	r3, r7, #6
 80030ba:	1c0a      	adds	r2, r1, #0
 80030bc:	701a      	strb	r2, [r3, #0]
        // ard * 250us, arc repeats
        nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80030be:	1dfb      	adds	r3, r7, #7
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	b25a      	sxtb	r2, r3
 80030c6:	1dbb      	adds	r3, r7, #6
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	b25b      	sxtb	r3, r3
 80030cc:	210f      	movs	r1, #15
 80030ce:	400b      	ands	r3, r1
 80030d0:	b25b      	sxtb	r3, r3
 80030d2:	4313      	orrs	r3, r2
 80030d4:	b25b      	sxtb	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	0019      	movs	r1, r3
 80030da:	2004      	movs	r0, #4
 80030dc:	f7ff fe38 	bl	8002d50 <nRF24_WriteRegister>
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	0002      	movs	r2, r0
 80030f0:	1dfb      	adds	r3, r7, #7
 80030f2:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80030f4:	1dfb      	adds	r3, r7, #7
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	227f      	movs	r2, #127	; 0x7f
 80030fa:	4013      	ands	r3, r2
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	0019      	movs	r1, r3
 8003100:	2005      	movs	r0, #5
 8003102:	f7ff fe25 	bl	8002d50 <nRF24_WriteRegister>
}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	b002      	add	sp, #8
 800310c:	bd80      	pop	{r7, pc}

0800310e <nRF24_EnablePipe>:
                pipe = 5; // Block too high pipe number
        nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 800310e:	b5b0      	push	{r4, r5, r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	0002      	movs	r2, r0
 8003116:	1dfb      	adds	r3, r7, #7
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	1dbb      	adds	r3, r7, #6
 800311c:	1c0a      	adds	r2, r1, #0
 800311e:	701a      	strb	r2, [r3, #0]
        if(pipe > 5)
 8003120:	1dfb      	adds	r3, r7, #7
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b05      	cmp	r3, #5
 8003126:	d902      	bls.n	800312e <nRF24_EnablePipe+0x20>
                pipe = 5; // Block too high pipe number
 8003128:	1dfb      	adds	r3, r7, #7
 800312a:	2205      	movs	r2, #5
 800312c:	701a      	strb	r2, [r3, #0]
        uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800312e:	250f      	movs	r5, #15
 8003130:	197c      	adds	r4, r7, r5
 8003132:	2002      	movs	r0, #2
 8003134:	f7ff fdb4 	bl	8002ca0 <nRF24_ReadRegister>
 8003138:	0003      	movs	r3, r0
 800313a:	7023      	strb	r3, [r4, #0]
        if(onoff == 1)
 800313c:	1dbb      	adds	r3, r7, #6
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d10d      	bne.n	8003160 <nRF24_EnablePipe+0x52>
                enable_pipe |= (1<<pipe);
 8003144:	1dfb      	adds	r3, r7, #7
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2201      	movs	r2, #1
 800314a:	409a      	lsls	r2, r3
 800314c:	0013      	movs	r3, r2
 800314e:	b25a      	sxtb	r2, r3
 8003150:	197b      	adds	r3, r7, r5
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b25b      	sxtb	r3, r3
 8003156:	4313      	orrs	r3, r2
 8003158:	b25a      	sxtb	r2, r3
 800315a:	197b      	adds	r3, r7, r5
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	e00f      	b.n	8003180 <nRF24_EnablePipe+0x72>
        else
                enable_pipe &= ~(1<<pipe);
 8003160:	1dfb      	adds	r3, r7, #7
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2201      	movs	r2, #1
 8003166:	409a      	lsls	r2, r3
 8003168:	0013      	movs	r3, r2
 800316a:	b25b      	sxtb	r3, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	b25b      	sxtb	r3, r3
 8003170:	210f      	movs	r1, #15
 8003172:	187a      	adds	r2, r7, r1
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	b252      	sxtb	r2, r2
 8003178:	4013      	ands	r3, r2
 800317a:	b25a      	sxtb	r2, r3
 800317c:	187b      	adds	r3, r7, r1
 800317e:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8003180:	230f      	movs	r3, #15
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	0019      	movs	r1, r3
 8003188:	2002      	movs	r0, #2
 800318a:	f7ff fde1 	bl	8002d50 <nRF24_WriteRegister>
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b004      	add	sp, #16
 8003194:	bdb0      	pop	{r4, r5, r7, pc}

08003196 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8003196:	b5b0      	push	{r4, r5, r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	0002      	movs	r2, r0
 800319e:	1dfb      	adds	r3, r7, #7
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	1dbb      	adds	r3, r7, #6
 80031a4:	1c0a      	adds	r2, r1, #0
 80031a6:	701a      	strb	r2, [r3, #0]
        if(pipe > 5)
 80031a8:	1dfb      	adds	r3, r7, #7
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d902      	bls.n	80031b6 <nRF24_AutoACK+0x20>
                pipe = 5; // Block too high pipe number
 80031b0:	1dfb      	adds	r3, r7, #7
 80031b2:	2205      	movs	r2, #5
 80031b4:	701a      	strb	r2, [r3, #0]
        uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80031b6:	250f      	movs	r5, #15
 80031b8:	197c      	adds	r4, r7, r5
 80031ba:	2001      	movs	r0, #1
 80031bc:	f7ff fd70 	bl	8002ca0 <nRF24_ReadRegister>
 80031c0:	0003      	movs	r3, r0
 80031c2:	7023      	strb	r3, [r4, #0]
        if(onoff == 1)
 80031c4:	1dbb      	adds	r3, r7, #6
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d10d      	bne.n	80031e8 <nRF24_AutoACK+0x52>
                enaa |= (1<<pipe);
 80031cc:	1dfb      	adds	r3, r7, #7
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2201      	movs	r2, #1
 80031d2:	409a      	lsls	r2, r3
 80031d4:	0013      	movs	r3, r2
 80031d6:	b25a      	sxtb	r2, r3
 80031d8:	197b      	adds	r3, r7, r5
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	b25b      	sxtb	r3, r3
 80031de:	4313      	orrs	r3, r2
 80031e0:	b25a      	sxtb	r2, r3
 80031e2:	197b      	adds	r3, r7, r5
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	e00f      	b.n	8003208 <nRF24_AutoACK+0x72>
        else
                enaa &= ~(1<<pipe);
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2201      	movs	r2, #1
 80031ee:	409a      	lsls	r2, r3
 80031f0:	0013      	movs	r3, r2
 80031f2:	b25b      	sxtb	r3, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	b25b      	sxtb	r3, r3
 80031f8:	210f      	movs	r1, #15
 80031fa:	187a      	adds	r2, r7, r1
 80031fc:	7812      	ldrb	r2, [r2, #0]
 80031fe:	b252      	sxtb	r2, r2
 8003200:	4013      	ands	r3, r2
 8003202:	b25a      	sxtb	r2, r3
 8003204:	187b      	adds	r3, r7, r1
 8003206:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8003208:	230f      	movs	r3, #15
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	0019      	movs	r1, r3
 8003210:	2001      	movs	r0, #1
 8003212:	f7ff fd9d 	bl	8002d50 <nRF24_WriteRegister>
}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bdb0      	pop	{r4, r5, r7, pc}

0800321e <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	0002      	movs	r2, r0
 8003226:	1dfb      	adds	r3, r7, #7
 8003228:	701a      	strb	r2, [r3, #0]
        if(size > 5)
 800322a:	1dfb      	adds	r3, r7, #7
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b05      	cmp	r3, #5
 8003230:	d902      	bls.n	8003238 <nRF24_SetAddressWidth+0x1a>
                size = 5; // Maximum are 5 bytes
 8003232:	1dfb      	adds	r3, r7, #7
 8003234:	2205      	movs	r2, #5
 8003236:	701a      	strb	r2, [r3, #0]
        if(size < 3)
 8003238:	1dfb      	adds	r3, r7, #7
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d802      	bhi.n	8003246 <nRF24_SetAddressWidth+0x28>
                size = 3; // Minimum are 3 bytes
 8003240:	1dfb      	adds	r3, r7, #7
 8003242:	2203      	movs	r2, #3
 8003244:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8003246:	1dfb      	adds	r3, r7, #7
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	3b02      	subs	r3, #2
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2203      	movs	r2, #3
 8003250:	4013      	ands	r3, r2
 8003252:	b2db      	uxtb	r3, r3
 8003254:	0019      	movs	r1, r3
 8003256:	2003      	movs	r0, #3
 8003258:	f7ff fd7a 	bl	8002d50 <nRF24_WriteRegister>
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b002      	add	sp, #8
 8003262:	bd80      	pop	{r7, pc}

08003264 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	0002      	movs	r2, r0
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	1dfb      	adds	r3, r7, #7
 8003270:	701a      	strb	r2, [r3, #0]
        // pipe 0 and pipe 1 are fully 40-bits storaged
        // pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
        // pipe 0 and 1 are LSByte first so they are needed to reverse address
        if((pipe == 0) || (pipe == 1))
 8003272:	1dfb      	adds	r3, r7, #7
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <nRF24_SetRXAddress+0x1e>
 800327a:	1dfb      	adds	r3, r7, #7
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d126      	bne.n	80032d0 <nRF24_SetRXAddress+0x6c>
        {
                uint8_t i;
                uint8_t address_rev[NRF24_ADDR_SIZE];
                for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8003282:	230f      	movs	r3, #15
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e011      	b.n	80032b0 <nRF24_SetRXAddress+0x4c>
                        address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800328c:	200f      	movs	r0, #15
 800328e:	183b      	adds	r3, r7, r0
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	18d2      	adds	r2, r2, r3
 8003296:	183b      	adds	r3, r7, r0
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2102      	movs	r1, #2
 800329c:	1acb      	subs	r3, r1, r3
 800329e:	7811      	ldrb	r1, [r2, #0]
 80032a0:	220c      	movs	r2, #12
 80032a2:	18ba      	adds	r2, r7, r2
 80032a4:	54d1      	strb	r1, [r2, r3]
                for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80032a6:	183b      	adds	r3, r7, r0
 80032a8:	781a      	ldrb	r2, [r3, #0]
 80032aa:	183b      	adds	r3, r7, r0
 80032ac:	3201      	adds	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]
 80032b0:	230f      	movs	r3, #15
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d9e8      	bls.n	800328c <nRF24_SetRXAddress+0x28>
                nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80032ba:	1dfb      	adds	r3, r7, #7
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	330a      	adds	r3, #10
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	220c      	movs	r2, #12
 80032c4:	18b9      	adds	r1, r7, r2
 80032c6:	2203      	movs	r2, #3
 80032c8:	0018      	movs	r0, r3
 80032ca:	f7ff fd6d 	bl	8002da8 <nRF24_WriteRegisters>
        {
 80032ce:	e00b      	b.n	80032e8 <nRF24_SetRXAddress+0x84>
        }
        else
                nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80032d0:	1dfb      	adds	r3, r7, #7
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	330a      	adds	r3, #10
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	3302      	adds	r3, #2
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	0019      	movs	r1, r3
 80032e0:	0010      	movs	r0, r2
 80032e2:	f7ff fd35 	bl	8002d50 <nRF24_WriteRegister>
}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46c0      	nop			; (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
        // TX address is storaged similar to RX pipe 0 - LSByte first
        uint8_t i;
        uint8_t address_rev[NRF24_ADDR_SIZE];

        nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80032f8:	230c      	movs	r3, #12
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	2203      	movs	r2, #3
 80032fe:	0019      	movs	r1, r3
 8003300:	200a      	movs	r0, #10
 8003302:	f7ff fcf7 	bl	8002cf4 <nRF24_ReadRegisters>
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8003306:	230f      	movs	r3, #15
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	e010      	b.n	8003332 <nRF24_SetTXAddress+0x42>
                addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8003310:	200f      	movs	r0, #15
 8003312:	183b      	adds	r3, r7, r0
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	183b      	adds	r3, r7, r0
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2102      	movs	r1, #2
 800331c:	1acb      	subs	r3, r1, r3
 800331e:	210c      	movs	r1, #12
 8003320:	1879      	adds	r1, r7, r1
 8003322:	5c89      	ldrb	r1, [r1, r2]
 8003324:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <nRF24_SetTXAddress+0xa4>)
 8003326:	54d1      	strb	r1, [r2, r3]
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8003328:	183b      	adds	r3, r7, r0
 800332a:	781a      	ldrb	r2, [r3, #0]
 800332c:	183b      	adds	r3, r7, r0
 800332e:	3201      	adds	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	220f      	movs	r2, #15
 8003334:	18bb      	adds	r3, r7, r2
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d9e9      	bls.n	8003310 <nRF24_SetTXAddress+0x20>

        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800333c:	18bb      	adds	r3, r7, r2
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	e011      	b.n	8003368 <nRF24_SetTXAddress+0x78>
                address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8003344:	200f      	movs	r0, #15
 8003346:	183b      	adds	r3, r7, r0
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	18d2      	adds	r2, r2, r3
 800334e:	183b      	adds	r3, r7, r0
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2102      	movs	r1, #2
 8003354:	1acb      	subs	r3, r1, r3
 8003356:	7811      	ldrb	r1, [r2, #0]
 8003358:	220c      	movs	r2, #12
 800335a:	18ba      	adds	r2, r7, r2
 800335c:	54d1      	strb	r1, [r2, r3]
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800335e:	183b      	adds	r3, r7, r0
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	183b      	adds	r3, r7, r0
 8003364:	3201      	adds	r2, #1
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	230f      	movs	r3, #15
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d9e8      	bls.n	8003344 <nRF24_SetTXAddress+0x54>
        //make pipe 0 address backup;

        nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8003372:	240c      	movs	r4, #12
 8003374:	193b      	adds	r3, r7, r4
 8003376:	2203      	movs	r2, #3
 8003378:	0019      	movs	r1, r3
 800337a:	200a      	movs	r0, #10
 800337c:	f7ff fd14 	bl	8002da8 <nRF24_WriteRegisters>
        nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8003380:	193b      	adds	r3, r7, r4
 8003382:	2203      	movs	r2, #3
 8003384:	0019      	movs	r1, r3
 8003386:	2010      	movs	r0, #16
 8003388:	f7ff fd0e 	bl	8002da8 <nRF24_WriteRegisters>

}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b005      	add	sp, #20
 8003392:	bd90      	pop	{r4, r7, pc}
 8003394:	200005ec 	.word	0x200005ec

08003398 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
        uint8_t status = nRF24_ReadStatus();
 800339e:	1dfc      	adds	r4, r7, #7
 80033a0:	f7ff fddf 	bl	8002f62 <nRF24_ReadStatus>
 80033a4:	0003      	movs	r3, r0
 80033a6:	7023      	strb	r3, [r4, #0]
        status |= (7<<4); // Clear bits 4, 5, 6.
 80033a8:	1dfb      	adds	r3, r7, #7
 80033aa:	1dfa      	adds	r2, r7, #7
 80033ac:	7812      	ldrb	r2, [r2, #0]
 80033ae:	2170      	movs	r1, #112	; 0x70
 80033b0:	430a      	orrs	r2, r1
 80033b2:	701a      	strb	r2, [r3, #0]
        nRF24_WriteStatus(status);
 80033b4:	1dfb      	adds	r3, r7, #7
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7ff fddb 	bl	8002f74 <nRF24_WriteStatus>
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b003      	add	sp, #12
 80033c4:	bd90      	pop	{r4, r7, pc}

080033c6 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 80033c6:	b590      	push	{r4, r7, lr}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 80033cc:	1dfb      	adds	r3, r7, #7
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 80033d2:	1dfc      	adds	r4, r7, #7
 80033d4:	2060      	movs	r0, #96	; 0x60
 80033d6:	f7ff fc63 	bl	8002ca0 <nRF24_ReadRegister>
 80033da:	0003      	movs	r3, r0
 80033dc:	7023      	strb	r3, [r4, #0]

    if (result > 32) // Something went wrong :)
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d906      	bls.n	80033f4 <nRF24_GetDynamicPayloadSize+0x2e>
    {
        nRF24_FlushRX();
 80033e6:	f7ff fdd5 	bl	8002f94 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 80033ea:	2002      	movs	r0, #2
 80033ec:	f7ff fc19 	bl	8002c22 <nRF24_Delay_ms>
        return 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e001      	b.n	80033f8 <nRF24_GetDynamicPayloadSize+0x32>
    }
    return result;
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	781b      	ldrb	r3, [r3, #0]
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b003      	add	sp, #12
 80033fe:	bd90      	pop	{r4, r7, pc}

08003400 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8003400:	b5b0      	push	{r4, r5, r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	0002      	movs	r2, r0
 8003408:	1dfb      	adds	r3, r7, #7
 800340a:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 800340c:	250f      	movs	r5, #15
 800340e:	197c      	adds	r4, r7, r5
 8003410:	f7ff fd30 	bl	8002e74 <nRF24_ReadConfig>
 8003414:	0003      	movs	r3, r0
 8003416:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <nRF24_EnableRXDataReadyIRQ+0x2e>
                config |= (1<<NRF24_RX_DR);
 8003420:	197b      	adds	r3, r7, r5
 8003422:	197a      	adds	r2, r7, r5
 8003424:	7812      	ldrb	r2, [r2, #0]
 8003426:	2140      	movs	r1, #64	; 0x40
 8003428:	430a      	orrs	r2, r1
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	e006      	b.n	800343c <nRF24_EnableRXDataReadyIRQ+0x3c>
        else
                config &= ~(1<<NRF24_RX_DR);
 800342e:	220f      	movs	r2, #15
 8003430:	18bb      	adds	r3, r7, r2
 8003432:	18ba      	adds	r2, r7, r2
 8003434:	7812      	ldrb	r2, [r2, #0]
 8003436:	2140      	movs	r1, #64	; 0x40
 8003438:	438a      	bics	r2, r1
 800343a:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 800343c:	230f      	movs	r3, #15
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	0018      	movs	r0, r3
 8003444:	f7ff fd1f 	bl	8002e86 <nRF24_WriteConfig>
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b004      	add	sp, #16
 800344e:	bdb0      	pop	{r4, r5, r7, pc}

08003450 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8003450:	b5b0      	push	{r4, r5, r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	0002      	movs	r2, r0
 8003458:	1dfb      	adds	r3, r7, #7
 800345a:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 800345c:	250f      	movs	r5, #15
 800345e:	197c      	adds	r4, r7, r5
 8003460:	f7ff fd08 	bl	8002e74 <nRF24_ReadConfig>
 8003464:	0003      	movs	r3, r0
 8003466:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 8003468:	1dfb      	adds	r3, r7, #7
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d106      	bne.n	800347e <nRF24_EnableTXDataSentIRQ+0x2e>
                config |= (1<<NRF24_TX_DS);
 8003470:	197b      	adds	r3, r7, r5
 8003472:	197a      	adds	r2, r7, r5
 8003474:	7812      	ldrb	r2, [r2, #0]
 8003476:	2120      	movs	r1, #32
 8003478:	430a      	orrs	r2, r1
 800347a:	701a      	strb	r2, [r3, #0]
 800347c:	e006      	b.n	800348c <nRF24_EnableTXDataSentIRQ+0x3c>
        else
                config &= ~(1<<NRF24_TX_DS);
 800347e:	220f      	movs	r2, #15
 8003480:	18bb      	adds	r3, r7, r2
 8003482:	18ba      	adds	r2, r7, r2
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	2120      	movs	r1, #32
 8003488:	438a      	bics	r2, r1
 800348a:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 800348c:	230f      	movs	r3, #15
 800348e:	18fb      	adds	r3, r7, r3
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	0018      	movs	r0, r3
 8003494:	f7ff fcf7 	bl	8002e86 <nRF24_WriteConfig>
}
 8003498:	46c0      	nop			; (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b004      	add	sp, #16
 800349e:	bdb0      	pop	{r4, r5, r7, pc}

080034a0 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80034a0:	b5b0      	push	{r4, r5, r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	0002      	movs	r2, r0
 80034a8:	1dfb      	adds	r3, r7, #7
 80034aa:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 80034ac:	250f      	movs	r5, #15
 80034ae:	197c      	adds	r4, r7, r5
 80034b0:	f7ff fce0 	bl	8002e74 <nRF24_ReadConfig>
 80034b4:	0003      	movs	r3, r0
 80034b6:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 80034b8:	1dfb      	adds	r3, r7, #7
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d106      	bne.n	80034ce <nRF24_EnableMaxRetransmitIRQ+0x2e>
                config |= (1<<NRF24_MAX_RT);
 80034c0:	197b      	adds	r3, r7, r5
 80034c2:	197a      	adds	r2, r7, r5
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	2110      	movs	r1, #16
 80034c8:	430a      	orrs	r2, r1
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e006      	b.n	80034dc <nRF24_EnableMaxRetransmitIRQ+0x3c>
        else
                config &= ~(1<<NRF24_MAX_RT);
 80034ce:	220f      	movs	r2, #15
 80034d0:	18bb      	adds	r3, r7, r2
 80034d2:	18ba      	adds	r2, r7, r2
 80034d4:	7812      	ldrb	r2, [r2, #0]
 80034d6:	2110      	movs	r1, #16
 80034d8:	438a      	bics	r2, r1
 80034da:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 80034dc:	230f      	movs	r3, #15
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7ff fccf 	bl	8002e86 <nRF24_WriteConfig>
}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b004      	add	sp, #16
 80034ee:	bdb0      	pop	{r4, r5, r7, pc}

080034f0 <nRF24_ReadRXPaylaod>:
        }while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
        *size = nRF24_GetDynamicPayloadSize();
 80034fa:	f7ff ff64 	bl	80033c6 <nRF24_GetDynamicPayloadSize>
 80034fe:	0003      	movs	r3, r0
 8003500:	001a      	movs	r2, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	701a      	strb	r2, [r3, #0]
        nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	781a      	ldrb	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	0019      	movs	r1, r3
 800350e:	2061      	movs	r0, #97	; 0x61
 8003510:	f7ff fbf0 	bl	8002cf4 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
        nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
        if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
                nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b002      	add	sp, #8
 800351a:	bd80      	pop	{r7, pc}

0800351c <nRF24_RXAvailible>:
#endif
        return NRF24_RECEIVED_PACKET; //FX??
}

uint8_t nRF24_RXAvailible(void)
{
 800351c:	b590      	push	{r4, r7, lr}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
        uint8_t status = nRF24_ReadStatus();
 8003522:	1dfc      	adds	r4, r7, #7
 8003524:	f7ff fd1d 	bl	8002f62 <nRF24_ReadStatus>
 8003528:	0003      	movs	r3, r0
 800352a:	7023      	strb	r3, [r4, #0]

        // RX FIFO Interrupt
        if ((status & (1 << 6)))
 800352c:	1dfb      	adds	r3, r7, #7
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2240      	movs	r2, #64	; 0x40
 8003532:	4013      	ands	r3, r2
 8003534:	d00f      	beq.n	8003556 <nRF24_RXAvailible+0x3a>
        {
                nrf24_rx_flag = 1;
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <nRF24_RXAvailible+0x44>)
 8003538:	2201      	movs	r2, #1
 800353a:	701a      	strb	r2, [r3, #0]
                status |= (1<<6); // Interrupt flag clear
 800353c:	1dfb      	adds	r3, r7, #7
 800353e:	1dfa      	adds	r2, r7, #7
 8003540:	7812      	ldrb	r2, [r2, #0]
 8003542:	2140      	movs	r1, #64	; 0x40
 8003544:	430a      	orrs	r2, r1
 8003546:	701a      	strb	r2, [r3, #0]
                nRF24_WriteStatus(status);
 8003548:	1dfb      	adds	r3, r7, #7
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	0018      	movs	r0, r3
 800354e:	f7ff fd11 	bl	8002f74 <nRF24_WriteStatus>
                return 1;
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <nRF24_RXAvailible+0x3c>
        }
        return 0;
 8003556:	2300      	movs	r3, #0
}
 8003558:	0018      	movs	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	b003      	add	sp, #12
 800355e:	bd90      	pop	{r4, r7, pc}
 8003560:	200005ef 	.word	0x200005ef

08003564 <nRF24_Init>:
                nrf24_mr_flag = 0;
        }
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
        hspi_nrf = hspi;
 800356c:	4b31      	ldr	r3, [pc, #196]	; (8003634 <nRF24_Init+0xd0>)
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	601a      	str	r2, [r3, #0]

        NRF24_CE_LOW;
 8003572:	4b31      	ldr	r3, [pc, #196]	; (8003638 <nRF24_Init+0xd4>)
 8003574:	2200      	movs	r2, #0
 8003576:	2180      	movs	r1, #128	; 0x80
 8003578:	0018      	movs	r0, r3
 800357a:	f001 fadf 	bl	8004b3c <HAL_GPIO_WritePin>
        NRF24_CSN_HIGH;
 800357e:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <nRF24_Init+0xd4>)
 8003580:	2201      	movs	r2, #1
 8003582:	2140      	movs	r1, #64	; 0x40
 8003584:	0018      	movs	r0, r3
 8003586:	f001 fad9 	bl	8004b3c <HAL_GPIO_WritePin>

        nRF24_Delay_ms(5); // Wait for radio power up
 800358a:	2005      	movs	r0, #5
 800358c:	f7ff fb49 	bl	8002c22 <nRF24_Delay_ms>

        nRF24_SetPALevel( NRF24_PA_PWR_0dBM); // Radio power NRF24_PA_PWR_0dBM
 8003590:	2003      	movs	r0, #3
 8003592:	f7ff fc88 	bl	8002ea6 <nRF24_SetPALevel>
        nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8003596:	2002      	movs	r0, #2
 8003598:	f7ff fcae 	bl	8002ef8 <nRF24_SetDataRate>
        nRF24_EnableCRC(1); // Enable CRC
 800359c:	2001      	movs	r0, #1
 800359e:	f7ff fd35 	bl	800300c <nRF24_EnableCRC>
        nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B);//1==NRF24_CRC_WIDTH_2B); // CRC Length 1 byte _1B
 80035a2:	2000      	movs	r0, #0
 80035a4:	f7ff fd5a 	bl	800305c <nRF24_SetCRCLength>
//      nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
        nRF24_SetRetries(5, 15); // 1000us, 7 times //5,15 lub 4,7
 80035a8:	210f      	movs	r1, #15
 80035aa:	2005      	movs	r0, #5
 80035ac:	f7ff fd7e 	bl	80030ac <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
        nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 80035b0:	201d      	movs	r0, #29
 80035b2:	f7ff fb75 	bl	8002ca0 <nRF24_ReadRegister>
 80035b6:	0003      	movs	r3, r0
 80035b8:	001a      	movs	r2, r3
 80035ba:	2304      	movs	r3, #4
 80035bc:	4313      	orrs	r3, r2
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	0019      	movs	r1, r3
 80035c2:	201d      	movs	r0, #29
 80035c4:	f7ff fbc4 	bl	8002d50 <nRF24_WriteRegister>
        nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 80035c8:	213f      	movs	r1, #63	; 0x3f
 80035ca:	201c      	movs	r0, #28
 80035cc:	f7ff fbc0 	bl	8002d50 <nRF24_WriteRegister>
#else
        nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
        nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
        nRF24_SetRFChannel(0x4c); // Set RF channel for transmission 10
 80035d0:	204c      	movs	r0, #76	; 0x4c
 80035d2:	f7ff fd89 	bl	80030e8 <nRF24_SetRFChannel>
        nRF24_EnablePipe(0, 1); // Enable pipe 0
 80035d6:	2101      	movs	r1, #1
 80035d8:	2000      	movs	r0, #0
 80035da:	f7ff fd98 	bl	800310e <nRF24_EnablePipe>
        nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80035de:	2003      	movs	r0, #3
 80035e0:	f7ff fe1d 	bl	800321e <nRF24_SetAddressWidth>
        nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80035e4:	2101      	movs	r1, #1
 80035e6:	2000      	movs	r0, #0
 80035e8:	f7ff fdd5 	bl	8003196 <nRF24_AutoACK>

        nRF24_WriteRegister(NRF24_RF_SETUP,0x5); //skopiowane z RPi ustawienia rejestrów
 80035ec:	2105      	movs	r1, #5
 80035ee:	2006      	movs	r0, #6
 80035f0:	f7ff fbae 	bl	8002d50 <nRF24_WriteRegister>
        nRF24_WriteRegister(NRF24_FEATURE,0x6); //skopiowane z RPi ustawienia rejestrów (ważne, aby były te same)
 80035f4:	2106      	movs	r1, #6
 80035f6:	201d      	movs	r0, #29
 80035f8:	f7ff fbaa 	bl	8002d50 <nRF24_WriteRegister>
        nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 80035fc:	2002      	movs	r0, #2
 80035fe:	f7ff fc7b 	bl	8002ef8 <nRF24_SetDataRate>
    nRF24_SetAddressWidth(3); //adres 3 znaki a nie 5
 8003602:	2003      	movs	r0, #3
 8003604:	f7ff fe0b 	bl	800321e <nRF24_SetAddressWidth>

        nRF24_Delay_ms(1);
 8003608:	2001      	movs	r0, #1
 800360a:	f7ff fb0a 	bl	8002c22 <nRF24_Delay_ms>

        nRF24_EnableRXDataReadyIRQ(1); //receiver irq
 800360e:	2001      	movs	r0, #1
 8003610:	f7ff fef6 	bl	8003400 <nRF24_EnableRXDataReadyIRQ>
        nRF24_EnableTXDataSentIRQ(0);
 8003614:	2000      	movs	r0, #0
 8003616:	f7ff ff1b 	bl	8003450 <nRF24_EnableTXDataSentIRQ>
        nRF24_EnableMaxRetransmitIRQ(0);
 800361a:	2000      	movs	r0, #0
 800361c:	f7ff ff40 	bl	80034a0 <nRF24_EnableMaxRetransmitIRQ>

        nRF24_Delay_ms(1);
 8003620:	2001      	movs	r0, #1
 8003622:	f7ff fafe 	bl	8002c22 <nRF24_Delay_ms>

        nRF24_ClearInterrupts();
 8003626:	f7ff feb7 	bl	8003398 <nRF24_ClearInterrupts>
}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	b002      	add	sp, #8
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	200005e8 	.word	0x200005e8
 8003638:	50000800 	.word	0x50000800

0800363c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003640:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003642:	4a18      	ldr	r2, [pc, #96]	; (80036a4 <MX_SPI1_Init+0x68>)
 8003644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003648:	2282      	movs	r2, #130	; 0x82
 800364a:	0052      	lsls	r2, r2, #1
 800364c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800364e:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003650:	2200      	movs	r2, #0
 8003652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003656:	2200      	movs	r2, #0
 8003658:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800365a:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <MX_SPI1_Init+0x64>)
 800365c:	2200      	movs	r2, #0
 800365e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003662:	2200      	movs	r2, #0
 8003664:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8003666:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800366c:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <MX_SPI1_Init+0x64>)
 800366e:	2218      	movs	r2, #24
 8003670:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003672:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003674:	2200      	movs	r2, #0
 8003676:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <MX_SPI1_Init+0x64>)
 800367a:	2200      	movs	r2, #0
 800367c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800367e:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003680:	2200      	movs	r2, #0
 8003682:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003686:	2207      	movs	r2, #7
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <MX_SPI1_Init+0x64>)
 800368c:	0018      	movs	r0, r3
 800368e:	f002 fb57 	bl	8005d40 <HAL_SPI_Init>
 8003692:	1e03      	subs	r3, r0, #0
 8003694:	d001      	beq.n	800369a <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8003696:	f7ff fabf 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	200005f0 	.word	0x200005f0
 80036a4:	40013000 	.word	0x40013000

080036a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80036a8:	b590      	push	{r4, r7, lr}
 80036aa:	b08b      	sub	sp, #44	; 0x2c
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b0:	2414      	movs	r4, #20
 80036b2:	193b      	adds	r3, r7, r4
 80036b4:	0018      	movs	r0, r3
 80036b6:	2314      	movs	r3, #20
 80036b8:	001a      	movs	r2, r3
 80036ba:	2100      	movs	r1, #0
 80036bc:	f006 f85e 	bl	800977c <memset>
  if(spiHandle->Instance==SPI1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a28      	ldr	r2, [pc, #160]	; (8003768 <HAL_SPI_MspInit+0xc0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d14a      	bne.n	8003760 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036ca:	4b28      	ldr	r3, [pc, #160]	; (800376c <HAL_SPI_MspInit+0xc4>)
 80036cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ce:	4b27      	ldr	r3, [pc, #156]	; (800376c <HAL_SPI_MspInit+0xc4>)
 80036d0:	2180      	movs	r1, #128	; 0x80
 80036d2:	0149      	lsls	r1, r1, #5
 80036d4:	430a      	orrs	r2, r1
 80036d6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d8:	4b24      	ldr	r3, [pc, #144]	; (800376c <HAL_SPI_MspInit+0xc4>)
 80036da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036dc:	4b23      	ldr	r3, [pc, #140]	; (800376c <HAL_SPI_MspInit+0xc4>)
 80036de:	2101      	movs	r1, #1
 80036e0:	430a      	orrs	r2, r1
 80036e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80036e4:	4b21      	ldr	r3, [pc, #132]	; (800376c <HAL_SPI_MspInit+0xc4>)
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	2201      	movs	r2, #1
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f0:	4b1e      	ldr	r3, [pc, #120]	; (800376c <HAL_SPI_MspInit+0xc4>)
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	4b1d      	ldr	r3, [pc, #116]	; (800376c <HAL_SPI_MspInit+0xc4>)
 80036f6:	2102      	movs	r1, #2
 80036f8:	430a      	orrs	r2, r1
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <HAL_SPI_MspInit+0xc4>)
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	2202      	movs	r2, #2
 8003702:	4013      	ands	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8003708:	193b      	adds	r3, r7, r4
 800370a:	22d0      	movs	r2, #208	; 0xd0
 800370c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370e:	193b      	adds	r3, r7, r4
 8003710:	2202      	movs	r2, #2
 8003712:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	193b      	adds	r3, r7, r4
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371a:	193b      	adds	r3, r7, r4
 800371c:	2203      	movs	r2, #3
 800371e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003720:	193b      	adds	r3, r7, r4
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003726:	193a      	adds	r2, r7, r4
 8003728:	23a0      	movs	r3, #160	; 0xa0
 800372a:	05db      	lsls	r3, r3, #23
 800372c:	0011      	movs	r1, r2
 800372e:	0018      	movs	r0, r3
 8003730:	f001 f88e 	bl	8004850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003734:	0021      	movs	r1, r4
 8003736:	187b      	adds	r3, r7, r1
 8003738:	2208      	movs	r2, #8
 800373a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373c:	187b      	adds	r3, r7, r1
 800373e:	2202      	movs	r2, #2
 8003740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003742:	187b      	adds	r3, r7, r1
 8003744:	2200      	movs	r2, #0
 8003746:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003748:	187b      	adds	r3, r7, r1
 800374a:	2203      	movs	r2, #3
 800374c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800374e:	187b      	adds	r3, r7, r1
 8003750:	2200      	movs	r2, #0
 8003752:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003754:	187b      	adds	r3, r7, r1
 8003756:	4a06      	ldr	r2, [pc, #24]	; (8003770 <HAL_SPI_MspInit+0xc8>)
 8003758:	0019      	movs	r1, r3
 800375a:	0010      	movs	r0, r2
 800375c:	f001 f878 	bl	8004850 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b00b      	add	sp, #44	; 0x2c
 8003766:	bd90      	pop	{r4, r7, pc}
 8003768:	40013000 	.word	0x40013000
 800376c:	40021000 	.word	0x40021000
 8003770:	50000400 	.word	0x50000400

08003774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_MspInit+0x24>)
 800377a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_MspInit+0x24>)
 800377e:	2101      	movs	r1, #1
 8003780:	430a      	orrs	r2, r1
 8003782:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003784:	4b04      	ldr	r3, [pc, #16]	; (8003798 <HAL_MspInit+0x24>)
 8003786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_MspInit+0x24>)
 800378a:	2180      	movs	r1, #128	; 0x80
 800378c:	0549      	lsls	r1, r1, #21
 800378e:	430a      	orrs	r2, r1
 8003790:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000

0800379c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037a0:	e7fe      	b.n	80037a0 <NMI_Handler+0x4>

080037a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037a6:	e7fe      	b.n	80037a6 <HardFault_Handler+0x4>

080037a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037c0:	f000 fb46 	bl	8003e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037c4:	46c0      	nop			; (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	0018      	movs	r0, r3
 80037d4:	f001 f9ea 	bl	8004bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	019b      	lsls	r3, r3, #6
 80037dc:	0018      	movs	r0, r3
 80037de:	f001 f9e5 	bl	8004bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80037ec:	4b03      	ldr	r3, [pc, #12]	; (80037fc <DMA1_Channel1_IRQHandler+0x14>)
 80037ee:	0018      	movs	r0, r3
 80037f0:	f000 ff7f 	bl	80046f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	2000024c 	.word	0x2000024c

08003800 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <TIM6_DAC_IRQHandler+0x14>)
 8003806:	0018      	movs	r0, r3
 8003808:	f003 f950 	bl	8006aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	2000064c 	.word	0x2000064c

08003818 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <USART1_IRQHandler+0x14>)
 800381e:	0018      	movs	r0, r3
 8003820:	f003 fcba 	bl	8007198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	20000714 	.word	0x20000714

08003830 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <USART2_IRQHandler+0x14>)
 8003836:	0018      	movs	r0, r3
 8003838:	f003 fcae 	bl	8007198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800383c:	46c0      	nop			; (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	2000079c 	.word	0x2000079c

08003848 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <RNG_LPUART1_IRQHandler+0x14>)
 800384e:	0018      	movs	r0, r3
 8003850:	f003 fca2 	bl	8007198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	2000068c 	.word	0x2000068c

08003860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  return 1;
 8003864:	2301      	movs	r3, #1
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <_kill>:

int _kill(int pid, int sig)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003876:	f005 ffdb 	bl	8009830 <__errno>
 800387a:	0003      	movs	r3, r0
 800387c:	2216      	movs	r2, #22
 800387e:	601a      	str	r2, [r3, #0]
  return -1;
 8003880:	2301      	movs	r3, #1
 8003882:	425b      	negs	r3, r3
}
 8003884:	0018      	movs	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}

0800388c <_exit>:

void _exit (int status)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003894:	2301      	movs	r3, #1
 8003896:	425a      	negs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	0011      	movs	r1, r2
 800389c:	0018      	movs	r0, r3
 800389e:	f7ff ffe5 	bl	800386c <_kill>
  while (1) {}    /* Make sure we hang here */
 80038a2:	e7fe      	b.n	80038a2 <_exit+0x16>

080038a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	e00a      	b.n	80038cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038b6:	e000      	b.n	80038ba <_read+0x16>
 80038b8:	bf00      	nop
 80038ba:	0001      	movs	r1, r0
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	60ba      	str	r2, [r7, #8]
 80038c2:	b2ca      	uxtb	r2, r1
 80038c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	3301      	adds	r3, #1
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	dbf0      	blt.n	80038b6 <_read+0x12>
  }

  return len;
 80038d4:	687b      	ldr	r3, [r7, #4]
}
 80038d6:	0018      	movs	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	b006      	add	sp, #24
 80038dc:	bd80      	pop	{r7, pc}

080038de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b086      	sub	sp, #24
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	e009      	b.n	8003904 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	60ba      	str	r2, [r7, #8]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	0018      	movs	r0, r3
 80038fa:	e000      	b.n	80038fe <_write+0x20>
 80038fc:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	3301      	adds	r3, #1
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	429a      	cmp	r2, r3
 800390a:	dbf1      	blt.n	80038f0 <_write+0x12>
  }
  return len;
 800390c:	687b      	ldr	r3, [r7, #4]
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b006      	add	sp, #24
 8003914:	bd80      	pop	{r7, pc}

08003916 <_close>:

int _close(int file)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800391e:	2301      	movs	r3, #1
 8003920:	425b      	negs	r3, r3
}
 8003922:	0018      	movs	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	b002      	add	sp, #8
 8003928:	bd80      	pop	{r7, pc}

0800392a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2280      	movs	r2, #128	; 0x80
 8003938:	0192      	lsls	r2, r2, #6
 800393a:	605a      	str	r2, [r3, #4]
  return 0;
 800393c:	2300      	movs	r3, #0
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b002      	add	sp, #8
 8003944:	bd80      	pop	{r7, pc}

08003946 <_isatty>:

int _isatty(int file)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800394e:	2301      	movs	r3, #1
}
 8003950:	0018      	movs	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	b002      	add	sp, #8
 8003956:	bd80      	pop	{r7, pc}

08003958 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003964:	2300      	movs	r3, #0
}
 8003966:	0018      	movs	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	b004      	add	sp, #16
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003978:	4a14      	ldr	r2, [pc, #80]	; (80039cc <_sbrk+0x5c>)
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <_sbrk+0x60>)
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <_sbrk+0x64>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d102      	bne.n	8003992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <_sbrk+0x64>)
 800398e:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <_sbrk+0x68>)
 8003990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <_sbrk+0x64>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	18d3      	adds	r3, r2, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	429a      	cmp	r2, r3
 800399e:	d207      	bcs.n	80039b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039a0:	f005 ff46 	bl	8009830 <__errno>
 80039a4:	0003      	movs	r3, r0
 80039a6:	220c      	movs	r2, #12
 80039a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039aa:	2301      	movs	r3, #1
 80039ac:	425b      	negs	r3, r3
 80039ae:	e009      	b.n	80039c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <_sbrk+0x64>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039b6:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <_sbrk+0x64>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	18d2      	adds	r2, r2, r3
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <_sbrk+0x64>)
 80039c0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80039c2:	68fb      	ldr	r3, [r7, #12]
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b006      	add	sp, #24
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20002000 	.word	0x20002000
 80039d0:	00000400 	.word	0x00000400
 80039d4:	20000648 	.word	0x20000648
 80039d8:	20000978 	.word	0x20000978

080039dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ee:	003b      	movs	r3, r7
 80039f0:	0018      	movs	r0, r3
 80039f2:	2308      	movs	r3, #8
 80039f4:	001a      	movs	r2, r3
 80039f6:	2100      	movs	r1, #0
 80039f8:	f005 fec0 	bl	800977c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80039fc:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <MX_TIM6_Init+0x6c>)
 80039fe:	4a16      	ldr	r2, [pc, #88]	; (8003a58 <MX_TIM6_Init+0x70>)
 8003a00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 8003a02:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <MX_TIM6_Init+0x6c>)
 8003a04:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <MX_TIM6_Init+0x74>)
 8003a06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <MX_TIM6_Init+0x6c>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8003a0e:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <MX_TIM6_Init+0x6c>)
 8003a10:	4a13      	ldr	r2, [pc, #76]	; (8003a60 <MX_TIM6_Init+0x78>)
 8003a12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <MX_TIM6_Init+0x6c>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a1a:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <MX_TIM6_Init+0x6c>)
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f002 ffb9 	bl	8006994 <HAL_TIM_Base_Init>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d001      	beq.n	8003a2a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003a26:	f7ff f8f7 	bl	8002c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a2a:	003b      	movs	r3, r7
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a30:	003b      	movs	r3, r7
 8003a32:	2200      	movs	r2, #0
 8003a34:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a36:	003a      	movs	r2, r7
 8003a38:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <MX_TIM6_Init+0x6c>)
 8003a3a:	0011      	movs	r1, r2
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f003 f991 	bl	8006d64 <HAL_TIMEx_MasterConfigSynchronization>
 8003a42:	1e03      	subs	r3, r0, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003a46:	f7ff f8e7 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b002      	add	sp, #8
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	2000064c 	.word	0x2000064c
 8003a58:	40001000 	.word	0x40001000
 8003a5c:	00000c7f 	.word	0x00000c7f
 8003a60:	0000270f 	.word	0x0000270f

08003a64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a0a      	ldr	r2, [pc, #40]	; (8003a9c <HAL_TIM_Base_MspInit+0x38>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d10d      	bne.n	8003a92 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <HAL_TIM_Base_MspInit+0x3c>)
 8003a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_TIM_Base_MspInit+0x3c>)
 8003a7c:	2110      	movs	r1, #16
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8003a82:	2200      	movs	r2, #0
 8003a84:	2103      	movs	r1, #3
 8003a86:	2011      	movs	r0, #17
 8003a88:	f000 fd02 	bl	8004490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a8c:	2011      	movs	r0, #17
 8003a8e:	f000 fd14 	bl	80044ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b002      	add	sp, #8
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	40001000 	.word	0x40001000
 8003aa0:	40021000 	.word	0x40021000

08003aa4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003aa8:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <MX_LPUART1_UART_Init+0x5c>)
 8003aaa:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <MX_LPUART1_UART_Init+0x60>)
 8003aac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8003aae:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <MX_LPUART1_UART_Init+0x5c>)
 8003ab0:	2296      	movs	r2, #150	; 0x96
 8003ab2:	0192      	lsls	r2, r2, #6
 8003ab4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ab6:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <MX_LPUART1_UART_Init+0x5c>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003abc:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <MX_LPUART1_UART_Init+0x5c>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <MX_LPUART1_UART_Init+0x5c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <MX_LPUART1_UART_Init+0x5c>)
 8003aca:	220c      	movs	r2, #12
 8003acc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <MX_LPUART1_UART_Init+0x5c>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <MX_LPUART1_UART_Init+0x5c>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <MX_LPUART1_UART_Init+0x5c>)
 8003adc:	2210      	movs	r2, #16
 8003ade:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <MX_LPUART1_UART_Init+0x5c>)
 8003ae2:	2280      	movs	r2, #128	; 0x80
 8003ae4:	0152      	lsls	r2, r2, #5
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <MX_LPUART1_UART_Init+0x5c>)
 8003aea:	0018      	movs	r0, r3
 8003aec:	f003 f992 	bl	8006e14 <HAL_UART_Init>
 8003af0:	1e03      	subs	r3, r0, #0
 8003af2:	d001      	beq.n	8003af8 <MX_LPUART1_UART_Init+0x54>
  {
    Error_Handler();
 8003af4:	f7ff f890 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	2000068c 	.word	0x2000068c
 8003b04:	40004800 	.word	0x40004800

08003b08 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b0c:	4b16      	ldr	r3, [pc, #88]	; (8003b68 <MX_USART1_UART_Init+0x60>)
 8003b0e:	4a17      	ldr	r2, [pc, #92]	; (8003b6c <MX_USART1_UART_Init+0x64>)
 8003b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <MX_USART1_UART_Init+0x60>)
 8003b14:	2296      	movs	r2, #150	; 0x96
 8003b16:	0192      	lsls	r2, r2, #6
 8003b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b1a:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <MX_USART1_UART_Init+0x60>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b20:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <MX_USART1_UART_Init+0x60>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b26:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <MX_USART1_UART_Init+0x60>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <MX_USART1_UART_Init+0x60>)
 8003b2e:	2204      	movs	r2, #4
 8003b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b32:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <MX_USART1_UART_Init+0x60>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <MX_USART1_UART_Init+0x60>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <MX_USART1_UART_Init+0x60>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003b44:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <MX_USART1_UART_Init+0x60>)
 8003b46:	2210      	movs	r2, #16
 8003b48:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003b4a:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <MX_USART1_UART_Init+0x60>)
 8003b4c:	2280      	movs	r2, #128	; 0x80
 8003b4e:	0152      	lsls	r2, r2, #5
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <MX_USART1_UART_Init+0x60>)
 8003b54:	0018      	movs	r0, r3
 8003b56:	f003 f95d 	bl	8006e14 <HAL_UART_Init>
 8003b5a:	1e03      	subs	r3, r0, #0
 8003b5c:	d001      	beq.n	8003b62 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003b5e:	f7ff f85b 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000714 	.word	0x20000714
 8003b6c:	40013800 	.word	0x40013800

08003b70 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <MX_USART2_UART_Init+0x58>)
 8003b76:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <MX_USART2_UART_Init+0x5c>)
 8003b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003b7a:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <MX_USART2_UART_Init+0x58>)
 8003b7c:	2296      	movs	r2, #150	; 0x96
 8003b7e:	0192      	lsls	r2, r2, #6
 8003b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <MX_USART2_UART_Init+0x58>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <MX_USART2_UART_Init+0x58>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <MX_USART2_UART_Init+0x58>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <MX_USART2_UART_Init+0x58>)
 8003b96:	220c      	movs	r2, #12
 8003b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <MX_USART2_UART_Init+0x58>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <MX_USART2_UART_Init+0x58>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <MX_USART2_UART_Init+0x58>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <MX_USART2_UART_Init+0x58>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <MX_USART2_UART_Init+0x58>)
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f003 f92d 	bl	8006e14 <HAL_UART_Init>
 8003bba:	1e03      	subs	r3, r0, #0
 8003bbc:	d001      	beq.n	8003bc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003bbe:	f7ff f82b 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	2000079c 	.word	0x2000079c
 8003bcc:	40004400 	.word	0x40004400

08003bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b08b      	sub	sp, #44	; 0x2c
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd8:	2414      	movs	r4, #20
 8003bda:	193b      	adds	r3, r7, r4
 8003bdc:	0018      	movs	r0, r3
 8003bde:	2314      	movs	r3, #20
 8003be0:	001a      	movs	r2, r3
 8003be2:	2100      	movs	r1, #0
 8003be4:	f005 fdca 	bl	800977c <memset>
  if(uartHandle->Instance==LPUART1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a54      	ldr	r2, [pc, #336]	; (8003d40 <HAL_UART_MspInit+0x170>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d131      	bne.n	8003c56 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003bf2:	4b54      	ldr	r3, [pc, #336]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf6:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	02c9      	lsls	r1, r1, #11
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c00:	4b50      	ldr	r3, [pc, #320]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c04:	4b4f      	ldr	r3, [pc, #316]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003c06:	2104      	movs	r1, #4
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c0c:	4b4d      	ldr	r3, [pc, #308]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	2204      	movs	r2, #4
 8003c12:	4013      	ands	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PC4     ------> LPUART1_TX
    PC5     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c18:	0021      	movs	r1, r4
 8003c1a:	187b      	adds	r3, r7, r1
 8003c1c:	2230      	movs	r2, #48	; 0x30
 8003c1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	2202      	movs	r2, #2
 8003c24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	2200      	movs	r2, #0
 8003c2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	2203      	movs	r2, #3
 8003c30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_LPUART1;
 8003c32:	187b      	adds	r3, r7, r1
 8003c34:	2202      	movs	r2, #2
 8003c36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c38:	187b      	adds	r3, r7, r1
 8003c3a:	4a43      	ldr	r2, [pc, #268]	; (8003d48 <HAL_UART_MspInit+0x178>)
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	0010      	movs	r0, r2
 8003c40:	f000 fe06 	bl	8004850 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8003c44:	2200      	movs	r2, #0
 8003c46:	2100      	movs	r1, #0
 8003c48:	201d      	movs	r0, #29
 8003c4a:	f000 fc21 	bl	8004490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8003c4e:	201d      	movs	r0, #29
 8003c50:	f000 fc33 	bl	80044ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003c54:	e06f      	b.n	8003d36 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a3c      	ldr	r2, [pc, #240]	; (8003d4c <HAL_UART_MspInit+0x17c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d133      	bne.n	8003cc8 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c60:	4b38      	ldr	r3, [pc, #224]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c64:	4b37      	ldr	r3, [pc, #220]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003c66:	2180      	movs	r1, #128	; 0x80
 8003c68:	01c9      	lsls	r1, r1, #7
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6e:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c72:	4b34      	ldr	r3, [pc, #208]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003c74:	2101      	movs	r1, #1
 8003c76:	430a      	orrs	r2, r1
 8003c78:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c7a:	4b32      	ldr	r3, [pc, #200]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	2201      	movs	r2, #1
 8003c80:	4013      	ands	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c86:	2114      	movs	r1, #20
 8003c88:	187b      	adds	r3, r7, r1
 8003c8a:	22c0      	movs	r2, #192	; 0xc0
 8003c8c:	00d2      	lsls	r2, r2, #3
 8003c8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c90:	187b      	adds	r3, r7, r1
 8003c92:	2202      	movs	r2, #2
 8003c94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c96:	187b      	adds	r3, r7, r1
 8003c98:	2200      	movs	r2, #0
 8003c9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9c:	187b      	adds	r3, r7, r1
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003ca2:	187b      	adds	r3, r7, r1
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca8:	187a      	adds	r2, r7, r1
 8003caa:	23a0      	movs	r3, #160	; 0xa0
 8003cac:	05db      	lsls	r3, r3, #23
 8003cae:	0011      	movs	r1, r2
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f000 fdcd 	bl	8004850 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2100      	movs	r1, #0
 8003cba:	201b      	movs	r0, #27
 8003cbc:	f000 fbe8 	bl	8004490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cc0:	201b      	movs	r0, #27
 8003cc2:	f000 fbfa 	bl	80044ba <HAL_NVIC_EnableIRQ>
}
 8003cc6:	e036      	b.n	8003d36 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a20      	ldr	r2, [pc, #128]	; (8003d50 <HAL_UART_MspInit+0x180>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d131      	bne.n	8003d36 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cd2:	4b1c      	ldr	r3, [pc, #112]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd6:	4b1b      	ldr	r3, [pc, #108]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003cd8:	2180      	movs	r1, #128	; 0x80
 8003cda:	0289      	lsls	r1, r1, #10
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce0:	4b18      	ldr	r3, [pc, #96]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cec:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_UART_MspInit+0x174>)
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003cf8:	2114      	movs	r1, #20
 8003cfa:	187b      	adds	r3, r7, r1
 8003cfc:	220c      	movs	r2, #12
 8003cfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	2202      	movs	r2, #2
 8003d04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d06:	187b      	adds	r3, r7, r1
 8003d08:	2200      	movs	r2, #0
 8003d0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	2203      	movs	r2, #3
 8003d10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	2204      	movs	r2, #4
 8003d16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d18:	187a      	adds	r2, r7, r1
 8003d1a:	23a0      	movs	r3, #160	; 0xa0
 8003d1c:	05db      	lsls	r3, r3, #23
 8003d1e:	0011      	movs	r1, r2
 8003d20:	0018      	movs	r0, r3
 8003d22:	f000 fd95 	bl	8004850 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d26:	2200      	movs	r2, #0
 8003d28:	2100      	movs	r1, #0
 8003d2a:	201c      	movs	r0, #28
 8003d2c:	f000 fbb0 	bl	8004490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d30:	201c      	movs	r0, #28
 8003d32:	f000 fbc2 	bl	80044ba <HAL_NVIC_EnableIRQ>
}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b00b      	add	sp, #44	; 0x2c
 8003d3c:	bd90      	pop	{r4, r7, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	40004800 	.word	0x40004800
 8003d44:	40021000 	.word	0x40021000
 8003d48:	50000800 	.word	0x50000800
 8003d4c:	40013800 	.word	0x40013800
 8003d50:	40004400 	.word	0x40004400

08003d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003d54:	480d      	ldr	r0, [pc, #52]	; (8003d8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d56:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d58:	f7ff fe40 	bl	80039dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d5c:	480c      	ldr	r0, [pc, #48]	; (8003d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d5e:	490d      	ldr	r1, [pc, #52]	; (8003d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d60:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <LoopForever+0xe>)
  movs r3, #0
 8003d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d64:	e002      	b.n	8003d6c <LoopCopyDataInit>

08003d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d6a:	3304      	adds	r3, #4

08003d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d70:	d3f9      	bcc.n	8003d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d72:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d74:	4c0a      	ldr	r4, [pc, #40]	; (8003da0 <LoopForever+0x16>)
  movs r3, #0
 8003d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d78:	e001      	b.n	8003d7e <LoopFillZerobss>

08003d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d7c:	3204      	adds	r2, #4

08003d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d80:	d3fb      	bcc.n	8003d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d82:	f005 fd5b 	bl	800983c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d86:	f7fe fe5d 	bl	8002a44 <main>

08003d8a <LoopForever>:

LoopForever:
    b LoopForever
 8003d8a:	e7fe      	b.n	8003d8a <LoopForever>
  ldr   r0, =_estack
 8003d8c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d94:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003d98:	0800d648 	.word	0x0800d648
  ldr r2, =_sbss
 8003d9c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003da0:	20000974 	.word	0x20000974

08003da4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003da4:	e7fe      	b.n	8003da4 <ADC1_COMP_IRQHandler>
	...

08003da8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003dae:	1dfb      	adds	r3, r7, #7
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_Init+0x3c>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <HAL_Init+0x3c>)
 8003dba:	2140      	movs	r1, #64	; 0x40
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f000 f811 	bl	8003de8 <HAL_InitTick>
 8003dc6:	1e03      	subs	r3, r0, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003dca:	1dfb      	adds	r3, r7, #7
 8003dcc:	2201      	movs	r2, #1
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	e001      	b.n	8003dd6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003dd2:	f7ff fccf 	bl	8003774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003dd6:	1dfb      	adds	r3, r7, #7
 8003dd8:	781b      	ldrb	r3, [r3, #0]
}
 8003dda:	0018      	movs	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b002      	add	sp, #8
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	40022000 	.word	0x40022000

08003de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003df0:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <HAL_InitTick+0x5c>)
 8003df2:	681c      	ldr	r4, [r3, #0]
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <HAL_InitTick+0x60>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	0019      	movs	r1, r3
 8003dfa:	23fa      	movs	r3, #250	; 0xfa
 8003dfc:	0098      	lsls	r0, r3, #2
 8003dfe:	f7fc f99f 	bl	8000140 <__udivsi3>
 8003e02:	0003      	movs	r3, r0
 8003e04:	0019      	movs	r1, r3
 8003e06:	0020      	movs	r0, r4
 8003e08:	f7fc f99a 	bl	8000140 <__udivsi3>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f000 fb63 	bl	80044da <HAL_SYSTICK_Config>
 8003e14:	1e03      	subs	r3, r0, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e00f      	b.n	8003e3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d80b      	bhi.n	8003e3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	2301      	movs	r3, #1
 8003e26:	425b      	negs	r3, r3
 8003e28:	2200      	movs	r2, #0
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f000 fb30 	bl	8004490 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_InitTick+0x64>)
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	e000      	b.n	8003e3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b003      	add	sp, #12
 8003e42:	bd90      	pop	{r4, r7, pc}
 8003e44:	20000000 	.word	0x20000000
 8003e48:	20000008 	.word	0x20000008
 8003e4c:	20000004 	.word	0x20000004

08003e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_IncTick+0x1c>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	001a      	movs	r2, r3
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_IncTick+0x20>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	18d2      	adds	r2, r2, r3
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <HAL_IncTick+0x20>)
 8003e62:	601a      	str	r2, [r3, #0]
}
 8003e64:	46c0      	nop			; (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	20000008 	.word	0x20000008
 8003e70:	20000824 	.word	0x20000824

08003e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  return uwTick;
 8003e78:	4b02      	ldr	r3, [pc, #8]	; (8003e84 <HAL_GetTick+0x10>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	20000824 	.word	0x20000824

08003e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e90:	f7ff fff0 	bl	8003e74 <HAL_GetTick>
 8003e94:	0003      	movs	r3, r0
 8003e96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	d005      	beq.n	8003eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <HAL_Delay+0x44>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	001a      	movs	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	189b      	adds	r3, r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	f7ff ffe0 	bl	8003e74 <HAL_GetTick>
 8003eb4:	0002      	movs	r2, r0
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d8f7      	bhi.n	8003eb0 <HAL_Delay+0x28>
  {
  }
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b004      	add	sp, #16
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	20000008 	.word	0x20000008

08003ed0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e159      	b.n	8004196 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10a      	bne.n	8003f00 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2250      	movs	r2, #80	; 0x50
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7fe fbb8 	bl	8002670 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f04:	2210      	movs	r2, #16
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d005      	beq.n	8003f18 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2204      	movs	r2, #4
 8003f14:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003f16:	d00b      	beq.n	8003f30 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2250      	movs	r2, #80	; 0x50
 8003f28:	2100      	movs	r1, #0
 8003f2a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e132      	b.n	8004196 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f34:	4a9a      	ldr	r2, [pc, #616]	; (80041a0 <HAL_ADC_Init+0x2d0>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	2202      	movs	r2, #2
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2203      	movs	r2, #3
 8003f48:	4013      	ands	r3, r2
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d108      	bne.n	8003f60 <HAL_ADC_Init+0x90>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2201      	movs	r2, #1
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_ADC_Init+0x90>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <HAL_ADC_Init+0x92>
 8003f60:	2300      	movs	r3, #0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d149      	bne.n	8003ffa <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	23c0      	movs	r3, #192	; 0xc0
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d00b      	beq.n	8003f8a <HAL_ADC_Init+0xba>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	05db      	lsls	r3, r3, #23
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d005      	beq.n	8003f8a <HAL_ADC_Init+0xba>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	2380      	movs	r3, #128	; 0x80
 8003f84:	061b      	lsls	r3, r3, #24
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d111      	bne.n	8003fae <HAL_ADC_Init+0xde>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	0092      	lsls	r2, r2, #2
 8003f96:	0892      	lsrs	r2, r2, #2
 8003f98:	611a      	str	r2, [r3, #16]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6919      	ldr	r1, [r3, #16]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	611a      	str	r2, [r3, #16]
 8003fac:	e014      	b.n	8003fd8 <HAL_ADC_Init+0x108>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	0092      	lsls	r2, r2, #2
 8003fba:	0892      	lsrs	r2, r2, #2
 8003fbc:	611a      	str	r2, [r3, #16]
 8003fbe:	4b79      	ldr	r3, [pc, #484]	; (80041a4 <HAL_ADC_Init+0x2d4>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	4b78      	ldr	r3, [pc, #480]	; (80041a4 <HAL_ADC_Init+0x2d4>)
 8003fc4:	4978      	ldr	r1, [pc, #480]	; (80041a8 <HAL_ADC_Init+0x2d8>)
 8003fc6:	400a      	ands	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	4b76      	ldr	r3, [pc, #472]	; (80041a4 <HAL_ADC_Init+0x2d4>)
 8003fcc:	6819      	ldr	r1, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	4b74      	ldr	r3, [pc, #464]	; (80041a4 <HAL_ADC_Init+0x2d4>)
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2118      	movs	r1, #24
 8003fe4:	438a      	bics	r2, r1
 8003fe6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68d9      	ldr	r1, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003ffa:	4b6a      	ldr	r3, [pc, #424]	; (80041a4 <HAL_ADC_Init+0x2d4>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b69      	ldr	r3, [pc, #420]	; (80041a4 <HAL_ADC_Init+0x2d4>)
 8004000:	496a      	ldr	r1, [pc, #424]	; (80041ac <HAL_ADC_Init+0x2dc>)
 8004002:	400a      	ands	r2, r1
 8004004:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8004006:	4b67      	ldr	r3, [pc, #412]	; (80041a4 <HAL_ADC_Init+0x2d4>)
 8004008:	6819      	ldr	r1, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400e:	065a      	lsls	r2, r3, #25
 8004010:	4b64      	ldr	r3, [pc, #400]	; (80041a4 <HAL_ADC_Init+0x2d4>)
 8004012:	430a      	orrs	r2, r1
 8004014:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	055b      	lsls	r3, r3, #21
 8004020:	4013      	ands	r3, r2
 8004022:	d108      	bne.n	8004036 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2180      	movs	r1, #128	; 0x80
 8004030:	0549      	lsls	r1, r1, #21
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	495b      	ldr	r1, [pc, #364]	; (80041b0 <HAL_ADC_Init+0x2e0>)
 8004042:	400a      	ands	r2, r1
 8004044:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68d9      	ldr	r1, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d101      	bne.n	800405c <HAL_ADC_Init+0x18c>
 8004058:	2304      	movs	r3, #4
 800405a:	e000      	b.n	800405e <HAL_ADC_Init+0x18e>
 800405c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800405e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2020      	movs	r0, #32
 8004064:	5c1b      	ldrb	r3, [r3, r0]
 8004066:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004068:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	202c      	movs	r0, #44	; 0x2c
 800406e:	5c1b      	ldrb	r3, [r3, r0]
 8004070:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004072:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004078:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004080:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004088:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004096:	23c2      	movs	r3, #194	; 0xc2
 8004098:	33ff      	adds	r3, #255	; 0xff
 800409a:	429a      	cmp	r2, r3
 800409c:	d00b      	beq.n	80040b6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68d9      	ldr	r1, [r3, #12]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2221      	movs	r2, #33	; 0x21
 80040ba:	5c9b      	ldrb	r3, [r3, r2]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d11a      	bne.n	80040f6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	5c9b      	ldrb	r3, [r3, r2]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2180      	movs	r1, #128	; 0x80
 80040d6:	0249      	lsls	r1, r1, #9
 80040d8:	430a      	orrs	r2, r1
 80040da:	60da      	str	r2, [r3, #12]
 80040dc:	e00b      	b.n	80040f6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e2:	2220      	movs	r2, #32
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ee:	2201      	movs	r2, #1
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d11f      	bne.n	800413e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	492a      	ldr	r1, [pc, #168]	; (80041b4 <HAL_ADC_Init+0x2e4>)
 800410a:	400a      	ands	r2, r1
 800410c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6919      	ldr	r1, [r3, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800411c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8004122:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2101      	movs	r1, #1
 8004138:	430a      	orrs	r2, r1
 800413a:	611a      	str	r2, [r3, #16]
 800413c:	e00e      	b.n	800415c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2201      	movs	r2, #1
 8004146:	4013      	ands	r3, r2
 8004148:	2b01      	cmp	r3, #1
 800414a:	d107      	bne.n	800415c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2101      	movs	r1, #1
 8004158:	438a      	bics	r2, r1
 800415a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2107      	movs	r1, #7
 8004168:	438a      	bics	r2, r1
 800416a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6959      	ldr	r1, [r3, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004188:	2203      	movs	r2, #3
 800418a:	4393      	bics	r3, r2
 800418c:	2201      	movs	r2, #1
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	0018      	movs	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	b002      	add	sp, #8
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	fffffefd 	.word	0xfffffefd
 80041a4:	40012708 	.word	0x40012708
 80041a8:	ffc3ffff 	.word	0xffc3ffff
 80041ac:	fdffffff 	.word	0xfdffffff
 80041b0:	fffe0219 	.word	0xfffe0219
 80041b4:	fffffc03 	.word	0xfffffc03

080041b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2250      	movs	r2, #80	; 0x50
 80041c6:	5c9b      	ldrb	r3, [r3, r2]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x18>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e085      	b.n	80042dc <HAL_ADC_ConfigChannel+0x124>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2250      	movs	r2, #80	; 0x50
 80041d4:	2101      	movs	r1, #1
 80041d6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2204      	movs	r2, #4
 80041e0:	4013      	ands	r3, r2
 80041e2:	d00b      	beq.n	80041fc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	2220      	movs	r2, #32
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2250      	movs	r2, #80	; 0x50
 80041f4:	2100      	movs	r1, #0
 80041f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e06f      	b.n	80042dc <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4a38      	ldr	r2, [pc, #224]	; (80042e4 <HAL_ADC_ConfigChannel+0x12c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d035      	beq.n	8004272 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	035b      	lsls	r3, r3, #13
 8004212:	0b5a      	lsrs	r2, r3, #13
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	02db      	lsls	r3, r3, #11
 8004224:	4013      	ands	r3, r2
 8004226:	d009      	beq.n	800423c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8004228:	4b2f      	ldr	r3, [pc, #188]	; (80042e8 <HAL_ADC_ConfigChannel+0x130>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b2e      	ldr	r3, [pc, #184]	; (80042e8 <HAL_ADC_ConfigChannel+0x130>)
 800422e:	2180      	movs	r1, #128	; 0x80
 8004230:	0409      	lsls	r1, r1, #16
 8004232:	430a      	orrs	r2, r1
 8004234:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004236:	200a      	movs	r0, #10
 8004238:	f000 f85e 	bl	80042f8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	029b      	lsls	r3, r3, #10
 8004244:	4013      	ands	r3, r2
 8004246:	d006      	beq.n	8004256 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8004248:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <HAL_ADC_ConfigChannel+0x130>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b26      	ldr	r3, [pc, #152]	; (80042e8 <HAL_ADC_ConfigChannel+0x130>)
 800424e:	2180      	movs	r1, #128	; 0x80
 8004250:	03c9      	lsls	r1, r1, #15
 8004252:	430a      	orrs	r2, r1
 8004254:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	025b      	lsls	r3, r3, #9
 800425e:	4013      	ands	r3, r2
 8004260:	d037      	beq.n	80042d2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8004262:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <HAL_ADC_ConfigChannel+0x130>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <HAL_ADC_ConfigChannel+0x130>)
 8004268:	2180      	movs	r1, #128	; 0x80
 800426a:	0449      	lsls	r1, r1, #17
 800426c:	430a      	orrs	r2, r1
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	e02f      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	035b      	lsls	r3, r3, #13
 800427e:	0b5b      	lsrs	r3, r3, #13
 8004280:	43d9      	mvns	r1, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	400a      	ands	r2, r1
 8004288:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	2380      	movs	r3, #128	; 0x80
 8004290:	02db      	lsls	r3, r3, #11
 8004292:	4013      	ands	r3, r2
 8004294:	d005      	beq.n	80042a2 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <HAL_ADC_ConfigChannel+0x130>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <HAL_ADC_ConfigChannel+0x130>)
 800429c:	4913      	ldr	r1, [pc, #76]	; (80042ec <HAL_ADC_ConfigChannel+0x134>)
 800429e:	400a      	ands	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	029b      	lsls	r3, r3, #10
 80042aa:	4013      	ands	r3, r2
 80042ac:	d005      	beq.n	80042ba <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <HAL_ADC_ConfigChannel+0x130>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <HAL_ADC_ConfigChannel+0x130>)
 80042b4:	490e      	ldr	r1, [pc, #56]	; (80042f0 <HAL_ADC_ConfigChannel+0x138>)
 80042b6:	400a      	ands	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	025b      	lsls	r3, r3, #9
 80042c2:	4013      	ands	r3, r2
 80042c4:	d005      	beq.n	80042d2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 80042c6:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <HAL_ADC_ConfigChannel+0x130>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <HAL_ADC_ConfigChannel+0x130>)
 80042cc:	4909      	ldr	r1, [pc, #36]	; (80042f4 <HAL_ADC_ConfigChannel+0x13c>)
 80042ce:	400a      	ands	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2250      	movs	r2, #80	; 0x50
 80042d6:	2100      	movs	r1, #0
 80042d8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	0018      	movs	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	b002      	add	sp, #8
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	00001001 	.word	0x00001001
 80042e8:	40012708 	.word	0x40012708
 80042ec:	ff7fffff 	.word	0xff7fffff
 80042f0:	ffbfffff 	.word	0xffbfffff
 80042f4:	feffffff 	.word	0xfeffffff

080042f8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <ADC_DelayMicroSecond+0x38>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	490b      	ldr	r1, [pc, #44]	; (8004334 <ADC_DelayMicroSecond+0x3c>)
 8004306:	0018      	movs	r0, r3
 8004308:	f7fb ff1a 	bl	8000140 <__udivsi3>
 800430c:	0003      	movs	r3, r0
 800430e:	001a      	movs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4353      	muls	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8004316:	e002      	b.n	800431e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3b01      	subs	r3, #1
 800431c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f9      	bne.n	8004318 <ADC_DelayMicroSecond+0x20>
  }
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	46bd      	mov	sp, r7
 800432a:	b004      	add	sp, #16
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	20000000 	.word	0x20000000
 8004334:	000f4240 	.word	0x000f4240

08004338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	0002      	movs	r2, r0
 8004340:	1dfb      	adds	r3, r7, #7
 8004342:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004344:	1dfb      	adds	r3, r7, #7
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b7f      	cmp	r3, #127	; 0x7f
 800434a:	d809      	bhi.n	8004360 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800434c:	1dfb      	adds	r3, r7, #7
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	001a      	movs	r2, r3
 8004352:	231f      	movs	r3, #31
 8004354:	401a      	ands	r2, r3
 8004356:	4b04      	ldr	r3, [pc, #16]	; (8004368 <__NVIC_EnableIRQ+0x30>)
 8004358:	2101      	movs	r1, #1
 800435a:	4091      	lsls	r1, r2
 800435c:	000a      	movs	r2, r1
 800435e:	601a      	str	r2, [r3, #0]
  }
}
 8004360:	46c0      	nop			; (mov r8, r8)
 8004362:	46bd      	mov	sp, r7
 8004364:	b002      	add	sp, #8
 8004366:	bd80      	pop	{r7, pc}
 8004368:	e000e100 	.word	0xe000e100

0800436c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	0002      	movs	r2, r0
 8004374:	6039      	str	r1, [r7, #0]
 8004376:	1dfb      	adds	r3, r7, #7
 8004378:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800437a:	1dfb      	adds	r3, r7, #7
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b7f      	cmp	r3, #127	; 0x7f
 8004380:	d828      	bhi.n	80043d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004382:	4a2f      	ldr	r2, [pc, #188]	; (8004440 <__NVIC_SetPriority+0xd4>)
 8004384:	1dfb      	adds	r3, r7, #7
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	b25b      	sxtb	r3, r3
 800438a:	089b      	lsrs	r3, r3, #2
 800438c:	33c0      	adds	r3, #192	; 0xc0
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	589b      	ldr	r3, [r3, r2]
 8004392:	1dfa      	adds	r2, r7, #7
 8004394:	7812      	ldrb	r2, [r2, #0]
 8004396:	0011      	movs	r1, r2
 8004398:	2203      	movs	r2, #3
 800439a:	400a      	ands	r2, r1
 800439c:	00d2      	lsls	r2, r2, #3
 800439e:	21ff      	movs	r1, #255	; 0xff
 80043a0:	4091      	lsls	r1, r2
 80043a2:	000a      	movs	r2, r1
 80043a4:	43d2      	mvns	r2, r2
 80043a6:	401a      	ands	r2, r3
 80043a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	019b      	lsls	r3, r3, #6
 80043ae:	22ff      	movs	r2, #255	; 0xff
 80043b0:	401a      	ands	r2, r3
 80043b2:	1dfb      	adds	r3, r7, #7
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	0018      	movs	r0, r3
 80043b8:	2303      	movs	r3, #3
 80043ba:	4003      	ands	r3, r0
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043c0:	481f      	ldr	r0, [pc, #124]	; (8004440 <__NVIC_SetPriority+0xd4>)
 80043c2:	1dfb      	adds	r3, r7, #7
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	b25b      	sxtb	r3, r3
 80043c8:	089b      	lsrs	r3, r3, #2
 80043ca:	430a      	orrs	r2, r1
 80043cc:	33c0      	adds	r3, #192	; 0xc0
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80043d2:	e031      	b.n	8004438 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043d4:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <__NVIC_SetPriority+0xd8>)
 80043d6:	1dfb      	adds	r3, r7, #7
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	0019      	movs	r1, r3
 80043dc:	230f      	movs	r3, #15
 80043de:	400b      	ands	r3, r1
 80043e0:	3b08      	subs	r3, #8
 80043e2:	089b      	lsrs	r3, r3, #2
 80043e4:	3306      	adds	r3, #6
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	18d3      	adds	r3, r2, r3
 80043ea:	3304      	adds	r3, #4
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	1dfa      	adds	r2, r7, #7
 80043f0:	7812      	ldrb	r2, [r2, #0]
 80043f2:	0011      	movs	r1, r2
 80043f4:	2203      	movs	r2, #3
 80043f6:	400a      	ands	r2, r1
 80043f8:	00d2      	lsls	r2, r2, #3
 80043fa:	21ff      	movs	r1, #255	; 0xff
 80043fc:	4091      	lsls	r1, r2
 80043fe:	000a      	movs	r2, r1
 8004400:	43d2      	mvns	r2, r2
 8004402:	401a      	ands	r2, r3
 8004404:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	019b      	lsls	r3, r3, #6
 800440a:	22ff      	movs	r2, #255	; 0xff
 800440c:	401a      	ands	r2, r3
 800440e:	1dfb      	adds	r3, r7, #7
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	0018      	movs	r0, r3
 8004414:	2303      	movs	r3, #3
 8004416:	4003      	ands	r3, r0
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800441c:	4809      	ldr	r0, [pc, #36]	; (8004444 <__NVIC_SetPriority+0xd8>)
 800441e:	1dfb      	adds	r3, r7, #7
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	001c      	movs	r4, r3
 8004424:	230f      	movs	r3, #15
 8004426:	4023      	ands	r3, r4
 8004428:	3b08      	subs	r3, #8
 800442a:	089b      	lsrs	r3, r3, #2
 800442c:	430a      	orrs	r2, r1
 800442e:	3306      	adds	r3, #6
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	18c3      	adds	r3, r0, r3
 8004434:	3304      	adds	r3, #4
 8004436:	601a      	str	r2, [r3, #0]
}
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	46bd      	mov	sp, r7
 800443c:	b003      	add	sp, #12
 800443e:	bd90      	pop	{r4, r7, pc}
 8004440:	e000e100 	.word	0xe000e100
 8004444:	e000ed00 	.word	0xe000ed00

08004448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	1e5a      	subs	r2, r3, #1
 8004454:	2380      	movs	r3, #128	; 0x80
 8004456:	045b      	lsls	r3, r3, #17
 8004458:	429a      	cmp	r2, r3
 800445a:	d301      	bcc.n	8004460 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800445c:	2301      	movs	r3, #1
 800445e:	e010      	b.n	8004482 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <SysTick_Config+0x44>)
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	3a01      	subs	r2, #1
 8004466:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004468:	2301      	movs	r3, #1
 800446a:	425b      	negs	r3, r3
 800446c:	2103      	movs	r1, #3
 800446e:	0018      	movs	r0, r3
 8004470:	f7ff ff7c 	bl	800436c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <SysTick_Config+0x44>)
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800447a:	4b04      	ldr	r3, [pc, #16]	; (800448c <SysTick_Config+0x44>)
 800447c:	2207      	movs	r2, #7
 800447e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004480:	2300      	movs	r3, #0
}
 8004482:	0018      	movs	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	b002      	add	sp, #8
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	e000e010 	.word	0xe000e010

08004490 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	607a      	str	r2, [r7, #4]
 800449a:	210f      	movs	r1, #15
 800449c:	187b      	adds	r3, r7, r1
 800449e:	1c02      	adds	r2, r0, #0
 80044a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	187b      	adds	r3, r7, r1
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	b25b      	sxtb	r3, r3
 80044aa:	0011      	movs	r1, r2
 80044ac:	0018      	movs	r0, r3
 80044ae:	f7ff ff5d 	bl	800436c <__NVIC_SetPriority>
}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b004      	add	sp, #16
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	0002      	movs	r2, r0
 80044c2:	1dfb      	adds	r3, r7, #7
 80044c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044c6:	1dfb      	adds	r3, r7, #7
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	b25b      	sxtb	r3, r3
 80044cc:	0018      	movs	r0, r3
 80044ce:	f7ff ff33 	bl	8004338 <__NVIC_EnableIRQ>
}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b002      	add	sp, #8
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f7ff ffaf 	bl	8004448 <SysTick_Config>
 80044ea:	0003      	movs	r3, r0
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b002      	add	sp, #8
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e061      	b.n	80045ca <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a32      	ldr	r2, [pc, #200]	; (80045d4 <HAL_DMA_Init+0xe0>)
 800450c:	4694      	mov	ip, r2
 800450e:	4463      	add	r3, ip
 8004510:	2114      	movs	r1, #20
 8004512:	0018      	movs	r0, r3
 8004514:	f7fb fe14 	bl	8000140 <__udivsi3>
 8004518:	0003      	movs	r3, r0
 800451a:	009a      	lsls	r2, r3, #2
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a2d      	ldr	r2, [pc, #180]	; (80045d8 <HAL_DMA_Init+0xe4>)
 8004524:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2225      	movs	r2, #37	; 0x25
 800452a:	2102      	movs	r1, #2
 800452c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4a28      	ldr	r2, [pc, #160]	; (80045dc <HAL_DMA_Init+0xe8>)
 800453a:	4013      	ands	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004546:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800455e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	01db      	lsls	r3, r3, #7
 800457c:	429a      	cmp	r2, r3
 800457e:	d018      	beq.n	80045b2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004580:	4b17      	ldr	r3, [pc, #92]	; (80045e0 <HAL_DMA_Init+0xec>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004588:	211c      	movs	r1, #28
 800458a:	400b      	ands	r3, r1
 800458c:	210f      	movs	r1, #15
 800458e:	4099      	lsls	r1, r3
 8004590:	000b      	movs	r3, r1
 8004592:	43d9      	mvns	r1, r3
 8004594:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <HAL_DMA_Init+0xec>)
 8004596:	400a      	ands	r2, r1
 8004598:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800459a:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <HAL_DMA_Init+0xec>)
 800459c:	6819      	ldr	r1, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	201c      	movs	r0, #28
 80045a8:	4003      	ands	r3, r0
 80045aa:	409a      	lsls	r2, r3
 80045ac:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <HAL_DMA_Init+0xec>)
 80045ae:	430a      	orrs	r2, r1
 80045b0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2225      	movs	r2, #37	; 0x25
 80045bc:	2101      	movs	r1, #1
 80045be:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2224      	movs	r2, #36	; 0x24
 80045c4:	2100      	movs	r1, #0
 80045c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	0018      	movs	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b004      	add	sp, #16
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	bffdfff8 	.word	0xbffdfff8
 80045d8:	40020000 	.word	0x40020000
 80045dc:	ffff800f 	.word	0xffff800f
 80045e0:	400200a8 	.word	0x400200a8

080045e4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045ec:	230f      	movs	r3, #15
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2225      	movs	r2, #37	; 0x25
 80045f8:	5c9b      	ldrb	r3, [r3, r2]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d008      	beq.n	8004612 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2204      	movs	r2, #4
 8004604:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2224      	movs	r2, #36	; 0x24
 800460a:	2100      	movs	r1, #0
 800460c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e024      	b.n	800465c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	210e      	movs	r1, #14
 800461e:	438a      	bics	r2, r1
 8004620:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2101      	movs	r1, #1
 800462e:	438a      	bics	r2, r1
 8004630:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	221c      	movs	r2, #28
 8004638:	401a      	ands	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	2101      	movs	r1, #1
 8004640:	4091      	lsls	r1, r2
 8004642:	000a      	movs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2225      	movs	r2, #37	; 0x25
 800464a:	2101      	movs	r1, #1
 800464c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2224      	movs	r2, #36	; 0x24
 8004652:	2100      	movs	r1, #0
 8004654:	5499      	strb	r1, [r3, r2]

    return status;
 8004656:	230f      	movs	r3, #15
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b004      	add	sp, #16
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800466c:	210f      	movs	r1, #15
 800466e:	187b      	adds	r3, r7, r1
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2225      	movs	r2, #37	; 0x25
 8004678:	5c9b      	ldrb	r3, [r3, r2]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d006      	beq.n	800468e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2204      	movs	r2, #4
 8004684:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004686:	187b      	adds	r3, r7, r1
 8004688:	2201      	movs	r2, #1
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	e02a      	b.n	80046e4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	210e      	movs	r1, #14
 800469a:	438a      	bics	r2, r1
 800469c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2101      	movs	r1, #1
 80046aa:	438a      	bics	r2, r1
 80046ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	221c      	movs	r2, #28
 80046b4:	401a      	ands	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	2101      	movs	r1, #1
 80046bc:	4091      	lsls	r1, r2
 80046be:	000a      	movs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2225      	movs	r2, #37	; 0x25
 80046c6:	2101      	movs	r1, #1
 80046c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2224      	movs	r2, #36	; 0x24
 80046ce:	2100      	movs	r1, #0
 80046d0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d004      	beq.n	80046e4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	0010      	movs	r0, r2
 80046e2:	4798      	blx	r3
    }
  }
  return status;
 80046e4:	230f      	movs	r3, #15
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	781b      	ldrb	r3, [r3, #0]
}
 80046ea:	0018      	movs	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b004      	add	sp, #16
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	221c      	movs	r2, #28
 8004710:	4013      	ands	r3, r2
 8004712:	2204      	movs	r2, #4
 8004714:	409a      	lsls	r2, r3
 8004716:	0013      	movs	r3, r2
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4013      	ands	r3, r2
 800471c:	d026      	beq.n	800476c <HAL_DMA_IRQHandler+0x7a>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2204      	movs	r2, #4
 8004722:	4013      	ands	r3, r2
 8004724:	d022      	beq.n	800476c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2220      	movs	r2, #32
 800472e:	4013      	ands	r3, r2
 8004730:	d107      	bne.n	8004742 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2104      	movs	r1, #4
 800473e:	438a      	bics	r2, r1
 8004740:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	221c      	movs	r2, #28
 8004748:	401a      	ands	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	2104      	movs	r1, #4
 8004750:	4091      	lsls	r1, r2
 8004752:	000a      	movs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	2b00      	cmp	r3, #0
 800475c:	d100      	bne.n	8004760 <HAL_DMA_IRQHandler+0x6e>
 800475e:	e071      	b.n	8004844 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	0010      	movs	r0, r2
 8004768:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800476a:	e06b      	b.n	8004844 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004770:	221c      	movs	r2, #28
 8004772:	4013      	ands	r3, r2
 8004774:	2202      	movs	r2, #2
 8004776:	409a      	lsls	r2, r3
 8004778:	0013      	movs	r3, r2
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4013      	ands	r3, r2
 800477e:	d02d      	beq.n	80047dc <HAL_DMA_IRQHandler+0xea>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2202      	movs	r2, #2
 8004784:	4013      	ands	r3, r2
 8004786:	d029      	beq.n	80047dc <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2220      	movs	r2, #32
 8004790:	4013      	ands	r3, r2
 8004792:	d10b      	bne.n	80047ac <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	210a      	movs	r1, #10
 80047a0:	438a      	bics	r2, r1
 80047a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2225      	movs	r2, #37	; 0x25
 80047a8:	2101      	movs	r1, #1
 80047aa:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b0:	221c      	movs	r2, #28
 80047b2:	401a      	ands	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	2102      	movs	r1, #2
 80047ba:	4091      	lsls	r1, r2
 80047bc:	000a      	movs	r2, r1
 80047be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2224      	movs	r2, #36	; 0x24
 80047c4:	2100      	movs	r1, #0
 80047c6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d039      	beq.n	8004844 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	0010      	movs	r0, r2
 80047d8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80047da:	e033      	b.n	8004844 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e0:	221c      	movs	r2, #28
 80047e2:	4013      	ands	r3, r2
 80047e4:	2208      	movs	r2, #8
 80047e6:	409a      	lsls	r2, r3
 80047e8:	0013      	movs	r3, r2
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4013      	ands	r3, r2
 80047ee:	d02a      	beq.n	8004846 <HAL_DMA_IRQHandler+0x154>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2208      	movs	r2, #8
 80047f4:	4013      	ands	r3, r2
 80047f6:	d026      	beq.n	8004846 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	210e      	movs	r1, #14
 8004804:	438a      	bics	r2, r1
 8004806:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480c:	221c      	movs	r2, #28
 800480e:	401a      	ands	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	2101      	movs	r1, #1
 8004816:	4091      	lsls	r1, r2
 8004818:	000a      	movs	r2, r1
 800481a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2225      	movs	r2, #37	; 0x25
 8004826:	2101      	movs	r1, #1
 8004828:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2224      	movs	r2, #36	; 0x24
 800482e:	2100      	movs	r1, #0
 8004830:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	0010      	movs	r0, r2
 8004842:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004844:	46c0      	nop			; (mov r8, r8)
 8004846:	46c0      	nop			; (mov r8, r8)
}
 8004848:	46bd      	mov	sp, r7
 800484a:	b004      	add	sp, #16
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004862:	2300      	movs	r3, #0
 8004864:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004866:	e14f      	b.n	8004b08 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2101      	movs	r1, #1
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4091      	lsls	r1, r2
 8004872:	000a      	movs	r2, r1
 8004874:	4013      	ands	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d100      	bne.n	8004880 <HAL_GPIO_Init+0x30>
 800487e:	e140      	b.n	8004b02 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2203      	movs	r2, #3
 8004886:	4013      	ands	r3, r2
 8004888:	2b01      	cmp	r3, #1
 800488a:	d005      	beq.n	8004898 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2203      	movs	r2, #3
 8004892:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004894:	2b02      	cmp	r3, #2
 8004896:	d130      	bne.n	80048fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	2203      	movs	r2, #3
 80048a4:	409a      	lsls	r2, r3
 80048a6:	0013      	movs	r3, r2
 80048a8:	43da      	mvns	r2, r3
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4013      	ands	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	409a      	lsls	r2, r3
 80048ba:	0013      	movs	r3, r2
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048ce:	2201      	movs	r2, #1
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	409a      	lsls	r2, r3
 80048d4:	0013      	movs	r3, r2
 80048d6:	43da      	mvns	r2, r3
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4013      	ands	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	091b      	lsrs	r3, r3, #4
 80048e4:	2201      	movs	r2, #1
 80048e6:	401a      	ands	r2, r3
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	409a      	lsls	r2, r3
 80048ec:	0013      	movs	r3, r2
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2203      	movs	r2, #3
 8004900:	4013      	ands	r3, r2
 8004902:	2b03      	cmp	r3, #3
 8004904:	d017      	beq.n	8004936 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	2203      	movs	r2, #3
 8004912:	409a      	lsls	r2, r3
 8004914:	0013      	movs	r3, r2
 8004916:	43da      	mvns	r2, r3
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4013      	ands	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	409a      	lsls	r2, r3
 8004928:	0013      	movs	r3, r2
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2203      	movs	r2, #3
 800493c:	4013      	ands	r3, r2
 800493e:	2b02      	cmp	r3, #2
 8004940:	d123      	bne.n	800498a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	08da      	lsrs	r2, r3, #3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3208      	adds	r2, #8
 800494a:	0092      	lsls	r2, r2, #2
 800494c:	58d3      	ldr	r3, [r2, r3]
 800494e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2207      	movs	r2, #7
 8004954:	4013      	ands	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	220f      	movs	r2, #15
 800495a:	409a      	lsls	r2, r3
 800495c:	0013      	movs	r3, r2
 800495e:	43da      	mvns	r2, r3
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4013      	ands	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2107      	movs	r1, #7
 800496e:	400b      	ands	r3, r1
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	409a      	lsls	r2, r3
 8004974:	0013      	movs	r3, r2
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	08da      	lsrs	r2, r3, #3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3208      	adds	r2, #8
 8004984:	0092      	lsls	r2, r2, #2
 8004986:	6939      	ldr	r1, [r7, #16]
 8004988:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	2203      	movs	r2, #3
 8004996:	409a      	lsls	r2, r3
 8004998:	0013      	movs	r3, r2
 800499a:	43da      	mvns	r2, r3
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4013      	ands	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2203      	movs	r2, #3
 80049a8:	401a      	ands	r2, r3
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	409a      	lsls	r2, r3
 80049b0:	0013      	movs	r3, r2
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	23c0      	movs	r3, #192	; 0xc0
 80049c4:	029b      	lsls	r3, r3, #10
 80049c6:	4013      	ands	r3, r2
 80049c8:	d100      	bne.n	80049cc <HAL_GPIO_Init+0x17c>
 80049ca:	e09a      	b.n	8004b02 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049cc:	4b54      	ldr	r3, [pc, #336]	; (8004b20 <HAL_GPIO_Init+0x2d0>)
 80049ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d0:	4b53      	ldr	r3, [pc, #332]	; (8004b20 <HAL_GPIO_Init+0x2d0>)
 80049d2:	2101      	movs	r1, #1
 80049d4:	430a      	orrs	r2, r1
 80049d6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80049d8:	4a52      	ldr	r2, [pc, #328]	; (8004b24 <HAL_GPIO_Init+0x2d4>)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	089b      	lsrs	r3, r3, #2
 80049de:	3302      	adds	r3, #2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	589b      	ldr	r3, [r3, r2]
 80049e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2203      	movs	r2, #3
 80049ea:	4013      	ands	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	220f      	movs	r2, #15
 80049f0:	409a      	lsls	r2, r3
 80049f2:	0013      	movs	r3, r2
 80049f4:	43da      	mvns	r2, r3
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4013      	ands	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	23a0      	movs	r3, #160	; 0xa0
 8004a00:	05db      	lsls	r3, r3, #23
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d019      	beq.n	8004a3a <HAL_GPIO_Init+0x1ea>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a47      	ldr	r2, [pc, #284]	; (8004b28 <HAL_GPIO_Init+0x2d8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_GPIO_Init+0x1e6>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a46      	ldr	r2, [pc, #280]	; (8004b2c <HAL_GPIO_Init+0x2dc>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00d      	beq.n	8004a32 <HAL_GPIO_Init+0x1e2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a45      	ldr	r2, [pc, #276]	; (8004b30 <HAL_GPIO_Init+0x2e0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d007      	beq.n	8004a2e <HAL_GPIO_Init+0x1de>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a44      	ldr	r2, [pc, #272]	; (8004b34 <HAL_GPIO_Init+0x2e4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d101      	bne.n	8004a2a <HAL_GPIO_Init+0x1da>
 8004a26:	2305      	movs	r3, #5
 8004a28:	e008      	b.n	8004a3c <HAL_GPIO_Init+0x1ec>
 8004a2a:	2306      	movs	r3, #6
 8004a2c:	e006      	b.n	8004a3c <HAL_GPIO_Init+0x1ec>
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e004      	b.n	8004a3c <HAL_GPIO_Init+0x1ec>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e002      	b.n	8004a3c <HAL_GPIO_Init+0x1ec>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_GPIO_Init+0x1ec>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	2103      	movs	r1, #3
 8004a40:	400a      	ands	r2, r1
 8004a42:	0092      	lsls	r2, r2, #2
 8004a44:	4093      	lsls	r3, r2
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a4c:	4935      	ldr	r1, [pc, #212]	; (8004b24 <HAL_GPIO_Init+0x2d4>)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	089b      	lsrs	r3, r3, #2
 8004a52:	3302      	adds	r3, #2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a5a:	4b37      	ldr	r3, [pc, #220]	; (8004b38 <HAL_GPIO_Init+0x2e8>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	43da      	mvns	r2, r3
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4013      	ands	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	2380      	movs	r3, #128	; 0x80
 8004a70:	035b      	lsls	r3, r3, #13
 8004a72:	4013      	ands	r3, r2
 8004a74:	d003      	beq.n	8004a7e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a7e:	4b2e      	ldr	r3, [pc, #184]	; (8004b38 <HAL_GPIO_Init+0x2e8>)
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004a84:	4b2c      	ldr	r3, [pc, #176]	; (8004b38 <HAL_GPIO_Init+0x2e8>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	43da      	mvns	r2, r3
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4013      	ands	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	039b      	lsls	r3, r3, #14
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d003      	beq.n	8004aa8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004aa8:	4b23      	ldr	r3, [pc, #140]	; (8004b38 <HAL_GPIO_Init+0x2e8>)
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004aae:	4b22      	ldr	r3, [pc, #136]	; (8004b38 <HAL_GPIO_Init+0x2e8>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	43da      	mvns	r2, r3
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4013      	ands	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	029b      	lsls	r3, r3, #10
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d003      	beq.n	8004ad2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004ad2:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <HAL_GPIO_Init+0x2e8>)
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ad8:	4b17      	ldr	r3, [pc, #92]	; (8004b38 <HAL_GPIO_Init+0x2e8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	43da      	mvns	r2, r3
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	025b      	lsls	r3, r3, #9
 8004af0:	4013      	ands	r3, r2
 8004af2:	d003      	beq.n	8004afc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004afc:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <HAL_GPIO_Init+0x2e8>)
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	3301      	adds	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	40da      	lsrs	r2, r3
 8004b10:	1e13      	subs	r3, r2, #0
 8004b12:	d000      	beq.n	8004b16 <HAL_GPIO_Init+0x2c6>
 8004b14:	e6a8      	b.n	8004868 <HAL_GPIO_Init+0x18>
  }
}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	46c0      	nop			; (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b006      	add	sp, #24
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40021000 	.word	0x40021000
 8004b24:	40010000 	.word	0x40010000
 8004b28:	50000400 	.word	0x50000400
 8004b2c:	50000800 	.word	0x50000800
 8004b30:	50000c00 	.word	0x50000c00
 8004b34:	50001c00 	.word	0x50001c00
 8004b38:	40010400 	.word	0x40010400

08004b3c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	0008      	movs	r0, r1
 8004b46:	0011      	movs	r1, r2
 8004b48:	1cbb      	adds	r3, r7, #2
 8004b4a:	1c02      	adds	r2, r0, #0
 8004b4c:	801a      	strh	r2, [r3, #0]
 8004b4e:	1c7b      	adds	r3, r7, #1
 8004b50:	1c0a      	adds	r2, r1, #0
 8004b52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b54:	1c7b      	adds	r3, r7, #1
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d004      	beq.n	8004b66 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b5c:	1cbb      	adds	r3, r7, #2
 8004b5e:	881a      	ldrh	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004b64:	e003      	b.n	8004b6e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004b66:	1cbb      	adds	r3, r7, #2
 8004b68:	881a      	ldrh	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b002      	add	sp, #8
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	000a      	movs	r2, r1
 8004b80:	1cbb      	adds	r3, r7, #2
 8004b82:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b8a:	1cbb      	adds	r3, r7, #2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4013      	ands	r3, r2
 8004b92:	041a      	lsls	r2, r3, #16
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	43db      	mvns	r3, r3
 8004b98:	1cb9      	adds	r1, r7, #2
 8004b9a:	8809      	ldrh	r1, [r1, #0]
 8004b9c:	400b      	ands	r3, r1
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	619a      	str	r2, [r3, #24]
}
 8004ba4:	46c0      	nop			; (mov r8, r8)
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b004      	add	sp, #16
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	0002      	movs	r2, r0
 8004bb4:	1dbb      	adds	r3, r7, #6
 8004bb6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004bb8:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	1dba      	adds	r2, r7, #6
 8004bbe:	8812      	ldrh	r2, [r2, #0]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d008      	beq.n	8004bd6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bc4:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004bc6:	1dba      	adds	r2, r7, #6
 8004bc8:	8812      	ldrh	r2, [r2, #0]
 8004bca:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bcc:	1dbb      	adds	r3, r7, #6
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f000 f807 	bl	8004be4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b002      	add	sp, #8
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	40010400 	.word	0x40010400

08004be4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	0002      	movs	r2, r0
 8004bec:	1dbb      	adds	r3, r7, #6
 8004bee:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e082      	b.n	8004d10 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2241      	movs	r2, #65	; 0x41
 8004c0e:	5c9b      	ldrb	r3, [r3, r2]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d107      	bne.n	8004c26 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2240      	movs	r2, #64	; 0x40
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f7fd fe8f 	bl	8002944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2241      	movs	r2, #65	; 0x41
 8004c2a:	2124      	movs	r1, #36	; 0x24
 8004c2c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2101      	movs	r1, #1
 8004c3a:	438a      	bics	r2, r1
 8004c3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4934      	ldr	r1, [pc, #208]	; (8004d18 <HAL_I2C_Init+0x120>)
 8004c48:	400a      	ands	r2, r1
 8004c4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4931      	ldr	r1, [pc, #196]	; (8004d1c <HAL_I2C_Init+0x124>)
 8004c58:	400a      	ands	r2, r1
 8004c5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d108      	bne.n	8004c76 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2180      	movs	r1, #128	; 0x80
 8004c6e:	0209      	lsls	r1, r1, #8
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	e007      	b.n	8004c86 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2184      	movs	r1, #132	; 0x84
 8004c80:	0209      	lsls	r1, r1, #8
 8004c82:	430a      	orrs	r2, r1
 8004c84:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d104      	bne.n	8004c98 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2280      	movs	r2, #128	; 0x80
 8004c94:	0112      	lsls	r2, r2, #4
 8004c96:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	491f      	ldr	r1, [pc, #124]	; (8004d20 <HAL_I2C_Init+0x128>)
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	491a      	ldr	r1, [pc, #104]	; (8004d1c <HAL_I2C_Init+0x124>)
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69d9      	ldr	r1, [r3, #28]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1a      	ldr	r2, [r3, #32]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2241      	movs	r2, #65	; 0x41
 8004cfc:	2120      	movs	r1, #32
 8004cfe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2242      	movs	r2, #66	; 0x42
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	0018      	movs	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b002      	add	sp, #8
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	f0ffffff 	.word	0xf0ffffff
 8004d1c:	ffff7fff 	.word	0xffff7fff
 8004d20:	02008000 	.word	0x02008000

08004d24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2241      	movs	r2, #65	; 0x41
 8004d32:	5c9b      	ldrb	r3, [r3, r2]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d138      	bne.n	8004dac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2240      	movs	r2, #64	; 0x40
 8004d3e:	5c9b      	ldrb	r3, [r3, r2]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e032      	b.n	8004dae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2240      	movs	r2, #64	; 0x40
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2241      	movs	r2, #65	; 0x41
 8004d54:	2124      	movs	r1, #36	; 0x24
 8004d56:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2101      	movs	r1, #1
 8004d64:	438a      	bics	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4911      	ldr	r1, [pc, #68]	; (8004db8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004d74:	400a      	ands	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6819      	ldr	r1, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2101      	movs	r1, #1
 8004d94:	430a      	orrs	r2, r1
 8004d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2241      	movs	r2, #65	; 0x41
 8004d9c:	2120      	movs	r1, #32
 8004d9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2240      	movs	r2, #64	; 0x40
 8004da4:	2100      	movs	r1, #0
 8004da6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	e000      	b.n	8004dae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
  }
}
 8004dae:	0018      	movs	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b002      	add	sp, #8
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	ffffefff 	.word	0xffffefff

08004dbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2241      	movs	r2, #65	; 0x41
 8004dca:	5c9b      	ldrb	r3, [r3, r2]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d139      	bne.n	8004e46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2240      	movs	r2, #64	; 0x40
 8004dd6:	5c9b      	ldrb	r3, [r3, r2]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e033      	b.n	8004e48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	2101      	movs	r1, #1
 8004de6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2241      	movs	r2, #65	; 0x41
 8004dec:	2124      	movs	r1, #36	; 0x24
 8004dee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	438a      	bics	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4a11      	ldr	r2, [pc, #68]	; (8004e50 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2241      	movs	r2, #65	; 0x41
 8004e36:	2120      	movs	r1, #32
 8004e38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2240      	movs	r2, #64	; 0x40
 8004e3e:	2100      	movs	r1, #0
 8004e40:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	e000      	b.n	8004e48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e46:	2302      	movs	r3, #2
  }
}
 8004e48:	0018      	movs	r0, r3
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	b004      	add	sp, #16
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	fffff0ff 	.word	0xfffff0ff

08004e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e54:	b5b0      	push	{r4, r5, r7, lr}
 8004e56:	b08a      	sub	sp, #40	; 0x28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f000 fbaf 	bl	80055c6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e68:	4bcf      	ldr	r3, [pc, #828]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	220c      	movs	r2, #12
 8004e6e:	4013      	ands	r3, r2
 8004e70:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e72:	4bcd      	ldr	r3, [pc, #820]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	2380      	movs	r3, #128	; 0x80
 8004e78:	025b      	lsls	r3, r3, #9
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2201      	movs	r2, #1
 8004e84:	4013      	ands	r3, r2
 8004e86:	d100      	bne.n	8004e8a <HAL_RCC_OscConfig+0x36>
 8004e88:	e07e      	b.n	8004f88 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d007      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	2b0c      	cmp	r3, #12
 8004e94:	d112      	bne.n	8004ebc <HAL_RCC_OscConfig+0x68>
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	025b      	lsls	r3, r3, #9
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d10d      	bne.n	8004ebc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea0:	4bc1      	ldr	r3, [pc, #772]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	029b      	lsls	r3, r3, #10
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	d100      	bne.n	8004eae <HAL_RCC_OscConfig+0x5a>
 8004eac:	e06b      	b.n	8004f86 <HAL_RCC_OscConfig+0x132>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d167      	bne.n	8004f86 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	f000 fb85 	bl	80055c6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	025b      	lsls	r3, r3, #9
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d107      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x84>
 8004ec8:	4bb7      	ldr	r3, [pc, #732]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	4bb6      	ldr	r3, [pc, #728]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004ece:	2180      	movs	r1, #128	; 0x80
 8004ed0:	0249      	lsls	r1, r1, #9
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e027      	b.n	8004f28 <HAL_RCC_OscConfig+0xd4>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	23a0      	movs	r3, #160	; 0xa0
 8004ede:	02db      	lsls	r3, r3, #11
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d10e      	bne.n	8004f02 <HAL_RCC_OscConfig+0xae>
 8004ee4:	4bb0      	ldr	r3, [pc, #704]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4baf      	ldr	r3, [pc, #700]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004eea:	2180      	movs	r1, #128	; 0x80
 8004eec:	02c9      	lsls	r1, r1, #11
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	4bad      	ldr	r3, [pc, #692]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4bac      	ldr	r3, [pc, #688]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	0249      	lsls	r1, r1, #9
 8004efc:	430a      	orrs	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e012      	b.n	8004f28 <HAL_RCC_OscConfig+0xd4>
 8004f02:	4ba9      	ldr	r3, [pc, #676]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4ba8      	ldr	r3, [pc, #672]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004f08:	49a8      	ldr	r1, [pc, #672]	; (80051ac <HAL_RCC_OscConfig+0x358>)
 8004f0a:	400a      	ands	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	4ba6      	ldr	r3, [pc, #664]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	025b      	lsls	r3, r3, #9
 8004f16:	4013      	ands	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4ba2      	ldr	r3, [pc, #648]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4ba1      	ldr	r3, [pc, #644]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004f22:	49a3      	ldr	r1, [pc, #652]	; (80051b0 <HAL_RCC_OscConfig+0x35c>)
 8004f24:	400a      	ands	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d015      	beq.n	8004f5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f30:	f7fe ffa0 	bl	8003e74 <HAL_GetTick>
 8004f34:	0003      	movs	r3, r0
 8004f36:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f38:	e009      	b.n	8004f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f3a:	f7fe ff9b 	bl	8003e74 <HAL_GetTick>
 8004f3e:	0002      	movs	r2, r0
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b64      	cmp	r3, #100	; 0x64
 8004f46:	d902      	bls.n	8004f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	f000 fb3c 	bl	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f4e:	4b96      	ldr	r3, [pc, #600]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	029b      	lsls	r3, r3, #10
 8004f56:	4013      	ands	r3, r2
 8004f58:	d0ef      	beq.n	8004f3a <HAL_RCC_OscConfig+0xe6>
 8004f5a:	e015      	b.n	8004f88 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5c:	f7fe ff8a 	bl	8003e74 <HAL_GetTick>
 8004f60:	0003      	movs	r3, r0
 8004f62:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f66:	f7fe ff85 	bl	8003e74 <HAL_GetTick>
 8004f6a:	0002      	movs	r2, r0
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b64      	cmp	r3, #100	; 0x64
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e326      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f78:	4b8b      	ldr	r3, [pc, #556]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	2380      	movs	r3, #128	; 0x80
 8004f7e:	029b      	lsls	r3, r3, #10
 8004f80:	4013      	ands	r3, r2
 8004f82:	d1f0      	bne.n	8004f66 <HAL_RCC_OscConfig+0x112>
 8004f84:	e000      	b.n	8004f88 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d100      	bne.n	8004f94 <HAL_RCC_OscConfig+0x140>
 8004f92:	e08b      	b.n	80050ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	2b0c      	cmp	r3, #12
 8004fa4:	d13e      	bne.n	8005024 <HAL_RCC_OscConfig+0x1d0>
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d13b      	bne.n	8005024 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004fac:	4b7e      	ldr	r3, [pc, #504]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x16c>
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e302      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc0:	4b79      	ldr	r3, [pc, #484]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4a7b      	ldr	r2, [pc, #492]	; (80051b4 <HAL_RCC_OscConfig+0x360>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	0019      	movs	r1, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	021a      	lsls	r2, r3, #8
 8004fd0:	4b75      	ldr	r3, [pc, #468]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004fd6:	4b74      	ldr	r3, [pc, #464]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2209      	movs	r2, #9
 8004fdc:	4393      	bics	r3, r2
 8004fde:	0019      	movs	r1, r3
 8004fe0:	4b71      	ldr	r3, [pc, #452]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fe8:	f000 fc40 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8004fec:	0001      	movs	r1, r0
 8004fee:	4b6e      	ldr	r3, [pc, #440]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	4a6f      	ldr	r2, [pc, #444]	; (80051b8 <HAL_RCC_OscConfig+0x364>)
 8004ffa:	5cd3      	ldrb	r3, [r2, r3]
 8004ffc:	000a      	movs	r2, r1
 8004ffe:	40da      	lsrs	r2, r3
 8005000:	4b6e      	ldr	r3, [pc, #440]	; (80051bc <HAL_RCC_OscConfig+0x368>)
 8005002:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005004:	4b6e      	ldr	r3, [pc, #440]	; (80051c0 <HAL_RCC_OscConfig+0x36c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2513      	movs	r5, #19
 800500a:	197c      	adds	r4, r7, r5
 800500c:	0018      	movs	r0, r3
 800500e:	f7fe feeb 	bl	8003de8 <HAL_InitTick>
 8005012:	0003      	movs	r3, r0
 8005014:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005016:	197b      	adds	r3, r7, r5
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d046      	beq.n	80050ac <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800501e:	197b      	adds	r3, r7, r5
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	e2d0      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d027      	beq.n	800507a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800502a:	4b5f      	ldr	r3, [pc, #380]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2209      	movs	r2, #9
 8005030:	4393      	bics	r3, r2
 8005032:	0019      	movs	r1, r3
 8005034:	4b5c      	ldr	r3, [pc, #368]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	430a      	orrs	r2, r1
 800503a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503c:	f7fe ff1a 	bl	8003e74 <HAL_GetTick>
 8005040:	0003      	movs	r3, r0
 8005042:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005046:	f7fe ff15 	bl	8003e74 <HAL_GetTick>
 800504a:	0002      	movs	r2, r0
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e2b6      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005058:	4b53      	ldr	r3, [pc, #332]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2204      	movs	r2, #4
 800505e:	4013      	ands	r3, r2
 8005060:	d0f1      	beq.n	8005046 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005062:	4b51      	ldr	r3, [pc, #324]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4a53      	ldr	r2, [pc, #332]	; (80051b4 <HAL_RCC_OscConfig+0x360>)
 8005068:	4013      	ands	r3, r2
 800506a:	0019      	movs	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	021a      	lsls	r2, r3, #8
 8005072:	4b4d      	ldr	r3, [pc, #308]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
 8005078:	e018      	b.n	80050ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800507a:	4b4b      	ldr	r3, [pc, #300]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b4a      	ldr	r3, [pc, #296]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8005080:	2101      	movs	r1, #1
 8005082:	438a      	bics	r2, r1
 8005084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005086:	f7fe fef5 	bl	8003e74 <HAL_GetTick>
 800508a:	0003      	movs	r3, r0
 800508c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005090:	f7fe fef0 	bl	8003e74 <HAL_GetTick>
 8005094:	0002      	movs	r2, r0
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e291      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050a2:	4b41      	ldr	r3, [pc, #260]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2204      	movs	r2, #4
 80050a8:	4013      	ands	r3, r2
 80050aa:	d1f1      	bne.n	8005090 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2210      	movs	r2, #16
 80050b2:	4013      	ands	r3, r2
 80050b4:	d100      	bne.n	80050b8 <HAL_RCC_OscConfig+0x264>
 80050b6:	e0a1      	b.n	80051fc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d140      	bne.n	8005140 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050be:	4b3a      	ldr	r3, [pc, #232]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	2380      	movs	r3, #128	; 0x80
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4013      	ands	r3, r2
 80050c8:	d005      	beq.n	80050d6 <HAL_RCC_OscConfig+0x282>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e277      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050d6:	4b34      	ldr	r3, [pc, #208]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4a3a      	ldr	r2, [pc, #232]	; (80051c4 <HAL_RCC_OscConfig+0x370>)
 80050dc:	4013      	ands	r3, r2
 80050de:	0019      	movs	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e4:	4b30      	ldr	r3, [pc, #192]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050ea:	4b2f      	ldr	r3, [pc, #188]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	0a19      	lsrs	r1, r3, #8
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	061a      	lsls	r2, r3, #24
 80050f8:	4b2b      	ldr	r3, [pc, #172]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	0b5b      	lsrs	r3, r3, #13
 8005104:	3301      	adds	r3, #1
 8005106:	2280      	movs	r2, #128	; 0x80
 8005108:	0212      	lsls	r2, r2, #8
 800510a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800510c:	4b26      	ldr	r3, [pc, #152]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	210f      	movs	r1, #15
 8005114:	400b      	ands	r3, r1
 8005116:	4928      	ldr	r1, [pc, #160]	; (80051b8 <HAL_RCC_OscConfig+0x364>)
 8005118:	5ccb      	ldrb	r3, [r1, r3]
 800511a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800511c:	4b27      	ldr	r3, [pc, #156]	; (80051bc <HAL_RCC_OscConfig+0x368>)
 800511e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005120:	4b27      	ldr	r3, [pc, #156]	; (80051c0 <HAL_RCC_OscConfig+0x36c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2513      	movs	r5, #19
 8005126:	197c      	adds	r4, r7, r5
 8005128:	0018      	movs	r0, r3
 800512a:	f7fe fe5d 	bl	8003de8 <HAL_InitTick>
 800512e:	0003      	movs	r3, r0
 8005130:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005132:	197b      	adds	r3, r7, r5
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d060      	beq.n	80051fc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800513a:	197b      	adds	r3, r7, r5
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	e242      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d03f      	beq.n	80051c8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005148:	4b17      	ldr	r3, [pc, #92]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4b16      	ldr	r3, [pc, #88]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 800514e:	2180      	movs	r1, #128	; 0x80
 8005150:	0049      	lsls	r1, r1, #1
 8005152:	430a      	orrs	r2, r1
 8005154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005156:	f7fe fe8d 	bl	8003e74 <HAL_GetTick>
 800515a:	0003      	movs	r3, r0
 800515c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005160:	f7fe fe88 	bl	8003e74 <HAL_GetTick>
 8005164:	0002      	movs	r2, r0
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e229      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005172:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4013      	ands	r3, r2
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800517e:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <HAL_RCC_OscConfig+0x370>)
 8005184:	4013      	ands	r3, r2
 8005186:	0019      	movs	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005192:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	0a19      	lsrs	r1, r3, #8
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	061a      	lsls	r2, r3, #24
 80051a0:	4b01      	ldr	r3, [pc, #4]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
 80051a6:	e029      	b.n	80051fc <HAL_RCC_OscConfig+0x3a8>
 80051a8:	40021000 	.word	0x40021000
 80051ac:	fffeffff 	.word	0xfffeffff
 80051b0:	fffbffff 	.word	0xfffbffff
 80051b4:	ffffe0ff 	.word	0xffffe0ff
 80051b8:	0800d1a4 	.word	0x0800d1a4
 80051bc:	20000000 	.word	0x20000000
 80051c0:	20000004 	.word	0x20000004
 80051c4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051c8:	4bbd      	ldr	r3, [pc, #756]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	4bbc      	ldr	r3, [pc, #752]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80051ce:	49bd      	ldr	r1, [pc, #756]	; (80054c4 <HAL_RCC_OscConfig+0x670>)
 80051d0:	400a      	ands	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7fe fe4e 	bl	8003e74 <HAL_GetTick>
 80051d8:	0003      	movs	r3, r0
 80051da:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051de:	f7fe fe49 	bl	8003e74 <HAL_GetTick>
 80051e2:	0002      	movs	r2, r0
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e1ea      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80051f0:	4bb3      	ldr	r3, [pc, #716]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4013      	ands	r3, r2
 80051fa:	d1f0      	bne.n	80051de <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2208      	movs	r2, #8
 8005202:	4013      	ands	r3, r2
 8005204:	d036      	beq.n	8005274 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d019      	beq.n	8005242 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520e:	4bac      	ldr	r3, [pc, #688]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005212:	4bab      	ldr	r3, [pc, #684]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005214:	2101      	movs	r1, #1
 8005216:	430a      	orrs	r2, r1
 8005218:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800521a:	f7fe fe2b 	bl	8003e74 <HAL_GetTick>
 800521e:	0003      	movs	r3, r0
 8005220:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005224:	f7fe fe26 	bl	8003e74 <HAL_GetTick>
 8005228:	0002      	movs	r2, r0
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e1c7      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005236:	4ba2      	ldr	r3, [pc, #648]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523a:	2202      	movs	r2, #2
 800523c:	4013      	ands	r3, r2
 800523e:	d0f1      	beq.n	8005224 <HAL_RCC_OscConfig+0x3d0>
 8005240:	e018      	b.n	8005274 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005242:	4b9f      	ldr	r3, [pc, #636]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005246:	4b9e      	ldr	r3, [pc, #632]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005248:	2101      	movs	r1, #1
 800524a:	438a      	bics	r2, r1
 800524c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800524e:	f7fe fe11 	bl	8003e74 <HAL_GetTick>
 8005252:	0003      	movs	r3, r0
 8005254:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005258:	f7fe fe0c 	bl	8003e74 <HAL_GetTick>
 800525c:	0002      	movs	r2, r0
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e1ad      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800526a:	4b95      	ldr	r3, [pc, #596]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 800526c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526e:	2202      	movs	r2, #2
 8005270:	4013      	ands	r3, r2
 8005272:	d1f1      	bne.n	8005258 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2204      	movs	r2, #4
 800527a:	4013      	ands	r3, r2
 800527c:	d100      	bne.n	8005280 <HAL_RCC_OscConfig+0x42c>
 800527e:	e0ae      	b.n	80053de <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005280:	2027      	movs	r0, #39	; 0x27
 8005282:	183b      	adds	r3, r7, r0
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005288:	4b8d      	ldr	r3, [pc, #564]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 800528a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	055b      	lsls	r3, r3, #21
 8005290:	4013      	ands	r3, r2
 8005292:	d109      	bne.n	80052a8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005294:	4b8a      	ldr	r3, [pc, #552]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005298:	4b89      	ldr	r3, [pc, #548]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 800529a:	2180      	movs	r1, #128	; 0x80
 800529c:	0549      	lsls	r1, r1, #21
 800529e:	430a      	orrs	r2, r1
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80052a2:	183b      	adds	r3, r7, r0
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a8:	4b87      	ldr	r3, [pc, #540]	; (80054c8 <HAL_RCC_OscConfig+0x674>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	4013      	ands	r3, r2
 80052b2:	d11a      	bne.n	80052ea <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052b4:	4b84      	ldr	r3, [pc, #528]	; (80054c8 <HAL_RCC_OscConfig+0x674>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4b83      	ldr	r3, [pc, #524]	; (80054c8 <HAL_RCC_OscConfig+0x674>)
 80052ba:	2180      	movs	r1, #128	; 0x80
 80052bc:	0049      	lsls	r1, r1, #1
 80052be:	430a      	orrs	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c2:	f7fe fdd7 	bl	8003e74 <HAL_GetTick>
 80052c6:	0003      	movs	r3, r0
 80052c8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052cc:	f7fe fdd2 	bl	8003e74 <HAL_GetTick>
 80052d0:	0002      	movs	r2, r0
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	; 0x64
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e173      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052de:	4b7a      	ldr	r3, [pc, #488]	; (80054c8 <HAL_RCC_OscConfig+0x674>)
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	4013      	ands	r3, r2
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d107      	bne.n	8005306 <HAL_RCC_OscConfig+0x4b2>
 80052f6:	4b72      	ldr	r3, [pc, #456]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80052f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052fa:	4b71      	ldr	r3, [pc, #452]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80052fc:	2180      	movs	r1, #128	; 0x80
 80052fe:	0049      	lsls	r1, r1, #1
 8005300:	430a      	orrs	r2, r1
 8005302:	651a      	str	r2, [r3, #80]	; 0x50
 8005304:	e031      	b.n	800536a <HAL_RCC_OscConfig+0x516>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10c      	bne.n	8005328 <HAL_RCC_OscConfig+0x4d4>
 800530e:	4b6c      	ldr	r3, [pc, #432]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005312:	4b6b      	ldr	r3, [pc, #428]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005314:	496b      	ldr	r1, [pc, #428]	; (80054c4 <HAL_RCC_OscConfig+0x670>)
 8005316:	400a      	ands	r2, r1
 8005318:	651a      	str	r2, [r3, #80]	; 0x50
 800531a:	4b69      	ldr	r3, [pc, #420]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 800531c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800531e:	4b68      	ldr	r3, [pc, #416]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005320:	496a      	ldr	r1, [pc, #424]	; (80054cc <HAL_RCC_OscConfig+0x678>)
 8005322:	400a      	ands	r2, r1
 8005324:	651a      	str	r2, [r3, #80]	; 0x50
 8005326:	e020      	b.n	800536a <HAL_RCC_OscConfig+0x516>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	23a0      	movs	r3, #160	; 0xa0
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	429a      	cmp	r2, r3
 8005332:	d10e      	bne.n	8005352 <HAL_RCC_OscConfig+0x4fe>
 8005334:	4b62      	ldr	r3, [pc, #392]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005338:	4b61      	ldr	r3, [pc, #388]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 800533a:	2180      	movs	r1, #128	; 0x80
 800533c:	00c9      	lsls	r1, r1, #3
 800533e:	430a      	orrs	r2, r1
 8005340:	651a      	str	r2, [r3, #80]	; 0x50
 8005342:	4b5f      	ldr	r3, [pc, #380]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005346:	4b5e      	ldr	r3, [pc, #376]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005348:	2180      	movs	r1, #128	; 0x80
 800534a:	0049      	lsls	r1, r1, #1
 800534c:	430a      	orrs	r2, r1
 800534e:	651a      	str	r2, [r3, #80]	; 0x50
 8005350:	e00b      	b.n	800536a <HAL_RCC_OscConfig+0x516>
 8005352:	4b5b      	ldr	r3, [pc, #364]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005356:	4b5a      	ldr	r3, [pc, #360]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005358:	495a      	ldr	r1, [pc, #360]	; (80054c4 <HAL_RCC_OscConfig+0x670>)
 800535a:	400a      	ands	r2, r1
 800535c:	651a      	str	r2, [r3, #80]	; 0x50
 800535e:	4b58      	ldr	r3, [pc, #352]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005360:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005362:	4b57      	ldr	r3, [pc, #348]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005364:	4959      	ldr	r1, [pc, #356]	; (80054cc <HAL_RCC_OscConfig+0x678>)
 8005366:	400a      	ands	r2, r1
 8005368:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d015      	beq.n	800539e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005372:	f7fe fd7f 	bl	8003e74 <HAL_GetTick>
 8005376:	0003      	movs	r3, r0
 8005378:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800537a:	e009      	b.n	8005390 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800537c:	f7fe fd7a 	bl	8003e74 <HAL_GetTick>
 8005380:	0002      	movs	r2, r0
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	4a52      	ldr	r2, [pc, #328]	; (80054d0 <HAL_RCC_OscConfig+0x67c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e11a      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005390:	4b4b      	ldr	r3, [pc, #300]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005392:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4013      	ands	r3, r2
 800539a:	d0ef      	beq.n	800537c <HAL_RCC_OscConfig+0x528>
 800539c:	e014      	b.n	80053c8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800539e:	f7fe fd69 	bl	8003e74 <HAL_GetTick>
 80053a2:	0003      	movs	r3, r0
 80053a4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053a6:	e009      	b.n	80053bc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a8:	f7fe fd64 	bl	8003e74 <HAL_GetTick>
 80053ac:	0002      	movs	r2, r0
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	4a47      	ldr	r2, [pc, #284]	; (80054d0 <HAL_RCC_OscConfig+0x67c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e104      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053bc:	4b40      	ldr	r3, [pc, #256]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80053be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053c0:	2380      	movs	r3, #128	; 0x80
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4013      	ands	r3, r2
 80053c6:	d1ef      	bne.n	80053a8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053c8:	2327      	movs	r3, #39	; 0x27
 80053ca:	18fb      	adds	r3, r7, r3
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d105      	bne.n	80053de <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d2:	4b3b      	ldr	r3, [pc, #236]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80053d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d6:	4b3a      	ldr	r3, [pc, #232]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80053d8:	493e      	ldr	r1, [pc, #248]	; (80054d4 <HAL_RCC_OscConfig+0x680>)
 80053da:	400a      	ands	r2, r1
 80053dc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2220      	movs	r2, #32
 80053e4:	4013      	ands	r3, r2
 80053e6:	d049      	beq.n	800547c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d026      	beq.n	800543e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80053f0:	4b33      	ldr	r3, [pc, #204]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	4b32      	ldr	r3, [pc, #200]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80053f6:	2101      	movs	r1, #1
 80053f8:	430a      	orrs	r2, r1
 80053fa:	609a      	str	r2, [r3, #8]
 80053fc:	4b30      	ldr	r3, [pc, #192]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80053fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005400:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005402:	2101      	movs	r1, #1
 8005404:	430a      	orrs	r2, r1
 8005406:	635a      	str	r2, [r3, #52]	; 0x34
 8005408:	4b33      	ldr	r3, [pc, #204]	; (80054d8 <HAL_RCC_OscConfig+0x684>)
 800540a:	6a1a      	ldr	r2, [r3, #32]
 800540c:	4b32      	ldr	r3, [pc, #200]	; (80054d8 <HAL_RCC_OscConfig+0x684>)
 800540e:	2180      	movs	r1, #128	; 0x80
 8005410:	0189      	lsls	r1, r1, #6
 8005412:	430a      	orrs	r2, r1
 8005414:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005416:	f7fe fd2d 	bl	8003e74 <HAL_GetTick>
 800541a:	0003      	movs	r3, r0
 800541c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005420:	f7fe fd28 	bl	8003e74 <HAL_GetTick>
 8005424:	0002      	movs	r2, r0
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e0c9      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005432:	4b23      	ldr	r3, [pc, #140]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	2202      	movs	r2, #2
 8005438:	4013      	ands	r3, r2
 800543a:	d0f1      	beq.n	8005420 <HAL_RCC_OscConfig+0x5cc>
 800543c:	e01e      	b.n	800547c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800543e:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	4b1f      	ldr	r3, [pc, #124]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005444:	2101      	movs	r1, #1
 8005446:	438a      	bics	r2, r1
 8005448:	609a      	str	r2, [r3, #8]
 800544a:	4b23      	ldr	r3, [pc, #140]	; (80054d8 <HAL_RCC_OscConfig+0x684>)
 800544c:	6a1a      	ldr	r2, [r3, #32]
 800544e:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <HAL_RCC_OscConfig+0x684>)
 8005450:	4922      	ldr	r1, [pc, #136]	; (80054dc <HAL_RCC_OscConfig+0x688>)
 8005452:	400a      	ands	r2, r1
 8005454:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005456:	f7fe fd0d 	bl	8003e74 <HAL_GetTick>
 800545a:	0003      	movs	r3, r0
 800545c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005460:	f7fe fd08 	bl	8003e74 <HAL_GetTick>
 8005464:	0002      	movs	r2, r0
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e0a9      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005472:	4b13      	ldr	r3, [pc, #76]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2202      	movs	r2, #2
 8005478:	4013      	ands	r3, r2
 800547a:	d1f1      	bne.n	8005460 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	2b00      	cmp	r3, #0
 8005482:	d100      	bne.n	8005486 <HAL_RCC_OscConfig+0x632>
 8005484:	e09e      	b.n	80055c4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	2b0c      	cmp	r3, #12
 800548a:	d100      	bne.n	800548e <HAL_RCC_OscConfig+0x63a>
 800548c:	e077      	b.n	800557e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	2b02      	cmp	r3, #2
 8005494:	d158      	bne.n	8005548 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005496:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 800549c:	4910      	ldr	r1, [pc, #64]	; (80054e0 <HAL_RCC_OscConfig+0x68c>)
 800549e:	400a      	ands	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a2:	f7fe fce7 	bl	8003e74 <HAL_GetTick>
 80054a6:	0003      	movs	r3, r0
 80054a8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80054aa:	e01b      	b.n	80054e4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ac:	f7fe fce2 	bl	8003e74 <HAL_GetTick>
 80054b0:	0002      	movs	r2, r0
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d914      	bls.n	80054e4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e083      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	40021000 	.word	0x40021000
 80054c4:	fffffeff 	.word	0xfffffeff
 80054c8:	40007000 	.word	0x40007000
 80054cc:	fffffbff 	.word	0xfffffbff
 80054d0:	00001388 	.word	0x00001388
 80054d4:	efffffff 	.word	0xefffffff
 80054d8:	40010000 	.word	0x40010000
 80054dc:	ffffdfff 	.word	0xffffdfff
 80054e0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80054e4:	4b3a      	ldr	r3, [pc, #232]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	049b      	lsls	r3, r3, #18
 80054ec:	4013      	ands	r3, r2
 80054ee:	d1dd      	bne.n	80054ac <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054f0:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4a37      	ldr	r2, [pc, #220]	; (80055d4 <HAL_RCC_OscConfig+0x780>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	0019      	movs	r1, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005508:	431a      	orrs	r2, r3
 800550a:	4b31      	ldr	r3, [pc, #196]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 800550c:	430a      	orrs	r2, r1
 800550e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005510:	4b2f      	ldr	r3, [pc, #188]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4b2e      	ldr	r3, [pc, #184]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 8005516:	2180      	movs	r1, #128	; 0x80
 8005518:	0449      	lsls	r1, r1, #17
 800551a:	430a      	orrs	r2, r1
 800551c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551e:	f7fe fca9 	bl	8003e74 <HAL_GetTick>
 8005522:	0003      	movs	r3, r0
 8005524:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005528:	f7fe fca4 	bl	8003e74 <HAL_GetTick>
 800552c:	0002      	movs	r2, r0
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e045      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800553a:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	2380      	movs	r3, #128	; 0x80
 8005540:	049b      	lsls	r3, r3, #18
 8005542:	4013      	ands	r3, r2
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0x6d4>
 8005546:	e03d      	b.n	80055c4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005548:	4b21      	ldr	r3, [pc, #132]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4b20      	ldr	r3, [pc, #128]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 800554e:	4922      	ldr	r1, [pc, #136]	; (80055d8 <HAL_RCC_OscConfig+0x784>)
 8005550:	400a      	ands	r2, r1
 8005552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005554:	f7fe fc8e 	bl	8003e74 <HAL_GetTick>
 8005558:	0003      	movs	r3, r0
 800555a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800555e:	f7fe fc89 	bl	8003e74 <HAL_GetTick>
 8005562:	0002      	movs	r2, r0
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e02a      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005570:	4b17      	ldr	r3, [pc, #92]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	049b      	lsls	r3, r3, #18
 8005578:	4013      	ands	r3, r2
 800557a:	d1f0      	bne.n	800555e <HAL_RCC_OscConfig+0x70a>
 800557c:	e022      	b.n	80055c4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e01d      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800558a:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	2380      	movs	r3, #128	; 0x80
 8005594:	025b      	lsls	r3, r3, #9
 8005596:	401a      	ands	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	429a      	cmp	r2, r3
 800559e:	d10f      	bne.n	80055c0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	23f0      	movs	r3, #240	; 0xf0
 80055a4:	039b      	lsls	r3, r3, #14
 80055a6:	401a      	ands	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d107      	bne.n	80055c0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	23c0      	movs	r3, #192	; 0xc0
 80055b4:	041b      	lsls	r3, r3, #16
 80055b6:	401a      	ands	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80055bc:	429a      	cmp	r2, r3
 80055be:	d001      	beq.n	80055c4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	0018      	movs	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	b00a      	add	sp, #40	; 0x28
 80055cc:	bdb0      	pop	{r4, r5, r7, pc}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	40021000 	.word	0x40021000
 80055d4:	ff02ffff 	.word	0xff02ffff
 80055d8:	feffffff 	.word	0xfeffffff

080055dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055dc:	b5b0      	push	{r4, r5, r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e128      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055f0:	4b96      	ldr	r3, [pc, #600]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2201      	movs	r2, #1
 80055f6:	4013      	ands	r3, r2
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d91e      	bls.n	800563c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fe:	4b93      	ldr	r3, [pc, #588]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2201      	movs	r2, #1
 8005604:	4393      	bics	r3, r2
 8005606:	0019      	movs	r1, r3
 8005608:	4b90      	ldr	r3, [pc, #576]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005610:	f7fe fc30 	bl	8003e74 <HAL_GetTick>
 8005614:	0003      	movs	r3, r0
 8005616:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005618:	e009      	b.n	800562e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800561a:	f7fe fc2b 	bl	8003e74 <HAL_GetTick>
 800561e:	0002      	movs	r2, r0
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	4a8a      	ldr	r2, [pc, #552]	; (8005850 <HAL_RCC_ClockConfig+0x274>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e109      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562e:	4b87      	ldr	r3, [pc, #540]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2201      	movs	r2, #1
 8005634:	4013      	ands	r3, r2
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d1ee      	bne.n	800561a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2202      	movs	r2, #2
 8005642:	4013      	ands	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005646:	4b83      	ldr	r3, [pc, #524]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	22f0      	movs	r2, #240	; 0xf0
 800564c:	4393      	bics	r3, r2
 800564e:	0019      	movs	r1, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	4b7f      	ldr	r3, [pc, #508]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005656:	430a      	orrs	r2, r1
 8005658:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2201      	movs	r2, #1
 8005660:	4013      	ands	r3, r2
 8005662:	d100      	bne.n	8005666 <HAL_RCC_ClockConfig+0x8a>
 8005664:	e089      	b.n	800577a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d107      	bne.n	800567e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800566e:	4b79      	ldr	r3, [pc, #484]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	2380      	movs	r3, #128	; 0x80
 8005674:	029b      	lsls	r3, r3, #10
 8005676:	4013      	ands	r3, r2
 8005678:	d120      	bne.n	80056bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e0e1      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b03      	cmp	r3, #3
 8005684:	d107      	bne.n	8005696 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005686:	4b73      	ldr	r3, [pc, #460]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	2380      	movs	r3, #128	; 0x80
 800568c:	049b      	lsls	r3, r3, #18
 800568e:	4013      	ands	r3, r2
 8005690:	d114      	bne.n	80056bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e0d5      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d106      	bne.n	80056ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800569e:	4b6d      	ldr	r3, [pc, #436]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2204      	movs	r2, #4
 80056a4:	4013      	ands	r3, r2
 80056a6:	d109      	bne.n	80056bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0ca      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80056ac:	4b69      	ldr	r3, [pc, #420]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	2380      	movs	r3, #128	; 0x80
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4013      	ands	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0c2      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056bc:	4b65      	ldr	r3, [pc, #404]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	2203      	movs	r2, #3
 80056c2:	4393      	bics	r3, r2
 80056c4:	0019      	movs	r1, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	4b62      	ldr	r3, [pc, #392]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80056cc:	430a      	orrs	r2, r1
 80056ce:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056d0:	f7fe fbd0 	bl	8003e74 <HAL_GetTick>
 80056d4:	0003      	movs	r3, r0
 80056d6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d111      	bne.n	8005704 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80056e0:	e009      	b.n	80056f6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056e2:	f7fe fbc7 	bl	8003e74 <HAL_GetTick>
 80056e6:	0002      	movs	r2, r0
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	4a58      	ldr	r2, [pc, #352]	; (8005850 <HAL_RCC_ClockConfig+0x274>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e0a5      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80056f6:	4b57      	ldr	r3, [pc, #348]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	220c      	movs	r2, #12
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b08      	cmp	r3, #8
 8005700:	d1ef      	bne.n	80056e2 <HAL_RCC_ClockConfig+0x106>
 8005702:	e03a      	b.n	800577a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b03      	cmp	r3, #3
 800570a:	d111      	bne.n	8005730 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800570c:	e009      	b.n	8005722 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800570e:	f7fe fbb1 	bl	8003e74 <HAL_GetTick>
 8005712:	0002      	movs	r2, r0
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	4a4d      	ldr	r2, [pc, #308]	; (8005850 <HAL_RCC_ClockConfig+0x274>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e08f      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005722:	4b4c      	ldr	r3, [pc, #304]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	220c      	movs	r2, #12
 8005728:	4013      	ands	r3, r2
 800572a:	2b0c      	cmp	r3, #12
 800572c:	d1ef      	bne.n	800570e <HAL_RCC_ClockConfig+0x132>
 800572e:	e024      	b.n	800577a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d11b      	bne.n	8005770 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005738:	e009      	b.n	800574e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800573a:	f7fe fb9b 	bl	8003e74 <HAL_GetTick>
 800573e:	0002      	movs	r2, r0
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	4a42      	ldr	r2, [pc, #264]	; (8005850 <HAL_RCC_ClockConfig+0x274>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e079      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800574e:	4b41      	ldr	r3, [pc, #260]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	220c      	movs	r2, #12
 8005754:	4013      	ands	r3, r2
 8005756:	2b04      	cmp	r3, #4
 8005758:	d1ef      	bne.n	800573a <HAL_RCC_ClockConfig+0x15e>
 800575a:	e00e      	b.n	800577a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800575c:	f7fe fb8a 	bl	8003e74 <HAL_GetTick>
 8005760:	0002      	movs	r2, r0
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	4a3a      	ldr	r2, [pc, #232]	; (8005850 <HAL_RCC_ClockConfig+0x274>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e068      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005770:	4b38      	ldr	r3, [pc, #224]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	220c      	movs	r2, #12
 8005776:	4013      	ands	r3, r2
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800577a:	4b34      	ldr	r3, [pc, #208]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2201      	movs	r2, #1
 8005780:	4013      	ands	r3, r2
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d21e      	bcs.n	80057c6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005788:	4b30      	ldr	r3, [pc, #192]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2201      	movs	r2, #1
 800578e:	4393      	bics	r3, r2
 8005790:	0019      	movs	r1, r3
 8005792:	4b2e      	ldr	r3, [pc, #184]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800579a:	f7fe fb6b 	bl	8003e74 <HAL_GetTick>
 800579e:	0003      	movs	r3, r0
 80057a0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a2:	e009      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a4:	f7fe fb66 	bl	8003e74 <HAL_GetTick>
 80057a8:	0002      	movs	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	4a28      	ldr	r2, [pc, #160]	; (8005850 <HAL_RCC_ClockConfig+0x274>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e044      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b8:	4b24      	ldr	r3, [pc, #144]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2201      	movs	r2, #1
 80057be:	4013      	ands	r3, r2
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d1ee      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2204      	movs	r2, #4
 80057cc:	4013      	ands	r3, r2
 80057ce:	d009      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057d0:	4b20      	ldr	r3, [pc, #128]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4a20      	ldr	r2, [pc, #128]	; (8005858 <HAL_RCC_ClockConfig+0x27c>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	0019      	movs	r1, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	4b1d      	ldr	r3, [pc, #116]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80057e0:	430a      	orrs	r2, r1
 80057e2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2208      	movs	r2, #8
 80057ea:	4013      	ands	r3, r2
 80057ec:	d00a      	beq.n	8005804 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057ee:	4b19      	ldr	r3, [pc, #100]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	4a1a      	ldr	r2, [pc, #104]	; (800585c <HAL_RCC_ClockConfig+0x280>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	0019      	movs	r1, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	00da      	lsls	r2, r3, #3
 80057fe:	4b15      	ldr	r3, [pc, #84]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005800:	430a      	orrs	r2, r1
 8005802:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005804:	f000 f832 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8005808:	0001      	movs	r1, r0
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	091b      	lsrs	r3, r3, #4
 8005810:	220f      	movs	r2, #15
 8005812:	4013      	ands	r3, r2
 8005814:	4a12      	ldr	r2, [pc, #72]	; (8005860 <HAL_RCC_ClockConfig+0x284>)
 8005816:	5cd3      	ldrb	r3, [r2, r3]
 8005818:	000a      	movs	r2, r1
 800581a:	40da      	lsrs	r2, r3
 800581c:	4b11      	ldr	r3, [pc, #68]	; (8005864 <HAL_RCC_ClockConfig+0x288>)
 800581e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005820:	4b11      	ldr	r3, [pc, #68]	; (8005868 <HAL_RCC_ClockConfig+0x28c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	250b      	movs	r5, #11
 8005826:	197c      	adds	r4, r7, r5
 8005828:	0018      	movs	r0, r3
 800582a:	f7fe fadd 	bl	8003de8 <HAL_InitTick>
 800582e:	0003      	movs	r3, r0
 8005830:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005832:	197b      	adds	r3, r7, r5
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800583a:	197b      	adds	r3, r7, r5
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	e000      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	0018      	movs	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	b004      	add	sp, #16
 8005848:	bdb0      	pop	{r4, r5, r7, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	40022000 	.word	0x40022000
 8005850:	00001388 	.word	0x00001388
 8005854:	40021000 	.word	0x40021000
 8005858:	fffff8ff 	.word	0xfffff8ff
 800585c:	ffffc7ff 	.word	0xffffc7ff
 8005860:	0800d1a4 	.word	0x0800d1a4
 8005864:	20000000 	.word	0x20000000
 8005868:	20000004 	.word	0x20000004

0800586c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800586c:	b5b0      	push	{r4, r5, r7, lr}
 800586e:	b08e      	sub	sp, #56	; 0x38
 8005870:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005872:	4b4c      	ldr	r3, [pc, #304]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800587a:	230c      	movs	r3, #12
 800587c:	4013      	ands	r3, r2
 800587e:	2b0c      	cmp	r3, #12
 8005880:	d014      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0x40>
 8005882:	d900      	bls.n	8005886 <HAL_RCC_GetSysClockFreq+0x1a>
 8005884:	e07b      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x112>
 8005886:	2b04      	cmp	r3, #4
 8005888:	d002      	beq.n	8005890 <HAL_RCC_GetSysClockFreq+0x24>
 800588a:	2b08      	cmp	r3, #8
 800588c:	d00b      	beq.n	80058a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800588e:	e076      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005890:	4b44      	ldr	r3, [pc, #272]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2210      	movs	r2, #16
 8005896:	4013      	ands	r3, r2
 8005898:	d002      	beq.n	80058a0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800589a:	4b43      	ldr	r3, [pc, #268]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800589c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800589e:	e07c      	b.n	800599a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80058a0:	4b42      	ldr	r3, [pc, #264]	; (80059ac <HAL_RCC_GetSysClockFreq+0x140>)
 80058a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058a4:	e079      	b.n	800599a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058a6:	4b42      	ldr	r3, [pc, #264]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x144>)
 80058a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058aa:	e076      	b.n	800599a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80058ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ae:	0c9a      	lsrs	r2, r3, #18
 80058b0:	230f      	movs	r3, #15
 80058b2:	401a      	ands	r2, r3
 80058b4:	4b3f      	ldr	r3, [pc, #252]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x148>)
 80058b6:	5c9b      	ldrb	r3, [r3, r2]
 80058b8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80058ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058bc:	0d9a      	lsrs	r2, r3, #22
 80058be:	2303      	movs	r3, #3
 80058c0:	4013      	ands	r3, r2
 80058c2:	3301      	adds	r3, #1
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058c6:	4b37      	ldr	r3, [pc, #220]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x138>)
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	2380      	movs	r3, #128	; 0x80
 80058cc:	025b      	lsls	r3, r3, #9
 80058ce:	4013      	ands	r3, r2
 80058d0:	d01a      	beq.n	8005908 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	2300      	movs	r3, #0
 80058d8:	61fb      	str	r3, [r7, #28]
 80058da:	4a35      	ldr	r2, [pc, #212]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x144>)
 80058dc:	2300      	movs	r3, #0
 80058de:	69b8      	ldr	r0, [r7, #24]
 80058e0:	69f9      	ldr	r1, [r7, #28]
 80058e2:	f7fa fe01 	bl	80004e8 <__aeabi_lmul>
 80058e6:	0002      	movs	r2, r0
 80058e8:	000b      	movs	r3, r1
 80058ea:	0010      	movs	r0, r2
 80058ec:	0019      	movs	r1, r3
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	2300      	movs	r3, #0
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f7fa fdd5 	bl	80004a8 <__aeabi_uldivmod>
 80058fe:	0002      	movs	r2, r0
 8005900:	000b      	movs	r3, r1
 8005902:	0013      	movs	r3, r2
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
 8005906:	e037      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005908:	4b26      	ldr	r3, [pc, #152]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2210      	movs	r2, #16
 800590e:	4013      	ands	r3, r2
 8005910:	d01a      	beq.n	8005948 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	4a23      	ldr	r2, [pc, #140]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800591c:	2300      	movs	r3, #0
 800591e:	68b8      	ldr	r0, [r7, #8]
 8005920:	68f9      	ldr	r1, [r7, #12]
 8005922:	f7fa fde1 	bl	80004e8 <__aeabi_lmul>
 8005926:	0002      	movs	r2, r0
 8005928:	000b      	movs	r3, r1
 800592a:	0010      	movs	r0, r2
 800592c:	0019      	movs	r1, r3
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	2300      	movs	r3, #0
 8005934:	607b      	str	r3, [r7, #4]
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f7fa fdb5 	bl	80004a8 <__aeabi_uldivmod>
 800593e:	0002      	movs	r2, r0
 8005940:	000b      	movs	r3, r1
 8005942:	0013      	movs	r3, r2
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
 8005946:	e017      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	0018      	movs	r0, r3
 800594c:	2300      	movs	r3, #0
 800594e:	0019      	movs	r1, r3
 8005950:	4a16      	ldr	r2, [pc, #88]	; (80059ac <HAL_RCC_GetSysClockFreq+0x140>)
 8005952:	2300      	movs	r3, #0
 8005954:	f7fa fdc8 	bl	80004e8 <__aeabi_lmul>
 8005958:	0002      	movs	r2, r0
 800595a:	000b      	movs	r3, r1
 800595c:	0010      	movs	r0, r2
 800595e:	0019      	movs	r1, r3
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	001c      	movs	r4, r3
 8005964:	2300      	movs	r3, #0
 8005966:	001d      	movs	r5, r3
 8005968:	0022      	movs	r2, r4
 800596a:	002b      	movs	r3, r5
 800596c:	f7fa fd9c 	bl	80004a8 <__aeabi_uldivmod>
 8005970:	0002      	movs	r2, r0
 8005972:	000b      	movs	r3, r1
 8005974:	0013      	movs	r3, r2
 8005976:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800597c:	e00d      	b.n	800599a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800597e:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	0b5b      	lsrs	r3, r3, #13
 8005984:	2207      	movs	r2, #7
 8005986:	4013      	ands	r3, r2
 8005988:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	3301      	adds	r3, #1
 800598e:	2280      	movs	r2, #128	; 0x80
 8005990:	0212      	lsls	r2, r2, #8
 8005992:	409a      	lsls	r2, r3
 8005994:	0013      	movs	r3, r2
 8005996:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005998:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800599c:	0018      	movs	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	b00e      	add	sp, #56	; 0x38
 80059a2:	bdb0      	pop	{r4, r5, r7, pc}
 80059a4:	40021000 	.word	0x40021000
 80059a8:	003d0900 	.word	0x003d0900
 80059ac:	00f42400 	.word	0x00f42400
 80059b0:	007a1200 	.word	0x007a1200
 80059b4:	0800d1bc 	.word	0x0800d1bc

080059b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059bc:	4b02      	ldr	r3, [pc, #8]	; (80059c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80059be:	681b      	ldr	r3, [r3, #0]
}
 80059c0:	0018      	movs	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	20000000 	.word	0x20000000

080059cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059d0:	f7ff fff2 	bl	80059b8 <HAL_RCC_GetHCLKFreq>
 80059d4:	0001      	movs	r1, r0
 80059d6:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	0a1b      	lsrs	r3, r3, #8
 80059dc:	2207      	movs	r2, #7
 80059de:	4013      	ands	r3, r2
 80059e0:	4a04      	ldr	r2, [pc, #16]	; (80059f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059e2:	5cd3      	ldrb	r3, [r2, r3]
 80059e4:	40d9      	lsrs	r1, r3
 80059e6:	000b      	movs	r3, r1
}
 80059e8:	0018      	movs	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	40021000 	.word	0x40021000
 80059f4:	0800d1b4 	.word	0x0800d1b4

080059f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059fc:	f7ff ffdc 	bl	80059b8 <HAL_RCC_GetHCLKFreq>
 8005a00:	0001      	movs	r1, r0
 8005a02:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	0adb      	lsrs	r3, r3, #11
 8005a08:	2207      	movs	r2, #7
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	4a04      	ldr	r2, [pc, #16]	; (8005a20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a0e:	5cd3      	ldrb	r3, [r2, r3]
 8005a10:	40d9      	lsrs	r1, r3
 8005a12:	000b      	movs	r3, r1
}
 8005a14:	0018      	movs	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	0800d1b4 	.word	0x0800d1b4

08005a24 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005a2c:	2317      	movs	r3, #23
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	2200      	movs	r2, #0
 8005a32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d106      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	2380      	movs	r3, #128	; 0x80
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	4013      	ands	r3, r2
 8005a48:	d100      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005a4a:	e104      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a4c:	4bb1      	ldr	r3, [pc, #708]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a50:	2380      	movs	r3, #128	; 0x80
 8005a52:	055b      	lsls	r3, r3, #21
 8005a54:	4013      	ands	r3, r2
 8005a56:	d10a      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a58:	4bae      	ldr	r3, [pc, #696]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a5c:	4bad      	ldr	r3, [pc, #692]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a5e:	2180      	movs	r1, #128	; 0x80
 8005a60:	0549      	lsls	r1, r1, #21
 8005a62:	430a      	orrs	r2, r1
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005a66:	2317      	movs	r3, #23
 8005a68:	18fb      	adds	r3, r7, r3
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6e:	4baa      	ldr	r3, [pc, #680]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	4013      	ands	r3, r2
 8005a78:	d11a      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a7a:	4ba7      	ldr	r3, [pc, #668]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4ba6      	ldr	r3, [pc, #664]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a80:	2180      	movs	r1, #128	; 0x80
 8005a82:	0049      	lsls	r1, r1, #1
 8005a84:	430a      	orrs	r2, r1
 8005a86:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a88:	f7fe f9f4 	bl	8003e74 <HAL_GetTick>
 8005a8c:	0003      	movs	r3, r0
 8005a8e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a90:	e008      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a92:	f7fe f9ef 	bl	8003e74 <HAL_GetTick>
 8005a96:	0002      	movs	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b64      	cmp	r3, #100	; 0x64
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e133      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa4:	4b9c      	ldr	r3, [pc, #624]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	2380      	movs	r3, #128	; 0x80
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	4013      	ands	r3, r2
 8005aae:	d0f0      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005ab0:	4b98      	ldr	r3, [pc, #608]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	23c0      	movs	r3, #192	; 0xc0
 8005ab6:	039b      	lsls	r3, r3, #14
 8005ab8:	4013      	ands	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	23c0      	movs	r3, #192	; 0xc0
 8005ac2:	039b      	lsls	r3, r3, #14
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d107      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	23c0      	movs	r3, #192	; 0xc0
 8005ad2:	039b      	lsls	r3, r3, #14
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d013      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	23c0      	movs	r3, #192	; 0xc0
 8005ae2:	029b      	lsls	r3, r3, #10
 8005ae4:	401a      	ands	r2, r3
 8005ae6:	23c0      	movs	r3, #192	; 0xc0
 8005ae8:	029b      	lsls	r3, r3, #10
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d10a      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005aee:	4b89      	ldr	r3, [pc, #548]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	029b      	lsls	r3, r3, #10
 8005af6:	401a      	ands	r2, r3
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	029b      	lsls	r3, r3, #10
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d101      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e103      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005b04:	4b83      	ldr	r3, [pc, #524]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b08:	23c0      	movs	r3, #192	; 0xc0
 8005b0a:	029b      	lsls	r3, r3, #10
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d049      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	23c0      	movs	r3, #192	; 0xc0
 8005b1c:	029b      	lsls	r3, r3, #10
 8005b1e:	4013      	ands	r3, r2
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d004      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d10d      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	23c0      	movs	r3, #192	; 0xc0
 8005b36:	029b      	lsls	r3, r3, #10
 8005b38:	4013      	ands	r3, r2
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d034      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d02e      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005b4c:	4b71      	ldr	r3, [pc, #452]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b50:	4a72      	ldr	r2, [pc, #456]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b56:	4b6f      	ldr	r3, [pc, #444]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b5a:	4b6e      	ldr	r3, [pc, #440]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b5c:	2180      	movs	r1, #128	; 0x80
 8005b5e:	0309      	lsls	r1, r1, #12
 8005b60:	430a      	orrs	r2, r1
 8005b62:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b64:	4b6b      	ldr	r3, [pc, #428]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b68:	4b6a      	ldr	r3, [pc, #424]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b6a:	496d      	ldr	r1, [pc, #436]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b6c:	400a      	ands	r2, r1
 8005b6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005b70:	4b68      	ldr	r3, [pc, #416]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d014      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b80:	f7fe f978 	bl	8003e74 <HAL_GetTick>
 8005b84:	0003      	movs	r3, r0
 8005b86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b88:	e009      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b8a:	f7fe f973 	bl	8003e74 <HAL_GetTick>
 8005b8e:	0002      	movs	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	4a63      	ldr	r2, [pc, #396]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e0b6      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b9e:	4b5d      	ldr	r3, [pc, #372]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ba2:	2380      	movs	r3, #128	; 0x80
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d0ef      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	2380      	movs	r3, #128	; 0x80
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d01f      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	23c0      	movs	r3, #192	; 0xc0
 8005bbc:	029b      	lsls	r3, r3, #10
 8005bbe:	401a      	ands	r2, r3
 8005bc0:	23c0      	movs	r3, #192	; 0xc0
 8005bc2:	029b      	lsls	r3, r3, #10
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d10c      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005bc8:	4b52      	ldr	r3, [pc, #328]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a56      	ldr	r2, [pc, #344]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	23c0      	movs	r3, #192	; 0xc0
 8005bd8:	039b      	lsls	r3, r3, #14
 8005bda:	401a      	ands	r2, r3
 8005bdc:	4b4d      	ldr	r3, [pc, #308]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bde:	430a      	orrs	r2, r1
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	4b4c      	ldr	r3, [pc, #304]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005be4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	23c0      	movs	r3, #192	; 0xc0
 8005bec:	029b      	lsls	r3, r3, #10
 8005bee:	401a      	ands	r2, r3
 8005bf0:	4b48      	ldr	r3, [pc, #288]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	d01f      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	23c0      	movs	r3, #192	; 0xc0
 8005c06:	029b      	lsls	r3, r3, #10
 8005c08:	401a      	ands	r2, r3
 8005c0a:	23c0      	movs	r3, #192	; 0xc0
 8005c0c:	029b      	lsls	r3, r3, #10
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d10c      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005c12:	4b40      	ldr	r3, [pc, #256]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a44      	ldr	r2, [pc, #272]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	0019      	movs	r1, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	23c0      	movs	r3, #192	; 0xc0
 8005c22:	039b      	lsls	r3, r3, #14
 8005c24:	401a      	ands	r2, r3
 8005c26:	4b3b      	ldr	r3, [pc, #236]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	4b39      	ldr	r3, [pc, #228]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c2e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	23c0      	movs	r3, #192	; 0xc0
 8005c36:	029b      	lsls	r3, r3, #10
 8005c38:	401a      	ands	r2, r3
 8005c3a:	4b36      	ldr	r3, [pc, #216]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c40:	2317      	movs	r3, #23
 8005c42:	18fb      	adds	r3, r7, r3
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d105      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c4a:	4b32      	ldr	r3, [pc, #200]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c4e:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c50:	4936      	ldr	r1, [pc, #216]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c52:	400a      	ands	r2, r1
 8005c54:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d009      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c60:	4b2c      	ldr	r3, [pc, #176]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c64:	2203      	movs	r2, #3
 8005c66:	4393      	bics	r3, r2
 8005c68:	0019      	movs	r1, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	4b29      	ldr	r3, [pc, #164]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c70:	430a      	orrs	r2, r1
 8005c72:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c7e:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c82:	220c      	movs	r2, #12
 8005c84:	4393      	bics	r3, r2
 8005c86:	0019      	movs	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	4b21      	ldr	r3, [pc, #132]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2204      	movs	r2, #4
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d009      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c9c:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca0:	4a23      	ldr	r2, [pc, #140]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	0019      	movs	r1, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695a      	ldr	r2, [r3, #20]
 8005caa:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cac:	430a      	orrs	r2, r1
 8005cae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2208      	movs	r2, #8
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	d009      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cba:	4b16      	ldr	r3, [pc, #88]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cbe:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	0019      	movs	r1, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699a      	ldr	r2, [r3, #24]
 8005cc8:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2240      	movs	r2, #64	; 0x40
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	d009      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cd8:	4b0e      	ldr	r3, [pc, #56]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cdc:	4a16      	ldr	r2, [pc, #88]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	0019      	movs	r1, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1a      	ldr	r2, [r3, #32]
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2280      	movs	r2, #128	; 0x80
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	d009      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005cf6:	4b07      	ldr	r3, [pc, #28]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfa:	4a10      	ldr	r2, [pc, #64]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	0019      	movs	r1, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	4b03      	ldr	r3, [pc, #12]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d06:	430a      	orrs	r2, r1
 8005d08:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	b006      	add	sp, #24
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	40021000 	.word	0x40021000
 8005d18:	40007000 	.word	0x40007000
 8005d1c:	fffcffff 	.word	0xfffcffff
 8005d20:	fff7ffff 	.word	0xfff7ffff
 8005d24:	00001388 	.word	0x00001388
 8005d28:	ffcfffff 	.word	0xffcfffff
 8005d2c:	efffffff 	.word	0xefffffff
 8005d30:	fffff3ff 	.word	0xfffff3ff
 8005d34:	ffffcfff 	.word	0xffffcfff
 8005d38:	fbffffff 	.word	0xfbffffff
 8005d3c:	fff3ffff 	.word	0xfff3ffff

08005d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e083      	b.n	8005e5a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	2382      	movs	r3, #130	; 0x82
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d009      	beq.n	8005d7a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	61da      	str	r2, [r3, #28]
 8005d6c:	e005      	b.n	8005d7a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2251      	movs	r2, #81	; 0x51
 8005d84:	5c9b      	ldrb	r3, [r3, r2]
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d107      	bne.n	8005d9c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2250      	movs	r2, #80	; 0x50
 8005d90:	2100      	movs	r1, #0
 8005d92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	0018      	movs	r0, r3
 8005d98:	f7fd fc86 	bl	80036a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2251      	movs	r2, #81	; 0x51
 8005da0:	2102      	movs	r1, #2
 8005da2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2140      	movs	r1, #64	; 0x40
 8005db0:	438a      	bics	r2, r1
 8005db2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	2382      	movs	r3, #130	; 0x82
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	401a      	ands	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6899      	ldr	r1, [r3, #8]
 8005dc2:	2384      	movs	r3, #132	; 0x84
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	400b      	ands	r3, r1
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68d9      	ldr	r1, [r3, #12]
 8005dce:	2380      	movs	r3, #128	; 0x80
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	400b      	ands	r3, r1
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	2102      	movs	r1, #2
 8005ddc:	400b      	ands	r3, r1
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	2101      	movs	r1, #1
 8005de6:	400b      	ands	r3, r1
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6999      	ldr	r1, [r3, #24]
 8005dee:	2380      	movs	r3, #128	; 0x80
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	400b      	ands	r3, r1
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	2138      	movs	r1, #56	; 0x38
 8005dfc:	400b      	ands	r3, r1
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	2180      	movs	r1, #128	; 0x80
 8005e06:	400b      	ands	r3, r1
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	0011      	movs	r1, r2
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e10:	2380      	movs	r3, #128	; 0x80
 8005e12:	019b      	lsls	r3, r3, #6
 8005e14:	401a      	ands	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	0c1b      	lsrs	r3, r3, #16
 8005e24:	2204      	movs	r2, #4
 8005e26:	4013      	ands	r3, r2
 8005e28:	0019      	movs	r1, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	2210      	movs	r2, #16
 8005e30:	401a      	ands	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4907      	ldr	r1, [pc, #28]	; (8005e64 <HAL_SPI_Init+0x124>)
 8005e46:	400a      	ands	r2, r1
 8005e48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2251      	movs	r2, #81	; 0x51
 8005e54:	2101      	movs	r1, #1
 8005e56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b002      	add	sp, #8
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	fffff7ff 	.word	0xfffff7ff

08005e68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	1dbb      	adds	r3, r7, #6
 8005e76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e78:	231f      	movs	r3, #31
 8005e7a:	18fb      	adds	r3, r7, r3
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2250      	movs	r2, #80	; 0x50
 8005e84:	5c9b      	ldrb	r3, [r3, r2]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_SPI_Transmit+0x26>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e145      	b.n	800611a <HAL_SPI_Transmit+0x2b2>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2250      	movs	r2, #80	; 0x50
 8005e92:	2101      	movs	r1, #1
 8005e94:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e96:	f7fd ffed 	bl	8003e74 <HAL_GetTick>
 8005e9a:	0003      	movs	r3, r0
 8005e9c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005e9e:	2316      	movs	r3, #22
 8005ea0:	18fb      	adds	r3, r7, r3
 8005ea2:	1dba      	adds	r2, r7, #6
 8005ea4:	8812      	ldrh	r2, [r2, #0]
 8005ea6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2251      	movs	r2, #81	; 0x51
 8005eac:	5c9b      	ldrb	r3, [r3, r2]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d004      	beq.n	8005ebe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005eb4:	231f      	movs	r3, #31
 8005eb6:	18fb      	adds	r3, r7, r3
 8005eb8:	2202      	movs	r2, #2
 8005eba:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ebc:	e126      	b.n	800610c <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <HAL_SPI_Transmit+0x64>
 8005ec4:	1dbb      	adds	r3, r7, #6
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d104      	bne.n	8005ed6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005ecc:	231f      	movs	r3, #31
 8005ece:	18fb      	adds	r3, r7, r3
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ed4:	e11a      	b.n	800610c <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2251      	movs	r2, #81	; 0x51
 8005eda:	2103      	movs	r1, #3
 8005edc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	1dba      	adds	r2, r7, #6
 8005eee:	8812      	ldrh	r2, [r2, #0]
 8005ef0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	1dba      	adds	r2, r7, #6
 8005ef6:	8812      	ldrh	r2, [r2, #0]
 8005ef8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	021b      	lsls	r3, r3, #8
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d110      	bne.n	8005f46 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2140      	movs	r1, #64	; 0x40
 8005f30:	438a      	bics	r2, r1
 8005f32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2180      	movs	r1, #128	; 0x80
 8005f40:	01c9      	lsls	r1, r1, #7
 8005f42:	430a      	orrs	r2, r1
 8005f44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2240      	movs	r2, #64	; 0x40
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2b40      	cmp	r3, #64	; 0x40
 8005f52:	d007      	beq.n	8005f64 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2140      	movs	r1, #64	; 0x40
 8005f60:	430a      	orrs	r2, r1
 8005f62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	2380      	movs	r3, #128	; 0x80
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d152      	bne.n	8006016 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d004      	beq.n	8005f82 <HAL_SPI_Transmit+0x11a>
 8005f78:	2316      	movs	r3, #22
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d143      	bne.n	800600a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f86:	881a      	ldrh	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f92:	1c9a      	adds	r2, r3, #2
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fa6:	e030      	b.n	800600a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d112      	bne.n	8005fdc <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fba:	881a      	ldrh	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	1c9a      	adds	r2, r3, #2
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fda:	e016      	b.n	800600a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fdc:	f7fd ff4a 	bl	8003e74 <HAL_GetTick>
 8005fe0:	0002      	movs	r2, r0
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d802      	bhi.n	8005ff2 <HAL_SPI_Transmit+0x18a>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	d102      	bne.n	8005ff8 <HAL_SPI_Transmit+0x190>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d108      	bne.n	800600a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8005ff8:	231f      	movs	r3, #31
 8005ffa:	18fb      	adds	r3, r7, r3
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2251      	movs	r2, #81	; 0x51
 8006004:	2101      	movs	r1, #1
 8006006:	5499      	strb	r1, [r3, r2]
          goto error;
 8006008:	e080      	b.n	800610c <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1c9      	bne.n	8005fa8 <HAL_SPI_Transmit+0x140>
 8006014:	e053      	b.n	80060be <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d004      	beq.n	8006028 <HAL_SPI_Transmit+0x1c0>
 800601e:	2316      	movs	r3, #22
 8006020:	18fb      	adds	r3, r7, r3
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d145      	bne.n	80060b4 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	7812      	ldrb	r2, [r2, #0]
 8006034:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800604e:	e031      	b.n	80060b4 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2202      	movs	r2, #2
 8006058:	4013      	ands	r3, r2
 800605a:	2b02      	cmp	r3, #2
 800605c:	d113      	bne.n	8006086 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	330c      	adds	r3, #12
 8006068:	7812      	ldrb	r2, [r2, #0]
 800606a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	86da      	strh	r2, [r3, #54]	; 0x36
 8006084:	e016      	b.n	80060b4 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006086:	f7fd fef5 	bl	8003e74 <HAL_GetTick>
 800608a:	0002      	movs	r2, r0
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d802      	bhi.n	800609c <HAL_SPI_Transmit+0x234>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	3301      	adds	r3, #1
 800609a:	d102      	bne.n	80060a2 <HAL_SPI_Transmit+0x23a>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d108      	bne.n	80060b4 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 80060a2:	231f      	movs	r3, #31
 80060a4:	18fb      	adds	r3, r7, r3
 80060a6:	2203      	movs	r2, #3
 80060a8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2251      	movs	r2, #81	; 0x51
 80060ae:	2101      	movs	r1, #1
 80060b0:	5499      	strb	r1, [r3, r2]
          goto error;
 80060b2:	e02b      	b.n	800610c <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1c8      	bne.n	8006050 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	0018      	movs	r0, r3
 80060c6:	f000 fc1f 	bl	8006908 <SPI_EndRxTxTransaction>
 80060ca:	1e03      	subs	r3, r0, #0
 80060cc:	d002      	beq.n	80060d4 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10a      	bne.n	80060f2 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	613b      	str	r3, [r7, #16]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80060fa:	231f      	movs	r3, #31
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	2201      	movs	r2, #1
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	e003      	b.n	800610c <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2251      	movs	r2, #81	; 0x51
 8006108:	2101      	movs	r1, #1
 800610a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2250      	movs	r2, #80	; 0x50
 8006110:	2100      	movs	r1, #0
 8006112:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006114:	231f      	movs	r3, #31
 8006116:	18fb      	adds	r3, r7, r3
 8006118:	781b      	ldrb	r3, [r3, #0]
}
 800611a:	0018      	movs	r0, r3
 800611c:	46bd      	mov	sp, r7
 800611e:	b008      	add	sp, #32
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	b089      	sub	sp, #36	; 0x24
 8006128:	af02      	add	r7, sp, #8
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	1dbb      	adds	r3, r7, #6
 8006132:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006134:	2117      	movs	r1, #23
 8006136:	187b      	adds	r3, r7, r1
 8006138:	2200      	movs	r2, #0
 800613a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2251      	movs	r2, #81	; 0x51
 8006140:	5c9b      	ldrb	r3, [r3, r2]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d003      	beq.n	8006150 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8006148:	187b      	adds	r3, r7, r1
 800614a:	2202      	movs	r2, #2
 800614c:	701a      	strb	r2, [r3, #0]
    goto error;
 800614e:	e109      	b.n	8006364 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	2382      	movs	r3, #130	; 0x82
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	429a      	cmp	r2, r3
 800615a:	d113      	bne.n	8006184 <HAL_SPI_Receive+0x60>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10f      	bne.n	8006184 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2251      	movs	r2, #81	; 0x51
 8006168:	2104      	movs	r1, #4
 800616a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800616c:	1dbb      	adds	r3, r7, #6
 800616e:	881c      	ldrh	r4, [r3, #0]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	0023      	movs	r3, r4
 800617c:	f000 f900 	bl	8006380 <HAL_SPI_TransmitReceive>
 8006180:	0003      	movs	r3, r0
 8006182:	e0f6      	b.n	8006372 <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2250      	movs	r2, #80	; 0x50
 8006188:	5c9b      	ldrb	r3, [r3, r2]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <HAL_SPI_Receive+0x6e>
 800618e:	2302      	movs	r3, #2
 8006190:	e0ef      	b.n	8006372 <HAL_SPI_Receive+0x24e>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2250      	movs	r2, #80	; 0x50
 8006196:	2101      	movs	r1, #1
 8006198:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800619a:	f7fd fe6b 	bl	8003e74 <HAL_GetTick>
 800619e:	0003      	movs	r3, r0
 80061a0:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <HAL_SPI_Receive+0x8c>
 80061a8:	1dbb      	adds	r3, r7, #6
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80061b0:	2317      	movs	r3, #23
 80061b2:	18fb      	adds	r3, r7, r3
 80061b4:	2201      	movs	r2, #1
 80061b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80061b8:	e0d4      	b.n	8006364 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2251      	movs	r2, #81	; 0x51
 80061be:	2104      	movs	r1, #4
 80061c0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1dba      	adds	r2, r7, #6
 80061d2:	8812      	ldrh	r2, [r2, #0]
 80061d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	1dba      	adds	r2, r7, #6
 80061da:	8812      	ldrh	r2, [r2, #0]
 80061dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	429a      	cmp	r2, r3
 8006206:	d10f      	bne.n	8006228 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2140      	movs	r1, #64	; 0x40
 8006214:	438a      	bics	r2, r1
 8006216:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4956      	ldr	r1, [pc, #344]	; (800637c <HAL_SPI_Receive+0x258>)
 8006224:	400a      	ands	r2, r1
 8006226:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2240      	movs	r2, #64	; 0x40
 8006230:	4013      	ands	r3, r2
 8006232:	2b40      	cmp	r3, #64	; 0x40
 8006234:	d007      	beq.n	8006246 <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2140      	movs	r1, #64	; 0x40
 8006242:	430a      	orrs	r2, r1
 8006244:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d000      	beq.n	8006250 <HAL_SPI_Receive+0x12c>
 800624e:	e06c      	b.n	800632a <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006250:	e033      	b.n	80062ba <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	2201      	movs	r2, #1
 800625a:	4013      	ands	r3, r2
 800625c:	2b01      	cmp	r3, #1
 800625e:	d115      	bne.n	800628c <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	330c      	adds	r3, #12
 8006266:	001a      	movs	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	7812      	ldrb	r2, [r2, #0]
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006280:	b29b      	uxth	r3, r3
 8006282:	3b01      	subs	r3, #1
 8006284:	b29a      	uxth	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	87da      	strh	r2, [r3, #62]	; 0x3e
 800628a:	e016      	b.n	80062ba <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800628c:	f7fd fdf2 	bl	8003e74 <HAL_GetTick>
 8006290:	0002      	movs	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d802      	bhi.n	80062a2 <HAL_SPI_Receive+0x17e>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	3301      	adds	r3, #1
 80062a0:	d102      	bne.n	80062a8 <HAL_SPI_Receive+0x184>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d108      	bne.n	80062ba <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 80062a8:	2317      	movs	r3, #23
 80062aa:	18fb      	adds	r3, r7, r3
 80062ac:	2203      	movs	r2, #3
 80062ae:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2251      	movs	r2, #81	; 0x51
 80062b4:	2101      	movs	r1, #1
 80062b6:	5499      	strb	r1, [r3, r2]
          goto error;
 80062b8:	e054      	b.n	8006364 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1c6      	bne.n	8006252 <HAL_SPI_Receive+0x12e>
 80062c4:	e036      	b.n	8006334 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	2201      	movs	r2, #1
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d113      	bne.n	80062fc <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062de:	b292      	uxth	r2, r2
 80062e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	1c9a      	adds	r2, r3, #2
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062fa:	e016      	b.n	800632a <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062fc:	f7fd fdba 	bl	8003e74 <HAL_GetTick>
 8006300:	0002      	movs	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d802      	bhi.n	8006312 <HAL_SPI_Receive+0x1ee>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	3301      	adds	r3, #1
 8006310:	d102      	bne.n	8006318 <HAL_SPI_Receive+0x1f4>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d108      	bne.n	800632a <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8006318:	2317      	movs	r3, #23
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	2203      	movs	r2, #3
 800631e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2251      	movs	r2, #81	; 0x51
 8006324:	2101      	movs	r1, #1
 8006326:	5499      	strb	r1, [r3, r2]
          goto error;
 8006328:	e01c      	b.n	8006364 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1c8      	bne.n	80062c6 <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	0018      	movs	r0, r3
 800633c:	f000 fa7a 	bl	8006834 <SPI_EndRxTransaction>
 8006340:	1e03      	subs	r3, r0, #0
 8006342:	d002      	beq.n	800634a <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634e:	2b00      	cmp	r3, #0
 8006350:	d004      	beq.n	800635c <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8006352:	2317      	movs	r3, #23
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	2201      	movs	r2, #1
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	e003      	b.n	8006364 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2251      	movs	r2, #81	; 0x51
 8006360:	2101      	movs	r1, #1
 8006362:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2250      	movs	r2, #80	; 0x50
 8006368:	2100      	movs	r1, #0
 800636a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800636c:	2317      	movs	r3, #23
 800636e:	18fb      	adds	r3, r7, r3
 8006370:	781b      	ldrb	r3, [r3, #0]
}
 8006372:	0018      	movs	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	b007      	add	sp, #28
 8006378:	bd90      	pop	{r4, r7, pc}
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	ffffbfff 	.word	0xffffbfff

08006380 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08c      	sub	sp, #48	; 0x30
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	001a      	movs	r2, r3
 800638e:	1cbb      	adds	r3, r7, #2
 8006390:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006392:	2301      	movs	r3, #1
 8006394:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006396:	232b      	movs	r3, #43	; 0x2b
 8006398:	18fb      	adds	r3, r7, r3
 800639a:	2200      	movs	r2, #0
 800639c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2250      	movs	r2, #80	; 0x50
 80063a2:	5c9b      	ldrb	r3, [r3, r2]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_SPI_TransmitReceive+0x2c>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e1b0      	b.n	800670e <HAL_SPI_TransmitReceive+0x38e>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2250      	movs	r2, #80	; 0x50
 80063b0:	2101      	movs	r1, #1
 80063b2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063b4:	f7fd fd5e 	bl	8003e74 <HAL_GetTick>
 80063b8:	0003      	movs	r3, r0
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063bc:	2023      	movs	r0, #35	; 0x23
 80063be:	183b      	adds	r3, r7, r0
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	2151      	movs	r1, #81	; 0x51
 80063c4:	5c52      	ldrb	r2, [r2, r1]
 80063c6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80063ce:	231a      	movs	r3, #26
 80063d0:	18fb      	adds	r3, r7, r3
 80063d2:	1cba      	adds	r2, r7, #2
 80063d4:	8812      	ldrh	r2, [r2, #0]
 80063d6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063d8:	183b      	adds	r3, r7, r0
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d011      	beq.n	8006404 <HAL_SPI_TransmitReceive+0x84>
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	2382      	movs	r3, #130	; 0x82
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d107      	bne.n	80063fa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d103      	bne.n	80063fa <HAL_SPI_TransmitReceive+0x7a>
 80063f2:	183b      	adds	r3, r7, r0
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d004      	beq.n	8006404 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80063fa:	232b      	movs	r3, #43	; 0x2b
 80063fc:	18fb      	adds	r3, r7, r3
 80063fe:	2202      	movs	r2, #2
 8006400:	701a      	strb	r2, [r3, #0]
    goto error;
 8006402:	e17d      	b.n	8006700 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d006      	beq.n	8006418 <HAL_SPI_TransmitReceive+0x98>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <HAL_SPI_TransmitReceive+0x98>
 8006410:	1cbb      	adds	r3, r7, #2
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006418:	232b      	movs	r3, #43	; 0x2b
 800641a:	18fb      	adds	r3, r7, r3
 800641c:	2201      	movs	r2, #1
 800641e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006420:	e16e      	b.n	8006700 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2251      	movs	r2, #81	; 0x51
 8006426:	5c9b      	ldrb	r3, [r3, r2]
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b04      	cmp	r3, #4
 800642c:	d003      	beq.n	8006436 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2251      	movs	r2, #81	; 0x51
 8006432:	2105      	movs	r1, #5
 8006434:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	1cba      	adds	r2, r7, #2
 8006446:	8812      	ldrh	r2, [r2, #0]
 8006448:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	1cba      	adds	r2, r7, #2
 800644e:	8812      	ldrh	r2, [r2, #0]
 8006450:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	1cba      	adds	r2, r7, #2
 800645c:	8812      	ldrh	r2, [r2, #0]
 800645e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	1cba      	adds	r2, r7, #2
 8006464:	8812      	ldrh	r2, [r2, #0]
 8006466:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2240      	movs	r2, #64	; 0x40
 800647c:	4013      	ands	r3, r2
 800647e:	2b40      	cmp	r3, #64	; 0x40
 8006480:	d007      	beq.n	8006492 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2140      	movs	r1, #64	; 0x40
 800648e:	430a      	orrs	r2, r1
 8006490:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	2380      	movs	r3, #128	; 0x80
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	429a      	cmp	r2, r3
 800649c:	d000      	beq.n	80064a0 <HAL_SPI_TransmitReceive+0x120>
 800649e:	e07f      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <HAL_SPI_TransmitReceive+0x134>
 80064a8:	231a      	movs	r3, #26
 80064aa:	18fb      	adds	r3, r7, r3
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d000      	beq.n	80064b4 <HAL_SPI_TransmitReceive+0x134>
 80064b2:	e06a      	b.n	800658a <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b8:	881a      	ldrh	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	1c9a      	adds	r2, r3, #2
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064d8:	e057      	b.n	800658a <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	2202      	movs	r2, #2
 80064e2:	4013      	ands	r3, r2
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d11b      	bne.n	8006520 <HAL_SPI_TransmitReceive+0x1a0>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d016      	beq.n	8006520 <HAL_SPI_TransmitReceive+0x1a0>
 80064f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d113      	bne.n	8006520 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fc:	881a      	ldrh	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006508:	1c9a      	adds	r2, r3, #2
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2201      	movs	r2, #1
 8006528:	4013      	ands	r3, r2
 800652a:	2b01      	cmp	r3, #1
 800652c:	d119      	bne.n	8006562 <HAL_SPI_TransmitReceive+0x1e2>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006532:	b29b      	uxth	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d014      	beq.n	8006562 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	b292      	uxth	r2, r2
 8006544:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654a:	1c9a      	adds	r2, r3, #2
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006554:	b29b      	uxth	r3, r3
 8006556:	3b01      	subs	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800655e:	2301      	movs	r3, #1
 8006560:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006562:	f7fd fc87 	bl	8003e74 <HAL_GetTick>
 8006566:	0002      	movs	r2, r0
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800656e:	429a      	cmp	r2, r3
 8006570:	d80b      	bhi.n	800658a <HAL_SPI_TransmitReceive+0x20a>
 8006572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006574:	3301      	adds	r3, #1
 8006576:	d008      	beq.n	800658a <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8006578:	232b      	movs	r3, #43	; 0x2b
 800657a:	18fb      	adds	r3, r7, r3
 800657c:	2203      	movs	r2, #3
 800657e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2251      	movs	r2, #81	; 0x51
 8006584:	2101      	movs	r1, #1
 8006586:	5499      	strb	r1, [r3, r2]
        goto error;
 8006588:	e0ba      	b.n	8006700 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800658e:	b29b      	uxth	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1a2      	bne.n	80064da <HAL_SPI_TransmitReceive+0x15a>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d19d      	bne.n	80064da <HAL_SPI_TransmitReceive+0x15a>
 800659e:	e083      	b.n	80066a8 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HAL_SPI_TransmitReceive+0x234>
 80065a8:	231a      	movs	r3, #26
 80065aa:	18fb      	adds	r3, r7, r3
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d000      	beq.n	80065b4 <HAL_SPI_TransmitReceive+0x234>
 80065b2:	e06f      	b.n	8006694 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	330c      	adds	r3, #12
 80065be:	7812      	ldrb	r2, [r2, #0]
 80065c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065da:	e05b      	b.n	8006694 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	2202      	movs	r2, #2
 80065e4:	4013      	ands	r3, r2
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d11c      	bne.n	8006624 <HAL_SPI_TransmitReceive+0x2a4>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d017      	beq.n	8006624 <HAL_SPI_TransmitReceive+0x2a4>
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d114      	bne.n	8006624 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	7812      	ldrb	r2, [r2, #0]
 8006606:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2201      	movs	r2, #1
 800662c:	4013      	ands	r3, r2
 800662e:	2b01      	cmp	r3, #1
 8006630:	d119      	bne.n	8006666 <HAL_SPI_TransmitReceive+0x2e6>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d014      	beq.n	8006666 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006662:	2301      	movs	r3, #1
 8006664:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006666:	f7fd fc05 	bl	8003e74 <HAL_GetTick>
 800666a:	0002      	movs	r2, r0
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006672:	429a      	cmp	r2, r3
 8006674:	d802      	bhi.n	800667c <HAL_SPI_TransmitReceive+0x2fc>
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	3301      	adds	r3, #1
 800667a:	d102      	bne.n	8006682 <HAL_SPI_TransmitReceive+0x302>
 800667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667e:	2b00      	cmp	r3, #0
 8006680:	d108      	bne.n	8006694 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8006682:	232b      	movs	r3, #43	; 0x2b
 8006684:	18fb      	adds	r3, r7, r3
 8006686:	2203      	movs	r2, #3
 8006688:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2251      	movs	r2, #81	; 0x51
 800668e:	2101      	movs	r1, #1
 8006690:	5499      	strb	r1, [r3, r2]
        goto error;
 8006692:	e035      	b.n	8006700 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d19e      	bne.n	80065dc <HAL_SPI_TransmitReceive+0x25c>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d199      	bne.n	80065dc <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	0018      	movs	r0, r3
 80066b0:	f000 f92a 	bl	8006908 <SPI_EndRxTxTransaction>
 80066b4:	1e03      	subs	r3, r0, #0
 80066b6:	d007      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 80066b8:	232b      	movs	r3, #43	; 0x2b
 80066ba:	18fb      	adds	r3, r7, r3
 80066bc:	2201      	movs	r2, #1
 80066be:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2220      	movs	r2, #32
 80066c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80066c6:	e01b      	b.n	8006700 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066d0:	2300      	movs	r3, #0
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80066ee:	232b      	movs	r3, #43	; 0x2b
 80066f0:	18fb      	adds	r3, r7, r3
 80066f2:	2201      	movs	r2, #1
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	e003      	b.n	8006700 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2251      	movs	r2, #81	; 0x51
 80066fc:	2101      	movs	r1, #1
 80066fe:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2250      	movs	r2, #80	; 0x50
 8006704:	2100      	movs	r1, #0
 8006706:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006708:	232b      	movs	r3, #43	; 0x2b
 800670a:	18fb      	adds	r3, r7, r3
 800670c:	781b      	ldrb	r3, [r3, #0]
}
 800670e:	0018      	movs	r0, r3
 8006710:	46bd      	mov	sp, r7
 8006712:	b00c      	add	sp, #48	; 0x30
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	1dfb      	adds	r3, r7, #7
 8006726:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006728:	f7fd fba4 	bl	8003e74 <HAL_GetTick>
 800672c:	0002      	movs	r2, r0
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	1a9b      	subs	r3, r3, r2
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	18d3      	adds	r3, r2, r3
 8006736:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006738:	f7fd fb9c 	bl	8003e74 <HAL_GetTick>
 800673c:	0003      	movs	r3, r0
 800673e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006740:	4b3a      	ldr	r3, [pc, #232]	; (800682c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	015b      	lsls	r3, r3, #5
 8006746:	0d1b      	lsrs	r3, r3, #20
 8006748:	69fa      	ldr	r2, [r7, #28]
 800674a:	4353      	muls	r3, r2
 800674c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800674e:	e058      	b.n	8006802 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	d055      	beq.n	8006802 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006756:	f7fd fb8d 	bl	8003e74 <HAL_GetTick>
 800675a:	0002      	movs	r2, r0
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	429a      	cmp	r2, r3
 8006764:	d902      	bls.n	800676c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d142      	bne.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	21e0      	movs	r1, #224	; 0xe0
 8006778:	438a      	bics	r2, r1
 800677a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	2382      	movs	r3, #130	; 0x82
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	429a      	cmp	r2, r3
 8006786:	d113      	bne.n	80067b0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	2380      	movs	r3, #128	; 0x80
 800678e:	021b      	lsls	r3, r3, #8
 8006790:	429a      	cmp	r2, r3
 8006792:	d005      	beq.n	80067a0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	2380      	movs	r3, #128	; 0x80
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	429a      	cmp	r2, r3
 800679e:	d107      	bne.n	80067b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2140      	movs	r1, #64	; 0x40
 80067ac:	438a      	bics	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067b4:	2380      	movs	r3, #128	; 0x80
 80067b6:	019b      	lsls	r3, r3, #6
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d110      	bne.n	80067de <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	491a      	ldr	r1, [pc, #104]	; (8006830 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80067c8:	400a      	ands	r2, r1
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2180      	movs	r1, #128	; 0x80
 80067d8:	0189      	lsls	r1, r1, #6
 80067da:	430a      	orrs	r2, r1
 80067dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2251      	movs	r2, #81	; 0x51
 80067e2:	2101      	movs	r1, #1
 80067e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2250      	movs	r2, #80	; 0x50
 80067ea:	2100      	movs	r1, #0
 80067ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e017      	b.n	8006822 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	3b01      	subs	r3, #1
 8006800:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	4013      	ands	r3, r2
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	425a      	negs	r2, r3
 8006812:	4153      	adcs	r3, r2
 8006814:	b2db      	uxtb	r3, r3
 8006816:	001a      	movs	r2, r3
 8006818:	1dfb      	adds	r3, r7, #7
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d197      	bne.n	8006750 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	0018      	movs	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	b008      	add	sp, #32
 8006828:	bd80      	pop	{r7, pc}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	20000000 	.word	0x20000000
 8006830:	ffffdfff 	.word	0xffffdfff

08006834 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af02      	add	r7, sp, #8
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	2382      	movs	r3, #130	; 0x82
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	429a      	cmp	r2, r3
 800684a:	d113      	bne.n	8006874 <SPI_EndRxTransaction+0x40>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	429a      	cmp	r2, r3
 8006856:	d005      	beq.n	8006864 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	2380      	movs	r3, #128	; 0x80
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	429a      	cmp	r2, r3
 8006862:	d107      	bne.n	8006874 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2140      	movs	r1, #64	; 0x40
 8006870:	438a      	bics	r2, r1
 8006872:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	2382      	movs	r3, #130	; 0x82
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	429a      	cmp	r2, r3
 800687e:	d12b      	bne.n	80068d8 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	2380      	movs	r3, #128	; 0x80
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	429a      	cmp	r2, r3
 800688a:	d012      	beq.n	80068b2 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	0013      	movs	r3, r2
 8006896:	2200      	movs	r2, #0
 8006898:	2180      	movs	r1, #128	; 0x80
 800689a:	f7ff ff3d 	bl	8006718 <SPI_WaitFlagStateUntilTimeout>
 800689e:	1e03      	subs	r3, r0, #0
 80068a0:	d02d      	beq.n	80068fe <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	2220      	movs	r2, #32
 80068a8:	431a      	orrs	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e026      	b.n	8006900 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	0013      	movs	r3, r2
 80068bc:	2200      	movs	r2, #0
 80068be:	2101      	movs	r1, #1
 80068c0:	f7ff ff2a 	bl	8006718 <SPI_WaitFlagStateUntilTimeout>
 80068c4:	1e03      	subs	r3, r0, #0
 80068c6:	d01a      	beq.n	80068fe <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068cc:	2220      	movs	r2, #32
 80068ce:	431a      	orrs	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e013      	b.n	8006900 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	0013      	movs	r3, r2
 80068e2:	2200      	movs	r2, #0
 80068e4:	2101      	movs	r1, #1
 80068e6:	f7ff ff17 	bl	8006718 <SPI_WaitFlagStateUntilTimeout>
 80068ea:	1e03      	subs	r3, r0, #0
 80068ec:	d007      	beq.n	80068fe <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f2:	2220      	movs	r2, #32
 80068f4:	431a      	orrs	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e000      	b.n	8006900 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	0018      	movs	r0, r3
 8006902:	46bd      	mov	sp, r7
 8006904:	b004      	add	sp, #16
 8006906:	bd80      	pop	{r7, pc}

08006908 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b088      	sub	sp, #32
 800690c:	af02      	add	r7, sp, #8
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006914:	4b1d      	ldr	r3, [pc, #116]	; (800698c <SPI_EndRxTxTransaction+0x84>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	491d      	ldr	r1, [pc, #116]	; (8006990 <SPI_EndRxTxTransaction+0x88>)
 800691a:	0018      	movs	r0, r3
 800691c:	f7f9 fc10 	bl	8000140 <__udivsi3>
 8006920:	0003      	movs	r3, r0
 8006922:	001a      	movs	r2, r3
 8006924:	0013      	movs	r3, r2
 8006926:	015b      	lsls	r3, r3, #5
 8006928:	1a9b      	subs	r3, r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	189b      	adds	r3, r3, r2
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	2382      	movs	r3, #130	; 0x82
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	429a      	cmp	r2, r3
 800693c:	d112      	bne.n	8006964 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	0013      	movs	r3, r2
 8006948:	2200      	movs	r2, #0
 800694a:	2180      	movs	r1, #128	; 0x80
 800694c:	f7ff fee4 	bl	8006718 <SPI_WaitFlagStateUntilTimeout>
 8006950:	1e03      	subs	r3, r0, #0
 8006952:	d016      	beq.n	8006982 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006958:	2220      	movs	r2, #32
 800695a:	431a      	orrs	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e00f      	b.n	8006984 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00a      	beq.n	8006980 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	3b01      	subs	r3, #1
 800696e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	2280      	movs	r2, #128	; 0x80
 8006978:	4013      	ands	r3, r2
 800697a:	2b80      	cmp	r3, #128	; 0x80
 800697c:	d0f2      	beq.n	8006964 <SPI_EndRxTxTransaction+0x5c>
 800697e:	e000      	b.n	8006982 <SPI_EndRxTxTransaction+0x7a>
        break;
 8006980:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	0018      	movs	r0, r3
 8006986:	46bd      	mov	sp, r7
 8006988:	b006      	add	sp, #24
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20000000 	.word	0x20000000
 8006990:	016e3600 	.word	0x016e3600

08006994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e032      	b.n	8006a0c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2239      	movs	r2, #57	; 0x39
 80069aa:	5c9b      	ldrb	r3, [r3, r2]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d107      	bne.n	80069c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2238      	movs	r2, #56	; 0x38
 80069b6:	2100      	movs	r1, #0
 80069b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	0018      	movs	r0, r3
 80069be:	f7fd f851 	bl	8003a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2239      	movs	r2, #57	; 0x39
 80069c6:	2102      	movs	r1, #2
 80069c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3304      	adds	r3, #4
 80069d2:	0019      	movs	r1, r3
 80069d4:	0010      	movs	r0, r2
 80069d6:	f000 f971 	bl	8006cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	223e      	movs	r2, #62	; 0x3e
 80069de:	2101      	movs	r1, #1
 80069e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	223a      	movs	r2, #58	; 0x3a
 80069e6:	2101      	movs	r1, #1
 80069e8:	5499      	strb	r1, [r3, r2]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	223b      	movs	r2, #59	; 0x3b
 80069ee:	2101      	movs	r1, #1
 80069f0:	5499      	strb	r1, [r3, r2]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	223c      	movs	r2, #60	; 0x3c
 80069f6:	2101      	movs	r1, #1
 80069f8:	5499      	strb	r1, [r3, r2]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	223d      	movs	r2, #61	; 0x3d
 80069fe:	2101      	movs	r1, #1
 8006a00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2239      	movs	r2, #57	; 0x39
 8006a06:	2101      	movs	r1, #1
 8006a08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	b002      	add	sp, #8
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2239      	movs	r2, #57	; 0x39
 8006a20:	5c9b      	ldrb	r3, [r3, r2]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d001      	beq.n	8006a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e036      	b.n	8006a9a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2239      	movs	r2, #57	; 0x39
 8006a30:	2102      	movs	r1, #2
 8006a32:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2101      	movs	r1, #1
 8006a40:	430a      	orrs	r2, r1
 8006a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	2380      	movs	r3, #128	; 0x80
 8006a4a:	05db      	lsls	r3, r3, #23
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d009      	beq.n	8006a64 <HAL_TIM_Base_Start_IT+0x50>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a13      	ldr	r2, [pc, #76]	; (8006aa4 <HAL_TIM_Base_Start_IT+0x90>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d004      	beq.n	8006a64 <HAL_TIM_Base_Start_IT+0x50>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a12      	ldr	r2, [pc, #72]	; (8006aa8 <HAL_TIM_Base_Start_IT+0x94>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d111      	bne.n	8006a88 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	2207      	movs	r2, #7
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b06      	cmp	r3, #6
 8006a74:	d010      	beq.n	8006a98 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2101      	movs	r1, #1
 8006a82:	430a      	orrs	r2, r1
 8006a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a86:	e007      	b.n	8006a98 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2101      	movs	r1, #1
 8006a94:	430a      	orrs	r2, r1
 8006a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	b004      	add	sp, #16
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	40010800 	.word	0x40010800
 8006aa8:	40011400 	.word	0x40011400

08006aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2202      	movs	r2, #2
 8006abc:	4013      	ands	r3, r2
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d124      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d11d      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	4252      	negs	r2, r2
 8006ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	4013      	ands	r3, r2
 8006aea:	d004      	beq.n	8006af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	0018      	movs	r0, r3
 8006af0:	f000 f8cc 	bl	8006c8c <HAL_TIM_IC_CaptureCallback>
 8006af4:	e007      	b.n	8006b06 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	0018      	movs	r0, r3
 8006afa:	f000 f8bf 	bl	8006c7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	0018      	movs	r0, r3
 8006b02:	f000 f8cb 	bl	8006c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2204      	movs	r2, #4
 8006b14:	4013      	ands	r3, r2
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d125      	bne.n	8006b66 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2204      	movs	r2, #4
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	d11e      	bne.n	8006b66 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2205      	movs	r2, #5
 8006b2e:	4252      	negs	r2, r2
 8006b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2202      	movs	r2, #2
 8006b36:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	23c0      	movs	r3, #192	; 0xc0
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4013      	ands	r3, r2
 8006b44:	d004      	beq.n	8006b50 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f000 f89f 	bl	8006c8c <HAL_TIM_IC_CaptureCallback>
 8006b4e:	e007      	b.n	8006b60 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	0018      	movs	r0, r3
 8006b54:	f000 f892 	bl	8006c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f000 f89e 	bl	8006c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	2208      	movs	r2, #8
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d124      	bne.n	8006bbe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	2208      	movs	r2, #8
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d11d      	bne.n	8006bbe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2209      	movs	r2, #9
 8006b88:	4252      	negs	r2, r2
 8006b8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	2203      	movs	r2, #3
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	d004      	beq.n	8006ba8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f000 f873 	bl	8006c8c <HAL_TIM_IC_CaptureCallback>
 8006ba6:	e007      	b.n	8006bb8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	0018      	movs	r0, r3
 8006bac:	f000 f866 	bl	8006c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f000 f872 	bl	8006c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2210      	movs	r2, #16
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d125      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	2210      	movs	r2, #16
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	2b10      	cmp	r3, #16
 8006bd8:	d11e      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2211      	movs	r2, #17
 8006be0:	4252      	negs	r2, r2
 8006be2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2208      	movs	r2, #8
 8006be8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69da      	ldr	r2, [r3, #28]
 8006bf0:	23c0      	movs	r3, #192	; 0xc0
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	d004      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f000 f846 	bl	8006c8c <HAL_TIM_IC_CaptureCallback>
 8006c00:	e007      	b.n	8006c12 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	0018      	movs	r0, r3
 8006c06:	f000 f839 	bl	8006c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f000 f845 	bl	8006c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	4013      	ands	r3, r2
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10f      	bne.n	8006c46 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d108      	bne.n	8006c46 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	4252      	negs	r2, r2
 8006c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	0018      	movs	r0, r3
 8006c42:	f7fb fee1 	bl	8002a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	2240      	movs	r2, #64	; 0x40
 8006c4e:	4013      	ands	r3, r2
 8006c50:	2b40      	cmp	r3, #64	; 0x40
 8006c52:	d10f      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	2240      	movs	r2, #64	; 0x40
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	d108      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2241      	movs	r2, #65	; 0x41
 8006c68:	4252      	negs	r2, r2
 8006c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f000 f81c 	bl	8006cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c74:	46c0      	nop			; (mov r8, r8)
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b002      	add	sp, #8
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c84:	46c0      	nop			; (mov r8, r8)
 8006c86:	46bd      	mov	sp, r7
 8006c88:	b002      	add	sp, #8
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c94:	46c0      	nop			; (mov r8, r8)
 8006c96:	46bd      	mov	sp, r7
 8006c98:	b002      	add	sp, #8
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ca4:	46c0      	nop			; (mov r8, r8)
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b002      	add	sp, #8
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cb4:	46c0      	nop			; (mov r8, r8)
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	b002      	add	sp, #8
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	2380      	movs	r3, #128	; 0x80
 8006cd0:	05db      	lsls	r3, r3, #23
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d007      	beq.n	8006ce6 <TIM_Base_SetConfig+0x2a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a1f      	ldr	r2, [pc, #124]	; (8006d58 <TIM_Base_SetConfig+0x9c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d003      	beq.n	8006ce6 <TIM_Base_SetConfig+0x2a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a1e      	ldr	r2, [pc, #120]	; (8006d5c <TIM_Base_SetConfig+0xa0>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d108      	bne.n	8006cf8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2270      	movs	r2, #112	; 0x70
 8006cea:	4393      	bics	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	2380      	movs	r3, #128	; 0x80
 8006cfc:	05db      	lsls	r3, r3, #23
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d007      	beq.n	8006d12 <TIM_Base_SetConfig+0x56>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a14      	ldr	r2, [pc, #80]	; (8006d58 <TIM_Base_SetConfig+0x9c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_Base_SetConfig+0x56>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a13      	ldr	r2, [pc, #76]	; (8006d5c <TIM_Base_SetConfig+0xa0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d108      	bne.n	8006d24 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4a12      	ldr	r2, [pc, #72]	; (8006d60 <TIM_Base_SetConfig+0xa4>)
 8006d16:	4013      	ands	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2280      	movs	r2, #128	; 0x80
 8006d28:	4393      	bics	r3, r2
 8006d2a:	001a      	movs	r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	615a      	str	r2, [r3, #20]
}
 8006d50:	46c0      	nop			; (mov r8, r8)
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b004      	add	sp, #16
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	40010800 	.word	0x40010800
 8006d5c:	40011400 	.word	0x40011400
 8006d60:	fffffcff 	.word	0xfffffcff

08006d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2238      	movs	r2, #56	; 0x38
 8006d72:	5c9b      	ldrb	r3, [r3, r2]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e042      	b.n	8006e02 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2238      	movs	r2, #56	; 0x38
 8006d80:	2101      	movs	r1, #1
 8006d82:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2239      	movs	r2, #57	; 0x39
 8006d88:	2102      	movs	r1, #2
 8006d8a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2270      	movs	r2, #112	; 0x70
 8006da0:	4393      	bics	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	2380      	movs	r3, #128	; 0x80
 8006dbc:	05db      	lsls	r3, r3, #23
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d009      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a11      	ldr	r2, [pc, #68]	; (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d004      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a0f      	ldr	r2, [pc, #60]	; (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d10c      	bne.n	8006df0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2280      	movs	r2, #128	; 0x80
 8006dda:	4393      	bics	r3, r2
 8006ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2239      	movs	r2, #57	; 0x39
 8006df4:	2101      	movs	r1, #1
 8006df6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2238      	movs	r2, #56	; 0x38
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	0018      	movs	r0, r3
 8006e04:	46bd      	mov	sp, r7
 8006e06:	b004      	add	sp, #16
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	46c0      	nop			; (mov r8, r8)
 8006e0c:	40010800 	.word	0x40010800
 8006e10:	40011400 	.word	0x40011400

08006e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e044      	b.n	8006eb0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d107      	bne.n	8006e3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2278      	movs	r2, #120	; 0x78
 8006e32:	2100      	movs	r1, #0
 8006e34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	0018      	movs	r0, r3
 8006e3a:	f7fc fec9 	bl	8003bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2224      	movs	r2, #36	; 0x24
 8006e42:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2101      	movs	r1, #1
 8006e50:	438a      	bics	r2, r1
 8006e52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	0018      	movs	r0, r3
 8006e58:	f000 fc9c 	bl	8007794 <UART_SetConfig>
 8006e5c:	0003      	movs	r3, r0
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e024      	b.n	8006eb0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	0018      	movs	r0, r3
 8006e72:	f000 ff13 	bl	8007c9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	490d      	ldr	r1, [pc, #52]	; (8006eb8 <HAL_UART_Init+0xa4>)
 8006e82:	400a      	ands	r2, r1
 8006e84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	212a      	movs	r1, #42	; 0x2a
 8006e92:	438a      	bics	r2, r1
 8006e94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f000 ffab 	bl	8007e04 <UART_CheckIdleState>
 8006eae:	0003      	movs	r3, r0
}
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b002      	add	sp, #8
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	ffffb7ff 	.word	0xffffb7ff

08006ebc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	; 0x28
 8006ec0:	af02      	add	r7, sp, #8
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	1dbb      	adds	r3, r7, #6
 8006eca:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ed0:	2b20      	cmp	r3, #32
 8006ed2:	d000      	beq.n	8006ed6 <HAL_UART_Transmit+0x1a>
 8006ed4:	e08c      	b.n	8006ff0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <HAL_UART_Transmit+0x28>
 8006edc:	1dbb      	adds	r3, r7, #6
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e084      	b.n	8006ff2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	2380      	movs	r3, #128	; 0x80
 8006eee:	015b      	lsls	r3, r3, #5
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d109      	bne.n	8006f08 <HAL_UART_Transmit+0x4c>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d105      	bne.n	8006f08 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	2201      	movs	r2, #1
 8006f00:	4013      	ands	r3, r2
 8006f02:	d001      	beq.n	8006f08 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e074      	b.n	8006ff2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2284      	movs	r2, #132	; 0x84
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2221      	movs	r2, #33	; 0x21
 8006f14:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f16:	f7fc ffad 	bl	8003e74 <HAL_GetTick>
 8006f1a:	0003      	movs	r3, r0
 8006f1c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1dba      	adds	r2, r7, #6
 8006f22:	2150      	movs	r1, #80	; 0x50
 8006f24:	8812      	ldrh	r2, [r2, #0]
 8006f26:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	1dba      	adds	r2, r7, #6
 8006f2c:	2152      	movs	r1, #82	; 0x52
 8006f2e:	8812      	ldrh	r2, [r2, #0]
 8006f30:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	2380      	movs	r3, #128	; 0x80
 8006f38:	015b      	lsls	r3, r3, #5
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d108      	bne.n	8006f50 <HAL_UART_Transmit+0x94>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d104      	bne.n	8006f50 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	61bb      	str	r3, [r7, #24]
 8006f4e:	e003      	b.n	8006f58 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f54:	2300      	movs	r3, #0
 8006f56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f58:	e02f      	b.n	8006fba <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	0013      	movs	r3, r2
 8006f64:	2200      	movs	r2, #0
 8006f66:	2180      	movs	r1, #128	; 0x80
 8006f68:	f000 fff4 	bl	8007f54 <UART_WaitOnFlagUntilTimeout>
 8006f6c:	1e03      	subs	r3, r0, #0
 8006f6e:	d004      	beq.n	8006f7a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2220      	movs	r2, #32
 8006f74:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e03b      	b.n	8006ff2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10b      	bne.n	8006f98 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	001a      	movs	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	05d2      	lsls	r2, r2, #23
 8006f8c:	0dd2      	lsrs	r2, r2, #23
 8006f8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	3302      	adds	r3, #2
 8006f94:	61bb      	str	r3, [r7, #24]
 8006f96:	e007      	b.n	8006fa8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	781a      	ldrb	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2252      	movs	r2, #82	; 0x52
 8006fac:	5a9b      	ldrh	r3, [r3, r2]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b299      	uxth	r1, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2252      	movs	r2, #82	; 0x52
 8006fb8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2252      	movs	r2, #82	; 0x52
 8006fbe:	5a9b      	ldrh	r3, [r3, r2]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1c9      	bne.n	8006f5a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	0013      	movs	r3, r2
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2140      	movs	r1, #64	; 0x40
 8006fd4:	f000 ffbe 	bl	8007f54 <UART_WaitOnFlagUntilTimeout>
 8006fd8:	1e03      	subs	r3, r0, #0
 8006fda:	d004      	beq.n	8006fe6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e005      	b.n	8006ff2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	e000      	b.n	8006ff2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006ff0:	2302      	movs	r3, #2
  }
}
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	b008      	add	sp, #32
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b088      	sub	sp, #32
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	1dbb      	adds	r3, r7, #6
 8007008:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800700e:	2b20      	cmp	r3, #32
 8007010:	d15b      	bne.n	80070ca <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <HAL_UART_Transmit_IT+0x24>
 8007018:	1dbb      	adds	r3, r7, #6
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e053      	b.n	80070cc <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	2380      	movs	r3, #128	; 0x80
 800702a:	015b      	lsls	r3, r3, #5
 800702c:	429a      	cmp	r2, r3
 800702e:	d109      	bne.n	8007044 <HAL_UART_Transmit_IT+0x48>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d105      	bne.n	8007044 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2201      	movs	r2, #1
 800703c:	4013      	ands	r3, r2
 800703e:	d001      	beq.n	8007044 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e043      	b.n	80070cc <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	1dba      	adds	r2, r7, #6
 800704e:	2150      	movs	r1, #80	; 0x50
 8007050:	8812      	ldrh	r2, [r2, #0]
 8007052:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	1dba      	adds	r2, r7, #6
 8007058:	2152      	movs	r1, #82	; 0x52
 800705a:	8812      	ldrh	r2, [r2, #0]
 800705c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2284      	movs	r2, #132	; 0x84
 8007068:	2100      	movs	r1, #0
 800706a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2221      	movs	r2, #33	; 0x21
 8007070:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	2380      	movs	r3, #128	; 0x80
 8007078:	015b      	lsls	r3, r3, #5
 800707a:	429a      	cmp	r2, r3
 800707c:	d107      	bne.n	800708e <HAL_UART_Transmit_IT+0x92>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d103      	bne.n	800708e <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4a12      	ldr	r2, [pc, #72]	; (80070d4 <HAL_UART_Transmit_IT+0xd8>)
 800708a:	66da      	str	r2, [r3, #108]	; 0x6c
 800708c:	e002      	b.n	8007094 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4a11      	ldr	r2, [pc, #68]	; (80070d8 <HAL_UART_Transmit_IT+0xdc>)
 8007092:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007094:	f3ef 8310 	mrs	r3, PRIMASK
 8007098:	613b      	str	r3, [r7, #16]
  return(result);
 800709a:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800709c:	61fb      	str	r3, [r7, #28]
 800709e:	2301      	movs	r3, #1
 80070a0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f383 8810 	msr	PRIMASK, r3
}
 80070a8:	46c0      	nop			; (mov r8, r8)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2180      	movs	r1, #128	; 0x80
 80070b6:	430a      	orrs	r2, r1
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	f383 8810 	msr	PRIMASK, r3
}
 80070c4:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	e000      	b.n	80070cc <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80070ca:	2302      	movs	r3, #2
  }
}
 80070cc:	0018      	movs	r0, r3
 80070ce:	46bd      	mov	sp, r7
 80070d0:	b008      	add	sp, #32
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	08008365 	.word	0x08008365
 80070d8:	080082b3 	.word	0x080082b3

080070dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b088      	sub	sp, #32
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	1dbb      	adds	r3, r7, #6
 80070e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2280      	movs	r2, #128	; 0x80
 80070ee:	589b      	ldr	r3, [r3, r2]
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d14a      	bne.n	800718a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_UART_Receive_IT+0x26>
 80070fa:	1dbb      	adds	r3, r7, #6
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e042      	b.n	800718c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	2380      	movs	r3, #128	; 0x80
 800710c:	015b      	lsls	r3, r3, #5
 800710e:	429a      	cmp	r2, r3
 8007110:	d109      	bne.n	8007126 <HAL_UART_Receive_IT+0x4a>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d105      	bne.n	8007126 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2201      	movs	r2, #1
 800711e:	4013      	ands	r3, r2
 8007120:	d001      	beq.n	8007126 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e032      	b.n	800718c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a18      	ldr	r2, [pc, #96]	; (8007194 <HAL_UART_Receive_IT+0xb8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d020      	beq.n	8007178 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	2380      	movs	r3, #128	; 0x80
 800713e:	041b      	lsls	r3, r3, #16
 8007140:	4013      	ands	r3, r2
 8007142:	d019      	beq.n	8007178 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007144:	f3ef 8310 	mrs	r3, PRIMASK
 8007148:	613b      	str	r3, [r7, #16]
  return(result);
 800714a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800714c:	61fb      	str	r3, [r7, #28]
 800714e:	2301      	movs	r3, #1
 8007150:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f383 8810 	msr	PRIMASK, r3
}
 8007158:	46c0      	nop			; (mov r8, r8)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2180      	movs	r1, #128	; 0x80
 8007166:	04c9      	lsls	r1, r1, #19
 8007168:	430a      	orrs	r2, r1
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	f383 8810 	msr	PRIMASK, r3
}
 8007176:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007178:	1dbb      	adds	r3, r7, #6
 800717a:	881a      	ldrh	r2, [r3, #0]
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	0018      	movs	r0, r3
 8007182:	f000 ff51 	bl	8008028 <UART_Start_Receive_IT>
 8007186:	0003      	movs	r3, r0
 8007188:	e000      	b.n	800718c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800718a:	2302      	movs	r3, #2
  }
}
 800718c:	0018      	movs	r0, r3
 800718e:	46bd      	mov	sp, r7
 8007190:	b008      	add	sp, #32
 8007192:	bd80      	pop	{r7, pc}
 8007194:	40004800 	.word	0x40004800

08007198 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007198:	b590      	push	{r4, r7, lr}
 800719a:	b0ab      	sub	sp, #172	; 0xac
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	22a4      	movs	r2, #164	; 0xa4
 80071a8:	18b9      	adds	r1, r7, r2
 80071aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	20a0      	movs	r0, #160	; 0xa0
 80071b4:	1839      	adds	r1, r7, r0
 80071b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	219c      	movs	r1, #156	; 0x9c
 80071c0:	1879      	adds	r1, r7, r1
 80071c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80071c4:	0011      	movs	r1, r2
 80071c6:	18bb      	adds	r3, r7, r2
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a99      	ldr	r2, [pc, #612]	; (8007430 <HAL_UART_IRQHandler+0x298>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	2298      	movs	r2, #152	; 0x98
 80071d0:	18bc      	adds	r4, r7, r2
 80071d2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80071d4:	18bb      	adds	r3, r7, r2
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d114      	bne.n	8007206 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80071dc:	187b      	adds	r3, r7, r1
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2220      	movs	r2, #32
 80071e2:	4013      	ands	r3, r2
 80071e4:	d00f      	beq.n	8007206 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071e6:	183b      	adds	r3, r7, r0
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2220      	movs	r2, #32
 80071ec:	4013      	ands	r3, r2
 80071ee:	d00a      	beq.n	8007206 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d100      	bne.n	80071fa <HAL_UART_IRQHandler+0x62>
 80071f8:	e2a0      	b.n	800773c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	0010      	movs	r0, r2
 8007202:	4798      	blx	r3
      }
      return;
 8007204:	e29a      	b.n	800773c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007206:	2398      	movs	r3, #152	; 0x98
 8007208:	18fb      	adds	r3, r7, r3
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d100      	bne.n	8007212 <HAL_UART_IRQHandler+0x7a>
 8007210:	e114      	b.n	800743c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007212:	239c      	movs	r3, #156	; 0x9c
 8007214:	18fb      	adds	r3, r7, r3
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2201      	movs	r2, #1
 800721a:	4013      	ands	r3, r2
 800721c:	d106      	bne.n	800722c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800721e:	23a0      	movs	r3, #160	; 0xa0
 8007220:	18fb      	adds	r3, r7, r3
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a83      	ldr	r2, [pc, #524]	; (8007434 <HAL_UART_IRQHandler+0x29c>)
 8007226:	4013      	ands	r3, r2
 8007228:	d100      	bne.n	800722c <HAL_UART_IRQHandler+0x94>
 800722a:	e107      	b.n	800743c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800722c:	23a4      	movs	r3, #164	; 0xa4
 800722e:	18fb      	adds	r3, r7, r3
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2201      	movs	r2, #1
 8007234:	4013      	ands	r3, r2
 8007236:	d012      	beq.n	800725e <HAL_UART_IRQHandler+0xc6>
 8007238:	23a0      	movs	r3, #160	; 0xa0
 800723a:	18fb      	adds	r3, r7, r3
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	2380      	movs	r3, #128	; 0x80
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	4013      	ands	r3, r2
 8007244:	d00b      	beq.n	800725e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2201      	movs	r2, #1
 800724c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2284      	movs	r2, #132	; 0x84
 8007252:	589b      	ldr	r3, [r3, r2]
 8007254:	2201      	movs	r2, #1
 8007256:	431a      	orrs	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2184      	movs	r1, #132	; 0x84
 800725c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800725e:	23a4      	movs	r3, #164	; 0xa4
 8007260:	18fb      	adds	r3, r7, r3
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2202      	movs	r2, #2
 8007266:	4013      	ands	r3, r2
 8007268:	d011      	beq.n	800728e <HAL_UART_IRQHandler+0xf6>
 800726a:	239c      	movs	r3, #156	; 0x9c
 800726c:	18fb      	adds	r3, r7, r3
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2201      	movs	r2, #1
 8007272:	4013      	ands	r3, r2
 8007274:	d00b      	beq.n	800728e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2202      	movs	r2, #2
 800727c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2284      	movs	r2, #132	; 0x84
 8007282:	589b      	ldr	r3, [r3, r2]
 8007284:	2204      	movs	r2, #4
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2184      	movs	r1, #132	; 0x84
 800728c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800728e:	23a4      	movs	r3, #164	; 0xa4
 8007290:	18fb      	adds	r3, r7, r3
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2204      	movs	r2, #4
 8007296:	4013      	ands	r3, r2
 8007298:	d011      	beq.n	80072be <HAL_UART_IRQHandler+0x126>
 800729a:	239c      	movs	r3, #156	; 0x9c
 800729c:	18fb      	adds	r3, r7, r3
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2201      	movs	r2, #1
 80072a2:	4013      	ands	r3, r2
 80072a4:	d00b      	beq.n	80072be <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2204      	movs	r2, #4
 80072ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2284      	movs	r2, #132	; 0x84
 80072b2:	589b      	ldr	r3, [r3, r2]
 80072b4:	2202      	movs	r2, #2
 80072b6:	431a      	orrs	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2184      	movs	r1, #132	; 0x84
 80072bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072be:	23a4      	movs	r3, #164	; 0xa4
 80072c0:	18fb      	adds	r3, r7, r3
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2208      	movs	r2, #8
 80072c6:	4013      	ands	r3, r2
 80072c8:	d017      	beq.n	80072fa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072ca:	23a0      	movs	r3, #160	; 0xa0
 80072cc:	18fb      	adds	r3, r7, r3
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2220      	movs	r2, #32
 80072d2:	4013      	ands	r3, r2
 80072d4:	d105      	bne.n	80072e2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80072d6:	239c      	movs	r3, #156	; 0x9c
 80072d8:	18fb      	adds	r3, r7, r3
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2201      	movs	r2, #1
 80072de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072e0:	d00b      	beq.n	80072fa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2208      	movs	r2, #8
 80072e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2284      	movs	r2, #132	; 0x84
 80072ee:	589b      	ldr	r3, [r3, r2]
 80072f0:	2208      	movs	r2, #8
 80072f2:	431a      	orrs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2184      	movs	r1, #132	; 0x84
 80072f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072fa:	23a4      	movs	r3, #164	; 0xa4
 80072fc:	18fb      	adds	r3, r7, r3
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	2380      	movs	r3, #128	; 0x80
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	4013      	ands	r3, r2
 8007306:	d013      	beq.n	8007330 <HAL_UART_IRQHandler+0x198>
 8007308:	23a0      	movs	r3, #160	; 0xa0
 800730a:	18fb      	adds	r3, r7, r3
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	2380      	movs	r3, #128	; 0x80
 8007310:	04db      	lsls	r3, r3, #19
 8007312:	4013      	ands	r3, r2
 8007314:	d00c      	beq.n	8007330 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2280      	movs	r2, #128	; 0x80
 800731c:	0112      	lsls	r2, r2, #4
 800731e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2284      	movs	r2, #132	; 0x84
 8007324:	589b      	ldr	r3, [r3, r2]
 8007326:	2220      	movs	r2, #32
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2184      	movs	r1, #132	; 0x84
 800732e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2284      	movs	r2, #132	; 0x84
 8007334:	589b      	ldr	r3, [r3, r2]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d100      	bne.n	800733c <HAL_UART_IRQHandler+0x1a4>
 800733a:	e201      	b.n	8007740 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800733c:	23a4      	movs	r3, #164	; 0xa4
 800733e:	18fb      	adds	r3, r7, r3
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2220      	movs	r2, #32
 8007344:	4013      	ands	r3, r2
 8007346:	d00e      	beq.n	8007366 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007348:	23a0      	movs	r3, #160	; 0xa0
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2220      	movs	r2, #32
 8007350:	4013      	ands	r3, r2
 8007352:	d008      	beq.n	8007366 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	0010      	movs	r0, r2
 8007364:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2284      	movs	r2, #132	; 0x84
 800736a:	589b      	ldr	r3, [r3, r2]
 800736c:	2194      	movs	r1, #148	; 0x94
 800736e:	187a      	adds	r2, r7, r1
 8007370:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	2240      	movs	r2, #64	; 0x40
 800737a:	4013      	ands	r3, r2
 800737c:	2b40      	cmp	r3, #64	; 0x40
 800737e:	d004      	beq.n	800738a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007380:	187b      	adds	r3, r7, r1
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2228      	movs	r2, #40	; 0x28
 8007386:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007388:	d047      	beq.n	800741a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	0018      	movs	r0, r3
 800738e:	f000 ff15 	bl	80081bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	2240      	movs	r2, #64	; 0x40
 800739a:	4013      	ands	r3, r2
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	d137      	bne.n	8007410 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073a0:	f3ef 8310 	mrs	r3, PRIMASK
 80073a4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80073a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073a8:	2090      	movs	r0, #144	; 0x90
 80073aa:	183a      	adds	r2, r7, r0
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	2301      	movs	r3, #1
 80073b0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073b4:	f383 8810 	msr	PRIMASK, r3
}
 80073b8:	46c0      	nop			; (mov r8, r8)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2140      	movs	r1, #64	; 0x40
 80073c6:	438a      	bics	r2, r1
 80073c8:	609a      	str	r2, [r3, #8]
 80073ca:	183b      	adds	r3, r7, r0
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073d2:	f383 8810 	msr	PRIMASK, r3
}
 80073d6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d012      	beq.n	8007406 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e4:	4a14      	ldr	r2, [pc, #80]	; (8007438 <HAL_UART_IRQHandler+0x2a0>)
 80073e6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ec:	0018      	movs	r0, r3
 80073ee:	f7fd f939 	bl	8004664 <HAL_DMA_Abort_IT>
 80073f2:	1e03      	subs	r3, r0, #0
 80073f4:	d01a      	beq.n	800742c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007400:	0018      	movs	r0, r3
 8007402:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007404:	e012      	b.n	800742c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	0018      	movs	r0, r3
 800740a:	f000 f9af 	bl	800776c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800740e:	e00d      	b.n	800742c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	0018      	movs	r0, r3
 8007414:	f000 f9aa 	bl	800776c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	e008      	b.n	800742c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	0018      	movs	r0, r3
 800741e:	f000 f9a5 	bl	800776c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2284      	movs	r2, #132	; 0x84
 8007426:	2100      	movs	r1, #0
 8007428:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800742a:	e189      	b.n	8007740 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800742c:	46c0      	nop			; (mov r8, r8)
    return;
 800742e:	e187      	b.n	8007740 <HAL_UART_IRQHandler+0x5a8>
 8007430:	0000080f 	.word	0x0000080f
 8007434:	04000120 	.word	0x04000120
 8007438:	08008285 	.word	0x08008285

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007440:	2b01      	cmp	r3, #1
 8007442:	d000      	beq.n	8007446 <HAL_UART_IRQHandler+0x2ae>
 8007444:	e13b      	b.n	80076be <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007446:	23a4      	movs	r3, #164	; 0xa4
 8007448:	18fb      	adds	r3, r7, r3
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2210      	movs	r2, #16
 800744e:	4013      	ands	r3, r2
 8007450:	d100      	bne.n	8007454 <HAL_UART_IRQHandler+0x2bc>
 8007452:	e134      	b.n	80076be <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007454:	23a0      	movs	r3, #160	; 0xa0
 8007456:	18fb      	adds	r3, r7, r3
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2210      	movs	r2, #16
 800745c:	4013      	ands	r3, r2
 800745e:	d100      	bne.n	8007462 <HAL_UART_IRQHandler+0x2ca>
 8007460:	e12d      	b.n	80076be <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2210      	movs	r2, #16
 8007468:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	2240      	movs	r2, #64	; 0x40
 8007472:	4013      	ands	r3, r2
 8007474:	2b40      	cmp	r3, #64	; 0x40
 8007476:	d000      	beq.n	800747a <HAL_UART_IRQHandler+0x2e2>
 8007478:	e0a1      	b.n	80075be <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	217e      	movs	r1, #126	; 0x7e
 8007484:	187b      	adds	r3, r7, r1
 8007486:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007488:	187b      	adds	r3, r7, r1
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d100      	bne.n	8007492 <HAL_UART_IRQHandler+0x2fa>
 8007490:	e158      	b.n	8007744 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2258      	movs	r2, #88	; 0x58
 8007496:	5a9b      	ldrh	r3, [r3, r2]
 8007498:	187a      	adds	r2, r7, r1
 800749a:	8812      	ldrh	r2, [r2, #0]
 800749c:	429a      	cmp	r2, r3
 800749e:	d300      	bcc.n	80074a2 <HAL_UART_IRQHandler+0x30a>
 80074a0:	e150      	b.n	8007744 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	187a      	adds	r2, r7, r1
 80074a6:	215a      	movs	r1, #90	; 0x5a
 80074a8:	8812      	ldrh	r2, [r2, #0]
 80074aa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2220      	movs	r2, #32
 80074b6:	4013      	ands	r3, r2
 80074b8:	d16f      	bne.n	800759a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074ba:	f3ef 8310 	mrs	r3, PRIMASK
 80074be:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80074c4:	2301      	movs	r3, #1
 80074c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ca:	f383 8810 	msr	PRIMASK, r3
}
 80074ce:	46c0      	nop			; (mov r8, r8)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	499e      	ldr	r1, [pc, #632]	; (8007754 <HAL_UART_IRQHandler+0x5bc>)
 80074dc:	400a      	ands	r2, r1
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	f383 8810 	msr	PRIMASK, r3
}
 80074ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074ec:	f3ef 8310 	mrs	r3, PRIMASK
 80074f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80074f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f4:	677b      	str	r3, [r7, #116]	; 0x74
 80074f6:	2301      	movs	r3, #1
 80074f8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074fc:	f383 8810 	msr	PRIMASK, r3
}
 8007500:	46c0      	nop			; (mov r8, r8)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2101      	movs	r1, #1
 800750e:	438a      	bics	r2, r1
 8007510:	609a      	str	r2, [r3, #8]
 8007512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007514:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007518:	f383 8810 	msr	PRIMASK, r3
}
 800751c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800751e:	f3ef 8310 	mrs	r3, PRIMASK
 8007522:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007524:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007526:	673b      	str	r3, [r7, #112]	; 0x70
 8007528:	2301      	movs	r3, #1
 800752a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800752c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752e:	f383 8810 	msr	PRIMASK, r3
}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689a      	ldr	r2, [r3, #8]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2140      	movs	r1, #64	; 0x40
 8007540:	438a      	bics	r2, r1
 8007542:	609a      	str	r2, [r3, #8]
 8007544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007546:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800754a:	f383 8810 	msr	PRIMASK, r3
}
 800754e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2280      	movs	r2, #128	; 0x80
 8007554:	2120      	movs	r1, #32
 8007556:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800755e:	f3ef 8310 	mrs	r3, PRIMASK
 8007562:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007564:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007566:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007568:	2301      	movs	r3, #1
 800756a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800756c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800756e:	f383 8810 	msr	PRIMASK, r3
}
 8007572:	46c0      	nop			; (mov r8, r8)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2110      	movs	r1, #16
 8007580:	438a      	bics	r2, r1
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007586:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800758a:	f383 8810 	msr	PRIMASK, r3
}
 800758e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007594:	0018      	movs	r0, r3
 8007596:	f7fd f825 	bl	80045e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2202      	movs	r2, #2
 800759e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2258      	movs	r2, #88	; 0x58
 80075a4:	5a9a      	ldrh	r2, [r3, r2]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	215a      	movs	r1, #90	; 0x5a
 80075aa:	5a5b      	ldrh	r3, [r3, r1]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	0011      	movs	r1, r2
 80075b6:	0018      	movs	r0, r3
 80075b8:	f000 f8e0 	bl	800777c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075bc:	e0c2      	b.n	8007744 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2258      	movs	r2, #88	; 0x58
 80075c2:	5a99      	ldrh	r1, [r3, r2]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	225a      	movs	r2, #90	; 0x5a
 80075c8:	5a9b      	ldrh	r3, [r3, r2]
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	208e      	movs	r0, #142	; 0x8e
 80075ce:	183b      	adds	r3, r7, r0
 80075d0:	1a8a      	subs	r2, r1, r2
 80075d2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	225a      	movs	r2, #90	; 0x5a
 80075d8:	5a9b      	ldrh	r3, [r3, r2]
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d100      	bne.n	80075e2 <HAL_UART_IRQHandler+0x44a>
 80075e0:	e0b2      	b.n	8007748 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80075e2:	183b      	adds	r3, r7, r0
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d100      	bne.n	80075ec <HAL_UART_IRQHandler+0x454>
 80075ea:	e0ad      	b.n	8007748 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ec:	f3ef 8310 	mrs	r3, PRIMASK
 80075f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80075f2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075f4:	2488      	movs	r4, #136	; 0x88
 80075f6:	193a      	adds	r2, r7, r4
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	2301      	movs	r3, #1
 80075fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f383 8810 	msr	PRIMASK, r3
}
 8007604:	46c0      	nop			; (mov r8, r8)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4951      	ldr	r1, [pc, #324]	; (8007758 <HAL_UART_IRQHandler+0x5c0>)
 8007612:	400a      	ands	r2, r1
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	193b      	adds	r3, r7, r4
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f383 8810 	msr	PRIMASK, r3
}
 8007622:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007624:	f3ef 8310 	mrs	r3, PRIMASK
 8007628:	61bb      	str	r3, [r7, #24]
  return(result);
 800762a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762c:	2484      	movs	r4, #132	; 0x84
 800762e:	193a      	adds	r2, r7, r4
 8007630:	6013      	str	r3, [r2, #0]
 8007632:	2301      	movs	r3, #1
 8007634:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	f383 8810 	msr	PRIMASK, r3
}
 800763c:	46c0      	nop			; (mov r8, r8)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2101      	movs	r1, #1
 800764a:	438a      	bics	r2, r1
 800764c:	609a      	str	r2, [r3, #8]
 800764e:	193b      	adds	r3, r7, r4
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	f383 8810 	msr	PRIMASK, r3
}
 800765a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2280      	movs	r2, #128	; 0x80
 8007660:	2120      	movs	r1, #32
 8007662:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007670:	f3ef 8310 	mrs	r3, PRIMASK
 8007674:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007678:	2480      	movs	r4, #128	; 0x80
 800767a:	193a      	adds	r2, r7, r4
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	2301      	movs	r3, #1
 8007680:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007684:	f383 8810 	msr	PRIMASK, r3
}
 8007688:	46c0      	nop			; (mov r8, r8)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2110      	movs	r1, #16
 8007696:	438a      	bics	r2, r1
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	193b      	adds	r3, r7, r4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a2:	f383 8810 	msr	PRIMASK, r3
}
 80076a6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076ae:	183b      	adds	r3, r7, r0
 80076b0:	881a      	ldrh	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	0011      	movs	r1, r2
 80076b6:	0018      	movs	r0, r3
 80076b8:	f000 f860 	bl	800777c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076bc:	e044      	b.n	8007748 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076be:	23a4      	movs	r3, #164	; 0xa4
 80076c0:	18fb      	adds	r3, r7, r3
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	2380      	movs	r3, #128	; 0x80
 80076c6:	035b      	lsls	r3, r3, #13
 80076c8:	4013      	ands	r3, r2
 80076ca:	d010      	beq.n	80076ee <HAL_UART_IRQHandler+0x556>
 80076cc:	239c      	movs	r3, #156	; 0x9c
 80076ce:	18fb      	adds	r3, r7, r3
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	2380      	movs	r3, #128	; 0x80
 80076d4:	03db      	lsls	r3, r3, #15
 80076d6:	4013      	ands	r3, r2
 80076d8:	d009      	beq.n	80076ee <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2280      	movs	r2, #128	; 0x80
 80076e0:	0352      	lsls	r2, r2, #13
 80076e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	0018      	movs	r0, r3
 80076e8:	f001 f88a 	bl	8008800 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076ec:	e02f      	b.n	800774e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80076ee:	23a4      	movs	r3, #164	; 0xa4
 80076f0:	18fb      	adds	r3, r7, r3
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2280      	movs	r2, #128	; 0x80
 80076f6:	4013      	ands	r3, r2
 80076f8:	d00f      	beq.n	800771a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80076fa:	23a0      	movs	r3, #160	; 0xa0
 80076fc:	18fb      	adds	r3, r7, r3
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2280      	movs	r2, #128	; 0x80
 8007702:	4013      	ands	r3, r2
 8007704:	d009      	beq.n	800771a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d01e      	beq.n	800774c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	0010      	movs	r0, r2
 8007716:	4798      	blx	r3
    }
    return;
 8007718:	e018      	b.n	800774c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800771a:	23a4      	movs	r3, #164	; 0xa4
 800771c:	18fb      	adds	r3, r7, r3
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2240      	movs	r2, #64	; 0x40
 8007722:	4013      	ands	r3, r2
 8007724:	d013      	beq.n	800774e <HAL_UART_IRQHandler+0x5b6>
 8007726:	23a0      	movs	r3, #160	; 0xa0
 8007728:	18fb      	adds	r3, r7, r3
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2240      	movs	r2, #64	; 0x40
 800772e:	4013      	ands	r3, r2
 8007730:	d00d      	beq.n	800774e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	0018      	movs	r0, r3
 8007736:	f000 fe73 	bl	8008420 <UART_EndTransmit_IT>
    return;
 800773a:	e008      	b.n	800774e <HAL_UART_IRQHandler+0x5b6>
      return;
 800773c:	46c0      	nop			; (mov r8, r8)
 800773e:	e006      	b.n	800774e <HAL_UART_IRQHandler+0x5b6>
    return;
 8007740:	46c0      	nop			; (mov r8, r8)
 8007742:	e004      	b.n	800774e <HAL_UART_IRQHandler+0x5b6>
      return;
 8007744:	46c0      	nop			; (mov r8, r8)
 8007746:	e002      	b.n	800774e <HAL_UART_IRQHandler+0x5b6>
      return;
 8007748:	46c0      	nop			; (mov r8, r8)
 800774a:	e000      	b.n	800774e <HAL_UART_IRQHandler+0x5b6>
    return;
 800774c:	46c0      	nop			; (mov r8, r8)
  }

}
 800774e:	46bd      	mov	sp, r7
 8007750:	b02b      	add	sp, #172	; 0xac
 8007752:	bd90      	pop	{r4, r7, pc}
 8007754:	fffffeff 	.word	0xfffffeff
 8007758:	fffffedf 	.word	0xfffffedf

0800775c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007764:	46c0      	nop			; (mov r8, r8)
 8007766:	46bd      	mov	sp, r7
 8007768:	b002      	add	sp, #8
 800776a:	bd80      	pop	{r7, pc}

0800776c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007774:	46c0      	nop			; (mov r8, r8)
 8007776:	46bd      	mov	sp, r7
 8007778:	b002      	add	sp, #8
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	000a      	movs	r2, r1
 8007786:	1cbb      	adds	r3, r7, #2
 8007788:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	46bd      	mov	sp, r7
 800778e:	b002      	add	sp, #8
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007794:	b5b0      	push	{r4, r5, r7, lr}
 8007796:	b08e      	sub	sp, #56	; 0x38
 8007798:	af00      	add	r7, sp, #0
 800779a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800779c:	231a      	movs	r3, #26
 800779e:	2218      	movs	r2, #24
 80077a0:	189b      	adds	r3, r3, r2
 80077a2:	19db      	adds	r3, r3, r7
 80077a4:	2200      	movs	r2, #0
 80077a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	431a      	orrs	r2, r3
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	431a      	orrs	r2, r3
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	4313      	orrs	r3, r2
 80077be:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4ac6      	ldr	r2, [pc, #792]	; (8007ae0 <UART_SetConfig+0x34c>)
 80077c8:	4013      	ands	r3, r2
 80077ca:	0019      	movs	r1, r3
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077d2:	430a      	orrs	r2, r1
 80077d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	4ac1      	ldr	r2, [pc, #772]	; (8007ae4 <UART_SetConfig+0x350>)
 80077de:	4013      	ands	r3, r2
 80077e0:	0019      	movs	r1, r3
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4abb      	ldr	r2, [pc, #748]	; (8007ae8 <UART_SetConfig+0x354>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d004      	beq.n	8007808 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007804:	4313      	orrs	r3, r2
 8007806:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	4ab7      	ldr	r2, [pc, #732]	; (8007aec <UART_SetConfig+0x358>)
 8007810:	4013      	ands	r3, r2
 8007812:	0019      	movs	r1, r3
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800781a:	430a      	orrs	r2, r1
 800781c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4ab3      	ldr	r2, [pc, #716]	; (8007af0 <UART_SetConfig+0x35c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d131      	bne.n	800788c <UART_SetConfig+0xf8>
 8007828:	4bb2      	ldr	r3, [pc, #712]	; (8007af4 <UART_SetConfig+0x360>)
 800782a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782c:	2203      	movs	r2, #3
 800782e:	4013      	ands	r3, r2
 8007830:	2b03      	cmp	r3, #3
 8007832:	d01d      	beq.n	8007870 <UART_SetConfig+0xdc>
 8007834:	d823      	bhi.n	800787e <UART_SetConfig+0xea>
 8007836:	2b02      	cmp	r3, #2
 8007838:	d00c      	beq.n	8007854 <UART_SetConfig+0xc0>
 800783a:	d820      	bhi.n	800787e <UART_SetConfig+0xea>
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <UART_SetConfig+0xb2>
 8007840:	2b01      	cmp	r3, #1
 8007842:	d00e      	beq.n	8007862 <UART_SetConfig+0xce>
 8007844:	e01b      	b.n	800787e <UART_SetConfig+0xea>
 8007846:	231b      	movs	r3, #27
 8007848:	2218      	movs	r2, #24
 800784a:	189b      	adds	r3, r3, r2
 800784c:	19db      	adds	r3, r3, r7
 800784e:	2201      	movs	r2, #1
 8007850:	701a      	strb	r2, [r3, #0]
 8007852:	e09c      	b.n	800798e <UART_SetConfig+0x1fa>
 8007854:	231b      	movs	r3, #27
 8007856:	2218      	movs	r2, #24
 8007858:	189b      	adds	r3, r3, r2
 800785a:	19db      	adds	r3, r3, r7
 800785c:	2202      	movs	r2, #2
 800785e:	701a      	strb	r2, [r3, #0]
 8007860:	e095      	b.n	800798e <UART_SetConfig+0x1fa>
 8007862:	231b      	movs	r3, #27
 8007864:	2218      	movs	r2, #24
 8007866:	189b      	adds	r3, r3, r2
 8007868:	19db      	adds	r3, r3, r7
 800786a:	2204      	movs	r2, #4
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	e08e      	b.n	800798e <UART_SetConfig+0x1fa>
 8007870:	231b      	movs	r3, #27
 8007872:	2218      	movs	r2, #24
 8007874:	189b      	adds	r3, r3, r2
 8007876:	19db      	adds	r3, r3, r7
 8007878:	2208      	movs	r2, #8
 800787a:	701a      	strb	r2, [r3, #0]
 800787c:	e087      	b.n	800798e <UART_SetConfig+0x1fa>
 800787e:	231b      	movs	r3, #27
 8007880:	2218      	movs	r2, #24
 8007882:	189b      	adds	r3, r3, r2
 8007884:	19db      	adds	r3, r3, r7
 8007886:	2210      	movs	r2, #16
 8007888:	701a      	strb	r2, [r3, #0]
 800788a:	e080      	b.n	800798e <UART_SetConfig+0x1fa>
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a99      	ldr	r2, [pc, #612]	; (8007af8 <UART_SetConfig+0x364>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d131      	bne.n	80078fa <UART_SetConfig+0x166>
 8007896:	4b97      	ldr	r3, [pc, #604]	; (8007af4 <UART_SetConfig+0x360>)
 8007898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789a:	220c      	movs	r2, #12
 800789c:	4013      	ands	r3, r2
 800789e:	2b0c      	cmp	r3, #12
 80078a0:	d01d      	beq.n	80078de <UART_SetConfig+0x14a>
 80078a2:	d823      	bhi.n	80078ec <UART_SetConfig+0x158>
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d00c      	beq.n	80078c2 <UART_SetConfig+0x12e>
 80078a8:	d820      	bhi.n	80078ec <UART_SetConfig+0x158>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <UART_SetConfig+0x120>
 80078ae:	2b04      	cmp	r3, #4
 80078b0:	d00e      	beq.n	80078d0 <UART_SetConfig+0x13c>
 80078b2:	e01b      	b.n	80078ec <UART_SetConfig+0x158>
 80078b4:	231b      	movs	r3, #27
 80078b6:	2218      	movs	r2, #24
 80078b8:	189b      	adds	r3, r3, r2
 80078ba:	19db      	adds	r3, r3, r7
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
 80078c0:	e065      	b.n	800798e <UART_SetConfig+0x1fa>
 80078c2:	231b      	movs	r3, #27
 80078c4:	2218      	movs	r2, #24
 80078c6:	189b      	adds	r3, r3, r2
 80078c8:	19db      	adds	r3, r3, r7
 80078ca:	2202      	movs	r2, #2
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	e05e      	b.n	800798e <UART_SetConfig+0x1fa>
 80078d0:	231b      	movs	r3, #27
 80078d2:	2218      	movs	r2, #24
 80078d4:	189b      	adds	r3, r3, r2
 80078d6:	19db      	adds	r3, r3, r7
 80078d8:	2204      	movs	r2, #4
 80078da:	701a      	strb	r2, [r3, #0]
 80078dc:	e057      	b.n	800798e <UART_SetConfig+0x1fa>
 80078de:	231b      	movs	r3, #27
 80078e0:	2218      	movs	r2, #24
 80078e2:	189b      	adds	r3, r3, r2
 80078e4:	19db      	adds	r3, r3, r7
 80078e6:	2208      	movs	r2, #8
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	e050      	b.n	800798e <UART_SetConfig+0x1fa>
 80078ec:	231b      	movs	r3, #27
 80078ee:	2218      	movs	r2, #24
 80078f0:	189b      	adds	r3, r3, r2
 80078f2:	19db      	adds	r3, r3, r7
 80078f4:	2210      	movs	r2, #16
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	e049      	b.n	800798e <UART_SetConfig+0x1fa>
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a7a      	ldr	r2, [pc, #488]	; (8007ae8 <UART_SetConfig+0x354>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d13e      	bne.n	8007982 <UART_SetConfig+0x1ee>
 8007904:	4b7b      	ldr	r3, [pc, #492]	; (8007af4 <UART_SetConfig+0x360>)
 8007906:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007908:	23c0      	movs	r3, #192	; 0xc0
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	4013      	ands	r3, r2
 800790e:	22c0      	movs	r2, #192	; 0xc0
 8007910:	0112      	lsls	r2, r2, #4
 8007912:	4293      	cmp	r3, r2
 8007914:	d027      	beq.n	8007966 <UART_SetConfig+0x1d2>
 8007916:	22c0      	movs	r2, #192	; 0xc0
 8007918:	0112      	lsls	r2, r2, #4
 800791a:	4293      	cmp	r3, r2
 800791c:	d82a      	bhi.n	8007974 <UART_SetConfig+0x1e0>
 800791e:	2280      	movs	r2, #128	; 0x80
 8007920:	0112      	lsls	r2, r2, #4
 8007922:	4293      	cmp	r3, r2
 8007924:	d011      	beq.n	800794a <UART_SetConfig+0x1b6>
 8007926:	2280      	movs	r2, #128	; 0x80
 8007928:	0112      	lsls	r2, r2, #4
 800792a:	4293      	cmp	r3, r2
 800792c:	d822      	bhi.n	8007974 <UART_SetConfig+0x1e0>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d004      	beq.n	800793c <UART_SetConfig+0x1a8>
 8007932:	2280      	movs	r2, #128	; 0x80
 8007934:	00d2      	lsls	r2, r2, #3
 8007936:	4293      	cmp	r3, r2
 8007938:	d00e      	beq.n	8007958 <UART_SetConfig+0x1c4>
 800793a:	e01b      	b.n	8007974 <UART_SetConfig+0x1e0>
 800793c:	231b      	movs	r3, #27
 800793e:	2218      	movs	r2, #24
 8007940:	189b      	adds	r3, r3, r2
 8007942:	19db      	adds	r3, r3, r7
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
 8007948:	e021      	b.n	800798e <UART_SetConfig+0x1fa>
 800794a:	231b      	movs	r3, #27
 800794c:	2218      	movs	r2, #24
 800794e:	189b      	adds	r3, r3, r2
 8007950:	19db      	adds	r3, r3, r7
 8007952:	2202      	movs	r2, #2
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	e01a      	b.n	800798e <UART_SetConfig+0x1fa>
 8007958:	231b      	movs	r3, #27
 800795a:	2218      	movs	r2, #24
 800795c:	189b      	adds	r3, r3, r2
 800795e:	19db      	adds	r3, r3, r7
 8007960:	2204      	movs	r2, #4
 8007962:	701a      	strb	r2, [r3, #0]
 8007964:	e013      	b.n	800798e <UART_SetConfig+0x1fa>
 8007966:	231b      	movs	r3, #27
 8007968:	2218      	movs	r2, #24
 800796a:	189b      	adds	r3, r3, r2
 800796c:	19db      	adds	r3, r3, r7
 800796e:	2208      	movs	r2, #8
 8007970:	701a      	strb	r2, [r3, #0]
 8007972:	e00c      	b.n	800798e <UART_SetConfig+0x1fa>
 8007974:	231b      	movs	r3, #27
 8007976:	2218      	movs	r2, #24
 8007978:	189b      	adds	r3, r3, r2
 800797a:	19db      	adds	r3, r3, r7
 800797c:	2210      	movs	r2, #16
 800797e:	701a      	strb	r2, [r3, #0]
 8007980:	e005      	b.n	800798e <UART_SetConfig+0x1fa>
 8007982:	231b      	movs	r3, #27
 8007984:	2218      	movs	r2, #24
 8007986:	189b      	adds	r3, r3, r2
 8007988:	19db      	adds	r3, r3, r7
 800798a:	2210      	movs	r2, #16
 800798c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a55      	ldr	r2, [pc, #340]	; (8007ae8 <UART_SetConfig+0x354>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d000      	beq.n	800799a <UART_SetConfig+0x206>
 8007998:	e084      	b.n	8007aa4 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800799a:	231b      	movs	r3, #27
 800799c:	2218      	movs	r2, #24
 800799e:	189b      	adds	r3, r3, r2
 80079a0:	19db      	adds	r3, r3, r7
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d01d      	beq.n	80079e4 <UART_SetConfig+0x250>
 80079a8:	dc20      	bgt.n	80079ec <UART_SetConfig+0x258>
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d015      	beq.n	80079da <UART_SetConfig+0x246>
 80079ae:	dc1d      	bgt.n	80079ec <UART_SetConfig+0x258>
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <UART_SetConfig+0x226>
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d005      	beq.n	80079c4 <UART_SetConfig+0x230>
 80079b8:	e018      	b.n	80079ec <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079ba:	f7fe f807 	bl	80059cc <HAL_RCC_GetPCLK1Freq>
 80079be:	0003      	movs	r3, r0
 80079c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079c2:	e01c      	b.n	80079fe <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079c4:	4b4b      	ldr	r3, [pc, #300]	; (8007af4 <UART_SetConfig+0x360>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2210      	movs	r2, #16
 80079ca:	4013      	ands	r3, r2
 80079cc:	d002      	beq.n	80079d4 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80079ce:	4b4b      	ldr	r3, [pc, #300]	; (8007afc <UART_SetConfig+0x368>)
 80079d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079d2:	e014      	b.n	80079fe <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80079d4:	4b4a      	ldr	r3, [pc, #296]	; (8007b00 <UART_SetConfig+0x36c>)
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079d8:	e011      	b.n	80079fe <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079da:	f7fd ff47 	bl	800586c <HAL_RCC_GetSysClockFreq>
 80079de:	0003      	movs	r3, r0
 80079e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079e2:	e00c      	b.n	80079fe <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079e4:	2380      	movs	r3, #128	; 0x80
 80079e6:	021b      	lsls	r3, r3, #8
 80079e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079ea:	e008      	b.n	80079fe <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80079f0:	231a      	movs	r3, #26
 80079f2:	2218      	movs	r2, #24
 80079f4:	189b      	adds	r3, r3, r2
 80079f6:	19db      	adds	r3, r3, r7
 80079f8:	2201      	movs	r2, #1
 80079fa:	701a      	strb	r2, [r3, #0]
        break;
 80079fc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d100      	bne.n	8007a06 <UART_SetConfig+0x272>
 8007a04:	e132      	b.n	8007c6c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	685a      	ldr	r2, [r3, #4]
 8007a0a:	0013      	movs	r3, r2
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	189b      	adds	r3, r3, r2
 8007a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d305      	bcc.n	8007a22 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d906      	bls.n	8007a30 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8007a22:	231a      	movs	r3, #26
 8007a24:	2218      	movs	r2, #24
 8007a26:	189b      	adds	r3, r3, r2
 8007a28:	19db      	adds	r3, r3, r7
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
 8007a2e:	e11d      	b.n	8007c6c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a32:	613b      	str	r3, [r7, #16]
 8007a34:	2300      	movs	r3, #0
 8007a36:	617b      	str	r3, [r7, #20]
 8007a38:	6939      	ldr	r1, [r7, #16]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	000b      	movs	r3, r1
 8007a3e:	0e1b      	lsrs	r3, r3, #24
 8007a40:	0010      	movs	r0, r2
 8007a42:	0205      	lsls	r5, r0, #8
 8007a44:	431d      	orrs	r5, r3
 8007a46:	000b      	movs	r3, r1
 8007a48:	021c      	lsls	r4, r3, #8
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	085b      	lsrs	r3, r3, #1
 8007a50:	60bb      	str	r3, [r7, #8]
 8007a52:	2300      	movs	r3, #0
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	68b8      	ldr	r0, [r7, #8]
 8007a58:	68f9      	ldr	r1, [r7, #12]
 8007a5a:	1900      	adds	r0, r0, r4
 8007a5c:	4169      	adcs	r1, r5
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	603b      	str	r3, [r7, #0]
 8007a64:	2300      	movs	r3, #0
 8007a66:	607b      	str	r3, [r7, #4]
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f7f8 fd1c 	bl	80004a8 <__aeabi_uldivmod>
 8007a70:	0002      	movs	r2, r0
 8007a72:	000b      	movs	r3, r1
 8007a74:	0013      	movs	r3, r2
 8007a76:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a7a:	23c0      	movs	r3, #192	; 0xc0
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d309      	bcc.n	8007a96 <UART_SetConfig+0x302>
 8007a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a84:	2380      	movs	r3, #128	; 0x80
 8007a86:	035b      	lsls	r3, r3, #13
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d204      	bcs.n	8007a96 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a92:	60da      	str	r2, [r3, #12]
 8007a94:	e0ea      	b.n	8007c6c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8007a96:	231a      	movs	r3, #26
 8007a98:	2218      	movs	r2, #24
 8007a9a:	189b      	adds	r3, r3, r2
 8007a9c:	19db      	adds	r3, r3, r7
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	701a      	strb	r2, [r3, #0]
 8007aa2:	e0e3      	b.n	8007c6c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	69da      	ldr	r2, [r3, #28]
 8007aa8:	2380      	movs	r3, #128	; 0x80
 8007aaa:	021b      	lsls	r3, r3, #8
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d000      	beq.n	8007ab2 <UART_SetConfig+0x31e>
 8007ab0:	e085      	b.n	8007bbe <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8007ab2:	231b      	movs	r3, #27
 8007ab4:	2218      	movs	r2, #24
 8007ab6:	189b      	adds	r3, r3, r2
 8007ab8:	19db      	adds	r3, r3, r7
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d837      	bhi.n	8007b30 <UART_SetConfig+0x39c>
 8007ac0:	009a      	lsls	r2, r3, #2
 8007ac2:	4b10      	ldr	r3, [pc, #64]	; (8007b04 <UART_SetConfig+0x370>)
 8007ac4:	18d3      	adds	r3, r2, r3
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aca:	f7fd ff7f 	bl	80059cc <HAL_RCC_GetPCLK1Freq>
 8007ace:	0003      	movs	r3, r0
 8007ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ad2:	e036      	b.n	8007b42 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ad4:	f7fd ff90 	bl	80059f8 <HAL_RCC_GetPCLK2Freq>
 8007ad8:	0003      	movs	r3, r0
 8007ada:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007adc:	e031      	b.n	8007b42 <UART_SetConfig+0x3ae>
 8007ade:	46c0      	nop			; (mov r8, r8)
 8007ae0:	efff69f3 	.word	0xefff69f3
 8007ae4:	ffffcfff 	.word	0xffffcfff
 8007ae8:	40004800 	.word	0x40004800
 8007aec:	fffff4ff 	.word	0xfffff4ff
 8007af0:	40013800 	.word	0x40013800
 8007af4:	40021000 	.word	0x40021000
 8007af8:	40004400 	.word	0x40004400
 8007afc:	003d0900 	.word	0x003d0900
 8007b00:	00f42400 	.word	0x00f42400
 8007b04:	0800d1c8 	.word	0x0800d1c8
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b08:	4b60      	ldr	r3, [pc, #384]	; (8007c8c <UART_SetConfig+0x4f8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2210      	movs	r2, #16
 8007b0e:	4013      	ands	r3, r2
 8007b10:	d002      	beq.n	8007b18 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007b12:	4b5f      	ldr	r3, [pc, #380]	; (8007c90 <UART_SetConfig+0x4fc>)
 8007b14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b16:	e014      	b.n	8007b42 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8007b18:	4b5e      	ldr	r3, [pc, #376]	; (8007c94 <UART_SetConfig+0x500>)
 8007b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b1c:	e011      	b.n	8007b42 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b1e:	f7fd fea5 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8007b22:	0003      	movs	r3, r0
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b26:	e00c      	b.n	8007b42 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b28:	2380      	movs	r3, #128	; 0x80
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b2e:	e008      	b.n	8007b42 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007b34:	231a      	movs	r3, #26
 8007b36:	2218      	movs	r2, #24
 8007b38:	189b      	adds	r3, r3, r2
 8007b3a:	19db      	adds	r3, r3, r7
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	701a      	strb	r2, [r3, #0]
        break;
 8007b40:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d100      	bne.n	8007b4a <UART_SetConfig+0x3b6>
 8007b48:	e090      	b.n	8007c6c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4c:	005a      	lsls	r2, r3, #1
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	085b      	lsrs	r3, r3, #1
 8007b54:	18d2      	adds	r2, r2, r3
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	0019      	movs	r1, r3
 8007b5c:	0010      	movs	r0, r2
 8007b5e:	f7f8 faef 	bl	8000140 <__udivsi3>
 8007b62:	0003      	movs	r3, r0
 8007b64:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	2b0f      	cmp	r3, #15
 8007b6a:	d921      	bls.n	8007bb0 <UART_SetConfig+0x41c>
 8007b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b6e:	2380      	movs	r3, #128	; 0x80
 8007b70:	025b      	lsls	r3, r3, #9
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d21c      	bcs.n	8007bb0 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	200e      	movs	r0, #14
 8007b7c:	2418      	movs	r4, #24
 8007b7e:	1903      	adds	r3, r0, r4
 8007b80:	19db      	adds	r3, r3, r7
 8007b82:	210f      	movs	r1, #15
 8007b84:	438a      	bics	r2, r1
 8007b86:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	085b      	lsrs	r3, r3, #1
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2207      	movs	r2, #7
 8007b90:	4013      	ands	r3, r2
 8007b92:	b299      	uxth	r1, r3
 8007b94:	1903      	adds	r3, r0, r4
 8007b96:	19db      	adds	r3, r3, r7
 8007b98:	1902      	adds	r2, r0, r4
 8007b9a:	19d2      	adds	r2, r2, r7
 8007b9c:	8812      	ldrh	r2, [r2, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	1902      	adds	r2, r0, r4
 8007ba8:	19d2      	adds	r2, r2, r7
 8007baa:	8812      	ldrh	r2, [r2, #0]
 8007bac:	60da      	str	r2, [r3, #12]
 8007bae:	e05d      	b.n	8007c6c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8007bb0:	231a      	movs	r3, #26
 8007bb2:	2218      	movs	r2, #24
 8007bb4:	189b      	adds	r3, r3, r2
 8007bb6:	19db      	adds	r3, r3, r7
 8007bb8:	2201      	movs	r2, #1
 8007bba:	701a      	strb	r2, [r3, #0]
 8007bbc:	e056      	b.n	8007c6c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bbe:	231b      	movs	r3, #27
 8007bc0:	2218      	movs	r2, #24
 8007bc2:	189b      	adds	r3, r3, r2
 8007bc4:	19db      	adds	r3, r3, r7
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d822      	bhi.n	8007c12 <UART_SetConfig+0x47e>
 8007bcc:	009a      	lsls	r2, r3, #2
 8007bce:	4b32      	ldr	r3, [pc, #200]	; (8007c98 <UART_SetConfig+0x504>)
 8007bd0:	18d3      	adds	r3, r2, r3
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bd6:	f7fd fef9 	bl	80059cc <HAL_RCC_GetPCLK1Freq>
 8007bda:	0003      	movs	r3, r0
 8007bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bde:	e021      	b.n	8007c24 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007be0:	f7fd ff0a 	bl	80059f8 <HAL_RCC_GetPCLK2Freq>
 8007be4:	0003      	movs	r3, r0
 8007be6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007be8:	e01c      	b.n	8007c24 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bea:	4b28      	ldr	r3, [pc, #160]	; (8007c8c <UART_SetConfig+0x4f8>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2210      	movs	r2, #16
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	d002      	beq.n	8007bfa <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007bf4:	4b26      	ldr	r3, [pc, #152]	; (8007c90 <UART_SetConfig+0x4fc>)
 8007bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007bf8:	e014      	b.n	8007c24 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8007bfa:	4b26      	ldr	r3, [pc, #152]	; (8007c94 <UART_SetConfig+0x500>)
 8007bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bfe:	e011      	b.n	8007c24 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c00:	f7fd fe34 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8007c04:	0003      	movs	r3, r0
 8007c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c08:	e00c      	b.n	8007c24 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c0a:	2380      	movs	r3, #128	; 0x80
 8007c0c:	021b      	lsls	r3, r3, #8
 8007c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c10:	e008      	b.n	8007c24 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c16:	231a      	movs	r3, #26
 8007c18:	2218      	movs	r2, #24
 8007c1a:	189b      	adds	r3, r3, r2
 8007c1c:	19db      	adds	r3, r3, r7
 8007c1e:	2201      	movs	r2, #1
 8007c20:	701a      	strb	r2, [r3, #0]
        break;
 8007c22:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d020      	beq.n	8007c6c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	085a      	lsrs	r2, r3, #1
 8007c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c32:	18d2      	adds	r2, r2, r3
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	0019      	movs	r1, r3
 8007c3a:	0010      	movs	r0, r2
 8007c3c:	f7f8 fa80 	bl	8000140 <__udivsi3>
 8007c40:	0003      	movs	r3, r0
 8007c42:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	2b0f      	cmp	r3, #15
 8007c48:	d90a      	bls.n	8007c60 <UART_SetConfig+0x4cc>
 8007c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c4c:	2380      	movs	r3, #128	; 0x80
 8007c4e:	025b      	lsls	r3, r3, #9
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d205      	bcs.n	8007c60 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	60da      	str	r2, [r3, #12]
 8007c5e:	e005      	b.n	8007c6c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8007c60:	231a      	movs	r3, #26
 8007c62:	2218      	movs	r2, #24
 8007c64:	189b      	adds	r3, r3, r2
 8007c66:	19db      	adds	r3, r3, r7
 8007c68:	2201      	movs	r2, #1
 8007c6a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	2200      	movs	r2, #0
 8007c76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007c78:	231a      	movs	r3, #26
 8007c7a:	2218      	movs	r2, #24
 8007c7c:	189b      	adds	r3, r3, r2
 8007c7e:	19db      	adds	r3, r3, r7
 8007c80:	781b      	ldrb	r3, [r3, #0]
}
 8007c82:	0018      	movs	r0, r3
 8007c84:	46bd      	mov	sp, r7
 8007c86:	b00e      	add	sp, #56	; 0x38
 8007c88:	bdb0      	pop	{r4, r5, r7, pc}
 8007c8a:	46c0      	nop			; (mov r8, r8)
 8007c8c:	40021000 	.word	0x40021000
 8007c90:	003d0900 	.word	0x003d0900
 8007c94:	00f42400 	.word	0x00f42400
 8007c98:	0800d1ec 	.word	0x0800d1ec

08007c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	2201      	movs	r2, #1
 8007caa:	4013      	ands	r3, r2
 8007cac:	d00b      	beq.n	8007cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	4a4a      	ldr	r2, [pc, #296]	; (8007de0 <UART_AdvFeatureConfig+0x144>)
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	0019      	movs	r1, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	2202      	movs	r2, #2
 8007ccc:	4013      	ands	r3, r2
 8007cce:	d00b      	beq.n	8007ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	4a43      	ldr	r2, [pc, #268]	; (8007de4 <UART_AdvFeatureConfig+0x148>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	0019      	movs	r1, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	2204      	movs	r2, #4
 8007cee:	4013      	ands	r3, r2
 8007cf0:	d00b      	beq.n	8007d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	4a3b      	ldr	r2, [pc, #236]	; (8007de8 <UART_AdvFeatureConfig+0x14c>)
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	0019      	movs	r1, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	2208      	movs	r2, #8
 8007d10:	4013      	ands	r3, r2
 8007d12:	d00b      	beq.n	8007d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	4a34      	ldr	r2, [pc, #208]	; (8007dec <UART_AdvFeatureConfig+0x150>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	0019      	movs	r1, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	2210      	movs	r2, #16
 8007d32:	4013      	ands	r3, r2
 8007d34:	d00b      	beq.n	8007d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	4a2c      	ldr	r2, [pc, #176]	; (8007df0 <UART_AdvFeatureConfig+0x154>)
 8007d3e:	4013      	ands	r3, r2
 8007d40:	0019      	movs	r1, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	2220      	movs	r2, #32
 8007d54:	4013      	ands	r3, r2
 8007d56:	d00b      	beq.n	8007d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	4a25      	ldr	r2, [pc, #148]	; (8007df4 <UART_AdvFeatureConfig+0x158>)
 8007d60:	4013      	ands	r3, r2
 8007d62:	0019      	movs	r1, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d74:	2240      	movs	r2, #64	; 0x40
 8007d76:	4013      	ands	r3, r2
 8007d78:	d01d      	beq.n	8007db6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	4a1d      	ldr	r2, [pc, #116]	; (8007df8 <UART_AdvFeatureConfig+0x15c>)
 8007d82:	4013      	ands	r3, r2
 8007d84:	0019      	movs	r1, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d96:	2380      	movs	r3, #128	; 0x80
 8007d98:	035b      	lsls	r3, r3, #13
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d10b      	bne.n	8007db6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	4a15      	ldr	r2, [pc, #84]	; (8007dfc <UART_AdvFeatureConfig+0x160>)
 8007da6:	4013      	ands	r3, r2
 8007da8:	0019      	movs	r1, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	2280      	movs	r2, #128	; 0x80
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	d00b      	beq.n	8007dd8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	4a0e      	ldr	r2, [pc, #56]	; (8007e00 <UART_AdvFeatureConfig+0x164>)
 8007dc8:	4013      	ands	r3, r2
 8007dca:	0019      	movs	r1, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	605a      	str	r2, [r3, #4]
  }
}
 8007dd8:	46c0      	nop			; (mov r8, r8)
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	b002      	add	sp, #8
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	fffdffff 	.word	0xfffdffff
 8007de4:	fffeffff 	.word	0xfffeffff
 8007de8:	fffbffff 	.word	0xfffbffff
 8007dec:	ffff7fff 	.word	0xffff7fff
 8007df0:	ffffefff 	.word	0xffffefff
 8007df4:	ffffdfff 	.word	0xffffdfff
 8007df8:	ffefffff 	.word	0xffefffff
 8007dfc:	ff9fffff 	.word	0xff9fffff
 8007e00:	fff7ffff 	.word	0xfff7ffff

08007e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b092      	sub	sp, #72	; 0x48
 8007e08:	af02      	add	r7, sp, #8
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2284      	movs	r2, #132	; 0x84
 8007e10:	2100      	movs	r1, #0
 8007e12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e14:	f7fc f82e 	bl	8003e74 <HAL_GetTick>
 8007e18:	0003      	movs	r3, r0
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2208      	movs	r2, #8
 8007e24:	4013      	ands	r3, r2
 8007e26:	2b08      	cmp	r3, #8
 8007e28:	d12c      	bne.n	8007e84 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2c:	2280      	movs	r2, #128	; 0x80
 8007e2e:	0391      	lsls	r1, r2, #14
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	4a46      	ldr	r2, [pc, #280]	; (8007f4c <UART_CheckIdleState+0x148>)
 8007e34:	9200      	str	r2, [sp, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f000 f88c 	bl	8007f54 <UART_WaitOnFlagUntilTimeout>
 8007e3c:	1e03      	subs	r3, r0, #0
 8007e3e:	d021      	beq.n	8007e84 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e40:	f3ef 8310 	mrs	r3, PRIMASK
 8007e44:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007e48:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	f383 8810 	msr	PRIMASK, r3
}
 8007e54:	46c0      	nop			; (mov r8, r8)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2180      	movs	r1, #128	; 0x80
 8007e62:	438a      	bics	r2, r1
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6c:	f383 8810 	msr	PRIMASK, r3
}
 8007e70:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2220      	movs	r2, #32
 8007e76:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2278      	movs	r2, #120	; 0x78
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e05f      	b.n	8007f44 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2204      	movs	r2, #4
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	d146      	bne.n	8007f20 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e94:	2280      	movs	r2, #128	; 0x80
 8007e96:	03d1      	lsls	r1, r2, #15
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	4a2c      	ldr	r2, [pc, #176]	; (8007f4c <UART_CheckIdleState+0x148>)
 8007e9c:	9200      	str	r2, [sp, #0]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f000 f858 	bl	8007f54 <UART_WaitOnFlagUntilTimeout>
 8007ea4:	1e03      	subs	r3, r0, #0
 8007ea6:	d03b      	beq.n	8007f20 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8007eac:	60fb      	str	r3, [r7, #12]
  return(result);
 8007eae:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	f383 8810 	msr	PRIMASK, r3
}
 8007ebc:	46c0      	nop			; (mov r8, r8)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4921      	ldr	r1, [pc, #132]	; (8007f50 <UART_CheckIdleState+0x14c>)
 8007eca:	400a      	ands	r2, r1
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f383 8810 	msr	PRIMASK, r3
}
 8007ed8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eda:	f3ef 8310 	mrs	r3, PRIMASK
 8007ede:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ee0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	f383 8810 	msr	PRIMASK, r3
}
 8007eee:	46c0      	nop			; (mov r8, r8)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689a      	ldr	r2, [r3, #8]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2101      	movs	r1, #1
 8007efc:	438a      	bics	r2, r1
 8007efe:	609a      	str	r2, [r3, #8]
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	f383 8810 	msr	PRIMASK, r3
}
 8007f0a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2280      	movs	r2, #128	; 0x80
 8007f10:	2120      	movs	r1, #32
 8007f12:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2278      	movs	r2, #120	; 0x78
 8007f18:	2100      	movs	r1, #0
 8007f1a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e011      	b.n	8007f44 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2220      	movs	r2, #32
 8007f24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2280      	movs	r2, #128	; 0x80
 8007f2a:	2120      	movs	r1, #32
 8007f2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2278      	movs	r2, #120	; 0x78
 8007f3e:	2100      	movs	r1, #0
 8007f40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	0018      	movs	r0, r3
 8007f46:	46bd      	mov	sp, r7
 8007f48:	b010      	add	sp, #64	; 0x40
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	01ffffff 	.word	0x01ffffff
 8007f50:	fffffedf 	.word	0xfffffedf

08007f54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	603b      	str	r3, [r7, #0]
 8007f60:	1dfb      	adds	r3, r7, #7
 8007f62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f64:	e04b      	b.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	d048      	beq.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f6c:	f7fb ff82 	bl	8003e74 <HAL_GetTick>
 8007f70:	0002      	movs	r2, r0
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d302      	bcc.n	8007f82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e04b      	b.n	800801e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2204      	movs	r2, #4
 8007f8e:	4013      	ands	r3, r2
 8007f90:	d035      	beq.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	2208      	movs	r2, #8
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d111      	bne.n	8007fc4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2208      	movs	r2, #8
 8007fa6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	0018      	movs	r0, r3
 8007fac:	f000 f906 	bl	80081bc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2284      	movs	r2, #132	; 0x84
 8007fb4:	2108      	movs	r1, #8
 8007fb6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2278      	movs	r2, #120	; 0x78
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e02c      	b.n	800801e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	69da      	ldr	r2, [r3, #28]
 8007fca:	2380      	movs	r3, #128	; 0x80
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	401a      	ands	r2, r3
 8007fd0:	2380      	movs	r3, #128	; 0x80
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d112      	bne.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2280      	movs	r2, #128	; 0x80
 8007fde:	0112      	lsls	r2, r2, #4
 8007fe0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	f000 f8e9 	bl	80081bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2284      	movs	r2, #132	; 0x84
 8007fee:	2120      	movs	r1, #32
 8007ff0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2278      	movs	r2, #120	; 0x78
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e00f      	b.n	800801e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	4013      	ands	r3, r2
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	425a      	negs	r2, r3
 800800e:	4153      	adcs	r3, r2
 8008010:	b2db      	uxtb	r3, r3
 8008012:	001a      	movs	r2, r3
 8008014:	1dfb      	adds	r3, r7, #7
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	429a      	cmp	r2, r3
 800801a:	d0a4      	beq.n	8007f66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	0018      	movs	r0, r3
 8008020:	46bd      	mov	sp, r7
 8008022:	b004      	add	sp, #16
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b090      	sub	sp, #64	; 0x40
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	1dbb      	adds	r3, r7, #6
 8008034:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	1dba      	adds	r2, r7, #6
 8008040:	2158      	movs	r1, #88	; 0x58
 8008042:	8812      	ldrh	r2, [r2, #0]
 8008044:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1dba      	adds	r2, r7, #6
 800804a:	215a      	movs	r1, #90	; 0x5a
 800804c:	8812      	ldrh	r2, [r2, #0]
 800804e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	2380      	movs	r3, #128	; 0x80
 800805c:	015b      	lsls	r3, r3, #5
 800805e:	429a      	cmp	r2, r3
 8008060:	d10d      	bne.n	800807e <UART_Start_Receive_IT+0x56>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d104      	bne.n	8008074 <UART_Start_Receive_IT+0x4c>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	225c      	movs	r2, #92	; 0x5c
 800806e:	4950      	ldr	r1, [pc, #320]	; (80081b0 <UART_Start_Receive_IT+0x188>)
 8008070:	5299      	strh	r1, [r3, r2]
 8008072:	e02e      	b.n	80080d2 <UART_Start_Receive_IT+0xaa>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	225c      	movs	r2, #92	; 0x5c
 8008078:	21ff      	movs	r1, #255	; 0xff
 800807a:	5299      	strh	r1, [r3, r2]
 800807c:	e029      	b.n	80080d2 <UART_Start_Receive_IT+0xaa>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10d      	bne.n	80080a2 <UART_Start_Receive_IT+0x7a>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d104      	bne.n	8008098 <UART_Start_Receive_IT+0x70>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	225c      	movs	r2, #92	; 0x5c
 8008092:	21ff      	movs	r1, #255	; 0xff
 8008094:	5299      	strh	r1, [r3, r2]
 8008096:	e01c      	b.n	80080d2 <UART_Start_Receive_IT+0xaa>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	225c      	movs	r2, #92	; 0x5c
 800809c:	217f      	movs	r1, #127	; 0x7f
 800809e:	5299      	strh	r1, [r3, r2]
 80080a0:	e017      	b.n	80080d2 <UART_Start_Receive_IT+0xaa>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	689a      	ldr	r2, [r3, #8]
 80080a6:	2380      	movs	r3, #128	; 0x80
 80080a8:	055b      	lsls	r3, r3, #21
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d10d      	bne.n	80080ca <UART_Start_Receive_IT+0xa2>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d104      	bne.n	80080c0 <UART_Start_Receive_IT+0x98>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	225c      	movs	r2, #92	; 0x5c
 80080ba:	217f      	movs	r1, #127	; 0x7f
 80080bc:	5299      	strh	r1, [r3, r2]
 80080be:	e008      	b.n	80080d2 <UART_Start_Receive_IT+0xaa>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	225c      	movs	r2, #92	; 0x5c
 80080c4:	213f      	movs	r1, #63	; 0x3f
 80080c6:	5299      	strh	r1, [r3, r2]
 80080c8:	e003      	b.n	80080d2 <UART_Start_Receive_IT+0xaa>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	225c      	movs	r2, #92	; 0x5c
 80080ce:	2100      	movs	r1, #0
 80080d0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2284      	movs	r2, #132	; 0x84
 80080d6:	2100      	movs	r1, #0
 80080d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2280      	movs	r2, #128	; 0x80
 80080de:	2122      	movs	r1, #34	; 0x22
 80080e0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080e2:	f3ef 8310 	mrs	r3, PRIMASK
 80080e6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080ec:	2301      	movs	r3, #1
 80080ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f2:	f383 8810 	msr	PRIMASK, r3
}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	689a      	ldr	r2, [r3, #8]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2101      	movs	r1, #1
 8008104:	430a      	orrs	r2, r1
 8008106:	609a      	str	r2, [r3, #8]
 8008108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800810a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	f383 8810 	msr	PRIMASK, r3
}
 8008112:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	2380      	movs	r3, #128	; 0x80
 800811a:	015b      	lsls	r3, r3, #5
 800811c:	429a      	cmp	r2, r3
 800811e:	d107      	bne.n	8008130 <UART_Start_Receive_IT+0x108>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d103      	bne.n	8008130 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4a22      	ldr	r2, [pc, #136]	; (80081b4 <UART_Start_Receive_IT+0x18c>)
 800812c:	669a      	str	r2, [r3, #104]	; 0x68
 800812e:	e002      	b.n	8008136 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4a21      	ldr	r2, [pc, #132]	; (80081b8 <UART_Start_Receive_IT+0x190>)
 8008134:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d019      	beq.n	8008172 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800813e:	f3ef 8310 	mrs	r3, PRIMASK
 8008142:	61fb      	str	r3, [r7, #28]
  return(result);
 8008144:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008146:	637b      	str	r3, [r7, #52]	; 0x34
 8008148:	2301      	movs	r3, #1
 800814a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	f383 8810 	msr	PRIMASK, r3
}
 8008152:	46c0      	nop			; (mov r8, r8)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2190      	movs	r1, #144	; 0x90
 8008160:	0049      	lsls	r1, r1, #1
 8008162:	430a      	orrs	r2, r1
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008168:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	f383 8810 	msr	PRIMASK, r3
}
 8008170:	e018      	b.n	80081a4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008172:	f3ef 8310 	mrs	r3, PRIMASK
 8008176:	613b      	str	r3, [r7, #16]
  return(result);
 8008178:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800817a:	63bb      	str	r3, [r7, #56]	; 0x38
 800817c:	2301      	movs	r3, #1
 800817e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f383 8810 	msr	PRIMASK, r3
}
 8008186:	46c0      	nop			; (mov r8, r8)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2120      	movs	r1, #32
 8008194:	430a      	orrs	r2, r1
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	f383 8810 	msr	PRIMASK, r3
}
 80081a2:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	0018      	movs	r0, r3
 80081a8:	46bd      	mov	sp, r7
 80081aa:	b010      	add	sp, #64	; 0x40
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	46c0      	nop			; (mov r8, r8)
 80081b0:	000001ff 	.word	0x000001ff
 80081b4:	0800863d 	.word	0x0800863d
 80081b8:	08008479 	.word	0x08008479

080081bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08e      	sub	sp, #56	; 0x38
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081c4:	f3ef 8310 	mrs	r3, PRIMASK
 80081c8:	617b      	str	r3, [r7, #20]
  return(result);
 80081ca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081cc:	637b      	str	r3, [r7, #52]	; 0x34
 80081ce:	2301      	movs	r3, #1
 80081d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	f383 8810 	msr	PRIMASK, r3
}
 80081d8:	46c0      	nop			; (mov r8, r8)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4926      	ldr	r1, [pc, #152]	; (8008280 <UART_EndRxTransfer+0xc4>)
 80081e6:	400a      	ands	r2, r1
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	f383 8810 	msr	PRIMASK, r3
}
 80081f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f6:	f3ef 8310 	mrs	r3, PRIMASK
 80081fa:	623b      	str	r3, [r7, #32]
  return(result);
 80081fc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fe:	633b      	str	r3, [r7, #48]	; 0x30
 8008200:	2301      	movs	r3, #1
 8008202:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	f383 8810 	msr	PRIMASK, r3
}
 800820a:	46c0      	nop			; (mov r8, r8)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689a      	ldr	r2, [r3, #8]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2101      	movs	r1, #1
 8008218:	438a      	bics	r2, r1
 800821a:	609a      	str	r2, [r3, #8]
 800821c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	f383 8810 	msr	PRIMASK, r3
}
 8008226:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822c:	2b01      	cmp	r3, #1
 800822e:	d118      	bne.n	8008262 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008230:	f3ef 8310 	mrs	r3, PRIMASK
 8008234:	60bb      	str	r3, [r7, #8]
  return(result);
 8008236:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800823a:	2301      	movs	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f383 8810 	msr	PRIMASK, r3
}
 8008244:	46c0      	nop			; (mov r8, r8)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2110      	movs	r1, #16
 8008252:	438a      	bics	r2, r1
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	f383 8810 	msr	PRIMASK, r3
}
 8008260:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2280      	movs	r2, #128	; 0x80
 8008266:	2120      	movs	r1, #32
 8008268:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008276:	46c0      	nop			; (mov r8, r8)
 8008278:	46bd      	mov	sp, r7
 800827a:	b00e      	add	sp, #56	; 0x38
 800827c:	bd80      	pop	{r7, pc}
 800827e:	46c0      	nop			; (mov r8, r8)
 8008280:	fffffedf 	.word	0xfffffedf

08008284 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008290:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	225a      	movs	r2, #90	; 0x5a
 8008296:	2100      	movs	r1, #0
 8008298:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2252      	movs	r2, #82	; 0x52
 800829e:	2100      	movs	r1, #0
 80082a0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	0018      	movs	r0, r3
 80082a6:	f7ff fa61 	bl	800776c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082aa:	46c0      	nop			; (mov r8, r8)
 80082ac:	46bd      	mov	sp, r7
 80082ae:	b004      	add	sp, #16
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b08a      	sub	sp, #40	; 0x28
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082be:	2b21      	cmp	r3, #33	; 0x21
 80082c0:	d14c      	bne.n	800835c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2252      	movs	r2, #82	; 0x52
 80082c6:	5a9b      	ldrh	r3, [r3, r2]
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d132      	bne.n	8008334 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082ce:	f3ef 8310 	mrs	r3, PRIMASK
 80082d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80082d4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
 80082d8:	2301      	movs	r3, #1
 80082da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f383 8810 	msr	PRIMASK, r3
}
 80082e2:	46c0      	nop			; (mov r8, r8)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2180      	movs	r1, #128	; 0x80
 80082f0:	438a      	bics	r2, r1
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	f383 8810 	msr	PRIMASK, r3
}
 80082fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008300:	f3ef 8310 	mrs	r3, PRIMASK
 8008304:	617b      	str	r3, [r7, #20]
  return(result);
 8008306:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008308:	623b      	str	r3, [r7, #32]
 800830a:	2301      	movs	r3, #1
 800830c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	f383 8810 	msr	PRIMASK, r3
}
 8008314:	46c0      	nop			; (mov r8, r8)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2140      	movs	r1, #64	; 0x40
 8008322:	430a      	orrs	r2, r1
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	f383 8810 	msr	PRIMASK, r3
}
 8008330:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008332:	e013      	b.n	800835c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008338:	781a      	ldrb	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2252      	movs	r2, #82	; 0x52
 800834e:	5a9b      	ldrh	r3, [r3, r2]
 8008350:	b29b      	uxth	r3, r3
 8008352:	3b01      	subs	r3, #1
 8008354:	b299      	uxth	r1, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2252      	movs	r2, #82	; 0x52
 800835a:	5299      	strh	r1, [r3, r2]
}
 800835c:	46c0      	nop			; (mov r8, r8)
 800835e:	46bd      	mov	sp, r7
 8008360:	b00a      	add	sp, #40	; 0x28
 8008362:	bd80      	pop	{r7, pc}

08008364 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b08c      	sub	sp, #48	; 0x30
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008370:	2b21      	cmp	r3, #33	; 0x21
 8008372:	d151      	bne.n	8008418 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2252      	movs	r2, #82	; 0x52
 8008378:	5a9b      	ldrh	r3, [r3, r2]
 800837a:	b29b      	uxth	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d132      	bne.n	80083e6 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008380:	f3ef 8310 	mrs	r3, PRIMASK
 8008384:	60fb      	str	r3, [r7, #12]
  return(result);
 8008386:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008388:	62bb      	str	r3, [r7, #40]	; 0x28
 800838a:	2301      	movs	r3, #1
 800838c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	f383 8810 	msr	PRIMASK, r3
}
 8008394:	46c0      	nop			; (mov r8, r8)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2180      	movs	r1, #128	; 0x80
 80083a2:	438a      	bics	r2, r1
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f383 8810 	msr	PRIMASK, r3
}
 80083b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083b2:	f3ef 8310 	mrs	r3, PRIMASK
 80083b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80083b8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24
 80083bc:	2301      	movs	r3, #1
 80083be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f383 8810 	msr	PRIMASK, r3
}
 80083c6:	46c0      	nop			; (mov r8, r8)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2140      	movs	r1, #64	; 0x40
 80083d4:	430a      	orrs	r2, r1
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083dc:	6a3b      	ldr	r3, [r7, #32]
 80083de:	f383 8810 	msr	PRIMASK, r3
}
 80083e2:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80083e4:	e018      	b.n	8008418 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	001a      	movs	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	05d2      	lsls	r2, r2, #23
 80083f8:	0dd2      	lsrs	r2, r2, #23
 80083fa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008400:	1c9a      	adds	r2, r3, #2
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2252      	movs	r2, #82	; 0x52
 800840a:	5a9b      	ldrh	r3, [r3, r2]
 800840c:	b29b      	uxth	r3, r3
 800840e:	3b01      	subs	r3, #1
 8008410:	b299      	uxth	r1, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2252      	movs	r2, #82	; 0x52
 8008416:	5299      	strh	r1, [r3, r2]
}
 8008418:	46c0      	nop			; (mov r8, r8)
 800841a:	46bd      	mov	sp, r7
 800841c:	b00c      	add	sp, #48	; 0x30
 800841e:	bd80      	pop	{r7, pc}

08008420 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008428:	f3ef 8310 	mrs	r3, PRIMASK
 800842c:	60bb      	str	r3, [r7, #8]
  return(result);
 800842e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008430:	617b      	str	r3, [r7, #20]
 8008432:	2301      	movs	r3, #1
 8008434:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f383 8810 	msr	PRIMASK, r3
}
 800843c:	46c0      	nop			; (mov r8, r8)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2140      	movs	r1, #64	; 0x40
 800844a:	438a      	bics	r2, r1
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f383 8810 	msr	PRIMASK, r3
}
 8008458:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	0018      	movs	r0, r3
 800846a:	f7ff f977 	bl	800775c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800846e:	46c0      	nop			; (mov r8, r8)
 8008470:	46bd      	mov	sp, r7
 8008472:	b006      	add	sp, #24
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b094      	sub	sp, #80	; 0x50
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008480:	204e      	movs	r0, #78	; 0x4e
 8008482:	183b      	adds	r3, r7, r0
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	215c      	movs	r1, #92	; 0x5c
 8008488:	5a52      	ldrh	r2, [r2, r1]
 800848a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2280      	movs	r2, #128	; 0x80
 8008490:	589b      	ldr	r3, [r3, r2]
 8008492:	2b22      	cmp	r3, #34	; 0x22
 8008494:	d000      	beq.n	8008498 <UART_RxISR_8BIT+0x20>
 8008496:	e0bf      	b.n	8008618 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800849e:	214c      	movs	r1, #76	; 0x4c
 80084a0:	187b      	adds	r3, r7, r1
 80084a2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084a4:	187b      	adds	r3, r7, r1
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	183b      	adds	r3, r7, r0
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	b2d9      	uxtb	r1, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b4:	400a      	ands	r2, r1
 80084b6:	b2d2      	uxtb	r2, r2
 80084b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	225a      	movs	r2, #90	; 0x5a
 80084c8:	5a9b      	ldrh	r3, [r3, r2]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	3b01      	subs	r3, #1
 80084ce:	b299      	uxth	r1, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	225a      	movs	r2, #90	; 0x5a
 80084d4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	225a      	movs	r2, #90	; 0x5a
 80084da:	5a9b      	ldrh	r3, [r3, r2]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d000      	beq.n	80084e4 <UART_RxISR_8BIT+0x6c>
 80084e2:	e0a1      	b.n	8008628 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084e4:	f3ef 8310 	mrs	r3, PRIMASK
 80084e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ee:	2301      	movs	r3, #1
 80084f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f4:	f383 8810 	msr	PRIMASK, r3
}
 80084f8:	46c0      	nop			; (mov r8, r8)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	494a      	ldr	r1, [pc, #296]	; (8008630 <UART_RxISR_8BIT+0x1b8>)
 8008506:	400a      	ands	r2, r1
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800850c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	f383 8810 	msr	PRIMASK, r3
}
 8008514:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008516:	f3ef 8310 	mrs	r3, PRIMASK
 800851a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800851e:	647b      	str	r3, [r7, #68]	; 0x44
 8008520:	2301      	movs	r3, #1
 8008522:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008526:	f383 8810 	msr	PRIMASK, r3
}
 800852a:	46c0      	nop			; (mov r8, r8)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689a      	ldr	r2, [r3, #8]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2101      	movs	r1, #1
 8008538:	438a      	bics	r2, r1
 800853a:	609a      	str	r2, [r3, #8]
 800853c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800853e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008542:	f383 8810 	msr	PRIMASK, r3
}
 8008546:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2280      	movs	r2, #128	; 0x80
 800854c:	2120      	movs	r1, #32
 800854e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a34      	ldr	r2, [pc, #208]	; (8008634 <UART_RxISR_8BIT+0x1bc>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d01f      	beq.n	80085a6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	2380      	movs	r3, #128	; 0x80
 800856e:	041b      	lsls	r3, r3, #16
 8008570:	4013      	ands	r3, r2
 8008572:	d018      	beq.n	80085a6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008574:	f3ef 8310 	mrs	r3, PRIMASK
 8008578:	61bb      	str	r3, [r7, #24]
  return(result);
 800857a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800857c:	643b      	str	r3, [r7, #64]	; 0x40
 800857e:	2301      	movs	r3, #1
 8008580:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	f383 8810 	msr	PRIMASK, r3
}
 8008588:	46c0      	nop			; (mov r8, r8)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4928      	ldr	r1, [pc, #160]	; (8008638 <UART_RxISR_8BIT+0x1c0>)
 8008596:	400a      	ands	r2, r1
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800859c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	f383 8810 	msr	PRIMASK, r3
}
 80085a4:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d12f      	bne.n	800860e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085b4:	f3ef 8310 	mrs	r3, PRIMASK
 80085b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80085ba:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085be:	2301      	movs	r3, #1
 80085c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f383 8810 	msr	PRIMASK, r3
}
 80085c8:	46c0      	nop			; (mov r8, r8)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2110      	movs	r1, #16
 80085d6:	438a      	bics	r2, r1
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f383 8810 	msr	PRIMASK, r3
}
 80085e4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	69db      	ldr	r3, [r3, #28]
 80085ec:	2210      	movs	r2, #16
 80085ee:	4013      	ands	r3, r2
 80085f0:	2b10      	cmp	r3, #16
 80085f2:	d103      	bne.n	80085fc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2210      	movs	r2, #16
 80085fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2258      	movs	r2, #88	; 0x58
 8008600:	5a9a      	ldrh	r2, [r3, r2]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	0011      	movs	r1, r2
 8008606:	0018      	movs	r0, r3
 8008608:	f7ff f8b8 	bl	800777c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800860c:	e00c      	b.n	8008628 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	0018      	movs	r0, r3
 8008612:	f7fa f9db 	bl	80029cc <HAL_UART_RxCpltCallback>
}
 8008616:	e007      	b.n	8008628 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699a      	ldr	r2, [r3, #24]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2108      	movs	r1, #8
 8008624:	430a      	orrs	r2, r1
 8008626:	619a      	str	r2, [r3, #24]
}
 8008628:	46c0      	nop			; (mov r8, r8)
 800862a:	46bd      	mov	sp, r7
 800862c:	b014      	add	sp, #80	; 0x50
 800862e:	bd80      	pop	{r7, pc}
 8008630:	fffffedf 	.word	0xfffffedf
 8008634:	40004800 	.word	0x40004800
 8008638:	fbffffff 	.word	0xfbffffff

0800863c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b094      	sub	sp, #80	; 0x50
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008644:	204e      	movs	r0, #78	; 0x4e
 8008646:	183b      	adds	r3, r7, r0
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	215c      	movs	r1, #92	; 0x5c
 800864c:	5a52      	ldrh	r2, [r2, r1]
 800864e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2280      	movs	r2, #128	; 0x80
 8008654:	589b      	ldr	r3, [r3, r2]
 8008656:	2b22      	cmp	r3, #34	; 0x22
 8008658:	d000      	beq.n	800865c <UART_RxISR_16BIT+0x20>
 800865a:	e0bf      	b.n	80087dc <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008662:	214c      	movs	r1, #76	; 0x4c
 8008664:	187b      	adds	r3, r7, r1
 8008666:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800866e:	187b      	adds	r3, r7, r1
 8008670:	183a      	adds	r2, r7, r0
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	8812      	ldrh	r2, [r2, #0]
 8008676:	4013      	ands	r3, r2
 8008678:	b29a      	uxth	r2, r3
 800867a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800867c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008682:	1c9a      	adds	r2, r3, #2
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	225a      	movs	r2, #90	; 0x5a
 800868c:	5a9b      	ldrh	r3, [r3, r2]
 800868e:	b29b      	uxth	r3, r3
 8008690:	3b01      	subs	r3, #1
 8008692:	b299      	uxth	r1, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	225a      	movs	r2, #90	; 0x5a
 8008698:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	225a      	movs	r2, #90	; 0x5a
 800869e:	5a9b      	ldrh	r3, [r3, r2]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d000      	beq.n	80086a8 <UART_RxISR_16BIT+0x6c>
 80086a6:	e0a1      	b.n	80087ec <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086a8:	f3ef 8310 	mrs	r3, PRIMASK
 80086ac:	623b      	str	r3, [r7, #32]
  return(result);
 80086ae:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086b0:	647b      	str	r3, [r7, #68]	; 0x44
 80086b2:	2301      	movs	r3, #1
 80086b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	f383 8810 	msr	PRIMASK, r3
}
 80086bc:	46c0      	nop			; (mov r8, r8)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	494a      	ldr	r1, [pc, #296]	; (80087f4 <UART_RxISR_16BIT+0x1b8>)
 80086ca:	400a      	ands	r2, r1
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	f383 8810 	msr	PRIMASK, r3
}
 80086d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086da:	f3ef 8310 	mrs	r3, PRIMASK
 80086de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80086e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e2:	643b      	str	r3, [r7, #64]	; 0x40
 80086e4:	2301      	movs	r3, #1
 80086e6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	f383 8810 	msr	PRIMASK, r3
}
 80086ee:	46c0      	nop			; (mov r8, r8)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689a      	ldr	r2, [r3, #8]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2101      	movs	r1, #1
 80086fc:	438a      	bics	r2, r1
 80086fe:	609a      	str	r2, [r3, #8]
 8008700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008702:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008706:	f383 8810 	msr	PRIMASK, r3
}
 800870a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2280      	movs	r2, #128	; 0x80
 8008710:	2120      	movs	r1, #32
 8008712:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a34      	ldr	r2, [pc, #208]	; (80087f8 <UART_RxISR_16BIT+0x1bc>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d01f      	beq.n	800876a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	2380      	movs	r3, #128	; 0x80
 8008732:	041b      	lsls	r3, r3, #16
 8008734:	4013      	ands	r3, r2
 8008736:	d018      	beq.n	800876a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008738:	f3ef 8310 	mrs	r3, PRIMASK
 800873c:	617b      	str	r3, [r7, #20]
  return(result);
 800873e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008742:	2301      	movs	r3, #1
 8008744:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	f383 8810 	msr	PRIMASK, r3
}
 800874c:	46c0      	nop			; (mov r8, r8)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4928      	ldr	r1, [pc, #160]	; (80087fc <UART_RxISR_16BIT+0x1c0>)
 800875a:	400a      	ands	r2, r1
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008760:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	f383 8810 	msr	PRIMASK, r3
}
 8008768:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800876e:	2b01      	cmp	r3, #1
 8008770:	d12f      	bne.n	80087d2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008778:	f3ef 8310 	mrs	r3, PRIMASK
 800877c:	60bb      	str	r3, [r7, #8]
  return(result);
 800877e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008780:	63bb      	str	r3, [r7, #56]	; 0x38
 8008782:	2301      	movs	r3, #1
 8008784:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f383 8810 	msr	PRIMASK, r3
}
 800878c:	46c0      	nop			; (mov r8, r8)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2110      	movs	r1, #16
 800879a:	438a      	bics	r2, r1
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f383 8810 	msr	PRIMASK, r3
}
 80087a8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	2210      	movs	r2, #16
 80087b2:	4013      	ands	r3, r2
 80087b4:	2b10      	cmp	r3, #16
 80087b6:	d103      	bne.n	80087c0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2210      	movs	r2, #16
 80087be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2258      	movs	r2, #88	; 0x58
 80087c4:	5a9a      	ldrh	r2, [r3, r2]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	0011      	movs	r1, r2
 80087ca:	0018      	movs	r0, r3
 80087cc:	f7fe ffd6 	bl	800777c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087d0:	e00c      	b.n	80087ec <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	0018      	movs	r0, r3
 80087d6:	f7fa f8f9 	bl	80029cc <HAL_UART_RxCpltCallback>
}
 80087da:	e007      	b.n	80087ec <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	699a      	ldr	r2, [r3, #24]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2108      	movs	r1, #8
 80087e8:	430a      	orrs	r2, r1
 80087ea:	619a      	str	r2, [r3, #24]
}
 80087ec:	46c0      	nop			; (mov r8, r8)
 80087ee:	46bd      	mov	sp, r7
 80087f0:	b014      	add	sp, #80	; 0x50
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	fffffedf 	.word	0xfffffedf
 80087f8:	40004800 	.word	0x40004800
 80087fc:	fbffffff 	.word	0xfbffffff

08008800 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008808:	46c0      	nop			; (mov r8, r8)
 800880a:	46bd      	mov	sp, r7
 800880c:	b002      	add	sp, #8
 800880e:	bd80      	pop	{r7, pc}

08008810 <__cvt>:
 8008810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008812:	001e      	movs	r6, r3
 8008814:	2300      	movs	r3, #0
 8008816:	0014      	movs	r4, r2
 8008818:	b08b      	sub	sp, #44	; 0x2c
 800881a:	429e      	cmp	r6, r3
 800881c:	da04      	bge.n	8008828 <__cvt+0x18>
 800881e:	2180      	movs	r1, #128	; 0x80
 8008820:	0609      	lsls	r1, r1, #24
 8008822:	1873      	adds	r3, r6, r1
 8008824:	001e      	movs	r6, r3
 8008826:	232d      	movs	r3, #45	; 0x2d
 8008828:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800882a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800882c:	7013      	strb	r3, [r2, #0]
 800882e:	2320      	movs	r3, #32
 8008830:	2203      	movs	r2, #3
 8008832:	439f      	bics	r7, r3
 8008834:	2f46      	cmp	r7, #70	; 0x46
 8008836:	d007      	beq.n	8008848 <__cvt+0x38>
 8008838:	003b      	movs	r3, r7
 800883a:	3b45      	subs	r3, #69	; 0x45
 800883c:	4259      	negs	r1, r3
 800883e:	414b      	adcs	r3, r1
 8008840:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008842:	3a01      	subs	r2, #1
 8008844:	18cb      	adds	r3, r1, r3
 8008846:	9310      	str	r3, [sp, #64]	; 0x40
 8008848:	ab09      	add	r3, sp, #36	; 0x24
 800884a:	9304      	str	r3, [sp, #16]
 800884c:	ab08      	add	r3, sp, #32
 800884e:	9303      	str	r3, [sp, #12]
 8008850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008852:	9200      	str	r2, [sp, #0]
 8008854:	9302      	str	r3, [sp, #8]
 8008856:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008858:	0022      	movs	r2, r4
 800885a:	9301      	str	r3, [sp, #4]
 800885c:	0033      	movs	r3, r6
 800885e:	f001 f8b3 	bl	80099c8 <_dtoa_r>
 8008862:	0005      	movs	r5, r0
 8008864:	2f47      	cmp	r7, #71	; 0x47
 8008866:	d102      	bne.n	800886e <__cvt+0x5e>
 8008868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800886a:	07db      	lsls	r3, r3, #31
 800886c:	d528      	bpl.n	80088c0 <__cvt+0xb0>
 800886e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008870:	18eb      	adds	r3, r5, r3
 8008872:	9307      	str	r3, [sp, #28]
 8008874:	2f46      	cmp	r7, #70	; 0x46
 8008876:	d114      	bne.n	80088a2 <__cvt+0x92>
 8008878:	782b      	ldrb	r3, [r5, #0]
 800887a:	2b30      	cmp	r3, #48	; 0x30
 800887c:	d10c      	bne.n	8008898 <__cvt+0x88>
 800887e:	2200      	movs	r2, #0
 8008880:	2300      	movs	r3, #0
 8008882:	0020      	movs	r0, r4
 8008884:	0031      	movs	r1, r6
 8008886:	f7f7 fde1 	bl	800044c <__aeabi_dcmpeq>
 800888a:	2800      	cmp	r0, #0
 800888c:	d104      	bne.n	8008898 <__cvt+0x88>
 800888e:	2301      	movs	r3, #1
 8008890:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008892:	1a9b      	subs	r3, r3, r2
 8008894:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800889a:	9a07      	ldr	r2, [sp, #28]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	18d3      	adds	r3, r2, r3
 80088a0:	9307      	str	r3, [sp, #28]
 80088a2:	2200      	movs	r2, #0
 80088a4:	2300      	movs	r3, #0
 80088a6:	0020      	movs	r0, r4
 80088a8:	0031      	movs	r1, r6
 80088aa:	f7f7 fdcf 	bl	800044c <__aeabi_dcmpeq>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d001      	beq.n	80088b6 <__cvt+0xa6>
 80088b2:	9b07      	ldr	r3, [sp, #28]
 80088b4:	9309      	str	r3, [sp, #36]	; 0x24
 80088b6:	2230      	movs	r2, #48	; 0x30
 80088b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ba:	9907      	ldr	r1, [sp, #28]
 80088bc:	428b      	cmp	r3, r1
 80088be:	d306      	bcc.n	80088ce <__cvt+0xbe>
 80088c0:	0028      	movs	r0, r5
 80088c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088c6:	1b5b      	subs	r3, r3, r5
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	b00b      	add	sp, #44	; 0x2c
 80088cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ce:	1c59      	adds	r1, r3, #1
 80088d0:	9109      	str	r1, [sp, #36]	; 0x24
 80088d2:	701a      	strb	r2, [r3, #0]
 80088d4:	e7f0      	b.n	80088b8 <__cvt+0xa8>

080088d6 <__exponent>:
 80088d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088d8:	1c83      	adds	r3, r0, #2
 80088da:	b087      	sub	sp, #28
 80088dc:	9303      	str	r3, [sp, #12]
 80088de:	0005      	movs	r5, r0
 80088e0:	000c      	movs	r4, r1
 80088e2:	232b      	movs	r3, #43	; 0x2b
 80088e4:	7002      	strb	r2, [r0, #0]
 80088e6:	2900      	cmp	r1, #0
 80088e8:	da01      	bge.n	80088ee <__exponent+0x18>
 80088ea:	424c      	negs	r4, r1
 80088ec:	3302      	adds	r3, #2
 80088ee:	706b      	strb	r3, [r5, #1]
 80088f0:	2c09      	cmp	r4, #9
 80088f2:	dd2f      	ble.n	8008954 <__exponent+0x7e>
 80088f4:	270a      	movs	r7, #10
 80088f6:	ab04      	add	r3, sp, #16
 80088f8:	1dde      	adds	r6, r3, #7
 80088fa:	0020      	movs	r0, r4
 80088fc:	0039      	movs	r1, r7
 80088fe:	9601      	str	r6, [sp, #4]
 8008900:	f7f7 fd8e 	bl	8000420 <__aeabi_idivmod>
 8008904:	3e01      	subs	r6, #1
 8008906:	3130      	adds	r1, #48	; 0x30
 8008908:	0020      	movs	r0, r4
 800890a:	7031      	strb	r1, [r6, #0]
 800890c:	0039      	movs	r1, r7
 800890e:	9402      	str	r4, [sp, #8]
 8008910:	f7f7 fca0 	bl	8000254 <__divsi3>
 8008914:	9b02      	ldr	r3, [sp, #8]
 8008916:	0004      	movs	r4, r0
 8008918:	2b63      	cmp	r3, #99	; 0x63
 800891a:	dcee      	bgt.n	80088fa <__exponent+0x24>
 800891c:	9b01      	ldr	r3, [sp, #4]
 800891e:	3430      	adds	r4, #48	; 0x30
 8008920:	1e9a      	subs	r2, r3, #2
 8008922:	0013      	movs	r3, r2
 8008924:	9903      	ldr	r1, [sp, #12]
 8008926:	7014      	strb	r4, [r2, #0]
 8008928:	a804      	add	r0, sp, #16
 800892a:	3007      	adds	r0, #7
 800892c:	4298      	cmp	r0, r3
 800892e:	d80c      	bhi.n	800894a <__exponent+0x74>
 8008930:	2300      	movs	r3, #0
 8008932:	4282      	cmp	r2, r0
 8008934:	d804      	bhi.n	8008940 <__exponent+0x6a>
 8008936:	aa04      	add	r2, sp, #16
 8008938:	3309      	adds	r3, #9
 800893a:	189b      	adds	r3, r3, r2
 800893c:	9a01      	ldr	r2, [sp, #4]
 800893e:	1a9b      	subs	r3, r3, r2
 8008940:	9a03      	ldr	r2, [sp, #12]
 8008942:	18d3      	adds	r3, r2, r3
 8008944:	1b58      	subs	r0, r3, r5
 8008946:	b007      	add	sp, #28
 8008948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800894a:	7818      	ldrb	r0, [r3, #0]
 800894c:	3301      	adds	r3, #1
 800894e:	7008      	strb	r0, [r1, #0]
 8008950:	3101      	adds	r1, #1
 8008952:	e7e9      	b.n	8008928 <__exponent+0x52>
 8008954:	2330      	movs	r3, #48	; 0x30
 8008956:	3430      	adds	r4, #48	; 0x30
 8008958:	70ab      	strb	r3, [r5, #2]
 800895a:	70ec      	strb	r4, [r5, #3]
 800895c:	1d2b      	adds	r3, r5, #4
 800895e:	e7f1      	b.n	8008944 <__exponent+0x6e>

08008960 <_printf_float>:
 8008960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008962:	b095      	sub	sp, #84	; 0x54
 8008964:	000c      	movs	r4, r1
 8008966:	9208      	str	r2, [sp, #32]
 8008968:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800896a:	9309      	str	r3, [sp, #36]	; 0x24
 800896c:	0007      	movs	r7, r0
 800896e:	f000 ff0d 	bl	800978c <_localeconv_r>
 8008972:	6803      	ldr	r3, [r0, #0]
 8008974:	0018      	movs	r0, r3
 8008976:	930c      	str	r3, [sp, #48]	; 0x30
 8008978:	f7f7 fbc6 	bl	8000108 <strlen>
 800897c:	2300      	movs	r3, #0
 800897e:	9312      	str	r3, [sp, #72]	; 0x48
 8008980:	7e23      	ldrb	r3, [r4, #24]
 8008982:	2207      	movs	r2, #7
 8008984:	930a      	str	r3, [sp, #40]	; 0x28
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	900d      	str	r0, [sp, #52]	; 0x34
 800898a:	930b      	str	r3, [sp, #44]	; 0x2c
 800898c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800898e:	682b      	ldr	r3, [r5, #0]
 8008990:	05c9      	lsls	r1, r1, #23
 8008992:	d547      	bpl.n	8008a24 <_printf_float+0xc4>
 8008994:	189b      	adds	r3, r3, r2
 8008996:	4393      	bics	r3, r2
 8008998:	001a      	movs	r2, r3
 800899a:	3208      	adds	r2, #8
 800899c:	602a      	str	r2, [r5, #0]
 800899e:	681e      	ldr	r6, [r3, #0]
 80089a0:	685d      	ldr	r5, [r3, #4]
 80089a2:	0032      	movs	r2, r6
 80089a4:	002b      	movs	r3, r5
 80089a6:	64a2      	str	r2, [r4, #72]	; 0x48
 80089a8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80089aa:	2201      	movs	r2, #1
 80089ac:	006b      	lsls	r3, r5, #1
 80089ae:	085b      	lsrs	r3, r3, #1
 80089b0:	930e      	str	r3, [sp, #56]	; 0x38
 80089b2:	0030      	movs	r0, r6
 80089b4:	4bab      	ldr	r3, [pc, #684]	; (8008c64 <_printf_float+0x304>)
 80089b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80089b8:	4252      	negs	r2, r2
 80089ba:	f7f9 fc9d 	bl	80022f8 <__aeabi_dcmpun>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d132      	bne.n	8008a28 <_printf_float+0xc8>
 80089c2:	2201      	movs	r2, #1
 80089c4:	0030      	movs	r0, r6
 80089c6:	4ba7      	ldr	r3, [pc, #668]	; (8008c64 <_printf_float+0x304>)
 80089c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80089ca:	4252      	negs	r2, r2
 80089cc:	f7f7 fd4e 	bl	800046c <__aeabi_dcmple>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d129      	bne.n	8008a28 <_printf_float+0xc8>
 80089d4:	2200      	movs	r2, #0
 80089d6:	2300      	movs	r3, #0
 80089d8:	0030      	movs	r0, r6
 80089da:	0029      	movs	r1, r5
 80089dc:	f7f7 fd3c 	bl	8000458 <__aeabi_dcmplt>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d003      	beq.n	80089ec <_printf_float+0x8c>
 80089e4:	0023      	movs	r3, r4
 80089e6:	222d      	movs	r2, #45	; 0x2d
 80089e8:	3343      	adds	r3, #67	; 0x43
 80089ea:	701a      	strb	r2, [r3, #0]
 80089ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ee:	4d9e      	ldr	r5, [pc, #632]	; (8008c68 <_printf_float+0x308>)
 80089f0:	2b47      	cmp	r3, #71	; 0x47
 80089f2:	d900      	bls.n	80089f6 <_printf_float+0x96>
 80089f4:	4d9d      	ldr	r5, [pc, #628]	; (8008c6c <_printf_float+0x30c>)
 80089f6:	2303      	movs	r3, #3
 80089f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089fa:	6123      	str	r3, [r4, #16]
 80089fc:	3301      	adds	r3, #1
 80089fe:	439a      	bics	r2, r3
 8008a00:	2300      	movs	r3, #0
 8008a02:	6022      	str	r2, [r4, #0]
 8008a04:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a08:	0021      	movs	r1, r4
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	0038      	movs	r0, r7
 8008a0e:	9b08      	ldr	r3, [sp, #32]
 8008a10:	aa13      	add	r2, sp, #76	; 0x4c
 8008a12:	f000 f9fb 	bl	8008e0c <_printf_common>
 8008a16:	3001      	adds	r0, #1
 8008a18:	d000      	beq.n	8008a1c <_printf_float+0xbc>
 8008a1a:	e0a3      	b.n	8008b64 <_printf_float+0x204>
 8008a1c:	2001      	movs	r0, #1
 8008a1e:	4240      	negs	r0, r0
 8008a20:	b015      	add	sp, #84	; 0x54
 8008a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a24:	3307      	adds	r3, #7
 8008a26:	e7b6      	b.n	8008996 <_printf_float+0x36>
 8008a28:	0032      	movs	r2, r6
 8008a2a:	002b      	movs	r3, r5
 8008a2c:	0030      	movs	r0, r6
 8008a2e:	0029      	movs	r1, r5
 8008a30:	f7f9 fc62 	bl	80022f8 <__aeabi_dcmpun>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d00b      	beq.n	8008a50 <_printf_float+0xf0>
 8008a38:	2d00      	cmp	r5, #0
 8008a3a:	da03      	bge.n	8008a44 <_printf_float+0xe4>
 8008a3c:	0023      	movs	r3, r4
 8008a3e:	222d      	movs	r2, #45	; 0x2d
 8008a40:	3343      	adds	r3, #67	; 0x43
 8008a42:	701a      	strb	r2, [r3, #0]
 8008a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a46:	4d8a      	ldr	r5, [pc, #552]	; (8008c70 <_printf_float+0x310>)
 8008a48:	2b47      	cmp	r3, #71	; 0x47
 8008a4a:	d9d4      	bls.n	80089f6 <_printf_float+0x96>
 8008a4c:	4d89      	ldr	r5, [pc, #548]	; (8008c74 <_printf_float+0x314>)
 8008a4e:	e7d2      	b.n	80089f6 <_printf_float+0x96>
 8008a50:	2220      	movs	r2, #32
 8008a52:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a54:	6863      	ldr	r3, [r4, #4]
 8008a56:	4391      	bics	r1, r2
 8008a58:	910e      	str	r1, [sp, #56]	; 0x38
 8008a5a:	1c5a      	adds	r2, r3, #1
 8008a5c:	d14a      	bne.n	8008af4 <_printf_float+0x194>
 8008a5e:	3307      	adds	r3, #7
 8008a60:	6063      	str	r3, [r4, #4]
 8008a62:	2380      	movs	r3, #128	; 0x80
 8008a64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a66:	00db      	lsls	r3, r3, #3
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	9206      	str	r2, [sp, #24]
 8008a6e:	aa12      	add	r2, sp, #72	; 0x48
 8008a70:	9205      	str	r2, [sp, #20]
 8008a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	9204      	str	r2, [sp, #16]
 8008a78:	aa11      	add	r2, sp, #68	; 0x44
 8008a7a:	9203      	str	r2, [sp, #12]
 8008a7c:	2223      	movs	r2, #35	; 0x23
 8008a7e:	a908      	add	r1, sp, #32
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	6863      	ldr	r3, [r4, #4]
 8008a84:	1852      	adds	r2, r2, r1
 8008a86:	9202      	str	r2, [sp, #8]
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	0032      	movs	r2, r6
 8008a8c:	002b      	movs	r3, r5
 8008a8e:	0038      	movs	r0, r7
 8008a90:	f7ff febe 	bl	8008810 <__cvt>
 8008a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a96:	0005      	movs	r5, r0
 8008a98:	2b47      	cmp	r3, #71	; 0x47
 8008a9a:	d109      	bne.n	8008ab0 <_printf_float+0x150>
 8008a9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a9e:	1cda      	adds	r2, r3, #3
 8008aa0:	db02      	blt.n	8008aa8 <_printf_float+0x148>
 8008aa2:	6862      	ldr	r2, [r4, #4]
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	dd49      	ble.n	8008b3c <_printf_float+0x1dc>
 8008aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aaa:	3b02      	subs	r3, #2
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	930a      	str	r3, [sp, #40]	; 0x28
 8008ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008ab4:	2b65      	cmp	r3, #101	; 0x65
 8008ab6:	d824      	bhi.n	8008b02 <_printf_float+0x1a2>
 8008ab8:	0020      	movs	r0, r4
 8008aba:	001a      	movs	r2, r3
 8008abc:	3901      	subs	r1, #1
 8008abe:	3050      	adds	r0, #80	; 0x50
 8008ac0:	9111      	str	r1, [sp, #68]	; 0x44
 8008ac2:	f7ff ff08 	bl	80088d6 <__exponent>
 8008ac6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ac8:	900b      	str	r0, [sp, #44]	; 0x2c
 8008aca:	1813      	adds	r3, r2, r0
 8008acc:	6123      	str	r3, [r4, #16]
 8008ace:	2a01      	cmp	r2, #1
 8008ad0:	dc02      	bgt.n	8008ad8 <_printf_float+0x178>
 8008ad2:	6822      	ldr	r2, [r4, #0]
 8008ad4:	07d2      	lsls	r2, r2, #31
 8008ad6:	d501      	bpl.n	8008adc <_printf_float+0x17c>
 8008ad8:	3301      	adds	r3, #1
 8008ada:	6123      	str	r3, [r4, #16]
 8008adc:	2323      	movs	r3, #35	; 0x23
 8008ade:	aa08      	add	r2, sp, #32
 8008ae0:	189b      	adds	r3, r3, r2
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d100      	bne.n	8008aea <_printf_float+0x18a>
 8008ae8:	e78d      	b.n	8008a06 <_printf_float+0xa6>
 8008aea:	0023      	movs	r3, r4
 8008aec:	222d      	movs	r2, #45	; 0x2d
 8008aee:	3343      	adds	r3, #67	; 0x43
 8008af0:	701a      	strb	r2, [r3, #0]
 8008af2:	e788      	b.n	8008a06 <_printf_float+0xa6>
 8008af4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008af6:	2a47      	cmp	r2, #71	; 0x47
 8008af8:	d1b3      	bne.n	8008a62 <_printf_float+0x102>
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1b1      	bne.n	8008a62 <_printf_float+0x102>
 8008afe:	3301      	adds	r3, #1
 8008b00:	e7ae      	b.n	8008a60 <_printf_float+0x100>
 8008b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b04:	2b66      	cmp	r3, #102	; 0x66
 8008b06:	d11b      	bne.n	8008b40 <_printf_float+0x1e0>
 8008b08:	6863      	ldr	r3, [r4, #4]
 8008b0a:	2900      	cmp	r1, #0
 8008b0c:	dd09      	ble.n	8008b22 <_printf_float+0x1c2>
 8008b0e:	6121      	str	r1, [r4, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d102      	bne.n	8008b1a <_printf_float+0x1ba>
 8008b14:	6822      	ldr	r2, [r4, #0]
 8008b16:	07d2      	lsls	r2, r2, #31
 8008b18:	d50b      	bpl.n	8008b32 <_printf_float+0x1d2>
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	185b      	adds	r3, r3, r1
 8008b1e:	6123      	str	r3, [r4, #16]
 8008b20:	e007      	b.n	8008b32 <_printf_float+0x1d2>
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d103      	bne.n	8008b2e <_printf_float+0x1ce>
 8008b26:	2201      	movs	r2, #1
 8008b28:	6821      	ldr	r1, [r4, #0]
 8008b2a:	4211      	tst	r1, r2
 8008b2c:	d000      	beq.n	8008b30 <_printf_float+0x1d0>
 8008b2e:	1c9a      	adds	r2, r3, #2
 8008b30:	6122      	str	r2, [r4, #16]
 8008b32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b34:	65a3      	str	r3, [r4, #88]	; 0x58
 8008b36:	2300      	movs	r3, #0
 8008b38:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b3a:	e7cf      	b.n	8008adc <_printf_float+0x17c>
 8008b3c:	2367      	movs	r3, #103	; 0x67
 8008b3e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008b42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b44:	4299      	cmp	r1, r3
 8008b46:	db06      	blt.n	8008b56 <_printf_float+0x1f6>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	6121      	str	r1, [r4, #16]
 8008b4c:	07db      	lsls	r3, r3, #31
 8008b4e:	d5f0      	bpl.n	8008b32 <_printf_float+0x1d2>
 8008b50:	3101      	adds	r1, #1
 8008b52:	6121      	str	r1, [r4, #16]
 8008b54:	e7ed      	b.n	8008b32 <_printf_float+0x1d2>
 8008b56:	2201      	movs	r2, #1
 8008b58:	2900      	cmp	r1, #0
 8008b5a:	dc01      	bgt.n	8008b60 <_printf_float+0x200>
 8008b5c:	1892      	adds	r2, r2, r2
 8008b5e:	1a52      	subs	r2, r2, r1
 8008b60:	189b      	adds	r3, r3, r2
 8008b62:	e7dc      	b.n	8008b1e <_printf_float+0x1be>
 8008b64:	6822      	ldr	r2, [r4, #0]
 8008b66:	0553      	lsls	r3, r2, #21
 8008b68:	d408      	bmi.n	8008b7c <_printf_float+0x21c>
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	002a      	movs	r2, r5
 8008b6e:	0038      	movs	r0, r7
 8008b70:	9908      	ldr	r1, [sp, #32]
 8008b72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b74:	47a8      	blx	r5
 8008b76:	3001      	adds	r0, #1
 8008b78:	d12a      	bne.n	8008bd0 <_printf_float+0x270>
 8008b7a:	e74f      	b.n	8008a1c <_printf_float+0xbc>
 8008b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b7e:	2b65      	cmp	r3, #101	; 0x65
 8008b80:	d800      	bhi.n	8008b84 <_printf_float+0x224>
 8008b82:	e0ec      	b.n	8008d5e <_printf_float+0x3fe>
 8008b84:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008b86:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f7f7 fc5e 	bl	800044c <__aeabi_dcmpeq>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d034      	beq.n	8008bfe <_printf_float+0x29e>
 8008b94:	2301      	movs	r3, #1
 8008b96:	0038      	movs	r0, r7
 8008b98:	4a37      	ldr	r2, [pc, #220]	; (8008c78 <_printf_float+0x318>)
 8008b9a:	9908      	ldr	r1, [sp, #32]
 8008b9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b9e:	47a8      	blx	r5
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	d100      	bne.n	8008ba6 <_printf_float+0x246>
 8008ba4:	e73a      	b.n	8008a1c <_printf_float+0xbc>
 8008ba6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008baa:	429a      	cmp	r2, r3
 8008bac:	db02      	blt.n	8008bb4 <_printf_float+0x254>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	07db      	lsls	r3, r3, #31
 8008bb2:	d50d      	bpl.n	8008bd0 <_printf_float+0x270>
 8008bb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008bb6:	0038      	movs	r0, r7
 8008bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bbc:	9908      	ldr	r1, [sp, #32]
 8008bbe:	47a8      	blx	r5
 8008bc0:	2500      	movs	r5, #0
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	d100      	bne.n	8008bc8 <_printf_float+0x268>
 8008bc6:	e729      	b.n	8008a1c <_printf_float+0xbc>
 8008bc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	42ab      	cmp	r3, r5
 8008bce:	dc0a      	bgt.n	8008be6 <_printf_float+0x286>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	079b      	lsls	r3, r3, #30
 8008bd4:	d500      	bpl.n	8008bd8 <_printf_float+0x278>
 8008bd6:	e116      	b.n	8008e06 <_printf_float+0x4a6>
 8008bd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bda:	68e0      	ldr	r0, [r4, #12]
 8008bdc:	4298      	cmp	r0, r3
 8008bde:	db00      	blt.n	8008be2 <_printf_float+0x282>
 8008be0:	e71e      	b.n	8008a20 <_printf_float+0xc0>
 8008be2:	0018      	movs	r0, r3
 8008be4:	e71c      	b.n	8008a20 <_printf_float+0xc0>
 8008be6:	0022      	movs	r2, r4
 8008be8:	2301      	movs	r3, #1
 8008bea:	0038      	movs	r0, r7
 8008bec:	9908      	ldr	r1, [sp, #32]
 8008bee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008bf0:	321a      	adds	r2, #26
 8008bf2:	47b0      	blx	r6
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	d100      	bne.n	8008bfa <_printf_float+0x29a>
 8008bf8:	e710      	b.n	8008a1c <_printf_float+0xbc>
 8008bfa:	3501      	adds	r5, #1
 8008bfc:	e7e4      	b.n	8008bc8 <_printf_float+0x268>
 8008bfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	dc3b      	bgt.n	8008c7c <_printf_float+0x31c>
 8008c04:	2301      	movs	r3, #1
 8008c06:	0038      	movs	r0, r7
 8008c08:	4a1b      	ldr	r2, [pc, #108]	; (8008c78 <_printf_float+0x318>)
 8008c0a:	9908      	ldr	r1, [sp, #32]
 8008c0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c0e:	47b0      	blx	r6
 8008c10:	3001      	adds	r0, #1
 8008c12:	d100      	bne.n	8008c16 <_printf_float+0x2b6>
 8008c14:	e702      	b.n	8008a1c <_printf_float+0xbc>
 8008c16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	d102      	bne.n	8008c24 <_printf_float+0x2c4>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	07db      	lsls	r3, r3, #31
 8008c22:	d5d5      	bpl.n	8008bd0 <_printf_float+0x270>
 8008c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c26:	0038      	movs	r0, r7
 8008c28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c2a:	9908      	ldr	r1, [sp, #32]
 8008c2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c2e:	47b0      	blx	r6
 8008c30:	2300      	movs	r3, #0
 8008c32:	3001      	adds	r0, #1
 8008c34:	d100      	bne.n	8008c38 <_printf_float+0x2d8>
 8008c36:	e6f1      	b.n	8008a1c <_printf_float+0xbc>
 8008c38:	930a      	str	r3, [sp, #40]	; 0x28
 8008c3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c3e:	425b      	negs	r3, r3
 8008c40:	4293      	cmp	r3, r2
 8008c42:	dc01      	bgt.n	8008c48 <_printf_float+0x2e8>
 8008c44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c46:	e791      	b.n	8008b6c <_printf_float+0x20c>
 8008c48:	0022      	movs	r2, r4
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	0038      	movs	r0, r7
 8008c4e:	9908      	ldr	r1, [sp, #32]
 8008c50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c52:	321a      	adds	r2, #26
 8008c54:	47b0      	blx	r6
 8008c56:	3001      	adds	r0, #1
 8008c58:	d100      	bne.n	8008c5c <_printf_float+0x2fc>
 8008c5a:	e6df      	b.n	8008a1c <_printf_float+0xbc>
 8008c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c5e:	3301      	adds	r3, #1
 8008c60:	e7ea      	b.n	8008c38 <_printf_float+0x2d8>
 8008c62:	46c0      	nop			; (mov r8, r8)
 8008c64:	7fefffff 	.word	0x7fefffff
 8008c68:	0800d210 	.word	0x0800d210
 8008c6c:	0800d214 	.word	0x0800d214
 8008c70:	0800d218 	.word	0x0800d218
 8008c74:	0800d21c 	.word	0x0800d21c
 8008c78:	0800d220 	.word	0x0800d220
 8008c7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c80:	920a      	str	r2, [sp, #40]	; 0x28
 8008c82:	429a      	cmp	r2, r3
 8008c84:	dd00      	ble.n	8008c88 <_printf_float+0x328>
 8008c86:	930a      	str	r3, [sp, #40]	; 0x28
 8008c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	dc3d      	bgt.n	8008d0a <_printf_float+0x3aa>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	930e      	str	r3, [sp, #56]	; 0x38
 8008c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c94:	43db      	mvns	r3, r3
 8008c96:	17db      	asrs	r3, r3, #31
 8008c98:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008caa:	4293      	cmp	r3, r2
 8008cac:	dc36      	bgt.n	8008d1c <_printf_float+0x3bc>
 8008cae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	db40      	blt.n	8008d38 <_printf_float+0x3d8>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	07db      	lsls	r3, r3, #31
 8008cba:	d43d      	bmi.n	8008d38 <_printf_float+0x3d8>
 8008cbc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008cbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cc2:	1af3      	subs	r3, r6, r3
 8008cc4:	1ab6      	subs	r6, r6, r2
 8008cc6:	429e      	cmp	r6, r3
 8008cc8:	dd00      	ble.n	8008ccc <_printf_float+0x36c>
 8008cca:	001e      	movs	r6, r3
 8008ccc:	2e00      	cmp	r6, #0
 8008cce:	dc3c      	bgt.n	8008d4a <_printf_float+0x3ea>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	930a      	str	r3, [sp, #40]	; 0x28
 8008cd4:	43f3      	mvns	r3, r6
 8008cd6:	17db      	asrs	r3, r3, #31
 8008cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cde:	1a9b      	subs	r3, r3, r2
 8008ce0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ce2:	4032      	ands	r2, r6
 8008ce4:	1a9b      	subs	r3, r3, r2
 8008ce6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	dc00      	bgt.n	8008cee <_printf_float+0x38e>
 8008cec:	e770      	b.n	8008bd0 <_printf_float+0x270>
 8008cee:	0022      	movs	r2, r4
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	0038      	movs	r0, r7
 8008cf4:	9908      	ldr	r1, [sp, #32]
 8008cf6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008cf8:	321a      	adds	r2, #26
 8008cfa:	47a8      	blx	r5
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	d100      	bne.n	8008d02 <_printf_float+0x3a2>
 8008d00:	e68c      	b.n	8008a1c <_printf_float+0xbc>
 8008d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d04:	3301      	adds	r3, #1
 8008d06:	930a      	str	r3, [sp, #40]	; 0x28
 8008d08:	e7e7      	b.n	8008cda <_printf_float+0x37a>
 8008d0a:	002a      	movs	r2, r5
 8008d0c:	0038      	movs	r0, r7
 8008d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d10:	9908      	ldr	r1, [sp, #32]
 8008d12:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d14:	47b0      	blx	r6
 8008d16:	3001      	adds	r0, #1
 8008d18:	d1b9      	bne.n	8008c8e <_printf_float+0x32e>
 8008d1a:	e67f      	b.n	8008a1c <_printf_float+0xbc>
 8008d1c:	0022      	movs	r2, r4
 8008d1e:	2301      	movs	r3, #1
 8008d20:	0038      	movs	r0, r7
 8008d22:	9908      	ldr	r1, [sp, #32]
 8008d24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d26:	321a      	adds	r2, #26
 8008d28:	47b0      	blx	r6
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	d100      	bne.n	8008d30 <_printf_float+0x3d0>
 8008d2e:	e675      	b.n	8008a1c <_printf_float+0xbc>
 8008d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d32:	3301      	adds	r3, #1
 8008d34:	930e      	str	r3, [sp, #56]	; 0x38
 8008d36:	e7b0      	b.n	8008c9a <_printf_float+0x33a>
 8008d38:	0038      	movs	r0, r7
 8008d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d3e:	9908      	ldr	r1, [sp, #32]
 8008d40:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d42:	47b0      	blx	r6
 8008d44:	3001      	adds	r0, #1
 8008d46:	d1b9      	bne.n	8008cbc <_printf_float+0x35c>
 8008d48:	e668      	b.n	8008a1c <_printf_float+0xbc>
 8008d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d4c:	0038      	movs	r0, r7
 8008d4e:	18ea      	adds	r2, r5, r3
 8008d50:	9908      	ldr	r1, [sp, #32]
 8008d52:	0033      	movs	r3, r6
 8008d54:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d56:	47a8      	blx	r5
 8008d58:	3001      	adds	r0, #1
 8008d5a:	d1b9      	bne.n	8008cd0 <_printf_float+0x370>
 8008d5c:	e65e      	b.n	8008a1c <_printf_float+0xbc>
 8008d5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	dc02      	bgt.n	8008d6a <_printf_float+0x40a>
 8008d64:	2301      	movs	r3, #1
 8008d66:	421a      	tst	r2, r3
 8008d68:	d03a      	beq.n	8008de0 <_printf_float+0x480>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	002a      	movs	r2, r5
 8008d6e:	0038      	movs	r0, r7
 8008d70:	9908      	ldr	r1, [sp, #32]
 8008d72:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d74:	47b0      	blx	r6
 8008d76:	3001      	adds	r0, #1
 8008d78:	d100      	bne.n	8008d7c <_printf_float+0x41c>
 8008d7a:	e64f      	b.n	8008a1c <_printf_float+0xbc>
 8008d7c:	0038      	movs	r0, r7
 8008d7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d82:	9908      	ldr	r1, [sp, #32]
 8008d84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d86:	47b0      	blx	r6
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d100      	bne.n	8008d8e <_printf_float+0x42e>
 8008d8c:	e646      	b.n	8008a1c <_printf_float+0xbc>
 8008d8e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008d90:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008d92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d94:	2200      	movs	r2, #0
 8008d96:	001e      	movs	r6, r3
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f7f7 fb57 	bl	800044c <__aeabi_dcmpeq>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d11c      	bne.n	8008ddc <_printf_float+0x47c>
 8008da2:	0033      	movs	r3, r6
 8008da4:	1c6a      	adds	r2, r5, #1
 8008da6:	3b01      	subs	r3, #1
 8008da8:	0038      	movs	r0, r7
 8008daa:	9908      	ldr	r1, [sp, #32]
 8008dac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008dae:	47a8      	blx	r5
 8008db0:	3001      	adds	r0, #1
 8008db2:	d10f      	bne.n	8008dd4 <_printf_float+0x474>
 8008db4:	e632      	b.n	8008a1c <_printf_float+0xbc>
 8008db6:	0022      	movs	r2, r4
 8008db8:	2301      	movs	r3, #1
 8008dba:	0038      	movs	r0, r7
 8008dbc:	9908      	ldr	r1, [sp, #32]
 8008dbe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008dc0:	321a      	adds	r2, #26
 8008dc2:	47b0      	blx	r6
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d100      	bne.n	8008dca <_printf_float+0x46a>
 8008dc8:	e628      	b.n	8008a1c <_printf_float+0xbc>
 8008dca:	3501      	adds	r5, #1
 8008dcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	42ab      	cmp	r3, r5
 8008dd2:	dcf0      	bgt.n	8008db6 <_printf_float+0x456>
 8008dd4:	0022      	movs	r2, r4
 8008dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd8:	3250      	adds	r2, #80	; 0x50
 8008dda:	e6c8      	b.n	8008b6e <_printf_float+0x20e>
 8008ddc:	2500      	movs	r5, #0
 8008dde:	e7f5      	b.n	8008dcc <_printf_float+0x46c>
 8008de0:	002a      	movs	r2, r5
 8008de2:	e7e1      	b.n	8008da8 <_printf_float+0x448>
 8008de4:	0022      	movs	r2, r4
 8008de6:	2301      	movs	r3, #1
 8008de8:	0038      	movs	r0, r7
 8008dea:	9908      	ldr	r1, [sp, #32]
 8008dec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008dee:	3219      	adds	r2, #25
 8008df0:	47b0      	blx	r6
 8008df2:	3001      	adds	r0, #1
 8008df4:	d100      	bne.n	8008df8 <_printf_float+0x498>
 8008df6:	e611      	b.n	8008a1c <_printf_float+0xbc>
 8008df8:	3501      	adds	r5, #1
 8008dfa:	68e3      	ldr	r3, [r4, #12]
 8008dfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008dfe:	1a9b      	subs	r3, r3, r2
 8008e00:	42ab      	cmp	r3, r5
 8008e02:	dcef      	bgt.n	8008de4 <_printf_float+0x484>
 8008e04:	e6e8      	b.n	8008bd8 <_printf_float+0x278>
 8008e06:	2500      	movs	r5, #0
 8008e08:	e7f7      	b.n	8008dfa <_printf_float+0x49a>
 8008e0a:	46c0      	nop			; (mov r8, r8)

08008e0c <_printf_common>:
 8008e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e0e:	0016      	movs	r6, r2
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	688a      	ldr	r2, [r1, #8]
 8008e14:	690b      	ldr	r3, [r1, #16]
 8008e16:	000c      	movs	r4, r1
 8008e18:	9000      	str	r0, [sp, #0]
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	da00      	bge.n	8008e20 <_printf_common+0x14>
 8008e1e:	0013      	movs	r3, r2
 8008e20:	0022      	movs	r2, r4
 8008e22:	6033      	str	r3, [r6, #0]
 8008e24:	3243      	adds	r2, #67	; 0x43
 8008e26:	7812      	ldrb	r2, [r2, #0]
 8008e28:	2a00      	cmp	r2, #0
 8008e2a:	d001      	beq.n	8008e30 <_printf_common+0x24>
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	6033      	str	r3, [r6, #0]
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	069b      	lsls	r3, r3, #26
 8008e34:	d502      	bpl.n	8008e3c <_printf_common+0x30>
 8008e36:	6833      	ldr	r3, [r6, #0]
 8008e38:	3302      	adds	r3, #2
 8008e3a:	6033      	str	r3, [r6, #0]
 8008e3c:	6822      	ldr	r2, [r4, #0]
 8008e3e:	2306      	movs	r3, #6
 8008e40:	0015      	movs	r5, r2
 8008e42:	401d      	ands	r5, r3
 8008e44:	421a      	tst	r2, r3
 8008e46:	d027      	beq.n	8008e98 <_printf_common+0x8c>
 8008e48:	0023      	movs	r3, r4
 8008e4a:	3343      	adds	r3, #67	; 0x43
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	1e5a      	subs	r2, r3, #1
 8008e50:	4193      	sbcs	r3, r2
 8008e52:	6822      	ldr	r2, [r4, #0]
 8008e54:	0692      	lsls	r2, r2, #26
 8008e56:	d430      	bmi.n	8008eba <_printf_common+0xae>
 8008e58:	0022      	movs	r2, r4
 8008e5a:	9901      	ldr	r1, [sp, #4]
 8008e5c:	9800      	ldr	r0, [sp, #0]
 8008e5e:	9d08      	ldr	r5, [sp, #32]
 8008e60:	3243      	adds	r2, #67	; 0x43
 8008e62:	47a8      	blx	r5
 8008e64:	3001      	adds	r0, #1
 8008e66:	d025      	beq.n	8008eb4 <_printf_common+0xa8>
 8008e68:	2206      	movs	r2, #6
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	2500      	movs	r5, #0
 8008e6e:	4013      	ands	r3, r2
 8008e70:	2b04      	cmp	r3, #4
 8008e72:	d105      	bne.n	8008e80 <_printf_common+0x74>
 8008e74:	6833      	ldr	r3, [r6, #0]
 8008e76:	68e5      	ldr	r5, [r4, #12]
 8008e78:	1aed      	subs	r5, r5, r3
 8008e7a:	43eb      	mvns	r3, r5
 8008e7c:	17db      	asrs	r3, r3, #31
 8008e7e:	401d      	ands	r5, r3
 8008e80:	68a3      	ldr	r3, [r4, #8]
 8008e82:	6922      	ldr	r2, [r4, #16]
 8008e84:	4293      	cmp	r3, r2
 8008e86:	dd01      	ble.n	8008e8c <_printf_common+0x80>
 8008e88:	1a9b      	subs	r3, r3, r2
 8008e8a:	18ed      	adds	r5, r5, r3
 8008e8c:	2600      	movs	r6, #0
 8008e8e:	42b5      	cmp	r5, r6
 8008e90:	d120      	bne.n	8008ed4 <_printf_common+0xc8>
 8008e92:	2000      	movs	r0, #0
 8008e94:	e010      	b.n	8008eb8 <_printf_common+0xac>
 8008e96:	3501      	adds	r5, #1
 8008e98:	68e3      	ldr	r3, [r4, #12]
 8008e9a:	6832      	ldr	r2, [r6, #0]
 8008e9c:	1a9b      	subs	r3, r3, r2
 8008e9e:	42ab      	cmp	r3, r5
 8008ea0:	ddd2      	ble.n	8008e48 <_printf_common+0x3c>
 8008ea2:	0022      	movs	r2, r4
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	9901      	ldr	r1, [sp, #4]
 8008ea8:	9800      	ldr	r0, [sp, #0]
 8008eaa:	9f08      	ldr	r7, [sp, #32]
 8008eac:	3219      	adds	r2, #25
 8008eae:	47b8      	blx	r7
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	d1f0      	bne.n	8008e96 <_printf_common+0x8a>
 8008eb4:	2001      	movs	r0, #1
 8008eb6:	4240      	negs	r0, r0
 8008eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008eba:	2030      	movs	r0, #48	; 0x30
 8008ebc:	18e1      	adds	r1, r4, r3
 8008ebe:	3143      	adds	r1, #67	; 0x43
 8008ec0:	7008      	strb	r0, [r1, #0]
 8008ec2:	0021      	movs	r1, r4
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	3145      	adds	r1, #69	; 0x45
 8008ec8:	7809      	ldrb	r1, [r1, #0]
 8008eca:	18a2      	adds	r2, r4, r2
 8008ecc:	3243      	adds	r2, #67	; 0x43
 8008ece:	3302      	adds	r3, #2
 8008ed0:	7011      	strb	r1, [r2, #0]
 8008ed2:	e7c1      	b.n	8008e58 <_printf_common+0x4c>
 8008ed4:	0022      	movs	r2, r4
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	9901      	ldr	r1, [sp, #4]
 8008eda:	9800      	ldr	r0, [sp, #0]
 8008edc:	9f08      	ldr	r7, [sp, #32]
 8008ede:	321a      	adds	r2, #26
 8008ee0:	47b8      	blx	r7
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	d0e6      	beq.n	8008eb4 <_printf_common+0xa8>
 8008ee6:	3601      	adds	r6, #1
 8008ee8:	e7d1      	b.n	8008e8e <_printf_common+0x82>
	...

08008eec <_printf_i>:
 8008eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eee:	b08b      	sub	sp, #44	; 0x2c
 8008ef0:	9206      	str	r2, [sp, #24]
 8008ef2:	000a      	movs	r2, r1
 8008ef4:	3243      	adds	r2, #67	; 0x43
 8008ef6:	9307      	str	r3, [sp, #28]
 8008ef8:	9005      	str	r0, [sp, #20]
 8008efa:	9204      	str	r2, [sp, #16]
 8008efc:	7e0a      	ldrb	r2, [r1, #24]
 8008efe:	000c      	movs	r4, r1
 8008f00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f02:	2a78      	cmp	r2, #120	; 0x78
 8008f04:	d809      	bhi.n	8008f1a <_printf_i+0x2e>
 8008f06:	2a62      	cmp	r2, #98	; 0x62
 8008f08:	d80b      	bhi.n	8008f22 <_printf_i+0x36>
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	d100      	bne.n	8008f10 <_printf_i+0x24>
 8008f0e:	e0be      	b.n	800908e <_printf_i+0x1a2>
 8008f10:	497c      	ldr	r1, [pc, #496]	; (8009104 <_printf_i+0x218>)
 8008f12:	9103      	str	r1, [sp, #12]
 8008f14:	2a58      	cmp	r2, #88	; 0x58
 8008f16:	d100      	bne.n	8008f1a <_printf_i+0x2e>
 8008f18:	e093      	b.n	8009042 <_printf_i+0x156>
 8008f1a:	0026      	movs	r6, r4
 8008f1c:	3642      	adds	r6, #66	; 0x42
 8008f1e:	7032      	strb	r2, [r6, #0]
 8008f20:	e022      	b.n	8008f68 <_printf_i+0x7c>
 8008f22:	0010      	movs	r0, r2
 8008f24:	3863      	subs	r0, #99	; 0x63
 8008f26:	2815      	cmp	r0, #21
 8008f28:	d8f7      	bhi.n	8008f1a <_printf_i+0x2e>
 8008f2a:	f7f7 f8ff 	bl	800012c <__gnu_thumb1_case_shi>
 8008f2e:	0016      	.short	0x0016
 8008f30:	fff6001f 	.word	0xfff6001f
 8008f34:	fff6fff6 	.word	0xfff6fff6
 8008f38:	001ffff6 	.word	0x001ffff6
 8008f3c:	fff6fff6 	.word	0xfff6fff6
 8008f40:	fff6fff6 	.word	0xfff6fff6
 8008f44:	003600a3 	.word	0x003600a3
 8008f48:	fff60083 	.word	0xfff60083
 8008f4c:	00b4fff6 	.word	0x00b4fff6
 8008f50:	0036fff6 	.word	0x0036fff6
 8008f54:	fff6fff6 	.word	0xfff6fff6
 8008f58:	0087      	.short	0x0087
 8008f5a:	0026      	movs	r6, r4
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	3642      	adds	r6, #66	; 0x42
 8008f60:	1d11      	adds	r1, r2, #4
 8008f62:	6019      	str	r1, [r3, #0]
 8008f64:	6813      	ldr	r3, [r2, #0]
 8008f66:	7033      	strb	r3, [r6, #0]
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e0a2      	b.n	80090b2 <_printf_i+0x1c6>
 8008f6c:	6818      	ldr	r0, [r3, #0]
 8008f6e:	6809      	ldr	r1, [r1, #0]
 8008f70:	1d02      	adds	r2, r0, #4
 8008f72:	060d      	lsls	r5, r1, #24
 8008f74:	d50b      	bpl.n	8008f8e <_printf_i+0xa2>
 8008f76:	6805      	ldr	r5, [r0, #0]
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	2d00      	cmp	r5, #0
 8008f7c:	da03      	bge.n	8008f86 <_printf_i+0x9a>
 8008f7e:	232d      	movs	r3, #45	; 0x2d
 8008f80:	9a04      	ldr	r2, [sp, #16]
 8008f82:	426d      	negs	r5, r5
 8008f84:	7013      	strb	r3, [r2, #0]
 8008f86:	4b5f      	ldr	r3, [pc, #380]	; (8009104 <_printf_i+0x218>)
 8008f88:	270a      	movs	r7, #10
 8008f8a:	9303      	str	r3, [sp, #12]
 8008f8c:	e01b      	b.n	8008fc6 <_printf_i+0xda>
 8008f8e:	6805      	ldr	r5, [r0, #0]
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	0649      	lsls	r1, r1, #25
 8008f94:	d5f1      	bpl.n	8008f7a <_printf_i+0x8e>
 8008f96:	b22d      	sxth	r5, r5
 8008f98:	e7ef      	b.n	8008f7a <_printf_i+0x8e>
 8008f9a:	680d      	ldr	r5, [r1, #0]
 8008f9c:	6819      	ldr	r1, [r3, #0]
 8008f9e:	1d08      	adds	r0, r1, #4
 8008fa0:	6018      	str	r0, [r3, #0]
 8008fa2:	062e      	lsls	r6, r5, #24
 8008fa4:	d501      	bpl.n	8008faa <_printf_i+0xbe>
 8008fa6:	680d      	ldr	r5, [r1, #0]
 8008fa8:	e003      	b.n	8008fb2 <_printf_i+0xc6>
 8008faa:	066d      	lsls	r5, r5, #25
 8008fac:	d5fb      	bpl.n	8008fa6 <_printf_i+0xba>
 8008fae:	680d      	ldr	r5, [r1, #0]
 8008fb0:	b2ad      	uxth	r5, r5
 8008fb2:	4b54      	ldr	r3, [pc, #336]	; (8009104 <_printf_i+0x218>)
 8008fb4:	2708      	movs	r7, #8
 8008fb6:	9303      	str	r3, [sp, #12]
 8008fb8:	2a6f      	cmp	r2, #111	; 0x6f
 8008fba:	d000      	beq.n	8008fbe <_printf_i+0xd2>
 8008fbc:	3702      	adds	r7, #2
 8008fbe:	0023      	movs	r3, r4
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	3343      	adds	r3, #67	; 0x43
 8008fc4:	701a      	strb	r2, [r3, #0]
 8008fc6:	6863      	ldr	r3, [r4, #4]
 8008fc8:	60a3      	str	r3, [r4, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	db03      	blt.n	8008fd6 <_printf_i+0xea>
 8008fce:	2104      	movs	r1, #4
 8008fd0:	6822      	ldr	r2, [r4, #0]
 8008fd2:	438a      	bics	r2, r1
 8008fd4:	6022      	str	r2, [r4, #0]
 8008fd6:	2d00      	cmp	r5, #0
 8008fd8:	d102      	bne.n	8008fe0 <_printf_i+0xf4>
 8008fda:	9e04      	ldr	r6, [sp, #16]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00c      	beq.n	8008ffa <_printf_i+0x10e>
 8008fe0:	9e04      	ldr	r6, [sp, #16]
 8008fe2:	0028      	movs	r0, r5
 8008fe4:	0039      	movs	r1, r7
 8008fe6:	f7f7 f931 	bl	800024c <__aeabi_uidivmod>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	3e01      	subs	r6, #1
 8008fee:	5c5b      	ldrb	r3, [r3, r1]
 8008ff0:	7033      	strb	r3, [r6, #0]
 8008ff2:	002b      	movs	r3, r5
 8008ff4:	0005      	movs	r5, r0
 8008ff6:	429f      	cmp	r7, r3
 8008ff8:	d9f3      	bls.n	8008fe2 <_printf_i+0xf6>
 8008ffa:	2f08      	cmp	r7, #8
 8008ffc:	d109      	bne.n	8009012 <_printf_i+0x126>
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	07db      	lsls	r3, r3, #31
 8009002:	d506      	bpl.n	8009012 <_printf_i+0x126>
 8009004:	6862      	ldr	r2, [r4, #4]
 8009006:	6923      	ldr	r3, [r4, #16]
 8009008:	429a      	cmp	r2, r3
 800900a:	dc02      	bgt.n	8009012 <_printf_i+0x126>
 800900c:	2330      	movs	r3, #48	; 0x30
 800900e:	3e01      	subs	r6, #1
 8009010:	7033      	strb	r3, [r6, #0]
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	1b9b      	subs	r3, r3, r6
 8009016:	6123      	str	r3, [r4, #16]
 8009018:	9b07      	ldr	r3, [sp, #28]
 800901a:	0021      	movs	r1, r4
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	9805      	ldr	r0, [sp, #20]
 8009020:	9b06      	ldr	r3, [sp, #24]
 8009022:	aa09      	add	r2, sp, #36	; 0x24
 8009024:	f7ff fef2 	bl	8008e0c <_printf_common>
 8009028:	3001      	adds	r0, #1
 800902a:	d147      	bne.n	80090bc <_printf_i+0x1d0>
 800902c:	2001      	movs	r0, #1
 800902e:	4240      	negs	r0, r0
 8009030:	b00b      	add	sp, #44	; 0x2c
 8009032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009034:	2220      	movs	r2, #32
 8009036:	6809      	ldr	r1, [r1, #0]
 8009038:	430a      	orrs	r2, r1
 800903a:	6022      	str	r2, [r4, #0]
 800903c:	2278      	movs	r2, #120	; 0x78
 800903e:	4932      	ldr	r1, [pc, #200]	; (8009108 <_printf_i+0x21c>)
 8009040:	9103      	str	r1, [sp, #12]
 8009042:	0021      	movs	r1, r4
 8009044:	3145      	adds	r1, #69	; 0x45
 8009046:	700a      	strb	r2, [r1, #0]
 8009048:	6819      	ldr	r1, [r3, #0]
 800904a:	6822      	ldr	r2, [r4, #0]
 800904c:	c920      	ldmia	r1!, {r5}
 800904e:	0610      	lsls	r0, r2, #24
 8009050:	d402      	bmi.n	8009058 <_printf_i+0x16c>
 8009052:	0650      	lsls	r0, r2, #25
 8009054:	d500      	bpl.n	8009058 <_printf_i+0x16c>
 8009056:	b2ad      	uxth	r5, r5
 8009058:	6019      	str	r1, [r3, #0]
 800905a:	07d3      	lsls	r3, r2, #31
 800905c:	d502      	bpl.n	8009064 <_printf_i+0x178>
 800905e:	2320      	movs	r3, #32
 8009060:	4313      	orrs	r3, r2
 8009062:	6023      	str	r3, [r4, #0]
 8009064:	2710      	movs	r7, #16
 8009066:	2d00      	cmp	r5, #0
 8009068:	d1a9      	bne.n	8008fbe <_printf_i+0xd2>
 800906a:	2220      	movs	r2, #32
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	4393      	bics	r3, r2
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	e7a4      	b.n	8008fbe <_printf_i+0xd2>
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	680d      	ldr	r5, [r1, #0]
 8009078:	1d10      	adds	r0, r2, #4
 800907a:	6949      	ldr	r1, [r1, #20]
 800907c:	6018      	str	r0, [r3, #0]
 800907e:	6813      	ldr	r3, [r2, #0]
 8009080:	062e      	lsls	r6, r5, #24
 8009082:	d501      	bpl.n	8009088 <_printf_i+0x19c>
 8009084:	6019      	str	r1, [r3, #0]
 8009086:	e002      	b.n	800908e <_printf_i+0x1a2>
 8009088:	066d      	lsls	r5, r5, #25
 800908a:	d5fb      	bpl.n	8009084 <_printf_i+0x198>
 800908c:	8019      	strh	r1, [r3, #0]
 800908e:	2300      	movs	r3, #0
 8009090:	9e04      	ldr	r6, [sp, #16]
 8009092:	6123      	str	r3, [r4, #16]
 8009094:	e7c0      	b.n	8009018 <_printf_i+0x12c>
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	1d11      	adds	r1, r2, #4
 800909a:	6019      	str	r1, [r3, #0]
 800909c:	6816      	ldr	r6, [r2, #0]
 800909e:	2100      	movs	r1, #0
 80090a0:	0030      	movs	r0, r6
 80090a2:	6862      	ldr	r2, [r4, #4]
 80090a4:	f000 fbf1 	bl	800988a <memchr>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d001      	beq.n	80090b0 <_printf_i+0x1c4>
 80090ac:	1b80      	subs	r0, r0, r6
 80090ae:	6060      	str	r0, [r4, #4]
 80090b0:	6863      	ldr	r3, [r4, #4]
 80090b2:	6123      	str	r3, [r4, #16]
 80090b4:	2300      	movs	r3, #0
 80090b6:	9a04      	ldr	r2, [sp, #16]
 80090b8:	7013      	strb	r3, [r2, #0]
 80090ba:	e7ad      	b.n	8009018 <_printf_i+0x12c>
 80090bc:	0032      	movs	r2, r6
 80090be:	6923      	ldr	r3, [r4, #16]
 80090c0:	9906      	ldr	r1, [sp, #24]
 80090c2:	9805      	ldr	r0, [sp, #20]
 80090c4:	9d07      	ldr	r5, [sp, #28]
 80090c6:	47a8      	blx	r5
 80090c8:	3001      	adds	r0, #1
 80090ca:	d0af      	beq.n	800902c <_printf_i+0x140>
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	079b      	lsls	r3, r3, #30
 80090d0:	d415      	bmi.n	80090fe <_printf_i+0x212>
 80090d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d4:	68e0      	ldr	r0, [r4, #12]
 80090d6:	4298      	cmp	r0, r3
 80090d8:	daaa      	bge.n	8009030 <_printf_i+0x144>
 80090da:	0018      	movs	r0, r3
 80090dc:	e7a8      	b.n	8009030 <_printf_i+0x144>
 80090de:	0022      	movs	r2, r4
 80090e0:	2301      	movs	r3, #1
 80090e2:	9906      	ldr	r1, [sp, #24]
 80090e4:	9805      	ldr	r0, [sp, #20]
 80090e6:	9e07      	ldr	r6, [sp, #28]
 80090e8:	3219      	adds	r2, #25
 80090ea:	47b0      	blx	r6
 80090ec:	3001      	adds	r0, #1
 80090ee:	d09d      	beq.n	800902c <_printf_i+0x140>
 80090f0:	3501      	adds	r5, #1
 80090f2:	68e3      	ldr	r3, [r4, #12]
 80090f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090f6:	1a9b      	subs	r3, r3, r2
 80090f8:	42ab      	cmp	r3, r5
 80090fa:	dcf0      	bgt.n	80090de <_printf_i+0x1f2>
 80090fc:	e7e9      	b.n	80090d2 <_printf_i+0x1e6>
 80090fe:	2500      	movs	r5, #0
 8009100:	e7f7      	b.n	80090f2 <_printf_i+0x206>
 8009102:	46c0      	nop			; (mov r8, r8)
 8009104:	0800d222 	.word	0x0800d222
 8009108:	0800d233 	.word	0x0800d233

0800910c <_scanf_float>:
 800910c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800910e:	b08b      	sub	sp, #44	; 0x2c
 8009110:	0016      	movs	r6, r2
 8009112:	9002      	str	r0, [sp, #8]
 8009114:	22ae      	movs	r2, #174	; 0xae
 8009116:	2000      	movs	r0, #0
 8009118:	9307      	str	r3, [sp, #28]
 800911a:	688b      	ldr	r3, [r1, #8]
 800911c:	000f      	movs	r7, r1
 800911e:	1e59      	subs	r1, r3, #1
 8009120:	0052      	lsls	r2, r2, #1
 8009122:	9006      	str	r0, [sp, #24]
 8009124:	4291      	cmp	r1, r2
 8009126:	d905      	bls.n	8009134 <_scanf_float+0x28>
 8009128:	3b5e      	subs	r3, #94	; 0x5e
 800912a:	3bff      	subs	r3, #255	; 0xff
 800912c:	9306      	str	r3, [sp, #24]
 800912e:	235e      	movs	r3, #94	; 0x5e
 8009130:	33ff      	adds	r3, #255	; 0xff
 8009132:	60bb      	str	r3, [r7, #8]
 8009134:	23f0      	movs	r3, #240	; 0xf0
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	4313      	orrs	r3, r2
 800913c:	603b      	str	r3, [r7, #0]
 800913e:	003b      	movs	r3, r7
 8009140:	2400      	movs	r4, #0
 8009142:	331c      	adds	r3, #28
 8009144:	001d      	movs	r5, r3
 8009146:	9304      	str	r3, [sp, #16]
 8009148:	9403      	str	r4, [sp, #12]
 800914a:	9409      	str	r4, [sp, #36]	; 0x24
 800914c:	9408      	str	r4, [sp, #32]
 800914e:	9401      	str	r4, [sp, #4]
 8009150:	9405      	str	r4, [sp, #20]
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	2a00      	cmp	r2, #0
 8009156:	d00a      	beq.n	800916e <_scanf_float+0x62>
 8009158:	6833      	ldr	r3, [r6, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b4e      	cmp	r3, #78	; 0x4e
 800915e:	d844      	bhi.n	80091ea <_scanf_float+0xde>
 8009160:	0018      	movs	r0, r3
 8009162:	2b40      	cmp	r3, #64	; 0x40
 8009164:	d82c      	bhi.n	80091c0 <_scanf_float+0xb4>
 8009166:	382b      	subs	r0, #43	; 0x2b
 8009168:	b2c1      	uxtb	r1, r0
 800916a:	290e      	cmp	r1, #14
 800916c:	d92a      	bls.n	80091c4 <_scanf_float+0xb8>
 800916e:	9b01      	ldr	r3, [sp, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <_scanf_float+0x70>
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	4aa3      	ldr	r2, [pc, #652]	; (8009404 <_scanf_float+0x2f8>)
 8009178:	4013      	ands	r3, r2
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	3b01      	subs	r3, #1
 8009180:	2b01      	cmp	r3, #1
 8009182:	d900      	bls.n	8009186 <_scanf_float+0x7a>
 8009184:	e0f9      	b.n	800937a <_scanf_float+0x26e>
 8009186:	24be      	movs	r4, #190	; 0xbe
 8009188:	0064      	lsls	r4, r4, #1
 800918a:	9b04      	ldr	r3, [sp, #16]
 800918c:	429d      	cmp	r5, r3
 800918e:	d900      	bls.n	8009192 <_scanf_float+0x86>
 8009190:	e0e9      	b.n	8009366 <_scanf_float+0x25a>
 8009192:	2301      	movs	r3, #1
 8009194:	9303      	str	r3, [sp, #12]
 8009196:	e183      	b.n	80094a0 <_scanf_float+0x394>
 8009198:	0018      	movs	r0, r3
 800919a:	3861      	subs	r0, #97	; 0x61
 800919c:	280d      	cmp	r0, #13
 800919e:	d8e6      	bhi.n	800916e <_scanf_float+0x62>
 80091a0:	f7f6 ffc4 	bl	800012c <__gnu_thumb1_case_shi>
 80091a4:	ffe50083 	.word	0xffe50083
 80091a8:	ffe5ffe5 	.word	0xffe5ffe5
 80091ac:	00a200b6 	.word	0x00a200b6
 80091b0:	ffe5ffe5 	.word	0xffe5ffe5
 80091b4:	ffe50089 	.word	0xffe50089
 80091b8:	ffe5ffe5 	.word	0xffe5ffe5
 80091bc:	0065ffe5 	.word	0x0065ffe5
 80091c0:	3841      	subs	r0, #65	; 0x41
 80091c2:	e7eb      	b.n	800919c <_scanf_float+0x90>
 80091c4:	280e      	cmp	r0, #14
 80091c6:	d8d2      	bhi.n	800916e <_scanf_float+0x62>
 80091c8:	f7f6 ffb0 	bl	800012c <__gnu_thumb1_case_shi>
 80091cc:	ffd1004b 	.word	0xffd1004b
 80091d0:	0098004b 	.word	0x0098004b
 80091d4:	0020ffd1 	.word	0x0020ffd1
 80091d8:	00400040 	.word	0x00400040
 80091dc:	00400040 	.word	0x00400040
 80091e0:	00400040 	.word	0x00400040
 80091e4:	00400040 	.word	0x00400040
 80091e8:	0040      	.short	0x0040
 80091ea:	2b6e      	cmp	r3, #110	; 0x6e
 80091ec:	d809      	bhi.n	8009202 <_scanf_float+0xf6>
 80091ee:	2b60      	cmp	r3, #96	; 0x60
 80091f0:	d8d2      	bhi.n	8009198 <_scanf_float+0x8c>
 80091f2:	2b54      	cmp	r3, #84	; 0x54
 80091f4:	d07d      	beq.n	80092f2 <_scanf_float+0x1e6>
 80091f6:	2b59      	cmp	r3, #89	; 0x59
 80091f8:	d1b9      	bne.n	800916e <_scanf_float+0x62>
 80091fa:	2c07      	cmp	r4, #7
 80091fc:	d1b7      	bne.n	800916e <_scanf_float+0x62>
 80091fe:	2408      	movs	r4, #8
 8009200:	e02c      	b.n	800925c <_scanf_float+0x150>
 8009202:	2b74      	cmp	r3, #116	; 0x74
 8009204:	d075      	beq.n	80092f2 <_scanf_float+0x1e6>
 8009206:	2b79      	cmp	r3, #121	; 0x79
 8009208:	d0f7      	beq.n	80091fa <_scanf_float+0xee>
 800920a:	e7b0      	b.n	800916e <_scanf_float+0x62>
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	05c8      	lsls	r0, r1, #23
 8009210:	d51c      	bpl.n	800924c <_scanf_float+0x140>
 8009212:	2380      	movs	r3, #128	; 0x80
 8009214:	4399      	bics	r1, r3
 8009216:	9b01      	ldr	r3, [sp, #4]
 8009218:	6039      	str	r1, [r7, #0]
 800921a:	3301      	adds	r3, #1
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	9b06      	ldr	r3, [sp, #24]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d003      	beq.n	800922c <_scanf_float+0x120>
 8009224:	3b01      	subs	r3, #1
 8009226:	3201      	adds	r2, #1
 8009228:	9306      	str	r3, [sp, #24]
 800922a:	60ba      	str	r2, [r7, #8]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	3b01      	subs	r3, #1
 8009230:	60bb      	str	r3, [r7, #8]
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	3301      	adds	r3, #1
 8009236:	613b      	str	r3, [r7, #16]
 8009238:	6873      	ldr	r3, [r6, #4]
 800923a:	3b01      	subs	r3, #1
 800923c:	6073      	str	r3, [r6, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	dc00      	bgt.n	8009244 <_scanf_float+0x138>
 8009242:	e086      	b.n	8009352 <_scanf_float+0x246>
 8009244:	6833      	ldr	r3, [r6, #0]
 8009246:	3301      	adds	r3, #1
 8009248:	6033      	str	r3, [r6, #0]
 800924a:	e782      	b.n	8009152 <_scanf_float+0x46>
 800924c:	9a03      	ldr	r2, [sp, #12]
 800924e:	1912      	adds	r2, r2, r4
 8009250:	2a00      	cmp	r2, #0
 8009252:	d18c      	bne.n	800916e <_scanf_float+0x62>
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	496c      	ldr	r1, [pc, #432]	; (8009408 <_scanf_float+0x2fc>)
 8009258:	400a      	ands	r2, r1
 800925a:	603a      	str	r2, [r7, #0]
 800925c:	702b      	strb	r3, [r5, #0]
 800925e:	3501      	adds	r5, #1
 8009260:	e7e4      	b.n	800922c <_scanf_float+0x120>
 8009262:	2180      	movs	r1, #128	; 0x80
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	420a      	tst	r2, r1
 8009268:	d081      	beq.n	800916e <_scanf_float+0x62>
 800926a:	438a      	bics	r2, r1
 800926c:	e7f5      	b.n	800925a <_scanf_float+0x14e>
 800926e:	9a03      	ldr	r2, [sp, #12]
 8009270:	2a00      	cmp	r2, #0
 8009272:	d10f      	bne.n	8009294 <_scanf_float+0x188>
 8009274:	9a01      	ldr	r2, [sp, #4]
 8009276:	2a00      	cmp	r2, #0
 8009278:	d10f      	bne.n	800929a <_scanf_float+0x18e>
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	21e0      	movs	r1, #224	; 0xe0
 800927e:	0010      	movs	r0, r2
 8009280:	00c9      	lsls	r1, r1, #3
 8009282:	4008      	ands	r0, r1
 8009284:	4288      	cmp	r0, r1
 8009286:	d108      	bne.n	800929a <_scanf_float+0x18e>
 8009288:	4960      	ldr	r1, [pc, #384]	; (800940c <_scanf_float+0x300>)
 800928a:	400a      	ands	r2, r1
 800928c:	603a      	str	r2, [r7, #0]
 800928e:	2201      	movs	r2, #1
 8009290:	9203      	str	r2, [sp, #12]
 8009292:	e7e3      	b.n	800925c <_scanf_float+0x150>
 8009294:	9a03      	ldr	r2, [sp, #12]
 8009296:	2a02      	cmp	r2, #2
 8009298:	d059      	beq.n	800934e <_scanf_float+0x242>
 800929a:	2c01      	cmp	r4, #1
 800929c:	d002      	beq.n	80092a4 <_scanf_float+0x198>
 800929e:	2c04      	cmp	r4, #4
 80092a0:	d000      	beq.n	80092a4 <_scanf_float+0x198>
 80092a2:	e764      	b.n	800916e <_scanf_float+0x62>
 80092a4:	3401      	adds	r4, #1
 80092a6:	b2e4      	uxtb	r4, r4
 80092a8:	e7d8      	b.n	800925c <_scanf_float+0x150>
 80092aa:	9a03      	ldr	r2, [sp, #12]
 80092ac:	2a01      	cmp	r2, #1
 80092ae:	d000      	beq.n	80092b2 <_scanf_float+0x1a6>
 80092b0:	e75d      	b.n	800916e <_scanf_float+0x62>
 80092b2:	2202      	movs	r2, #2
 80092b4:	e7ec      	b.n	8009290 <_scanf_float+0x184>
 80092b6:	2c00      	cmp	r4, #0
 80092b8:	d110      	bne.n	80092dc <_scanf_float+0x1d0>
 80092ba:	9a01      	ldr	r2, [sp, #4]
 80092bc:	2a00      	cmp	r2, #0
 80092be:	d000      	beq.n	80092c2 <_scanf_float+0x1b6>
 80092c0:	e758      	b.n	8009174 <_scanf_float+0x68>
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	21e0      	movs	r1, #224	; 0xe0
 80092c6:	0010      	movs	r0, r2
 80092c8:	00c9      	lsls	r1, r1, #3
 80092ca:	4008      	ands	r0, r1
 80092cc:	4288      	cmp	r0, r1
 80092ce:	d000      	beq.n	80092d2 <_scanf_float+0x1c6>
 80092d0:	e754      	b.n	800917c <_scanf_float+0x70>
 80092d2:	494e      	ldr	r1, [pc, #312]	; (800940c <_scanf_float+0x300>)
 80092d4:	3401      	adds	r4, #1
 80092d6:	400a      	ands	r2, r1
 80092d8:	603a      	str	r2, [r7, #0]
 80092da:	e7bf      	b.n	800925c <_scanf_float+0x150>
 80092dc:	21fd      	movs	r1, #253	; 0xfd
 80092de:	1ee2      	subs	r2, r4, #3
 80092e0:	420a      	tst	r2, r1
 80092e2:	d000      	beq.n	80092e6 <_scanf_float+0x1da>
 80092e4:	e743      	b.n	800916e <_scanf_float+0x62>
 80092e6:	e7dd      	b.n	80092a4 <_scanf_float+0x198>
 80092e8:	2c02      	cmp	r4, #2
 80092ea:	d000      	beq.n	80092ee <_scanf_float+0x1e2>
 80092ec:	e73f      	b.n	800916e <_scanf_float+0x62>
 80092ee:	2403      	movs	r4, #3
 80092f0:	e7b4      	b.n	800925c <_scanf_float+0x150>
 80092f2:	2c06      	cmp	r4, #6
 80092f4:	d000      	beq.n	80092f8 <_scanf_float+0x1ec>
 80092f6:	e73a      	b.n	800916e <_scanf_float+0x62>
 80092f8:	2407      	movs	r4, #7
 80092fa:	e7af      	b.n	800925c <_scanf_float+0x150>
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	0591      	lsls	r1, r2, #22
 8009300:	d400      	bmi.n	8009304 <_scanf_float+0x1f8>
 8009302:	e734      	b.n	800916e <_scanf_float+0x62>
 8009304:	4942      	ldr	r1, [pc, #264]	; (8009410 <_scanf_float+0x304>)
 8009306:	400a      	ands	r2, r1
 8009308:	603a      	str	r2, [r7, #0]
 800930a:	9a01      	ldr	r2, [sp, #4]
 800930c:	9205      	str	r2, [sp, #20]
 800930e:	e7a5      	b.n	800925c <_scanf_float+0x150>
 8009310:	21a0      	movs	r1, #160	; 0xa0
 8009312:	2080      	movs	r0, #128	; 0x80
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	00c9      	lsls	r1, r1, #3
 8009318:	4011      	ands	r1, r2
 800931a:	00c0      	lsls	r0, r0, #3
 800931c:	4281      	cmp	r1, r0
 800931e:	d006      	beq.n	800932e <_scanf_float+0x222>
 8009320:	4202      	tst	r2, r0
 8009322:	d100      	bne.n	8009326 <_scanf_float+0x21a>
 8009324:	e723      	b.n	800916e <_scanf_float+0x62>
 8009326:	9901      	ldr	r1, [sp, #4]
 8009328:	2900      	cmp	r1, #0
 800932a:	d100      	bne.n	800932e <_scanf_float+0x222>
 800932c:	e726      	b.n	800917c <_scanf_float+0x70>
 800932e:	0591      	lsls	r1, r2, #22
 8009330:	d404      	bmi.n	800933c <_scanf_float+0x230>
 8009332:	9901      	ldr	r1, [sp, #4]
 8009334:	9805      	ldr	r0, [sp, #20]
 8009336:	9509      	str	r5, [sp, #36]	; 0x24
 8009338:	1a09      	subs	r1, r1, r0
 800933a:	9108      	str	r1, [sp, #32]
 800933c:	4933      	ldr	r1, [pc, #204]	; (800940c <_scanf_float+0x300>)
 800933e:	400a      	ands	r2, r1
 8009340:	21c0      	movs	r1, #192	; 0xc0
 8009342:	0049      	lsls	r1, r1, #1
 8009344:	430a      	orrs	r2, r1
 8009346:	603a      	str	r2, [r7, #0]
 8009348:	2200      	movs	r2, #0
 800934a:	9201      	str	r2, [sp, #4]
 800934c:	e786      	b.n	800925c <_scanf_float+0x150>
 800934e:	2203      	movs	r2, #3
 8009350:	e79e      	b.n	8009290 <_scanf_float+0x184>
 8009352:	23c0      	movs	r3, #192	; 0xc0
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	0031      	movs	r1, r6
 8009358:	58fb      	ldr	r3, [r7, r3]
 800935a:	9802      	ldr	r0, [sp, #8]
 800935c:	4798      	blx	r3
 800935e:	2800      	cmp	r0, #0
 8009360:	d100      	bne.n	8009364 <_scanf_float+0x258>
 8009362:	e6f6      	b.n	8009152 <_scanf_float+0x46>
 8009364:	e703      	b.n	800916e <_scanf_float+0x62>
 8009366:	3d01      	subs	r5, #1
 8009368:	593b      	ldr	r3, [r7, r4]
 800936a:	0032      	movs	r2, r6
 800936c:	7829      	ldrb	r1, [r5, #0]
 800936e:	9802      	ldr	r0, [sp, #8]
 8009370:	4798      	blx	r3
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	3b01      	subs	r3, #1
 8009376:	613b      	str	r3, [r7, #16]
 8009378:	e707      	b.n	800918a <_scanf_float+0x7e>
 800937a:	1e63      	subs	r3, r4, #1
 800937c:	2b06      	cmp	r3, #6
 800937e:	d80e      	bhi.n	800939e <_scanf_float+0x292>
 8009380:	9503      	str	r5, [sp, #12]
 8009382:	2c02      	cmp	r4, #2
 8009384:	d920      	bls.n	80093c8 <_scanf_float+0x2bc>
 8009386:	1b63      	subs	r3, r4, r5
 8009388:	b2db      	uxtb	r3, r3
 800938a:	9306      	str	r3, [sp, #24]
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	9a06      	ldr	r2, [sp, #24]
 8009390:	189b      	adds	r3, r3, r2
 8009392:	b2db      	uxtb	r3, r3
 8009394:	2b03      	cmp	r3, #3
 8009396:	d827      	bhi.n	80093e8 <_scanf_float+0x2dc>
 8009398:	3c03      	subs	r4, #3
 800939a:	b2e4      	uxtb	r4, r4
 800939c:	1b2d      	subs	r5, r5, r4
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	05da      	lsls	r2, r3, #23
 80093a2:	d552      	bpl.n	800944a <_scanf_float+0x33e>
 80093a4:	055b      	lsls	r3, r3, #21
 80093a6:	d535      	bpl.n	8009414 <_scanf_float+0x308>
 80093a8:	24be      	movs	r4, #190	; 0xbe
 80093aa:	0064      	lsls	r4, r4, #1
 80093ac:	9b04      	ldr	r3, [sp, #16]
 80093ae:	429d      	cmp	r5, r3
 80093b0:	d800      	bhi.n	80093b4 <_scanf_float+0x2a8>
 80093b2:	e6ee      	b.n	8009192 <_scanf_float+0x86>
 80093b4:	3d01      	subs	r5, #1
 80093b6:	593b      	ldr	r3, [r7, r4]
 80093b8:	0032      	movs	r2, r6
 80093ba:	7829      	ldrb	r1, [r5, #0]
 80093bc:	9802      	ldr	r0, [sp, #8]
 80093be:	4798      	blx	r3
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	613b      	str	r3, [r7, #16]
 80093c6:	e7f1      	b.n	80093ac <_scanf_float+0x2a0>
 80093c8:	24be      	movs	r4, #190	; 0xbe
 80093ca:	0064      	lsls	r4, r4, #1
 80093cc:	9b04      	ldr	r3, [sp, #16]
 80093ce:	429d      	cmp	r5, r3
 80093d0:	d800      	bhi.n	80093d4 <_scanf_float+0x2c8>
 80093d2:	e6de      	b.n	8009192 <_scanf_float+0x86>
 80093d4:	3d01      	subs	r5, #1
 80093d6:	593b      	ldr	r3, [r7, r4]
 80093d8:	0032      	movs	r2, r6
 80093da:	7829      	ldrb	r1, [r5, #0]
 80093dc:	9802      	ldr	r0, [sp, #8]
 80093de:	4798      	blx	r3
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	3b01      	subs	r3, #1
 80093e4:	613b      	str	r3, [r7, #16]
 80093e6:	e7f1      	b.n	80093cc <_scanf_float+0x2c0>
 80093e8:	9b03      	ldr	r3, [sp, #12]
 80093ea:	0032      	movs	r2, r6
 80093ec:	3b01      	subs	r3, #1
 80093ee:	7819      	ldrb	r1, [r3, #0]
 80093f0:	9303      	str	r3, [sp, #12]
 80093f2:	23be      	movs	r3, #190	; 0xbe
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	58fb      	ldr	r3, [r7, r3]
 80093f8:	9802      	ldr	r0, [sp, #8]
 80093fa:	4798      	blx	r3
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	3b01      	subs	r3, #1
 8009400:	613b      	str	r3, [r7, #16]
 8009402:	e7c3      	b.n	800938c <_scanf_float+0x280>
 8009404:	fffffeff 	.word	0xfffffeff
 8009408:	fffffe7f 	.word	0xfffffe7f
 800940c:	fffff87f 	.word	0xfffff87f
 8009410:	fffffd7f 	.word	0xfffffd7f
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	1e6c      	subs	r4, r5, #1
 8009418:	7821      	ldrb	r1, [r4, #0]
 800941a:	3b01      	subs	r3, #1
 800941c:	613b      	str	r3, [r7, #16]
 800941e:	2965      	cmp	r1, #101	; 0x65
 8009420:	d00c      	beq.n	800943c <_scanf_float+0x330>
 8009422:	2945      	cmp	r1, #69	; 0x45
 8009424:	d00a      	beq.n	800943c <_scanf_float+0x330>
 8009426:	23be      	movs	r3, #190	; 0xbe
 8009428:	005b      	lsls	r3, r3, #1
 800942a:	58fb      	ldr	r3, [r7, r3]
 800942c:	0032      	movs	r2, r6
 800942e:	9802      	ldr	r0, [sp, #8]
 8009430:	4798      	blx	r3
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	1eac      	subs	r4, r5, #2
 8009436:	3b01      	subs	r3, #1
 8009438:	7821      	ldrb	r1, [r4, #0]
 800943a:	613b      	str	r3, [r7, #16]
 800943c:	23be      	movs	r3, #190	; 0xbe
 800943e:	005b      	lsls	r3, r3, #1
 8009440:	0032      	movs	r2, r6
 8009442:	58fb      	ldr	r3, [r7, r3]
 8009444:	9802      	ldr	r0, [sp, #8]
 8009446:	4798      	blx	r3
 8009448:	0025      	movs	r5, r4
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	2310      	movs	r3, #16
 800944e:	0011      	movs	r1, r2
 8009450:	4019      	ands	r1, r3
 8009452:	9103      	str	r1, [sp, #12]
 8009454:	421a      	tst	r2, r3
 8009456:	d15b      	bne.n	8009510 <_scanf_float+0x404>
 8009458:	22c0      	movs	r2, #192	; 0xc0
 800945a:	7029      	strb	r1, [r5, #0]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	00d2      	lsls	r2, r2, #3
 8009460:	4013      	ands	r3, r2
 8009462:	2280      	movs	r2, #128	; 0x80
 8009464:	00d2      	lsls	r2, r2, #3
 8009466:	4293      	cmp	r3, r2
 8009468:	d11d      	bne.n	80094a6 <_scanf_float+0x39a>
 800946a:	9b05      	ldr	r3, [sp, #20]
 800946c:	9a01      	ldr	r2, [sp, #4]
 800946e:	9901      	ldr	r1, [sp, #4]
 8009470:	1a9a      	subs	r2, r3, r2
 8009472:	428b      	cmp	r3, r1
 8009474:	d124      	bne.n	80094c0 <_scanf_float+0x3b4>
 8009476:	2200      	movs	r2, #0
 8009478:	9904      	ldr	r1, [sp, #16]
 800947a:	9802      	ldr	r0, [sp, #8]
 800947c:	f002 fc98 	bl	800bdb0 <_strtod_r>
 8009480:	9b07      	ldr	r3, [sp, #28]
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	0004      	movs	r4, r0
 8009486:	000d      	movs	r5, r1
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	0791      	lsls	r1, r2, #30
 800948c:	d525      	bpl.n	80094da <_scanf_float+0x3ce>
 800948e:	9907      	ldr	r1, [sp, #28]
 8009490:	1d1a      	adds	r2, r3, #4
 8009492:	600a      	str	r2, [r1, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	601c      	str	r4, [r3, #0]
 8009498:	605d      	str	r5, [r3, #4]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3301      	adds	r3, #1
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	9803      	ldr	r0, [sp, #12]
 80094a2:	b00b      	add	sp, #44	; 0x2c
 80094a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094a6:	9b08      	ldr	r3, [sp, #32]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d0e4      	beq.n	8009476 <_scanf_float+0x36a>
 80094ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ae:	9a03      	ldr	r2, [sp, #12]
 80094b0:	1c59      	adds	r1, r3, #1
 80094b2:	9802      	ldr	r0, [sp, #8]
 80094b4:	230a      	movs	r3, #10
 80094b6:	f002 fd09 	bl	800becc <_strtol_r>
 80094ba:	9b08      	ldr	r3, [sp, #32]
 80094bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80094be:	1ac2      	subs	r2, r0, r3
 80094c0:	003b      	movs	r3, r7
 80094c2:	3370      	adds	r3, #112	; 0x70
 80094c4:	33ff      	adds	r3, #255	; 0xff
 80094c6:	429d      	cmp	r5, r3
 80094c8:	d302      	bcc.n	80094d0 <_scanf_float+0x3c4>
 80094ca:	003d      	movs	r5, r7
 80094cc:	356f      	adds	r5, #111	; 0x6f
 80094ce:	35ff      	adds	r5, #255	; 0xff
 80094d0:	0028      	movs	r0, r5
 80094d2:	4910      	ldr	r1, [pc, #64]	; (8009514 <_scanf_float+0x408>)
 80094d4:	f000 f8e6 	bl	80096a4 <siprintf>
 80094d8:	e7cd      	b.n	8009476 <_scanf_float+0x36a>
 80094da:	1d19      	adds	r1, r3, #4
 80094dc:	0752      	lsls	r2, r2, #29
 80094de:	d502      	bpl.n	80094e6 <_scanf_float+0x3da>
 80094e0:	9a07      	ldr	r2, [sp, #28]
 80094e2:	6011      	str	r1, [r2, #0]
 80094e4:	e7d6      	b.n	8009494 <_scanf_float+0x388>
 80094e6:	9a07      	ldr	r2, [sp, #28]
 80094e8:	0020      	movs	r0, r4
 80094ea:	6011      	str	r1, [r2, #0]
 80094ec:	681e      	ldr	r6, [r3, #0]
 80094ee:	0022      	movs	r2, r4
 80094f0:	002b      	movs	r3, r5
 80094f2:	0029      	movs	r1, r5
 80094f4:	f7f8 ff00 	bl	80022f8 <__aeabi_dcmpun>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d004      	beq.n	8009506 <_scanf_float+0x3fa>
 80094fc:	4806      	ldr	r0, [pc, #24]	; (8009518 <_scanf_float+0x40c>)
 80094fe:	f000 f9cf 	bl	80098a0 <nanf>
 8009502:	6030      	str	r0, [r6, #0]
 8009504:	e7c9      	b.n	800949a <_scanf_float+0x38e>
 8009506:	0020      	movs	r0, r4
 8009508:	0029      	movs	r1, r5
 800950a:	f7f8 ff9f 	bl	800244c <__aeabi_d2f>
 800950e:	e7f8      	b.n	8009502 <_scanf_float+0x3f6>
 8009510:	2300      	movs	r3, #0
 8009512:	e63f      	b.n	8009194 <_scanf_float+0x88>
 8009514:	0800d244 	.word	0x0800d244
 8009518:	0800d5d5 	.word	0x0800d5d5

0800951c <std>:
 800951c:	2300      	movs	r3, #0
 800951e:	b510      	push	{r4, lr}
 8009520:	0004      	movs	r4, r0
 8009522:	6003      	str	r3, [r0, #0]
 8009524:	6043      	str	r3, [r0, #4]
 8009526:	6083      	str	r3, [r0, #8]
 8009528:	8181      	strh	r1, [r0, #12]
 800952a:	6643      	str	r3, [r0, #100]	; 0x64
 800952c:	81c2      	strh	r2, [r0, #14]
 800952e:	6103      	str	r3, [r0, #16]
 8009530:	6143      	str	r3, [r0, #20]
 8009532:	6183      	str	r3, [r0, #24]
 8009534:	0019      	movs	r1, r3
 8009536:	2208      	movs	r2, #8
 8009538:	305c      	adds	r0, #92	; 0x5c
 800953a:	f000 f91f 	bl	800977c <memset>
 800953e:	4b0b      	ldr	r3, [pc, #44]	; (800956c <std+0x50>)
 8009540:	6224      	str	r4, [r4, #32]
 8009542:	6263      	str	r3, [r4, #36]	; 0x24
 8009544:	4b0a      	ldr	r3, [pc, #40]	; (8009570 <std+0x54>)
 8009546:	62a3      	str	r3, [r4, #40]	; 0x28
 8009548:	4b0a      	ldr	r3, [pc, #40]	; (8009574 <std+0x58>)
 800954a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800954c:	4b0a      	ldr	r3, [pc, #40]	; (8009578 <std+0x5c>)
 800954e:	6323      	str	r3, [r4, #48]	; 0x30
 8009550:	4b0a      	ldr	r3, [pc, #40]	; (800957c <std+0x60>)
 8009552:	429c      	cmp	r4, r3
 8009554:	d005      	beq.n	8009562 <std+0x46>
 8009556:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <std+0x64>)
 8009558:	429c      	cmp	r4, r3
 800955a:	d002      	beq.n	8009562 <std+0x46>
 800955c:	4b09      	ldr	r3, [pc, #36]	; (8009584 <std+0x68>)
 800955e:	429c      	cmp	r4, r3
 8009560:	d103      	bne.n	800956a <std+0x4e>
 8009562:	0020      	movs	r0, r4
 8009564:	3058      	adds	r0, #88	; 0x58
 8009566:	f000 f98d 	bl	8009884 <__retarget_lock_init_recursive>
 800956a:	bd10      	pop	{r4, pc}
 800956c:	080096e5 	.word	0x080096e5
 8009570:	0800970d 	.word	0x0800970d
 8009574:	08009745 	.word	0x08009745
 8009578:	08009771 	.word	0x08009771
 800957c:	20000828 	.word	0x20000828
 8009580:	20000890 	.word	0x20000890
 8009584:	200008f8 	.word	0x200008f8

08009588 <stdio_exit_handler>:
 8009588:	b510      	push	{r4, lr}
 800958a:	4a03      	ldr	r2, [pc, #12]	; (8009598 <stdio_exit_handler+0x10>)
 800958c:	4903      	ldr	r1, [pc, #12]	; (800959c <stdio_exit_handler+0x14>)
 800958e:	4804      	ldr	r0, [pc, #16]	; (80095a0 <stdio_exit_handler+0x18>)
 8009590:	f000 f86c 	bl	800966c <_fwalk_sglue>
 8009594:	bd10      	pop	{r4, pc}
 8009596:	46c0      	nop			; (mov r8, r8)
 8009598:	2000000c 	.word	0x2000000c
 800959c:	0800c2ad 	.word	0x0800c2ad
 80095a0:	20000018 	.word	0x20000018

080095a4 <cleanup_stdio>:
 80095a4:	6841      	ldr	r1, [r0, #4]
 80095a6:	4b0b      	ldr	r3, [pc, #44]	; (80095d4 <cleanup_stdio+0x30>)
 80095a8:	b510      	push	{r4, lr}
 80095aa:	0004      	movs	r4, r0
 80095ac:	4299      	cmp	r1, r3
 80095ae:	d001      	beq.n	80095b4 <cleanup_stdio+0x10>
 80095b0:	f002 fe7c 	bl	800c2ac <_fflush_r>
 80095b4:	68a1      	ldr	r1, [r4, #8]
 80095b6:	4b08      	ldr	r3, [pc, #32]	; (80095d8 <cleanup_stdio+0x34>)
 80095b8:	4299      	cmp	r1, r3
 80095ba:	d002      	beq.n	80095c2 <cleanup_stdio+0x1e>
 80095bc:	0020      	movs	r0, r4
 80095be:	f002 fe75 	bl	800c2ac <_fflush_r>
 80095c2:	68e1      	ldr	r1, [r4, #12]
 80095c4:	4b05      	ldr	r3, [pc, #20]	; (80095dc <cleanup_stdio+0x38>)
 80095c6:	4299      	cmp	r1, r3
 80095c8:	d002      	beq.n	80095d0 <cleanup_stdio+0x2c>
 80095ca:	0020      	movs	r0, r4
 80095cc:	f002 fe6e 	bl	800c2ac <_fflush_r>
 80095d0:	bd10      	pop	{r4, pc}
 80095d2:	46c0      	nop			; (mov r8, r8)
 80095d4:	20000828 	.word	0x20000828
 80095d8:	20000890 	.word	0x20000890
 80095dc:	200008f8 	.word	0x200008f8

080095e0 <global_stdio_init.part.0>:
 80095e0:	b510      	push	{r4, lr}
 80095e2:	4b09      	ldr	r3, [pc, #36]	; (8009608 <global_stdio_init.part.0+0x28>)
 80095e4:	4a09      	ldr	r2, [pc, #36]	; (800960c <global_stdio_init.part.0+0x2c>)
 80095e6:	2104      	movs	r1, #4
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	4809      	ldr	r0, [pc, #36]	; (8009610 <global_stdio_init.part.0+0x30>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	f7ff ff95 	bl	800951c <std>
 80095f2:	2201      	movs	r2, #1
 80095f4:	2109      	movs	r1, #9
 80095f6:	4807      	ldr	r0, [pc, #28]	; (8009614 <global_stdio_init.part.0+0x34>)
 80095f8:	f7ff ff90 	bl	800951c <std>
 80095fc:	2202      	movs	r2, #2
 80095fe:	2112      	movs	r1, #18
 8009600:	4805      	ldr	r0, [pc, #20]	; (8009618 <global_stdio_init.part.0+0x38>)
 8009602:	f7ff ff8b 	bl	800951c <std>
 8009606:	bd10      	pop	{r4, pc}
 8009608:	20000960 	.word	0x20000960
 800960c:	08009589 	.word	0x08009589
 8009610:	20000828 	.word	0x20000828
 8009614:	20000890 	.word	0x20000890
 8009618:	200008f8 	.word	0x200008f8

0800961c <__sfp_lock_acquire>:
 800961c:	b510      	push	{r4, lr}
 800961e:	4802      	ldr	r0, [pc, #8]	; (8009628 <__sfp_lock_acquire+0xc>)
 8009620:	f000 f931 	bl	8009886 <__retarget_lock_acquire_recursive>
 8009624:	bd10      	pop	{r4, pc}
 8009626:	46c0      	nop			; (mov r8, r8)
 8009628:	20000969 	.word	0x20000969

0800962c <__sfp_lock_release>:
 800962c:	b510      	push	{r4, lr}
 800962e:	4802      	ldr	r0, [pc, #8]	; (8009638 <__sfp_lock_release+0xc>)
 8009630:	f000 f92a 	bl	8009888 <__retarget_lock_release_recursive>
 8009634:	bd10      	pop	{r4, pc}
 8009636:	46c0      	nop			; (mov r8, r8)
 8009638:	20000969 	.word	0x20000969

0800963c <__sinit>:
 800963c:	b510      	push	{r4, lr}
 800963e:	0004      	movs	r4, r0
 8009640:	f7ff ffec 	bl	800961c <__sfp_lock_acquire>
 8009644:	6a23      	ldr	r3, [r4, #32]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d002      	beq.n	8009650 <__sinit+0x14>
 800964a:	f7ff ffef 	bl	800962c <__sfp_lock_release>
 800964e:	bd10      	pop	{r4, pc}
 8009650:	4b04      	ldr	r3, [pc, #16]	; (8009664 <__sinit+0x28>)
 8009652:	6223      	str	r3, [r4, #32]
 8009654:	4b04      	ldr	r3, [pc, #16]	; (8009668 <__sinit+0x2c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1f6      	bne.n	800964a <__sinit+0xe>
 800965c:	f7ff ffc0 	bl	80095e0 <global_stdio_init.part.0>
 8009660:	e7f3      	b.n	800964a <__sinit+0xe>
 8009662:	46c0      	nop			; (mov r8, r8)
 8009664:	080095a5 	.word	0x080095a5
 8009668:	20000960 	.word	0x20000960

0800966c <_fwalk_sglue>:
 800966c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800966e:	0014      	movs	r4, r2
 8009670:	2600      	movs	r6, #0
 8009672:	9000      	str	r0, [sp, #0]
 8009674:	9101      	str	r1, [sp, #4]
 8009676:	68a5      	ldr	r5, [r4, #8]
 8009678:	6867      	ldr	r7, [r4, #4]
 800967a:	3f01      	subs	r7, #1
 800967c:	d504      	bpl.n	8009688 <_fwalk_sglue+0x1c>
 800967e:	6824      	ldr	r4, [r4, #0]
 8009680:	2c00      	cmp	r4, #0
 8009682:	d1f8      	bne.n	8009676 <_fwalk_sglue+0xa>
 8009684:	0030      	movs	r0, r6
 8009686:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009688:	89ab      	ldrh	r3, [r5, #12]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d908      	bls.n	80096a0 <_fwalk_sglue+0x34>
 800968e:	220e      	movs	r2, #14
 8009690:	5eab      	ldrsh	r3, [r5, r2]
 8009692:	3301      	adds	r3, #1
 8009694:	d004      	beq.n	80096a0 <_fwalk_sglue+0x34>
 8009696:	0029      	movs	r1, r5
 8009698:	9800      	ldr	r0, [sp, #0]
 800969a:	9b01      	ldr	r3, [sp, #4]
 800969c:	4798      	blx	r3
 800969e:	4306      	orrs	r6, r0
 80096a0:	3568      	adds	r5, #104	; 0x68
 80096a2:	e7ea      	b.n	800967a <_fwalk_sglue+0xe>

080096a4 <siprintf>:
 80096a4:	b40e      	push	{r1, r2, r3}
 80096a6:	b500      	push	{lr}
 80096a8:	490b      	ldr	r1, [pc, #44]	; (80096d8 <siprintf+0x34>)
 80096aa:	b09c      	sub	sp, #112	; 0x70
 80096ac:	ab1d      	add	r3, sp, #116	; 0x74
 80096ae:	9002      	str	r0, [sp, #8]
 80096b0:	9006      	str	r0, [sp, #24]
 80096b2:	9107      	str	r1, [sp, #28]
 80096b4:	9104      	str	r1, [sp, #16]
 80096b6:	4809      	ldr	r0, [pc, #36]	; (80096dc <siprintf+0x38>)
 80096b8:	4909      	ldr	r1, [pc, #36]	; (80096e0 <siprintf+0x3c>)
 80096ba:	cb04      	ldmia	r3!, {r2}
 80096bc:	9105      	str	r1, [sp, #20]
 80096be:	6800      	ldr	r0, [r0, #0]
 80096c0:	a902      	add	r1, sp, #8
 80096c2:	9301      	str	r3, [sp, #4]
 80096c4:	f002 fc68 	bl	800bf98 <_svfiprintf_r>
 80096c8:	2200      	movs	r2, #0
 80096ca:	9b02      	ldr	r3, [sp, #8]
 80096cc:	701a      	strb	r2, [r3, #0]
 80096ce:	b01c      	add	sp, #112	; 0x70
 80096d0:	bc08      	pop	{r3}
 80096d2:	b003      	add	sp, #12
 80096d4:	4718      	bx	r3
 80096d6:	46c0      	nop			; (mov r8, r8)
 80096d8:	7fffffff 	.word	0x7fffffff
 80096dc:	20000064 	.word	0x20000064
 80096e0:	ffff0208 	.word	0xffff0208

080096e4 <__sread>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	000c      	movs	r4, r1
 80096e8:	250e      	movs	r5, #14
 80096ea:	5f49      	ldrsh	r1, [r1, r5]
 80096ec:	f000 f878 	bl	80097e0 <_read_r>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	db03      	blt.n	80096fc <__sread+0x18>
 80096f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80096f6:	181b      	adds	r3, r3, r0
 80096f8:	6563      	str	r3, [r4, #84]	; 0x54
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	4a02      	ldr	r2, [pc, #8]	; (8009708 <__sread+0x24>)
 8009700:	4013      	ands	r3, r2
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	e7f9      	b.n	80096fa <__sread+0x16>
 8009706:	46c0      	nop			; (mov r8, r8)
 8009708:	ffffefff 	.word	0xffffefff

0800970c <__swrite>:
 800970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970e:	001f      	movs	r7, r3
 8009710:	898b      	ldrh	r3, [r1, #12]
 8009712:	0005      	movs	r5, r0
 8009714:	000c      	movs	r4, r1
 8009716:	0016      	movs	r6, r2
 8009718:	05db      	lsls	r3, r3, #23
 800971a:	d505      	bpl.n	8009728 <__swrite+0x1c>
 800971c:	230e      	movs	r3, #14
 800971e:	5ec9      	ldrsh	r1, [r1, r3]
 8009720:	2200      	movs	r2, #0
 8009722:	2302      	movs	r3, #2
 8009724:	f000 f848 	bl	80097b8 <_lseek_r>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	4a05      	ldr	r2, [pc, #20]	; (8009740 <__swrite+0x34>)
 800972c:	0028      	movs	r0, r5
 800972e:	4013      	ands	r3, r2
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	0032      	movs	r2, r6
 8009734:	230e      	movs	r3, #14
 8009736:	5ee1      	ldrsh	r1, [r4, r3]
 8009738:	003b      	movs	r3, r7
 800973a:	f000 f865 	bl	8009808 <_write_r>
 800973e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009740:	ffffefff 	.word	0xffffefff

08009744 <__sseek>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	000c      	movs	r4, r1
 8009748:	250e      	movs	r5, #14
 800974a:	5f49      	ldrsh	r1, [r1, r5]
 800974c:	f000 f834 	bl	80097b8 <_lseek_r>
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	1c42      	adds	r2, r0, #1
 8009754:	d103      	bne.n	800975e <__sseek+0x1a>
 8009756:	4a05      	ldr	r2, [pc, #20]	; (800976c <__sseek+0x28>)
 8009758:	4013      	ands	r3, r2
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	bd70      	pop	{r4, r5, r6, pc}
 800975e:	2280      	movs	r2, #128	; 0x80
 8009760:	0152      	lsls	r2, r2, #5
 8009762:	4313      	orrs	r3, r2
 8009764:	81a3      	strh	r3, [r4, #12]
 8009766:	6560      	str	r0, [r4, #84]	; 0x54
 8009768:	e7f8      	b.n	800975c <__sseek+0x18>
 800976a:	46c0      	nop			; (mov r8, r8)
 800976c:	ffffefff 	.word	0xffffefff

08009770 <__sclose>:
 8009770:	b510      	push	{r4, lr}
 8009772:	230e      	movs	r3, #14
 8009774:	5ec9      	ldrsh	r1, [r1, r3]
 8009776:	f000 f80d 	bl	8009794 <_close_r>
 800977a:	bd10      	pop	{r4, pc}

0800977c <memset>:
 800977c:	0003      	movs	r3, r0
 800977e:	1882      	adds	r2, r0, r2
 8009780:	4293      	cmp	r3, r2
 8009782:	d100      	bne.n	8009786 <memset+0xa>
 8009784:	4770      	bx	lr
 8009786:	7019      	strb	r1, [r3, #0]
 8009788:	3301      	adds	r3, #1
 800978a:	e7f9      	b.n	8009780 <memset+0x4>

0800978c <_localeconv_r>:
 800978c:	4800      	ldr	r0, [pc, #0]	; (8009790 <_localeconv_r+0x4>)
 800978e:	4770      	bx	lr
 8009790:	20000158 	.word	0x20000158

08009794 <_close_r>:
 8009794:	2300      	movs	r3, #0
 8009796:	b570      	push	{r4, r5, r6, lr}
 8009798:	4d06      	ldr	r5, [pc, #24]	; (80097b4 <_close_r+0x20>)
 800979a:	0004      	movs	r4, r0
 800979c:	0008      	movs	r0, r1
 800979e:	602b      	str	r3, [r5, #0]
 80097a0:	f7fa f8b9 	bl	8003916 <_close>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d103      	bne.n	80097b0 <_close_r+0x1c>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d000      	beq.n	80097b0 <_close_r+0x1c>
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	bd70      	pop	{r4, r5, r6, pc}
 80097b2:	46c0      	nop			; (mov r8, r8)
 80097b4:	20000964 	.word	0x20000964

080097b8 <_lseek_r>:
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	0004      	movs	r4, r0
 80097bc:	0008      	movs	r0, r1
 80097be:	0011      	movs	r1, r2
 80097c0:	001a      	movs	r2, r3
 80097c2:	2300      	movs	r3, #0
 80097c4:	4d05      	ldr	r5, [pc, #20]	; (80097dc <_lseek_r+0x24>)
 80097c6:	602b      	str	r3, [r5, #0]
 80097c8:	f7fa f8c6 	bl	8003958 <_lseek>
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	d103      	bne.n	80097d8 <_lseek_r+0x20>
 80097d0:	682b      	ldr	r3, [r5, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d000      	beq.n	80097d8 <_lseek_r+0x20>
 80097d6:	6023      	str	r3, [r4, #0]
 80097d8:	bd70      	pop	{r4, r5, r6, pc}
 80097da:	46c0      	nop			; (mov r8, r8)
 80097dc:	20000964 	.word	0x20000964

080097e0 <_read_r>:
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	0004      	movs	r4, r0
 80097e4:	0008      	movs	r0, r1
 80097e6:	0011      	movs	r1, r2
 80097e8:	001a      	movs	r2, r3
 80097ea:	2300      	movs	r3, #0
 80097ec:	4d05      	ldr	r5, [pc, #20]	; (8009804 <_read_r+0x24>)
 80097ee:	602b      	str	r3, [r5, #0]
 80097f0:	f7fa f858 	bl	80038a4 <_read>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d103      	bne.n	8009800 <_read_r+0x20>
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d000      	beq.n	8009800 <_read_r+0x20>
 80097fe:	6023      	str	r3, [r4, #0]
 8009800:	bd70      	pop	{r4, r5, r6, pc}
 8009802:	46c0      	nop			; (mov r8, r8)
 8009804:	20000964 	.word	0x20000964

08009808 <_write_r>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	0004      	movs	r4, r0
 800980c:	0008      	movs	r0, r1
 800980e:	0011      	movs	r1, r2
 8009810:	001a      	movs	r2, r3
 8009812:	2300      	movs	r3, #0
 8009814:	4d05      	ldr	r5, [pc, #20]	; (800982c <_write_r+0x24>)
 8009816:	602b      	str	r3, [r5, #0]
 8009818:	f7fa f861 	bl	80038de <_write>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d103      	bne.n	8009828 <_write_r+0x20>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d000      	beq.n	8009828 <_write_r+0x20>
 8009826:	6023      	str	r3, [r4, #0]
 8009828:	bd70      	pop	{r4, r5, r6, pc}
 800982a:	46c0      	nop			; (mov r8, r8)
 800982c:	20000964 	.word	0x20000964

08009830 <__errno>:
 8009830:	4b01      	ldr	r3, [pc, #4]	; (8009838 <__errno+0x8>)
 8009832:	6818      	ldr	r0, [r3, #0]
 8009834:	4770      	bx	lr
 8009836:	46c0      	nop			; (mov r8, r8)
 8009838:	20000064 	.word	0x20000064

0800983c <__libc_init_array>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	2600      	movs	r6, #0
 8009840:	4c0c      	ldr	r4, [pc, #48]	; (8009874 <__libc_init_array+0x38>)
 8009842:	4d0d      	ldr	r5, [pc, #52]	; (8009878 <__libc_init_array+0x3c>)
 8009844:	1b64      	subs	r4, r4, r5
 8009846:	10a4      	asrs	r4, r4, #2
 8009848:	42a6      	cmp	r6, r4
 800984a:	d109      	bne.n	8009860 <__libc_init_array+0x24>
 800984c:	2600      	movs	r6, #0
 800984e:	f003 fc71 	bl	800d134 <_init>
 8009852:	4c0a      	ldr	r4, [pc, #40]	; (800987c <__libc_init_array+0x40>)
 8009854:	4d0a      	ldr	r5, [pc, #40]	; (8009880 <__libc_init_array+0x44>)
 8009856:	1b64      	subs	r4, r4, r5
 8009858:	10a4      	asrs	r4, r4, #2
 800985a:	42a6      	cmp	r6, r4
 800985c:	d105      	bne.n	800986a <__libc_init_array+0x2e>
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	00b3      	lsls	r3, r6, #2
 8009862:	58eb      	ldr	r3, [r5, r3]
 8009864:	4798      	blx	r3
 8009866:	3601      	adds	r6, #1
 8009868:	e7ee      	b.n	8009848 <__libc_init_array+0xc>
 800986a:	00b3      	lsls	r3, r6, #2
 800986c:	58eb      	ldr	r3, [r5, r3]
 800986e:	4798      	blx	r3
 8009870:	3601      	adds	r6, #1
 8009872:	e7f2      	b.n	800985a <__libc_init_array+0x1e>
 8009874:	0800d640 	.word	0x0800d640
 8009878:	0800d640 	.word	0x0800d640
 800987c:	0800d644 	.word	0x0800d644
 8009880:	0800d640 	.word	0x0800d640

08009884 <__retarget_lock_init_recursive>:
 8009884:	4770      	bx	lr

08009886 <__retarget_lock_acquire_recursive>:
 8009886:	4770      	bx	lr

08009888 <__retarget_lock_release_recursive>:
 8009888:	4770      	bx	lr

0800988a <memchr>:
 800988a:	b2c9      	uxtb	r1, r1
 800988c:	1882      	adds	r2, r0, r2
 800988e:	4290      	cmp	r0, r2
 8009890:	d101      	bne.n	8009896 <memchr+0xc>
 8009892:	2000      	movs	r0, #0
 8009894:	4770      	bx	lr
 8009896:	7803      	ldrb	r3, [r0, #0]
 8009898:	428b      	cmp	r3, r1
 800989a:	d0fb      	beq.n	8009894 <memchr+0xa>
 800989c:	3001      	adds	r0, #1
 800989e:	e7f6      	b.n	800988e <memchr+0x4>

080098a0 <nanf>:
 80098a0:	4800      	ldr	r0, [pc, #0]	; (80098a4 <nanf+0x4>)
 80098a2:	4770      	bx	lr
 80098a4:	7fc00000 	.word	0x7fc00000

080098a8 <quorem>:
 80098a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098aa:	6902      	ldr	r2, [r0, #16]
 80098ac:	690b      	ldr	r3, [r1, #16]
 80098ae:	b089      	sub	sp, #36	; 0x24
 80098b0:	0007      	movs	r7, r0
 80098b2:	9104      	str	r1, [sp, #16]
 80098b4:	2000      	movs	r0, #0
 80098b6:	429a      	cmp	r2, r3
 80098b8:	db69      	blt.n	800998e <quorem+0xe6>
 80098ba:	3b01      	subs	r3, #1
 80098bc:	009c      	lsls	r4, r3, #2
 80098be:	9301      	str	r3, [sp, #4]
 80098c0:	000b      	movs	r3, r1
 80098c2:	3314      	adds	r3, #20
 80098c4:	9306      	str	r3, [sp, #24]
 80098c6:	191b      	adds	r3, r3, r4
 80098c8:	9305      	str	r3, [sp, #20]
 80098ca:	003b      	movs	r3, r7
 80098cc:	3314      	adds	r3, #20
 80098ce:	9303      	str	r3, [sp, #12]
 80098d0:	191c      	adds	r4, r3, r4
 80098d2:	9b05      	ldr	r3, [sp, #20]
 80098d4:	6826      	ldr	r6, [r4, #0]
 80098d6:	681d      	ldr	r5, [r3, #0]
 80098d8:	0030      	movs	r0, r6
 80098da:	3501      	adds	r5, #1
 80098dc:	0029      	movs	r1, r5
 80098de:	f7f6 fc2f 	bl	8000140 <__udivsi3>
 80098e2:	9002      	str	r0, [sp, #8]
 80098e4:	42ae      	cmp	r6, r5
 80098e6:	d329      	bcc.n	800993c <quorem+0x94>
 80098e8:	9b06      	ldr	r3, [sp, #24]
 80098ea:	2600      	movs	r6, #0
 80098ec:	469c      	mov	ip, r3
 80098ee:	9d03      	ldr	r5, [sp, #12]
 80098f0:	9606      	str	r6, [sp, #24]
 80098f2:	4662      	mov	r2, ip
 80098f4:	ca08      	ldmia	r2!, {r3}
 80098f6:	6828      	ldr	r0, [r5, #0]
 80098f8:	4694      	mov	ip, r2
 80098fa:	9a02      	ldr	r2, [sp, #8]
 80098fc:	b299      	uxth	r1, r3
 80098fe:	4351      	muls	r1, r2
 8009900:	0c1b      	lsrs	r3, r3, #16
 8009902:	4353      	muls	r3, r2
 8009904:	1989      	adds	r1, r1, r6
 8009906:	0c0a      	lsrs	r2, r1, #16
 8009908:	189b      	adds	r3, r3, r2
 800990a:	9307      	str	r3, [sp, #28]
 800990c:	0c1e      	lsrs	r6, r3, #16
 800990e:	9b06      	ldr	r3, [sp, #24]
 8009910:	b282      	uxth	r2, r0
 8009912:	18d2      	adds	r2, r2, r3
 8009914:	466b      	mov	r3, sp
 8009916:	b289      	uxth	r1, r1
 8009918:	8b9b      	ldrh	r3, [r3, #28]
 800991a:	1a52      	subs	r2, r2, r1
 800991c:	0c01      	lsrs	r1, r0, #16
 800991e:	1ac9      	subs	r1, r1, r3
 8009920:	1413      	asrs	r3, r2, #16
 8009922:	18cb      	adds	r3, r1, r3
 8009924:	1419      	asrs	r1, r3, #16
 8009926:	b292      	uxth	r2, r2
 8009928:	041b      	lsls	r3, r3, #16
 800992a:	4313      	orrs	r3, r2
 800992c:	c508      	stmia	r5!, {r3}
 800992e:	9b05      	ldr	r3, [sp, #20]
 8009930:	9106      	str	r1, [sp, #24]
 8009932:	4563      	cmp	r3, ip
 8009934:	d2dd      	bcs.n	80098f2 <quorem+0x4a>
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d030      	beq.n	800999e <quorem+0xf6>
 800993c:	0038      	movs	r0, r7
 800993e:	9904      	ldr	r1, [sp, #16]
 8009940:	f001 fa2a 	bl	800ad98 <__mcmp>
 8009944:	2800      	cmp	r0, #0
 8009946:	db21      	blt.n	800998c <quorem+0xe4>
 8009948:	0038      	movs	r0, r7
 800994a:	2600      	movs	r6, #0
 800994c:	9b02      	ldr	r3, [sp, #8]
 800994e:	9c04      	ldr	r4, [sp, #16]
 8009950:	3301      	adds	r3, #1
 8009952:	9302      	str	r3, [sp, #8]
 8009954:	3014      	adds	r0, #20
 8009956:	3414      	adds	r4, #20
 8009958:	6803      	ldr	r3, [r0, #0]
 800995a:	cc02      	ldmia	r4!, {r1}
 800995c:	b29d      	uxth	r5, r3
 800995e:	19ad      	adds	r5, r5, r6
 8009960:	b28a      	uxth	r2, r1
 8009962:	1aaa      	subs	r2, r5, r2
 8009964:	0c09      	lsrs	r1, r1, #16
 8009966:	0c1b      	lsrs	r3, r3, #16
 8009968:	1a5b      	subs	r3, r3, r1
 800996a:	1411      	asrs	r1, r2, #16
 800996c:	185b      	adds	r3, r3, r1
 800996e:	141e      	asrs	r6, r3, #16
 8009970:	b292      	uxth	r2, r2
 8009972:	041b      	lsls	r3, r3, #16
 8009974:	4313      	orrs	r3, r2
 8009976:	c008      	stmia	r0!, {r3}
 8009978:	9b05      	ldr	r3, [sp, #20]
 800997a:	42a3      	cmp	r3, r4
 800997c:	d2ec      	bcs.n	8009958 <quorem+0xb0>
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	9a03      	ldr	r2, [sp, #12]
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	18d3      	adds	r3, r2, r3
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	2a00      	cmp	r2, #0
 800998a:	d015      	beq.n	80099b8 <quorem+0x110>
 800998c:	9802      	ldr	r0, [sp, #8]
 800998e:	b009      	add	sp, #36	; 0x24
 8009990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d106      	bne.n	80099a6 <quorem+0xfe>
 8009998:	9b01      	ldr	r3, [sp, #4]
 800999a:	3b01      	subs	r3, #1
 800999c:	9301      	str	r3, [sp, #4]
 800999e:	9b03      	ldr	r3, [sp, #12]
 80099a0:	3c04      	subs	r4, #4
 80099a2:	42a3      	cmp	r3, r4
 80099a4:	d3f5      	bcc.n	8009992 <quorem+0xea>
 80099a6:	9b01      	ldr	r3, [sp, #4]
 80099a8:	613b      	str	r3, [r7, #16]
 80099aa:	e7c7      	b.n	800993c <quorem+0x94>
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	2a00      	cmp	r2, #0
 80099b0:	d106      	bne.n	80099c0 <quorem+0x118>
 80099b2:	9a01      	ldr	r2, [sp, #4]
 80099b4:	3a01      	subs	r2, #1
 80099b6:	9201      	str	r2, [sp, #4]
 80099b8:	9a03      	ldr	r2, [sp, #12]
 80099ba:	3b04      	subs	r3, #4
 80099bc:	429a      	cmp	r2, r3
 80099be:	d3f5      	bcc.n	80099ac <quorem+0x104>
 80099c0:	9b01      	ldr	r3, [sp, #4]
 80099c2:	613b      	str	r3, [r7, #16]
 80099c4:	e7e2      	b.n	800998c <quorem+0xe4>
	...

080099c8 <_dtoa_r>:
 80099c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ca:	0014      	movs	r4, r2
 80099cc:	001d      	movs	r5, r3
 80099ce:	69c6      	ldr	r6, [r0, #28]
 80099d0:	b09d      	sub	sp, #116	; 0x74
 80099d2:	9408      	str	r4, [sp, #32]
 80099d4:	9509      	str	r5, [sp, #36]	; 0x24
 80099d6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80099d8:	9004      	str	r0, [sp, #16]
 80099da:	2e00      	cmp	r6, #0
 80099dc:	d10f      	bne.n	80099fe <_dtoa_r+0x36>
 80099de:	2010      	movs	r0, #16
 80099e0:	f000 fe4a 	bl	800a678 <malloc>
 80099e4:	9b04      	ldr	r3, [sp, #16]
 80099e6:	1e02      	subs	r2, r0, #0
 80099e8:	61d8      	str	r0, [r3, #28]
 80099ea:	d104      	bne.n	80099f6 <_dtoa_r+0x2e>
 80099ec:	21ef      	movs	r1, #239	; 0xef
 80099ee:	4bc6      	ldr	r3, [pc, #792]	; (8009d08 <_dtoa_r+0x340>)
 80099f0:	48c6      	ldr	r0, [pc, #792]	; (8009d0c <_dtoa_r+0x344>)
 80099f2:	f002 fccd 	bl	800c390 <__assert_func>
 80099f6:	6046      	str	r6, [r0, #4]
 80099f8:	6086      	str	r6, [r0, #8]
 80099fa:	6006      	str	r6, [r0, #0]
 80099fc:	60c6      	str	r6, [r0, #12]
 80099fe:	9b04      	ldr	r3, [sp, #16]
 8009a00:	69db      	ldr	r3, [r3, #28]
 8009a02:	6819      	ldr	r1, [r3, #0]
 8009a04:	2900      	cmp	r1, #0
 8009a06:	d00b      	beq.n	8009a20 <_dtoa_r+0x58>
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	4093      	lsls	r3, r2
 8009a0e:	604a      	str	r2, [r1, #4]
 8009a10:	608b      	str	r3, [r1, #8]
 8009a12:	9804      	ldr	r0, [sp, #16]
 8009a14:	f000 ff32 	bl	800a87c <_Bfree>
 8009a18:	2200      	movs	r2, #0
 8009a1a:	9b04      	ldr	r3, [sp, #16]
 8009a1c:	69db      	ldr	r3, [r3, #28]
 8009a1e:	601a      	str	r2, [r3, #0]
 8009a20:	2d00      	cmp	r5, #0
 8009a22:	da1e      	bge.n	8009a62 <_dtoa_r+0x9a>
 8009a24:	2301      	movs	r3, #1
 8009a26:	603b      	str	r3, [r7, #0]
 8009a28:	006b      	lsls	r3, r5, #1
 8009a2a:	085b      	lsrs	r3, r3, #1
 8009a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009a30:	4bb7      	ldr	r3, [pc, #732]	; (8009d10 <_dtoa_r+0x348>)
 8009a32:	4ab7      	ldr	r2, [pc, #732]	; (8009d10 <_dtoa_r+0x348>)
 8009a34:	403b      	ands	r3, r7
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d116      	bne.n	8009a68 <_dtoa_r+0xa0>
 8009a3a:	4bb6      	ldr	r3, [pc, #728]	; (8009d14 <_dtoa_r+0x34c>)
 8009a3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	033b      	lsls	r3, r7, #12
 8009a42:	0b1b      	lsrs	r3, r3, #12
 8009a44:	4323      	orrs	r3, r4
 8009a46:	d101      	bne.n	8009a4c <_dtoa_r+0x84>
 8009a48:	f000 fdb5 	bl	800a5b6 <_dtoa_r+0xbee>
 8009a4c:	4bb2      	ldr	r3, [pc, #712]	; (8009d18 <_dtoa_r+0x350>)
 8009a4e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a50:	9306      	str	r3, [sp, #24]
 8009a52:	2a00      	cmp	r2, #0
 8009a54:	d002      	beq.n	8009a5c <_dtoa_r+0x94>
 8009a56:	4bb1      	ldr	r3, [pc, #708]	; (8009d1c <_dtoa_r+0x354>)
 8009a58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	9806      	ldr	r0, [sp, #24]
 8009a5e:	b01d      	add	sp, #116	; 0x74
 8009a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a62:	2300      	movs	r3, #0
 8009a64:	603b      	str	r3, [r7, #0]
 8009a66:	e7e2      	b.n	8009a2e <_dtoa_r+0x66>
 8009a68:	9a08      	ldr	r2, [sp, #32]
 8009a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a6c:	9210      	str	r2, [sp, #64]	; 0x40
 8009a6e:	9311      	str	r3, [sp, #68]	; 0x44
 8009a70:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009a72:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009a74:	2200      	movs	r2, #0
 8009a76:	2300      	movs	r3, #0
 8009a78:	f7f6 fce8 	bl	800044c <__aeabi_dcmpeq>
 8009a7c:	1e06      	subs	r6, r0, #0
 8009a7e:	d009      	beq.n	8009a94 <_dtoa_r+0xcc>
 8009a80:	2301      	movs	r3, #1
 8009a82:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	4ba6      	ldr	r3, [pc, #664]	; (8009d20 <_dtoa_r+0x358>)
 8009a88:	9306      	str	r3, [sp, #24]
 8009a8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d0e5      	beq.n	8009a5c <_dtoa_r+0x94>
 8009a90:	4ba4      	ldr	r3, [pc, #656]	; (8009d24 <_dtoa_r+0x35c>)
 8009a92:	e7e1      	b.n	8009a58 <_dtoa_r+0x90>
 8009a94:	ab1a      	add	r3, sp, #104	; 0x68
 8009a96:	9301      	str	r3, [sp, #4]
 8009a98:	ab1b      	add	r3, sp, #108	; 0x6c
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	9804      	ldr	r0, [sp, #16]
 8009a9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009aa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009aa2:	f001 fa95 	bl	800afd0 <__d2b>
 8009aa6:	007a      	lsls	r2, r7, #1
 8009aa8:	9005      	str	r0, [sp, #20]
 8009aaa:	0d52      	lsrs	r2, r2, #21
 8009aac:	d100      	bne.n	8009ab0 <_dtoa_r+0xe8>
 8009aae:	e07b      	b.n	8009ba8 <_dtoa_r+0x1e0>
 8009ab0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ab2:	9617      	str	r6, [sp, #92]	; 0x5c
 8009ab4:	0319      	lsls	r1, r3, #12
 8009ab6:	4b9c      	ldr	r3, [pc, #624]	; (8009d28 <_dtoa_r+0x360>)
 8009ab8:	0b09      	lsrs	r1, r1, #12
 8009aba:	430b      	orrs	r3, r1
 8009abc:	499b      	ldr	r1, [pc, #620]	; (8009d2c <_dtoa_r+0x364>)
 8009abe:	1857      	adds	r7, r2, r1
 8009ac0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009ac2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009ac4:	0019      	movs	r1, r3
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	4b99      	ldr	r3, [pc, #612]	; (8009d30 <_dtoa_r+0x368>)
 8009aca:	f7f8 f893 	bl	8001bf4 <__aeabi_dsub>
 8009ace:	4a99      	ldr	r2, [pc, #612]	; (8009d34 <_dtoa_r+0x36c>)
 8009ad0:	4b99      	ldr	r3, [pc, #612]	; (8009d38 <_dtoa_r+0x370>)
 8009ad2:	f7f7 fdcd 	bl	8001670 <__aeabi_dmul>
 8009ad6:	4a99      	ldr	r2, [pc, #612]	; (8009d3c <_dtoa_r+0x374>)
 8009ad8:	4b99      	ldr	r3, [pc, #612]	; (8009d40 <_dtoa_r+0x378>)
 8009ada:	f7f6 fe6f 	bl	80007bc <__aeabi_dadd>
 8009ade:	0004      	movs	r4, r0
 8009ae0:	0038      	movs	r0, r7
 8009ae2:	000d      	movs	r5, r1
 8009ae4:	f7f8 fc5c 	bl	80023a0 <__aeabi_i2d>
 8009ae8:	4a96      	ldr	r2, [pc, #600]	; (8009d44 <_dtoa_r+0x37c>)
 8009aea:	4b97      	ldr	r3, [pc, #604]	; (8009d48 <_dtoa_r+0x380>)
 8009aec:	f7f7 fdc0 	bl	8001670 <__aeabi_dmul>
 8009af0:	0002      	movs	r2, r0
 8009af2:	000b      	movs	r3, r1
 8009af4:	0020      	movs	r0, r4
 8009af6:	0029      	movs	r1, r5
 8009af8:	f7f6 fe60 	bl	80007bc <__aeabi_dadd>
 8009afc:	0004      	movs	r4, r0
 8009afe:	000d      	movs	r5, r1
 8009b00:	f7f8 fc18 	bl	8002334 <__aeabi_d2iz>
 8009b04:	2200      	movs	r2, #0
 8009b06:	9003      	str	r0, [sp, #12]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	0020      	movs	r0, r4
 8009b0c:	0029      	movs	r1, r5
 8009b0e:	f7f6 fca3 	bl	8000458 <__aeabi_dcmplt>
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d00b      	beq.n	8009b2e <_dtoa_r+0x166>
 8009b16:	9803      	ldr	r0, [sp, #12]
 8009b18:	f7f8 fc42 	bl	80023a0 <__aeabi_i2d>
 8009b1c:	002b      	movs	r3, r5
 8009b1e:	0022      	movs	r2, r4
 8009b20:	f7f6 fc94 	bl	800044c <__aeabi_dcmpeq>
 8009b24:	4243      	negs	r3, r0
 8009b26:	4158      	adcs	r0, r3
 8009b28:	9b03      	ldr	r3, [sp, #12]
 8009b2a:	1a1b      	subs	r3, r3, r0
 8009b2c:	9303      	str	r3, [sp, #12]
 8009b2e:	2301      	movs	r3, #1
 8009b30:	9316      	str	r3, [sp, #88]	; 0x58
 8009b32:	9b03      	ldr	r3, [sp, #12]
 8009b34:	2b16      	cmp	r3, #22
 8009b36:	d810      	bhi.n	8009b5a <_dtoa_r+0x192>
 8009b38:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009b3a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009b3c:	9a03      	ldr	r2, [sp, #12]
 8009b3e:	4b83      	ldr	r3, [pc, #524]	; (8009d4c <_dtoa_r+0x384>)
 8009b40:	00d2      	lsls	r2, r2, #3
 8009b42:	189b      	adds	r3, r3, r2
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	f7f6 fc86 	bl	8000458 <__aeabi_dcmplt>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d047      	beq.n	8009be0 <_dtoa_r+0x218>
 8009b50:	9b03      	ldr	r3, [sp, #12]
 8009b52:	3b01      	subs	r3, #1
 8009b54:	9303      	str	r3, [sp, #12]
 8009b56:	2300      	movs	r3, #0
 8009b58:	9316      	str	r3, [sp, #88]	; 0x58
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009b5e:	920a      	str	r2, [sp, #40]	; 0x28
 8009b60:	1bdb      	subs	r3, r3, r7
 8009b62:	1e5a      	subs	r2, r3, #1
 8009b64:	d53e      	bpl.n	8009be4 <_dtoa_r+0x21c>
 8009b66:	2201      	movs	r2, #1
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	930a      	str	r3, [sp, #40]	; 0x28
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b70:	9b03      	ldr	r3, [sp, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	db38      	blt.n	8009be8 <_dtoa_r+0x220>
 8009b76:	9a03      	ldr	r2, [sp, #12]
 8009b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b7a:	4694      	mov	ip, r2
 8009b7c:	4463      	add	r3, ip
 8009b7e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b80:	2300      	movs	r3, #0
 8009b82:	9213      	str	r2, [sp, #76]	; 0x4c
 8009b84:	930d      	str	r3, [sp, #52]	; 0x34
 8009b86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b88:	2401      	movs	r4, #1
 8009b8a:	2b09      	cmp	r3, #9
 8009b8c:	d867      	bhi.n	8009c5e <_dtoa_r+0x296>
 8009b8e:	2b05      	cmp	r3, #5
 8009b90:	dd02      	ble.n	8009b98 <_dtoa_r+0x1d0>
 8009b92:	2400      	movs	r4, #0
 8009b94:	3b04      	subs	r3, #4
 8009b96:	9322      	str	r3, [sp, #136]	; 0x88
 8009b98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b9a:	1e98      	subs	r0, r3, #2
 8009b9c:	2803      	cmp	r0, #3
 8009b9e:	d867      	bhi.n	8009c70 <_dtoa_r+0x2a8>
 8009ba0:	f7f6 faba 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009ba4:	5b383a2b 	.word	0x5b383a2b
 8009ba8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009baa:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009bac:	18f6      	adds	r6, r6, r3
 8009bae:	4b68      	ldr	r3, [pc, #416]	; (8009d50 <_dtoa_r+0x388>)
 8009bb0:	18f2      	adds	r2, r6, r3
 8009bb2:	2a20      	cmp	r2, #32
 8009bb4:	dd0f      	ble.n	8009bd6 <_dtoa_r+0x20e>
 8009bb6:	2340      	movs	r3, #64	; 0x40
 8009bb8:	1a9b      	subs	r3, r3, r2
 8009bba:	409f      	lsls	r7, r3
 8009bbc:	4b65      	ldr	r3, [pc, #404]	; (8009d54 <_dtoa_r+0x38c>)
 8009bbe:	0038      	movs	r0, r7
 8009bc0:	18f3      	adds	r3, r6, r3
 8009bc2:	40dc      	lsrs	r4, r3
 8009bc4:	4320      	orrs	r0, r4
 8009bc6:	f7f8 fc1b 	bl	8002400 <__aeabi_ui2d>
 8009bca:	2201      	movs	r2, #1
 8009bcc:	4b62      	ldr	r3, [pc, #392]	; (8009d58 <_dtoa_r+0x390>)
 8009bce:	1e77      	subs	r7, r6, #1
 8009bd0:	18cb      	adds	r3, r1, r3
 8009bd2:	9217      	str	r2, [sp, #92]	; 0x5c
 8009bd4:	e776      	b.n	8009ac4 <_dtoa_r+0xfc>
 8009bd6:	2320      	movs	r3, #32
 8009bd8:	0020      	movs	r0, r4
 8009bda:	1a9b      	subs	r3, r3, r2
 8009bdc:	4098      	lsls	r0, r3
 8009bde:	e7f2      	b.n	8009bc6 <_dtoa_r+0x1fe>
 8009be0:	9016      	str	r0, [sp, #88]	; 0x58
 8009be2:	e7ba      	b.n	8009b5a <_dtoa_r+0x192>
 8009be4:	920c      	str	r2, [sp, #48]	; 0x30
 8009be6:	e7c3      	b.n	8009b70 <_dtoa_r+0x1a8>
 8009be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bea:	9a03      	ldr	r2, [sp, #12]
 8009bec:	1a9b      	subs	r3, r3, r2
 8009bee:	930a      	str	r3, [sp, #40]	; 0x28
 8009bf0:	4253      	negs	r3, r2
 8009bf2:	930d      	str	r3, [sp, #52]	; 0x34
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	9313      	str	r3, [sp, #76]	; 0x4c
 8009bf8:	e7c5      	b.n	8009b86 <_dtoa_r+0x1be>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c02:	9307      	str	r3, [sp, #28]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	dc13      	bgt.n	8009c30 <_dtoa_r+0x268>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	001a      	movs	r2, r3
 8009c0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c0e:	9307      	str	r3, [sp, #28]
 8009c10:	9223      	str	r2, [sp, #140]	; 0x8c
 8009c12:	e00d      	b.n	8009c30 <_dtoa_r+0x268>
 8009c14:	2301      	movs	r3, #1
 8009c16:	e7f1      	b.n	8009bfc <_dtoa_r+0x234>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009c1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c1e:	4694      	mov	ip, r2
 8009c20:	9b03      	ldr	r3, [sp, #12]
 8009c22:	4463      	add	r3, ip
 8009c24:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c26:	3301      	adds	r3, #1
 8009c28:	9307      	str	r3, [sp, #28]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	dc00      	bgt.n	8009c30 <_dtoa_r+0x268>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	9a04      	ldr	r2, [sp, #16]
 8009c32:	2100      	movs	r1, #0
 8009c34:	69d0      	ldr	r0, [r2, #28]
 8009c36:	2204      	movs	r2, #4
 8009c38:	0015      	movs	r5, r2
 8009c3a:	3514      	adds	r5, #20
 8009c3c:	429d      	cmp	r5, r3
 8009c3e:	d91b      	bls.n	8009c78 <_dtoa_r+0x2b0>
 8009c40:	6041      	str	r1, [r0, #4]
 8009c42:	9804      	ldr	r0, [sp, #16]
 8009c44:	f000 fdd6 	bl	800a7f4 <_Balloc>
 8009c48:	9006      	str	r0, [sp, #24]
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d117      	bne.n	8009c7e <_dtoa_r+0x2b6>
 8009c4e:	21b0      	movs	r1, #176	; 0xb0
 8009c50:	4b42      	ldr	r3, [pc, #264]	; (8009d5c <_dtoa_r+0x394>)
 8009c52:	482e      	ldr	r0, [pc, #184]	; (8009d0c <_dtoa_r+0x344>)
 8009c54:	9a06      	ldr	r2, [sp, #24]
 8009c56:	31ff      	adds	r1, #255	; 0xff
 8009c58:	e6cb      	b.n	80099f2 <_dtoa_r+0x2a>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e7dd      	b.n	8009c1a <_dtoa_r+0x252>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	940f      	str	r4, [sp, #60]	; 0x3c
 8009c62:	9322      	str	r3, [sp, #136]	; 0x88
 8009c64:	3b01      	subs	r3, #1
 8009c66:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c68:	9307      	str	r3, [sp, #28]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	3313      	adds	r3, #19
 8009c6e:	e7cf      	b.n	8009c10 <_dtoa_r+0x248>
 8009c70:	2301      	movs	r3, #1
 8009c72:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c74:	3b02      	subs	r3, #2
 8009c76:	e7f6      	b.n	8009c66 <_dtoa_r+0x29e>
 8009c78:	3101      	adds	r1, #1
 8009c7a:	0052      	lsls	r2, r2, #1
 8009c7c:	e7dc      	b.n	8009c38 <_dtoa_r+0x270>
 8009c7e:	9b04      	ldr	r3, [sp, #16]
 8009c80:	9a06      	ldr	r2, [sp, #24]
 8009c82:	69db      	ldr	r3, [r3, #28]
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	9b07      	ldr	r3, [sp, #28]
 8009c88:	2b0e      	cmp	r3, #14
 8009c8a:	d900      	bls.n	8009c8e <_dtoa_r+0x2c6>
 8009c8c:	e0e5      	b.n	8009e5a <_dtoa_r+0x492>
 8009c8e:	2c00      	cmp	r4, #0
 8009c90:	d100      	bne.n	8009c94 <_dtoa_r+0x2cc>
 8009c92:	e0e2      	b.n	8009e5a <_dtoa_r+0x492>
 8009c94:	9b03      	ldr	r3, [sp, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	dd64      	ble.n	8009d64 <_dtoa_r+0x39c>
 8009c9a:	210f      	movs	r1, #15
 8009c9c:	9a03      	ldr	r2, [sp, #12]
 8009c9e:	4b2b      	ldr	r3, [pc, #172]	; (8009d4c <_dtoa_r+0x384>)
 8009ca0:	400a      	ands	r2, r1
 8009ca2:	00d2      	lsls	r2, r2, #3
 8009ca4:	189b      	adds	r3, r3, r2
 8009ca6:	681e      	ldr	r6, [r3, #0]
 8009ca8:	685f      	ldr	r7, [r3, #4]
 8009caa:	9b03      	ldr	r3, [sp, #12]
 8009cac:	2402      	movs	r4, #2
 8009cae:	111d      	asrs	r5, r3, #4
 8009cb0:	05db      	lsls	r3, r3, #23
 8009cb2:	d50a      	bpl.n	8009cca <_dtoa_r+0x302>
 8009cb4:	4b2a      	ldr	r3, [pc, #168]	; (8009d60 <_dtoa_r+0x398>)
 8009cb6:	400d      	ands	r5, r1
 8009cb8:	6a1a      	ldr	r2, [r3, #32]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009cbe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009cc0:	f7f7 f8dc 	bl	8000e7c <__aeabi_ddiv>
 8009cc4:	9008      	str	r0, [sp, #32]
 8009cc6:	9109      	str	r1, [sp, #36]	; 0x24
 8009cc8:	3401      	adds	r4, #1
 8009cca:	4b25      	ldr	r3, [pc, #148]	; (8009d60 <_dtoa_r+0x398>)
 8009ccc:	930e      	str	r3, [sp, #56]	; 0x38
 8009cce:	2d00      	cmp	r5, #0
 8009cd0:	d108      	bne.n	8009ce4 <_dtoa_r+0x31c>
 8009cd2:	9808      	ldr	r0, [sp, #32]
 8009cd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cd6:	0032      	movs	r2, r6
 8009cd8:	003b      	movs	r3, r7
 8009cda:	f7f7 f8cf 	bl	8000e7c <__aeabi_ddiv>
 8009cde:	9008      	str	r0, [sp, #32]
 8009ce0:	9109      	str	r1, [sp, #36]	; 0x24
 8009ce2:	e05a      	b.n	8009d9a <_dtoa_r+0x3d2>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	421d      	tst	r5, r3
 8009ce8:	d009      	beq.n	8009cfe <_dtoa_r+0x336>
 8009cea:	18e4      	adds	r4, r4, r3
 8009cec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cee:	0030      	movs	r0, r6
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	0039      	movs	r1, r7
 8009cf6:	f7f7 fcbb 	bl	8001670 <__aeabi_dmul>
 8009cfa:	0006      	movs	r6, r0
 8009cfc:	000f      	movs	r7, r1
 8009cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d00:	106d      	asrs	r5, r5, #1
 8009d02:	3308      	adds	r3, #8
 8009d04:	e7e2      	b.n	8009ccc <_dtoa_r+0x304>
 8009d06:	46c0      	nop			; (mov r8, r8)
 8009d08:	0800d256 	.word	0x0800d256
 8009d0c:	0800d26d 	.word	0x0800d26d
 8009d10:	7ff00000 	.word	0x7ff00000
 8009d14:	0000270f 	.word	0x0000270f
 8009d18:	0800d252 	.word	0x0800d252
 8009d1c:	0800d255 	.word	0x0800d255
 8009d20:	0800d220 	.word	0x0800d220
 8009d24:	0800d221 	.word	0x0800d221
 8009d28:	3ff00000 	.word	0x3ff00000
 8009d2c:	fffffc01 	.word	0xfffffc01
 8009d30:	3ff80000 	.word	0x3ff80000
 8009d34:	636f4361 	.word	0x636f4361
 8009d38:	3fd287a7 	.word	0x3fd287a7
 8009d3c:	8b60c8b3 	.word	0x8b60c8b3
 8009d40:	3fc68a28 	.word	0x3fc68a28
 8009d44:	509f79fb 	.word	0x509f79fb
 8009d48:	3fd34413 	.word	0x3fd34413
 8009d4c:	0800d358 	.word	0x0800d358
 8009d50:	00000432 	.word	0x00000432
 8009d54:	00000412 	.word	0x00000412
 8009d58:	fe100000 	.word	0xfe100000
 8009d5c:	0800d2c5 	.word	0x0800d2c5
 8009d60:	0800d330 	.word	0x0800d330
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	2402      	movs	r4, #2
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d016      	beq.n	8009d9a <_dtoa_r+0x3d2>
 8009d6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009d6e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d70:	220f      	movs	r2, #15
 8009d72:	425d      	negs	r5, r3
 8009d74:	402a      	ands	r2, r5
 8009d76:	4bdd      	ldr	r3, [pc, #884]	; (800a0ec <_dtoa_r+0x724>)
 8009d78:	00d2      	lsls	r2, r2, #3
 8009d7a:	189b      	adds	r3, r3, r2
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	f7f7 fc76 	bl	8001670 <__aeabi_dmul>
 8009d84:	2701      	movs	r7, #1
 8009d86:	2300      	movs	r3, #0
 8009d88:	9008      	str	r0, [sp, #32]
 8009d8a:	9109      	str	r1, [sp, #36]	; 0x24
 8009d8c:	4ed8      	ldr	r6, [pc, #864]	; (800a0f0 <_dtoa_r+0x728>)
 8009d8e:	112d      	asrs	r5, r5, #4
 8009d90:	2d00      	cmp	r5, #0
 8009d92:	d000      	beq.n	8009d96 <_dtoa_r+0x3ce>
 8009d94:	e091      	b.n	8009eba <_dtoa_r+0x4f2>
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1a1      	bne.n	8009cde <_dtoa_r+0x316>
 8009d9a:	9e08      	ldr	r6, [sp, #32]
 8009d9c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009d9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d100      	bne.n	8009da6 <_dtoa_r+0x3de>
 8009da4:	e094      	b.n	8009ed0 <_dtoa_r+0x508>
 8009da6:	2200      	movs	r2, #0
 8009da8:	0030      	movs	r0, r6
 8009daa:	0039      	movs	r1, r7
 8009dac:	4bd1      	ldr	r3, [pc, #836]	; (800a0f4 <_dtoa_r+0x72c>)
 8009dae:	f7f6 fb53 	bl	8000458 <__aeabi_dcmplt>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d100      	bne.n	8009db8 <_dtoa_r+0x3f0>
 8009db6:	e08b      	b.n	8009ed0 <_dtoa_r+0x508>
 8009db8:	9b07      	ldr	r3, [sp, #28]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d100      	bne.n	8009dc0 <_dtoa_r+0x3f8>
 8009dbe:	e087      	b.n	8009ed0 <_dtoa_r+0x508>
 8009dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	dd45      	ble.n	8009e52 <_dtoa_r+0x48a>
 8009dc6:	9b03      	ldr	r3, [sp, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	930e      	str	r3, [sp, #56]	; 0x38
 8009dce:	0030      	movs	r0, r6
 8009dd0:	4bc9      	ldr	r3, [pc, #804]	; (800a0f8 <_dtoa_r+0x730>)
 8009dd2:	0039      	movs	r1, r7
 8009dd4:	f7f7 fc4c 	bl	8001670 <__aeabi_dmul>
 8009dd8:	9008      	str	r0, [sp, #32]
 8009dda:	9109      	str	r1, [sp, #36]	; 0x24
 8009ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dde:	3401      	adds	r4, #1
 8009de0:	0020      	movs	r0, r4
 8009de2:	9e08      	ldr	r6, [sp, #32]
 8009de4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009de6:	9312      	str	r3, [sp, #72]	; 0x48
 8009de8:	f7f8 fada 	bl	80023a0 <__aeabi_i2d>
 8009dec:	0032      	movs	r2, r6
 8009dee:	003b      	movs	r3, r7
 8009df0:	f7f7 fc3e 	bl	8001670 <__aeabi_dmul>
 8009df4:	2200      	movs	r2, #0
 8009df6:	4bc1      	ldr	r3, [pc, #772]	; (800a0fc <_dtoa_r+0x734>)
 8009df8:	f7f6 fce0 	bl	80007bc <__aeabi_dadd>
 8009dfc:	4ac0      	ldr	r2, [pc, #768]	; (800a100 <_dtoa_r+0x738>)
 8009dfe:	9014      	str	r0, [sp, #80]	; 0x50
 8009e00:	9115      	str	r1, [sp, #84]	; 0x54
 8009e02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e04:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8009e06:	4694      	mov	ip, r2
 8009e08:	9308      	str	r3, [sp, #32]
 8009e0a:	9409      	str	r4, [sp, #36]	; 0x24
 8009e0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e0e:	4463      	add	r3, ip
 8009e10:	9318      	str	r3, [sp, #96]	; 0x60
 8009e12:	9309      	str	r3, [sp, #36]	; 0x24
 8009e14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d15e      	bne.n	8009ed8 <_dtoa_r+0x510>
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	4bb9      	ldr	r3, [pc, #740]	; (800a104 <_dtoa_r+0x73c>)
 8009e1e:	0030      	movs	r0, r6
 8009e20:	0039      	movs	r1, r7
 8009e22:	f7f7 fee7 	bl	8001bf4 <__aeabi_dsub>
 8009e26:	9a08      	ldr	r2, [sp, #32]
 8009e28:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009e2a:	0004      	movs	r4, r0
 8009e2c:	000d      	movs	r5, r1
 8009e2e:	f7f6 fb27 	bl	8000480 <__aeabi_dcmpgt>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d000      	beq.n	8009e38 <_dtoa_r+0x470>
 8009e36:	e2b3      	b.n	800a3a0 <_dtoa_r+0x9d8>
 8009e38:	48b3      	ldr	r0, [pc, #716]	; (800a108 <_dtoa_r+0x740>)
 8009e3a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009e3c:	4684      	mov	ip, r0
 8009e3e:	4461      	add	r1, ip
 8009e40:	000b      	movs	r3, r1
 8009e42:	0020      	movs	r0, r4
 8009e44:	0029      	movs	r1, r5
 8009e46:	9a08      	ldr	r2, [sp, #32]
 8009e48:	f7f6 fb06 	bl	8000458 <__aeabi_dcmplt>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	d000      	beq.n	8009e52 <_dtoa_r+0x48a>
 8009e50:	e2a3      	b.n	800a39a <_dtoa_r+0x9d2>
 8009e52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e54:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009e56:	9308      	str	r3, [sp, #32]
 8009e58:	9409      	str	r4, [sp, #36]	; 0x24
 8009e5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	da00      	bge.n	8009e62 <_dtoa_r+0x49a>
 8009e60:	e179      	b.n	800a156 <_dtoa_r+0x78e>
 8009e62:	9a03      	ldr	r2, [sp, #12]
 8009e64:	2a0e      	cmp	r2, #14
 8009e66:	dd00      	ble.n	8009e6a <_dtoa_r+0x4a2>
 8009e68:	e175      	b.n	800a156 <_dtoa_r+0x78e>
 8009e6a:	4ba0      	ldr	r3, [pc, #640]	; (800a0ec <_dtoa_r+0x724>)
 8009e6c:	00d2      	lsls	r2, r2, #3
 8009e6e:	189b      	adds	r3, r3, r2
 8009e70:	681e      	ldr	r6, [r3, #0]
 8009e72:	685f      	ldr	r7, [r3, #4]
 8009e74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	db00      	blt.n	8009e7c <_dtoa_r+0x4b4>
 8009e7a:	e0e5      	b.n	800a048 <_dtoa_r+0x680>
 8009e7c:	9b07      	ldr	r3, [sp, #28]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	dd00      	ble.n	8009e84 <_dtoa_r+0x4bc>
 8009e82:	e0e1      	b.n	800a048 <_dtoa_r+0x680>
 8009e84:	d000      	beq.n	8009e88 <_dtoa_r+0x4c0>
 8009e86:	e288      	b.n	800a39a <_dtoa_r+0x9d2>
 8009e88:	2200      	movs	r2, #0
 8009e8a:	0030      	movs	r0, r6
 8009e8c:	0039      	movs	r1, r7
 8009e8e:	4b9d      	ldr	r3, [pc, #628]	; (800a104 <_dtoa_r+0x73c>)
 8009e90:	f7f7 fbee 	bl	8001670 <__aeabi_dmul>
 8009e94:	9a08      	ldr	r2, [sp, #32]
 8009e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e98:	f7f6 fafc 	bl	8000494 <__aeabi_dcmpge>
 8009e9c:	9e07      	ldr	r6, [sp, #28]
 8009e9e:	0037      	movs	r7, r6
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d000      	beq.n	8009ea6 <_dtoa_r+0x4de>
 8009ea4:	e25f      	b.n	800a366 <_dtoa_r+0x99e>
 8009ea6:	9b06      	ldr	r3, [sp, #24]
 8009ea8:	9a06      	ldr	r2, [sp, #24]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	9308      	str	r3, [sp, #32]
 8009eae:	2331      	movs	r3, #49	; 0x31
 8009eb0:	7013      	strb	r3, [r2, #0]
 8009eb2:	9b03      	ldr	r3, [sp, #12]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	9303      	str	r3, [sp, #12]
 8009eb8:	e25a      	b.n	800a370 <_dtoa_r+0x9a8>
 8009eba:	423d      	tst	r5, r7
 8009ebc:	d005      	beq.n	8009eca <_dtoa_r+0x502>
 8009ebe:	6832      	ldr	r2, [r6, #0]
 8009ec0:	6873      	ldr	r3, [r6, #4]
 8009ec2:	f7f7 fbd5 	bl	8001670 <__aeabi_dmul>
 8009ec6:	003b      	movs	r3, r7
 8009ec8:	3401      	adds	r4, #1
 8009eca:	106d      	asrs	r5, r5, #1
 8009ecc:	3608      	adds	r6, #8
 8009ece:	e75f      	b.n	8009d90 <_dtoa_r+0x3c8>
 8009ed0:	9b03      	ldr	r3, [sp, #12]
 8009ed2:	930e      	str	r3, [sp, #56]	; 0x38
 8009ed4:	9b07      	ldr	r3, [sp, #28]
 8009ed6:	e783      	b.n	8009de0 <_dtoa_r+0x418>
 8009ed8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009eda:	4b84      	ldr	r3, [pc, #528]	; (800a0ec <_dtoa_r+0x724>)
 8009edc:	3a01      	subs	r2, #1
 8009ede:	00d2      	lsls	r2, r2, #3
 8009ee0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ee2:	189b      	adds	r3, r3, r2
 8009ee4:	9c08      	ldr	r4, [sp, #32]
 8009ee6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	2900      	cmp	r1, #0
 8009eee:	d051      	beq.n	8009f94 <_dtoa_r+0x5cc>
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	4986      	ldr	r1, [pc, #536]	; (800a10c <_dtoa_r+0x744>)
 8009ef4:	f7f6 ffc2 	bl	8000e7c <__aeabi_ddiv>
 8009ef8:	0022      	movs	r2, r4
 8009efa:	002b      	movs	r3, r5
 8009efc:	f7f7 fe7a 	bl	8001bf4 <__aeabi_dsub>
 8009f00:	9a06      	ldr	r2, [sp, #24]
 8009f02:	0004      	movs	r4, r0
 8009f04:	4694      	mov	ip, r2
 8009f06:	000d      	movs	r5, r1
 8009f08:	9b06      	ldr	r3, [sp, #24]
 8009f0a:	9314      	str	r3, [sp, #80]	; 0x50
 8009f0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f0e:	4463      	add	r3, ip
 8009f10:	9318      	str	r3, [sp, #96]	; 0x60
 8009f12:	0039      	movs	r1, r7
 8009f14:	0030      	movs	r0, r6
 8009f16:	f7f8 fa0d 	bl	8002334 <__aeabi_d2iz>
 8009f1a:	9012      	str	r0, [sp, #72]	; 0x48
 8009f1c:	f7f8 fa40 	bl	80023a0 <__aeabi_i2d>
 8009f20:	0002      	movs	r2, r0
 8009f22:	000b      	movs	r3, r1
 8009f24:	0030      	movs	r0, r6
 8009f26:	0039      	movs	r1, r7
 8009f28:	f7f7 fe64 	bl	8001bf4 <__aeabi_dsub>
 8009f2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f30:	3301      	adds	r3, #1
 8009f32:	9308      	str	r3, [sp, #32]
 8009f34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f36:	0006      	movs	r6, r0
 8009f38:	3330      	adds	r3, #48	; 0x30
 8009f3a:	7013      	strb	r3, [r2, #0]
 8009f3c:	0022      	movs	r2, r4
 8009f3e:	002b      	movs	r3, r5
 8009f40:	000f      	movs	r7, r1
 8009f42:	f7f6 fa89 	bl	8000458 <__aeabi_dcmplt>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	d174      	bne.n	800a034 <_dtoa_r+0x66c>
 8009f4a:	0032      	movs	r2, r6
 8009f4c:	003b      	movs	r3, r7
 8009f4e:	2000      	movs	r0, #0
 8009f50:	4968      	ldr	r1, [pc, #416]	; (800a0f4 <_dtoa_r+0x72c>)
 8009f52:	f7f7 fe4f 	bl	8001bf4 <__aeabi_dsub>
 8009f56:	0022      	movs	r2, r4
 8009f58:	002b      	movs	r3, r5
 8009f5a:	f7f6 fa7d 	bl	8000458 <__aeabi_dcmplt>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d000      	beq.n	8009f64 <_dtoa_r+0x59c>
 8009f62:	e0d7      	b.n	800a114 <_dtoa_r+0x74c>
 8009f64:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009f66:	9a08      	ldr	r2, [sp, #32]
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d100      	bne.n	8009f6e <_dtoa_r+0x5a6>
 8009f6c:	e771      	b.n	8009e52 <_dtoa_r+0x48a>
 8009f6e:	2200      	movs	r2, #0
 8009f70:	0020      	movs	r0, r4
 8009f72:	0029      	movs	r1, r5
 8009f74:	4b60      	ldr	r3, [pc, #384]	; (800a0f8 <_dtoa_r+0x730>)
 8009f76:	f7f7 fb7b 	bl	8001670 <__aeabi_dmul>
 8009f7a:	4b5f      	ldr	r3, [pc, #380]	; (800a0f8 <_dtoa_r+0x730>)
 8009f7c:	0004      	movs	r4, r0
 8009f7e:	000d      	movs	r5, r1
 8009f80:	0030      	movs	r0, r6
 8009f82:	0039      	movs	r1, r7
 8009f84:	2200      	movs	r2, #0
 8009f86:	f7f7 fb73 	bl	8001670 <__aeabi_dmul>
 8009f8a:	9b08      	ldr	r3, [sp, #32]
 8009f8c:	0006      	movs	r6, r0
 8009f8e:	000f      	movs	r7, r1
 8009f90:	9314      	str	r3, [sp, #80]	; 0x50
 8009f92:	e7be      	b.n	8009f12 <_dtoa_r+0x54a>
 8009f94:	0020      	movs	r0, r4
 8009f96:	0029      	movs	r1, r5
 8009f98:	f7f7 fb6a 	bl	8001670 <__aeabi_dmul>
 8009f9c:	9a06      	ldr	r2, [sp, #24]
 8009f9e:	9b06      	ldr	r3, [sp, #24]
 8009fa0:	4694      	mov	ip, r2
 8009fa2:	9308      	str	r3, [sp, #32]
 8009fa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fa6:	9014      	str	r0, [sp, #80]	; 0x50
 8009fa8:	9115      	str	r1, [sp, #84]	; 0x54
 8009faa:	4463      	add	r3, ip
 8009fac:	9319      	str	r3, [sp, #100]	; 0x64
 8009fae:	0030      	movs	r0, r6
 8009fb0:	0039      	movs	r1, r7
 8009fb2:	f7f8 f9bf 	bl	8002334 <__aeabi_d2iz>
 8009fb6:	9018      	str	r0, [sp, #96]	; 0x60
 8009fb8:	f7f8 f9f2 	bl	80023a0 <__aeabi_i2d>
 8009fbc:	0002      	movs	r2, r0
 8009fbe:	000b      	movs	r3, r1
 8009fc0:	0030      	movs	r0, r6
 8009fc2:	0039      	movs	r1, r7
 8009fc4:	f7f7 fe16 	bl	8001bf4 <__aeabi_dsub>
 8009fc8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009fca:	9b08      	ldr	r3, [sp, #32]
 8009fcc:	3630      	adds	r6, #48	; 0x30
 8009fce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009fd0:	701e      	strb	r6, [r3, #0]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	0004      	movs	r4, r0
 8009fd6:	000d      	movs	r5, r1
 8009fd8:	9308      	str	r3, [sp, #32]
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d12d      	bne.n	800a03a <_dtoa_r+0x672>
 8009fde:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009fe0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009fe2:	9a06      	ldr	r2, [sp, #24]
 8009fe4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fe6:	4694      	mov	ip, r2
 8009fe8:	4463      	add	r3, ip
 8009fea:	2200      	movs	r2, #0
 8009fec:	9308      	str	r3, [sp, #32]
 8009fee:	4b47      	ldr	r3, [pc, #284]	; (800a10c <_dtoa_r+0x744>)
 8009ff0:	f7f6 fbe4 	bl	80007bc <__aeabi_dadd>
 8009ff4:	0002      	movs	r2, r0
 8009ff6:	000b      	movs	r3, r1
 8009ff8:	0020      	movs	r0, r4
 8009ffa:	0029      	movs	r1, r5
 8009ffc:	f7f6 fa40 	bl	8000480 <__aeabi_dcmpgt>
 800a000:	2800      	cmp	r0, #0
 800a002:	d000      	beq.n	800a006 <_dtoa_r+0x63e>
 800a004:	e086      	b.n	800a114 <_dtoa_r+0x74c>
 800a006:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a008:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a00a:	2000      	movs	r0, #0
 800a00c:	493f      	ldr	r1, [pc, #252]	; (800a10c <_dtoa_r+0x744>)
 800a00e:	f7f7 fdf1 	bl	8001bf4 <__aeabi_dsub>
 800a012:	0002      	movs	r2, r0
 800a014:	000b      	movs	r3, r1
 800a016:	0020      	movs	r0, r4
 800a018:	0029      	movs	r1, r5
 800a01a:	f7f6 fa1d 	bl	8000458 <__aeabi_dcmplt>
 800a01e:	2800      	cmp	r0, #0
 800a020:	d100      	bne.n	800a024 <_dtoa_r+0x65c>
 800a022:	e716      	b.n	8009e52 <_dtoa_r+0x48a>
 800a024:	9b08      	ldr	r3, [sp, #32]
 800a026:	001a      	movs	r2, r3
 800a028:	3a01      	subs	r2, #1
 800a02a:	9208      	str	r2, [sp, #32]
 800a02c:	7812      	ldrb	r2, [r2, #0]
 800a02e:	2a30      	cmp	r2, #48	; 0x30
 800a030:	d0f8      	beq.n	800a024 <_dtoa_r+0x65c>
 800a032:	9308      	str	r3, [sp, #32]
 800a034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a036:	9303      	str	r3, [sp, #12]
 800a038:	e046      	b.n	800a0c8 <_dtoa_r+0x700>
 800a03a:	2200      	movs	r2, #0
 800a03c:	4b2e      	ldr	r3, [pc, #184]	; (800a0f8 <_dtoa_r+0x730>)
 800a03e:	f7f7 fb17 	bl	8001670 <__aeabi_dmul>
 800a042:	0006      	movs	r6, r0
 800a044:	000f      	movs	r7, r1
 800a046:	e7b2      	b.n	8009fae <_dtoa_r+0x5e6>
 800a048:	9b06      	ldr	r3, [sp, #24]
 800a04a:	9a06      	ldr	r2, [sp, #24]
 800a04c:	930a      	str	r3, [sp, #40]	; 0x28
 800a04e:	9b07      	ldr	r3, [sp, #28]
 800a050:	9c08      	ldr	r4, [sp, #32]
 800a052:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a054:	3b01      	subs	r3, #1
 800a056:	189b      	adds	r3, r3, r2
 800a058:	930b      	str	r3, [sp, #44]	; 0x2c
 800a05a:	0032      	movs	r2, r6
 800a05c:	003b      	movs	r3, r7
 800a05e:	0020      	movs	r0, r4
 800a060:	0029      	movs	r1, r5
 800a062:	f7f6 ff0b 	bl	8000e7c <__aeabi_ddiv>
 800a066:	f7f8 f965 	bl	8002334 <__aeabi_d2iz>
 800a06a:	9007      	str	r0, [sp, #28]
 800a06c:	f7f8 f998 	bl	80023a0 <__aeabi_i2d>
 800a070:	0032      	movs	r2, r6
 800a072:	003b      	movs	r3, r7
 800a074:	f7f7 fafc 	bl	8001670 <__aeabi_dmul>
 800a078:	0002      	movs	r2, r0
 800a07a:	000b      	movs	r3, r1
 800a07c:	0020      	movs	r0, r4
 800a07e:	0029      	movs	r1, r5
 800a080:	f7f7 fdb8 	bl	8001bf4 <__aeabi_dsub>
 800a084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a086:	001a      	movs	r2, r3
 800a088:	3201      	adds	r2, #1
 800a08a:	920a      	str	r2, [sp, #40]	; 0x28
 800a08c:	9208      	str	r2, [sp, #32]
 800a08e:	9a07      	ldr	r2, [sp, #28]
 800a090:	3230      	adds	r2, #48	; 0x30
 800a092:	701a      	strb	r2, [r3, #0]
 800a094:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a096:	429a      	cmp	r2, r3
 800a098:	d14f      	bne.n	800a13a <_dtoa_r+0x772>
 800a09a:	0002      	movs	r2, r0
 800a09c:	000b      	movs	r3, r1
 800a09e:	f7f6 fb8d 	bl	80007bc <__aeabi_dadd>
 800a0a2:	0032      	movs	r2, r6
 800a0a4:	003b      	movs	r3, r7
 800a0a6:	0004      	movs	r4, r0
 800a0a8:	000d      	movs	r5, r1
 800a0aa:	f7f6 f9e9 	bl	8000480 <__aeabi_dcmpgt>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d12e      	bne.n	800a110 <_dtoa_r+0x748>
 800a0b2:	0032      	movs	r2, r6
 800a0b4:	003b      	movs	r3, r7
 800a0b6:	0020      	movs	r0, r4
 800a0b8:	0029      	movs	r1, r5
 800a0ba:	f7f6 f9c7 	bl	800044c <__aeabi_dcmpeq>
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	d002      	beq.n	800a0c8 <_dtoa_r+0x700>
 800a0c2:	9b07      	ldr	r3, [sp, #28]
 800a0c4:	07de      	lsls	r6, r3, #31
 800a0c6:	d423      	bmi.n	800a110 <_dtoa_r+0x748>
 800a0c8:	9905      	ldr	r1, [sp, #20]
 800a0ca:	9804      	ldr	r0, [sp, #16]
 800a0cc:	f000 fbd6 	bl	800a87c <_Bfree>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	9a08      	ldr	r2, [sp, #32]
 800a0d4:	7013      	strb	r3, [r2, #0]
 800a0d6:	9b03      	ldr	r3, [sp, #12]
 800a0d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a0da:	3301      	adds	r3, #1
 800a0dc:	6013      	str	r3, [r2, #0]
 800a0de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d100      	bne.n	800a0e6 <_dtoa_r+0x71e>
 800a0e4:	e4ba      	b.n	8009a5c <_dtoa_r+0x94>
 800a0e6:	9a08      	ldr	r2, [sp, #32]
 800a0e8:	601a      	str	r2, [r3, #0]
 800a0ea:	e4b7      	b.n	8009a5c <_dtoa_r+0x94>
 800a0ec:	0800d358 	.word	0x0800d358
 800a0f0:	0800d330 	.word	0x0800d330
 800a0f4:	3ff00000 	.word	0x3ff00000
 800a0f8:	40240000 	.word	0x40240000
 800a0fc:	401c0000 	.word	0x401c0000
 800a100:	fcc00000 	.word	0xfcc00000
 800a104:	40140000 	.word	0x40140000
 800a108:	7cc00000 	.word	0x7cc00000
 800a10c:	3fe00000 	.word	0x3fe00000
 800a110:	9b03      	ldr	r3, [sp, #12]
 800a112:	930e      	str	r3, [sp, #56]	; 0x38
 800a114:	9b08      	ldr	r3, [sp, #32]
 800a116:	9308      	str	r3, [sp, #32]
 800a118:	3b01      	subs	r3, #1
 800a11a:	781a      	ldrb	r2, [r3, #0]
 800a11c:	2a39      	cmp	r2, #57	; 0x39
 800a11e:	d108      	bne.n	800a132 <_dtoa_r+0x76a>
 800a120:	9a06      	ldr	r2, [sp, #24]
 800a122:	429a      	cmp	r2, r3
 800a124:	d1f7      	bne.n	800a116 <_dtoa_r+0x74e>
 800a126:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a128:	9906      	ldr	r1, [sp, #24]
 800a12a:	3201      	adds	r2, #1
 800a12c:	920e      	str	r2, [sp, #56]	; 0x38
 800a12e:	2230      	movs	r2, #48	; 0x30
 800a130:	700a      	strb	r2, [r1, #0]
 800a132:	781a      	ldrb	r2, [r3, #0]
 800a134:	3201      	adds	r2, #1
 800a136:	701a      	strb	r2, [r3, #0]
 800a138:	e77c      	b.n	800a034 <_dtoa_r+0x66c>
 800a13a:	2200      	movs	r2, #0
 800a13c:	4ba9      	ldr	r3, [pc, #676]	; (800a3e4 <_dtoa_r+0xa1c>)
 800a13e:	f7f7 fa97 	bl	8001670 <__aeabi_dmul>
 800a142:	2200      	movs	r2, #0
 800a144:	2300      	movs	r3, #0
 800a146:	0004      	movs	r4, r0
 800a148:	000d      	movs	r5, r1
 800a14a:	f7f6 f97f 	bl	800044c <__aeabi_dcmpeq>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d100      	bne.n	800a154 <_dtoa_r+0x78c>
 800a152:	e782      	b.n	800a05a <_dtoa_r+0x692>
 800a154:	e7b8      	b.n	800a0c8 <_dtoa_r+0x700>
 800a156:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a158:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a15a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a15c:	2f00      	cmp	r7, #0
 800a15e:	d012      	beq.n	800a186 <_dtoa_r+0x7be>
 800a160:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a162:	2a01      	cmp	r2, #1
 800a164:	dc6e      	bgt.n	800a244 <_dtoa_r+0x87c>
 800a166:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a168:	2a00      	cmp	r2, #0
 800a16a:	d065      	beq.n	800a238 <_dtoa_r+0x870>
 800a16c:	4a9e      	ldr	r2, [pc, #632]	; (800a3e8 <_dtoa_r+0xa20>)
 800a16e:	189b      	adds	r3, r3, r2
 800a170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a172:	2101      	movs	r1, #1
 800a174:	18d2      	adds	r2, r2, r3
 800a176:	920a      	str	r2, [sp, #40]	; 0x28
 800a178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a17a:	9804      	ldr	r0, [sp, #16]
 800a17c:	18d3      	adds	r3, r2, r3
 800a17e:	930c      	str	r3, [sp, #48]	; 0x30
 800a180:	f000 fc78 	bl	800aa74 <__i2b>
 800a184:	0007      	movs	r7, r0
 800a186:	2c00      	cmp	r4, #0
 800a188:	d00e      	beq.n	800a1a8 <_dtoa_r+0x7e0>
 800a18a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	dd0b      	ble.n	800a1a8 <_dtoa_r+0x7e0>
 800a190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a192:	0023      	movs	r3, r4
 800a194:	4294      	cmp	r4, r2
 800a196:	dd00      	ble.n	800a19a <_dtoa_r+0x7d2>
 800a198:	0013      	movs	r3, r2
 800a19a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a19c:	1ae4      	subs	r4, r4, r3
 800a19e:	1ad2      	subs	r2, r2, r3
 800a1a0:	920a      	str	r2, [sp, #40]	; 0x28
 800a1a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	930c      	str	r3, [sp, #48]	; 0x30
 800a1a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d01e      	beq.n	800a1ec <_dtoa_r+0x824>
 800a1ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d05c      	beq.n	800a26e <_dtoa_r+0x8a6>
 800a1b4:	2d00      	cmp	r5, #0
 800a1b6:	dd10      	ble.n	800a1da <_dtoa_r+0x812>
 800a1b8:	0039      	movs	r1, r7
 800a1ba:	002a      	movs	r2, r5
 800a1bc:	9804      	ldr	r0, [sp, #16]
 800a1be:	f000 fd21 	bl	800ac04 <__pow5mult>
 800a1c2:	9a05      	ldr	r2, [sp, #20]
 800a1c4:	0001      	movs	r1, r0
 800a1c6:	0007      	movs	r7, r0
 800a1c8:	9804      	ldr	r0, [sp, #16]
 800a1ca:	f000 fc6b 	bl	800aaa4 <__multiply>
 800a1ce:	0006      	movs	r6, r0
 800a1d0:	9905      	ldr	r1, [sp, #20]
 800a1d2:	9804      	ldr	r0, [sp, #16]
 800a1d4:	f000 fb52 	bl	800a87c <_Bfree>
 800a1d8:	9605      	str	r6, [sp, #20]
 800a1da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1dc:	1b5a      	subs	r2, r3, r5
 800a1de:	42ab      	cmp	r3, r5
 800a1e0:	d004      	beq.n	800a1ec <_dtoa_r+0x824>
 800a1e2:	9905      	ldr	r1, [sp, #20]
 800a1e4:	9804      	ldr	r0, [sp, #16]
 800a1e6:	f000 fd0d 	bl	800ac04 <__pow5mult>
 800a1ea:	9005      	str	r0, [sp, #20]
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	9804      	ldr	r0, [sp, #16]
 800a1f0:	f000 fc40 	bl	800aa74 <__i2b>
 800a1f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a1f6:	0006      	movs	r6, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	dd3a      	ble.n	800a272 <_dtoa_r+0x8aa>
 800a1fc:	001a      	movs	r2, r3
 800a1fe:	0001      	movs	r1, r0
 800a200:	9804      	ldr	r0, [sp, #16]
 800a202:	f000 fcff 	bl	800ac04 <__pow5mult>
 800a206:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a208:	0006      	movs	r6, r0
 800a20a:	2500      	movs	r5, #0
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	dc38      	bgt.n	800a282 <_dtoa_r+0x8ba>
 800a210:	2500      	movs	r5, #0
 800a212:	9b08      	ldr	r3, [sp, #32]
 800a214:	42ab      	cmp	r3, r5
 800a216:	d130      	bne.n	800a27a <_dtoa_r+0x8b2>
 800a218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a21a:	031b      	lsls	r3, r3, #12
 800a21c:	42ab      	cmp	r3, r5
 800a21e:	d12c      	bne.n	800a27a <_dtoa_r+0x8b2>
 800a220:	4b72      	ldr	r3, [pc, #456]	; (800a3ec <_dtoa_r+0xa24>)
 800a222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a224:	4213      	tst	r3, r2
 800a226:	d028      	beq.n	800a27a <_dtoa_r+0x8b2>
 800a228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a22a:	3501      	adds	r5, #1
 800a22c:	3301      	adds	r3, #1
 800a22e:	930a      	str	r3, [sp, #40]	; 0x28
 800a230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a232:	3301      	adds	r3, #1
 800a234:	930c      	str	r3, [sp, #48]	; 0x30
 800a236:	e020      	b.n	800a27a <_dtoa_r+0x8b2>
 800a238:	2336      	movs	r3, #54	; 0x36
 800a23a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a23c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a23e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a240:	1a9b      	subs	r3, r3, r2
 800a242:	e795      	b.n	800a170 <_dtoa_r+0x7a8>
 800a244:	9b07      	ldr	r3, [sp, #28]
 800a246:	1e5d      	subs	r5, r3, #1
 800a248:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a24a:	42ab      	cmp	r3, r5
 800a24c:	db07      	blt.n	800a25e <_dtoa_r+0x896>
 800a24e:	1b5d      	subs	r5, r3, r5
 800a250:	9b07      	ldr	r3, [sp, #28]
 800a252:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a254:	2b00      	cmp	r3, #0
 800a256:	da8b      	bge.n	800a170 <_dtoa_r+0x7a8>
 800a258:	1ae4      	subs	r4, r4, r3
 800a25a:	2300      	movs	r3, #0
 800a25c:	e788      	b.n	800a170 <_dtoa_r+0x7a8>
 800a25e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a260:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a262:	1aeb      	subs	r3, r5, r3
 800a264:	18d3      	adds	r3, r2, r3
 800a266:	950d      	str	r5, [sp, #52]	; 0x34
 800a268:	9313      	str	r3, [sp, #76]	; 0x4c
 800a26a:	2500      	movs	r5, #0
 800a26c:	e7f0      	b.n	800a250 <_dtoa_r+0x888>
 800a26e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a270:	e7b7      	b.n	800a1e2 <_dtoa_r+0x81a>
 800a272:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a274:	2500      	movs	r5, #0
 800a276:	2b01      	cmp	r3, #1
 800a278:	ddca      	ble.n	800a210 <_dtoa_r+0x848>
 800a27a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a27c:	2001      	movs	r0, #1
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d008      	beq.n	800a294 <_dtoa_r+0x8cc>
 800a282:	6933      	ldr	r3, [r6, #16]
 800a284:	3303      	adds	r3, #3
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	18f3      	adds	r3, r6, r3
 800a28a:	6858      	ldr	r0, [r3, #4]
 800a28c:	f000 fbaa 	bl	800a9e4 <__hi0bits>
 800a290:	2320      	movs	r3, #32
 800a292:	1a18      	subs	r0, r3, r0
 800a294:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a296:	1818      	adds	r0, r3, r0
 800a298:	0002      	movs	r2, r0
 800a29a:	231f      	movs	r3, #31
 800a29c:	401a      	ands	r2, r3
 800a29e:	4218      	tst	r0, r3
 800a2a0:	d047      	beq.n	800a332 <_dtoa_r+0x96a>
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	1a9b      	subs	r3, r3, r2
 800a2a6:	2b04      	cmp	r3, #4
 800a2a8:	dd3f      	ble.n	800a32a <_dtoa_r+0x962>
 800a2aa:	231c      	movs	r3, #28
 800a2ac:	1a9b      	subs	r3, r3, r2
 800a2ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2b0:	18e4      	adds	r4, r4, r3
 800a2b2:	18d2      	adds	r2, r2, r3
 800a2b4:	920a      	str	r2, [sp, #40]	; 0x28
 800a2b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2b8:	18d3      	adds	r3, r2, r3
 800a2ba:	930c      	str	r3, [sp, #48]	; 0x30
 800a2bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	dd05      	ble.n	800a2ce <_dtoa_r+0x906>
 800a2c2:	001a      	movs	r2, r3
 800a2c4:	9905      	ldr	r1, [sp, #20]
 800a2c6:	9804      	ldr	r0, [sp, #16]
 800a2c8:	f000 fcf8 	bl	800acbc <__lshift>
 800a2cc:	9005      	str	r0, [sp, #20]
 800a2ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	dd05      	ble.n	800a2e0 <_dtoa_r+0x918>
 800a2d4:	0031      	movs	r1, r6
 800a2d6:	001a      	movs	r2, r3
 800a2d8:	9804      	ldr	r0, [sp, #16]
 800a2da:	f000 fcef 	bl	800acbc <__lshift>
 800a2de:	0006      	movs	r6, r0
 800a2e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d027      	beq.n	800a336 <_dtoa_r+0x96e>
 800a2e6:	0031      	movs	r1, r6
 800a2e8:	9805      	ldr	r0, [sp, #20]
 800a2ea:	f000 fd55 	bl	800ad98 <__mcmp>
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	da21      	bge.n	800a336 <_dtoa_r+0x96e>
 800a2f2:	9b03      	ldr	r3, [sp, #12]
 800a2f4:	220a      	movs	r2, #10
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	9303      	str	r3, [sp, #12]
 800a2fa:	9905      	ldr	r1, [sp, #20]
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	9804      	ldr	r0, [sp, #16]
 800a300:	f000 fae0 	bl	800a8c4 <__multadd>
 800a304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a306:	9005      	str	r0, [sp, #20]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d100      	bne.n	800a30e <_dtoa_r+0x946>
 800a30c:	e15d      	b.n	800a5ca <_dtoa_r+0xc02>
 800a30e:	2300      	movs	r3, #0
 800a310:	0039      	movs	r1, r7
 800a312:	220a      	movs	r2, #10
 800a314:	9804      	ldr	r0, [sp, #16]
 800a316:	f000 fad5 	bl	800a8c4 <__multadd>
 800a31a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a31c:	0007      	movs	r7, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	dc49      	bgt.n	800a3b6 <_dtoa_r+0x9ee>
 800a322:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a324:	2b02      	cmp	r3, #2
 800a326:	dc0e      	bgt.n	800a346 <_dtoa_r+0x97e>
 800a328:	e045      	b.n	800a3b6 <_dtoa_r+0x9ee>
 800a32a:	2b04      	cmp	r3, #4
 800a32c:	d0c6      	beq.n	800a2bc <_dtoa_r+0x8f4>
 800a32e:	331c      	adds	r3, #28
 800a330:	e7bd      	b.n	800a2ae <_dtoa_r+0x8e6>
 800a332:	0013      	movs	r3, r2
 800a334:	e7fb      	b.n	800a32e <_dtoa_r+0x966>
 800a336:	9b07      	ldr	r3, [sp, #28]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	dc36      	bgt.n	800a3aa <_dtoa_r+0x9e2>
 800a33c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a33e:	2b02      	cmp	r3, #2
 800a340:	dd33      	ble.n	800a3aa <_dtoa_r+0x9e2>
 800a342:	9b07      	ldr	r3, [sp, #28]
 800a344:	930b      	str	r3, [sp, #44]	; 0x2c
 800a346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10c      	bne.n	800a366 <_dtoa_r+0x99e>
 800a34c:	0031      	movs	r1, r6
 800a34e:	2205      	movs	r2, #5
 800a350:	9804      	ldr	r0, [sp, #16]
 800a352:	f000 fab7 	bl	800a8c4 <__multadd>
 800a356:	0006      	movs	r6, r0
 800a358:	0001      	movs	r1, r0
 800a35a:	9805      	ldr	r0, [sp, #20]
 800a35c:	f000 fd1c 	bl	800ad98 <__mcmp>
 800a360:	2800      	cmp	r0, #0
 800a362:	dd00      	ble.n	800a366 <_dtoa_r+0x99e>
 800a364:	e59f      	b.n	8009ea6 <_dtoa_r+0x4de>
 800a366:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a368:	43db      	mvns	r3, r3
 800a36a:	9303      	str	r3, [sp, #12]
 800a36c:	9b06      	ldr	r3, [sp, #24]
 800a36e:	9308      	str	r3, [sp, #32]
 800a370:	2500      	movs	r5, #0
 800a372:	0031      	movs	r1, r6
 800a374:	9804      	ldr	r0, [sp, #16]
 800a376:	f000 fa81 	bl	800a87c <_Bfree>
 800a37a:	2f00      	cmp	r7, #0
 800a37c:	d100      	bne.n	800a380 <_dtoa_r+0x9b8>
 800a37e:	e6a3      	b.n	800a0c8 <_dtoa_r+0x700>
 800a380:	2d00      	cmp	r5, #0
 800a382:	d005      	beq.n	800a390 <_dtoa_r+0x9c8>
 800a384:	42bd      	cmp	r5, r7
 800a386:	d003      	beq.n	800a390 <_dtoa_r+0x9c8>
 800a388:	0029      	movs	r1, r5
 800a38a:	9804      	ldr	r0, [sp, #16]
 800a38c:	f000 fa76 	bl	800a87c <_Bfree>
 800a390:	0039      	movs	r1, r7
 800a392:	9804      	ldr	r0, [sp, #16]
 800a394:	f000 fa72 	bl	800a87c <_Bfree>
 800a398:	e696      	b.n	800a0c8 <_dtoa_r+0x700>
 800a39a:	2600      	movs	r6, #0
 800a39c:	0037      	movs	r7, r6
 800a39e:	e7e2      	b.n	800a366 <_dtoa_r+0x99e>
 800a3a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3a2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a3a4:	9303      	str	r3, [sp, #12]
 800a3a6:	0037      	movs	r7, r6
 800a3a8:	e57d      	b.n	8009ea6 <_dtoa_r+0x4de>
 800a3aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d100      	bne.n	800a3b2 <_dtoa_r+0x9ea>
 800a3b0:	e0c3      	b.n	800a53a <_dtoa_r+0xb72>
 800a3b2:	9b07      	ldr	r3, [sp, #28]
 800a3b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3b6:	2c00      	cmp	r4, #0
 800a3b8:	dd05      	ble.n	800a3c6 <_dtoa_r+0x9fe>
 800a3ba:	0039      	movs	r1, r7
 800a3bc:	0022      	movs	r2, r4
 800a3be:	9804      	ldr	r0, [sp, #16]
 800a3c0:	f000 fc7c 	bl	800acbc <__lshift>
 800a3c4:	0007      	movs	r7, r0
 800a3c6:	0038      	movs	r0, r7
 800a3c8:	2d00      	cmp	r5, #0
 800a3ca:	d024      	beq.n	800a416 <_dtoa_r+0xa4e>
 800a3cc:	6879      	ldr	r1, [r7, #4]
 800a3ce:	9804      	ldr	r0, [sp, #16]
 800a3d0:	f000 fa10 	bl	800a7f4 <_Balloc>
 800a3d4:	1e04      	subs	r4, r0, #0
 800a3d6:	d111      	bne.n	800a3fc <_dtoa_r+0xa34>
 800a3d8:	0022      	movs	r2, r4
 800a3da:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <_dtoa_r+0xa28>)
 800a3dc:	4805      	ldr	r0, [pc, #20]	; (800a3f4 <_dtoa_r+0xa2c>)
 800a3de:	4906      	ldr	r1, [pc, #24]	; (800a3f8 <_dtoa_r+0xa30>)
 800a3e0:	f7ff fb07 	bl	80099f2 <_dtoa_r+0x2a>
 800a3e4:	40240000 	.word	0x40240000
 800a3e8:	00000433 	.word	0x00000433
 800a3ec:	7ff00000 	.word	0x7ff00000
 800a3f0:	0800d2c5 	.word	0x0800d2c5
 800a3f4:	0800d26d 	.word	0x0800d26d
 800a3f8:	000002ef 	.word	0x000002ef
 800a3fc:	0039      	movs	r1, r7
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	310c      	adds	r1, #12
 800a402:	3202      	adds	r2, #2
 800a404:	0092      	lsls	r2, r2, #2
 800a406:	300c      	adds	r0, #12
 800a408:	f001 ffb2 	bl	800c370 <memcpy>
 800a40c:	2201      	movs	r2, #1
 800a40e:	0021      	movs	r1, r4
 800a410:	9804      	ldr	r0, [sp, #16]
 800a412:	f000 fc53 	bl	800acbc <__lshift>
 800a416:	9b06      	ldr	r3, [sp, #24]
 800a418:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a41a:	9307      	str	r3, [sp, #28]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	189b      	adds	r3, r3, r2
 800a420:	2201      	movs	r2, #1
 800a422:	003d      	movs	r5, r7
 800a424:	0007      	movs	r7, r0
 800a426:	930e      	str	r3, [sp, #56]	; 0x38
 800a428:	9b08      	ldr	r3, [sp, #32]
 800a42a:	4013      	ands	r3, r2
 800a42c:	930d      	str	r3, [sp, #52]	; 0x34
 800a42e:	0031      	movs	r1, r6
 800a430:	9805      	ldr	r0, [sp, #20]
 800a432:	f7ff fa39 	bl	80098a8 <quorem>
 800a436:	0029      	movs	r1, r5
 800a438:	0004      	movs	r4, r0
 800a43a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a43c:	9805      	ldr	r0, [sp, #20]
 800a43e:	f000 fcab 	bl	800ad98 <__mcmp>
 800a442:	003a      	movs	r2, r7
 800a444:	900c      	str	r0, [sp, #48]	; 0x30
 800a446:	0031      	movs	r1, r6
 800a448:	9804      	ldr	r0, [sp, #16]
 800a44a:	f000 fcc1 	bl	800add0 <__mdiff>
 800a44e:	2201      	movs	r2, #1
 800a450:	68c3      	ldr	r3, [r0, #12]
 800a452:	3430      	adds	r4, #48	; 0x30
 800a454:	9008      	str	r0, [sp, #32]
 800a456:	920a      	str	r2, [sp, #40]	; 0x28
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d104      	bne.n	800a466 <_dtoa_r+0xa9e>
 800a45c:	0001      	movs	r1, r0
 800a45e:	9805      	ldr	r0, [sp, #20]
 800a460:	f000 fc9a 	bl	800ad98 <__mcmp>
 800a464:	900a      	str	r0, [sp, #40]	; 0x28
 800a466:	9908      	ldr	r1, [sp, #32]
 800a468:	9804      	ldr	r0, [sp, #16]
 800a46a:	f000 fa07 	bl	800a87c <_Bfree>
 800a46e:	9b07      	ldr	r3, [sp, #28]
 800a470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a472:	3301      	adds	r3, #1
 800a474:	9308      	str	r3, [sp, #32]
 800a476:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a478:	4313      	orrs	r3, r2
 800a47a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a47c:	4313      	orrs	r3, r2
 800a47e:	d109      	bne.n	800a494 <_dtoa_r+0xacc>
 800a480:	2c39      	cmp	r4, #57	; 0x39
 800a482:	d022      	beq.n	800a4ca <_dtoa_r+0xb02>
 800a484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a486:	2b00      	cmp	r3, #0
 800a488:	dd01      	ble.n	800a48e <_dtoa_r+0xac6>
 800a48a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a48c:	3431      	adds	r4, #49	; 0x31
 800a48e:	9b07      	ldr	r3, [sp, #28]
 800a490:	701c      	strb	r4, [r3, #0]
 800a492:	e76e      	b.n	800a372 <_dtoa_r+0x9aa>
 800a494:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a496:	2b00      	cmp	r3, #0
 800a498:	db04      	blt.n	800a4a4 <_dtoa_r+0xadc>
 800a49a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a49c:	4313      	orrs	r3, r2
 800a49e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	d11e      	bne.n	800a4e2 <_dtoa_r+0xb1a>
 800a4a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	ddf1      	ble.n	800a48e <_dtoa_r+0xac6>
 800a4aa:	9905      	ldr	r1, [sp, #20]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	9804      	ldr	r0, [sp, #16]
 800a4b0:	f000 fc04 	bl	800acbc <__lshift>
 800a4b4:	0031      	movs	r1, r6
 800a4b6:	9005      	str	r0, [sp, #20]
 800a4b8:	f000 fc6e 	bl	800ad98 <__mcmp>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	dc02      	bgt.n	800a4c6 <_dtoa_r+0xafe>
 800a4c0:	d1e5      	bne.n	800a48e <_dtoa_r+0xac6>
 800a4c2:	07e3      	lsls	r3, r4, #31
 800a4c4:	d5e3      	bpl.n	800a48e <_dtoa_r+0xac6>
 800a4c6:	2c39      	cmp	r4, #57	; 0x39
 800a4c8:	d1df      	bne.n	800a48a <_dtoa_r+0xac2>
 800a4ca:	2339      	movs	r3, #57	; 0x39
 800a4cc:	9a07      	ldr	r2, [sp, #28]
 800a4ce:	7013      	strb	r3, [r2, #0]
 800a4d0:	9b08      	ldr	r3, [sp, #32]
 800a4d2:	9308      	str	r3, [sp, #32]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	781a      	ldrb	r2, [r3, #0]
 800a4d8:	2a39      	cmp	r2, #57	; 0x39
 800a4da:	d063      	beq.n	800a5a4 <_dtoa_r+0xbdc>
 800a4dc:	3201      	adds	r2, #1
 800a4de:	701a      	strb	r2, [r3, #0]
 800a4e0:	e747      	b.n	800a372 <_dtoa_r+0x9aa>
 800a4e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	dd03      	ble.n	800a4f0 <_dtoa_r+0xb28>
 800a4e8:	2c39      	cmp	r4, #57	; 0x39
 800a4ea:	d0ee      	beq.n	800a4ca <_dtoa_r+0xb02>
 800a4ec:	3401      	adds	r4, #1
 800a4ee:	e7ce      	b.n	800a48e <_dtoa_r+0xac6>
 800a4f0:	9b07      	ldr	r3, [sp, #28]
 800a4f2:	9a07      	ldr	r2, [sp, #28]
 800a4f4:	701c      	strb	r4, [r3, #0]
 800a4f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d03e      	beq.n	800a57a <_dtoa_r+0xbb2>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	220a      	movs	r2, #10
 800a500:	9905      	ldr	r1, [sp, #20]
 800a502:	9804      	ldr	r0, [sp, #16]
 800a504:	f000 f9de 	bl	800a8c4 <__multadd>
 800a508:	2300      	movs	r3, #0
 800a50a:	9005      	str	r0, [sp, #20]
 800a50c:	220a      	movs	r2, #10
 800a50e:	0029      	movs	r1, r5
 800a510:	9804      	ldr	r0, [sp, #16]
 800a512:	42bd      	cmp	r5, r7
 800a514:	d106      	bne.n	800a524 <_dtoa_r+0xb5c>
 800a516:	f000 f9d5 	bl	800a8c4 <__multadd>
 800a51a:	0005      	movs	r5, r0
 800a51c:	0007      	movs	r7, r0
 800a51e:	9b08      	ldr	r3, [sp, #32]
 800a520:	9307      	str	r3, [sp, #28]
 800a522:	e784      	b.n	800a42e <_dtoa_r+0xa66>
 800a524:	f000 f9ce 	bl	800a8c4 <__multadd>
 800a528:	0039      	movs	r1, r7
 800a52a:	0005      	movs	r5, r0
 800a52c:	2300      	movs	r3, #0
 800a52e:	220a      	movs	r2, #10
 800a530:	9804      	ldr	r0, [sp, #16]
 800a532:	f000 f9c7 	bl	800a8c4 <__multadd>
 800a536:	0007      	movs	r7, r0
 800a538:	e7f1      	b.n	800a51e <_dtoa_r+0xb56>
 800a53a:	9b07      	ldr	r3, [sp, #28]
 800a53c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a53e:	2500      	movs	r5, #0
 800a540:	0031      	movs	r1, r6
 800a542:	9805      	ldr	r0, [sp, #20]
 800a544:	f7ff f9b0 	bl	80098a8 <quorem>
 800a548:	9b06      	ldr	r3, [sp, #24]
 800a54a:	3030      	adds	r0, #48	; 0x30
 800a54c:	5558      	strb	r0, [r3, r5]
 800a54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a550:	3501      	adds	r5, #1
 800a552:	0004      	movs	r4, r0
 800a554:	42ab      	cmp	r3, r5
 800a556:	dd07      	ble.n	800a568 <_dtoa_r+0xba0>
 800a558:	2300      	movs	r3, #0
 800a55a:	220a      	movs	r2, #10
 800a55c:	9905      	ldr	r1, [sp, #20]
 800a55e:	9804      	ldr	r0, [sp, #16]
 800a560:	f000 f9b0 	bl	800a8c4 <__multadd>
 800a564:	9005      	str	r0, [sp, #20]
 800a566:	e7eb      	b.n	800a540 <_dtoa_r+0xb78>
 800a568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a56a:	2301      	movs	r3, #1
 800a56c:	2a00      	cmp	r2, #0
 800a56e:	dd00      	ble.n	800a572 <_dtoa_r+0xbaa>
 800a570:	0013      	movs	r3, r2
 800a572:	2500      	movs	r5, #0
 800a574:	9a06      	ldr	r2, [sp, #24]
 800a576:	18d3      	adds	r3, r2, r3
 800a578:	9308      	str	r3, [sp, #32]
 800a57a:	9905      	ldr	r1, [sp, #20]
 800a57c:	2201      	movs	r2, #1
 800a57e:	9804      	ldr	r0, [sp, #16]
 800a580:	f000 fb9c 	bl	800acbc <__lshift>
 800a584:	0031      	movs	r1, r6
 800a586:	9005      	str	r0, [sp, #20]
 800a588:	f000 fc06 	bl	800ad98 <__mcmp>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	dc9f      	bgt.n	800a4d0 <_dtoa_r+0xb08>
 800a590:	d101      	bne.n	800a596 <_dtoa_r+0xbce>
 800a592:	07e4      	lsls	r4, r4, #31
 800a594:	d49c      	bmi.n	800a4d0 <_dtoa_r+0xb08>
 800a596:	9b08      	ldr	r3, [sp, #32]
 800a598:	9308      	str	r3, [sp, #32]
 800a59a:	3b01      	subs	r3, #1
 800a59c:	781a      	ldrb	r2, [r3, #0]
 800a59e:	2a30      	cmp	r2, #48	; 0x30
 800a5a0:	d0fa      	beq.n	800a598 <_dtoa_r+0xbd0>
 800a5a2:	e6e6      	b.n	800a372 <_dtoa_r+0x9aa>
 800a5a4:	9a06      	ldr	r2, [sp, #24]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d193      	bne.n	800a4d2 <_dtoa_r+0xb0a>
 800a5aa:	9b03      	ldr	r3, [sp, #12]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	9303      	str	r3, [sp, #12]
 800a5b0:	2331      	movs	r3, #49	; 0x31
 800a5b2:	7013      	strb	r3, [r2, #0]
 800a5b4:	e6dd      	b.n	800a372 <_dtoa_r+0x9aa>
 800a5b6:	4b09      	ldr	r3, [pc, #36]	; (800a5dc <_dtoa_r+0xc14>)
 800a5b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a5ba:	9306      	str	r3, [sp, #24]
 800a5bc:	4b08      	ldr	r3, [pc, #32]	; (800a5e0 <_dtoa_r+0xc18>)
 800a5be:	2a00      	cmp	r2, #0
 800a5c0:	d001      	beq.n	800a5c6 <_dtoa_r+0xbfe>
 800a5c2:	f7ff fa49 	bl	8009a58 <_dtoa_r+0x90>
 800a5c6:	f7ff fa49 	bl	8009a5c <_dtoa_r+0x94>
 800a5ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	dcb6      	bgt.n	800a53e <_dtoa_r+0xb76>
 800a5d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	dd00      	ble.n	800a5d8 <_dtoa_r+0xc10>
 800a5d6:	e6b6      	b.n	800a346 <_dtoa_r+0x97e>
 800a5d8:	e7b1      	b.n	800a53e <_dtoa_r+0xb76>
 800a5da:	46c0      	nop			; (mov r8, r8)
 800a5dc:	0800d249 	.word	0x0800d249
 800a5e0:	0800d251 	.word	0x0800d251

0800a5e4 <_free_r>:
 800a5e4:	b570      	push	{r4, r5, r6, lr}
 800a5e6:	0005      	movs	r5, r0
 800a5e8:	2900      	cmp	r1, #0
 800a5ea:	d010      	beq.n	800a60e <_free_r+0x2a>
 800a5ec:	1f0c      	subs	r4, r1, #4
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	da00      	bge.n	800a5f6 <_free_r+0x12>
 800a5f4:	18e4      	adds	r4, r4, r3
 800a5f6:	0028      	movs	r0, r5
 800a5f8:	f000 f8ec 	bl	800a7d4 <__malloc_lock>
 800a5fc:	4a1d      	ldr	r2, [pc, #116]	; (800a674 <_free_r+0x90>)
 800a5fe:	6813      	ldr	r3, [r2, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d105      	bne.n	800a610 <_free_r+0x2c>
 800a604:	6063      	str	r3, [r4, #4]
 800a606:	6014      	str	r4, [r2, #0]
 800a608:	0028      	movs	r0, r5
 800a60a:	f000 f8eb 	bl	800a7e4 <__malloc_unlock>
 800a60e:	bd70      	pop	{r4, r5, r6, pc}
 800a610:	42a3      	cmp	r3, r4
 800a612:	d908      	bls.n	800a626 <_free_r+0x42>
 800a614:	6820      	ldr	r0, [r4, #0]
 800a616:	1821      	adds	r1, r4, r0
 800a618:	428b      	cmp	r3, r1
 800a61a:	d1f3      	bne.n	800a604 <_free_r+0x20>
 800a61c:	6819      	ldr	r1, [r3, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	1809      	adds	r1, r1, r0
 800a622:	6021      	str	r1, [r4, #0]
 800a624:	e7ee      	b.n	800a604 <_free_r+0x20>
 800a626:	001a      	movs	r2, r3
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <_free_r+0x4e>
 800a62e:	42a3      	cmp	r3, r4
 800a630:	d9f9      	bls.n	800a626 <_free_r+0x42>
 800a632:	6811      	ldr	r1, [r2, #0]
 800a634:	1850      	adds	r0, r2, r1
 800a636:	42a0      	cmp	r0, r4
 800a638:	d10b      	bne.n	800a652 <_free_r+0x6e>
 800a63a:	6820      	ldr	r0, [r4, #0]
 800a63c:	1809      	adds	r1, r1, r0
 800a63e:	1850      	adds	r0, r2, r1
 800a640:	6011      	str	r1, [r2, #0]
 800a642:	4283      	cmp	r3, r0
 800a644:	d1e0      	bne.n	800a608 <_free_r+0x24>
 800a646:	6818      	ldr	r0, [r3, #0]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	1841      	adds	r1, r0, r1
 800a64c:	6011      	str	r1, [r2, #0]
 800a64e:	6053      	str	r3, [r2, #4]
 800a650:	e7da      	b.n	800a608 <_free_r+0x24>
 800a652:	42a0      	cmp	r0, r4
 800a654:	d902      	bls.n	800a65c <_free_r+0x78>
 800a656:	230c      	movs	r3, #12
 800a658:	602b      	str	r3, [r5, #0]
 800a65a:	e7d5      	b.n	800a608 <_free_r+0x24>
 800a65c:	6820      	ldr	r0, [r4, #0]
 800a65e:	1821      	adds	r1, r4, r0
 800a660:	428b      	cmp	r3, r1
 800a662:	d103      	bne.n	800a66c <_free_r+0x88>
 800a664:	6819      	ldr	r1, [r3, #0]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	1809      	adds	r1, r1, r0
 800a66a:	6021      	str	r1, [r4, #0]
 800a66c:	6063      	str	r3, [r4, #4]
 800a66e:	6054      	str	r4, [r2, #4]
 800a670:	e7ca      	b.n	800a608 <_free_r+0x24>
 800a672:	46c0      	nop			; (mov r8, r8)
 800a674:	2000096c 	.word	0x2000096c

0800a678 <malloc>:
 800a678:	b510      	push	{r4, lr}
 800a67a:	4b03      	ldr	r3, [pc, #12]	; (800a688 <malloc+0x10>)
 800a67c:	0001      	movs	r1, r0
 800a67e:	6818      	ldr	r0, [r3, #0]
 800a680:	f000 f826 	bl	800a6d0 <_malloc_r>
 800a684:	bd10      	pop	{r4, pc}
 800a686:	46c0      	nop			; (mov r8, r8)
 800a688:	20000064 	.word	0x20000064

0800a68c <sbrk_aligned>:
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	4e0f      	ldr	r6, [pc, #60]	; (800a6cc <sbrk_aligned+0x40>)
 800a690:	000d      	movs	r5, r1
 800a692:	6831      	ldr	r1, [r6, #0]
 800a694:	0004      	movs	r4, r0
 800a696:	2900      	cmp	r1, #0
 800a698:	d102      	bne.n	800a6a0 <sbrk_aligned+0x14>
 800a69a:	f001 fe57 	bl	800c34c <_sbrk_r>
 800a69e:	6030      	str	r0, [r6, #0]
 800a6a0:	0029      	movs	r1, r5
 800a6a2:	0020      	movs	r0, r4
 800a6a4:	f001 fe52 	bl	800c34c <_sbrk_r>
 800a6a8:	1c43      	adds	r3, r0, #1
 800a6aa:	d00a      	beq.n	800a6c2 <sbrk_aligned+0x36>
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	1cc5      	adds	r5, r0, #3
 800a6b0:	439d      	bics	r5, r3
 800a6b2:	42a8      	cmp	r0, r5
 800a6b4:	d007      	beq.n	800a6c6 <sbrk_aligned+0x3a>
 800a6b6:	1a29      	subs	r1, r5, r0
 800a6b8:	0020      	movs	r0, r4
 800a6ba:	f001 fe47 	bl	800c34c <_sbrk_r>
 800a6be:	3001      	adds	r0, #1
 800a6c0:	d101      	bne.n	800a6c6 <sbrk_aligned+0x3a>
 800a6c2:	2501      	movs	r5, #1
 800a6c4:	426d      	negs	r5, r5
 800a6c6:	0028      	movs	r0, r5
 800a6c8:	bd70      	pop	{r4, r5, r6, pc}
 800a6ca:	46c0      	nop			; (mov r8, r8)
 800a6cc:	20000970 	.word	0x20000970

0800a6d0 <_malloc_r>:
 800a6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6d2:	2203      	movs	r2, #3
 800a6d4:	1ccb      	adds	r3, r1, #3
 800a6d6:	4393      	bics	r3, r2
 800a6d8:	3308      	adds	r3, #8
 800a6da:	0006      	movs	r6, r0
 800a6dc:	001f      	movs	r7, r3
 800a6de:	2b0c      	cmp	r3, #12
 800a6e0:	d238      	bcs.n	800a754 <_malloc_r+0x84>
 800a6e2:	270c      	movs	r7, #12
 800a6e4:	42b9      	cmp	r1, r7
 800a6e6:	d837      	bhi.n	800a758 <_malloc_r+0x88>
 800a6e8:	0030      	movs	r0, r6
 800a6ea:	f000 f873 	bl	800a7d4 <__malloc_lock>
 800a6ee:	4b38      	ldr	r3, [pc, #224]	; (800a7d0 <_malloc_r+0x100>)
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	001c      	movs	r4, r3
 800a6f6:	2c00      	cmp	r4, #0
 800a6f8:	d133      	bne.n	800a762 <_malloc_r+0x92>
 800a6fa:	0039      	movs	r1, r7
 800a6fc:	0030      	movs	r0, r6
 800a6fe:	f7ff ffc5 	bl	800a68c <sbrk_aligned>
 800a702:	0004      	movs	r4, r0
 800a704:	1c43      	adds	r3, r0, #1
 800a706:	d15e      	bne.n	800a7c6 <_malloc_r+0xf6>
 800a708:	9b00      	ldr	r3, [sp, #0]
 800a70a:	681c      	ldr	r4, [r3, #0]
 800a70c:	0025      	movs	r5, r4
 800a70e:	2d00      	cmp	r5, #0
 800a710:	d14e      	bne.n	800a7b0 <_malloc_r+0xe0>
 800a712:	2c00      	cmp	r4, #0
 800a714:	d051      	beq.n	800a7ba <_malloc_r+0xea>
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	0029      	movs	r1, r5
 800a71a:	18e3      	adds	r3, r4, r3
 800a71c:	0030      	movs	r0, r6
 800a71e:	9301      	str	r3, [sp, #4]
 800a720:	f001 fe14 	bl	800c34c <_sbrk_r>
 800a724:	9b01      	ldr	r3, [sp, #4]
 800a726:	4283      	cmp	r3, r0
 800a728:	d147      	bne.n	800a7ba <_malloc_r+0xea>
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	0030      	movs	r0, r6
 800a72e:	1aff      	subs	r7, r7, r3
 800a730:	0039      	movs	r1, r7
 800a732:	f7ff ffab 	bl	800a68c <sbrk_aligned>
 800a736:	3001      	adds	r0, #1
 800a738:	d03f      	beq.n	800a7ba <_malloc_r+0xea>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	19db      	adds	r3, r3, r7
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	9b00      	ldr	r3, [sp, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d040      	beq.n	800a7ca <_malloc_r+0xfa>
 800a748:	685a      	ldr	r2, [r3, #4]
 800a74a:	42a2      	cmp	r2, r4
 800a74c:	d133      	bne.n	800a7b6 <_malloc_r+0xe6>
 800a74e:	2200      	movs	r2, #0
 800a750:	605a      	str	r2, [r3, #4]
 800a752:	e014      	b.n	800a77e <_malloc_r+0xae>
 800a754:	2b00      	cmp	r3, #0
 800a756:	dac5      	bge.n	800a6e4 <_malloc_r+0x14>
 800a758:	230c      	movs	r3, #12
 800a75a:	2500      	movs	r5, #0
 800a75c:	6033      	str	r3, [r6, #0]
 800a75e:	0028      	movs	r0, r5
 800a760:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a762:	6821      	ldr	r1, [r4, #0]
 800a764:	1bc9      	subs	r1, r1, r7
 800a766:	d420      	bmi.n	800a7aa <_malloc_r+0xda>
 800a768:	290b      	cmp	r1, #11
 800a76a:	d918      	bls.n	800a79e <_malloc_r+0xce>
 800a76c:	19e2      	adds	r2, r4, r7
 800a76e:	6027      	str	r7, [r4, #0]
 800a770:	42a3      	cmp	r3, r4
 800a772:	d112      	bne.n	800a79a <_malloc_r+0xca>
 800a774:	9b00      	ldr	r3, [sp, #0]
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	6863      	ldr	r3, [r4, #4]
 800a77a:	6011      	str	r1, [r2, #0]
 800a77c:	6053      	str	r3, [r2, #4]
 800a77e:	0030      	movs	r0, r6
 800a780:	0025      	movs	r5, r4
 800a782:	f000 f82f 	bl	800a7e4 <__malloc_unlock>
 800a786:	2207      	movs	r2, #7
 800a788:	350b      	adds	r5, #11
 800a78a:	1d23      	adds	r3, r4, #4
 800a78c:	4395      	bics	r5, r2
 800a78e:	1aea      	subs	r2, r5, r3
 800a790:	429d      	cmp	r5, r3
 800a792:	d0e4      	beq.n	800a75e <_malloc_r+0x8e>
 800a794:	1b5b      	subs	r3, r3, r5
 800a796:	50a3      	str	r3, [r4, r2]
 800a798:	e7e1      	b.n	800a75e <_malloc_r+0x8e>
 800a79a:	605a      	str	r2, [r3, #4]
 800a79c:	e7ec      	b.n	800a778 <_malloc_r+0xa8>
 800a79e:	6862      	ldr	r2, [r4, #4]
 800a7a0:	42a3      	cmp	r3, r4
 800a7a2:	d1d5      	bne.n	800a750 <_malloc_r+0x80>
 800a7a4:	9b00      	ldr	r3, [sp, #0]
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	e7e9      	b.n	800a77e <_malloc_r+0xae>
 800a7aa:	0023      	movs	r3, r4
 800a7ac:	6864      	ldr	r4, [r4, #4]
 800a7ae:	e7a2      	b.n	800a6f6 <_malloc_r+0x26>
 800a7b0:	002c      	movs	r4, r5
 800a7b2:	686d      	ldr	r5, [r5, #4]
 800a7b4:	e7ab      	b.n	800a70e <_malloc_r+0x3e>
 800a7b6:	0013      	movs	r3, r2
 800a7b8:	e7c4      	b.n	800a744 <_malloc_r+0x74>
 800a7ba:	230c      	movs	r3, #12
 800a7bc:	0030      	movs	r0, r6
 800a7be:	6033      	str	r3, [r6, #0]
 800a7c0:	f000 f810 	bl	800a7e4 <__malloc_unlock>
 800a7c4:	e7cb      	b.n	800a75e <_malloc_r+0x8e>
 800a7c6:	6027      	str	r7, [r4, #0]
 800a7c8:	e7d9      	b.n	800a77e <_malloc_r+0xae>
 800a7ca:	605b      	str	r3, [r3, #4]
 800a7cc:	deff      	udf	#255	; 0xff
 800a7ce:	46c0      	nop			; (mov r8, r8)
 800a7d0:	2000096c 	.word	0x2000096c

0800a7d4 <__malloc_lock>:
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	4802      	ldr	r0, [pc, #8]	; (800a7e0 <__malloc_lock+0xc>)
 800a7d8:	f7ff f855 	bl	8009886 <__retarget_lock_acquire_recursive>
 800a7dc:	bd10      	pop	{r4, pc}
 800a7de:	46c0      	nop			; (mov r8, r8)
 800a7e0:	20000968 	.word	0x20000968

0800a7e4 <__malloc_unlock>:
 800a7e4:	b510      	push	{r4, lr}
 800a7e6:	4802      	ldr	r0, [pc, #8]	; (800a7f0 <__malloc_unlock+0xc>)
 800a7e8:	f7ff f84e 	bl	8009888 <__retarget_lock_release_recursive>
 800a7ec:	bd10      	pop	{r4, pc}
 800a7ee:	46c0      	nop			; (mov r8, r8)
 800a7f0:	20000968 	.word	0x20000968

0800a7f4 <_Balloc>:
 800a7f4:	b570      	push	{r4, r5, r6, lr}
 800a7f6:	69c5      	ldr	r5, [r0, #28]
 800a7f8:	0006      	movs	r6, r0
 800a7fa:	000c      	movs	r4, r1
 800a7fc:	2d00      	cmp	r5, #0
 800a7fe:	d10e      	bne.n	800a81e <_Balloc+0x2a>
 800a800:	2010      	movs	r0, #16
 800a802:	f7ff ff39 	bl	800a678 <malloc>
 800a806:	1e02      	subs	r2, r0, #0
 800a808:	61f0      	str	r0, [r6, #28]
 800a80a:	d104      	bne.n	800a816 <_Balloc+0x22>
 800a80c:	216b      	movs	r1, #107	; 0x6b
 800a80e:	4b19      	ldr	r3, [pc, #100]	; (800a874 <_Balloc+0x80>)
 800a810:	4819      	ldr	r0, [pc, #100]	; (800a878 <_Balloc+0x84>)
 800a812:	f001 fdbd 	bl	800c390 <__assert_func>
 800a816:	6045      	str	r5, [r0, #4]
 800a818:	6085      	str	r5, [r0, #8]
 800a81a:	6005      	str	r5, [r0, #0]
 800a81c:	60c5      	str	r5, [r0, #12]
 800a81e:	69f5      	ldr	r5, [r6, #28]
 800a820:	68eb      	ldr	r3, [r5, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d013      	beq.n	800a84e <_Balloc+0x5a>
 800a826:	69f3      	ldr	r3, [r6, #28]
 800a828:	00a2      	lsls	r2, r4, #2
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	189b      	adds	r3, r3, r2
 800a82e:	6818      	ldr	r0, [r3, #0]
 800a830:	2800      	cmp	r0, #0
 800a832:	d118      	bne.n	800a866 <_Balloc+0x72>
 800a834:	2101      	movs	r1, #1
 800a836:	000d      	movs	r5, r1
 800a838:	40a5      	lsls	r5, r4
 800a83a:	1d6a      	adds	r2, r5, #5
 800a83c:	0030      	movs	r0, r6
 800a83e:	0092      	lsls	r2, r2, #2
 800a840:	f001 fdc4 	bl	800c3cc <_calloc_r>
 800a844:	2800      	cmp	r0, #0
 800a846:	d00c      	beq.n	800a862 <_Balloc+0x6e>
 800a848:	6044      	str	r4, [r0, #4]
 800a84a:	6085      	str	r5, [r0, #8]
 800a84c:	e00d      	b.n	800a86a <_Balloc+0x76>
 800a84e:	2221      	movs	r2, #33	; 0x21
 800a850:	2104      	movs	r1, #4
 800a852:	0030      	movs	r0, r6
 800a854:	f001 fdba 	bl	800c3cc <_calloc_r>
 800a858:	69f3      	ldr	r3, [r6, #28]
 800a85a:	60e8      	str	r0, [r5, #12]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1e1      	bne.n	800a826 <_Balloc+0x32>
 800a862:	2000      	movs	r0, #0
 800a864:	bd70      	pop	{r4, r5, r6, pc}
 800a866:	6802      	ldr	r2, [r0, #0]
 800a868:	601a      	str	r2, [r3, #0]
 800a86a:	2300      	movs	r3, #0
 800a86c:	6103      	str	r3, [r0, #16]
 800a86e:	60c3      	str	r3, [r0, #12]
 800a870:	e7f8      	b.n	800a864 <_Balloc+0x70>
 800a872:	46c0      	nop			; (mov r8, r8)
 800a874:	0800d256 	.word	0x0800d256
 800a878:	0800d2d6 	.word	0x0800d2d6

0800a87c <_Bfree>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	69c6      	ldr	r6, [r0, #28]
 800a880:	0005      	movs	r5, r0
 800a882:	000c      	movs	r4, r1
 800a884:	2e00      	cmp	r6, #0
 800a886:	d10e      	bne.n	800a8a6 <_Bfree+0x2a>
 800a888:	2010      	movs	r0, #16
 800a88a:	f7ff fef5 	bl	800a678 <malloc>
 800a88e:	1e02      	subs	r2, r0, #0
 800a890:	61e8      	str	r0, [r5, #28]
 800a892:	d104      	bne.n	800a89e <_Bfree+0x22>
 800a894:	218f      	movs	r1, #143	; 0x8f
 800a896:	4b09      	ldr	r3, [pc, #36]	; (800a8bc <_Bfree+0x40>)
 800a898:	4809      	ldr	r0, [pc, #36]	; (800a8c0 <_Bfree+0x44>)
 800a89a:	f001 fd79 	bl	800c390 <__assert_func>
 800a89e:	6046      	str	r6, [r0, #4]
 800a8a0:	6086      	str	r6, [r0, #8]
 800a8a2:	6006      	str	r6, [r0, #0]
 800a8a4:	60c6      	str	r6, [r0, #12]
 800a8a6:	2c00      	cmp	r4, #0
 800a8a8:	d007      	beq.n	800a8ba <_Bfree+0x3e>
 800a8aa:	69eb      	ldr	r3, [r5, #28]
 800a8ac:	6862      	ldr	r2, [r4, #4]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	0092      	lsls	r2, r2, #2
 800a8b2:	189b      	adds	r3, r3, r2
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	6022      	str	r2, [r4, #0]
 800a8b8:	601c      	str	r4, [r3, #0]
 800a8ba:	bd70      	pop	{r4, r5, r6, pc}
 800a8bc:	0800d256 	.word	0x0800d256
 800a8c0:	0800d2d6 	.word	0x0800d2d6

0800a8c4 <__multadd>:
 800a8c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8c6:	000e      	movs	r6, r1
 800a8c8:	9001      	str	r0, [sp, #4]
 800a8ca:	000c      	movs	r4, r1
 800a8cc:	001d      	movs	r5, r3
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	690f      	ldr	r7, [r1, #16]
 800a8d2:	3614      	adds	r6, #20
 800a8d4:	6833      	ldr	r3, [r6, #0]
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	b299      	uxth	r1, r3
 800a8da:	4351      	muls	r1, r2
 800a8dc:	0c1b      	lsrs	r3, r3, #16
 800a8de:	4353      	muls	r3, r2
 800a8e0:	1949      	adds	r1, r1, r5
 800a8e2:	0c0d      	lsrs	r5, r1, #16
 800a8e4:	195b      	adds	r3, r3, r5
 800a8e6:	0c1d      	lsrs	r5, r3, #16
 800a8e8:	b289      	uxth	r1, r1
 800a8ea:	041b      	lsls	r3, r3, #16
 800a8ec:	185b      	adds	r3, r3, r1
 800a8ee:	c608      	stmia	r6!, {r3}
 800a8f0:	4287      	cmp	r7, r0
 800a8f2:	dcef      	bgt.n	800a8d4 <__multadd+0x10>
 800a8f4:	2d00      	cmp	r5, #0
 800a8f6:	d022      	beq.n	800a93e <__multadd+0x7a>
 800a8f8:	68a3      	ldr	r3, [r4, #8]
 800a8fa:	42bb      	cmp	r3, r7
 800a8fc:	dc19      	bgt.n	800a932 <__multadd+0x6e>
 800a8fe:	6861      	ldr	r1, [r4, #4]
 800a900:	9801      	ldr	r0, [sp, #4]
 800a902:	3101      	adds	r1, #1
 800a904:	f7ff ff76 	bl	800a7f4 <_Balloc>
 800a908:	1e06      	subs	r6, r0, #0
 800a90a:	d105      	bne.n	800a918 <__multadd+0x54>
 800a90c:	0032      	movs	r2, r6
 800a90e:	21ba      	movs	r1, #186	; 0xba
 800a910:	4b0c      	ldr	r3, [pc, #48]	; (800a944 <__multadd+0x80>)
 800a912:	480d      	ldr	r0, [pc, #52]	; (800a948 <__multadd+0x84>)
 800a914:	f001 fd3c 	bl	800c390 <__assert_func>
 800a918:	0021      	movs	r1, r4
 800a91a:	6922      	ldr	r2, [r4, #16]
 800a91c:	310c      	adds	r1, #12
 800a91e:	3202      	adds	r2, #2
 800a920:	0092      	lsls	r2, r2, #2
 800a922:	300c      	adds	r0, #12
 800a924:	f001 fd24 	bl	800c370 <memcpy>
 800a928:	0021      	movs	r1, r4
 800a92a:	9801      	ldr	r0, [sp, #4]
 800a92c:	f7ff ffa6 	bl	800a87c <_Bfree>
 800a930:	0034      	movs	r4, r6
 800a932:	1d3b      	adds	r3, r7, #4
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	18e3      	adds	r3, r4, r3
 800a938:	605d      	str	r5, [r3, #4]
 800a93a:	1c7b      	adds	r3, r7, #1
 800a93c:	6123      	str	r3, [r4, #16]
 800a93e:	0020      	movs	r0, r4
 800a940:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a942:	46c0      	nop			; (mov r8, r8)
 800a944:	0800d2c5 	.word	0x0800d2c5
 800a948:	0800d2d6 	.word	0x0800d2d6

0800a94c <__s2b>:
 800a94c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a94e:	0006      	movs	r6, r0
 800a950:	0018      	movs	r0, r3
 800a952:	000c      	movs	r4, r1
 800a954:	3008      	adds	r0, #8
 800a956:	2109      	movs	r1, #9
 800a958:	9301      	str	r3, [sp, #4]
 800a95a:	0015      	movs	r5, r2
 800a95c:	f7f5 fc7a 	bl	8000254 <__divsi3>
 800a960:	2301      	movs	r3, #1
 800a962:	2100      	movs	r1, #0
 800a964:	4283      	cmp	r3, r0
 800a966:	db0a      	blt.n	800a97e <__s2b+0x32>
 800a968:	0030      	movs	r0, r6
 800a96a:	f7ff ff43 	bl	800a7f4 <_Balloc>
 800a96e:	1e01      	subs	r1, r0, #0
 800a970:	d108      	bne.n	800a984 <__s2b+0x38>
 800a972:	000a      	movs	r2, r1
 800a974:	4b19      	ldr	r3, [pc, #100]	; (800a9dc <__s2b+0x90>)
 800a976:	481a      	ldr	r0, [pc, #104]	; (800a9e0 <__s2b+0x94>)
 800a978:	31d3      	adds	r1, #211	; 0xd3
 800a97a:	f001 fd09 	bl	800c390 <__assert_func>
 800a97e:	005b      	lsls	r3, r3, #1
 800a980:	3101      	adds	r1, #1
 800a982:	e7ef      	b.n	800a964 <__s2b+0x18>
 800a984:	9b08      	ldr	r3, [sp, #32]
 800a986:	6143      	str	r3, [r0, #20]
 800a988:	2301      	movs	r3, #1
 800a98a:	6103      	str	r3, [r0, #16]
 800a98c:	2d09      	cmp	r5, #9
 800a98e:	dd18      	ble.n	800a9c2 <__s2b+0x76>
 800a990:	0023      	movs	r3, r4
 800a992:	3309      	adds	r3, #9
 800a994:	001f      	movs	r7, r3
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	1964      	adds	r4, r4, r5
 800a99a:	783b      	ldrb	r3, [r7, #0]
 800a99c:	220a      	movs	r2, #10
 800a99e:	0030      	movs	r0, r6
 800a9a0:	3b30      	subs	r3, #48	; 0x30
 800a9a2:	f7ff ff8f 	bl	800a8c4 <__multadd>
 800a9a6:	3701      	adds	r7, #1
 800a9a8:	0001      	movs	r1, r0
 800a9aa:	42a7      	cmp	r7, r4
 800a9ac:	d1f5      	bne.n	800a99a <__s2b+0x4e>
 800a9ae:	002c      	movs	r4, r5
 800a9b0:	9b00      	ldr	r3, [sp, #0]
 800a9b2:	3c08      	subs	r4, #8
 800a9b4:	191c      	adds	r4, r3, r4
 800a9b6:	002f      	movs	r7, r5
 800a9b8:	9b01      	ldr	r3, [sp, #4]
 800a9ba:	429f      	cmp	r7, r3
 800a9bc:	db04      	blt.n	800a9c8 <__s2b+0x7c>
 800a9be:	0008      	movs	r0, r1
 800a9c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a9c2:	2509      	movs	r5, #9
 800a9c4:	340a      	adds	r4, #10
 800a9c6:	e7f6      	b.n	800a9b6 <__s2b+0x6a>
 800a9c8:	1b63      	subs	r3, r4, r5
 800a9ca:	5ddb      	ldrb	r3, [r3, r7]
 800a9cc:	220a      	movs	r2, #10
 800a9ce:	0030      	movs	r0, r6
 800a9d0:	3b30      	subs	r3, #48	; 0x30
 800a9d2:	f7ff ff77 	bl	800a8c4 <__multadd>
 800a9d6:	3701      	adds	r7, #1
 800a9d8:	0001      	movs	r1, r0
 800a9da:	e7ed      	b.n	800a9b8 <__s2b+0x6c>
 800a9dc:	0800d2c5 	.word	0x0800d2c5
 800a9e0:	0800d2d6 	.word	0x0800d2d6

0800a9e4 <__hi0bits>:
 800a9e4:	0003      	movs	r3, r0
 800a9e6:	0c02      	lsrs	r2, r0, #16
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	4282      	cmp	r2, r0
 800a9ec:	d101      	bne.n	800a9f2 <__hi0bits+0xe>
 800a9ee:	041b      	lsls	r3, r3, #16
 800a9f0:	3010      	adds	r0, #16
 800a9f2:	0e1a      	lsrs	r2, r3, #24
 800a9f4:	d101      	bne.n	800a9fa <__hi0bits+0x16>
 800a9f6:	3008      	adds	r0, #8
 800a9f8:	021b      	lsls	r3, r3, #8
 800a9fa:	0f1a      	lsrs	r2, r3, #28
 800a9fc:	d101      	bne.n	800aa02 <__hi0bits+0x1e>
 800a9fe:	3004      	adds	r0, #4
 800aa00:	011b      	lsls	r3, r3, #4
 800aa02:	0f9a      	lsrs	r2, r3, #30
 800aa04:	d101      	bne.n	800aa0a <__hi0bits+0x26>
 800aa06:	3002      	adds	r0, #2
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	db03      	blt.n	800aa16 <__hi0bits+0x32>
 800aa0e:	3001      	adds	r0, #1
 800aa10:	005b      	lsls	r3, r3, #1
 800aa12:	d400      	bmi.n	800aa16 <__hi0bits+0x32>
 800aa14:	2020      	movs	r0, #32
 800aa16:	4770      	bx	lr

0800aa18 <__lo0bits>:
 800aa18:	6803      	ldr	r3, [r0, #0]
 800aa1a:	0001      	movs	r1, r0
 800aa1c:	2207      	movs	r2, #7
 800aa1e:	0018      	movs	r0, r3
 800aa20:	4010      	ands	r0, r2
 800aa22:	4213      	tst	r3, r2
 800aa24:	d00d      	beq.n	800aa42 <__lo0bits+0x2a>
 800aa26:	3a06      	subs	r2, #6
 800aa28:	2000      	movs	r0, #0
 800aa2a:	4213      	tst	r3, r2
 800aa2c:	d105      	bne.n	800aa3a <__lo0bits+0x22>
 800aa2e:	3002      	adds	r0, #2
 800aa30:	4203      	tst	r3, r0
 800aa32:	d003      	beq.n	800aa3c <__lo0bits+0x24>
 800aa34:	40d3      	lsrs	r3, r2
 800aa36:	0010      	movs	r0, r2
 800aa38:	600b      	str	r3, [r1, #0]
 800aa3a:	4770      	bx	lr
 800aa3c:	089b      	lsrs	r3, r3, #2
 800aa3e:	600b      	str	r3, [r1, #0]
 800aa40:	e7fb      	b.n	800aa3a <__lo0bits+0x22>
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	2a00      	cmp	r2, #0
 800aa46:	d101      	bne.n	800aa4c <__lo0bits+0x34>
 800aa48:	2010      	movs	r0, #16
 800aa4a:	0c1b      	lsrs	r3, r3, #16
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	2a00      	cmp	r2, #0
 800aa50:	d101      	bne.n	800aa56 <__lo0bits+0x3e>
 800aa52:	3008      	adds	r0, #8
 800aa54:	0a1b      	lsrs	r3, r3, #8
 800aa56:	071a      	lsls	r2, r3, #28
 800aa58:	d101      	bne.n	800aa5e <__lo0bits+0x46>
 800aa5a:	3004      	adds	r0, #4
 800aa5c:	091b      	lsrs	r3, r3, #4
 800aa5e:	079a      	lsls	r2, r3, #30
 800aa60:	d101      	bne.n	800aa66 <__lo0bits+0x4e>
 800aa62:	3002      	adds	r0, #2
 800aa64:	089b      	lsrs	r3, r3, #2
 800aa66:	07da      	lsls	r2, r3, #31
 800aa68:	d4e9      	bmi.n	800aa3e <__lo0bits+0x26>
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	085b      	lsrs	r3, r3, #1
 800aa6e:	d1e6      	bne.n	800aa3e <__lo0bits+0x26>
 800aa70:	2020      	movs	r0, #32
 800aa72:	e7e2      	b.n	800aa3a <__lo0bits+0x22>

0800aa74 <__i2b>:
 800aa74:	b510      	push	{r4, lr}
 800aa76:	000c      	movs	r4, r1
 800aa78:	2101      	movs	r1, #1
 800aa7a:	f7ff febb 	bl	800a7f4 <_Balloc>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d107      	bne.n	800aa92 <__i2b+0x1e>
 800aa82:	2146      	movs	r1, #70	; 0x46
 800aa84:	4c05      	ldr	r4, [pc, #20]	; (800aa9c <__i2b+0x28>)
 800aa86:	0002      	movs	r2, r0
 800aa88:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <__i2b+0x2c>)
 800aa8a:	0020      	movs	r0, r4
 800aa8c:	31ff      	adds	r1, #255	; 0xff
 800aa8e:	f001 fc7f 	bl	800c390 <__assert_func>
 800aa92:	2301      	movs	r3, #1
 800aa94:	6144      	str	r4, [r0, #20]
 800aa96:	6103      	str	r3, [r0, #16]
 800aa98:	bd10      	pop	{r4, pc}
 800aa9a:	46c0      	nop			; (mov r8, r8)
 800aa9c:	0800d2d6 	.word	0x0800d2d6
 800aaa0:	0800d2c5 	.word	0x0800d2c5

0800aaa4 <__multiply>:
 800aaa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaa6:	0015      	movs	r5, r2
 800aaa8:	690a      	ldr	r2, [r1, #16]
 800aaaa:	692b      	ldr	r3, [r5, #16]
 800aaac:	000c      	movs	r4, r1
 800aaae:	b08b      	sub	sp, #44	; 0x2c
 800aab0:	429a      	cmp	r2, r3
 800aab2:	da01      	bge.n	800aab8 <__multiply+0x14>
 800aab4:	002c      	movs	r4, r5
 800aab6:	000d      	movs	r5, r1
 800aab8:	6927      	ldr	r7, [r4, #16]
 800aaba:	692e      	ldr	r6, [r5, #16]
 800aabc:	6861      	ldr	r1, [r4, #4]
 800aabe:	19bb      	adds	r3, r7, r6
 800aac0:	9303      	str	r3, [sp, #12]
 800aac2:	68a3      	ldr	r3, [r4, #8]
 800aac4:	19ba      	adds	r2, r7, r6
 800aac6:	4293      	cmp	r3, r2
 800aac8:	da00      	bge.n	800aacc <__multiply+0x28>
 800aaca:	3101      	adds	r1, #1
 800aacc:	f7ff fe92 	bl	800a7f4 <_Balloc>
 800aad0:	9002      	str	r0, [sp, #8]
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d106      	bne.n	800aae4 <__multiply+0x40>
 800aad6:	21b1      	movs	r1, #177	; 0xb1
 800aad8:	4b48      	ldr	r3, [pc, #288]	; (800abfc <__multiply+0x158>)
 800aada:	4849      	ldr	r0, [pc, #292]	; (800ac00 <__multiply+0x15c>)
 800aadc:	9a02      	ldr	r2, [sp, #8]
 800aade:	0049      	lsls	r1, r1, #1
 800aae0:	f001 fc56 	bl	800c390 <__assert_func>
 800aae4:	9b02      	ldr	r3, [sp, #8]
 800aae6:	2200      	movs	r2, #0
 800aae8:	3314      	adds	r3, #20
 800aaea:	469c      	mov	ip, r3
 800aaec:	19bb      	adds	r3, r7, r6
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4463      	add	r3, ip
 800aaf2:	9304      	str	r3, [sp, #16]
 800aaf4:	4663      	mov	r3, ip
 800aaf6:	9904      	ldr	r1, [sp, #16]
 800aaf8:	428b      	cmp	r3, r1
 800aafa:	d32a      	bcc.n	800ab52 <__multiply+0xae>
 800aafc:	0023      	movs	r3, r4
 800aafe:	00bf      	lsls	r7, r7, #2
 800ab00:	3314      	adds	r3, #20
 800ab02:	3514      	adds	r5, #20
 800ab04:	9308      	str	r3, [sp, #32]
 800ab06:	00b6      	lsls	r6, r6, #2
 800ab08:	19db      	adds	r3, r3, r7
 800ab0a:	9305      	str	r3, [sp, #20]
 800ab0c:	19ab      	adds	r3, r5, r6
 800ab0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab10:	2304      	movs	r3, #4
 800ab12:	9306      	str	r3, [sp, #24]
 800ab14:	0023      	movs	r3, r4
 800ab16:	9a05      	ldr	r2, [sp, #20]
 800ab18:	3315      	adds	r3, #21
 800ab1a:	9501      	str	r5, [sp, #4]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d305      	bcc.n	800ab2c <__multiply+0x88>
 800ab20:	1b13      	subs	r3, r2, r4
 800ab22:	3b15      	subs	r3, #21
 800ab24:	089b      	lsrs	r3, r3, #2
 800ab26:	3301      	adds	r3, #1
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	9306      	str	r3, [sp, #24]
 800ab2c:	9b01      	ldr	r3, [sp, #4]
 800ab2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d310      	bcc.n	800ab56 <__multiply+0xb2>
 800ab34:	9b03      	ldr	r3, [sp, #12]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	dd05      	ble.n	800ab46 <__multiply+0xa2>
 800ab3a:	9b04      	ldr	r3, [sp, #16]
 800ab3c:	3b04      	subs	r3, #4
 800ab3e:	9304      	str	r3, [sp, #16]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d056      	beq.n	800abf4 <__multiply+0x150>
 800ab46:	9b02      	ldr	r3, [sp, #8]
 800ab48:	9a03      	ldr	r2, [sp, #12]
 800ab4a:	0018      	movs	r0, r3
 800ab4c:	611a      	str	r2, [r3, #16]
 800ab4e:	b00b      	add	sp, #44	; 0x2c
 800ab50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab52:	c304      	stmia	r3!, {r2}
 800ab54:	e7cf      	b.n	800aaf6 <__multiply+0x52>
 800ab56:	9b01      	ldr	r3, [sp, #4]
 800ab58:	6818      	ldr	r0, [r3, #0]
 800ab5a:	b280      	uxth	r0, r0
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d01e      	beq.n	800ab9e <__multiply+0xfa>
 800ab60:	4667      	mov	r7, ip
 800ab62:	2500      	movs	r5, #0
 800ab64:	9e08      	ldr	r6, [sp, #32]
 800ab66:	ce02      	ldmia	r6!, {r1}
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	9307      	str	r3, [sp, #28]
 800ab6c:	b28b      	uxth	r3, r1
 800ab6e:	4343      	muls	r3, r0
 800ab70:	001a      	movs	r2, r3
 800ab72:	466b      	mov	r3, sp
 800ab74:	8b9b      	ldrh	r3, [r3, #28]
 800ab76:	18d3      	adds	r3, r2, r3
 800ab78:	195b      	adds	r3, r3, r5
 800ab7a:	0c0d      	lsrs	r5, r1, #16
 800ab7c:	4345      	muls	r5, r0
 800ab7e:	9a07      	ldr	r2, [sp, #28]
 800ab80:	0c11      	lsrs	r1, r2, #16
 800ab82:	1869      	adds	r1, r5, r1
 800ab84:	0c1a      	lsrs	r2, r3, #16
 800ab86:	188a      	adds	r2, r1, r2
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	0c15      	lsrs	r5, r2, #16
 800ab8c:	0412      	lsls	r2, r2, #16
 800ab8e:	431a      	orrs	r2, r3
 800ab90:	9b05      	ldr	r3, [sp, #20]
 800ab92:	c704      	stmia	r7!, {r2}
 800ab94:	42b3      	cmp	r3, r6
 800ab96:	d8e6      	bhi.n	800ab66 <__multiply+0xc2>
 800ab98:	4663      	mov	r3, ip
 800ab9a:	9a06      	ldr	r2, [sp, #24]
 800ab9c:	509d      	str	r5, [r3, r2]
 800ab9e:	9b01      	ldr	r3, [sp, #4]
 800aba0:	6818      	ldr	r0, [r3, #0]
 800aba2:	0c00      	lsrs	r0, r0, #16
 800aba4:	d020      	beq.n	800abe8 <__multiply+0x144>
 800aba6:	4663      	mov	r3, ip
 800aba8:	0025      	movs	r5, r4
 800abaa:	4661      	mov	r1, ip
 800abac:	2700      	movs	r7, #0
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3514      	adds	r5, #20
 800abb2:	682a      	ldr	r2, [r5, #0]
 800abb4:	680e      	ldr	r6, [r1, #0]
 800abb6:	b292      	uxth	r2, r2
 800abb8:	4342      	muls	r2, r0
 800abba:	0c36      	lsrs	r6, r6, #16
 800abbc:	1992      	adds	r2, r2, r6
 800abbe:	19d2      	adds	r2, r2, r7
 800abc0:	0416      	lsls	r6, r2, #16
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	431e      	orrs	r6, r3
 800abc6:	600e      	str	r6, [r1, #0]
 800abc8:	cd40      	ldmia	r5!, {r6}
 800abca:	684b      	ldr	r3, [r1, #4]
 800abcc:	0c36      	lsrs	r6, r6, #16
 800abce:	4346      	muls	r6, r0
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	0c12      	lsrs	r2, r2, #16
 800abd4:	18f3      	adds	r3, r6, r3
 800abd6:	189b      	adds	r3, r3, r2
 800abd8:	9a05      	ldr	r2, [sp, #20]
 800abda:	0c1f      	lsrs	r7, r3, #16
 800abdc:	3104      	adds	r1, #4
 800abde:	42aa      	cmp	r2, r5
 800abe0:	d8e7      	bhi.n	800abb2 <__multiply+0x10e>
 800abe2:	4662      	mov	r2, ip
 800abe4:	9906      	ldr	r1, [sp, #24]
 800abe6:	5053      	str	r3, [r2, r1]
 800abe8:	9b01      	ldr	r3, [sp, #4]
 800abea:	3304      	adds	r3, #4
 800abec:	9301      	str	r3, [sp, #4]
 800abee:	2304      	movs	r3, #4
 800abf0:	449c      	add	ip, r3
 800abf2:	e79b      	b.n	800ab2c <__multiply+0x88>
 800abf4:	9b03      	ldr	r3, [sp, #12]
 800abf6:	3b01      	subs	r3, #1
 800abf8:	9303      	str	r3, [sp, #12]
 800abfa:	e79b      	b.n	800ab34 <__multiply+0x90>
 800abfc:	0800d2c5 	.word	0x0800d2c5
 800ac00:	0800d2d6 	.word	0x0800d2d6

0800ac04 <__pow5mult>:
 800ac04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac06:	2303      	movs	r3, #3
 800ac08:	0015      	movs	r5, r2
 800ac0a:	0007      	movs	r7, r0
 800ac0c:	000e      	movs	r6, r1
 800ac0e:	401a      	ands	r2, r3
 800ac10:	421d      	tst	r5, r3
 800ac12:	d008      	beq.n	800ac26 <__pow5mult+0x22>
 800ac14:	4925      	ldr	r1, [pc, #148]	; (800acac <__pow5mult+0xa8>)
 800ac16:	3a01      	subs	r2, #1
 800ac18:	0092      	lsls	r2, r2, #2
 800ac1a:	5852      	ldr	r2, [r2, r1]
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	0031      	movs	r1, r6
 800ac20:	f7ff fe50 	bl	800a8c4 <__multadd>
 800ac24:	0006      	movs	r6, r0
 800ac26:	10ad      	asrs	r5, r5, #2
 800ac28:	d03d      	beq.n	800aca6 <__pow5mult+0xa2>
 800ac2a:	69fc      	ldr	r4, [r7, #28]
 800ac2c:	2c00      	cmp	r4, #0
 800ac2e:	d10f      	bne.n	800ac50 <__pow5mult+0x4c>
 800ac30:	2010      	movs	r0, #16
 800ac32:	f7ff fd21 	bl	800a678 <malloc>
 800ac36:	1e02      	subs	r2, r0, #0
 800ac38:	61f8      	str	r0, [r7, #28]
 800ac3a:	d105      	bne.n	800ac48 <__pow5mult+0x44>
 800ac3c:	21b4      	movs	r1, #180	; 0xb4
 800ac3e:	4b1c      	ldr	r3, [pc, #112]	; (800acb0 <__pow5mult+0xac>)
 800ac40:	481c      	ldr	r0, [pc, #112]	; (800acb4 <__pow5mult+0xb0>)
 800ac42:	31ff      	adds	r1, #255	; 0xff
 800ac44:	f001 fba4 	bl	800c390 <__assert_func>
 800ac48:	6044      	str	r4, [r0, #4]
 800ac4a:	6084      	str	r4, [r0, #8]
 800ac4c:	6004      	str	r4, [r0, #0]
 800ac4e:	60c4      	str	r4, [r0, #12]
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	689c      	ldr	r4, [r3, #8]
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	2c00      	cmp	r4, #0
 800ac58:	d108      	bne.n	800ac6c <__pow5mult+0x68>
 800ac5a:	0038      	movs	r0, r7
 800ac5c:	4916      	ldr	r1, [pc, #88]	; (800acb8 <__pow5mult+0xb4>)
 800ac5e:	f7ff ff09 	bl	800aa74 <__i2b>
 800ac62:	9b01      	ldr	r3, [sp, #4]
 800ac64:	0004      	movs	r4, r0
 800ac66:	6098      	str	r0, [r3, #8]
 800ac68:	2300      	movs	r3, #0
 800ac6a:	6003      	str	r3, [r0, #0]
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	421d      	tst	r5, r3
 800ac70:	d00a      	beq.n	800ac88 <__pow5mult+0x84>
 800ac72:	0031      	movs	r1, r6
 800ac74:	0022      	movs	r2, r4
 800ac76:	0038      	movs	r0, r7
 800ac78:	f7ff ff14 	bl	800aaa4 <__multiply>
 800ac7c:	0031      	movs	r1, r6
 800ac7e:	9001      	str	r0, [sp, #4]
 800ac80:	0038      	movs	r0, r7
 800ac82:	f7ff fdfb 	bl	800a87c <_Bfree>
 800ac86:	9e01      	ldr	r6, [sp, #4]
 800ac88:	106d      	asrs	r5, r5, #1
 800ac8a:	d00c      	beq.n	800aca6 <__pow5mult+0xa2>
 800ac8c:	6820      	ldr	r0, [r4, #0]
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d107      	bne.n	800aca2 <__pow5mult+0x9e>
 800ac92:	0022      	movs	r2, r4
 800ac94:	0021      	movs	r1, r4
 800ac96:	0038      	movs	r0, r7
 800ac98:	f7ff ff04 	bl	800aaa4 <__multiply>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	6020      	str	r0, [r4, #0]
 800aca0:	6003      	str	r3, [r0, #0]
 800aca2:	0004      	movs	r4, r0
 800aca4:	e7e2      	b.n	800ac6c <__pow5mult+0x68>
 800aca6:	0030      	movs	r0, r6
 800aca8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800acaa:	46c0      	nop			; (mov r8, r8)
 800acac:	0800d420 	.word	0x0800d420
 800acb0:	0800d256 	.word	0x0800d256
 800acb4:	0800d2d6 	.word	0x0800d2d6
 800acb8:	00000271 	.word	0x00000271

0800acbc <__lshift>:
 800acbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acbe:	000c      	movs	r4, r1
 800acc0:	0017      	movs	r7, r2
 800acc2:	6923      	ldr	r3, [r4, #16]
 800acc4:	1155      	asrs	r5, r2, #5
 800acc6:	b087      	sub	sp, #28
 800acc8:	18eb      	adds	r3, r5, r3
 800acca:	9302      	str	r3, [sp, #8]
 800accc:	3301      	adds	r3, #1
 800acce:	9301      	str	r3, [sp, #4]
 800acd0:	6849      	ldr	r1, [r1, #4]
 800acd2:	68a3      	ldr	r3, [r4, #8]
 800acd4:	9004      	str	r0, [sp, #16]
 800acd6:	9a01      	ldr	r2, [sp, #4]
 800acd8:	4293      	cmp	r3, r2
 800acda:	db10      	blt.n	800acfe <__lshift+0x42>
 800acdc:	9804      	ldr	r0, [sp, #16]
 800acde:	f7ff fd89 	bl	800a7f4 <_Balloc>
 800ace2:	2300      	movs	r3, #0
 800ace4:	0002      	movs	r2, r0
 800ace6:	0006      	movs	r6, r0
 800ace8:	0019      	movs	r1, r3
 800acea:	3214      	adds	r2, #20
 800acec:	4298      	cmp	r0, r3
 800acee:	d10c      	bne.n	800ad0a <__lshift+0x4e>
 800acf0:	31df      	adds	r1, #223	; 0xdf
 800acf2:	0032      	movs	r2, r6
 800acf4:	4b26      	ldr	r3, [pc, #152]	; (800ad90 <__lshift+0xd4>)
 800acf6:	4827      	ldr	r0, [pc, #156]	; (800ad94 <__lshift+0xd8>)
 800acf8:	31ff      	adds	r1, #255	; 0xff
 800acfa:	f001 fb49 	bl	800c390 <__assert_func>
 800acfe:	3101      	adds	r1, #1
 800ad00:	005b      	lsls	r3, r3, #1
 800ad02:	e7e8      	b.n	800acd6 <__lshift+0x1a>
 800ad04:	0098      	lsls	r0, r3, #2
 800ad06:	5011      	str	r1, [r2, r0]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	42ab      	cmp	r3, r5
 800ad0c:	dbfa      	blt.n	800ad04 <__lshift+0x48>
 800ad0e:	43eb      	mvns	r3, r5
 800ad10:	17db      	asrs	r3, r3, #31
 800ad12:	401d      	ands	r5, r3
 800ad14:	211f      	movs	r1, #31
 800ad16:	0023      	movs	r3, r4
 800ad18:	0038      	movs	r0, r7
 800ad1a:	00ad      	lsls	r5, r5, #2
 800ad1c:	1955      	adds	r5, r2, r5
 800ad1e:	6922      	ldr	r2, [r4, #16]
 800ad20:	3314      	adds	r3, #20
 800ad22:	0092      	lsls	r2, r2, #2
 800ad24:	4008      	ands	r0, r1
 800ad26:	4684      	mov	ip, r0
 800ad28:	189a      	adds	r2, r3, r2
 800ad2a:	420f      	tst	r7, r1
 800ad2c:	d02a      	beq.n	800ad84 <__lshift+0xc8>
 800ad2e:	3101      	adds	r1, #1
 800ad30:	1a09      	subs	r1, r1, r0
 800ad32:	9105      	str	r1, [sp, #20]
 800ad34:	2100      	movs	r1, #0
 800ad36:	9503      	str	r5, [sp, #12]
 800ad38:	4667      	mov	r7, ip
 800ad3a:	6818      	ldr	r0, [r3, #0]
 800ad3c:	40b8      	lsls	r0, r7
 800ad3e:	4308      	orrs	r0, r1
 800ad40:	9903      	ldr	r1, [sp, #12]
 800ad42:	c101      	stmia	r1!, {r0}
 800ad44:	9103      	str	r1, [sp, #12]
 800ad46:	9805      	ldr	r0, [sp, #20]
 800ad48:	cb02      	ldmia	r3!, {r1}
 800ad4a:	40c1      	lsrs	r1, r0
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d8f3      	bhi.n	800ad38 <__lshift+0x7c>
 800ad50:	0020      	movs	r0, r4
 800ad52:	3015      	adds	r0, #21
 800ad54:	2304      	movs	r3, #4
 800ad56:	4282      	cmp	r2, r0
 800ad58:	d304      	bcc.n	800ad64 <__lshift+0xa8>
 800ad5a:	1b13      	subs	r3, r2, r4
 800ad5c:	3b15      	subs	r3, #21
 800ad5e:	089b      	lsrs	r3, r3, #2
 800ad60:	3301      	adds	r3, #1
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	50e9      	str	r1, [r5, r3]
 800ad66:	2900      	cmp	r1, #0
 800ad68:	d002      	beq.n	800ad70 <__lshift+0xb4>
 800ad6a:	9b02      	ldr	r3, [sp, #8]
 800ad6c:	3302      	adds	r3, #2
 800ad6e:	9301      	str	r3, [sp, #4]
 800ad70:	9b01      	ldr	r3, [sp, #4]
 800ad72:	9804      	ldr	r0, [sp, #16]
 800ad74:	3b01      	subs	r3, #1
 800ad76:	0021      	movs	r1, r4
 800ad78:	6133      	str	r3, [r6, #16]
 800ad7a:	f7ff fd7f 	bl	800a87c <_Bfree>
 800ad7e:	0030      	movs	r0, r6
 800ad80:	b007      	add	sp, #28
 800ad82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad84:	cb02      	ldmia	r3!, {r1}
 800ad86:	c502      	stmia	r5!, {r1}
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d8fb      	bhi.n	800ad84 <__lshift+0xc8>
 800ad8c:	e7f0      	b.n	800ad70 <__lshift+0xb4>
 800ad8e:	46c0      	nop			; (mov r8, r8)
 800ad90:	0800d2c5 	.word	0x0800d2c5
 800ad94:	0800d2d6 	.word	0x0800d2d6

0800ad98 <__mcmp>:
 800ad98:	b530      	push	{r4, r5, lr}
 800ad9a:	690b      	ldr	r3, [r1, #16]
 800ad9c:	6904      	ldr	r4, [r0, #16]
 800ad9e:	0002      	movs	r2, r0
 800ada0:	1ae0      	subs	r0, r4, r3
 800ada2:	429c      	cmp	r4, r3
 800ada4:	d10e      	bne.n	800adc4 <__mcmp+0x2c>
 800ada6:	3214      	adds	r2, #20
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	3114      	adds	r1, #20
 800adac:	0014      	movs	r4, r2
 800adae:	18c9      	adds	r1, r1, r3
 800adb0:	18d2      	adds	r2, r2, r3
 800adb2:	3a04      	subs	r2, #4
 800adb4:	3904      	subs	r1, #4
 800adb6:	6815      	ldr	r5, [r2, #0]
 800adb8:	680b      	ldr	r3, [r1, #0]
 800adba:	429d      	cmp	r5, r3
 800adbc:	d003      	beq.n	800adc6 <__mcmp+0x2e>
 800adbe:	2001      	movs	r0, #1
 800adc0:	429d      	cmp	r5, r3
 800adc2:	d303      	bcc.n	800adcc <__mcmp+0x34>
 800adc4:	bd30      	pop	{r4, r5, pc}
 800adc6:	4294      	cmp	r4, r2
 800adc8:	d3f3      	bcc.n	800adb2 <__mcmp+0x1a>
 800adca:	e7fb      	b.n	800adc4 <__mcmp+0x2c>
 800adcc:	4240      	negs	r0, r0
 800adce:	e7f9      	b.n	800adc4 <__mcmp+0x2c>

0800add0 <__mdiff>:
 800add0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add2:	000e      	movs	r6, r1
 800add4:	0007      	movs	r7, r0
 800add6:	0011      	movs	r1, r2
 800add8:	0030      	movs	r0, r6
 800adda:	b087      	sub	sp, #28
 800addc:	0014      	movs	r4, r2
 800adde:	f7ff ffdb 	bl	800ad98 <__mcmp>
 800ade2:	1e05      	subs	r5, r0, #0
 800ade4:	d110      	bne.n	800ae08 <__mdiff+0x38>
 800ade6:	0001      	movs	r1, r0
 800ade8:	0038      	movs	r0, r7
 800adea:	f7ff fd03 	bl	800a7f4 <_Balloc>
 800adee:	1e02      	subs	r2, r0, #0
 800adf0:	d104      	bne.n	800adfc <__mdiff+0x2c>
 800adf2:	4b3f      	ldr	r3, [pc, #252]	; (800aef0 <__mdiff+0x120>)
 800adf4:	483f      	ldr	r0, [pc, #252]	; (800aef4 <__mdiff+0x124>)
 800adf6:	4940      	ldr	r1, [pc, #256]	; (800aef8 <__mdiff+0x128>)
 800adf8:	f001 faca 	bl	800c390 <__assert_func>
 800adfc:	2301      	movs	r3, #1
 800adfe:	6145      	str	r5, [r0, #20]
 800ae00:	6103      	str	r3, [r0, #16]
 800ae02:	0010      	movs	r0, r2
 800ae04:	b007      	add	sp, #28
 800ae06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae08:	2301      	movs	r3, #1
 800ae0a:	9301      	str	r3, [sp, #4]
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	db04      	blt.n	800ae1a <__mdiff+0x4a>
 800ae10:	0023      	movs	r3, r4
 800ae12:	0034      	movs	r4, r6
 800ae14:	001e      	movs	r6, r3
 800ae16:	2300      	movs	r3, #0
 800ae18:	9301      	str	r3, [sp, #4]
 800ae1a:	0038      	movs	r0, r7
 800ae1c:	6861      	ldr	r1, [r4, #4]
 800ae1e:	f7ff fce9 	bl	800a7f4 <_Balloc>
 800ae22:	1e02      	subs	r2, r0, #0
 800ae24:	d103      	bne.n	800ae2e <__mdiff+0x5e>
 800ae26:	4b32      	ldr	r3, [pc, #200]	; (800aef0 <__mdiff+0x120>)
 800ae28:	4832      	ldr	r0, [pc, #200]	; (800aef4 <__mdiff+0x124>)
 800ae2a:	4934      	ldr	r1, [pc, #208]	; (800aefc <__mdiff+0x12c>)
 800ae2c:	e7e4      	b.n	800adf8 <__mdiff+0x28>
 800ae2e:	9b01      	ldr	r3, [sp, #4]
 800ae30:	2700      	movs	r7, #0
 800ae32:	60c3      	str	r3, [r0, #12]
 800ae34:	6920      	ldr	r0, [r4, #16]
 800ae36:	3414      	adds	r4, #20
 800ae38:	0083      	lsls	r3, r0, #2
 800ae3a:	18e3      	adds	r3, r4, r3
 800ae3c:	0021      	movs	r1, r4
 800ae3e:	9401      	str	r4, [sp, #4]
 800ae40:	0034      	movs	r4, r6
 800ae42:	9302      	str	r3, [sp, #8]
 800ae44:	6933      	ldr	r3, [r6, #16]
 800ae46:	3414      	adds	r4, #20
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	18e3      	adds	r3, r4, r3
 800ae4c:	9303      	str	r3, [sp, #12]
 800ae4e:	0013      	movs	r3, r2
 800ae50:	3314      	adds	r3, #20
 800ae52:	469c      	mov	ip, r3
 800ae54:	9305      	str	r3, [sp, #20]
 800ae56:	9104      	str	r1, [sp, #16]
 800ae58:	9b04      	ldr	r3, [sp, #16]
 800ae5a:	cc02      	ldmia	r4!, {r1}
 800ae5c:	cb20      	ldmia	r3!, {r5}
 800ae5e:	9304      	str	r3, [sp, #16]
 800ae60:	b2ab      	uxth	r3, r5
 800ae62:	19df      	adds	r7, r3, r7
 800ae64:	b28b      	uxth	r3, r1
 800ae66:	1afb      	subs	r3, r7, r3
 800ae68:	0c09      	lsrs	r1, r1, #16
 800ae6a:	0c2d      	lsrs	r5, r5, #16
 800ae6c:	1a6d      	subs	r5, r5, r1
 800ae6e:	1419      	asrs	r1, r3, #16
 800ae70:	1869      	adds	r1, r5, r1
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	140f      	asrs	r7, r1, #16
 800ae76:	0409      	lsls	r1, r1, #16
 800ae78:	4319      	orrs	r1, r3
 800ae7a:	4663      	mov	r3, ip
 800ae7c:	c302      	stmia	r3!, {r1}
 800ae7e:	469c      	mov	ip, r3
 800ae80:	9b03      	ldr	r3, [sp, #12]
 800ae82:	42a3      	cmp	r3, r4
 800ae84:	d8e8      	bhi.n	800ae58 <__mdiff+0x88>
 800ae86:	0031      	movs	r1, r6
 800ae88:	9c03      	ldr	r4, [sp, #12]
 800ae8a:	3115      	adds	r1, #21
 800ae8c:	2304      	movs	r3, #4
 800ae8e:	428c      	cmp	r4, r1
 800ae90:	d304      	bcc.n	800ae9c <__mdiff+0xcc>
 800ae92:	1ba3      	subs	r3, r4, r6
 800ae94:	3b15      	subs	r3, #21
 800ae96:	089b      	lsrs	r3, r3, #2
 800ae98:	3301      	adds	r3, #1
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	9901      	ldr	r1, [sp, #4]
 800ae9e:	18cd      	adds	r5, r1, r3
 800aea0:	9905      	ldr	r1, [sp, #20]
 800aea2:	002e      	movs	r6, r5
 800aea4:	18cb      	adds	r3, r1, r3
 800aea6:	469c      	mov	ip, r3
 800aea8:	9902      	ldr	r1, [sp, #8]
 800aeaa:	428e      	cmp	r6, r1
 800aeac:	d310      	bcc.n	800aed0 <__mdiff+0x100>
 800aeae:	9e02      	ldr	r6, [sp, #8]
 800aeb0:	1ee9      	subs	r1, r5, #3
 800aeb2:	2400      	movs	r4, #0
 800aeb4:	428e      	cmp	r6, r1
 800aeb6:	d304      	bcc.n	800aec2 <__mdiff+0xf2>
 800aeb8:	0031      	movs	r1, r6
 800aeba:	3103      	adds	r1, #3
 800aebc:	1b49      	subs	r1, r1, r5
 800aebe:	0889      	lsrs	r1, r1, #2
 800aec0:	008c      	lsls	r4, r1, #2
 800aec2:	191b      	adds	r3, r3, r4
 800aec4:	3b04      	subs	r3, #4
 800aec6:	6819      	ldr	r1, [r3, #0]
 800aec8:	2900      	cmp	r1, #0
 800aeca:	d00f      	beq.n	800aeec <__mdiff+0x11c>
 800aecc:	6110      	str	r0, [r2, #16]
 800aece:	e798      	b.n	800ae02 <__mdiff+0x32>
 800aed0:	ce02      	ldmia	r6!, {r1}
 800aed2:	b28c      	uxth	r4, r1
 800aed4:	19e4      	adds	r4, r4, r7
 800aed6:	0c0f      	lsrs	r7, r1, #16
 800aed8:	1421      	asrs	r1, r4, #16
 800aeda:	1879      	adds	r1, r7, r1
 800aedc:	b2a4      	uxth	r4, r4
 800aede:	140f      	asrs	r7, r1, #16
 800aee0:	0409      	lsls	r1, r1, #16
 800aee2:	4321      	orrs	r1, r4
 800aee4:	4664      	mov	r4, ip
 800aee6:	c402      	stmia	r4!, {r1}
 800aee8:	46a4      	mov	ip, r4
 800aeea:	e7dd      	b.n	800aea8 <__mdiff+0xd8>
 800aeec:	3801      	subs	r0, #1
 800aeee:	e7e9      	b.n	800aec4 <__mdiff+0xf4>
 800aef0:	0800d2c5 	.word	0x0800d2c5
 800aef4:	0800d2d6 	.word	0x0800d2d6
 800aef8:	00000237 	.word	0x00000237
 800aefc:	00000245 	.word	0x00000245

0800af00 <__ulp>:
 800af00:	2000      	movs	r0, #0
 800af02:	4b0b      	ldr	r3, [pc, #44]	; (800af30 <__ulp+0x30>)
 800af04:	4019      	ands	r1, r3
 800af06:	4b0b      	ldr	r3, [pc, #44]	; (800af34 <__ulp+0x34>)
 800af08:	18c9      	adds	r1, r1, r3
 800af0a:	4281      	cmp	r1, r0
 800af0c:	dc06      	bgt.n	800af1c <__ulp+0x1c>
 800af0e:	4249      	negs	r1, r1
 800af10:	150b      	asrs	r3, r1, #20
 800af12:	2b13      	cmp	r3, #19
 800af14:	dc03      	bgt.n	800af1e <__ulp+0x1e>
 800af16:	2180      	movs	r1, #128	; 0x80
 800af18:	0309      	lsls	r1, r1, #12
 800af1a:	4119      	asrs	r1, r3
 800af1c:	4770      	bx	lr
 800af1e:	3b14      	subs	r3, #20
 800af20:	2001      	movs	r0, #1
 800af22:	2b1e      	cmp	r3, #30
 800af24:	dc02      	bgt.n	800af2c <__ulp+0x2c>
 800af26:	2080      	movs	r0, #128	; 0x80
 800af28:	0600      	lsls	r0, r0, #24
 800af2a:	40d8      	lsrs	r0, r3
 800af2c:	2100      	movs	r1, #0
 800af2e:	e7f5      	b.n	800af1c <__ulp+0x1c>
 800af30:	7ff00000 	.word	0x7ff00000
 800af34:	fcc00000 	.word	0xfcc00000

0800af38 <__b2d>:
 800af38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af3a:	0006      	movs	r6, r0
 800af3c:	6903      	ldr	r3, [r0, #16]
 800af3e:	3614      	adds	r6, #20
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	18f3      	adds	r3, r6, r3
 800af44:	1f1d      	subs	r5, r3, #4
 800af46:	682c      	ldr	r4, [r5, #0]
 800af48:	000f      	movs	r7, r1
 800af4a:	0020      	movs	r0, r4
 800af4c:	9301      	str	r3, [sp, #4]
 800af4e:	f7ff fd49 	bl	800a9e4 <__hi0bits>
 800af52:	2220      	movs	r2, #32
 800af54:	1a12      	subs	r2, r2, r0
 800af56:	603a      	str	r2, [r7, #0]
 800af58:	0003      	movs	r3, r0
 800af5a:	4a1c      	ldr	r2, [pc, #112]	; (800afcc <__b2d+0x94>)
 800af5c:	280a      	cmp	r0, #10
 800af5e:	dc15      	bgt.n	800af8c <__b2d+0x54>
 800af60:	210b      	movs	r1, #11
 800af62:	0027      	movs	r7, r4
 800af64:	1a09      	subs	r1, r1, r0
 800af66:	40cf      	lsrs	r7, r1
 800af68:	433a      	orrs	r2, r7
 800af6a:	468c      	mov	ip, r1
 800af6c:	0011      	movs	r1, r2
 800af6e:	2200      	movs	r2, #0
 800af70:	42ae      	cmp	r6, r5
 800af72:	d202      	bcs.n	800af7a <__b2d+0x42>
 800af74:	9a01      	ldr	r2, [sp, #4]
 800af76:	3a08      	subs	r2, #8
 800af78:	6812      	ldr	r2, [r2, #0]
 800af7a:	3315      	adds	r3, #21
 800af7c:	409c      	lsls	r4, r3
 800af7e:	4663      	mov	r3, ip
 800af80:	0027      	movs	r7, r4
 800af82:	40da      	lsrs	r2, r3
 800af84:	4317      	orrs	r7, r2
 800af86:	0038      	movs	r0, r7
 800af88:	b003      	add	sp, #12
 800af8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af8c:	2700      	movs	r7, #0
 800af8e:	42ae      	cmp	r6, r5
 800af90:	d202      	bcs.n	800af98 <__b2d+0x60>
 800af92:	9d01      	ldr	r5, [sp, #4]
 800af94:	3d08      	subs	r5, #8
 800af96:	682f      	ldr	r7, [r5, #0]
 800af98:	210b      	movs	r1, #11
 800af9a:	4249      	negs	r1, r1
 800af9c:	468c      	mov	ip, r1
 800af9e:	449c      	add	ip, r3
 800afa0:	2b0b      	cmp	r3, #11
 800afa2:	d010      	beq.n	800afc6 <__b2d+0x8e>
 800afa4:	4661      	mov	r1, ip
 800afa6:	2320      	movs	r3, #32
 800afa8:	408c      	lsls	r4, r1
 800afaa:	1a5b      	subs	r3, r3, r1
 800afac:	0039      	movs	r1, r7
 800afae:	40d9      	lsrs	r1, r3
 800afb0:	430c      	orrs	r4, r1
 800afb2:	4322      	orrs	r2, r4
 800afb4:	0011      	movs	r1, r2
 800afb6:	2200      	movs	r2, #0
 800afb8:	42b5      	cmp	r5, r6
 800afba:	d901      	bls.n	800afc0 <__b2d+0x88>
 800afbc:	3d04      	subs	r5, #4
 800afbe:	682a      	ldr	r2, [r5, #0]
 800afc0:	4664      	mov	r4, ip
 800afc2:	40a7      	lsls	r7, r4
 800afc4:	e7dd      	b.n	800af82 <__b2d+0x4a>
 800afc6:	4322      	orrs	r2, r4
 800afc8:	0011      	movs	r1, r2
 800afca:	e7dc      	b.n	800af86 <__b2d+0x4e>
 800afcc:	3ff00000 	.word	0x3ff00000

0800afd0 <__d2b>:
 800afd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afd2:	2101      	movs	r1, #1
 800afd4:	0014      	movs	r4, r2
 800afd6:	001d      	movs	r5, r3
 800afd8:	9f08      	ldr	r7, [sp, #32]
 800afda:	f7ff fc0b 	bl	800a7f4 <_Balloc>
 800afde:	1e06      	subs	r6, r0, #0
 800afe0:	d105      	bne.n	800afee <__d2b+0x1e>
 800afe2:	0032      	movs	r2, r6
 800afe4:	4b24      	ldr	r3, [pc, #144]	; (800b078 <__d2b+0xa8>)
 800afe6:	4825      	ldr	r0, [pc, #148]	; (800b07c <__d2b+0xac>)
 800afe8:	4925      	ldr	r1, [pc, #148]	; (800b080 <__d2b+0xb0>)
 800afea:	f001 f9d1 	bl	800c390 <__assert_func>
 800afee:	032b      	lsls	r3, r5, #12
 800aff0:	006d      	lsls	r5, r5, #1
 800aff2:	0b1b      	lsrs	r3, r3, #12
 800aff4:	0d6d      	lsrs	r5, r5, #21
 800aff6:	d125      	bne.n	800b044 <__d2b+0x74>
 800aff8:	9301      	str	r3, [sp, #4]
 800affa:	2c00      	cmp	r4, #0
 800affc:	d028      	beq.n	800b050 <__d2b+0x80>
 800affe:	4668      	mov	r0, sp
 800b000:	9400      	str	r4, [sp, #0]
 800b002:	f7ff fd09 	bl	800aa18 <__lo0bits>
 800b006:	9b01      	ldr	r3, [sp, #4]
 800b008:	9900      	ldr	r1, [sp, #0]
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d01e      	beq.n	800b04c <__d2b+0x7c>
 800b00e:	2220      	movs	r2, #32
 800b010:	001c      	movs	r4, r3
 800b012:	1a12      	subs	r2, r2, r0
 800b014:	4094      	lsls	r4, r2
 800b016:	0022      	movs	r2, r4
 800b018:	40c3      	lsrs	r3, r0
 800b01a:	430a      	orrs	r2, r1
 800b01c:	6172      	str	r2, [r6, #20]
 800b01e:	9301      	str	r3, [sp, #4]
 800b020:	9c01      	ldr	r4, [sp, #4]
 800b022:	61b4      	str	r4, [r6, #24]
 800b024:	1e63      	subs	r3, r4, #1
 800b026:	419c      	sbcs	r4, r3
 800b028:	3401      	adds	r4, #1
 800b02a:	6134      	str	r4, [r6, #16]
 800b02c:	2d00      	cmp	r5, #0
 800b02e:	d017      	beq.n	800b060 <__d2b+0x90>
 800b030:	2435      	movs	r4, #53	; 0x35
 800b032:	4b14      	ldr	r3, [pc, #80]	; (800b084 <__d2b+0xb4>)
 800b034:	18ed      	adds	r5, r5, r3
 800b036:	182d      	adds	r5, r5, r0
 800b038:	603d      	str	r5, [r7, #0]
 800b03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b03c:	1a24      	subs	r4, r4, r0
 800b03e:	601c      	str	r4, [r3, #0]
 800b040:	0030      	movs	r0, r6
 800b042:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b044:	2280      	movs	r2, #128	; 0x80
 800b046:	0352      	lsls	r2, r2, #13
 800b048:	4313      	orrs	r3, r2
 800b04a:	e7d5      	b.n	800aff8 <__d2b+0x28>
 800b04c:	6171      	str	r1, [r6, #20]
 800b04e:	e7e7      	b.n	800b020 <__d2b+0x50>
 800b050:	a801      	add	r0, sp, #4
 800b052:	f7ff fce1 	bl	800aa18 <__lo0bits>
 800b056:	9b01      	ldr	r3, [sp, #4]
 800b058:	2401      	movs	r4, #1
 800b05a:	6173      	str	r3, [r6, #20]
 800b05c:	3020      	adds	r0, #32
 800b05e:	e7e4      	b.n	800b02a <__d2b+0x5a>
 800b060:	4b09      	ldr	r3, [pc, #36]	; (800b088 <__d2b+0xb8>)
 800b062:	18c0      	adds	r0, r0, r3
 800b064:	4b09      	ldr	r3, [pc, #36]	; (800b08c <__d2b+0xbc>)
 800b066:	6038      	str	r0, [r7, #0]
 800b068:	18e3      	adds	r3, r4, r3
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	18f3      	adds	r3, r6, r3
 800b06e:	6958      	ldr	r0, [r3, #20]
 800b070:	f7ff fcb8 	bl	800a9e4 <__hi0bits>
 800b074:	0164      	lsls	r4, r4, #5
 800b076:	e7e0      	b.n	800b03a <__d2b+0x6a>
 800b078:	0800d2c5 	.word	0x0800d2c5
 800b07c:	0800d2d6 	.word	0x0800d2d6
 800b080:	0000030f 	.word	0x0000030f
 800b084:	fffffbcd 	.word	0xfffffbcd
 800b088:	fffffbce 	.word	0xfffffbce
 800b08c:	3fffffff 	.word	0x3fffffff

0800b090 <__ratio>:
 800b090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b092:	b087      	sub	sp, #28
 800b094:	000f      	movs	r7, r1
 800b096:	a904      	add	r1, sp, #16
 800b098:	0006      	movs	r6, r0
 800b09a:	f7ff ff4d 	bl	800af38 <__b2d>
 800b09e:	9000      	str	r0, [sp, #0]
 800b0a0:	9101      	str	r1, [sp, #4]
 800b0a2:	9c00      	ldr	r4, [sp, #0]
 800b0a4:	9d01      	ldr	r5, [sp, #4]
 800b0a6:	0038      	movs	r0, r7
 800b0a8:	a905      	add	r1, sp, #20
 800b0aa:	f7ff ff45 	bl	800af38 <__b2d>
 800b0ae:	9002      	str	r0, [sp, #8]
 800b0b0:	9103      	str	r1, [sp, #12]
 800b0b2:	9a02      	ldr	r2, [sp, #8]
 800b0b4:	9b03      	ldr	r3, [sp, #12]
 800b0b6:	6930      	ldr	r0, [r6, #16]
 800b0b8:	6939      	ldr	r1, [r7, #16]
 800b0ba:	9e04      	ldr	r6, [sp, #16]
 800b0bc:	1a40      	subs	r0, r0, r1
 800b0be:	9905      	ldr	r1, [sp, #20]
 800b0c0:	0140      	lsls	r0, r0, #5
 800b0c2:	1a71      	subs	r1, r6, r1
 800b0c4:	1841      	adds	r1, r0, r1
 800b0c6:	0508      	lsls	r0, r1, #20
 800b0c8:	2900      	cmp	r1, #0
 800b0ca:	dd07      	ble.n	800b0dc <__ratio+0x4c>
 800b0cc:	9901      	ldr	r1, [sp, #4]
 800b0ce:	1845      	adds	r5, r0, r1
 800b0d0:	0020      	movs	r0, r4
 800b0d2:	0029      	movs	r1, r5
 800b0d4:	f7f5 fed2 	bl	8000e7c <__aeabi_ddiv>
 800b0d8:	b007      	add	sp, #28
 800b0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0dc:	9903      	ldr	r1, [sp, #12]
 800b0de:	1a0b      	subs	r3, r1, r0
 800b0e0:	e7f6      	b.n	800b0d0 <__ratio+0x40>

0800b0e2 <__copybits>:
 800b0e2:	b570      	push	{r4, r5, r6, lr}
 800b0e4:	0014      	movs	r4, r2
 800b0e6:	0005      	movs	r5, r0
 800b0e8:	3901      	subs	r1, #1
 800b0ea:	6913      	ldr	r3, [r2, #16]
 800b0ec:	1149      	asrs	r1, r1, #5
 800b0ee:	3101      	adds	r1, #1
 800b0f0:	0089      	lsls	r1, r1, #2
 800b0f2:	3414      	adds	r4, #20
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	1841      	adds	r1, r0, r1
 800b0f8:	18e3      	adds	r3, r4, r3
 800b0fa:	42a3      	cmp	r3, r4
 800b0fc:	d80d      	bhi.n	800b11a <__copybits+0x38>
 800b0fe:	0014      	movs	r4, r2
 800b100:	3411      	adds	r4, #17
 800b102:	2500      	movs	r5, #0
 800b104:	429c      	cmp	r4, r3
 800b106:	d803      	bhi.n	800b110 <__copybits+0x2e>
 800b108:	1a9b      	subs	r3, r3, r2
 800b10a:	3b11      	subs	r3, #17
 800b10c:	089b      	lsrs	r3, r3, #2
 800b10e:	009d      	lsls	r5, r3, #2
 800b110:	2300      	movs	r3, #0
 800b112:	1940      	adds	r0, r0, r5
 800b114:	4281      	cmp	r1, r0
 800b116:	d803      	bhi.n	800b120 <__copybits+0x3e>
 800b118:	bd70      	pop	{r4, r5, r6, pc}
 800b11a:	cc40      	ldmia	r4!, {r6}
 800b11c:	c540      	stmia	r5!, {r6}
 800b11e:	e7ec      	b.n	800b0fa <__copybits+0x18>
 800b120:	c008      	stmia	r0!, {r3}
 800b122:	e7f7      	b.n	800b114 <__copybits+0x32>

0800b124 <__any_on>:
 800b124:	0002      	movs	r2, r0
 800b126:	6900      	ldr	r0, [r0, #16]
 800b128:	b510      	push	{r4, lr}
 800b12a:	3214      	adds	r2, #20
 800b12c:	114b      	asrs	r3, r1, #5
 800b12e:	4298      	cmp	r0, r3
 800b130:	db13      	blt.n	800b15a <__any_on+0x36>
 800b132:	dd0c      	ble.n	800b14e <__any_on+0x2a>
 800b134:	241f      	movs	r4, #31
 800b136:	0008      	movs	r0, r1
 800b138:	4020      	ands	r0, r4
 800b13a:	4221      	tst	r1, r4
 800b13c:	d007      	beq.n	800b14e <__any_on+0x2a>
 800b13e:	0099      	lsls	r1, r3, #2
 800b140:	588c      	ldr	r4, [r1, r2]
 800b142:	0021      	movs	r1, r4
 800b144:	40c1      	lsrs	r1, r0
 800b146:	4081      	lsls	r1, r0
 800b148:	2001      	movs	r0, #1
 800b14a:	428c      	cmp	r4, r1
 800b14c:	d104      	bne.n	800b158 <__any_on+0x34>
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	18d3      	adds	r3, r2, r3
 800b152:	4293      	cmp	r3, r2
 800b154:	d803      	bhi.n	800b15e <__any_on+0x3a>
 800b156:	2000      	movs	r0, #0
 800b158:	bd10      	pop	{r4, pc}
 800b15a:	0003      	movs	r3, r0
 800b15c:	e7f7      	b.n	800b14e <__any_on+0x2a>
 800b15e:	3b04      	subs	r3, #4
 800b160:	6819      	ldr	r1, [r3, #0]
 800b162:	2900      	cmp	r1, #0
 800b164:	d0f5      	beq.n	800b152 <__any_on+0x2e>
 800b166:	2001      	movs	r0, #1
 800b168:	e7f6      	b.n	800b158 <__any_on+0x34>
	...

0800b16c <sulp>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	0016      	movs	r6, r2
 800b170:	000d      	movs	r5, r1
 800b172:	f7ff fec5 	bl	800af00 <__ulp>
 800b176:	2e00      	cmp	r6, #0
 800b178:	d00d      	beq.n	800b196 <sulp+0x2a>
 800b17a:	236b      	movs	r3, #107	; 0x6b
 800b17c:	006a      	lsls	r2, r5, #1
 800b17e:	0d52      	lsrs	r2, r2, #21
 800b180:	1a9b      	subs	r3, r3, r2
 800b182:	2b00      	cmp	r3, #0
 800b184:	dd07      	ble.n	800b196 <sulp+0x2a>
 800b186:	2400      	movs	r4, #0
 800b188:	4a03      	ldr	r2, [pc, #12]	; (800b198 <sulp+0x2c>)
 800b18a:	051b      	lsls	r3, r3, #20
 800b18c:	189d      	adds	r5, r3, r2
 800b18e:	002b      	movs	r3, r5
 800b190:	0022      	movs	r2, r4
 800b192:	f7f6 fa6d 	bl	8001670 <__aeabi_dmul>
 800b196:	bd70      	pop	{r4, r5, r6, pc}
 800b198:	3ff00000 	.word	0x3ff00000

0800b19c <_strtod_l>:
 800b19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b19e:	b0a1      	sub	sp, #132	; 0x84
 800b1a0:	9219      	str	r2, [sp, #100]	; 0x64
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	2600      	movs	r6, #0
 800b1a6:	2700      	movs	r7, #0
 800b1a8:	9004      	str	r0, [sp, #16]
 800b1aa:	9107      	str	r1, [sp, #28]
 800b1ac:	921c      	str	r2, [sp, #112]	; 0x70
 800b1ae:	911b      	str	r1, [sp, #108]	; 0x6c
 800b1b0:	780a      	ldrb	r2, [r1, #0]
 800b1b2:	2a2b      	cmp	r2, #43	; 0x2b
 800b1b4:	d055      	beq.n	800b262 <_strtod_l+0xc6>
 800b1b6:	d841      	bhi.n	800b23c <_strtod_l+0xa0>
 800b1b8:	2a0d      	cmp	r2, #13
 800b1ba:	d83b      	bhi.n	800b234 <_strtod_l+0x98>
 800b1bc:	2a08      	cmp	r2, #8
 800b1be:	d83b      	bhi.n	800b238 <_strtod_l+0x9c>
 800b1c0:	2a00      	cmp	r2, #0
 800b1c2:	d044      	beq.n	800b24e <_strtod_l+0xb2>
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	920f      	str	r2, [sp, #60]	; 0x3c
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b1cc:	9109      	str	r1, [sp, #36]	; 0x24
 800b1ce:	782a      	ldrb	r2, [r5, #0]
 800b1d0:	2a30      	cmp	r2, #48	; 0x30
 800b1d2:	d000      	beq.n	800b1d6 <_strtod_l+0x3a>
 800b1d4:	e085      	b.n	800b2e2 <_strtod_l+0x146>
 800b1d6:	786a      	ldrb	r2, [r5, #1]
 800b1d8:	3120      	adds	r1, #32
 800b1da:	438a      	bics	r2, r1
 800b1dc:	2a58      	cmp	r2, #88	; 0x58
 800b1de:	d000      	beq.n	800b1e2 <_strtod_l+0x46>
 800b1e0:	e075      	b.n	800b2ce <_strtod_l+0x132>
 800b1e2:	9302      	str	r3, [sp, #8]
 800b1e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1e6:	4a97      	ldr	r2, [pc, #604]	; (800b444 <_strtod_l+0x2a8>)
 800b1e8:	9301      	str	r3, [sp, #4]
 800b1ea:	ab1c      	add	r3, sp, #112	; 0x70
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	9804      	ldr	r0, [sp, #16]
 800b1f0:	ab1d      	add	r3, sp, #116	; 0x74
 800b1f2:	a91b      	add	r1, sp, #108	; 0x6c
 800b1f4:	f001 f982 	bl	800c4fc <__gethex>
 800b1f8:	230f      	movs	r3, #15
 800b1fa:	0002      	movs	r2, r0
 800b1fc:	401a      	ands	r2, r3
 800b1fe:	0004      	movs	r4, r0
 800b200:	9205      	str	r2, [sp, #20]
 800b202:	4218      	tst	r0, r3
 800b204:	d005      	beq.n	800b212 <_strtod_l+0x76>
 800b206:	2a06      	cmp	r2, #6
 800b208:	d12d      	bne.n	800b266 <_strtod_l+0xca>
 800b20a:	1c6b      	adds	r3, r5, #1
 800b20c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b20e:	2300      	movs	r3, #0
 800b210:	930f      	str	r3, [sp, #60]	; 0x3c
 800b212:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b214:	2b00      	cmp	r3, #0
 800b216:	d002      	beq.n	800b21e <_strtod_l+0x82>
 800b218:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b21a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b220:	2b00      	cmp	r3, #0
 800b222:	d01b      	beq.n	800b25c <_strtod_l+0xc0>
 800b224:	2380      	movs	r3, #128	; 0x80
 800b226:	0032      	movs	r2, r6
 800b228:	061b      	lsls	r3, r3, #24
 800b22a:	18fb      	adds	r3, r7, r3
 800b22c:	0010      	movs	r0, r2
 800b22e:	0019      	movs	r1, r3
 800b230:	b021      	add	sp, #132	; 0x84
 800b232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b234:	2a20      	cmp	r2, #32
 800b236:	d1c5      	bne.n	800b1c4 <_strtod_l+0x28>
 800b238:	3101      	adds	r1, #1
 800b23a:	e7b8      	b.n	800b1ae <_strtod_l+0x12>
 800b23c:	2a2d      	cmp	r2, #45	; 0x2d
 800b23e:	d1c1      	bne.n	800b1c4 <_strtod_l+0x28>
 800b240:	3a2c      	subs	r2, #44	; 0x2c
 800b242:	920f      	str	r2, [sp, #60]	; 0x3c
 800b244:	1c4a      	adds	r2, r1, #1
 800b246:	921b      	str	r2, [sp, #108]	; 0x6c
 800b248:	784a      	ldrb	r2, [r1, #1]
 800b24a:	2a00      	cmp	r2, #0
 800b24c:	d1bc      	bne.n	800b1c8 <_strtod_l+0x2c>
 800b24e:	9b07      	ldr	r3, [sp, #28]
 800b250:	931b      	str	r3, [sp, #108]	; 0x6c
 800b252:	2300      	movs	r3, #0
 800b254:	930f      	str	r3, [sp, #60]	; 0x3c
 800b256:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d1dd      	bne.n	800b218 <_strtod_l+0x7c>
 800b25c:	0032      	movs	r2, r6
 800b25e:	003b      	movs	r3, r7
 800b260:	e7e4      	b.n	800b22c <_strtod_l+0x90>
 800b262:	2200      	movs	r2, #0
 800b264:	e7ed      	b.n	800b242 <_strtod_l+0xa6>
 800b266:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b268:	2a00      	cmp	r2, #0
 800b26a:	d007      	beq.n	800b27c <_strtod_l+0xe0>
 800b26c:	2135      	movs	r1, #53	; 0x35
 800b26e:	a81e      	add	r0, sp, #120	; 0x78
 800b270:	f7ff ff37 	bl	800b0e2 <__copybits>
 800b274:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b276:	9804      	ldr	r0, [sp, #16]
 800b278:	f7ff fb00 	bl	800a87c <_Bfree>
 800b27c:	9805      	ldr	r0, [sp, #20]
 800b27e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b280:	3801      	subs	r0, #1
 800b282:	2804      	cmp	r0, #4
 800b284:	d806      	bhi.n	800b294 <_strtod_l+0xf8>
 800b286:	f7f4 ff47 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b28a:	0312      	.short	0x0312
 800b28c:	1e1c      	.short	0x1e1c
 800b28e:	12          	.byte	0x12
 800b28f:	00          	.byte	0x00
 800b290:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b292:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b294:	05e4      	lsls	r4, r4, #23
 800b296:	d502      	bpl.n	800b29e <_strtod_l+0x102>
 800b298:	2380      	movs	r3, #128	; 0x80
 800b29a:	061b      	lsls	r3, r3, #24
 800b29c:	431f      	orrs	r7, r3
 800b29e:	4b6a      	ldr	r3, [pc, #424]	; (800b448 <_strtod_l+0x2ac>)
 800b2a0:	423b      	tst	r3, r7
 800b2a2:	d1b6      	bne.n	800b212 <_strtod_l+0x76>
 800b2a4:	f7fe fac4 	bl	8009830 <__errno>
 800b2a8:	2322      	movs	r3, #34	; 0x22
 800b2aa:	6003      	str	r3, [r0, #0]
 800b2ac:	e7b1      	b.n	800b212 <_strtod_l+0x76>
 800b2ae:	4967      	ldr	r1, [pc, #412]	; (800b44c <_strtod_l+0x2b0>)
 800b2b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b2b2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b2b4:	400a      	ands	r2, r1
 800b2b6:	4966      	ldr	r1, [pc, #408]	; (800b450 <_strtod_l+0x2b4>)
 800b2b8:	185b      	adds	r3, r3, r1
 800b2ba:	051b      	lsls	r3, r3, #20
 800b2bc:	431a      	orrs	r2, r3
 800b2be:	0017      	movs	r7, r2
 800b2c0:	e7e8      	b.n	800b294 <_strtod_l+0xf8>
 800b2c2:	4f61      	ldr	r7, [pc, #388]	; (800b448 <_strtod_l+0x2ac>)
 800b2c4:	e7e6      	b.n	800b294 <_strtod_l+0xf8>
 800b2c6:	2601      	movs	r6, #1
 800b2c8:	4f62      	ldr	r7, [pc, #392]	; (800b454 <_strtod_l+0x2b8>)
 800b2ca:	4276      	negs	r6, r6
 800b2cc:	e7e2      	b.n	800b294 <_strtod_l+0xf8>
 800b2ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2d0:	1c5a      	adds	r2, r3, #1
 800b2d2:	921b      	str	r2, [sp, #108]	; 0x6c
 800b2d4:	785b      	ldrb	r3, [r3, #1]
 800b2d6:	2b30      	cmp	r3, #48	; 0x30
 800b2d8:	d0f9      	beq.n	800b2ce <_strtod_l+0x132>
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d099      	beq.n	800b212 <_strtod_l+0x76>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e2:	2500      	movs	r5, #0
 800b2e4:	220a      	movs	r2, #10
 800b2e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2e8:	950d      	str	r5, [sp, #52]	; 0x34
 800b2ea:	9310      	str	r3, [sp, #64]	; 0x40
 800b2ec:	9508      	str	r5, [sp, #32]
 800b2ee:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b2f0:	7804      	ldrb	r4, [r0, #0]
 800b2f2:	0023      	movs	r3, r4
 800b2f4:	3b30      	subs	r3, #48	; 0x30
 800b2f6:	b2d9      	uxtb	r1, r3
 800b2f8:	2909      	cmp	r1, #9
 800b2fa:	d927      	bls.n	800b34c <_strtod_l+0x1b0>
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	4956      	ldr	r1, [pc, #344]	; (800b458 <_strtod_l+0x2bc>)
 800b300:	f001 f812 	bl	800c328 <strncmp>
 800b304:	2800      	cmp	r0, #0
 800b306:	d031      	beq.n	800b36c <_strtod_l+0x1d0>
 800b308:	2000      	movs	r0, #0
 800b30a:	0023      	movs	r3, r4
 800b30c:	4684      	mov	ip, r0
 800b30e:	9a08      	ldr	r2, [sp, #32]
 800b310:	900c      	str	r0, [sp, #48]	; 0x30
 800b312:	9205      	str	r2, [sp, #20]
 800b314:	2220      	movs	r2, #32
 800b316:	0019      	movs	r1, r3
 800b318:	4391      	bics	r1, r2
 800b31a:	000a      	movs	r2, r1
 800b31c:	2100      	movs	r1, #0
 800b31e:	9106      	str	r1, [sp, #24]
 800b320:	2a45      	cmp	r2, #69	; 0x45
 800b322:	d000      	beq.n	800b326 <_strtod_l+0x18a>
 800b324:	e0c2      	b.n	800b4ac <_strtod_l+0x310>
 800b326:	9b05      	ldr	r3, [sp, #20]
 800b328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b32a:	4303      	orrs	r3, r0
 800b32c:	4313      	orrs	r3, r2
 800b32e:	428b      	cmp	r3, r1
 800b330:	d08d      	beq.n	800b24e <_strtod_l+0xb2>
 800b332:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b334:	9307      	str	r3, [sp, #28]
 800b336:	3301      	adds	r3, #1
 800b338:	931b      	str	r3, [sp, #108]	; 0x6c
 800b33a:	9b07      	ldr	r3, [sp, #28]
 800b33c:	785b      	ldrb	r3, [r3, #1]
 800b33e:	2b2b      	cmp	r3, #43	; 0x2b
 800b340:	d071      	beq.n	800b426 <_strtod_l+0x28a>
 800b342:	000c      	movs	r4, r1
 800b344:	2b2d      	cmp	r3, #45	; 0x2d
 800b346:	d174      	bne.n	800b432 <_strtod_l+0x296>
 800b348:	2401      	movs	r4, #1
 800b34a:	e06d      	b.n	800b428 <_strtod_l+0x28c>
 800b34c:	9908      	ldr	r1, [sp, #32]
 800b34e:	2908      	cmp	r1, #8
 800b350:	dc09      	bgt.n	800b366 <_strtod_l+0x1ca>
 800b352:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b354:	4351      	muls	r1, r2
 800b356:	185b      	adds	r3, r3, r1
 800b358:	930d      	str	r3, [sp, #52]	; 0x34
 800b35a:	9b08      	ldr	r3, [sp, #32]
 800b35c:	3001      	adds	r0, #1
 800b35e:	3301      	adds	r3, #1
 800b360:	9308      	str	r3, [sp, #32]
 800b362:	901b      	str	r0, [sp, #108]	; 0x6c
 800b364:	e7c3      	b.n	800b2ee <_strtod_l+0x152>
 800b366:	4355      	muls	r5, r2
 800b368:	195d      	adds	r5, r3, r5
 800b36a:	e7f6      	b.n	800b35a <_strtod_l+0x1be>
 800b36c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b36e:	1c5a      	adds	r2, r3, #1
 800b370:	921b      	str	r2, [sp, #108]	; 0x6c
 800b372:	9a08      	ldr	r2, [sp, #32]
 800b374:	785b      	ldrb	r3, [r3, #1]
 800b376:	2a00      	cmp	r2, #0
 800b378:	d03a      	beq.n	800b3f0 <_strtod_l+0x254>
 800b37a:	900c      	str	r0, [sp, #48]	; 0x30
 800b37c:	9205      	str	r2, [sp, #20]
 800b37e:	001a      	movs	r2, r3
 800b380:	3a30      	subs	r2, #48	; 0x30
 800b382:	2a09      	cmp	r2, #9
 800b384:	d912      	bls.n	800b3ac <_strtod_l+0x210>
 800b386:	2201      	movs	r2, #1
 800b388:	4694      	mov	ip, r2
 800b38a:	e7c3      	b.n	800b314 <_strtod_l+0x178>
 800b38c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b38e:	3001      	adds	r0, #1
 800b390:	1c5a      	adds	r2, r3, #1
 800b392:	921b      	str	r2, [sp, #108]	; 0x6c
 800b394:	785b      	ldrb	r3, [r3, #1]
 800b396:	2b30      	cmp	r3, #48	; 0x30
 800b398:	d0f8      	beq.n	800b38c <_strtod_l+0x1f0>
 800b39a:	001a      	movs	r2, r3
 800b39c:	3a31      	subs	r2, #49	; 0x31
 800b39e:	2a08      	cmp	r2, #8
 800b3a0:	d83c      	bhi.n	800b41c <_strtod_l+0x280>
 800b3a2:	900c      	str	r0, [sp, #48]	; 0x30
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b3a8:	9005      	str	r0, [sp, #20]
 800b3aa:	9210      	str	r2, [sp, #64]	; 0x40
 800b3ac:	001a      	movs	r2, r3
 800b3ae:	1c41      	adds	r1, r0, #1
 800b3b0:	3a30      	subs	r2, #48	; 0x30
 800b3b2:	2b30      	cmp	r3, #48	; 0x30
 800b3b4:	d016      	beq.n	800b3e4 <_strtod_l+0x248>
 800b3b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3b8:	185b      	adds	r3, r3, r1
 800b3ba:	930c      	str	r3, [sp, #48]	; 0x30
 800b3bc:	9b05      	ldr	r3, [sp, #20]
 800b3be:	210a      	movs	r1, #10
 800b3c0:	469c      	mov	ip, r3
 800b3c2:	4484      	add	ip, r0
 800b3c4:	4563      	cmp	r3, ip
 800b3c6:	d115      	bne.n	800b3f4 <_strtod_l+0x258>
 800b3c8:	9905      	ldr	r1, [sp, #20]
 800b3ca:	9b05      	ldr	r3, [sp, #20]
 800b3cc:	3101      	adds	r1, #1
 800b3ce:	1809      	adds	r1, r1, r0
 800b3d0:	181b      	adds	r3, r3, r0
 800b3d2:	9105      	str	r1, [sp, #20]
 800b3d4:	2b08      	cmp	r3, #8
 800b3d6:	dc19      	bgt.n	800b40c <_strtod_l+0x270>
 800b3d8:	230a      	movs	r3, #10
 800b3da:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b3dc:	434b      	muls	r3, r1
 800b3de:	2100      	movs	r1, #0
 800b3e0:	18d3      	adds	r3, r2, r3
 800b3e2:	930d      	str	r3, [sp, #52]	; 0x34
 800b3e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3e6:	0008      	movs	r0, r1
 800b3e8:	1c5a      	adds	r2, r3, #1
 800b3ea:	921b      	str	r2, [sp, #108]	; 0x6c
 800b3ec:	785b      	ldrb	r3, [r3, #1]
 800b3ee:	e7c6      	b.n	800b37e <_strtod_l+0x1e2>
 800b3f0:	9808      	ldr	r0, [sp, #32]
 800b3f2:	e7d0      	b.n	800b396 <_strtod_l+0x1fa>
 800b3f4:	1c5c      	adds	r4, r3, #1
 800b3f6:	2b08      	cmp	r3, #8
 800b3f8:	dc04      	bgt.n	800b404 <_strtod_l+0x268>
 800b3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3fc:	434b      	muls	r3, r1
 800b3fe:	930d      	str	r3, [sp, #52]	; 0x34
 800b400:	0023      	movs	r3, r4
 800b402:	e7df      	b.n	800b3c4 <_strtod_l+0x228>
 800b404:	2c10      	cmp	r4, #16
 800b406:	dcfb      	bgt.n	800b400 <_strtod_l+0x264>
 800b408:	434d      	muls	r5, r1
 800b40a:	e7f9      	b.n	800b400 <_strtod_l+0x264>
 800b40c:	9b05      	ldr	r3, [sp, #20]
 800b40e:	2100      	movs	r1, #0
 800b410:	2b10      	cmp	r3, #16
 800b412:	dce7      	bgt.n	800b3e4 <_strtod_l+0x248>
 800b414:	230a      	movs	r3, #10
 800b416:	435d      	muls	r5, r3
 800b418:	1955      	adds	r5, r2, r5
 800b41a:	e7e3      	b.n	800b3e4 <_strtod_l+0x248>
 800b41c:	2200      	movs	r2, #0
 800b41e:	920c      	str	r2, [sp, #48]	; 0x30
 800b420:	9205      	str	r2, [sp, #20]
 800b422:	3201      	adds	r2, #1
 800b424:	e7b0      	b.n	800b388 <_strtod_l+0x1ec>
 800b426:	2400      	movs	r4, #0
 800b428:	9b07      	ldr	r3, [sp, #28]
 800b42a:	3302      	adds	r3, #2
 800b42c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b42e:	9b07      	ldr	r3, [sp, #28]
 800b430:	789b      	ldrb	r3, [r3, #2]
 800b432:	001a      	movs	r2, r3
 800b434:	3a30      	subs	r2, #48	; 0x30
 800b436:	2a09      	cmp	r2, #9
 800b438:	d914      	bls.n	800b464 <_strtod_l+0x2c8>
 800b43a:	9a07      	ldr	r2, [sp, #28]
 800b43c:	921b      	str	r2, [sp, #108]	; 0x6c
 800b43e:	2200      	movs	r2, #0
 800b440:	e033      	b.n	800b4aa <_strtod_l+0x30e>
 800b442:	46c0      	nop			; (mov r8, r8)
 800b444:	0800d430 	.word	0x0800d430
 800b448:	7ff00000 	.word	0x7ff00000
 800b44c:	ffefffff 	.word	0xffefffff
 800b450:	00000433 	.word	0x00000433
 800b454:	7fffffff 	.word	0x7fffffff
 800b458:	0800d42c 	.word	0x0800d42c
 800b45c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b45e:	1c5a      	adds	r2, r3, #1
 800b460:	921b      	str	r2, [sp, #108]	; 0x6c
 800b462:	785b      	ldrb	r3, [r3, #1]
 800b464:	2b30      	cmp	r3, #48	; 0x30
 800b466:	d0f9      	beq.n	800b45c <_strtod_l+0x2c0>
 800b468:	2200      	movs	r2, #0
 800b46a:	9206      	str	r2, [sp, #24]
 800b46c:	001a      	movs	r2, r3
 800b46e:	3a31      	subs	r2, #49	; 0x31
 800b470:	2a08      	cmp	r2, #8
 800b472:	d81b      	bhi.n	800b4ac <_strtod_l+0x310>
 800b474:	3b30      	subs	r3, #48	; 0x30
 800b476:	930e      	str	r3, [sp, #56]	; 0x38
 800b478:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b47a:	9306      	str	r3, [sp, #24]
 800b47c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b47e:	1c59      	adds	r1, r3, #1
 800b480:	911b      	str	r1, [sp, #108]	; 0x6c
 800b482:	785b      	ldrb	r3, [r3, #1]
 800b484:	001a      	movs	r2, r3
 800b486:	3a30      	subs	r2, #48	; 0x30
 800b488:	2a09      	cmp	r2, #9
 800b48a:	d93a      	bls.n	800b502 <_strtod_l+0x366>
 800b48c:	9a06      	ldr	r2, [sp, #24]
 800b48e:	1a8a      	subs	r2, r1, r2
 800b490:	49b2      	ldr	r1, [pc, #712]	; (800b75c <_strtod_l+0x5c0>)
 800b492:	9106      	str	r1, [sp, #24]
 800b494:	2a08      	cmp	r2, #8
 800b496:	dc04      	bgt.n	800b4a2 <_strtod_l+0x306>
 800b498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b49a:	9206      	str	r2, [sp, #24]
 800b49c:	428a      	cmp	r2, r1
 800b49e:	dd00      	ble.n	800b4a2 <_strtod_l+0x306>
 800b4a0:	9106      	str	r1, [sp, #24]
 800b4a2:	2c00      	cmp	r4, #0
 800b4a4:	d002      	beq.n	800b4ac <_strtod_l+0x310>
 800b4a6:	9a06      	ldr	r2, [sp, #24]
 800b4a8:	4252      	negs	r2, r2
 800b4aa:	9206      	str	r2, [sp, #24]
 800b4ac:	9a05      	ldr	r2, [sp, #20]
 800b4ae:	2a00      	cmp	r2, #0
 800b4b0:	d14d      	bne.n	800b54e <_strtod_l+0x3b2>
 800b4b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4b4:	4310      	orrs	r0, r2
 800b4b6:	d000      	beq.n	800b4ba <_strtod_l+0x31e>
 800b4b8:	e6ab      	b.n	800b212 <_strtod_l+0x76>
 800b4ba:	4662      	mov	r2, ip
 800b4bc:	2a00      	cmp	r2, #0
 800b4be:	d000      	beq.n	800b4c2 <_strtod_l+0x326>
 800b4c0:	e6c5      	b.n	800b24e <_strtod_l+0xb2>
 800b4c2:	2b69      	cmp	r3, #105	; 0x69
 800b4c4:	d027      	beq.n	800b516 <_strtod_l+0x37a>
 800b4c6:	dc23      	bgt.n	800b510 <_strtod_l+0x374>
 800b4c8:	2b49      	cmp	r3, #73	; 0x49
 800b4ca:	d024      	beq.n	800b516 <_strtod_l+0x37a>
 800b4cc:	2b4e      	cmp	r3, #78	; 0x4e
 800b4ce:	d000      	beq.n	800b4d2 <_strtod_l+0x336>
 800b4d0:	e6bd      	b.n	800b24e <_strtod_l+0xb2>
 800b4d2:	49a3      	ldr	r1, [pc, #652]	; (800b760 <_strtod_l+0x5c4>)
 800b4d4:	a81b      	add	r0, sp, #108	; 0x6c
 800b4d6:	f001 fa47 	bl	800c968 <__match>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d100      	bne.n	800b4e0 <_strtod_l+0x344>
 800b4de:	e6b6      	b.n	800b24e <_strtod_l+0xb2>
 800b4e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	2b28      	cmp	r3, #40	; 0x28
 800b4e6:	d12c      	bne.n	800b542 <_strtod_l+0x3a6>
 800b4e8:	499e      	ldr	r1, [pc, #632]	; (800b764 <_strtod_l+0x5c8>)
 800b4ea:	aa1e      	add	r2, sp, #120	; 0x78
 800b4ec:	a81b      	add	r0, sp, #108	; 0x6c
 800b4ee:	f001 fa4f 	bl	800c990 <__hexnan>
 800b4f2:	2805      	cmp	r0, #5
 800b4f4:	d125      	bne.n	800b542 <_strtod_l+0x3a6>
 800b4f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b4f8:	4a9b      	ldr	r2, [pc, #620]	; (800b768 <_strtod_l+0x5cc>)
 800b4fa:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b4fc:	431a      	orrs	r2, r3
 800b4fe:	0017      	movs	r7, r2
 800b500:	e687      	b.n	800b212 <_strtod_l+0x76>
 800b502:	220a      	movs	r2, #10
 800b504:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b506:	434a      	muls	r2, r1
 800b508:	18d2      	adds	r2, r2, r3
 800b50a:	3a30      	subs	r2, #48	; 0x30
 800b50c:	920e      	str	r2, [sp, #56]	; 0x38
 800b50e:	e7b5      	b.n	800b47c <_strtod_l+0x2e0>
 800b510:	2b6e      	cmp	r3, #110	; 0x6e
 800b512:	d0de      	beq.n	800b4d2 <_strtod_l+0x336>
 800b514:	e69b      	b.n	800b24e <_strtod_l+0xb2>
 800b516:	4995      	ldr	r1, [pc, #596]	; (800b76c <_strtod_l+0x5d0>)
 800b518:	a81b      	add	r0, sp, #108	; 0x6c
 800b51a:	f001 fa25 	bl	800c968 <__match>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d100      	bne.n	800b524 <_strtod_l+0x388>
 800b522:	e694      	b.n	800b24e <_strtod_l+0xb2>
 800b524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b526:	4992      	ldr	r1, [pc, #584]	; (800b770 <_strtod_l+0x5d4>)
 800b528:	3b01      	subs	r3, #1
 800b52a:	a81b      	add	r0, sp, #108	; 0x6c
 800b52c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b52e:	f001 fa1b 	bl	800c968 <__match>
 800b532:	2800      	cmp	r0, #0
 800b534:	d102      	bne.n	800b53c <_strtod_l+0x3a0>
 800b536:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b538:	3301      	adds	r3, #1
 800b53a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b53c:	2600      	movs	r6, #0
 800b53e:	4f8a      	ldr	r7, [pc, #552]	; (800b768 <_strtod_l+0x5cc>)
 800b540:	e667      	b.n	800b212 <_strtod_l+0x76>
 800b542:	488c      	ldr	r0, [pc, #560]	; (800b774 <_strtod_l+0x5d8>)
 800b544:	f000 ff1e 	bl	800c384 <nan>
 800b548:	0006      	movs	r6, r0
 800b54a:	000f      	movs	r7, r1
 800b54c:	e661      	b.n	800b212 <_strtod_l+0x76>
 800b54e:	9b06      	ldr	r3, [sp, #24]
 800b550:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b552:	1a9b      	subs	r3, r3, r2
 800b554:	9309      	str	r3, [sp, #36]	; 0x24
 800b556:	9b08      	ldr	r3, [sp, #32]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d101      	bne.n	800b560 <_strtod_l+0x3c4>
 800b55c:	9b05      	ldr	r3, [sp, #20]
 800b55e:	9308      	str	r3, [sp, #32]
 800b560:	9c05      	ldr	r4, [sp, #20]
 800b562:	2c10      	cmp	r4, #16
 800b564:	dd00      	ble.n	800b568 <_strtod_l+0x3cc>
 800b566:	2410      	movs	r4, #16
 800b568:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b56a:	f7f6 ff49 	bl	8002400 <__aeabi_ui2d>
 800b56e:	9b05      	ldr	r3, [sp, #20]
 800b570:	0006      	movs	r6, r0
 800b572:	000f      	movs	r7, r1
 800b574:	2b09      	cmp	r3, #9
 800b576:	dd15      	ble.n	800b5a4 <_strtod_l+0x408>
 800b578:	0022      	movs	r2, r4
 800b57a:	4b7f      	ldr	r3, [pc, #508]	; (800b778 <_strtod_l+0x5dc>)
 800b57c:	3a09      	subs	r2, #9
 800b57e:	00d2      	lsls	r2, r2, #3
 800b580:	189b      	adds	r3, r3, r2
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	f7f6 f873 	bl	8001670 <__aeabi_dmul>
 800b58a:	0006      	movs	r6, r0
 800b58c:	0028      	movs	r0, r5
 800b58e:	000f      	movs	r7, r1
 800b590:	f7f6 ff36 	bl	8002400 <__aeabi_ui2d>
 800b594:	0002      	movs	r2, r0
 800b596:	000b      	movs	r3, r1
 800b598:	0030      	movs	r0, r6
 800b59a:	0039      	movs	r1, r7
 800b59c:	f7f5 f90e 	bl	80007bc <__aeabi_dadd>
 800b5a0:	0006      	movs	r6, r0
 800b5a2:	000f      	movs	r7, r1
 800b5a4:	9b05      	ldr	r3, [sp, #20]
 800b5a6:	2b0f      	cmp	r3, #15
 800b5a8:	dc39      	bgt.n	800b61e <_strtod_l+0x482>
 800b5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d100      	bne.n	800b5b2 <_strtod_l+0x416>
 800b5b0:	e62f      	b.n	800b212 <_strtod_l+0x76>
 800b5b2:	dd24      	ble.n	800b5fe <_strtod_l+0x462>
 800b5b4:	2b16      	cmp	r3, #22
 800b5b6:	dc09      	bgt.n	800b5cc <_strtod_l+0x430>
 800b5b8:	496f      	ldr	r1, [pc, #444]	; (800b778 <_strtod_l+0x5dc>)
 800b5ba:	00db      	lsls	r3, r3, #3
 800b5bc:	18c9      	adds	r1, r1, r3
 800b5be:	0032      	movs	r2, r6
 800b5c0:	6808      	ldr	r0, [r1, #0]
 800b5c2:	6849      	ldr	r1, [r1, #4]
 800b5c4:	003b      	movs	r3, r7
 800b5c6:	f7f6 f853 	bl	8001670 <__aeabi_dmul>
 800b5ca:	e7bd      	b.n	800b548 <_strtod_l+0x3ac>
 800b5cc:	2325      	movs	r3, #37	; 0x25
 800b5ce:	9a05      	ldr	r2, [sp, #20]
 800b5d0:	1a9b      	subs	r3, r3, r2
 800b5d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	db22      	blt.n	800b61e <_strtod_l+0x482>
 800b5d8:	240f      	movs	r4, #15
 800b5da:	9b05      	ldr	r3, [sp, #20]
 800b5dc:	4d66      	ldr	r5, [pc, #408]	; (800b778 <_strtod_l+0x5dc>)
 800b5de:	1ae4      	subs	r4, r4, r3
 800b5e0:	00e1      	lsls	r1, r4, #3
 800b5e2:	1869      	adds	r1, r5, r1
 800b5e4:	0032      	movs	r2, r6
 800b5e6:	6808      	ldr	r0, [r1, #0]
 800b5e8:	6849      	ldr	r1, [r1, #4]
 800b5ea:	003b      	movs	r3, r7
 800b5ec:	f7f6 f840 	bl	8001670 <__aeabi_dmul>
 800b5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f2:	1b1c      	subs	r4, r3, r4
 800b5f4:	00e4      	lsls	r4, r4, #3
 800b5f6:	192d      	adds	r5, r5, r4
 800b5f8:	682a      	ldr	r2, [r5, #0]
 800b5fa:	686b      	ldr	r3, [r5, #4]
 800b5fc:	e7e3      	b.n	800b5c6 <_strtod_l+0x42a>
 800b5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b600:	3316      	adds	r3, #22
 800b602:	db0c      	blt.n	800b61e <_strtod_l+0x482>
 800b604:	9906      	ldr	r1, [sp, #24]
 800b606:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b608:	4b5b      	ldr	r3, [pc, #364]	; (800b778 <_strtod_l+0x5dc>)
 800b60a:	1a52      	subs	r2, r2, r1
 800b60c:	00d2      	lsls	r2, r2, #3
 800b60e:	189b      	adds	r3, r3, r2
 800b610:	0030      	movs	r0, r6
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	0039      	movs	r1, r7
 800b618:	f7f5 fc30 	bl	8000e7c <__aeabi_ddiv>
 800b61c:	e794      	b.n	800b548 <_strtod_l+0x3ac>
 800b61e:	9b05      	ldr	r3, [sp, #20]
 800b620:	1b1c      	subs	r4, r3, r4
 800b622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b624:	18e4      	adds	r4, r4, r3
 800b626:	2c00      	cmp	r4, #0
 800b628:	dd72      	ble.n	800b710 <_strtod_l+0x574>
 800b62a:	220f      	movs	r2, #15
 800b62c:	0023      	movs	r3, r4
 800b62e:	4013      	ands	r3, r2
 800b630:	4214      	tst	r4, r2
 800b632:	d00a      	beq.n	800b64a <_strtod_l+0x4ae>
 800b634:	4950      	ldr	r1, [pc, #320]	; (800b778 <_strtod_l+0x5dc>)
 800b636:	00db      	lsls	r3, r3, #3
 800b638:	18c9      	adds	r1, r1, r3
 800b63a:	0032      	movs	r2, r6
 800b63c:	6808      	ldr	r0, [r1, #0]
 800b63e:	6849      	ldr	r1, [r1, #4]
 800b640:	003b      	movs	r3, r7
 800b642:	f7f6 f815 	bl	8001670 <__aeabi_dmul>
 800b646:	0006      	movs	r6, r0
 800b648:	000f      	movs	r7, r1
 800b64a:	230f      	movs	r3, #15
 800b64c:	439c      	bics	r4, r3
 800b64e:	d04a      	beq.n	800b6e6 <_strtod_l+0x54a>
 800b650:	3326      	adds	r3, #38	; 0x26
 800b652:	33ff      	adds	r3, #255	; 0xff
 800b654:	429c      	cmp	r4, r3
 800b656:	dd22      	ble.n	800b69e <_strtod_l+0x502>
 800b658:	2300      	movs	r3, #0
 800b65a:	9305      	str	r3, [sp, #20]
 800b65c:	9306      	str	r3, [sp, #24]
 800b65e:	930d      	str	r3, [sp, #52]	; 0x34
 800b660:	9308      	str	r3, [sp, #32]
 800b662:	2322      	movs	r3, #34	; 0x22
 800b664:	2600      	movs	r6, #0
 800b666:	9a04      	ldr	r2, [sp, #16]
 800b668:	4f3f      	ldr	r7, [pc, #252]	; (800b768 <_strtod_l+0x5cc>)
 800b66a:	6013      	str	r3, [r2, #0]
 800b66c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b66e:	42b3      	cmp	r3, r6
 800b670:	d100      	bne.n	800b674 <_strtod_l+0x4d8>
 800b672:	e5ce      	b.n	800b212 <_strtod_l+0x76>
 800b674:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b676:	9804      	ldr	r0, [sp, #16]
 800b678:	f7ff f900 	bl	800a87c <_Bfree>
 800b67c:	9908      	ldr	r1, [sp, #32]
 800b67e:	9804      	ldr	r0, [sp, #16]
 800b680:	f7ff f8fc 	bl	800a87c <_Bfree>
 800b684:	9906      	ldr	r1, [sp, #24]
 800b686:	9804      	ldr	r0, [sp, #16]
 800b688:	f7ff f8f8 	bl	800a87c <_Bfree>
 800b68c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b68e:	9804      	ldr	r0, [sp, #16]
 800b690:	f7ff f8f4 	bl	800a87c <_Bfree>
 800b694:	9905      	ldr	r1, [sp, #20]
 800b696:	9804      	ldr	r0, [sp, #16]
 800b698:	f7ff f8f0 	bl	800a87c <_Bfree>
 800b69c:	e5b9      	b.n	800b212 <_strtod_l+0x76>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	0030      	movs	r0, r6
 800b6a2:	0039      	movs	r1, r7
 800b6a4:	4d35      	ldr	r5, [pc, #212]	; (800b77c <_strtod_l+0x5e0>)
 800b6a6:	1124      	asrs	r4, r4, #4
 800b6a8:	9307      	str	r3, [sp, #28]
 800b6aa:	2c01      	cmp	r4, #1
 800b6ac:	dc1e      	bgt.n	800b6ec <_strtod_l+0x550>
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <_strtod_l+0x51a>
 800b6b2:	0006      	movs	r6, r0
 800b6b4:	000f      	movs	r7, r1
 800b6b6:	4b32      	ldr	r3, [pc, #200]	; (800b780 <_strtod_l+0x5e4>)
 800b6b8:	9a07      	ldr	r2, [sp, #28]
 800b6ba:	18ff      	adds	r7, r7, r3
 800b6bc:	4b2f      	ldr	r3, [pc, #188]	; (800b77c <_strtod_l+0x5e0>)
 800b6be:	00d2      	lsls	r2, r2, #3
 800b6c0:	189d      	adds	r5, r3, r2
 800b6c2:	6828      	ldr	r0, [r5, #0]
 800b6c4:	6869      	ldr	r1, [r5, #4]
 800b6c6:	0032      	movs	r2, r6
 800b6c8:	003b      	movs	r3, r7
 800b6ca:	f7f5 ffd1 	bl	8001670 <__aeabi_dmul>
 800b6ce:	4b26      	ldr	r3, [pc, #152]	; (800b768 <_strtod_l+0x5cc>)
 800b6d0:	4a2c      	ldr	r2, [pc, #176]	; (800b784 <_strtod_l+0x5e8>)
 800b6d2:	0006      	movs	r6, r0
 800b6d4:	400b      	ands	r3, r1
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d8be      	bhi.n	800b658 <_strtod_l+0x4bc>
 800b6da:	4a2b      	ldr	r2, [pc, #172]	; (800b788 <_strtod_l+0x5ec>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d913      	bls.n	800b708 <_strtod_l+0x56c>
 800b6e0:	2601      	movs	r6, #1
 800b6e2:	4f2a      	ldr	r7, [pc, #168]	; (800b78c <_strtod_l+0x5f0>)
 800b6e4:	4276      	negs	r6, r6
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	9307      	str	r3, [sp, #28]
 800b6ea:	e088      	b.n	800b7fe <_strtod_l+0x662>
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	4214      	tst	r4, r2
 800b6f0:	d004      	beq.n	800b6fc <_strtod_l+0x560>
 800b6f2:	682a      	ldr	r2, [r5, #0]
 800b6f4:	686b      	ldr	r3, [r5, #4]
 800b6f6:	f7f5 ffbb 	bl	8001670 <__aeabi_dmul>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	9a07      	ldr	r2, [sp, #28]
 800b6fe:	1064      	asrs	r4, r4, #1
 800b700:	3201      	adds	r2, #1
 800b702:	9207      	str	r2, [sp, #28]
 800b704:	3508      	adds	r5, #8
 800b706:	e7d0      	b.n	800b6aa <_strtod_l+0x50e>
 800b708:	23d4      	movs	r3, #212	; 0xd4
 800b70a:	049b      	lsls	r3, r3, #18
 800b70c:	18cf      	adds	r7, r1, r3
 800b70e:	e7ea      	b.n	800b6e6 <_strtod_l+0x54a>
 800b710:	2c00      	cmp	r4, #0
 800b712:	d0e8      	beq.n	800b6e6 <_strtod_l+0x54a>
 800b714:	4264      	negs	r4, r4
 800b716:	230f      	movs	r3, #15
 800b718:	0022      	movs	r2, r4
 800b71a:	401a      	ands	r2, r3
 800b71c:	421c      	tst	r4, r3
 800b71e:	d00a      	beq.n	800b736 <_strtod_l+0x59a>
 800b720:	4b15      	ldr	r3, [pc, #84]	; (800b778 <_strtod_l+0x5dc>)
 800b722:	00d2      	lsls	r2, r2, #3
 800b724:	189b      	adds	r3, r3, r2
 800b726:	0030      	movs	r0, r6
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	0039      	movs	r1, r7
 800b72e:	f7f5 fba5 	bl	8000e7c <__aeabi_ddiv>
 800b732:	0006      	movs	r6, r0
 800b734:	000f      	movs	r7, r1
 800b736:	1124      	asrs	r4, r4, #4
 800b738:	d0d5      	beq.n	800b6e6 <_strtod_l+0x54a>
 800b73a:	2c1f      	cmp	r4, #31
 800b73c:	dd28      	ble.n	800b790 <_strtod_l+0x5f4>
 800b73e:	2300      	movs	r3, #0
 800b740:	9305      	str	r3, [sp, #20]
 800b742:	9306      	str	r3, [sp, #24]
 800b744:	930d      	str	r3, [sp, #52]	; 0x34
 800b746:	9308      	str	r3, [sp, #32]
 800b748:	2322      	movs	r3, #34	; 0x22
 800b74a:	9a04      	ldr	r2, [sp, #16]
 800b74c:	2600      	movs	r6, #0
 800b74e:	6013      	str	r3, [r2, #0]
 800b750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b752:	2700      	movs	r7, #0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d18d      	bne.n	800b674 <_strtod_l+0x4d8>
 800b758:	e55b      	b.n	800b212 <_strtod_l+0x76>
 800b75a:	46c0      	nop			; (mov r8, r8)
 800b75c:	00004e1f 	.word	0x00004e1f
 800b760:	0800d21d 	.word	0x0800d21d
 800b764:	0800d444 	.word	0x0800d444
 800b768:	7ff00000 	.word	0x7ff00000
 800b76c:	0800d215 	.word	0x0800d215
 800b770:	0800d24c 	.word	0x0800d24c
 800b774:	0800d5d5 	.word	0x0800d5d5
 800b778:	0800d358 	.word	0x0800d358
 800b77c:	0800d330 	.word	0x0800d330
 800b780:	fcb00000 	.word	0xfcb00000
 800b784:	7ca00000 	.word	0x7ca00000
 800b788:	7c900000 	.word	0x7c900000
 800b78c:	7fefffff 	.word	0x7fefffff
 800b790:	2310      	movs	r3, #16
 800b792:	0022      	movs	r2, r4
 800b794:	401a      	ands	r2, r3
 800b796:	9207      	str	r2, [sp, #28]
 800b798:	421c      	tst	r4, r3
 800b79a:	d001      	beq.n	800b7a0 <_strtod_l+0x604>
 800b79c:	335a      	adds	r3, #90	; 0x5a
 800b79e:	9307      	str	r3, [sp, #28]
 800b7a0:	0030      	movs	r0, r6
 800b7a2:	0039      	movs	r1, r7
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	4dc4      	ldr	r5, [pc, #784]	; (800bab8 <_strtod_l+0x91c>)
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	4214      	tst	r4, r2
 800b7ac:	d004      	beq.n	800b7b8 <_strtod_l+0x61c>
 800b7ae:	682a      	ldr	r2, [r5, #0]
 800b7b0:	686b      	ldr	r3, [r5, #4]
 800b7b2:	f7f5 ff5d 	bl	8001670 <__aeabi_dmul>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	1064      	asrs	r4, r4, #1
 800b7ba:	3508      	adds	r5, #8
 800b7bc:	2c00      	cmp	r4, #0
 800b7be:	d1f3      	bne.n	800b7a8 <_strtod_l+0x60c>
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d001      	beq.n	800b7c8 <_strtod_l+0x62c>
 800b7c4:	0006      	movs	r6, r0
 800b7c6:	000f      	movs	r7, r1
 800b7c8:	9b07      	ldr	r3, [sp, #28]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00f      	beq.n	800b7ee <_strtod_l+0x652>
 800b7ce:	236b      	movs	r3, #107	; 0x6b
 800b7d0:	007a      	lsls	r2, r7, #1
 800b7d2:	0d52      	lsrs	r2, r2, #21
 800b7d4:	0039      	movs	r1, r7
 800b7d6:	1a9b      	subs	r3, r3, r2
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	dd08      	ble.n	800b7ee <_strtod_l+0x652>
 800b7dc:	2b1f      	cmp	r3, #31
 800b7de:	dc00      	bgt.n	800b7e2 <_strtod_l+0x646>
 800b7e0:	e121      	b.n	800ba26 <_strtod_l+0x88a>
 800b7e2:	2600      	movs	r6, #0
 800b7e4:	2b34      	cmp	r3, #52	; 0x34
 800b7e6:	dc00      	bgt.n	800b7ea <_strtod_l+0x64e>
 800b7e8:	e116      	b.n	800ba18 <_strtod_l+0x87c>
 800b7ea:	27dc      	movs	r7, #220	; 0xdc
 800b7ec:	04bf      	lsls	r7, r7, #18
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	0030      	movs	r0, r6
 800b7f4:	0039      	movs	r1, r7
 800b7f6:	f7f4 fe29 	bl	800044c <__aeabi_dcmpeq>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d19f      	bne.n	800b73e <_strtod_l+0x5a2>
 800b7fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b800:	9a08      	ldr	r2, [sp, #32]
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b806:	9b05      	ldr	r3, [sp, #20]
 800b808:	9804      	ldr	r0, [sp, #16]
 800b80a:	f7ff f89f 	bl	800a94c <__s2b>
 800b80e:	900d      	str	r0, [sp, #52]	; 0x34
 800b810:	2800      	cmp	r0, #0
 800b812:	d100      	bne.n	800b816 <_strtod_l+0x67a>
 800b814:	e720      	b.n	800b658 <_strtod_l+0x4bc>
 800b816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b818:	9906      	ldr	r1, [sp, #24]
 800b81a:	17da      	asrs	r2, r3, #31
 800b81c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b81e:	1a5b      	subs	r3, r3, r1
 800b820:	401a      	ands	r2, r3
 800b822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b824:	9215      	str	r2, [sp, #84]	; 0x54
 800b826:	43db      	mvns	r3, r3
 800b828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b82a:	17db      	asrs	r3, r3, #31
 800b82c:	401a      	ands	r2, r3
 800b82e:	2300      	movs	r3, #0
 800b830:	9218      	str	r2, [sp, #96]	; 0x60
 800b832:	9305      	str	r3, [sp, #20]
 800b834:	9306      	str	r3, [sp, #24]
 800b836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b838:	9804      	ldr	r0, [sp, #16]
 800b83a:	6859      	ldr	r1, [r3, #4]
 800b83c:	f7fe ffda 	bl	800a7f4 <_Balloc>
 800b840:	9008      	str	r0, [sp, #32]
 800b842:	2800      	cmp	r0, #0
 800b844:	d100      	bne.n	800b848 <_strtod_l+0x6ac>
 800b846:	e70c      	b.n	800b662 <_strtod_l+0x4c6>
 800b848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b84a:	300c      	adds	r0, #12
 800b84c:	0019      	movs	r1, r3
 800b84e:	691a      	ldr	r2, [r3, #16]
 800b850:	310c      	adds	r1, #12
 800b852:	3202      	adds	r2, #2
 800b854:	0092      	lsls	r2, r2, #2
 800b856:	f000 fd8b 	bl	800c370 <memcpy>
 800b85a:	ab1e      	add	r3, sp, #120	; 0x78
 800b85c:	9301      	str	r3, [sp, #4]
 800b85e:	ab1d      	add	r3, sp, #116	; 0x74
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	0032      	movs	r2, r6
 800b864:	003b      	movs	r3, r7
 800b866:	9804      	ldr	r0, [sp, #16]
 800b868:	9610      	str	r6, [sp, #64]	; 0x40
 800b86a:	9711      	str	r7, [sp, #68]	; 0x44
 800b86c:	f7ff fbb0 	bl	800afd0 <__d2b>
 800b870:	901c      	str	r0, [sp, #112]	; 0x70
 800b872:	2800      	cmp	r0, #0
 800b874:	d100      	bne.n	800b878 <_strtod_l+0x6dc>
 800b876:	e6f4      	b.n	800b662 <_strtod_l+0x4c6>
 800b878:	2101      	movs	r1, #1
 800b87a:	9804      	ldr	r0, [sp, #16]
 800b87c:	f7ff f8fa 	bl	800aa74 <__i2b>
 800b880:	9006      	str	r0, [sp, #24]
 800b882:	2800      	cmp	r0, #0
 800b884:	d100      	bne.n	800b888 <_strtod_l+0x6ec>
 800b886:	e6ec      	b.n	800b662 <_strtod_l+0x4c6>
 800b888:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b88a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b88c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b88e:	1ad4      	subs	r4, r2, r3
 800b890:	2b00      	cmp	r3, #0
 800b892:	db01      	blt.n	800b898 <_strtod_l+0x6fc>
 800b894:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b896:	195d      	adds	r5, r3, r5
 800b898:	9907      	ldr	r1, [sp, #28]
 800b89a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b89c:	1a5b      	subs	r3, r3, r1
 800b89e:	2136      	movs	r1, #54	; 0x36
 800b8a0:	189b      	adds	r3, r3, r2
 800b8a2:	1a8a      	subs	r2, r1, r2
 800b8a4:	4985      	ldr	r1, [pc, #532]	; (800babc <_strtod_l+0x920>)
 800b8a6:	2001      	movs	r0, #1
 800b8a8:	468c      	mov	ip, r1
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	9114      	str	r1, [sp, #80]	; 0x50
 800b8b0:	9012      	str	r0, [sp, #72]	; 0x48
 800b8b2:	4563      	cmp	r3, ip
 800b8b4:	da07      	bge.n	800b8c6 <_strtod_l+0x72a>
 800b8b6:	4661      	mov	r1, ip
 800b8b8:	1ac9      	subs	r1, r1, r3
 800b8ba:	1a52      	subs	r2, r2, r1
 800b8bc:	291f      	cmp	r1, #31
 800b8be:	dd00      	ble.n	800b8c2 <_strtod_l+0x726>
 800b8c0:	e0b6      	b.n	800ba30 <_strtod_l+0x894>
 800b8c2:	4088      	lsls	r0, r1
 800b8c4:	9012      	str	r0, [sp, #72]	; 0x48
 800b8c6:	18ab      	adds	r3, r5, r2
 800b8c8:	930c      	str	r3, [sp, #48]	; 0x30
 800b8ca:	18a4      	adds	r4, r4, r2
 800b8cc:	9b07      	ldr	r3, [sp, #28]
 800b8ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8d0:	191c      	adds	r4, r3, r4
 800b8d2:	002b      	movs	r3, r5
 800b8d4:	4295      	cmp	r5, r2
 800b8d6:	dd00      	ble.n	800b8da <_strtod_l+0x73e>
 800b8d8:	0013      	movs	r3, r2
 800b8da:	42a3      	cmp	r3, r4
 800b8dc:	dd00      	ble.n	800b8e0 <_strtod_l+0x744>
 800b8de:	0023      	movs	r3, r4
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	dd04      	ble.n	800b8ee <_strtod_l+0x752>
 800b8e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8e6:	1ae4      	subs	r4, r4, r3
 800b8e8:	1ad2      	subs	r2, r2, r3
 800b8ea:	920c      	str	r2, [sp, #48]	; 0x30
 800b8ec:	1aed      	subs	r5, r5, r3
 800b8ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	dd17      	ble.n	800b924 <_strtod_l+0x788>
 800b8f4:	001a      	movs	r2, r3
 800b8f6:	9906      	ldr	r1, [sp, #24]
 800b8f8:	9804      	ldr	r0, [sp, #16]
 800b8fa:	f7ff f983 	bl	800ac04 <__pow5mult>
 800b8fe:	9006      	str	r0, [sp, #24]
 800b900:	2800      	cmp	r0, #0
 800b902:	d100      	bne.n	800b906 <_strtod_l+0x76a>
 800b904:	e6ad      	b.n	800b662 <_strtod_l+0x4c6>
 800b906:	0001      	movs	r1, r0
 800b908:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b90a:	9804      	ldr	r0, [sp, #16]
 800b90c:	f7ff f8ca 	bl	800aaa4 <__multiply>
 800b910:	900e      	str	r0, [sp, #56]	; 0x38
 800b912:	2800      	cmp	r0, #0
 800b914:	d100      	bne.n	800b918 <_strtod_l+0x77c>
 800b916:	e6a4      	b.n	800b662 <_strtod_l+0x4c6>
 800b918:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b91a:	9804      	ldr	r0, [sp, #16]
 800b91c:	f7fe ffae 	bl	800a87c <_Bfree>
 800b920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b922:	931c      	str	r3, [sp, #112]	; 0x70
 800b924:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b926:	2b00      	cmp	r3, #0
 800b928:	dd00      	ble.n	800b92c <_strtod_l+0x790>
 800b92a:	e087      	b.n	800ba3c <_strtod_l+0x8a0>
 800b92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b92e:	2b00      	cmp	r3, #0
 800b930:	dd08      	ble.n	800b944 <_strtod_l+0x7a8>
 800b932:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b934:	9908      	ldr	r1, [sp, #32]
 800b936:	9804      	ldr	r0, [sp, #16]
 800b938:	f7ff f964 	bl	800ac04 <__pow5mult>
 800b93c:	9008      	str	r0, [sp, #32]
 800b93e:	2800      	cmp	r0, #0
 800b940:	d100      	bne.n	800b944 <_strtod_l+0x7a8>
 800b942:	e68e      	b.n	800b662 <_strtod_l+0x4c6>
 800b944:	2c00      	cmp	r4, #0
 800b946:	dd08      	ble.n	800b95a <_strtod_l+0x7be>
 800b948:	0022      	movs	r2, r4
 800b94a:	9908      	ldr	r1, [sp, #32]
 800b94c:	9804      	ldr	r0, [sp, #16]
 800b94e:	f7ff f9b5 	bl	800acbc <__lshift>
 800b952:	9008      	str	r0, [sp, #32]
 800b954:	2800      	cmp	r0, #0
 800b956:	d100      	bne.n	800b95a <_strtod_l+0x7be>
 800b958:	e683      	b.n	800b662 <_strtod_l+0x4c6>
 800b95a:	2d00      	cmp	r5, #0
 800b95c:	dd08      	ble.n	800b970 <_strtod_l+0x7d4>
 800b95e:	002a      	movs	r2, r5
 800b960:	9906      	ldr	r1, [sp, #24]
 800b962:	9804      	ldr	r0, [sp, #16]
 800b964:	f7ff f9aa 	bl	800acbc <__lshift>
 800b968:	9006      	str	r0, [sp, #24]
 800b96a:	2800      	cmp	r0, #0
 800b96c:	d100      	bne.n	800b970 <_strtod_l+0x7d4>
 800b96e:	e678      	b.n	800b662 <_strtod_l+0x4c6>
 800b970:	9a08      	ldr	r2, [sp, #32]
 800b972:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b974:	9804      	ldr	r0, [sp, #16]
 800b976:	f7ff fa2b 	bl	800add0 <__mdiff>
 800b97a:	9005      	str	r0, [sp, #20]
 800b97c:	2800      	cmp	r0, #0
 800b97e:	d100      	bne.n	800b982 <_strtod_l+0x7e6>
 800b980:	e66f      	b.n	800b662 <_strtod_l+0x4c6>
 800b982:	2200      	movs	r2, #0
 800b984:	68c3      	ldr	r3, [r0, #12]
 800b986:	9906      	ldr	r1, [sp, #24]
 800b988:	60c2      	str	r2, [r0, #12]
 800b98a:	930c      	str	r3, [sp, #48]	; 0x30
 800b98c:	f7ff fa04 	bl	800ad98 <__mcmp>
 800b990:	2800      	cmp	r0, #0
 800b992:	da5d      	bge.n	800ba50 <_strtod_l+0x8b4>
 800b994:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b996:	4333      	orrs	r3, r6
 800b998:	d000      	beq.n	800b99c <_strtod_l+0x800>
 800b99a:	e088      	b.n	800baae <_strtod_l+0x912>
 800b99c:	033b      	lsls	r3, r7, #12
 800b99e:	d000      	beq.n	800b9a2 <_strtod_l+0x806>
 800b9a0:	e085      	b.n	800baae <_strtod_l+0x912>
 800b9a2:	22d6      	movs	r2, #214	; 0xd6
 800b9a4:	4b46      	ldr	r3, [pc, #280]	; (800bac0 <_strtod_l+0x924>)
 800b9a6:	04d2      	lsls	r2, r2, #19
 800b9a8:	403b      	ands	r3, r7
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d97f      	bls.n	800baae <_strtod_l+0x912>
 800b9ae:	9b05      	ldr	r3, [sp, #20]
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d103      	bne.n	800b9be <_strtod_l+0x822>
 800b9b6:	9b05      	ldr	r3, [sp, #20]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	dd77      	ble.n	800baae <_strtod_l+0x912>
 800b9be:	9905      	ldr	r1, [sp, #20]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	9804      	ldr	r0, [sp, #16]
 800b9c4:	f7ff f97a 	bl	800acbc <__lshift>
 800b9c8:	9906      	ldr	r1, [sp, #24]
 800b9ca:	9005      	str	r0, [sp, #20]
 800b9cc:	f7ff f9e4 	bl	800ad98 <__mcmp>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	dd6c      	ble.n	800baae <_strtod_l+0x912>
 800b9d4:	9907      	ldr	r1, [sp, #28]
 800b9d6:	003b      	movs	r3, r7
 800b9d8:	4a39      	ldr	r2, [pc, #228]	; (800bac0 <_strtod_l+0x924>)
 800b9da:	2900      	cmp	r1, #0
 800b9dc:	d100      	bne.n	800b9e0 <_strtod_l+0x844>
 800b9de:	e094      	b.n	800bb0a <_strtod_l+0x96e>
 800b9e0:	0011      	movs	r1, r2
 800b9e2:	20d6      	movs	r0, #214	; 0xd6
 800b9e4:	4039      	ands	r1, r7
 800b9e6:	04c0      	lsls	r0, r0, #19
 800b9e8:	4281      	cmp	r1, r0
 800b9ea:	dd00      	ble.n	800b9ee <_strtod_l+0x852>
 800b9ec:	e08d      	b.n	800bb0a <_strtod_l+0x96e>
 800b9ee:	23dc      	movs	r3, #220	; 0xdc
 800b9f0:	049b      	lsls	r3, r3, #18
 800b9f2:	4299      	cmp	r1, r3
 800b9f4:	dc00      	bgt.n	800b9f8 <_strtod_l+0x85c>
 800b9f6:	e6a7      	b.n	800b748 <_strtod_l+0x5ac>
 800b9f8:	0030      	movs	r0, r6
 800b9fa:	0039      	movs	r1, r7
 800b9fc:	4b31      	ldr	r3, [pc, #196]	; (800bac4 <_strtod_l+0x928>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f7f5 fe36 	bl	8001670 <__aeabi_dmul>
 800ba04:	4b2e      	ldr	r3, [pc, #184]	; (800bac0 <_strtod_l+0x924>)
 800ba06:	0006      	movs	r6, r0
 800ba08:	000f      	movs	r7, r1
 800ba0a:	420b      	tst	r3, r1
 800ba0c:	d000      	beq.n	800ba10 <_strtod_l+0x874>
 800ba0e:	e631      	b.n	800b674 <_strtod_l+0x4d8>
 800ba10:	2322      	movs	r3, #34	; 0x22
 800ba12:	9a04      	ldr	r2, [sp, #16]
 800ba14:	6013      	str	r3, [r2, #0]
 800ba16:	e62d      	b.n	800b674 <_strtod_l+0x4d8>
 800ba18:	234b      	movs	r3, #75	; 0x4b
 800ba1a:	1a9a      	subs	r2, r3, r2
 800ba1c:	3b4c      	subs	r3, #76	; 0x4c
 800ba1e:	4093      	lsls	r3, r2
 800ba20:	4019      	ands	r1, r3
 800ba22:	000f      	movs	r7, r1
 800ba24:	e6e3      	b.n	800b7ee <_strtod_l+0x652>
 800ba26:	2201      	movs	r2, #1
 800ba28:	4252      	negs	r2, r2
 800ba2a:	409a      	lsls	r2, r3
 800ba2c:	4016      	ands	r6, r2
 800ba2e:	e6de      	b.n	800b7ee <_strtod_l+0x652>
 800ba30:	4925      	ldr	r1, [pc, #148]	; (800bac8 <_strtod_l+0x92c>)
 800ba32:	1acb      	subs	r3, r1, r3
 800ba34:	0001      	movs	r1, r0
 800ba36:	4099      	lsls	r1, r3
 800ba38:	9114      	str	r1, [sp, #80]	; 0x50
 800ba3a:	e743      	b.n	800b8c4 <_strtod_l+0x728>
 800ba3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ba40:	9804      	ldr	r0, [sp, #16]
 800ba42:	f7ff f93b 	bl	800acbc <__lshift>
 800ba46:	901c      	str	r0, [sp, #112]	; 0x70
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d000      	beq.n	800ba4e <_strtod_l+0x8b2>
 800ba4c:	e76e      	b.n	800b92c <_strtod_l+0x790>
 800ba4e:	e608      	b.n	800b662 <_strtod_l+0x4c6>
 800ba50:	970e      	str	r7, [sp, #56]	; 0x38
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d177      	bne.n	800bb46 <_strtod_l+0x9aa>
 800ba56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba58:	033b      	lsls	r3, r7, #12
 800ba5a:	0b1b      	lsrs	r3, r3, #12
 800ba5c:	2a00      	cmp	r2, #0
 800ba5e:	d039      	beq.n	800bad4 <_strtod_l+0x938>
 800ba60:	4a1a      	ldr	r2, [pc, #104]	; (800bacc <_strtod_l+0x930>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d139      	bne.n	800bada <_strtod_l+0x93e>
 800ba66:	2101      	movs	r1, #1
 800ba68:	9b07      	ldr	r3, [sp, #28]
 800ba6a:	4249      	negs	r1, r1
 800ba6c:	0032      	movs	r2, r6
 800ba6e:	0008      	movs	r0, r1
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00b      	beq.n	800ba8c <_strtod_l+0x8f0>
 800ba74:	24d4      	movs	r4, #212	; 0xd4
 800ba76:	4b12      	ldr	r3, [pc, #72]	; (800bac0 <_strtod_l+0x924>)
 800ba78:	0008      	movs	r0, r1
 800ba7a:	403b      	ands	r3, r7
 800ba7c:	04e4      	lsls	r4, r4, #19
 800ba7e:	42a3      	cmp	r3, r4
 800ba80:	d804      	bhi.n	800ba8c <_strtod_l+0x8f0>
 800ba82:	306c      	adds	r0, #108	; 0x6c
 800ba84:	0d1b      	lsrs	r3, r3, #20
 800ba86:	1ac3      	subs	r3, r0, r3
 800ba88:	4099      	lsls	r1, r3
 800ba8a:	0008      	movs	r0, r1
 800ba8c:	4282      	cmp	r2, r0
 800ba8e:	d124      	bne.n	800bada <_strtod_l+0x93e>
 800ba90:	4b0f      	ldr	r3, [pc, #60]	; (800bad0 <_strtod_l+0x934>)
 800ba92:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ba94:	4299      	cmp	r1, r3
 800ba96:	d102      	bne.n	800ba9e <_strtod_l+0x902>
 800ba98:	3201      	adds	r2, #1
 800ba9a:	d100      	bne.n	800ba9e <_strtod_l+0x902>
 800ba9c:	e5e1      	b.n	800b662 <_strtod_l+0x4c6>
 800ba9e:	4b08      	ldr	r3, [pc, #32]	; (800bac0 <_strtod_l+0x924>)
 800baa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800baa2:	2600      	movs	r6, #0
 800baa4:	401a      	ands	r2, r3
 800baa6:	0013      	movs	r3, r2
 800baa8:	2280      	movs	r2, #128	; 0x80
 800baaa:	0352      	lsls	r2, r2, #13
 800baac:	189f      	adds	r7, r3, r2
 800baae:	9b07      	ldr	r3, [sp, #28]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1a1      	bne.n	800b9f8 <_strtod_l+0x85c>
 800bab4:	e5de      	b.n	800b674 <_strtod_l+0x4d8>
 800bab6:	46c0      	nop			; (mov r8, r8)
 800bab8:	0800d458 	.word	0x0800d458
 800babc:	fffffc02 	.word	0xfffffc02
 800bac0:	7ff00000 	.word	0x7ff00000
 800bac4:	39500000 	.word	0x39500000
 800bac8:	fffffbe2 	.word	0xfffffbe2
 800bacc:	000fffff 	.word	0x000fffff
 800bad0:	7fefffff 	.word	0x7fefffff
 800bad4:	4333      	orrs	r3, r6
 800bad6:	d100      	bne.n	800bada <_strtod_l+0x93e>
 800bad8:	e77c      	b.n	800b9d4 <_strtod_l+0x838>
 800bada:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800badc:	2b00      	cmp	r3, #0
 800bade:	d01d      	beq.n	800bb1c <_strtod_l+0x980>
 800bae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bae2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bae4:	4213      	tst	r3, r2
 800bae6:	d0e2      	beq.n	800baae <_strtod_l+0x912>
 800bae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baea:	0030      	movs	r0, r6
 800baec:	0039      	movs	r1, r7
 800baee:	9a07      	ldr	r2, [sp, #28]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d017      	beq.n	800bb24 <_strtod_l+0x988>
 800baf4:	f7ff fb3a 	bl	800b16c <sulp>
 800baf8:	0002      	movs	r2, r0
 800bafa:	000b      	movs	r3, r1
 800bafc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bafe:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bb00:	f7f4 fe5c 	bl	80007bc <__aeabi_dadd>
 800bb04:	0006      	movs	r6, r0
 800bb06:	000f      	movs	r7, r1
 800bb08:	e7d1      	b.n	800baae <_strtod_l+0x912>
 800bb0a:	2601      	movs	r6, #1
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	4a98      	ldr	r2, [pc, #608]	; (800bd70 <_strtod_l+0xbd4>)
 800bb10:	4276      	negs	r6, r6
 800bb12:	189b      	adds	r3, r3, r2
 800bb14:	4a97      	ldr	r2, [pc, #604]	; (800bd74 <_strtod_l+0xbd8>)
 800bb16:	431a      	orrs	r2, r3
 800bb18:	0017      	movs	r7, r2
 800bb1a:	e7c8      	b.n	800baae <_strtod_l+0x912>
 800bb1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb1e:	4233      	tst	r3, r6
 800bb20:	d0c5      	beq.n	800baae <_strtod_l+0x912>
 800bb22:	e7e1      	b.n	800bae8 <_strtod_l+0x94c>
 800bb24:	f7ff fb22 	bl	800b16c <sulp>
 800bb28:	0002      	movs	r2, r0
 800bb2a:	000b      	movs	r3, r1
 800bb2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bb2e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bb30:	f7f6 f860 	bl	8001bf4 <__aeabi_dsub>
 800bb34:	2200      	movs	r2, #0
 800bb36:	2300      	movs	r3, #0
 800bb38:	0006      	movs	r6, r0
 800bb3a:	000f      	movs	r7, r1
 800bb3c:	f7f4 fc86 	bl	800044c <__aeabi_dcmpeq>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d0b4      	beq.n	800baae <_strtod_l+0x912>
 800bb44:	e600      	b.n	800b748 <_strtod_l+0x5ac>
 800bb46:	9906      	ldr	r1, [sp, #24]
 800bb48:	9805      	ldr	r0, [sp, #20]
 800bb4a:	f7ff faa1 	bl	800b090 <__ratio>
 800bb4e:	2380      	movs	r3, #128	; 0x80
 800bb50:	2200      	movs	r2, #0
 800bb52:	05db      	lsls	r3, r3, #23
 800bb54:	0004      	movs	r4, r0
 800bb56:	000d      	movs	r5, r1
 800bb58:	f7f4 fc88 	bl	800046c <__aeabi_dcmple>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d06d      	beq.n	800bc3c <_strtod_l+0xaa0>
 800bb60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d000      	beq.n	800bb68 <_strtod_l+0x9cc>
 800bb66:	e07e      	b.n	800bc66 <_strtod_l+0xaca>
 800bb68:	2e00      	cmp	r6, #0
 800bb6a:	d158      	bne.n	800bc1e <_strtod_l+0xa82>
 800bb6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb6e:	031b      	lsls	r3, r3, #12
 800bb70:	d000      	beq.n	800bb74 <_strtod_l+0x9d8>
 800bb72:	e07f      	b.n	800bc74 <_strtod_l+0xad8>
 800bb74:	2200      	movs	r2, #0
 800bb76:	0020      	movs	r0, r4
 800bb78:	0029      	movs	r1, r5
 800bb7a:	4b7f      	ldr	r3, [pc, #508]	; (800bd78 <_strtod_l+0xbdc>)
 800bb7c:	f7f4 fc6c 	bl	8000458 <__aeabi_dcmplt>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d158      	bne.n	800bc36 <_strtod_l+0xa9a>
 800bb84:	0020      	movs	r0, r4
 800bb86:	0029      	movs	r1, r5
 800bb88:	2200      	movs	r2, #0
 800bb8a:	4b7c      	ldr	r3, [pc, #496]	; (800bd7c <_strtod_l+0xbe0>)
 800bb8c:	f7f5 fd70 	bl	8001670 <__aeabi_dmul>
 800bb90:	0004      	movs	r4, r0
 800bb92:	000d      	movs	r5, r1
 800bb94:	2380      	movs	r3, #128	; 0x80
 800bb96:	061b      	lsls	r3, r3, #24
 800bb98:	940a      	str	r4, [sp, #40]	; 0x28
 800bb9a:	18eb      	adds	r3, r5, r3
 800bb9c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bba2:	9212      	str	r2, [sp, #72]	; 0x48
 800bba4:	9313      	str	r3, [sp, #76]	; 0x4c
 800bba6:	4a76      	ldr	r2, [pc, #472]	; (800bd80 <_strtod_l+0xbe4>)
 800bba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbaa:	4013      	ands	r3, r2
 800bbac:	9314      	str	r3, [sp, #80]	; 0x50
 800bbae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bbb0:	4b74      	ldr	r3, [pc, #464]	; (800bd84 <_strtod_l+0xbe8>)
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d000      	beq.n	800bbb8 <_strtod_l+0xa1c>
 800bbb6:	e091      	b.n	800bcdc <_strtod_l+0xb40>
 800bbb8:	4a73      	ldr	r2, [pc, #460]	; (800bd88 <_strtod_l+0xbec>)
 800bbba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbbc:	4694      	mov	ip, r2
 800bbbe:	4463      	add	r3, ip
 800bbc0:	001f      	movs	r7, r3
 800bbc2:	0030      	movs	r0, r6
 800bbc4:	0019      	movs	r1, r3
 800bbc6:	f7ff f99b 	bl	800af00 <__ulp>
 800bbca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbce:	f7f5 fd4f 	bl	8001670 <__aeabi_dmul>
 800bbd2:	0032      	movs	r2, r6
 800bbd4:	003b      	movs	r3, r7
 800bbd6:	f7f4 fdf1 	bl	80007bc <__aeabi_dadd>
 800bbda:	4a69      	ldr	r2, [pc, #420]	; (800bd80 <_strtod_l+0xbe4>)
 800bbdc:	4b6b      	ldr	r3, [pc, #428]	; (800bd8c <_strtod_l+0xbf0>)
 800bbde:	0006      	movs	r6, r0
 800bbe0:	400a      	ands	r2, r1
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d949      	bls.n	800bc7a <_strtod_l+0xade>
 800bbe6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bbe8:	4b69      	ldr	r3, [pc, #420]	; (800bd90 <_strtod_l+0xbf4>)
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d103      	bne.n	800bbf6 <_strtod_l+0xa5a>
 800bbee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	d100      	bne.n	800bbf6 <_strtod_l+0xa5a>
 800bbf4:	e535      	b.n	800b662 <_strtod_l+0x4c6>
 800bbf6:	2601      	movs	r6, #1
 800bbf8:	4f65      	ldr	r7, [pc, #404]	; (800bd90 <_strtod_l+0xbf4>)
 800bbfa:	4276      	negs	r6, r6
 800bbfc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bbfe:	9804      	ldr	r0, [sp, #16]
 800bc00:	f7fe fe3c 	bl	800a87c <_Bfree>
 800bc04:	9908      	ldr	r1, [sp, #32]
 800bc06:	9804      	ldr	r0, [sp, #16]
 800bc08:	f7fe fe38 	bl	800a87c <_Bfree>
 800bc0c:	9906      	ldr	r1, [sp, #24]
 800bc0e:	9804      	ldr	r0, [sp, #16]
 800bc10:	f7fe fe34 	bl	800a87c <_Bfree>
 800bc14:	9905      	ldr	r1, [sp, #20]
 800bc16:	9804      	ldr	r0, [sp, #16]
 800bc18:	f7fe fe30 	bl	800a87c <_Bfree>
 800bc1c:	e60b      	b.n	800b836 <_strtod_l+0x69a>
 800bc1e:	2e01      	cmp	r6, #1
 800bc20:	d103      	bne.n	800bc2a <_strtod_l+0xa8e>
 800bc22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d100      	bne.n	800bc2a <_strtod_l+0xa8e>
 800bc28:	e58e      	b.n	800b748 <_strtod_l+0x5ac>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	4c59      	ldr	r4, [pc, #356]	; (800bd94 <_strtod_l+0xbf8>)
 800bc2e:	930a      	str	r3, [sp, #40]	; 0x28
 800bc30:	940b      	str	r4, [sp, #44]	; 0x2c
 800bc32:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bc34:	e01c      	b.n	800bc70 <_strtod_l+0xad4>
 800bc36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bc38:	4d50      	ldr	r5, [pc, #320]	; (800bd7c <_strtod_l+0xbe0>)
 800bc3a:	e7ab      	b.n	800bb94 <_strtod_l+0x9f8>
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	0020      	movs	r0, r4
 800bc40:	0029      	movs	r1, r5
 800bc42:	4b4e      	ldr	r3, [pc, #312]	; (800bd7c <_strtod_l+0xbe0>)
 800bc44:	f7f5 fd14 	bl	8001670 <__aeabi_dmul>
 800bc48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc4a:	0004      	movs	r4, r0
 800bc4c:	000b      	movs	r3, r1
 800bc4e:	000d      	movs	r5, r1
 800bc50:	2a00      	cmp	r2, #0
 800bc52:	d104      	bne.n	800bc5e <_strtod_l+0xac2>
 800bc54:	2280      	movs	r2, #128	; 0x80
 800bc56:	0612      	lsls	r2, r2, #24
 800bc58:	900a      	str	r0, [sp, #40]	; 0x28
 800bc5a:	188b      	adds	r3, r1, r2
 800bc5c:	e79e      	b.n	800bb9c <_strtod_l+0xa00>
 800bc5e:	0002      	movs	r2, r0
 800bc60:	920a      	str	r2, [sp, #40]	; 0x28
 800bc62:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc64:	e79b      	b.n	800bb9e <_strtod_l+0xa02>
 800bc66:	2300      	movs	r3, #0
 800bc68:	4c43      	ldr	r4, [pc, #268]	; (800bd78 <_strtod_l+0xbdc>)
 800bc6a:	930a      	str	r3, [sp, #40]	; 0x28
 800bc6c:	940b      	str	r4, [sp, #44]	; 0x2c
 800bc6e:	2400      	movs	r4, #0
 800bc70:	4d41      	ldr	r5, [pc, #260]	; (800bd78 <_strtod_l+0xbdc>)
 800bc72:	e794      	b.n	800bb9e <_strtod_l+0xa02>
 800bc74:	2300      	movs	r3, #0
 800bc76:	4c47      	ldr	r4, [pc, #284]	; (800bd94 <_strtod_l+0xbf8>)
 800bc78:	e7f7      	b.n	800bc6a <_strtod_l+0xace>
 800bc7a:	23d4      	movs	r3, #212	; 0xd4
 800bc7c:	049b      	lsls	r3, r3, #18
 800bc7e:	18cf      	adds	r7, r1, r3
 800bc80:	9b07      	ldr	r3, [sp, #28]
 800bc82:	970e      	str	r7, [sp, #56]	; 0x38
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1b9      	bne.n	800bbfc <_strtod_l+0xa60>
 800bc88:	4b3d      	ldr	r3, [pc, #244]	; (800bd80 <_strtod_l+0xbe4>)
 800bc8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc8c:	403b      	ands	r3, r7
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d1b4      	bne.n	800bbfc <_strtod_l+0xa60>
 800bc92:	0020      	movs	r0, r4
 800bc94:	0029      	movs	r1, r5
 800bc96:	f7f4 fc73 	bl	8000580 <__aeabi_d2lz>
 800bc9a:	f7f4 fcad 	bl	80005f8 <__aeabi_l2d>
 800bc9e:	0002      	movs	r2, r0
 800bca0:	000b      	movs	r3, r1
 800bca2:	0020      	movs	r0, r4
 800bca4:	0029      	movs	r1, r5
 800bca6:	f7f5 ffa5 	bl	8001bf4 <__aeabi_dsub>
 800bcaa:	033b      	lsls	r3, r7, #12
 800bcac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcae:	0b1b      	lsrs	r3, r3, #12
 800bcb0:	4333      	orrs	r3, r6
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	0004      	movs	r4, r0
 800bcb6:	000d      	movs	r5, r1
 800bcb8:	4a37      	ldr	r2, [pc, #220]	; (800bd98 <_strtod_l+0xbfc>)
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d054      	beq.n	800bd68 <_strtod_l+0xbcc>
 800bcbe:	4b37      	ldr	r3, [pc, #220]	; (800bd9c <_strtod_l+0xc00>)
 800bcc0:	f7f4 fbca 	bl	8000458 <__aeabi_dcmplt>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d000      	beq.n	800bcca <_strtod_l+0xb2e>
 800bcc8:	e4d4      	b.n	800b674 <_strtod_l+0x4d8>
 800bcca:	0020      	movs	r0, r4
 800bccc:	0029      	movs	r1, r5
 800bcce:	4a34      	ldr	r2, [pc, #208]	; (800bda0 <_strtod_l+0xc04>)
 800bcd0:	4b2a      	ldr	r3, [pc, #168]	; (800bd7c <_strtod_l+0xbe0>)
 800bcd2:	f7f4 fbd5 	bl	8000480 <__aeabi_dcmpgt>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d090      	beq.n	800bbfc <_strtod_l+0xa60>
 800bcda:	e4cb      	b.n	800b674 <_strtod_l+0x4d8>
 800bcdc:	9b07      	ldr	r3, [sp, #28]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d02b      	beq.n	800bd3a <_strtod_l+0xb9e>
 800bce2:	23d4      	movs	r3, #212	; 0xd4
 800bce4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bce6:	04db      	lsls	r3, r3, #19
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d826      	bhi.n	800bd3a <_strtod_l+0xb9e>
 800bcec:	0020      	movs	r0, r4
 800bcee:	0029      	movs	r1, r5
 800bcf0:	4a2c      	ldr	r2, [pc, #176]	; (800bda4 <_strtod_l+0xc08>)
 800bcf2:	4b2d      	ldr	r3, [pc, #180]	; (800bda8 <_strtod_l+0xc0c>)
 800bcf4:	f7f4 fbba 	bl	800046c <__aeabi_dcmple>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d017      	beq.n	800bd2c <_strtod_l+0xb90>
 800bcfc:	0020      	movs	r0, r4
 800bcfe:	0029      	movs	r1, r5
 800bd00:	f7f4 fc20 	bl	8000544 <__aeabi_d2uiz>
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d100      	bne.n	800bd0a <_strtod_l+0xb6e>
 800bd08:	3001      	adds	r0, #1
 800bd0a:	f7f6 fb79 	bl	8002400 <__aeabi_ui2d>
 800bd0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd10:	0004      	movs	r4, r0
 800bd12:	000b      	movs	r3, r1
 800bd14:	000d      	movs	r5, r1
 800bd16:	2a00      	cmp	r2, #0
 800bd18:	d122      	bne.n	800bd60 <_strtod_l+0xbc4>
 800bd1a:	2280      	movs	r2, #128	; 0x80
 800bd1c:	0612      	lsls	r2, r2, #24
 800bd1e:	188b      	adds	r3, r1, r2
 800bd20:	9016      	str	r0, [sp, #88]	; 0x58
 800bd22:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bd26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd28:	9212      	str	r2, [sp, #72]	; 0x48
 800bd2a:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd2c:	22d6      	movs	r2, #214	; 0xd6
 800bd2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd30:	04d2      	lsls	r2, r2, #19
 800bd32:	189b      	adds	r3, r3, r2
 800bd34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd36:	1a9b      	subs	r3, r3, r2
 800bd38:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd3a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bd3c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bd3e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800bd40:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800bd42:	f7ff f8dd 	bl	800af00 <__ulp>
 800bd46:	0002      	movs	r2, r0
 800bd48:	000b      	movs	r3, r1
 800bd4a:	0030      	movs	r0, r6
 800bd4c:	0039      	movs	r1, r7
 800bd4e:	f7f5 fc8f 	bl	8001670 <__aeabi_dmul>
 800bd52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd56:	f7f4 fd31 	bl	80007bc <__aeabi_dadd>
 800bd5a:	0006      	movs	r6, r0
 800bd5c:	000f      	movs	r7, r1
 800bd5e:	e78f      	b.n	800bc80 <_strtod_l+0xae4>
 800bd60:	0002      	movs	r2, r0
 800bd62:	9216      	str	r2, [sp, #88]	; 0x58
 800bd64:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd66:	e7dd      	b.n	800bd24 <_strtod_l+0xb88>
 800bd68:	4b10      	ldr	r3, [pc, #64]	; (800bdac <_strtod_l+0xc10>)
 800bd6a:	f7f4 fb75 	bl	8000458 <__aeabi_dcmplt>
 800bd6e:	e7b2      	b.n	800bcd6 <_strtod_l+0xb3a>
 800bd70:	fff00000 	.word	0xfff00000
 800bd74:	000fffff 	.word	0x000fffff
 800bd78:	3ff00000 	.word	0x3ff00000
 800bd7c:	3fe00000 	.word	0x3fe00000
 800bd80:	7ff00000 	.word	0x7ff00000
 800bd84:	7fe00000 	.word	0x7fe00000
 800bd88:	fcb00000 	.word	0xfcb00000
 800bd8c:	7c9fffff 	.word	0x7c9fffff
 800bd90:	7fefffff 	.word	0x7fefffff
 800bd94:	bff00000 	.word	0xbff00000
 800bd98:	94a03595 	.word	0x94a03595
 800bd9c:	3fdfffff 	.word	0x3fdfffff
 800bda0:	35afe535 	.word	0x35afe535
 800bda4:	ffc00000 	.word	0xffc00000
 800bda8:	41dfffff 	.word	0x41dfffff
 800bdac:	3fcfffff 	.word	0x3fcfffff

0800bdb0 <_strtod_r>:
 800bdb0:	b510      	push	{r4, lr}
 800bdb2:	4b02      	ldr	r3, [pc, #8]	; (800bdbc <_strtod_r+0xc>)
 800bdb4:	f7ff f9f2 	bl	800b19c <_strtod_l>
 800bdb8:	bd10      	pop	{r4, pc}
 800bdba:	46c0      	nop			; (mov r8, r8)
 800bdbc:	20000068 	.word	0x20000068

0800bdc0 <_strtol_l.constprop.0>:
 800bdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdc2:	b087      	sub	sp, #28
 800bdc4:	001e      	movs	r6, r3
 800bdc6:	9005      	str	r0, [sp, #20]
 800bdc8:	9101      	str	r1, [sp, #4]
 800bdca:	9202      	str	r2, [sp, #8]
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d048      	beq.n	800be62 <_strtol_l.constprop.0+0xa2>
 800bdd0:	000b      	movs	r3, r1
 800bdd2:	2e24      	cmp	r6, #36	; 0x24
 800bdd4:	d845      	bhi.n	800be62 <_strtol_l.constprop.0+0xa2>
 800bdd6:	4a3b      	ldr	r2, [pc, #236]	; (800bec4 <_strtol_l.constprop.0+0x104>)
 800bdd8:	2108      	movs	r1, #8
 800bdda:	4694      	mov	ip, r2
 800bddc:	001a      	movs	r2, r3
 800bdde:	4660      	mov	r0, ip
 800bde0:	7814      	ldrb	r4, [r2, #0]
 800bde2:	3301      	adds	r3, #1
 800bde4:	5d00      	ldrb	r0, [r0, r4]
 800bde6:	001d      	movs	r5, r3
 800bde8:	0007      	movs	r7, r0
 800bdea:	400f      	ands	r7, r1
 800bdec:	4208      	tst	r0, r1
 800bdee:	d1f5      	bne.n	800bddc <_strtol_l.constprop.0+0x1c>
 800bdf0:	2c2d      	cmp	r4, #45	; 0x2d
 800bdf2:	d13d      	bne.n	800be70 <_strtol_l.constprop.0+0xb0>
 800bdf4:	2701      	movs	r7, #1
 800bdf6:	781c      	ldrb	r4, [r3, #0]
 800bdf8:	1c95      	adds	r5, r2, #2
 800bdfa:	2e00      	cmp	r6, #0
 800bdfc:	d05e      	beq.n	800bebc <_strtol_l.constprop.0+0xfc>
 800bdfe:	2e10      	cmp	r6, #16
 800be00:	d109      	bne.n	800be16 <_strtol_l.constprop.0+0x56>
 800be02:	2c30      	cmp	r4, #48	; 0x30
 800be04:	d107      	bne.n	800be16 <_strtol_l.constprop.0+0x56>
 800be06:	2220      	movs	r2, #32
 800be08:	782b      	ldrb	r3, [r5, #0]
 800be0a:	4393      	bics	r3, r2
 800be0c:	2b58      	cmp	r3, #88	; 0x58
 800be0e:	d150      	bne.n	800beb2 <_strtol_l.constprop.0+0xf2>
 800be10:	2610      	movs	r6, #16
 800be12:	786c      	ldrb	r4, [r5, #1]
 800be14:	3502      	adds	r5, #2
 800be16:	4b2c      	ldr	r3, [pc, #176]	; (800bec8 <_strtol_l.constprop.0+0x108>)
 800be18:	0031      	movs	r1, r6
 800be1a:	18fb      	adds	r3, r7, r3
 800be1c:	0018      	movs	r0, r3
 800be1e:	9303      	str	r3, [sp, #12]
 800be20:	f7f4 fa14 	bl	800024c <__aeabi_uidivmod>
 800be24:	2200      	movs	r2, #0
 800be26:	9104      	str	r1, [sp, #16]
 800be28:	2101      	movs	r1, #1
 800be2a:	4684      	mov	ip, r0
 800be2c:	0010      	movs	r0, r2
 800be2e:	4249      	negs	r1, r1
 800be30:	0023      	movs	r3, r4
 800be32:	3b30      	subs	r3, #48	; 0x30
 800be34:	2b09      	cmp	r3, #9
 800be36:	d903      	bls.n	800be40 <_strtol_l.constprop.0+0x80>
 800be38:	3b11      	subs	r3, #17
 800be3a:	2b19      	cmp	r3, #25
 800be3c:	d81d      	bhi.n	800be7a <_strtol_l.constprop.0+0xba>
 800be3e:	330a      	adds	r3, #10
 800be40:	429e      	cmp	r6, r3
 800be42:	dd1e      	ble.n	800be82 <_strtol_l.constprop.0+0xc2>
 800be44:	1c54      	adds	r4, r2, #1
 800be46:	d009      	beq.n	800be5c <_strtol_l.constprop.0+0x9c>
 800be48:	000a      	movs	r2, r1
 800be4a:	4584      	cmp	ip, r0
 800be4c:	d306      	bcc.n	800be5c <_strtol_l.constprop.0+0x9c>
 800be4e:	d102      	bne.n	800be56 <_strtol_l.constprop.0+0x96>
 800be50:	9c04      	ldr	r4, [sp, #16]
 800be52:	429c      	cmp	r4, r3
 800be54:	db02      	blt.n	800be5c <_strtol_l.constprop.0+0x9c>
 800be56:	2201      	movs	r2, #1
 800be58:	4370      	muls	r0, r6
 800be5a:	1818      	adds	r0, r3, r0
 800be5c:	782c      	ldrb	r4, [r5, #0]
 800be5e:	3501      	adds	r5, #1
 800be60:	e7e6      	b.n	800be30 <_strtol_l.constprop.0+0x70>
 800be62:	f7fd fce5 	bl	8009830 <__errno>
 800be66:	2316      	movs	r3, #22
 800be68:	6003      	str	r3, [r0, #0]
 800be6a:	2000      	movs	r0, #0
 800be6c:	b007      	add	sp, #28
 800be6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be70:	2c2b      	cmp	r4, #43	; 0x2b
 800be72:	d1c2      	bne.n	800bdfa <_strtol_l.constprop.0+0x3a>
 800be74:	781c      	ldrb	r4, [r3, #0]
 800be76:	1c95      	adds	r5, r2, #2
 800be78:	e7bf      	b.n	800bdfa <_strtol_l.constprop.0+0x3a>
 800be7a:	0023      	movs	r3, r4
 800be7c:	3b61      	subs	r3, #97	; 0x61
 800be7e:	2b19      	cmp	r3, #25
 800be80:	d9dd      	bls.n	800be3e <_strtol_l.constprop.0+0x7e>
 800be82:	1c53      	adds	r3, r2, #1
 800be84:	d109      	bne.n	800be9a <_strtol_l.constprop.0+0xda>
 800be86:	2322      	movs	r3, #34	; 0x22
 800be88:	9a05      	ldr	r2, [sp, #20]
 800be8a:	9803      	ldr	r0, [sp, #12]
 800be8c:	6013      	str	r3, [r2, #0]
 800be8e:	9b02      	ldr	r3, [sp, #8]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d0eb      	beq.n	800be6c <_strtol_l.constprop.0+0xac>
 800be94:	1e6b      	subs	r3, r5, #1
 800be96:	9301      	str	r3, [sp, #4]
 800be98:	e007      	b.n	800beaa <_strtol_l.constprop.0+0xea>
 800be9a:	2f00      	cmp	r7, #0
 800be9c:	d000      	beq.n	800bea0 <_strtol_l.constprop.0+0xe0>
 800be9e:	4240      	negs	r0, r0
 800bea0:	9b02      	ldr	r3, [sp, #8]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d0e2      	beq.n	800be6c <_strtol_l.constprop.0+0xac>
 800bea6:	2a00      	cmp	r2, #0
 800bea8:	d1f4      	bne.n	800be94 <_strtol_l.constprop.0+0xd4>
 800beaa:	9b02      	ldr	r3, [sp, #8]
 800beac:	9a01      	ldr	r2, [sp, #4]
 800beae:	601a      	str	r2, [r3, #0]
 800beb0:	e7dc      	b.n	800be6c <_strtol_l.constprop.0+0xac>
 800beb2:	2430      	movs	r4, #48	; 0x30
 800beb4:	2e00      	cmp	r6, #0
 800beb6:	d1ae      	bne.n	800be16 <_strtol_l.constprop.0+0x56>
 800beb8:	3608      	adds	r6, #8
 800beba:	e7ac      	b.n	800be16 <_strtol_l.constprop.0+0x56>
 800bebc:	2c30      	cmp	r4, #48	; 0x30
 800bebe:	d0a2      	beq.n	800be06 <_strtol_l.constprop.0+0x46>
 800bec0:	260a      	movs	r6, #10
 800bec2:	e7a8      	b.n	800be16 <_strtol_l.constprop.0+0x56>
 800bec4:	0800d481 	.word	0x0800d481
 800bec8:	7fffffff 	.word	0x7fffffff

0800becc <_strtol_r>:
 800becc:	b510      	push	{r4, lr}
 800bece:	f7ff ff77 	bl	800bdc0 <_strtol_l.constprop.0>
 800bed2:	bd10      	pop	{r4, pc}

0800bed4 <__ssputs_r>:
 800bed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bed6:	b085      	sub	sp, #20
 800bed8:	9301      	str	r3, [sp, #4]
 800beda:	9203      	str	r2, [sp, #12]
 800bedc:	688e      	ldr	r6, [r1, #8]
 800bede:	9a01      	ldr	r2, [sp, #4]
 800bee0:	0007      	movs	r7, r0
 800bee2:	000c      	movs	r4, r1
 800bee4:	680b      	ldr	r3, [r1, #0]
 800bee6:	4296      	cmp	r6, r2
 800bee8:	d831      	bhi.n	800bf4e <__ssputs_r+0x7a>
 800beea:	898a      	ldrh	r2, [r1, #12]
 800beec:	2190      	movs	r1, #144	; 0x90
 800beee:	00c9      	lsls	r1, r1, #3
 800bef0:	420a      	tst	r2, r1
 800bef2:	d029      	beq.n	800bf48 <__ssputs_r+0x74>
 800bef4:	2003      	movs	r0, #3
 800bef6:	6921      	ldr	r1, [r4, #16]
 800bef8:	1a5b      	subs	r3, r3, r1
 800befa:	9302      	str	r3, [sp, #8]
 800befc:	6963      	ldr	r3, [r4, #20]
 800befe:	4343      	muls	r3, r0
 800bf00:	0fdd      	lsrs	r5, r3, #31
 800bf02:	18ed      	adds	r5, r5, r3
 800bf04:	9b01      	ldr	r3, [sp, #4]
 800bf06:	9802      	ldr	r0, [sp, #8]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	181b      	adds	r3, r3, r0
 800bf0c:	106d      	asrs	r5, r5, #1
 800bf0e:	42ab      	cmp	r3, r5
 800bf10:	d900      	bls.n	800bf14 <__ssputs_r+0x40>
 800bf12:	001d      	movs	r5, r3
 800bf14:	0552      	lsls	r2, r2, #21
 800bf16:	d529      	bpl.n	800bf6c <__ssputs_r+0x98>
 800bf18:	0029      	movs	r1, r5
 800bf1a:	0038      	movs	r0, r7
 800bf1c:	f7fe fbd8 	bl	800a6d0 <_malloc_r>
 800bf20:	1e06      	subs	r6, r0, #0
 800bf22:	d02d      	beq.n	800bf80 <__ssputs_r+0xac>
 800bf24:	9a02      	ldr	r2, [sp, #8]
 800bf26:	6921      	ldr	r1, [r4, #16]
 800bf28:	f000 fa22 	bl	800c370 <memcpy>
 800bf2c:	89a2      	ldrh	r2, [r4, #12]
 800bf2e:	4b19      	ldr	r3, [pc, #100]	; (800bf94 <__ssputs_r+0xc0>)
 800bf30:	401a      	ands	r2, r3
 800bf32:	2380      	movs	r3, #128	; 0x80
 800bf34:	4313      	orrs	r3, r2
 800bf36:	81a3      	strh	r3, [r4, #12]
 800bf38:	9b02      	ldr	r3, [sp, #8]
 800bf3a:	6126      	str	r6, [r4, #16]
 800bf3c:	18f6      	adds	r6, r6, r3
 800bf3e:	6026      	str	r6, [r4, #0]
 800bf40:	6165      	str	r5, [r4, #20]
 800bf42:	9e01      	ldr	r6, [sp, #4]
 800bf44:	1aed      	subs	r5, r5, r3
 800bf46:	60a5      	str	r5, [r4, #8]
 800bf48:	9b01      	ldr	r3, [sp, #4]
 800bf4a:	429e      	cmp	r6, r3
 800bf4c:	d900      	bls.n	800bf50 <__ssputs_r+0x7c>
 800bf4e:	9e01      	ldr	r6, [sp, #4]
 800bf50:	0032      	movs	r2, r6
 800bf52:	9903      	ldr	r1, [sp, #12]
 800bf54:	6820      	ldr	r0, [r4, #0]
 800bf56:	f000 f9d4 	bl	800c302 <memmove>
 800bf5a:	2000      	movs	r0, #0
 800bf5c:	68a3      	ldr	r3, [r4, #8]
 800bf5e:	1b9b      	subs	r3, r3, r6
 800bf60:	60a3      	str	r3, [r4, #8]
 800bf62:	6823      	ldr	r3, [r4, #0]
 800bf64:	199b      	adds	r3, r3, r6
 800bf66:	6023      	str	r3, [r4, #0]
 800bf68:	b005      	add	sp, #20
 800bf6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf6c:	002a      	movs	r2, r5
 800bf6e:	0038      	movs	r0, r7
 800bf70:	f000 fdc8 	bl	800cb04 <_realloc_r>
 800bf74:	1e06      	subs	r6, r0, #0
 800bf76:	d1df      	bne.n	800bf38 <__ssputs_r+0x64>
 800bf78:	0038      	movs	r0, r7
 800bf7a:	6921      	ldr	r1, [r4, #16]
 800bf7c:	f7fe fb32 	bl	800a5e4 <_free_r>
 800bf80:	230c      	movs	r3, #12
 800bf82:	2001      	movs	r0, #1
 800bf84:	603b      	str	r3, [r7, #0]
 800bf86:	89a2      	ldrh	r2, [r4, #12]
 800bf88:	3334      	adds	r3, #52	; 0x34
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	81a3      	strh	r3, [r4, #12]
 800bf8e:	4240      	negs	r0, r0
 800bf90:	e7ea      	b.n	800bf68 <__ssputs_r+0x94>
 800bf92:	46c0      	nop			; (mov r8, r8)
 800bf94:	fffffb7f 	.word	0xfffffb7f

0800bf98 <_svfiprintf_r>:
 800bf98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf9a:	b0a1      	sub	sp, #132	; 0x84
 800bf9c:	9003      	str	r0, [sp, #12]
 800bf9e:	001d      	movs	r5, r3
 800bfa0:	898b      	ldrh	r3, [r1, #12]
 800bfa2:	000f      	movs	r7, r1
 800bfa4:	0016      	movs	r6, r2
 800bfa6:	061b      	lsls	r3, r3, #24
 800bfa8:	d511      	bpl.n	800bfce <_svfiprintf_r+0x36>
 800bfaa:	690b      	ldr	r3, [r1, #16]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10e      	bne.n	800bfce <_svfiprintf_r+0x36>
 800bfb0:	2140      	movs	r1, #64	; 0x40
 800bfb2:	f7fe fb8d 	bl	800a6d0 <_malloc_r>
 800bfb6:	6038      	str	r0, [r7, #0]
 800bfb8:	6138      	str	r0, [r7, #16]
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d105      	bne.n	800bfca <_svfiprintf_r+0x32>
 800bfbe:	230c      	movs	r3, #12
 800bfc0:	9a03      	ldr	r2, [sp, #12]
 800bfc2:	3801      	subs	r0, #1
 800bfc4:	6013      	str	r3, [r2, #0]
 800bfc6:	b021      	add	sp, #132	; 0x84
 800bfc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfca:	2340      	movs	r3, #64	; 0x40
 800bfcc:	617b      	str	r3, [r7, #20]
 800bfce:	2300      	movs	r3, #0
 800bfd0:	ac08      	add	r4, sp, #32
 800bfd2:	6163      	str	r3, [r4, #20]
 800bfd4:	3320      	adds	r3, #32
 800bfd6:	7663      	strb	r3, [r4, #25]
 800bfd8:	3310      	adds	r3, #16
 800bfda:	76a3      	strb	r3, [r4, #26]
 800bfdc:	9507      	str	r5, [sp, #28]
 800bfde:	0035      	movs	r5, r6
 800bfe0:	782b      	ldrb	r3, [r5, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d001      	beq.n	800bfea <_svfiprintf_r+0x52>
 800bfe6:	2b25      	cmp	r3, #37	; 0x25
 800bfe8:	d148      	bne.n	800c07c <_svfiprintf_r+0xe4>
 800bfea:	1bab      	subs	r3, r5, r6
 800bfec:	9305      	str	r3, [sp, #20]
 800bfee:	42b5      	cmp	r5, r6
 800bff0:	d00b      	beq.n	800c00a <_svfiprintf_r+0x72>
 800bff2:	0032      	movs	r2, r6
 800bff4:	0039      	movs	r1, r7
 800bff6:	9803      	ldr	r0, [sp, #12]
 800bff8:	f7ff ff6c 	bl	800bed4 <__ssputs_r>
 800bffc:	3001      	adds	r0, #1
 800bffe:	d100      	bne.n	800c002 <_svfiprintf_r+0x6a>
 800c000:	e0af      	b.n	800c162 <_svfiprintf_r+0x1ca>
 800c002:	6963      	ldr	r3, [r4, #20]
 800c004:	9a05      	ldr	r2, [sp, #20]
 800c006:	189b      	adds	r3, r3, r2
 800c008:	6163      	str	r3, [r4, #20]
 800c00a:	782b      	ldrb	r3, [r5, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d100      	bne.n	800c012 <_svfiprintf_r+0x7a>
 800c010:	e0a7      	b.n	800c162 <_svfiprintf_r+0x1ca>
 800c012:	2201      	movs	r2, #1
 800c014:	2300      	movs	r3, #0
 800c016:	4252      	negs	r2, r2
 800c018:	6062      	str	r2, [r4, #4]
 800c01a:	a904      	add	r1, sp, #16
 800c01c:	3254      	adds	r2, #84	; 0x54
 800c01e:	1852      	adds	r2, r2, r1
 800c020:	1c6e      	adds	r6, r5, #1
 800c022:	6023      	str	r3, [r4, #0]
 800c024:	60e3      	str	r3, [r4, #12]
 800c026:	60a3      	str	r3, [r4, #8]
 800c028:	7013      	strb	r3, [r2, #0]
 800c02a:	65a3      	str	r3, [r4, #88]	; 0x58
 800c02c:	4b55      	ldr	r3, [pc, #340]	; (800c184 <_svfiprintf_r+0x1ec>)
 800c02e:	2205      	movs	r2, #5
 800c030:	0018      	movs	r0, r3
 800c032:	7831      	ldrb	r1, [r6, #0]
 800c034:	9305      	str	r3, [sp, #20]
 800c036:	f7fd fc28 	bl	800988a <memchr>
 800c03a:	1c75      	adds	r5, r6, #1
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d11f      	bne.n	800c080 <_svfiprintf_r+0xe8>
 800c040:	6822      	ldr	r2, [r4, #0]
 800c042:	06d3      	lsls	r3, r2, #27
 800c044:	d504      	bpl.n	800c050 <_svfiprintf_r+0xb8>
 800c046:	2353      	movs	r3, #83	; 0x53
 800c048:	a904      	add	r1, sp, #16
 800c04a:	185b      	adds	r3, r3, r1
 800c04c:	2120      	movs	r1, #32
 800c04e:	7019      	strb	r1, [r3, #0]
 800c050:	0713      	lsls	r3, r2, #28
 800c052:	d504      	bpl.n	800c05e <_svfiprintf_r+0xc6>
 800c054:	2353      	movs	r3, #83	; 0x53
 800c056:	a904      	add	r1, sp, #16
 800c058:	185b      	adds	r3, r3, r1
 800c05a:	212b      	movs	r1, #43	; 0x2b
 800c05c:	7019      	strb	r1, [r3, #0]
 800c05e:	7833      	ldrb	r3, [r6, #0]
 800c060:	2b2a      	cmp	r3, #42	; 0x2a
 800c062:	d016      	beq.n	800c092 <_svfiprintf_r+0xfa>
 800c064:	0035      	movs	r5, r6
 800c066:	2100      	movs	r1, #0
 800c068:	200a      	movs	r0, #10
 800c06a:	68e3      	ldr	r3, [r4, #12]
 800c06c:	782a      	ldrb	r2, [r5, #0]
 800c06e:	1c6e      	adds	r6, r5, #1
 800c070:	3a30      	subs	r2, #48	; 0x30
 800c072:	2a09      	cmp	r2, #9
 800c074:	d94e      	bls.n	800c114 <_svfiprintf_r+0x17c>
 800c076:	2900      	cmp	r1, #0
 800c078:	d111      	bne.n	800c09e <_svfiprintf_r+0x106>
 800c07a:	e017      	b.n	800c0ac <_svfiprintf_r+0x114>
 800c07c:	3501      	adds	r5, #1
 800c07e:	e7af      	b.n	800bfe0 <_svfiprintf_r+0x48>
 800c080:	9b05      	ldr	r3, [sp, #20]
 800c082:	6822      	ldr	r2, [r4, #0]
 800c084:	1ac0      	subs	r0, r0, r3
 800c086:	2301      	movs	r3, #1
 800c088:	4083      	lsls	r3, r0
 800c08a:	4313      	orrs	r3, r2
 800c08c:	002e      	movs	r6, r5
 800c08e:	6023      	str	r3, [r4, #0]
 800c090:	e7cc      	b.n	800c02c <_svfiprintf_r+0x94>
 800c092:	9b07      	ldr	r3, [sp, #28]
 800c094:	1d19      	adds	r1, r3, #4
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	9107      	str	r1, [sp, #28]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	db01      	blt.n	800c0a2 <_svfiprintf_r+0x10a>
 800c09e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0a0:	e004      	b.n	800c0ac <_svfiprintf_r+0x114>
 800c0a2:	425b      	negs	r3, r3
 800c0a4:	60e3      	str	r3, [r4, #12]
 800c0a6:	2302      	movs	r3, #2
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	6023      	str	r3, [r4, #0]
 800c0ac:	782b      	ldrb	r3, [r5, #0]
 800c0ae:	2b2e      	cmp	r3, #46	; 0x2e
 800c0b0:	d10a      	bne.n	800c0c8 <_svfiprintf_r+0x130>
 800c0b2:	786b      	ldrb	r3, [r5, #1]
 800c0b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c0b6:	d135      	bne.n	800c124 <_svfiprintf_r+0x18c>
 800c0b8:	9b07      	ldr	r3, [sp, #28]
 800c0ba:	3502      	adds	r5, #2
 800c0bc:	1d1a      	adds	r2, r3, #4
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	9207      	str	r2, [sp, #28]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	db2b      	blt.n	800c11e <_svfiprintf_r+0x186>
 800c0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c0c8:	4e2f      	ldr	r6, [pc, #188]	; (800c188 <_svfiprintf_r+0x1f0>)
 800c0ca:	2203      	movs	r2, #3
 800c0cc:	0030      	movs	r0, r6
 800c0ce:	7829      	ldrb	r1, [r5, #0]
 800c0d0:	f7fd fbdb 	bl	800988a <memchr>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d006      	beq.n	800c0e6 <_svfiprintf_r+0x14e>
 800c0d8:	2340      	movs	r3, #64	; 0x40
 800c0da:	1b80      	subs	r0, r0, r6
 800c0dc:	4083      	lsls	r3, r0
 800c0de:	6822      	ldr	r2, [r4, #0]
 800c0e0:	3501      	adds	r5, #1
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	6023      	str	r3, [r4, #0]
 800c0e6:	7829      	ldrb	r1, [r5, #0]
 800c0e8:	2206      	movs	r2, #6
 800c0ea:	4828      	ldr	r0, [pc, #160]	; (800c18c <_svfiprintf_r+0x1f4>)
 800c0ec:	1c6e      	adds	r6, r5, #1
 800c0ee:	7621      	strb	r1, [r4, #24]
 800c0f0:	f7fd fbcb 	bl	800988a <memchr>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d03c      	beq.n	800c172 <_svfiprintf_r+0x1da>
 800c0f8:	4b25      	ldr	r3, [pc, #148]	; (800c190 <_svfiprintf_r+0x1f8>)
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d125      	bne.n	800c14a <_svfiprintf_r+0x1b2>
 800c0fe:	2207      	movs	r2, #7
 800c100:	9b07      	ldr	r3, [sp, #28]
 800c102:	3307      	adds	r3, #7
 800c104:	4393      	bics	r3, r2
 800c106:	3308      	adds	r3, #8
 800c108:	9307      	str	r3, [sp, #28]
 800c10a:	6963      	ldr	r3, [r4, #20]
 800c10c:	9a04      	ldr	r2, [sp, #16]
 800c10e:	189b      	adds	r3, r3, r2
 800c110:	6163      	str	r3, [r4, #20]
 800c112:	e764      	b.n	800bfde <_svfiprintf_r+0x46>
 800c114:	4343      	muls	r3, r0
 800c116:	0035      	movs	r5, r6
 800c118:	2101      	movs	r1, #1
 800c11a:	189b      	adds	r3, r3, r2
 800c11c:	e7a6      	b.n	800c06c <_svfiprintf_r+0xd4>
 800c11e:	2301      	movs	r3, #1
 800c120:	425b      	negs	r3, r3
 800c122:	e7d0      	b.n	800c0c6 <_svfiprintf_r+0x12e>
 800c124:	2300      	movs	r3, #0
 800c126:	200a      	movs	r0, #10
 800c128:	001a      	movs	r2, r3
 800c12a:	3501      	adds	r5, #1
 800c12c:	6063      	str	r3, [r4, #4]
 800c12e:	7829      	ldrb	r1, [r5, #0]
 800c130:	1c6e      	adds	r6, r5, #1
 800c132:	3930      	subs	r1, #48	; 0x30
 800c134:	2909      	cmp	r1, #9
 800c136:	d903      	bls.n	800c140 <_svfiprintf_r+0x1a8>
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d0c5      	beq.n	800c0c8 <_svfiprintf_r+0x130>
 800c13c:	9209      	str	r2, [sp, #36]	; 0x24
 800c13e:	e7c3      	b.n	800c0c8 <_svfiprintf_r+0x130>
 800c140:	4342      	muls	r2, r0
 800c142:	0035      	movs	r5, r6
 800c144:	2301      	movs	r3, #1
 800c146:	1852      	adds	r2, r2, r1
 800c148:	e7f1      	b.n	800c12e <_svfiprintf_r+0x196>
 800c14a:	aa07      	add	r2, sp, #28
 800c14c:	9200      	str	r2, [sp, #0]
 800c14e:	0021      	movs	r1, r4
 800c150:	003a      	movs	r2, r7
 800c152:	4b10      	ldr	r3, [pc, #64]	; (800c194 <_svfiprintf_r+0x1fc>)
 800c154:	9803      	ldr	r0, [sp, #12]
 800c156:	f7fc fc03 	bl	8008960 <_printf_float>
 800c15a:	9004      	str	r0, [sp, #16]
 800c15c:	9b04      	ldr	r3, [sp, #16]
 800c15e:	3301      	adds	r3, #1
 800c160:	d1d3      	bne.n	800c10a <_svfiprintf_r+0x172>
 800c162:	89bb      	ldrh	r3, [r7, #12]
 800c164:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c166:	065b      	lsls	r3, r3, #25
 800c168:	d400      	bmi.n	800c16c <_svfiprintf_r+0x1d4>
 800c16a:	e72c      	b.n	800bfc6 <_svfiprintf_r+0x2e>
 800c16c:	2001      	movs	r0, #1
 800c16e:	4240      	negs	r0, r0
 800c170:	e729      	b.n	800bfc6 <_svfiprintf_r+0x2e>
 800c172:	aa07      	add	r2, sp, #28
 800c174:	9200      	str	r2, [sp, #0]
 800c176:	0021      	movs	r1, r4
 800c178:	003a      	movs	r2, r7
 800c17a:	4b06      	ldr	r3, [pc, #24]	; (800c194 <_svfiprintf_r+0x1fc>)
 800c17c:	9803      	ldr	r0, [sp, #12]
 800c17e:	f7fc feb5 	bl	8008eec <_printf_i>
 800c182:	e7ea      	b.n	800c15a <_svfiprintf_r+0x1c2>
 800c184:	0800d581 	.word	0x0800d581
 800c188:	0800d587 	.word	0x0800d587
 800c18c:	0800d58b 	.word	0x0800d58b
 800c190:	08008961 	.word	0x08008961
 800c194:	0800bed5 	.word	0x0800bed5

0800c198 <__sflush_r>:
 800c198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c19a:	898b      	ldrh	r3, [r1, #12]
 800c19c:	0005      	movs	r5, r0
 800c19e:	000c      	movs	r4, r1
 800c1a0:	071a      	lsls	r2, r3, #28
 800c1a2:	d45c      	bmi.n	800c25e <__sflush_r+0xc6>
 800c1a4:	684a      	ldr	r2, [r1, #4]
 800c1a6:	2a00      	cmp	r2, #0
 800c1a8:	dc04      	bgt.n	800c1b4 <__sflush_r+0x1c>
 800c1aa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c1ac:	2a00      	cmp	r2, #0
 800c1ae:	dc01      	bgt.n	800c1b4 <__sflush_r+0x1c>
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c1b4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c1b6:	2f00      	cmp	r7, #0
 800c1b8:	d0fa      	beq.n	800c1b0 <__sflush_r+0x18>
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	2080      	movs	r0, #128	; 0x80
 800c1be:	682e      	ldr	r6, [r5, #0]
 800c1c0:	602a      	str	r2, [r5, #0]
 800c1c2:	001a      	movs	r2, r3
 800c1c4:	0140      	lsls	r0, r0, #5
 800c1c6:	6a21      	ldr	r1, [r4, #32]
 800c1c8:	4002      	ands	r2, r0
 800c1ca:	4203      	tst	r3, r0
 800c1cc:	d034      	beq.n	800c238 <__sflush_r+0xa0>
 800c1ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1d0:	89a3      	ldrh	r3, [r4, #12]
 800c1d2:	075b      	lsls	r3, r3, #29
 800c1d4:	d506      	bpl.n	800c1e4 <__sflush_r+0x4c>
 800c1d6:	6863      	ldr	r3, [r4, #4]
 800c1d8:	1ac0      	subs	r0, r0, r3
 800c1da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d001      	beq.n	800c1e4 <__sflush_r+0x4c>
 800c1e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1e2:	1ac0      	subs	r0, r0, r3
 800c1e4:	0002      	movs	r2, r0
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	0028      	movs	r0, r5
 800c1ea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c1ec:	6a21      	ldr	r1, [r4, #32]
 800c1ee:	47b8      	blx	r7
 800c1f0:	89a2      	ldrh	r2, [r4, #12]
 800c1f2:	1c43      	adds	r3, r0, #1
 800c1f4:	d106      	bne.n	800c204 <__sflush_r+0x6c>
 800c1f6:	6829      	ldr	r1, [r5, #0]
 800c1f8:	291d      	cmp	r1, #29
 800c1fa:	d82c      	bhi.n	800c256 <__sflush_r+0xbe>
 800c1fc:	4b2a      	ldr	r3, [pc, #168]	; (800c2a8 <__sflush_r+0x110>)
 800c1fe:	410b      	asrs	r3, r1
 800c200:	07db      	lsls	r3, r3, #31
 800c202:	d428      	bmi.n	800c256 <__sflush_r+0xbe>
 800c204:	2300      	movs	r3, #0
 800c206:	6063      	str	r3, [r4, #4]
 800c208:	6923      	ldr	r3, [r4, #16]
 800c20a:	6023      	str	r3, [r4, #0]
 800c20c:	04d2      	lsls	r2, r2, #19
 800c20e:	d505      	bpl.n	800c21c <__sflush_r+0x84>
 800c210:	1c43      	adds	r3, r0, #1
 800c212:	d102      	bne.n	800c21a <__sflush_r+0x82>
 800c214:	682b      	ldr	r3, [r5, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d100      	bne.n	800c21c <__sflush_r+0x84>
 800c21a:	6560      	str	r0, [r4, #84]	; 0x54
 800c21c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c21e:	602e      	str	r6, [r5, #0]
 800c220:	2900      	cmp	r1, #0
 800c222:	d0c5      	beq.n	800c1b0 <__sflush_r+0x18>
 800c224:	0023      	movs	r3, r4
 800c226:	3344      	adds	r3, #68	; 0x44
 800c228:	4299      	cmp	r1, r3
 800c22a:	d002      	beq.n	800c232 <__sflush_r+0x9a>
 800c22c:	0028      	movs	r0, r5
 800c22e:	f7fe f9d9 	bl	800a5e4 <_free_r>
 800c232:	2000      	movs	r0, #0
 800c234:	6360      	str	r0, [r4, #52]	; 0x34
 800c236:	e7bc      	b.n	800c1b2 <__sflush_r+0x1a>
 800c238:	2301      	movs	r3, #1
 800c23a:	0028      	movs	r0, r5
 800c23c:	47b8      	blx	r7
 800c23e:	1c43      	adds	r3, r0, #1
 800c240:	d1c6      	bne.n	800c1d0 <__sflush_r+0x38>
 800c242:	682b      	ldr	r3, [r5, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d0c3      	beq.n	800c1d0 <__sflush_r+0x38>
 800c248:	2b1d      	cmp	r3, #29
 800c24a:	d001      	beq.n	800c250 <__sflush_r+0xb8>
 800c24c:	2b16      	cmp	r3, #22
 800c24e:	d101      	bne.n	800c254 <__sflush_r+0xbc>
 800c250:	602e      	str	r6, [r5, #0]
 800c252:	e7ad      	b.n	800c1b0 <__sflush_r+0x18>
 800c254:	89a2      	ldrh	r2, [r4, #12]
 800c256:	2340      	movs	r3, #64	; 0x40
 800c258:	4313      	orrs	r3, r2
 800c25a:	81a3      	strh	r3, [r4, #12]
 800c25c:	e7a9      	b.n	800c1b2 <__sflush_r+0x1a>
 800c25e:	690e      	ldr	r6, [r1, #16]
 800c260:	2e00      	cmp	r6, #0
 800c262:	d0a5      	beq.n	800c1b0 <__sflush_r+0x18>
 800c264:	680f      	ldr	r7, [r1, #0]
 800c266:	600e      	str	r6, [r1, #0]
 800c268:	1bba      	subs	r2, r7, r6
 800c26a:	9201      	str	r2, [sp, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	079b      	lsls	r3, r3, #30
 800c270:	d100      	bne.n	800c274 <__sflush_r+0xdc>
 800c272:	694a      	ldr	r2, [r1, #20]
 800c274:	60a2      	str	r2, [r4, #8]
 800c276:	9b01      	ldr	r3, [sp, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	dd99      	ble.n	800c1b0 <__sflush_r+0x18>
 800c27c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c27e:	0032      	movs	r2, r6
 800c280:	001f      	movs	r7, r3
 800c282:	0028      	movs	r0, r5
 800c284:	9b01      	ldr	r3, [sp, #4]
 800c286:	6a21      	ldr	r1, [r4, #32]
 800c288:	47b8      	blx	r7
 800c28a:	2800      	cmp	r0, #0
 800c28c:	dc06      	bgt.n	800c29c <__sflush_r+0x104>
 800c28e:	2340      	movs	r3, #64	; 0x40
 800c290:	2001      	movs	r0, #1
 800c292:	89a2      	ldrh	r2, [r4, #12]
 800c294:	4240      	negs	r0, r0
 800c296:	4313      	orrs	r3, r2
 800c298:	81a3      	strh	r3, [r4, #12]
 800c29a:	e78a      	b.n	800c1b2 <__sflush_r+0x1a>
 800c29c:	9b01      	ldr	r3, [sp, #4]
 800c29e:	1836      	adds	r6, r6, r0
 800c2a0:	1a1b      	subs	r3, r3, r0
 800c2a2:	9301      	str	r3, [sp, #4]
 800c2a4:	e7e7      	b.n	800c276 <__sflush_r+0xde>
 800c2a6:	46c0      	nop			; (mov r8, r8)
 800c2a8:	dfbffffe 	.word	0xdfbffffe

0800c2ac <_fflush_r>:
 800c2ac:	690b      	ldr	r3, [r1, #16]
 800c2ae:	b570      	push	{r4, r5, r6, lr}
 800c2b0:	0005      	movs	r5, r0
 800c2b2:	000c      	movs	r4, r1
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d102      	bne.n	800c2be <_fflush_r+0x12>
 800c2b8:	2500      	movs	r5, #0
 800c2ba:	0028      	movs	r0, r5
 800c2bc:	bd70      	pop	{r4, r5, r6, pc}
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d004      	beq.n	800c2cc <_fflush_r+0x20>
 800c2c2:	6a03      	ldr	r3, [r0, #32]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <_fflush_r+0x20>
 800c2c8:	f7fd f9b8 	bl	800963c <__sinit>
 800c2cc:	220c      	movs	r2, #12
 800c2ce:	5ea3      	ldrsh	r3, [r4, r2]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d0f1      	beq.n	800c2b8 <_fflush_r+0xc>
 800c2d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2d6:	07d2      	lsls	r2, r2, #31
 800c2d8:	d404      	bmi.n	800c2e4 <_fflush_r+0x38>
 800c2da:	059b      	lsls	r3, r3, #22
 800c2dc:	d402      	bmi.n	800c2e4 <_fflush_r+0x38>
 800c2de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2e0:	f7fd fad1 	bl	8009886 <__retarget_lock_acquire_recursive>
 800c2e4:	0028      	movs	r0, r5
 800c2e6:	0021      	movs	r1, r4
 800c2e8:	f7ff ff56 	bl	800c198 <__sflush_r>
 800c2ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2ee:	0005      	movs	r5, r0
 800c2f0:	07db      	lsls	r3, r3, #31
 800c2f2:	d4e2      	bmi.n	800c2ba <_fflush_r+0xe>
 800c2f4:	89a3      	ldrh	r3, [r4, #12]
 800c2f6:	059b      	lsls	r3, r3, #22
 800c2f8:	d4df      	bmi.n	800c2ba <_fflush_r+0xe>
 800c2fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2fc:	f7fd fac4 	bl	8009888 <__retarget_lock_release_recursive>
 800c300:	e7db      	b.n	800c2ba <_fflush_r+0xe>

0800c302 <memmove>:
 800c302:	b510      	push	{r4, lr}
 800c304:	4288      	cmp	r0, r1
 800c306:	d902      	bls.n	800c30e <memmove+0xc>
 800c308:	188b      	adds	r3, r1, r2
 800c30a:	4298      	cmp	r0, r3
 800c30c:	d303      	bcc.n	800c316 <memmove+0x14>
 800c30e:	2300      	movs	r3, #0
 800c310:	e007      	b.n	800c322 <memmove+0x20>
 800c312:	5c8b      	ldrb	r3, [r1, r2]
 800c314:	5483      	strb	r3, [r0, r2]
 800c316:	3a01      	subs	r2, #1
 800c318:	d2fb      	bcs.n	800c312 <memmove+0x10>
 800c31a:	bd10      	pop	{r4, pc}
 800c31c:	5ccc      	ldrb	r4, [r1, r3]
 800c31e:	54c4      	strb	r4, [r0, r3]
 800c320:	3301      	adds	r3, #1
 800c322:	429a      	cmp	r2, r3
 800c324:	d1fa      	bne.n	800c31c <memmove+0x1a>
 800c326:	e7f8      	b.n	800c31a <memmove+0x18>

0800c328 <strncmp>:
 800c328:	b530      	push	{r4, r5, lr}
 800c32a:	0005      	movs	r5, r0
 800c32c:	1e10      	subs	r0, r2, #0
 800c32e:	d00b      	beq.n	800c348 <strncmp+0x20>
 800c330:	2400      	movs	r4, #0
 800c332:	3a01      	subs	r2, #1
 800c334:	5d2b      	ldrb	r3, [r5, r4]
 800c336:	5d08      	ldrb	r0, [r1, r4]
 800c338:	4283      	cmp	r3, r0
 800c33a:	d104      	bne.n	800c346 <strncmp+0x1e>
 800c33c:	42a2      	cmp	r2, r4
 800c33e:	d002      	beq.n	800c346 <strncmp+0x1e>
 800c340:	3401      	adds	r4, #1
 800c342:	2b00      	cmp	r3, #0
 800c344:	d1f6      	bne.n	800c334 <strncmp+0xc>
 800c346:	1a18      	subs	r0, r3, r0
 800c348:	bd30      	pop	{r4, r5, pc}
	...

0800c34c <_sbrk_r>:
 800c34c:	2300      	movs	r3, #0
 800c34e:	b570      	push	{r4, r5, r6, lr}
 800c350:	4d06      	ldr	r5, [pc, #24]	; (800c36c <_sbrk_r+0x20>)
 800c352:	0004      	movs	r4, r0
 800c354:	0008      	movs	r0, r1
 800c356:	602b      	str	r3, [r5, #0]
 800c358:	f7f7 fb0a 	bl	8003970 <_sbrk>
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	d103      	bne.n	800c368 <_sbrk_r+0x1c>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d000      	beq.n	800c368 <_sbrk_r+0x1c>
 800c366:	6023      	str	r3, [r4, #0]
 800c368:	bd70      	pop	{r4, r5, r6, pc}
 800c36a:	46c0      	nop			; (mov r8, r8)
 800c36c:	20000964 	.word	0x20000964

0800c370 <memcpy>:
 800c370:	2300      	movs	r3, #0
 800c372:	b510      	push	{r4, lr}
 800c374:	429a      	cmp	r2, r3
 800c376:	d100      	bne.n	800c37a <memcpy+0xa>
 800c378:	bd10      	pop	{r4, pc}
 800c37a:	5ccc      	ldrb	r4, [r1, r3]
 800c37c:	54c4      	strb	r4, [r0, r3]
 800c37e:	3301      	adds	r3, #1
 800c380:	e7f8      	b.n	800c374 <memcpy+0x4>
	...

0800c384 <nan>:
 800c384:	2000      	movs	r0, #0
 800c386:	4901      	ldr	r1, [pc, #4]	; (800c38c <nan+0x8>)
 800c388:	4770      	bx	lr
 800c38a:	46c0      	nop			; (mov r8, r8)
 800c38c:	7ff80000 	.word	0x7ff80000

0800c390 <__assert_func>:
 800c390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c392:	0014      	movs	r4, r2
 800c394:	001a      	movs	r2, r3
 800c396:	4b09      	ldr	r3, [pc, #36]	; (800c3bc <__assert_func+0x2c>)
 800c398:	0005      	movs	r5, r0
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	000e      	movs	r6, r1
 800c39e:	68d8      	ldr	r0, [r3, #12]
 800c3a0:	4b07      	ldr	r3, [pc, #28]	; (800c3c0 <__assert_func+0x30>)
 800c3a2:	2c00      	cmp	r4, #0
 800c3a4:	d101      	bne.n	800c3aa <__assert_func+0x1a>
 800c3a6:	4b07      	ldr	r3, [pc, #28]	; (800c3c4 <__assert_func+0x34>)
 800c3a8:	001c      	movs	r4, r3
 800c3aa:	4907      	ldr	r1, [pc, #28]	; (800c3c8 <__assert_func+0x38>)
 800c3ac:	9301      	str	r3, [sp, #4]
 800c3ae:	9402      	str	r4, [sp, #8]
 800c3b0:	002b      	movs	r3, r5
 800c3b2:	9600      	str	r6, [sp, #0]
 800c3b4:	f000 fbe2 	bl	800cb7c <fiprintf>
 800c3b8:	f000 fbf0 	bl	800cb9c <abort>
 800c3bc:	20000064 	.word	0x20000064
 800c3c0:	0800d59a 	.word	0x0800d59a
 800c3c4:	0800d5d5 	.word	0x0800d5d5
 800c3c8:	0800d5a7 	.word	0x0800d5a7

0800c3cc <_calloc_r>:
 800c3cc:	b570      	push	{r4, r5, r6, lr}
 800c3ce:	0c0b      	lsrs	r3, r1, #16
 800c3d0:	0c15      	lsrs	r5, r2, #16
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d11e      	bne.n	800c414 <_calloc_r+0x48>
 800c3d6:	2d00      	cmp	r5, #0
 800c3d8:	d10c      	bne.n	800c3f4 <_calloc_r+0x28>
 800c3da:	b289      	uxth	r1, r1
 800c3dc:	b294      	uxth	r4, r2
 800c3de:	434c      	muls	r4, r1
 800c3e0:	0021      	movs	r1, r4
 800c3e2:	f7fe f975 	bl	800a6d0 <_malloc_r>
 800c3e6:	1e05      	subs	r5, r0, #0
 800c3e8:	d01b      	beq.n	800c422 <_calloc_r+0x56>
 800c3ea:	0022      	movs	r2, r4
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	f7fd f9c5 	bl	800977c <memset>
 800c3f2:	e016      	b.n	800c422 <_calloc_r+0x56>
 800c3f4:	1c2b      	adds	r3, r5, #0
 800c3f6:	1c0c      	adds	r4, r1, #0
 800c3f8:	b289      	uxth	r1, r1
 800c3fa:	b292      	uxth	r2, r2
 800c3fc:	434a      	muls	r2, r1
 800c3fe:	b2a1      	uxth	r1, r4
 800c400:	b29c      	uxth	r4, r3
 800c402:	434c      	muls	r4, r1
 800c404:	0c13      	lsrs	r3, r2, #16
 800c406:	18e4      	adds	r4, r4, r3
 800c408:	0c23      	lsrs	r3, r4, #16
 800c40a:	d107      	bne.n	800c41c <_calloc_r+0x50>
 800c40c:	0424      	lsls	r4, r4, #16
 800c40e:	b292      	uxth	r2, r2
 800c410:	4314      	orrs	r4, r2
 800c412:	e7e5      	b.n	800c3e0 <_calloc_r+0x14>
 800c414:	2d00      	cmp	r5, #0
 800c416:	d101      	bne.n	800c41c <_calloc_r+0x50>
 800c418:	1c14      	adds	r4, r2, #0
 800c41a:	e7ed      	b.n	800c3f8 <_calloc_r+0x2c>
 800c41c:	230c      	movs	r3, #12
 800c41e:	2500      	movs	r5, #0
 800c420:	6003      	str	r3, [r0, #0]
 800c422:	0028      	movs	r0, r5
 800c424:	bd70      	pop	{r4, r5, r6, pc}

0800c426 <rshift>:
 800c426:	0002      	movs	r2, r0
 800c428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c42a:	6904      	ldr	r4, [r0, #16]
 800c42c:	114b      	asrs	r3, r1, #5
 800c42e:	b085      	sub	sp, #20
 800c430:	3214      	adds	r2, #20
 800c432:	9302      	str	r3, [sp, #8]
 800c434:	114d      	asrs	r5, r1, #5
 800c436:	0013      	movs	r3, r2
 800c438:	42ac      	cmp	r4, r5
 800c43a:	dd32      	ble.n	800c4a2 <rshift+0x7c>
 800c43c:	261f      	movs	r6, #31
 800c43e:	000f      	movs	r7, r1
 800c440:	114b      	asrs	r3, r1, #5
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	00a5      	lsls	r5, r4, #2
 800c446:	18d3      	adds	r3, r2, r3
 800c448:	4037      	ands	r7, r6
 800c44a:	1955      	adds	r5, r2, r5
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	9701      	str	r7, [sp, #4]
 800c450:	4231      	tst	r1, r6
 800c452:	d10d      	bne.n	800c470 <rshift+0x4a>
 800c454:	0016      	movs	r6, r2
 800c456:	0019      	movs	r1, r3
 800c458:	428d      	cmp	r5, r1
 800c45a:	d836      	bhi.n	800c4ca <rshift+0xa4>
 800c45c:	9900      	ldr	r1, [sp, #0]
 800c45e:	2300      	movs	r3, #0
 800c460:	3903      	subs	r1, #3
 800c462:	428d      	cmp	r5, r1
 800c464:	d302      	bcc.n	800c46c <rshift+0x46>
 800c466:	9b02      	ldr	r3, [sp, #8]
 800c468:	1ae4      	subs	r4, r4, r3
 800c46a:	00a3      	lsls	r3, r4, #2
 800c46c:	18d3      	adds	r3, r2, r3
 800c46e:	e018      	b.n	800c4a2 <rshift+0x7c>
 800c470:	2120      	movs	r1, #32
 800c472:	9e01      	ldr	r6, [sp, #4]
 800c474:	9f01      	ldr	r7, [sp, #4]
 800c476:	1b89      	subs	r1, r1, r6
 800c478:	9e00      	ldr	r6, [sp, #0]
 800c47a:	9103      	str	r1, [sp, #12]
 800c47c:	ce02      	ldmia	r6!, {r1}
 800c47e:	4694      	mov	ip, r2
 800c480:	40f9      	lsrs	r1, r7
 800c482:	42b5      	cmp	r5, r6
 800c484:	d816      	bhi.n	800c4b4 <rshift+0x8e>
 800c486:	9e00      	ldr	r6, [sp, #0]
 800c488:	2300      	movs	r3, #0
 800c48a:	3601      	adds	r6, #1
 800c48c:	42b5      	cmp	r5, r6
 800c48e:	d303      	bcc.n	800c498 <rshift+0x72>
 800c490:	9b02      	ldr	r3, [sp, #8]
 800c492:	1ae3      	subs	r3, r4, r3
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	3b04      	subs	r3, #4
 800c498:	18d3      	adds	r3, r2, r3
 800c49a:	6019      	str	r1, [r3, #0]
 800c49c:	2900      	cmp	r1, #0
 800c49e:	d000      	beq.n	800c4a2 <rshift+0x7c>
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	1a99      	subs	r1, r3, r2
 800c4a4:	1089      	asrs	r1, r1, #2
 800c4a6:	6101      	str	r1, [r0, #16]
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d101      	bne.n	800c4b0 <rshift+0x8a>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	6143      	str	r3, [r0, #20]
 800c4b0:	b005      	add	sp, #20
 800c4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4b4:	6837      	ldr	r7, [r6, #0]
 800c4b6:	9b03      	ldr	r3, [sp, #12]
 800c4b8:	409f      	lsls	r7, r3
 800c4ba:	430f      	orrs	r7, r1
 800c4bc:	4661      	mov	r1, ip
 800c4be:	c180      	stmia	r1!, {r7}
 800c4c0:	468c      	mov	ip, r1
 800c4c2:	9b01      	ldr	r3, [sp, #4]
 800c4c4:	ce02      	ldmia	r6!, {r1}
 800c4c6:	40d9      	lsrs	r1, r3
 800c4c8:	e7db      	b.n	800c482 <rshift+0x5c>
 800c4ca:	c980      	ldmia	r1!, {r7}
 800c4cc:	c680      	stmia	r6!, {r7}
 800c4ce:	e7c3      	b.n	800c458 <rshift+0x32>

0800c4d0 <__hexdig_fun>:
 800c4d0:	0002      	movs	r2, r0
 800c4d2:	3a30      	subs	r2, #48	; 0x30
 800c4d4:	0003      	movs	r3, r0
 800c4d6:	2a09      	cmp	r2, #9
 800c4d8:	d802      	bhi.n	800c4e0 <__hexdig_fun+0x10>
 800c4da:	3b20      	subs	r3, #32
 800c4dc:	b2d8      	uxtb	r0, r3
 800c4de:	4770      	bx	lr
 800c4e0:	0002      	movs	r2, r0
 800c4e2:	3a61      	subs	r2, #97	; 0x61
 800c4e4:	2a05      	cmp	r2, #5
 800c4e6:	d801      	bhi.n	800c4ec <__hexdig_fun+0x1c>
 800c4e8:	3b47      	subs	r3, #71	; 0x47
 800c4ea:	e7f7      	b.n	800c4dc <__hexdig_fun+0xc>
 800c4ec:	001a      	movs	r2, r3
 800c4ee:	3a41      	subs	r2, #65	; 0x41
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	2a05      	cmp	r2, #5
 800c4f4:	d8f3      	bhi.n	800c4de <__hexdig_fun+0xe>
 800c4f6:	3b27      	subs	r3, #39	; 0x27
 800c4f8:	e7f0      	b.n	800c4dc <__hexdig_fun+0xc>
	...

0800c4fc <__gethex>:
 800c4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4fe:	b089      	sub	sp, #36	; 0x24
 800c500:	9307      	str	r3, [sp, #28]
 800c502:	2302      	movs	r3, #2
 800c504:	9201      	str	r2, [sp, #4]
 800c506:	680a      	ldr	r2, [r1, #0]
 800c508:	425b      	negs	r3, r3
 800c50a:	9003      	str	r0, [sp, #12]
 800c50c:	9106      	str	r1, [sp, #24]
 800c50e:	1c96      	adds	r6, r2, #2
 800c510:	1a9b      	subs	r3, r3, r2
 800c512:	199a      	adds	r2, r3, r6
 800c514:	9600      	str	r6, [sp, #0]
 800c516:	9205      	str	r2, [sp, #20]
 800c518:	9a00      	ldr	r2, [sp, #0]
 800c51a:	3601      	adds	r6, #1
 800c51c:	7810      	ldrb	r0, [r2, #0]
 800c51e:	2830      	cmp	r0, #48	; 0x30
 800c520:	d0f7      	beq.n	800c512 <__gethex+0x16>
 800c522:	f7ff ffd5 	bl	800c4d0 <__hexdig_fun>
 800c526:	2300      	movs	r3, #0
 800c528:	001d      	movs	r5, r3
 800c52a:	9302      	str	r3, [sp, #8]
 800c52c:	4298      	cmp	r0, r3
 800c52e:	d11d      	bne.n	800c56c <__gethex+0x70>
 800c530:	2201      	movs	r2, #1
 800c532:	49a6      	ldr	r1, [pc, #664]	; (800c7cc <__gethex+0x2d0>)
 800c534:	9800      	ldr	r0, [sp, #0]
 800c536:	f7ff fef7 	bl	800c328 <strncmp>
 800c53a:	0007      	movs	r7, r0
 800c53c:	42a8      	cmp	r0, r5
 800c53e:	d169      	bne.n	800c614 <__gethex+0x118>
 800c540:	9b00      	ldr	r3, [sp, #0]
 800c542:	0034      	movs	r4, r6
 800c544:	7858      	ldrb	r0, [r3, #1]
 800c546:	f7ff ffc3 	bl	800c4d0 <__hexdig_fun>
 800c54a:	2301      	movs	r3, #1
 800c54c:	9302      	str	r3, [sp, #8]
 800c54e:	42a8      	cmp	r0, r5
 800c550:	d02f      	beq.n	800c5b2 <__gethex+0xb6>
 800c552:	9600      	str	r6, [sp, #0]
 800c554:	9b00      	ldr	r3, [sp, #0]
 800c556:	7818      	ldrb	r0, [r3, #0]
 800c558:	2830      	cmp	r0, #48	; 0x30
 800c55a:	d009      	beq.n	800c570 <__gethex+0x74>
 800c55c:	f7ff ffb8 	bl	800c4d0 <__hexdig_fun>
 800c560:	4242      	negs	r2, r0
 800c562:	4142      	adcs	r2, r0
 800c564:	2301      	movs	r3, #1
 800c566:	0035      	movs	r5, r6
 800c568:	9202      	str	r2, [sp, #8]
 800c56a:	9305      	str	r3, [sp, #20]
 800c56c:	9c00      	ldr	r4, [sp, #0]
 800c56e:	e004      	b.n	800c57a <__gethex+0x7e>
 800c570:	9b00      	ldr	r3, [sp, #0]
 800c572:	3301      	adds	r3, #1
 800c574:	9300      	str	r3, [sp, #0]
 800c576:	e7ed      	b.n	800c554 <__gethex+0x58>
 800c578:	3401      	adds	r4, #1
 800c57a:	7820      	ldrb	r0, [r4, #0]
 800c57c:	f7ff ffa8 	bl	800c4d0 <__hexdig_fun>
 800c580:	1e07      	subs	r7, r0, #0
 800c582:	d1f9      	bne.n	800c578 <__gethex+0x7c>
 800c584:	2201      	movs	r2, #1
 800c586:	0020      	movs	r0, r4
 800c588:	4990      	ldr	r1, [pc, #576]	; (800c7cc <__gethex+0x2d0>)
 800c58a:	f7ff fecd 	bl	800c328 <strncmp>
 800c58e:	2800      	cmp	r0, #0
 800c590:	d10d      	bne.n	800c5ae <__gethex+0xb2>
 800c592:	2d00      	cmp	r5, #0
 800c594:	d106      	bne.n	800c5a4 <__gethex+0xa8>
 800c596:	3401      	adds	r4, #1
 800c598:	0025      	movs	r5, r4
 800c59a:	7820      	ldrb	r0, [r4, #0]
 800c59c:	f7ff ff98 	bl	800c4d0 <__hexdig_fun>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d102      	bne.n	800c5aa <__gethex+0xae>
 800c5a4:	1b2d      	subs	r5, r5, r4
 800c5a6:	00af      	lsls	r7, r5, #2
 800c5a8:	e003      	b.n	800c5b2 <__gethex+0xb6>
 800c5aa:	3401      	adds	r4, #1
 800c5ac:	e7f5      	b.n	800c59a <__gethex+0x9e>
 800c5ae:	2d00      	cmp	r5, #0
 800c5b0:	d1f8      	bne.n	800c5a4 <__gethex+0xa8>
 800c5b2:	2220      	movs	r2, #32
 800c5b4:	7823      	ldrb	r3, [r4, #0]
 800c5b6:	0026      	movs	r6, r4
 800c5b8:	4393      	bics	r3, r2
 800c5ba:	2b50      	cmp	r3, #80	; 0x50
 800c5bc:	d11d      	bne.n	800c5fa <__gethex+0xfe>
 800c5be:	7863      	ldrb	r3, [r4, #1]
 800c5c0:	2b2b      	cmp	r3, #43	; 0x2b
 800c5c2:	d02c      	beq.n	800c61e <__gethex+0x122>
 800c5c4:	2b2d      	cmp	r3, #45	; 0x2d
 800c5c6:	d02e      	beq.n	800c626 <__gethex+0x12a>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	1c66      	adds	r6, r4, #1
 800c5cc:	9304      	str	r3, [sp, #16]
 800c5ce:	7830      	ldrb	r0, [r6, #0]
 800c5d0:	f7ff ff7e 	bl	800c4d0 <__hexdig_fun>
 800c5d4:	1e43      	subs	r3, r0, #1
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	2b18      	cmp	r3, #24
 800c5da:	d82b      	bhi.n	800c634 <__gethex+0x138>
 800c5dc:	3810      	subs	r0, #16
 800c5de:	0005      	movs	r5, r0
 800c5e0:	7870      	ldrb	r0, [r6, #1]
 800c5e2:	f7ff ff75 	bl	800c4d0 <__hexdig_fun>
 800c5e6:	1e43      	subs	r3, r0, #1
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	3601      	adds	r6, #1
 800c5ec:	2b18      	cmp	r3, #24
 800c5ee:	d91c      	bls.n	800c62a <__gethex+0x12e>
 800c5f0:	9b04      	ldr	r3, [sp, #16]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d000      	beq.n	800c5f8 <__gethex+0xfc>
 800c5f6:	426d      	negs	r5, r5
 800c5f8:	197f      	adds	r7, r7, r5
 800c5fa:	9b06      	ldr	r3, [sp, #24]
 800c5fc:	601e      	str	r6, [r3, #0]
 800c5fe:	9b02      	ldr	r3, [sp, #8]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d019      	beq.n	800c638 <__gethex+0x13c>
 800c604:	2600      	movs	r6, #0
 800c606:	9b05      	ldr	r3, [sp, #20]
 800c608:	42b3      	cmp	r3, r6
 800c60a:	d100      	bne.n	800c60e <__gethex+0x112>
 800c60c:	3606      	adds	r6, #6
 800c60e:	0030      	movs	r0, r6
 800c610:	b009      	add	sp, #36	; 0x24
 800c612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c614:	2301      	movs	r3, #1
 800c616:	2700      	movs	r7, #0
 800c618:	9c00      	ldr	r4, [sp, #0]
 800c61a:	9302      	str	r3, [sp, #8]
 800c61c:	e7c9      	b.n	800c5b2 <__gethex+0xb6>
 800c61e:	2300      	movs	r3, #0
 800c620:	9304      	str	r3, [sp, #16]
 800c622:	1ca6      	adds	r6, r4, #2
 800c624:	e7d3      	b.n	800c5ce <__gethex+0xd2>
 800c626:	2301      	movs	r3, #1
 800c628:	e7fa      	b.n	800c620 <__gethex+0x124>
 800c62a:	230a      	movs	r3, #10
 800c62c:	435d      	muls	r5, r3
 800c62e:	182d      	adds	r5, r5, r0
 800c630:	3d10      	subs	r5, #16
 800c632:	e7d5      	b.n	800c5e0 <__gethex+0xe4>
 800c634:	0026      	movs	r6, r4
 800c636:	e7e0      	b.n	800c5fa <__gethex+0xfe>
 800c638:	9b00      	ldr	r3, [sp, #0]
 800c63a:	9902      	ldr	r1, [sp, #8]
 800c63c:	1ae3      	subs	r3, r4, r3
 800c63e:	3b01      	subs	r3, #1
 800c640:	2b07      	cmp	r3, #7
 800c642:	dc0a      	bgt.n	800c65a <__gethex+0x15e>
 800c644:	9803      	ldr	r0, [sp, #12]
 800c646:	f7fe f8d5 	bl	800a7f4 <_Balloc>
 800c64a:	1e05      	subs	r5, r0, #0
 800c64c:	d108      	bne.n	800c660 <__gethex+0x164>
 800c64e:	002a      	movs	r2, r5
 800c650:	21e4      	movs	r1, #228	; 0xe4
 800c652:	4b5f      	ldr	r3, [pc, #380]	; (800c7d0 <__gethex+0x2d4>)
 800c654:	485f      	ldr	r0, [pc, #380]	; (800c7d4 <__gethex+0x2d8>)
 800c656:	f7ff fe9b 	bl	800c390 <__assert_func>
 800c65a:	3101      	adds	r1, #1
 800c65c:	105b      	asrs	r3, r3, #1
 800c65e:	e7ef      	b.n	800c640 <__gethex+0x144>
 800c660:	0003      	movs	r3, r0
 800c662:	3314      	adds	r3, #20
 800c664:	9302      	str	r3, [sp, #8]
 800c666:	9305      	str	r3, [sp, #20]
 800c668:	2300      	movs	r3, #0
 800c66a:	001e      	movs	r6, r3
 800c66c:	9304      	str	r3, [sp, #16]
 800c66e:	9b00      	ldr	r3, [sp, #0]
 800c670:	42a3      	cmp	r3, r4
 800c672:	d33f      	bcc.n	800c6f4 <__gethex+0x1f8>
 800c674:	9c05      	ldr	r4, [sp, #20]
 800c676:	9b02      	ldr	r3, [sp, #8]
 800c678:	c440      	stmia	r4!, {r6}
 800c67a:	1ae4      	subs	r4, r4, r3
 800c67c:	10a4      	asrs	r4, r4, #2
 800c67e:	0030      	movs	r0, r6
 800c680:	612c      	str	r4, [r5, #16]
 800c682:	f7fe f9af 	bl	800a9e4 <__hi0bits>
 800c686:	9b01      	ldr	r3, [sp, #4]
 800c688:	0164      	lsls	r4, r4, #5
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	1a26      	subs	r6, r4, r0
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	429e      	cmp	r6, r3
 800c692:	dd51      	ble.n	800c738 <__gethex+0x23c>
 800c694:	1af6      	subs	r6, r6, r3
 800c696:	0031      	movs	r1, r6
 800c698:	0028      	movs	r0, r5
 800c69a:	f7fe fd43 	bl	800b124 <__any_on>
 800c69e:	1e04      	subs	r4, r0, #0
 800c6a0:	d016      	beq.n	800c6d0 <__gethex+0x1d4>
 800c6a2:	2401      	movs	r4, #1
 800c6a4:	231f      	movs	r3, #31
 800c6a6:	0020      	movs	r0, r4
 800c6a8:	1e72      	subs	r2, r6, #1
 800c6aa:	4013      	ands	r3, r2
 800c6ac:	4098      	lsls	r0, r3
 800c6ae:	0003      	movs	r3, r0
 800c6b0:	1151      	asrs	r1, r2, #5
 800c6b2:	9802      	ldr	r0, [sp, #8]
 800c6b4:	0089      	lsls	r1, r1, #2
 800c6b6:	5809      	ldr	r1, [r1, r0]
 800c6b8:	4219      	tst	r1, r3
 800c6ba:	d009      	beq.n	800c6d0 <__gethex+0x1d4>
 800c6bc:	42a2      	cmp	r2, r4
 800c6be:	dd06      	ble.n	800c6ce <__gethex+0x1d2>
 800c6c0:	0028      	movs	r0, r5
 800c6c2:	1eb1      	subs	r1, r6, #2
 800c6c4:	f7fe fd2e 	bl	800b124 <__any_on>
 800c6c8:	3402      	adds	r4, #2
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	d100      	bne.n	800c6d0 <__gethex+0x1d4>
 800c6ce:	2402      	movs	r4, #2
 800c6d0:	0031      	movs	r1, r6
 800c6d2:	0028      	movs	r0, r5
 800c6d4:	f7ff fea7 	bl	800c426 <rshift>
 800c6d8:	19bf      	adds	r7, r7, r6
 800c6da:	9b01      	ldr	r3, [sp, #4]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	42bb      	cmp	r3, r7
 800c6e0:	da3a      	bge.n	800c758 <__gethex+0x25c>
 800c6e2:	0029      	movs	r1, r5
 800c6e4:	9803      	ldr	r0, [sp, #12]
 800c6e6:	f7fe f8c9 	bl	800a87c <_Bfree>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6ee:	26a3      	movs	r6, #163	; 0xa3
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	e78c      	b.n	800c60e <__gethex+0x112>
 800c6f4:	3c01      	subs	r4, #1
 800c6f6:	7823      	ldrb	r3, [r4, #0]
 800c6f8:	2b2e      	cmp	r3, #46	; 0x2e
 800c6fa:	d012      	beq.n	800c722 <__gethex+0x226>
 800c6fc:	9b04      	ldr	r3, [sp, #16]
 800c6fe:	2b20      	cmp	r3, #32
 800c700:	d104      	bne.n	800c70c <__gethex+0x210>
 800c702:	9b05      	ldr	r3, [sp, #20]
 800c704:	c340      	stmia	r3!, {r6}
 800c706:	2600      	movs	r6, #0
 800c708:	9305      	str	r3, [sp, #20]
 800c70a:	9604      	str	r6, [sp, #16]
 800c70c:	7820      	ldrb	r0, [r4, #0]
 800c70e:	f7ff fedf 	bl	800c4d0 <__hexdig_fun>
 800c712:	230f      	movs	r3, #15
 800c714:	4018      	ands	r0, r3
 800c716:	9b04      	ldr	r3, [sp, #16]
 800c718:	4098      	lsls	r0, r3
 800c71a:	3304      	adds	r3, #4
 800c71c:	4306      	orrs	r6, r0
 800c71e:	9304      	str	r3, [sp, #16]
 800c720:	e7a5      	b.n	800c66e <__gethex+0x172>
 800c722:	9b00      	ldr	r3, [sp, #0]
 800c724:	42a3      	cmp	r3, r4
 800c726:	d8e9      	bhi.n	800c6fc <__gethex+0x200>
 800c728:	2201      	movs	r2, #1
 800c72a:	0020      	movs	r0, r4
 800c72c:	4927      	ldr	r1, [pc, #156]	; (800c7cc <__gethex+0x2d0>)
 800c72e:	f7ff fdfb 	bl	800c328 <strncmp>
 800c732:	2800      	cmp	r0, #0
 800c734:	d1e2      	bne.n	800c6fc <__gethex+0x200>
 800c736:	e79a      	b.n	800c66e <__gethex+0x172>
 800c738:	9b00      	ldr	r3, [sp, #0]
 800c73a:	2400      	movs	r4, #0
 800c73c:	429e      	cmp	r6, r3
 800c73e:	dacc      	bge.n	800c6da <__gethex+0x1de>
 800c740:	1b9e      	subs	r6, r3, r6
 800c742:	0029      	movs	r1, r5
 800c744:	0032      	movs	r2, r6
 800c746:	9803      	ldr	r0, [sp, #12]
 800c748:	f7fe fab8 	bl	800acbc <__lshift>
 800c74c:	0003      	movs	r3, r0
 800c74e:	3314      	adds	r3, #20
 800c750:	0005      	movs	r5, r0
 800c752:	1bbf      	subs	r7, r7, r6
 800c754:	9302      	str	r3, [sp, #8]
 800c756:	e7c0      	b.n	800c6da <__gethex+0x1de>
 800c758:	9b01      	ldr	r3, [sp, #4]
 800c75a:	685e      	ldr	r6, [r3, #4]
 800c75c:	42be      	cmp	r6, r7
 800c75e:	dd70      	ble.n	800c842 <__gethex+0x346>
 800c760:	9b00      	ldr	r3, [sp, #0]
 800c762:	1bf6      	subs	r6, r6, r7
 800c764:	42b3      	cmp	r3, r6
 800c766:	dc37      	bgt.n	800c7d8 <__gethex+0x2dc>
 800c768:	9b01      	ldr	r3, [sp, #4]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	2b02      	cmp	r3, #2
 800c76e:	d024      	beq.n	800c7ba <__gethex+0x2be>
 800c770:	2b03      	cmp	r3, #3
 800c772:	d026      	beq.n	800c7c2 <__gethex+0x2c6>
 800c774:	2b01      	cmp	r3, #1
 800c776:	d117      	bne.n	800c7a8 <__gethex+0x2ac>
 800c778:	9b00      	ldr	r3, [sp, #0]
 800c77a:	42b3      	cmp	r3, r6
 800c77c:	d114      	bne.n	800c7a8 <__gethex+0x2ac>
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d10b      	bne.n	800c79a <__gethex+0x29e>
 800c782:	9b01      	ldr	r3, [sp, #4]
 800c784:	9a07      	ldr	r2, [sp, #28]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	2662      	movs	r6, #98	; 0x62
 800c78a:	6013      	str	r3, [r2, #0]
 800c78c:	2301      	movs	r3, #1
 800c78e:	9a02      	ldr	r2, [sp, #8]
 800c790:	612b      	str	r3, [r5, #16]
 800c792:	6013      	str	r3, [r2, #0]
 800c794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c796:	601d      	str	r5, [r3, #0]
 800c798:	e739      	b.n	800c60e <__gethex+0x112>
 800c79a:	9900      	ldr	r1, [sp, #0]
 800c79c:	0028      	movs	r0, r5
 800c79e:	3901      	subs	r1, #1
 800c7a0:	f7fe fcc0 	bl	800b124 <__any_on>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d1ec      	bne.n	800c782 <__gethex+0x286>
 800c7a8:	0029      	movs	r1, r5
 800c7aa:	9803      	ldr	r0, [sp, #12]
 800c7ac:	f7fe f866 	bl	800a87c <_Bfree>
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7b4:	2650      	movs	r6, #80	; 0x50
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	e729      	b.n	800c60e <__gethex+0x112>
 800c7ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1f3      	bne.n	800c7a8 <__gethex+0x2ac>
 800c7c0:	e7df      	b.n	800c782 <__gethex+0x286>
 800c7c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1dc      	bne.n	800c782 <__gethex+0x286>
 800c7c8:	e7ee      	b.n	800c7a8 <__gethex+0x2ac>
 800c7ca:	46c0      	nop			; (mov r8, r8)
 800c7cc:	0800d42c 	.word	0x0800d42c
 800c7d0:	0800d2c5 	.word	0x0800d2c5
 800c7d4:	0800d5d6 	.word	0x0800d5d6
 800c7d8:	1e77      	subs	r7, r6, #1
 800c7da:	2c00      	cmp	r4, #0
 800c7dc:	d12f      	bne.n	800c83e <__gethex+0x342>
 800c7de:	2f00      	cmp	r7, #0
 800c7e0:	d004      	beq.n	800c7ec <__gethex+0x2f0>
 800c7e2:	0039      	movs	r1, r7
 800c7e4:	0028      	movs	r0, r5
 800c7e6:	f7fe fc9d 	bl	800b124 <__any_on>
 800c7ea:	0004      	movs	r4, r0
 800c7ec:	231f      	movs	r3, #31
 800c7ee:	117a      	asrs	r2, r7, #5
 800c7f0:	401f      	ands	r7, r3
 800c7f2:	3b1e      	subs	r3, #30
 800c7f4:	40bb      	lsls	r3, r7
 800c7f6:	9902      	ldr	r1, [sp, #8]
 800c7f8:	0092      	lsls	r2, r2, #2
 800c7fa:	5852      	ldr	r2, [r2, r1]
 800c7fc:	421a      	tst	r2, r3
 800c7fe:	d001      	beq.n	800c804 <__gethex+0x308>
 800c800:	2302      	movs	r3, #2
 800c802:	431c      	orrs	r4, r3
 800c804:	9b00      	ldr	r3, [sp, #0]
 800c806:	0031      	movs	r1, r6
 800c808:	1b9b      	subs	r3, r3, r6
 800c80a:	2602      	movs	r6, #2
 800c80c:	0028      	movs	r0, r5
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	f7ff fe09 	bl	800c426 <rshift>
 800c814:	9b01      	ldr	r3, [sp, #4]
 800c816:	685f      	ldr	r7, [r3, #4]
 800c818:	2c00      	cmp	r4, #0
 800c81a:	d041      	beq.n	800c8a0 <__gethex+0x3a4>
 800c81c:	9b01      	ldr	r3, [sp, #4]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	2b02      	cmp	r3, #2
 800c822:	d010      	beq.n	800c846 <__gethex+0x34a>
 800c824:	2b03      	cmp	r3, #3
 800c826:	d012      	beq.n	800c84e <__gethex+0x352>
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d106      	bne.n	800c83a <__gethex+0x33e>
 800c82c:	07a2      	lsls	r2, r4, #30
 800c82e:	d504      	bpl.n	800c83a <__gethex+0x33e>
 800c830:	9a02      	ldr	r2, [sp, #8]
 800c832:	6812      	ldr	r2, [r2, #0]
 800c834:	4314      	orrs	r4, r2
 800c836:	421c      	tst	r4, r3
 800c838:	d10c      	bne.n	800c854 <__gethex+0x358>
 800c83a:	2310      	movs	r3, #16
 800c83c:	e02f      	b.n	800c89e <__gethex+0x3a2>
 800c83e:	2401      	movs	r4, #1
 800c840:	e7d4      	b.n	800c7ec <__gethex+0x2f0>
 800c842:	2601      	movs	r6, #1
 800c844:	e7e8      	b.n	800c818 <__gethex+0x31c>
 800c846:	2301      	movs	r3, #1
 800c848:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c84a:	1a9b      	subs	r3, r3, r2
 800c84c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c84e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c850:	2b00      	cmp	r3, #0
 800c852:	d0f2      	beq.n	800c83a <__gethex+0x33e>
 800c854:	692b      	ldr	r3, [r5, #16]
 800c856:	2000      	movs	r0, #0
 800c858:	9302      	str	r3, [sp, #8]
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	9304      	str	r3, [sp, #16]
 800c85e:	002b      	movs	r3, r5
 800c860:	9a04      	ldr	r2, [sp, #16]
 800c862:	3314      	adds	r3, #20
 800c864:	1899      	adds	r1, r3, r2
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	1c54      	adds	r4, r2, #1
 800c86a:	d01e      	beq.n	800c8aa <__gethex+0x3ae>
 800c86c:	3201      	adds	r2, #1
 800c86e:	601a      	str	r2, [r3, #0]
 800c870:	002b      	movs	r3, r5
 800c872:	3314      	adds	r3, #20
 800c874:	2e02      	cmp	r6, #2
 800c876:	d141      	bne.n	800c8fc <__gethex+0x400>
 800c878:	9a01      	ldr	r2, [sp, #4]
 800c87a:	9900      	ldr	r1, [sp, #0]
 800c87c:	6812      	ldr	r2, [r2, #0]
 800c87e:	3a01      	subs	r2, #1
 800c880:	428a      	cmp	r2, r1
 800c882:	d10b      	bne.n	800c89c <__gethex+0x3a0>
 800c884:	221f      	movs	r2, #31
 800c886:	9800      	ldr	r0, [sp, #0]
 800c888:	1149      	asrs	r1, r1, #5
 800c88a:	4002      	ands	r2, r0
 800c88c:	2001      	movs	r0, #1
 800c88e:	0004      	movs	r4, r0
 800c890:	4094      	lsls	r4, r2
 800c892:	0089      	lsls	r1, r1, #2
 800c894:	58cb      	ldr	r3, [r1, r3]
 800c896:	4223      	tst	r3, r4
 800c898:	d000      	beq.n	800c89c <__gethex+0x3a0>
 800c89a:	2601      	movs	r6, #1
 800c89c:	2320      	movs	r3, #32
 800c89e:	431e      	orrs	r6, r3
 800c8a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8a2:	601d      	str	r5, [r3, #0]
 800c8a4:	9b07      	ldr	r3, [sp, #28]
 800c8a6:	601f      	str	r7, [r3, #0]
 800c8a8:	e6b1      	b.n	800c60e <__gethex+0x112>
 800c8aa:	c301      	stmia	r3!, {r0}
 800c8ac:	4299      	cmp	r1, r3
 800c8ae:	d8da      	bhi.n	800c866 <__gethex+0x36a>
 800c8b0:	68ab      	ldr	r3, [r5, #8]
 800c8b2:	9a02      	ldr	r2, [sp, #8]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	db18      	blt.n	800c8ea <__gethex+0x3ee>
 800c8b8:	6869      	ldr	r1, [r5, #4]
 800c8ba:	9803      	ldr	r0, [sp, #12]
 800c8bc:	3101      	adds	r1, #1
 800c8be:	f7fd ff99 	bl	800a7f4 <_Balloc>
 800c8c2:	1e04      	subs	r4, r0, #0
 800c8c4:	d104      	bne.n	800c8d0 <__gethex+0x3d4>
 800c8c6:	0022      	movs	r2, r4
 800c8c8:	2184      	movs	r1, #132	; 0x84
 800c8ca:	4b1c      	ldr	r3, [pc, #112]	; (800c93c <__gethex+0x440>)
 800c8cc:	481c      	ldr	r0, [pc, #112]	; (800c940 <__gethex+0x444>)
 800c8ce:	e6c2      	b.n	800c656 <__gethex+0x15a>
 800c8d0:	0029      	movs	r1, r5
 800c8d2:	692a      	ldr	r2, [r5, #16]
 800c8d4:	310c      	adds	r1, #12
 800c8d6:	3202      	adds	r2, #2
 800c8d8:	0092      	lsls	r2, r2, #2
 800c8da:	300c      	adds	r0, #12
 800c8dc:	f7ff fd48 	bl	800c370 <memcpy>
 800c8e0:	0029      	movs	r1, r5
 800c8e2:	9803      	ldr	r0, [sp, #12]
 800c8e4:	f7fd ffca 	bl	800a87c <_Bfree>
 800c8e8:	0025      	movs	r5, r4
 800c8ea:	692b      	ldr	r3, [r5, #16]
 800c8ec:	1c5a      	adds	r2, r3, #1
 800c8ee:	612a      	str	r2, [r5, #16]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	18eb      	adds	r3, r5, r3
 800c8f8:	605a      	str	r2, [r3, #4]
 800c8fa:	e7b9      	b.n	800c870 <__gethex+0x374>
 800c8fc:	692a      	ldr	r2, [r5, #16]
 800c8fe:	9902      	ldr	r1, [sp, #8]
 800c900:	428a      	cmp	r2, r1
 800c902:	dd09      	ble.n	800c918 <__gethex+0x41c>
 800c904:	2101      	movs	r1, #1
 800c906:	0028      	movs	r0, r5
 800c908:	f7ff fd8d 	bl	800c426 <rshift>
 800c90c:	9b01      	ldr	r3, [sp, #4]
 800c90e:	3701      	adds	r7, #1
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	42bb      	cmp	r3, r7
 800c914:	dac1      	bge.n	800c89a <__gethex+0x39e>
 800c916:	e6e4      	b.n	800c6e2 <__gethex+0x1e6>
 800c918:	221f      	movs	r2, #31
 800c91a:	9c00      	ldr	r4, [sp, #0]
 800c91c:	9900      	ldr	r1, [sp, #0]
 800c91e:	2601      	movs	r6, #1
 800c920:	4014      	ands	r4, r2
 800c922:	4211      	tst	r1, r2
 800c924:	d0ba      	beq.n	800c89c <__gethex+0x3a0>
 800c926:	9a04      	ldr	r2, [sp, #16]
 800c928:	189b      	adds	r3, r3, r2
 800c92a:	3b04      	subs	r3, #4
 800c92c:	6818      	ldr	r0, [r3, #0]
 800c92e:	f7fe f859 	bl	800a9e4 <__hi0bits>
 800c932:	2320      	movs	r3, #32
 800c934:	1b1b      	subs	r3, r3, r4
 800c936:	4298      	cmp	r0, r3
 800c938:	dbe4      	blt.n	800c904 <__gethex+0x408>
 800c93a:	e7af      	b.n	800c89c <__gethex+0x3a0>
 800c93c:	0800d2c5 	.word	0x0800d2c5
 800c940:	0800d5d6 	.word	0x0800d5d6

0800c944 <L_shift>:
 800c944:	2308      	movs	r3, #8
 800c946:	b570      	push	{r4, r5, r6, lr}
 800c948:	2520      	movs	r5, #32
 800c94a:	1a9a      	subs	r2, r3, r2
 800c94c:	0092      	lsls	r2, r2, #2
 800c94e:	1aad      	subs	r5, r5, r2
 800c950:	6843      	ldr	r3, [r0, #4]
 800c952:	6804      	ldr	r4, [r0, #0]
 800c954:	001e      	movs	r6, r3
 800c956:	40ae      	lsls	r6, r5
 800c958:	40d3      	lsrs	r3, r2
 800c95a:	4334      	orrs	r4, r6
 800c95c:	6004      	str	r4, [r0, #0]
 800c95e:	6043      	str	r3, [r0, #4]
 800c960:	3004      	adds	r0, #4
 800c962:	4288      	cmp	r0, r1
 800c964:	d3f4      	bcc.n	800c950 <L_shift+0xc>
 800c966:	bd70      	pop	{r4, r5, r6, pc}

0800c968 <__match>:
 800c968:	b530      	push	{r4, r5, lr}
 800c96a:	6803      	ldr	r3, [r0, #0]
 800c96c:	780c      	ldrb	r4, [r1, #0]
 800c96e:	3301      	adds	r3, #1
 800c970:	2c00      	cmp	r4, #0
 800c972:	d102      	bne.n	800c97a <__match+0x12>
 800c974:	6003      	str	r3, [r0, #0]
 800c976:	2001      	movs	r0, #1
 800c978:	bd30      	pop	{r4, r5, pc}
 800c97a:	781a      	ldrb	r2, [r3, #0]
 800c97c:	0015      	movs	r5, r2
 800c97e:	3d41      	subs	r5, #65	; 0x41
 800c980:	2d19      	cmp	r5, #25
 800c982:	d800      	bhi.n	800c986 <__match+0x1e>
 800c984:	3220      	adds	r2, #32
 800c986:	3101      	adds	r1, #1
 800c988:	42a2      	cmp	r2, r4
 800c98a:	d0ef      	beq.n	800c96c <__match+0x4>
 800c98c:	2000      	movs	r0, #0
 800c98e:	e7f3      	b.n	800c978 <__match+0x10>

0800c990 <__hexnan>:
 800c990:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c992:	680b      	ldr	r3, [r1, #0]
 800c994:	b08b      	sub	sp, #44	; 0x2c
 800c996:	9201      	str	r2, [sp, #4]
 800c998:	9901      	ldr	r1, [sp, #4]
 800c99a:	115a      	asrs	r2, r3, #5
 800c99c:	0092      	lsls	r2, r2, #2
 800c99e:	188a      	adds	r2, r1, r2
 800c9a0:	9202      	str	r2, [sp, #8]
 800c9a2:	0019      	movs	r1, r3
 800c9a4:	221f      	movs	r2, #31
 800c9a6:	4011      	ands	r1, r2
 800c9a8:	9008      	str	r0, [sp, #32]
 800c9aa:	9106      	str	r1, [sp, #24]
 800c9ac:	4213      	tst	r3, r2
 800c9ae:	d002      	beq.n	800c9b6 <__hexnan+0x26>
 800c9b0:	9b02      	ldr	r3, [sp, #8]
 800c9b2:	3304      	adds	r3, #4
 800c9b4:	9302      	str	r3, [sp, #8]
 800c9b6:	9b02      	ldr	r3, [sp, #8]
 800c9b8:	2500      	movs	r5, #0
 800c9ba:	1f1f      	subs	r7, r3, #4
 800c9bc:	003e      	movs	r6, r7
 800c9be:	003c      	movs	r4, r7
 800c9c0:	9b08      	ldr	r3, [sp, #32]
 800c9c2:	603d      	str	r5, [r7, #0]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	9507      	str	r5, [sp, #28]
 800c9c8:	9305      	str	r3, [sp, #20]
 800c9ca:	9503      	str	r5, [sp, #12]
 800c9cc:	9b05      	ldr	r3, [sp, #20]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c9d2:	9b05      	ldr	r3, [sp, #20]
 800c9d4:	785b      	ldrb	r3, [r3, #1]
 800c9d6:	9304      	str	r3, [sp, #16]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d028      	beq.n	800ca2e <__hexnan+0x9e>
 800c9dc:	9804      	ldr	r0, [sp, #16]
 800c9de:	f7ff fd77 	bl	800c4d0 <__hexdig_fun>
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	d154      	bne.n	800ca90 <__hexnan+0x100>
 800c9e6:	9b04      	ldr	r3, [sp, #16]
 800c9e8:	2b20      	cmp	r3, #32
 800c9ea:	d819      	bhi.n	800ca20 <__hexnan+0x90>
 800c9ec:	9b03      	ldr	r3, [sp, #12]
 800c9ee:	9a07      	ldr	r2, [sp, #28]
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	dd12      	ble.n	800ca1a <__hexnan+0x8a>
 800c9f4:	42b4      	cmp	r4, r6
 800c9f6:	d206      	bcs.n	800ca06 <__hexnan+0x76>
 800c9f8:	2d07      	cmp	r5, #7
 800c9fa:	dc04      	bgt.n	800ca06 <__hexnan+0x76>
 800c9fc:	002a      	movs	r2, r5
 800c9fe:	0031      	movs	r1, r6
 800ca00:	0020      	movs	r0, r4
 800ca02:	f7ff ff9f 	bl	800c944 <L_shift>
 800ca06:	9b01      	ldr	r3, [sp, #4]
 800ca08:	2508      	movs	r5, #8
 800ca0a:	429c      	cmp	r4, r3
 800ca0c:	d905      	bls.n	800ca1a <__hexnan+0x8a>
 800ca0e:	1f26      	subs	r6, r4, #4
 800ca10:	2500      	movs	r5, #0
 800ca12:	0034      	movs	r4, r6
 800ca14:	9b03      	ldr	r3, [sp, #12]
 800ca16:	6035      	str	r5, [r6, #0]
 800ca18:	9307      	str	r3, [sp, #28]
 800ca1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca1c:	9305      	str	r3, [sp, #20]
 800ca1e:	e7d5      	b.n	800c9cc <__hexnan+0x3c>
 800ca20:	9b04      	ldr	r3, [sp, #16]
 800ca22:	2b29      	cmp	r3, #41	; 0x29
 800ca24:	d159      	bne.n	800cada <__hexnan+0x14a>
 800ca26:	9b05      	ldr	r3, [sp, #20]
 800ca28:	9a08      	ldr	r2, [sp, #32]
 800ca2a:	3302      	adds	r3, #2
 800ca2c:	6013      	str	r3, [r2, #0]
 800ca2e:	9b03      	ldr	r3, [sp, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d052      	beq.n	800cada <__hexnan+0x14a>
 800ca34:	42b4      	cmp	r4, r6
 800ca36:	d206      	bcs.n	800ca46 <__hexnan+0xb6>
 800ca38:	2d07      	cmp	r5, #7
 800ca3a:	dc04      	bgt.n	800ca46 <__hexnan+0xb6>
 800ca3c:	002a      	movs	r2, r5
 800ca3e:	0031      	movs	r1, r6
 800ca40:	0020      	movs	r0, r4
 800ca42:	f7ff ff7f 	bl	800c944 <L_shift>
 800ca46:	9b01      	ldr	r3, [sp, #4]
 800ca48:	429c      	cmp	r4, r3
 800ca4a:	d935      	bls.n	800cab8 <__hexnan+0x128>
 800ca4c:	001a      	movs	r2, r3
 800ca4e:	0023      	movs	r3, r4
 800ca50:	cb02      	ldmia	r3!, {r1}
 800ca52:	c202      	stmia	r2!, {r1}
 800ca54:	429f      	cmp	r7, r3
 800ca56:	d2fb      	bcs.n	800ca50 <__hexnan+0xc0>
 800ca58:	9b02      	ldr	r3, [sp, #8]
 800ca5a:	1c62      	adds	r2, r4, #1
 800ca5c:	1ed9      	subs	r1, r3, #3
 800ca5e:	2304      	movs	r3, #4
 800ca60:	4291      	cmp	r1, r2
 800ca62:	d305      	bcc.n	800ca70 <__hexnan+0xe0>
 800ca64:	9b02      	ldr	r3, [sp, #8]
 800ca66:	3b04      	subs	r3, #4
 800ca68:	1b1b      	subs	r3, r3, r4
 800ca6a:	089b      	lsrs	r3, r3, #2
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	9a01      	ldr	r2, [sp, #4]
 800ca72:	18d3      	adds	r3, r2, r3
 800ca74:	2200      	movs	r2, #0
 800ca76:	c304      	stmia	r3!, {r2}
 800ca78:	429f      	cmp	r7, r3
 800ca7a:	d2fc      	bcs.n	800ca76 <__hexnan+0xe6>
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d104      	bne.n	800ca8c <__hexnan+0xfc>
 800ca82:	9b01      	ldr	r3, [sp, #4]
 800ca84:	429f      	cmp	r7, r3
 800ca86:	d126      	bne.n	800cad6 <__hexnan+0x146>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	603b      	str	r3, [r7, #0]
 800ca8c:	2005      	movs	r0, #5
 800ca8e:	e025      	b.n	800cadc <__hexnan+0x14c>
 800ca90:	9b03      	ldr	r3, [sp, #12]
 800ca92:	3501      	adds	r5, #1
 800ca94:	3301      	adds	r3, #1
 800ca96:	9303      	str	r3, [sp, #12]
 800ca98:	2d08      	cmp	r5, #8
 800ca9a:	dd06      	ble.n	800caaa <__hexnan+0x11a>
 800ca9c:	9b01      	ldr	r3, [sp, #4]
 800ca9e:	429c      	cmp	r4, r3
 800caa0:	d9bb      	bls.n	800ca1a <__hexnan+0x8a>
 800caa2:	2300      	movs	r3, #0
 800caa4:	2501      	movs	r5, #1
 800caa6:	3c04      	subs	r4, #4
 800caa8:	6023      	str	r3, [r4, #0]
 800caaa:	220f      	movs	r2, #15
 800caac:	6823      	ldr	r3, [r4, #0]
 800caae:	4010      	ands	r0, r2
 800cab0:	011b      	lsls	r3, r3, #4
 800cab2:	4303      	orrs	r3, r0
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	e7b0      	b.n	800ca1a <__hexnan+0x8a>
 800cab8:	9b06      	ldr	r3, [sp, #24]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d0de      	beq.n	800ca7c <__hexnan+0xec>
 800cabe:	2320      	movs	r3, #32
 800cac0:	9a06      	ldr	r2, [sp, #24]
 800cac2:	9902      	ldr	r1, [sp, #8]
 800cac4:	1a9b      	subs	r3, r3, r2
 800cac6:	2201      	movs	r2, #1
 800cac8:	4252      	negs	r2, r2
 800caca:	40da      	lsrs	r2, r3
 800cacc:	3904      	subs	r1, #4
 800cace:	680b      	ldr	r3, [r1, #0]
 800cad0:	4013      	ands	r3, r2
 800cad2:	600b      	str	r3, [r1, #0]
 800cad4:	e7d2      	b.n	800ca7c <__hexnan+0xec>
 800cad6:	3f04      	subs	r7, #4
 800cad8:	e7d0      	b.n	800ca7c <__hexnan+0xec>
 800cada:	2004      	movs	r0, #4
 800cadc:	b00b      	add	sp, #44	; 0x2c
 800cade:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cae0 <__ascii_mbtowc>:
 800cae0:	b082      	sub	sp, #8
 800cae2:	2900      	cmp	r1, #0
 800cae4:	d100      	bne.n	800cae8 <__ascii_mbtowc+0x8>
 800cae6:	a901      	add	r1, sp, #4
 800cae8:	1e10      	subs	r0, r2, #0
 800caea:	d006      	beq.n	800cafa <__ascii_mbtowc+0x1a>
 800caec:	2b00      	cmp	r3, #0
 800caee:	d006      	beq.n	800cafe <__ascii_mbtowc+0x1e>
 800caf0:	7813      	ldrb	r3, [r2, #0]
 800caf2:	600b      	str	r3, [r1, #0]
 800caf4:	7810      	ldrb	r0, [r2, #0]
 800caf6:	1e43      	subs	r3, r0, #1
 800caf8:	4198      	sbcs	r0, r3
 800cafa:	b002      	add	sp, #8
 800cafc:	4770      	bx	lr
 800cafe:	2002      	movs	r0, #2
 800cb00:	4240      	negs	r0, r0
 800cb02:	e7fa      	b.n	800cafa <__ascii_mbtowc+0x1a>

0800cb04 <_realloc_r>:
 800cb04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb06:	0007      	movs	r7, r0
 800cb08:	000e      	movs	r6, r1
 800cb0a:	0014      	movs	r4, r2
 800cb0c:	2900      	cmp	r1, #0
 800cb0e:	d105      	bne.n	800cb1c <_realloc_r+0x18>
 800cb10:	0011      	movs	r1, r2
 800cb12:	f7fd fddd 	bl	800a6d0 <_malloc_r>
 800cb16:	0005      	movs	r5, r0
 800cb18:	0028      	movs	r0, r5
 800cb1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb1c:	2a00      	cmp	r2, #0
 800cb1e:	d103      	bne.n	800cb28 <_realloc_r+0x24>
 800cb20:	f7fd fd60 	bl	800a5e4 <_free_r>
 800cb24:	0025      	movs	r5, r4
 800cb26:	e7f7      	b.n	800cb18 <_realloc_r+0x14>
 800cb28:	f000 f83f 	bl	800cbaa <_malloc_usable_size_r>
 800cb2c:	9001      	str	r0, [sp, #4]
 800cb2e:	4284      	cmp	r4, r0
 800cb30:	d803      	bhi.n	800cb3a <_realloc_r+0x36>
 800cb32:	0035      	movs	r5, r6
 800cb34:	0843      	lsrs	r3, r0, #1
 800cb36:	42a3      	cmp	r3, r4
 800cb38:	d3ee      	bcc.n	800cb18 <_realloc_r+0x14>
 800cb3a:	0021      	movs	r1, r4
 800cb3c:	0038      	movs	r0, r7
 800cb3e:	f7fd fdc7 	bl	800a6d0 <_malloc_r>
 800cb42:	1e05      	subs	r5, r0, #0
 800cb44:	d0e8      	beq.n	800cb18 <_realloc_r+0x14>
 800cb46:	9b01      	ldr	r3, [sp, #4]
 800cb48:	0022      	movs	r2, r4
 800cb4a:	429c      	cmp	r4, r3
 800cb4c:	d900      	bls.n	800cb50 <_realloc_r+0x4c>
 800cb4e:	001a      	movs	r2, r3
 800cb50:	0031      	movs	r1, r6
 800cb52:	0028      	movs	r0, r5
 800cb54:	f7ff fc0c 	bl	800c370 <memcpy>
 800cb58:	0031      	movs	r1, r6
 800cb5a:	0038      	movs	r0, r7
 800cb5c:	f7fd fd42 	bl	800a5e4 <_free_r>
 800cb60:	e7da      	b.n	800cb18 <_realloc_r+0x14>

0800cb62 <__ascii_wctomb>:
 800cb62:	0003      	movs	r3, r0
 800cb64:	1e08      	subs	r0, r1, #0
 800cb66:	d005      	beq.n	800cb74 <__ascii_wctomb+0x12>
 800cb68:	2aff      	cmp	r2, #255	; 0xff
 800cb6a:	d904      	bls.n	800cb76 <__ascii_wctomb+0x14>
 800cb6c:	228a      	movs	r2, #138	; 0x8a
 800cb6e:	2001      	movs	r0, #1
 800cb70:	601a      	str	r2, [r3, #0]
 800cb72:	4240      	negs	r0, r0
 800cb74:	4770      	bx	lr
 800cb76:	2001      	movs	r0, #1
 800cb78:	700a      	strb	r2, [r1, #0]
 800cb7a:	e7fb      	b.n	800cb74 <__ascii_wctomb+0x12>

0800cb7c <fiprintf>:
 800cb7c:	b40e      	push	{r1, r2, r3}
 800cb7e:	b517      	push	{r0, r1, r2, r4, lr}
 800cb80:	4c05      	ldr	r4, [pc, #20]	; (800cb98 <fiprintf+0x1c>)
 800cb82:	ab05      	add	r3, sp, #20
 800cb84:	cb04      	ldmia	r3!, {r2}
 800cb86:	0001      	movs	r1, r0
 800cb88:	6820      	ldr	r0, [r4, #0]
 800cb8a:	9301      	str	r3, [sp, #4]
 800cb8c:	f000 f83c 	bl	800cc08 <_vfiprintf_r>
 800cb90:	bc1e      	pop	{r1, r2, r3, r4}
 800cb92:	bc08      	pop	{r3}
 800cb94:	b003      	add	sp, #12
 800cb96:	4718      	bx	r3
 800cb98:	20000064 	.word	0x20000064

0800cb9c <abort>:
 800cb9c:	2006      	movs	r0, #6
 800cb9e:	b510      	push	{r4, lr}
 800cba0:	f000 fa1e 	bl	800cfe0 <raise>
 800cba4:	2001      	movs	r0, #1
 800cba6:	f7f6 fe71 	bl	800388c <_exit>

0800cbaa <_malloc_usable_size_r>:
 800cbaa:	1f0b      	subs	r3, r1, #4
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	1f18      	subs	r0, r3, #4
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	da01      	bge.n	800cbb8 <_malloc_usable_size_r+0xe>
 800cbb4:	580b      	ldr	r3, [r1, r0]
 800cbb6:	18c0      	adds	r0, r0, r3
 800cbb8:	4770      	bx	lr

0800cbba <__sfputc_r>:
 800cbba:	6893      	ldr	r3, [r2, #8]
 800cbbc:	b510      	push	{r4, lr}
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	6093      	str	r3, [r2, #8]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	da04      	bge.n	800cbd0 <__sfputc_r+0x16>
 800cbc6:	6994      	ldr	r4, [r2, #24]
 800cbc8:	42a3      	cmp	r3, r4
 800cbca:	db07      	blt.n	800cbdc <__sfputc_r+0x22>
 800cbcc:	290a      	cmp	r1, #10
 800cbce:	d005      	beq.n	800cbdc <__sfputc_r+0x22>
 800cbd0:	6813      	ldr	r3, [r2, #0]
 800cbd2:	1c58      	adds	r0, r3, #1
 800cbd4:	6010      	str	r0, [r2, #0]
 800cbd6:	7019      	strb	r1, [r3, #0]
 800cbd8:	0008      	movs	r0, r1
 800cbda:	bd10      	pop	{r4, pc}
 800cbdc:	f000 f930 	bl	800ce40 <__swbuf_r>
 800cbe0:	0001      	movs	r1, r0
 800cbe2:	e7f9      	b.n	800cbd8 <__sfputc_r+0x1e>

0800cbe4 <__sfputs_r>:
 800cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe6:	0006      	movs	r6, r0
 800cbe8:	000f      	movs	r7, r1
 800cbea:	0014      	movs	r4, r2
 800cbec:	18d5      	adds	r5, r2, r3
 800cbee:	42ac      	cmp	r4, r5
 800cbf0:	d101      	bne.n	800cbf6 <__sfputs_r+0x12>
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	e007      	b.n	800cc06 <__sfputs_r+0x22>
 800cbf6:	7821      	ldrb	r1, [r4, #0]
 800cbf8:	003a      	movs	r2, r7
 800cbfa:	0030      	movs	r0, r6
 800cbfc:	f7ff ffdd 	bl	800cbba <__sfputc_r>
 800cc00:	3401      	adds	r4, #1
 800cc02:	1c43      	adds	r3, r0, #1
 800cc04:	d1f3      	bne.n	800cbee <__sfputs_r+0xa>
 800cc06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc08 <_vfiprintf_r>:
 800cc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc0a:	b0a1      	sub	sp, #132	; 0x84
 800cc0c:	000f      	movs	r7, r1
 800cc0e:	0015      	movs	r5, r2
 800cc10:	001e      	movs	r6, r3
 800cc12:	9003      	str	r0, [sp, #12]
 800cc14:	2800      	cmp	r0, #0
 800cc16:	d004      	beq.n	800cc22 <_vfiprintf_r+0x1a>
 800cc18:	6a03      	ldr	r3, [r0, #32]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d101      	bne.n	800cc22 <_vfiprintf_r+0x1a>
 800cc1e:	f7fc fd0d 	bl	800963c <__sinit>
 800cc22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc24:	07db      	lsls	r3, r3, #31
 800cc26:	d405      	bmi.n	800cc34 <_vfiprintf_r+0x2c>
 800cc28:	89bb      	ldrh	r3, [r7, #12]
 800cc2a:	059b      	lsls	r3, r3, #22
 800cc2c:	d402      	bmi.n	800cc34 <_vfiprintf_r+0x2c>
 800cc2e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cc30:	f7fc fe29 	bl	8009886 <__retarget_lock_acquire_recursive>
 800cc34:	89bb      	ldrh	r3, [r7, #12]
 800cc36:	071b      	lsls	r3, r3, #28
 800cc38:	d502      	bpl.n	800cc40 <_vfiprintf_r+0x38>
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d113      	bne.n	800cc68 <_vfiprintf_r+0x60>
 800cc40:	0039      	movs	r1, r7
 800cc42:	9803      	ldr	r0, [sp, #12]
 800cc44:	f000 f93e 	bl	800cec4 <__swsetup_r>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d00d      	beq.n	800cc68 <_vfiprintf_r+0x60>
 800cc4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc4e:	07db      	lsls	r3, r3, #31
 800cc50:	d503      	bpl.n	800cc5a <_vfiprintf_r+0x52>
 800cc52:	2001      	movs	r0, #1
 800cc54:	4240      	negs	r0, r0
 800cc56:	b021      	add	sp, #132	; 0x84
 800cc58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc5a:	89bb      	ldrh	r3, [r7, #12]
 800cc5c:	059b      	lsls	r3, r3, #22
 800cc5e:	d4f8      	bmi.n	800cc52 <_vfiprintf_r+0x4a>
 800cc60:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cc62:	f7fc fe11 	bl	8009888 <__retarget_lock_release_recursive>
 800cc66:	e7f4      	b.n	800cc52 <_vfiprintf_r+0x4a>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	ac08      	add	r4, sp, #32
 800cc6c:	6163      	str	r3, [r4, #20]
 800cc6e:	3320      	adds	r3, #32
 800cc70:	7663      	strb	r3, [r4, #25]
 800cc72:	3310      	adds	r3, #16
 800cc74:	76a3      	strb	r3, [r4, #26]
 800cc76:	9607      	str	r6, [sp, #28]
 800cc78:	002e      	movs	r6, r5
 800cc7a:	7833      	ldrb	r3, [r6, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d001      	beq.n	800cc84 <_vfiprintf_r+0x7c>
 800cc80:	2b25      	cmp	r3, #37	; 0x25
 800cc82:	d148      	bne.n	800cd16 <_vfiprintf_r+0x10e>
 800cc84:	1b73      	subs	r3, r6, r5
 800cc86:	9305      	str	r3, [sp, #20]
 800cc88:	42ae      	cmp	r6, r5
 800cc8a:	d00b      	beq.n	800cca4 <_vfiprintf_r+0x9c>
 800cc8c:	002a      	movs	r2, r5
 800cc8e:	0039      	movs	r1, r7
 800cc90:	9803      	ldr	r0, [sp, #12]
 800cc92:	f7ff ffa7 	bl	800cbe4 <__sfputs_r>
 800cc96:	3001      	adds	r0, #1
 800cc98:	d100      	bne.n	800cc9c <_vfiprintf_r+0x94>
 800cc9a:	e0af      	b.n	800cdfc <_vfiprintf_r+0x1f4>
 800cc9c:	6963      	ldr	r3, [r4, #20]
 800cc9e:	9a05      	ldr	r2, [sp, #20]
 800cca0:	189b      	adds	r3, r3, r2
 800cca2:	6163      	str	r3, [r4, #20]
 800cca4:	7833      	ldrb	r3, [r6, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d100      	bne.n	800ccac <_vfiprintf_r+0xa4>
 800ccaa:	e0a7      	b.n	800cdfc <_vfiprintf_r+0x1f4>
 800ccac:	2201      	movs	r2, #1
 800ccae:	2300      	movs	r3, #0
 800ccb0:	4252      	negs	r2, r2
 800ccb2:	6062      	str	r2, [r4, #4]
 800ccb4:	a904      	add	r1, sp, #16
 800ccb6:	3254      	adds	r2, #84	; 0x54
 800ccb8:	1852      	adds	r2, r2, r1
 800ccba:	1c75      	adds	r5, r6, #1
 800ccbc:	6023      	str	r3, [r4, #0]
 800ccbe:	60e3      	str	r3, [r4, #12]
 800ccc0:	60a3      	str	r3, [r4, #8]
 800ccc2:	7013      	strb	r3, [r2, #0]
 800ccc4:	65a3      	str	r3, [r4, #88]	; 0x58
 800ccc6:	4b59      	ldr	r3, [pc, #356]	; (800ce2c <_vfiprintf_r+0x224>)
 800ccc8:	2205      	movs	r2, #5
 800ccca:	0018      	movs	r0, r3
 800cccc:	7829      	ldrb	r1, [r5, #0]
 800ccce:	9305      	str	r3, [sp, #20]
 800ccd0:	f7fc fddb 	bl	800988a <memchr>
 800ccd4:	1c6e      	adds	r6, r5, #1
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	d11f      	bne.n	800cd1a <_vfiprintf_r+0x112>
 800ccda:	6822      	ldr	r2, [r4, #0]
 800ccdc:	06d3      	lsls	r3, r2, #27
 800ccde:	d504      	bpl.n	800ccea <_vfiprintf_r+0xe2>
 800cce0:	2353      	movs	r3, #83	; 0x53
 800cce2:	a904      	add	r1, sp, #16
 800cce4:	185b      	adds	r3, r3, r1
 800cce6:	2120      	movs	r1, #32
 800cce8:	7019      	strb	r1, [r3, #0]
 800ccea:	0713      	lsls	r3, r2, #28
 800ccec:	d504      	bpl.n	800ccf8 <_vfiprintf_r+0xf0>
 800ccee:	2353      	movs	r3, #83	; 0x53
 800ccf0:	a904      	add	r1, sp, #16
 800ccf2:	185b      	adds	r3, r3, r1
 800ccf4:	212b      	movs	r1, #43	; 0x2b
 800ccf6:	7019      	strb	r1, [r3, #0]
 800ccf8:	782b      	ldrb	r3, [r5, #0]
 800ccfa:	2b2a      	cmp	r3, #42	; 0x2a
 800ccfc:	d016      	beq.n	800cd2c <_vfiprintf_r+0x124>
 800ccfe:	002e      	movs	r6, r5
 800cd00:	2100      	movs	r1, #0
 800cd02:	200a      	movs	r0, #10
 800cd04:	68e3      	ldr	r3, [r4, #12]
 800cd06:	7832      	ldrb	r2, [r6, #0]
 800cd08:	1c75      	adds	r5, r6, #1
 800cd0a:	3a30      	subs	r2, #48	; 0x30
 800cd0c:	2a09      	cmp	r2, #9
 800cd0e:	d94e      	bls.n	800cdae <_vfiprintf_r+0x1a6>
 800cd10:	2900      	cmp	r1, #0
 800cd12:	d111      	bne.n	800cd38 <_vfiprintf_r+0x130>
 800cd14:	e017      	b.n	800cd46 <_vfiprintf_r+0x13e>
 800cd16:	3601      	adds	r6, #1
 800cd18:	e7af      	b.n	800cc7a <_vfiprintf_r+0x72>
 800cd1a:	9b05      	ldr	r3, [sp, #20]
 800cd1c:	6822      	ldr	r2, [r4, #0]
 800cd1e:	1ac0      	subs	r0, r0, r3
 800cd20:	2301      	movs	r3, #1
 800cd22:	4083      	lsls	r3, r0
 800cd24:	4313      	orrs	r3, r2
 800cd26:	0035      	movs	r5, r6
 800cd28:	6023      	str	r3, [r4, #0]
 800cd2a:	e7cc      	b.n	800ccc6 <_vfiprintf_r+0xbe>
 800cd2c:	9b07      	ldr	r3, [sp, #28]
 800cd2e:	1d19      	adds	r1, r3, #4
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	9107      	str	r1, [sp, #28]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	db01      	blt.n	800cd3c <_vfiprintf_r+0x134>
 800cd38:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd3a:	e004      	b.n	800cd46 <_vfiprintf_r+0x13e>
 800cd3c:	425b      	negs	r3, r3
 800cd3e:	60e3      	str	r3, [r4, #12]
 800cd40:	2302      	movs	r3, #2
 800cd42:	4313      	orrs	r3, r2
 800cd44:	6023      	str	r3, [r4, #0]
 800cd46:	7833      	ldrb	r3, [r6, #0]
 800cd48:	2b2e      	cmp	r3, #46	; 0x2e
 800cd4a:	d10a      	bne.n	800cd62 <_vfiprintf_r+0x15a>
 800cd4c:	7873      	ldrb	r3, [r6, #1]
 800cd4e:	2b2a      	cmp	r3, #42	; 0x2a
 800cd50:	d135      	bne.n	800cdbe <_vfiprintf_r+0x1b6>
 800cd52:	9b07      	ldr	r3, [sp, #28]
 800cd54:	3602      	adds	r6, #2
 800cd56:	1d1a      	adds	r2, r3, #4
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	9207      	str	r2, [sp, #28]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	db2b      	blt.n	800cdb8 <_vfiprintf_r+0x1b0>
 800cd60:	9309      	str	r3, [sp, #36]	; 0x24
 800cd62:	4d33      	ldr	r5, [pc, #204]	; (800ce30 <_vfiprintf_r+0x228>)
 800cd64:	2203      	movs	r2, #3
 800cd66:	0028      	movs	r0, r5
 800cd68:	7831      	ldrb	r1, [r6, #0]
 800cd6a:	f7fc fd8e 	bl	800988a <memchr>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	d006      	beq.n	800cd80 <_vfiprintf_r+0x178>
 800cd72:	2340      	movs	r3, #64	; 0x40
 800cd74:	1b40      	subs	r0, r0, r5
 800cd76:	4083      	lsls	r3, r0
 800cd78:	6822      	ldr	r2, [r4, #0]
 800cd7a:	3601      	adds	r6, #1
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	6023      	str	r3, [r4, #0]
 800cd80:	7831      	ldrb	r1, [r6, #0]
 800cd82:	2206      	movs	r2, #6
 800cd84:	482b      	ldr	r0, [pc, #172]	; (800ce34 <_vfiprintf_r+0x22c>)
 800cd86:	1c75      	adds	r5, r6, #1
 800cd88:	7621      	strb	r1, [r4, #24]
 800cd8a:	f7fc fd7e 	bl	800988a <memchr>
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	d043      	beq.n	800ce1a <_vfiprintf_r+0x212>
 800cd92:	4b29      	ldr	r3, [pc, #164]	; (800ce38 <_vfiprintf_r+0x230>)
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d125      	bne.n	800cde4 <_vfiprintf_r+0x1dc>
 800cd98:	2207      	movs	r2, #7
 800cd9a:	9b07      	ldr	r3, [sp, #28]
 800cd9c:	3307      	adds	r3, #7
 800cd9e:	4393      	bics	r3, r2
 800cda0:	3308      	adds	r3, #8
 800cda2:	9307      	str	r3, [sp, #28]
 800cda4:	6963      	ldr	r3, [r4, #20]
 800cda6:	9a04      	ldr	r2, [sp, #16]
 800cda8:	189b      	adds	r3, r3, r2
 800cdaa:	6163      	str	r3, [r4, #20]
 800cdac:	e764      	b.n	800cc78 <_vfiprintf_r+0x70>
 800cdae:	4343      	muls	r3, r0
 800cdb0:	002e      	movs	r6, r5
 800cdb2:	2101      	movs	r1, #1
 800cdb4:	189b      	adds	r3, r3, r2
 800cdb6:	e7a6      	b.n	800cd06 <_vfiprintf_r+0xfe>
 800cdb8:	2301      	movs	r3, #1
 800cdba:	425b      	negs	r3, r3
 800cdbc:	e7d0      	b.n	800cd60 <_vfiprintf_r+0x158>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	200a      	movs	r0, #10
 800cdc2:	001a      	movs	r2, r3
 800cdc4:	3601      	adds	r6, #1
 800cdc6:	6063      	str	r3, [r4, #4]
 800cdc8:	7831      	ldrb	r1, [r6, #0]
 800cdca:	1c75      	adds	r5, r6, #1
 800cdcc:	3930      	subs	r1, #48	; 0x30
 800cdce:	2909      	cmp	r1, #9
 800cdd0:	d903      	bls.n	800cdda <_vfiprintf_r+0x1d2>
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d0c5      	beq.n	800cd62 <_vfiprintf_r+0x15a>
 800cdd6:	9209      	str	r2, [sp, #36]	; 0x24
 800cdd8:	e7c3      	b.n	800cd62 <_vfiprintf_r+0x15a>
 800cdda:	4342      	muls	r2, r0
 800cddc:	002e      	movs	r6, r5
 800cdde:	2301      	movs	r3, #1
 800cde0:	1852      	adds	r2, r2, r1
 800cde2:	e7f1      	b.n	800cdc8 <_vfiprintf_r+0x1c0>
 800cde4:	aa07      	add	r2, sp, #28
 800cde6:	9200      	str	r2, [sp, #0]
 800cde8:	0021      	movs	r1, r4
 800cdea:	003a      	movs	r2, r7
 800cdec:	4b13      	ldr	r3, [pc, #76]	; (800ce3c <_vfiprintf_r+0x234>)
 800cdee:	9803      	ldr	r0, [sp, #12]
 800cdf0:	f7fb fdb6 	bl	8008960 <_printf_float>
 800cdf4:	9004      	str	r0, [sp, #16]
 800cdf6:	9b04      	ldr	r3, [sp, #16]
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	d1d3      	bne.n	800cda4 <_vfiprintf_r+0x19c>
 800cdfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdfe:	07db      	lsls	r3, r3, #31
 800ce00:	d405      	bmi.n	800ce0e <_vfiprintf_r+0x206>
 800ce02:	89bb      	ldrh	r3, [r7, #12]
 800ce04:	059b      	lsls	r3, r3, #22
 800ce06:	d402      	bmi.n	800ce0e <_vfiprintf_r+0x206>
 800ce08:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ce0a:	f7fc fd3d 	bl	8009888 <__retarget_lock_release_recursive>
 800ce0e:	89bb      	ldrh	r3, [r7, #12]
 800ce10:	065b      	lsls	r3, r3, #25
 800ce12:	d500      	bpl.n	800ce16 <_vfiprintf_r+0x20e>
 800ce14:	e71d      	b.n	800cc52 <_vfiprintf_r+0x4a>
 800ce16:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ce18:	e71d      	b.n	800cc56 <_vfiprintf_r+0x4e>
 800ce1a:	aa07      	add	r2, sp, #28
 800ce1c:	9200      	str	r2, [sp, #0]
 800ce1e:	0021      	movs	r1, r4
 800ce20:	003a      	movs	r2, r7
 800ce22:	4b06      	ldr	r3, [pc, #24]	; (800ce3c <_vfiprintf_r+0x234>)
 800ce24:	9803      	ldr	r0, [sp, #12]
 800ce26:	f7fc f861 	bl	8008eec <_printf_i>
 800ce2a:	e7e3      	b.n	800cdf4 <_vfiprintf_r+0x1ec>
 800ce2c:	0800d581 	.word	0x0800d581
 800ce30:	0800d587 	.word	0x0800d587
 800ce34:	0800d58b 	.word	0x0800d58b
 800ce38:	08008961 	.word	0x08008961
 800ce3c:	0800cbe5 	.word	0x0800cbe5

0800ce40 <__swbuf_r>:
 800ce40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce42:	0006      	movs	r6, r0
 800ce44:	000d      	movs	r5, r1
 800ce46:	0014      	movs	r4, r2
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d004      	beq.n	800ce56 <__swbuf_r+0x16>
 800ce4c:	6a03      	ldr	r3, [r0, #32]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <__swbuf_r+0x16>
 800ce52:	f7fc fbf3 	bl	800963c <__sinit>
 800ce56:	69a3      	ldr	r3, [r4, #24]
 800ce58:	60a3      	str	r3, [r4, #8]
 800ce5a:	89a3      	ldrh	r3, [r4, #12]
 800ce5c:	071b      	lsls	r3, r3, #28
 800ce5e:	d528      	bpl.n	800ceb2 <__swbuf_r+0x72>
 800ce60:	6923      	ldr	r3, [r4, #16]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d025      	beq.n	800ceb2 <__swbuf_r+0x72>
 800ce66:	6923      	ldr	r3, [r4, #16]
 800ce68:	6820      	ldr	r0, [r4, #0]
 800ce6a:	b2ef      	uxtb	r7, r5
 800ce6c:	1ac0      	subs	r0, r0, r3
 800ce6e:	6963      	ldr	r3, [r4, #20]
 800ce70:	b2ed      	uxtb	r5, r5
 800ce72:	4283      	cmp	r3, r0
 800ce74:	dc05      	bgt.n	800ce82 <__swbuf_r+0x42>
 800ce76:	0021      	movs	r1, r4
 800ce78:	0030      	movs	r0, r6
 800ce7a:	f7ff fa17 	bl	800c2ac <_fflush_r>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d11d      	bne.n	800cebe <__swbuf_r+0x7e>
 800ce82:	68a3      	ldr	r3, [r4, #8]
 800ce84:	3001      	adds	r0, #1
 800ce86:	3b01      	subs	r3, #1
 800ce88:	60a3      	str	r3, [r4, #8]
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	1c5a      	adds	r2, r3, #1
 800ce8e:	6022      	str	r2, [r4, #0]
 800ce90:	701f      	strb	r7, [r3, #0]
 800ce92:	6963      	ldr	r3, [r4, #20]
 800ce94:	4283      	cmp	r3, r0
 800ce96:	d004      	beq.n	800cea2 <__swbuf_r+0x62>
 800ce98:	89a3      	ldrh	r3, [r4, #12]
 800ce9a:	07db      	lsls	r3, r3, #31
 800ce9c:	d507      	bpl.n	800ceae <__swbuf_r+0x6e>
 800ce9e:	2d0a      	cmp	r5, #10
 800cea0:	d105      	bne.n	800ceae <__swbuf_r+0x6e>
 800cea2:	0021      	movs	r1, r4
 800cea4:	0030      	movs	r0, r6
 800cea6:	f7ff fa01 	bl	800c2ac <_fflush_r>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d107      	bne.n	800cebe <__swbuf_r+0x7e>
 800ceae:	0028      	movs	r0, r5
 800ceb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceb2:	0021      	movs	r1, r4
 800ceb4:	0030      	movs	r0, r6
 800ceb6:	f000 f805 	bl	800cec4 <__swsetup_r>
 800ceba:	2800      	cmp	r0, #0
 800cebc:	d0d3      	beq.n	800ce66 <__swbuf_r+0x26>
 800cebe:	2501      	movs	r5, #1
 800cec0:	426d      	negs	r5, r5
 800cec2:	e7f4      	b.n	800ceae <__swbuf_r+0x6e>

0800cec4 <__swsetup_r>:
 800cec4:	4b30      	ldr	r3, [pc, #192]	; (800cf88 <__swsetup_r+0xc4>)
 800cec6:	b570      	push	{r4, r5, r6, lr}
 800cec8:	0005      	movs	r5, r0
 800ceca:	6818      	ldr	r0, [r3, #0]
 800cecc:	000c      	movs	r4, r1
 800cece:	2800      	cmp	r0, #0
 800ced0:	d004      	beq.n	800cedc <__swsetup_r+0x18>
 800ced2:	6a03      	ldr	r3, [r0, #32]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d101      	bne.n	800cedc <__swsetup_r+0x18>
 800ced8:	f7fc fbb0 	bl	800963c <__sinit>
 800cedc:	230c      	movs	r3, #12
 800cede:	5ee2      	ldrsh	r2, [r4, r3]
 800cee0:	b293      	uxth	r3, r2
 800cee2:	0711      	lsls	r1, r2, #28
 800cee4:	d423      	bmi.n	800cf2e <__swsetup_r+0x6a>
 800cee6:	06d9      	lsls	r1, r3, #27
 800cee8:	d407      	bmi.n	800cefa <__swsetup_r+0x36>
 800ceea:	2309      	movs	r3, #9
 800ceec:	2001      	movs	r0, #1
 800ceee:	602b      	str	r3, [r5, #0]
 800cef0:	3337      	adds	r3, #55	; 0x37
 800cef2:	4313      	orrs	r3, r2
 800cef4:	81a3      	strh	r3, [r4, #12]
 800cef6:	4240      	negs	r0, r0
 800cef8:	bd70      	pop	{r4, r5, r6, pc}
 800cefa:	075b      	lsls	r3, r3, #29
 800cefc:	d513      	bpl.n	800cf26 <__swsetup_r+0x62>
 800cefe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf00:	2900      	cmp	r1, #0
 800cf02:	d008      	beq.n	800cf16 <__swsetup_r+0x52>
 800cf04:	0023      	movs	r3, r4
 800cf06:	3344      	adds	r3, #68	; 0x44
 800cf08:	4299      	cmp	r1, r3
 800cf0a:	d002      	beq.n	800cf12 <__swsetup_r+0x4e>
 800cf0c:	0028      	movs	r0, r5
 800cf0e:	f7fd fb69 	bl	800a5e4 <_free_r>
 800cf12:	2300      	movs	r3, #0
 800cf14:	6363      	str	r3, [r4, #52]	; 0x34
 800cf16:	2224      	movs	r2, #36	; 0x24
 800cf18:	89a3      	ldrh	r3, [r4, #12]
 800cf1a:	4393      	bics	r3, r2
 800cf1c:	81a3      	strh	r3, [r4, #12]
 800cf1e:	2300      	movs	r3, #0
 800cf20:	6063      	str	r3, [r4, #4]
 800cf22:	6923      	ldr	r3, [r4, #16]
 800cf24:	6023      	str	r3, [r4, #0]
 800cf26:	2308      	movs	r3, #8
 800cf28:	89a2      	ldrh	r2, [r4, #12]
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	81a3      	strh	r3, [r4, #12]
 800cf2e:	6923      	ldr	r3, [r4, #16]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d10b      	bne.n	800cf4c <__swsetup_r+0x88>
 800cf34:	21a0      	movs	r1, #160	; 0xa0
 800cf36:	2280      	movs	r2, #128	; 0x80
 800cf38:	89a3      	ldrh	r3, [r4, #12]
 800cf3a:	0089      	lsls	r1, r1, #2
 800cf3c:	0092      	lsls	r2, r2, #2
 800cf3e:	400b      	ands	r3, r1
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d003      	beq.n	800cf4c <__swsetup_r+0x88>
 800cf44:	0021      	movs	r1, r4
 800cf46:	0028      	movs	r0, r5
 800cf48:	f000 f892 	bl	800d070 <__smakebuf_r>
 800cf4c:	220c      	movs	r2, #12
 800cf4e:	5ea3      	ldrsh	r3, [r4, r2]
 800cf50:	2001      	movs	r0, #1
 800cf52:	001a      	movs	r2, r3
 800cf54:	b299      	uxth	r1, r3
 800cf56:	4002      	ands	r2, r0
 800cf58:	4203      	tst	r3, r0
 800cf5a:	d00f      	beq.n	800cf7c <__swsetup_r+0xb8>
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	60a2      	str	r2, [r4, #8]
 800cf60:	6962      	ldr	r2, [r4, #20]
 800cf62:	4252      	negs	r2, r2
 800cf64:	61a2      	str	r2, [r4, #24]
 800cf66:	2000      	movs	r0, #0
 800cf68:	6922      	ldr	r2, [r4, #16]
 800cf6a:	4282      	cmp	r2, r0
 800cf6c:	d1c4      	bne.n	800cef8 <__swsetup_r+0x34>
 800cf6e:	0609      	lsls	r1, r1, #24
 800cf70:	d5c2      	bpl.n	800cef8 <__swsetup_r+0x34>
 800cf72:	2240      	movs	r2, #64	; 0x40
 800cf74:	4313      	orrs	r3, r2
 800cf76:	81a3      	strh	r3, [r4, #12]
 800cf78:	3801      	subs	r0, #1
 800cf7a:	e7bd      	b.n	800cef8 <__swsetup_r+0x34>
 800cf7c:	0788      	lsls	r0, r1, #30
 800cf7e:	d400      	bmi.n	800cf82 <__swsetup_r+0xbe>
 800cf80:	6962      	ldr	r2, [r4, #20]
 800cf82:	60a2      	str	r2, [r4, #8]
 800cf84:	e7ef      	b.n	800cf66 <__swsetup_r+0xa2>
 800cf86:	46c0      	nop			; (mov r8, r8)
 800cf88:	20000064 	.word	0x20000064

0800cf8c <_raise_r>:
 800cf8c:	b570      	push	{r4, r5, r6, lr}
 800cf8e:	0004      	movs	r4, r0
 800cf90:	000d      	movs	r5, r1
 800cf92:	291f      	cmp	r1, #31
 800cf94:	d904      	bls.n	800cfa0 <_raise_r+0x14>
 800cf96:	2316      	movs	r3, #22
 800cf98:	6003      	str	r3, [r0, #0]
 800cf9a:	2001      	movs	r0, #1
 800cf9c:	4240      	negs	r0, r0
 800cf9e:	bd70      	pop	{r4, r5, r6, pc}
 800cfa0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d004      	beq.n	800cfb0 <_raise_r+0x24>
 800cfa6:	008a      	lsls	r2, r1, #2
 800cfa8:	189b      	adds	r3, r3, r2
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	2a00      	cmp	r2, #0
 800cfae:	d108      	bne.n	800cfc2 <_raise_r+0x36>
 800cfb0:	0020      	movs	r0, r4
 800cfb2:	f000 f831 	bl	800d018 <_getpid_r>
 800cfb6:	002a      	movs	r2, r5
 800cfb8:	0001      	movs	r1, r0
 800cfba:	0020      	movs	r0, r4
 800cfbc:	f000 f81a 	bl	800cff4 <_kill_r>
 800cfc0:	e7ed      	b.n	800cf9e <_raise_r+0x12>
 800cfc2:	2000      	movs	r0, #0
 800cfc4:	2a01      	cmp	r2, #1
 800cfc6:	d0ea      	beq.n	800cf9e <_raise_r+0x12>
 800cfc8:	1c51      	adds	r1, r2, #1
 800cfca:	d103      	bne.n	800cfd4 <_raise_r+0x48>
 800cfcc:	2316      	movs	r3, #22
 800cfce:	3001      	adds	r0, #1
 800cfd0:	6023      	str	r3, [r4, #0]
 800cfd2:	e7e4      	b.n	800cf9e <_raise_r+0x12>
 800cfd4:	2400      	movs	r4, #0
 800cfd6:	0028      	movs	r0, r5
 800cfd8:	601c      	str	r4, [r3, #0]
 800cfda:	4790      	blx	r2
 800cfdc:	0020      	movs	r0, r4
 800cfde:	e7de      	b.n	800cf9e <_raise_r+0x12>

0800cfe0 <raise>:
 800cfe0:	b510      	push	{r4, lr}
 800cfe2:	4b03      	ldr	r3, [pc, #12]	; (800cff0 <raise+0x10>)
 800cfe4:	0001      	movs	r1, r0
 800cfe6:	6818      	ldr	r0, [r3, #0]
 800cfe8:	f7ff ffd0 	bl	800cf8c <_raise_r>
 800cfec:	bd10      	pop	{r4, pc}
 800cfee:	46c0      	nop			; (mov r8, r8)
 800cff0:	20000064 	.word	0x20000064

0800cff4 <_kill_r>:
 800cff4:	2300      	movs	r3, #0
 800cff6:	b570      	push	{r4, r5, r6, lr}
 800cff8:	4d06      	ldr	r5, [pc, #24]	; (800d014 <_kill_r+0x20>)
 800cffa:	0004      	movs	r4, r0
 800cffc:	0008      	movs	r0, r1
 800cffe:	0011      	movs	r1, r2
 800d000:	602b      	str	r3, [r5, #0]
 800d002:	f7f6 fc33 	bl	800386c <_kill>
 800d006:	1c43      	adds	r3, r0, #1
 800d008:	d103      	bne.n	800d012 <_kill_r+0x1e>
 800d00a:	682b      	ldr	r3, [r5, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d000      	beq.n	800d012 <_kill_r+0x1e>
 800d010:	6023      	str	r3, [r4, #0]
 800d012:	bd70      	pop	{r4, r5, r6, pc}
 800d014:	20000964 	.word	0x20000964

0800d018 <_getpid_r>:
 800d018:	b510      	push	{r4, lr}
 800d01a:	f7f6 fc21 	bl	8003860 <_getpid>
 800d01e:	bd10      	pop	{r4, pc}

0800d020 <__swhatbuf_r>:
 800d020:	b570      	push	{r4, r5, r6, lr}
 800d022:	000e      	movs	r6, r1
 800d024:	001d      	movs	r5, r3
 800d026:	230e      	movs	r3, #14
 800d028:	5ec9      	ldrsh	r1, [r1, r3]
 800d02a:	0014      	movs	r4, r2
 800d02c:	b096      	sub	sp, #88	; 0x58
 800d02e:	2900      	cmp	r1, #0
 800d030:	da0c      	bge.n	800d04c <__swhatbuf_r+0x2c>
 800d032:	89b2      	ldrh	r2, [r6, #12]
 800d034:	2380      	movs	r3, #128	; 0x80
 800d036:	0011      	movs	r1, r2
 800d038:	4019      	ands	r1, r3
 800d03a:	421a      	tst	r2, r3
 800d03c:	d013      	beq.n	800d066 <__swhatbuf_r+0x46>
 800d03e:	2100      	movs	r1, #0
 800d040:	3b40      	subs	r3, #64	; 0x40
 800d042:	2000      	movs	r0, #0
 800d044:	6029      	str	r1, [r5, #0]
 800d046:	6023      	str	r3, [r4, #0]
 800d048:	b016      	add	sp, #88	; 0x58
 800d04a:	bd70      	pop	{r4, r5, r6, pc}
 800d04c:	466a      	mov	r2, sp
 800d04e:	f000 f84d 	bl	800d0ec <_fstat_r>
 800d052:	2800      	cmp	r0, #0
 800d054:	dbed      	blt.n	800d032 <__swhatbuf_r+0x12>
 800d056:	23f0      	movs	r3, #240	; 0xf0
 800d058:	9901      	ldr	r1, [sp, #4]
 800d05a:	021b      	lsls	r3, r3, #8
 800d05c:	4019      	ands	r1, r3
 800d05e:	4b03      	ldr	r3, [pc, #12]	; (800d06c <__swhatbuf_r+0x4c>)
 800d060:	18c9      	adds	r1, r1, r3
 800d062:	424b      	negs	r3, r1
 800d064:	4159      	adcs	r1, r3
 800d066:	2380      	movs	r3, #128	; 0x80
 800d068:	00db      	lsls	r3, r3, #3
 800d06a:	e7ea      	b.n	800d042 <__swhatbuf_r+0x22>
 800d06c:	ffffe000 	.word	0xffffe000

0800d070 <__smakebuf_r>:
 800d070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d072:	2602      	movs	r6, #2
 800d074:	898b      	ldrh	r3, [r1, #12]
 800d076:	0005      	movs	r5, r0
 800d078:	000c      	movs	r4, r1
 800d07a:	4233      	tst	r3, r6
 800d07c:	d006      	beq.n	800d08c <__smakebuf_r+0x1c>
 800d07e:	0023      	movs	r3, r4
 800d080:	3347      	adds	r3, #71	; 0x47
 800d082:	6023      	str	r3, [r4, #0]
 800d084:	6123      	str	r3, [r4, #16]
 800d086:	2301      	movs	r3, #1
 800d088:	6163      	str	r3, [r4, #20]
 800d08a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d08c:	466a      	mov	r2, sp
 800d08e:	ab01      	add	r3, sp, #4
 800d090:	f7ff ffc6 	bl	800d020 <__swhatbuf_r>
 800d094:	9900      	ldr	r1, [sp, #0]
 800d096:	0007      	movs	r7, r0
 800d098:	0028      	movs	r0, r5
 800d09a:	f7fd fb19 	bl	800a6d0 <_malloc_r>
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	d108      	bne.n	800d0b4 <__smakebuf_r+0x44>
 800d0a2:	220c      	movs	r2, #12
 800d0a4:	5ea3      	ldrsh	r3, [r4, r2]
 800d0a6:	059a      	lsls	r2, r3, #22
 800d0a8:	d4ef      	bmi.n	800d08a <__smakebuf_r+0x1a>
 800d0aa:	2203      	movs	r2, #3
 800d0ac:	4393      	bics	r3, r2
 800d0ae:	431e      	orrs	r6, r3
 800d0b0:	81a6      	strh	r6, [r4, #12]
 800d0b2:	e7e4      	b.n	800d07e <__smakebuf_r+0xe>
 800d0b4:	2380      	movs	r3, #128	; 0x80
 800d0b6:	89a2      	ldrh	r2, [r4, #12]
 800d0b8:	6020      	str	r0, [r4, #0]
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	81a3      	strh	r3, [r4, #12]
 800d0be:	9b00      	ldr	r3, [sp, #0]
 800d0c0:	6120      	str	r0, [r4, #16]
 800d0c2:	6163      	str	r3, [r4, #20]
 800d0c4:	9b01      	ldr	r3, [sp, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00c      	beq.n	800d0e4 <__smakebuf_r+0x74>
 800d0ca:	0028      	movs	r0, r5
 800d0cc:	230e      	movs	r3, #14
 800d0ce:	5ee1      	ldrsh	r1, [r4, r3]
 800d0d0:	f000 f81e 	bl	800d110 <_isatty_r>
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d005      	beq.n	800d0e4 <__smakebuf_r+0x74>
 800d0d8:	2303      	movs	r3, #3
 800d0da:	89a2      	ldrh	r2, [r4, #12]
 800d0dc:	439a      	bics	r2, r3
 800d0de:	3b02      	subs	r3, #2
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	81a3      	strh	r3, [r4, #12]
 800d0e4:	89a3      	ldrh	r3, [r4, #12]
 800d0e6:	433b      	orrs	r3, r7
 800d0e8:	81a3      	strh	r3, [r4, #12]
 800d0ea:	e7ce      	b.n	800d08a <__smakebuf_r+0x1a>

0800d0ec <_fstat_r>:
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	b570      	push	{r4, r5, r6, lr}
 800d0f0:	4d06      	ldr	r5, [pc, #24]	; (800d10c <_fstat_r+0x20>)
 800d0f2:	0004      	movs	r4, r0
 800d0f4:	0008      	movs	r0, r1
 800d0f6:	0011      	movs	r1, r2
 800d0f8:	602b      	str	r3, [r5, #0]
 800d0fa:	f7f6 fc16 	bl	800392a <_fstat>
 800d0fe:	1c43      	adds	r3, r0, #1
 800d100:	d103      	bne.n	800d10a <_fstat_r+0x1e>
 800d102:	682b      	ldr	r3, [r5, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d000      	beq.n	800d10a <_fstat_r+0x1e>
 800d108:	6023      	str	r3, [r4, #0]
 800d10a:	bd70      	pop	{r4, r5, r6, pc}
 800d10c:	20000964 	.word	0x20000964

0800d110 <_isatty_r>:
 800d110:	2300      	movs	r3, #0
 800d112:	b570      	push	{r4, r5, r6, lr}
 800d114:	4d06      	ldr	r5, [pc, #24]	; (800d130 <_isatty_r+0x20>)
 800d116:	0004      	movs	r4, r0
 800d118:	0008      	movs	r0, r1
 800d11a:	602b      	str	r3, [r5, #0]
 800d11c:	f7f6 fc13 	bl	8003946 <_isatty>
 800d120:	1c43      	adds	r3, r0, #1
 800d122:	d103      	bne.n	800d12c <_isatty_r+0x1c>
 800d124:	682b      	ldr	r3, [r5, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d000      	beq.n	800d12c <_isatty_r+0x1c>
 800d12a:	6023      	str	r3, [r4, #0]
 800d12c:	bd70      	pop	{r4, r5, r6, pc}
 800d12e:	46c0      	nop			; (mov r8, r8)
 800d130:	20000964 	.word	0x20000964

0800d134 <_init>:
 800d134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d136:	46c0      	nop			; (mov r8, r8)
 800d138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d13a:	bc08      	pop	{r3}
 800d13c:	469e      	mov	lr, r3
 800d13e:	4770      	bx	lr

0800d140 <_fini>:
 800d140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d142:	46c0      	nop			; (mov r8, r8)
 800d144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d146:	bc08      	pop	{r3}
 800d148:	469e      	mov	lr, r3
 800d14a:	4770      	bx	lr
