
sensory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800d268  0800d268  0001d268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d764  0800d764  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d764  0800d764  0001d764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d76c  0800d76c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d76c  0800d76c  0001d76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d770  0800d770  0001d770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800d774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b4  200001d8  0800d948  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  0800d948  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018314  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039cc  00000000  00000000  00038553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0003bf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001410  00000000  00000000  0003d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004b5e  00000000  00000000  0003e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bcd6  00000000  00000000  00043446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088d2b  00000000  00000000  0005f11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006228  00000000  00000000  000e7e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d24c 	.word	0x0800d24c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800d24c 	.word	0x0800d24c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8b3 	bl	80015a8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f803 	bl	8001458 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8a5 	bl	80015a8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f89b 	bl	80015a8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f82b 	bl	80014dc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f821 	bl	80014dc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f001 feeb 	bl	8002334 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fb44 	bl	8001bf4 <__aeabi_dsub>
 800056c:	f001 fee2 	bl	8002334 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 f853 	bl	8001670 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f001 ff16 	bl	8002400 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 f84a 	bl	8001670 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fb06 	bl	8001bf4 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f001 fecf 	bl	80023a0 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 f833 	bl	8001670 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f001 fef6 	bl	8002400 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 f8d0 	bl	80007bc <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f001 ffa6 	bl	8002594 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f001 ffa1 	bl	8002594 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_dadd>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0004      	movs	r4, r0
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	001f      	movs	r7, r3
 80007ca:	030b      	lsls	r3, r1, #12
 80007cc:	0010      	movs	r0, r2
 80007ce:	004e      	lsls	r6, r1, #1
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	0fcd      	lsrs	r5, r1, #31
 80007d4:	0f61      	lsrs	r1, r4, #29
 80007d6:	007a      	lsls	r2, r7, #1
 80007d8:	4319      	orrs	r1, r3
 80007da:	00e3      	lsls	r3, r4, #3
 80007dc:	033c      	lsls	r4, r7, #12
 80007de:	0fff      	lsrs	r7, r7, #31
 80007e0:	46bc      	mov	ip, r7
 80007e2:	0a64      	lsrs	r4, r4, #9
 80007e4:	0f47      	lsrs	r7, r0, #29
 80007e6:	4327      	orrs	r7, r4
 80007e8:	0d76      	lsrs	r6, r6, #21
 80007ea:	0d52      	lsrs	r2, r2, #21
 80007ec:	00c0      	lsls	r0, r0, #3
 80007ee:	46b9      	mov	r9, r7
 80007f0:	4680      	mov	r8, r0
 80007f2:	1ab7      	subs	r7, r6, r2
 80007f4:	4565      	cmp	r5, ip
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x3e>
 80007f8:	e09b      	b.n	8000932 <__aeabi_dadd+0x176>
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	dc00      	bgt.n	8000800 <__aeabi_dadd+0x44>
 80007fe:	e084      	b.n	800090a <__aeabi_dadd+0x14e>
 8000800:	2a00      	cmp	r2, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x4a>
 8000804:	e0be      	b.n	8000984 <__aeabi_dadd+0x1c8>
 8000806:	4ac8      	ldr	r2, [pc, #800]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000808:	4296      	cmp	r6, r2
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x52>
 800080c:	e124      	b.n	8000a58 <__aeabi_dadd+0x29c>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	464c      	mov	r4, r9
 8000812:	0412      	lsls	r2, r2, #16
 8000814:	4314      	orrs	r4, r2
 8000816:	46a1      	mov	r9, r4
 8000818:	2f38      	cmp	r7, #56	; 0x38
 800081a:	dd00      	ble.n	800081e <__aeabi_dadd+0x62>
 800081c:	e167      	b.n	8000aee <__aeabi_dadd+0x332>
 800081e:	2f1f      	cmp	r7, #31
 8000820:	dd00      	ble.n	8000824 <__aeabi_dadd+0x68>
 8000822:	e1d6      	b.n	8000bd2 <__aeabi_dadd+0x416>
 8000824:	2220      	movs	r2, #32
 8000826:	464c      	mov	r4, r9
 8000828:	1bd2      	subs	r2, r2, r7
 800082a:	4094      	lsls	r4, r2
 800082c:	46a2      	mov	sl, r4
 800082e:	4644      	mov	r4, r8
 8000830:	40fc      	lsrs	r4, r7
 8000832:	0020      	movs	r0, r4
 8000834:	4654      	mov	r4, sl
 8000836:	4304      	orrs	r4, r0
 8000838:	4640      	mov	r0, r8
 800083a:	4090      	lsls	r0, r2
 800083c:	1e42      	subs	r2, r0, #1
 800083e:	4190      	sbcs	r0, r2
 8000840:	464a      	mov	r2, r9
 8000842:	40fa      	lsrs	r2, r7
 8000844:	4304      	orrs	r4, r0
 8000846:	1a89      	subs	r1, r1, r2
 8000848:	1b1c      	subs	r4, r3, r4
 800084a:	42a3      	cmp	r3, r4
 800084c:	4192      	sbcs	r2, r2
 800084e:	4252      	negs	r2, r2
 8000850:	1a8b      	subs	r3, r1, r2
 8000852:	469a      	mov	sl, r3
 8000854:	4653      	mov	r3, sl
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	d400      	bmi.n	800085c <__aeabi_dadd+0xa0>
 800085a:	e0d4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 800085c:	4653      	mov	r3, sl
 800085e:	025a      	lsls	r2, r3, #9
 8000860:	0a53      	lsrs	r3, r2, #9
 8000862:	469a      	mov	sl, r3
 8000864:	4653      	mov	r3, sl
 8000866:	2b00      	cmp	r3, #0
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0xb0>
 800086a:	e104      	b.n	8000a76 <__aeabi_dadd+0x2ba>
 800086c:	4650      	mov	r0, sl
 800086e:	f001 fe73 	bl	8002558 <__clzsi2>
 8000872:	0003      	movs	r3, r0
 8000874:	3b08      	subs	r3, #8
 8000876:	2220      	movs	r2, #32
 8000878:	0020      	movs	r0, r4
 800087a:	1ad2      	subs	r2, r2, r3
 800087c:	4651      	mov	r1, sl
 800087e:	40d0      	lsrs	r0, r2
 8000880:	4099      	lsls	r1, r3
 8000882:	0002      	movs	r2, r0
 8000884:	409c      	lsls	r4, r3
 8000886:	430a      	orrs	r2, r1
 8000888:	42b3      	cmp	r3, r6
 800088a:	da00      	bge.n	800088e <__aeabi_dadd+0xd2>
 800088c:	e102      	b.n	8000a94 <__aeabi_dadd+0x2d8>
 800088e:	1b9b      	subs	r3, r3, r6
 8000890:	1c59      	adds	r1, r3, #1
 8000892:	291f      	cmp	r1, #31
 8000894:	dd00      	ble.n	8000898 <__aeabi_dadd+0xdc>
 8000896:	e0a7      	b.n	80009e8 <__aeabi_dadd+0x22c>
 8000898:	2320      	movs	r3, #32
 800089a:	0010      	movs	r0, r2
 800089c:	0026      	movs	r6, r4
 800089e:	1a5b      	subs	r3, r3, r1
 80008a0:	409c      	lsls	r4, r3
 80008a2:	4098      	lsls	r0, r3
 80008a4:	40ce      	lsrs	r6, r1
 80008a6:	40ca      	lsrs	r2, r1
 80008a8:	1e63      	subs	r3, r4, #1
 80008aa:	419c      	sbcs	r4, r3
 80008ac:	4330      	orrs	r0, r6
 80008ae:	4692      	mov	sl, r2
 80008b0:	2600      	movs	r6, #0
 80008b2:	4304      	orrs	r4, r0
 80008b4:	0763      	lsls	r3, r4, #29
 80008b6:	d009      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008b8:	230f      	movs	r3, #15
 80008ba:	4023      	ands	r3, r4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008c0:	1d23      	adds	r3, r4, #4
 80008c2:	42a3      	cmp	r3, r4
 80008c4:	41a4      	sbcs	r4, r4
 80008c6:	4264      	negs	r4, r4
 80008c8:	44a2      	add	sl, r4
 80008ca:	001c      	movs	r4, r3
 80008cc:	4653      	mov	r3, sl
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_dadd+0x118>
 80008d2:	e09b      	b.n	8000a0c <__aeabi_dadd+0x250>
 80008d4:	4b94      	ldr	r3, [pc, #592]	; (8000b28 <__aeabi_dadd+0x36c>)
 80008d6:	3601      	adds	r6, #1
 80008d8:	429e      	cmp	r6, r3
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x122>
 80008dc:	e0b8      	b.n	8000a50 <__aeabi_dadd+0x294>
 80008de:	4653      	mov	r3, sl
 80008e0:	4992      	ldr	r1, [pc, #584]	; (8000b2c <__aeabi_dadd+0x370>)
 80008e2:	08e4      	lsrs	r4, r4, #3
 80008e4:	400b      	ands	r3, r1
 80008e6:	0019      	movs	r1, r3
 80008e8:	075b      	lsls	r3, r3, #29
 80008ea:	4323      	orrs	r3, r4
 80008ec:	0572      	lsls	r2, r6, #21
 80008ee:	024c      	lsls	r4, r1, #9
 80008f0:	0b24      	lsrs	r4, r4, #12
 80008f2:	0d52      	lsrs	r2, r2, #21
 80008f4:	0512      	lsls	r2, r2, #20
 80008f6:	07ed      	lsls	r5, r5, #31
 80008f8:	4322      	orrs	r2, r4
 80008fa:	432a      	orrs	r2, r5
 80008fc:	0018      	movs	r0, r3
 80008fe:	0011      	movs	r1, r2
 8000900:	bce0      	pop	{r5, r6, r7}
 8000902:	46ba      	mov	sl, r7
 8000904:	46b1      	mov	r9, r6
 8000906:	46a8      	mov	r8, r5
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090a:	2f00      	cmp	r7, #0
 800090c:	d048      	beq.n	80009a0 <__aeabi_dadd+0x1e4>
 800090e:	1b97      	subs	r7, r2, r6
 8000910:	2e00      	cmp	r6, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x15a>
 8000914:	e10e      	b.n	8000b34 <__aeabi_dadd+0x378>
 8000916:	000c      	movs	r4, r1
 8000918:	431c      	orrs	r4, r3
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x162>
 800091c:	e1b7      	b.n	8000c8e <__aeabi_dadd+0x4d2>
 800091e:	1e7c      	subs	r4, r7, #1
 8000920:	2f01      	cmp	r7, #1
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x16a>
 8000924:	e226      	b.n	8000d74 <__aeabi_dadd+0x5b8>
 8000926:	4d80      	ldr	r5, [pc, #512]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000928:	42af      	cmp	r7, r5
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x172>
 800092c:	e1d5      	b.n	8000cda <__aeabi_dadd+0x51e>
 800092e:	0027      	movs	r7, r4
 8000930:	e107      	b.n	8000b42 <__aeabi_dadd+0x386>
 8000932:	2f00      	cmp	r7, #0
 8000934:	dc00      	bgt.n	8000938 <__aeabi_dadd+0x17c>
 8000936:	e0b2      	b.n	8000a9e <__aeabi_dadd+0x2e2>
 8000938:	2a00      	cmp	r2, #0
 800093a:	d047      	beq.n	80009cc <__aeabi_dadd+0x210>
 800093c:	4a7a      	ldr	r2, [pc, #488]	; (8000b28 <__aeabi_dadd+0x36c>)
 800093e:	4296      	cmp	r6, r2
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x188>
 8000942:	e089      	b.n	8000a58 <__aeabi_dadd+0x29c>
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	464c      	mov	r4, r9
 8000948:	0412      	lsls	r2, r2, #16
 800094a:	4314      	orrs	r4, r2
 800094c:	46a1      	mov	r9, r4
 800094e:	2f38      	cmp	r7, #56	; 0x38
 8000950:	dc6b      	bgt.n	8000a2a <__aeabi_dadd+0x26e>
 8000952:	2f1f      	cmp	r7, #31
 8000954:	dc00      	bgt.n	8000958 <__aeabi_dadd+0x19c>
 8000956:	e16e      	b.n	8000c36 <__aeabi_dadd+0x47a>
 8000958:	003a      	movs	r2, r7
 800095a:	4648      	mov	r0, r9
 800095c:	3a20      	subs	r2, #32
 800095e:	40d0      	lsrs	r0, r2
 8000960:	4684      	mov	ip, r0
 8000962:	2f20      	cmp	r7, #32
 8000964:	d007      	beq.n	8000976 <__aeabi_dadd+0x1ba>
 8000966:	2240      	movs	r2, #64	; 0x40
 8000968:	4648      	mov	r0, r9
 800096a:	1bd2      	subs	r2, r2, r7
 800096c:	4090      	lsls	r0, r2
 800096e:	0002      	movs	r2, r0
 8000970:	4640      	mov	r0, r8
 8000972:	4310      	orrs	r0, r2
 8000974:	4680      	mov	r8, r0
 8000976:	4640      	mov	r0, r8
 8000978:	1e42      	subs	r2, r0, #1
 800097a:	4190      	sbcs	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	0004      	movs	r4, r0
 8000980:	4314      	orrs	r4, r2
 8000982:	e057      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000984:	464a      	mov	r2, r9
 8000986:	4302      	orrs	r2, r0
 8000988:	d100      	bne.n	800098c <__aeabi_dadd+0x1d0>
 800098a:	e103      	b.n	8000b94 <__aeabi_dadd+0x3d8>
 800098c:	1e7a      	subs	r2, r7, #1
 800098e:	2f01      	cmp	r7, #1
 8000990:	d100      	bne.n	8000994 <__aeabi_dadd+0x1d8>
 8000992:	e193      	b.n	8000cbc <__aeabi_dadd+0x500>
 8000994:	4c64      	ldr	r4, [pc, #400]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000996:	42a7      	cmp	r7, r4
 8000998:	d100      	bne.n	800099c <__aeabi_dadd+0x1e0>
 800099a:	e18a      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 800099c:	0017      	movs	r7, r2
 800099e:	e73b      	b.n	8000818 <__aeabi_dadd+0x5c>
 80009a0:	4c63      	ldr	r4, [pc, #396]	; (8000b30 <__aeabi_dadd+0x374>)
 80009a2:	1c72      	adds	r2, r6, #1
 80009a4:	4222      	tst	r2, r4
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x1ee>
 80009a8:	e0e0      	b.n	8000b6c <__aeabi_dadd+0x3b0>
 80009aa:	000a      	movs	r2, r1
 80009ac:	431a      	orrs	r2, r3
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dadd+0x1f8>
 80009b2:	e174      	b.n	8000c9e <__aeabi_dadd+0x4e2>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x1fe>
 80009b8:	e1d0      	b.n	8000d5c <__aeabi_dadd+0x5a0>
 80009ba:	464a      	mov	r2, r9
 80009bc:	4302      	orrs	r2, r0
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x206>
 80009c0:	e1e3      	b.n	8000d8a <__aeabi_dadd+0x5ce>
 80009c2:	074a      	lsls	r2, r1, #29
 80009c4:	08db      	lsrs	r3, r3, #3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	08c9      	lsrs	r1, r1, #3
 80009ca:	e029      	b.n	8000a20 <__aeabi_dadd+0x264>
 80009cc:	464a      	mov	r2, r9
 80009ce:	4302      	orrs	r2, r0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x218>
 80009d2:	e17d      	b.n	8000cd0 <__aeabi_dadd+0x514>
 80009d4:	1e7a      	subs	r2, r7, #1
 80009d6:	2f01      	cmp	r7, #1
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x220>
 80009da:	e0e0      	b.n	8000b9e <__aeabi_dadd+0x3e2>
 80009dc:	4c52      	ldr	r4, [pc, #328]	; (8000b28 <__aeabi_dadd+0x36c>)
 80009de:	42a7      	cmp	r7, r4
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x228>
 80009e2:	e166      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 80009e4:	0017      	movs	r7, r2
 80009e6:	e7b2      	b.n	800094e <__aeabi_dadd+0x192>
 80009e8:	0010      	movs	r0, r2
 80009ea:	3b1f      	subs	r3, #31
 80009ec:	40d8      	lsrs	r0, r3
 80009ee:	2920      	cmp	r1, #32
 80009f0:	d003      	beq.n	80009fa <__aeabi_dadd+0x23e>
 80009f2:	2340      	movs	r3, #64	; 0x40
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	409a      	lsls	r2, r3
 80009f8:	4314      	orrs	r4, r2
 80009fa:	1e63      	subs	r3, r4, #1
 80009fc:	419c      	sbcs	r4, r3
 80009fe:	2300      	movs	r3, #0
 8000a00:	2600      	movs	r6, #0
 8000a02:	469a      	mov	sl, r3
 8000a04:	4304      	orrs	r4, r0
 8000a06:	0763      	lsls	r3, r4, #29
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dadd+0x250>
 8000a0a:	e755      	b.n	80008b8 <__aeabi_dadd+0xfc>
 8000a0c:	4652      	mov	r2, sl
 8000a0e:	08e3      	lsrs	r3, r4, #3
 8000a10:	0752      	lsls	r2, r2, #29
 8000a12:	4313      	orrs	r3, r2
 8000a14:	4652      	mov	r2, sl
 8000a16:	0037      	movs	r7, r6
 8000a18:	08d1      	lsrs	r1, r2, #3
 8000a1a:	4a43      	ldr	r2, [pc, #268]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a1c:	4297      	cmp	r7, r2
 8000a1e:	d01f      	beq.n	8000a60 <__aeabi_dadd+0x2a4>
 8000a20:	0309      	lsls	r1, r1, #12
 8000a22:	057a      	lsls	r2, r7, #21
 8000a24:	0b0c      	lsrs	r4, r1, #12
 8000a26:	0d52      	lsrs	r2, r2, #21
 8000a28:	e764      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a2a:	4642      	mov	r2, r8
 8000a2c:	464c      	mov	r4, r9
 8000a2e:	4314      	orrs	r4, r2
 8000a30:	1e62      	subs	r2, r4, #1
 8000a32:	4194      	sbcs	r4, r2
 8000a34:	18e4      	adds	r4, r4, r3
 8000a36:	429c      	cmp	r4, r3
 8000a38:	4192      	sbcs	r2, r2
 8000a3a:	4252      	negs	r2, r2
 8000a3c:	4692      	mov	sl, r2
 8000a3e:	448a      	add	sl, r1
 8000a40:	4653      	mov	r3, sl
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	d5df      	bpl.n	8000a06 <__aeabi_dadd+0x24a>
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a48:	3601      	adds	r6, #1
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_dadd+0x294>
 8000a4e:	e0b3      	b.n	8000bb8 <__aeabi_dadd+0x3fc>
 8000a50:	0032      	movs	r2, r6
 8000a52:	2400      	movs	r4, #0
 8000a54:	2300      	movs	r3, #0
 8000a56:	e74d      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a58:	074a      	lsls	r2, r1, #29
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	08c9      	lsrs	r1, r1, #3
 8000a60:	001a      	movs	r2, r3
 8000a62:	430a      	orrs	r2, r1
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dadd+0x2ac>
 8000a66:	e200      	b.n	8000e6a <__aeabi_dadd+0x6ae>
 8000a68:	2480      	movs	r4, #128	; 0x80
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	430c      	orrs	r4, r1
 8000a6e:	0324      	lsls	r4, r4, #12
 8000a70:	4a2d      	ldr	r2, [pc, #180]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a72:	0b24      	lsrs	r4, r4, #12
 8000a74:	e73e      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a76:	0020      	movs	r0, r4
 8000a78:	f001 fd6e 	bl	8002558 <__clzsi2>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	3318      	adds	r3, #24
 8000a80:	2b1f      	cmp	r3, #31
 8000a82:	dc00      	bgt.n	8000a86 <__aeabi_dadd+0x2ca>
 8000a84:	e6f7      	b.n	8000876 <__aeabi_dadd+0xba>
 8000a86:	0022      	movs	r2, r4
 8000a88:	3808      	subs	r0, #8
 8000a8a:	4082      	lsls	r2, r0
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	42b3      	cmp	r3, r6
 8000a90:	db00      	blt.n	8000a94 <__aeabi_dadd+0x2d8>
 8000a92:	e6fc      	b.n	800088e <__aeabi_dadd+0xd2>
 8000a94:	1af6      	subs	r6, r6, r3
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <__aeabi_dadd+0x370>)
 8000a98:	401a      	ands	r2, r3
 8000a9a:	4692      	mov	sl, r2
 8000a9c:	e70a      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	d02b      	beq.n	8000afa <__aeabi_dadd+0x33e>
 8000aa2:	1b97      	subs	r7, r2, r6
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x2ee>
 8000aa8:	e0b8      	b.n	8000c1c <__aeabi_dadd+0x460>
 8000aaa:	4c1f      	ldr	r4, [pc, #124]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000aac:	42a2      	cmp	r2, r4
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x2f6>
 8000ab0:	e11c      	b.n	8000cec <__aeabi_dadd+0x530>
 8000ab2:	2480      	movs	r4, #128	; 0x80
 8000ab4:	0424      	lsls	r4, r4, #16
 8000ab6:	4321      	orrs	r1, r4
 8000ab8:	2f38      	cmp	r7, #56	; 0x38
 8000aba:	dd00      	ble.n	8000abe <__aeabi_dadd+0x302>
 8000abc:	e11e      	b.n	8000cfc <__aeabi_dadd+0x540>
 8000abe:	2f1f      	cmp	r7, #31
 8000ac0:	dd00      	ble.n	8000ac4 <__aeabi_dadd+0x308>
 8000ac2:	e19e      	b.n	8000e02 <__aeabi_dadd+0x646>
 8000ac4:	2620      	movs	r6, #32
 8000ac6:	000c      	movs	r4, r1
 8000ac8:	1bf6      	subs	r6, r6, r7
 8000aca:	0018      	movs	r0, r3
 8000acc:	40b3      	lsls	r3, r6
 8000ace:	40b4      	lsls	r4, r6
 8000ad0:	40f8      	lsrs	r0, r7
 8000ad2:	1e5e      	subs	r6, r3, #1
 8000ad4:	41b3      	sbcs	r3, r6
 8000ad6:	40f9      	lsrs	r1, r7
 8000ad8:	4304      	orrs	r4, r0
 8000ada:	431c      	orrs	r4, r3
 8000adc:	4489      	add	r9, r1
 8000ade:	4444      	add	r4, r8
 8000ae0:	4544      	cmp	r4, r8
 8000ae2:	419b      	sbcs	r3, r3
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	444b      	add	r3, r9
 8000ae8:	469a      	mov	sl, r3
 8000aea:	0016      	movs	r6, r2
 8000aec:	e7a8      	b.n	8000a40 <__aeabi_dadd+0x284>
 8000aee:	4642      	mov	r2, r8
 8000af0:	464c      	mov	r4, r9
 8000af2:	4314      	orrs	r4, r2
 8000af4:	1e62      	subs	r2, r4, #1
 8000af6:	4194      	sbcs	r4, r2
 8000af8:	e6a6      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000afa:	4c0d      	ldr	r4, [pc, #52]	; (8000b30 <__aeabi_dadd+0x374>)
 8000afc:	1c72      	adds	r2, r6, #1
 8000afe:	4222      	tst	r2, r4
 8000b00:	d000      	beq.n	8000b04 <__aeabi_dadd+0x348>
 8000b02:	e0a8      	b.n	8000c56 <__aeabi_dadd+0x49a>
 8000b04:	000a      	movs	r2, r1
 8000b06:	431a      	orrs	r2, r3
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_dadd+0x352>
 8000b0c:	e10a      	b.n	8000d24 <__aeabi_dadd+0x568>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x358>
 8000b12:	e15e      	b.n	8000dd2 <__aeabi_dadd+0x616>
 8000b14:	464a      	mov	r2, r9
 8000b16:	4302      	orrs	r2, r0
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dadd+0x360>
 8000b1a:	e161      	b.n	8000de0 <__aeabi_dadd+0x624>
 8000b1c:	074a      	lsls	r2, r1, #29
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	08c9      	lsrs	r1, r1, #3
 8000b24:	e77c      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	000007ff 	.word	0x000007ff
 8000b2c:	ff7fffff 	.word	0xff7fffff
 8000b30:	000007fe 	.word	0x000007fe
 8000b34:	4ccf      	ldr	r4, [pc, #828]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000b36:	42a2      	cmp	r2, r4
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x380>
 8000b3a:	e0ce      	b.n	8000cda <__aeabi_dadd+0x51e>
 8000b3c:	2480      	movs	r4, #128	; 0x80
 8000b3e:	0424      	lsls	r4, r4, #16
 8000b40:	4321      	orrs	r1, r4
 8000b42:	2f38      	cmp	r7, #56	; 0x38
 8000b44:	dc5b      	bgt.n	8000bfe <__aeabi_dadd+0x442>
 8000b46:	2f1f      	cmp	r7, #31
 8000b48:	dd00      	ble.n	8000b4c <__aeabi_dadd+0x390>
 8000b4a:	e0dc      	b.n	8000d06 <__aeabi_dadd+0x54a>
 8000b4c:	2520      	movs	r5, #32
 8000b4e:	000c      	movs	r4, r1
 8000b50:	1bed      	subs	r5, r5, r7
 8000b52:	001e      	movs	r6, r3
 8000b54:	40ab      	lsls	r3, r5
 8000b56:	40ac      	lsls	r4, r5
 8000b58:	40fe      	lsrs	r6, r7
 8000b5a:	1e5d      	subs	r5, r3, #1
 8000b5c:	41ab      	sbcs	r3, r5
 8000b5e:	4334      	orrs	r4, r6
 8000b60:	40f9      	lsrs	r1, r7
 8000b62:	431c      	orrs	r4, r3
 8000b64:	464b      	mov	r3, r9
 8000b66:	1a5b      	subs	r3, r3, r1
 8000b68:	4699      	mov	r9, r3
 8000b6a:	e04c      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	1a1c      	subs	r4, r3, r0
 8000b70:	1a88      	subs	r0, r1, r2
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	4192      	sbcs	r2, r2
 8000b76:	4252      	negs	r2, r2
 8000b78:	4692      	mov	sl, r2
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	4650      	mov	r0, sl
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	4692      	mov	sl, r2
 8000b82:	0212      	lsls	r2, r2, #8
 8000b84:	d478      	bmi.n	8000c78 <__aeabi_dadd+0x4bc>
 8000b86:	4653      	mov	r3, sl
 8000b88:	4323      	orrs	r3, r4
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_dadd+0x3d2>
 8000b8c:	e66a      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2500      	movs	r5, #0
 8000b92:	e745      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b94:	074a      	lsls	r2, r1, #29
 8000b96:	08db      	lsrs	r3, r3, #3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	e73d      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000b9e:	181c      	adds	r4, r3, r0
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	419b      	sbcs	r3, r3
 8000ba4:	4449      	add	r1, r9
 8000ba6:	468a      	mov	sl, r1
 8000ba8:	425b      	negs	r3, r3
 8000baa:	449a      	add	sl, r3
 8000bac:	4653      	mov	r3, sl
 8000bae:	2601      	movs	r6, #1
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_dadd+0x3fa>
 8000bb4:	e727      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000bb6:	2602      	movs	r6, #2
 8000bb8:	4652      	mov	r2, sl
 8000bba:	4baf      	ldr	r3, [pc, #700]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	4021      	ands	r1, r4
 8000bc4:	0862      	lsrs	r2, r4, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	07dc      	lsls	r4, r3, #31
 8000bca:	085b      	lsrs	r3, r3, #1
 8000bcc:	469a      	mov	sl, r3
 8000bce:	4314      	orrs	r4, r2
 8000bd0:	e670      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000bd2:	003a      	movs	r2, r7
 8000bd4:	464c      	mov	r4, r9
 8000bd6:	3a20      	subs	r2, #32
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	46a4      	mov	ip, r4
 8000bdc:	2f20      	cmp	r7, #32
 8000bde:	d007      	beq.n	8000bf0 <__aeabi_dadd+0x434>
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	4648      	mov	r0, r9
 8000be4:	1bd2      	subs	r2, r2, r7
 8000be6:	4090      	lsls	r0, r2
 8000be8:	0002      	movs	r2, r0
 8000bea:	4640      	mov	r0, r8
 8000bec:	4310      	orrs	r0, r2
 8000bee:	4680      	mov	r8, r0
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	1e42      	subs	r2, r0, #1
 8000bf4:	4190      	sbcs	r0, r2
 8000bf6:	4662      	mov	r2, ip
 8000bf8:	0004      	movs	r4, r0
 8000bfa:	4314      	orrs	r4, r2
 8000bfc:	e624      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000bfe:	4319      	orrs	r1, r3
 8000c00:	000c      	movs	r4, r1
 8000c02:	1e63      	subs	r3, r4, #1
 8000c04:	419c      	sbcs	r4, r3
 8000c06:	4643      	mov	r3, r8
 8000c08:	1b1c      	subs	r4, r3, r4
 8000c0a:	45a0      	cmp	r8, r4
 8000c0c:	419b      	sbcs	r3, r3
 8000c0e:	4649      	mov	r1, r9
 8000c10:	425b      	negs	r3, r3
 8000c12:	1acb      	subs	r3, r1, r3
 8000c14:	469a      	mov	sl, r3
 8000c16:	4665      	mov	r5, ip
 8000c18:	0016      	movs	r6, r2
 8000c1a:	e61b      	b.n	8000854 <__aeabi_dadd+0x98>
 8000c1c:	000c      	movs	r4, r1
 8000c1e:	431c      	orrs	r4, r3
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x468>
 8000c22:	e0c7      	b.n	8000db4 <__aeabi_dadd+0x5f8>
 8000c24:	1e7c      	subs	r4, r7, #1
 8000c26:	2f01      	cmp	r7, #1
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dadd+0x470>
 8000c2a:	e0f9      	b.n	8000e20 <__aeabi_dadd+0x664>
 8000c2c:	4e91      	ldr	r6, [pc, #580]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c2e:	42b7      	cmp	r7, r6
 8000c30:	d05c      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000c32:	0027      	movs	r7, r4
 8000c34:	e740      	b.n	8000ab8 <__aeabi_dadd+0x2fc>
 8000c36:	2220      	movs	r2, #32
 8000c38:	464c      	mov	r4, r9
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	1bd2      	subs	r2, r2, r7
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	40f8      	lsrs	r0, r7
 8000c42:	4304      	orrs	r4, r0
 8000c44:	4640      	mov	r0, r8
 8000c46:	4090      	lsls	r0, r2
 8000c48:	1e42      	subs	r2, r0, #1
 8000c4a:	4190      	sbcs	r0, r2
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	40fa      	lsrs	r2, r7
 8000c50:	4304      	orrs	r4, r0
 8000c52:	1889      	adds	r1, r1, r2
 8000c54:	e6ee      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000c56:	4c87      	ldr	r4, [pc, #540]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c58:	42a2      	cmp	r2, r4
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x4a2>
 8000c5c:	e6f9      	b.n	8000a52 <__aeabi_dadd+0x296>
 8000c5e:	1818      	adds	r0, r3, r0
 8000c60:	4298      	cmp	r0, r3
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	4449      	add	r1, r9
 8000c66:	425b      	negs	r3, r3
 8000c68:	18cb      	adds	r3, r1, r3
 8000c6a:	07dc      	lsls	r4, r3, #31
 8000c6c:	0840      	lsrs	r0, r0, #1
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	469a      	mov	sl, r3
 8000c72:	0016      	movs	r6, r2
 8000c74:	4304      	orrs	r4, r0
 8000c76:	e6c6      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000c78:	4642      	mov	r2, r8
 8000c7a:	1ad4      	subs	r4, r2, r3
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	4180      	sbcs	r0, r0
 8000c80:	464b      	mov	r3, r9
 8000c82:	4240      	negs	r0, r0
 8000c84:	1a59      	subs	r1, r3, r1
 8000c86:	1a0b      	subs	r3, r1, r0
 8000c88:	469a      	mov	sl, r3
 8000c8a:	4665      	mov	r5, ip
 8000c8c:	e5ea      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000c8e:	464b      	mov	r3, r9
 8000c90:	464a      	mov	r2, r9
 8000c92:	08c0      	lsrs	r0, r0, #3
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4665      	mov	r5, ip
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	08d1      	lsrs	r1, r2, #3
 8000c9c:	e6bd      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d000      	beq.n	8000ca4 <__aeabi_dadd+0x4e8>
 8000ca2:	e08e      	b.n	8000dc2 <__aeabi_dadd+0x606>
 8000ca4:	464b      	mov	r3, r9
 8000ca6:	4303      	orrs	r3, r0
 8000ca8:	d117      	bne.n	8000cda <__aeabi_dadd+0x51e>
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	2500      	movs	r5, #0
 8000cae:	0309      	lsls	r1, r1, #12
 8000cb0:	e6da      	b.n	8000a68 <__aeabi_dadd+0x2ac>
 8000cb2:	074a      	lsls	r2, r1, #29
 8000cb4:	08db      	lsrs	r3, r3, #3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	08c9      	lsrs	r1, r1, #3
 8000cba:	e6d1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cbc:	1a1c      	subs	r4, r3, r0
 8000cbe:	464a      	mov	r2, r9
 8000cc0:	42a3      	cmp	r3, r4
 8000cc2:	419b      	sbcs	r3, r3
 8000cc4:	1a89      	subs	r1, r1, r2
 8000cc6:	425b      	negs	r3, r3
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	469a      	mov	sl, r3
 8000ccc:	2601      	movs	r6, #1
 8000cce:	e5c1      	b.n	8000854 <__aeabi_dadd+0x98>
 8000cd0:	074a      	lsls	r2, r1, #29
 8000cd2:	08db      	lsrs	r3, r3, #3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	e69f      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	08d8      	lsrs	r0, r3, #3
 8000cde:	464b      	mov	r3, r9
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	075b      	lsls	r3, r3, #29
 8000ce4:	4665      	mov	r5, ip
 8000ce6:	4303      	orrs	r3, r0
 8000ce8:	08d1      	lsrs	r1, r2, #3
 8000cea:	e6b9      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cec:	4643      	mov	r3, r8
 8000cee:	08d8      	lsrs	r0, r3, #3
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	075b      	lsls	r3, r3, #29
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	08d1      	lsrs	r1, r2, #3
 8000cfa:	e6b1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	000c      	movs	r4, r1
 8000d00:	1e63      	subs	r3, r4, #1
 8000d02:	419c      	sbcs	r4, r3
 8000d04:	e6eb      	b.n	8000ade <__aeabi_dadd+0x322>
 8000d06:	003c      	movs	r4, r7
 8000d08:	000d      	movs	r5, r1
 8000d0a:	3c20      	subs	r4, #32
 8000d0c:	40e5      	lsrs	r5, r4
 8000d0e:	2f20      	cmp	r7, #32
 8000d10:	d003      	beq.n	8000d1a <__aeabi_dadd+0x55e>
 8000d12:	2440      	movs	r4, #64	; 0x40
 8000d14:	1be4      	subs	r4, r4, r7
 8000d16:	40a1      	lsls	r1, r4
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	1e63      	subs	r3, r4, #1
 8000d1e:	419c      	sbcs	r4, r3
 8000d20:	432c      	orrs	r4, r5
 8000d22:	e770      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d0e1      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000d28:	464a      	mov	r2, r9
 8000d2a:	4302      	orrs	r2, r0
 8000d2c:	d0c1      	beq.n	8000cb2 <__aeabi_dadd+0x4f6>
 8000d2e:	074a      	lsls	r2, r1, #29
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	08c9      	lsrs	r1, r1, #3
 8000d38:	0312      	lsls	r2, r2, #12
 8000d3a:	4211      	tst	r1, r2
 8000d3c:	d008      	beq.n	8000d50 <__aeabi_dadd+0x594>
 8000d3e:	4648      	mov	r0, r9
 8000d40:	08c4      	lsrs	r4, r0, #3
 8000d42:	4214      	tst	r4, r2
 8000d44:	d104      	bne.n	8000d50 <__aeabi_dadd+0x594>
 8000d46:	4643      	mov	r3, r8
 8000d48:	0021      	movs	r1, r4
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	0742      	lsls	r2, r0, #29
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	0f5a      	lsrs	r2, r3, #29
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	0752      	lsls	r2, r2, #29
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	e681      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000d5c:	464b      	mov	r3, r9
 8000d5e:	4303      	orrs	r3, r0
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dadd+0x5a8>
 8000d62:	e714      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000d64:	464b      	mov	r3, r9
 8000d66:	464a      	mov	r2, r9
 8000d68:	08c0      	lsrs	r0, r0, #3
 8000d6a:	075b      	lsls	r3, r3, #29
 8000d6c:	4665      	mov	r5, ip
 8000d6e:	4303      	orrs	r3, r0
 8000d70:	08d1      	lsrs	r1, r2, #3
 8000d72:	e655      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000d74:	1ac4      	subs	r4, r0, r3
 8000d76:	45a0      	cmp	r8, r4
 8000d78:	4180      	sbcs	r0, r0
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	4240      	negs	r0, r0
 8000d7e:	1a59      	subs	r1, r3, r1
 8000d80:	1a0b      	subs	r3, r1, r0
 8000d82:	469a      	mov	sl, r3
 8000d84:	4665      	mov	r5, ip
 8000d86:	2601      	movs	r6, #1
 8000d88:	e564      	b.n	8000854 <__aeabi_dadd+0x98>
 8000d8a:	1a1c      	subs	r4, r3, r0
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	4180      	sbcs	r0, r0
 8000d92:	1a8a      	subs	r2, r1, r2
 8000d94:	4240      	negs	r0, r0
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	4692      	mov	sl, r2
 8000d9a:	0212      	lsls	r2, r2, #8
 8000d9c:	d549      	bpl.n	8000e32 <__aeabi_dadd+0x676>
 8000d9e:	4642      	mov	r2, r8
 8000da0:	1ad4      	subs	r4, r2, r3
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	4180      	sbcs	r0, r0
 8000da6:	464b      	mov	r3, r9
 8000da8:	4240      	negs	r0, r0
 8000daa:	1a59      	subs	r1, r3, r1
 8000dac:	1a0b      	subs	r3, r1, r0
 8000dae:	469a      	mov	sl, r3
 8000db0:	4665      	mov	r5, ip
 8000db2:	e57f      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000db4:	464b      	mov	r3, r9
 8000db6:	464a      	mov	r2, r9
 8000db8:	08c0      	lsrs	r0, r0, #3
 8000dba:	075b      	lsls	r3, r3, #29
 8000dbc:	4303      	orrs	r3, r0
 8000dbe:	08d1      	lsrs	r1, r2, #3
 8000dc0:	e62b      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000dc2:	464a      	mov	r2, r9
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	4302      	orrs	r2, r0
 8000dc8:	d138      	bne.n	8000e3c <__aeabi_dadd+0x680>
 8000dca:	074a      	lsls	r2, r1, #29
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	08c9      	lsrs	r1, r1, #3
 8000dd0:	e646      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	08c0      	lsrs	r0, r0, #3
 8000dd8:	075b      	lsls	r3, r3, #29
 8000dda:	4303      	orrs	r3, r0
 8000ddc:	08d1      	lsrs	r1, r2, #3
 8000dde:	e61f      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000de0:	181c      	adds	r4, r3, r0
 8000de2:	429c      	cmp	r4, r3
 8000de4:	419b      	sbcs	r3, r3
 8000de6:	4449      	add	r1, r9
 8000de8:	468a      	mov	sl, r1
 8000dea:	425b      	negs	r3, r3
 8000dec:	449a      	add	sl, r3
 8000dee:	4653      	mov	r3, sl
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	d400      	bmi.n	8000df6 <__aeabi_dadd+0x63a>
 8000df4:	e607      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000df6:	4652      	mov	r2, sl
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	4692      	mov	sl, r2
 8000e00:	e601      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e02:	003c      	movs	r4, r7
 8000e04:	000e      	movs	r6, r1
 8000e06:	3c20      	subs	r4, #32
 8000e08:	40e6      	lsrs	r6, r4
 8000e0a:	2f20      	cmp	r7, #32
 8000e0c:	d003      	beq.n	8000e16 <__aeabi_dadd+0x65a>
 8000e0e:	2440      	movs	r4, #64	; 0x40
 8000e10:	1be4      	subs	r4, r4, r7
 8000e12:	40a1      	lsls	r1, r4
 8000e14:	430b      	orrs	r3, r1
 8000e16:	001c      	movs	r4, r3
 8000e18:	1e63      	subs	r3, r4, #1
 8000e1a:	419c      	sbcs	r4, r3
 8000e1c:	4334      	orrs	r4, r6
 8000e1e:	e65e      	b.n	8000ade <__aeabi_dadd+0x322>
 8000e20:	4443      	add	r3, r8
 8000e22:	4283      	cmp	r3, r0
 8000e24:	4180      	sbcs	r0, r0
 8000e26:	4449      	add	r1, r9
 8000e28:	468a      	mov	sl, r1
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	001c      	movs	r4, r3
 8000e2e:	4482      	add	sl, r0
 8000e30:	e6bc      	b.n	8000bac <__aeabi_dadd+0x3f0>
 8000e32:	4653      	mov	r3, sl
 8000e34:	4323      	orrs	r3, r4
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x67e>
 8000e38:	e6a9      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000e3a:	e5e4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e3c:	074a      	lsls	r2, r1, #29
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	08c9      	lsrs	r1, r1, #3
 8000e44:	0312      	lsls	r2, r2, #12
 8000e46:	4211      	tst	r1, r2
 8000e48:	d009      	beq.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e4a:	4648      	mov	r0, r9
 8000e4c:	08c4      	lsrs	r4, r0, #3
 8000e4e:	4214      	tst	r4, r2
 8000e50:	d105      	bne.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e52:	4643      	mov	r3, r8
 8000e54:	4665      	mov	r5, ip
 8000e56:	0021      	movs	r1, r4
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	0742      	lsls	r2, r0, #29
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	0f5a      	lsrs	r2, r3, #29
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	0752      	lsls	r2, r2, #29
 8000e66:	4313      	orrs	r3, r2
 8000e68:	e5fa      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	4a01      	ldr	r2, [pc, #4]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000e6e:	001c      	movs	r4, r3
 8000e70:	e540      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	000007ff 	.word	0x000007ff
 8000e78:	ff7fffff 	.word	0xff7fffff

08000e7c <__aeabi_ddiv>:
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	4657      	mov	r7, sl
 8000e80:	464e      	mov	r6, r9
 8000e82:	4645      	mov	r5, r8
 8000e84:	46de      	mov	lr, fp
 8000e86:	b5e0      	push	{r5, r6, r7, lr}
 8000e88:	030c      	lsls	r4, r1, #12
 8000e8a:	001f      	movs	r7, r3
 8000e8c:	004b      	lsls	r3, r1, #1
 8000e8e:	4681      	mov	r9, r0
 8000e90:	4692      	mov	sl, r2
 8000e92:	0005      	movs	r5, r0
 8000e94:	b085      	sub	sp, #20
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d5b      	lsrs	r3, r3, #21
 8000e9a:	0fce      	lsrs	r6, r1, #31
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_ddiv+0x26>
 8000ea0:	e152      	b.n	8001148 <__aeabi_ddiv+0x2cc>
 8000ea2:	4ad2      	ldr	r2, [pc, #840]	; (80011ec <__aeabi_ddiv+0x370>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2e>
 8000ea8:	e16e      	b.n	8001188 <__aeabi_ddiv+0x30c>
 8000eaa:	0f42      	lsrs	r2, r0, #29
 8000eac:	00e4      	lsls	r4, r4, #3
 8000eae:	4314      	orrs	r4, r2
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	0412      	lsls	r2, r2, #16
 8000eb4:	4322      	orrs	r2, r4
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	4acd      	ldr	r2, [pc, #820]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eba:	00c5      	lsls	r5, r0, #3
 8000ebc:	4693      	mov	fp, r2
 8000ebe:	449b      	add	fp, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	033c      	lsls	r4, r7, #12
 8000ec8:	007b      	lsls	r3, r7, #1
 8000eca:	4650      	mov	r0, sl
 8000ecc:	0b24      	lsrs	r4, r4, #12
 8000ece:	0d5b      	lsrs	r3, r3, #21
 8000ed0:	0fff      	lsrs	r7, r7, #31
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x5c>
 8000ed6:	e11a      	b.n	800110e <__aeabi_ddiv+0x292>
 8000ed8:	4ac4      	ldr	r2, [pc, #784]	; (80011ec <__aeabi_ddiv+0x370>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_ddiv+0x64>
 8000ede:	e15e      	b.n	800119e <__aeabi_ddiv+0x322>
 8000ee0:	0f42      	lsrs	r2, r0, #29
 8000ee2:	00e4      	lsls	r4, r4, #3
 8000ee4:	4322      	orrs	r2, r4
 8000ee6:	2480      	movs	r4, #128	; 0x80
 8000ee8:	0424      	lsls	r4, r4, #16
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4ac0      	ldr	r2, [pc, #768]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eee:	00c1      	lsls	r1, r0, #3
 8000ef0:	4694      	mov	ip, r2
 8000ef2:	465a      	mov	r2, fp
 8000ef4:	4463      	add	r3, ip
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	469b      	mov	fp, r3
 8000efa:	2000      	movs	r0, #0
 8000efc:	0033      	movs	r3, r6
 8000efe:	407b      	eors	r3, r7
 8000f00:	469a      	mov	sl, r3
 8000f02:	464b      	mov	r3, r9
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d827      	bhi.n	8000f58 <__aeabi_ddiv+0xdc>
 8000f08:	4aba      	ldr	r2, [pc, #744]	; (80011f4 <__aeabi_ddiv+0x378>)
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	58d3      	ldr	r3, [r2, r3]
 8000f0e:	469f      	mov	pc, r3
 8000f10:	46b2      	mov	sl, r6
 8000f12:	9b00      	ldr	r3, [sp, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d016      	beq.n	8000f46 <__aeabi_ddiv+0xca>
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_ddiv+0xa2>
 8000f1c:	e287      	b.n	800142e <__aeabi_ddiv+0x5b2>
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d000      	beq.n	8000f24 <__aeabi_ddiv+0xa8>
 8000f22:	e0d5      	b.n	80010d0 <__aeabi_ddiv+0x254>
 8000f24:	2300      	movs	r3, #0
 8000f26:	2200      	movs	r2, #0
 8000f28:	2500      	movs	r5, #0
 8000f2a:	051b      	lsls	r3, r3, #20
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	4652      	mov	r2, sl
 8000f30:	07d2      	lsls	r2, r2, #31
 8000f32:	4313      	orrs	r3, r2
 8000f34:	0028      	movs	r0, r5
 8000f36:	0019      	movs	r1, r3
 8000f38:	b005      	add	sp, #20
 8000f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f3c:	46bb      	mov	fp, r7
 8000f3e:	46b2      	mov	sl, r6
 8000f40:	46a9      	mov	r9, r5
 8000f42:	46a0      	mov	r8, r4
 8000f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f46:	2200      	movs	r2, #0
 8000f48:	2500      	movs	r5, #0
 8000f4a:	4ba8      	ldr	r3, [pc, #672]	; (80011ec <__aeabi_ddiv+0x370>)
 8000f4c:	e7ed      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8000f4e:	46ba      	mov	sl, r7
 8000f50:	46a0      	mov	r8, r4
 8000f52:	000d      	movs	r5, r1
 8000f54:	9000      	str	r0, [sp, #0]
 8000f56:	e7dc      	b.n	8000f12 <__aeabi_ddiv+0x96>
 8000f58:	4544      	cmp	r4, r8
 8000f5a:	d200      	bcs.n	8000f5e <__aeabi_ddiv+0xe2>
 8000f5c:	e1c4      	b.n	80012e8 <__aeabi_ddiv+0x46c>
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0xe6>
 8000f60:	e1bf      	b.n	80012e2 <__aeabi_ddiv+0x466>
 8000f62:	2301      	movs	r3, #1
 8000f64:	425b      	negs	r3, r3
 8000f66:	469c      	mov	ip, r3
 8000f68:	002e      	movs	r6, r5
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	44e3      	add	fp, ip
 8000f70:	0223      	lsls	r3, r4, #8
 8000f72:	0e0c      	lsrs	r4, r1, #24
 8000f74:	431c      	orrs	r4, r3
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	4699      	mov	r9, r3
 8000f7a:	0423      	lsls	r3, r4, #16
 8000f7c:	020a      	lsls	r2, r1, #8
 8000f7e:	0c1f      	lsrs	r7, r3, #16
 8000f80:	4649      	mov	r1, r9
 8000f82:	9200      	str	r2, [sp, #0]
 8000f84:	9701      	str	r7, [sp, #4]
 8000f86:	f7ff f961 	bl	800024c <__aeabi_uidivmod>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	437a      	muls	r2, r7
 8000f8e:	040b      	lsls	r3, r1, #16
 8000f90:	0c31      	lsrs	r1, r6, #16
 8000f92:	4680      	mov	r8, r0
 8000f94:	4319      	orrs	r1, r3
 8000f96:	428a      	cmp	r2, r1
 8000f98:	d907      	bls.n	8000faa <__aeabi_ddiv+0x12e>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	425b      	negs	r3, r3
 8000f9e:	469c      	mov	ip, r3
 8000fa0:	1909      	adds	r1, r1, r4
 8000fa2:	44e0      	add	r8, ip
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d800      	bhi.n	8000faa <__aeabi_ddiv+0x12e>
 8000fa8:	e201      	b.n	80013ae <__aeabi_ddiv+0x532>
 8000faa:	1a88      	subs	r0, r1, r2
 8000fac:	4649      	mov	r1, r9
 8000fae:	f7ff f94d 	bl	800024c <__aeabi_uidivmod>
 8000fb2:	9a01      	ldr	r2, [sp, #4]
 8000fb4:	0436      	lsls	r6, r6, #16
 8000fb6:	4342      	muls	r2, r0
 8000fb8:	0409      	lsls	r1, r1, #16
 8000fba:	0c36      	lsrs	r6, r6, #16
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	430e      	orrs	r6, r1
 8000fc0:	42b2      	cmp	r2, r6
 8000fc2:	d904      	bls.n	8000fce <__aeabi_ddiv+0x152>
 8000fc4:	1936      	adds	r6, r6, r4
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	42b4      	cmp	r4, r6
 8000fca:	d800      	bhi.n	8000fce <__aeabi_ddiv+0x152>
 8000fcc:	e1e9      	b.n	80013a2 <__aeabi_ddiv+0x526>
 8000fce:	1ab0      	subs	r0, r6, r2
 8000fd0:	4642      	mov	r2, r8
 8000fd2:	9e00      	ldr	r6, [sp, #0]
 8000fd4:	0412      	lsls	r2, r2, #16
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	0c33      	lsrs	r3, r6, #16
 8000fda:	001f      	movs	r7, r3
 8000fdc:	0c11      	lsrs	r1, r2, #16
 8000fde:	4690      	mov	r8, r2
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	0413      	lsls	r3, r2, #16
 8000fe4:	0432      	lsls	r2, r6, #16
 8000fe6:	0c16      	lsrs	r6, r2, #16
 8000fe8:	0032      	movs	r2, r6
 8000fea:	0c1b      	lsrs	r3, r3, #16
 8000fec:	435a      	muls	r2, r3
 8000fee:	9603      	str	r6, [sp, #12]
 8000ff0:	437b      	muls	r3, r7
 8000ff2:	434e      	muls	r6, r1
 8000ff4:	4379      	muls	r1, r7
 8000ff6:	0c17      	lsrs	r7, r2, #16
 8000ff8:	46bc      	mov	ip, r7
 8000ffa:	199b      	adds	r3, r3, r6
 8000ffc:	4463      	add	r3, ip
 8000ffe:	429e      	cmp	r6, r3
 8001000:	d903      	bls.n	800100a <__aeabi_ddiv+0x18e>
 8001002:	2680      	movs	r6, #128	; 0x80
 8001004:	0276      	lsls	r6, r6, #9
 8001006:	46b4      	mov	ip, r6
 8001008:	4461      	add	r1, ip
 800100a:	0c1e      	lsrs	r6, r3, #16
 800100c:	1871      	adds	r1, r6, r1
 800100e:	0416      	lsls	r6, r2, #16
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	0c36      	lsrs	r6, r6, #16
 8001014:	199e      	adds	r6, r3, r6
 8001016:	4288      	cmp	r0, r1
 8001018:	d302      	bcc.n	8001020 <__aeabi_ddiv+0x1a4>
 800101a:	d112      	bne.n	8001042 <__aeabi_ddiv+0x1c6>
 800101c:	42b5      	cmp	r5, r6
 800101e:	d210      	bcs.n	8001042 <__aeabi_ddiv+0x1c6>
 8001020:	4643      	mov	r3, r8
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	469c      	mov	ip, r3
 8001028:	4465      	add	r5, ip
 800102a:	001f      	movs	r7, r3
 800102c:	429d      	cmp	r5, r3
 800102e:	419b      	sbcs	r3, r3
 8001030:	425b      	negs	r3, r3
 8001032:	191b      	adds	r3, r3, r4
 8001034:	18c0      	adds	r0, r0, r3
 8001036:	4284      	cmp	r4, r0
 8001038:	d200      	bcs.n	800103c <__aeabi_ddiv+0x1c0>
 800103a:	e19e      	b.n	800137a <__aeabi_ddiv+0x4fe>
 800103c:	d100      	bne.n	8001040 <__aeabi_ddiv+0x1c4>
 800103e:	e199      	b.n	8001374 <__aeabi_ddiv+0x4f8>
 8001040:	4690      	mov	r8, r2
 8001042:	1bae      	subs	r6, r5, r6
 8001044:	42b5      	cmp	r5, r6
 8001046:	41ad      	sbcs	r5, r5
 8001048:	1a40      	subs	r0, r0, r1
 800104a:	426d      	negs	r5, r5
 800104c:	1b40      	subs	r0, r0, r5
 800104e:	4284      	cmp	r4, r0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x1d8>
 8001052:	e1d2      	b.n	80013fa <__aeabi_ddiv+0x57e>
 8001054:	4649      	mov	r1, r9
 8001056:	f7ff f8f9 	bl	800024c <__aeabi_uidivmod>
 800105a:	9a01      	ldr	r2, [sp, #4]
 800105c:	040b      	lsls	r3, r1, #16
 800105e:	4342      	muls	r2, r0
 8001060:	0c31      	lsrs	r1, r6, #16
 8001062:	0005      	movs	r5, r0
 8001064:	4319      	orrs	r1, r3
 8001066:	428a      	cmp	r2, r1
 8001068:	d900      	bls.n	800106c <__aeabi_ddiv+0x1f0>
 800106a:	e16c      	b.n	8001346 <__aeabi_ddiv+0x4ca>
 800106c:	1a88      	subs	r0, r1, r2
 800106e:	4649      	mov	r1, r9
 8001070:	f7ff f8ec 	bl	800024c <__aeabi_uidivmod>
 8001074:	9a01      	ldr	r2, [sp, #4]
 8001076:	0436      	lsls	r6, r6, #16
 8001078:	4342      	muls	r2, r0
 800107a:	0409      	lsls	r1, r1, #16
 800107c:	0c36      	lsrs	r6, r6, #16
 800107e:	0003      	movs	r3, r0
 8001080:	430e      	orrs	r6, r1
 8001082:	42b2      	cmp	r2, r6
 8001084:	d900      	bls.n	8001088 <__aeabi_ddiv+0x20c>
 8001086:	e153      	b.n	8001330 <__aeabi_ddiv+0x4b4>
 8001088:	9803      	ldr	r0, [sp, #12]
 800108a:	1ab6      	subs	r6, r6, r2
 800108c:	0002      	movs	r2, r0
 800108e:	042d      	lsls	r5, r5, #16
 8001090:	431d      	orrs	r5, r3
 8001092:	9f02      	ldr	r7, [sp, #8]
 8001094:	042b      	lsls	r3, r5, #16
 8001096:	0c1b      	lsrs	r3, r3, #16
 8001098:	435a      	muls	r2, r3
 800109a:	437b      	muls	r3, r7
 800109c:	469c      	mov	ip, r3
 800109e:	0c29      	lsrs	r1, r5, #16
 80010a0:	4348      	muls	r0, r1
 80010a2:	0c13      	lsrs	r3, r2, #16
 80010a4:	4484      	add	ip, r0
 80010a6:	4463      	add	r3, ip
 80010a8:	4379      	muls	r1, r7
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d903      	bls.n	80010b6 <__aeabi_ddiv+0x23a>
 80010ae:	2080      	movs	r0, #128	; 0x80
 80010b0:	0240      	lsls	r0, r0, #9
 80010b2:	4684      	mov	ip, r0
 80010b4:	4461      	add	r1, ip
 80010b6:	0c18      	lsrs	r0, r3, #16
 80010b8:	0412      	lsls	r2, r2, #16
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	0c12      	lsrs	r2, r2, #16
 80010be:	1840      	adds	r0, r0, r1
 80010c0:	189b      	adds	r3, r3, r2
 80010c2:	4286      	cmp	r6, r0
 80010c4:	d200      	bcs.n	80010c8 <__aeabi_ddiv+0x24c>
 80010c6:	e100      	b.n	80012ca <__aeabi_ddiv+0x44e>
 80010c8:	d100      	bne.n	80010cc <__aeabi_ddiv+0x250>
 80010ca:	e0fb      	b.n	80012c4 <__aeabi_ddiv+0x448>
 80010cc:	2301      	movs	r3, #1
 80010ce:	431d      	orrs	r5, r3
 80010d0:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <__aeabi_ddiv+0x37c>)
 80010d2:	445b      	add	r3, fp
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dc00      	bgt.n	80010da <__aeabi_ddiv+0x25e>
 80010d8:	e0aa      	b.n	8001230 <__aeabi_ddiv+0x3b4>
 80010da:	076a      	lsls	r2, r5, #29
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0x264>
 80010de:	e13d      	b.n	800135c <__aeabi_ddiv+0x4e0>
 80010e0:	08e9      	lsrs	r1, r5, #3
 80010e2:	4642      	mov	r2, r8
 80010e4:	01d2      	lsls	r2, r2, #7
 80010e6:	d506      	bpl.n	80010f6 <__aeabi_ddiv+0x27a>
 80010e8:	4642      	mov	r2, r8
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <__aeabi_ddiv+0x380>)
 80010ec:	401a      	ands	r2, r3
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	4690      	mov	r8, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	445b      	add	r3, fp
 80010f6:	4a42      	ldr	r2, [pc, #264]	; (8001200 <__aeabi_ddiv+0x384>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	dd00      	ble.n	80010fe <__aeabi_ddiv+0x282>
 80010fc:	e723      	b.n	8000f46 <__aeabi_ddiv+0xca>
 80010fe:	4642      	mov	r2, r8
 8001100:	055b      	lsls	r3, r3, #21
 8001102:	0755      	lsls	r5, r2, #29
 8001104:	0252      	lsls	r2, r2, #9
 8001106:	430d      	orrs	r5, r1
 8001108:	0b12      	lsrs	r2, r2, #12
 800110a:	0d5b      	lsrs	r3, r3, #21
 800110c:	e70d      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800110e:	4651      	mov	r1, sl
 8001110:	4321      	orrs	r1, r4
 8001112:	d100      	bne.n	8001116 <__aeabi_ddiv+0x29a>
 8001114:	e07c      	b.n	8001210 <__aeabi_ddiv+0x394>
 8001116:	2c00      	cmp	r4, #0
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x2a0>
 800111a:	e0fb      	b.n	8001314 <__aeabi_ddiv+0x498>
 800111c:	0020      	movs	r0, r4
 800111e:	f001 fa1b 	bl	8002558 <__clzsi2>
 8001122:	0002      	movs	r2, r0
 8001124:	3a0b      	subs	r2, #11
 8001126:	231d      	movs	r3, #29
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	4652      	mov	r2, sl
 800112c:	0001      	movs	r1, r0
 800112e:	40da      	lsrs	r2, r3
 8001130:	4653      	mov	r3, sl
 8001132:	3908      	subs	r1, #8
 8001134:	408b      	lsls	r3, r1
 8001136:	408c      	lsls	r4, r1
 8001138:	0019      	movs	r1, r3
 800113a:	4314      	orrs	r4, r2
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <__aeabi_ddiv+0x388>)
 800113e:	4458      	add	r0, fp
 8001140:	469b      	mov	fp, r3
 8001142:	4483      	add	fp, r0
 8001144:	2000      	movs	r0, #0
 8001146:	e6d9      	b.n	8000efc <__aeabi_ddiv+0x80>
 8001148:	0003      	movs	r3, r0
 800114a:	4323      	orrs	r3, r4
 800114c:	4698      	mov	r8, r3
 800114e:	d044      	beq.n	80011da <__aeabi_ddiv+0x35e>
 8001150:	2c00      	cmp	r4, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_ddiv+0x2da>
 8001154:	e0cf      	b.n	80012f6 <__aeabi_ddiv+0x47a>
 8001156:	0020      	movs	r0, r4
 8001158:	f001 f9fe 	bl	8002558 <__clzsi2>
 800115c:	0001      	movs	r1, r0
 800115e:	0002      	movs	r2, r0
 8001160:	390b      	subs	r1, #11
 8001162:	231d      	movs	r3, #29
 8001164:	1a5b      	subs	r3, r3, r1
 8001166:	4649      	mov	r1, r9
 8001168:	0010      	movs	r0, r2
 800116a:	40d9      	lsrs	r1, r3
 800116c:	3808      	subs	r0, #8
 800116e:	4084      	lsls	r4, r0
 8001170:	000b      	movs	r3, r1
 8001172:	464d      	mov	r5, r9
 8001174:	4323      	orrs	r3, r4
 8001176:	4698      	mov	r8, r3
 8001178:	4085      	lsls	r5, r0
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <__aeabi_ddiv+0x38c>)
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	469b      	mov	fp, r3
 8001180:	2300      	movs	r3, #0
 8001182:	4699      	mov	r9, r3
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	e69e      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 8001188:	0002      	movs	r2, r0
 800118a:	4322      	orrs	r2, r4
 800118c:	4690      	mov	r8, r2
 800118e:	d11d      	bne.n	80011cc <__aeabi_ddiv+0x350>
 8001190:	2208      	movs	r2, #8
 8001192:	469b      	mov	fp, r3
 8001194:	2302      	movs	r3, #2
 8001196:	2500      	movs	r5, #0
 8001198:	4691      	mov	r9, r2
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	e693      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 800119e:	4651      	mov	r1, sl
 80011a0:	4321      	orrs	r1, r4
 80011a2:	d109      	bne.n	80011b8 <__aeabi_ddiv+0x33c>
 80011a4:	2302      	movs	r3, #2
 80011a6:	464a      	mov	r2, r9
 80011a8:	431a      	orrs	r2, r3
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <__aeabi_ddiv+0x390>)
 80011ac:	4691      	mov	r9, r2
 80011ae:	469c      	mov	ip, r3
 80011b0:	2400      	movs	r4, #0
 80011b2:	2002      	movs	r0, #2
 80011b4:	44e3      	add	fp, ip
 80011b6:	e6a1      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011b8:	2303      	movs	r3, #3
 80011ba:	464a      	mov	r2, r9
 80011bc:	431a      	orrs	r2, r3
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <__aeabi_ddiv+0x390>)
 80011c0:	4691      	mov	r9, r2
 80011c2:	469c      	mov	ip, r3
 80011c4:	4651      	mov	r1, sl
 80011c6:	2003      	movs	r0, #3
 80011c8:	44e3      	add	fp, ip
 80011ca:	e697      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011cc:	220c      	movs	r2, #12
 80011ce:	469b      	mov	fp, r3
 80011d0:	2303      	movs	r3, #3
 80011d2:	46a0      	mov	r8, r4
 80011d4:	4691      	mov	r9, r2
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	e675      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011da:	2304      	movs	r3, #4
 80011dc:	4699      	mov	r9, r3
 80011de:	2300      	movs	r3, #0
 80011e0:	469b      	mov	fp, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	2500      	movs	r5, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	e66d      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	fffffc01 	.word	0xfffffc01
 80011f4:	0800d28c 	.word	0x0800d28c
 80011f8:	000003ff 	.word	0x000003ff
 80011fc:	feffffff 	.word	0xfeffffff
 8001200:	000007fe 	.word	0x000007fe
 8001204:	000003f3 	.word	0x000003f3
 8001208:	fffffc0d 	.word	0xfffffc0d
 800120c:	fffff801 	.word	0xfffff801
 8001210:	464a      	mov	r2, r9
 8001212:	2301      	movs	r3, #1
 8001214:	431a      	orrs	r2, r3
 8001216:	4691      	mov	r9, r2
 8001218:	2400      	movs	r4, #0
 800121a:	2001      	movs	r0, #1
 800121c:	e66e      	b.n	8000efc <__aeabi_ddiv+0x80>
 800121e:	2300      	movs	r3, #0
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	469a      	mov	sl, r3
 8001224:	2500      	movs	r5, #0
 8001226:	4b88      	ldr	r3, [pc, #544]	; (8001448 <__aeabi_ddiv+0x5cc>)
 8001228:	0312      	lsls	r2, r2, #12
 800122a:	e67e      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800122c:	2501      	movs	r5, #1
 800122e:	426d      	negs	r5, r5
 8001230:	2201      	movs	r2, #1
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	2a38      	cmp	r2, #56	; 0x38
 8001236:	dd00      	ble.n	800123a <__aeabi_ddiv+0x3be>
 8001238:	e674      	b.n	8000f24 <__aeabi_ddiv+0xa8>
 800123a:	2a1f      	cmp	r2, #31
 800123c:	dc00      	bgt.n	8001240 <__aeabi_ddiv+0x3c4>
 800123e:	e0bd      	b.n	80013bc <__aeabi_ddiv+0x540>
 8001240:	211f      	movs	r1, #31
 8001242:	4249      	negs	r1, r1
 8001244:	1acb      	subs	r3, r1, r3
 8001246:	4641      	mov	r1, r8
 8001248:	40d9      	lsrs	r1, r3
 800124a:	000b      	movs	r3, r1
 800124c:	2a20      	cmp	r2, #32
 800124e:	d004      	beq.n	800125a <__aeabi_ddiv+0x3de>
 8001250:	4641      	mov	r1, r8
 8001252:	4a7e      	ldr	r2, [pc, #504]	; (800144c <__aeabi_ddiv+0x5d0>)
 8001254:	445a      	add	r2, fp
 8001256:	4091      	lsls	r1, r2
 8001258:	430d      	orrs	r5, r1
 800125a:	0029      	movs	r1, r5
 800125c:	1e4a      	subs	r2, r1, #1
 800125e:	4191      	sbcs	r1, r2
 8001260:	4319      	orrs	r1, r3
 8001262:	2307      	movs	r3, #7
 8001264:	001d      	movs	r5, r3
 8001266:	2200      	movs	r2, #0
 8001268:	400d      	ands	r5, r1
 800126a:	420b      	tst	r3, r1
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x3f4>
 800126e:	e0d0      	b.n	8001412 <__aeabi_ddiv+0x596>
 8001270:	220f      	movs	r2, #15
 8001272:	2300      	movs	r3, #0
 8001274:	400a      	ands	r2, r1
 8001276:	2a04      	cmp	r2, #4
 8001278:	d100      	bne.n	800127c <__aeabi_ddiv+0x400>
 800127a:	e0c7      	b.n	800140c <__aeabi_ddiv+0x590>
 800127c:	1d0a      	adds	r2, r1, #4
 800127e:	428a      	cmp	r2, r1
 8001280:	4189      	sbcs	r1, r1
 8001282:	4249      	negs	r1, r1
 8001284:	185b      	adds	r3, r3, r1
 8001286:	0011      	movs	r1, r2
 8001288:	021a      	lsls	r2, r3, #8
 800128a:	d400      	bmi.n	800128e <__aeabi_ddiv+0x412>
 800128c:	e0be      	b.n	800140c <__aeabi_ddiv+0x590>
 800128e:	2301      	movs	r3, #1
 8001290:	2200      	movs	r2, #0
 8001292:	2500      	movs	r5, #0
 8001294:	e649      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	4643      	mov	r3, r8
 800129a:	0312      	lsls	r2, r2, #12
 800129c:	4213      	tst	r3, r2
 800129e:	d008      	beq.n	80012b2 <__aeabi_ddiv+0x436>
 80012a0:	4214      	tst	r4, r2
 80012a2:	d106      	bne.n	80012b2 <__aeabi_ddiv+0x436>
 80012a4:	4322      	orrs	r2, r4
 80012a6:	0312      	lsls	r2, r2, #12
 80012a8:	46ba      	mov	sl, r7
 80012aa:	000d      	movs	r5, r1
 80012ac:	4b66      	ldr	r3, [pc, #408]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012ae:	0b12      	lsrs	r2, r2, #12
 80012b0:	e63b      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	4643      	mov	r3, r8
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	431a      	orrs	r2, r3
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	46b2      	mov	sl, r6
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012c0:	0b12      	lsrs	r2, r2, #12
 80012c2:	e632      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d100      	bne.n	80012ca <__aeabi_ddiv+0x44e>
 80012c8:	e702      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80012ca:	19a6      	adds	r6, r4, r6
 80012cc:	1e6a      	subs	r2, r5, #1
 80012ce:	42a6      	cmp	r6, r4
 80012d0:	d200      	bcs.n	80012d4 <__aeabi_ddiv+0x458>
 80012d2:	e089      	b.n	80013e8 <__aeabi_ddiv+0x56c>
 80012d4:	4286      	cmp	r6, r0
 80012d6:	d200      	bcs.n	80012da <__aeabi_ddiv+0x45e>
 80012d8:	e09f      	b.n	800141a <__aeabi_ddiv+0x59e>
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x462>
 80012dc:	e0af      	b.n	800143e <__aeabi_ddiv+0x5c2>
 80012de:	0015      	movs	r5, r2
 80012e0:	e6f4      	b.n	80010cc <__aeabi_ddiv+0x250>
 80012e2:	42a9      	cmp	r1, r5
 80012e4:	d900      	bls.n	80012e8 <__aeabi_ddiv+0x46c>
 80012e6:	e63c      	b.n	8000f62 <__aeabi_ddiv+0xe6>
 80012e8:	4643      	mov	r3, r8
 80012ea:	07de      	lsls	r6, r3, #31
 80012ec:	0858      	lsrs	r0, r3, #1
 80012ee:	086b      	lsrs	r3, r5, #1
 80012f0:	431e      	orrs	r6, r3
 80012f2:	07ed      	lsls	r5, r5, #31
 80012f4:	e63c      	b.n	8000f70 <__aeabi_ddiv+0xf4>
 80012f6:	f001 f92f 	bl	8002558 <__clzsi2>
 80012fa:	0001      	movs	r1, r0
 80012fc:	0002      	movs	r2, r0
 80012fe:	3115      	adds	r1, #21
 8001300:	3220      	adds	r2, #32
 8001302:	291c      	cmp	r1, #28
 8001304:	dc00      	bgt.n	8001308 <__aeabi_ddiv+0x48c>
 8001306:	e72c      	b.n	8001162 <__aeabi_ddiv+0x2e6>
 8001308:	464b      	mov	r3, r9
 800130a:	3808      	subs	r0, #8
 800130c:	4083      	lsls	r3, r0
 800130e:	2500      	movs	r5, #0
 8001310:	4698      	mov	r8, r3
 8001312:	e732      	b.n	800117a <__aeabi_ddiv+0x2fe>
 8001314:	f001 f920 	bl	8002558 <__clzsi2>
 8001318:	0003      	movs	r3, r0
 800131a:	001a      	movs	r2, r3
 800131c:	3215      	adds	r2, #21
 800131e:	3020      	adds	r0, #32
 8001320:	2a1c      	cmp	r2, #28
 8001322:	dc00      	bgt.n	8001326 <__aeabi_ddiv+0x4aa>
 8001324:	e6ff      	b.n	8001126 <__aeabi_ddiv+0x2aa>
 8001326:	4654      	mov	r4, sl
 8001328:	3b08      	subs	r3, #8
 800132a:	2100      	movs	r1, #0
 800132c:	409c      	lsls	r4, r3
 800132e:	e705      	b.n	800113c <__aeabi_ddiv+0x2c0>
 8001330:	1936      	adds	r6, r6, r4
 8001332:	3b01      	subs	r3, #1
 8001334:	42b4      	cmp	r4, r6
 8001336:	d900      	bls.n	800133a <__aeabi_ddiv+0x4be>
 8001338:	e6a6      	b.n	8001088 <__aeabi_ddiv+0x20c>
 800133a:	42b2      	cmp	r2, r6
 800133c:	d800      	bhi.n	8001340 <__aeabi_ddiv+0x4c4>
 800133e:	e6a3      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001340:	1e83      	subs	r3, r0, #2
 8001342:	1936      	adds	r6, r6, r4
 8001344:	e6a0      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001346:	1909      	adds	r1, r1, r4
 8001348:	3d01      	subs	r5, #1
 800134a:	428c      	cmp	r4, r1
 800134c:	d900      	bls.n	8001350 <__aeabi_ddiv+0x4d4>
 800134e:	e68d      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001350:	428a      	cmp	r2, r1
 8001352:	d800      	bhi.n	8001356 <__aeabi_ddiv+0x4da>
 8001354:	e68a      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001356:	1e85      	subs	r5, r0, #2
 8001358:	1909      	adds	r1, r1, r4
 800135a:	e687      	b.n	800106c <__aeabi_ddiv+0x1f0>
 800135c:	220f      	movs	r2, #15
 800135e:	402a      	ands	r2, r5
 8001360:	2a04      	cmp	r2, #4
 8001362:	d100      	bne.n	8001366 <__aeabi_ddiv+0x4ea>
 8001364:	e6bc      	b.n	80010e0 <__aeabi_ddiv+0x264>
 8001366:	1d29      	adds	r1, r5, #4
 8001368:	42a9      	cmp	r1, r5
 800136a:	41ad      	sbcs	r5, r5
 800136c:	426d      	negs	r5, r5
 800136e:	08c9      	lsrs	r1, r1, #3
 8001370:	44a8      	add	r8, r5
 8001372:	e6b6      	b.n	80010e2 <__aeabi_ddiv+0x266>
 8001374:	42af      	cmp	r7, r5
 8001376:	d900      	bls.n	800137a <__aeabi_ddiv+0x4fe>
 8001378:	e662      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 800137a:	4281      	cmp	r1, r0
 800137c:	d804      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 800137e:	d000      	beq.n	8001382 <__aeabi_ddiv+0x506>
 8001380:	e65e      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001382:	42ae      	cmp	r6, r5
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 8001386:	e65b      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001388:	2302      	movs	r3, #2
 800138a:	425b      	negs	r3, r3
 800138c:	469c      	mov	ip, r3
 800138e:	9b00      	ldr	r3, [sp, #0]
 8001390:	44e0      	add	r8, ip
 8001392:	469c      	mov	ip, r3
 8001394:	4465      	add	r5, ip
 8001396:	429d      	cmp	r5, r3
 8001398:	419b      	sbcs	r3, r3
 800139a:	425b      	negs	r3, r3
 800139c:	191b      	adds	r3, r3, r4
 800139e:	18c0      	adds	r0, r0, r3
 80013a0:	e64f      	b.n	8001042 <__aeabi_ddiv+0x1c6>
 80013a2:	42b2      	cmp	r2, r6
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x52c>
 80013a6:	e612      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013a8:	1e83      	subs	r3, r0, #2
 80013aa:	1936      	adds	r6, r6, r4
 80013ac:	e60f      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013ae:	428a      	cmp	r2, r1
 80013b0:	d800      	bhi.n	80013b4 <__aeabi_ddiv+0x538>
 80013b2:	e5fa      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013b4:	1e83      	subs	r3, r0, #2
 80013b6:	4698      	mov	r8, r3
 80013b8:	1909      	adds	r1, r1, r4
 80013ba:	e5f6      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <__aeabi_ddiv+0x5d4>)
 80013be:	0028      	movs	r0, r5
 80013c0:	445b      	add	r3, fp
 80013c2:	4641      	mov	r1, r8
 80013c4:	409d      	lsls	r5, r3
 80013c6:	4099      	lsls	r1, r3
 80013c8:	40d0      	lsrs	r0, r2
 80013ca:	1e6b      	subs	r3, r5, #1
 80013cc:	419d      	sbcs	r5, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4301      	orrs	r1, r0
 80013d2:	4329      	orrs	r1, r5
 80013d4:	40d3      	lsrs	r3, r2
 80013d6:	074a      	lsls	r2, r1, #29
 80013d8:	d100      	bne.n	80013dc <__aeabi_ddiv+0x560>
 80013da:	e755      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013dc:	220f      	movs	r2, #15
 80013de:	400a      	ands	r2, r1
 80013e0:	2a04      	cmp	r2, #4
 80013e2:	d000      	beq.n	80013e6 <__aeabi_ddiv+0x56a>
 80013e4:	e74a      	b.n	800127c <__aeabi_ddiv+0x400>
 80013e6:	e74f      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013e8:	0015      	movs	r5, r2
 80013ea:	4286      	cmp	r6, r0
 80013ec:	d000      	beq.n	80013f0 <__aeabi_ddiv+0x574>
 80013ee:	e66d      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f0:	9a00      	ldr	r2, [sp, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d000      	beq.n	80013f8 <__aeabi_ddiv+0x57c>
 80013f6:	e669      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f8:	e66a      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <__aeabi_ddiv+0x5d8>)
 80013fc:	445b      	add	r3, fp
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dc00      	bgt.n	8001404 <__aeabi_ddiv+0x588>
 8001402:	e713      	b.n	800122c <__aeabi_ddiv+0x3b0>
 8001404:	2501      	movs	r5, #1
 8001406:	2100      	movs	r1, #0
 8001408:	44a8      	add	r8, r5
 800140a:	e66a      	b.n	80010e2 <__aeabi_ddiv+0x266>
 800140c:	075d      	lsls	r5, r3, #29
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	0b1a      	lsrs	r2, r3, #12
 8001412:	08c9      	lsrs	r1, r1, #3
 8001414:	2300      	movs	r3, #0
 8001416:	430d      	orrs	r5, r1
 8001418:	e587      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800141a:	9900      	ldr	r1, [sp, #0]
 800141c:	3d02      	subs	r5, #2
 800141e:	004a      	lsls	r2, r1, #1
 8001420:	428a      	cmp	r2, r1
 8001422:	41bf      	sbcs	r7, r7
 8001424:	427f      	negs	r7, r7
 8001426:	193f      	adds	r7, r7, r4
 8001428:	19f6      	adds	r6, r6, r7
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	e7dd      	b.n	80013ea <__aeabi_ddiv+0x56e>
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	4643      	mov	r3, r8
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	431a      	orrs	r2, r3
 8001436:	0312      	lsls	r2, r2, #12
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <__aeabi_ddiv+0x5cc>)
 800143a:	0b12      	lsrs	r2, r2, #12
 800143c:	e575      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800143e:	9900      	ldr	r1, [sp, #0]
 8001440:	4299      	cmp	r1, r3
 8001442:	d3ea      	bcc.n	800141a <__aeabi_ddiv+0x59e>
 8001444:	0015      	movs	r5, r2
 8001446:	e7d3      	b.n	80013f0 <__aeabi_ddiv+0x574>
 8001448:	000007ff 	.word	0x000007ff
 800144c:	0000043e 	.word	0x0000043e
 8001450:	0000041e 	.word	0x0000041e
 8001454:	000003ff 	.word	0x000003ff

08001458 <__eqdf2>:
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	464e      	mov	r6, r9
 800145c:	4645      	mov	r5, r8
 800145e:	46de      	mov	lr, fp
 8001460:	4657      	mov	r7, sl
 8001462:	4690      	mov	r8, r2
 8001464:	b5e0      	push	{r5, r6, r7, lr}
 8001466:	0017      	movs	r7, r2
 8001468:	031a      	lsls	r2, r3, #12
 800146a:	0b12      	lsrs	r2, r2, #12
 800146c:	0005      	movs	r5, r0
 800146e:	4684      	mov	ip, r0
 8001470:	4819      	ldr	r0, [pc, #100]	; (80014d8 <__eqdf2+0x80>)
 8001472:	030e      	lsls	r6, r1, #12
 8001474:	004c      	lsls	r4, r1, #1
 8001476:	4691      	mov	r9, r2
 8001478:	005a      	lsls	r2, r3, #1
 800147a:	0fdb      	lsrs	r3, r3, #31
 800147c:	469b      	mov	fp, r3
 800147e:	0b36      	lsrs	r6, r6, #12
 8001480:	0d64      	lsrs	r4, r4, #21
 8001482:	0fc9      	lsrs	r1, r1, #31
 8001484:	0d52      	lsrs	r2, r2, #21
 8001486:	4284      	cmp	r4, r0
 8001488:	d019      	beq.n	80014be <__eqdf2+0x66>
 800148a:	4282      	cmp	r2, r0
 800148c:	d010      	beq.n	80014b0 <__eqdf2+0x58>
 800148e:	2001      	movs	r0, #1
 8001490:	4294      	cmp	r4, r2
 8001492:	d10e      	bne.n	80014b2 <__eqdf2+0x5a>
 8001494:	454e      	cmp	r6, r9
 8001496:	d10c      	bne.n	80014b2 <__eqdf2+0x5a>
 8001498:	2001      	movs	r0, #1
 800149a:	45c4      	cmp	ip, r8
 800149c:	d109      	bne.n	80014b2 <__eqdf2+0x5a>
 800149e:	4559      	cmp	r1, fp
 80014a0:	d017      	beq.n	80014d2 <__eqdf2+0x7a>
 80014a2:	2c00      	cmp	r4, #0
 80014a4:	d105      	bne.n	80014b2 <__eqdf2+0x5a>
 80014a6:	0030      	movs	r0, r6
 80014a8:	4328      	orrs	r0, r5
 80014aa:	1e43      	subs	r3, r0, #1
 80014ac:	4198      	sbcs	r0, r3
 80014ae:	e000      	b.n	80014b2 <__eqdf2+0x5a>
 80014b0:	2001      	movs	r0, #1
 80014b2:	bcf0      	pop	{r4, r5, r6, r7}
 80014b4:	46bb      	mov	fp, r7
 80014b6:	46b2      	mov	sl, r6
 80014b8:	46a9      	mov	r9, r5
 80014ba:	46a0      	mov	r8, r4
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014be:	0033      	movs	r3, r6
 80014c0:	2001      	movs	r0, #1
 80014c2:	432b      	orrs	r3, r5
 80014c4:	d1f5      	bne.n	80014b2 <__eqdf2+0x5a>
 80014c6:	42a2      	cmp	r2, r4
 80014c8:	d1f3      	bne.n	80014b2 <__eqdf2+0x5a>
 80014ca:	464b      	mov	r3, r9
 80014cc:	433b      	orrs	r3, r7
 80014ce:	d1f0      	bne.n	80014b2 <__eqdf2+0x5a>
 80014d0:	e7e2      	b.n	8001498 <__eqdf2+0x40>
 80014d2:	2000      	movs	r0, #0
 80014d4:	e7ed      	b.n	80014b2 <__eqdf2+0x5a>
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	000007ff 	.word	0x000007ff

080014dc <__gedf2>:
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	4647      	mov	r7, r8
 80014e0:	46ce      	mov	lr, r9
 80014e2:	0004      	movs	r4, r0
 80014e4:	0018      	movs	r0, r3
 80014e6:	0016      	movs	r6, r2
 80014e8:	031b      	lsls	r3, r3, #12
 80014ea:	0b1b      	lsrs	r3, r3, #12
 80014ec:	4d2d      	ldr	r5, [pc, #180]	; (80015a4 <__gedf2+0xc8>)
 80014ee:	004a      	lsls	r2, r1, #1
 80014f0:	4699      	mov	r9, r3
 80014f2:	b580      	push	{r7, lr}
 80014f4:	0043      	lsls	r3, r0, #1
 80014f6:	030f      	lsls	r7, r1, #12
 80014f8:	46a4      	mov	ip, r4
 80014fa:	46b0      	mov	r8, r6
 80014fc:	0b3f      	lsrs	r7, r7, #12
 80014fe:	0d52      	lsrs	r2, r2, #21
 8001500:	0fc9      	lsrs	r1, r1, #31
 8001502:	0d5b      	lsrs	r3, r3, #21
 8001504:	0fc0      	lsrs	r0, r0, #31
 8001506:	42aa      	cmp	r2, r5
 8001508:	d021      	beq.n	800154e <__gedf2+0x72>
 800150a:	42ab      	cmp	r3, r5
 800150c:	d013      	beq.n	8001536 <__gedf2+0x5a>
 800150e:	2a00      	cmp	r2, #0
 8001510:	d122      	bne.n	8001558 <__gedf2+0x7c>
 8001512:	433c      	orrs	r4, r7
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <__gedf2+0x42>
 8001518:	464d      	mov	r5, r9
 800151a:	432e      	orrs	r6, r5
 800151c:	d022      	beq.n	8001564 <__gedf2+0x88>
 800151e:	2c00      	cmp	r4, #0
 8001520:	d010      	beq.n	8001544 <__gedf2+0x68>
 8001522:	4281      	cmp	r1, r0
 8001524:	d022      	beq.n	800156c <__gedf2+0x90>
 8001526:	2002      	movs	r0, #2
 8001528:	3901      	subs	r1, #1
 800152a:	4008      	ands	r0, r1
 800152c:	3801      	subs	r0, #1
 800152e:	bcc0      	pop	{r6, r7}
 8001530:	46b9      	mov	r9, r7
 8001532:	46b0      	mov	r8, r6
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001536:	464d      	mov	r5, r9
 8001538:	432e      	orrs	r6, r5
 800153a:	d129      	bne.n	8001590 <__gedf2+0xb4>
 800153c:	2a00      	cmp	r2, #0
 800153e:	d1f0      	bne.n	8001522 <__gedf2+0x46>
 8001540:	433c      	orrs	r4, r7
 8001542:	d1ee      	bne.n	8001522 <__gedf2+0x46>
 8001544:	2800      	cmp	r0, #0
 8001546:	d1f2      	bne.n	800152e <__gedf2+0x52>
 8001548:	2001      	movs	r0, #1
 800154a:	4240      	negs	r0, r0
 800154c:	e7ef      	b.n	800152e <__gedf2+0x52>
 800154e:	003d      	movs	r5, r7
 8001550:	4325      	orrs	r5, r4
 8001552:	d11d      	bne.n	8001590 <__gedf2+0xb4>
 8001554:	4293      	cmp	r3, r2
 8001556:	d0ee      	beq.n	8001536 <__gedf2+0x5a>
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e2      	bne.n	8001522 <__gedf2+0x46>
 800155c:	464c      	mov	r4, r9
 800155e:	4326      	orrs	r6, r4
 8001560:	d1df      	bne.n	8001522 <__gedf2+0x46>
 8001562:	e7e0      	b.n	8001526 <__gedf2+0x4a>
 8001564:	2000      	movs	r0, #0
 8001566:	2c00      	cmp	r4, #0
 8001568:	d0e1      	beq.n	800152e <__gedf2+0x52>
 800156a:	e7dc      	b.n	8001526 <__gedf2+0x4a>
 800156c:	429a      	cmp	r2, r3
 800156e:	dc0a      	bgt.n	8001586 <__gedf2+0xaa>
 8001570:	dbe8      	blt.n	8001544 <__gedf2+0x68>
 8001572:	454f      	cmp	r7, r9
 8001574:	d8d7      	bhi.n	8001526 <__gedf2+0x4a>
 8001576:	d00e      	beq.n	8001596 <__gedf2+0xba>
 8001578:	2000      	movs	r0, #0
 800157a:	454f      	cmp	r7, r9
 800157c:	d2d7      	bcs.n	800152e <__gedf2+0x52>
 800157e:	2900      	cmp	r1, #0
 8001580:	d0e2      	beq.n	8001548 <__gedf2+0x6c>
 8001582:	0008      	movs	r0, r1
 8001584:	e7d3      	b.n	800152e <__gedf2+0x52>
 8001586:	4243      	negs	r3, r0
 8001588:	4158      	adcs	r0, r3
 800158a:	0040      	lsls	r0, r0, #1
 800158c:	3801      	subs	r0, #1
 800158e:	e7ce      	b.n	800152e <__gedf2+0x52>
 8001590:	2002      	movs	r0, #2
 8001592:	4240      	negs	r0, r0
 8001594:	e7cb      	b.n	800152e <__gedf2+0x52>
 8001596:	45c4      	cmp	ip, r8
 8001598:	d8c5      	bhi.n	8001526 <__gedf2+0x4a>
 800159a:	2000      	movs	r0, #0
 800159c:	45c4      	cmp	ip, r8
 800159e:	d2c6      	bcs.n	800152e <__gedf2+0x52>
 80015a0:	e7ed      	b.n	800157e <__gedf2+0xa2>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	000007ff 	.word	0x000007ff

080015a8 <__ledf2>:
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	4647      	mov	r7, r8
 80015ac:	46ce      	mov	lr, r9
 80015ae:	0004      	movs	r4, r0
 80015b0:	0018      	movs	r0, r3
 80015b2:	0016      	movs	r6, r2
 80015b4:	031b      	lsls	r3, r3, #12
 80015b6:	0b1b      	lsrs	r3, r3, #12
 80015b8:	4d2c      	ldr	r5, [pc, #176]	; (800166c <__ledf2+0xc4>)
 80015ba:	004a      	lsls	r2, r1, #1
 80015bc:	4699      	mov	r9, r3
 80015be:	b580      	push	{r7, lr}
 80015c0:	0043      	lsls	r3, r0, #1
 80015c2:	030f      	lsls	r7, r1, #12
 80015c4:	46a4      	mov	ip, r4
 80015c6:	46b0      	mov	r8, r6
 80015c8:	0b3f      	lsrs	r7, r7, #12
 80015ca:	0d52      	lsrs	r2, r2, #21
 80015cc:	0fc9      	lsrs	r1, r1, #31
 80015ce:	0d5b      	lsrs	r3, r3, #21
 80015d0:	0fc0      	lsrs	r0, r0, #31
 80015d2:	42aa      	cmp	r2, r5
 80015d4:	d00d      	beq.n	80015f2 <__ledf2+0x4a>
 80015d6:	42ab      	cmp	r3, r5
 80015d8:	d010      	beq.n	80015fc <__ledf2+0x54>
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d127      	bne.n	800162e <__ledf2+0x86>
 80015de:	433c      	orrs	r4, r7
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d111      	bne.n	8001608 <__ledf2+0x60>
 80015e4:	464d      	mov	r5, r9
 80015e6:	432e      	orrs	r6, r5
 80015e8:	d10e      	bne.n	8001608 <__ledf2+0x60>
 80015ea:	2000      	movs	r0, #0
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d015      	beq.n	800161c <__ledf2+0x74>
 80015f0:	e00e      	b.n	8001610 <__ledf2+0x68>
 80015f2:	003d      	movs	r5, r7
 80015f4:	4325      	orrs	r5, r4
 80015f6:	d110      	bne.n	800161a <__ledf2+0x72>
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d118      	bne.n	800162e <__ledf2+0x86>
 80015fc:	464d      	mov	r5, r9
 80015fe:	432e      	orrs	r6, r5
 8001600:	d10b      	bne.n	800161a <__ledf2+0x72>
 8001602:	2a00      	cmp	r2, #0
 8001604:	d102      	bne.n	800160c <__ledf2+0x64>
 8001606:	433c      	orrs	r4, r7
 8001608:	2c00      	cmp	r4, #0
 800160a:	d00b      	beq.n	8001624 <__ledf2+0x7c>
 800160c:	4281      	cmp	r1, r0
 800160e:	d014      	beq.n	800163a <__ledf2+0x92>
 8001610:	2002      	movs	r0, #2
 8001612:	3901      	subs	r1, #1
 8001614:	4008      	ands	r0, r1
 8001616:	3801      	subs	r0, #1
 8001618:	e000      	b.n	800161c <__ledf2+0x74>
 800161a:	2002      	movs	r0, #2
 800161c:	bcc0      	pop	{r6, r7}
 800161e:	46b9      	mov	r9, r7
 8001620:	46b0      	mov	r8, r6
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001624:	2800      	cmp	r0, #0
 8001626:	d1f9      	bne.n	800161c <__ledf2+0x74>
 8001628:	2001      	movs	r0, #1
 800162a:	4240      	negs	r0, r0
 800162c:	e7f6      	b.n	800161c <__ledf2+0x74>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ec      	bne.n	800160c <__ledf2+0x64>
 8001632:	464c      	mov	r4, r9
 8001634:	4326      	orrs	r6, r4
 8001636:	d1e9      	bne.n	800160c <__ledf2+0x64>
 8001638:	e7ea      	b.n	8001610 <__ledf2+0x68>
 800163a:	429a      	cmp	r2, r3
 800163c:	dd04      	ble.n	8001648 <__ledf2+0xa0>
 800163e:	4243      	negs	r3, r0
 8001640:	4158      	adcs	r0, r3
 8001642:	0040      	lsls	r0, r0, #1
 8001644:	3801      	subs	r0, #1
 8001646:	e7e9      	b.n	800161c <__ledf2+0x74>
 8001648:	429a      	cmp	r2, r3
 800164a:	dbeb      	blt.n	8001624 <__ledf2+0x7c>
 800164c:	454f      	cmp	r7, r9
 800164e:	d8df      	bhi.n	8001610 <__ledf2+0x68>
 8001650:	d006      	beq.n	8001660 <__ledf2+0xb8>
 8001652:	2000      	movs	r0, #0
 8001654:	454f      	cmp	r7, r9
 8001656:	d2e1      	bcs.n	800161c <__ledf2+0x74>
 8001658:	2900      	cmp	r1, #0
 800165a:	d0e5      	beq.n	8001628 <__ledf2+0x80>
 800165c:	0008      	movs	r0, r1
 800165e:	e7dd      	b.n	800161c <__ledf2+0x74>
 8001660:	45c4      	cmp	ip, r8
 8001662:	d8d5      	bhi.n	8001610 <__ledf2+0x68>
 8001664:	2000      	movs	r0, #0
 8001666:	45c4      	cmp	ip, r8
 8001668:	d2d8      	bcs.n	800161c <__ledf2+0x74>
 800166a:	e7f5      	b.n	8001658 <__ledf2+0xb0>
 800166c:	000007ff 	.word	0x000007ff

08001670 <__aeabi_dmul>:
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	4645      	mov	r5, r8
 8001674:	46de      	mov	lr, fp
 8001676:	4657      	mov	r7, sl
 8001678:	464e      	mov	r6, r9
 800167a:	b5e0      	push	{r5, r6, r7, lr}
 800167c:	001f      	movs	r7, r3
 800167e:	030b      	lsls	r3, r1, #12
 8001680:	0b1b      	lsrs	r3, r3, #12
 8001682:	469b      	mov	fp, r3
 8001684:	004d      	lsls	r5, r1, #1
 8001686:	0fcb      	lsrs	r3, r1, #31
 8001688:	0004      	movs	r4, r0
 800168a:	4691      	mov	r9, r2
 800168c:	4698      	mov	r8, r3
 800168e:	b087      	sub	sp, #28
 8001690:	0d6d      	lsrs	r5, r5, #21
 8001692:	d100      	bne.n	8001696 <__aeabi_dmul+0x26>
 8001694:	e1cd      	b.n	8001a32 <__aeabi_dmul+0x3c2>
 8001696:	4bce      	ldr	r3, [pc, #824]	; (80019d0 <__aeabi_dmul+0x360>)
 8001698:	429d      	cmp	r5, r3
 800169a:	d100      	bne.n	800169e <__aeabi_dmul+0x2e>
 800169c:	e1e9      	b.n	8001a72 <__aeabi_dmul+0x402>
 800169e:	465a      	mov	r2, fp
 80016a0:	0f43      	lsrs	r3, r0, #29
 80016a2:	00d2      	lsls	r2, r2, #3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	0412      	lsls	r2, r2, #16
 80016aa:	431a      	orrs	r2, r3
 80016ac:	00c3      	lsls	r3, r0, #3
 80016ae:	469a      	mov	sl, r3
 80016b0:	4bc8      	ldr	r3, [pc, #800]	; (80019d4 <__aeabi_dmul+0x364>)
 80016b2:	4693      	mov	fp, r2
 80016b4:	469c      	mov	ip, r3
 80016b6:	2300      	movs	r3, #0
 80016b8:	2600      	movs	r6, #0
 80016ba:	4465      	add	r5, ip
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	033c      	lsls	r4, r7, #12
 80016c0:	007b      	lsls	r3, r7, #1
 80016c2:	4648      	mov	r0, r9
 80016c4:	0b24      	lsrs	r4, r4, #12
 80016c6:	0d5b      	lsrs	r3, r3, #21
 80016c8:	0fff      	lsrs	r7, r7, #31
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dmul+0x60>
 80016ce:	e189      	b.n	80019e4 <__aeabi_dmul+0x374>
 80016d0:	4abf      	ldr	r2, [pc, #764]	; (80019d0 <__aeabi_dmul+0x360>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <__aeabi_dmul+0x9a>
 80016d6:	0f42      	lsrs	r2, r0, #29
 80016d8:	00e4      	lsls	r4, r4, #3
 80016da:	4322      	orrs	r2, r4
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	0424      	lsls	r4, r4, #16
 80016e0:	4314      	orrs	r4, r2
 80016e2:	4abc      	ldr	r2, [pc, #752]	; (80019d4 <__aeabi_dmul+0x364>)
 80016e4:	2100      	movs	r1, #0
 80016e6:	4694      	mov	ip, r2
 80016e8:	4642      	mov	r2, r8
 80016ea:	4463      	add	r3, ip
 80016ec:	195b      	adds	r3, r3, r5
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	9b01      	ldr	r3, [sp, #4]
 80016f2:	407a      	eors	r2, r7
 80016f4:	3301      	adds	r3, #1
 80016f6:	00c0      	lsls	r0, r0, #3
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2e0a      	cmp	r6, #10
 80016fe:	dd1c      	ble.n	800173a <__aeabi_dmul+0xca>
 8001700:	003a      	movs	r2, r7
 8001702:	2e0b      	cmp	r6, #11
 8001704:	d05e      	beq.n	80017c4 <__aeabi_dmul+0x154>
 8001706:	4647      	mov	r7, r8
 8001708:	e056      	b.n	80017b8 <__aeabi_dmul+0x148>
 800170a:	4649      	mov	r1, r9
 800170c:	4bb0      	ldr	r3, [pc, #704]	; (80019d0 <__aeabi_dmul+0x360>)
 800170e:	4321      	orrs	r1, r4
 8001710:	18eb      	adds	r3, r5, r3
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2900      	cmp	r1, #0
 8001716:	d12a      	bne.n	800176e <__aeabi_dmul+0xfe>
 8001718:	2080      	movs	r0, #128	; 0x80
 800171a:	2202      	movs	r2, #2
 800171c:	0100      	lsls	r0, r0, #4
 800171e:	002b      	movs	r3, r5
 8001720:	4684      	mov	ip, r0
 8001722:	4316      	orrs	r6, r2
 8001724:	4642      	mov	r2, r8
 8001726:	4463      	add	r3, ip
 8001728:	407a      	eors	r2, r7
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	2e0a      	cmp	r6, #10
 8001730:	dd00      	ble.n	8001734 <__aeabi_dmul+0xc4>
 8001732:	e231      	b.n	8001b98 <__aeabi_dmul+0x528>
 8001734:	2000      	movs	r0, #0
 8001736:	2400      	movs	r4, #0
 8001738:	2102      	movs	r1, #2
 800173a:	2e02      	cmp	r6, #2
 800173c:	dc26      	bgt.n	800178c <__aeabi_dmul+0x11c>
 800173e:	3e01      	subs	r6, #1
 8001740:	2e01      	cmp	r6, #1
 8001742:	d852      	bhi.n	80017ea <__aeabi_dmul+0x17a>
 8001744:	2902      	cmp	r1, #2
 8001746:	d04c      	beq.n	80017e2 <__aeabi_dmul+0x172>
 8001748:	2901      	cmp	r1, #1
 800174a:	d000      	beq.n	800174e <__aeabi_dmul+0xde>
 800174c:	e118      	b.n	8001980 <__aeabi_dmul+0x310>
 800174e:	2300      	movs	r3, #0
 8001750:	2400      	movs	r4, #0
 8001752:	2500      	movs	r5, #0
 8001754:	051b      	lsls	r3, r3, #20
 8001756:	4323      	orrs	r3, r4
 8001758:	07d2      	lsls	r2, r2, #31
 800175a:	4313      	orrs	r3, r2
 800175c:	0028      	movs	r0, r5
 800175e:	0019      	movs	r1, r3
 8001760:	b007      	add	sp, #28
 8001762:	bcf0      	pop	{r4, r5, r6, r7}
 8001764:	46bb      	mov	fp, r7
 8001766:	46b2      	mov	sl, r6
 8001768:	46a9      	mov	r9, r5
 800176a:	46a0      	mov	r8, r4
 800176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	2203      	movs	r2, #3
 8001772:	0109      	lsls	r1, r1, #4
 8001774:	002b      	movs	r3, r5
 8001776:	468c      	mov	ip, r1
 8001778:	4316      	orrs	r6, r2
 800177a:	4642      	mov	r2, r8
 800177c:	4463      	add	r3, ip
 800177e:	407a      	eors	r2, r7
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2e0a      	cmp	r6, #10
 8001786:	dd00      	ble.n	800178a <__aeabi_dmul+0x11a>
 8001788:	e228      	b.n	8001bdc <__aeabi_dmul+0x56c>
 800178a:	2103      	movs	r1, #3
 800178c:	2501      	movs	r5, #1
 800178e:	40b5      	lsls	r5, r6
 8001790:	46ac      	mov	ip, r5
 8001792:	26a6      	movs	r6, #166	; 0xa6
 8001794:	4663      	mov	r3, ip
 8001796:	00f6      	lsls	r6, r6, #3
 8001798:	4035      	ands	r5, r6
 800179a:	4233      	tst	r3, r6
 800179c:	d10b      	bne.n	80017b6 <__aeabi_dmul+0x146>
 800179e:	2690      	movs	r6, #144	; 0x90
 80017a0:	00b6      	lsls	r6, r6, #2
 80017a2:	4233      	tst	r3, r6
 80017a4:	d118      	bne.n	80017d8 <__aeabi_dmul+0x168>
 80017a6:	3eb9      	subs	r6, #185	; 0xb9
 80017a8:	3eff      	subs	r6, #255	; 0xff
 80017aa:	421e      	tst	r6, r3
 80017ac:	d01d      	beq.n	80017ea <__aeabi_dmul+0x17a>
 80017ae:	46a3      	mov	fp, r4
 80017b0:	4682      	mov	sl, r0
 80017b2:	9100      	str	r1, [sp, #0]
 80017b4:	e000      	b.n	80017b8 <__aeabi_dmul+0x148>
 80017b6:	0017      	movs	r7, r2
 80017b8:	9900      	ldr	r1, [sp, #0]
 80017ba:	003a      	movs	r2, r7
 80017bc:	2902      	cmp	r1, #2
 80017be:	d010      	beq.n	80017e2 <__aeabi_dmul+0x172>
 80017c0:	465c      	mov	r4, fp
 80017c2:	4650      	mov	r0, sl
 80017c4:	2903      	cmp	r1, #3
 80017c6:	d1bf      	bne.n	8001748 <__aeabi_dmul+0xd8>
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	031b      	lsls	r3, r3, #12
 80017cc:	431c      	orrs	r4, r3
 80017ce:	0324      	lsls	r4, r4, #12
 80017d0:	0005      	movs	r5, r0
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <__aeabi_dmul+0x360>)
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	e7bd      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017d8:	2480      	movs	r4, #128	; 0x80
 80017da:	2200      	movs	r2, #0
 80017dc:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <__aeabi_dmul+0x360>)
 80017de:	0324      	lsls	r4, r4, #12
 80017e0:	e7b8      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017e2:	2400      	movs	r4, #0
 80017e4:	2500      	movs	r5, #0
 80017e6:	4b7a      	ldr	r3, [pc, #488]	; (80019d0 <__aeabi_dmul+0x360>)
 80017e8:	e7b4      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017ea:	4653      	mov	r3, sl
 80017ec:	041e      	lsls	r6, r3, #16
 80017ee:	0c36      	lsrs	r6, r6, #16
 80017f0:	0c1f      	lsrs	r7, r3, #16
 80017f2:	0033      	movs	r3, r6
 80017f4:	0c01      	lsrs	r1, r0, #16
 80017f6:	0400      	lsls	r0, r0, #16
 80017f8:	0c00      	lsrs	r0, r0, #16
 80017fa:	4343      	muls	r3, r0
 80017fc:	4698      	mov	r8, r3
 80017fe:	0003      	movs	r3, r0
 8001800:	437b      	muls	r3, r7
 8001802:	4699      	mov	r9, r3
 8001804:	0033      	movs	r3, r6
 8001806:	434b      	muls	r3, r1
 8001808:	469c      	mov	ip, r3
 800180a:	4643      	mov	r3, r8
 800180c:	000d      	movs	r5, r1
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	469a      	mov	sl, r3
 8001812:	437d      	muls	r5, r7
 8001814:	44cc      	add	ip, r9
 8001816:	44d4      	add	ip, sl
 8001818:	9500      	str	r5, [sp, #0]
 800181a:	45e1      	cmp	r9, ip
 800181c:	d904      	bls.n	8001828 <__aeabi_dmul+0x1b8>
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	025b      	lsls	r3, r3, #9
 8001822:	4699      	mov	r9, r3
 8001824:	444d      	add	r5, r9
 8001826:	9500      	str	r5, [sp, #0]
 8001828:	4663      	mov	r3, ip
 800182a:	0c1b      	lsrs	r3, r3, #16
 800182c:	001d      	movs	r5, r3
 800182e:	4663      	mov	r3, ip
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	469c      	mov	ip, r3
 8001834:	4643      	mov	r3, r8
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	4698      	mov	r8, r3
 800183c:	4663      	mov	r3, ip
 800183e:	4443      	add	r3, r8
 8001840:	9303      	str	r3, [sp, #12]
 8001842:	0c23      	lsrs	r3, r4, #16
 8001844:	4698      	mov	r8, r3
 8001846:	0033      	movs	r3, r6
 8001848:	0424      	lsls	r4, r4, #16
 800184a:	0c24      	lsrs	r4, r4, #16
 800184c:	4363      	muls	r3, r4
 800184e:	469c      	mov	ip, r3
 8001850:	0023      	movs	r3, r4
 8001852:	437b      	muls	r3, r7
 8001854:	4699      	mov	r9, r3
 8001856:	4643      	mov	r3, r8
 8001858:	435e      	muls	r6, r3
 800185a:	435f      	muls	r7, r3
 800185c:	444e      	add	r6, r9
 800185e:	4663      	mov	r3, ip
 8001860:	46b2      	mov	sl, r6
 8001862:	0c1e      	lsrs	r6, r3, #16
 8001864:	4456      	add	r6, sl
 8001866:	45b1      	cmp	r9, r6
 8001868:	d903      	bls.n	8001872 <__aeabi_dmul+0x202>
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	025b      	lsls	r3, r3, #9
 800186e:	4699      	mov	r9, r3
 8001870:	444f      	add	r7, r9
 8001872:	0c33      	lsrs	r3, r6, #16
 8001874:	4699      	mov	r9, r3
 8001876:	003b      	movs	r3, r7
 8001878:	444b      	add	r3, r9
 800187a:	9305      	str	r3, [sp, #20]
 800187c:	4663      	mov	r3, ip
 800187e:	46ac      	mov	ip, r5
 8001880:	041f      	lsls	r7, r3, #16
 8001882:	0c3f      	lsrs	r7, r7, #16
 8001884:	0436      	lsls	r6, r6, #16
 8001886:	19f6      	adds	r6, r6, r7
 8001888:	44b4      	add	ip, r6
 800188a:	4663      	mov	r3, ip
 800188c:	9304      	str	r3, [sp, #16]
 800188e:	465b      	mov	r3, fp
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	469c      	mov	ip, r3
 8001894:	465b      	mov	r3, fp
 8001896:	041f      	lsls	r7, r3, #16
 8001898:	0c3f      	lsrs	r7, r7, #16
 800189a:	003b      	movs	r3, r7
 800189c:	4343      	muls	r3, r0
 800189e:	4699      	mov	r9, r3
 80018a0:	4663      	mov	r3, ip
 80018a2:	4343      	muls	r3, r0
 80018a4:	469a      	mov	sl, r3
 80018a6:	464b      	mov	r3, r9
 80018a8:	4660      	mov	r0, ip
 80018aa:	0c1b      	lsrs	r3, r3, #16
 80018ac:	469b      	mov	fp, r3
 80018ae:	4348      	muls	r0, r1
 80018b0:	4379      	muls	r1, r7
 80018b2:	4451      	add	r1, sl
 80018b4:	4459      	add	r1, fp
 80018b6:	458a      	cmp	sl, r1
 80018b8:	d903      	bls.n	80018c2 <__aeabi_dmul+0x252>
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	469a      	mov	sl, r3
 80018c0:	4450      	add	r0, sl
 80018c2:	0c0b      	lsrs	r3, r1, #16
 80018c4:	469a      	mov	sl, r3
 80018c6:	464b      	mov	r3, r9
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	4699      	mov	r9, r3
 80018ce:	003b      	movs	r3, r7
 80018d0:	4363      	muls	r3, r4
 80018d2:	0409      	lsls	r1, r1, #16
 80018d4:	4645      	mov	r5, r8
 80018d6:	4449      	add	r1, r9
 80018d8:	4699      	mov	r9, r3
 80018da:	4663      	mov	r3, ip
 80018dc:	435c      	muls	r4, r3
 80018de:	436b      	muls	r3, r5
 80018e0:	469c      	mov	ip, r3
 80018e2:	464b      	mov	r3, r9
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	4698      	mov	r8, r3
 80018e8:	436f      	muls	r7, r5
 80018ea:	193f      	adds	r7, r7, r4
 80018ec:	4447      	add	r7, r8
 80018ee:	4450      	add	r0, sl
 80018f0:	42bc      	cmp	r4, r7
 80018f2:	d903      	bls.n	80018fc <__aeabi_dmul+0x28c>
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	4698      	mov	r8, r3
 80018fa:	44c4      	add	ip, r8
 80018fc:	9b04      	ldr	r3, [sp, #16]
 80018fe:	9d00      	ldr	r5, [sp, #0]
 8001900:	4698      	mov	r8, r3
 8001902:	4445      	add	r5, r8
 8001904:	42b5      	cmp	r5, r6
 8001906:	41b6      	sbcs	r6, r6
 8001908:	4273      	negs	r3, r6
 800190a:	4698      	mov	r8, r3
 800190c:	464b      	mov	r3, r9
 800190e:	041e      	lsls	r6, r3, #16
 8001910:	9b05      	ldr	r3, [sp, #20]
 8001912:	043c      	lsls	r4, r7, #16
 8001914:	4699      	mov	r9, r3
 8001916:	0c36      	lsrs	r6, r6, #16
 8001918:	19a4      	adds	r4, r4, r6
 800191a:	444c      	add	r4, r9
 800191c:	46a1      	mov	r9, r4
 800191e:	4683      	mov	fp, r0
 8001920:	186e      	adds	r6, r5, r1
 8001922:	44c1      	add	r9, r8
 8001924:	428e      	cmp	r6, r1
 8001926:	4189      	sbcs	r1, r1
 8001928:	44cb      	add	fp, r9
 800192a:	465d      	mov	r5, fp
 800192c:	4249      	negs	r1, r1
 800192e:	186d      	adds	r5, r5, r1
 8001930:	429c      	cmp	r4, r3
 8001932:	41a4      	sbcs	r4, r4
 8001934:	45c1      	cmp	r9, r8
 8001936:	419b      	sbcs	r3, r3
 8001938:	4583      	cmp	fp, r0
 800193a:	4180      	sbcs	r0, r0
 800193c:	428d      	cmp	r5, r1
 800193e:	4189      	sbcs	r1, r1
 8001940:	425b      	negs	r3, r3
 8001942:	4264      	negs	r4, r4
 8001944:	431c      	orrs	r4, r3
 8001946:	4240      	negs	r0, r0
 8001948:	9b03      	ldr	r3, [sp, #12]
 800194a:	4249      	negs	r1, r1
 800194c:	4301      	orrs	r1, r0
 800194e:	0270      	lsls	r0, r6, #9
 8001950:	0c3f      	lsrs	r7, r7, #16
 8001952:	4318      	orrs	r0, r3
 8001954:	19e4      	adds	r4, r4, r7
 8001956:	1e47      	subs	r7, r0, #1
 8001958:	41b8      	sbcs	r0, r7
 800195a:	1864      	adds	r4, r4, r1
 800195c:	4464      	add	r4, ip
 800195e:	0df6      	lsrs	r6, r6, #23
 8001960:	0261      	lsls	r1, r4, #9
 8001962:	4330      	orrs	r0, r6
 8001964:	0dec      	lsrs	r4, r5, #23
 8001966:	026e      	lsls	r6, r5, #9
 8001968:	430c      	orrs	r4, r1
 800196a:	4330      	orrs	r0, r6
 800196c:	01c9      	lsls	r1, r1, #7
 800196e:	d400      	bmi.n	8001972 <__aeabi_dmul+0x302>
 8001970:	e0f1      	b.n	8001b56 <__aeabi_dmul+0x4e6>
 8001972:	2101      	movs	r1, #1
 8001974:	0843      	lsrs	r3, r0, #1
 8001976:	4001      	ands	r1, r0
 8001978:	430b      	orrs	r3, r1
 800197a:	07e0      	lsls	r0, r4, #31
 800197c:	4318      	orrs	r0, r3
 800197e:	0864      	lsrs	r4, r4, #1
 8001980:	4915      	ldr	r1, [pc, #84]	; (80019d8 <__aeabi_dmul+0x368>)
 8001982:	9b02      	ldr	r3, [sp, #8]
 8001984:	468c      	mov	ip, r1
 8001986:	4463      	add	r3, ip
 8001988:	2b00      	cmp	r3, #0
 800198a:	dc00      	bgt.n	800198e <__aeabi_dmul+0x31e>
 800198c:	e097      	b.n	8001abe <__aeabi_dmul+0x44e>
 800198e:	0741      	lsls	r1, r0, #29
 8001990:	d009      	beq.n	80019a6 <__aeabi_dmul+0x336>
 8001992:	210f      	movs	r1, #15
 8001994:	4001      	ands	r1, r0
 8001996:	2904      	cmp	r1, #4
 8001998:	d005      	beq.n	80019a6 <__aeabi_dmul+0x336>
 800199a:	1d01      	adds	r1, r0, #4
 800199c:	4281      	cmp	r1, r0
 800199e:	4180      	sbcs	r0, r0
 80019a0:	4240      	negs	r0, r0
 80019a2:	1824      	adds	r4, r4, r0
 80019a4:	0008      	movs	r0, r1
 80019a6:	01e1      	lsls	r1, r4, #7
 80019a8:	d506      	bpl.n	80019b8 <__aeabi_dmul+0x348>
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	00c9      	lsls	r1, r1, #3
 80019ae:	468c      	mov	ip, r1
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <__aeabi_dmul+0x36c>)
 80019b2:	401c      	ands	r4, r3
 80019b4:	9b02      	ldr	r3, [sp, #8]
 80019b6:	4463      	add	r3, ip
 80019b8:	4909      	ldr	r1, [pc, #36]	; (80019e0 <__aeabi_dmul+0x370>)
 80019ba:	428b      	cmp	r3, r1
 80019bc:	dd00      	ble.n	80019c0 <__aeabi_dmul+0x350>
 80019be:	e710      	b.n	80017e2 <__aeabi_dmul+0x172>
 80019c0:	0761      	lsls	r1, r4, #29
 80019c2:	08c5      	lsrs	r5, r0, #3
 80019c4:	0264      	lsls	r4, r4, #9
 80019c6:	055b      	lsls	r3, r3, #21
 80019c8:	430d      	orrs	r5, r1
 80019ca:	0b24      	lsrs	r4, r4, #12
 80019cc:	0d5b      	lsrs	r3, r3, #21
 80019ce:	e6c1      	b.n	8001754 <__aeabi_dmul+0xe4>
 80019d0:	000007ff 	.word	0x000007ff
 80019d4:	fffffc01 	.word	0xfffffc01
 80019d8:	000003ff 	.word	0x000003ff
 80019dc:	feffffff 	.word	0xfeffffff
 80019e0:	000007fe 	.word	0x000007fe
 80019e4:	464b      	mov	r3, r9
 80019e6:	4323      	orrs	r3, r4
 80019e8:	d059      	beq.n	8001a9e <__aeabi_dmul+0x42e>
 80019ea:	2c00      	cmp	r4, #0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dmul+0x380>
 80019ee:	e0a3      	b.n	8001b38 <__aeabi_dmul+0x4c8>
 80019f0:	0020      	movs	r0, r4
 80019f2:	f000 fdb1 	bl	8002558 <__clzsi2>
 80019f6:	0001      	movs	r1, r0
 80019f8:	0003      	movs	r3, r0
 80019fa:	390b      	subs	r1, #11
 80019fc:	221d      	movs	r2, #29
 80019fe:	1a52      	subs	r2, r2, r1
 8001a00:	4649      	mov	r1, r9
 8001a02:	0018      	movs	r0, r3
 8001a04:	40d1      	lsrs	r1, r2
 8001a06:	464a      	mov	r2, r9
 8001a08:	3808      	subs	r0, #8
 8001a0a:	4082      	lsls	r2, r0
 8001a0c:	4084      	lsls	r4, r0
 8001a0e:	0010      	movs	r0, r2
 8001a10:	430c      	orrs	r4, r1
 8001a12:	4a74      	ldr	r2, [pc, #464]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a14:	1aeb      	subs	r3, r5, r3
 8001a16:	4694      	mov	ip, r2
 8001a18:	4642      	mov	r2, r8
 8001a1a:	4463      	add	r3, ip
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	9b01      	ldr	r3, [sp, #4]
 8001a20:	407a      	eors	r2, r7
 8001a22:	3301      	adds	r3, #1
 8001a24:	2100      	movs	r1, #0
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	2e0a      	cmp	r6, #10
 8001a2c:	dd00      	ble.n	8001a30 <__aeabi_dmul+0x3c0>
 8001a2e:	e667      	b.n	8001700 <__aeabi_dmul+0x90>
 8001a30:	e683      	b.n	800173a <__aeabi_dmul+0xca>
 8001a32:	465b      	mov	r3, fp
 8001a34:	4303      	orrs	r3, r0
 8001a36:	469a      	mov	sl, r3
 8001a38:	d02a      	beq.n	8001a90 <__aeabi_dmul+0x420>
 8001a3a:	465b      	mov	r3, fp
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d06d      	beq.n	8001b1c <__aeabi_dmul+0x4ac>
 8001a40:	4658      	mov	r0, fp
 8001a42:	f000 fd89 	bl	8002558 <__clzsi2>
 8001a46:	0001      	movs	r1, r0
 8001a48:	0003      	movs	r3, r0
 8001a4a:	390b      	subs	r1, #11
 8001a4c:	221d      	movs	r2, #29
 8001a4e:	1a52      	subs	r2, r2, r1
 8001a50:	0021      	movs	r1, r4
 8001a52:	0018      	movs	r0, r3
 8001a54:	465d      	mov	r5, fp
 8001a56:	40d1      	lsrs	r1, r2
 8001a58:	3808      	subs	r0, #8
 8001a5a:	4085      	lsls	r5, r0
 8001a5c:	000a      	movs	r2, r1
 8001a5e:	4084      	lsls	r4, r0
 8001a60:	432a      	orrs	r2, r5
 8001a62:	4693      	mov	fp, r2
 8001a64:	46a2      	mov	sl, r4
 8001a66:	4d5f      	ldr	r5, [pc, #380]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a68:	2600      	movs	r6, #0
 8001a6a:	1aed      	subs	r5, r5, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	e625      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a72:	465b      	mov	r3, fp
 8001a74:	4303      	orrs	r3, r0
 8001a76:	469a      	mov	sl, r3
 8001a78:	d105      	bne.n	8001a86 <__aeabi_dmul+0x416>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	3302      	adds	r3, #2
 8001a80:	2608      	movs	r6, #8
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	e61b      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a86:	2303      	movs	r3, #3
 8001a88:	4682      	mov	sl, r0
 8001a8a:	260c      	movs	r6, #12
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	e616      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a90:	2300      	movs	r3, #0
 8001a92:	469b      	mov	fp, r3
 8001a94:	3301      	adds	r3, #1
 8001a96:	2604      	movs	r6, #4
 8001a98:	2500      	movs	r5, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	e60f      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a9e:	4642      	mov	r2, r8
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	9501      	str	r5, [sp, #4]
 8001aa4:	431e      	orrs	r6, r3
 8001aa6:	9b01      	ldr	r3, [sp, #4]
 8001aa8:	407a      	eors	r2, r7
 8001aaa:	3301      	adds	r3, #1
 8001aac:	2400      	movs	r4, #0
 8001aae:	2000      	movs	r0, #0
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2e0a      	cmp	r6, #10
 8001ab8:	dd00      	ble.n	8001abc <__aeabi_dmul+0x44c>
 8001aba:	e621      	b.n	8001700 <__aeabi_dmul+0x90>
 8001abc:	e63d      	b.n	800173a <__aeabi_dmul+0xca>
 8001abe:	2101      	movs	r1, #1
 8001ac0:	1ac9      	subs	r1, r1, r3
 8001ac2:	2938      	cmp	r1, #56	; 0x38
 8001ac4:	dd00      	ble.n	8001ac8 <__aeabi_dmul+0x458>
 8001ac6:	e642      	b.n	800174e <__aeabi_dmul+0xde>
 8001ac8:	291f      	cmp	r1, #31
 8001aca:	dd47      	ble.n	8001b5c <__aeabi_dmul+0x4ec>
 8001acc:	261f      	movs	r6, #31
 8001ace:	0025      	movs	r5, r4
 8001ad0:	4276      	negs	r6, r6
 8001ad2:	1af3      	subs	r3, r6, r3
 8001ad4:	40dd      	lsrs	r5, r3
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	2920      	cmp	r1, #32
 8001ada:	d005      	beq.n	8001ae8 <__aeabi_dmul+0x478>
 8001adc:	4942      	ldr	r1, [pc, #264]	; (8001be8 <__aeabi_dmul+0x578>)
 8001ade:	9d02      	ldr	r5, [sp, #8]
 8001ae0:	468c      	mov	ip, r1
 8001ae2:	4465      	add	r5, ip
 8001ae4:	40ac      	lsls	r4, r5
 8001ae6:	4320      	orrs	r0, r4
 8001ae8:	1e41      	subs	r1, r0, #1
 8001aea:	4188      	sbcs	r0, r1
 8001aec:	4318      	orrs	r0, r3
 8001aee:	2307      	movs	r3, #7
 8001af0:	001d      	movs	r5, r3
 8001af2:	2400      	movs	r4, #0
 8001af4:	4005      	ands	r5, r0
 8001af6:	4203      	tst	r3, r0
 8001af8:	d04a      	beq.n	8001b90 <__aeabi_dmul+0x520>
 8001afa:	230f      	movs	r3, #15
 8001afc:	2400      	movs	r4, #0
 8001afe:	4003      	ands	r3, r0
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d042      	beq.n	8001b8a <__aeabi_dmul+0x51a>
 8001b04:	1d03      	adds	r3, r0, #4
 8001b06:	4283      	cmp	r3, r0
 8001b08:	4180      	sbcs	r0, r0
 8001b0a:	4240      	negs	r0, r0
 8001b0c:	1824      	adds	r4, r4, r0
 8001b0e:	0018      	movs	r0, r3
 8001b10:	0223      	lsls	r3, r4, #8
 8001b12:	d53a      	bpl.n	8001b8a <__aeabi_dmul+0x51a>
 8001b14:	2301      	movs	r3, #1
 8001b16:	2400      	movs	r4, #0
 8001b18:	2500      	movs	r5, #0
 8001b1a:	e61b      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b1c:	f000 fd1c 	bl	8002558 <__clzsi2>
 8001b20:	0001      	movs	r1, r0
 8001b22:	0003      	movs	r3, r0
 8001b24:	3115      	adds	r1, #21
 8001b26:	3320      	adds	r3, #32
 8001b28:	291c      	cmp	r1, #28
 8001b2a:	dd8f      	ble.n	8001a4c <__aeabi_dmul+0x3dc>
 8001b2c:	3808      	subs	r0, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4084      	lsls	r4, r0
 8001b32:	4692      	mov	sl, r2
 8001b34:	46a3      	mov	fp, r4
 8001b36:	e796      	b.n	8001a66 <__aeabi_dmul+0x3f6>
 8001b38:	f000 fd0e 	bl	8002558 <__clzsi2>
 8001b3c:	0001      	movs	r1, r0
 8001b3e:	0003      	movs	r3, r0
 8001b40:	3115      	adds	r1, #21
 8001b42:	3320      	adds	r3, #32
 8001b44:	291c      	cmp	r1, #28
 8001b46:	dc00      	bgt.n	8001b4a <__aeabi_dmul+0x4da>
 8001b48:	e758      	b.n	80019fc <__aeabi_dmul+0x38c>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	464c      	mov	r4, r9
 8001b4e:	3a08      	subs	r2, #8
 8001b50:	2000      	movs	r0, #0
 8001b52:	4094      	lsls	r4, r2
 8001b54:	e75d      	b.n	8001a12 <__aeabi_dmul+0x3a2>
 8001b56:	9b01      	ldr	r3, [sp, #4]
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	e711      	b.n	8001980 <__aeabi_dmul+0x310>
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <__aeabi_dmul+0x57c>)
 8001b5e:	0026      	movs	r6, r4
 8001b60:	469c      	mov	ip, r3
 8001b62:	0003      	movs	r3, r0
 8001b64:	9d02      	ldr	r5, [sp, #8]
 8001b66:	40cb      	lsrs	r3, r1
 8001b68:	4465      	add	r5, ip
 8001b6a:	40ae      	lsls	r6, r5
 8001b6c:	431e      	orrs	r6, r3
 8001b6e:	0003      	movs	r3, r0
 8001b70:	40ab      	lsls	r3, r5
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	4183      	sbcs	r3, r0
 8001b76:	0030      	movs	r0, r6
 8001b78:	4318      	orrs	r0, r3
 8001b7a:	40cc      	lsrs	r4, r1
 8001b7c:	0743      	lsls	r3, r0, #29
 8001b7e:	d0c7      	beq.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b80:	230f      	movs	r3, #15
 8001b82:	4003      	ands	r3, r0
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d1bd      	bne.n	8001b04 <__aeabi_dmul+0x494>
 8001b88:	e7c2      	b.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b8a:	0765      	lsls	r5, r4, #29
 8001b8c:	0264      	lsls	r4, r4, #9
 8001b8e:	0b24      	lsrs	r4, r4, #12
 8001b90:	08c0      	lsrs	r0, r0, #3
 8001b92:	2300      	movs	r3, #0
 8001b94:	4305      	orrs	r5, r0
 8001b96:	e5dd      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b98:	2500      	movs	r5, #0
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	2e0f      	cmp	r6, #15
 8001b9e:	d10c      	bne.n	8001bba <__aeabi_dmul+0x54a>
 8001ba0:	2480      	movs	r4, #128	; 0x80
 8001ba2:	465b      	mov	r3, fp
 8001ba4:	0324      	lsls	r4, r4, #12
 8001ba6:	4223      	tst	r3, r4
 8001ba8:	d00e      	beq.n	8001bc8 <__aeabi_dmul+0x558>
 8001baa:	4221      	tst	r1, r4
 8001bac:	d10c      	bne.n	8001bc8 <__aeabi_dmul+0x558>
 8001bae:	430c      	orrs	r4, r1
 8001bb0:	0324      	lsls	r4, r4, #12
 8001bb2:	003a      	movs	r2, r7
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bb6:	0b24      	lsrs	r4, r4, #12
 8001bb8:	e5cc      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bba:	2e0b      	cmp	r6, #11
 8001bbc:	d000      	beq.n	8001bc0 <__aeabi_dmul+0x550>
 8001bbe:	e5a2      	b.n	8001706 <__aeabi_dmul+0x96>
 8001bc0:	468b      	mov	fp, r1
 8001bc2:	46aa      	mov	sl, r5
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	e5f7      	b.n	80017b8 <__aeabi_dmul+0x148>
 8001bc8:	2480      	movs	r4, #128	; 0x80
 8001bca:	465b      	mov	r3, fp
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	431c      	orrs	r4, r3
 8001bd0:	0324      	lsls	r4, r4, #12
 8001bd2:	4642      	mov	r2, r8
 8001bd4:	4655      	mov	r5, sl
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bd8:	0b24      	lsrs	r4, r4, #12
 8001bda:	e5bb      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bdc:	464d      	mov	r5, r9
 8001bde:	0021      	movs	r1, r4
 8001be0:	2303      	movs	r3, #3
 8001be2:	e7db      	b.n	8001b9c <__aeabi_dmul+0x52c>
 8001be4:	fffffc0d 	.word	0xfffffc0d
 8001be8:	0000043e 	.word	0x0000043e
 8001bec:	0000041e 	.word	0x0000041e
 8001bf0:	000007ff 	.word	0x000007ff

08001bf4 <__aeabi_dsub>:
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	4657      	mov	r7, sl
 8001bf8:	464e      	mov	r6, r9
 8001bfa:	4645      	mov	r5, r8
 8001bfc:	46de      	mov	lr, fp
 8001bfe:	b5e0      	push	{r5, r6, r7, lr}
 8001c00:	000d      	movs	r5, r1
 8001c02:	0004      	movs	r4, r0
 8001c04:	0019      	movs	r1, r3
 8001c06:	0010      	movs	r0, r2
 8001c08:	032b      	lsls	r3, r5, #12
 8001c0a:	0a5b      	lsrs	r3, r3, #9
 8001c0c:	0f62      	lsrs	r2, r4, #29
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	00e3      	lsls	r3, r4, #3
 8001c12:	030c      	lsls	r4, r1, #12
 8001c14:	0a64      	lsrs	r4, r4, #9
 8001c16:	0f47      	lsrs	r7, r0, #29
 8001c18:	4327      	orrs	r7, r4
 8001c1a:	4cd0      	ldr	r4, [pc, #832]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c1c:	006e      	lsls	r6, r5, #1
 8001c1e:	4691      	mov	r9, r2
 8001c20:	b083      	sub	sp, #12
 8001c22:	004a      	lsls	r2, r1, #1
 8001c24:	00c0      	lsls	r0, r0, #3
 8001c26:	4698      	mov	r8, r3
 8001c28:	46a2      	mov	sl, r4
 8001c2a:	0d76      	lsrs	r6, r6, #21
 8001c2c:	0fed      	lsrs	r5, r5, #31
 8001c2e:	0d52      	lsrs	r2, r2, #21
 8001c30:	0fc9      	lsrs	r1, r1, #31
 8001c32:	9001      	str	r0, [sp, #4]
 8001c34:	42a2      	cmp	r2, r4
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x46>
 8001c38:	e0b9      	b.n	8001dae <__aeabi_dsub+0x1ba>
 8001c3a:	2401      	movs	r4, #1
 8001c3c:	4061      	eors	r1, r4
 8001c3e:	468b      	mov	fp, r1
 8001c40:	428d      	cmp	r5, r1
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dsub+0x52>
 8001c44:	e08d      	b.n	8001d62 <__aeabi_dsub+0x16e>
 8001c46:	1ab4      	subs	r4, r6, r2
 8001c48:	46a4      	mov	ip, r4
 8001c4a:	2c00      	cmp	r4, #0
 8001c4c:	dc00      	bgt.n	8001c50 <__aeabi_dsub+0x5c>
 8001c4e:	e0b7      	b.n	8001dc0 <__aeabi_dsub+0x1cc>
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x62>
 8001c54:	e0cb      	b.n	8001dee <__aeabi_dsub+0x1fa>
 8001c56:	4ac1      	ldr	r2, [pc, #772]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c58:	4296      	cmp	r6, r2
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x6a>
 8001c5c:	e186      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	0412      	lsls	r2, r2, #16
 8001c62:	4317      	orrs	r7, r2
 8001c64:	4662      	mov	r2, ip
 8001c66:	2a38      	cmp	r2, #56	; 0x38
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x78>
 8001c6a:	e1a4      	b.n	8001fb6 <__aeabi_dsub+0x3c2>
 8001c6c:	2a1f      	cmp	r2, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x7e>
 8001c70:	e21d      	b.n	80020ae <__aeabi_dsub+0x4ba>
 8001c72:	4661      	mov	r1, ip
 8001c74:	2220      	movs	r2, #32
 8001c76:	003c      	movs	r4, r7
 8001c78:	1a52      	subs	r2, r2, r1
 8001c7a:	0001      	movs	r1, r0
 8001c7c:	4090      	lsls	r0, r2
 8001c7e:	4094      	lsls	r4, r2
 8001c80:	1e42      	subs	r2, r0, #1
 8001c82:	4190      	sbcs	r0, r2
 8001c84:	4662      	mov	r2, ip
 8001c86:	46a0      	mov	r8, r4
 8001c88:	4664      	mov	r4, ip
 8001c8a:	40d7      	lsrs	r7, r2
 8001c8c:	464a      	mov	r2, r9
 8001c8e:	40e1      	lsrs	r1, r4
 8001c90:	4644      	mov	r4, r8
 8001c92:	1bd2      	subs	r2, r2, r7
 8001c94:	4691      	mov	r9, r2
 8001c96:	430c      	orrs	r4, r1
 8001c98:	4304      	orrs	r4, r0
 8001c9a:	1b1c      	subs	r4, r3, r4
 8001c9c:	42a3      	cmp	r3, r4
 8001c9e:	4192      	sbcs	r2, r2
 8001ca0:	464b      	mov	r3, r9
 8001ca2:	4252      	negs	r2, r2
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	469a      	mov	sl, r3
 8001ca8:	4653      	mov	r3, sl
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	d400      	bmi.n	8001cb0 <__aeabi_dsub+0xbc>
 8001cae:	e12b      	b.n	8001f08 <__aeabi_dsub+0x314>
 8001cb0:	4653      	mov	r3, sl
 8001cb2:	025a      	lsls	r2, r3, #9
 8001cb4:	0a53      	lsrs	r3, r2, #9
 8001cb6:	469a      	mov	sl, r3
 8001cb8:	4653      	mov	r3, sl
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0xcc>
 8001cbe:	e166      	b.n	8001f8e <__aeabi_dsub+0x39a>
 8001cc0:	4650      	mov	r0, sl
 8001cc2:	f000 fc49 	bl	8002558 <__clzsi2>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	3b08      	subs	r3, #8
 8001cca:	2220      	movs	r2, #32
 8001ccc:	0020      	movs	r0, r4
 8001cce:	1ad2      	subs	r2, r2, r3
 8001cd0:	4651      	mov	r1, sl
 8001cd2:	40d0      	lsrs	r0, r2
 8001cd4:	4099      	lsls	r1, r3
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	409c      	lsls	r4, r3
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	429e      	cmp	r6, r3
 8001cde:	dd00      	ble.n	8001ce2 <__aeabi_dsub+0xee>
 8001ce0:	e164      	b.n	8001fac <__aeabi_dsub+0x3b8>
 8001ce2:	1b9b      	subs	r3, r3, r6
 8001ce4:	1c59      	adds	r1, r3, #1
 8001ce6:	291f      	cmp	r1, #31
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0xf8>
 8001cea:	e0fe      	b.n	8001eea <__aeabi_dsub+0x2f6>
 8001cec:	2320      	movs	r3, #32
 8001cee:	0010      	movs	r0, r2
 8001cf0:	0026      	movs	r6, r4
 8001cf2:	1a5b      	subs	r3, r3, r1
 8001cf4:	409c      	lsls	r4, r3
 8001cf6:	4098      	lsls	r0, r3
 8001cf8:	40ce      	lsrs	r6, r1
 8001cfa:	40ca      	lsrs	r2, r1
 8001cfc:	1e63      	subs	r3, r4, #1
 8001cfe:	419c      	sbcs	r4, r3
 8001d00:	4330      	orrs	r0, r6
 8001d02:	4692      	mov	sl, r2
 8001d04:	2600      	movs	r6, #0
 8001d06:	4304      	orrs	r4, r0
 8001d08:	0763      	lsls	r3, r4, #29
 8001d0a:	d009      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	4023      	ands	r3, r4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d005      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d14:	1d23      	adds	r3, r4, #4
 8001d16:	42a3      	cmp	r3, r4
 8001d18:	41a4      	sbcs	r4, r4
 8001d1a:	4264      	negs	r4, r4
 8001d1c:	44a2      	add	sl, r4
 8001d1e:	001c      	movs	r4, r3
 8001d20:	4653      	mov	r3, sl
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	d400      	bmi.n	8001d28 <__aeabi_dsub+0x134>
 8001d26:	e0f2      	b.n	8001f0e <__aeabi_dsub+0x31a>
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <__aeabi_dsub+0x368>)
 8001d2a:	3601      	adds	r6, #1
 8001d2c:	429e      	cmp	r6, r3
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x13e>
 8001d30:	e10f      	b.n	8001f52 <__aeabi_dsub+0x35e>
 8001d32:	4653      	mov	r3, sl
 8001d34:	498a      	ldr	r1, [pc, #552]	; (8001f60 <__aeabi_dsub+0x36c>)
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	400b      	ands	r3, r1
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	075b      	lsls	r3, r3, #29
 8001d3e:	4323      	orrs	r3, r4
 8001d40:	0572      	lsls	r2, r6, #21
 8001d42:	024c      	lsls	r4, r1, #9
 8001d44:	0b24      	lsrs	r4, r4, #12
 8001d46:	0d52      	lsrs	r2, r2, #21
 8001d48:	0512      	lsls	r2, r2, #20
 8001d4a:	4322      	orrs	r2, r4
 8001d4c:	07ed      	lsls	r5, r5, #31
 8001d4e:	432a      	orrs	r2, r5
 8001d50:	0018      	movs	r0, r3
 8001d52:	0011      	movs	r1, r2
 8001d54:	b003      	add	sp, #12
 8001d56:	bcf0      	pop	{r4, r5, r6, r7}
 8001d58:	46bb      	mov	fp, r7
 8001d5a:	46b2      	mov	sl, r6
 8001d5c:	46a9      	mov	r9, r5
 8001d5e:	46a0      	mov	r8, r4
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d62:	1ab4      	subs	r4, r6, r2
 8001d64:	46a4      	mov	ip, r4
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	dd59      	ble.n	8001e1e <__aeabi_dsub+0x22a>
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x17c>
 8001d6e:	e0b0      	b.n	8001ed2 <__aeabi_dsub+0x2de>
 8001d70:	4556      	cmp	r6, sl
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x182>
 8001d74:	e0fa      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0412      	lsls	r2, r2, #16
 8001d7a:	4317      	orrs	r7, r2
 8001d7c:	4662      	mov	r2, ip
 8001d7e:	2a38      	cmp	r2, #56	; 0x38
 8001d80:	dd00      	ble.n	8001d84 <__aeabi_dsub+0x190>
 8001d82:	e0d4      	b.n	8001f2e <__aeabi_dsub+0x33a>
 8001d84:	2a1f      	cmp	r2, #31
 8001d86:	dc00      	bgt.n	8001d8a <__aeabi_dsub+0x196>
 8001d88:	e1c0      	b.n	800210c <__aeabi_dsub+0x518>
 8001d8a:	0039      	movs	r1, r7
 8001d8c:	3a20      	subs	r2, #32
 8001d8e:	40d1      	lsrs	r1, r2
 8001d90:	4662      	mov	r2, ip
 8001d92:	2a20      	cmp	r2, #32
 8001d94:	d006      	beq.n	8001da4 <__aeabi_dsub+0x1b0>
 8001d96:	4664      	mov	r4, ip
 8001d98:	2240      	movs	r2, #64	; 0x40
 8001d9a:	1b12      	subs	r2, r2, r4
 8001d9c:	003c      	movs	r4, r7
 8001d9e:	4094      	lsls	r4, r2
 8001da0:	4304      	orrs	r4, r0
 8001da2:	9401      	str	r4, [sp, #4]
 8001da4:	9c01      	ldr	r4, [sp, #4]
 8001da6:	1e62      	subs	r2, r4, #1
 8001da8:	4194      	sbcs	r4, r2
 8001daa:	430c      	orrs	r4, r1
 8001dac:	e0c3      	b.n	8001f36 <__aeabi_dsub+0x342>
 8001dae:	003c      	movs	r4, r7
 8001db0:	4304      	orrs	r4, r0
 8001db2:	d02b      	beq.n	8001e0c <__aeabi_dsub+0x218>
 8001db4:	468b      	mov	fp, r1
 8001db6:	428d      	cmp	r5, r1
 8001db8:	d02e      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001dba:	4c6a      	ldr	r4, [pc, #424]	; (8001f64 <__aeabi_dsub+0x370>)
 8001dbc:	46a4      	mov	ip, r4
 8001dbe:	44b4      	add	ip, r6
 8001dc0:	4664      	mov	r4, ip
 8001dc2:	2c00      	cmp	r4, #0
 8001dc4:	d05f      	beq.n	8001e86 <__aeabi_dsub+0x292>
 8001dc6:	1b94      	subs	r4, r2, r6
 8001dc8:	46a4      	mov	ip, r4
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_dsub+0x1dc>
 8001dce:	e120      	b.n	8002012 <__aeabi_dsub+0x41e>
 8001dd0:	464c      	mov	r4, r9
 8001dd2:	431c      	orrs	r4, r3
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x1e4>
 8001dd6:	e1c7      	b.n	8002168 <__aeabi_dsub+0x574>
 8001dd8:	4661      	mov	r1, ip
 8001dda:	1e4c      	subs	r4, r1, #1
 8001ddc:	2901      	cmp	r1, #1
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x1ee>
 8001de0:	e223      	b.n	800222a <__aeabi_dsub+0x636>
 8001de2:	4d5e      	ldr	r5, [pc, #376]	; (8001f5c <__aeabi_dsub+0x368>)
 8001de4:	45ac      	cmp	ip, r5
 8001de6:	d100      	bne.n	8001dea <__aeabi_dsub+0x1f6>
 8001de8:	e1d8      	b.n	800219c <__aeabi_dsub+0x5a8>
 8001dea:	46a4      	mov	ip, r4
 8001dec:	e11a      	b.n	8002024 <__aeabi_dsub+0x430>
 8001dee:	003a      	movs	r2, r7
 8001df0:	4302      	orrs	r2, r0
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x202>
 8001df4:	e0e4      	b.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001df6:	0022      	movs	r2, r4
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	2c01      	cmp	r4, #1
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x20c>
 8001dfe:	e1c3      	b.n	8002188 <__aeabi_dsub+0x594>
 8001e00:	4956      	ldr	r1, [pc, #344]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e02:	428c      	cmp	r4, r1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x214>
 8001e06:	e0b1      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001e08:	4694      	mov	ip, r2
 8001e0a:	e72b      	b.n	8001c64 <__aeabi_dsub+0x70>
 8001e0c:	2401      	movs	r4, #1
 8001e0e:	4061      	eors	r1, r4
 8001e10:	468b      	mov	fp, r1
 8001e12:	428d      	cmp	r5, r1
 8001e14:	d000      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001e16:	e716      	b.n	8001c46 <__aeabi_dsub+0x52>
 8001e18:	4952      	ldr	r1, [pc, #328]	; (8001f64 <__aeabi_dsub+0x370>)
 8001e1a:	468c      	mov	ip, r1
 8001e1c:	44b4      	add	ip, r6
 8001e1e:	4664      	mov	r4, ip
 8001e20:	2c00      	cmp	r4, #0
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x232>
 8001e24:	e0d3      	b.n	8001fce <__aeabi_dsub+0x3da>
 8001e26:	1b91      	subs	r1, r2, r6
 8001e28:	468c      	mov	ip, r1
 8001e2a:	2e00      	cmp	r6, #0
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x23c>
 8001e2e:	e15e      	b.n	80020ee <__aeabi_dsub+0x4fa>
 8001e30:	494a      	ldr	r1, [pc, #296]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e32:	428a      	cmp	r2, r1
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x244>
 8001e36:	e1be      	b.n	80021b6 <__aeabi_dsub+0x5c2>
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	464c      	mov	r4, r9
 8001e3c:	0409      	lsls	r1, r1, #16
 8001e3e:	430c      	orrs	r4, r1
 8001e40:	46a1      	mov	r9, r4
 8001e42:	4661      	mov	r1, ip
 8001e44:	2938      	cmp	r1, #56	; 0x38
 8001e46:	dd00      	ble.n	8001e4a <__aeabi_dsub+0x256>
 8001e48:	e1ba      	b.n	80021c0 <__aeabi_dsub+0x5cc>
 8001e4a:	291f      	cmp	r1, #31
 8001e4c:	dd00      	ble.n	8001e50 <__aeabi_dsub+0x25c>
 8001e4e:	e227      	b.n	80022a0 <__aeabi_dsub+0x6ac>
 8001e50:	2420      	movs	r4, #32
 8001e52:	1a64      	subs	r4, r4, r1
 8001e54:	4649      	mov	r1, r9
 8001e56:	40a1      	lsls	r1, r4
 8001e58:	001e      	movs	r6, r3
 8001e5a:	4688      	mov	r8, r1
 8001e5c:	4661      	mov	r1, ip
 8001e5e:	40a3      	lsls	r3, r4
 8001e60:	40ce      	lsrs	r6, r1
 8001e62:	4641      	mov	r1, r8
 8001e64:	1e5c      	subs	r4, r3, #1
 8001e66:	41a3      	sbcs	r3, r4
 8001e68:	4331      	orrs	r1, r6
 8001e6a:	4319      	orrs	r1, r3
 8001e6c:	000c      	movs	r4, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	4649      	mov	r1, r9
 8001e72:	40d9      	lsrs	r1, r3
 8001e74:	187f      	adds	r7, r7, r1
 8001e76:	1824      	adds	r4, r4, r0
 8001e78:	4284      	cmp	r4, r0
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	469a      	mov	sl, r3
 8001e80:	0016      	movs	r6, r2
 8001e82:	44ba      	add	sl, r7
 8001e84:	e05d      	b.n	8001f42 <__aeabi_dsub+0x34e>
 8001e86:	4c38      	ldr	r4, [pc, #224]	; (8001f68 <__aeabi_dsub+0x374>)
 8001e88:	1c72      	adds	r2, r6, #1
 8001e8a:	4222      	tst	r2, r4
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x29c>
 8001e8e:	e0df      	b.n	8002050 <__aeabi_dsub+0x45c>
 8001e90:	464a      	mov	r2, r9
 8001e92:	431a      	orrs	r2, r3
 8001e94:	2e00      	cmp	r6, #0
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dsub+0x2a6>
 8001e98:	e15c      	b.n	8002154 <__aeabi_dsub+0x560>
 8001e9a:	2a00      	cmp	r2, #0
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x2ac>
 8001e9e:	e1cf      	b.n	8002240 <__aeabi_dsub+0x64c>
 8001ea0:	003a      	movs	r2, r7
 8001ea2:	4302      	orrs	r2, r0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x2b4>
 8001ea6:	e17f      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ea8:	1a1c      	subs	r4, r3, r0
 8001eaa:	464a      	mov	r2, r9
 8001eac:	42a3      	cmp	r3, r4
 8001eae:	4189      	sbcs	r1, r1
 8001eb0:	1bd2      	subs	r2, r2, r7
 8001eb2:	4249      	negs	r1, r1
 8001eb4:	1a52      	subs	r2, r2, r1
 8001eb6:	4692      	mov	sl, r2
 8001eb8:	0212      	lsls	r2, r2, #8
 8001eba:	d400      	bmi.n	8001ebe <__aeabi_dsub+0x2ca>
 8001ebc:	e20a      	b.n	80022d4 <__aeabi_dsub+0x6e0>
 8001ebe:	1ac4      	subs	r4, r0, r3
 8001ec0:	42a0      	cmp	r0, r4
 8001ec2:	4180      	sbcs	r0, r0
 8001ec4:	464b      	mov	r3, r9
 8001ec6:	4240      	negs	r0, r0
 8001ec8:	1aff      	subs	r7, r7, r3
 8001eca:	1a3b      	subs	r3, r7, r0
 8001ecc:	469a      	mov	sl, r3
 8001ece:	465d      	mov	r5, fp
 8001ed0:	e71a      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001ed2:	003a      	movs	r2, r7
 8001ed4:	4302      	orrs	r2, r0
 8001ed6:	d073      	beq.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001ed8:	0022      	movs	r2, r4
 8001eda:	3a01      	subs	r2, #1
 8001edc:	2c01      	cmp	r4, #1
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_dsub+0x2ee>
 8001ee0:	e0cb      	b.n	800207a <__aeabi_dsub+0x486>
 8001ee2:	4554      	cmp	r4, sl
 8001ee4:	d042      	beq.n	8001f6c <__aeabi_dsub+0x378>
 8001ee6:	4694      	mov	ip, r2
 8001ee8:	e748      	b.n	8001d7c <__aeabi_dsub+0x188>
 8001eea:	0010      	movs	r0, r2
 8001eec:	3b1f      	subs	r3, #31
 8001eee:	40d8      	lsrs	r0, r3
 8001ef0:	2920      	cmp	r1, #32
 8001ef2:	d003      	beq.n	8001efc <__aeabi_dsub+0x308>
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	1a5b      	subs	r3, r3, r1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	4314      	orrs	r4, r2
 8001efc:	1e63      	subs	r3, r4, #1
 8001efe:	419c      	sbcs	r4, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	2600      	movs	r6, #0
 8001f04:	469a      	mov	sl, r3
 8001f06:	4304      	orrs	r4, r0
 8001f08:	0763      	lsls	r3, r4, #29
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_dsub+0x31a>
 8001f0c:	e6fe      	b.n	8001d0c <__aeabi_dsub+0x118>
 8001f0e:	4652      	mov	r2, sl
 8001f10:	08e3      	lsrs	r3, r4, #3
 8001f12:	0752      	lsls	r2, r2, #29
 8001f14:	4313      	orrs	r3, r2
 8001f16:	4652      	mov	r2, sl
 8001f18:	46b4      	mov	ip, r6
 8001f1a:	08d2      	lsrs	r2, r2, #3
 8001f1c:	490f      	ldr	r1, [pc, #60]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f1e:	458c      	cmp	ip, r1
 8001f20:	d02a      	beq.n	8001f78 <__aeabi_dsub+0x384>
 8001f22:	0312      	lsls	r2, r2, #12
 8001f24:	0b14      	lsrs	r4, r2, #12
 8001f26:	4662      	mov	r2, ip
 8001f28:	0552      	lsls	r2, r2, #21
 8001f2a:	0d52      	lsrs	r2, r2, #21
 8001f2c:	e70c      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f2e:	003c      	movs	r4, r7
 8001f30:	4304      	orrs	r4, r0
 8001f32:	1e62      	subs	r2, r4, #1
 8001f34:	4194      	sbcs	r4, r2
 8001f36:	18e4      	adds	r4, r4, r3
 8001f38:	429c      	cmp	r4, r3
 8001f3a:	4192      	sbcs	r2, r2
 8001f3c:	4252      	negs	r2, r2
 8001f3e:	444a      	add	r2, r9
 8001f40:	4692      	mov	sl, r2
 8001f42:	4653      	mov	r3, sl
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	d5df      	bpl.n	8001f08 <__aeabi_dsub+0x314>
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f4a:	3601      	adds	r6, #1
 8001f4c:	429e      	cmp	r6, r3
 8001f4e:	d000      	beq.n	8001f52 <__aeabi_dsub+0x35e>
 8001f50:	e0a0      	b.n	8002094 <__aeabi_dsub+0x4a0>
 8001f52:	0032      	movs	r2, r6
 8001f54:	2400      	movs	r4, #0
 8001f56:	2300      	movs	r3, #0
 8001f58:	e6f6      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	000007ff 	.word	0x000007ff
 8001f60:	ff7fffff 	.word	0xff7fffff
 8001f64:	fffff801 	.word	0xfffff801
 8001f68:	000007fe 	.word	0x000007fe
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	464a      	mov	r2, r9
 8001f70:	0752      	lsls	r2, r2, #29
 8001f72:	4313      	orrs	r3, r2
 8001f74:	464a      	mov	r2, r9
 8001f76:	08d2      	lsrs	r2, r2, #3
 8001f78:	0019      	movs	r1, r3
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x38c>
 8001f7e:	e1b5      	b.n	80022ec <__aeabi_dsub+0x6f8>
 8001f80:	2480      	movs	r4, #128	; 0x80
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4314      	orrs	r4, r2
 8001f86:	0324      	lsls	r4, r4, #12
 8001f88:	4ad5      	ldr	r2, [pc, #852]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	e6dc      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f8e:	0020      	movs	r0, r4
 8001f90:	f000 fae2 	bl	8002558 <__clzsi2>
 8001f94:	0003      	movs	r3, r0
 8001f96:	3318      	adds	r3, #24
 8001f98:	2b1f      	cmp	r3, #31
 8001f9a:	dc00      	bgt.n	8001f9e <__aeabi_dsub+0x3aa>
 8001f9c:	e695      	b.n	8001cca <__aeabi_dsub+0xd6>
 8001f9e:	0022      	movs	r2, r4
 8001fa0:	3808      	subs	r0, #8
 8001fa2:	4082      	lsls	r2, r0
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	429e      	cmp	r6, r3
 8001fa8:	dc00      	bgt.n	8001fac <__aeabi_dsub+0x3b8>
 8001faa:	e69a      	b.n	8001ce2 <__aeabi_dsub+0xee>
 8001fac:	1af6      	subs	r6, r6, r3
 8001fae:	4bcd      	ldr	r3, [pc, #820]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	4692      	mov	sl, r2
 8001fb4:	e6a8      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001fb6:	003c      	movs	r4, r7
 8001fb8:	4304      	orrs	r4, r0
 8001fba:	1e62      	subs	r2, r4, #1
 8001fbc:	4194      	sbcs	r4, r2
 8001fbe:	e66c      	b.n	8001c9a <__aeabi_dsub+0xa6>
 8001fc0:	464a      	mov	r2, r9
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	0752      	lsls	r2, r2, #29
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	464a      	mov	r2, r9
 8001fca:	08d2      	lsrs	r2, r2, #3
 8001fcc:	e7a6      	b.n	8001f1c <__aeabi_dsub+0x328>
 8001fce:	4cc6      	ldr	r4, [pc, #792]	; (80022e8 <__aeabi_dsub+0x6f4>)
 8001fd0:	1c72      	adds	r2, r6, #1
 8001fd2:	4222      	tst	r2, r4
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x3e4>
 8001fd6:	e0ac      	b.n	8002132 <__aeabi_dsub+0x53e>
 8001fd8:	464a      	mov	r2, r9
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	2e00      	cmp	r6, #0
 8001fde:	d000      	beq.n	8001fe2 <__aeabi_dsub+0x3ee>
 8001fe0:	e105      	b.n	80021ee <__aeabi_dsub+0x5fa>
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x3f4>
 8001fe6:	e156      	b.n	8002296 <__aeabi_dsub+0x6a2>
 8001fe8:	003a      	movs	r2, r7
 8001fea:	4302      	orrs	r2, r0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x3fc>
 8001fee:	e0db      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ff0:	181c      	adds	r4, r3, r0
 8001ff2:	429c      	cmp	r4, r3
 8001ff4:	419b      	sbcs	r3, r3
 8001ff6:	444f      	add	r7, r9
 8001ff8:	46ba      	mov	sl, r7
 8001ffa:	425b      	negs	r3, r3
 8001ffc:	449a      	add	sl, r3
 8001ffe:	4653      	mov	r3, sl
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	d400      	bmi.n	8002006 <__aeabi_dsub+0x412>
 8002004:	e780      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002006:	4652      	mov	r2, sl
 8002008:	4bb6      	ldr	r3, [pc, #728]	; (80022e4 <__aeabi_dsub+0x6f0>)
 800200a:	2601      	movs	r6, #1
 800200c:	401a      	ands	r2, r3
 800200e:	4692      	mov	sl, r2
 8002010:	e77a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002012:	4cb3      	ldr	r4, [pc, #716]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002014:	42a2      	cmp	r2, r4
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x426>
 8002018:	e0c0      	b.n	800219c <__aeabi_dsub+0x5a8>
 800201a:	2480      	movs	r4, #128	; 0x80
 800201c:	464d      	mov	r5, r9
 800201e:	0424      	lsls	r4, r4, #16
 8002020:	4325      	orrs	r5, r4
 8002022:	46a9      	mov	r9, r5
 8002024:	4664      	mov	r4, ip
 8002026:	2c38      	cmp	r4, #56	; 0x38
 8002028:	dc53      	bgt.n	80020d2 <__aeabi_dsub+0x4de>
 800202a:	4661      	mov	r1, ip
 800202c:	2c1f      	cmp	r4, #31
 800202e:	dd00      	ble.n	8002032 <__aeabi_dsub+0x43e>
 8002030:	e0cd      	b.n	80021ce <__aeabi_dsub+0x5da>
 8002032:	2520      	movs	r5, #32
 8002034:	001e      	movs	r6, r3
 8002036:	1b2d      	subs	r5, r5, r4
 8002038:	464c      	mov	r4, r9
 800203a:	40ab      	lsls	r3, r5
 800203c:	40ac      	lsls	r4, r5
 800203e:	40ce      	lsrs	r6, r1
 8002040:	1e5d      	subs	r5, r3, #1
 8002042:	41ab      	sbcs	r3, r5
 8002044:	4334      	orrs	r4, r6
 8002046:	4323      	orrs	r3, r4
 8002048:	464c      	mov	r4, r9
 800204a:	40cc      	lsrs	r4, r1
 800204c:	1b3f      	subs	r7, r7, r4
 800204e:	e045      	b.n	80020dc <__aeabi_dsub+0x4e8>
 8002050:	464a      	mov	r2, r9
 8002052:	1a1c      	subs	r4, r3, r0
 8002054:	1bd1      	subs	r1, r2, r7
 8002056:	42a3      	cmp	r3, r4
 8002058:	4192      	sbcs	r2, r2
 800205a:	4252      	negs	r2, r2
 800205c:	4692      	mov	sl, r2
 800205e:	000a      	movs	r2, r1
 8002060:	4651      	mov	r1, sl
 8002062:	1a52      	subs	r2, r2, r1
 8002064:	4692      	mov	sl, r2
 8002066:	0212      	lsls	r2, r2, #8
 8002068:	d500      	bpl.n	800206c <__aeabi_dsub+0x478>
 800206a:	e083      	b.n	8002174 <__aeabi_dsub+0x580>
 800206c:	4653      	mov	r3, sl
 800206e:	4323      	orrs	r3, r4
 8002070:	d000      	beq.n	8002074 <__aeabi_dsub+0x480>
 8002072:	e621      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002074:	2200      	movs	r2, #0
 8002076:	2500      	movs	r5, #0
 8002078:	e753      	b.n	8001f22 <__aeabi_dsub+0x32e>
 800207a:	181c      	adds	r4, r3, r0
 800207c:	429c      	cmp	r4, r3
 800207e:	419b      	sbcs	r3, r3
 8002080:	444f      	add	r7, r9
 8002082:	46ba      	mov	sl, r7
 8002084:	425b      	negs	r3, r3
 8002086:	449a      	add	sl, r3
 8002088:	4653      	mov	r3, sl
 800208a:	2601      	movs	r6, #1
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	d400      	bmi.n	8002092 <__aeabi_dsub+0x49e>
 8002090:	e73a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002092:	2602      	movs	r6, #2
 8002094:	4652      	mov	r2, sl
 8002096:	4b93      	ldr	r3, [pc, #588]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8002098:	2101      	movs	r1, #1
 800209a:	401a      	ands	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	4021      	ands	r1, r4
 80020a0:	0862      	lsrs	r2, r4, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	07dc      	lsls	r4, r3, #31
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	469a      	mov	sl, r3
 80020aa:	4314      	orrs	r4, r2
 80020ac:	e62c      	b.n	8001d08 <__aeabi_dsub+0x114>
 80020ae:	0039      	movs	r1, r7
 80020b0:	3a20      	subs	r2, #32
 80020b2:	40d1      	lsrs	r1, r2
 80020b4:	4662      	mov	r2, ip
 80020b6:	2a20      	cmp	r2, #32
 80020b8:	d006      	beq.n	80020c8 <__aeabi_dsub+0x4d4>
 80020ba:	4664      	mov	r4, ip
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	1b12      	subs	r2, r2, r4
 80020c0:	003c      	movs	r4, r7
 80020c2:	4094      	lsls	r4, r2
 80020c4:	4304      	orrs	r4, r0
 80020c6:	9401      	str	r4, [sp, #4]
 80020c8:	9c01      	ldr	r4, [sp, #4]
 80020ca:	1e62      	subs	r2, r4, #1
 80020cc:	4194      	sbcs	r4, r2
 80020ce:	430c      	orrs	r4, r1
 80020d0:	e5e3      	b.n	8001c9a <__aeabi_dsub+0xa6>
 80020d2:	4649      	mov	r1, r9
 80020d4:	4319      	orrs	r1, r3
 80020d6:	000b      	movs	r3, r1
 80020d8:	1e5c      	subs	r4, r3, #1
 80020da:	41a3      	sbcs	r3, r4
 80020dc:	1ac4      	subs	r4, r0, r3
 80020de:	42a0      	cmp	r0, r4
 80020e0:	419b      	sbcs	r3, r3
 80020e2:	425b      	negs	r3, r3
 80020e4:	1afb      	subs	r3, r7, r3
 80020e6:	469a      	mov	sl, r3
 80020e8:	465d      	mov	r5, fp
 80020ea:	0016      	movs	r6, r2
 80020ec:	e5dc      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 80020ee:	4649      	mov	r1, r9
 80020f0:	4319      	orrs	r1, r3
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x502>
 80020f4:	e0ae      	b.n	8002254 <__aeabi_dsub+0x660>
 80020f6:	4661      	mov	r1, ip
 80020f8:	4664      	mov	r4, ip
 80020fa:	3901      	subs	r1, #1
 80020fc:	2c01      	cmp	r4, #1
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x50e>
 8002100:	e0e0      	b.n	80022c4 <__aeabi_dsub+0x6d0>
 8002102:	4c77      	ldr	r4, [pc, #476]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002104:	45a4      	cmp	ip, r4
 8002106:	d056      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 8002108:	468c      	mov	ip, r1
 800210a:	e69a      	b.n	8001e42 <__aeabi_dsub+0x24e>
 800210c:	4661      	mov	r1, ip
 800210e:	2220      	movs	r2, #32
 8002110:	003c      	movs	r4, r7
 8002112:	1a52      	subs	r2, r2, r1
 8002114:	4094      	lsls	r4, r2
 8002116:	0001      	movs	r1, r0
 8002118:	4090      	lsls	r0, r2
 800211a:	46a0      	mov	r8, r4
 800211c:	4664      	mov	r4, ip
 800211e:	1e42      	subs	r2, r0, #1
 8002120:	4190      	sbcs	r0, r2
 8002122:	4662      	mov	r2, ip
 8002124:	40e1      	lsrs	r1, r4
 8002126:	4644      	mov	r4, r8
 8002128:	40d7      	lsrs	r7, r2
 800212a:	430c      	orrs	r4, r1
 800212c:	4304      	orrs	r4, r0
 800212e:	44b9      	add	r9, r7
 8002130:	e701      	b.n	8001f36 <__aeabi_dsub+0x342>
 8002132:	496b      	ldr	r1, [pc, #428]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002134:	428a      	cmp	r2, r1
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x546>
 8002138:	e70c      	b.n	8001f54 <__aeabi_dsub+0x360>
 800213a:	1818      	adds	r0, r3, r0
 800213c:	4298      	cmp	r0, r3
 800213e:	419b      	sbcs	r3, r3
 8002140:	444f      	add	r7, r9
 8002142:	425b      	negs	r3, r3
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	07dc      	lsls	r4, r3, #31
 8002148:	0840      	lsrs	r0, r0, #1
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	469a      	mov	sl, r3
 800214e:	0016      	movs	r6, r2
 8002150:	4304      	orrs	r4, r0
 8002152:	e6d9      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002154:	2a00      	cmp	r2, #0
 8002156:	d000      	beq.n	800215a <__aeabi_dsub+0x566>
 8002158:	e081      	b.n	800225e <__aeabi_dsub+0x66a>
 800215a:	003b      	movs	r3, r7
 800215c:	4303      	orrs	r3, r0
 800215e:	d11d      	bne.n	800219c <__aeabi_dsub+0x5a8>
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	2500      	movs	r5, #0
 8002164:	0312      	lsls	r2, r2, #12
 8002166:	e70b      	b.n	8001f80 <__aeabi_dsub+0x38c>
 8002168:	08c0      	lsrs	r0, r0, #3
 800216a:	077b      	lsls	r3, r7, #29
 800216c:	465d      	mov	r5, fp
 800216e:	4303      	orrs	r3, r0
 8002170:	08fa      	lsrs	r2, r7, #3
 8002172:	e6d3      	b.n	8001f1c <__aeabi_dsub+0x328>
 8002174:	1ac4      	subs	r4, r0, r3
 8002176:	42a0      	cmp	r0, r4
 8002178:	4180      	sbcs	r0, r0
 800217a:	464b      	mov	r3, r9
 800217c:	4240      	negs	r0, r0
 800217e:	1aff      	subs	r7, r7, r3
 8002180:	1a3b      	subs	r3, r7, r0
 8002182:	469a      	mov	sl, r3
 8002184:	465d      	mov	r5, fp
 8002186:	e597      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002188:	1a1c      	subs	r4, r3, r0
 800218a:	464a      	mov	r2, r9
 800218c:	42a3      	cmp	r3, r4
 800218e:	419b      	sbcs	r3, r3
 8002190:	1bd7      	subs	r7, r2, r7
 8002192:	425b      	negs	r3, r3
 8002194:	1afb      	subs	r3, r7, r3
 8002196:	469a      	mov	sl, r3
 8002198:	2601      	movs	r6, #1
 800219a:	e585      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 800219c:	08c0      	lsrs	r0, r0, #3
 800219e:	077b      	lsls	r3, r7, #29
 80021a0:	465d      	mov	r5, fp
 80021a2:	4303      	orrs	r3, r0
 80021a4:	08fa      	lsrs	r2, r7, #3
 80021a6:	e6e7      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021a8:	464a      	mov	r2, r9
 80021aa:	08db      	lsrs	r3, r3, #3
 80021ac:	0752      	lsls	r2, r2, #29
 80021ae:	4313      	orrs	r3, r2
 80021b0:	464a      	mov	r2, r9
 80021b2:	08d2      	lsrs	r2, r2, #3
 80021b4:	e6b5      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80021b6:	08c0      	lsrs	r0, r0, #3
 80021b8:	077b      	lsls	r3, r7, #29
 80021ba:	4303      	orrs	r3, r0
 80021bc:	08fa      	lsrs	r2, r7, #3
 80021be:	e6db      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021c0:	4649      	mov	r1, r9
 80021c2:	4319      	orrs	r1, r3
 80021c4:	000b      	movs	r3, r1
 80021c6:	1e59      	subs	r1, r3, #1
 80021c8:	418b      	sbcs	r3, r1
 80021ca:	001c      	movs	r4, r3
 80021cc:	e653      	b.n	8001e76 <__aeabi_dsub+0x282>
 80021ce:	464d      	mov	r5, r9
 80021d0:	3c20      	subs	r4, #32
 80021d2:	40e5      	lsrs	r5, r4
 80021d4:	2920      	cmp	r1, #32
 80021d6:	d005      	beq.n	80021e4 <__aeabi_dsub+0x5f0>
 80021d8:	2440      	movs	r4, #64	; 0x40
 80021da:	1a64      	subs	r4, r4, r1
 80021dc:	4649      	mov	r1, r9
 80021de:	40a1      	lsls	r1, r4
 80021e0:	430b      	orrs	r3, r1
 80021e2:	4698      	mov	r8, r3
 80021e4:	4643      	mov	r3, r8
 80021e6:	1e5c      	subs	r4, r3, #1
 80021e8:	41a3      	sbcs	r3, r4
 80021ea:	432b      	orrs	r3, r5
 80021ec:	e776      	b.n	80020dc <__aeabi_dsub+0x4e8>
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d0e1      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 80021f2:	003a      	movs	r2, r7
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	4302      	orrs	r2, r0
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x608>
 80021fa:	e6b8      	b.n	8001f6e <__aeabi_dsub+0x37a>
 80021fc:	464a      	mov	r2, r9
 80021fe:	0752      	lsls	r2, r2, #29
 8002200:	2480      	movs	r4, #128	; 0x80
 8002202:	4313      	orrs	r3, r2
 8002204:	464a      	mov	r2, r9
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	08d2      	lsrs	r2, r2, #3
 800220a:	4222      	tst	r2, r4
 800220c:	d007      	beq.n	800221e <__aeabi_dsub+0x62a>
 800220e:	08fe      	lsrs	r6, r7, #3
 8002210:	4226      	tst	r6, r4
 8002212:	d104      	bne.n	800221e <__aeabi_dsub+0x62a>
 8002214:	465d      	mov	r5, fp
 8002216:	0032      	movs	r2, r6
 8002218:	08c3      	lsrs	r3, r0, #3
 800221a:	077f      	lsls	r7, r7, #29
 800221c:	433b      	orrs	r3, r7
 800221e:	0f59      	lsrs	r1, r3, #29
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	0749      	lsls	r1, r1, #29
 8002224:	08db      	lsrs	r3, r3, #3
 8002226:	430b      	orrs	r3, r1
 8002228:	e6a6      	b.n	8001f78 <__aeabi_dsub+0x384>
 800222a:	1ac4      	subs	r4, r0, r3
 800222c:	42a0      	cmp	r0, r4
 800222e:	4180      	sbcs	r0, r0
 8002230:	464b      	mov	r3, r9
 8002232:	4240      	negs	r0, r0
 8002234:	1aff      	subs	r7, r7, r3
 8002236:	1a3b      	subs	r3, r7, r0
 8002238:	469a      	mov	sl, r3
 800223a:	465d      	mov	r5, fp
 800223c:	2601      	movs	r6, #1
 800223e:	e533      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 8002240:	003b      	movs	r3, r7
 8002242:	4303      	orrs	r3, r0
 8002244:	d100      	bne.n	8002248 <__aeabi_dsub+0x654>
 8002246:	e715      	b.n	8002074 <__aeabi_dsub+0x480>
 8002248:	08c0      	lsrs	r0, r0, #3
 800224a:	077b      	lsls	r3, r7, #29
 800224c:	465d      	mov	r5, fp
 800224e:	4303      	orrs	r3, r0
 8002250:	08fa      	lsrs	r2, r7, #3
 8002252:	e666      	b.n	8001f22 <__aeabi_dsub+0x32e>
 8002254:	08c0      	lsrs	r0, r0, #3
 8002256:	077b      	lsls	r3, r7, #29
 8002258:	4303      	orrs	r3, r0
 800225a:	08fa      	lsrs	r2, r7, #3
 800225c:	e65e      	b.n	8001f1c <__aeabi_dsub+0x328>
 800225e:	003a      	movs	r2, r7
 8002260:	08db      	lsrs	r3, r3, #3
 8002262:	4302      	orrs	r2, r0
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x674>
 8002266:	e682      	b.n	8001f6e <__aeabi_dsub+0x37a>
 8002268:	464a      	mov	r2, r9
 800226a:	0752      	lsls	r2, r2, #29
 800226c:	2480      	movs	r4, #128	; 0x80
 800226e:	4313      	orrs	r3, r2
 8002270:	464a      	mov	r2, r9
 8002272:	0324      	lsls	r4, r4, #12
 8002274:	08d2      	lsrs	r2, r2, #3
 8002276:	4222      	tst	r2, r4
 8002278:	d007      	beq.n	800228a <__aeabi_dsub+0x696>
 800227a:	08fe      	lsrs	r6, r7, #3
 800227c:	4226      	tst	r6, r4
 800227e:	d104      	bne.n	800228a <__aeabi_dsub+0x696>
 8002280:	465d      	mov	r5, fp
 8002282:	0032      	movs	r2, r6
 8002284:	08c3      	lsrs	r3, r0, #3
 8002286:	077f      	lsls	r7, r7, #29
 8002288:	433b      	orrs	r3, r7
 800228a:	0f59      	lsrs	r1, r3, #29
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	08db      	lsrs	r3, r3, #3
 8002290:	0749      	lsls	r1, r1, #29
 8002292:	430b      	orrs	r3, r1
 8002294:	e670      	b.n	8001f78 <__aeabi_dsub+0x384>
 8002296:	08c0      	lsrs	r0, r0, #3
 8002298:	077b      	lsls	r3, r7, #29
 800229a:	4303      	orrs	r3, r0
 800229c:	08fa      	lsrs	r2, r7, #3
 800229e:	e640      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80022a0:	464c      	mov	r4, r9
 80022a2:	3920      	subs	r1, #32
 80022a4:	40cc      	lsrs	r4, r1
 80022a6:	4661      	mov	r1, ip
 80022a8:	2920      	cmp	r1, #32
 80022aa:	d006      	beq.n	80022ba <__aeabi_dsub+0x6c6>
 80022ac:	4666      	mov	r6, ip
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	1b89      	subs	r1, r1, r6
 80022b2:	464e      	mov	r6, r9
 80022b4:	408e      	lsls	r6, r1
 80022b6:	4333      	orrs	r3, r6
 80022b8:	4698      	mov	r8, r3
 80022ba:	4643      	mov	r3, r8
 80022bc:	1e59      	subs	r1, r3, #1
 80022be:	418b      	sbcs	r3, r1
 80022c0:	431c      	orrs	r4, r3
 80022c2:	e5d8      	b.n	8001e76 <__aeabi_dsub+0x282>
 80022c4:	181c      	adds	r4, r3, r0
 80022c6:	4284      	cmp	r4, r0
 80022c8:	4180      	sbcs	r0, r0
 80022ca:	444f      	add	r7, r9
 80022cc:	46ba      	mov	sl, r7
 80022ce:	4240      	negs	r0, r0
 80022d0:	4482      	add	sl, r0
 80022d2:	e6d9      	b.n	8002088 <__aeabi_dsub+0x494>
 80022d4:	4653      	mov	r3, sl
 80022d6:	4323      	orrs	r3, r4
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x6e8>
 80022da:	e6cb      	b.n	8002074 <__aeabi_dsub+0x480>
 80022dc:	e614      	b.n	8001f08 <__aeabi_dsub+0x314>
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2300      	movs	r3, #0
 80022ee:	4a01      	ldr	r2, [pc, #4]	; (80022f4 <__aeabi_dsub+0x700>)
 80022f0:	001c      	movs	r4, r3
 80022f2:	e529      	b.n	8001d48 <__aeabi_dsub+0x154>
 80022f4:	000007ff 	.word	0x000007ff

080022f8 <__aeabi_dcmpun>:
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	0005      	movs	r5, r0
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <__aeabi_dcmpun+0x38>)
 80022fe:	031c      	lsls	r4, r3, #12
 8002300:	0016      	movs	r6, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	030a      	lsls	r2, r1, #12
 8002306:	0049      	lsls	r1, r1, #1
 8002308:	0b12      	lsrs	r2, r2, #12
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b24      	lsrs	r4, r4, #12
 800230e:	0d5b      	lsrs	r3, r3, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d008      	beq.n	8002326 <__aeabi_dcmpun+0x2e>
 8002314:	4a06      	ldr	r2, [pc, #24]	; (8002330 <__aeabi_dcmpun+0x38>)
 8002316:	2000      	movs	r0, #0
 8002318:	4293      	cmp	r3, r2
 800231a:	d103      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800231c:	0020      	movs	r0, r4
 800231e:	4330      	orrs	r0, r6
 8002320:	1e43      	subs	r3, r0, #1
 8002322:	4198      	sbcs	r0, r3
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	2001      	movs	r0, #1
 8002328:	432a      	orrs	r2, r5
 800232a:	d1fb      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800232c:	e7f2      	b.n	8002314 <__aeabi_dcmpun+0x1c>
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	000007ff 	.word	0x000007ff

08002334 <__aeabi_d2iz>:
 8002334:	000a      	movs	r2, r1
 8002336:	b530      	push	{r4, r5, lr}
 8002338:	4c13      	ldr	r4, [pc, #76]	; (8002388 <__aeabi_d2iz+0x54>)
 800233a:	0053      	lsls	r3, r2, #1
 800233c:	0309      	lsls	r1, r1, #12
 800233e:	0005      	movs	r5, r0
 8002340:	0b09      	lsrs	r1, r1, #12
 8002342:	2000      	movs	r0, #0
 8002344:	0d5b      	lsrs	r3, r3, #21
 8002346:	0fd2      	lsrs	r2, r2, #31
 8002348:	42a3      	cmp	r3, r4
 800234a:	dd04      	ble.n	8002356 <__aeabi_d2iz+0x22>
 800234c:	480f      	ldr	r0, [pc, #60]	; (800238c <__aeabi_d2iz+0x58>)
 800234e:	4283      	cmp	r3, r0
 8002350:	dd02      	ble.n	8002358 <__aeabi_d2iz+0x24>
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <__aeabi_d2iz+0x5c>)
 8002354:	18d0      	adds	r0, r2, r3
 8002356:	bd30      	pop	{r4, r5, pc}
 8002358:	2080      	movs	r0, #128	; 0x80
 800235a:	0340      	lsls	r0, r0, #13
 800235c:	4301      	orrs	r1, r0
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <__aeabi_d2iz+0x60>)
 8002360:	1ac0      	subs	r0, r0, r3
 8002362:	281f      	cmp	r0, #31
 8002364:	dd08      	ble.n	8002378 <__aeabi_d2iz+0x44>
 8002366:	480c      	ldr	r0, [pc, #48]	; (8002398 <__aeabi_d2iz+0x64>)
 8002368:	1ac3      	subs	r3, r0, r3
 800236a:	40d9      	lsrs	r1, r3
 800236c:	000b      	movs	r3, r1
 800236e:	4258      	negs	r0, r3
 8002370:	2a00      	cmp	r2, #0
 8002372:	d1f0      	bne.n	8002356 <__aeabi_d2iz+0x22>
 8002374:	0018      	movs	r0, r3
 8002376:	e7ee      	b.n	8002356 <__aeabi_d2iz+0x22>
 8002378:	4c08      	ldr	r4, [pc, #32]	; (800239c <__aeabi_d2iz+0x68>)
 800237a:	40c5      	lsrs	r5, r0
 800237c:	46a4      	mov	ip, r4
 800237e:	4463      	add	r3, ip
 8002380:	4099      	lsls	r1, r3
 8002382:	000b      	movs	r3, r1
 8002384:	432b      	orrs	r3, r5
 8002386:	e7f2      	b.n	800236e <__aeabi_d2iz+0x3a>
 8002388:	000003fe 	.word	0x000003fe
 800238c:	0000041d 	.word	0x0000041d
 8002390:	7fffffff 	.word	0x7fffffff
 8002394:	00000433 	.word	0x00000433
 8002398:	00000413 	.word	0x00000413
 800239c:	fffffbed 	.word	0xfffffbed

080023a0 <__aeabi_i2d>:
 80023a0:	b570      	push	{r4, r5, r6, lr}
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d016      	beq.n	80023d4 <__aeabi_i2d+0x34>
 80023a6:	17c3      	asrs	r3, r0, #31
 80023a8:	18c5      	adds	r5, r0, r3
 80023aa:	405d      	eors	r5, r3
 80023ac:	0fc4      	lsrs	r4, r0, #31
 80023ae:	0028      	movs	r0, r5
 80023b0:	f000 f8d2 	bl	8002558 <__clzsi2>
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <__aeabi_i2d+0x5c>)
 80023b6:	1a1b      	subs	r3, r3, r0
 80023b8:	280a      	cmp	r0, #10
 80023ba:	dc16      	bgt.n	80023ea <__aeabi_i2d+0x4a>
 80023bc:	0002      	movs	r2, r0
 80023be:	002e      	movs	r6, r5
 80023c0:	3215      	adds	r2, #21
 80023c2:	4096      	lsls	r6, r2
 80023c4:	220b      	movs	r2, #11
 80023c6:	1a12      	subs	r2, r2, r0
 80023c8:	40d5      	lsrs	r5, r2
 80023ca:	055b      	lsls	r3, r3, #21
 80023cc:	032d      	lsls	r5, r5, #12
 80023ce:	0b2d      	lsrs	r5, r5, #12
 80023d0:	0d5b      	lsrs	r3, r3, #21
 80023d2:	e003      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023d4:	2400      	movs	r4, #0
 80023d6:	2300      	movs	r3, #0
 80023d8:	2500      	movs	r5, #0
 80023da:	2600      	movs	r6, #0
 80023dc:	051b      	lsls	r3, r3, #20
 80023de:	432b      	orrs	r3, r5
 80023e0:	07e4      	lsls	r4, r4, #31
 80023e2:	4323      	orrs	r3, r4
 80023e4:	0030      	movs	r0, r6
 80023e6:	0019      	movs	r1, r3
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
 80023ea:	380b      	subs	r0, #11
 80023ec:	4085      	lsls	r5, r0
 80023ee:	055b      	lsls	r3, r3, #21
 80023f0:	032d      	lsls	r5, r5, #12
 80023f2:	2600      	movs	r6, #0
 80023f4:	0b2d      	lsrs	r5, r5, #12
 80023f6:	0d5b      	lsrs	r3, r3, #21
 80023f8:	e7f0      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	0000041e 	.word	0x0000041e

08002400 <__aeabi_ui2d>:
 8002400:	b510      	push	{r4, lr}
 8002402:	1e04      	subs	r4, r0, #0
 8002404:	d010      	beq.n	8002428 <__aeabi_ui2d+0x28>
 8002406:	f000 f8a7 	bl	8002558 <__clzsi2>
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <__aeabi_ui2d+0x48>)
 800240c:	1a1b      	subs	r3, r3, r0
 800240e:	280a      	cmp	r0, #10
 8002410:	dc11      	bgt.n	8002436 <__aeabi_ui2d+0x36>
 8002412:	220b      	movs	r2, #11
 8002414:	0021      	movs	r1, r4
 8002416:	1a12      	subs	r2, r2, r0
 8002418:	40d1      	lsrs	r1, r2
 800241a:	3015      	adds	r0, #21
 800241c:	030a      	lsls	r2, r1, #12
 800241e:	055b      	lsls	r3, r3, #21
 8002420:	4084      	lsls	r4, r0
 8002422:	0b12      	lsrs	r2, r2, #12
 8002424:	0d5b      	lsrs	r3, r3, #21
 8002426:	e001      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002428:	2300      	movs	r3, #0
 800242a:	2200      	movs	r2, #0
 800242c:	051b      	lsls	r3, r3, #20
 800242e:	4313      	orrs	r3, r2
 8002430:	0020      	movs	r0, r4
 8002432:	0019      	movs	r1, r3
 8002434:	bd10      	pop	{r4, pc}
 8002436:	0022      	movs	r2, r4
 8002438:	380b      	subs	r0, #11
 800243a:	4082      	lsls	r2, r0
 800243c:	055b      	lsls	r3, r3, #21
 800243e:	0312      	lsls	r2, r2, #12
 8002440:	2400      	movs	r4, #0
 8002442:	0b12      	lsrs	r2, r2, #12
 8002444:	0d5b      	lsrs	r3, r3, #21
 8002446:	e7f1      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002448:	0000041e 	.word	0x0000041e

0800244c <__aeabi_d2f>:
 800244c:	0002      	movs	r2, r0
 800244e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002450:	004b      	lsls	r3, r1, #1
 8002452:	030d      	lsls	r5, r1, #12
 8002454:	0f40      	lsrs	r0, r0, #29
 8002456:	0d5b      	lsrs	r3, r3, #21
 8002458:	0fcc      	lsrs	r4, r1, #31
 800245a:	0a6d      	lsrs	r5, r5, #9
 800245c:	493a      	ldr	r1, [pc, #232]	; (8002548 <__aeabi_d2f+0xfc>)
 800245e:	4305      	orrs	r5, r0
 8002460:	1c58      	adds	r0, r3, #1
 8002462:	00d7      	lsls	r7, r2, #3
 8002464:	4208      	tst	r0, r1
 8002466:	d00a      	beq.n	800247e <__aeabi_d2f+0x32>
 8002468:	4938      	ldr	r1, [pc, #224]	; (800254c <__aeabi_d2f+0x100>)
 800246a:	1859      	adds	r1, r3, r1
 800246c:	29fe      	cmp	r1, #254	; 0xfe
 800246e:	dd16      	ble.n	800249e <__aeabi_d2f+0x52>
 8002470:	20ff      	movs	r0, #255	; 0xff
 8002472:	2200      	movs	r2, #0
 8002474:	05c0      	lsls	r0, r0, #23
 8002476:	4310      	orrs	r0, r2
 8002478:	07e4      	lsls	r4, r4, #31
 800247a:	4320      	orrs	r0, r4
 800247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <__aeabi_d2f+0x44>
 8002482:	433d      	orrs	r5, r7
 8002484:	d026      	beq.n	80024d4 <__aeabi_d2f+0x88>
 8002486:	2205      	movs	r2, #5
 8002488:	0192      	lsls	r2, r2, #6
 800248a:	0a52      	lsrs	r2, r2, #9
 800248c:	b2d8      	uxtb	r0, r3
 800248e:	e7f1      	b.n	8002474 <__aeabi_d2f+0x28>
 8002490:	432f      	orrs	r7, r5
 8002492:	d0ed      	beq.n	8002470 <__aeabi_d2f+0x24>
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	03d2      	lsls	r2, r2, #15
 8002498:	20ff      	movs	r0, #255	; 0xff
 800249a:	432a      	orrs	r2, r5
 800249c:	e7ea      	b.n	8002474 <__aeabi_d2f+0x28>
 800249e:	2900      	cmp	r1, #0
 80024a0:	dd1b      	ble.n	80024da <__aeabi_d2f+0x8e>
 80024a2:	0192      	lsls	r2, r2, #6
 80024a4:	1e50      	subs	r0, r2, #1
 80024a6:	4182      	sbcs	r2, r0
 80024a8:	00ed      	lsls	r5, r5, #3
 80024aa:	0f7f      	lsrs	r7, r7, #29
 80024ac:	432a      	orrs	r2, r5
 80024ae:	433a      	orrs	r2, r7
 80024b0:	0753      	lsls	r3, r2, #29
 80024b2:	d047      	beq.n	8002544 <__aeabi_d2f+0xf8>
 80024b4:	230f      	movs	r3, #15
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d000      	beq.n	80024be <__aeabi_d2f+0x72>
 80024bc:	3204      	adds	r2, #4
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	04db      	lsls	r3, r3, #19
 80024c2:	4013      	ands	r3, r2
 80024c4:	d03e      	beq.n	8002544 <__aeabi_d2f+0xf8>
 80024c6:	1c48      	adds	r0, r1, #1
 80024c8:	29fe      	cmp	r1, #254	; 0xfe
 80024ca:	d0d1      	beq.n	8002470 <__aeabi_d2f+0x24>
 80024cc:	0192      	lsls	r2, r2, #6
 80024ce:	0a52      	lsrs	r2, r2, #9
 80024d0:	b2c0      	uxtb	r0, r0
 80024d2:	e7cf      	b.n	8002474 <__aeabi_d2f+0x28>
 80024d4:	2000      	movs	r0, #0
 80024d6:	2200      	movs	r2, #0
 80024d8:	e7cc      	b.n	8002474 <__aeabi_d2f+0x28>
 80024da:	000a      	movs	r2, r1
 80024dc:	3217      	adds	r2, #23
 80024de:	db2f      	blt.n	8002540 <__aeabi_d2f+0xf4>
 80024e0:	2680      	movs	r6, #128	; 0x80
 80024e2:	0436      	lsls	r6, r6, #16
 80024e4:	432e      	orrs	r6, r5
 80024e6:	251e      	movs	r5, #30
 80024e8:	1a6d      	subs	r5, r5, r1
 80024ea:	2d1f      	cmp	r5, #31
 80024ec:	dd11      	ble.n	8002512 <__aeabi_d2f+0xc6>
 80024ee:	2202      	movs	r2, #2
 80024f0:	4252      	negs	r2, r2
 80024f2:	1a52      	subs	r2, r2, r1
 80024f4:	0031      	movs	r1, r6
 80024f6:	40d1      	lsrs	r1, r2
 80024f8:	2d20      	cmp	r5, #32
 80024fa:	d004      	beq.n	8002506 <__aeabi_d2f+0xba>
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <__aeabi_d2f+0x104>)
 80024fe:	4694      	mov	ip, r2
 8002500:	4463      	add	r3, ip
 8002502:	409e      	lsls	r6, r3
 8002504:	4337      	orrs	r7, r6
 8002506:	003a      	movs	r2, r7
 8002508:	1e53      	subs	r3, r2, #1
 800250a:	419a      	sbcs	r2, r3
 800250c:	430a      	orrs	r2, r1
 800250e:	2100      	movs	r1, #0
 8002510:	e7ce      	b.n	80024b0 <__aeabi_d2f+0x64>
 8002512:	4a10      	ldr	r2, [pc, #64]	; (8002554 <__aeabi_d2f+0x108>)
 8002514:	0038      	movs	r0, r7
 8002516:	4694      	mov	ip, r2
 8002518:	4463      	add	r3, ip
 800251a:	4098      	lsls	r0, r3
 800251c:	003a      	movs	r2, r7
 800251e:	1e41      	subs	r1, r0, #1
 8002520:	4188      	sbcs	r0, r1
 8002522:	409e      	lsls	r6, r3
 8002524:	40ea      	lsrs	r2, r5
 8002526:	4330      	orrs	r0, r6
 8002528:	4302      	orrs	r2, r0
 800252a:	2100      	movs	r1, #0
 800252c:	0753      	lsls	r3, r2, #29
 800252e:	d1c1      	bne.n	80024b4 <__aeabi_d2f+0x68>
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	0013      	movs	r3, r2
 8002534:	04c9      	lsls	r1, r1, #19
 8002536:	2001      	movs	r0, #1
 8002538:	400b      	ands	r3, r1
 800253a:	420a      	tst	r2, r1
 800253c:	d1c6      	bne.n	80024cc <__aeabi_d2f+0x80>
 800253e:	e7a3      	b.n	8002488 <__aeabi_d2f+0x3c>
 8002540:	2300      	movs	r3, #0
 8002542:	e7a0      	b.n	8002486 <__aeabi_d2f+0x3a>
 8002544:	000b      	movs	r3, r1
 8002546:	e79f      	b.n	8002488 <__aeabi_d2f+0x3c>
 8002548:	000007fe 	.word	0x000007fe
 800254c:	fffffc80 	.word	0xfffffc80
 8002550:	fffffca2 	.word	0xfffffca2
 8002554:	fffffc82 	.word	0xfffffc82

08002558 <__clzsi2>:
 8002558:	211c      	movs	r1, #28
 800255a:	2301      	movs	r3, #1
 800255c:	041b      	lsls	r3, r3, #16
 800255e:	4298      	cmp	r0, r3
 8002560:	d301      	bcc.n	8002566 <__clzsi2+0xe>
 8002562:	0c00      	lsrs	r0, r0, #16
 8002564:	3910      	subs	r1, #16
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	4298      	cmp	r0, r3
 800256a:	d301      	bcc.n	8002570 <__clzsi2+0x18>
 800256c:	0a00      	lsrs	r0, r0, #8
 800256e:	3908      	subs	r1, #8
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	4298      	cmp	r0, r3
 8002574:	d301      	bcc.n	800257a <__clzsi2+0x22>
 8002576:	0900      	lsrs	r0, r0, #4
 8002578:	3904      	subs	r1, #4
 800257a:	a202      	add	r2, pc, #8	; (adr r2, 8002584 <__clzsi2+0x2c>)
 800257c:	5c10      	ldrb	r0, [r2, r0]
 800257e:	1840      	adds	r0, r0, r1
 8002580:	4770      	bx	lr
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	02020304 	.word	0x02020304
 8002588:	01010101 	.word	0x01010101
	...

08002594 <__clzdi2>:
 8002594:	b510      	push	{r4, lr}
 8002596:	2900      	cmp	r1, #0
 8002598:	d103      	bne.n	80025a2 <__clzdi2+0xe>
 800259a:	f7ff ffdd 	bl	8002558 <__clzsi2>
 800259e:	3020      	adds	r0, #32
 80025a0:	e002      	b.n	80025a8 <__clzdi2+0x14>
 80025a2:	0008      	movs	r0, r1
 80025a4:	f7ff ffd8 	bl	8002558 <__clzsi2>
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)

080025ac <NEO6_ReceiveUartChar>:
  /* done */
  return token;
}

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	2382      	movs	r3, #130	; 0x82
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	5cd3      	ldrb	r3, [r2, r3]
 80025bc:	3301      	adds	r3, #1
 80025be:	4a2b      	ldr	r2, [pc, #172]	; (800266c <NEO6_ReceiveUartChar+0xc0>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	d503      	bpl.n	80025cc <NEO6_ReceiveUartChar+0x20>
 80025c4:	3b01      	subs	r3, #1
 80025c6:	4a2a      	ldr	r2, [pc, #168]	; (8002670 <NEO6_ReceiveUartChar+0xc4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	3301      	adds	r3, #1
 80025cc:	001a      	movs	r2, r3
 80025ce:	200f      	movs	r0, #15
 80025d0:	183b      	adds	r3, r7, r0
 80025d2:	701a      	strb	r2, [r3, #0]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	2306      	movs	r3, #6
 80025d8:	33ff      	adds	r3, #255	; 0xff
 80025da:	5cd3      	ldrb	r3, [r2, r3]
 80025dc:	183a      	adds	r2, r7, r0
 80025de:	7812      	ldrb	r2, [r2, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d038      	beq.n	8002656 <NEO6_ReceiveUartChar+0xaa>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 80025e4:	4b23      	ldr	r3, [pc, #140]	; (8002674 <NEO6_ReceiveUartChar+0xc8>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b0d      	cmp	r3, #13
 80025ec:	d119      	bne.n	8002622 <NEO6_ReceiveUartChar+0x76>
		{
			GpsStateHandler->UartBufferLines++;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	2383      	movs	r3, #131	; 0x83
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	5cd3      	ldrb	r3, [r2, r3]
 80025f6:	3301      	adds	r3, #1
 80025f8:	b2d9      	uxtb	r1, r3
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	2383      	movs	r3, #131	; 0x83
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBufferHead = TempHead;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	1839      	adds	r1, r7, r0
 8002606:	2382      	movs	r3, #130	; 0x82
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	7809      	ldrb	r1, [r1, #0]
 800260c:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 800260e:	183b      	adds	r3, r7, r0
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	4a18      	ldr	r2, [pc, #96]	; (8002674 <NEO6_ReceiveUartChar+0xc8>)
 8002614:	7812      	ldrb	r2, [r2, #0]
 8002616:	b2d1      	uxtb	r1, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	18d3      	adds	r3, r2, r3
 800261c:	1c0a      	adds	r2, r1, #0
 800261e:	711a      	strb	r2, [r3, #4]
 8002620:	e019      	b.n	8002656 <NEO6_ReceiveUartChar+0xaa>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <NEO6_ReceiveUartChar+0xc8>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d014      	beq.n	8002656 <NEO6_ReceiveUartChar+0xaa>
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <NEO6_ReceiveUartChar+0xc8>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b0a      	cmp	r3, #10
 8002634:	d00f      	beq.n	8002656 <NEO6_ReceiveUartChar+0xaa>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	200f      	movs	r0, #15
 800263a:	1839      	adds	r1, r7, r0
 800263c:	2382      	movs	r3, #130	; 0x82
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	7809      	ldrb	r1, [r1, #0]
 8002642:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8002644:	183b      	adds	r3, r7, r0
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <NEO6_ReceiveUartChar+0xc8>)
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	b2d1      	uxtb	r1, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	18d3      	adds	r3, r2, r3
 8002652:	1c0a      	adds	r2, r1, #0
 8002654:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4906      	ldr	r1, [pc, #24]	; (8002674 <NEO6_ReceiveUartChar+0xc8>)
 800265c:	2201      	movs	r2, #1
 800265e:	0018      	movs	r0, r3
 8002660:	f004 fdc6 	bl	80071f0 <HAL_UART_Receive_IT>
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	b004      	add	sp, #16
 800266a:	bd80      	pop	{r7, pc}
 800266c:	800000ff 	.word	0x800000ff
 8002670:	ffffff00 	.word	0xffffff00
 8002674:	200001f4 	.word	0x200001f4

08002678 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800267e:	003b      	movs	r3, r7
 8002680:	0018      	movs	r0, r3
 8002682:	2308      	movs	r3, #8
 8002684:	001a      	movs	r2, r3
 8002686:	2100      	movs	r1, #0
 8002688:	f008 f85c 	bl	800a744 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <MX_ADC_Init+0xbc>)
 800268e:	4a2a      	ldr	r2, [pc, #168]	; (8002738 <MX_ADC_Init+0xc0>)
 8002690:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002692:	4b28      	ldr	r3, [pc, #160]	; (8002734 <MX_ADC_Init+0xbc>)
 8002694:	2200      	movs	r2, #0
 8002696:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002698:	4b26      	ldr	r3, [pc, #152]	; (8002734 <MX_ADC_Init+0xbc>)
 800269a:	2200      	movs	r2, #0
 800269c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800269e:	4b25      	ldr	r3, [pc, #148]	; (8002734 <MX_ADC_Init+0xbc>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80026a4:	4b23      	ldr	r3, [pc, #140]	; (8002734 <MX_ADC_Init+0xbc>)
 80026a6:	2207      	movs	r2, #7
 80026a8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80026aa:	4b22      	ldr	r3, [pc, #136]	; (8002734 <MX_ADC_Init+0xbc>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <MX_ADC_Init+0xbc>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80026b6:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <MX_ADC_Init+0xbc>)
 80026b8:	2220      	movs	r2, #32
 80026ba:	2101      	movs	r1, #1
 80026bc:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <MX_ADC_Init+0xbc>)
 80026c0:	2221      	movs	r2, #33	; 0x21
 80026c2:	2100      	movs	r1, #0
 80026c4:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <MX_ADC_Init+0xbc>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <MX_ADC_Init+0xbc>)
 80026ce:	22c2      	movs	r2, #194	; 0xc2
 80026d0:	32ff      	adds	r2, #255	; 0xff
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80026d4:	4b17      	ldr	r3, [pc, #92]	; (8002734 <MX_ADC_Init+0xbc>)
 80026d6:	222c      	movs	r2, #44	; 0x2c
 80026d8:	2101      	movs	r1, #1
 80026da:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <MX_ADC_Init+0xbc>)
 80026de:	2204      	movs	r2, #4
 80026e0:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <MX_ADC_Init+0xbc>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <MX_ADC_Init+0xbc>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80026ee:	4b11      	ldr	r3, [pc, #68]	; (8002734 <MX_ADC_Init+0xbc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <MX_ADC_Init+0xbc>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <MX_ADC_Init+0xbc>)
 80026fc:	0018      	movs	r0, r3
 80026fe:	f001 fc71 	bl	8003fe4 <HAL_ADC_Init>
 8002702:	1e03      	subs	r3, r0, #0
 8002704:	d001      	beq.n	800270a <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8002706:	f000 fb11 	bl	8002d2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800270a:	003b      	movs	r3, r7
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002710:	003b      	movs	r3, r7
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	0152      	lsls	r2, r2, #5
 8002716:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002718:	003a      	movs	r2, r7
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <MX_ADC_Init+0xbc>)
 800271c:	0011      	movs	r1, r2
 800271e:	0018      	movs	r0, r3
 8002720:	f001 fdd4 	bl	80042cc <HAL_ADC_ConfigChannel>
 8002724:	1e03      	subs	r3, r0, #0
 8002726:	d001      	beq.n	800272c <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 8002728:	f000 fb00 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200001f8 	.word	0x200001f8
 8002738:	40012400 	.word	0x40012400

0800273c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	240c      	movs	r4, #12
 8002746:	193b      	adds	r3, r7, r4
 8002748:	0018      	movs	r0, r3
 800274a:	2314      	movs	r3, #20
 800274c:	001a      	movs	r2, r3
 800274e:	2100      	movs	r1, #0
 8002750:	f007 fff8 	bl	800a744 <memset>
  if(adcHandle->Instance==ADC1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <HAL_ADC_MspInit+0xc8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d14d      	bne.n	80027fa <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800275e:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <HAL_ADC_MspInit+0xcc>)
 8002760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002762:	4b29      	ldr	r3, [pc, #164]	; (8002808 <HAL_ADC_MspInit+0xcc>)
 8002764:	2180      	movs	r1, #128	; 0x80
 8002766:	0089      	lsls	r1, r1, #2
 8002768:	430a      	orrs	r2, r1
 800276a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276c:	4b26      	ldr	r3, [pc, #152]	; (8002808 <HAL_ADC_MspInit+0xcc>)
 800276e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <HAL_ADC_MspInit+0xcc>)
 8002772:	2101      	movs	r1, #1
 8002774:	430a      	orrs	r2, r1
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_ADC_MspInit+0xcc>)
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	2201      	movs	r2, #1
 800277e:	4013      	ands	r3, r2
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002784:	193b      	adds	r3, r7, r4
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800278a:	193b      	adds	r3, r7, r4
 800278c:	2203      	movs	r2, #3
 800278e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	193b      	adds	r3, r7, r4
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	193a      	adds	r2, r7, r4
 8002798:	23a0      	movs	r3, #160	; 0xa0
 800279a:	05db      	lsls	r3, r3, #23
 800279c:	0011      	movs	r1, r2
 800279e:	0018      	movs	r0, r3
 80027a0:	f002 f8e0 	bl	8004964 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027a6:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <HAL_ADC_MspInit+0xd4>)
 80027a8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027c4:	2280      	movs	r2, #128	; 0x80
 80027c6:	0092      	lsls	r2, r2, #2
 80027c8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027d4:	2220      	movs	r2, #32
 80027d6:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027e0:	0018      	movs	r0, r3
 80027e2:	f001 ff11 	bl	8004608 <HAL_DMA_Init>
 80027e6:	1e03      	subs	r3, r0, #0
 80027e8:	d001      	beq.n	80027ee <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80027ea:	f000 fa9f 	bl	8002d2c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a06      	ldr	r2, [pc, #24]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b009      	add	sp, #36	; 0x24
 8002800:	bd90      	pop	{r4, r7, pc}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	40012400 	.word	0x40012400
 8002808:	40021000 	.word	0x40021000
 800280c:	20000254 	.word	0x20000254
 8002810:	40020008 	.word	0x40020008

08002814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <MX_DMA_Init+0x38>)
 800281c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <MX_DMA_Init+0x38>)
 8002820:	2101      	movs	r1, #1
 8002822:	430a      	orrs	r2, r1
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <MX_DMA_Init+0x38>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	2201      	movs	r2, #1
 800282c:	4013      	ands	r3, r2
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002832:	2200      	movs	r2, #0
 8002834:	2101      	movs	r1, #1
 8002836:	2009      	movs	r0, #9
 8002838:	f001 feb4 	bl	80045a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800283c:	2009      	movs	r0, #9
 800283e:	f001 fec6 	bl	80045ce <HAL_NVIC_EnableIRQ>

}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	b002      	add	sp, #8
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	40021000 	.word	0x40021000

08002850 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b08b      	sub	sp, #44	; 0x2c
 8002854:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002856:	2414      	movs	r4, #20
 8002858:	193b      	adds	r3, r7, r4
 800285a:	0018      	movs	r0, r3
 800285c:	2314      	movs	r3, #20
 800285e:	001a      	movs	r2, r3
 8002860:	2100      	movs	r1, #0
 8002862:	f007 ff6f 	bl	800a744 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002866:	4b48      	ldr	r3, [pc, #288]	; (8002988 <MX_GPIO_Init+0x138>)
 8002868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286a:	4b47      	ldr	r3, [pc, #284]	; (8002988 <MX_GPIO_Init+0x138>)
 800286c:	2104      	movs	r1, #4
 800286e:	430a      	orrs	r2, r1
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c
 8002872:	4b45      	ldr	r3, [pc, #276]	; (8002988 <MX_GPIO_Init+0x138>)
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	2204      	movs	r2, #4
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800287e:	4b42      	ldr	r3, [pc, #264]	; (8002988 <MX_GPIO_Init+0x138>)
 8002880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002882:	4b41      	ldr	r3, [pc, #260]	; (8002988 <MX_GPIO_Init+0x138>)
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	430a      	orrs	r2, r1
 8002888:	62da      	str	r2, [r3, #44]	; 0x2c
 800288a:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <MX_GPIO_Init+0x138>)
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002896:	4b3c      	ldr	r3, [pc, #240]	; (8002988 <MX_GPIO_Init+0x138>)
 8002898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289a:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <MX_GPIO_Init+0x138>)
 800289c:	2101      	movs	r1, #1
 800289e:	430a      	orrs	r2, r1
 80028a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <MX_GPIO_Init+0x138>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	2201      	movs	r2, #1
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <MX_GPIO_Init+0x138>)
 80028b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b2:	4b35      	ldr	r3, [pc, #212]	; (8002988 <MX_GPIO_Init+0x138>)
 80028b4:	2102      	movs	r1, #2
 80028b6:	430a      	orrs	r2, r1
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80028ba:	4b33      	ldr	r3, [pc, #204]	; (8002988 <MX_GPIO_Init+0x138>)
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	2202      	movs	r2, #2
 80028c0:	4013      	ands	r3, r2
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028c6:	23a0      	movs	r3, #160	; 0xa0
 80028c8:	05db      	lsls	r3, r3, #23
 80028ca:	2200      	movs	r2, #0
 80028cc:	2120      	movs	r1, #32
 80028ce:	0018      	movs	r0, r3
 80028d0:	f002 f9be 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 80028d4:	4b2d      	ldr	r3, [pc, #180]	; (800298c <MX_GPIO_Init+0x13c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	21c0      	movs	r1, #192	; 0xc0
 80028da:	0018      	movs	r0, r3
 80028dc:	f002 f9b8 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80028e0:	193b      	adds	r3, r7, r4
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	0192      	lsls	r2, r2, #6
 80028e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028e8:	193b      	adds	r3, r7, r4
 80028ea:	2284      	movs	r2, #132	; 0x84
 80028ec:	0392      	lsls	r2, r2, #14
 80028ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	193b      	adds	r3, r7, r4
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	4a24      	ldr	r2, [pc, #144]	; (800298c <MX_GPIO_Init+0x13c>)
 80028fa:	0019      	movs	r1, r3
 80028fc:	0010      	movs	r0, r2
 80028fe:	f002 f831 	bl	8004964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002902:	193b      	adds	r3, r7, r4
 8002904:	2220      	movs	r2, #32
 8002906:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002908:	193b      	adds	r3, r7, r4
 800290a:	2201      	movs	r2, #1
 800290c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	193b      	adds	r3, r7, r4
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	193b      	adds	r3, r7, r4
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800291a:	193a      	adds	r2, r7, r4
 800291c:	23a0      	movs	r3, #160	; 0xa0
 800291e:	05db      	lsls	r3, r3, #23
 8002920:	0011      	movs	r1, r2
 8002922:	0018      	movs	r0, r3
 8002924:	f002 f81e 	bl	8004964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 8002928:	193b      	adds	r3, r7, r4
 800292a:	22c0      	movs	r2, #192	; 0xc0
 800292c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292e:	193b      	adds	r3, r7, r4
 8002930:	2201      	movs	r2, #1
 8002932:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	193b      	adds	r3, r7, r4
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	193b      	adds	r3, r7, r4
 800293c:	2200      	movs	r2, #0
 800293e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002940:	193b      	adds	r3, r7, r4
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <MX_GPIO_Init+0x13c>)
 8002944:	0019      	movs	r1, r3
 8002946:	0010      	movs	r0, r2
 8002948:	f002 f80c 	bl	8004964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 800294c:	0021      	movs	r1, r4
 800294e:	187b      	adds	r3, r7, r1
 8002950:	2280      	movs	r2, #128	; 0x80
 8002952:	0052      	lsls	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002956:	187b      	adds	r3, r7, r1
 8002958:	2288      	movs	r2, #136	; 0x88
 800295a:	0352      	lsls	r2, r2, #13
 800295c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	187b      	adds	r3, r7, r1
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002964:	187b      	adds	r3, r7, r1
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <MX_GPIO_Init+0x13c>)
 8002968:	0019      	movs	r1, r3
 800296a:	0010      	movs	r0, r2
 800296c:	f001 fffa 	bl	8004964 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002970:	2200      	movs	r2, #0
 8002972:	2100      	movs	r1, #0
 8002974:	2007      	movs	r0, #7
 8002976:	f001 fe15 	bl	80045a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800297a:	2007      	movs	r0, #7
 800297c:	f001 fe27 	bl	80045ce <HAL_NVIC_EnableIRQ>

}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	b00b      	add	sp, #44	; 0x2c
 8002986:	bd90      	pop	{r4, r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	50000800 	.word	0x50000800

08002990 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <MX_I2C1_Init+0x74>)
 8002996:	4a1c      	ldr	r2, [pc, #112]	; (8002a08 <MX_I2C1_Init+0x78>)
 8002998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <MX_I2C1_Init+0x74>)
 800299c:	4a1b      	ldr	r2, [pc, #108]	; (8002a0c <MX_I2C1_Init+0x7c>)
 800299e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029a0:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029a6:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029ac:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029cc:	0018      	movs	r0, r3
 80029ce:	f002 f99d 	bl	8004d0c <HAL_I2C_Init>
 80029d2:	1e03      	subs	r3, r0, #0
 80029d4:	d001      	beq.n	80029da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029d6:	f000 f9a9 	bl	8002d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029dc:	2100      	movs	r1, #0
 80029de:	0018      	movs	r0, r3
 80029e0:	f002 fa2a 	bl	8004e38 <HAL_I2CEx_ConfigAnalogFilter>
 80029e4:	1e03      	subs	r3, r0, #0
 80029e6:	d001      	beq.n	80029ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029e8:	f000 f9a0 	bl	8002d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029ee:	2100      	movs	r1, #0
 80029f0:	0018      	movs	r0, r3
 80029f2:	f002 fa6d 	bl	8004ed0 <HAL_I2CEx_ConfigDigitalFilter>
 80029f6:	1e03      	subs	r3, r0, #0
 80029f8:	d001      	beq.n	80029fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029fa:	f000 f997 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	2000029c 	.word	0x2000029c
 8002a08:	40005400 	.word	0x40005400
 8002a0c:	00707cbb 	.word	0x00707cbb

08002a10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	240c      	movs	r4, #12
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	2314      	movs	r3, #20
 8002a20:	001a      	movs	r2, r3
 8002a22:	2100      	movs	r1, #0
 8002a24:	f007 fe8e 	bl	800a744 <memset>
  if(i2cHandle->Instance==I2C1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <HAL_I2C_MspInit+0x7c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d128      	bne.n	8002a84 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a38:	2102      	movs	r1, #2
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	2202      	movs	r2, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a4a:	0021      	movs	r1, r4
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	22c0      	movs	r2, #192	; 0xc0
 8002a50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2212      	movs	r2, #18
 8002a56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2203      	movs	r2, #3
 8002a62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2201      	movs	r2, #1
 8002a68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_I2C_MspInit+0x84>)
 8002a6e:	0019      	movs	r1, r3
 8002a70:	0010      	movs	r0, r2
 8002a72:	f001 ff77 	bl	8004964 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a7c:	2180      	movs	r1, #128	; 0x80
 8002a7e:	0389      	lsls	r1, r1, #14
 8002a80:	430a      	orrs	r2, r1
 8002a82:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b009      	add	sp, #36	; 0x24
 8002a8a:	bd90      	pop	{r4, r7, pc}
 8002a8c:	40005400 	.word	0x40005400
 8002a90:	40021000 	.word	0x40021000
 8002a94:	50000400 	.word	0x50000400

08002a98 <__io_putchar>:
		line_buffer[line_length++] = value;
	}
}

int __io_putchar(int ch) // to pc
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b0a      	cmp	r3, #10
 8002aa4:	d102      	bne.n	8002aac <__io_putchar+0x14>
    __io_putchar('\r');
 8002aa6:	200d      	movs	r0, #13
 8002aa8:	f7ff fff6 	bl	8002a98 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002aac:	2301      	movs	r3, #1
 8002aae:	425b      	negs	r3, r3
 8002ab0:	1d39      	adds	r1, r7, #4
 8002ab2:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <__io_putchar+0x2c>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f004 fa8b 	bl	8006fd0 <HAL_UART_Transmit>

  return 1;
 8002aba:	2301      	movs	r3, #1
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200007b4 	.word	0x200007b4

08002ac8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if(huart == GpsState.neo6_huart)
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <HAL_UART_RxCpltCallback+0x44>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d104      	bne.n	8002ae4 <HAL_UART_RxCpltCallback+0x1c>
  {
    NEO6_ReceiveUartChar(&GpsState);
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_UART_RxCpltCallback+0x44>)
 8002adc:	0018      	movs	r0, r3
 8002ade:	f7ff fd65 	bl	80025ac <NEO6_ReceiveUartChar>
  else if(huart == &hlpuart1)
  {
	  HAL_UART_Receive_IT(&hlpuart1, Mess, sizeof(Mess)); // receive from pcb
	  HAL_UART_Transmit_IT(&huart2, Mess, sizeof(Mess)); // send to pc
  }
}
 8002ae2:	e00f      	b.n	8002b04 <HAL_UART_RxCpltCallback+0x3c>
  else if(huart == &hlpuart1)
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_UART_RxCpltCallback+0x48>)
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d10b      	bne.n	8002b04 <HAL_UART_RxCpltCallback+0x3c>
	  HAL_UART_Receive_IT(&hlpuart1, Mess, sizeof(Mess)); // receive from pcb
 8002aec:	4909      	ldr	r1, [pc, #36]	; (8002b14 <HAL_UART_RxCpltCallback+0x4c>)
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <HAL_UART_RxCpltCallback+0x48>)
 8002af0:	22ff      	movs	r2, #255	; 0xff
 8002af2:	0018      	movs	r0, r3
 8002af4:	f004 fb7c 	bl	80071f0 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit_IT(&huart2, Mess, sizeof(Mess)); // send to pc
 8002af8:	4906      	ldr	r1, [pc, #24]	; (8002b14 <HAL_UART_RxCpltCallback+0x4c>)
 8002afa:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <HAL_UART_RxCpltCallback+0x50>)
 8002afc:	22ff      	movs	r2, #255	; 0xff
 8002afe:	0018      	movs	r0, r3
 8002b00:	f004 fb06 	bl	8007110 <HAL_UART_Transmit_IT>
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	200002f0 	.word	0x200002f0
 8002b10:	200006a4 	.word	0x200006a4
 8002b14:	20000500 	.word	0x20000500
 8002b18:	200007b4 	.word	0x200007b4

08002b1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d10b      	bne.n	8002b44 <HAL_TIM_PeriodElapsedCallback+0x28>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002b2c:	23a0      	movs	r3, #160	; 0xa0
 8002b2e:	05db      	lsls	r3, r3, #23
 8002b30:	2120      	movs	r1, #32
 8002b32:	0018      	movs	r0, r3
 8002b34:	f002 f8a9 	bl	8004c8a <HAL_GPIO_TogglePin>

    HAL_UART_Transmit_IT(&huart2, ".", 1);
 8002b38:	4905      	ldr	r1, [pc, #20]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f004 fae6 	bl	8007110 <HAL_UART_Transmit_IT>
  }
}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b002      	add	sp, #8
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000664 	.word	0x20000664
 8002b50:	0800d278 	.word	0x0800d278
 8002b54:	200007b4 	.word	0x200007b4

08002b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b5e:	f001 f9ad 	bl	8003ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b62:	f000 f863 	bl	8002c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b66:	f7ff fe73 	bl	8002850 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b6a:	f7ff fe53 	bl	8002814 <MX_DMA_Init>
  MX_I2C1_Init();
 8002b6e:	f7ff ff0f 	bl	8002990 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002b72:	f001 f853 	bl	8003c1c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002b76:	f001 f885 	bl	8003c84 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002b7a:	f000 fde9 	bl	8003750 <MX_SPI1_Init>
  MX_TIM6_Init();
 8002b7e:	f000 ffbd 	bl	8003afc <MX_TIM6_Init>
  MX_ADC_Init();
 8002b82:	f7ff fd79 	bl	8002678 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 8002b86:	f001 f817 	bl	8003bb8 <MX_LPUART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim6);
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <main+0xa8>)
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f003 ffcb 	bl	8006b28 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&hlpuart1, Mess, sizeof(Mess));
 8002b92:	491c      	ldr	r1, [pc, #112]	; (8002c04 <main+0xac>)
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <main+0xb0>)
 8002b96:	22ff      	movs	r2, #255	; 0xff
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f004 fb29 	bl	80071f0 <HAL_UART_Receive_IT>

  // NRF RECEIVER
  nRF24_Init(&hspi1);
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <main+0xb4>)
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f000 fd69 	bl	8003678 <nRF24_Init>
  nRF24_SetRXAddress(0, "Odb");
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <main+0xb8>)
 8002ba8:	0019      	movs	r1, r3
 8002baa:	2000      	movs	r0, #0
 8002bac:	f000 fbe4 	bl	8003378 <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Nad");
 8002bb0:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <main+0xbc>)
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 fc26 	bl	8003404 <nRF24_SetTXAddress>
  nRF24_RX_Mode();
 8002bb8:	f000 f9b0 	bl	8002f1c <nRF24_RX_Mode>
  uint8_t size = 1;
 8002bbc:	1dfb      	adds	r3, r7, #7
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	  /////////////// NRF ///////////////

	  if(nRF24_RXAvailible())
 8002bc2:	f000 fd35 	bl	8003630 <nRF24_RXAvailible>
 8002bc6:	1e03      	subs	r3, r0, #0
 8002bc8:	d0fb      	beq.n	8002bc2 <main+0x6a>
	  {
		  nRF24_ReadRXPaylaod(Nrf24_Message, &size);
 8002bca:	1dfa      	adds	r2, r7, #7
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <main+0xc0>)
 8002bce:	0011      	movs	r1, r2
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 fd17 	bl	8003604 <nRF24_ReadRXPaylaod>
		  MessageLength = sprintf(Message, "%c\n\r", &size);
 8002bd6:	1dfa      	adds	r2, r7, #7
 8002bd8:	4910      	ldr	r1, [pc, #64]	; (8002c1c <main+0xc4>)
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <main+0xc8>)
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f007 fc9f 	bl	800a520 <siprintf>
 8002be2:	0003      	movs	r3, r0
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <main+0xcc>)
 8002be8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <main+0xcc>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	23fa      	movs	r3, #250	; 0xfa
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	490a      	ldr	r1, [pc, #40]	; (8002c20 <main+0xc8>)
 8002bf6:	480c      	ldr	r0, [pc, #48]	; (8002c28 <main+0xd0>)
 8002bf8:	f004 f9ea 	bl	8006fd0 <HAL_UART_Transmit>
	  if(nRF24_RXAvailible())
 8002bfc:	e7e1      	b.n	8002bc2 <main+0x6a>
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	20000664 	.word	0x20000664
 8002c04:	20000500 	.word	0x20000500
 8002c08:	200006a4 	.word	0x200006a4
 8002c0c:	20000608 	.word	0x20000608
 8002c10:	0800d27c 	.word	0x0800d27c
 8002c14:	0800d280 	.word	0x0800d280
 8002c18:	200004d8 	.word	0x200004d8
 8002c1c:	0800d284 	.word	0x0800d284
 8002c20:	200004dc 	.word	0x200004dc
 8002c24:	200004fc 	.word	0x200004fc
 8002c28:	200007b4 	.word	0x200007b4

08002c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b09d      	sub	sp, #116	; 0x74
 8002c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c32:	2438      	movs	r4, #56	; 0x38
 8002c34:	193b      	adds	r3, r7, r4
 8002c36:	0018      	movs	r0, r3
 8002c38:	2338      	movs	r3, #56	; 0x38
 8002c3a:	001a      	movs	r2, r3
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	f007 fd81 	bl	800a744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c42:	2324      	movs	r3, #36	; 0x24
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	0018      	movs	r0, r3
 8002c48:	2314      	movs	r3, #20
 8002c4a:	001a      	movs	r2, r3
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	f007 fd79 	bl	800a744 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c52:	003b      	movs	r3, r7
 8002c54:	0018      	movs	r0, r3
 8002c56:	2324      	movs	r3, #36	; 0x24
 8002c58:	001a      	movs	r2, r3
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	f007 fd72 	bl	800a744 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c60:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <SystemClock_Config+0xf8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a30      	ldr	r2, [pc, #192]	; (8002d28 <SystemClock_Config+0xfc>)
 8002c66:	401a      	ands	r2, r3
 8002c68:	4b2e      	ldr	r3, [pc, #184]	; (8002d24 <SystemClock_Config+0xf8>)
 8002c6a:	2180      	movs	r1, #128	; 0x80
 8002c6c:	0109      	lsls	r1, r1, #4
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002c72:	193b      	adds	r3, r7, r4
 8002c74:	2203      	movs	r2, #3
 8002c76:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002c78:	193b      	adds	r3, r7, r4
 8002c7a:	22a0      	movs	r2, #160	; 0xa0
 8002c7c:	02d2      	lsls	r2, r2, #11
 8002c7e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c80:	0021      	movs	r1, r4
 8002c82:	187b      	adds	r3, r7, r1
 8002c84:	2201      	movs	r2, #1
 8002c86:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c88:	187b      	adds	r3, r7, r1
 8002c8a:	2210      	movs	r2, #16
 8002c8c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c8e:	187b      	adds	r3, r7, r1
 8002c90:	2202      	movs	r2, #2
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c94:	187b      	adds	r3, r7, r1
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	0252      	lsls	r2, r2, #9
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	22c0      	movs	r2, #192	; 0xc0
 8002ca0:	0312      	lsls	r2, r2, #12
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002ca4:	187b      	adds	r3, r7, r1
 8002ca6:	2280      	movs	r2, #128	; 0x80
 8002ca8:	03d2      	lsls	r2, r2, #15
 8002caa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f002 f95a 	bl	8004f68 <HAL_RCC_OscConfig>
 8002cb4:	1e03      	subs	r3, r0, #0
 8002cb6:	d001      	beq.n	8002cbc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002cb8:	f000 f838 	bl	8002d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cbc:	2124      	movs	r1, #36	; 0x24
 8002cbe:	187b      	adds	r3, r7, r1
 8002cc0:	220f      	movs	r2, #15
 8002cc2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cc4:	187b      	adds	r3, r7, r1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cca:	187b      	adds	r3, r7, r1
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cd0:	187b      	adds	r3, r7, r1
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cd6:	187b      	adds	r3, r7, r1
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	2101      	movs	r1, #1
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f002 fd05 	bl	80056f0 <HAL_RCC_ClockConfig>
 8002ce6:	1e03      	subs	r3, r0, #0
 8002ce8:	d001      	beq.n	8002cee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002cea:	f000 f81f 	bl	8002d2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002cee:	003b      	movs	r3, r7
 8002cf0:	220f      	movs	r2, #15
 8002cf2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002cf4:	003b      	movs	r3, r7
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002cfa:	003b      	movs	r3, r7
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	611a      	str	r2, [r3, #16]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002d00:	003b      	movs	r3, r7
 8002d02:	2200      	movs	r2, #0
 8002d04:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d06:	003b      	movs	r3, r7
 8002d08:	2200      	movs	r2, #0
 8002d0a:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d0c:	003b      	movs	r3, r7
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f002 ff12 	bl	8005b38 <HAL_RCCEx_PeriphCLKConfig>
 8002d14:	1e03      	subs	r3, r0, #0
 8002d16:	d001      	beq.n	8002d1c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8002d18:	f000 f808 	bl	8002d2c <Error_Handler>
  }
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b01d      	add	sp, #116	; 0x74
 8002d22:	bd90      	pop	{r4, r7, pc}
 8002d24:	40007000 	.word	0x40007000
 8002d28:	ffffe7ff 	.word	0xffffe7ff

08002d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d30:	b672      	cpsid	i
}
 8002d32:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <Error_Handler+0x8>

08002d36 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH           HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW            HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	0002      	movs	r2, r0
 8002d3e:	1dfb      	adds	r3, r7, #7
 8002d40:	701a      	strb	r2, [r3, #0]
        HAL_Delay(Time);
 8002d42:	1dfb      	adds	r3, r7, #7
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	0018      	movs	r0, r3
 8002d48:	f001 f928 	bl	8003f9c <HAL_Delay>
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b002      	add	sp, #8
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	000a      	movs	r2, r1
 8002d5e:	1cfb      	adds	r3, r7, #3
 8002d60:	701a      	strb	r2, [r3, #0]
        HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <nRF24_SendSpi+0x2c>)
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	1cfb      	adds	r3, r7, #3
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	23fa      	movs	r3, #250	; 0xfa
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	f003 f903 	bl	8005f7c <HAL_SPI_Transmit>
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	20000600 	.word	0x20000600

08002d84 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	000a      	movs	r2, r1
 8002d8e:	1cfb      	adds	r3, r7, #3
 8002d90:	701a      	strb	r2, [r3, #0]
        HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8002d92:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <nRF24_ReadSpi+0x2c>)
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	1cfb      	adds	r3, r7, #3
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	23fa      	movs	r3, #250	; 0xfa
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	f003 fa49 	bl	8006238 <HAL_SPI_Receive>
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b002      	add	sp, #8
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	20000600 	.word	0x20000600

08002db4 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	0002      	movs	r2, r0
 8002dbc:	1dfb      	adds	r3, r7, #7
 8002dbe:	701a      	strb	r2, [r3, #0]
        uint8_t result;

        reg = NRF24_CMD_R_REGISTER | reg;
 8002dc0:	1dfb      	adds	r3, r7, #7
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	1dfb      	adds	r3, r7, #7
 8002dc6:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <nRF24_ReadRegister+0x50>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2140      	movs	r1, #64	; 0x40
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f001 ff3e 	bl	8004c50 <HAL_GPIO_WritePin>
        nRF24_SendSpi(&reg, 1);
 8002dd4:	1dfb      	adds	r3, r7, #7
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f7ff ffbb 	bl	8002d54 <nRF24_SendSpi>
        nRF24_ReadSpi(&result, 1);
 8002dde:	240f      	movs	r4, #15
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	2101      	movs	r1, #1
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7ff ffcd 	bl	8002d84 <nRF24_ReadSpi>
        NRF24_CSN_HIGH;
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <nRF24_ReadRegister+0x50>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	2140      	movs	r1, #64	; 0x40
 8002df0:	0018      	movs	r0, r3
 8002df2:	f001 ff2d 	bl	8004c50 <HAL_GPIO_WritePin>

        return result;
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	781b      	ldrb	r3, [r3, #0]
}
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b005      	add	sp, #20
 8002e00:	bd90      	pop	{r4, r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	50000800 	.word	0x50000800

08002e08 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6039      	str	r1, [r7, #0]
 8002e10:	0011      	movs	r1, r2
 8002e12:	1dfb      	adds	r3, r7, #7
 8002e14:	1c02      	adds	r2, r0, #0
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	1dbb      	adds	r3, r7, #6
 8002e1a:	1c0a      	adds	r2, r1, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
        reg = NRF24_CMD_R_REGISTER | reg;
 8002e1e:	1dfb      	adds	r3, r7, #7
 8002e20:	781a      	ldrb	r2, [r3, #0]
 8002e22:	1dfb      	adds	r3, r7, #7
 8002e24:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <nRF24_ReadRegisters+0x58>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2140      	movs	r1, #64	; 0x40
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f001 ff0f 	bl	8004c50 <HAL_GPIO_WritePin>

        nRF24_SendSpi(&reg, 1);
 8002e32:	1dfb      	adds	r3, r7, #7
 8002e34:	2101      	movs	r1, #1
 8002e36:	0018      	movs	r0, r3
 8002e38:	f7ff ff8c 	bl	8002d54 <nRF24_SendSpi>
        nRF24_ReadSpi(ret, len);
 8002e3c:	1dbb      	adds	r3, r7, #6
 8002e3e:	781a      	ldrb	r2, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	0011      	movs	r1, r2
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7ff ff9d 	bl	8002d84 <nRF24_ReadSpi>

        NRF24_CSN_HIGH;
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <nRF24_ReadRegisters+0x58>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	2140      	movs	r1, #64	; 0x40
 8002e50:	0018      	movs	r0, r3
 8002e52:	f001 fefd 	bl	8004c50 <HAL_GPIO_WritePin>
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b002      	add	sp, #8
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	50000800 	.word	0x50000800

08002e64 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	1dfb      	adds	r3, r7, #7
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	1dbb      	adds	r3, r7, #6
 8002e72:	1c0a      	adds	r2, r1, #0
 8002e74:	701a      	strb	r2, [r3, #0]
        uint8_t tmp[2];

        tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8002e76:	1dfb      	adds	r3, r7, #7
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	240c      	movs	r4, #12
 8002e82:	193b      	adds	r3, r7, r4
 8002e84:	701a      	strb	r2, [r3, #0]
        tmp[1] = val;
 8002e86:	193b      	adds	r3, r7, r4
 8002e88:	1dba      	adds	r2, r7, #6
 8002e8a:	7812      	ldrb	r2, [r2, #0]
 8002e8c:	705a      	strb	r2, [r3, #1]

        NRF24_CSN_LOW;
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <nRF24_WriteRegister+0x54>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	2140      	movs	r1, #64	; 0x40
 8002e94:	0018      	movs	r0, r3
 8002e96:	f001 fedb 	bl	8004c50 <HAL_GPIO_WritePin>

        nRF24_SendSpi(tmp, 2);
 8002e9a:	193b      	adds	r3, r7, r4
 8002e9c:	2102      	movs	r1, #2
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f7ff ff58 	bl	8002d54 <nRF24_SendSpi>

        NRF24_CSN_HIGH;
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <nRF24_WriteRegister+0x54>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	2140      	movs	r1, #64	; 0x40
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f001 fed0 	bl	8004c50 <HAL_GPIO_WritePin>
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b005      	add	sp, #20
 8002eb6:	bd90      	pop	{r4, r7, pc}
 8002eb8:	50000800 	.word	0x50000800

08002ebc <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6039      	str	r1, [r7, #0]
 8002ec4:	0011      	movs	r1, r2
 8002ec6:	1dfb      	adds	r3, r7, #7
 8002ec8:	1c02      	adds	r2, r0, #0
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	1dbb      	adds	r3, r7, #6
 8002ece:	1c0a      	adds	r2, r1, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
        reg = NRF24_CMD_W_REGISTER | reg;
 8002ed2:	1dfb      	adds	r3, r7, #7
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	1dfb      	adds	r3, r7, #7
 8002ede:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <nRF24_WriteRegisters+0x5c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2140      	movs	r1, #64	; 0x40
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f001 feb2 	bl	8004c50 <HAL_GPIO_WritePin>

        nRF24_SendSpi(&reg, 1);
 8002eec:	1dfb      	adds	r3, r7, #7
 8002eee:	2101      	movs	r1, #1
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7ff ff2f 	bl	8002d54 <nRF24_SendSpi>
        nRF24_SendSpi(val, len);
 8002ef6:	1dbb      	adds	r3, r7, #6
 8002ef8:	781a      	ldrb	r2, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	0011      	movs	r1, r2
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7ff ff28 	bl	8002d54 <nRF24_SendSpi>

        NRF24_CSN_HIGH;
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <nRF24_WriteRegisters+0x5c>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	2140      	movs	r1, #64	; 0x40
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f001 fea0 	bl	8004c50 <HAL_GPIO_WritePin>
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	50000800 	.word	0x50000800

08002f1c <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
        uint8_t config = nRF24_ReadConfig();
 8002f22:	1dfc      	adds	r4, r7, #7
 8002f24:	f000 f830 	bl	8002f88 <nRF24_ReadConfig>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	7023      	strb	r3, [r4, #0]
        // Restore pipe 0 adress after comeback from TX mode
        nRF24_SetRXAddress(0, addr_p0_backup);
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <nRF24_RX_Mode+0x64>)
 8002f2e:	0019      	movs	r1, r3
 8002f30:	2000      	movs	r0, #0
 8002f32:	f000 fa21 	bl	8003378 <nRF24_SetRXAddress>
        // PWR_UP bit set
        config |= (1<<NRF24_PWR_UP);
 8002f36:	1dfb      	adds	r3, r7, #7
 8002f38:	1dfa      	adds	r2, r7, #7
 8002f3a:	7812      	ldrb	r2, [r2, #0]
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	701a      	strb	r2, [r3, #0]
        // PRIM_RX bit set
        config |= (1<<NRF24_PRIM_RX);
 8002f42:	1dfb      	adds	r3, r7, #7
 8002f44:	1dfa      	adds	r2, r7, #7
 8002f46:	7812      	ldrb	r2, [r2, #0]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 8002f4e:	1dfb      	adds	r3, r7, #7
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	0018      	movs	r0, r3
 8002f54:	f000 f821 	bl	8002f9a <nRF24_WriteConfig>
        // Reset status
        nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002f58:	2070      	movs	r0, #112	; 0x70
 8002f5a:	f000 f895 	bl	8003088 <nRF24_WriteStatus>
        // Flush RX
        nRF24_FlushRX();
 8002f5e:	f000 f8a3 	bl	80030a8 <nRF24_FlushRX>
        // Flush TX
        nRF24_FlushTX();
 8002f62:	f000 f8bf 	bl	80030e4 <nRF24_FlushTX>

        NRF24_CE_HIGH;
 8002f66:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <nRF24_RX_Mode+0x68>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	2180      	movs	r1, #128	; 0x80
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f001 fe6f 	bl	8004c50 <HAL_GPIO_WritePin>
        nRF24_Delay_ms(1);
 8002f72:	2001      	movs	r0, #1
 8002f74:	f7ff fedf 	bl	8002d36 <nRF24_Delay_ms>
}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b003      	add	sp, #12
 8002f7e:	bd90      	pop	{r4, r7, pc}
 8002f80:	20000604 	.word	0x20000604
 8002f84:	50000800 	.word	0x50000800

08002f88 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
        return (nRF24_ReadRegister(NRF24_CONFIG));
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7ff ff11 	bl	8002db4 <nRF24_ReadRegister>
 8002f92:	0003      	movs	r3, r0
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	1dfb      	adds	r3, r7, #7
 8002fa4:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_CONFIG, conf);
 8002fa6:	1dfb      	adds	r3, r7, #7
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	0019      	movs	r1, r3
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7ff ff59 	bl	8002e64 <nRF24_WriteRegister>
}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b002      	add	sp, #8
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8002fba:	b5b0      	push	{r4, r5, r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	0002      	movs	r2, r0
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	701a      	strb	r2, [r3, #0]
        uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002fc6:	250f      	movs	r5, #15
 8002fc8:	197c      	adds	r4, r7, r5
 8002fca:	2006      	movs	r0, #6
 8002fcc:	f7ff fef2 	bl	8002db4 <nRF24_ReadRegister>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	7023      	strb	r3, [r4, #0]
        rf_setup &= 0xF8; // Clear PWR bits
 8002fd4:	0028      	movs	r0, r5
 8002fd6:	183b      	adds	r3, r7, r0
 8002fd8:	183a      	adds	r2, r7, r0
 8002fda:	7812      	ldrb	r2, [r2, #0]
 8002fdc:	2107      	movs	r1, #7
 8002fde:	438a      	bics	r2, r1
 8002fe0:	701a      	strb	r2, [r3, #0]
        rf_setup |= (lev<<1);
 8002fe2:	1dfb      	adds	r3, r7, #7
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	b25a      	sxtb	r2, r3
 8002fea:	183b      	adds	r3, r7, r0
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	b25b      	sxtb	r3, r3
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	b25a      	sxtb	r2, r3
 8002ff4:	183b      	adds	r3, r7, r0
 8002ff6:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002ff8:	183b      	adds	r3, r7, r0
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	2006      	movs	r0, #6
 8003000:	f7ff ff30 	bl	8002e64 <nRF24_WriteRegister>
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b004      	add	sp, #16
 800300a:	bdb0      	pop	{r4, r5, r7, pc}

0800300c <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800300c:	b5b0      	push	{r4, r5, r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	0002      	movs	r2, r0
 8003014:	1dfb      	adds	r3, r7, #7
 8003016:	701a      	strb	r2, [r3, #0]
        uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8003018:	250f      	movs	r5, #15
 800301a:	197c      	adds	r4, r7, r5
 800301c:	2006      	movs	r0, #6
 800301e:	f7ff fec9 	bl	8002db4 <nRF24_ReadRegister>
 8003022:	0003      	movs	r3, r0
 8003024:	7023      	strb	r3, [r4, #0]
        rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8003026:	0028      	movs	r0, r5
 8003028:	183b      	adds	r3, r7, r0
 800302a:	183a      	adds	r2, r7, r0
 800302c:	7812      	ldrb	r2, [r2, #0]
 800302e:	2128      	movs	r1, #40	; 0x28
 8003030:	438a      	bics	r2, r1
 8003032:	701a      	strb	r2, [r3, #0]
        if(dr == NRF24_RF_DR_250KBPS)
 8003034:	1dfb      	adds	r3, r7, #7
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d106      	bne.n	800304a <nRF24_SetDataRate+0x3e>
                rf_setup |= (1<<NRF24_RF_DR_LOW);
 800303c:	183b      	adds	r3, r7, r0
 800303e:	183a      	adds	r2, r7, r0
 8003040:	7812      	ldrb	r2, [r2, #0]
 8003042:	2120      	movs	r1, #32
 8003044:	430a      	orrs	r2, r1
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	e00a      	b.n	8003060 <nRF24_SetDataRate+0x54>
        else if(dr == NRF24_RF_DR_2MBPS)
 800304a:	1dfb      	adds	r3, r7, #7
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d106      	bne.n	8003060 <nRF24_SetDataRate+0x54>
                rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8003052:	220f      	movs	r2, #15
 8003054:	18bb      	adds	r3, r7, r2
 8003056:	18ba      	adds	r2, r7, r2
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	2108      	movs	r1, #8
 800305c:	430a      	orrs	r2, r1
 800305e:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8003060:	230f      	movs	r3, #15
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	0019      	movs	r1, r3
 8003068:	2006      	movs	r0, #6
 800306a:	f7ff fefb 	bl	8002e64 <nRF24_WriteRegister>
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46bd      	mov	sp, r7
 8003072:	b004      	add	sp, #16
 8003074:	bdb0      	pop	{r4, r5, r7, pc}

08003076 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	af00      	add	r7, sp, #0
        return (nRF24_ReadRegister(NRF24_STATUS));
 800307a:	2007      	movs	r0, #7
 800307c:	f7ff fe9a 	bl	8002db4 <nRF24_ReadRegister>
 8003080:	0003      	movs	r3, r0
}
 8003082:	0018      	movs	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	0002      	movs	r2, r0
 8003090:	1dfb      	adds	r3, r7, #7
 8003092:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_STATUS, st);
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	0019      	movs	r1, r3
 800309a:	2007      	movs	r0, #7
 800309c:	f7ff fee2 	bl	8002e64 <nRF24_WriteRegister>
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <nRF24_FlushRX>:
{
        return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
        uint8_t command = NRF24_CMD_FLUSH_RX;
 80030ae:	1dfb      	adds	r3, r7, #7
 80030b0:	22e2      	movs	r2, #226	; 0xe2
 80030b2:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <nRF24_FlushRX+0x38>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	2140      	movs	r1, #64	; 0x40
 80030ba:	0018      	movs	r0, r3
 80030bc:	f001 fdc8 	bl	8004c50 <HAL_GPIO_WritePin>
        nRF24_SendSpi(&command, 1);
 80030c0:	1dfb      	adds	r3, r7, #7
 80030c2:	2101      	movs	r1, #1
 80030c4:	0018      	movs	r0, r3
 80030c6:	f7ff fe45 	bl	8002d54 <nRF24_SendSpi>
        NRF24_CSN_HIGH;
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <nRF24_FlushRX+0x38>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	2140      	movs	r1, #64	; 0x40
 80030d0:	0018      	movs	r0, r3
 80030d2:	f001 fdbd 	bl	8004c50 <HAL_GPIO_WritePin>
}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	50000800 	.word	0x50000800

080030e4 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
        uint8_t command = NRF24_CMD_FLUSH_TX;
 80030ea:	1dfb      	adds	r3, r7, #7
 80030ec:	22e1      	movs	r2, #225	; 0xe1
 80030ee:	701a      	strb	r2, [r3, #0]

        NRF24_CSN_LOW;
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <nRF24_FlushTX+0x38>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	2140      	movs	r1, #64	; 0x40
 80030f6:	0018      	movs	r0, r3
 80030f8:	f001 fdaa 	bl	8004c50 <HAL_GPIO_WritePin>
        nRF24_SendSpi(&command, 1);
 80030fc:	1dfb      	adds	r3, r7, #7
 80030fe:	2101      	movs	r1, #1
 8003100:	0018      	movs	r0, r3
 8003102:	f7ff fe27 	bl	8002d54 <nRF24_SendSpi>
        NRF24_CSN_HIGH;
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <nRF24_FlushTX+0x38>)
 8003108:	2201      	movs	r2, #1
 800310a:	2140      	movs	r1, #64	; 0x40
 800310c:	0018      	movs	r0, r3
 800310e:	f001 fd9f 	bl	8004c50 <HAL_GPIO_WritePin>
}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	b002      	add	sp, #8
 8003118:	bd80      	pop	{r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	50000800 	.word	0x50000800

08003120 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8003120:	b5b0      	push	{r4, r5, r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	0002      	movs	r2, r0
 8003128:	1dfb      	adds	r3, r7, #7
 800312a:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 800312c:	250f      	movs	r5, #15
 800312e:	197c      	adds	r4, r7, r5
 8003130:	f7ff ff2a 	bl	8002f88 <nRF24_ReadConfig>
 8003134:	0003      	movs	r3, r0
 8003136:	7023      	strb	r3, [r4, #0]

        if(onoff)
 8003138:	1dfb      	adds	r3, r7, #7
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d006      	beq.n	800314e <nRF24_EnableCRC+0x2e>
                config |= (1<<NRF24_EN_CRC);
 8003140:	197b      	adds	r3, r7, r5
 8003142:	197a      	adds	r2, r7, r5
 8003144:	7812      	ldrb	r2, [r2, #0]
 8003146:	2108      	movs	r1, #8
 8003148:	430a      	orrs	r2, r1
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	e006      	b.n	800315c <nRF24_EnableCRC+0x3c>
        else
                config &= ~(1<<NRF24_EN_CRC);
 800314e:	220f      	movs	r2, #15
 8003150:	18bb      	adds	r3, r7, r2
 8003152:	18ba      	adds	r2, r7, r2
 8003154:	7812      	ldrb	r2, [r2, #0]
 8003156:	2108      	movs	r1, #8
 8003158:	438a      	bics	r2, r1
 800315a:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 800315c:	230f      	movs	r3, #15
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	0018      	movs	r0, r3
 8003164:	f7ff ff19 	bl	8002f9a <nRF24_WriteConfig>
}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b004      	add	sp, #16
 800316e:	bdb0      	pop	{r4, r5, r7, pc}

08003170 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8003170:	b5b0      	push	{r4, r5, r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	0002      	movs	r2, r0
 8003178:	1dfb      	adds	r3, r7, #7
 800317a:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 800317c:	250f      	movs	r5, #15
 800317e:	197c      	adds	r4, r7, r5
 8003180:	f7ff ff02 	bl	8002f88 <nRF24_ReadConfig>
 8003184:	0003      	movs	r3, r0
 8003186:	7023      	strb	r3, [r4, #0]
        if(crcl == NRF24_CRC_WIDTH_2B)
 8003188:	1dfb      	adds	r3, r7, #7
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d106      	bne.n	800319e <nRF24_SetCRCLength+0x2e>
                config |= (1<<NRF24_CRCO);
 8003190:	197b      	adds	r3, r7, r5
 8003192:	197a      	adds	r2, r7, r5
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	2104      	movs	r1, #4
 8003198:	430a      	orrs	r2, r1
 800319a:	701a      	strb	r2, [r3, #0]
 800319c:	e006      	b.n	80031ac <nRF24_SetCRCLength+0x3c>
        else
                config &= ~(1<<NRF24_CRCO);
 800319e:	220f      	movs	r2, #15
 80031a0:	18bb      	adds	r3, r7, r2
 80031a2:	18ba      	adds	r2, r7, r2
 80031a4:	7812      	ldrb	r2, [r2, #0]
 80031a6:	2104      	movs	r1, #4
 80031a8:	438a      	bics	r2, r1
 80031aa:	701a      	strb	r2, [r3, #0]
        nRF24_WriteConfig(config);
 80031ac:	230f      	movs	r3, #15
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	0018      	movs	r0, r3
 80031b4:	f7ff fef1 	bl	8002f9a <nRF24_WriteConfig>
}
 80031b8:	46c0      	nop			; (mov r8, r8)
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b004      	add	sp, #16
 80031be:	bdb0      	pop	{r4, r5, r7, pc}

080031c0 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{ //ard = delay   arc = count (ilość i odległość czasowa
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	0002      	movs	r2, r0
 80031c8:	1dfb      	adds	r3, r7, #7
 80031ca:	701a      	strb	r2, [r3, #0]
 80031cc:	1dbb      	adds	r3, r7, #6
 80031ce:	1c0a      	adds	r2, r1, #0
 80031d0:	701a      	strb	r2, [r3, #0]
        // ard * 250us, arc repeats
        nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80031d2:	1dfb      	adds	r3, r7, #7
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	b25a      	sxtb	r2, r3
 80031da:	1dbb      	adds	r3, r7, #6
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	b25b      	sxtb	r3, r3
 80031e0:	210f      	movs	r1, #15
 80031e2:	400b      	ands	r3, r1
 80031e4:	b25b      	sxtb	r3, r3
 80031e6:	4313      	orrs	r3, r2
 80031e8:	b25b      	sxtb	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	0019      	movs	r1, r3
 80031ee:	2004      	movs	r0, #4
 80031f0:	f7ff fe38 	bl	8002e64 <nRF24_WriteRegister>
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b002      	add	sp, #8
 80031fa:	bd80      	pop	{r7, pc}

080031fc <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	0002      	movs	r2, r0
 8003204:	1dfb      	adds	r3, r7, #7
 8003206:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8003208:	1dfb      	adds	r3, r7, #7
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	227f      	movs	r2, #127	; 0x7f
 800320e:	4013      	ands	r3, r2
 8003210:	b2db      	uxtb	r3, r3
 8003212:	0019      	movs	r1, r3
 8003214:	2005      	movs	r0, #5
 8003216:	f7ff fe25 	bl	8002e64 <nRF24_WriteRegister>
}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}

08003222 <nRF24_EnablePipe>:
                pipe = 5; // Block too high pipe number
        nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8003222:	b5b0      	push	{r4, r5, r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	0002      	movs	r2, r0
 800322a:	1dfb      	adds	r3, r7, #7
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	1dbb      	adds	r3, r7, #6
 8003230:	1c0a      	adds	r2, r1, #0
 8003232:	701a      	strb	r2, [r3, #0]
        if(pipe > 5)
 8003234:	1dfb      	adds	r3, r7, #7
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b05      	cmp	r3, #5
 800323a:	d902      	bls.n	8003242 <nRF24_EnablePipe+0x20>
                pipe = 5; // Block too high pipe number
 800323c:	1dfb      	adds	r3, r7, #7
 800323e:	2205      	movs	r2, #5
 8003240:	701a      	strb	r2, [r3, #0]
        uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8003242:	250f      	movs	r5, #15
 8003244:	197c      	adds	r4, r7, r5
 8003246:	2002      	movs	r0, #2
 8003248:	f7ff fdb4 	bl	8002db4 <nRF24_ReadRegister>
 800324c:	0003      	movs	r3, r0
 800324e:	7023      	strb	r3, [r4, #0]
        if(onoff == 1)
 8003250:	1dbb      	adds	r3, r7, #6
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d10d      	bne.n	8003274 <nRF24_EnablePipe+0x52>
                enable_pipe |= (1<<pipe);
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2201      	movs	r2, #1
 800325e:	409a      	lsls	r2, r3
 8003260:	0013      	movs	r3, r2
 8003262:	b25a      	sxtb	r2, r3
 8003264:	197b      	adds	r3, r7, r5
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	b25b      	sxtb	r3, r3
 800326a:	4313      	orrs	r3, r2
 800326c:	b25a      	sxtb	r2, r3
 800326e:	197b      	adds	r3, r7, r5
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e00f      	b.n	8003294 <nRF24_EnablePipe+0x72>
        else
                enable_pipe &= ~(1<<pipe);
 8003274:	1dfb      	adds	r3, r7, #7
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2201      	movs	r2, #1
 800327a:	409a      	lsls	r2, r3
 800327c:	0013      	movs	r3, r2
 800327e:	b25b      	sxtb	r3, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	b25b      	sxtb	r3, r3
 8003284:	210f      	movs	r1, #15
 8003286:	187a      	adds	r2, r7, r1
 8003288:	7812      	ldrb	r2, [r2, #0]
 800328a:	b252      	sxtb	r2, r2
 800328c:	4013      	ands	r3, r2
 800328e:	b25a      	sxtb	r2, r3
 8003290:	187b      	adds	r3, r7, r1
 8003292:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8003294:	230f      	movs	r3, #15
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	0019      	movs	r1, r3
 800329c:	2002      	movs	r0, #2
 800329e:	f7ff fde1 	bl	8002e64 <nRF24_WriteRegister>
}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bdb0      	pop	{r4, r5, r7, pc}

080032aa <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80032aa:	b5b0      	push	{r4, r5, r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	0002      	movs	r2, r0
 80032b2:	1dfb      	adds	r3, r7, #7
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	1dbb      	adds	r3, r7, #6
 80032b8:	1c0a      	adds	r2, r1, #0
 80032ba:	701a      	strb	r2, [r3, #0]
        if(pipe > 5)
 80032bc:	1dfb      	adds	r3, r7, #7
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b05      	cmp	r3, #5
 80032c2:	d902      	bls.n	80032ca <nRF24_AutoACK+0x20>
                pipe = 5; // Block too high pipe number
 80032c4:	1dfb      	adds	r3, r7, #7
 80032c6:	2205      	movs	r2, #5
 80032c8:	701a      	strb	r2, [r3, #0]
        uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80032ca:	250f      	movs	r5, #15
 80032cc:	197c      	adds	r4, r7, r5
 80032ce:	2001      	movs	r0, #1
 80032d0:	f7ff fd70 	bl	8002db4 <nRF24_ReadRegister>
 80032d4:	0003      	movs	r3, r0
 80032d6:	7023      	strb	r3, [r4, #0]
        if(onoff == 1)
 80032d8:	1dbb      	adds	r3, r7, #6
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d10d      	bne.n	80032fc <nRF24_AutoACK+0x52>
                enaa |= (1<<pipe);
 80032e0:	1dfb      	adds	r3, r7, #7
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2201      	movs	r2, #1
 80032e6:	409a      	lsls	r2, r3
 80032e8:	0013      	movs	r3, r2
 80032ea:	b25a      	sxtb	r2, r3
 80032ec:	197b      	adds	r3, r7, r5
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	b25b      	sxtb	r3, r3
 80032f2:	4313      	orrs	r3, r2
 80032f4:	b25a      	sxtb	r2, r3
 80032f6:	197b      	adds	r3, r7, r5
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	e00f      	b.n	800331c <nRF24_AutoACK+0x72>
        else
                enaa &= ~(1<<pipe);
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2201      	movs	r2, #1
 8003302:	409a      	lsls	r2, r3
 8003304:	0013      	movs	r3, r2
 8003306:	b25b      	sxtb	r3, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	b25b      	sxtb	r3, r3
 800330c:	210f      	movs	r1, #15
 800330e:	187a      	adds	r2, r7, r1
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	b252      	sxtb	r2, r2
 8003314:	4013      	ands	r3, r2
 8003316:	b25a      	sxtb	r2, r3
 8003318:	187b      	adds	r3, r7, r1
 800331a:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_EN_AA, enaa);
 800331c:	230f      	movs	r3, #15
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	0019      	movs	r1, r3
 8003324:	2001      	movs	r0, #1
 8003326:	f7ff fd9d 	bl	8002e64 <nRF24_WriteRegister>
}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	b004      	add	sp, #16
 8003330:	bdb0      	pop	{r4, r5, r7, pc}

08003332 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	0002      	movs	r2, r0
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	701a      	strb	r2, [r3, #0]
        if(size > 5)
 800333e:	1dfb      	adds	r3, r7, #7
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b05      	cmp	r3, #5
 8003344:	d902      	bls.n	800334c <nRF24_SetAddressWidth+0x1a>
                size = 5; // Maximum are 5 bytes
 8003346:	1dfb      	adds	r3, r7, #7
 8003348:	2205      	movs	r2, #5
 800334a:	701a      	strb	r2, [r3, #0]
        if(size < 3)
 800334c:	1dfb      	adds	r3, r7, #7
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d802      	bhi.n	800335a <nRF24_SetAddressWidth+0x28>
                size = 3; // Minimum are 3 bytes
 8003354:	1dfb      	adds	r3, r7, #7
 8003356:	2203      	movs	r2, #3
 8003358:	701a      	strb	r2, [r3, #0]
        nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 800335a:	1dfb      	adds	r3, r7, #7
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	3b02      	subs	r3, #2
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2203      	movs	r2, #3
 8003364:	4013      	ands	r3, r2
 8003366:	b2db      	uxtb	r3, r3
 8003368:	0019      	movs	r1, r3
 800336a:	2003      	movs	r0, #3
 800336c:	f7ff fd7a 	bl	8002e64 <nRF24_WriteRegister>
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	b002      	add	sp, #8
 8003376:	bd80      	pop	{r7, pc}

08003378 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	0002      	movs	r2, r0
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	701a      	strb	r2, [r3, #0]
        // pipe 0 and pipe 1 are fully 40-bits storaged
        // pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
        // pipe 0 and 1 are LSByte first so they are needed to reverse address
        if((pipe == 0) || (pipe == 1))
 8003386:	1dfb      	adds	r3, r7, #7
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <nRF24_SetRXAddress+0x1e>
 800338e:	1dfb      	adds	r3, r7, #7
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d126      	bne.n	80033e4 <nRF24_SetRXAddress+0x6c>
        {
                uint8_t i;
                uint8_t address_rev[NRF24_ADDR_SIZE];
                for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8003396:	230f      	movs	r3, #15
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	2200      	movs	r2, #0
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e011      	b.n	80033c4 <nRF24_SetRXAddress+0x4c>
                        address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80033a0:	200f      	movs	r0, #15
 80033a2:	183b      	adds	r3, r7, r0
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	18d2      	adds	r2, r2, r3
 80033aa:	183b      	adds	r3, r7, r0
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2102      	movs	r1, #2
 80033b0:	1acb      	subs	r3, r1, r3
 80033b2:	7811      	ldrb	r1, [r2, #0]
 80033b4:	220c      	movs	r2, #12
 80033b6:	18ba      	adds	r2, r7, r2
 80033b8:	54d1      	strb	r1, [r2, r3]
                for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80033ba:	183b      	adds	r3, r7, r0
 80033bc:	781a      	ldrb	r2, [r3, #0]
 80033be:	183b      	adds	r3, r7, r0
 80033c0:	3201      	adds	r2, #1
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	230f      	movs	r3, #15
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d9e8      	bls.n	80033a0 <nRF24_SetRXAddress+0x28>
                nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80033ce:	1dfb      	adds	r3, r7, #7
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	330a      	adds	r3, #10
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	220c      	movs	r2, #12
 80033d8:	18b9      	adds	r1, r7, r2
 80033da:	2203      	movs	r2, #3
 80033dc:	0018      	movs	r0, r3
 80033de:	f7ff fd6d 	bl	8002ebc <nRF24_WriteRegisters>
        {
 80033e2:	e00b      	b.n	80033fc <nRF24_SetRXAddress+0x84>
        }
        else
                nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80033e4:	1dfb      	adds	r3, r7, #7
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	330a      	adds	r3, #10
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	3302      	adds	r3, #2
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	0019      	movs	r1, r3
 80033f4:	0010      	movs	r0, r2
 80033f6:	f7ff fd35 	bl	8002e64 <nRF24_WriteRegister>
}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b004      	add	sp, #16
 8003402:	bd80      	pop	{r7, pc}

08003404 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
        // TX address is storaged similar to RX pipe 0 - LSByte first
        uint8_t i;
        uint8_t address_rev[NRF24_ADDR_SIZE];

        nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800340c:	230c      	movs	r3, #12
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	2203      	movs	r2, #3
 8003412:	0019      	movs	r1, r3
 8003414:	200a      	movs	r0, #10
 8003416:	f7ff fcf7 	bl	8002e08 <nRF24_ReadRegisters>
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800341a:	230f      	movs	r3, #15
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e010      	b.n	8003446 <nRF24_SetTXAddress+0x42>
                addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8003424:	200f      	movs	r0, #15
 8003426:	183b      	adds	r3, r7, r0
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	183b      	adds	r3, r7, r0
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2102      	movs	r1, #2
 8003430:	1acb      	subs	r3, r1, r3
 8003432:	210c      	movs	r1, #12
 8003434:	1879      	adds	r1, r7, r1
 8003436:	5c89      	ldrb	r1, [r1, r2]
 8003438:	4a1b      	ldr	r2, [pc, #108]	; (80034a8 <nRF24_SetTXAddress+0xa4>)
 800343a:	54d1      	strb	r1, [r2, r3]
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800343c:	183b      	adds	r3, r7, r0
 800343e:	781a      	ldrb	r2, [r3, #0]
 8003440:	183b      	adds	r3, r7, r0
 8003442:	3201      	adds	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	220f      	movs	r2, #15
 8003448:	18bb      	adds	r3, r7, r2
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d9e9      	bls.n	8003424 <nRF24_SetTXAddress+0x20>

        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8003450:	18bb      	adds	r3, r7, r2
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	e011      	b.n	800347c <nRF24_SetTXAddress+0x78>
                address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8003458:	200f      	movs	r0, #15
 800345a:	183b      	adds	r3, r7, r0
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	18d2      	adds	r2, r2, r3
 8003462:	183b      	adds	r3, r7, r0
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2102      	movs	r1, #2
 8003468:	1acb      	subs	r3, r1, r3
 800346a:	7811      	ldrb	r1, [r2, #0]
 800346c:	220c      	movs	r2, #12
 800346e:	18ba      	adds	r2, r7, r2
 8003470:	54d1      	strb	r1, [r2, r3]
        for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8003472:	183b      	adds	r3, r7, r0
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	183b      	adds	r3, r7, r0
 8003478:	3201      	adds	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]
 800347c:	230f      	movs	r3, #15
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d9e8      	bls.n	8003458 <nRF24_SetTXAddress+0x54>
        //make pipe 0 address backup;

        nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8003486:	240c      	movs	r4, #12
 8003488:	193b      	adds	r3, r7, r4
 800348a:	2203      	movs	r2, #3
 800348c:	0019      	movs	r1, r3
 800348e:	200a      	movs	r0, #10
 8003490:	f7ff fd14 	bl	8002ebc <nRF24_WriteRegisters>
        nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8003494:	193b      	adds	r3, r7, r4
 8003496:	2203      	movs	r2, #3
 8003498:	0019      	movs	r1, r3
 800349a:	2010      	movs	r0, #16
 800349c:	f7ff fd0e 	bl	8002ebc <nRF24_WriteRegisters>

}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b005      	add	sp, #20
 80034a6:	bd90      	pop	{r4, r7, pc}
 80034a8:	20000604 	.word	0x20000604

080034ac <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
        uint8_t status = nRF24_ReadStatus();
 80034b2:	1dfc      	adds	r4, r7, #7
 80034b4:	f7ff fddf 	bl	8003076 <nRF24_ReadStatus>
 80034b8:	0003      	movs	r3, r0
 80034ba:	7023      	strb	r3, [r4, #0]
        status |= (7<<4); // Clear bits 4, 5, 6.
 80034bc:	1dfb      	adds	r3, r7, #7
 80034be:	1dfa      	adds	r2, r7, #7
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	2170      	movs	r1, #112	; 0x70
 80034c4:	430a      	orrs	r2, r1
 80034c6:	701a      	strb	r2, [r3, #0]
        nRF24_WriteStatus(status);
 80034c8:	1dfb      	adds	r3, r7, #7
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff fddb 	bl	8003088 <nRF24_WriteStatus>
}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b003      	add	sp, #12
 80034d8:	bd90      	pop	{r4, r7, pc}

080034da <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 80034da:	b590      	push	{r4, r7, lr}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 80034e0:	1dfb      	adds	r3, r7, #7
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 80034e6:	1dfc      	adds	r4, r7, #7
 80034e8:	2060      	movs	r0, #96	; 0x60
 80034ea:	f7ff fc63 	bl	8002db4 <nRF24_ReadRegister>
 80034ee:	0003      	movs	r3, r0
 80034f0:	7023      	strb	r3, [r4, #0]

    if (result > 32) // Something went wrong :)
 80034f2:	1dfb      	adds	r3, r7, #7
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d906      	bls.n	8003508 <nRF24_GetDynamicPayloadSize+0x2e>
    {
        nRF24_FlushRX();
 80034fa:	f7ff fdd5 	bl	80030a8 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 80034fe:	2002      	movs	r0, #2
 8003500:	f7ff fc19 	bl	8002d36 <nRF24_Delay_ms>
        return 0;
 8003504:	2300      	movs	r3, #0
 8003506:	e001      	b.n	800350c <nRF24_GetDynamicPayloadSize+0x32>
    }
    return result;
 8003508:	1dfb      	adds	r3, r7, #7
 800350a:	781b      	ldrb	r3, [r3, #0]
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	b003      	add	sp, #12
 8003512:	bd90      	pop	{r4, r7, pc}

08003514 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8003514:	b5b0      	push	{r4, r5, r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	0002      	movs	r2, r0
 800351c:	1dfb      	adds	r3, r7, #7
 800351e:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 8003520:	250f      	movs	r5, #15
 8003522:	197c      	adds	r4, r7, r5
 8003524:	f7ff fd30 	bl	8002f88 <nRF24_ReadConfig>
 8003528:	0003      	movs	r3, r0
 800352a:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 800352c:	1dfb      	adds	r3, r7, #7
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d106      	bne.n	8003542 <nRF24_EnableRXDataReadyIRQ+0x2e>
                config |= (1<<NRF24_RX_DR);
 8003534:	197b      	adds	r3, r7, r5
 8003536:	197a      	adds	r2, r7, r5
 8003538:	7812      	ldrb	r2, [r2, #0]
 800353a:	2140      	movs	r1, #64	; 0x40
 800353c:	430a      	orrs	r2, r1
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e006      	b.n	8003550 <nRF24_EnableRXDataReadyIRQ+0x3c>
        else
                config &= ~(1<<NRF24_RX_DR);
 8003542:	220f      	movs	r2, #15
 8003544:	18bb      	adds	r3, r7, r2
 8003546:	18ba      	adds	r2, r7, r2
 8003548:	7812      	ldrb	r2, [r2, #0]
 800354a:	2140      	movs	r1, #64	; 0x40
 800354c:	438a      	bics	r2, r1
 800354e:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 8003550:	230f      	movs	r3, #15
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	0018      	movs	r0, r3
 8003558:	f7ff fd1f 	bl	8002f9a <nRF24_WriteConfig>
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b004      	add	sp, #16
 8003562:	bdb0      	pop	{r4, r5, r7, pc}

08003564 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8003564:	b5b0      	push	{r4, r5, r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	0002      	movs	r2, r0
 800356c:	1dfb      	adds	r3, r7, #7
 800356e:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 8003570:	250f      	movs	r5, #15
 8003572:	197c      	adds	r4, r7, r5
 8003574:	f7ff fd08 	bl	8002f88 <nRF24_ReadConfig>
 8003578:	0003      	movs	r3, r0
 800357a:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 800357c:	1dfb      	adds	r3, r7, #7
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d106      	bne.n	8003592 <nRF24_EnableTXDataSentIRQ+0x2e>
                config |= (1<<NRF24_TX_DS);
 8003584:	197b      	adds	r3, r7, r5
 8003586:	197a      	adds	r2, r7, r5
 8003588:	7812      	ldrb	r2, [r2, #0]
 800358a:	2120      	movs	r1, #32
 800358c:	430a      	orrs	r2, r1
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	e006      	b.n	80035a0 <nRF24_EnableTXDataSentIRQ+0x3c>
        else
                config &= ~(1<<NRF24_TX_DS);
 8003592:	220f      	movs	r2, #15
 8003594:	18bb      	adds	r3, r7, r2
 8003596:	18ba      	adds	r2, r7, r2
 8003598:	7812      	ldrb	r2, [r2, #0]
 800359a:	2120      	movs	r1, #32
 800359c:	438a      	bics	r2, r1
 800359e:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 80035a0:	230f      	movs	r3, #15
 80035a2:	18fb      	adds	r3, r7, r3
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	0018      	movs	r0, r3
 80035a8:	f7ff fcf7 	bl	8002f9a <nRF24_WriteConfig>
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b004      	add	sp, #16
 80035b2:	bdb0      	pop	{r4, r5, r7, pc}

080035b4 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80035b4:	b5b0      	push	{r4, r5, r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	0002      	movs	r2, r0
 80035bc:	1dfb      	adds	r3, r7, #7
 80035be:	701a      	strb	r2, [r3, #0]
        uint8_t config = nRF24_ReadConfig();
 80035c0:	250f      	movs	r5, #15
 80035c2:	197c      	adds	r4, r7, r5
 80035c4:	f7ff fce0 	bl	8002f88 <nRF24_ReadConfig>
 80035c8:	0003      	movs	r3, r0
 80035ca:	7023      	strb	r3, [r4, #0]

        if(!onoff)
 80035cc:	1dfb      	adds	r3, r7, #7
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d106      	bne.n	80035e2 <nRF24_EnableMaxRetransmitIRQ+0x2e>
                config |= (1<<NRF24_MAX_RT);
 80035d4:	197b      	adds	r3, r7, r5
 80035d6:	197a      	adds	r2, r7, r5
 80035d8:	7812      	ldrb	r2, [r2, #0]
 80035da:	2110      	movs	r1, #16
 80035dc:	430a      	orrs	r2, r1
 80035de:	701a      	strb	r2, [r3, #0]
 80035e0:	e006      	b.n	80035f0 <nRF24_EnableMaxRetransmitIRQ+0x3c>
        else
                config &= ~(1<<NRF24_MAX_RT);
 80035e2:	220f      	movs	r2, #15
 80035e4:	18bb      	adds	r3, r7, r2
 80035e6:	18ba      	adds	r2, r7, r2
 80035e8:	7812      	ldrb	r2, [r2, #0]
 80035ea:	2110      	movs	r1, #16
 80035ec:	438a      	bics	r2, r1
 80035ee:	701a      	strb	r2, [r3, #0]

        nRF24_WriteConfig(config);
 80035f0:	230f      	movs	r3, #15
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	0018      	movs	r0, r3
 80035f8:	f7ff fccf 	bl	8002f9a <nRF24_WriteConfig>
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b004      	add	sp, #16
 8003602:	bdb0      	pop	{r4, r5, r7, pc}

08003604 <nRF24_ReadRXPaylaod>:
        }while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
        *size = nRF24_GetDynamicPayloadSize();
 800360e:	f7ff ff64 	bl	80034da <nRF24_GetDynamicPayloadSize>
 8003612:	0003      	movs	r3, r0
 8003614:	001a      	movs	r2, r3
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	701a      	strb	r2, [r3, #0]
        nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	0019      	movs	r1, r3
 8003622:	2061      	movs	r0, #97	; 0x61
 8003624:	f7ff fbf0 	bl	8002e08 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
        nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
        if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
                nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b002      	add	sp, #8
 800362e:	bd80      	pop	{r7, pc}

08003630 <nRF24_RXAvailible>:
#endif
        return NRF24_RECEIVED_PACKET; //FX??
}

uint8_t nRF24_RXAvailible(void)
{
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
        uint8_t status = nRF24_ReadStatus();
 8003636:	1dfc      	adds	r4, r7, #7
 8003638:	f7ff fd1d 	bl	8003076 <nRF24_ReadStatus>
 800363c:	0003      	movs	r3, r0
 800363e:	7023      	strb	r3, [r4, #0]

        // RX FIFO Interrupt
        if ((status & (1 << 6)))
 8003640:	1dfb      	adds	r3, r7, #7
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2240      	movs	r2, #64	; 0x40
 8003646:	4013      	ands	r3, r2
 8003648:	d00f      	beq.n	800366a <nRF24_RXAvailible+0x3a>
        {
                nrf24_rx_flag = 1;
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <nRF24_RXAvailible+0x44>)
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
                status |= (1<<6); // Interrupt flag clear
 8003650:	1dfb      	adds	r3, r7, #7
 8003652:	1dfa      	adds	r2, r7, #7
 8003654:	7812      	ldrb	r2, [r2, #0]
 8003656:	2140      	movs	r1, #64	; 0x40
 8003658:	430a      	orrs	r2, r1
 800365a:	701a      	strb	r2, [r3, #0]
                nRF24_WriteStatus(status);
 800365c:	1dfb      	adds	r3, r7, #7
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	0018      	movs	r0, r3
 8003662:	f7ff fd11 	bl	8003088 <nRF24_WriteStatus>
                return 1;
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <nRF24_RXAvailible+0x3c>
        }
        return 0;
 800366a:	2300      	movs	r3, #0
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	b003      	add	sp, #12
 8003672:	bd90      	pop	{r4, r7, pc}
 8003674:	20000607 	.word	0x20000607

08003678 <nRF24_Init>:
                nrf24_mr_flag = 0;
        }
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
        hspi_nrf = hspi;
 8003680:	4b31      	ldr	r3, [pc, #196]	; (8003748 <nRF24_Init+0xd0>)
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	601a      	str	r2, [r3, #0]

        NRF24_CE_LOW;
 8003686:	4b31      	ldr	r3, [pc, #196]	; (800374c <nRF24_Init+0xd4>)
 8003688:	2200      	movs	r2, #0
 800368a:	2180      	movs	r1, #128	; 0x80
 800368c:	0018      	movs	r0, r3
 800368e:	f001 fadf 	bl	8004c50 <HAL_GPIO_WritePin>
        NRF24_CSN_HIGH;
 8003692:	4b2e      	ldr	r3, [pc, #184]	; (800374c <nRF24_Init+0xd4>)
 8003694:	2201      	movs	r2, #1
 8003696:	2140      	movs	r1, #64	; 0x40
 8003698:	0018      	movs	r0, r3
 800369a:	f001 fad9 	bl	8004c50 <HAL_GPIO_WritePin>

        nRF24_Delay_ms(5); // Wait for radio power up
 800369e:	2005      	movs	r0, #5
 80036a0:	f7ff fb49 	bl	8002d36 <nRF24_Delay_ms>

        nRF24_SetPALevel( NRF24_PA_PWR_0dBM); // Radio power NRF24_PA_PWR_0dBM
 80036a4:	2003      	movs	r0, #3
 80036a6:	f7ff fc88 	bl	8002fba <nRF24_SetPALevel>
        nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 80036aa:	2002      	movs	r0, #2
 80036ac:	f7ff fcae 	bl	800300c <nRF24_SetDataRate>
        nRF24_EnableCRC(1); // Enable CRC
 80036b0:	2001      	movs	r0, #1
 80036b2:	f7ff fd35 	bl	8003120 <nRF24_EnableCRC>
        nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B);//1==NRF24_CRC_WIDTH_2B); // CRC Length 1 byte _1B
 80036b6:	2000      	movs	r0, #0
 80036b8:	f7ff fd5a 	bl	8003170 <nRF24_SetCRCLength>
//      nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
        nRF24_SetRetries(5, 15); // 1000us, 7 times //5,15 lub 4,7
 80036bc:	210f      	movs	r1, #15
 80036be:	2005      	movs	r0, #5
 80036c0:	f7ff fd7e 	bl	80031c0 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
        nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 80036c4:	201d      	movs	r0, #29
 80036c6:	f7ff fb75 	bl	8002db4 <nRF24_ReadRegister>
 80036ca:	0003      	movs	r3, r0
 80036cc:	001a      	movs	r2, r3
 80036ce:	2304      	movs	r3, #4
 80036d0:	4313      	orrs	r3, r2
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	0019      	movs	r1, r3
 80036d6:	201d      	movs	r0, #29
 80036d8:	f7ff fbc4 	bl	8002e64 <nRF24_WriteRegister>
        nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 80036dc:	213f      	movs	r1, #63	; 0x3f
 80036de:	201c      	movs	r0, #28
 80036e0:	f7ff fbc0 	bl	8002e64 <nRF24_WriteRegister>
#else
        nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
        nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
        nRF24_SetRFChannel(0x4c); // Set RF channel for transmission 10
 80036e4:	204c      	movs	r0, #76	; 0x4c
 80036e6:	f7ff fd89 	bl	80031fc <nRF24_SetRFChannel>
        nRF24_EnablePipe(0, 1); // Enable pipe 0
 80036ea:	2101      	movs	r1, #1
 80036ec:	2000      	movs	r0, #0
 80036ee:	f7ff fd98 	bl	8003222 <nRF24_EnablePipe>
        nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80036f2:	2003      	movs	r0, #3
 80036f4:	f7ff fe1d 	bl	8003332 <nRF24_SetAddressWidth>
        nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80036f8:	2101      	movs	r1, #1
 80036fa:	2000      	movs	r0, #0
 80036fc:	f7ff fdd5 	bl	80032aa <nRF24_AutoACK>

        nRF24_WriteRegister(NRF24_RF_SETUP,0x5); //skopiowane z RPi ustawienia rejestrów
 8003700:	2105      	movs	r1, #5
 8003702:	2006      	movs	r0, #6
 8003704:	f7ff fbae 	bl	8002e64 <nRF24_WriteRegister>
        nRF24_WriteRegister(NRF24_FEATURE,0x6); //skopiowane z RPi ustawienia rejestrów (ważne, aby były te same)
 8003708:	2106      	movs	r1, #6
 800370a:	201d      	movs	r0, #29
 800370c:	f7ff fbaa 	bl	8002e64 <nRF24_WriteRegister>
        nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8003710:	2002      	movs	r0, #2
 8003712:	f7ff fc7b 	bl	800300c <nRF24_SetDataRate>
    nRF24_SetAddressWidth(3); //adres 3 znaki a nie 5
 8003716:	2003      	movs	r0, #3
 8003718:	f7ff fe0b 	bl	8003332 <nRF24_SetAddressWidth>

        nRF24_Delay_ms(1);
 800371c:	2001      	movs	r0, #1
 800371e:	f7ff fb0a 	bl	8002d36 <nRF24_Delay_ms>

        nRF24_EnableRXDataReadyIRQ(1); //receiver irq
 8003722:	2001      	movs	r0, #1
 8003724:	f7ff fef6 	bl	8003514 <nRF24_EnableRXDataReadyIRQ>
        nRF24_EnableTXDataSentIRQ(0);
 8003728:	2000      	movs	r0, #0
 800372a:	f7ff ff1b 	bl	8003564 <nRF24_EnableTXDataSentIRQ>
        nRF24_EnableMaxRetransmitIRQ(0);
 800372e:	2000      	movs	r0, #0
 8003730:	f7ff ff40 	bl	80035b4 <nRF24_EnableMaxRetransmitIRQ>

        nRF24_Delay_ms(1);
 8003734:	2001      	movs	r0, #1
 8003736:	f7ff fafe 	bl	8002d36 <nRF24_Delay_ms>

        nRF24_ClearInterrupts();
 800373a:	f7ff feb7 	bl	80034ac <nRF24_ClearInterrupts>
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b002      	add	sp, #8
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	20000600 	.word	0x20000600
 800374c:	50000800 	.word	0x50000800

08003750 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003754:	4b17      	ldr	r3, [pc, #92]	; (80037b4 <MX_SPI1_Init+0x64>)
 8003756:	4a18      	ldr	r2, [pc, #96]	; (80037b8 <MX_SPI1_Init+0x68>)
 8003758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800375a:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <MX_SPI1_Init+0x64>)
 800375c:	2282      	movs	r2, #130	; 0x82
 800375e:	0052      	lsls	r2, r2, #1
 8003760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003762:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <MX_SPI1_Init+0x64>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003768:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <MX_SPI1_Init+0x64>)
 800376a:	2200      	movs	r2, #0
 800376c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <MX_SPI1_Init+0x64>)
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003774:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <MX_SPI1_Init+0x64>)
 8003776:	2200      	movs	r2, #0
 8003778:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800377a:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <MX_SPI1_Init+0x64>)
 800377c:	2200      	movs	r2, #0
 800377e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <MX_SPI1_Init+0x64>)
 8003782:	2218      	movs	r2, #24
 8003784:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003786:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <MX_SPI1_Init+0x64>)
 8003788:	2200      	movs	r2, #0
 800378a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800378c:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <MX_SPI1_Init+0x64>)
 800378e:	2200      	movs	r2, #0
 8003790:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <MX_SPI1_Init+0x64>)
 8003794:	2200      	movs	r2, #0
 8003796:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <MX_SPI1_Init+0x64>)
 800379a:	2207      	movs	r2, #7
 800379c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <MX_SPI1_Init+0x64>)
 80037a0:	0018      	movs	r0, r3
 80037a2:	f002 fb57 	bl	8005e54 <HAL_SPI_Init>
 80037a6:	1e03      	subs	r3, r0, #0
 80037a8:	d001      	beq.n	80037ae <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80037aa:	f7ff fabf 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000608 	.word	0x20000608
 80037b8:	40013000 	.word	0x40013000

080037bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b08b      	sub	sp, #44	; 0x2c
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c4:	2414      	movs	r4, #20
 80037c6:	193b      	adds	r3, r7, r4
 80037c8:	0018      	movs	r0, r3
 80037ca:	2314      	movs	r3, #20
 80037cc:	001a      	movs	r2, r3
 80037ce:	2100      	movs	r1, #0
 80037d0:	f006 ffb8 	bl	800a744 <memset>
  if(spiHandle->Instance==SPI1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a28      	ldr	r2, [pc, #160]	; (800387c <HAL_SPI_MspInit+0xc0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d14a      	bne.n	8003874 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037de:	4b28      	ldr	r3, [pc, #160]	; (8003880 <HAL_SPI_MspInit+0xc4>)
 80037e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e2:	4b27      	ldr	r3, [pc, #156]	; (8003880 <HAL_SPI_MspInit+0xc4>)
 80037e4:	2180      	movs	r1, #128	; 0x80
 80037e6:	0149      	lsls	r1, r1, #5
 80037e8:	430a      	orrs	r2, r1
 80037ea:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ec:	4b24      	ldr	r3, [pc, #144]	; (8003880 <HAL_SPI_MspInit+0xc4>)
 80037ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f0:	4b23      	ldr	r3, [pc, #140]	; (8003880 <HAL_SPI_MspInit+0xc4>)
 80037f2:	2101      	movs	r1, #1
 80037f4:	430a      	orrs	r2, r1
 80037f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80037f8:	4b21      	ldr	r3, [pc, #132]	; (8003880 <HAL_SPI_MspInit+0xc4>)
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	2201      	movs	r2, #1
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003804:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <HAL_SPI_MspInit+0xc4>)
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_SPI_MspInit+0xc4>)
 800380a:	2102      	movs	r1, #2
 800380c:	430a      	orrs	r2, r1
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003810:	4b1b      	ldr	r3, [pc, #108]	; (8003880 <HAL_SPI_MspInit+0xc4>)
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	2202      	movs	r2, #2
 8003816:	4013      	ands	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800381c:	193b      	adds	r3, r7, r4
 800381e:	22d0      	movs	r2, #208	; 0xd0
 8003820:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003822:	193b      	adds	r3, r7, r4
 8003824:	2202      	movs	r2, #2
 8003826:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	193b      	adds	r3, r7, r4
 800382a:	2200      	movs	r2, #0
 800382c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800382e:	193b      	adds	r3, r7, r4
 8003830:	2203      	movs	r2, #3
 8003832:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003834:	193b      	adds	r3, r7, r4
 8003836:	2200      	movs	r2, #0
 8003838:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383a:	193a      	adds	r2, r7, r4
 800383c:	23a0      	movs	r3, #160	; 0xa0
 800383e:	05db      	lsls	r3, r3, #23
 8003840:	0011      	movs	r1, r2
 8003842:	0018      	movs	r0, r3
 8003844:	f001 f88e 	bl	8004964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003848:	0021      	movs	r1, r4
 800384a:	187b      	adds	r3, r7, r1
 800384c:	2208      	movs	r2, #8
 800384e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003850:	187b      	adds	r3, r7, r1
 8003852:	2202      	movs	r2, #2
 8003854:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	187b      	adds	r3, r7, r1
 8003858:	2200      	movs	r2, #0
 800385a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800385c:	187b      	adds	r3, r7, r1
 800385e:	2203      	movs	r2, #3
 8003860:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003862:	187b      	adds	r3, r7, r1
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003868:	187b      	adds	r3, r7, r1
 800386a:	4a06      	ldr	r2, [pc, #24]	; (8003884 <HAL_SPI_MspInit+0xc8>)
 800386c:	0019      	movs	r1, r3
 800386e:	0010      	movs	r0, r2
 8003870:	f001 f878 	bl	8004964 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b00b      	add	sp, #44	; 0x2c
 800387a:	bd90      	pop	{r4, r7, pc}
 800387c:	40013000 	.word	0x40013000
 8003880:	40021000 	.word	0x40021000
 8003884:	50000400 	.word	0x50000400

08003888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <HAL_MspInit+0x24>)
 800388e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_MspInit+0x24>)
 8003892:	2101      	movs	r1, #1
 8003894:	430a      	orrs	r2, r1
 8003896:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <HAL_MspInit+0x24>)
 800389a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_MspInit+0x24>)
 800389e:	2180      	movs	r1, #128	; 0x80
 80038a0:	0549      	lsls	r1, r1, #21
 80038a2:	430a      	orrs	r2, r1
 80038a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000

080038b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038b4:	e7fe      	b.n	80038b4 <NMI_Handler+0x4>

080038b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ba:	e7fe      	b.n	80038ba <HardFault_Handler+0x4>

080038bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038d4:	f000 fb46 	bl	8003f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	0018      	movs	r0, r3
 80038e8:	f001 f9ea 	bl	8004cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	019b      	lsls	r3, r3, #6
 80038f0:	0018      	movs	r0, r3
 80038f2:	f001 f9e5 	bl	8004cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <DMA1_Channel1_IRQHandler+0x14>)
 8003902:	0018      	movs	r0, r3
 8003904:	f000 ff7f 	bl	8004806 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	20000254 	.word	0x20000254

08003914 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <TIM6_DAC_IRQHandler+0x14>)
 800391a:	0018      	movs	r0, r3
 800391c:	f003 f950 	bl	8006bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003920:	46c0      	nop			; (mov r8, r8)
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	20000664 	.word	0x20000664

0800392c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003930:	4b03      	ldr	r3, [pc, #12]	; (8003940 <USART1_IRQHandler+0x14>)
 8003932:	0018      	movs	r0, r3
 8003934:	f003 fcba 	bl	80072ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	2000072c 	.word	0x2000072c

08003944 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <USART2_IRQHandler+0x14>)
 800394a:	0018      	movs	r0, r3
 800394c:	f003 fcae 	bl	80072ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	200007b4 	.word	0x200007b4

0800395c <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <RNG_LPUART1_IRQHandler+0x14>)
 8003962:	0018      	movs	r0, r3
 8003964:	f003 fca2 	bl	80072ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	200006a4 	.word	0x200006a4

08003974 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  return 1;
 8003978:	2301      	movs	r3, #1
}
 800397a:	0018      	movs	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <_kill>:

int _kill(int pid, int sig)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800398a:	f006 ff47 	bl	800a81c <__errno>
 800398e:	0003      	movs	r3, r0
 8003990:	2216      	movs	r2, #22
 8003992:	601a      	str	r2, [r3, #0]
  return -1;
 8003994:	2301      	movs	r3, #1
 8003996:	425b      	negs	r3, r3
}
 8003998:	0018      	movs	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	b002      	add	sp, #8
 800399e:	bd80      	pop	{r7, pc}

080039a0 <_exit>:

void _exit (int status)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039a8:	2301      	movs	r3, #1
 80039aa:	425a      	negs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	0011      	movs	r1, r2
 80039b0:	0018      	movs	r0, r3
 80039b2:	f7ff ffe5 	bl	8003980 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039b6:	e7fe      	b.n	80039b6 <_exit+0x16>

080039b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	e00a      	b.n	80039e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039ca:	e000      	b.n	80039ce <_read+0x16>
 80039cc:	bf00      	nop
 80039ce:	0001      	movs	r1, r0
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	60ba      	str	r2, [r7, #8]
 80039d6:	b2ca      	uxtb	r2, r1
 80039d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	3301      	adds	r3, #1
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	dbf0      	blt.n	80039ca <_read+0x12>
  }

  return len;
 80039e8:	687b      	ldr	r3, [r7, #4]
}
 80039ea:	0018      	movs	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b006      	add	sp, #24
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e009      	b.n	8003a18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	60ba      	str	r2, [r7, #8]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f7ff f843 	bl	8002a98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	3301      	adds	r3, #1
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	dbf1      	blt.n	8003a04 <_write+0x12>
  }
  return len;
 8003a20:	687b      	ldr	r3, [r7, #4]
}
 8003a22:	0018      	movs	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b006      	add	sp, #24
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <_close>:

int _close(int file)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a32:	2301      	movs	r3, #1
 8003a34:	425b      	negs	r3, r3
}
 8003a36:	0018      	movs	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b002      	add	sp, #8
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2280      	movs	r2, #128	; 0x80
 8003a4c:	0192      	lsls	r2, r2, #6
 8003a4e:	605a      	str	r2, [r3, #4]
  return 0;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	0018      	movs	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b002      	add	sp, #8
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <_isatty>:

int _isatty(int file)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a62:	2301      	movs	r3, #1
}
 8003a64:	0018      	movs	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b002      	add	sp, #8
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b004      	add	sp, #16
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <_sbrk+0x5c>)
 8003a8e:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <_sbrk+0x60>)
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a98:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <_sbrk+0x64>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <_sbrk+0x64>)
 8003aa2:	4a12      	ldr	r2, [pc, #72]	; (8003aec <_sbrk+0x68>)
 8003aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <_sbrk+0x64>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	18d3      	adds	r3, r2, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d207      	bcs.n	8003ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ab4:	f006 feb2 	bl	800a81c <__errno>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	220c      	movs	r2, #12
 8003abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	425b      	negs	r3, r3
 8003ac2:	e009      	b.n	8003ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ac4:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <_sbrk+0x64>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aca:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <_sbrk+0x64>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	18d2      	adds	r2, r2, r3
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <_sbrk+0x64>)
 8003ad4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b006      	add	sp, #24
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20002000 	.word	0x20002000
 8003ae4:	00000400 	.word	0x00000400
 8003ae8:	20000660 	.word	0x20000660
 8003aec:	20000990 	.word	0x20000990

08003af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b02:	003b      	movs	r3, r7
 8003b04:	0018      	movs	r0, r3
 8003b06:	2308      	movs	r3, #8
 8003b08:	001a      	movs	r2, r3
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	f006 fe1a 	bl	800a744 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003b10:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <MX_TIM6_Init+0x6c>)
 8003b12:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <MX_TIM6_Init+0x70>)
 8003b14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 8003b16:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <MX_TIM6_Init+0x6c>)
 8003b18:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <MX_TIM6_Init+0x74>)
 8003b1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b1c:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <MX_TIM6_Init+0x6c>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <MX_TIM6_Init+0x6c>)
 8003b24:	4a13      	ldr	r2, [pc, #76]	; (8003b74 <MX_TIM6_Init+0x78>)
 8003b26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b28:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <MX_TIM6_Init+0x6c>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <MX_TIM6_Init+0x6c>)
 8003b30:	0018      	movs	r0, r3
 8003b32:	f002 ffb9 	bl	8006aa8 <HAL_TIM_Base_Init>
 8003b36:	1e03      	subs	r3, r0, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003b3a:	f7ff f8f7 	bl	8002d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b3e:	003b      	movs	r3, r7
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b44:	003b      	movs	r3, r7
 8003b46:	2200      	movs	r2, #0
 8003b48:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003b4a:	003a      	movs	r2, r7
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <MX_TIM6_Init+0x6c>)
 8003b4e:	0011      	movs	r1, r2
 8003b50:	0018      	movs	r0, r3
 8003b52:	f003 f991 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 8003b56:	1e03      	subs	r3, r0, #0
 8003b58:	d001      	beq.n	8003b5e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003b5a:	f7ff f8e7 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b002      	add	sp, #8
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	20000664 	.word	0x20000664
 8003b6c:	40001000 	.word	0x40001000
 8003b70:	00000c7f 	.word	0x00000c7f
 8003b74:	0000270f 	.word	0x0000270f

08003b78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <HAL_TIM_Base_MspInit+0x38>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10d      	bne.n	8003ba6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <HAL_TIM_Base_MspInit+0x3c>)
 8003b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_TIM_Base_MspInit+0x3c>)
 8003b90:	2110      	movs	r1, #16
 8003b92:	430a      	orrs	r2, r1
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2103      	movs	r1, #3
 8003b9a:	2011      	movs	r0, #17
 8003b9c:	f000 fd02 	bl	80045a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ba0:	2011      	movs	r0, #17
 8003ba2:	f000 fd14 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b002      	add	sp, #8
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	40001000 	.word	0x40001000
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003bbc:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <MX_LPUART1_UART_Init+0x5c>)
 8003bbe:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <MX_LPUART1_UART_Init+0x60>)
 8003bc0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <MX_LPUART1_UART_Init+0x5c>)
 8003bc4:	2296      	movs	r2, #150	; 0x96
 8003bc6:	0192      	lsls	r2, r2, #6
 8003bc8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bca:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <MX_LPUART1_UART_Init+0x5c>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003bd0:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <MX_LPUART1_UART_Init+0x5c>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003bd6:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <MX_LPUART1_UART_Init+0x5c>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <MX_LPUART1_UART_Init+0x5c>)
 8003bde:	220c      	movs	r2, #12
 8003be0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003be2:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <MX_LPUART1_UART_Init+0x5c>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003be8:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <MX_LPUART1_UART_Init+0x5c>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <MX_LPUART1_UART_Init+0x5c>)
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003bf4:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <MX_LPUART1_UART_Init+0x5c>)
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	0152      	lsls	r2, r2, #5
 8003bfa:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <MX_LPUART1_UART_Init+0x5c>)
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f003 f992 	bl	8006f28 <HAL_UART_Init>
 8003c04:	1e03      	subs	r3, r0, #0
 8003c06:	d001      	beq.n	8003c0c <MX_LPUART1_UART_Init+0x54>
  {
    Error_Handler();
 8003c08:	f7ff f890 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	200006a4 	.word	0x200006a4
 8003c18:	40004800 	.word	0x40004800

08003c1c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c20:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <MX_USART1_UART_Init+0x60>)
 8003c22:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <MX_USART1_UART_Init+0x64>)
 8003c24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <MX_USART1_UART_Init+0x60>)
 8003c28:	2296      	movs	r2, #150	; 0x96
 8003c2a:	0192      	lsls	r2, r2, #6
 8003c2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c2e:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <MX_USART1_UART_Init+0x60>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c34:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <MX_USART1_UART_Init+0x60>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <MX_USART1_UART_Init+0x60>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <MX_USART1_UART_Init+0x60>)
 8003c42:	2204      	movs	r2, #4
 8003c44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <MX_USART1_UART_Init+0x60>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <MX_USART1_UART_Init+0x60>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c52:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <MX_USART1_UART_Init+0x60>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003c58:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <MX_USART1_UART_Init+0x60>)
 8003c5a:	2210      	movs	r2, #16
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003c5e:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <MX_USART1_UART_Init+0x60>)
 8003c60:	2280      	movs	r2, #128	; 0x80
 8003c62:	0152      	lsls	r2, r2, #5
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c66:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <MX_USART1_UART_Init+0x60>)
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f003 f95d 	bl	8006f28 <HAL_UART_Init>
 8003c6e:	1e03      	subs	r3, r0, #0
 8003c70:	d001      	beq.n	8003c76 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003c72:	f7ff f85b 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	2000072c 	.word	0x2000072c
 8003c80:	40013800 	.word	0x40013800

08003c84 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003c88:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <MX_USART2_UART_Init+0x58>)
 8003c8a:	4a15      	ldr	r2, [pc, #84]	; (8003ce0 <MX_USART2_UART_Init+0x5c>)
 8003c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003c8e:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <MX_USART2_UART_Init+0x58>)
 8003c90:	2296      	movs	r2, #150	; 0x96
 8003c92:	0192      	lsls	r2, r2, #6
 8003c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c96:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <MX_USART2_UART_Init+0x58>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <MX_USART2_UART_Init+0x58>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <MX_USART2_UART_Init+0x58>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <MX_USART2_UART_Init+0x58>)
 8003caa:	220c      	movs	r2, #12
 8003cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cae:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <MX_USART2_UART_Init+0x58>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cb4:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <MX_USART2_UART_Init+0x58>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <MX_USART2_UART_Init+0x58>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <MX_USART2_UART_Init+0x58>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003cc6:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <MX_USART2_UART_Init+0x58>)
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f003 f92d 	bl	8006f28 <HAL_UART_Init>
 8003cce:	1e03      	subs	r3, r0, #0
 8003cd0:	d001      	beq.n	8003cd6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003cd2:	f7ff f82b 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	200007b4 	.word	0x200007b4
 8003ce0:	40004400 	.word	0x40004400

08003ce4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b08b      	sub	sp, #44	; 0x2c
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cec:	2414      	movs	r4, #20
 8003cee:	193b      	adds	r3, r7, r4
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	2314      	movs	r3, #20
 8003cf4:	001a      	movs	r2, r3
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	f006 fd24 	bl	800a744 <memset>
  if(uartHandle->Instance==LPUART1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a54      	ldr	r2, [pc, #336]	; (8003e54 <HAL_UART_MspInit+0x170>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d131      	bne.n	8003d6a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003d06:	4b54      	ldr	r3, [pc, #336]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d0a:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003d0c:	2180      	movs	r1, #128	; 0x80
 8003d0e:	02c9      	lsls	r1, r1, #11
 8003d10:	430a      	orrs	r2, r1
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d14:	4b50      	ldr	r3, [pc, #320]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d18:	4b4f      	ldr	r3, [pc, #316]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003d1a:	2104      	movs	r1, #4
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d20:	4b4d      	ldr	r3, [pc, #308]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	2204      	movs	r2, #4
 8003d26:	4013      	ands	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PC4     ------> LPUART1_TX
    PC5     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003d2c:	0021      	movs	r1, r4
 8003d2e:	187b      	adds	r3, r7, r1
 8003d30:	2230      	movs	r2, #48	; 0x30
 8003d32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d34:	187b      	adds	r3, r7, r1
 8003d36:	2202      	movs	r2, #2
 8003d38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	187b      	adds	r3, r7, r1
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	2203      	movs	r2, #3
 8003d44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_LPUART1;
 8003d46:	187b      	adds	r3, r7, r1
 8003d48:	2202      	movs	r2, #2
 8003d4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	4a43      	ldr	r2, [pc, #268]	; (8003e5c <HAL_UART_MspInit+0x178>)
 8003d50:	0019      	movs	r1, r3
 8003d52:	0010      	movs	r0, r2
 8003d54:	f000 fe06 	bl	8004964 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	201d      	movs	r0, #29
 8003d5e:	f000 fc21 	bl	80045a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8003d62:	201d      	movs	r0, #29
 8003d64:	f000 fc33 	bl	80045ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003d68:	e06f      	b.n	8003e4a <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a3c      	ldr	r2, [pc, #240]	; (8003e60 <HAL_UART_MspInit+0x17c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d133      	bne.n	8003ddc <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d74:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d78:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	01c9      	lsls	r1, r1, #7
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d82:	4b35      	ldr	r3, [pc, #212]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d86:	4b34      	ldr	r3, [pc, #208]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003d88:	2101      	movs	r1, #1
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d8e:	4b32      	ldr	r3, [pc, #200]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	2201      	movs	r2, #1
 8003d94:	4013      	ands	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d9a:	2114      	movs	r1, #20
 8003d9c:	187b      	adds	r3, r7, r1
 8003d9e:	22c0      	movs	r2, #192	; 0xc0
 8003da0:	00d2      	lsls	r2, r2, #3
 8003da2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da4:	187b      	adds	r3, r7, r1
 8003da6:	2202      	movs	r2, #2
 8003da8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003daa:	187b      	adds	r3, r7, r1
 8003dac:	2200      	movs	r2, #0
 8003dae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db0:	187b      	adds	r3, r7, r1
 8003db2:	2203      	movs	r2, #3
 8003db4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003db6:	187b      	adds	r3, r7, r1
 8003db8:	2204      	movs	r2, #4
 8003dba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dbc:	187a      	adds	r2, r7, r1
 8003dbe:	23a0      	movs	r3, #160	; 0xa0
 8003dc0:	05db      	lsls	r3, r3, #23
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f000 fdcd 	bl	8004964 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2100      	movs	r1, #0
 8003dce:	201b      	movs	r0, #27
 8003dd0:	f000 fbe8 	bl	80045a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003dd4:	201b      	movs	r0, #27
 8003dd6:	f000 fbfa 	bl	80045ce <HAL_NVIC_EnableIRQ>
}
 8003dda:	e036      	b.n	8003e4a <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a20      	ldr	r2, [pc, #128]	; (8003e64 <HAL_UART_MspInit+0x180>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d131      	bne.n	8003e4a <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003de6:	4b1c      	ldr	r3, [pc, #112]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dea:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003dec:	2180      	movs	r1, #128	; 0x80
 8003dee:	0289      	lsls	r1, r1, #10
 8003df0:	430a      	orrs	r2, r1
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df4:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e00:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <HAL_UART_MspInit+0x174>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	2201      	movs	r2, #1
 8003e06:	4013      	ands	r3, r2
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003e0c:	2114      	movs	r1, #20
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	220c      	movs	r2, #12
 8003e12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	2202      	movs	r2, #2
 8003e18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1a:	187b      	adds	r3, r7, r1
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	2203      	movs	r2, #3
 8003e24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	2204      	movs	r2, #4
 8003e2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e2c:	187a      	adds	r2, r7, r1
 8003e2e:	23a0      	movs	r3, #160	; 0xa0
 8003e30:	05db      	lsls	r3, r3, #23
 8003e32:	0011      	movs	r1, r2
 8003e34:	0018      	movs	r0, r3
 8003e36:	f000 fd95 	bl	8004964 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	201c      	movs	r0, #28
 8003e40:	f000 fbb0 	bl	80045a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e44:	201c      	movs	r0, #28
 8003e46:	f000 fbc2 	bl	80045ce <HAL_NVIC_EnableIRQ>
}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b00b      	add	sp, #44	; 0x2c
 8003e50:	bd90      	pop	{r4, r7, pc}
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	40004800 	.word	0x40004800
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	50000800 	.word	0x50000800
 8003e60:	40013800 	.word	0x40013800
 8003e64:	40004400 	.word	0x40004400

08003e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003e68:	480d      	ldr	r0, [pc, #52]	; (8003ea0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e6a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e6c:	f7ff fe40 	bl	8003af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e70:	480c      	ldr	r0, [pc, #48]	; (8003ea4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e72:	490d      	ldr	r1, [pc, #52]	; (8003ea8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e74:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <LoopForever+0xe>)
  movs r3, #0
 8003e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e78:	e002      	b.n	8003e80 <LoopCopyDataInit>

08003e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e7e:	3304      	adds	r3, #4

08003e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e84:	d3f9      	bcc.n	8003e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e86:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e88:	4c0a      	ldr	r4, [pc, #40]	; (8003eb4 <LoopForever+0x16>)
  movs r3, #0
 8003e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e8c:	e001      	b.n	8003e92 <LoopFillZerobss>

08003e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e90:	3204      	adds	r2, #4

08003e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e94:	d3fb      	bcc.n	8003e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e96:	f006 fcc7 	bl	800a828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e9a:	f7fe fe5d 	bl	8002b58 <main>

08003e9e <LoopForever>:

LoopForever:
    b LoopForever
 8003e9e:	e7fe      	b.n	8003e9e <LoopForever>
  ldr   r0, =_estack
 8003ea0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ea8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003eac:	0800d774 	.word	0x0800d774
  ldr r2, =_sbss
 8003eb0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003eb4:	2000098c 	.word	0x2000098c

08003eb8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003eb8:	e7fe      	b.n	8003eb8 <ADC1_COMP_IRQHandler>
	...

08003ebc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ec2:	1dfb      	adds	r3, r7, #7
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_Init+0x3c>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_Init+0x3c>)
 8003ece:	2140      	movs	r1, #64	; 0x40
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f000 f811 	bl	8003efc <HAL_InitTick>
 8003eda:	1e03      	subs	r3, r0, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003ede:	1dfb      	adds	r3, r7, #7
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e001      	b.n	8003eea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ee6:	f7ff fccf 	bl	8003888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003eea:	1dfb      	adds	r3, r7, #7
 8003eec:	781b      	ldrb	r3, [r3, #0]
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b002      	add	sp, #8
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	40022000 	.word	0x40022000

08003efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f04:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <HAL_InitTick+0x5c>)
 8003f06:	681c      	ldr	r4, [r3, #0]
 8003f08:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <HAL_InitTick+0x60>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	23fa      	movs	r3, #250	; 0xfa
 8003f10:	0098      	lsls	r0, r3, #2
 8003f12:	f7fc f915 	bl	8000140 <__udivsi3>
 8003f16:	0003      	movs	r3, r0
 8003f18:	0019      	movs	r1, r3
 8003f1a:	0020      	movs	r0, r4
 8003f1c:	f7fc f910 	bl	8000140 <__udivsi3>
 8003f20:	0003      	movs	r3, r0
 8003f22:	0018      	movs	r0, r3
 8003f24:	f000 fb63 	bl	80045ee <HAL_SYSTICK_Config>
 8003f28:	1e03      	subs	r3, r0, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e00f      	b.n	8003f50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d80b      	bhi.n	8003f4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	2301      	movs	r3, #1
 8003f3a:	425b      	negs	r3, r3
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 fb30 	bl	80045a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_InitTick+0x64>)
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e000      	b.n	8003f50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
}
 8003f50:	0018      	movs	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b003      	add	sp, #12
 8003f56:	bd90      	pop	{r4, r7, pc}
 8003f58:	20000000 	.word	0x20000000
 8003f5c:	20000008 	.word	0x20000008
 8003f60:	20000004 	.word	0x20000004

08003f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_IncTick+0x1c>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_IncTick+0x20>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	18d2      	adds	r2, r2, r3
 8003f74:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <HAL_IncTick+0x20>)
 8003f76:	601a      	str	r2, [r3, #0]
}
 8003f78:	46c0      	nop			; (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	20000008 	.word	0x20000008
 8003f84:	2000083c 	.word	0x2000083c

08003f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f8c:	4b02      	ldr	r3, [pc, #8]	; (8003f98 <HAL_GetTick+0x10>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
}
 8003f90:	0018      	movs	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	2000083c 	.word	0x2000083c

08003f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fa4:	f7ff fff0 	bl	8003f88 <HAL_GetTick>
 8003fa8:	0003      	movs	r3, r0
 8003faa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	d005      	beq.n	8003fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <HAL_Delay+0x44>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	001a      	movs	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	189b      	adds	r3, r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	f7ff ffe0 	bl	8003f88 <HAL_GetTick>
 8003fc8:	0002      	movs	r2, r0
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d8f7      	bhi.n	8003fc4 <HAL_Delay+0x28>
  {
  }
}
 8003fd4:	46c0      	nop			; (mov r8, r8)
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b004      	add	sp, #16
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	20000008 	.word	0x20000008

08003fe4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e159      	b.n	80042aa <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2250      	movs	r2, #80	; 0x50
 8004008:	2100      	movs	r1, #0
 800400a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	0018      	movs	r0, r3
 8004010:	f7fe fb94 	bl	800273c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	2210      	movs	r2, #16
 800401a:	4013      	ands	r3, r2
 800401c:	2b10      	cmp	r3, #16
 800401e:	d005      	beq.n	800402c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2204      	movs	r2, #4
 8004028:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800402a:	d00b      	beq.n	8004044 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004030:	2210      	movs	r2, #16
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2250      	movs	r2, #80	; 0x50
 800403c:	2100      	movs	r1, #0
 800403e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e132      	b.n	80042aa <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	4a9a      	ldr	r2, [pc, #616]	; (80042b4 <HAL_ADC_Init+0x2d0>)
 800404a:	4013      	ands	r3, r2
 800404c:	2202      	movs	r2, #2
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2203      	movs	r2, #3
 800405c:	4013      	ands	r3, r2
 800405e:	2b01      	cmp	r3, #1
 8004060:	d108      	bne.n	8004074 <HAL_ADC_Init+0x90>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2201      	movs	r2, #1
 800406a:	4013      	ands	r3, r2
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_ADC_Init+0x90>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <HAL_ADC_Init+0x92>
 8004074:	2300      	movs	r3, #0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d149      	bne.n	800410e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	23c0      	movs	r3, #192	; 0xc0
 8004080:	061b      	lsls	r3, r3, #24
 8004082:	429a      	cmp	r2, r3
 8004084:	d00b      	beq.n	800409e <HAL_ADC_Init+0xba>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	2380      	movs	r3, #128	; 0x80
 800408c:	05db      	lsls	r3, r3, #23
 800408e:	429a      	cmp	r2, r3
 8004090:	d005      	beq.n	800409e <HAL_ADC_Init+0xba>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	2380      	movs	r3, #128	; 0x80
 8004098:	061b      	lsls	r3, r3, #24
 800409a:	429a      	cmp	r2, r3
 800409c:	d111      	bne.n	80040c2 <HAL_ADC_Init+0xde>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	0092      	lsls	r2, r2, #2
 80040aa:	0892      	lsrs	r2, r2, #2
 80040ac:	611a      	str	r2, [r3, #16]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6919      	ldr	r1, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	611a      	str	r2, [r3, #16]
 80040c0:	e014      	b.n	80040ec <HAL_ADC_Init+0x108>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	0092      	lsls	r2, r2, #2
 80040ce:	0892      	lsrs	r2, r2, #2
 80040d0:	611a      	str	r2, [r3, #16]
 80040d2:	4b79      	ldr	r3, [pc, #484]	; (80042b8 <HAL_ADC_Init+0x2d4>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4b78      	ldr	r3, [pc, #480]	; (80042b8 <HAL_ADC_Init+0x2d4>)
 80040d8:	4978      	ldr	r1, [pc, #480]	; (80042bc <HAL_ADC_Init+0x2d8>)
 80040da:	400a      	ands	r2, r1
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	4b76      	ldr	r3, [pc, #472]	; (80042b8 <HAL_ADC_Init+0x2d4>)
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	4b74      	ldr	r3, [pc, #464]	; (80042b8 <HAL_ADC_Init+0x2d4>)
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2118      	movs	r1, #24
 80040f8:	438a      	bics	r2, r1
 80040fa:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68d9      	ldr	r1, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800410e:	4b6a      	ldr	r3, [pc, #424]	; (80042b8 <HAL_ADC_Init+0x2d4>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	4b69      	ldr	r3, [pc, #420]	; (80042b8 <HAL_ADC_Init+0x2d4>)
 8004114:	496a      	ldr	r1, [pc, #424]	; (80042c0 <HAL_ADC_Init+0x2dc>)
 8004116:	400a      	ands	r2, r1
 8004118:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800411a:	4b67      	ldr	r3, [pc, #412]	; (80042b8 <HAL_ADC_Init+0x2d4>)
 800411c:	6819      	ldr	r1, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004122:	065a      	lsls	r2, r3, #25
 8004124:	4b64      	ldr	r3, [pc, #400]	; (80042b8 <HAL_ADC_Init+0x2d4>)
 8004126:	430a      	orrs	r2, r1
 8004128:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	055b      	lsls	r3, r3, #21
 8004134:	4013      	ands	r3, r2
 8004136:	d108      	bne.n	800414a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2180      	movs	r1, #128	; 0x80
 8004144:	0549      	lsls	r1, r1, #21
 8004146:	430a      	orrs	r2, r1
 8004148:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	495b      	ldr	r1, [pc, #364]	; (80042c4 <HAL_ADC_Init+0x2e0>)
 8004156:	400a      	ands	r2, r1
 8004158:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68d9      	ldr	r1, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d101      	bne.n	8004170 <HAL_ADC_Init+0x18c>
 800416c:	2304      	movs	r3, #4
 800416e:	e000      	b.n	8004172 <HAL_ADC_Init+0x18e>
 8004170:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004172:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2020      	movs	r0, #32
 8004178:	5c1b      	ldrb	r3, [r3, r0]
 800417a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800417c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	202c      	movs	r0, #44	; 0x2c
 8004182:	5c1b      	ldrb	r3, [r3, r0]
 8004184:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004186:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800418c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004194:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800419c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041aa:	23c2      	movs	r3, #194	; 0xc2
 80041ac:	33ff      	adds	r3, #255	; 0xff
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d00b      	beq.n	80041ca <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68d9      	ldr	r1, [r3, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2221      	movs	r2, #33	; 0x21
 80041ce:	5c9b      	ldrb	r3, [r3, r2]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d11a      	bne.n	800420a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	5c9b      	ldrb	r3, [r3, r2]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2180      	movs	r1, #128	; 0x80
 80041ea:	0249      	lsls	r1, r1, #9
 80041ec:	430a      	orrs	r2, r1
 80041ee:	60da      	str	r2, [r3, #12]
 80041f0:	e00b      	b.n	800420a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f6:	2220      	movs	r2, #32
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	2201      	movs	r2, #1
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420e:	2b01      	cmp	r3, #1
 8004210:	d11f      	bne.n	8004252 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	492a      	ldr	r1, [pc, #168]	; (80042c8 <HAL_ADC_Init+0x2e4>)
 800421e:	400a      	ands	r2, r1
 8004220:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6919      	ldr	r1, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004230:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8004236:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2101      	movs	r1, #1
 800424c:	430a      	orrs	r2, r1
 800424e:	611a      	str	r2, [r3, #16]
 8004250:	e00e      	b.n	8004270 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2201      	movs	r2, #1
 800425a:	4013      	ands	r3, r2
 800425c:	2b01      	cmp	r3, #1
 800425e:	d107      	bne.n	8004270 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2101      	movs	r1, #1
 800426c:	438a      	bics	r2, r1
 800426e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2107      	movs	r1, #7
 800427c:	438a      	bics	r2, r1
 800427e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6959      	ldr	r1, [r3, #20]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429c:	2203      	movs	r2, #3
 800429e:	4393      	bics	r3, r2
 80042a0:	2201      	movs	r2, #1
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	0018      	movs	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b002      	add	sp, #8
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	fffffefd 	.word	0xfffffefd
 80042b8:	40012708 	.word	0x40012708
 80042bc:	ffc3ffff 	.word	0xffc3ffff
 80042c0:	fdffffff 	.word	0xfdffffff
 80042c4:	fffe0219 	.word	0xfffe0219
 80042c8:	fffffc03 	.word	0xfffffc03

080042cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2250      	movs	r2, #80	; 0x50
 80042da:	5c9b      	ldrb	r3, [r3, r2]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x18>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e085      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x124>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2250      	movs	r2, #80	; 0x50
 80042e8:	2101      	movs	r1, #1
 80042ea:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2204      	movs	r2, #4
 80042f4:	4013      	ands	r3, r2
 80042f6:	d00b      	beq.n	8004310 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	2220      	movs	r2, #32
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2250      	movs	r2, #80	; 0x50
 8004308:	2100      	movs	r1, #0
 800430a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e06f      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	4a38      	ldr	r2, [pc, #224]	; (80043f8 <HAL_ADC_ConfigChannel+0x12c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d035      	beq.n	8004386 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	035b      	lsls	r3, r3, #13
 8004326:	0b5a      	lsrs	r2, r3, #13
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	02db      	lsls	r3, r3, #11
 8004338:	4013      	ands	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800433c:	4b2f      	ldr	r3, [pc, #188]	; (80043fc <HAL_ADC_ConfigChannel+0x130>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <HAL_ADC_ConfigChannel+0x130>)
 8004342:	2180      	movs	r1, #128	; 0x80
 8004344:	0409      	lsls	r1, r1, #16
 8004346:	430a      	orrs	r2, r1
 8004348:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800434a:	200a      	movs	r0, #10
 800434c:	f000 f85e 	bl	800440c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	029b      	lsls	r3, r3, #10
 8004358:	4013      	ands	r3, r2
 800435a:	d006      	beq.n	800436a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800435c:	4b27      	ldr	r3, [pc, #156]	; (80043fc <HAL_ADC_ConfigChannel+0x130>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b26      	ldr	r3, [pc, #152]	; (80043fc <HAL_ADC_ConfigChannel+0x130>)
 8004362:	2180      	movs	r1, #128	; 0x80
 8004364:	03c9      	lsls	r1, r1, #15
 8004366:	430a      	orrs	r2, r1
 8004368:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	2380      	movs	r3, #128	; 0x80
 8004370:	025b      	lsls	r3, r3, #9
 8004372:	4013      	ands	r3, r2
 8004374:	d037      	beq.n	80043e6 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8004376:	4b21      	ldr	r3, [pc, #132]	; (80043fc <HAL_ADC_ConfigChannel+0x130>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_ADC_ConfigChannel+0x130>)
 800437c:	2180      	movs	r1, #128	; 0x80
 800437e:	0449      	lsls	r1, r1, #17
 8004380:	430a      	orrs	r2, r1
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e02f      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	035b      	lsls	r3, r3, #13
 8004392:	0b5b      	lsrs	r3, r3, #13
 8004394:	43d9      	mvns	r1, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	400a      	ands	r2, r1
 800439c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	2380      	movs	r3, #128	; 0x80
 80043a4:	02db      	lsls	r3, r3, #11
 80043a6:	4013      	ands	r3, r2
 80043a8:	d005      	beq.n	80043b6 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80043aa:	4b14      	ldr	r3, [pc, #80]	; (80043fc <HAL_ADC_ConfigChannel+0x130>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4b13      	ldr	r3, [pc, #76]	; (80043fc <HAL_ADC_ConfigChannel+0x130>)
 80043b0:	4913      	ldr	r1, [pc, #76]	; (8004400 <HAL_ADC_ConfigChannel+0x134>)
 80043b2:	400a      	ands	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	2380      	movs	r3, #128	; 0x80
 80043bc:	029b      	lsls	r3, r3, #10
 80043be:	4013      	ands	r3, r2
 80043c0:	d005      	beq.n	80043ce <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80043c2:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <HAL_ADC_ConfigChannel+0x130>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <HAL_ADC_ConfigChannel+0x130>)
 80043c8:	490e      	ldr	r1, [pc, #56]	; (8004404 <HAL_ADC_ConfigChannel+0x138>)
 80043ca:	400a      	ands	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	025b      	lsls	r3, r3, #9
 80043d6:	4013      	ands	r3, r2
 80043d8:	d005      	beq.n	80043e6 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <HAL_ADC_ConfigChannel+0x130>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	4b07      	ldr	r3, [pc, #28]	; (80043fc <HAL_ADC_ConfigChannel+0x130>)
 80043e0:	4909      	ldr	r1, [pc, #36]	; (8004408 <HAL_ADC_ConfigChannel+0x13c>)
 80043e2:	400a      	ands	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2250      	movs	r2, #80	; 0x50
 80043ea:	2100      	movs	r1, #0
 80043ec:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b002      	add	sp, #8
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	00001001 	.word	0x00001001
 80043fc:	40012708 	.word	0x40012708
 8004400:	ff7fffff 	.word	0xff7fffff
 8004404:	ffbfffff 	.word	0xffbfffff
 8004408:	feffffff 	.word	0xfeffffff

0800440c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004414:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <ADC_DelayMicroSecond+0x38>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	490b      	ldr	r1, [pc, #44]	; (8004448 <ADC_DelayMicroSecond+0x3c>)
 800441a:	0018      	movs	r0, r3
 800441c:	f7fb fe90 	bl	8000140 <__udivsi3>
 8004420:	0003      	movs	r3, r0
 8004422:	001a      	movs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4353      	muls	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800442a:	e002      	b.n	8004432 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3b01      	subs	r3, #1
 8004430:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f9      	bne.n	800442c <ADC_DelayMicroSecond+0x20>
  }
}
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	46bd      	mov	sp, r7
 800443e:	b004      	add	sp, #16
 8004440:	bd80      	pop	{r7, pc}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	20000000 	.word	0x20000000
 8004448:	000f4240 	.word	0x000f4240

0800444c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	0002      	movs	r2, r0
 8004454:	1dfb      	adds	r3, r7, #7
 8004456:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004458:	1dfb      	adds	r3, r7, #7
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b7f      	cmp	r3, #127	; 0x7f
 800445e:	d809      	bhi.n	8004474 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004460:	1dfb      	adds	r3, r7, #7
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	001a      	movs	r2, r3
 8004466:	231f      	movs	r3, #31
 8004468:	401a      	ands	r2, r3
 800446a:	4b04      	ldr	r3, [pc, #16]	; (800447c <__NVIC_EnableIRQ+0x30>)
 800446c:	2101      	movs	r1, #1
 800446e:	4091      	lsls	r1, r2
 8004470:	000a      	movs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]
  }
}
 8004474:	46c0      	nop			; (mov r8, r8)
 8004476:	46bd      	mov	sp, r7
 8004478:	b002      	add	sp, #8
 800447a:	bd80      	pop	{r7, pc}
 800447c:	e000e100 	.word	0xe000e100

08004480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004480:	b590      	push	{r4, r7, lr}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	0002      	movs	r2, r0
 8004488:	6039      	str	r1, [r7, #0]
 800448a:	1dfb      	adds	r3, r7, #7
 800448c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800448e:	1dfb      	adds	r3, r7, #7
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b7f      	cmp	r3, #127	; 0x7f
 8004494:	d828      	bhi.n	80044e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004496:	4a2f      	ldr	r2, [pc, #188]	; (8004554 <__NVIC_SetPriority+0xd4>)
 8004498:	1dfb      	adds	r3, r7, #7
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b25b      	sxtb	r3, r3
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	33c0      	adds	r3, #192	; 0xc0
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	589b      	ldr	r3, [r3, r2]
 80044a6:	1dfa      	adds	r2, r7, #7
 80044a8:	7812      	ldrb	r2, [r2, #0]
 80044aa:	0011      	movs	r1, r2
 80044ac:	2203      	movs	r2, #3
 80044ae:	400a      	ands	r2, r1
 80044b0:	00d2      	lsls	r2, r2, #3
 80044b2:	21ff      	movs	r1, #255	; 0xff
 80044b4:	4091      	lsls	r1, r2
 80044b6:	000a      	movs	r2, r1
 80044b8:	43d2      	mvns	r2, r2
 80044ba:	401a      	ands	r2, r3
 80044bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	019b      	lsls	r3, r3, #6
 80044c2:	22ff      	movs	r2, #255	; 0xff
 80044c4:	401a      	ands	r2, r3
 80044c6:	1dfb      	adds	r3, r7, #7
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	0018      	movs	r0, r3
 80044cc:	2303      	movs	r3, #3
 80044ce:	4003      	ands	r3, r0
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044d4:	481f      	ldr	r0, [pc, #124]	; (8004554 <__NVIC_SetPriority+0xd4>)
 80044d6:	1dfb      	adds	r3, r7, #7
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	b25b      	sxtb	r3, r3
 80044dc:	089b      	lsrs	r3, r3, #2
 80044de:	430a      	orrs	r2, r1
 80044e0:	33c0      	adds	r3, #192	; 0xc0
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80044e6:	e031      	b.n	800454c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044e8:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <__NVIC_SetPriority+0xd8>)
 80044ea:	1dfb      	adds	r3, r7, #7
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	0019      	movs	r1, r3
 80044f0:	230f      	movs	r3, #15
 80044f2:	400b      	ands	r3, r1
 80044f4:	3b08      	subs	r3, #8
 80044f6:	089b      	lsrs	r3, r3, #2
 80044f8:	3306      	adds	r3, #6
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	18d3      	adds	r3, r2, r3
 80044fe:	3304      	adds	r3, #4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	1dfa      	adds	r2, r7, #7
 8004504:	7812      	ldrb	r2, [r2, #0]
 8004506:	0011      	movs	r1, r2
 8004508:	2203      	movs	r2, #3
 800450a:	400a      	ands	r2, r1
 800450c:	00d2      	lsls	r2, r2, #3
 800450e:	21ff      	movs	r1, #255	; 0xff
 8004510:	4091      	lsls	r1, r2
 8004512:	000a      	movs	r2, r1
 8004514:	43d2      	mvns	r2, r2
 8004516:	401a      	ands	r2, r3
 8004518:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	019b      	lsls	r3, r3, #6
 800451e:	22ff      	movs	r2, #255	; 0xff
 8004520:	401a      	ands	r2, r3
 8004522:	1dfb      	adds	r3, r7, #7
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	0018      	movs	r0, r3
 8004528:	2303      	movs	r3, #3
 800452a:	4003      	ands	r3, r0
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004530:	4809      	ldr	r0, [pc, #36]	; (8004558 <__NVIC_SetPriority+0xd8>)
 8004532:	1dfb      	adds	r3, r7, #7
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	001c      	movs	r4, r3
 8004538:	230f      	movs	r3, #15
 800453a:	4023      	ands	r3, r4
 800453c:	3b08      	subs	r3, #8
 800453e:	089b      	lsrs	r3, r3, #2
 8004540:	430a      	orrs	r2, r1
 8004542:	3306      	adds	r3, #6
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	18c3      	adds	r3, r0, r3
 8004548:	3304      	adds	r3, #4
 800454a:	601a      	str	r2, [r3, #0]
}
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	b003      	add	sp, #12
 8004552:	bd90      	pop	{r4, r7, pc}
 8004554:	e000e100 	.word	0xe000e100
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	1e5a      	subs	r2, r3, #1
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	045b      	lsls	r3, r3, #17
 800456c:	429a      	cmp	r2, r3
 800456e:	d301      	bcc.n	8004574 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004570:	2301      	movs	r3, #1
 8004572:	e010      	b.n	8004596 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <SysTick_Config+0x44>)
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	3a01      	subs	r2, #1
 800457a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800457c:	2301      	movs	r3, #1
 800457e:	425b      	negs	r3, r3
 8004580:	2103      	movs	r1, #3
 8004582:	0018      	movs	r0, r3
 8004584:	f7ff ff7c 	bl	8004480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <SysTick_Config+0x44>)
 800458a:	2200      	movs	r2, #0
 800458c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800458e:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <SysTick_Config+0x44>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004594:	2300      	movs	r3, #0
}
 8004596:	0018      	movs	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	b002      	add	sp, #8
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	e000e010 	.word	0xe000e010

080045a4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	210f      	movs	r1, #15
 80045b0:	187b      	adds	r3, r7, r1
 80045b2:	1c02      	adds	r2, r0, #0
 80045b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	187b      	adds	r3, r7, r1
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	b25b      	sxtb	r3, r3
 80045be:	0011      	movs	r1, r2
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7ff ff5d 	bl	8004480 <__NVIC_SetPriority>
}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b004      	add	sp, #16
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	0002      	movs	r2, r0
 80045d6:	1dfb      	adds	r3, r7, #7
 80045d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045da:	1dfb      	adds	r3, r7, #7
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	b25b      	sxtb	r3, r3
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7ff ff33 	bl	800444c <__NVIC_EnableIRQ>
}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	46bd      	mov	sp, r7
 80045ea:	b002      	add	sp, #8
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7ff ffaf 	bl	800455c <SysTick_Config>
 80045fe:	0003      	movs	r3, r0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b002      	add	sp, #8
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e061      	b.n	80046de <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a32      	ldr	r2, [pc, #200]	; (80046e8 <HAL_DMA_Init+0xe0>)
 8004620:	4694      	mov	ip, r2
 8004622:	4463      	add	r3, ip
 8004624:	2114      	movs	r1, #20
 8004626:	0018      	movs	r0, r3
 8004628:	f7fb fd8a 	bl	8000140 <__udivsi3>
 800462c:	0003      	movs	r3, r0
 800462e:	009a      	lsls	r2, r3, #2
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a2d      	ldr	r2, [pc, #180]	; (80046ec <HAL_DMA_Init+0xe4>)
 8004638:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2225      	movs	r2, #37	; 0x25
 800463e:	2102      	movs	r1, #2
 8004640:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a28      	ldr	r2, [pc, #160]	; (80046f0 <HAL_DMA_Init+0xe8>)
 800464e:	4013      	ands	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800465a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	01db      	lsls	r3, r3, #7
 8004690:	429a      	cmp	r2, r3
 8004692:	d018      	beq.n	80046c6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004694:	4b17      	ldr	r3, [pc, #92]	; (80046f4 <HAL_DMA_Init+0xec>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469c:	211c      	movs	r1, #28
 800469e:	400b      	ands	r3, r1
 80046a0:	210f      	movs	r1, #15
 80046a2:	4099      	lsls	r1, r3
 80046a4:	000b      	movs	r3, r1
 80046a6:	43d9      	mvns	r1, r3
 80046a8:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <HAL_DMA_Init+0xec>)
 80046aa:	400a      	ands	r2, r1
 80046ac:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80046ae:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <HAL_DMA_Init+0xec>)
 80046b0:	6819      	ldr	r1, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	201c      	movs	r0, #28
 80046bc:	4003      	ands	r3, r0
 80046be:	409a      	lsls	r2, r3
 80046c0:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <HAL_DMA_Init+0xec>)
 80046c2:	430a      	orrs	r2, r1
 80046c4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2225      	movs	r2, #37	; 0x25
 80046d0:	2101      	movs	r1, #1
 80046d2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2224      	movs	r2, #36	; 0x24
 80046d8:	2100      	movs	r1, #0
 80046da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	0018      	movs	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b004      	add	sp, #16
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	bffdfff8 	.word	0xbffdfff8
 80046ec:	40020000 	.word	0x40020000
 80046f0:	ffff800f 	.word	0xffff800f
 80046f4:	400200a8 	.word	0x400200a8

080046f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004700:	230f      	movs	r3, #15
 8004702:	18fb      	adds	r3, r7, r3
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2225      	movs	r2, #37	; 0x25
 800470c:	5c9b      	ldrb	r3, [r3, r2]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d008      	beq.n	8004726 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2204      	movs	r2, #4
 8004718:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2224      	movs	r2, #36	; 0x24
 800471e:	2100      	movs	r1, #0
 8004720:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e024      	b.n	8004770 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	210e      	movs	r1, #14
 8004732:	438a      	bics	r2, r1
 8004734:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2101      	movs	r1, #1
 8004742:	438a      	bics	r2, r1
 8004744:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	221c      	movs	r2, #28
 800474c:	401a      	ands	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	2101      	movs	r1, #1
 8004754:	4091      	lsls	r1, r2
 8004756:	000a      	movs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2225      	movs	r2, #37	; 0x25
 800475e:	2101      	movs	r1, #1
 8004760:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2224      	movs	r2, #36	; 0x24
 8004766:	2100      	movs	r1, #0
 8004768:	5499      	strb	r1, [r3, r2]

    return status;
 800476a:	230f      	movs	r3, #15
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	b004      	add	sp, #16
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004780:	210f      	movs	r1, #15
 8004782:	187b      	adds	r3, r7, r1
 8004784:	2200      	movs	r2, #0
 8004786:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2225      	movs	r2, #37	; 0x25
 800478c:	5c9b      	ldrb	r3, [r3, r2]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d006      	beq.n	80047a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2204      	movs	r2, #4
 8004798:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800479a:	187b      	adds	r3, r7, r1
 800479c:	2201      	movs	r2, #1
 800479e:	701a      	strb	r2, [r3, #0]
 80047a0:	e02a      	b.n	80047f8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	210e      	movs	r1, #14
 80047ae:	438a      	bics	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2101      	movs	r1, #1
 80047be:	438a      	bics	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	221c      	movs	r2, #28
 80047c8:	401a      	ands	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	2101      	movs	r1, #1
 80047d0:	4091      	lsls	r1, r2
 80047d2:	000a      	movs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2225      	movs	r2, #37	; 0x25
 80047da:	2101      	movs	r1, #1
 80047dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2224      	movs	r2, #36	; 0x24
 80047e2:	2100      	movs	r1, #0
 80047e4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d004      	beq.n	80047f8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	0010      	movs	r0, r2
 80047f6:	4798      	blx	r3
    }
  }
  return status;
 80047f8:	230f      	movs	r3, #15
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	781b      	ldrb	r3, [r3, #0]
}
 80047fe:	0018      	movs	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	b004      	add	sp, #16
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	221c      	movs	r2, #28
 8004824:	4013      	ands	r3, r2
 8004826:	2204      	movs	r2, #4
 8004828:	409a      	lsls	r2, r3
 800482a:	0013      	movs	r3, r2
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4013      	ands	r3, r2
 8004830:	d026      	beq.n	8004880 <HAL_DMA_IRQHandler+0x7a>
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2204      	movs	r2, #4
 8004836:	4013      	ands	r3, r2
 8004838:	d022      	beq.n	8004880 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2220      	movs	r2, #32
 8004842:	4013      	ands	r3, r2
 8004844:	d107      	bne.n	8004856 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2104      	movs	r1, #4
 8004852:	438a      	bics	r2, r1
 8004854:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	221c      	movs	r2, #28
 800485c:	401a      	ands	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	2104      	movs	r1, #4
 8004864:	4091      	lsls	r1, r2
 8004866:	000a      	movs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	2b00      	cmp	r3, #0
 8004870:	d100      	bne.n	8004874 <HAL_DMA_IRQHandler+0x6e>
 8004872:	e071      	b.n	8004958 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	0010      	movs	r0, r2
 800487c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800487e:	e06b      	b.n	8004958 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004884:	221c      	movs	r2, #28
 8004886:	4013      	ands	r3, r2
 8004888:	2202      	movs	r2, #2
 800488a:	409a      	lsls	r2, r3
 800488c:	0013      	movs	r3, r2
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4013      	ands	r3, r2
 8004892:	d02d      	beq.n	80048f0 <HAL_DMA_IRQHandler+0xea>
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2202      	movs	r2, #2
 8004898:	4013      	ands	r3, r2
 800489a:	d029      	beq.n	80048f0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2220      	movs	r2, #32
 80048a4:	4013      	ands	r3, r2
 80048a6:	d10b      	bne.n	80048c0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	210a      	movs	r1, #10
 80048b4:	438a      	bics	r2, r1
 80048b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2225      	movs	r2, #37	; 0x25
 80048bc:	2101      	movs	r1, #1
 80048be:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c4:	221c      	movs	r2, #28
 80048c6:	401a      	ands	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	2102      	movs	r1, #2
 80048ce:	4091      	lsls	r1, r2
 80048d0:	000a      	movs	r2, r1
 80048d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2224      	movs	r2, #36	; 0x24
 80048d8:	2100      	movs	r1, #0
 80048da:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d039      	beq.n	8004958 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	0010      	movs	r0, r2
 80048ec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80048ee:	e033      	b.n	8004958 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	221c      	movs	r2, #28
 80048f6:	4013      	ands	r3, r2
 80048f8:	2208      	movs	r2, #8
 80048fa:	409a      	lsls	r2, r3
 80048fc:	0013      	movs	r3, r2
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4013      	ands	r3, r2
 8004902:	d02a      	beq.n	800495a <HAL_DMA_IRQHandler+0x154>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2208      	movs	r2, #8
 8004908:	4013      	ands	r3, r2
 800490a:	d026      	beq.n	800495a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	210e      	movs	r1, #14
 8004918:	438a      	bics	r2, r1
 800491a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004920:	221c      	movs	r2, #28
 8004922:	401a      	ands	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	2101      	movs	r1, #1
 800492a:	4091      	lsls	r1, r2
 800492c:	000a      	movs	r2, r1
 800492e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2225      	movs	r2, #37	; 0x25
 800493a:	2101      	movs	r1, #1
 800493c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2224      	movs	r2, #36	; 0x24
 8004942:	2100      	movs	r1, #0
 8004944:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	0010      	movs	r0, r2
 8004956:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004958:	46c0      	nop			; (mov r8, r8)
 800495a:	46c0      	nop			; (mov r8, r8)
}
 800495c:	46bd      	mov	sp, r7
 800495e:	b004      	add	sp, #16
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004976:	2300      	movs	r3, #0
 8004978:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800497a:	e14f      	b.n	8004c1c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2101      	movs	r1, #1
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4091      	lsls	r1, r2
 8004986:	000a      	movs	r2, r1
 8004988:	4013      	ands	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d100      	bne.n	8004994 <HAL_GPIO_Init+0x30>
 8004992:	e140      	b.n	8004c16 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2203      	movs	r2, #3
 800499a:	4013      	ands	r3, r2
 800499c:	2b01      	cmp	r3, #1
 800499e:	d005      	beq.n	80049ac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2203      	movs	r2, #3
 80049a6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d130      	bne.n	8004a0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	2203      	movs	r2, #3
 80049b8:	409a      	lsls	r2, r3
 80049ba:	0013      	movs	r3, r2
 80049bc:	43da      	mvns	r2, r3
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4013      	ands	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	409a      	lsls	r2, r3
 80049ce:	0013      	movs	r3, r2
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049e2:	2201      	movs	r2, #1
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	409a      	lsls	r2, r3
 80049e8:	0013      	movs	r3, r2
 80049ea:	43da      	mvns	r2, r3
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4013      	ands	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	2201      	movs	r2, #1
 80049fa:	401a      	ands	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	409a      	lsls	r2, r3
 8004a00:	0013      	movs	r3, r2
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2203      	movs	r2, #3
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d017      	beq.n	8004a4a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	2203      	movs	r2, #3
 8004a26:	409a      	lsls	r2, r3
 8004a28:	0013      	movs	r3, r2
 8004a2a:	43da      	mvns	r2, r3
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	0013      	movs	r3, r2
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2203      	movs	r2, #3
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d123      	bne.n	8004a9e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	08da      	lsrs	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3208      	adds	r2, #8
 8004a5e:	0092      	lsls	r2, r2, #2
 8004a60:	58d3      	ldr	r3, [r2, r3]
 8004a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2207      	movs	r2, #7
 8004a68:	4013      	ands	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	220f      	movs	r2, #15
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	0013      	movs	r3, r2
 8004a72:	43da      	mvns	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4013      	ands	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2107      	movs	r1, #7
 8004a82:	400b      	ands	r3, r1
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	409a      	lsls	r2, r3
 8004a88:	0013      	movs	r3, r2
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	08da      	lsrs	r2, r3, #3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3208      	adds	r2, #8
 8004a98:	0092      	lsls	r2, r2, #2
 8004a9a:	6939      	ldr	r1, [r7, #16]
 8004a9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	2203      	movs	r2, #3
 8004aaa:	409a      	lsls	r2, r3
 8004aac:	0013      	movs	r3, r2
 8004aae:	43da      	mvns	r2, r3
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2203      	movs	r2, #3
 8004abc:	401a      	ands	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	0013      	movs	r3, r2
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	23c0      	movs	r3, #192	; 0xc0
 8004ad8:	029b      	lsls	r3, r3, #10
 8004ada:	4013      	ands	r3, r2
 8004adc:	d100      	bne.n	8004ae0 <HAL_GPIO_Init+0x17c>
 8004ade:	e09a      	b.n	8004c16 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ae0:	4b54      	ldr	r3, [pc, #336]	; (8004c34 <HAL_GPIO_Init+0x2d0>)
 8004ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae4:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <HAL_GPIO_Init+0x2d0>)
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aec:	4a52      	ldr	r2, [pc, #328]	; (8004c38 <HAL_GPIO_Init+0x2d4>)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	089b      	lsrs	r3, r3, #2
 8004af2:	3302      	adds	r3, #2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	589b      	ldr	r3, [r3, r2]
 8004af8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2203      	movs	r2, #3
 8004afe:	4013      	ands	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	220f      	movs	r2, #15
 8004b04:	409a      	lsls	r2, r3
 8004b06:	0013      	movs	r3, r2
 8004b08:	43da      	mvns	r2, r3
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	23a0      	movs	r3, #160	; 0xa0
 8004b14:	05db      	lsls	r3, r3, #23
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d019      	beq.n	8004b4e <HAL_GPIO_Init+0x1ea>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a47      	ldr	r2, [pc, #284]	; (8004c3c <HAL_GPIO_Init+0x2d8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <HAL_GPIO_Init+0x1e6>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a46      	ldr	r2, [pc, #280]	; (8004c40 <HAL_GPIO_Init+0x2dc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00d      	beq.n	8004b46 <HAL_GPIO_Init+0x1e2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a45      	ldr	r2, [pc, #276]	; (8004c44 <HAL_GPIO_Init+0x2e0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d007      	beq.n	8004b42 <HAL_GPIO_Init+0x1de>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a44      	ldr	r2, [pc, #272]	; (8004c48 <HAL_GPIO_Init+0x2e4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d101      	bne.n	8004b3e <HAL_GPIO_Init+0x1da>
 8004b3a:	2305      	movs	r3, #5
 8004b3c:	e008      	b.n	8004b50 <HAL_GPIO_Init+0x1ec>
 8004b3e:	2306      	movs	r3, #6
 8004b40:	e006      	b.n	8004b50 <HAL_GPIO_Init+0x1ec>
 8004b42:	2303      	movs	r3, #3
 8004b44:	e004      	b.n	8004b50 <HAL_GPIO_Init+0x1ec>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e002      	b.n	8004b50 <HAL_GPIO_Init+0x1ec>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <HAL_GPIO_Init+0x1ec>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	2103      	movs	r1, #3
 8004b54:	400a      	ands	r2, r1
 8004b56:	0092      	lsls	r2, r2, #2
 8004b58:	4093      	lsls	r3, r2
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b60:	4935      	ldr	r1, [pc, #212]	; (8004c38 <HAL_GPIO_Init+0x2d4>)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	089b      	lsrs	r3, r3, #2
 8004b66:	3302      	adds	r3, #2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b6e:	4b37      	ldr	r3, [pc, #220]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	43da      	mvns	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	035b      	lsls	r3, r3, #13
 8004b86:	4013      	ands	r3, r2
 8004b88:	d003      	beq.n	8004b92 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004b92:	4b2e      	ldr	r3, [pc, #184]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004b98:	4b2c      	ldr	r3, [pc, #176]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	43da      	mvns	r2, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	2380      	movs	r3, #128	; 0x80
 8004bae:	039b      	lsls	r3, r3, #14
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004bbc:	4b23      	ldr	r3, [pc, #140]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004bc2:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	43da      	mvns	r2, r3
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	029b      	lsls	r3, r3, #10
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d003      	beq.n	8004be6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004be6:	4b19      	ldr	r3, [pc, #100]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bec:	4b17      	ldr	r3, [pc, #92]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	43da      	mvns	r2, r3
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	025b      	lsls	r3, r3, #9
 8004c04:	4013      	ands	r3, r2
 8004c06:	d003      	beq.n	8004c10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004c10:	4b0e      	ldr	r3, [pc, #56]	; (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	40da      	lsrs	r2, r3
 8004c24:	1e13      	subs	r3, r2, #0
 8004c26:	d000      	beq.n	8004c2a <HAL_GPIO_Init+0x2c6>
 8004c28:	e6a8      	b.n	800497c <HAL_GPIO_Init+0x18>
  }
}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b006      	add	sp, #24
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	50000400 	.word	0x50000400
 8004c40:	50000800 	.word	0x50000800
 8004c44:	50000c00 	.word	0x50000c00
 8004c48:	50001c00 	.word	0x50001c00
 8004c4c:	40010400 	.word	0x40010400

08004c50 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	0008      	movs	r0, r1
 8004c5a:	0011      	movs	r1, r2
 8004c5c:	1cbb      	adds	r3, r7, #2
 8004c5e:	1c02      	adds	r2, r0, #0
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	1c7b      	adds	r3, r7, #1
 8004c64:	1c0a      	adds	r2, r1, #0
 8004c66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c68:	1c7b      	adds	r3, r7, #1
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d004      	beq.n	8004c7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c70:	1cbb      	adds	r3, r7, #2
 8004c72:	881a      	ldrh	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004c78:	e003      	b.n	8004c82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004c7a:	1cbb      	adds	r3, r7, #2
 8004c7c:	881a      	ldrh	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b002      	add	sp, #8
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	000a      	movs	r2, r1
 8004c94:	1cbb      	adds	r3, r7, #2
 8004c96:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c9e:	1cbb      	adds	r3, r7, #2
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	041a      	lsls	r2, r3, #16
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	1cb9      	adds	r1, r7, #2
 8004cae:	8809      	ldrh	r1, [r1, #0]
 8004cb0:	400b      	ands	r3, r1
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	619a      	str	r2, [r3, #24]
}
 8004cb8:	46c0      	nop			; (mov r8, r8)
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	b004      	add	sp, #16
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	1dbb      	adds	r3, r7, #6
 8004cca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ccc:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	1dba      	adds	r2, r7, #6
 8004cd2:	8812      	ldrh	r2, [r2, #0]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d008      	beq.n	8004cea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cd8:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004cda:	1dba      	adds	r2, r7, #6
 8004cdc:	8812      	ldrh	r2, [r2, #0]
 8004cde:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ce0:	1dbb      	adds	r3, r7, #6
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f000 f807 	bl	8004cf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b002      	add	sp, #8
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	40010400 	.word	0x40010400

08004cf8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	0002      	movs	r2, r0
 8004d00:	1dbb      	adds	r3, r7, #6
 8004d02:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b002      	add	sp, #8
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e082      	b.n	8004e24 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2241      	movs	r2, #65	; 0x41
 8004d22:	5c9b      	ldrb	r3, [r3, r2]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d107      	bne.n	8004d3a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2240      	movs	r2, #64	; 0x40
 8004d2e:	2100      	movs	r1, #0
 8004d30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7fd fe6b 	bl	8002a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2241      	movs	r2, #65	; 0x41
 8004d3e:	2124      	movs	r1, #36	; 0x24
 8004d40:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	438a      	bics	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4934      	ldr	r1, [pc, #208]	; (8004e2c <HAL_I2C_Init+0x120>)
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4931      	ldr	r1, [pc, #196]	; (8004e30 <HAL_I2C_Init+0x124>)
 8004d6c:	400a      	ands	r2, r1
 8004d6e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d108      	bne.n	8004d8a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2180      	movs	r1, #128	; 0x80
 8004d82:	0209      	lsls	r1, r1, #8
 8004d84:	430a      	orrs	r2, r1
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	e007      	b.n	8004d9a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2184      	movs	r1, #132	; 0x84
 8004d94:	0209      	lsls	r1, r1, #8
 8004d96:	430a      	orrs	r2, r1
 8004d98:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d104      	bne.n	8004dac <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2280      	movs	r2, #128	; 0x80
 8004da8:	0112      	lsls	r2, r2, #4
 8004daa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	491f      	ldr	r1, [pc, #124]	; (8004e34 <HAL_I2C_Init+0x128>)
 8004db8:	430a      	orrs	r2, r1
 8004dba:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	491a      	ldr	r1, [pc, #104]	; (8004e30 <HAL_I2C_Init+0x124>)
 8004dc8:	400a      	ands	r2, r1
 8004dca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69d9      	ldr	r1, [r3, #28]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1a      	ldr	r2, [r3, #32]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2101      	movs	r1, #1
 8004e02:	430a      	orrs	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2241      	movs	r2, #65	; 0x41
 8004e10:	2120      	movs	r1, #32
 8004e12:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2242      	movs	r2, #66	; 0x42
 8004e1e:	2100      	movs	r1, #0
 8004e20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	0018      	movs	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b002      	add	sp, #8
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	f0ffffff 	.word	0xf0ffffff
 8004e30:	ffff7fff 	.word	0xffff7fff
 8004e34:	02008000 	.word	0x02008000

08004e38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2241      	movs	r2, #65	; 0x41
 8004e46:	5c9b      	ldrb	r3, [r3, r2]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d138      	bne.n	8004ec0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2240      	movs	r2, #64	; 0x40
 8004e52:	5c9b      	ldrb	r3, [r3, r2]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e032      	b.n	8004ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2240      	movs	r2, #64	; 0x40
 8004e60:	2101      	movs	r1, #1
 8004e62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2241      	movs	r2, #65	; 0x41
 8004e68:	2124      	movs	r1, #36	; 0x24
 8004e6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2101      	movs	r1, #1
 8004e78:	438a      	bics	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4911      	ldr	r1, [pc, #68]	; (8004ecc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004e88:	400a      	ands	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6819      	ldr	r1, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2241      	movs	r2, #65	; 0x41
 8004eb0:	2120      	movs	r1, #32
 8004eb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2240      	movs	r2, #64	; 0x40
 8004eb8:	2100      	movs	r1, #0
 8004eba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e000      	b.n	8004ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
  }
}
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b002      	add	sp, #8
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	ffffefff 	.word	0xffffefff

08004ed0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2241      	movs	r2, #65	; 0x41
 8004ede:	5c9b      	ldrb	r3, [r3, r2]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d139      	bne.n	8004f5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2240      	movs	r2, #64	; 0x40
 8004eea:	5c9b      	ldrb	r3, [r3, r2]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e033      	b.n	8004f5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2240      	movs	r2, #64	; 0x40
 8004ef8:	2101      	movs	r1, #1
 8004efa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2241      	movs	r2, #65	; 0x41
 8004f00:	2124      	movs	r1, #36	; 0x24
 8004f02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2101      	movs	r1, #1
 8004f10:	438a      	bics	r2, r1
 8004f12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a11      	ldr	r2, [pc, #68]	; (8004f64 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2101      	movs	r1, #1
 8004f42:	430a      	orrs	r2, r1
 8004f44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2241      	movs	r2, #65	; 0x41
 8004f4a:	2120      	movs	r1, #32
 8004f4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2240      	movs	r2, #64	; 0x40
 8004f52:	2100      	movs	r1, #0
 8004f54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e000      	b.n	8004f5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
  }
}
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b004      	add	sp, #16
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	fffff0ff 	.word	0xfffff0ff

08004f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f68:	b5b0      	push	{r4, r5, r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d102      	bne.n	8004f7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f000 fbaf 	bl	80056da <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f7c:	4bcf      	ldr	r3, [pc, #828]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	220c      	movs	r2, #12
 8004f82:	4013      	ands	r3, r2
 8004f84:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f86:	4bcd      	ldr	r3, [pc, #820]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	2380      	movs	r3, #128	; 0x80
 8004f8c:	025b      	lsls	r3, r3, #9
 8004f8e:	4013      	ands	r3, r2
 8004f90:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2201      	movs	r2, #1
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d100      	bne.n	8004f9e <HAL_RCC_OscConfig+0x36>
 8004f9c:	e07e      	b.n	800509c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d007      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	2b0c      	cmp	r3, #12
 8004fa8:	d112      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x68>
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	025b      	lsls	r3, r3, #9
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d10d      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb4:	4bc1      	ldr	r3, [pc, #772]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	029b      	lsls	r3, r3, #10
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	d100      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x5a>
 8004fc0:	e06b      	b.n	800509a <HAL_RCC_OscConfig+0x132>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d167      	bne.n	800509a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f000 fb85 	bl	80056da <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	025b      	lsls	r3, r3, #9
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d107      	bne.n	8004fec <HAL_RCC_OscConfig+0x84>
 8004fdc:	4bb7      	ldr	r3, [pc, #732]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	4bb6      	ldr	r3, [pc, #728]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8004fe2:	2180      	movs	r1, #128	; 0x80
 8004fe4:	0249      	lsls	r1, r1, #9
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e027      	b.n	800503c <HAL_RCC_OscConfig+0xd4>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	23a0      	movs	r3, #160	; 0xa0
 8004ff2:	02db      	lsls	r3, r3, #11
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d10e      	bne.n	8005016 <HAL_RCC_OscConfig+0xae>
 8004ff8:	4bb0      	ldr	r3, [pc, #704]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4baf      	ldr	r3, [pc, #700]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8004ffe:	2180      	movs	r1, #128	; 0x80
 8005000:	02c9      	lsls	r1, r1, #11
 8005002:	430a      	orrs	r2, r1
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	4bad      	ldr	r3, [pc, #692]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4bac      	ldr	r3, [pc, #688]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 800500c:	2180      	movs	r1, #128	; 0x80
 800500e:	0249      	lsls	r1, r1, #9
 8005010:	430a      	orrs	r2, r1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e012      	b.n	800503c <HAL_RCC_OscConfig+0xd4>
 8005016:	4ba9      	ldr	r3, [pc, #676]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4ba8      	ldr	r3, [pc, #672]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 800501c:	49a8      	ldr	r1, [pc, #672]	; (80052c0 <HAL_RCC_OscConfig+0x358>)
 800501e:	400a      	ands	r2, r1
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	4ba6      	ldr	r3, [pc, #664]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	2380      	movs	r3, #128	; 0x80
 8005028:	025b      	lsls	r3, r3, #9
 800502a:	4013      	ands	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4ba2      	ldr	r3, [pc, #648]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	4ba1      	ldr	r3, [pc, #644]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005036:	49a3      	ldr	r1, [pc, #652]	; (80052c4 <HAL_RCC_OscConfig+0x35c>)
 8005038:	400a      	ands	r2, r1
 800503a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d015      	beq.n	8005070 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fe ffa0 	bl	8003f88 <HAL_GetTick>
 8005048:	0003      	movs	r3, r0
 800504a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800504c:	e009      	b.n	8005062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800504e:	f7fe ff9b 	bl	8003f88 <HAL_GetTick>
 8005052:	0002      	movs	r2, r0
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b64      	cmp	r3, #100	; 0x64
 800505a:	d902      	bls.n	8005062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	f000 fb3c 	bl	80056da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005062:	4b96      	ldr	r3, [pc, #600]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	2380      	movs	r3, #128	; 0x80
 8005068:	029b      	lsls	r3, r3, #10
 800506a:	4013      	ands	r3, r2
 800506c:	d0ef      	beq.n	800504e <HAL_RCC_OscConfig+0xe6>
 800506e:	e015      	b.n	800509c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005070:	f7fe ff8a 	bl	8003f88 <HAL_GetTick>
 8005074:	0003      	movs	r3, r0
 8005076:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800507a:	f7fe ff85 	bl	8003f88 <HAL_GetTick>
 800507e:	0002      	movs	r2, r0
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b64      	cmp	r3, #100	; 0x64
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e326      	b.n	80056da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800508c:	4b8b      	ldr	r3, [pc, #556]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	029b      	lsls	r3, r3, #10
 8005094:	4013      	ands	r3, r2
 8005096:	d1f0      	bne.n	800507a <HAL_RCC_OscConfig+0x112>
 8005098:	e000      	b.n	800509c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800509a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2202      	movs	r2, #2
 80050a2:	4013      	ands	r3, r2
 80050a4:	d100      	bne.n	80050a8 <HAL_RCC_OscConfig+0x140>
 80050a6:	e08b      	b.n	80051c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d005      	beq.n	80050c0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	2b0c      	cmp	r3, #12
 80050b8:	d13e      	bne.n	8005138 <HAL_RCC_OscConfig+0x1d0>
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d13b      	bne.n	8005138 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80050c0:	4b7e      	ldr	r3, [pc, #504]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2204      	movs	r2, #4
 80050c6:	4013      	ands	r3, r2
 80050c8:	d004      	beq.n	80050d4 <HAL_RCC_OscConfig+0x16c>
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e302      	b.n	80056da <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d4:	4b79      	ldr	r3, [pc, #484]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	4a7b      	ldr	r2, [pc, #492]	; (80052c8 <HAL_RCC_OscConfig+0x360>)
 80050da:	4013      	ands	r3, r2
 80050dc:	0019      	movs	r1, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	021a      	lsls	r2, r3, #8
 80050e4:	4b75      	ldr	r3, [pc, #468]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80050ea:	4b74      	ldr	r3, [pc, #464]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2209      	movs	r2, #9
 80050f0:	4393      	bics	r3, r2
 80050f2:	0019      	movs	r1, r3
 80050f4:	4b71      	ldr	r3, [pc, #452]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050fc:	f000 fc40 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 8005100:	0001      	movs	r1, r0
 8005102:	4b6e      	ldr	r3, [pc, #440]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	091b      	lsrs	r3, r3, #4
 8005108:	220f      	movs	r2, #15
 800510a:	4013      	ands	r3, r2
 800510c:	4a6f      	ldr	r2, [pc, #444]	; (80052cc <HAL_RCC_OscConfig+0x364>)
 800510e:	5cd3      	ldrb	r3, [r2, r3]
 8005110:	000a      	movs	r2, r1
 8005112:	40da      	lsrs	r2, r3
 8005114:	4b6e      	ldr	r3, [pc, #440]	; (80052d0 <HAL_RCC_OscConfig+0x368>)
 8005116:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005118:	4b6e      	ldr	r3, [pc, #440]	; (80052d4 <HAL_RCC_OscConfig+0x36c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2513      	movs	r5, #19
 800511e:	197c      	adds	r4, r7, r5
 8005120:	0018      	movs	r0, r3
 8005122:	f7fe feeb 	bl	8003efc <HAL_InitTick>
 8005126:	0003      	movs	r3, r0
 8005128:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800512a:	197b      	adds	r3, r7, r5
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d046      	beq.n	80051c0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8005132:	197b      	adds	r3, r7, r5
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	e2d0      	b.n	80056da <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d027      	beq.n	800518e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800513e:	4b5f      	ldr	r3, [pc, #380]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2209      	movs	r2, #9
 8005144:	4393      	bics	r3, r2
 8005146:	0019      	movs	r1, r3
 8005148:	4b5c      	ldr	r3, [pc, #368]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	430a      	orrs	r2, r1
 800514e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005150:	f7fe ff1a 	bl	8003f88 <HAL_GetTick>
 8005154:	0003      	movs	r3, r0
 8005156:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800515a:	f7fe ff15 	bl	8003f88 <HAL_GetTick>
 800515e:	0002      	movs	r2, r0
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e2b6      	b.n	80056da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800516c:	4b53      	ldr	r3, [pc, #332]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2204      	movs	r2, #4
 8005172:	4013      	ands	r3, r2
 8005174:	d0f1      	beq.n	800515a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005176:	4b51      	ldr	r3, [pc, #324]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4a53      	ldr	r2, [pc, #332]	; (80052c8 <HAL_RCC_OscConfig+0x360>)
 800517c:	4013      	ands	r3, r2
 800517e:	0019      	movs	r1, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	021a      	lsls	r2, r3, #8
 8005186:	4b4d      	ldr	r3, [pc, #308]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005188:	430a      	orrs	r2, r1
 800518a:	605a      	str	r2, [r3, #4]
 800518c:	e018      	b.n	80051c0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800518e:	4b4b      	ldr	r3, [pc, #300]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	4b4a      	ldr	r3, [pc, #296]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005194:	2101      	movs	r1, #1
 8005196:	438a      	bics	r2, r1
 8005198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519a:	f7fe fef5 	bl	8003f88 <HAL_GetTick>
 800519e:	0003      	movs	r3, r0
 80051a0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a4:	f7fe fef0 	bl	8003f88 <HAL_GetTick>
 80051a8:	0002      	movs	r2, r0
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e291      	b.n	80056da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051b6:	4b41      	ldr	r3, [pc, #260]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2204      	movs	r2, #4
 80051bc:	4013      	ands	r3, r2
 80051be:	d1f1      	bne.n	80051a4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2210      	movs	r2, #16
 80051c6:	4013      	ands	r3, r2
 80051c8:	d100      	bne.n	80051cc <HAL_RCC_OscConfig+0x264>
 80051ca:	e0a1      	b.n	8005310 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d140      	bne.n	8005254 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051d2:	4b3a      	ldr	r3, [pc, #232]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	2380      	movs	r3, #128	; 0x80
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4013      	ands	r3, r2
 80051dc:	d005      	beq.n	80051ea <HAL_RCC_OscConfig+0x282>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e277      	b.n	80056da <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051ea:	4b34      	ldr	r3, [pc, #208]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4a3a      	ldr	r2, [pc, #232]	; (80052d8 <HAL_RCC_OscConfig+0x370>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	0019      	movs	r1, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051f8:	4b30      	ldr	r3, [pc, #192]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051fe:	4b2f      	ldr	r3, [pc, #188]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	0a19      	lsrs	r1, r3, #8
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	061a      	lsls	r2, r3, #24
 800520c:	4b2b      	ldr	r3, [pc, #172]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	0b5b      	lsrs	r3, r3, #13
 8005218:	3301      	adds	r3, #1
 800521a:	2280      	movs	r2, #128	; 0x80
 800521c:	0212      	lsls	r2, r2, #8
 800521e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005220:	4b26      	ldr	r3, [pc, #152]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	210f      	movs	r1, #15
 8005228:	400b      	ands	r3, r1
 800522a:	4928      	ldr	r1, [pc, #160]	; (80052cc <HAL_RCC_OscConfig+0x364>)
 800522c:	5ccb      	ldrb	r3, [r1, r3]
 800522e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005230:	4b27      	ldr	r3, [pc, #156]	; (80052d0 <HAL_RCC_OscConfig+0x368>)
 8005232:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005234:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <HAL_RCC_OscConfig+0x36c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2513      	movs	r5, #19
 800523a:	197c      	adds	r4, r7, r5
 800523c:	0018      	movs	r0, r3
 800523e:	f7fe fe5d 	bl	8003efc <HAL_InitTick>
 8005242:	0003      	movs	r3, r0
 8005244:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005246:	197b      	adds	r3, r7, r5
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d060      	beq.n	8005310 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800524e:	197b      	adds	r3, r7, r5
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	e242      	b.n	80056da <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d03f      	beq.n	80052dc <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800525c:	4b17      	ldr	r3, [pc, #92]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	4b16      	ldr	r3, [pc, #88]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005262:	2180      	movs	r1, #128	; 0x80
 8005264:	0049      	lsls	r1, r1, #1
 8005266:	430a      	orrs	r2, r1
 8005268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526a:	f7fe fe8d 	bl	8003f88 <HAL_GetTick>
 800526e:	0003      	movs	r3, r0
 8005270:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005274:	f7fe fe88 	bl	8003f88 <HAL_GetTick>
 8005278:	0002      	movs	r2, r0
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e229      	b.n	80056da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4013      	ands	r3, r2
 8005290:	d0f0      	beq.n	8005274 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005292:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	4a10      	ldr	r2, [pc, #64]	; (80052d8 <HAL_RCC_OscConfig+0x370>)
 8005298:	4013      	ands	r3, r2
 800529a:	0019      	movs	r1, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052a0:	4b06      	ldr	r3, [pc, #24]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	0a19      	lsrs	r1, r3, #8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	061a      	lsls	r2, r3, #24
 80052b4:	4b01      	ldr	r3, [pc, #4]	; (80052bc <HAL_RCC_OscConfig+0x354>)
 80052b6:	430a      	orrs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	e029      	b.n	8005310 <HAL_RCC_OscConfig+0x3a8>
 80052bc:	40021000 	.word	0x40021000
 80052c0:	fffeffff 	.word	0xfffeffff
 80052c4:	fffbffff 	.word	0xfffbffff
 80052c8:	ffffe0ff 	.word	0xffffe0ff
 80052cc:	0800d2cc 	.word	0x0800d2cc
 80052d0:	20000000 	.word	0x20000000
 80052d4:	20000004 	.word	0x20000004
 80052d8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052dc:	4bbd      	ldr	r3, [pc, #756]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4bbc      	ldr	r3, [pc, #752]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 80052e2:	49bd      	ldr	r1, [pc, #756]	; (80055d8 <HAL_RCC_OscConfig+0x670>)
 80052e4:	400a      	ands	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e8:	f7fe fe4e 	bl	8003f88 <HAL_GetTick>
 80052ec:	0003      	movs	r3, r0
 80052ee:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052f2:	f7fe fe49 	bl	8003f88 <HAL_GetTick>
 80052f6:	0002      	movs	r2, r0
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e1ea      	b.n	80056da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005304:	4bb3      	ldr	r3, [pc, #716]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4013      	ands	r3, r2
 800530e:	d1f0      	bne.n	80052f2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2208      	movs	r2, #8
 8005316:	4013      	ands	r3, r2
 8005318:	d036      	beq.n	8005388 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d019      	beq.n	8005356 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005322:	4bac      	ldr	r3, [pc, #688]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005326:	4bab      	ldr	r3, [pc, #684]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005328:	2101      	movs	r1, #1
 800532a:	430a      	orrs	r2, r1
 800532c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800532e:	f7fe fe2b 	bl	8003f88 <HAL_GetTick>
 8005332:	0003      	movs	r3, r0
 8005334:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005338:	f7fe fe26 	bl	8003f88 <HAL_GetTick>
 800533c:	0002      	movs	r2, r0
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e1c7      	b.n	80056da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800534a:	4ba2      	ldr	r3, [pc, #648]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 800534c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534e:	2202      	movs	r2, #2
 8005350:	4013      	ands	r3, r2
 8005352:	d0f1      	beq.n	8005338 <HAL_RCC_OscConfig+0x3d0>
 8005354:	e018      	b.n	8005388 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005356:	4b9f      	ldr	r3, [pc, #636]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005358:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800535a:	4b9e      	ldr	r3, [pc, #632]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 800535c:	2101      	movs	r1, #1
 800535e:	438a      	bics	r2, r1
 8005360:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005362:	f7fe fe11 	bl	8003f88 <HAL_GetTick>
 8005366:	0003      	movs	r3, r0
 8005368:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800536c:	f7fe fe0c 	bl	8003f88 <HAL_GetTick>
 8005370:	0002      	movs	r2, r0
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e1ad      	b.n	80056da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800537e:	4b95      	ldr	r3, [pc, #596]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005382:	2202      	movs	r2, #2
 8005384:	4013      	ands	r3, r2
 8005386:	d1f1      	bne.n	800536c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2204      	movs	r2, #4
 800538e:	4013      	ands	r3, r2
 8005390:	d100      	bne.n	8005394 <HAL_RCC_OscConfig+0x42c>
 8005392:	e0ae      	b.n	80054f2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005394:	2027      	movs	r0, #39	; 0x27
 8005396:	183b      	adds	r3, r7, r0
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800539c:	4b8d      	ldr	r3, [pc, #564]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 800539e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a0:	2380      	movs	r3, #128	; 0x80
 80053a2:	055b      	lsls	r3, r3, #21
 80053a4:	4013      	ands	r3, r2
 80053a6:	d109      	bne.n	80053bc <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a8:	4b8a      	ldr	r3, [pc, #552]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 80053aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ac:	4b89      	ldr	r3, [pc, #548]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 80053ae:	2180      	movs	r1, #128	; 0x80
 80053b0:	0549      	lsls	r1, r1, #21
 80053b2:	430a      	orrs	r2, r1
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80053b6:	183b      	adds	r3, r7, r0
 80053b8:	2201      	movs	r2, #1
 80053ba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053bc:	4b87      	ldr	r3, [pc, #540]	; (80055dc <HAL_RCC_OscConfig+0x674>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	2380      	movs	r3, #128	; 0x80
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	4013      	ands	r3, r2
 80053c6:	d11a      	bne.n	80053fe <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053c8:	4b84      	ldr	r3, [pc, #528]	; (80055dc <HAL_RCC_OscConfig+0x674>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	4b83      	ldr	r3, [pc, #524]	; (80055dc <HAL_RCC_OscConfig+0x674>)
 80053ce:	2180      	movs	r1, #128	; 0x80
 80053d0:	0049      	lsls	r1, r1, #1
 80053d2:	430a      	orrs	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053d6:	f7fe fdd7 	bl	8003f88 <HAL_GetTick>
 80053da:	0003      	movs	r3, r0
 80053dc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e0:	f7fe fdd2 	bl	8003f88 <HAL_GetTick>
 80053e4:	0002      	movs	r2, r0
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b64      	cmp	r3, #100	; 0x64
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e173      	b.n	80056da <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f2:	4b7a      	ldr	r3, [pc, #488]	; (80055dc <HAL_RCC_OscConfig+0x674>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	2380      	movs	r3, #128	; 0x80
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4013      	ands	r3, r2
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	429a      	cmp	r2, r3
 8005408:	d107      	bne.n	800541a <HAL_RCC_OscConfig+0x4b2>
 800540a:	4b72      	ldr	r3, [pc, #456]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 800540c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800540e:	4b71      	ldr	r3, [pc, #452]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005410:	2180      	movs	r1, #128	; 0x80
 8005412:	0049      	lsls	r1, r1, #1
 8005414:	430a      	orrs	r2, r1
 8005416:	651a      	str	r2, [r3, #80]	; 0x50
 8005418:	e031      	b.n	800547e <HAL_RCC_OscConfig+0x516>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10c      	bne.n	800543c <HAL_RCC_OscConfig+0x4d4>
 8005422:	4b6c      	ldr	r3, [pc, #432]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005426:	4b6b      	ldr	r3, [pc, #428]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005428:	496b      	ldr	r1, [pc, #428]	; (80055d8 <HAL_RCC_OscConfig+0x670>)
 800542a:	400a      	ands	r2, r1
 800542c:	651a      	str	r2, [r3, #80]	; 0x50
 800542e:	4b69      	ldr	r3, [pc, #420]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005430:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005432:	4b68      	ldr	r3, [pc, #416]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005434:	496a      	ldr	r1, [pc, #424]	; (80055e0 <HAL_RCC_OscConfig+0x678>)
 8005436:	400a      	ands	r2, r1
 8005438:	651a      	str	r2, [r3, #80]	; 0x50
 800543a:	e020      	b.n	800547e <HAL_RCC_OscConfig+0x516>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	23a0      	movs	r3, #160	; 0xa0
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	429a      	cmp	r2, r3
 8005446:	d10e      	bne.n	8005466 <HAL_RCC_OscConfig+0x4fe>
 8005448:	4b62      	ldr	r3, [pc, #392]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 800544a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800544c:	4b61      	ldr	r3, [pc, #388]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 800544e:	2180      	movs	r1, #128	; 0x80
 8005450:	00c9      	lsls	r1, r1, #3
 8005452:	430a      	orrs	r2, r1
 8005454:	651a      	str	r2, [r3, #80]	; 0x50
 8005456:	4b5f      	ldr	r3, [pc, #380]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005458:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800545a:	4b5e      	ldr	r3, [pc, #376]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 800545c:	2180      	movs	r1, #128	; 0x80
 800545e:	0049      	lsls	r1, r1, #1
 8005460:	430a      	orrs	r2, r1
 8005462:	651a      	str	r2, [r3, #80]	; 0x50
 8005464:	e00b      	b.n	800547e <HAL_RCC_OscConfig+0x516>
 8005466:	4b5b      	ldr	r3, [pc, #364]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800546a:	4b5a      	ldr	r3, [pc, #360]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 800546c:	495a      	ldr	r1, [pc, #360]	; (80055d8 <HAL_RCC_OscConfig+0x670>)
 800546e:	400a      	ands	r2, r1
 8005470:	651a      	str	r2, [r3, #80]	; 0x50
 8005472:	4b58      	ldr	r3, [pc, #352]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005474:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005476:	4b57      	ldr	r3, [pc, #348]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005478:	4959      	ldr	r1, [pc, #356]	; (80055e0 <HAL_RCC_OscConfig+0x678>)
 800547a:	400a      	ands	r2, r1
 800547c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d015      	beq.n	80054b2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005486:	f7fe fd7f 	bl	8003f88 <HAL_GetTick>
 800548a:	0003      	movs	r3, r0
 800548c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800548e:	e009      	b.n	80054a4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005490:	f7fe fd7a 	bl	8003f88 <HAL_GetTick>
 8005494:	0002      	movs	r2, r0
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	4a52      	ldr	r2, [pc, #328]	; (80055e4 <HAL_RCC_OscConfig+0x67c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e11a      	b.n	80056da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054a4:	4b4b      	ldr	r3, [pc, #300]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 80054a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054a8:	2380      	movs	r3, #128	; 0x80
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4013      	ands	r3, r2
 80054ae:	d0ef      	beq.n	8005490 <HAL_RCC_OscConfig+0x528>
 80054b0:	e014      	b.n	80054dc <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b2:	f7fe fd69 	bl	8003f88 <HAL_GetTick>
 80054b6:	0003      	movs	r3, r0
 80054b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054ba:	e009      	b.n	80054d0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054bc:	f7fe fd64 	bl	8003f88 <HAL_GetTick>
 80054c0:	0002      	movs	r2, r0
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	4a47      	ldr	r2, [pc, #284]	; (80055e4 <HAL_RCC_OscConfig+0x67c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e104      	b.n	80056da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054d0:	4b40      	ldr	r3, [pc, #256]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 80054d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4013      	ands	r3, r2
 80054da:	d1ef      	bne.n	80054bc <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054dc:	2327      	movs	r3, #39	; 0x27
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d105      	bne.n	80054f2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e6:	4b3b      	ldr	r3, [pc, #236]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 80054e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ea:	4b3a      	ldr	r3, [pc, #232]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 80054ec:	493e      	ldr	r1, [pc, #248]	; (80055e8 <HAL_RCC_OscConfig+0x680>)
 80054ee:	400a      	ands	r2, r1
 80054f0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2220      	movs	r2, #32
 80054f8:	4013      	ands	r3, r2
 80054fa:	d049      	beq.n	8005590 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d026      	beq.n	8005552 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005504:	4b33      	ldr	r3, [pc, #204]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	4b32      	ldr	r3, [pc, #200]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 800550a:	2101      	movs	r1, #1
 800550c:	430a      	orrs	r2, r1
 800550e:	609a      	str	r2, [r3, #8]
 8005510:	4b30      	ldr	r3, [pc, #192]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005514:	4b2f      	ldr	r3, [pc, #188]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005516:	2101      	movs	r1, #1
 8005518:	430a      	orrs	r2, r1
 800551a:	635a      	str	r2, [r3, #52]	; 0x34
 800551c:	4b33      	ldr	r3, [pc, #204]	; (80055ec <HAL_RCC_OscConfig+0x684>)
 800551e:	6a1a      	ldr	r2, [r3, #32]
 8005520:	4b32      	ldr	r3, [pc, #200]	; (80055ec <HAL_RCC_OscConfig+0x684>)
 8005522:	2180      	movs	r1, #128	; 0x80
 8005524:	0189      	lsls	r1, r1, #6
 8005526:	430a      	orrs	r2, r1
 8005528:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552a:	f7fe fd2d 	bl	8003f88 <HAL_GetTick>
 800552e:	0003      	movs	r3, r0
 8005530:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005534:	f7fe fd28 	bl	8003f88 <HAL_GetTick>
 8005538:	0002      	movs	r2, r0
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e0c9      	b.n	80056da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005546:	4b23      	ldr	r3, [pc, #140]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2202      	movs	r2, #2
 800554c:	4013      	ands	r3, r2
 800554e:	d0f1      	beq.n	8005534 <HAL_RCC_OscConfig+0x5cc>
 8005550:	e01e      	b.n	8005590 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005552:	4b20      	ldr	r3, [pc, #128]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	4b1f      	ldr	r3, [pc, #124]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005558:	2101      	movs	r1, #1
 800555a:	438a      	bics	r2, r1
 800555c:	609a      	str	r2, [r3, #8]
 800555e:	4b23      	ldr	r3, [pc, #140]	; (80055ec <HAL_RCC_OscConfig+0x684>)
 8005560:	6a1a      	ldr	r2, [r3, #32]
 8005562:	4b22      	ldr	r3, [pc, #136]	; (80055ec <HAL_RCC_OscConfig+0x684>)
 8005564:	4922      	ldr	r1, [pc, #136]	; (80055f0 <HAL_RCC_OscConfig+0x688>)
 8005566:	400a      	ands	r2, r1
 8005568:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556a:	f7fe fd0d 	bl	8003f88 <HAL_GetTick>
 800556e:	0003      	movs	r3, r0
 8005570:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005574:	f7fe fd08 	bl	8003f88 <HAL_GetTick>
 8005578:	0002      	movs	r2, r0
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e0a9      	b.n	80056da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005586:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2202      	movs	r2, #2
 800558c:	4013      	ands	r3, r2
 800558e:	d1f1      	bne.n	8005574 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005594:	2b00      	cmp	r3, #0
 8005596:	d100      	bne.n	800559a <HAL_RCC_OscConfig+0x632>
 8005598:	e09e      	b.n	80056d8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	2b0c      	cmp	r3, #12
 800559e:	d100      	bne.n	80055a2 <HAL_RCC_OscConfig+0x63a>
 80055a0:	e077      	b.n	8005692 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d158      	bne.n	800565c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <HAL_RCC_OscConfig+0x66c>)
 80055b0:	4910      	ldr	r1, [pc, #64]	; (80055f4 <HAL_RCC_OscConfig+0x68c>)
 80055b2:	400a      	ands	r2, r1
 80055b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b6:	f7fe fce7 	bl	8003f88 <HAL_GetTick>
 80055ba:	0003      	movs	r3, r0
 80055bc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80055be:	e01b      	b.n	80055f8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c0:	f7fe fce2 	bl	8003f88 <HAL_GetTick>
 80055c4:	0002      	movs	r2, r0
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d914      	bls.n	80055f8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e083      	b.n	80056da <HAL_RCC_OscConfig+0x772>
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	40021000 	.word	0x40021000
 80055d8:	fffffeff 	.word	0xfffffeff
 80055dc:	40007000 	.word	0x40007000
 80055e0:	fffffbff 	.word	0xfffffbff
 80055e4:	00001388 	.word	0x00001388
 80055e8:	efffffff 	.word	0xefffffff
 80055ec:	40010000 	.word	0x40010000
 80055f0:	ffffdfff 	.word	0xffffdfff
 80055f4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80055f8:	4b3a      	ldr	r3, [pc, #232]	; (80056e4 <HAL_RCC_OscConfig+0x77c>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	049b      	lsls	r3, r3, #18
 8005600:	4013      	ands	r3, r2
 8005602:	d1dd      	bne.n	80055c0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005604:	4b37      	ldr	r3, [pc, #220]	; (80056e4 <HAL_RCC_OscConfig+0x77c>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4a37      	ldr	r2, [pc, #220]	; (80056e8 <HAL_RCC_OscConfig+0x780>)
 800560a:	4013      	ands	r3, r2
 800560c:	0019      	movs	r1, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561c:	431a      	orrs	r2, r3
 800561e:	4b31      	ldr	r3, [pc, #196]	; (80056e4 <HAL_RCC_OscConfig+0x77c>)
 8005620:	430a      	orrs	r2, r1
 8005622:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005624:	4b2f      	ldr	r3, [pc, #188]	; (80056e4 <HAL_RCC_OscConfig+0x77c>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4b2e      	ldr	r3, [pc, #184]	; (80056e4 <HAL_RCC_OscConfig+0x77c>)
 800562a:	2180      	movs	r1, #128	; 0x80
 800562c:	0449      	lsls	r1, r1, #17
 800562e:	430a      	orrs	r2, r1
 8005630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005632:	f7fe fca9 	bl	8003f88 <HAL_GetTick>
 8005636:	0003      	movs	r3, r0
 8005638:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800563c:	f7fe fca4 	bl	8003f88 <HAL_GetTick>
 8005640:	0002      	movs	r2, r0
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e045      	b.n	80056da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800564e:	4b25      	ldr	r3, [pc, #148]	; (80056e4 <HAL_RCC_OscConfig+0x77c>)
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	2380      	movs	r3, #128	; 0x80
 8005654:	049b      	lsls	r3, r3, #18
 8005656:	4013      	ands	r3, r2
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x6d4>
 800565a:	e03d      	b.n	80056d8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565c:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <HAL_RCC_OscConfig+0x77c>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	4b20      	ldr	r3, [pc, #128]	; (80056e4 <HAL_RCC_OscConfig+0x77c>)
 8005662:	4922      	ldr	r1, [pc, #136]	; (80056ec <HAL_RCC_OscConfig+0x784>)
 8005664:	400a      	ands	r2, r1
 8005666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005668:	f7fe fc8e 	bl	8003f88 <HAL_GetTick>
 800566c:	0003      	movs	r3, r0
 800566e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005672:	f7fe fc89 	bl	8003f88 <HAL_GetTick>
 8005676:	0002      	movs	r2, r0
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e02a      	b.n	80056da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005684:	4b17      	ldr	r3, [pc, #92]	; (80056e4 <HAL_RCC_OscConfig+0x77c>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	2380      	movs	r3, #128	; 0x80
 800568a:	049b      	lsls	r3, r3, #18
 800568c:	4013      	ands	r3, r2
 800568e:	d1f0      	bne.n	8005672 <HAL_RCC_OscConfig+0x70a>
 8005690:	e022      	b.n	80056d8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e01d      	b.n	80056da <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800569e:	4b11      	ldr	r3, [pc, #68]	; (80056e4 <HAL_RCC_OscConfig+0x77c>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	2380      	movs	r3, #128	; 0x80
 80056a8:	025b      	lsls	r3, r3, #9
 80056aa:	401a      	ands	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d10f      	bne.n	80056d4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	23f0      	movs	r3, #240	; 0xf0
 80056b8:	039b      	lsls	r3, r3, #14
 80056ba:	401a      	ands	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d107      	bne.n	80056d4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	23c0      	movs	r3, #192	; 0xc0
 80056c8:	041b      	lsls	r3, r3, #16
 80056ca:	401a      	ands	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d001      	beq.n	80056d8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	0018      	movs	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	b00a      	add	sp, #40	; 0x28
 80056e0:	bdb0      	pop	{r4, r5, r7, pc}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	40021000 	.word	0x40021000
 80056e8:	ff02ffff 	.word	0xff02ffff
 80056ec:	feffffff 	.word	0xfeffffff

080056f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056f0:	b5b0      	push	{r4, r5, r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e128      	b.n	8005956 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005704:	4b96      	ldr	r3, [pc, #600]	; (8005960 <HAL_RCC_ClockConfig+0x270>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2201      	movs	r2, #1
 800570a:	4013      	ands	r3, r2
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d91e      	bls.n	8005750 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005712:	4b93      	ldr	r3, [pc, #588]	; (8005960 <HAL_RCC_ClockConfig+0x270>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2201      	movs	r2, #1
 8005718:	4393      	bics	r3, r2
 800571a:	0019      	movs	r1, r3
 800571c:	4b90      	ldr	r3, [pc, #576]	; (8005960 <HAL_RCC_ClockConfig+0x270>)
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005724:	f7fe fc30 	bl	8003f88 <HAL_GetTick>
 8005728:	0003      	movs	r3, r0
 800572a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800572c:	e009      	b.n	8005742 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800572e:	f7fe fc2b 	bl	8003f88 <HAL_GetTick>
 8005732:	0002      	movs	r2, r0
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	4a8a      	ldr	r2, [pc, #552]	; (8005964 <HAL_RCC_ClockConfig+0x274>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e109      	b.n	8005956 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005742:	4b87      	ldr	r3, [pc, #540]	; (8005960 <HAL_RCC_ClockConfig+0x270>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2201      	movs	r2, #1
 8005748:	4013      	ands	r3, r2
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d1ee      	bne.n	800572e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2202      	movs	r2, #2
 8005756:	4013      	ands	r3, r2
 8005758:	d009      	beq.n	800576e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800575a:	4b83      	ldr	r3, [pc, #524]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	22f0      	movs	r2, #240	; 0xf0
 8005760:	4393      	bics	r3, r2
 8005762:	0019      	movs	r1, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	4b7f      	ldr	r3, [pc, #508]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 800576a:	430a      	orrs	r2, r1
 800576c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2201      	movs	r2, #1
 8005774:	4013      	ands	r3, r2
 8005776:	d100      	bne.n	800577a <HAL_RCC_ClockConfig+0x8a>
 8005778:	e089      	b.n	800588e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b02      	cmp	r3, #2
 8005780:	d107      	bne.n	8005792 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005782:	4b79      	ldr	r3, [pc, #484]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	2380      	movs	r3, #128	; 0x80
 8005788:	029b      	lsls	r3, r3, #10
 800578a:	4013      	ands	r3, r2
 800578c:	d120      	bne.n	80057d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e0e1      	b.n	8005956 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b03      	cmp	r3, #3
 8005798:	d107      	bne.n	80057aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800579a:	4b73      	ldr	r3, [pc, #460]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	2380      	movs	r3, #128	; 0x80
 80057a0:	049b      	lsls	r3, r3, #18
 80057a2:	4013      	ands	r3, r2
 80057a4:	d114      	bne.n	80057d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e0d5      	b.n	8005956 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d106      	bne.n	80057c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057b2:	4b6d      	ldr	r3, [pc, #436]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2204      	movs	r2, #4
 80057b8:	4013      	ands	r3, r2
 80057ba:	d109      	bne.n	80057d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0ca      	b.n	8005956 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80057c0:	4b69      	ldr	r3, [pc, #420]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	2380      	movs	r3, #128	; 0x80
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4013      	ands	r3, r2
 80057ca:	d101      	bne.n	80057d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0c2      	b.n	8005956 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057d0:	4b65      	ldr	r3, [pc, #404]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	2203      	movs	r2, #3
 80057d6:	4393      	bics	r3, r2
 80057d8:	0019      	movs	r1, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	4b62      	ldr	r3, [pc, #392]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 80057e0:	430a      	orrs	r2, r1
 80057e2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057e4:	f7fe fbd0 	bl	8003f88 <HAL_GetTick>
 80057e8:	0003      	movs	r3, r0
 80057ea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d111      	bne.n	8005818 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057f4:	e009      	b.n	800580a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f6:	f7fe fbc7 	bl	8003f88 <HAL_GetTick>
 80057fa:	0002      	movs	r2, r0
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	4a58      	ldr	r2, [pc, #352]	; (8005964 <HAL_RCC_ClockConfig+0x274>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d901      	bls.n	800580a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e0a5      	b.n	8005956 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800580a:	4b57      	ldr	r3, [pc, #348]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	220c      	movs	r2, #12
 8005810:	4013      	ands	r3, r2
 8005812:	2b08      	cmp	r3, #8
 8005814:	d1ef      	bne.n	80057f6 <HAL_RCC_ClockConfig+0x106>
 8005816:	e03a      	b.n	800588e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b03      	cmp	r3, #3
 800581e:	d111      	bne.n	8005844 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005820:	e009      	b.n	8005836 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005822:	f7fe fbb1 	bl	8003f88 <HAL_GetTick>
 8005826:	0002      	movs	r2, r0
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	4a4d      	ldr	r2, [pc, #308]	; (8005964 <HAL_RCC_ClockConfig+0x274>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e08f      	b.n	8005956 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005836:	4b4c      	ldr	r3, [pc, #304]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	220c      	movs	r2, #12
 800583c:	4013      	ands	r3, r2
 800583e:	2b0c      	cmp	r3, #12
 8005840:	d1ef      	bne.n	8005822 <HAL_RCC_ClockConfig+0x132>
 8005842:	e024      	b.n	800588e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d11b      	bne.n	8005884 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800584c:	e009      	b.n	8005862 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800584e:	f7fe fb9b 	bl	8003f88 <HAL_GetTick>
 8005852:	0002      	movs	r2, r0
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	4a42      	ldr	r2, [pc, #264]	; (8005964 <HAL_RCC_ClockConfig+0x274>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e079      	b.n	8005956 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005862:	4b41      	ldr	r3, [pc, #260]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	220c      	movs	r2, #12
 8005868:	4013      	ands	r3, r2
 800586a:	2b04      	cmp	r3, #4
 800586c:	d1ef      	bne.n	800584e <HAL_RCC_ClockConfig+0x15e>
 800586e:	e00e      	b.n	800588e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005870:	f7fe fb8a 	bl	8003f88 <HAL_GetTick>
 8005874:	0002      	movs	r2, r0
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	4a3a      	ldr	r2, [pc, #232]	; (8005964 <HAL_RCC_ClockConfig+0x274>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e068      	b.n	8005956 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005884:	4b38      	ldr	r3, [pc, #224]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	220c      	movs	r2, #12
 800588a:	4013      	ands	r3, r2
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800588e:	4b34      	ldr	r3, [pc, #208]	; (8005960 <HAL_RCC_ClockConfig+0x270>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2201      	movs	r2, #1
 8005894:	4013      	ands	r3, r2
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d21e      	bcs.n	80058da <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589c:	4b30      	ldr	r3, [pc, #192]	; (8005960 <HAL_RCC_ClockConfig+0x270>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2201      	movs	r2, #1
 80058a2:	4393      	bics	r3, r2
 80058a4:	0019      	movs	r1, r3
 80058a6:	4b2e      	ldr	r3, [pc, #184]	; (8005960 <HAL_RCC_ClockConfig+0x270>)
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058ae:	f7fe fb6b 	bl	8003f88 <HAL_GetTick>
 80058b2:	0003      	movs	r3, r0
 80058b4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b6:	e009      	b.n	80058cc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b8:	f7fe fb66 	bl	8003f88 <HAL_GetTick>
 80058bc:	0002      	movs	r2, r0
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	4a28      	ldr	r2, [pc, #160]	; (8005964 <HAL_RCC_ClockConfig+0x274>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e044      	b.n	8005956 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058cc:	4b24      	ldr	r3, [pc, #144]	; (8005960 <HAL_RCC_ClockConfig+0x270>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2201      	movs	r2, #1
 80058d2:	4013      	ands	r3, r2
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d1ee      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2204      	movs	r2, #4
 80058e0:	4013      	ands	r3, r2
 80058e2:	d009      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058e4:	4b20      	ldr	r3, [pc, #128]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	4a20      	ldr	r2, [pc, #128]	; (800596c <HAL_RCC_ClockConfig+0x27c>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	0019      	movs	r1, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 80058f4:	430a      	orrs	r2, r1
 80058f6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2208      	movs	r2, #8
 80058fe:	4013      	ands	r3, r2
 8005900:	d00a      	beq.n	8005918 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005902:	4b19      	ldr	r3, [pc, #100]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	4a1a      	ldr	r2, [pc, #104]	; (8005970 <HAL_RCC_ClockConfig+0x280>)
 8005908:	4013      	ands	r3, r2
 800590a:	0019      	movs	r1, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	00da      	lsls	r2, r3, #3
 8005912:	4b15      	ldr	r3, [pc, #84]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 8005914:	430a      	orrs	r2, r1
 8005916:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005918:	f000 f832 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 800591c:	0001      	movs	r1, r0
 800591e:	4b12      	ldr	r3, [pc, #72]	; (8005968 <HAL_RCC_ClockConfig+0x278>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	091b      	lsrs	r3, r3, #4
 8005924:	220f      	movs	r2, #15
 8005926:	4013      	ands	r3, r2
 8005928:	4a12      	ldr	r2, [pc, #72]	; (8005974 <HAL_RCC_ClockConfig+0x284>)
 800592a:	5cd3      	ldrb	r3, [r2, r3]
 800592c:	000a      	movs	r2, r1
 800592e:	40da      	lsrs	r2, r3
 8005930:	4b11      	ldr	r3, [pc, #68]	; (8005978 <HAL_RCC_ClockConfig+0x288>)
 8005932:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005934:	4b11      	ldr	r3, [pc, #68]	; (800597c <HAL_RCC_ClockConfig+0x28c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	250b      	movs	r5, #11
 800593a:	197c      	adds	r4, r7, r5
 800593c:	0018      	movs	r0, r3
 800593e:	f7fe fadd 	bl	8003efc <HAL_InitTick>
 8005942:	0003      	movs	r3, r0
 8005944:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005946:	197b      	adds	r3, r7, r5
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800594e:	197b      	adds	r3, r7, r5
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	e000      	b.n	8005956 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	0018      	movs	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	b004      	add	sp, #16
 800595c:	bdb0      	pop	{r4, r5, r7, pc}
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	40022000 	.word	0x40022000
 8005964:	00001388 	.word	0x00001388
 8005968:	40021000 	.word	0x40021000
 800596c:	fffff8ff 	.word	0xfffff8ff
 8005970:	ffffc7ff 	.word	0xffffc7ff
 8005974:	0800d2cc 	.word	0x0800d2cc
 8005978:	20000000 	.word	0x20000000
 800597c:	20000004 	.word	0x20000004

08005980 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005980:	b5b0      	push	{r4, r5, r7, lr}
 8005982:	b08e      	sub	sp, #56	; 0x38
 8005984:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005986:	4b4c      	ldr	r3, [pc, #304]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800598c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800598e:	230c      	movs	r3, #12
 8005990:	4013      	ands	r3, r2
 8005992:	2b0c      	cmp	r3, #12
 8005994:	d014      	beq.n	80059c0 <HAL_RCC_GetSysClockFreq+0x40>
 8005996:	d900      	bls.n	800599a <HAL_RCC_GetSysClockFreq+0x1a>
 8005998:	e07b      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x112>
 800599a:	2b04      	cmp	r3, #4
 800599c:	d002      	beq.n	80059a4 <HAL_RCC_GetSysClockFreq+0x24>
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d00b      	beq.n	80059ba <HAL_RCC_GetSysClockFreq+0x3a>
 80059a2:	e076      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80059a4:	4b44      	ldr	r3, [pc, #272]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x138>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2210      	movs	r2, #16
 80059aa:	4013      	ands	r3, r2
 80059ac:	d002      	beq.n	80059b4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80059ae:	4b43      	ldr	r3, [pc, #268]	; (8005abc <HAL_RCC_GetSysClockFreq+0x13c>)
 80059b0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80059b2:	e07c      	b.n	8005aae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80059b4:	4b42      	ldr	r3, [pc, #264]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x140>)
 80059b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80059b8:	e079      	b.n	8005aae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059ba:	4b42      	ldr	r3, [pc, #264]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x144>)
 80059bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80059be:	e076      	b.n	8005aae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	0c9a      	lsrs	r2, r3, #18
 80059c4:	230f      	movs	r3, #15
 80059c6:	401a      	ands	r2, r3
 80059c8:	4b3f      	ldr	r3, [pc, #252]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x148>)
 80059ca:	5c9b      	ldrb	r3, [r3, r2]
 80059cc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	0d9a      	lsrs	r2, r3, #22
 80059d2:	2303      	movs	r3, #3
 80059d4:	4013      	ands	r3, r2
 80059d6:	3301      	adds	r3, #1
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059da:	4b37      	ldr	r3, [pc, #220]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x138>)
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	2380      	movs	r3, #128	; 0x80
 80059e0:	025b      	lsls	r3, r3, #9
 80059e2:	4013      	ands	r3, r2
 80059e4:	d01a      	beq.n	8005a1c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	4a35      	ldr	r2, [pc, #212]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x144>)
 80059f0:	2300      	movs	r3, #0
 80059f2:	69b8      	ldr	r0, [r7, #24]
 80059f4:	69f9      	ldr	r1, [r7, #28]
 80059f6:	f7fa fd77 	bl	80004e8 <__aeabi_lmul>
 80059fa:	0002      	movs	r2, r0
 80059fc:	000b      	movs	r3, r1
 80059fe:	0010      	movs	r0, r2
 8005a00:	0019      	movs	r1, r3
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f7fa fd4b 	bl	80004a8 <__aeabi_uldivmod>
 8005a12:	0002      	movs	r2, r0
 8005a14:	000b      	movs	r3, r1
 8005a16:	0013      	movs	r3, r2
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1a:	e037      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005a1c:	4b26      	ldr	r3, [pc, #152]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2210      	movs	r2, #16
 8005a22:	4013      	ands	r3, r2
 8005a24:	d01a      	beq.n	8005a5c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	4a23      	ldr	r2, [pc, #140]	; (8005abc <HAL_RCC_GetSysClockFreq+0x13c>)
 8005a30:	2300      	movs	r3, #0
 8005a32:	68b8      	ldr	r0, [r7, #8]
 8005a34:	68f9      	ldr	r1, [r7, #12]
 8005a36:	f7fa fd57 	bl	80004e8 <__aeabi_lmul>
 8005a3a:	0002      	movs	r2, r0
 8005a3c:	000b      	movs	r3, r1
 8005a3e:	0010      	movs	r0, r2
 8005a40:	0019      	movs	r1, r3
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	603b      	str	r3, [r7, #0]
 8005a46:	2300      	movs	r3, #0
 8005a48:	607b      	str	r3, [r7, #4]
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f7fa fd2b 	bl	80004a8 <__aeabi_uldivmod>
 8005a52:	0002      	movs	r2, r0
 8005a54:	000b      	movs	r3, r1
 8005a56:	0013      	movs	r3, r2
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
 8005a5a:	e017      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	0018      	movs	r0, r3
 8005a60:	2300      	movs	r3, #0
 8005a62:	0019      	movs	r1, r3
 8005a64:	4a16      	ldr	r2, [pc, #88]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x140>)
 8005a66:	2300      	movs	r3, #0
 8005a68:	f7fa fd3e 	bl	80004e8 <__aeabi_lmul>
 8005a6c:	0002      	movs	r2, r0
 8005a6e:	000b      	movs	r3, r1
 8005a70:	0010      	movs	r0, r2
 8005a72:	0019      	movs	r1, r3
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	001c      	movs	r4, r3
 8005a78:	2300      	movs	r3, #0
 8005a7a:	001d      	movs	r5, r3
 8005a7c:	0022      	movs	r2, r4
 8005a7e:	002b      	movs	r3, r5
 8005a80:	f7fa fd12 	bl	80004a8 <__aeabi_uldivmod>
 8005a84:	0002      	movs	r2, r0
 8005a86:	000b      	movs	r3, r1
 8005a88:	0013      	movs	r3, r2
 8005a8a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a90:	e00d      	b.n	8005aae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005a92:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	0b5b      	lsrs	r3, r3, #13
 8005a98:	2207      	movs	r2, #7
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	2280      	movs	r2, #128	; 0x80
 8005aa4:	0212      	lsls	r2, r2, #8
 8005aa6:	409a      	lsls	r2, r3
 8005aa8:	0013      	movs	r3, r2
 8005aaa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005aac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	b00e      	add	sp, #56	; 0x38
 8005ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	003d0900 	.word	0x003d0900
 8005ac0:	00f42400 	.word	0x00f42400
 8005ac4:	007a1200 	.word	0x007a1200
 8005ac8:	0800d2e4 	.word	0x0800d2e4

08005acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ad0:	4b02      	ldr	r3, [pc, #8]	; (8005adc <HAL_RCC_GetHCLKFreq+0x10>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
}
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	20000000 	.word	0x20000000

08005ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ae4:	f7ff fff2 	bl	8005acc <HAL_RCC_GetHCLKFreq>
 8005ae8:	0001      	movs	r1, r0
 8005aea:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	0a1b      	lsrs	r3, r3, #8
 8005af0:	2207      	movs	r2, #7
 8005af2:	4013      	ands	r3, r2
 8005af4:	4a04      	ldr	r2, [pc, #16]	; (8005b08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005af6:	5cd3      	ldrb	r3, [r2, r3]
 8005af8:	40d9      	lsrs	r1, r3
 8005afa:	000b      	movs	r3, r1
}
 8005afc:	0018      	movs	r0, r3
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	46c0      	nop			; (mov r8, r8)
 8005b04:	40021000 	.word	0x40021000
 8005b08:	0800d2dc 	.word	0x0800d2dc

08005b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b10:	f7ff ffdc 	bl	8005acc <HAL_RCC_GetHCLKFreq>
 8005b14:	0001      	movs	r1, r0
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	0adb      	lsrs	r3, r3, #11
 8005b1c:	2207      	movs	r2, #7
 8005b1e:	4013      	ands	r3, r2
 8005b20:	4a04      	ldr	r2, [pc, #16]	; (8005b34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b22:	5cd3      	ldrb	r3, [r2, r3]
 8005b24:	40d9      	lsrs	r1, r3
 8005b26:	000b      	movs	r3, r1
}
 8005b28:	0018      	movs	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	40021000 	.word	0x40021000
 8005b34:	0800d2dc 	.word	0x0800d2dc

08005b38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005b40:	2317      	movs	r3, #23
 8005b42:	18fb      	adds	r3, r7, r3
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	4013      	ands	r3, r2
 8005b50:	d106      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	2380      	movs	r3, #128	; 0x80
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d100      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005b5e:	e104      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b60:	4bb1      	ldr	r3, [pc, #708]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b64:	2380      	movs	r3, #128	; 0x80
 8005b66:	055b      	lsls	r3, r3, #21
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d10a      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b6c:	4bae      	ldr	r3, [pc, #696]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b70:	4bad      	ldr	r3, [pc, #692]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b72:	2180      	movs	r1, #128	; 0x80
 8005b74:	0549      	lsls	r1, r1, #21
 8005b76:	430a      	orrs	r2, r1
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005b7a:	2317      	movs	r3, #23
 8005b7c:	18fb      	adds	r3, r7, r3
 8005b7e:	2201      	movs	r2, #1
 8005b80:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b82:	4baa      	ldr	r3, [pc, #680]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	2380      	movs	r3, #128	; 0x80
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d11a      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b8e:	4ba7      	ldr	r3, [pc, #668]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4ba6      	ldr	r3, [pc, #664]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b94:	2180      	movs	r1, #128	; 0x80
 8005b96:	0049      	lsls	r1, r1, #1
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b9c:	f7fe f9f4 	bl	8003f88 <HAL_GetTick>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba6:	f7fe f9ef 	bl	8003f88 <HAL_GetTick>
 8005baa:	0002      	movs	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b64      	cmp	r3, #100	; 0x64
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e133      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb8:	4b9c      	ldr	r3, [pc, #624]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	2380      	movs	r3, #128	; 0x80
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d0f0      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005bc4:	4b98      	ldr	r3, [pc, #608]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	23c0      	movs	r3, #192	; 0xc0
 8005bca:	039b      	lsls	r3, r3, #14
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	23c0      	movs	r3, #192	; 0xc0
 8005bd6:	039b      	lsls	r3, r3, #14
 8005bd8:	4013      	ands	r3, r2
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d107      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	23c0      	movs	r3, #192	; 0xc0
 8005be6:	039b      	lsls	r3, r3, #14
 8005be8:	4013      	ands	r3, r2
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d013      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	23c0      	movs	r3, #192	; 0xc0
 8005bf6:	029b      	lsls	r3, r3, #10
 8005bf8:	401a      	ands	r2, r3
 8005bfa:	23c0      	movs	r3, #192	; 0xc0
 8005bfc:	029b      	lsls	r3, r3, #10
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d10a      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c02:	4b89      	ldr	r3, [pc, #548]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	2380      	movs	r3, #128	; 0x80
 8005c08:	029b      	lsls	r3, r3, #10
 8005c0a:	401a      	ands	r2, r3
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	029b      	lsls	r3, r3, #10
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d101      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e103      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005c18:	4b83      	ldr	r3, [pc, #524]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c1c:	23c0      	movs	r3, #192	; 0xc0
 8005c1e:	029b      	lsls	r3, r3, #10
 8005c20:	4013      	ands	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d049      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	23c0      	movs	r3, #192	; 0xc0
 8005c30:	029b      	lsls	r3, r3, #10
 8005c32:	4013      	ands	r3, r2
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d004      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	4013      	ands	r3, r2
 8005c42:	d10d      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	23c0      	movs	r3, #192	; 0xc0
 8005c4a:	029b      	lsls	r3, r3, #10
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d034      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	2380      	movs	r3, #128	; 0x80
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d02e      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005c60:	4b71      	ldr	r3, [pc, #452]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c64:	4a72      	ldr	r2, [pc, #456]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005c66:	4013      	ands	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c6a:	4b6f      	ldr	r3, [pc, #444]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c6e:	4b6e      	ldr	r3, [pc, #440]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c70:	2180      	movs	r1, #128	; 0x80
 8005c72:	0309      	lsls	r1, r1, #12
 8005c74:	430a      	orrs	r2, r1
 8005c76:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c78:	4b6b      	ldr	r3, [pc, #428]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c7c:	4b6a      	ldr	r3, [pc, #424]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c7e:	496d      	ldr	r1, [pc, #436]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005c80:	400a      	ands	r2, r1
 8005c82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005c84:	4b68      	ldr	r3, [pc, #416]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	2380      	movs	r3, #128	; 0x80
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	4013      	ands	r3, r2
 8005c92:	d014      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c94:	f7fe f978 	bl	8003f88 <HAL_GetTick>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c9c:	e009      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c9e:	f7fe f973 	bl	8003f88 <HAL_GetTick>
 8005ca2:	0002      	movs	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	4a63      	ldr	r2, [pc, #396]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e0b6      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cb2:	4b5d      	ldr	r3, [pc, #372]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cb6:	2380      	movs	r3, #128	; 0x80
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d0ef      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	2380      	movs	r3, #128	; 0x80
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d01f      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	23c0      	movs	r3, #192	; 0xc0
 8005cd0:	029b      	lsls	r3, r3, #10
 8005cd2:	401a      	ands	r2, r3
 8005cd4:	23c0      	movs	r3, #192	; 0xc0
 8005cd6:	029b      	lsls	r3, r3, #10
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d10c      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005cdc:	4b52      	ldr	r3, [pc, #328]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a56      	ldr	r2, [pc, #344]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	0019      	movs	r1, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	23c0      	movs	r3, #192	; 0xc0
 8005cec:	039b      	lsls	r3, r3, #14
 8005cee:	401a      	ands	r2, r3
 8005cf0:	4b4d      	ldr	r3, [pc, #308]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	4b4c      	ldr	r3, [pc, #304]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cf8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	23c0      	movs	r3, #192	; 0xc0
 8005d00:	029b      	lsls	r3, r3, #10
 8005d02:	401a      	ands	r2, r3
 8005d04:	4b48      	ldr	r3, [pc, #288]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d06:	430a      	orrs	r2, r1
 8005d08:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	4013      	ands	r3, r2
 8005d12:	d01f      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	23c0      	movs	r3, #192	; 0xc0
 8005d1a:	029b      	lsls	r3, r3, #10
 8005d1c:	401a      	ands	r2, r3
 8005d1e:	23c0      	movs	r3, #192	; 0xc0
 8005d20:	029b      	lsls	r3, r3, #10
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d10c      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005d26:	4b40      	ldr	r3, [pc, #256]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a44      	ldr	r2, [pc, #272]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	0019      	movs	r1, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	23c0      	movs	r3, #192	; 0xc0
 8005d36:	039b      	lsls	r3, r3, #14
 8005d38:	401a      	ands	r2, r3
 8005d3a:	4b3b      	ldr	r3, [pc, #236]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	4b39      	ldr	r3, [pc, #228]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d42:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	23c0      	movs	r3, #192	; 0xc0
 8005d4a:	029b      	lsls	r3, r3, #10
 8005d4c:	401a      	ands	r2, r3
 8005d4e:	4b36      	ldr	r3, [pc, #216]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d50:	430a      	orrs	r2, r1
 8005d52:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d54:	2317      	movs	r3, #23
 8005d56:	18fb      	adds	r3, r7, r3
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d105      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d5e:	4b32      	ldr	r3, [pc, #200]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d62:	4b31      	ldr	r3, [pc, #196]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d64:	4936      	ldr	r1, [pc, #216]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005d66:	400a      	ands	r2, r1
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	4013      	ands	r3, r2
 8005d72:	d009      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d74:	4b2c      	ldr	r3, [pc, #176]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d78:	2203      	movs	r2, #3
 8005d7a:	4393      	bics	r3, r2
 8005d7c:	0019      	movs	r1, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	4b29      	ldr	r3, [pc, #164]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d84:	430a      	orrs	r2, r1
 8005d86:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d009      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d92:	4b25      	ldr	r3, [pc, #148]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d96:	220c      	movs	r2, #12
 8005d98:	4393      	bics	r3, r2
 8005d9a:	0019      	movs	r1, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691a      	ldr	r2, [r3, #16]
 8005da0:	4b21      	ldr	r3, [pc, #132]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005da2:	430a      	orrs	r2, r1
 8005da4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2204      	movs	r2, #4
 8005dac:	4013      	ands	r3, r2
 8005dae:	d009      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005db0:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db4:	4a23      	ldr	r2, [pc, #140]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	0019      	movs	r1, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2208      	movs	r2, #8
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d009      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dce:	4b16      	ldr	r3, [pc, #88]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	4a1d      	ldr	r2, [pc, #116]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	0019      	movs	r1, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699a      	ldr	r2, [r3, #24]
 8005ddc:	4b12      	ldr	r3, [pc, #72]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dde:	430a      	orrs	r2, r1
 8005de0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2240      	movs	r2, #64	; 0x40
 8005de8:	4013      	ands	r3, r2
 8005dea:	d009      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dec:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df0:	4a16      	ldr	r2, [pc, #88]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	0019      	movs	r1, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1a      	ldr	r2, [r3, #32]
 8005dfa:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2280      	movs	r2, #128	; 0x80
 8005e06:	4013      	ands	r3, r2
 8005e08:	d009      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005e0a:	4b07      	ldr	r3, [pc, #28]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0e:	4a10      	ldr	r2, [pc, #64]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	0019      	movs	r1, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	4b03      	ldr	r3, [pc, #12]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	0018      	movs	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b006      	add	sp, #24
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	40007000 	.word	0x40007000
 8005e30:	fffcffff 	.word	0xfffcffff
 8005e34:	fff7ffff 	.word	0xfff7ffff
 8005e38:	00001388 	.word	0x00001388
 8005e3c:	ffcfffff 	.word	0xffcfffff
 8005e40:	efffffff 	.word	0xefffffff
 8005e44:	fffff3ff 	.word	0xfffff3ff
 8005e48:	ffffcfff 	.word	0xffffcfff
 8005e4c:	fbffffff 	.word	0xfbffffff
 8005e50:	fff3ffff 	.word	0xfff3ffff

08005e54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e083      	b.n	8005f6e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d109      	bne.n	8005e82 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	2382      	movs	r3, #130	; 0x82
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d009      	beq.n	8005e8e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	61da      	str	r2, [r3, #28]
 8005e80:	e005      	b.n	8005e8e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2251      	movs	r2, #81	; 0x51
 8005e98:	5c9b      	ldrb	r3, [r3, r2]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d107      	bne.n	8005eb0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2250      	movs	r2, #80	; 0x50
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f7fd fc86 	bl	80037bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2251      	movs	r2, #81	; 0x51
 8005eb4:	2102      	movs	r1, #2
 8005eb6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2140      	movs	r1, #64	; 0x40
 8005ec4:	438a      	bics	r2, r1
 8005ec6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	2382      	movs	r3, #130	; 0x82
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	401a      	ands	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6899      	ldr	r1, [r3, #8]
 8005ed6:	2384      	movs	r3, #132	; 0x84
 8005ed8:	021b      	lsls	r3, r3, #8
 8005eda:	400b      	ands	r3, r1
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68d9      	ldr	r1, [r3, #12]
 8005ee2:	2380      	movs	r3, #128	; 0x80
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	400b      	ands	r3, r1
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	2102      	movs	r1, #2
 8005ef0:	400b      	ands	r3, r1
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	2101      	movs	r1, #1
 8005efa:	400b      	ands	r3, r1
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6999      	ldr	r1, [r3, #24]
 8005f02:	2380      	movs	r3, #128	; 0x80
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	400b      	ands	r3, r1
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	2138      	movs	r1, #56	; 0x38
 8005f10:	400b      	ands	r3, r1
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	2180      	movs	r1, #128	; 0x80
 8005f1a:	400b      	ands	r3, r1
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	0011      	movs	r1, r2
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f24:	2380      	movs	r3, #128	; 0x80
 8005f26:	019b      	lsls	r3, r3, #6
 8005f28:	401a      	ands	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	0c1b      	lsrs	r3, r3, #16
 8005f38:	2204      	movs	r2, #4
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	0019      	movs	r1, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	2210      	movs	r2, #16
 8005f44:	401a      	ands	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4907      	ldr	r1, [pc, #28]	; (8005f78 <HAL_SPI_Init+0x124>)
 8005f5a:	400a      	ands	r2, r1
 8005f5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2251      	movs	r2, #81	; 0x51
 8005f68:	2101      	movs	r1, #1
 8005f6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	0018      	movs	r0, r3
 8005f70:	46bd      	mov	sp, r7
 8005f72:	b002      	add	sp, #8
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	fffff7ff 	.word	0xfffff7ff

08005f7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	1dbb      	adds	r3, r7, #6
 8005f8a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f8c:	231f      	movs	r3, #31
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2250      	movs	r2, #80	; 0x50
 8005f98:	5c9b      	ldrb	r3, [r3, r2]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_SPI_Transmit+0x26>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e145      	b.n	800622e <HAL_SPI_Transmit+0x2b2>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2250      	movs	r2, #80	; 0x50
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005faa:	f7fd ffed 	bl	8003f88 <HAL_GetTick>
 8005fae:	0003      	movs	r3, r0
 8005fb0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005fb2:	2316      	movs	r3, #22
 8005fb4:	18fb      	adds	r3, r7, r3
 8005fb6:	1dba      	adds	r2, r7, #6
 8005fb8:	8812      	ldrh	r2, [r2, #0]
 8005fba:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2251      	movs	r2, #81	; 0x51
 8005fc0:	5c9b      	ldrb	r3, [r3, r2]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d004      	beq.n	8005fd2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005fc8:	231f      	movs	r3, #31
 8005fca:	18fb      	adds	r3, r7, r3
 8005fcc:	2202      	movs	r2, #2
 8005fce:	701a      	strb	r2, [r3, #0]
    goto error;
 8005fd0:	e126      	b.n	8006220 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_SPI_Transmit+0x64>
 8005fd8:	1dbb      	adds	r3, r7, #6
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d104      	bne.n	8005fea <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005fe0:	231f      	movs	r3, #31
 8005fe2:	18fb      	adds	r3, r7, r3
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005fe8:	e11a      	b.n	8006220 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2251      	movs	r2, #81	; 0x51
 8005fee:	2103      	movs	r1, #3
 8005ff0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	1dba      	adds	r2, r7, #6
 8006002:	8812      	ldrh	r2, [r2, #0]
 8006004:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	1dba      	adds	r2, r7, #6
 800600a:	8812      	ldrh	r2, [r2, #0]
 800600c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	2380      	movs	r3, #128	; 0x80
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	429a      	cmp	r2, r3
 8006036:	d110      	bne.n	800605a <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2140      	movs	r1, #64	; 0x40
 8006044:	438a      	bics	r2, r1
 8006046:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2180      	movs	r1, #128	; 0x80
 8006054:	01c9      	lsls	r1, r1, #7
 8006056:	430a      	orrs	r2, r1
 8006058:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2240      	movs	r2, #64	; 0x40
 8006062:	4013      	ands	r3, r2
 8006064:	2b40      	cmp	r3, #64	; 0x40
 8006066:	d007      	beq.n	8006078 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2140      	movs	r1, #64	; 0x40
 8006074:	430a      	orrs	r2, r1
 8006076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	2380      	movs	r3, #128	; 0x80
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	429a      	cmp	r2, r3
 8006082:	d152      	bne.n	800612a <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d004      	beq.n	8006096 <HAL_SPI_Transmit+0x11a>
 800608c:	2316      	movs	r3, #22
 800608e:	18fb      	adds	r3, r7, r3
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d143      	bne.n	800611e <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609a:	881a      	ldrh	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	1c9a      	adds	r2, r3, #2
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060ba:	e030      	b.n	800611e <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	2202      	movs	r2, #2
 80060c4:	4013      	ands	r3, r2
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d112      	bne.n	80060f0 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	881a      	ldrh	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	1c9a      	adds	r2, r3, #2
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80060ee:	e016      	b.n	800611e <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060f0:	f7fd ff4a 	bl	8003f88 <HAL_GetTick>
 80060f4:	0002      	movs	r2, r0
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d802      	bhi.n	8006106 <HAL_SPI_Transmit+0x18a>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	d102      	bne.n	800610c <HAL_SPI_Transmit+0x190>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d108      	bne.n	800611e <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 800610c:	231f      	movs	r3, #31
 800610e:	18fb      	adds	r3, r7, r3
 8006110:	2203      	movs	r2, #3
 8006112:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2251      	movs	r2, #81	; 0x51
 8006118:	2101      	movs	r1, #1
 800611a:	5499      	strb	r1, [r3, r2]
          goto error;
 800611c:	e080      	b.n	8006220 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1c9      	bne.n	80060bc <HAL_SPI_Transmit+0x140>
 8006128:	e053      	b.n	80061d2 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d004      	beq.n	800613c <HAL_SPI_Transmit+0x1c0>
 8006132:	2316      	movs	r3, #22
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d145      	bne.n	80061c8 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	330c      	adds	r3, #12
 8006146:	7812      	ldrb	r2, [r2, #0]
 8006148:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006162:	e031      	b.n	80061c8 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	2202      	movs	r2, #2
 800616c:	4013      	ands	r3, r2
 800616e:	2b02      	cmp	r3, #2
 8006170:	d113      	bne.n	800619a <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	330c      	adds	r3, #12
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	86da      	strh	r2, [r3, #54]	; 0x36
 8006198:	e016      	b.n	80061c8 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800619a:	f7fd fef5 	bl	8003f88 <HAL_GetTick>
 800619e:	0002      	movs	r2, r0
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d802      	bhi.n	80061b0 <HAL_SPI_Transmit+0x234>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	3301      	adds	r3, #1
 80061ae:	d102      	bne.n	80061b6 <HAL_SPI_Transmit+0x23a>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d108      	bne.n	80061c8 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 80061b6:	231f      	movs	r3, #31
 80061b8:	18fb      	adds	r3, r7, r3
 80061ba:	2203      	movs	r2, #3
 80061bc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2251      	movs	r2, #81	; 0x51
 80061c2:	2101      	movs	r1, #1
 80061c4:	5499      	strb	r1, [r3, r2]
          goto error;
 80061c6:	e02b      	b.n	8006220 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1c8      	bne.n	8006164 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	0018      	movs	r0, r3
 80061da:	f000 fc1f 	bl	8006a1c <SPI_EndRxTxTransaction>
 80061de:	1e03      	subs	r3, r0, #0
 80061e0:	d002      	beq.n	80061e8 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2220      	movs	r2, #32
 80061e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061f0:	2300      	movs	r3, #0
 80061f2:	613b      	str	r3, [r7, #16]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	613b      	str	r3, [r7, #16]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	2b00      	cmp	r3, #0
 800620c:	d004      	beq.n	8006218 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 800620e:	231f      	movs	r3, #31
 8006210:	18fb      	adds	r3, r7, r3
 8006212:	2201      	movs	r2, #1
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	e003      	b.n	8006220 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2251      	movs	r2, #81	; 0x51
 800621c:	2101      	movs	r1, #1
 800621e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2250      	movs	r2, #80	; 0x50
 8006224:	2100      	movs	r1, #0
 8006226:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006228:	231f      	movs	r3, #31
 800622a:	18fb      	adds	r3, r7, r3
 800622c:	781b      	ldrb	r3, [r3, #0]
}
 800622e:	0018      	movs	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	b008      	add	sp, #32
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b089      	sub	sp, #36	; 0x24
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	1dbb      	adds	r3, r7, #6
 8006246:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006248:	2117      	movs	r1, #23
 800624a:	187b      	adds	r3, r7, r1
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2251      	movs	r2, #81	; 0x51
 8006254:	5c9b      	ldrb	r3, [r3, r2]
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b01      	cmp	r3, #1
 800625a:	d003      	beq.n	8006264 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800625c:	187b      	adds	r3, r7, r1
 800625e:	2202      	movs	r2, #2
 8006260:	701a      	strb	r2, [r3, #0]
    goto error;
 8006262:	e109      	b.n	8006478 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	2382      	movs	r3, #130	; 0x82
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	429a      	cmp	r2, r3
 800626e:	d113      	bne.n	8006298 <HAL_SPI_Receive+0x60>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10f      	bne.n	8006298 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2251      	movs	r2, #81	; 0x51
 800627c:	2104      	movs	r1, #4
 800627e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006280:	1dbb      	adds	r3, r7, #6
 8006282:	881c      	ldrh	r4, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	0023      	movs	r3, r4
 8006290:	f000 f900 	bl	8006494 <HAL_SPI_TransmitReceive>
 8006294:	0003      	movs	r3, r0
 8006296:	e0f6      	b.n	8006486 <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2250      	movs	r2, #80	; 0x50
 800629c:	5c9b      	ldrb	r3, [r3, r2]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <HAL_SPI_Receive+0x6e>
 80062a2:	2302      	movs	r3, #2
 80062a4:	e0ef      	b.n	8006486 <HAL_SPI_Receive+0x24e>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2250      	movs	r2, #80	; 0x50
 80062aa:	2101      	movs	r1, #1
 80062ac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062ae:	f7fd fe6b 	bl	8003f88 <HAL_GetTick>
 80062b2:	0003      	movs	r3, r0
 80062b4:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <HAL_SPI_Receive+0x8c>
 80062bc:	1dbb      	adds	r3, r7, #6
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80062c4:	2317      	movs	r3, #23
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	2201      	movs	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80062cc:	e0d4      	b.n	8006478 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2251      	movs	r2, #81	; 0x51
 80062d2:	2104      	movs	r1, #4
 80062d4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1dba      	adds	r2, r7, #6
 80062e6:	8812      	ldrh	r2, [r2, #0]
 80062e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1dba      	adds	r2, r7, #6
 80062ee:	8812      	ldrh	r2, [r2, #0]
 80062f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	2380      	movs	r3, #128	; 0x80
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	429a      	cmp	r2, r3
 800631a:	d10f      	bne.n	800633c <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2140      	movs	r1, #64	; 0x40
 8006328:	438a      	bics	r2, r1
 800632a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4956      	ldr	r1, [pc, #344]	; (8006490 <HAL_SPI_Receive+0x258>)
 8006338:	400a      	ands	r2, r1
 800633a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2240      	movs	r2, #64	; 0x40
 8006344:	4013      	ands	r3, r2
 8006346:	2b40      	cmp	r3, #64	; 0x40
 8006348:	d007      	beq.n	800635a <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2140      	movs	r1, #64	; 0x40
 8006356:	430a      	orrs	r2, r1
 8006358:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d000      	beq.n	8006364 <HAL_SPI_Receive+0x12c>
 8006362:	e06c      	b.n	800643e <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006364:	e033      	b.n	80063ce <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2201      	movs	r2, #1
 800636e:	4013      	ands	r3, r2
 8006370:	2b01      	cmp	r3, #1
 8006372:	d115      	bne.n	80063a0 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	001a      	movs	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	7812      	ldrb	r2, [r2, #0]
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800639e:	e016      	b.n	80063ce <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063a0:	f7fd fdf2 	bl	8003f88 <HAL_GetTick>
 80063a4:	0002      	movs	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d802      	bhi.n	80063b6 <HAL_SPI_Receive+0x17e>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	3301      	adds	r3, #1
 80063b4:	d102      	bne.n	80063bc <HAL_SPI_Receive+0x184>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d108      	bne.n	80063ce <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 80063bc:	2317      	movs	r3, #23
 80063be:	18fb      	adds	r3, r7, r3
 80063c0:	2203      	movs	r2, #3
 80063c2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2251      	movs	r2, #81	; 0x51
 80063c8:	2101      	movs	r1, #1
 80063ca:	5499      	strb	r1, [r3, r2]
          goto error;
 80063cc:	e054      	b.n	8006478 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1c6      	bne.n	8006366 <HAL_SPI_Receive+0x12e>
 80063d8:	e036      	b.n	8006448 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2201      	movs	r2, #1
 80063e2:	4013      	ands	r3, r2
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d113      	bne.n	8006410 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f2:	b292      	uxth	r2, r2
 80063f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	1c9a      	adds	r2, r3, #2
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800640e:	e016      	b.n	800643e <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006410:	f7fd fdba 	bl	8003f88 <HAL_GetTick>
 8006414:	0002      	movs	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d802      	bhi.n	8006426 <HAL_SPI_Receive+0x1ee>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	3301      	adds	r3, #1
 8006424:	d102      	bne.n	800642c <HAL_SPI_Receive+0x1f4>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d108      	bne.n	800643e <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 800642c:	2317      	movs	r3, #23
 800642e:	18fb      	adds	r3, r7, r3
 8006430:	2203      	movs	r2, #3
 8006432:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2251      	movs	r2, #81	; 0x51
 8006438:	2101      	movs	r1, #1
 800643a:	5499      	strb	r1, [r3, r2]
          goto error;
 800643c:	e01c      	b.n	8006478 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1c8      	bne.n	80063da <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	0018      	movs	r0, r3
 8006450:	f000 fa7a 	bl	8006948 <SPI_EndRxTransaction>
 8006454:	1e03      	subs	r3, r0, #0
 8006456:	d002      	beq.n	800645e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006462:	2b00      	cmp	r3, #0
 8006464:	d004      	beq.n	8006470 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8006466:	2317      	movs	r3, #23
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	2201      	movs	r2, #1
 800646c:	701a      	strb	r2, [r3, #0]
 800646e:	e003      	b.n	8006478 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2251      	movs	r2, #81	; 0x51
 8006474:	2101      	movs	r1, #1
 8006476:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2250      	movs	r2, #80	; 0x50
 800647c:	2100      	movs	r1, #0
 800647e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006480:	2317      	movs	r3, #23
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	781b      	ldrb	r3, [r3, #0]
}
 8006486:	0018      	movs	r0, r3
 8006488:	46bd      	mov	sp, r7
 800648a:	b007      	add	sp, #28
 800648c:	bd90      	pop	{r4, r7, pc}
 800648e:	46c0      	nop			; (mov r8, r8)
 8006490:	ffffbfff 	.word	0xffffbfff

08006494 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08c      	sub	sp, #48	; 0x30
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	001a      	movs	r2, r3
 80064a2:	1cbb      	adds	r3, r7, #2
 80064a4:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064a6:	2301      	movs	r3, #1
 80064a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064aa:	232b      	movs	r3, #43	; 0x2b
 80064ac:	18fb      	adds	r3, r7, r3
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2250      	movs	r2, #80	; 0x50
 80064b6:	5c9b      	ldrb	r3, [r3, r2]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <HAL_SPI_TransmitReceive+0x2c>
 80064bc:	2302      	movs	r3, #2
 80064be:	e1b0      	b.n	8006822 <HAL_SPI_TransmitReceive+0x38e>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2250      	movs	r2, #80	; 0x50
 80064c4:	2101      	movs	r1, #1
 80064c6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064c8:	f7fd fd5e 	bl	8003f88 <HAL_GetTick>
 80064cc:	0003      	movs	r3, r0
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064d0:	2023      	movs	r0, #35	; 0x23
 80064d2:	183b      	adds	r3, r7, r0
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	2151      	movs	r1, #81	; 0x51
 80064d8:	5c52      	ldrb	r2, [r2, r1]
 80064da:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80064e2:	231a      	movs	r3, #26
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	1cba      	adds	r2, r7, #2
 80064e8:	8812      	ldrh	r2, [r2, #0]
 80064ea:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064ec:	183b      	adds	r3, r7, r0
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d011      	beq.n	8006518 <HAL_SPI_TransmitReceive+0x84>
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	2382      	movs	r3, #130	; 0x82
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d107      	bne.n	800650e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d103      	bne.n	800650e <HAL_SPI_TransmitReceive+0x7a>
 8006506:	183b      	adds	r3, r7, r0
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b04      	cmp	r3, #4
 800650c:	d004      	beq.n	8006518 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800650e:	232b      	movs	r3, #43	; 0x2b
 8006510:	18fb      	adds	r3, r7, r3
 8006512:	2202      	movs	r2, #2
 8006514:	701a      	strb	r2, [r3, #0]
    goto error;
 8006516:	e17d      	b.n	8006814 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d006      	beq.n	800652c <HAL_SPI_TransmitReceive+0x98>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <HAL_SPI_TransmitReceive+0x98>
 8006524:	1cbb      	adds	r3, r7, #2
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d104      	bne.n	8006536 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800652c:	232b      	movs	r3, #43	; 0x2b
 800652e:	18fb      	adds	r3, r7, r3
 8006530:	2201      	movs	r2, #1
 8006532:	701a      	strb	r2, [r3, #0]
    goto error;
 8006534:	e16e      	b.n	8006814 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2251      	movs	r2, #81	; 0x51
 800653a:	5c9b      	ldrb	r3, [r3, r2]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b04      	cmp	r3, #4
 8006540:	d003      	beq.n	800654a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2251      	movs	r2, #81	; 0x51
 8006546:	2105      	movs	r1, #5
 8006548:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1cba      	adds	r2, r7, #2
 800655a:	8812      	ldrh	r2, [r2, #0]
 800655c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1cba      	adds	r2, r7, #2
 8006562:	8812      	ldrh	r2, [r2, #0]
 8006564:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	1cba      	adds	r2, r7, #2
 8006570:	8812      	ldrh	r2, [r2, #0]
 8006572:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	1cba      	adds	r2, r7, #2
 8006578:	8812      	ldrh	r2, [r2, #0]
 800657a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2240      	movs	r2, #64	; 0x40
 8006590:	4013      	ands	r3, r2
 8006592:	2b40      	cmp	r3, #64	; 0x40
 8006594:	d007      	beq.n	80065a6 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2140      	movs	r1, #64	; 0x40
 80065a2:	430a      	orrs	r2, r1
 80065a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	2380      	movs	r3, #128	; 0x80
 80065ac:	011b      	lsls	r3, r3, #4
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d000      	beq.n	80065b4 <HAL_SPI_TransmitReceive+0x120>
 80065b2:	e07f      	b.n	80066b4 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x134>
 80065bc:	231a      	movs	r3, #26
 80065be:	18fb      	adds	r3, r7, r3
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d000      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x134>
 80065c6:	e06a      	b.n	800669e <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065cc:	881a      	ldrh	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	1c9a      	adds	r2, r3, #2
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ec:	e057      	b.n	800669e <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2202      	movs	r2, #2
 80065f6:	4013      	ands	r3, r2
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d11b      	bne.n	8006634 <HAL_SPI_TransmitReceive+0x1a0>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d016      	beq.n	8006634 <HAL_SPI_TransmitReceive+0x1a0>
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	2b01      	cmp	r3, #1
 800660a:	d113      	bne.n	8006634 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	881a      	ldrh	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	1c9a      	adds	r2, r3, #2
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	2201      	movs	r2, #1
 800663c:	4013      	ands	r3, r2
 800663e:	2b01      	cmp	r3, #1
 8006640:	d119      	bne.n	8006676 <HAL_SPI_TransmitReceive+0x1e2>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006646:	b29b      	uxth	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d014      	beq.n	8006676 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	b292      	uxth	r2, r2
 8006658:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665e:	1c9a      	adds	r2, r3, #2
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006668:	b29b      	uxth	r3, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006672:	2301      	movs	r3, #1
 8006674:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006676:	f7fd fc87 	bl	8003f88 <HAL_GetTick>
 800667a:	0002      	movs	r2, r0
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006682:	429a      	cmp	r2, r3
 8006684:	d80b      	bhi.n	800669e <HAL_SPI_TransmitReceive+0x20a>
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	3301      	adds	r3, #1
 800668a:	d008      	beq.n	800669e <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 800668c:	232b      	movs	r3, #43	; 0x2b
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	2203      	movs	r2, #3
 8006692:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2251      	movs	r2, #81	; 0x51
 8006698:	2101      	movs	r1, #1
 800669a:	5499      	strb	r1, [r3, r2]
        goto error;
 800669c:	e0ba      	b.n	8006814 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1a2      	bne.n	80065ee <HAL_SPI_TransmitReceive+0x15a>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d19d      	bne.n	80065ee <HAL_SPI_TransmitReceive+0x15a>
 80066b2:	e083      	b.n	80067bc <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x234>
 80066bc:	231a      	movs	r3, #26
 80066be:	18fb      	adds	r3, r7, r3
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d000      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x234>
 80066c6:	e06f      	b.n	80067a8 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	7812      	ldrb	r2, [r2, #0]
 80066d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ee:	e05b      	b.n	80067a8 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	2202      	movs	r2, #2
 80066f8:	4013      	ands	r3, r2
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d11c      	bne.n	8006738 <HAL_SPI_TransmitReceive+0x2a4>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d017      	beq.n	8006738 <HAL_SPI_TransmitReceive+0x2a4>
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	2b01      	cmp	r3, #1
 800670c:	d114      	bne.n	8006738 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	330c      	adds	r3, #12
 8006718:	7812      	ldrb	r2, [r2, #0]
 800671a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2201      	movs	r2, #1
 8006740:	4013      	ands	r3, r2
 8006742:	2b01      	cmp	r3, #1
 8006744:	d119      	bne.n	800677a <HAL_SPI_TransmitReceive+0x2e6>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800674a:	b29b      	uxth	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d014      	beq.n	800677a <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676c:	b29b      	uxth	r3, r3
 800676e:	3b01      	subs	r3, #1
 8006770:	b29a      	uxth	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006776:	2301      	movs	r3, #1
 8006778:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800677a:	f7fd fc05 	bl	8003f88 <HAL_GetTick>
 800677e:	0002      	movs	r2, r0
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006786:	429a      	cmp	r2, r3
 8006788:	d802      	bhi.n	8006790 <HAL_SPI_TransmitReceive+0x2fc>
 800678a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678c:	3301      	adds	r3, #1
 800678e:	d102      	bne.n	8006796 <HAL_SPI_TransmitReceive+0x302>
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	2b00      	cmp	r3, #0
 8006794:	d108      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8006796:	232b      	movs	r3, #43	; 0x2b
 8006798:	18fb      	adds	r3, r7, r3
 800679a:	2203      	movs	r2, #3
 800679c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2251      	movs	r2, #81	; 0x51
 80067a2:	2101      	movs	r1, #1
 80067a4:	5499      	strb	r1, [r3, r2]
        goto error;
 80067a6:	e035      	b.n	8006814 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d19e      	bne.n	80066f0 <HAL_SPI_TransmitReceive+0x25c>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d199      	bne.n	80066f0 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	0018      	movs	r0, r3
 80067c4:	f000 f92a 	bl	8006a1c <SPI_EndRxTxTransaction>
 80067c8:	1e03      	subs	r3, r0, #0
 80067ca:	d007      	beq.n	80067dc <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 80067cc:	232b      	movs	r3, #43	; 0x2b
 80067ce:	18fb      	adds	r3, r7, r3
 80067d0:	2201      	movs	r2, #1
 80067d2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80067da:	e01b      	b.n	8006814 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10a      	bne.n	80067fa <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8006802:	232b      	movs	r3, #43	; 0x2b
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	2201      	movs	r2, #1
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	e003      	b.n	8006814 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2251      	movs	r2, #81	; 0x51
 8006810:	2101      	movs	r1, #1
 8006812:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2250      	movs	r2, #80	; 0x50
 8006818:	2100      	movs	r1, #0
 800681a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800681c:	232b      	movs	r3, #43	; 0x2b
 800681e:	18fb      	adds	r3, r7, r3
 8006820:	781b      	ldrb	r3, [r3, #0]
}
 8006822:	0018      	movs	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	b00c      	add	sp, #48	; 0x30
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	1dfb      	adds	r3, r7, #7
 800683a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800683c:	f7fd fba4 	bl	8003f88 <HAL_GetTick>
 8006840:	0002      	movs	r2, r0
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	1a9b      	subs	r3, r3, r2
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	18d3      	adds	r3, r2, r3
 800684a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800684c:	f7fd fb9c 	bl	8003f88 <HAL_GetTick>
 8006850:	0003      	movs	r3, r0
 8006852:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006854:	4b3a      	ldr	r3, [pc, #232]	; (8006940 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	015b      	lsls	r3, r3, #5
 800685a:	0d1b      	lsrs	r3, r3, #20
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	4353      	muls	r3, r2
 8006860:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006862:	e058      	b.n	8006916 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	3301      	adds	r3, #1
 8006868:	d055      	beq.n	8006916 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800686a:	f7fd fb8d 	bl	8003f88 <HAL_GetTick>
 800686e:	0002      	movs	r2, r0
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	429a      	cmp	r2, r3
 8006878:	d902      	bls.n	8006880 <SPI_WaitFlagStateUntilTimeout+0x54>
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d142      	bne.n	8006906 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	21e0      	movs	r1, #224	; 0xe0
 800688c:	438a      	bics	r2, r1
 800688e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	2382      	movs	r3, #130	; 0x82
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	429a      	cmp	r2, r3
 800689a:	d113      	bne.n	80068c4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	2380      	movs	r3, #128	; 0x80
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d005      	beq.n	80068b4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d107      	bne.n	80068c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2140      	movs	r1, #64	; 0x40
 80068c0:	438a      	bics	r2, r1
 80068c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068c8:	2380      	movs	r3, #128	; 0x80
 80068ca:	019b      	lsls	r3, r3, #6
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d110      	bne.n	80068f2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	491a      	ldr	r1, [pc, #104]	; (8006944 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80068dc:	400a      	ands	r2, r1
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2180      	movs	r1, #128	; 0x80
 80068ec:	0189      	lsls	r1, r1, #6
 80068ee:	430a      	orrs	r2, r1
 80068f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2251      	movs	r2, #81	; 0x51
 80068f6:	2101      	movs	r1, #1
 80068f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2250      	movs	r2, #80	; 0x50
 80068fe:	2100      	movs	r1, #0
 8006900:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e017      	b.n	8006936 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	3b01      	subs	r3, #1
 8006914:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	4013      	ands	r3, r2
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	425a      	negs	r2, r3
 8006926:	4153      	adcs	r3, r2
 8006928:	b2db      	uxtb	r3, r3
 800692a:	001a      	movs	r2, r3
 800692c:	1dfb      	adds	r3, r7, #7
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	d197      	bne.n	8006864 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	0018      	movs	r0, r3
 8006938:	46bd      	mov	sp, r7
 800693a:	b008      	add	sp, #32
 800693c:	bd80      	pop	{r7, pc}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	20000000 	.word	0x20000000
 8006944:	ffffdfff 	.word	0xffffdfff

08006948 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af02      	add	r7, sp, #8
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	2382      	movs	r3, #130	; 0x82
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	429a      	cmp	r2, r3
 800695e:	d113      	bne.n	8006988 <SPI_EndRxTransaction+0x40>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	2380      	movs	r3, #128	; 0x80
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	429a      	cmp	r2, r3
 800696a:	d005      	beq.n	8006978 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	2380      	movs	r3, #128	; 0x80
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	429a      	cmp	r2, r3
 8006976:	d107      	bne.n	8006988 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2140      	movs	r1, #64	; 0x40
 8006984:	438a      	bics	r2, r1
 8006986:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	2382      	movs	r3, #130	; 0x82
 800698e:	005b      	lsls	r3, r3, #1
 8006990:	429a      	cmp	r2, r3
 8006992:	d12b      	bne.n	80069ec <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	2380      	movs	r3, #128	; 0x80
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	429a      	cmp	r2, r3
 800699e:	d012      	beq.n	80069c6 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	0013      	movs	r3, r2
 80069aa:	2200      	movs	r2, #0
 80069ac:	2180      	movs	r1, #128	; 0x80
 80069ae:	f7ff ff3d 	bl	800682c <SPI_WaitFlagStateUntilTimeout>
 80069b2:	1e03      	subs	r3, r0, #0
 80069b4:	d02d      	beq.n	8006a12 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ba:	2220      	movs	r2, #32
 80069bc:	431a      	orrs	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e026      	b.n	8006a14 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	0013      	movs	r3, r2
 80069d0:	2200      	movs	r2, #0
 80069d2:	2101      	movs	r1, #1
 80069d4:	f7ff ff2a 	bl	800682c <SPI_WaitFlagStateUntilTimeout>
 80069d8:	1e03      	subs	r3, r0, #0
 80069da:	d01a      	beq.n	8006a12 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e0:	2220      	movs	r2, #32
 80069e2:	431a      	orrs	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e013      	b.n	8006a14 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	0013      	movs	r3, r2
 80069f6:	2200      	movs	r2, #0
 80069f8:	2101      	movs	r1, #1
 80069fa:	f7ff ff17 	bl	800682c <SPI_WaitFlagStateUntilTimeout>
 80069fe:	1e03      	subs	r3, r0, #0
 8006a00:	d007      	beq.n	8006a12 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a06:	2220      	movs	r2, #32
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e000      	b.n	8006a14 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	0018      	movs	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b004      	add	sp, #16
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af02      	add	r7, sp, #8
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a28:	4b1d      	ldr	r3, [pc, #116]	; (8006aa0 <SPI_EndRxTxTransaction+0x84>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	491d      	ldr	r1, [pc, #116]	; (8006aa4 <SPI_EndRxTxTransaction+0x88>)
 8006a2e:	0018      	movs	r0, r3
 8006a30:	f7f9 fb86 	bl	8000140 <__udivsi3>
 8006a34:	0003      	movs	r3, r0
 8006a36:	001a      	movs	r2, r3
 8006a38:	0013      	movs	r3, r2
 8006a3a:	015b      	lsls	r3, r3, #5
 8006a3c:	1a9b      	subs	r3, r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	189b      	adds	r3, r3, r2
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	2382      	movs	r3, #130	; 0x82
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d112      	bne.n	8006a78 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	0013      	movs	r3, r2
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2180      	movs	r1, #128	; 0x80
 8006a60:	f7ff fee4 	bl	800682c <SPI_WaitFlagStateUntilTimeout>
 8006a64:	1e03      	subs	r3, r0, #0
 8006a66:	d016      	beq.n	8006a96 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e00f      	b.n	8006a98 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2280      	movs	r2, #128	; 0x80
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b80      	cmp	r3, #128	; 0x80
 8006a90:	d0f2      	beq.n	8006a78 <SPI_EndRxTxTransaction+0x5c>
 8006a92:	e000      	b.n	8006a96 <SPI_EndRxTxTransaction+0x7a>
        break;
 8006a94:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	0018      	movs	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b006      	add	sp, #24
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20000000 	.word	0x20000000
 8006aa4:	016e3600 	.word	0x016e3600

08006aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e032      	b.n	8006b20 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2239      	movs	r2, #57	; 0x39
 8006abe:	5c9b      	ldrb	r3, [r3, r2]
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d107      	bne.n	8006ad6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2238      	movs	r2, #56	; 0x38
 8006aca:	2100      	movs	r1, #0
 8006acc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f7fd f851 	bl	8003b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2239      	movs	r2, #57	; 0x39
 8006ada:	2102      	movs	r1, #2
 8006adc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	0019      	movs	r1, r3
 8006ae8:	0010      	movs	r0, r2
 8006aea:	f000 f971 	bl	8006dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	223e      	movs	r2, #62	; 0x3e
 8006af2:	2101      	movs	r1, #1
 8006af4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	223a      	movs	r2, #58	; 0x3a
 8006afa:	2101      	movs	r1, #1
 8006afc:	5499      	strb	r1, [r3, r2]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	223b      	movs	r2, #59	; 0x3b
 8006b02:	2101      	movs	r1, #1
 8006b04:	5499      	strb	r1, [r3, r2]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	223c      	movs	r2, #60	; 0x3c
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	5499      	strb	r1, [r3, r2]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	223d      	movs	r2, #61	; 0x3d
 8006b12:	2101      	movs	r1, #1
 8006b14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2239      	movs	r2, #57	; 0x39
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	0018      	movs	r0, r3
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b002      	add	sp, #8
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2239      	movs	r2, #57	; 0x39
 8006b34:	5c9b      	ldrb	r3, [r3, r2]
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d001      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e036      	b.n	8006bae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2239      	movs	r2, #57	; 0x39
 8006b44:	2102      	movs	r1, #2
 8006b46:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2101      	movs	r1, #1
 8006b54:	430a      	orrs	r2, r1
 8006b56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	2380      	movs	r3, #128	; 0x80
 8006b5e:	05db      	lsls	r3, r3, #23
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d009      	beq.n	8006b78 <HAL_TIM_Base_Start_IT+0x50>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a13      	ldr	r2, [pc, #76]	; (8006bb8 <HAL_TIM_Base_Start_IT+0x90>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d004      	beq.n	8006b78 <HAL_TIM_Base_Start_IT+0x50>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a12      	ldr	r2, [pc, #72]	; (8006bbc <HAL_TIM_Base_Start_IT+0x94>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d111      	bne.n	8006b9c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	2207      	movs	r2, #7
 8006b80:	4013      	ands	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b06      	cmp	r3, #6
 8006b88:	d010      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2101      	movs	r1, #1
 8006b96:	430a      	orrs	r2, r1
 8006b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9a:	e007      	b.n	8006bac <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	0018      	movs	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	b004      	add	sp, #16
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	40010800 	.word	0x40010800
 8006bbc:	40011400 	.word	0x40011400

08006bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d124      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	4013      	ands	r3, r2
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d11d      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2203      	movs	r2, #3
 8006bea:	4252      	negs	r2, r2
 8006bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	0018      	movs	r0, r3
 8006c04:	f000 f8cc 	bl	8006da0 <HAL_TIM_IC_CaptureCallback>
 8006c08:	e007      	b.n	8006c1a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f000 f8bf 	bl	8006d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	0018      	movs	r0, r3
 8006c16:	f000 f8cb 	bl	8006db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2204      	movs	r2, #4
 8006c28:	4013      	ands	r3, r2
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d125      	bne.n	8006c7a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	2204      	movs	r2, #4
 8006c36:	4013      	ands	r3, r2
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d11e      	bne.n	8006c7a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2205      	movs	r2, #5
 8006c42:	4252      	negs	r2, r2
 8006c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	23c0      	movs	r3, #192	; 0xc0
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4013      	ands	r3, r2
 8006c58:	d004      	beq.n	8006c64 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f000 f89f 	bl	8006da0 <HAL_TIM_IC_CaptureCallback>
 8006c62:	e007      	b.n	8006c74 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	0018      	movs	r0, r3
 8006c68:	f000 f892 	bl	8006d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f000 f89e 	bl	8006db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	2208      	movs	r2, #8
 8006c82:	4013      	ands	r3, r2
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d124      	bne.n	8006cd2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	2208      	movs	r2, #8
 8006c90:	4013      	ands	r3, r2
 8006c92:	2b08      	cmp	r3, #8
 8006c94:	d11d      	bne.n	8006cd2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2209      	movs	r2, #9
 8006c9c:	4252      	negs	r2, r2
 8006c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2204      	movs	r2, #4
 8006ca4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	2203      	movs	r2, #3
 8006cae:	4013      	ands	r3, r2
 8006cb0:	d004      	beq.n	8006cbc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	f000 f873 	bl	8006da0 <HAL_TIM_IC_CaptureCallback>
 8006cba:	e007      	b.n	8006ccc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f000 f866 	bl	8006d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	0018      	movs	r0, r3
 8006cc8:	f000 f872 	bl	8006db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	2210      	movs	r2, #16
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b10      	cmp	r3, #16
 8006cde:	d125      	bne.n	8006d2c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	2210      	movs	r2, #16
 8006ce8:	4013      	ands	r3, r2
 8006cea:	2b10      	cmp	r3, #16
 8006cec:	d11e      	bne.n	8006d2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2211      	movs	r2, #17
 8006cf4:	4252      	negs	r2, r2
 8006cf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2208      	movs	r2, #8
 8006cfc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69da      	ldr	r2, [r3, #28]
 8006d04:	23c0      	movs	r3, #192	; 0xc0
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4013      	ands	r3, r2
 8006d0a:	d004      	beq.n	8006d16 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	0018      	movs	r0, r3
 8006d10:	f000 f846 	bl	8006da0 <HAL_TIM_IC_CaptureCallback>
 8006d14:	e007      	b.n	8006d26 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f000 f839 	bl	8006d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	0018      	movs	r0, r3
 8006d22:	f000 f845 	bl	8006db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2201      	movs	r2, #1
 8006d34:	4013      	ands	r3, r2
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d10f      	bne.n	8006d5a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	2201      	movs	r2, #1
 8006d42:	4013      	ands	r3, r2
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d108      	bne.n	8006d5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	4252      	negs	r2, r2
 8006d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	0018      	movs	r0, r3
 8006d56:	f7fb fee1 	bl	8002b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	2240      	movs	r2, #64	; 0x40
 8006d62:	4013      	ands	r3, r2
 8006d64:	2b40      	cmp	r3, #64	; 0x40
 8006d66:	d10f      	bne.n	8006d88 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	2240      	movs	r2, #64	; 0x40
 8006d70:	4013      	ands	r3, r2
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d108      	bne.n	8006d88 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2241      	movs	r2, #65	; 0x41
 8006d7c:	4252      	negs	r2, r2
 8006d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	0018      	movs	r0, r3
 8006d84:	f000 f81c 	bl	8006dc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d88:	46c0      	nop			; (mov r8, r8)
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	b002      	add	sp, #8
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d98:	46c0      	nop			; (mov r8, r8)
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	b002      	add	sp, #8
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006da8:	46c0      	nop			; (mov r8, r8)
 8006daa:	46bd      	mov	sp, r7
 8006dac:	b002      	add	sp, #8
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006db8:	46c0      	nop			; (mov r8, r8)
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	b002      	add	sp, #8
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dc8:	46c0      	nop			; (mov r8, r8)
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b002      	add	sp, #8
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	2380      	movs	r3, #128	; 0x80
 8006de4:	05db      	lsls	r3, r3, #23
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d007      	beq.n	8006dfa <TIM_Base_SetConfig+0x2a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a1f      	ldr	r2, [pc, #124]	; (8006e6c <TIM_Base_SetConfig+0x9c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d003      	beq.n	8006dfa <TIM_Base_SetConfig+0x2a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a1e      	ldr	r2, [pc, #120]	; (8006e70 <TIM_Base_SetConfig+0xa0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d108      	bne.n	8006e0c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2270      	movs	r2, #112	; 0x70
 8006dfe:	4393      	bics	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	2380      	movs	r3, #128	; 0x80
 8006e10:	05db      	lsls	r3, r3, #23
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d007      	beq.n	8006e26 <TIM_Base_SetConfig+0x56>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a14      	ldr	r2, [pc, #80]	; (8006e6c <TIM_Base_SetConfig+0x9c>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d003      	beq.n	8006e26 <TIM_Base_SetConfig+0x56>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a13      	ldr	r2, [pc, #76]	; (8006e70 <TIM_Base_SetConfig+0xa0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d108      	bne.n	8006e38 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4a12      	ldr	r2, [pc, #72]	; (8006e74 <TIM_Base_SetConfig+0xa4>)
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2280      	movs	r2, #128	; 0x80
 8006e3c:	4393      	bics	r3, r2
 8006e3e:	001a      	movs	r2, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689a      	ldr	r2, [r3, #8]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	615a      	str	r2, [r3, #20]
}
 8006e64:	46c0      	nop			; (mov r8, r8)
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b004      	add	sp, #16
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40010800 	.word	0x40010800
 8006e70:	40011400 	.word	0x40011400
 8006e74:	fffffcff 	.word	0xfffffcff

08006e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2238      	movs	r2, #56	; 0x38
 8006e86:	5c9b      	ldrb	r3, [r3, r2]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e042      	b.n	8006f16 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2238      	movs	r2, #56	; 0x38
 8006e94:	2101      	movs	r1, #1
 8006e96:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2239      	movs	r2, #57	; 0x39
 8006e9c:	2102      	movs	r1, #2
 8006e9e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2270      	movs	r2, #112	; 0x70
 8006eb4:	4393      	bics	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	2380      	movs	r3, #128	; 0x80
 8006ed0:	05db      	lsls	r3, r3, #23
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d009      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a11      	ldr	r2, [pc, #68]	; (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d004      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a0f      	ldr	r2, [pc, #60]	; (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d10c      	bne.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2280      	movs	r2, #128	; 0x80
 8006eee:	4393      	bics	r3, r2
 8006ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2239      	movs	r2, #57	; 0x39
 8006f08:	2101      	movs	r1, #1
 8006f0a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2238      	movs	r2, #56	; 0x38
 8006f10:	2100      	movs	r1, #0
 8006f12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	0018      	movs	r0, r3
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	b004      	add	sp, #16
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	40010800 	.word	0x40010800
 8006f24:	40011400 	.word	0x40011400

08006f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e044      	b.n	8006fc4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d107      	bne.n	8006f52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2278      	movs	r2, #120	; 0x78
 8006f46:	2100      	movs	r1, #0
 8006f48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	f7fc fec9 	bl	8003ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2224      	movs	r2, #36	; 0x24
 8006f56:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2101      	movs	r1, #1
 8006f64:	438a      	bics	r2, r1
 8006f66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	f000 fc9c 	bl	80078a8 <UART_SetConfig>
 8006f70:	0003      	movs	r3, r0
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d101      	bne.n	8006f7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e024      	b.n	8006fc4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	0018      	movs	r0, r3
 8006f86:	f000 ff13 	bl	8007db0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	490d      	ldr	r1, [pc, #52]	; (8006fcc <HAL_UART_Init+0xa4>)
 8006f96:	400a      	ands	r2, r1
 8006f98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	212a      	movs	r1, #42	; 0x2a
 8006fa6:	438a      	bics	r2, r1
 8006fa8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f000 ffab 	bl	8007f18 <UART_CheckIdleState>
 8006fc2:	0003      	movs	r3, r0
}
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	b002      	add	sp, #8
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	ffffb7ff 	.word	0xffffb7ff

08006fd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08a      	sub	sp, #40	; 0x28
 8006fd4:	af02      	add	r7, sp, #8
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	1dbb      	adds	r3, r7, #6
 8006fde:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	d000      	beq.n	8006fea <HAL_UART_Transmit+0x1a>
 8006fe8:	e08c      	b.n	8007104 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <HAL_UART_Transmit+0x28>
 8006ff0:	1dbb      	adds	r3, r7, #6
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e084      	b.n	8007106 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	2380      	movs	r3, #128	; 0x80
 8007002:	015b      	lsls	r3, r3, #5
 8007004:	429a      	cmp	r2, r3
 8007006:	d109      	bne.n	800701c <HAL_UART_Transmit+0x4c>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d105      	bne.n	800701c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2201      	movs	r2, #1
 8007014:	4013      	ands	r3, r2
 8007016:	d001      	beq.n	800701c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e074      	b.n	8007106 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2284      	movs	r2, #132	; 0x84
 8007020:	2100      	movs	r1, #0
 8007022:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2221      	movs	r2, #33	; 0x21
 8007028:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800702a:	f7fc ffad 	bl	8003f88 <HAL_GetTick>
 800702e:	0003      	movs	r3, r0
 8007030:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1dba      	adds	r2, r7, #6
 8007036:	2150      	movs	r1, #80	; 0x50
 8007038:	8812      	ldrh	r2, [r2, #0]
 800703a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	1dba      	adds	r2, r7, #6
 8007040:	2152      	movs	r1, #82	; 0x52
 8007042:	8812      	ldrh	r2, [r2, #0]
 8007044:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	2380      	movs	r3, #128	; 0x80
 800704c:	015b      	lsls	r3, r3, #5
 800704e:	429a      	cmp	r2, r3
 8007050:	d108      	bne.n	8007064 <HAL_UART_Transmit+0x94>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d104      	bne.n	8007064 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800705a:	2300      	movs	r3, #0
 800705c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	e003      	b.n	800706c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007068:	2300      	movs	r3, #0
 800706a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800706c:	e02f      	b.n	80070ce <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	0013      	movs	r3, r2
 8007078:	2200      	movs	r2, #0
 800707a:	2180      	movs	r1, #128	; 0x80
 800707c:	f000 fff4 	bl	8008068 <UART_WaitOnFlagUntilTimeout>
 8007080:	1e03      	subs	r3, r0, #0
 8007082:	d004      	beq.n	800708e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2220      	movs	r2, #32
 8007088:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e03b      	b.n	8007106 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10b      	bne.n	80070ac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	001a      	movs	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	05d2      	lsls	r2, r2, #23
 80070a0:	0dd2      	lsrs	r2, r2, #23
 80070a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	3302      	adds	r3, #2
 80070a8:	61bb      	str	r3, [r7, #24]
 80070aa:	e007      	b.n	80070bc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	781a      	ldrb	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	3301      	adds	r3, #1
 80070ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2252      	movs	r2, #82	; 0x52
 80070c0:	5a9b      	ldrh	r3, [r3, r2]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b299      	uxth	r1, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2252      	movs	r2, #82	; 0x52
 80070cc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2252      	movs	r2, #82	; 0x52
 80070d2:	5a9b      	ldrh	r3, [r3, r2]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1c9      	bne.n	800706e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	0013      	movs	r3, r2
 80070e4:	2200      	movs	r2, #0
 80070e6:	2140      	movs	r1, #64	; 0x40
 80070e8:	f000 ffbe 	bl	8008068 <UART_WaitOnFlagUntilTimeout>
 80070ec:	1e03      	subs	r3, r0, #0
 80070ee:	d004      	beq.n	80070fa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2220      	movs	r2, #32
 80070f4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e005      	b.n	8007106 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2220      	movs	r2, #32
 80070fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e000      	b.n	8007106 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007104:	2302      	movs	r3, #2
  }
}
 8007106:	0018      	movs	r0, r3
 8007108:	46bd      	mov	sp, r7
 800710a:	b008      	add	sp, #32
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	1dbb      	adds	r3, r7, #6
 800711c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007122:	2b20      	cmp	r3, #32
 8007124:	d15b      	bne.n	80071de <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_UART_Transmit_IT+0x24>
 800712c:	1dbb      	adds	r3, r7, #6
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e053      	b.n	80071e0 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	2380      	movs	r3, #128	; 0x80
 800713e:	015b      	lsls	r3, r3, #5
 8007140:	429a      	cmp	r2, r3
 8007142:	d109      	bne.n	8007158 <HAL_UART_Transmit_IT+0x48>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d105      	bne.n	8007158 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2201      	movs	r2, #1
 8007150:	4013      	ands	r3, r2
 8007152:	d001      	beq.n	8007158 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e043      	b.n	80071e0 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	1dba      	adds	r2, r7, #6
 8007162:	2150      	movs	r1, #80	; 0x50
 8007164:	8812      	ldrh	r2, [r2, #0]
 8007166:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	1dba      	adds	r2, r7, #6
 800716c:	2152      	movs	r1, #82	; 0x52
 800716e:	8812      	ldrh	r2, [r2, #0]
 8007170:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2284      	movs	r2, #132	; 0x84
 800717c:	2100      	movs	r1, #0
 800717e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2221      	movs	r2, #33	; 0x21
 8007184:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	2380      	movs	r3, #128	; 0x80
 800718c:	015b      	lsls	r3, r3, #5
 800718e:	429a      	cmp	r2, r3
 8007190:	d107      	bne.n	80071a2 <HAL_UART_Transmit_IT+0x92>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d103      	bne.n	80071a2 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4a12      	ldr	r2, [pc, #72]	; (80071e8 <HAL_UART_Transmit_IT+0xd8>)
 800719e:	66da      	str	r2, [r3, #108]	; 0x6c
 80071a0:	e002      	b.n	80071a8 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4a11      	ldr	r2, [pc, #68]	; (80071ec <HAL_UART_Transmit_IT+0xdc>)
 80071a6:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071a8:	f3ef 8310 	mrs	r3, PRIMASK
 80071ac:	613b      	str	r3, [r7, #16]
  return(result);
 80071ae:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80071b0:	61fb      	str	r3, [r7, #28]
 80071b2:	2301      	movs	r3, #1
 80071b4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f383 8810 	msr	PRIMASK, r3
}
 80071bc:	46c0      	nop			; (mov r8, r8)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2180      	movs	r1, #128	; 0x80
 80071ca:	430a      	orrs	r2, r1
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	f383 8810 	msr	PRIMASK, r3
}
 80071d8:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	e000      	b.n	80071e0 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80071de:	2302      	movs	r3, #2
  }
}
 80071e0:	0018      	movs	r0, r3
 80071e2:	46bd      	mov	sp, r7
 80071e4:	b008      	add	sp, #32
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	08008479 	.word	0x08008479
 80071ec:	080083c7 	.word	0x080083c7

080071f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	1dbb      	adds	r3, r7, #6
 80071fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2280      	movs	r2, #128	; 0x80
 8007202:	589b      	ldr	r3, [r3, r2]
 8007204:	2b20      	cmp	r3, #32
 8007206:	d14a      	bne.n	800729e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_UART_Receive_IT+0x26>
 800720e:	1dbb      	adds	r3, r7, #6
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e042      	b.n	80072a0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	2380      	movs	r3, #128	; 0x80
 8007220:	015b      	lsls	r3, r3, #5
 8007222:	429a      	cmp	r2, r3
 8007224:	d109      	bne.n	800723a <HAL_UART_Receive_IT+0x4a>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d105      	bne.n	800723a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2201      	movs	r2, #1
 8007232:	4013      	ands	r3, r2
 8007234:	d001      	beq.n	800723a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e032      	b.n	80072a0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a18      	ldr	r2, [pc, #96]	; (80072a8 <HAL_UART_Receive_IT+0xb8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d020      	beq.n	800728c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	2380      	movs	r3, #128	; 0x80
 8007252:	041b      	lsls	r3, r3, #16
 8007254:	4013      	ands	r3, r2
 8007256:	d019      	beq.n	800728c <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007258:	f3ef 8310 	mrs	r3, PRIMASK
 800725c:	613b      	str	r3, [r7, #16]
  return(result);
 800725e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007260:	61fb      	str	r3, [r7, #28]
 8007262:	2301      	movs	r3, #1
 8007264:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f383 8810 	msr	PRIMASK, r3
}
 800726c:	46c0      	nop			; (mov r8, r8)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2180      	movs	r1, #128	; 0x80
 800727a:	04c9      	lsls	r1, r1, #19
 800727c:	430a      	orrs	r2, r1
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	f383 8810 	msr	PRIMASK, r3
}
 800728a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800728c:	1dbb      	adds	r3, r7, #6
 800728e:	881a      	ldrh	r2, [r3, #0]
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	0018      	movs	r0, r3
 8007296:	f000 ff51 	bl	800813c <UART_Start_Receive_IT>
 800729a:	0003      	movs	r3, r0
 800729c:	e000      	b.n	80072a0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800729e:	2302      	movs	r3, #2
  }
}
 80072a0:	0018      	movs	r0, r3
 80072a2:	46bd      	mov	sp, r7
 80072a4:	b008      	add	sp, #32
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40004800 	.word	0x40004800

080072ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072ac:	b590      	push	{r4, r7, lr}
 80072ae:	b0ab      	sub	sp, #172	; 0xac
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	22a4      	movs	r2, #164	; 0xa4
 80072bc:	18b9      	adds	r1, r7, r2
 80072be:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	20a0      	movs	r0, #160	; 0xa0
 80072c8:	1839      	adds	r1, r7, r0
 80072ca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	219c      	movs	r1, #156	; 0x9c
 80072d4:	1879      	adds	r1, r7, r1
 80072d6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072d8:	0011      	movs	r1, r2
 80072da:	18bb      	adds	r3, r7, r2
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a99      	ldr	r2, [pc, #612]	; (8007544 <HAL_UART_IRQHandler+0x298>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	2298      	movs	r2, #152	; 0x98
 80072e4:	18bc      	adds	r4, r7, r2
 80072e6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80072e8:	18bb      	adds	r3, r7, r2
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d114      	bne.n	800731a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80072f0:	187b      	adds	r3, r7, r1
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2220      	movs	r2, #32
 80072f6:	4013      	ands	r3, r2
 80072f8:	d00f      	beq.n	800731a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072fa:	183b      	adds	r3, r7, r0
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2220      	movs	r2, #32
 8007300:	4013      	ands	r3, r2
 8007302:	d00a      	beq.n	800731a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007308:	2b00      	cmp	r3, #0
 800730a:	d100      	bne.n	800730e <HAL_UART_IRQHandler+0x62>
 800730c:	e2a0      	b.n	8007850 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	0010      	movs	r0, r2
 8007316:	4798      	blx	r3
      }
      return;
 8007318:	e29a      	b.n	8007850 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800731a:	2398      	movs	r3, #152	; 0x98
 800731c:	18fb      	adds	r3, r7, r3
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d100      	bne.n	8007326 <HAL_UART_IRQHandler+0x7a>
 8007324:	e114      	b.n	8007550 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007326:	239c      	movs	r3, #156	; 0x9c
 8007328:	18fb      	adds	r3, r7, r3
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2201      	movs	r2, #1
 800732e:	4013      	ands	r3, r2
 8007330:	d106      	bne.n	8007340 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007332:	23a0      	movs	r3, #160	; 0xa0
 8007334:	18fb      	adds	r3, r7, r3
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a83      	ldr	r2, [pc, #524]	; (8007548 <HAL_UART_IRQHandler+0x29c>)
 800733a:	4013      	ands	r3, r2
 800733c:	d100      	bne.n	8007340 <HAL_UART_IRQHandler+0x94>
 800733e:	e107      	b.n	8007550 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007340:	23a4      	movs	r3, #164	; 0xa4
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2201      	movs	r2, #1
 8007348:	4013      	ands	r3, r2
 800734a:	d012      	beq.n	8007372 <HAL_UART_IRQHandler+0xc6>
 800734c:	23a0      	movs	r3, #160	; 0xa0
 800734e:	18fb      	adds	r3, r7, r3
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	2380      	movs	r3, #128	; 0x80
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	4013      	ands	r3, r2
 8007358:	d00b      	beq.n	8007372 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2201      	movs	r2, #1
 8007360:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2284      	movs	r2, #132	; 0x84
 8007366:	589b      	ldr	r3, [r3, r2]
 8007368:	2201      	movs	r2, #1
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2184      	movs	r1, #132	; 0x84
 8007370:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007372:	23a4      	movs	r3, #164	; 0xa4
 8007374:	18fb      	adds	r3, r7, r3
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2202      	movs	r2, #2
 800737a:	4013      	ands	r3, r2
 800737c:	d011      	beq.n	80073a2 <HAL_UART_IRQHandler+0xf6>
 800737e:	239c      	movs	r3, #156	; 0x9c
 8007380:	18fb      	adds	r3, r7, r3
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2201      	movs	r2, #1
 8007386:	4013      	ands	r3, r2
 8007388:	d00b      	beq.n	80073a2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2202      	movs	r2, #2
 8007390:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2284      	movs	r2, #132	; 0x84
 8007396:	589b      	ldr	r3, [r3, r2]
 8007398:	2204      	movs	r2, #4
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2184      	movs	r1, #132	; 0x84
 80073a0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073a2:	23a4      	movs	r3, #164	; 0xa4
 80073a4:	18fb      	adds	r3, r7, r3
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2204      	movs	r2, #4
 80073aa:	4013      	ands	r3, r2
 80073ac:	d011      	beq.n	80073d2 <HAL_UART_IRQHandler+0x126>
 80073ae:	239c      	movs	r3, #156	; 0x9c
 80073b0:	18fb      	adds	r3, r7, r3
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2201      	movs	r2, #1
 80073b6:	4013      	ands	r3, r2
 80073b8:	d00b      	beq.n	80073d2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2204      	movs	r2, #4
 80073c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2284      	movs	r2, #132	; 0x84
 80073c6:	589b      	ldr	r3, [r3, r2]
 80073c8:	2202      	movs	r2, #2
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2184      	movs	r1, #132	; 0x84
 80073d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073d2:	23a4      	movs	r3, #164	; 0xa4
 80073d4:	18fb      	adds	r3, r7, r3
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2208      	movs	r2, #8
 80073da:	4013      	ands	r3, r2
 80073dc:	d017      	beq.n	800740e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073de:	23a0      	movs	r3, #160	; 0xa0
 80073e0:	18fb      	adds	r3, r7, r3
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2220      	movs	r2, #32
 80073e6:	4013      	ands	r3, r2
 80073e8:	d105      	bne.n	80073f6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80073ea:	239c      	movs	r3, #156	; 0x9c
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2201      	movs	r2, #1
 80073f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073f4:	d00b      	beq.n	800740e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2208      	movs	r2, #8
 80073fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2284      	movs	r2, #132	; 0x84
 8007402:	589b      	ldr	r3, [r3, r2]
 8007404:	2208      	movs	r2, #8
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2184      	movs	r1, #132	; 0x84
 800740c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800740e:	23a4      	movs	r3, #164	; 0xa4
 8007410:	18fb      	adds	r3, r7, r3
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	2380      	movs	r3, #128	; 0x80
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	4013      	ands	r3, r2
 800741a:	d013      	beq.n	8007444 <HAL_UART_IRQHandler+0x198>
 800741c:	23a0      	movs	r3, #160	; 0xa0
 800741e:	18fb      	adds	r3, r7, r3
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	2380      	movs	r3, #128	; 0x80
 8007424:	04db      	lsls	r3, r3, #19
 8007426:	4013      	ands	r3, r2
 8007428:	d00c      	beq.n	8007444 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2280      	movs	r2, #128	; 0x80
 8007430:	0112      	lsls	r2, r2, #4
 8007432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2284      	movs	r2, #132	; 0x84
 8007438:	589b      	ldr	r3, [r3, r2]
 800743a:	2220      	movs	r2, #32
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2184      	movs	r1, #132	; 0x84
 8007442:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2284      	movs	r2, #132	; 0x84
 8007448:	589b      	ldr	r3, [r3, r2]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d100      	bne.n	8007450 <HAL_UART_IRQHandler+0x1a4>
 800744e:	e201      	b.n	8007854 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007450:	23a4      	movs	r3, #164	; 0xa4
 8007452:	18fb      	adds	r3, r7, r3
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2220      	movs	r2, #32
 8007458:	4013      	ands	r3, r2
 800745a:	d00e      	beq.n	800747a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800745c:	23a0      	movs	r3, #160	; 0xa0
 800745e:	18fb      	adds	r3, r7, r3
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2220      	movs	r2, #32
 8007464:	4013      	ands	r3, r2
 8007466:	d008      	beq.n	800747a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800746c:	2b00      	cmp	r3, #0
 800746e:	d004      	beq.n	800747a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	0010      	movs	r0, r2
 8007478:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2284      	movs	r2, #132	; 0x84
 800747e:	589b      	ldr	r3, [r3, r2]
 8007480:	2194      	movs	r1, #148	; 0x94
 8007482:	187a      	adds	r2, r7, r1
 8007484:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	2240      	movs	r2, #64	; 0x40
 800748e:	4013      	ands	r3, r2
 8007490:	2b40      	cmp	r3, #64	; 0x40
 8007492:	d004      	beq.n	800749e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007494:	187b      	adds	r3, r7, r1
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2228      	movs	r2, #40	; 0x28
 800749a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800749c:	d047      	beq.n	800752e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	0018      	movs	r0, r3
 80074a2:	f000 ff15 	bl	80082d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	2240      	movs	r2, #64	; 0x40
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b40      	cmp	r3, #64	; 0x40
 80074b2:	d137      	bne.n	8007524 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b4:	f3ef 8310 	mrs	r3, PRIMASK
 80074b8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80074ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074bc:	2090      	movs	r0, #144	; 0x90
 80074be:	183a      	adds	r2, r7, r0
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	2301      	movs	r3, #1
 80074c4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074c8:	f383 8810 	msr	PRIMASK, r3
}
 80074cc:	46c0      	nop			; (mov r8, r8)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2140      	movs	r1, #64	; 0x40
 80074da:	438a      	bics	r2, r1
 80074dc:	609a      	str	r2, [r3, #8]
 80074de:	183b      	adds	r3, r7, r0
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074e6:	f383 8810 	msr	PRIMASK, r3
}
 80074ea:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d012      	beq.n	800751a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f8:	4a14      	ldr	r2, [pc, #80]	; (800754c <HAL_UART_IRQHandler+0x2a0>)
 80074fa:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007500:	0018      	movs	r0, r3
 8007502:	f7fd f939 	bl	8004778 <HAL_DMA_Abort_IT>
 8007506:	1e03      	subs	r3, r0, #0
 8007508:	d01a      	beq.n	8007540 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800750e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007514:	0018      	movs	r0, r3
 8007516:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007518:	e012      	b.n	8007540 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	0018      	movs	r0, r3
 800751e:	f000 f9af 	bl	8007880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007522:	e00d      	b.n	8007540 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	0018      	movs	r0, r3
 8007528:	f000 f9aa 	bl	8007880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752c:	e008      	b.n	8007540 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	0018      	movs	r0, r3
 8007532:	f000 f9a5 	bl	8007880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2284      	movs	r2, #132	; 0x84
 800753a:	2100      	movs	r1, #0
 800753c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800753e:	e189      	b.n	8007854 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007540:	46c0      	nop			; (mov r8, r8)
    return;
 8007542:	e187      	b.n	8007854 <HAL_UART_IRQHandler+0x5a8>
 8007544:	0000080f 	.word	0x0000080f
 8007548:	04000120 	.word	0x04000120
 800754c:	08008399 	.word	0x08008399

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007554:	2b01      	cmp	r3, #1
 8007556:	d000      	beq.n	800755a <HAL_UART_IRQHandler+0x2ae>
 8007558:	e13b      	b.n	80077d2 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800755a:	23a4      	movs	r3, #164	; 0xa4
 800755c:	18fb      	adds	r3, r7, r3
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2210      	movs	r2, #16
 8007562:	4013      	ands	r3, r2
 8007564:	d100      	bne.n	8007568 <HAL_UART_IRQHandler+0x2bc>
 8007566:	e134      	b.n	80077d2 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007568:	23a0      	movs	r3, #160	; 0xa0
 800756a:	18fb      	adds	r3, r7, r3
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2210      	movs	r2, #16
 8007570:	4013      	ands	r3, r2
 8007572:	d100      	bne.n	8007576 <HAL_UART_IRQHandler+0x2ca>
 8007574:	e12d      	b.n	80077d2 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2210      	movs	r2, #16
 800757c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	2240      	movs	r2, #64	; 0x40
 8007586:	4013      	ands	r3, r2
 8007588:	2b40      	cmp	r3, #64	; 0x40
 800758a:	d000      	beq.n	800758e <HAL_UART_IRQHandler+0x2e2>
 800758c:	e0a1      	b.n	80076d2 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	217e      	movs	r1, #126	; 0x7e
 8007598:	187b      	adds	r3, r7, r1
 800759a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800759c:	187b      	adds	r3, r7, r1
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d100      	bne.n	80075a6 <HAL_UART_IRQHandler+0x2fa>
 80075a4:	e158      	b.n	8007858 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2258      	movs	r2, #88	; 0x58
 80075aa:	5a9b      	ldrh	r3, [r3, r2]
 80075ac:	187a      	adds	r2, r7, r1
 80075ae:	8812      	ldrh	r2, [r2, #0]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d300      	bcc.n	80075b6 <HAL_UART_IRQHandler+0x30a>
 80075b4:	e150      	b.n	8007858 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	187a      	adds	r2, r7, r1
 80075ba:	215a      	movs	r1, #90	; 0x5a
 80075bc:	8812      	ldrh	r2, [r2, #0]
 80075be:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2220      	movs	r2, #32
 80075ca:	4013      	ands	r3, r2
 80075cc:	d16f      	bne.n	80076ae <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ce:	f3ef 8310 	mrs	r3, PRIMASK
 80075d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80075d8:	2301      	movs	r3, #1
 80075da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075de:	f383 8810 	msr	PRIMASK, r3
}
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	499e      	ldr	r1, [pc, #632]	; (8007868 <HAL_UART_IRQHandler+0x5bc>)
 80075f0:	400a      	ands	r2, r1
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	f383 8810 	msr	PRIMASK, r3
}
 80075fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007600:	f3ef 8310 	mrs	r3, PRIMASK
 8007604:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007608:	677b      	str	r3, [r7, #116]	; 0x74
 800760a:	2301      	movs	r3, #1
 800760c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800760e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007610:	f383 8810 	msr	PRIMASK, r3
}
 8007614:	46c0      	nop			; (mov r8, r8)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2101      	movs	r1, #1
 8007622:	438a      	bics	r2, r1
 8007624:	609a      	str	r2, [r3, #8]
 8007626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007628:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800762a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800762c:	f383 8810 	msr	PRIMASK, r3
}
 8007630:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007632:	f3ef 8310 	mrs	r3, PRIMASK
 8007636:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007638:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800763a:	673b      	str	r3, [r7, #112]	; 0x70
 800763c:	2301      	movs	r3, #1
 800763e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007642:	f383 8810 	msr	PRIMASK, r3
}
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689a      	ldr	r2, [r3, #8]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2140      	movs	r1, #64	; 0x40
 8007654:	438a      	bics	r2, r1
 8007656:	609a      	str	r2, [r3, #8]
 8007658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800765a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800765c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800765e:	f383 8810 	msr	PRIMASK, r3
}
 8007662:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2280      	movs	r2, #128	; 0x80
 8007668:	2120      	movs	r1, #32
 800766a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007672:	f3ef 8310 	mrs	r3, PRIMASK
 8007676:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007678:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800767a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800767c:	2301      	movs	r3, #1
 800767e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007682:	f383 8810 	msr	PRIMASK, r3
}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2110      	movs	r1, #16
 8007694:	438a      	bics	r2, r1
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800769a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800769c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800769e:	f383 8810 	msr	PRIMASK, r3
}
 80076a2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a8:	0018      	movs	r0, r3
 80076aa:	f7fd f825 	bl	80046f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2202      	movs	r2, #2
 80076b2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2258      	movs	r2, #88	; 0x58
 80076b8:	5a9a      	ldrh	r2, [r3, r2]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	215a      	movs	r1, #90	; 0x5a
 80076be:	5a5b      	ldrh	r3, [r3, r1]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	0011      	movs	r1, r2
 80076ca:	0018      	movs	r0, r3
 80076cc:	f000 f8e0 	bl	8007890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076d0:	e0c2      	b.n	8007858 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2258      	movs	r2, #88	; 0x58
 80076d6:	5a99      	ldrh	r1, [r3, r2]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	225a      	movs	r2, #90	; 0x5a
 80076dc:	5a9b      	ldrh	r3, [r3, r2]
 80076de:	b29a      	uxth	r2, r3
 80076e0:	208e      	movs	r0, #142	; 0x8e
 80076e2:	183b      	adds	r3, r7, r0
 80076e4:	1a8a      	subs	r2, r1, r2
 80076e6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	225a      	movs	r2, #90	; 0x5a
 80076ec:	5a9b      	ldrh	r3, [r3, r2]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d100      	bne.n	80076f6 <HAL_UART_IRQHandler+0x44a>
 80076f4:	e0b2      	b.n	800785c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80076f6:	183b      	adds	r3, r7, r0
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d100      	bne.n	8007700 <HAL_UART_IRQHandler+0x454>
 80076fe:	e0ad      	b.n	800785c <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007700:	f3ef 8310 	mrs	r3, PRIMASK
 8007704:	60fb      	str	r3, [r7, #12]
  return(result);
 8007706:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007708:	2488      	movs	r4, #136	; 0x88
 800770a:	193a      	adds	r2, r7, r4
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	2301      	movs	r3, #1
 8007710:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f383 8810 	msr	PRIMASK, r3
}
 8007718:	46c0      	nop			; (mov r8, r8)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4951      	ldr	r1, [pc, #324]	; (800786c <HAL_UART_IRQHandler+0x5c0>)
 8007726:	400a      	ands	r2, r1
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	193b      	adds	r3, r7, r4
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f383 8810 	msr	PRIMASK, r3
}
 8007736:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007738:	f3ef 8310 	mrs	r3, PRIMASK
 800773c:	61bb      	str	r3, [r7, #24]
  return(result);
 800773e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007740:	2484      	movs	r4, #132	; 0x84
 8007742:	193a      	adds	r2, r7, r4
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	2301      	movs	r3, #1
 8007748:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	f383 8810 	msr	PRIMASK, r3
}
 8007750:	46c0      	nop			; (mov r8, r8)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689a      	ldr	r2, [r3, #8]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2101      	movs	r1, #1
 800775e:	438a      	bics	r2, r1
 8007760:	609a      	str	r2, [r3, #8]
 8007762:	193b      	adds	r3, r7, r4
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	f383 8810 	msr	PRIMASK, r3
}
 800776e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2280      	movs	r2, #128	; 0x80
 8007774:	2120      	movs	r1, #32
 8007776:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007784:	f3ef 8310 	mrs	r3, PRIMASK
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800778c:	2480      	movs	r4, #128	; 0x80
 800778e:	193a      	adds	r2, r7, r4
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	2301      	movs	r3, #1
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007798:	f383 8810 	msr	PRIMASK, r3
}
 800779c:	46c0      	nop			; (mov r8, r8)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2110      	movs	r1, #16
 80077aa:	438a      	bics	r2, r1
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	193b      	adds	r3, r7, r4
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b6:	f383 8810 	msr	PRIMASK, r3
}
 80077ba:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2202      	movs	r2, #2
 80077c0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077c2:	183b      	adds	r3, r7, r0
 80077c4:	881a      	ldrh	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	0011      	movs	r1, r2
 80077ca:	0018      	movs	r0, r3
 80077cc:	f000 f860 	bl	8007890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077d0:	e044      	b.n	800785c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80077d2:	23a4      	movs	r3, #164	; 0xa4
 80077d4:	18fb      	adds	r3, r7, r3
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	2380      	movs	r3, #128	; 0x80
 80077da:	035b      	lsls	r3, r3, #13
 80077dc:	4013      	ands	r3, r2
 80077de:	d010      	beq.n	8007802 <HAL_UART_IRQHandler+0x556>
 80077e0:	239c      	movs	r3, #156	; 0x9c
 80077e2:	18fb      	adds	r3, r7, r3
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	2380      	movs	r3, #128	; 0x80
 80077e8:	03db      	lsls	r3, r3, #15
 80077ea:	4013      	ands	r3, r2
 80077ec:	d009      	beq.n	8007802 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2280      	movs	r2, #128	; 0x80
 80077f4:	0352      	lsls	r2, r2, #13
 80077f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	0018      	movs	r0, r3
 80077fc:	f001 f88a 	bl	8008914 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007800:	e02f      	b.n	8007862 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007802:	23a4      	movs	r3, #164	; 0xa4
 8007804:	18fb      	adds	r3, r7, r3
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2280      	movs	r2, #128	; 0x80
 800780a:	4013      	ands	r3, r2
 800780c:	d00f      	beq.n	800782e <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800780e:	23a0      	movs	r3, #160	; 0xa0
 8007810:	18fb      	adds	r3, r7, r3
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2280      	movs	r2, #128	; 0x80
 8007816:	4013      	ands	r3, r2
 8007818:	d009      	beq.n	800782e <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01e      	beq.n	8007860 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	0010      	movs	r0, r2
 800782a:	4798      	blx	r3
    }
    return;
 800782c:	e018      	b.n	8007860 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800782e:	23a4      	movs	r3, #164	; 0xa4
 8007830:	18fb      	adds	r3, r7, r3
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2240      	movs	r2, #64	; 0x40
 8007836:	4013      	ands	r3, r2
 8007838:	d013      	beq.n	8007862 <HAL_UART_IRQHandler+0x5b6>
 800783a:	23a0      	movs	r3, #160	; 0xa0
 800783c:	18fb      	adds	r3, r7, r3
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2240      	movs	r2, #64	; 0x40
 8007842:	4013      	ands	r3, r2
 8007844:	d00d      	beq.n	8007862 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	0018      	movs	r0, r3
 800784a:	f000 fe73 	bl	8008534 <UART_EndTransmit_IT>
    return;
 800784e:	e008      	b.n	8007862 <HAL_UART_IRQHandler+0x5b6>
      return;
 8007850:	46c0      	nop			; (mov r8, r8)
 8007852:	e006      	b.n	8007862 <HAL_UART_IRQHandler+0x5b6>
    return;
 8007854:	46c0      	nop			; (mov r8, r8)
 8007856:	e004      	b.n	8007862 <HAL_UART_IRQHandler+0x5b6>
      return;
 8007858:	46c0      	nop			; (mov r8, r8)
 800785a:	e002      	b.n	8007862 <HAL_UART_IRQHandler+0x5b6>
      return;
 800785c:	46c0      	nop			; (mov r8, r8)
 800785e:	e000      	b.n	8007862 <HAL_UART_IRQHandler+0x5b6>
    return;
 8007860:	46c0      	nop			; (mov r8, r8)
  }

}
 8007862:	46bd      	mov	sp, r7
 8007864:	b02b      	add	sp, #172	; 0xac
 8007866:	bd90      	pop	{r4, r7, pc}
 8007868:	fffffeff 	.word	0xfffffeff
 800786c:	fffffedf 	.word	0xfffffedf

08007870 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007878:	46c0      	nop			; (mov r8, r8)
 800787a:	46bd      	mov	sp, r7
 800787c:	b002      	add	sp, #8
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007888:	46c0      	nop			; (mov r8, r8)
 800788a:	46bd      	mov	sp, r7
 800788c:	b002      	add	sp, #8
 800788e:	bd80      	pop	{r7, pc}

08007890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	000a      	movs	r2, r1
 800789a:	1cbb      	adds	r3, r7, #2
 800789c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	46bd      	mov	sp, r7
 80078a2:	b002      	add	sp, #8
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078a8:	b5b0      	push	{r4, r5, r7, lr}
 80078aa:	b08e      	sub	sp, #56	; 0x38
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078b0:	231a      	movs	r3, #26
 80078b2:	2218      	movs	r2, #24
 80078b4:	189b      	adds	r3, r3, r2
 80078b6:	19db      	adds	r3, r3, r7
 80078b8:	2200      	movs	r2, #0
 80078ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	431a      	orrs	r2, r3
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	431a      	orrs	r2, r3
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4ac6      	ldr	r2, [pc, #792]	; (8007bf4 <UART_SetConfig+0x34c>)
 80078dc:	4013      	ands	r3, r2
 80078de:	0019      	movs	r1, r3
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078e6:	430a      	orrs	r2, r1
 80078e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	4ac1      	ldr	r2, [pc, #772]	; (8007bf8 <UART_SetConfig+0x350>)
 80078f2:	4013      	ands	r3, r2
 80078f4:	0019      	movs	r1, r3
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4abb      	ldr	r2, [pc, #748]	; (8007bfc <UART_SetConfig+0x354>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d004      	beq.n	800791c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007918:	4313      	orrs	r3, r2
 800791a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	4ab7      	ldr	r2, [pc, #732]	; (8007c00 <UART_SetConfig+0x358>)
 8007924:	4013      	ands	r3, r2
 8007926:	0019      	movs	r1, r3
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800792e:	430a      	orrs	r2, r1
 8007930:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4ab3      	ldr	r2, [pc, #716]	; (8007c04 <UART_SetConfig+0x35c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d131      	bne.n	80079a0 <UART_SetConfig+0xf8>
 800793c:	4bb2      	ldr	r3, [pc, #712]	; (8007c08 <UART_SetConfig+0x360>)
 800793e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007940:	2203      	movs	r2, #3
 8007942:	4013      	ands	r3, r2
 8007944:	2b03      	cmp	r3, #3
 8007946:	d01d      	beq.n	8007984 <UART_SetConfig+0xdc>
 8007948:	d823      	bhi.n	8007992 <UART_SetConfig+0xea>
 800794a:	2b02      	cmp	r3, #2
 800794c:	d00c      	beq.n	8007968 <UART_SetConfig+0xc0>
 800794e:	d820      	bhi.n	8007992 <UART_SetConfig+0xea>
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <UART_SetConfig+0xb2>
 8007954:	2b01      	cmp	r3, #1
 8007956:	d00e      	beq.n	8007976 <UART_SetConfig+0xce>
 8007958:	e01b      	b.n	8007992 <UART_SetConfig+0xea>
 800795a:	231b      	movs	r3, #27
 800795c:	2218      	movs	r2, #24
 800795e:	189b      	adds	r3, r3, r2
 8007960:	19db      	adds	r3, r3, r7
 8007962:	2201      	movs	r2, #1
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	e09c      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 8007968:	231b      	movs	r3, #27
 800796a:	2218      	movs	r2, #24
 800796c:	189b      	adds	r3, r3, r2
 800796e:	19db      	adds	r3, r3, r7
 8007970:	2202      	movs	r2, #2
 8007972:	701a      	strb	r2, [r3, #0]
 8007974:	e095      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 8007976:	231b      	movs	r3, #27
 8007978:	2218      	movs	r2, #24
 800797a:	189b      	adds	r3, r3, r2
 800797c:	19db      	adds	r3, r3, r7
 800797e:	2204      	movs	r2, #4
 8007980:	701a      	strb	r2, [r3, #0]
 8007982:	e08e      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 8007984:	231b      	movs	r3, #27
 8007986:	2218      	movs	r2, #24
 8007988:	189b      	adds	r3, r3, r2
 800798a:	19db      	adds	r3, r3, r7
 800798c:	2208      	movs	r2, #8
 800798e:	701a      	strb	r2, [r3, #0]
 8007990:	e087      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 8007992:	231b      	movs	r3, #27
 8007994:	2218      	movs	r2, #24
 8007996:	189b      	adds	r3, r3, r2
 8007998:	19db      	adds	r3, r3, r7
 800799a:	2210      	movs	r2, #16
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	e080      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a99      	ldr	r2, [pc, #612]	; (8007c0c <UART_SetConfig+0x364>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d131      	bne.n	8007a0e <UART_SetConfig+0x166>
 80079aa:	4b97      	ldr	r3, [pc, #604]	; (8007c08 <UART_SetConfig+0x360>)
 80079ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ae:	220c      	movs	r2, #12
 80079b0:	4013      	ands	r3, r2
 80079b2:	2b0c      	cmp	r3, #12
 80079b4:	d01d      	beq.n	80079f2 <UART_SetConfig+0x14a>
 80079b6:	d823      	bhi.n	8007a00 <UART_SetConfig+0x158>
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d00c      	beq.n	80079d6 <UART_SetConfig+0x12e>
 80079bc:	d820      	bhi.n	8007a00 <UART_SetConfig+0x158>
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d002      	beq.n	80079c8 <UART_SetConfig+0x120>
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d00e      	beq.n	80079e4 <UART_SetConfig+0x13c>
 80079c6:	e01b      	b.n	8007a00 <UART_SetConfig+0x158>
 80079c8:	231b      	movs	r3, #27
 80079ca:	2218      	movs	r2, #24
 80079cc:	189b      	adds	r3, r3, r2
 80079ce:	19db      	adds	r3, r3, r7
 80079d0:	2200      	movs	r2, #0
 80079d2:	701a      	strb	r2, [r3, #0]
 80079d4:	e065      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 80079d6:	231b      	movs	r3, #27
 80079d8:	2218      	movs	r2, #24
 80079da:	189b      	adds	r3, r3, r2
 80079dc:	19db      	adds	r3, r3, r7
 80079de:	2202      	movs	r2, #2
 80079e0:	701a      	strb	r2, [r3, #0]
 80079e2:	e05e      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 80079e4:	231b      	movs	r3, #27
 80079e6:	2218      	movs	r2, #24
 80079e8:	189b      	adds	r3, r3, r2
 80079ea:	19db      	adds	r3, r3, r7
 80079ec:	2204      	movs	r2, #4
 80079ee:	701a      	strb	r2, [r3, #0]
 80079f0:	e057      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 80079f2:	231b      	movs	r3, #27
 80079f4:	2218      	movs	r2, #24
 80079f6:	189b      	adds	r3, r3, r2
 80079f8:	19db      	adds	r3, r3, r7
 80079fa:	2208      	movs	r2, #8
 80079fc:	701a      	strb	r2, [r3, #0]
 80079fe:	e050      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 8007a00:	231b      	movs	r3, #27
 8007a02:	2218      	movs	r2, #24
 8007a04:	189b      	adds	r3, r3, r2
 8007a06:	19db      	adds	r3, r3, r7
 8007a08:	2210      	movs	r2, #16
 8007a0a:	701a      	strb	r2, [r3, #0]
 8007a0c:	e049      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a7a      	ldr	r2, [pc, #488]	; (8007bfc <UART_SetConfig+0x354>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d13e      	bne.n	8007a96 <UART_SetConfig+0x1ee>
 8007a18:	4b7b      	ldr	r3, [pc, #492]	; (8007c08 <UART_SetConfig+0x360>)
 8007a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a1c:	23c0      	movs	r3, #192	; 0xc0
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	4013      	ands	r3, r2
 8007a22:	22c0      	movs	r2, #192	; 0xc0
 8007a24:	0112      	lsls	r2, r2, #4
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d027      	beq.n	8007a7a <UART_SetConfig+0x1d2>
 8007a2a:	22c0      	movs	r2, #192	; 0xc0
 8007a2c:	0112      	lsls	r2, r2, #4
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d82a      	bhi.n	8007a88 <UART_SetConfig+0x1e0>
 8007a32:	2280      	movs	r2, #128	; 0x80
 8007a34:	0112      	lsls	r2, r2, #4
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d011      	beq.n	8007a5e <UART_SetConfig+0x1b6>
 8007a3a:	2280      	movs	r2, #128	; 0x80
 8007a3c:	0112      	lsls	r2, r2, #4
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d822      	bhi.n	8007a88 <UART_SetConfig+0x1e0>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d004      	beq.n	8007a50 <UART_SetConfig+0x1a8>
 8007a46:	2280      	movs	r2, #128	; 0x80
 8007a48:	00d2      	lsls	r2, r2, #3
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00e      	beq.n	8007a6c <UART_SetConfig+0x1c4>
 8007a4e:	e01b      	b.n	8007a88 <UART_SetConfig+0x1e0>
 8007a50:	231b      	movs	r3, #27
 8007a52:	2218      	movs	r2, #24
 8007a54:	189b      	adds	r3, r3, r2
 8007a56:	19db      	adds	r3, r3, r7
 8007a58:	2200      	movs	r2, #0
 8007a5a:	701a      	strb	r2, [r3, #0]
 8007a5c:	e021      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 8007a5e:	231b      	movs	r3, #27
 8007a60:	2218      	movs	r2, #24
 8007a62:	189b      	adds	r3, r3, r2
 8007a64:	19db      	adds	r3, r3, r7
 8007a66:	2202      	movs	r2, #2
 8007a68:	701a      	strb	r2, [r3, #0]
 8007a6a:	e01a      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 8007a6c:	231b      	movs	r3, #27
 8007a6e:	2218      	movs	r2, #24
 8007a70:	189b      	adds	r3, r3, r2
 8007a72:	19db      	adds	r3, r3, r7
 8007a74:	2204      	movs	r2, #4
 8007a76:	701a      	strb	r2, [r3, #0]
 8007a78:	e013      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 8007a7a:	231b      	movs	r3, #27
 8007a7c:	2218      	movs	r2, #24
 8007a7e:	189b      	adds	r3, r3, r2
 8007a80:	19db      	adds	r3, r3, r7
 8007a82:	2208      	movs	r2, #8
 8007a84:	701a      	strb	r2, [r3, #0]
 8007a86:	e00c      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 8007a88:	231b      	movs	r3, #27
 8007a8a:	2218      	movs	r2, #24
 8007a8c:	189b      	adds	r3, r3, r2
 8007a8e:	19db      	adds	r3, r3, r7
 8007a90:	2210      	movs	r2, #16
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	e005      	b.n	8007aa2 <UART_SetConfig+0x1fa>
 8007a96:	231b      	movs	r3, #27
 8007a98:	2218      	movs	r2, #24
 8007a9a:	189b      	adds	r3, r3, r2
 8007a9c:	19db      	adds	r3, r3, r7
 8007a9e:	2210      	movs	r2, #16
 8007aa0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a55      	ldr	r2, [pc, #340]	; (8007bfc <UART_SetConfig+0x354>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d000      	beq.n	8007aae <UART_SetConfig+0x206>
 8007aac:	e084      	b.n	8007bb8 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007aae:	231b      	movs	r3, #27
 8007ab0:	2218      	movs	r2, #24
 8007ab2:	189b      	adds	r3, r3, r2
 8007ab4:	19db      	adds	r3, r3, r7
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d01d      	beq.n	8007af8 <UART_SetConfig+0x250>
 8007abc:	dc20      	bgt.n	8007b00 <UART_SetConfig+0x258>
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d015      	beq.n	8007aee <UART_SetConfig+0x246>
 8007ac2:	dc1d      	bgt.n	8007b00 <UART_SetConfig+0x258>
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <UART_SetConfig+0x226>
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d005      	beq.n	8007ad8 <UART_SetConfig+0x230>
 8007acc:	e018      	b.n	8007b00 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ace:	f7fe f807 	bl	8005ae0 <HAL_RCC_GetPCLK1Freq>
 8007ad2:	0003      	movs	r3, r0
 8007ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ad6:	e01c      	b.n	8007b12 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ad8:	4b4b      	ldr	r3, [pc, #300]	; (8007c08 <UART_SetConfig+0x360>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2210      	movs	r2, #16
 8007ade:	4013      	ands	r3, r2
 8007ae0:	d002      	beq.n	8007ae8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007ae2:	4b4b      	ldr	r3, [pc, #300]	; (8007c10 <UART_SetConfig+0x368>)
 8007ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ae6:	e014      	b.n	8007b12 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8007ae8:	4b4a      	ldr	r3, [pc, #296]	; (8007c14 <UART_SetConfig+0x36c>)
 8007aea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007aec:	e011      	b.n	8007b12 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aee:	f7fd ff47 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 8007af2:	0003      	movs	r3, r0
 8007af4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007af6:	e00c      	b.n	8007b12 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007af8:	2380      	movs	r3, #128	; 0x80
 8007afa:	021b      	lsls	r3, r3, #8
 8007afc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007afe:	e008      	b.n	8007b12 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007b04:	231a      	movs	r3, #26
 8007b06:	2218      	movs	r2, #24
 8007b08:	189b      	adds	r3, r3, r2
 8007b0a:	19db      	adds	r3, r3, r7
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	701a      	strb	r2, [r3, #0]
        break;
 8007b10:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d100      	bne.n	8007b1a <UART_SetConfig+0x272>
 8007b18:	e132      	b.n	8007d80 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	0013      	movs	r3, r2
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	189b      	adds	r3, r3, r2
 8007b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d305      	bcc.n	8007b36 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d906      	bls.n	8007b44 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8007b36:	231a      	movs	r3, #26
 8007b38:	2218      	movs	r2, #24
 8007b3a:	189b      	adds	r3, r3, r2
 8007b3c:	19db      	adds	r3, r3, r7
 8007b3e:	2201      	movs	r2, #1
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	e11d      	b.n	8007d80 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	613b      	str	r3, [r7, #16]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	6939      	ldr	r1, [r7, #16]
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	000b      	movs	r3, r1
 8007b52:	0e1b      	lsrs	r3, r3, #24
 8007b54:	0010      	movs	r0, r2
 8007b56:	0205      	lsls	r5, r0, #8
 8007b58:	431d      	orrs	r5, r3
 8007b5a:	000b      	movs	r3, r1
 8007b5c:	021c      	lsls	r4, r3, #8
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	085b      	lsrs	r3, r3, #1
 8007b64:	60bb      	str	r3, [r7, #8]
 8007b66:	2300      	movs	r3, #0
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	68b8      	ldr	r0, [r7, #8]
 8007b6c:	68f9      	ldr	r1, [r7, #12]
 8007b6e:	1900      	adds	r0, r0, r4
 8007b70:	4169      	adcs	r1, r5
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	607b      	str	r3, [r7, #4]
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f7f8 fc92 	bl	80004a8 <__aeabi_uldivmod>
 8007b84:	0002      	movs	r2, r0
 8007b86:	000b      	movs	r3, r1
 8007b88:	0013      	movs	r3, r2
 8007b8a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b8e:	23c0      	movs	r3, #192	; 0xc0
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d309      	bcc.n	8007baa <UART_SetConfig+0x302>
 8007b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b98:	2380      	movs	r3, #128	; 0x80
 8007b9a:	035b      	lsls	r3, r3, #13
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d204      	bcs.n	8007baa <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba6:	60da      	str	r2, [r3, #12]
 8007ba8:	e0ea      	b.n	8007d80 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8007baa:	231a      	movs	r3, #26
 8007bac:	2218      	movs	r2, #24
 8007bae:	189b      	adds	r3, r3, r2
 8007bb0:	19db      	adds	r3, r3, r7
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	701a      	strb	r2, [r3, #0]
 8007bb6:	e0e3      	b.n	8007d80 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	69da      	ldr	r2, [r3, #28]
 8007bbc:	2380      	movs	r3, #128	; 0x80
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d000      	beq.n	8007bc6 <UART_SetConfig+0x31e>
 8007bc4:	e085      	b.n	8007cd2 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8007bc6:	231b      	movs	r3, #27
 8007bc8:	2218      	movs	r2, #24
 8007bca:	189b      	adds	r3, r3, r2
 8007bcc:	19db      	adds	r3, r3, r7
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b08      	cmp	r3, #8
 8007bd2:	d837      	bhi.n	8007c44 <UART_SetConfig+0x39c>
 8007bd4:	009a      	lsls	r2, r3, #2
 8007bd6:	4b10      	ldr	r3, [pc, #64]	; (8007c18 <UART_SetConfig+0x370>)
 8007bd8:	18d3      	adds	r3, r2, r3
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bde:	f7fd ff7f 	bl	8005ae0 <HAL_RCC_GetPCLK1Freq>
 8007be2:	0003      	movs	r3, r0
 8007be4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007be6:	e036      	b.n	8007c56 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007be8:	f7fd ff90 	bl	8005b0c <HAL_RCC_GetPCLK2Freq>
 8007bec:	0003      	movs	r3, r0
 8007bee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bf0:	e031      	b.n	8007c56 <UART_SetConfig+0x3ae>
 8007bf2:	46c0      	nop			; (mov r8, r8)
 8007bf4:	efff69f3 	.word	0xefff69f3
 8007bf8:	ffffcfff 	.word	0xffffcfff
 8007bfc:	40004800 	.word	0x40004800
 8007c00:	fffff4ff 	.word	0xfffff4ff
 8007c04:	40013800 	.word	0x40013800
 8007c08:	40021000 	.word	0x40021000
 8007c0c:	40004400 	.word	0x40004400
 8007c10:	003d0900 	.word	0x003d0900
 8007c14:	00f42400 	.word	0x00f42400
 8007c18:	0800d2f0 	.word	0x0800d2f0
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c1c:	4b60      	ldr	r3, [pc, #384]	; (8007da0 <UART_SetConfig+0x4f8>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2210      	movs	r2, #16
 8007c22:	4013      	ands	r3, r2
 8007c24:	d002      	beq.n	8007c2c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007c26:	4b5f      	ldr	r3, [pc, #380]	; (8007da4 <UART_SetConfig+0x4fc>)
 8007c28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c2a:	e014      	b.n	8007c56 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8007c2c:	4b5e      	ldr	r3, [pc, #376]	; (8007da8 <UART_SetConfig+0x500>)
 8007c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c30:	e011      	b.n	8007c56 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c32:	f7fd fea5 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 8007c36:	0003      	movs	r3, r0
 8007c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c3a:	e00c      	b.n	8007c56 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c3c:	2380      	movs	r3, #128	; 0x80
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c42:	e008      	b.n	8007c56 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c48:	231a      	movs	r3, #26
 8007c4a:	2218      	movs	r2, #24
 8007c4c:	189b      	adds	r3, r3, r2
 8007c4e:	19db      	adds	r3, r3, r7
 8007c50:	2201      	movs	r2, #1
 8007c52:	701a      	strb	r2, [r3, #0]
        break;
 8007c54:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d100      	bne.n	8007c5e <UART_SetConfig+0x3b6>
 8007c5c:	e090      	b.n	8007d80 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	005a      	lsls	r2, r3, #1
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	085b      	lsrs	r3, r3, #1
 8007c68:	18d2      	adds	r2, r2, r3
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	0019      	movs	r1, r3
 8007c70:	0010      	movs	r0, r2
 8007c72:	f7f8 fa65 	bl	8000140 <__udivsi3>
 8007c76:	0003      	movs	r3, r0
 8007c78:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	2b0f      	cmp	r3, #15
 8007c7e:	d921      	bls.n	8007cc4 <UART_SetConfig+0x41c>
 8007c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c82:	2380      	movs	r3, #128	; 0x80
 8007c84:	025b      	lsls	r3, r3, #9
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d21c      	bcs.n	8007cc4 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	200e      	movs	r0, #14
 8007c90:	2418      	movs	r4, #24
 8007c92:	1903      	adds	r3, r0, r4
 8007c94:	19db      	adds	r3, r3, r7
 8007c96:	210f      	movs	r1, #15
 8007c98:	438a      	bics	r2, r1
 8007c9a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9e:	085b      	lsrs	r3, r3, #1
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	2207      	movs	r2, #7
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	b299      	uxth	r1, r3
 8007ca8:	1903      	adds	r3, r0, r4
 8007caa:	19db      	adds	r3, r3, r7
 8007cac:	1902      	adds	r2, r0, r4
 8007cae:	19d2      	adds	r2, r2, r7
 8007cb0:	8812      	ldrh	r2, [r2, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	1902      	adds	r2, r0, r4
 8007cbc:	19d2      	adds	r2, r2, r7
 8007cbe:	8812      	ldrh	r2, [r2, #0]
 8007cc0:	60da      	str	r2, [r3, #12]
 8007cc2:	e05d      	b.n	8007d80 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8007cc4:	231a      	movs	r3, #26
 8007cc6:	2218      	movs	r2, #24
 8007cc8:	189b      	adds	r3, r3, r2
 8007cca:	19db      	adds	r3, r3, r7
 8007ccc:	2201      	movs	r2, #1
 8007cce:	701a      	strb	r2, [r3, #0]
 8007cd0:	e056      	b.n	8007d80 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cd2:	231b      	movs	r3, #27
 8007cd4:	2218      	movs	r2, #24
 8007cd6:	189b      	adds	r3, r3, r2
 8007cd8:	19db      	adds	r3, r3, r7
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	d822      	bhi.n	8007d26 <UART_SetConfig+0x47e>
 8007ce0:	009a      	lsls	r2, r3, #2
 8007ce2:	4b32      	ldr	r3, [pc, #200]	; (8007dac <UART_SetConfig+0x504>)
 8007ce4:	18d3      	adds	r3, r2, r3
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cea:	f7fd fef9 	bl	8005ae0 <HAL_RCC_GetPCLK1Freq>
 8007cee:	0003      	movs	r3, r0
 8007cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cf2:	e021      	b.n	8007d38 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cf4:	f7fd ff0a 	bl	8005b0c <HAL_RCC_GetPCLK2Freq>
 8007cf8:	0003      	movs	r3, r0
 8007cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cfc:	e01c      	b.n	8007d38 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cfe:	4b28      	ldr	r3, [pc, #160]	; (8007da0 <UART_SetConfig+0x4f8>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2210      	movs	r2, #16
 8007d04:	4013      	ands	r3, r2
 8007d06:	d002      	beq.n	8007d0e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007d08:	4b26      	ldr	r3, [pc, #152]	; (8007da4 <UART_SetConfig+0x4fc>)
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d0c:	e014      	b.n	8007d38 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8007d0e:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <UART_SetConfig+0x500>)
 8007d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d12:	e011      	b.n	8007d38 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d14:	f7fd fe34 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 8007d18:	0003      	movs	r3, r0
 8007d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d1c:	e00c      	b.n	8007d38 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d1e:	2380      	movs	r3, #128	; 0x80
 8007d20:	021b      	lsls	r3, r3, #8
 8007d22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d24:	e008      	b.n	8007d38 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007d2a:	231a      	movs	r3, #26
 8007d2c:	2218      	movs	r2, #24
 8007d2e:	189b      	adds	r3, r3, r2
 8007d30:	19db      	adds	r3, r3, r7
 8007d32:	2201      	movs	r2, #1
 8007d34:	701a      	strb	r2, [r3, #0]
        break;
 8007d36:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d020      	beq.n	8007d80 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	085a      	lsrs	r2, r3, #1
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d46:	18d2      	adds	r2, r2, r3
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	0019      	movs	r1, r3
 8007d4e:	0010      	movs	r0, r2
 8007d50:	f7f8 f9f6 	bl	8000140 <__udivsi3>
 8007d54:	0003      	movs	r3, r0
 8007d56:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	2b0f      	cmp	r3, #15
 8007d5c:	d90a      	bls.n	8007d74 <UART_SetConfig+0x4cc>
 8007d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d60:	2380      	movs	r3, #128	; 0x80
 8007d62:	025b      	lsls	r3, r3, #9
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d205      	bcs.n	8007d74 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	60da      	str	r2, [r3, #12]
 8007d72:	e005      	b.n	8007d80 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8007d74:	231a      	movs	r3, #26
 8007d76:	2218      	movs	r2, #24
 8007d78:	189b      	adds	r3, r3, r2
 8007d7a:	19db      	adds	r3, r3, r7
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	2200      	movs	r2, #0
 8007d84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007d8c:	231a      	movs	r3, #26
 8007d8e:	2218      	movs	r2, #24
 8007d90:	189b      	adds	r3, r3, r2
 8007d92:	19db      	adds	r3, r3, r7
 8007d94:	781b      	ldrb	r3, [r3, #0]
}
 8007d96:	0018      	movs	r0, r3
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	b00e      	add	sp, #56	; 0x38
 8007d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8007d9e:	46c0      	nop			; (mov r8, r8)
 8007da0:	40021000 	.word	0x40021000
 8007da4:	003d0900 	.word	0x003d0900
 8007da8:	00f42400 	.word	0x00f42400
 8007dac:	0800d314 	.word	0x0800d314

08007db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	d00b      	beq.n	8007dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	4a4a      	ldr	r2, [pc, #296]	; (8007ef4 <UART_AdvFeatureConfig+0x144>)
 8007dca:	4013      	ands	r3, r2
 8007dcc:	0019      	movs	r1, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	2202      	movs	r2, #2
 8007de0:	4013      	ands	r3, r2
 8007de2:	d00b      	beq.n	8007dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	4a43      	ldr	r2, [pc, #268]	; (8007ef8 <UART_AdvFeatureConfig+0x148>)
 8007dec:	4013      	ands	r3, r2
 8007dee:	0019      	movs	r1, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	2204      	movs	r2, #4
 8007e02:	4013      	ands	r3, r2
 8007e04:	d00b      	beq.n	8007e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	4a3b      	ldr	r2, [pc, #236]	; (8007efc <UART_AdvFeatureConfig+0x14c>)
 8007e0e:	4013      	ands	r3, r2
 8007e10:	0019      	movs	r1, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	2208      	movs	r2, #8
 8007e24:	4013      	ands	r3, r2
 8007e26:	d00b      	beq.n	8007e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	4a34      	ldr	r2, [pc, #208]	; (8007f00 <UART_AdvFeatureConfig+0x150>)
 8007e30:	4013      	ands	r3, r2
 8007e32:	0019      	movs	r1, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	2210      	movs	r2, #16
 8007e46:	4013      	ands	r3, r2
 8007e48:	d00b      	beq.n	8007e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	4a2c      	ldr	r2, [pc, #176]	; (8007f04 <UART_AdvFeatureConfig+0x154>)
 8007e52:	4013      	ands	r3, r2
 8007e54:	0019      	movs	r1, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	2220      	movs	r2, #32
 8007e68:	4013      	ands	r3, r2
 8007e6a:	d00b      	beq.n	8007e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	4a25      	ldr	r2, [pc, #148]	; (8007f08 <UART_AdvFeatureConfig+0x158>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	0019      	movs	r1, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	2240      	movs	r2, #64	; 0x40
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	d01d      	beq.n	8007eca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	4a1d      	ldr	r2, [pc, #116]	; (8007f0c <UART_AdvFeatureConfig+0x15c>)
 8007e96:	4013      	ands	r3, r2
 8007e98:	0019      	movs	r1, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eaa:	2380      	movs	r3, #128	; 0x80
 8007eac:	035b      	lsls	r3, r3, #13
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d10b      	bne.n	8007eca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	4a15      	ldr	r2, [pc, #84]	; (8007f10 <UART_AdvFeatureConfig+0x160>)
 8007eba:	4013      	ands	r3, r2
 8007ebc:	0019      	movs	r1, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	2280      	movs	r2, #128	; 0x80
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	d00b      	beq.n	8007eec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	4a0e      	ldr	r2, [pc, #56]	; (8007f14 <UART_AdvFeatureConfig+0x164>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	0019      	movs	r1, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	605a      	str	r2, [r3, #4]
  }
}
 8007eec:	46c0      	nop			; (mov r8, r8)
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	b002      	add	sp, #8
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	fffdffff 	.word	0xfffdffff
 8007ef8:	fffeffff 	.word	0xfffeffff
 8007efc:	fffbffff 	.word	0xfffbffff
 8007f00:	ffff7fff 	.word	0xffff7fff
 8007f04:	ffffefff 	.word	0xffffefff
 8007f08:	ffffdfff 	.word	0xffffdfff
 8007f0c:	ffefffff 	.word	0xffefffff
 8007f10:	ff9fffff 	.word	0xff9fffff
 8007f14:	fff7ffff 	.word	0xfff7ffff

08007f18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b092      	sub	sp, #72	; 0x48
 8007f1c:	af02      	add	r7, sp, #8
 8007f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2284      	movs	r2, #132	; 0x84
 8007f24:	2100      	movs	r1, #0
 8007f26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f28:	f7fc f82e 	bl	8003f88 <HAL_GetTick>
 8007f2c:	0003      	movs	r3, r0
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2208      	movs	r2, #8
 8007f38:	4013      	ands	r3, r2
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	d12c      	bne.n	8007f98 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f40:	2280      	movs	r2, #128	; 0x80
 8007f42:	0391      	lsls	r1, r2, #14
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	4a46      	ldr	r2, [pc, #280]	; (8008060 <UART_CheckIdleState+0x148>)
 8007f48:	9200      	str	r2, [sp, #0]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f000 f88c 	bl	8008068 <UART_WaitOnFlagUntilTimeout>
 8007f50:	1e03      	subs	r3, r0, #0
 8007f52:	d021      	beq.n	8007f98 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f54:	f3ef 8310 	mrs	r3, PRIMASK
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f5e:	2301      	movs	r3, #1
 8007f60:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	f383 8810 	msr	PRIMASK, r3
}
 8007f68:	46c0      	nop			; (mov r8, r8)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2180      	movs	r1, #128	; 0x80
 8007f76:	438a      	bics	r2, r1
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f80:	f383 8810 	msr	PRIMASK, r3
}
 8007f84:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2278      	movs	r2, #120	; 0x78
 8007f90:	2100      	movs	r1, #0
 8007f92:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e05f      	b.n	8008058 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2204      	movs	r2, #4
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d146      	bne.n	8008034 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa8:	2280      	movs	r2, #128	; 0x80
 8007faa:	03d1      	lsls	r1, r2, #15
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	4a2c      	ldr	r2, [pc, #176]	; (8008060 <UART_CheckIdleState+0x148>)
 8007fb0:	9200      	str	r2, [sp, #0]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f000 f858 	bl	8008068 <UART_WaitOnFlagUntilTimeout>
 8007fb8:	1e03      	subs	r3, r0, #0
 8007fba:	d03b      	beq.n	8008034 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8007fc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f383 8810 	msr	PRIMASK, r3
}
 8007fd0:	46c0      	nop			; (mov r8, r8)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4921      	ldr	r1, [pc, #132]	; (8008064 <UART_CheckIdleState+0x14c>)
 8007fde:	400a      	ands	r2, r1
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f383 8810 	msr	PRIMASK, r3
}
 8007fec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fee:	f3ef 8310 	mrs	r3, PRIMASK
 8007ff2:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ff4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff6:	633b      	str	r3, [r7, #48]	; 0x30
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	f383 8810 	msr	PRIMASK, r3
}
 8008002:	46c0      	nop			; (mov r8, r8)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689a      	ldr	r2, [r3, #8]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2101      	movs	r1, #1
 8008010:	438a      	bics	r2, r1
 8008012:	609a      	str	r2, [r3, #8]
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	f383 8810 	msr	PRIMASK, r3
}
 800801e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2280      	movs	r2, #128	; 0x80
 8008024:	2120      	movs	r1, #32
 8008026:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2278      	movs	r2, #120	; 0x78
 800802c:	2100      	movs	r1, #0
 800802e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e011      	b.n	8008058 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2220      	movs	r2, #32
 8008038:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2280      	movs	r2, #128	; 0x80
 800803e:	2120      	movs	r1, #32
 8008040:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2278      	movs	r2, #120	; 0x78
 8008052:	2100      	movs	r1, #0
 8008054:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	0018      	movs	r0, r3
 800805a:	46bd      	mov	sp, r7
 800805c:	b010      	add	sp, #64	; 0x40
 800805e:	bd80      	pop	{r7, pc}
 8008060:	01ffffff 	.word	0x01ffffff
 8008064:	fffffedf 	.word	0xfffffedf

08008068 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	1dfb      	adds	r3, r7, #7
 8008076:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008078:	e04b      	b.n	8008112 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	3301      	adds	r3, #1
 800807e:	d048      	beq.n	8008112 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008080:	f7fb ff82 	bl	8003f88 <HAL_GetTick>
 8008084:	0002      	movs	r2, r0
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	429a      	cmp	r2, r3
 800808e:	d302      	bcc.n	8008096 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e04b      	b.n	8008132 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2204      	movs	r2, #4
 80080a2:	4013      	ands	r3, r2
 80080a4:	d035      	beq.n	8008112 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	69db      	ldr	r3, [r3, #28]
 80080ac:	2208      	movs	r2, #8
 80080ae:	4013      	ands	r3, r2
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d111      	bne.n	80080d8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2208      	movs	r2, #8
 80080ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	0018      	movs	r0, r3
 80080c0:	f000 f906 	bl	80082d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2284      	movs	r2, #132	; 0x84
 80080c8:	2108      	movs	r1, #8
 80080ca:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2278      	movs	r2, #120	; 0x78
 80080d0:	2100      	movs	r1, #0
 80080d2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e02c      	b.n	8008132 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69da      	ldr	r2, [r3, #28]
 80080de:	2380      	movs	r3, #128	; 0x80
 80080e0:	011b      	lsls	r3, r3, #4
 80080e2:	401a      	ands	r2, r3
 80080e4:	2380      	movs	r3, #128	; 0x80
 80080e6:	011b      	lsls	r3, r3, #4
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d112      	bne.n	8008112 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2280      	movs	r2, #128	; 0x80
 80080f2:	0112      	lsls	r2, r2, #4
 80080f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	0018      	movs	r0, r3
 80080fa:	f000 f8e9 	bl	80082d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2284      	movs	r2, #132	; 0x84
 8008102:	2120      	movs	r1, #32
 8008104:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2278      	movs	r2, #120	; 0x78
 800810a:	2100      	movs	r1, #0
 800810c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e00f      	b.n	8008132 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	4013      	ands	r3, r2
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	425a      	negs	r2, r3
 8008122:	4153      	adcs	r3, r2
 8008124:	b2db      	uxtb	r3, r3
 8008126:	001a      	movs	r2, r3
 8008128:	1dfb      	adds	r3, r7, #7
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	429a      	cmp	r2, r3
 800812e:	d0a4      	beq.n	800807a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	0018      	movs	r0, r3
 8008134:	46bd      	mov	sp, r7
 8008136:	b004      	add	sp, #16
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b090      	sub	sp, #64	; 0x40
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	1dbb      	adds	r3, r7, #6
 8008148:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	1dba      	adds	r2, r7, #6
 8008154:	2158      	movs	r1, #88	; 0x58
 8008156:	8812      	ldrh	r2, [r2, #0]
 8008158:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	1dba      	adds	r2, r7, #6
 800815e:	215a      	movs	r1, #90	; 0x5a
 8008160:	8812      	ldrh	r2, [r2, #0]
 8008162:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	2380      	movs	r3, #128	; 0x80
 8008170:	015b      	lsls	r3, r3, #5
 8008172:	429a      	cmp	r2, r3
 8008174:	d10d      	bne.n	8008192 <UART_Start_Receive_IT+0x56>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d104      	bne.n	8008188 <UART_Start_Receive_IT+0x4c>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	225c      	movs	r2, #92	; 0x5c
 8008182:	4950      	ldr	r1, [pc, #320]	; (80082c4 <UART_Start_Receive_IT+0x188>)
 8008184:	5299      	strh	r1, [r3, r2]
 8008186:	e02e      	b.n	80081e6 <UART_Start_Receive_IT+0xaa>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	225c      	movs	r2, #92	; 0x5c
 800818c:	21ff      	movs	r1, #255	; 0xff
 800818e:	5299      	strh	r1, [r3, r2]
 8008190:	e029      	b.n	80081e6 <UART_Start_Receive_IT+0xaa>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10d      	bne.n	80081b6 <UART_Start_Receive_IT+0x7a>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d104      	bne.n	80081ac <UART_Start_Receive_IT+0x70>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	225c      	movs	r2, #92	; 0x5c
 80081a6:	21ff      	movs	r1, #255	; 0xff
 80081a8:	5299      	strh	r1, [r3, r2]
 80081aa:	e01c      	b.n	80081e6 <UART_Start_Receive_IT+0xaa>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	225c      	movs	r2, #92	; 0x5c
 80081b0:	217f      	movs	r1, #127	; 0x7f
 80081b2:	5299      	strh	r1, [r3, r2]
 80081b4:	e017      	b.n	80081e6 <UART_Start_Receive_IT+0xaa>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	689a      	ldr	r2, [r3, #8]
 80081ba:	2380      	movs	r3, #128	; 0x80
 80081bc:	055b      	lsls	r3, r3, #21
 80081be:	429a      	cmp	r2, r3
 80081c0:	d10d      	bne.n	80081de <UART_Start_Receive_IT+0xa2>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d104      	bne.n	80081d4 <UART_Start_Receive_IT+0x98>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	225c      	movs	r2, #92	; 0x5c
 80081ce:	217f      	movs	r1, #127	; 0x7f
 80081d0:	5299      	strh	r1, [r3, r2]
 80081d2:	e008      	b.n	80081e6 <UART_Start_Receive_IT+0xaa>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	225c      	movs	r2, #92	; 0x5c
 80081d8:	213f      	movs	r1, #63	; 0x3f
 80081da:	5299      	strh	r1, [r3, r2]
 80081dc:	e003      	b.n	80081e6 <UART_Start_Receive_IT+0xaa>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	225c      	movs	r2, #92	; 0x5c
 80081e2:	2100      	movs	r1, #0
 80081e4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2284      	movs	r2, #132	; 0x84
 80081ea:	2100      	movs	r1, #0
 80081ec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2280      	movs	r2, #128	; 0x80
 80081f2:	2122      	movs	r1, #34	; 0x22
 80081f4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f6:	f3ef 8310 	mrs	r3, PRIMASK
 80081fa:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008200:	2301      	movs	r3, #1
 8008202:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008206:	f383 8810 	msr	PRIMASK, r3
}
 800820a:	46c0      	nop			; (mov r8, r8)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689a      	ldr	r2, [r3, #8]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2101      	movs	r1, #1
 8008218:	430a      	orrs	r2, r1
 800821a:	609a      	str	r2, [r3, #8]
 800821c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	f383 8810 	msr	PRIMASK, r3
}
 8008226:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	2380      	movs	r3, #128	; 0x80
 800822e:	015b      	lsls	r3, r3, #5
 8008230:	429a      	cmp	r2, r3
 8008232:	d107      	bne.n	8008244 <UART_Start_Receive_IT+0x108>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d103      	bne.n	8008244 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4a22      	ldr	r2, [pc, #136]	; (80082c8 <UART_Start_Receive_IT+0x18c>)
 8008240:	669a      	str	r2, [r3, #104]	; 0x68
 8008242:	e002      	b.n	800824a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4a21      	ldr	r2, [pc, #132]	; (80082cc <UART_Start_Receive_IT+0x190>)
 8008248:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d019      	beq.n	8008286 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008252:	f3ef 8310 	mrs	r3, PRIMASK
 8008256:	61fb      	str	r3, [r7, #28]
  return(result);
 8008258:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800825a:	637b      	str	r3, [r7, #52]	; 0x34
 800825c:	2301      	movs	r3, #1
 800825e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008260:	6a3b      	ldr	r3, [r7, #32]
 8008262:	f383 8810 	msr	PRIMASK, r3
}
 8008266:	46c0      	nop			; (mov r8, r8)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2190      	movs	r1, #144	; 0x90
 8008274:	0049      	lsls	r1, r1, #1
 8008276:	430a      	orrs	r2, r1
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	f383 8810 	msr	PRIMASK, r3
}
 8008284:	e018      	b.n	80082b8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008286:	f3ef 8310 	mrs	r3, PRIMASK
 800828a:	613b      	str	r3, [r7, #16]
  return(result);
 800828c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800828e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008290:	2301      	movs	r3, #1
 8008292:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f383 8810 	msr	PRIMASK, r3
}
 800829a:	46c0      	nop			; (mov r8, r8)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2120      	movs	r1, #32
 80082a8:	430a      	orrs	r2, r1
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	f383 8810 	msr	PRIMASK, r3
}
 80082b6:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	0018      	movs	r0, r3
 80082bc:	46bd      	mov	sp, r7
 80082be:	b010      	add	sp, #64	; 0x40
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	46c0      	nop			; (mov r8, r8)
 80082c4:	000001ff 	.word	0x000001ff
 80082c8:	08008751 	.word	0x08008751
 80082cc:	0800858d 	.word	0x0800858d

080082d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08e      	sub	sp, #56	; 0x38
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082d8:	f3ef 8310 	mrs	r3, PRIMASK
 80082dc:	617b      	str	r3, [r7, #20]
  return(result);
 80082de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082e0:	637b      	str	r3, [r7, #52]	; 0x34
 80082e2:	2301      	movs	r3, #1
 80082e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	f383 8810 	msr	PRIMASK, r3
}
 80082ec:	46c0      	nop			; (mov r8, r8)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4926      	ldr	r1, [pc, #152]	; (8008394 <UART_EndRxTransfer+0xc4>)
 80082fa:	400a      	ands	r2, r1
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008300:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	f383 8810 	msr	PRIMASK, r3
}
 8008308:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800830a:	f3ef 8310 	mrs	r3, PRIMASK
 800830e:	623b      	str	r3, [r7, #32]
  return(result);
 8008310:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008312:	633b      	str	r3, [r7, #48]	; 0x30
 8008314:	2301      	movs	r3, #1
 8008316:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	f383 8810 	msr	PRIMASK, r3
}
 800831e:	46c0      	nop			; (mov r8, r8)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689a      	ldr	r2, [r3, #8]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2101      	movs	r1, #1
 800832c:	438a      	bics	r2, r1
 800832e:	609a      	str	r2, [r3, #8]
 8008330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008332:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	f383 8810 	msr	PRIMASK, r3
}
 800833a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008340:	2b01      	cmp	r3, #1
 8008342:	d118      	bne.n	8008376 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008344:	f3ef 8310 	mrs	r3, PRIMASK
 8008348:	60bb      	str	r3, [r7, #8]
  return(result);
 800834a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800834c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800834e:	2301      	movs	r3, #1
 8008350:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f383 8810 	msr	PRIMASK, r3
}
 8008358:	46c0      	nop			; (mov r8, r8)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2110      	movs	r1, #16
 8008366:	438a      	bics	r2, r1
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f383 8810 	msr	PRIMASK, r3
}
 8008374:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2280      	movs	r2, #128	; 0x80
 800837a:	2120      	movs	r1, #32
 800837c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	669a      	str	r2, [r3, #104]	; 0x68
}
 800838a:	46c0      	nop			; (mov r8, r8)
 800838c:	46bd      	mov	sp, r7
 800838e:	b00e      	add	sp, #56	; 0x38
 8008390:	bd80      	pop	{r7, pc}
 8008392:	46c0      	nop			; (mov r8, r8)
 8008394:	fffffedf 	.word	0xfffffedf

08008398 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	225a      	movs	r2, #90	; 0x5a
 80083aa:	2100      	movs	r1, #0
 80083ac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2252      	movs	r2, #82	; 0x52
 80083b2:	2100      	movs	r1, #0
 80083b4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	0018      	movs	r0, r3
 80083ba:	f7ff fa61 	bl	8007880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083be:	46c0      	nop			; (mov r8, r8)
 80083c0:	46bd      	mov	sp, r7
 80083c2:	b004      	add	sp, #16
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b08a      	sub	sp, #40	; 0x28
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083d2:	2b21      	cmp	r3, #33	; 0x21
 80083d4:	d14c      	bne.n	8008470 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2252      	movs	r2, #82	; 0x52
 80083da:	5a9b      	ldrh	r3, [r3, r2]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d132      	bne.n	8008448 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083e2:	f3ef 8310 	mrs	r3, PRIMASK
 80083e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80083e8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80083ea:	627b      	str	r3, [r7, #36]	; 0x24
 80083ec:	2301      	movs	r3, #1
 80083ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f383 8810 	msr	PRIMASK, r3
}
 80083f6:	46c0      	nop			; (mov r8, r8)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2180      	movs	r1, #128	; 0x80
 8008404:	438a      	bics	r2, r1
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	f383 8810 	msr	PRIMASK, r3
}
 8008412:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008414:	f3ef 8310 	mrs	r3, PRIMASK
 8008418:	617b      	str	r3, [r7, #20]
  return(result);
 800841a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800841c:	623b      	str	r3, [r7, #32]
 800841e:	2301      	movs	r3, #1
 8008420:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	f383 8810 	msr	PRIMASK, r3
}
 8008428:	46c0      	nop			; (mov r8, r8)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2140      	movs	r1, #64	; 0x40
 8008436:	430a      	orrs	r2, r1
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	6a3b      	ldr	r3, [r7, #32]
 800843c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	f383 8810 	msr	PRIMASK, r3
}
 8008444:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008446:	e013      	b.n	8008470 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800844c:	781a      	ldrb	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2252      	movs	r2, #82	; 0x52
 8008462:	5a9b      	ldrh	r3, [r3, r2]
 8008464:	b29b      	uxth	r3, r3
 8008466:	3b01      	subs	r3, #1
 8008468:	b299      	uxth	r1, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2252      	movs	r2, #82	; 0x52
 800846e:	5299      	strh	r1, [r3, r2]
}
 8008470:	46c0      	nop			; (mov r8, r8)
 8008472:	46bd      	mov	sp, r7
 8008474:	b00a      	add	sp, #40	; 0x28
 8008476:	bd80      	pop	{r7, pc}

08008478 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08c      	sub	sp, #48	; 0x30
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008484:	2b21      	cmp	r3, #33	; 0x21
 8008486:	d151      	bne.n	800852c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2252      	movs	r2, #82	; 0x52
 800848c:	5a9b      	ldrh	r3, [r3, r2]
 800848e:	b29b      	uxth	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	d132      	bne.n	80084fa <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008494:	f3ef 8310 	mrs	r3, PRIMASK
 8008498:	60fb      	str	r3, [r7, #12]
  return(result);
 800849a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800849c:	62bb      	str	r3, [r7, #40]	; 0x28
 800849e:	2301      	movs	r3, #1
 80084a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f383 8810 	msr	PRIMASK, r3
}
 80084a8:	46c0      	nop			; (mov r8, r8)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2180      	movs	r1, #128	; 0x80
 80084b6:	438a      	bics	r2, r1
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f383 8810 	msr	PRIMASK, r3
}
 80084c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084c6:	f3ef 8310 	mrs	r3, PRIMASK
 80084ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80084cc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
 80084d0:	2301      	movs	r3, #1
 80084d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	f383 8810 	msr	PRIMASK, r3
}
 80084da:	46c0      	nop			; (mov r8, r8)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2140      	movs	r1, #64	; 0x40
 80084e8:	430a      	orrs	r2, r1
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	f383 8810 	msr	PRIMASK, r3
}
 80084f6:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80084f8:	e018      	b.n	800852c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	001a      	movs	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	05d2      	lsls	r2, r2, #23
 800850c:	0dd2      	lsrs	r2, r2, #23
 800850e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008514:	1c9a      	adds	r2, r3, #2
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2252      	movs	r2, #82	; 0x52
 800851e:	5a9b      	ldrh	r3, [r3, r2]
 8008520:	b29b      	uxth	r3, r3
 8008522:	3b01      	subs	r3, #1
 8008524:	b299      	uxth	r1, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2252      	movs	r2, #82	; 0x52
 800852a:	5299      	strh	r1, [r3, r2]
}
 800852c:	46c0      	nop			; (mov r8, r8)
 800852e:	46bd      	mov	sp, r7
 8008530:	b00c      	add	sp, #48	; 0x30
 8008532:	bd80      	pop	{r7, pc}

08008534 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800853c:	f3ef 8310 	mrs	r3, PRIMASK
 8008540:	60bb      	str	r3, [r7, #8]
  return(result);
 8008542:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008544:	617b      	str	r3, [r7, #20]
 8008546:	2301      	movs	r3, #1
 8008548:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f383 8810 	msr	PRIMASK, r3
}
 8008550:	46c0      	nop			; (mov r8, r8)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2140      	movs	r1, #64	; 0x40
 800855e:	438a      	bics	r2, r1
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f383 8810 	msr	PRIMASK, r3
}
 800856c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2220      	movs	r2, #32
 8008572:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	0018      	movs	r0, r3
 800857e:	f7ff f977 	bl	8007870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008582:	46c0      	nop			; (mov r8, r8)
 8008584:	46bd      	mov	sp, r7
 8008586:	b006      	add	sp, #24
 8008588:	bd80      	pop	{r7, pc}
	...

0800858c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b094      	sub	sp, #80	; 0x50
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008594:	204e      	movs	r0, #78	; 0x4e
 8008596:	183b      	adds	r3, r7, r0
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	215c      	movs	r1, #92	; 0x5c
 800859c:	5a52      	ldrh	r2, [r2, r1]
 800859e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2280      	movs	r2, #128	; 0x80
 80085a4:	589b      	ldr	r3, [r3, r2]
 80085a6:	2b22      	cmp	r3, #34	; 0x22
 80085a8:	d000      	beq.n	80085ac <UART_RxISR_8BIT+0x20>
 80085aa:	e0bf      	b.n	800872c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085b2:	214c      	movs	r1, #76	; 0x4c
 80085b4:	187b      	adds	r3, r7, r1
 80085b6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80085b8:	187b      	adds	r3, r7, r1
 80085ba:	881b      	ldrh	r3, [r3, #0]
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	183b      	adds	r3, r7, r0
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	b2d9      	uxtb	r1, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c8:	400a      	ands	r2, r1
 80085ca:	b2d2      	uxtb	r2, r2
 80085cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	225a      	movs	r2, #90	; 0x5a
 80085dc:	5a9b      	ldrh	r3, [r3, r2]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	3b01      	subs	r3, #1
 80085e2:	b299      	uxth	r1, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	225a      	movs	r2, #90	; 0x5a
 80085e8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	225a      	movs	r2, #90	; 0x5a
 80085ee:	5a9b      	ldrh	r3, [r3, r2]
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d000      	beq.n	80085f8 <UART_RxISR_8BIT+0x6c>
 80085f6:	e0a1      	b.n	800873c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085f8:	f3ef 8310 	mrs	r3, PRIMASK
 80085fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008600:	64bb      	str	r3, [r7, #72]	; 0x48
 8008602:	2301      	movs	r3, #1
 8008604:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	f383 8810 	msr	PRIMASK, r3
}
 800860c:	46c0      	nop			; (mov r8, r8)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	494a      	ldr	r1, [pc, #296]	; (8008744 <UART_RxISR_8BIT+0x1b8>)
 800861a:	400a      	ands	r2, r1
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008620:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008624:	f383 8810 	msr	PRIMASK, r3
}
 8008628:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800862a:	f3ef 8310 	mrs	r3, PRIMASK
 800862e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008632:	647b      	str	r3, [r7, #68]	; 0x44
 8008634:	2301      	movs	r3, #1
 8008636:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863a:	f383 8810 	msr	PRIMASK, r3
}
 800863e:	46c0      	nop			; (mov r8, r8)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2101      	movs	r1, #1
 800864c:	438a      	bics	r2, r1
 800864e:	609a      	str	r2, [r3, #8]
 8008650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008652:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008656:	f383 8810 	msr	PRIMASK, r3
}
 800865a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2280      	movs	r2, #128	; 0x80
 8008660:	2120      	movs	r1, #32
 8008662:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a34      	ldr	r2, [pc, #208]	; (8008748 <UART_RxISR_8BIT+0x1bc>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d01f      	beq.n	80086ba <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	2380      	movs	r3, #128	; 0x80
 8008682:	041b      	lsls	r3, r3, #16
 8008684:	4013      	ands	r3, r2
 8008686:	d018      	beq.n	80086ba <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008688:	f3ef 8310 	mrs	r3, PRIMASK
 800868c:	61bb      	str	r3, [r7, #24]
  return(result);
 800868e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008690:	643b      	str	r3, [r7, #64]	; 0x40
 8008692:	2301      	movs	r3, #1
 8008694:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	f383 8810 	msr	PRIMASK, r3
}
 800869c:	46c0      	nop			; (mov r8, r8)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4928      	ldr	r1, [pc, #160]	; (800874c <UART_RxISR_8BIT+0x1c0>)
 80086aa:	400a      	ands	r2, r1
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	f383 8810 	msr	PRIMASK, r3
}
 80086b8:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d12f      	bne.n	8008722 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086c8:	f3ef 8310 	mrs	r3, PRIMASK
 80086cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80086ce:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086d2:	2301      	movs	r3, #1
 80086d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	f383 8810 	msr	PRIMASK, r3
}
 80086dc:	46c0      	nop			; (mov r8, r8)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2110      	movs	r1, #16
 80086ea:	438a      	bics	r2, r1
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f383 8810 	msr	PRIMASK, r3
}
 80086f8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	2210      	movs	r2, #16
 8008702:	4013      	ands	r3, r2
 8008704:	2b10      	cmp	r3, #16
 8008706:	d103      	bne.n	8008710 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2210      	movs	r2, #16
 800870e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2258      	movs	r2, #88	; 0x58
 8008714:	5a9a      	ldrh	r2, [r3, r2]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	0011      	movs	r1, r2
 800871a:	0018      	movs	r0, r3
 800871c:	f7ff f8b8 	bl	8007890 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008720:	e00c      	b.n	800873c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	0018      	movs	r0, r3
 8008726:	f7fa f9cf 	bl	8002ac8 <HAL_UART_RxCpltCallback>
}
 800872a:	e007      	b.n	800873c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	699a      	ldr	r2, [r3, #24]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2108      	movs	r1, #8
 8008738:	430a      	orrs	r2, r1
 800873a:	619a      	str	r2, [r3, #24]
}
 800873c:	46c0      	nop			; (mov r8, r8)
 800873e:	46bd      	mov	sp, r7
 8008740:	b014      	add	sp, #80	; 0x50
 8008742:	bd80      	pop	{r7, pc}
 8008744:	fffffedf 	.word	0xfffffedf
 8008748:	40004800 	.word	0x40004800
 800874c:	fbffffff 	.word	0xfbffffff

08008750 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b094      	sub	sp, #80	; 0x50
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008758:	204e      	movs	r0, #78	; 0x4e
 800875a:	183b      	adds	r3, r7, r0
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	215c      	movs	r1, #92	; 0x5c
 8008760:	5a52      	ldrh	r2, [r2, r1]
 8008762:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2280      	movs	r2, #128	; 0x80
 8008768:	589b      	ldr	r3, [r3, r2]
 800876a:	2b22      	cmp	r3, #34	; 0x22
 800876c:	d000      	beq.n	8008770 <UART_RxISR_16BIT+0x20>
 800876e:	e0bf      	b.n	80088f0 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008776:	214c      	movs	r1, #76	; 0x4c
 8008778:	187b      	adds	r3, r7, r1
 800877a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008780:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8008782:	187b      	adds	r3, r7, r1
 8008784:	183a      	adds	r2, r7, r0
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	8812      	ldrh	r2, [r2, #0]
 800878a:	4013      	ands	r3, r2
 800878c:	b29a      	uxth	r2, r3
 800878e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008790:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008796:	1c9a      	adds	r2, r3, #2
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	225a      	movs	r2, #90	; 0x5a
 80087a0:	5a9b      	ldrh	r3, [r3, r2]
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b299      	uxth	r1, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	225a      	movs	r2, #90	; 0x5a
 80087ac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	225a      	movs	r2, #90	; 0x5a
 80087b2:	5a9b      	ldrh	r3, [r3, r2]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d000      	beq.n	80087bc <UART_RxISR_16BIT+0x6c>
 80087ba:	e0a1      	b.n	8008900 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087bc:	f3ef 8310 	mrs	r3, PRIMASK
 80087c0:	623b      	str	r3, [r7, #32]
  return(result);
 80087c2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087c4:	647b      	str	r3, [r7, #68]	; 0x44
 80087c6:	2301      	movs	r3, #1
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	f383 8810 	msr	PRIMASK, r3
}
 80087d0:	46c0      	nop			; (mov r8, r8)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	494a      	ldr	r1, [pc, #296]	; (8008908 <UART_RxISR_16BIT+0x1b8>)
 80087de:	400a      	ands	r2, r1
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e8:	f383 8810 	msr	PRIMASK, r3
}
 80087ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087ee:	f3ef 8310 	mrs	r3, PRIMASK
 80087f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80087f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f6:	643b      	str	r3, [r7, #64]	; 0x40
 80087f8:	2301      	movs	r3, #1
 80087fa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fe:	f383 8810 	msr	PRIMASK, r3
}
 8008802:	46c0      	nop			; (mov r8, r8)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2101      	movs	r1, #1
 8008810:	438a      	bics	r2, r1
 8008812:	609a      	str	r2, [r3, #8]
 8008814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008816:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881a:	f383 8810 	msr	PRIMASK, r3
}
 800881e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2280      	movs	r2, #128	; 0x80
 8008824:	2120      	movs	r1, #32
 8008826:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a34      	ldr	r2, [pc, #208]	; (800890c <UART_RxISR_16BIT+0x1bc>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d01f      	beq.n	800887e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	2380      	movs	r3, #128	; 0x80
 8008846:	041b      	lsls	r3, r3, #16
 8008848:	4013      	ands	r3, r2
 800884a:	d018      	beq.n	800887e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800884c:	f3ef 8310 	mrs	r3, PRIMASK
 8008850:	617b      	str	r3, [r7, #20]
  return(result);
 8008852:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008856:	2301      	movs	r3, #1
 8008858:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	f383 8810 	msr	PRIMASK, r3
}
 8008860:	46c0      	nop			; (mov r8, r8)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4928      	ldr	r1, [pc, #160]	; (8008910 <UART_RxISR_16BIT+0x1c0>)
 800886e:	400a      	ands	r2, r1
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008874:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	f383 8810 	msr	PRIMASK, r3
}
 800887c:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008882:	2b01      	cmp	r3, #1
 8008884:	d12f      	bne.n	80088e6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800888c:	f3ef 8310 	mrs	r3, PRIMASK
 8008890:	60bb      	str	r3, [r7, #8]
  return(result);
 8008892:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008894:	63bb      	str	r3, [r7, #56]	; 0x38
 8008896:	2301      	movs	r3, #1
 8008898:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f383 8810 	msr	PRIMASK, r3
}
 80088a0:	46c0      	nop			; (mov r8, r8)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2110      	movs	r1, #16
 80088ae:	438a      	bics	r2, r1
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f383 8810 	msr	PRIMASK, r3
}
 80088bc:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	2210      	movs	r2, #16
 80088c6:	4013      	ands	r3, r2
 80088c8:	2b10      	cmp	r3, #16
 80088ca:	d103      	bne.n	80088d4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2210      	movs	r2, #16
 80088d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2258      	movs	r2, #88	; 0x58
 80088d8:	5a9a      	ldrh	r2, [r3, r2]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	0011      	movs	r1, r2
 80088de:	0018      	movs	r0, r3
 80088e0:	f7fe ffd6 	bl	8007890 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088e4:	e00c      	b.n	8008900 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	0018      	movs	r0, r3
 80088ea:	f7fa f8ed 	bl	8002ac8 <HAL_UART_RxCpltCallback>
}
 80088ee:	e007      	b.n	8008900 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	699a      	ldr	r2, [r3, #24]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2108      	movs	r1, #8
 80088fc:	430a      	orrs	r2, r1
 80088fe:	619a      	str	r2, [r3, #24]
}
 8008900:	46c0      	nop			; (mov r8, r8)
 8008902:	46bd      	mov	sp, r7
 8008904:	b014      	add	sp, #80	; 0x50
 8008906:	bd80      	pop	{r7, pc}
 8008908:	fffffedf 	.word	0xfffffedf
 800890c:	40004800 	.word	0x40004800
 8008910:	fbffffff 	.word	0xfbffffff

08008914 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800891c:	46c0      	nop			; (mov r8, r8)
 800891e:	46bd      	mov	sp, r7
 8008920:	b002      	add	sp, #8
 8008922:	bd80      	pop	{r7, pc}

08008924 <sulp>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	0016      	movs	r6, r2
 8008928:	000d      	movs	r5, r1
 800892a:	f003 fe5d 	bl	800c5e8 <__ulp>
 800892e:	2e00      	cmp	r6, #0
 8008930:	d00d      	beq.n	800894e <sulp+0x2a>
 8008932:	236b      	movs	r3, #107	; 0x6b
 8008934:	006a      	lsls	r2, r5, #1
 8008936:	0d52      	lsrs	r2, r2, #21
 8008938:	1a9b      	subs	r3, r3, r2
 800893a:	2b00      	cmp	r3, #0
 800893c:	dd07      	ble.n	800894e <sulp+0x2a>
 800893e:	2400      	movs	r4, #0
 8008940:	4a03      	ldr	r2, [pc, #12]	; (8008950 <sulp+0x2c>)
 8008942:	051b      	lsls	r3, r3, #20
 8008944:	189d      	adds	r5, r3, r2
 8008946:	002b      	movs	r3, r5
 8008948:	0022      	movs	r2, r4
 800894a:	f7f8 fe91 	bl	8001670 <__aeabi_dmul>
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	3ff00000 	.word	0x3ff00000

08008954 <_strtod_l>:
 8008954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008956:	b0a1      	sub	sp, #132	; 0x84
 8008958:	9219      	str	r2, [sp, #100]	; 0x64
 800895a:	2200      	movs	r2, #0
 800895c:	2600      	movs	r6, #0
 800895e:	2700      	movs	r7, #0
 8008960:	9004      	str	r0, [sp, #16]
 8008962:	9107      	str	r1, [sp, #28]
 8008964:	921c      	str	r2, [sp, #112]	; 0x70
 8008966:	911b      	str	r1, [sp, #108]	; 0x6c
 8008968:	780a      	ldrb	r2, [r1, #0]
 800896a:	2a2b      	cmp	r2, #43	; 0x2b
 800896c:	d055      	beq.n	8008a1a <_strtod_l+0xc6>
 800896e:	d841      	bhi.n	80089f4 <_strtod_l+0xa0>
 8008970:	2a0d      	cmp	r2, #13
 8008972:	d83b      	bhi.n	80089ec <_strtod_l+0x98>
 8008974:	2a08      	cmp	r2, #8
 8008976:	d83b      	bhi.n	80089f0 <_strtod_l+0x9c>
 8008978:	2a00      	cmp	r2, #0
 800897a:	d044      	beq.n	8008a06 <_strtod_l+0xb2>
 800897c:	2200      	movs	r2, #0
 800897e:	920f      	str	r2, [sp, #60]	; 0x3c
 8008980:	2100      	movs	r1, #0
 8008982:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008984:	9109      	str	r1, [sp, #36]	; 0x24
 8008986:	782a      	ldrb	r2, [r5, #0]
 8008988:	2a30      	cmp	r2, #48	; 0x30
 800898a:	d000      	beq.n	800898e <_strtod_l+0x3a>
 800898c:	e085      	b.n	8008a9a <_strtod_l+0x146>
 800898e:	786a      	ldrb	r2, [r5, #1]
 8008990:	3120      	adds	r1, #32
 8008992:	438a      	bics	r2, r1
 8008994:	2a58      	cmp	r2, #88	; 0x58
 8008996:	d000      	beq.n	800899a <_strtod_l+0x46>
 8008998:	e075      	b.n	8008a86 <_strtod_l+0x132>
 800899a:	9302      	str	r3, [sp, #8]
 800899c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800899e:	4a97      	ldr	r2, [pc, #604]	; (8008bfc <_strtod_l+0x2a8>)
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	ab1c      	add	r3, sp, #112	; 0x70
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	9804      	ldr	r0, [sp, #16]
 80089a8:	ab1d      	add	r3, sp, #116	; 0x74
 80089aa:	a91b      	add	r1, sp, #108	; 0x6c
 80089ac:	f002 fed4 	bl	800b758 <__gethex>
 80089b0:	230f      	movs	r3, #15
 80089b2:	0002      	movs	r2, r0
 80089b4:	401a      	ands	r2, r3
 80089b6:	0004      	movs	r4, r0
 80089b8:	9205      	str	r2, [sp, #20]
 80089ba:	4218      	tst	r0, r3
 80089bc:	d005      	beq.n	80089ca <_strtod_l+0x76>
 80089be:	2a06      	cmp	r2, #6
 80089c0:	d12d      	bne.n	8008a1e <_strtod_l+0xca>
 80089c2:	1c6b      	adds	r3, r5, #1
 80089c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80089c6:	2300      	movs	r3, #0
 80089c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80089ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <_strtod_l+0x82>
 80089d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d01b      	beq.n	8008a14 <_strtod_l+0xc0>
 80089dc:	2380      	movs	r3, #128	; 0x80
 80089de:	0032      	movs	r2, r6
 80089e0:	061b      	lsls	r3, r3, #24
 80089e2:	18fb      	adds	r3, r7, r3
 80089e4:	0010      	movs	r0, r2
 80089e6:	0019      	movs	r1, r3
 80089e8:	b021      	add	sp, #132	; 0x84
 80089ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ec:	2a20      	cmp	r2, #32
 80089ee:	d1c5      	bne.n	800897c <_strtod_l+0x28>
 80089f0:	3101      	adds	r1, #1
 80089f2:	e7b8      	b.n	8008966 <_strtod_l+0x12>
 80089f4:	2a2d      	cmp	r2, #45	; 0x2d
 80089f6:	d1c1      	bne.n	800897c <_strtod_l+0x28>
 80089f8:	3a2c      	subs	r2, #44	; 0x2c
 80089fa:	920f      	str	r2, [sp, #60]	; 0x3c
 80089fc:	1c4a      	adds	r2, r1, #1
 80089fe:	921b      	str	r2, [sp, #108]	; 0x6c
 8008a00:	784a      	ldrb	r2, [r1, #1]
 8008a02:	2a00      	cmp	r2, #0
 8008a04:	d1bc      	bne.n	8008980 <_strtod_l+0x2c>
 8008a06:	9b07      	ldr	r3, [sp, #28]
 8008a08:	931b      	str	r3, [sp, #108]	; 0x6c
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1dd      	bne.n	80089d0 <_strtod_l+0x7c>
 8008a14:	0032      	movs	r2, r6
 8008a16:	003b      	movs	r3, r7
 8008a18:	e7e4      	b.n	80089e4 <_strtod_l+0x90>
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	e7ed      	b.n	80089fa <_strtod_l+0xa6>
 8008a1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008a20:	2a00      	cmp	r2, #0
 8008a22:	d007      	beq.n	8008a34 <_strtod_l+0xe0>
 8008a24:	2135      	movs	r1, #53	; 0x35
 8008a26:	a81e      	add	r0, sp, #120	; 0x78
 8008a28:	f003 fecf 	bl	800c7ca <__copybits>
 8008a2c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008a2e:	9804      	ldr	r0, [sp, #16]
 8008a30:	f003 fa98 	bl	800bf64 <_Bfree>
 8008a34:	9805      	ldr	r0, [sp, #20]
 8008a36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a38:	3801      	subs	r0, #1
 8008a3a:	2804      	cmp	r0, #4
 8008a3c:	d806      	bhi.n	8008a4c <_strtod_l+0xf8>
 8008a3e:	f7f7 fb6b 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008a42:	0312      	.short	0x0312
 8008a44:	1e1c      	.short	0x1e1c
 8008a46:	12          	.byte	0x12
 8008a47:	00          	.byte	0x00
 8008a48:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008a4a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8008a4c:	05e4      	lsls	r4, r4, #23
 8008a4e:	d502      	bpl.n	8008a56 <_strtod_l+0x102>
 8008a50:	2380      	movs	r3, #128	; 0x80
 8008a52:	061b      	lsls	r3, r3, #24
 8008a54:	431f      	orrs	r7, r3
 8008a56:	4b6a      	ldr	r3, [pc, #424]	; (8008c00 <_strtod_l+0x2ac>)
 8008a58:	423b      	tst	r3, r7
 8008a5a:	d1b6      	bne.n	80089ca <_strtod_l+0x76>
 8008a5c:	f001 fede 	bl	800a81c <__errno>
 8008a60:	2322      	movs	r3, #34	; 0x22
 8008a62:	6003      	str	r3, [r0, #0]
 8008a64:	e7b1      	b.n	80089ca <_strtod_l+0x76>
 8008a66:	4967      	ldr	r1, [pc, #412]	; (8008c04 <_strtod_l+0x2b0>)
 8008a68:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008a6a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008a6c:	400a      	ands	r2, r1
 8008a6e:	4966      	ldr	r1, [pc, #408]	; (8008c08 <_strtod_l+0x2b4>)
 8008a70:	185b      	adds	r3, r3, r1
 8008a72:	051b      	lsls	r3, r3, #20
 8008a74:	431a      	orrs	r2, r3
 8008a76:	0017      	movs	r7, r2
 8008a78:	e7e8      	b.n	8008a4c <_strtod_l+0xf8>
 8008a7a:	4f61      	ldr	r7, [pc, #388]	; (8008c00 <_strtod_l+0x2ac>)
 8008a7c:	e7e6      	b.n	8008a4c <_strtod_l+0xf8>
 8008a7e:	2601      	movs	r6, #1
 8008a80:	4f62      	ldr	r7, [pc, #392]	; (8008c0c <_strtod_l+0x2b8>)
 8008a82:	4276      	negs	r6, r6
 8008a84:	e7e2      	b.n	8008a4c <_strtod_l+0xf8>
 8008a86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	921b      	str	r2, [sp, #108]	; 0x6c
 8008a8c:	785b      	ldrb	r3, [r3, #1]
 8008a8e:	2b30      	cmp	r3, #48	; 0x30
 8008a90:	d0f9      	beq.n	8008a86 <_strtod_l+0x132>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d099      	beq.n	80089ca <_strtod_l+0x76>
 8008a96:	2301      	movs	r3, #1
 8008a98:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9a:	2500      	movs	r5, #0
 8008a9c:	220a      	movs	r2, #10
 8008a9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008aa0:	950d      	str	r5, [sp, #52]	; 0x34
 8008aa2:	9310      	str	r3, [sp, #64]	; 0x40
 8008aa4:	9508      	str	r5, [sp, #32]
 8008aa6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008aa8:	7804      	ldrb	r4, [r0, #0]
 8008aaa:	0023      	movs	r3, r4
 8008aac:	3b30      	subs	r3, #48	; 0x30
 8008aae:	b2d9      	uxtb	r1, r3
 8008ab0:	2909      	cmp	r1, #9
 8008ab2:	d927      	bls.n	8008b04 <_strtod_l+0x1b0>
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	4956      	ldr	r1, [pc, #344]	; (8008c10 <_strtod_l+0x2bc>)
 8008ab8:	f001 fe4c 	bl	800a754 <strncmp>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d031      	beq.n	8008b24 <_strtod_l+0x1d0>
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	0023      	movs	r3, r4
 8008ac4:	4684      	mov	ip, r0
 8008ac6:	9a08      	ldr	r2, [sp, #32]
 8008ac8:	900c      	str	r0, [sp, #48]	; 0x30
 8008aca:	9205      	str	r2, [sp, #20]
 8008acc:	2220      	movs	r2, #32
 8008ace:	0019      	movs	r1, r3
 8008ad0:	4391      	bics	r1, r2
 8008ad2:	000a      	movs	r2, r1
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	9106      	str	r1, [sp, #24]
 8008ad8:	2a45      	cmp	r2, #69	; 0x45
 8008ada:	d000      	beq.n	8008ade <_strtod_l+0x18a>
 8008adc:	e0c2      	b.n	8008c64 <_strtod_l+0x310>
 8008ade:	9b05      	ldr	r3, [sp, #20]
 8008ae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ae2:	4303      	orrs	r3, r0
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	428b      	cmp	r3, r1
 8008ae8:	d08d      	beq.n	8008a06 <_strtod_l+0xb2>
 8008aea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008aec:	9307      	str	r3, [sp, #28]
 8008aee:	3301      	adds	r3, #1
 8008af0:	931b      	str	r3, [sp, #108]	; 0x6c
 8008af2:	9b07      	ldr	r3, [sp, #28]
 8008af4:	785b      	ldrb	r3, [r3, #1]
 8008af6:	2b2b      	cmp	r3, #43	; 0x2b
 8008af8:	d071      	beq.n	8008bde <_strtod_l+0x28a>
 8008afa:	000c      	movs	r4, r1
 8008afc:	2b2d      	cmp	r3, #45	; 0x2d
 8008afe:	d174      	bne.n	8008bea <_strtod_l+0x296>
 8008b00:	2401      	movs	r4, #1
 8008b02:	e06d      	b.n	8008be0 <_strtod_l+0x28c>
 8008b04:	9908      	ldr	r1, [sp, #32]
 8008b06:	2908      	cmp	r1, #8
 8008b08:	dc09      	bgt.n	8008b1e <_strtod_l+0x1ca>
 8008b0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008b0c:	4351      	muls	r1, r2
 8008b0e:	185b      	adds	r3, r3, r1
 8008b10:	930d      	str	r3, [sp, #52]	; 0x34
 8008b12:	9b08      	ldr	r3, [sp, #32]
 8008b14:	3001      	adds	r0, #1
 8008b16:	3301      	adds	r3, #1
 8008b18:	9308      	str	r3, [sp, #32]
 8008b1a:	901b      	str	r0, [sp, #108]	; 0x6c
 8008b1c:	e7c3      	b.n	8008aa6 <_strtod_l+0x152>
 8008b1e:	4355      	muls	r5, r2
 8008b20:	195d      	adds	r5, r3, r5
 8008b22:	e7f6      	b.n	8008b12 <_strtod_l+0x1be>
 8008b24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b2a:	9a08      	ldr	r2, [sp, #32]
 8008b2c:	785b      	ldrb	r3, [r3, #1]
 8008b2e:	2a00      	cmp	r2, #0
 8008b30:	d03a      	beq.n	8008ba8 <_strtod_l+0x254>
 8008b32:	900c      	str	r0, [sp, #48]	; 0x30
 8008b34:	9205      	str	r2, [sp, #20]
 8008b36:	001a      	movs	r2, r3
 8008b38:	3a30      	subs	r2, #48	; 0x30
 8008b3a:	2a09      	cmp	r2, #9
 8008b3c:	d912      	bls.n	8008b64 <_strtod_l+0x210>
 8008b3e:	2201      	movs	r2, #1
 8008b40:	4694      	mov	ip, r2
 8008b42:	e7c3      	b.n	8008acc <_strtod_l+0x178>
 8008b44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b46:	3001      	adds	r0, #1
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b4c:	785b      	ldrb	r3, [r3, #1]
 8008b4e:	2b30      	cmp	r3, #48	; 0x30
 8008b50:	d0f8      	beq.n	8008b44 <_strtod_l+0x1f0>
 8008b52:	001a      	movs	r2, r3
 8008b54:	3a31      	subs	r2, #49	; 0x31
 8008b56:	2a08      	cmp	r2, #8
 8008b58:	d83c      	bhi.n	8008bd4 <_strtod_l+0x280>
 8008b5a:	900c      	str	r0, [sp, #48]	; 0x30
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008b60:	9005      	str	r0, [sp, #20]
 8008b62:	9210      	str	r2, [sp, #64]	; 0x40
 8008b64:	001a      	movs	r2, r3
 8008b66:	1c41      	adds	r1, r0, #1
 8008b68:	3a30      	subs	r2, #48	; 0x30
 8008b6a:	2b30      	cmp	r3, #48	; 0x30
 8008b6c:	d016      	beq.n	8008b9c <_strtod_l+0x248>
 8008b6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b70:	185b      	adds	r3, r3, r1
 8008b72:	930c      	str	r3, [sp, #48]	; 0x30
 8008b74:	9b05      	ldr	r3, [sp, #20]
 8008b76:	210a      	movs	r1, #10
 8008b78:	469c      	mov	ip, r3
 8008b7a:	4484      	add	ip, r0
 8008b7c:	4563      	cmp	r3, ip
 8008b7e:	d115      	bne.n	8008bac <_strtod_l+0x258>
 8008b80:	9905      	ldr	r1, [sp, #20]
 8008b82:	9b05      	ldr	r3, [sp, #20]
 8008b84:	3101      	adds	r1, #1
 8008b86:	1809      	adds	r1, r1, r0
 8008b88:	181b      	adds	r3, r3, r0
 8008b8a:	9105      	str	r1, [sp, #20]
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	dc19      	bgt.n	8008bc4 <_strtod_l+0x270>
 8008b90:	230a      	movs	r3, #10
 8008b92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008b94:	434b      	muls	r3, r1
 8008b96:	2100      	movs	r1, #0
 8008b98:	18d3      	adds	r3, r2, r3
 8008b9a:	930d      	str	r3, [sp, #52]	; 0x34
 8008b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b9e:	0008      	movs	r0, r1
 8008ba0:	1c5a      	adds	r2, r3, #1
 8008ba2:	921b      	str	r2, [sp, #108]	; 0x6c
 8008ba4:	785b      	ldrb	r3, [r3, #1]
 8008ba6:	e7c6      	b.n	8008b36 <_strtod_l+0x1e2>
 8008ba8:	9808      	ldr	r0, [sp, #32]
 8008baa:	e7d0      	b.n	8008b4e <_strtod_l+0x1fa>
 8008bac:	1c5c      	adds	r4, r3, #1
 8008bae:	2b08      	cmp	r3, #8
 8008bb0:	dc04      	bgt.n	8008bbc <_strtod_l+0x268>
 8008bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bb4:	434b      	muls	r3, r1
 8008bb6:	930d      	str	r3, [sp, #52]	; 0x34
 8008bb8:	0023      	movs	r3, r4
 8008bba:	e7df      	b.n	8008b7c <_strtod_l+0x228>
 8008bbc:	2c10      	cmp	r4, #16
 8008bbe:	dcfb      	bgt.n	8008bb8 <_strtod_l+0x264>
 8008bc0:	434d      	muls	r5, r1
 8008bc2:	e7f9      	b.n	8008bb8 <_strtod_l+0x264>
 8008bc4:	9b05      	ldr	r3, [sp, #20]
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	2b10      	cmp	r3, #16
 8008bca:	dce7      	bgt.n	8008b9c <_strtod_l+0x248>
 8008bcc:	230a      	movs	r3, #10
 8008bce:	435d      	muls	r5, r3
 8008bd0:	1955      	adds	r5, r2, r5
 8008bd2:	e7e3      	b.n	8008b9c <_strtod_l+0x248>
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	920c      	str	r2, [sp, #48]	; 0x30
 8008bd8:	9205      	str	r2, [sp, #20]
 8008bda:	3201      	adds	r2, #1
 8008bdc:	e7b0      	b.n	8008b40 <_strtod_l+0x1ec>
 8008bde:	2400      	movs	r4, #0
 8008be0:	9b07      	ldr	r3, [sp, #28]
 8008be2:	3302      	adds	r3, #2
 8008be4:	931b      	str	r3, [sp, #108]	; 0x6c
 8008be6:	9b07      	ldr	r3, [sp, #28]
 8008be8:	789b      	ldrb	r3, [r3, #2]
 8008bea:	001a      	movs	r2, r3
 8008bec:	3a30      	subs	r2, #48	; 0x30
 8008bee:	2a09      	cmp	r2, #9
 8008bf0:	d914      	bls.n	8008c1c <_strtod_l+0x2c8>
 8008bf2:	9a07      	ldr	r2, [sp, #28]
 8008bf4:	921b      	str	r2, [sp, #108]	; 0x6c
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	e033      	b.n	8008c62 <_strtod_l+0x30e>
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	0800d33c 	.word	0x0800d33c
 8008c00:	7ff00000 	.word	0x7ff00000
 8008c04:	ffefffff 	.word	0xffefffff
 8008c08:	00000433 	.word	0x00000433
 8008c0c:	7fffffff 	.word	0x7fffffff
 8008c10:	0800d338 	.word	0x0800d338
 8008c14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c1a:	785b      	ldrb	r3, [r3, #1]
 8008c1c:	2b30      	cmp	r3, #48	; 0x30
 8008c1e:	d0f9      	beq.n	8008c14 <_strtod_l+0x2c0>
 8008c20:	2200      	movs	r2, #0
 8008c22:	9206      	str	r2, [sp, #24]
 8008c24:	001a      	movs	r2, r3
 8008c26:	3a31      	subs	r2, #49	; 0x31
 8008c28:	2a08      	cmp	r2, #8
 8008c2a:	d81b      	bhi.n	8008c64 <_strtod_l+0x310>
 8008c2c:	3b30      	subs	r3, #48	; 0x30
 8008c2e:	930e      	str	r3, [sp, #56]	; 0x38
 8008c30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c32:	9306      	str	r3, [sp, #24]
 8008c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c36:	1c59      	adds	r1, r3, #1
 8008c38:	911b      	str	r1, [sp, #108]	; 0x6c
 8008c3a:	785b      	ldrb	r3, [r3, #1]
 8008c3c:	001a      	movs	r2, r3
 8008c3e:	3a30      	subs	r2, #48	; 0x30
 8008c40:	2a09      	cmp	r2, #9
 8008c42:	d93a      	bls.n	8008cba <_strtod_l+0x366>
 8008c44:	9a06      	ldr	r2, [sp, #24]
 8008c46:	1a8a      	subs	r2, r1, r2
 8008c48:	49b2      	ldr	r1, [pc, #712]	; (8008f14 <_strtod_l+0x5c0>)
 8008c4a:	9106      	str	r1, [sp, #24]
 8008c4c:	2a08      	cmp	r2, #8
 8008c4e:	dc04      	bgt.n	8008c5a <_strtod_l+0x306>
 8008c50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c52:	9206      	str	r2, [sp, #24]
 8008c54:	428a      	cmp	r2, r1
 8008c56:	dd00      	ble.n	8008c5a <_strtod_l+0x306>
 8008c58:	9106      	str	r1, [sp, #24]
 8008c5a:	2c00      	cmp	r4, #0
 8008c5c:	d002      	beq.n	8008c64 <_strtod_l+0x310>
 8008c5e:	9a06      	ldr	r2, [sp, #24]
 8008c60:	4252      	negs	r2, r2
 8008c62:	9206      	str	r2, [sp, #24]
 8008c64:	9a05      	ldr	r2, [sp, #20]
 8008c66:	2a00      	cmp	r2, #0
 8008c68:	d14d      	bne.n	8008d06 <_strtod_l+0x3b2>
 8008c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c6c:	4310      	orrs	r0, r2
 8008c6e:	d000      	beq.n	8008c72 <_strtod_l+0x31e>
 8008c70:	e6ab      	b.n	80089ca <_strtod_l+0x76>
 8008c72:	4662      	mov	r2, ip
 8008c74:	2a00      	cmp	r2, #0
 8008c76:	d000      	beq.n	8008c7a <_strtod_l+0x326>
 8008c78:	e6c5      	b.n	8008a06 <_strtod_l+0xb2>
 8008c7a:	2b69      	cmp	r3, #105	; 0x69
 8008c7c:	d027      	beq.n	8008cce <_strtod_l+0x37a>
 8008c7e:	dc23      	bgt.n	8008cc8 <_strtod_l+0x374>
 8008c80:	2b49      	cmp	r3, #73	; 0x49
 8008c82:	d024      	beq.n	8008cce <_strtod_l+0x37a>
 8008c84:	2b4e      	cmp	r3, #78	; 0x4e
 8008c86:	d000      	beq.n	8008c8a <_strtod_l+0x336>
 8008c88:	e6bd      	b.n	8008a06 <_strtod_l+0xb2>
 8008c8a:	49a3      	ldr	r1, [pc, #652]	; (8008f18 <_strtod_l+0x5c4>)
 8008c8c:	a81b      	add	r0, sp, #108	; 0x6c
 8008c8e:	f002 ff99 	bl	800bbc4 <__match>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d100      	bne.n	8008c98 <_strtod_l+0x344>
 8008c96:	e6b6      	b.n	8008a06 <_strtod_l+0xb2>
 8008c98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b28      	cmp	r3, #40	; 0x28
 8008c9e:	d12c      	bne.n	8008cfa <_strtod_l+0x3a6>
 8008ca0:	499e      	ldr	r1, [pc, #632]	; (8008f1c <_strtod_l+0x5c8>)
 8008ca2:	aa1e      	add	r2, sp, #120	; 0x78
 8008ca4:	a81b      	add	r0, sp, #108	; 0x6c
 8008ca6:	f002 ffa1 	bl	800bbec <__hexnan>
 8008caa:	2805      	cmp	r0, #5
 8008cac:	d125      	bne.n	8008cfa <_strtod_l+0x3a6>
 8008cae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008cb0:	4a9b      	ldr	r2, [pc, #620]	; (8008f20 <_strtod_l+0x5cc>)
 8008cb2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008cb4:	431a      	orrs	r2, r3
 8008cb6:	0017      	movs	r7, r2
 8008cb8:	e687      	b.n	80089ca <_strtod_l+0x76>
 8008cba:	220a      	movs	r2, #10
 8008cbc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008cbe:	434a      	muls	r2, r1
 8008cc0:	18d2      	adds	r2, r2, r3
 8008cc2:	3a30      	subs	r2, #48	; 0x30
 8008cc4:	920e      	str	r2, [sp, #56]	; 0x38
 8008cc6:	e7b5      	b.n	8008c34 <_strtod_l+0x2e0>
 8008cc8:	2b6e      	cmp	r3, #110	; 0x6e
 8008cca:	d0de      	beq.n	8008c8a <_strtod_l+0x336>
 8008ccc:	e69b      	b.n	8008a06 <_strtod_l+0xb2>
 8008cce:	4995      	ldr	r1, [pc, #596]	; (8008f24 <_strtod_l+0x5d0>)
 8008cd0:	a81b      	add	r0, sp, #108	; 0x6c
 8008cd2:	f002 ff77 	bl	800bbc4 <__match>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d100      	bne.n	8008cdc <_strtod_l+0x388>
 8008cda:	e694      	b.n	8008a06 <_strtod_l+0xb2>
 8008cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cde:	4992      	ldr	r1, [pc, #584]	; (8008f28 <_strtod_l+0x5d4>)
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	a81b      	add	r0, sp, #108	; 0x6c
 8008ce4:	931b      	str	r3, [sp, #108]	; 0x6c
 8008ce6:	f002 ff6d 	bl	800bbc4 <__match>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d102      	bne.n	8008cf4 <_strtod_l+0x3a0>
 8008cee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	931b      	str	r3, [sp, #108]	; 0x6c
 8008cf4:	2600      	movs	r6, #0
 8008cf6:	4f8a      	ldr	r7, [pc, #552]	; (8008f20 <_strtod_l+0x5cc>)
 8008cf8:	e667      	b.n	80089ca <_strtod_l+0x76>
 8008cfa:	488c      	ldr	r0, [pc, #560]	; (8008f2c <_strtod_l+0x5d8>)
 8008cfc:	f001 fdd0 	bl	800a8a0 <nan>
 8008d00:	0006      	movs	r6, r0
 8008d02:	000f      	movs	r7, r1
 8008d04:	e661      	b.n	80089ca <_strtod_l+0x76>
 8008d06:	9b06      	ldr	r3, [sp, #24]
 8008d08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d0a:	1a9b      	subs	r3, r3, r2
 8008d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d0e:	9b08      	ldr	r3, [sp, #32]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <_strtod_l+0x3c4>
 8008d14:	9b05      	ldr	r3, [sp, #20]
 8008d16:	9308      	str	r3, [sp, #32]
 8008d18:	9c05      	ldr	r4, [sp, #20]
 8008d1a:	2c10      	cmp	r4, #16
 8008d1c:	dd00      	ble.n	8008d20 <_strtod_l+0x3cc>
 8008d1e:	2410      	movs	r4, #16
 8008d20:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008d22:	f7f9 fb6d 	bl	8002400 <__aeabi_ui2d>
 8008d26:	9b05      	ldr	r3, [sp, #20]
 8008d28:	0006      	movs	r6, r0
 8008d2a:	000f      	movs	r7, r1
 8008d2c:	2b09      	cmp	r3, #9
 8008d2e:	dd15      	ble.n	8008d5c <_strtod_l+0x408>
 8008d30:	0022      	movs	r2, r4
 8008d32:	4b7f      	ldr	r3, [pc, #508]	; (8008f30 <_strtod_l+0x5dc>)
 8008d34:	3a09      	subs	r2, #9
 8008d36:	00d2      	lsls	r2, r2, #3
 8008d38:	189b      	adds	r3, r3, r2
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f7f8 fc97 	bl	8001670 <__aeabi_dmul>
 8008d42:	0006      	movs	r6, r0
 8008d44:	0028      	movs	r0, r5
 8008d46:	000f      	movs	r7, r1
 8008d48:	f7f9 fb5a 	bl	8002400 <__aeabi_ui2d>
 8008d4c:	0002      	movs	r2, r0
 8008d4e:	000b      	movs	r3, r1
 8008d50:	0030      	movs	r0, r6
 8008d52:	0039      	movs	r1, r7
 8008d54:	f7f7 fd32 	bl	80007bc <__aeabi_dadd>
 8008d58:	0006      	movs	r6, r0
 8008d5a:	000f      	movs	r7, r1
 8008d5c:	9b05      	ldr	r3, [sp, #20]
 8008d5e:	2b0f      	cmp	r3, #15
 8008d60:	dc39      	bgt.n	8008dd6 <_strtod_l+0x482>
 8008d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d100      	bne.n	8008d6a <_strtod_l+0x416>
 8008d68:	e62f      	b.n	80089ca <_strtod_l+0x76>
 8008d6a:	dd24      	ble.n	8008db6 <_strtod_l+0x462>
 8008d6c:	2b16      	cmp	r3, #22
 8008d6e:	dc09      	bgt.n	8008d84 <_strtod_l+0x430>
 8008d70:	496f      	ldr	r1, [pc, #444]	; (8008f30 <_strtod_l+0x5dc>)
 8008d72:	00db      	lsls	r3, r3, #3
 8008d74:	18c9      	adds	r1, r1, r3
 8008d76:	0032      	movs	r2, r6
 8008d78:	6808      	ldr	r0, [r1, #0]
 8008d7a:	6849      	ldr	r1, [r1, #4]
 8008d7c:	003b      	movs	r3, r7
 8008d7e:	f7f8 fc77 	bl	8001670 <__aeabi_dmul>
 8008d82:	e7bd      	b.n	8008d00 <_strtod_l+0x3ac>
 8008d84:	2325      	movs	r3, #37	; 0x25
 8008d86:	9a05      	ldr	r2, [sp, #20]
 8008d88:	1a9b      	subs	r3, r3, r2
 8008d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	db22      	blt.n	8008dd6 <_strtod_l+0x482>
 8008d90:	240f      	movs	r4, #15
 8008d92:	9b05      	ldr	r3, [sp, #20]
 8008d94:	4d66      	ldr	r5, [pc, #408]	; (8008f30 <_strtod_l+0x5dc>)
 8008d96:	1ae4      	subs	r4, r4, r3
 8008d98:	00e1      	lsls	r1, r4, #3
 8008d9a:	1869      	adds	r1, r5, r1
 8008d9c:	0032      	movs	r2, r6
 8008d9e:	6808      	ldr	r0, [r1, #0]
 8008da0:	6849      	ldr	r1, [r1, #4]
 8008da2:	003b      	movs	r3, r7
 8008da4:	f7f8 fc64 	bl	8001670 <__aeabi_dmul>
 8008da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008daa:	1b1c      	subs	r4, r3, r4
 8008dac:	00e4      	lsls	r4, r4, #3
 8008dae:	192d      	adds	r5, r5, r4
 8008db0:	682a      	ldr	r2, [r5, #0]
 8008db2:	686b      	ldr	r3, [r5, #4]
 8008db4:	e7e3      	b.n	8008d7e <_strtod_l+0x42a>
 8008db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db8:	3316      	adds	r3, #22
 8008dba:	db0c      	blt.n	8008dd6 <_strtod_l+0x482>
 8008dbc:	9906      	ldr	r1, [sp, #24]
 8008dbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dc0:	4b5b      	ldr	r3, [pc, #364]	; (8008f30 <_strtod_l+0x5dc>)
 8008dc2:	1a52      	subs	r2, r2, r1
 8008dc4:	00d2      	lsls	r2, r2, #3
 8008dc6:	189b      	adds	r3, r3, r2
 8008dc8:	0030      	movs	r0, r6
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	0039      	movs	r1, r7
 8008dd0:	f7f8 f854 	bl	8000e7c <__aeabi_ddiv>
 8008dd4:	e794      	b.n	8008d00 <_strtod_l+0x3ac>
 8008dd6:	9b05      	ldr	r3, [sp, #20]
 8008dd8:	1b1c      	subs	r4, r3, r4
 8008dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ddc:	18e4      	adds	r4, r4, r3
 8008dde:	2c00      	cmp	r4, #0
 8008de0:	dd72      	ble.n	8008ec8 <_strtod_l+0x574>
 8008de2:	220f      	movs	r2, #15
 8008de4:	0023      	movs	r3, r4
 8008de6:	4013      	ands	r3, r2
 8008de8:	4214      	tst	r4, r2
 8008dea:	d00a      	beq.n	8008e02 <_strtod_l+0x4ae>
 8008dec:	4950      	ldr	r1, [pc, #320]	; (8008f30 <_strtod_l+0x5dc>)
 8008dee:	00db      	lsls	r3, r3, #3
 8008df0:	18c9      	adds	r1, r1, r3
 8008df2:	0032      	movs	r2, r6
 8008df4:	6808      	ldr	r0, [r1, #0]
 8008df6:	6849      	ldr	r1, [r1, #4]
 8008df8:	003b      	movs	r3, r7
 8008dfa:	f7f8 fc39 	bl	8001670 <__aeabi_dmul>
 8008dfe:	0006      	movs	r6, r0
 8008e00:	000f      	movs	r7, r1
 8008e02:	230f      	movs	r3, #15
 8008e04:	439c      	bics	r4, r3
 8008e06:	d04a      	beq.n	8008e9e <_strtod_l+0x54a>
 8008e08:	3326      	adds	r3, #38	; 0x26
 8008e0a:	33ff      	adds	r3, #255	; 0xff
 8008e0c:	429c      	cmp	r4, r3
 8008e0e:	dd22      	ble.n	8008e56 <_strtod_l+0x502>
 8008e10:	2300      	movs	r3, #0
 8008e12:	9305      	str	r3, [sp, #20]
 8008e14:	9306      	str	r3, [sp, #24]
 8008e16:	930d      	str	r3, [sp, #52]	; 0x34
 8008e18:	9308      	str	r3, [sp, #32]
 8008e1a:	2322      	movs	r3, #34	; 0x22
 8008e1c:	2600      	movs	r6, #0
 8008e1e:	9a04      	ldr	r2, [sp, #16]
 8008e20:	4f3f      	ldr	r7, [pc, #252]	; (8008f20 <_strtod_l+0x5cc>)
 8008e22:	6013      	str	r3, [r2, #0]
 8008e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e26:	42b3      	cmp	r3, r6
 8008e28:	d100      	bne.n	8008e2c <_strtod_l+0x4d8>
 8008e2a:	e5ce      	b.n	80089ca <_strtod_l+0x76>
 8008e2c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008e2e:	9804      	ldr	r0, [sp, #16]
 8008e30:	f003 f898 	bl	800bf64 <_Bfree>
 8008e34:	9908      	ldr	r1, [sp, #32]
 8008e36:	9804      	ldr	r0, [sp, #16]
 8008e38:	f003 f894 	bl	800bf64 <_Bfree>
 8008e3c:	9906      	ldr	r1, [sp, #24]
 8008e3e:	9804      	ldr	r0, [sp, #16]
 8008e40:	f003 f890 	bl	800bf64 <_Bfree>
 8008e44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008e46:	9804      	ldr	r0, [sp, #16]
 8008e48:	f003 f88c 	bl	800bf64 <_Bfree>
 8008e4c:	9905      	ldr	r1, [sp, #20]
 8008e4e:	9804      	ldr	r0, [sp, #16]
 8008e50:	f003 f888 	bl	800bf64 <_Bfree>
 8008e54:	e5b9      	b.n	80089ca <_strtod_l+0x76>
 8008e56:	2300      	movs	r3, #0
 8008e58:	0030      	movs	r0, r6
 8008e5a:	0039      	movs	r1, r7
 8008e5c:	4d35      	ldr	r5, [pc, #212]	; (8008f34 <_strtod_l+0x5e0>)
 8008e5e:	1124      	asrs	r4, r4, #4
 8008e60:	9307      	str	r3, [sp, #28]
 8008e62:	2c01      	cmp	r4, #1
 8008e64:	dc1e      	bgt.n	8008ea4 <_strtod_l+0x550>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <_strtod_l+0x51a>
 8008e6a:	0006      	movs	r6, r0
 8008e6c:	000f      	movs	r7, r1
 8008e6e:	4b32      	ldr	r3, [pc, #200]	; (8008f38 <_strtod_l+0x5e4>)
 8008e70:	9a07      	ldr	r2, [sp, #28]
 8008e72:	18ff      	adds	r7, r7, r3
 8008e74:	4b2f      	ldr	r3, [pc, #188]	; (8008f34 <_strtod_l+0x5e0>)
 8008e76:	00d2      	lsls	r2, r2, #3
 8008e78:	189d      	adds	r5, r3, r2
 8008e7a:	6828      	ldr	r0, [r5, #0]
 8008e7c:	6869      	ldr	r1, [r5, #4]
 8008e7e:	0032      	movs	r2, r6
 8008e80:	003b      	movs	r3, r7
 8008e82:	f7f8 fbf5 	bl	8001670 <__aeabi_dmul>
 8008e86:	4b26      	ldr	r3, [pc, #152]	; (8008f20 <_strtod_l+0x5cc>)
 8008e88:	4a2c      	ldr	r2, [pc, #176]	; (8008f3c <_strtod_l+0x5e8>)
 8008e8a:	0006      	movs	r6, r0
 8008e8c:	400b      	ands	r3, r1
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d8be      	bhi.n	8008e10 <_strtod_l+0x4bc>
 8008e92:	4a2b      	ldr	r2, [pc, #172]	; (8008f40 <_strtod_l+0x5ec>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d913      	bls.n	8008ec0 <_strtod_l+0x56c>
 8008e98:	2601      	movs	r6, #1
 8008e9a:	4f2a      	ldr	r7, [pc, #168]	; (8008f44 <_strtod_l+0x5f0>)
 8008e9c:	4276      	negs	r6, r6
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	9307      	str	r3, [sp, #28]
 8008ea2:	e088      	b.n	8008fb6 <_strtod_l+0x662>
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	4214      	tst	r4, r2
 8008ea8:	d004      	beq.n	8008eb4 <_strtod_l+0x560>
 8008eaa:	682a      	ldr	r2, [r5, #0]
 8008eac:	686b      	ldr	r3, [r5, #4]
 8008eae:	f7f8 fbdf 	bl	8001670 <__aeabi_dmul>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	9a07      	ldr	r2, [sp, #28]
 8008eb6:	1064      	asrs	r4, r4, #1
 8008eb8:	3201      	adds	r2, #1
 8008eba:	9207      	str	r2, [sp, #28]
 8008ebc:	3508      	adds	r5, #8
 8008ebe:	e7d0      	b.n	8008e62 <_strtod_l+0x50e>
 8008ec0:	23d4      	movs	r3, #212	; 0xd4
 8008ec2:	049b      	lsls	r3, r3, #18
 8008ec4:	18cf      	adds	r7, r1, r3
 8008ec6:	e7ea      	b.n	8008e9e <_strtod_l+0x54a>
 8008ec8:	2c00      	cmp	r4, #0
 8008eca:	d0e8      	beq.n	8008e9e <_strtod_l+0x54a>
 8008ecc:	4264      	negs	r4, r4
 8008ece:	230f      	movs	r3, #15
 8008ed0:	0022      	movs	r2, r4
 8008ed2:	401a      	ands	r2, r3
 8008ed4:	421c      	tst	r4, r3
 8008ed6:	d00a      	beq.n	8008eee <_strtod_l+0x59a>
 8008ed8:	4b15      	ldr	r3, [pc, #84]	; (8008f30 <_strtod_l+0x5dc>)
 8008eda:	00d2      	lsls	r2, r2, #3
 8008edc:	189b      	adds	r3, r3, r2
 8008ede:	0030      	movs	r0, r6
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	0039      	movs	r1, r7
 8008ee6:	f7f7 ffc9 	bl	8000e7c <__aeabi_ddiv>
 8008eea:	0006      	movs	r6, r0
 8008eec:	000f      	movs	r7, r1
 8008eee:	1124      	asrs	r4, r4, #4
 8008ef0:	d0d5      	beq.n	8008e9e <_strtod_l+0x54a>
 8008ef2:	2c1f      	cmp	r4, #31
 8008ef4:	dd28      	ble.n	8008f48 <_strtod_l+0x5f4>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9305      	str	r3, [sp, #20]
 8008efa:	9306      	str	r3, [sp, #24]
 8008efc:	930d      	str	r3, [sp, #52]	; 0x34
 8008efe:	9308      	str	r3, [sp, #32]
 8008f00:	2322      	movs	r3, #34	; 0x22
 8008f02:	9a04      	ldr	r2, [sp, #16]
 8008f04:	2600      	movs	r6, #0
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f0a:	2700      	movs	r7, #0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d18d      	bne.n	8008e2c <_strtod_l+0x4d8>
 8008f10:	e55b      	b.n	80089ca <_strtod_l+0x76>
 8008f12:	46c0      	nop			; (mov r8, r8)
 8008f14:	00004e1f 	.word	0x00004e1f
 8008f18:	0800d49e 	.word	0x0800d49e
 8008f1c:	0800d350 	.word	0x0800d350
 8008f20:	7ff00000 	.word	0x7ff00000
 8008f24:	0800d496 	.word	0x0800d496
 8008f28:	0800d4d5 	.word	0x0800d4d5
 8008f2c:	0800d760 	.word	0x0800d760
 8008f30:	0800d640 	.word	0x0800d640
 8008f34:	0800d618 	.word	0x0800d618
 8008f38:	fcb00000 	.word	0xfcb00000
 8008f3c:	7ca00000 	.word	0x7ca00000
 8008f40:	7c900000 	.word	0x7c900000
 8008f44:	7fefffff 	.word	0x7fefffff
 8008f48:	2310      	movs	r3, #16
 8008f4a:	0022      	movs	r2, r4
 8008f4c:	401a      	ands	r2, r3
 8008f4e:	9207      	str	r2, [sp, #28]
 8008f50:	421c      	tst	r4, r3
 8008f52:	d001      	beq.n	8008f58 <_strtod_l+0x604>
 8008f54:	335a      	adds	r3, #90	; 0x5a
 8008f56:	9307      	str	r3, [sp, #28]
 8008f58:	0030      	movs	r0, r6
 8008f5a:	0039      	movs	r1, r7
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4dc4      	ldr	r5, [pc, #784]	; (8009270 <_strtod_l+0x91c>)
 8008f60:	2201      	movs	r2, #1
 8008f62:	4214      	tst	r4, r2
 8008f64:	d004      	beq.n	8008f70 <_strtod_l+0x61c>
 8008f66:	682a      	ldr	r2, [r5, #0]
 8008f68:	686b      	ldr	r3, [r5, #4]
 8008f6a:	f7f8 fb81 	bl	8001670 <__aeabi_dmul>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	1064      	asrs	r4, r4, #1
 8008f72:	3508      	adds	r5, #8
 8008f74:	2c00      	cmp	r4, #0
 8008f76:	d1f3      	bne.n	8008f60 <_strtod_l+0x60c>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <_strtod_l+0x62c>
 8008f7c:	0006      	movs	r6, r0
 8008f7e:	000f      	movs	r7, r1
 8008f80:	9b07      	ldr	r3, [sp, #28]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00f      	beq.n	8008fa6 <_strtod_l+0x652>
 8008f86:	236b      	movs	r3, #107	; 0x6b
 8008f88:	007a      	lsls	r2, r7, #1
 8008f8a:	0d52      	lsrs	r2, r2, #21
 8008f8c:	0039      	movs	r1, r7
 8008f8e:	1a9b      	subs	r3, r3, r2
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	dd08      	ble.n	8008fa6 <_strtod_l+0x652>
 8008f94:	2b1f      	cmp	r3, #31
 8008f96:	dc00      	bgt.n	8008f9a <_strtod_l+0x646>
 8008f98:	e121      	b.n	80091de <_strtod_l+0x88a>
 8008f9a:	2600      	movs	r6, #0
 8008f9c:	2b34      	cmp	r3, #52	; 0x34
 8008f9e:	dc00      	bgt.n	8008fa2 <_strtod_l+0x64e>
 8008fa0:	e116      	b.n	80091d0 <_strtod_l+0x87c>
 8008fa2:	27dc      	movs	r7, #220	; 0xdc
 8008fa4:	04bf      	lsls	r7, r7, #18
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2300      	movs	r3, #0
 8008faa:	0030      	movs	r0, r6
 8008fac:	0039      	movs	r1, r7
 8008fae:	f7f7 fa4d 	bl	800044c <__aeabi_dcmpeq>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d19f      	bne.n	8008ef6 <_strtod_l+0x5a2>
 8008fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fb8:	9a08      	ldr	r2, [sp, #32]
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008fbe:	9b05      	ldr	r3, [sp, #20]
 8008fc0:	9804      	ldr	r0, [sp, #16]
 8008fc2:	f003 f837 	bl	800c034 <__s2b>
 8008fc6:	900d      	str	r0, [sp, #52]	; 0x34
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d100      	bne.n	8008fce <_strtod_l+0x67a>
 8008fcc:	e720      	b.n	8008e10 <_strtod_l+0x4bc>
 8008fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd0:	9906      	ldr	r1, [sp, #24]
 8008fd2:	17da      	asrs	r2, r3, #31
 8008fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fd6:	1a5b      	subs	r3, r3, r1
 8008fd8:	401a      	ands	r2, r3
 8008fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fdc:	9215      	str	r2, [sp, #84]	; 0x54
 8008fde:	43db      	mvns	r3, r3
 8008fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fe2:	17db      	asrs	r3, r3, #31
 8008fe4:	401a      	ands	r2, r3
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	9218      	str	r2, [sp, #96]	; 0x60
 8008fea:	9305      	str	r3, [sp, #20]
 8008fec:	9306      	str	r3, [sp, #24]
 8008fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ff0:	9804      	ldr	r0, [sp, #16]
 8008ff2:	6859      	ldr	r1, [r3, #4]
 8008ff4:	f002 ff72 	bl	800bedc <_Balloc>
 8008ff8:	9008      	str	r0, [sp, #32]
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d100      	bne.n	8009000 <_strtod_l+0x6ac>
 8008ffe:	e70c      	b.n	8008e1a <_strtod_l+0x4c6>
 8009000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009002:	300c      	adds	r0, #12
 8009004:	0019      	movs	r1, r3
 8009006:	691a      	ldr	r2, [r3, #16]
 8009008:	310c      	adds	r1, #12
 800900a:	3202      	adds	r2, #2
 800900c:	0092      	lsls	r2, r2, #2
 800900e:	f001 fc3d 	bl	800a88c <memcpy>
 8009012:	ab1e      	add	r3, sp, #120	; 0x78
 8009014:	9301      	str	r3, [sp, #4]
 8009016:	ab1d      	add	r3, sp, #116	; 0x74
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	0032      	movs	r2, r6
 800901c:	003b      	movs	r3, r7
 800901e:	9804      	ldr	r0, [sp, #16]
 8009020:	9610      	str	r6, [sp, #64]	; 0x40
 8009022:	9711      	str	r7, [sp, #68]	; 0x44
 8009024:	f003 fb48 	bl	800c6b8 <__d2b>
 8009028:	901c      	str	r0, [sp, #112]	; 0x70
 800902a:	2800      	cmp	r0, #0
 800902c:	d100      	bne.n	8009030 <_strtod_l+0x6dc>
 800902e:	e6f4      	b.n	8008e1a <_strtod_l+0x4c6>
 8009030:	2101      	movs	r1, #1
 8009032:	9804      	ldr	r0, [sp, #16]
 8009034:	f003 f892 	bl	800c15c <__i2b>
 8009038:	9006      	str	r0, [sp, #24]
 800903a:	2800      	cmp	r0, #0
 800903c:	d100      	bne.n	8009040 <_strtod_l+0x6ec>
 800903e:	e6ec      	b.n	8008e1a <_strtod_l+0x4c6>
 8009040:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009042:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009044:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009046:	1ad4      	subs	r4, r2, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	db01      	blt.n	8009050 <_strtod_l+0x6fc>
 800904c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800904e:	195d      	adds	r5, r3, r5
 8009050:	9907      	ldr	r1, [sp, #28]
 8009052:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009054:	1a5b      	subs	r3, r3, r1
 8009056:	2136      	movs	r1, #54	; 0x36
 8009058:	189b      	adds	r3, r3, r2
 800905a:	1a8a      	subs	r2, r1, r2
 800905c:	4985      	ldr	r1, [pc, #532]	; (8009274 <_strtod_l+0x920>)
 800905e:	2001      	movs	r0, #1
 8009060:	468c      	mov	ip, r1
 8009062:	2100      	movs	r1, #0
 8009064:	3b01      	subs	r3, #1
 8009066:	9114      	str	r1, [sp, #80]	; 0x50
 8009068:	9012      	str	r0, [sp, #72]	; 0x48
 800906a:	4563      	cmp	r3, ip
 800906c:	da07      	bge.n	800907e <_strtod_l+0x72a>
 800906e:	4661      	mov	r1, ip
 8009070:	1ac9      	subs	r1, r1, r3
 8009072:	1a52      	subs	r2, r2, r1
 8009074:	291f      	cmp	r1, #31
 8009076:	dd00      	ble.n	800907a <_strtod_l+0x726>
 8009078:	e0b6      	b.n	80091e8 <_strtod_l+0x894>
 800907a:	4088      	lsls	r0, r1
 800907c:	9012      	str	r0, [sp, #72]	; 0x48
 800907e:	18ab      	adds	r3, r5, r2
 8009080:	930c      	str	r3, [sp, #48]	; 0x30
 8009082:	18a4      	adds	r4, r4, r2
 8009084:	9b07      	ldr	r3, [sp, #28]
 8009086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009088:	191c      	adds	r4, r3, r4
 800908a:	002b      	movs	r3, r5
 800908c:	4295      	cmp	r5, r2
 800908e:	dd00      	ble.n	8009092 <_strtod_l+0x73e>
 8009090:	0013      	movs	r3, r2
 8009092:	42a3      	cmp	r3, r4
 8009094:	dd00      	ble.n	8009098 <_strtod_l+0x744>
 8009096:	0023      	movs	r3, r4
 8009098:	2b00      	cmp	r3, #0
 800909a:	dd04      	ble.n	80090a6 <_strtod_l+0x752>
 800909c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800909e:	1ae4      	subs	r4, r4, r3
 80090a0:	1ad2      	subs	r2, r2, r3
 80090a2:	920c      	str	r2, [sp, #48]	; 0x30
 80090a4:	1aed      	subs	r5, r5, r3
 80090a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	dd17      	ble.n	80090dc <_strtod_l+0x788>
 80090ac:	001a      	movs	r2, r3
 80090ae:	9906      	ldr	r1, [sp, #24]
 80090b0:	9804      	ldr	r0, [sp, #16]
 80090b2:	f003 f91b 	bl	800c2ec <__pow5mult>
 80090b6:	9006      	str	r0, [sp, #24]
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d100      	bne.n	80090be <_strtod_l+0x76a>
 80090bc:	e6ad      	b.n	8008e1a <_strtod_l+0x4c6>
 80090be:	0001      	movs	r1, r0
 80090c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80090c2:	9804      	ldr	r0, [sp, #16]
 80090c4:	f003 f862 	bl	800c18c <__multiply>
 80090c8:	900e      	str	r0, [sp, #56]	; 0x38
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d100      	bne.n	80090d0 <_strtod_l+0x77c>
 80090ce:	e6a4      	b.n	8008e1a <_strtod_l+0x4c6>
 80090d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80090d2:	9804      	ldr	r0, [sp, #16]
 80090d4:	f002 ff46 	bl	800bf64 <_Bfree>
 80090d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090da:	931c      	str	r3, [sp, #112]	; 0x70
 80090dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090de:	2b00      	cmp	r3, #0
 80090e0:	dd00      	ble.n	80090e4 <_strtod_l+0x790>
 80090e2:	e087      	b.n	80091f4 <_strtod_l+0x8a0>
 80090e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	dd08      	ble.n	80090fc <_strtod_l+0x7a8>
 80090ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80090ec:	9908      	ldr	r1, [sp, #32]
 80090ee:	9804      	ldr	r0, [sp, #16]
 80090f0:	f003 f8fc 	bl	800c2ec <__pow5mult>
 80090f4:	9008      	str	r0, [sp, #32]
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d100      	bne.n	80090fc <_strtod_l+0x7a8>
 80090fa:	e68e      	b.n	8008e1a <_strtod_l+0x4c6>
 80090fc:	2c00      	cmp	r4, #0
 80090fe:	dd08      	ble.n	8009112 <_strtod_l+0x7be>
 8009100:	0022      	movs	r2, r4
 8009102:	9908      	ldr	r1, [sp, #32]
 8009104:	9804      	ldr	r0, [sp, #16]
 8009106:	f003 f94d 	bl	800c3a4 <__lshift>
 800910a:	9008      	str	r0, [sp, #32]
 800910c:	2800      	cmp	r0, #0
 800910e:	d100      	bne.n	8009112 <_strtod_l+0x7be>
 8009110:	e683      	b.n	8008e1a <_strtod_l+0x4c6>
 8009112:	2d00      	cmp	r5, #0
 8009114:	dd08      	ble.n	8009128 <_strtod_l+0x7d4>
 8009116:	002a      	movs	r2, r5
 8009118:	9906      	ldr	r1, [sp, #24]
 800911a:	9804      	ldr	r0, [sp, #16]
 800911c:	f003 f942 	bl	800c3a4 <__lshift>
 8009120:	9006      	str	r0, [sp, #24]
 8009122:	2800      	cmp	r0, #0
 8009124:	d100      	bne.n	8009128 <_strtod_l+0x7d4>
 8009126:	e678      	b.n	8008e1a <_strtod_l+0x4c6>
 8009128:	9a08      	ldr	r2, [sp, #32]
 800912a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800912c:	9804      	ldr	r0, [sp, #16]
 800912e:	f003 f9c3 	bl	800c4b8 <__mdiff>
 8009132:	9005      	str	r0, [sp, #20]
 8009134:	2800      	cmp	r0, #0
 8009136:	d100      	bne.n	800913a <_strtod_l+0x7e6>
 8009138:	e66f      	b.n	8008e1a <_strtod_l+0x4c6>
 800913a:	2200      	movs	r2, #0
 800913c:	68c3      	ldr	r3, [r0, #12]
 800913e:	9906      	ldr	r1, [sp, #24]
 8009140:	60c2      	str	r2, [r0, #12]
 8009142:	930c      	str	r3, [sp, #48]	; 0x30
 8009144:	f003 f99c 	bl	800c480 <__mcmp>
 8009148:	2800      	cmp	r0, #0
 800914a:	da5d      	bge.n	8009208 <_strtod_l+0x8b4>
 800914c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800914e:	4333      	orrs	r3, r6
 8009150:	d000      	beq.n	8009154 <_strtod_l+0x800>
 8009152:	e088      	b.n	8009266 <_strtod_l+0x912>
 8009154:	033b      	lsls	r3, r7, #12
 8009156:	d000      	beq.n	800915a <_strtod_l+0x806>
 8009158:	e085      	b.n	8009266 <_strtod_l+0x912>
 800915a:	22d6      	movs	r2, #214	; 0xd6
 800915c:	4b46      	ldr	r3, [pc, #280]	; (8009278 <_strtod_l+0x924>)
 800915e:	04d2      	lsls	r2, r2, #19
 8009160:	403b      	ands	r3, r7
 8009162:	4293      	cmp	r3, r2
 8009164:	d97f      	bls.n	8009266 <_strtod_l+0x912>
 8009166:	9b05      	ldr	r3, [sp, #20]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d103      	bne.n	8009176 <_strtod_l+0x822>
 800916e:	9b05      	ldr	r3, [sp, #20]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	2b01      	cmp	r3, #1
 8009174:	dd77      	ble.n	8009266 <_strtod_l+0x912>
 8009176:	9905      	ldr	r1, [sp, #20]
 8009178:	2201      	movs	r2, #1
 800917a:	9804      	ldr	r0, [sp, #16]
 800917c:	f003 f912 	bl	800c3a4 <__lshift>
 8009180:	9906      	ldr	r1, [sp, #24]
 8009182:	9005      	str	r0, [sp, #20]
 8009184:	f003 f97c 	bl	800c480 <__mcmp>
 8009188:	2800      	cmp	r0, #0
 800918a:	dd6c      	ble.n	8009266 <_strtod_l+0x912>
 800918c:	9907      	ldr	r1, [sp, #28]
 800918e:	003b      	movs	r3, r7
 8009190:	4a39      	ldr	r2, [pc, #228]	; (8009278 <_strtod_l+0x924>)
 8009192:	2900      	cmp	r1, #0
 8009194:	d100      	bne.n	8009198 <_strtod_l+0x844>
 8009196:	e094      	b.n	80092c2 <_strtod_l+0x96e>
 8009198:	0011      	movs	r1, r2
 800919a:	20d6      	movs	r0, #214	; 0xd6
 800919c:	4039      	ands	r1, r7
 800919e:	04c0      	lsls	r0, r0, #19
 80091a0:	4281      	cmp	r1, r0
 80091a2:	dd00      	ble.n	80091a6 <_strtod_l+0x852>
 80091a4:	e08d      	b.n	80092c2 <_strtod_l+0x96e>
 80091a6:	23dc      	movs	r3, #220	; 0xdc
 80091a8:	049b      	lsls	r3, r3, #18
 80091aa:	4299      	cmp	r1, r3
 80091ac:	dc00      	bgt.n	80091b0 <_strtod_l+0x85c>
 80091ae:	e6a7      	b.n	8008f00 <_strtod_l+0x5ac>
 80091b0:	0030      	movs	r0, r6
 80091b2:	0039      	movs	r1, r7
 80091b4:	4b31      	ldr	r3, [pc, #196]	; (800927c <_strtod_l+0x928>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	f7f8 fa5a 	bl	8001670 <__aeabi_dmul>
 80091bc:	4b2e      	ldr	r3, [pc, #184]	; (8009278 <_strtod_l+0x924>)
 80091be:	0006      	movs	r6, r0
 80091c0:	000f      	movs	r7, r1
 80091c2:	420b      	tst	r3, r1
 80091c4:	d000      	beq.n	80091c8 <_strtod_l+0x874>
 80091c6:	e631      	b.n	8008e2c <_strtod_l+0x4d8>
 80091c8:	2322      	movs	r3, #34	; 0x22
 80091ca:	9a04      	ldr	r2, [sp, #16]
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	e62d      	b.n	8008e2c <_strtod_l+0x4d8>
 80091d0:	234b      	movs	r3, #75	; 0x4b
 80091d2:	1a9a      	subs	r2, r3, r2
 80091d4:	3b4c      	subs	r3, #76	; 0x4c
 80091d6:	4093      	lsls	r3, r2
 80091d8:	4019      	ands	r1, r3
 80091da:	000f      	movs	r7, r1
 80091dc:	e6e3      	b.n	8008fa6 <_strtod_l+0x652>
 80091de:	2201      	movs	r2, #1
 80091e0:	4252      	negs	r2, r2
 80091e2:	409a      	lsls	r2, r3
 80091e4:	4016      	ands	r6, r2
 80091e6:	e6de      	b.n	8008fa6 <_strtod_l+0x652>
 80091e8:	4925      	ldr	r1, [pc, #148]	; (8009280 <_strtod_l+0x92c>)
 80091ea:	1acb      	subs	r3, r1, r3
 80091ec:	0001      	movs	r1, r0
 80091ee:	4099      	lsls	r1, r3
 80091f0:	9114      	str	r1, [sp, #80]	; 0x50
 80091f2:	e743      	b.n	800907c <_strtod_l+0x728>
 80091f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80091f8:	9804      	ldr	r0, [sp, #16]
 80091fa:	f003 f8d3 	bl	800c3a4 <__lshift>
 80091fe:	901c      	str	r0, [sp, #112]	; 0x70
 8009200:	2800      	cmp	r0, #0
 8009202:	d000      	beq.n	8009206 <_strtod_l+0x8b2>
 8009204:	e76e      	b.n	80090e4 <_strtod_l+0x790>
 8009206:	e608      	b.n	8008e1a <_strtod_l+0x4c6>
 8009208:	970e      	str	r7, [sp, #56]	; 0x38
 800920a:	2800      	cmp	r0, #0
 800920c:	d177      	bne.n	80092fe <_strtod_l+0x9aa>
 800920e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009210:	033b      	lsls	r3, r7, #12
 8009212:	0b1b      	lsrs	r3, r3, #12
 8009214:	2a00      	cmp	r2, #0
 8009216:	d039      	beq.n	800928c <_strtod_l+0x938>
 8009218:	4a1a      	ldr	r2, [pc, #104]	; (8009284 <_strtod_l+0x930>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d139      	bne.n	8009292 <_strtod_l+0x93e>
 800921e:	2101      	movs	r1, #1
 8009220:	9b07      	ldr	r3, [sp, #28]
 8009222:	4249      	negs	r1, r1
 8009224:	0032      	movs	r2, r6
 8009226:	0008      	movs	r0, r1
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00b      	beq.n	8009244 <_strtod_l+0x8f0>
 800922c:	24d4      	movs	r4, #212	; 0xd4
 800922e:	4b12      	ldr	r3, [pc, #72]	; (8009278 <_strtod_l+0x924>)
 8009230:	0008      	movs	r0, r1
 8009232:	403b      	ands	r3, r7
 8009234:	04e4      	lsls	r4, r4, #19
 8009236:	42a3      	cmp	r3, r4
 8009238:	d804      	bhi.n	8009244 <_strtod_l+0x8f0>
 800923a:	306c      	adds	r0, #108	; 0x6c
 800923c:	0d1b      	lsrs	r3, r3, #20
 800923e:	1ac3      	subs	r3, r0, r3
 8009240:	4099      	lsls	r1, r3
 8009242:	0008      	movs	r0, r1
 8009244:	4282      	cmp	r2, r0
 8009246:	d124      	bne.n	8009292 <_strtod_l+0x93e>
 8009248:	4b0f      	ldr	r3, [pc, #60]	; (8009288 <_strtod_l+0x934>)
 800924a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800924c:	4299      	cmp	r1, r3
 800924e:	d102      	bne.n	8009256 <_strtod_l+0x902>
 8009250:	3201      	adds	r2, #1
 8009252:	d100      	bne.n	8009256 <_strtod_l+0x902>
 8009254:	e5e1      	b.n	8008e1a <_strtod_l+0x4c6>
 8009256:	4b08      	ldr	r3, [pc, #32]	; (8009278 <_strtod_l+0x924>)
 8009258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800925a:	2600      	movs	r6, #0
 800925c:	401a      	ands	r2, r3
 800925e:	0013      	movs	r3, r2
 8009260:	2280      	movs	r2, #128	; 0x80
 8009262:	0352      	lsls	r2, r2, #13
 8009264:	189f      	adds	r7, r3, r2
 8009266:	9b07      	ldr	r3, [sp, #28]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1a1      	bne.n	80091b0 <_strtod_l+0x85c>
 800926c:	e5de      	b.n	8008e2c <_strtod_l+0x4d8>
 800926e:	46c0      	nop			; (mov r8, r8)
 8009270:	0800d368 	.word	0x0800d368
 8009274:	fffffc02 	.word	0xfffffc02
 8009278:	7ff00000 	.word	0x7ff00000
 800927c:	39500000 	.word	0x39500000
 8009280:	fffffbe2 	.word	0xfffffbe2
 8009284:	000fffff 	.word	0x000fffff
 8009288:	7fefffff 	.word	0x7fefffff
 800928c:	4333      	orrs	r3, r6
 800928e:	d100      	bne.n	8009292 <_strtod_l+0x93e>
 8009290:	e77c      	b.n	800918c <_strtod_l+0x838>
 8009292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009294:	2b00      	cmp	r3, #0
 8009296:	d01d      	beq.n	80092d4 <_strtod_l+0x980>
 8009298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800929a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800929c:	4213      	tst	r3, r2
 800929e:	d0e2      	beq.n	8009266 <_strtod_l+0x912>
 80092a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092a2:	0030      	movs	r0, r6
 80092a4:	0039      	movs	r1, r7
 80092a6:	9a07      	ldr	r2, [sp, #28]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d017      	beq.n	80092dc <_strtod_l+0x988>
 80092ac:	f7ff fb3a 	bl	8008924 <sulp>
 80092b0:	0002      	movs	r2, r0
 80092b2:	000b      	movs	r3, r1
 80092b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80092b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80092b8:	f7f7 fa80 	bl	80007bc <__aeabi_dadd>
 80092bc:	0006      	movs	r6, r0
 80092be:	000f      	movs	r7, r1
 80092c0:	e7d1      	b.n	8009266 <_strtod_l+0x912>
 80092c2:	2601      	movs	r6, #1
 80092c4:	4013      	ands	r3, r2
 80092c6:	4a98      	ldr	r2, [pc, #608]	; (8009528 <_strtod_l+0xbd4>)
 80092c8:	4276      	negs	r6, r6
 80092ca:	189b      	adds	r3, r3, r2
 80092cc:	4a97      	ldr	r2, [pc, #604]	; (800952c <_strtod_l+0xbd8>)
 80092ce:	431a      	orrs	r2, r3
 80092d0:	0017      	movs	r7, r2
 80092d2:	e7c8      	b.n	8009266 <_strtod_l+0x912>
 80092d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092d6:	4233      	tst	r3, r6
 80092d8:	d0c5      	beq.n	8009266 <_strtod_l+0x912>
 80092da:	e7e1      	b.n	80092a0 <_strtod_l+0x94c>
 80092dc:	f7ff fb22 	bl	8008924 <sulp>
 80092e0:	0002      	movs	r2, r0
 80092e2:	000b      	movs	r3, r1
 80092e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80092e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80092e8:	f7f8 fc84 	bl	8001bf4 <__aeabi_dsub>
 80092ec:	2200      	movs	r2, #0
 80092ee:	2300      	movs	r3, #0
 80092f0:	0006      	movs	r6, r0
 80092f2:	000f      	movs	r7, r1
 80092f4:	f7f7 f8aa 	bl	800044c <__aeabi_dcmpeq>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d0b4      	beq.n	8009266 <_strtod_l+0x912>
 80092fc:	e600      	b.n	8008f00 <_strtod_l+0x5ac>
 80092fe:	9906      	ldr	r1, [sp, #24]
 8009300:	9805      	ldr	r0, [sp, #20]
 8009302:	f003 fa39 	bl	800c778 <__ratio>
 8009306:	2380      	movs	r3, #128	; 0x80
 8009308:	2200      	movs	r2, #0
 800930a:	05db      	lsls	r3, r3, #23
 800930c:	0004      	movs	r4, r0
 800930e:	000d      	movs	r5, r1
 8009310:	f7f7 f8ac 	bl	800046c <__aeabi_dcmple>
 8009314:	2800      	cmp	r0, #0
 8009316:	d06d      	beq.n	80093f4 <_strtod_l+0xaa0>
 8009318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800931a:	2b00      	cmp	r3, #0
 800931c:	d000      	beq.n	8009320 <_strtod_l+0x9cc>
 800931e:	e07e      	b.n	800941e <_strtod_l+0xaca>
 8009320:	2e00      	cmp	r6, #0
 8009322:	d158      	bne.n	80093d6 <_strtod_l+0xa82>
 8009324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009326:	031b      	lsls	r3, r3, #12
 8009328:	d000      	beq.n	800932c <_strtod_l+0x9d8>
 800932a:	e07f      	b.n	800942c <_strtod_l+0xad8>
 800932c:	2200      	movs	r2, #0
 800932e:	0020      	movs	r0, r4
 8009330:	0029      	movs	r1, r5
 8009332:	4b7f      	ldr	r3, [pc, #508]	; (8009530 <_strtod_l+0xbdc>)
 8009334:	f7f7 f890 	bl	8000458 <__aeabi_dcmplt>
 8009338:	2800      	cmp	r0, #0
 800933a:	d158      	bne.n	80093ee <_strtod_l+0xa9a>
 800933c:	0020      	movs	r0, r4
 800933e:	0029      	movs	r1, r5
 8009340:	2200      	movs	r2, #0
 8009342:	4b7c      	ldr	r3, [pc, #496]	; (8009534 <_strtod_l+0xbe0>)
 8009344:	f7f8 f994 	bl	8001670 <__aeabi_dmul>
 8009348:	0004      	movs	r4, r0
 800934a:	000d      	movs	r5, r1
 800934c:	2380      	movs	r3, #128	; 0x80
 800934e:	061b      	lsls	r3, r3, #24
 8009350:	940a      	str	r4, [sp, #40]	; 0x28
 8009352:	18eb      	adds	r3, r5, r3
 8009354:	930b      	str	r3, [sp, #44]	; 0x2c
 8009356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800935a:	9212      	str	r2, [sp, #72]	; 0x48
 800935c:	9313      	str	r3, [sp, #76]	; 0x4c
 800935e:	4a76      	ldr	r2, [pc, #472]	; (8009538 <_strtod_l+0xbe4>)
 8009360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009362:	4013      	ands	r3, r2
 8009364:	9314      	str	r3, [sp, #80]	; 0x50
 8009366:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009368:	4b74      	ldr	r3, [pc, #464]	; (800953c <_strtod_l+0xbe8>)
 800936a:	429a      	cmp	r2, r3
 800936c:	d000      	beq.n	8009370 <_strtod_l+0xa1c>
 800936e:	e091      	b.n	8009494 <_strtod_l+0xb40>
 8009370:	4a73      	ldr	r2, [pc, #460]	; (8009540 <_strtod_l+0xbec>)
 8009372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009374:	4694      	mov	ip, r2
 8009376:	4463      	add	r3, ip
 8009378:	001f      	movs	r7, r3
 800937a:	0030      	movs	r0, r6
 800937c:	0019      	movs	r1, r3
 800937e:	f003 f933 	bl	800c5e8 <__ulp>
 8009382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009386:	f7f8 f973 	bl	8001670 <__aeabi_dmul>
 800938a:	0032      	movs	r2, r6
 800938c:	003b      	movs	r3, r7
 800938e:	f7f7 fa15 	bl	80007bc <__aeabi_dadd>
 8009392:	4a69      	ldr	r2, [pc, #420]	; (8009538 <_strtod_l+0xbe4>)
 8009394:	4b6b      	ldr	r3, [pc, #428]	; (8009544 <_strtod_l+0xbf0>)
 8009396:	0006      	movs	r6, r0
 8009398:	400a      	ands	r2, r1
 800939a:	429a      	cmp	r2, r3
 800939c:	d949      	bls.n	8009432 <_strtod_l+0xade>
 800939e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80093a0:	4b69      	ldr	r3, [pc, #420]	; (8009548 <_strtod_l+0xbf4>)
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d103      	bne.n	80093ae <_strtod_l+0xa5a>
 80093a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093a8:	3301      	adds	r3, #1
 80093aa:	d100      	bne.n	80093ae <_strtod_l+0xa5a>
 80093ac:	e535      	b.n	8008e1a <_strtod_l+0x4c6>
 80093ae:	2601      	movs	r6, #1
 80093b0:	4f65      	ldr	r7, [pc, #404]	; (8009548 <_strtod_l+0xbf4>)
 80093b2:	4276      	negs	r6, r6
 80093b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80093b6:	9804      	ldr	r0, [sp, #16]
 80093b8:	f002 fdd4 	bl	800bf64 <_Bfree>
 80093bc:	9908      	ldr	r1, [sp, #32]
 80093be:	9804      	ldr	r0, [sp, #16]
 80093c0:	f002 fdd0 	bl	800bf64 <_Bfree>
 80093c4:	9906      	ldr	r1, [sp, #24]
 80093c6:	9804      	ldr	r0, [sp, #16]
 80093c8:	f002 fdcc 	bl	800bf64 <_Bfree>
 80093cc:	9905      	ldr	r1, [sp, #20]
 80093ce:	9804      	ldr	r0, [sp, #16]
 80093d0:	f002 fdc8 	bl	800bf64 <_Bfree>
 80093d4:	e60b      	b.n	8008fee <_strtod_l+0x69a>
 80093d6:	2e01      	cmp	r6, #1
 80093d8:	d103      	bne.n	80093e2 <_strtod_l+0xa8e>
 80093da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d100      	bne.n	80093e2 <_strtod_l+0xa8e>
 80093e0:	e58e      	b.n	8008f00 <_strtod_l+0x5ac>
 80093e2:	2300      	movs	r3, #0
 80093e4:	4c59      	ldr	r4, [pc, #356]	; (800954c <_strtod_l+0xbf8>)
 80093e6:	930a      	str	r3, [sp, #40]	; 0x28
 80093e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80093ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80093ec:	e01c      	b.n	8009428 <_strtod_l+0xad4>
 80093ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80093f0:	4d50      	ldr	r5, [pc, #320]	; (8009534 <_strtod_l+0xbe0>)
 80093f2:	e7ab      	b.n	800934c <_strtod_l+0x9f8>
 80093f4:	2200      	movs	r2, #0
 80093f6:	0020      	movs	r0, r4
 80093f8:	0029      	movs	r1, r5
 80093fa:	4b4e      	ldr	r3, [pc, #312]	; (8009534 <_strtod_l+0xbe0>)
 80093fc:	f7f8 f938 	bl	8001670 <__aeabi_dmul>
 8009400:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009402:	0004      	movs	r4, r0
 8009404:	000b      	movs	r3, r1
 8009406:	000d      	movs	r5, r1
 8009408:	2a00      	cmp	r2, #0
 800940a:	d104      	bne.n	8009416 <_strtod_l+0xac2>
 800940c:	2280      	movs	r2, #128	; 0x80
 800940e:	0612      	lsls	r2, r2, #24
 8009410:	900a      	str	r0, [sp, #40]	; 0x28
 8009412:	188b      	adds	r3, r1, r2
 8009414:	e79e      	b.n	8009354 <_strtod_l+0xa00>
 8009416:	0002      	movs	r2, r0
 8009418:	920a      	str	r2, [sp, #40]	; 0x28
 800941a:	930b      	str	r3, [sp, #44]	; 0x2c
 800941c:	e79b      	b.n	8009356 <_strtod_l+0xa02>
 800941e:	2300      	movs	r3, #0
 8009420:	4c43      	ldr	r4, [pc, #268]	; (8009530 <_strtod_l+0xbdc>)
 8009422:	930a      	str	r3, [sp, #40]	; 0x28
 8009424:	940b      	str	r4, [sp, #44]	; 0x2c
 8009426:	2400      	movs	r4, #0
 8009428:	4d41      	ldr	r5, [pc, #260]	; (8009530 <_strtod_l+0xbdc>)
 800942a:	e794      	b.n	8009356 <_strtod_l+0xa02>
 800942c:	2300      	movs	r3, #0
 800942e:	4c47      	ldr	r4, [pc, #284]	; (800954c <_strtod_l+0xbf8>)
 8009430:	e7f7      	b.n	8009422 <_strtod_l+0xace>
 8009432:	23d4      	movs	r3, #212	; 0xd4
 8009434:	049b      	lsls	r3, r3, #18
 8009436:	18cf      	adds	r7, r1, r3
 8009438:	9b07      	ldr	r3, [sp, #28]
 800943a:	970e      	str	r7, [sp, #56]	; 0x38
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1b9      	bne.n	80093b4 <_strtod_l+0xa60>
 8009440:	4b3d      	ldr	r3, [pc, #244]	; (8009538 <_strtod_l+0xbe4>)
 8009442:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009444:	403b      	ands	r3, r7
 8009446:	429a      	cmp	r2, r3
 8009448:	d1b4      	bne.n	80093b4 <_strtod_l+0xa60>
 800944a:	0020      	movs	r0, r4
 800944c:	0029      	movs	r1, r5
 800944e:	f7f7 f897 	bl	8000580 <__aeabi_d2lz>
 8009452:	f7f7 f8d1 	bl	80005f8 <__aeabi_l2d>
 8009456:	0002      	movs	r2, r0
 8009458:	000b      	movs	r3, r1
 800945a:	0020      	movs	r0, r4
 800945c:	0029      	movs	r1, r5
 800945e:	f7f8 fbc9 	bl	8001bf4 <__aeabi_dsub>
 8009462:	033b      	lsls	r3, r7, #12
 8009464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009466:	0b1b      	lsrs	r3, r3, #12
 8009468:	4333      	orrs	r3, r6
 800946a:	4313      	orrs	r3, r2
 800946c:	0004      	movs	r4, r0
 800946e:	000d      	movs	r5, r1
 8009470:	4a37      	ldr	r2, [pc, #220]	; (8009550 <_strtod_l+0xbfc>)
 8009472:	2b00      	cmp	r3, #0
 8009474:	d054      	beq.n	8009520 <_strtod_l+0xbcc>
 8009476:	4b37      	ldr	r3, [pc, #220]	; (8009554 <_strtod_l+0xc00>)
 8009478:	f7f6 ffee 	bl	8000458 <__aeabi_dcmplt>
 800947c:	2800      	cmp	r0, #0
 800947e:	d000      	beq.n	8009482 <_strtod_l+0xb2e>
 8009480:	e4d4      	b.n	8008e2c <_strtod_l+0x4d8>
 8009482:	0020      	movs	r0, r4
 8009484:	0029      	movs	r1, r5
 8009486:	4a34      	ldr	r2, [pc, #208]	; (8009558 <_strtod_l+0xc04>)
 8009488:	4b2a      	ldr	r3, [pc, #168]	; (8009534 <_strtod_l+0xbe0>)
 800948a:	f7f6 fff9 	bl	8000480 <__aeabi_dcmpgt>
 800948e:	2800      	cmp	r0, #0
 8009490:	d090      	beq.n	80093b4 <_strtod_l+0xa60>
 8009492:	e4cb      	b.n	8008e2c <_strtod_l+0x4d8>
 8009494:	9b07      	ldr	r3, [sp, #28]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d02b      	beq.n	80094f2 <_strtod_l+0xb9e>
 800949a:	23d4      	movs	r3, #212	; 0xd4
 800949c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800949e:	04db      	lsls	r3, r3, #19
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d826      	bhi.n	80094f2 <_strtod_l+0xb9e>
 80094a4:	0020      	movs	r0, r4
 80094a6:	0029      	movs	r1, r5
 80094a8:	4a2c      	ldr	r2, [pc, #176]	; (800955c <_strtod_l+0xc08>)
 80094aa:	4b2d      	ldr	r3, [pc, #180]	; (8009560 <_strtod_l+0xc0c>)
 80094ac:	f7f6 ffde 	bl	800046c <__aeabi_dcmple>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d017      	beq.n	80094e4 <_strtod_l+0xb90>
 80094b4:	0020      	movs	r0, r4
 80094b6:	0029      	movs	r1, r5
 80094b8:	f7f7 f844 	bl	8000544 <__aeabi_d2uiz>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d100      	bne.n	80094c2 <_strtod_l+0xb6e>
 80094c0:	3001      	adds	r0, #1
 80094c2:	f7f8 ff9d 	bl	8002400 <__aeabi_ui2d>
 80094c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094c8:	0004      	movs	r4, r0
 80094ca:	000b      	movs	r3, r1
 80094cc:	000d      	movs	r5, r1
 80094ce:	2a00      	cmp	r2, #0
 80094d0:	d122      	bne.n	8009518 <_strtod_l+0xbc4>
 80094d2:	2280      	movs	r2, #128	; 0x80
 80094d4:	0612      	lsls	r2, r2, #24
 80094d6:	188b      	adds	r3, r1, r2
 80094d8:	9016      	str	r0, [sp, #88]	; 0x58
 80094da:	9317      	str	r3, [sp, #92]	; 0x5c
 80094dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80094de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094e0:	9212      	str	r2, [sp, #72]	; 0x48
 80094e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80094e4:	22d6      	movs	r2, #214	; 0xd6
 80094e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094e8:	04d2      	lsls	r2, r2, #19
 80094ea:	189b      	adds	r3, r3, r2
 80094ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094ee:	1a9b      	subs	r3, r3, r2
 80094f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80094f2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80094f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80094f6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80094f8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80094fa:	f003 f875 	bl	800c5e8 <__ulp>
 80094fe:	0002      	movs	r2, r0
 8009500:	000b      	movs	r3, r1
 8009502:	0030      	movs	r0, r6
 8009504:	0039      	movs	r1, r7
 8009506:	f7f8 f8b3 	bl	8001670 <__aeabi_dmul>
 800950a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800950c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800950e:	f7f7 f955 	bl	80007bc <__aeabi_dadd>
 8009512:	0006      	movs	r6, r0
 8009514:	000f      	movs	r7, r1
 8009516:	e78f      	b.n	8009438 <_strtod_l+0xae4>
 8009518:	0002      	movs	r2, r0
 800951a:	9216      	str	r2, [sp, #88]	; 0x58
 800951c:	9317      	str	r3, [sp, #92]	; 0x5c
 800951e:	e7dd      	b.n	80094dc <_strtod_l+0xb88>
 8009520:	4b10      	ldr	r3, [pc, #64]	; (8009564 <_strtod_l+0xc10>)
 8009522:	f7f6 ff99 	bl	8000458 <__aeabi_dcmplt>
 8009526:	e7b2      	b.n	800948e <_strtod_l+0xb3a>
 8009528:	fff00000 	.word	0xfff00000
 800952c:	000fffff 	.word	0x000fffff
 8009530:	3ff00000 	.word	0x3ff00000
 8009534:	3fe00000 	.word	0x3fe00000
 8009538:	7ff00000 	.word	0x7ff00000
 800953c:	7fe00000 	.word	0x7fe00000
 8009540:	fcb00000 	.word	0xfcb00000
 8009544:	7c9fffff 	.word	0x7c9fffff
 8009548:	7fefffff 	.word	0x7fefffff
 800954c:	bff00000 	.word	0xbff00000
 8009550:	94a03595 	.word	0x94a03595
 8009554:	3fdfffff 	.word	0x3fdfffff
 8009558:	35afe535 	.word	0x35afe535
 800955c:	ffc00000 	.word	0xffc00000
 8009560:	41dfffff 	.word	0x41dfffff
 8009564:	3fcfffff 	.word	0x3fcfffff

08009568 <_strtod_r>:
 8009568:	b510      	push	{r4, lr}
 800956a:	4b02      	ldr	r3, [pc, #8]	; (8009574 <_strtod_r+0xc>)
 800956c:	f7ff f9f2 	bl	8008954 <_strtod_l>
 8009570:	bd10      	pop	{r4, pc}
 8009572:	46c0      	nop			; (mov r8, r8)
 8009574:	20000018 	.word	0x20000018

08009578 <_strtol_l.constprop.0>:
 8009578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800957a:	b087      	sub	sp, #28
 800957c:	001e      	movs	r6, r3
 800957e:	9005      	str	r0, [sp, #20]
 8009580:	9101      	str	r1, [sp, #4]
 8009582:	9202      	str	r2, [sp, #8]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d048      	beq.n	800961a <_strtol_l.constprop.0+0xa2>
 8009588:	000b      	movs	r3, r1
 800958a:	2e24      	cmp	r6, #36	; 0x24
 800958c:	d845      	bhi.n	800961a <_strtol_l.constprop.0+0xa2>
 800958e:	4a3b      	ldr	r2, [pc, #236]	; (800967c <_strtol_l.constprop.0+0x104>)
 8009590:	2108      	movs	r1, #8
 8009592:	4694      	mov	ip, r2
 8009594:	001a      	movs	r2, r3
 8009596:	4660      	mov	r0, ip
 8009598:	7814      	ldrb	r4, [r2, #0]
 800959a:	3301      	adds	r3, #1
 800959c:	5d00      	ldrb	r0, [r0, r4]
 800959e:	001d      	movs	r5, r3
 80095a0:	0007      	movs	r7, r0
 80095a2:	400f      	ands	r7, r1
 80095a4:	4208      	tst	r0, r1
 80095a6:	d1f5      	bne.n	8009594 <_strtol_l.constprop.0+0x1c>
 80095a8:	2c2d      	cmp	r4, #45	; 0x2d
 80095aa:	d13d      	bne.n	8009628 <_strtol_l.constprop.0+0xb0>
 80095ac:	2701      	movs	r7, #1
 80095ae:	781c      	ldrb	r4, [r3, #0]
 80095b0:	1c95      	adds	r5, r2, #2
 80095b2:	2e00      	cmp	r6, #0
 80095b4:	d05e      	beq.n	8009674 <_strtol_l.constprop.0+0xfc>
 80095b6:	2e10      	cmp	r6, #16
 80095b8:	d109      	bne.n	80095ce <_strtol_l.constprop.0+0x56>
 80095ba:	2c30      	cmp	r4, #48	; 0x30
 80095bc:	d107      	bne.n	80095ce <_strtol_l.constprop.0+0x56>
 80095be:	2220      	movs	r2, #32
 80095c0:	782b      	ldrb	r3, [r5, #0]
 80095c2:	4393      	bics	r3, r2
 80095c4:	2b58      	cmp	r3, #88	; 0x58
 80095c6:	d150      	bne.n	800966a <_strtol_l.constprop.0+0xf2>
 80095c8:	2610      	movs	r6, #16
 80095ca:	786c      	ldrb	r4, [r5, #1]
 80095cc:	3502      	adds	r5, #2
 80095ce:	4b2c      	ldr	r3, [pc, #176]	; (8009680 <_strtol_l.constprop.0+0x108>)
 80095d0:	0031      	movs	r1, r6
 80095d2:	18fb      	adds	r3, r7, r3
 80095d4:	0018      	movs	r0, r3
 80095d6:	9303      	str	r3, [sp, #12]
 80095d8:	f7f6 fe38 	bl	800024c <__aeabi_uidivmod>
 80095dc:	2200      	movs	r2, #0
 80095de:	9104      	str	r1, [sp, #16]
 80095e0:	2101      	movs	r1, #1
 80095e2:	4684      	mov	ip, r0
 80095e4:	0010      	movs	r0, r2
 80095e6:	4249      	negs	r1, r1
 80095e8:	0023      	movs	r3, r4
 80095ea:	3b30      	subs	r3, #48	; 0x30
 80095ec:	2b09      	cmp	r3, #9
 80095ee:	d903      	bls.n	80095f8 <_strtol_l.constprop.0+0x80>
 80095f0:	3b11      	subs	r3, #17
 80095f2:	2b19      	cmp	r3, #25
 80095f4:	d81d      	bhi.n	8009632 <_strtol_l.constprop.0+0xba>
 80095f6:	330a      	adds	r3, #10
 80095f8:	429e      	cmp	r6, r3
 80095fa:	dd1e      	ble.n	800963a <_strtol_l.constprop.0+0xc2>
 80095fc:	1c54      	adds	r4, r2, #1
 80095fe:	d009      	beq.n	8009614 <_strtol_l.constprop.0+0x9c>
 8009600:	000a      	movs	r2, r1
 8009602:	4584      	cmp	ip, r0
 8009604:	d306      	bcc.n	8009614 <_strtol_l.constprop.0+0x9c>
 8009606:	d102      	bne.n	800960e <_strtol_l.constprop.0+0x96>
 8009608:	9c04      	ldr	r4, [sp, #16]
 800960a:	429c      	cmp	r4, r3
 800960c:	db02      	blt.n	8009614 <_strtol_l.constprop.0+0x9c>
 800960e:	2201      	movs	r2, #1
 8009610:	4370      	muls	r0, r6
 8009612:	1818      	adds	r0, r3, r0
 8009614:	782c      	ldrb	r4, [r5, #0]
 8009616:	3501      	adds	r5, #1
 8009618:	e7e6      	b.n	80095e8 <_strtol_l.constprop.0+0x70>
 800961a:	f001 f8ff 	bl	800a81c <__errno>
 800961e:	2316      	movs	r3, #22
 8009620:	6003      	str	r3, [r0, #0]
 8009622:	2000      	movs	r0, #0
 8009624:	b007      	add	sp, #28
 8009626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009628:	2c2b      	cmp	r4, #43	; 0x2b
 800962a:	d1c2      	bne.n	80095b2 <_strtol_l.constprop.0+0x3a>
 800962c:	781c      	ldrb	r4, [r3, #0]
 800962e:	1c95      	adds	r5, r2, #2
 8009630:	e7bf      	b.n	80095b2 <_strtol_l.constprop.0+0x3a>
 8009632:	0023      	movs	r3, r4
 8009634:	3b61      	subs	r3, #97	; 0x61
 8009636:	2b19      	cmp	r3, #25
 8009638:	d9dd      	bls.n	80095f6 <_strtol_l.constprop.0+0x7e>
 800963a:	1c53      	adds	r3, r2, #1
 800963c:	d109      	bne.n	8009652 <_strtol_l.constprop.0+0xda>
 800963e:	2322      	movs	r3, #34	; 0x22
 8009640:	9a05      	ldr	r2, [sp, #20]
 8009642:	9803      	ldr	r0, [sp, #12]
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	9b02      	ldr	r3, [sp, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d0eb      	beq.n	8009624 <_strtol_l.constprop.0+0xac>
 800964c:	1e6b      	subs	r3, r5, #1
 800964e:	9301      	str	r3, [sp, #4]
 8009650:	e007      	b.n	8009662 <_strtol_l.constprop.0+0xea>
 8009652:	2f00      	cmp	r7, #0
 8009654:	d000      	beq.n	8009658 <_strtol_l.constprop.0+0xe0>
 8009656:	4240      	negs	r0, r0
 8009658:	9b02      	ldr	r3, [sp, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0e2      	beq.n	8009624 <_strtol_l.constprop.0+0xac>
 800965e:	2a00      	cmp	r2, #0
 8009660:	d1f4      	bne.n	800964c <_strtol_l.constprop.0+0xd4>
 8009662:	9b02      	ldr	r3, [sp, #8]
 8009664:	9a01      	ldr	r2, [sp, #4]
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	e7dc      	b.n	8009624 <_strtol_l.constprop.0+0xac>
 800966a:	2430      	movs	r4, #48	; 0x30
 800966c:	2e00      	cmp	r6, #0
 800966e:	d1ae      	bne.n	80095ce <_strtol_l.constprop.0+0x56>
 8009670:	3608      	adds	r6, #8
 8009672:	e7ac      	b.n	80095ce <_strtol_l.constprop.0+0x56>
 8009674:	2c30      	cmp	r4, #48	; 0x30
 8009676:	d0a2      	beq.n	80095be <_strtol_l.constprop.0+0x46>
 8009678:	260a      	movs	r6, #10
 800967a:	e7a8      	b.n	80095ce <_strtol_l.constprop.0+0x56>
 800967c:	0800d391 	.word	0x0800d391
 8009680:	7fffffff 	.word	0x7fffffff

08009684 <_strtol_r>:
 8009684:	b510      	push	{r4, lr}
 8009686:	f7ff ff77 	bl	8009578 <_strtol_l.constprop.0>
 800968a:	bd10      	pop	{r4, pc}

0800968c <__cvt>:
 800968c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800968e:	001e      	movs	r6, r3
 8009690:	2300      	movs	r3, #0
 8009692:	0014      	movs	r4, r2
 8009694:	b08b      	sub	sp, #44	; 0x2c
 8009696:	429e      	cmp	r6, r3
 8009698:	da04      	bge.n	80096a4 <__cvt+0x18>
 800969a:	2180      	movs	r1, #128	; 0x80
 800969c:	0609      	lsls	r1, r1, #24
 800969e:	1873      	adds	r3, r6, r1
 80096a0:	001e      	movs	r6, r3
 80096a2:	232d      	movs	r3, #45	; 0x2d
 80096a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096a6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80096a8:	7013      	strb	r3, [r2, #0]
 80096aa:	2320      	movs	r3, #32
 80096ac:	2203      	movs	r2, #3
 80096ae:	439f      	bics	r7, r3
 80096b0:	2f46      	cmp	r7, #70	; 0x46
 80096b2:	d007      	beq.n	80096c4 <__cvt+0x38>
 80096b4:	003b      	movs	r3, r7
 80096b6:	3b45      	subs	r3, #69	; 0x45
 80096b8:	4259      	negs	r1, r3
 80096ba:	414b      	adcs	r3, r1
 80096bc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80096be:	3a01      	subs	r2, #1
 80096c0:	18cb      	adds	r3, r1, r3
 80096c2:	9310      	str	r3, [sp, #64]	; 0x40
 80096c4:	ab09      	add	r3, sp, #36	; 0x24
 80096c6:	9304      	str	r3, [sp, #16]
 80096c8:	ab08      	add	r3, sp, #32
 80096ca:	9303      	str	r3, [sp, #12]
 80096cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096ce:	9200      	str	r2, [sp, #0]
 80096d0:	9302      	str	r3, [sp, #8]
 80096d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096d4:	0022      	movs	r2, r4
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	0033      	movs	r3, r6
 80096da:	f001 f97b 	bl	800a9d4 <_dtoa_r>
 80096de:	0005      	movs	r5, r0
 80096e0:	2f47      	cmp	r7, #71	; 0x47
 80096e2:	d102      	bne.n	80096ea <__cvt+0x5e>
 80096e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096e6:	07db      	lsls	r3, r3, #31
 80096e8:	d528      	bpl.n	800973c <__cvt+0xb0>
 80096ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096ec:	18eb      	adds	r3, r5, r3
 80096ee:	9307      	str	r3, [sp, #28]
 80096f0:	2f46      	cmp	r7, #70	; 0x46
 80096f2:	d114      	bne.n	800971e <__cvt+0x92>
 80096f4:	782b      	ldrb	r3, [r5, #0]
 80096f6:	2b30      	cmp	r3, #48	; 0x30
 80096f8:	d10c      	bne.n	8009714 <__cvt+0x88>
 80096fa:	2200      	movs	r2, #0
 80096fc:	2300      	movs	r3, #0
 80096fe:	0020      	movs	r0, r4
 8009700:	0031      	movs	r1, r6
 8009702:	f7f6 fea3 	bl	800044c <__aeabi_dcmpeq>
 8009706:	2800      	cmp	r0, #0
 8009708:	d104      	bne.n	8009714 <__cvt+0x88>
 800970a:	2301      	movs	r3, #1
 800970c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800970e:	1a9b      	subs	r3, r3, r2
 8009710:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009716:	9a07      	ldr	r2, [sp, #28]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	18d3      	adds	r3, r2, r3
 800971c:	9307      	str	r3, [sp, #28]
 800971e:	2200      	movs	r2, #0
 8009720:	2300      	movs	r3, #0
 8009722:	0020      	movs	r0, r4
 8009724:	0031      	movs	r1, r6
 8009726:	f7f6 fe91 	bl	800044c <__aeabi_dcmpeq>
 800972a:	2800      	cmp	r0, #0
 800972c:	d001      	beq.n	8009732 <__cvt+0xa6>
 800972e:	9b07      	ldr	r3, [sp, #28]
 8009730:	9309      	str	r3, [sp, #36]	; 0x24
 8009732:	2230      	movs	r2, #48	; 0x30
 8009734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009736:	9907      	ldr	r1, [sp, #28]
 8009738:	428b      	cmp	r3, r1
 800973a:	d306      	bcc.n	800974a <__cvt+0xbe>
 800973c:	0028      	movs	r0, r5
 800973e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009740:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009742:	1b5b      	subs	r3, r3, r5
 8009744:	6013      	str	r3, [r2, #0]
 8009746:	b00b      	add	sp, #44	; 0x2c
 8009748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800974a:	1c59      	adds	r1, r3, #1
 800974c:	9109      	str	r1, [sp, #36]	; 0x24
 800974e:	701a      	strb	r2, [r3, #0]
 8009750:	e7f0      	b.n	8009734 <__cvt+0xa8>

08009752 <__exponent>:
 8009752:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009754:	1c83      	adds	r3, r0, #2
 8009756:	b087      	sub	sp, #28
 8009758:	9303      	str	r3, [sp, #12]
 800975a:	0005      	movs	r5, r0
 800975c:	000c      	movs	r4, r1
 800975e:	232b      	movs	r3, #43	; 0x2b
 8009760:	7002      	strb	r2, [r0, #0]
 8009762:	2900      	cmp	r1, #0
 8009764:	da01      	bge.n	800976a <__exponent+0x18>
 8009766:	424c      	negs	r4, r1
 8009768:	3302      	adds	r3, #2
 800976a:	706b      	strb	r3, [r5, #1]
 800976c:	2c09      	cmp	r4, #9
 800976e:	dd2f      	ble.n	80097d0 <__exponent+0x7e>
 8009770:	270a      	movs	r7, #10
 8009772:	ab04      	add	r3, sp, #16
 8009774:	1dde      	adds	r6, r3, #7
 8009776:	0020      	movs	r0, r4
 8009778:	0039      	movs	r1, r7
 800977a:	9601      	str	r6, [sp, #4]
 800977c:	f7f6 fe50 	bl	8000420 <__aeabi_idivmod>
 8009780:	3e01      	subs	r6, #1
 8009782:	3130      	adds	r1, #48	; 0x30
 8009784:	0020      	movs	r0, r4
 8009786:	7031      	strb	r1, [r6, #0]
 8009788:	0039      	movs	r1, r7
 800978a:	9402      	str	r4, [sp, #8]
 800978c:	f7f6 fd62 	bl	8000254 <__divsi3>
 8009790:	9b02      	ldr	r3, [sp, #8]
 8009792:	0004      	movs	r4, r0
 8009794:	2b63      	cmp	r3, #99	; 0x63
 8009796:	dcee      	bgt.n	8009776 <__exponent+0x24>
 8009798:	9b01      	ldr	r3, [sp, #4]
 800979a:	3430      	adds	r4, #48	; 0x30
 800979c:	1e9a      	subs	r2, r3, #2
 800979e:	0013      	movs	r3, r2
 80097a0:	9903      	ldr	r1, [sp, #12]
 80097a2:	7014      	strb	r4, [r2, #0]
 80097a4:	a804      	add	r0, sp, #16
 80097a6:	3007      	adds	r0, #7
 80097a8:	4298      	cmp	r0, r3
 80097aa:	d80c      	bhi.n	80097c6 <__exponent+0x74>
 80097ac:	2300      	movs	r3, #0
 80097ae:	4282      	cmp	r2, r0
 80097b0:	d804      	bhi.n	80097bc <__exponent+0x6a>
 80097b2:	aa04      	add	r2, sp, #16
 80097b4:	3309      	adds	r3, #9
 80097b6:	189b      	adds	r3, r3, r2
 80097b8:	9a01      	ldr	r2, [sp, #4]
 80097ba:	1a9b      	subs	r3, r3, r2
 80097bc:	9a03      	ldr	r2, [sp, #12]
 80097be:	18d3      	adds	r3, r2, r3
 80097c0:	1b58      	subs	r0, r3, r5
 80097c2:	b007      	add	sp, #28
 80097c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097c6:	7818      	ldrb	r0, [r3, #0]
 80097c8:	3301      	adds	r3, #1
 80097ca:	7008      	strb	r0, [r1, #0]
 80097cc:	3101      	adds	r1, #1
 80097ce:	e7e9      	b.n	80097a4 <__exponent+0x52>
 80097d0:	2330      	movs	r3, #48	; 0x30
 80097d2:	3430      	adds	r4, #48	; 0x30
 80097d4:	70ab      	strb	r3, [r5, #2]
 80097d6:	70ec      	strb	r4, [r5, #3]
 80097d8:	1d2b      	adds	r3, r5, #4
 80097da:	e7f1      	b.n	80097c0 <__exponent+0x6e>

080097dc <_printf_float>:
 80097dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097de:	b095      	sub	sp, #84	; 0x54
 80097e0:	000c      	movs	r4, r1
 80097e2:	9208      	str	r2, [sp, #32]
 80097e4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80097e6:	9309      	str	r3, [sp, #36]	; 0x24
 80097e8:	0007      	movs	r7, r0
 80097ea:	f000 ffc5 	bl	800a778 <_localeconv_r>
 80097ee:	6803      	ldr	r3, [r0, #0]
 80097f0:	0018      	movs	r0, r3
 80097f2:	930c      	str	r3, [sp, #48]	; 0x30
 80097f4:	f7f6 fc88 	bl	8000108 <strlen>
 80097f8:	2300      	movs	r3, #0
 80097fa:	9312      	str	r3, [sp, #72]	; 0x48
 80097fc:	7e23      	ldrb	r3, [r4, #24]
 80097fe:	2207      	movs	r2, #7
 8009800:	930a      	str	r3, [sp, #40]	; 0x28
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	900d      	str	r0, [sp, #52]	; 0x34
 8009806:	930b      	str	r3, [sp, #44]	; 0x2c
 8009808:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800980a:	682b      	ldr	r3, [r5, #0]
 800980c:	05c9      	lsls	r1, r1, #23
 800980e:	d547      	bpl.n	80098a0 <_printf_float+0xc4>
 8009810:	189b      	adds	r3, r3, r2
 8009812:	4393      	bics	r3, r2
 8009814:	001a      	movs	r2, r3
 8009816:	3208      	adds	r2, #8
 8009818:	602a      	str	r2, [r5, #0]
 800981a:	681e      	ldr	r6, [r3, #0]
 800981c:	685d      	ldr	r5, [r3, #4]
 800981e:	0032      	movs	r2, r6
 8009820:	002b      	movs	r3, r5
 8009822:	64a2      	str	r2, [r4, #72]	; 0x48
 8009824:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009826:	2201      	movs	r2, #1
 8009828:	006b      	lsls	r3, r5, #1
 800982a:	085b      	lsrs	r3, r3, #1
 800982c:	930e      	str	r3, [sp, #56]	; 0x38
 800982e:	0030      	movs	r0, r6
 8009830:	4bab      	ldr	r3, [pc, #684]	; (8009ae0 <_printf_float+0x304>)
 8009832:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009834:	4252      	negs	r2, r2
 8009836:	f7f8 fd5f 	bl	80022f8 <__aeabi_dcmpun>
 800983a:	2800      	cmp	r0, #0
 800983c:	d132      	bne.n	80098a4 <_printf_float+0xc8>
 800983e:	2201      	movs	r2, #1
 8009840:	0030      	movs	r0, r6
 8009842:	4ba7      	ldr	r3, [pc, #668]	; (8009ae0 <_printf_float+0x304>)
 8009844:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009846:	4252      	negs	r2, r2
 8009848:	f7f6 fe10 	bl	800046c <__aeabi_dcmple>
 800984c:	2800      	cmp	r0, #0
 800984e:	d129      	bne.n	80098a4 <_printf_float+0xc8>
 8009850:	2200      	movs	r2, #0
 8009852:	2300      	movs	r3, #0
 8009854:	0030      	movs	r0, r6
 8009856:	0029      	movs	r1, r5
 8009858:	f7f6 fdfe 	bl	8000458 <__aeabi_dcmplt>
 800985c:	2800      	cmp	r0, #0
 800985e:	d003      	beq.n	8009868 <_printf_float+0x8c>
 8009860:	0023      	movs	r3, r4
 8009862:	222d      	movs	r2, #45	; 0x2d
 8009864:	3343      	adds	r3, #67	; 0x43
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800986a:	4d9e      	ldr	r5, [pc, #632]	; (8009ae4 <_printf_float+0x308>)
 800986c:	2b47      	cmp	r3, #71	; 0x47
 800986e:	d900      	bls.n	8009872 <_printf_float+0x96>
 8009870:	4d9d      	ldr	r5, [pc, #628]	; (8009ae8 <_printf_float+0x30c>)
 8009872:	2303      	movs	r3, #3
 8009874:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009876:	6123      	str	r3, [r4, #16]
 8009878:	3301      	adds	r3, #1
 800987a:	439a      	bics	r2, r3
 800987c:	2300      	movs	r3, #0
 800987e:	6022      	str	r2, [r4, #0]
 8009880:	930b      	str	r3, [sp, #44]	; 0x2c
 8009882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009884:	0021      	movs	r1, r4
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	0038      	movs	r0, r7
 800988a:	9b08      	ldr	r3, [sp, #32]
 800988c:	aa13      	add	r2, sp, #76	; 0x4c
 800988e:	f000 f9fb 	bl	8009c88 <_printf_common>
 8009892:	3001      	adds	r0, #1
 8009894:	d000      	beq.n	8009898 <_printf_float+0xbc>
 8009896:	e0a3      	b.n	80099e0 <_printf_float+0x204>
 8009898:	2001      	movs	r0, #1
 800989a:	4240      	negs	r0, r0
 800989c:	b015      	add	sp, #84	; 0x54
 800989e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098a0:	3307      	adds	r3, #7
 80098a2:	e7b6      	b.n	8009812 <_printf_float+0x36>
 80098a4:	0032      	movs	r2, r6
 80098a6:	002b      	movs	r3, r5
 80098a8:	0030      	movs	r0, r6
 80098aa:	0029      	movs	r1, r5
 80098ac:	f7f8 fd24 	bl	80022f8 <__aeabi_dcmpun>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d00b      	beq.n	80098cc <_printf_float+0xf0>
 80098b4:	2d00      	cmp	r5, #0
 80098b6:	da03      	bge.n	80098c0 <_printf_float+0xe4>
 80098b8:	0023      	movs	r3, r4
 80098ba:	222d      	movs	r2, #45	; 0x2d
 80098bc:	3343      	adds	r3, #67	; 0x43
 80098be:	701a      	strb	r2, [r3, #0]
 80098c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098c2:	4d8a      	ldr	r5, [pc, #552]	; (8009aec <_printf_float+0x310>)
 80098c4:	2b47      	cmp	r3, #71	; 0x47
 80098c6:	d9d4      	bls.n	8009872 <_printf_float+0x96>
 80098c8:	4d89      	ldr	r5, [pc, #548]	; (8009af0 <_printf_float+0x314>)
 80098ca:	e7d2      	b.n	8009872 <_printf_float+0x96>
 80098cc:	2220      	movs	r2, #32
 80098ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80098d0:	6863      	ldr	r3, [r4, #4]
 80098d2:	4391      	bics	r1, r2
 80098d4:	910e      	str	r1, [sp, #56]	; 0x38
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	d14a      	bne.n	8009970 <_printf_float+0x194>
 80098da:	3307      	adds	r3, #7
 80098dc:	6063      	str	r3, [r4, #4]
 80098de:	2380      	movs	r3, #128	; 0x80
 80098e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	4313      	orrs	r3, r2
 80098e6:	2200      	movs	r2, #0
 80098e8:	9206      	str	r2, [sp, #24]
 80098ea:	aa12      	add	r2, sp, #72	; 0x48
 80098ec:	9205      	str	r2, [sp, #20]
 80098ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	9204      	str	r2, [sp, #16]
 80098f4:	aa11      	add	r2, sp, #68	; 0x44
 80098f6:	9203      	str	r2, [sp, #12]
 80098f8:	2223      	movs	r2, #35	; 0x23
 80098fa:	a908      	add	r1, sp, #32
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	6863      	ldr	r3, [r4, #4]
 8009900:	1852      	adds	r2, r2, r1
 8009902:	9202      	str	r2, [sp, #8]
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	0032      	movs	r2, r6
 8009908:	002b      	movs	r3, r5
 800990a:	0038      	movs	r0, r7
 800990c:	f7ff febe 	bl	800968c <__cvt>
 8009910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009912:	0005      	movs	r5, r0
 8009914:	2b47      	cmp	r3, #71	; 0x47
 8009916:	d109      	bne.n	800992c <_printf_float+0x150>
 8009918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800991a:	1cda      	adds	r2, r3, #3
 800991c:	db02      	blt.n	8009924 <_printf_float+0x148>
 800991e:	6862      	ldr	r2, [r4, #4]
 8009920:	4293      	cmp	r3, r2
 8009922:	dd49      	ble.n	80099b8 <_printf_float+0x1dc>
 8009924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009926:	3b02      	subs	r3, #2
 8009928:	b2db      	uxtb	r3, r3
 800992a:	930a      	str	r3, [sp, #40]	; 0x28
 800992c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800992e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009930:	2b65      	cmp	r3, #101	; 0x65
 8009932:	d824      	bhi.n	800997e <_printf_float+0x1a2>
 8009934:	0020      	movs	r0, r4
 8009936:	001a      	movs	r2, r3
 8009938:	3901      	subs	r1, #1
 800993a:	3050      	adds	r0, #80	; 0x50
 800993c:	9111      	str	r1, [sp, #68]	; 0x44
 800993e:	f7ff ff08 	bl	8009752 <__exponent>
 8009942:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009944:	900b      	str	r0, [sp, #44]	; 0x2c
 8009946:	1813      	adds	r3, r2, r0
 8009948:	6123      	str	r3, [r4, #16]
 800994a:	2a01      	cmp	r2, #1
 800994c:	dc02      	bgt.n	8009954 <_printf_float+0x178>
 800994e:	6822      	ldr	r2, [r4, #0]
 8009950:	07d2      	lsls	r2, r2, #31
 8009952:	d501      	bpl.n	8009958 <_printf_float+0x17c>
 8009954:	3301      	adds	r3, #1
 8009956:	6123      	str	r3, [r4, #16]
 8009958:	2323      	movs	r3, #35	; 0x23
 800995a:	aa08      	add	r2, sp, #32
 800995c:	189b      	adds	r3, r3, r2
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d100      	bne.n	8009966 <_printf_float+0x18a>
 8009964:	e78d      	b.n	8009882 <_printf_float+0xa6>
 8009966:	0023      	movs	r3, r4
 8009968:	222d      	movs	r2, #45	; 0x2d
 800996a:	3343      	adds	r3, #67	; 0x43
 800996c:	701a      	strb	r2, [r3, #0]
 800996e:	e788      	b.n	8009882 <_printf_float+0xa6>
 8009970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009972:	2a47      	cmp	r2, #71	; 0x47
 8009974:	d1b3      	bne.n	80098de <_printf_float+0x102>
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1b1      	bne.n	80098de <_printf_float+0x102>
 800997a:	3301      	adds	r3, #1
 800997c:	e7ae      	b.n	80098dc <_printf_float+0x100>
 800997e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009980:	2b66      	cmp	r3, #102	; 0x66
 8009982:	d11b      	bne.n	80099bc <_printf_float+0x1e0>
 8009984:	6863      	ldr	r3, [r4, #4]
 8009986:	2900      	cmp	r1, #0
 8009988:	dd09      	ble.n	800999e <_printf_float+0x1c2>
 800998a:	6121      	str	r1, [r4, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d102      	bne.n	8009996 <_printf_float+0x1ba>
 8009990:	6822      	ldr	r2, [r4, #0]
 8009992:	07d2      	lsls	r2, r2, #31
 8009994:	d50b      	bpl.n	80099ae <_printf_float+0x1d2>
 8009996:	3301      	adds	r3, #1
 8009998:	185b      	adds	r3, r3, r1
 800999a:	6123      	str	r3, [r4, #16]
 800999c:	e007      	b.n	80099ae <_printf_float+0x1d2>
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d103      	bne.n	80099aa <_printf_float+0x1ce>
 80099a2:	2201      	movs	r2, #1
 80099a4:	6821      	ldr	r1, [r4, #0]
 80099a6:	4211      	tst	r1, r2
 80099a8:	d000      	beq.n	80099ac <_printf_float+0x1d0>
 80099aa:	1c9a      	adds	r2, r3, #2
 80099ac:	6122      	str	r2, [r4, #16]
 80099ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80099b2:	2300      	movs	r3, #0
 80099b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80099b6:	e7cf      	b.n	8009958 <_printf_float+0x17c>
 80099b8:	2367      	movs	r3, #103	; 0x67
 80099ba:	930a      	str	r3, [sp, #40]	; 0x28
 80099bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80099be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099c0:	4299      	cmp	r1, r3
 80099c2:	db06      	blt.n	80099d2 <_printf_float+0x1f6>
 80099c4:	6823      	ldr	r3, [r4, #0]
 80099c6:	6121      	str	r1, [r4, #16]
 80099c8:	07db      	lsls	r3, r3, #31
 80099ca:	d5f0      	bpl.n	80099ae <_printf_float+0x1d2>
 80099cc:	3101      	adds	r1, #1
 80099ce:	6121      	str	r1, [r4, #16]
 80099d0:	e7ed      	b.n	80099ae <_printf_float+0x1d2>
 80099d2:	2201      	movs	r2, #1
 80099d4:	2900      	cmp	r1, #0
 80099d6:	dc01      	bgt.n	80099dc <_printf_float+0x200>
 80099d8:	1892      	adds	r2, r2, r2
 80099da:	1a52      	subs	r2, r2, r1
 80099dc:	189b      	adds	r3, r3, r2
 80099de:	e7dc      	b.n	800999a <_printf_float+0x1be>
 80099e0:	6822      	ldr	r2, [r4, #0]
 80099e2:	0553      	lsls	r3, r2, #21
 80099e4:	d408      	bmi.n	80099f8 <_printf_float+0x21c>
 80099e6:	6923      	ldr	r3, [r4, #16]
 80099e8:	002a      	movs	r2, r5
 80099ea:	0038      	movs	r0, r7
 80099ec:	9908      	ldr	r1, [sp, #32]
 80099ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80099f0:	47a8      	blx	r5
 80099f2:	3001      	adds	r0, #1
 80099f4:	d12a      	bne.n	8009a4c <_printf_float+0x270>
 80099f6:	e74f      	b.n	8009898 <_printf_float+0xbc>
 80099f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099fa:	2b65      	cmp	r3, #101	; 0x65
 80099fc:	d800      	bhi.n	8009a00 <_printf_float+0x224>
 80099fe:	e0ec      	b.n	8009bda <_printf_float+0x3fe>
 8009a00:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009a02:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009a04:	2200      	movs	r2, #0
 8009a06:	2300      	movs	r3, #0
 8009a08:	f7f6 fd20 	bl	800044c <__aeabi_dcmpeq>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d034      	beq.n	8009a7a <_printf_float+0x29e>
 8009a10:	2301      	movs	r3, #1
 8009a12:	0038      	movs	r0, r7
 8009a14:	4a37      	ldr	r2, [pc, #220]	; (8009af4 <_printf_float+0x318>)
 8009a16:	9908      	ldr	r1, [sp, #32]
 8009a18:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009a1a:	47a8      	blx	r5
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	d100      	bne.n	8009a22 <_printf_float+0x246>
 8009a20:	e73a      	b.n	8009898 <_printf_float+0xbc>
 8009a22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009a24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a26:	429a      	cmp	r2, r3
 8009a28:	db02      	blt.n	8009a30 <_printf_float+0x254>
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	07db      	lsls	r3, r3, #31
 8009a2e:	d50d      	bpl.n	8009a4c <_printf_float+0x270>
 8009a30:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009a32:	0038      	movs	r0, r7
 8009a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a38:	9908      	ldr	r1, [sp, #32]
 8009a3a:	47a8      	blx	r5
 8009a3c:	2500      	movs	r5, #0
 8009a3e:	3001      	adds	r0, #1
 8009a40:	d100      	bne.n	8009a44 <_printf_float+0x268>
 8009a42:	e729      	b.n	8009898 <_printf_float+0xbc>
 8009a44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a46:	3b01      	subs	r3, #1
 8009a48:	42ab      	cmp	r3, r5
 8009a4a:	dc0a      	bgt.n	8009a62 <_printf_float+0x286>
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	079b      	lsls	r3, r3, #30
 8009a50:	d500      	bpl.n	8009a54 <_printf_float+0x278>
 8009a52:	e116      	b.n	8009c82 <_printf_float+0x4a6>
 8009a54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a56:	68e0      	ldr	r0, [r4, #12]
 8009a58:	4298      	cmp	r0, r3
 8009a5a:	db00      	blt.n	8009a5e <_printf_float+0x282>
 8009a5c:	e71e      	b.n	800989c <_printf_float+0xc0>
 8009a5e:	0018      	movs	r0, r3
 8009a60:	e71c      	b.n	800989c <_printf_float+0xc0>
 8009a62:	0022      	movs	r2, r4
 8009a64:	2301      	movs	r3, #1
 8009a66:	0038      	movs	r0, r7
 8009a68:	9908      	ldr	r1, [sp, #32]
 8009a6a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009a6c:	321a      	adds	r2, #26
 8009a6e:	47b0      	blx	r6
 8009a70:	3001      	adds	r0, #1
 8009a72:	d100      	bne.n	8009a76 <_printf_float+0x29a>
 8009a74:	e710      	b.n	8009898 <_printf_float+0xbc>
 8009a76:	3501      	adds	r5, #1
 8009a78:	e7e4      	b.n	8009a44 <_printf_float+0x268>
 8009a7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	dc3b      	bgt.n	8009af8 <_printf_float+0x31c>
 8009a80:	2301      	movs	r3, #1
 8009a82:	0038      	movs	r0, r7
 8009a84:	4a1b      	ldr	r2, [pc, #108]	; (8009af4 <_printf_float+0x318>)
 8009a86:	9908      	ldr	r1, [sp, #32]
 8009a88:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009a8a:	47b0      	blx	r6
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d100      	bne.n	8009a92 <_printf_float+0x2b6>
 8009a90:	e702      	b.n	8009898 <_printf_float+0xbc>
 8009a92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a96:	4313      	orrs	r3, r2
 8009a98:	d102      	bne.n	8009aa0 <_printf_float+0x2c4>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	07db      	lsls	r3, r3, #31
 8009a9e:	d5d5      	bpl.n	8009a4c <_printf_float+0x270>
 8009aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009aa2:	0038      	movs	r0, r7
 8009aa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009aa6:	9908      	ldr	r1, [sp, #32]
 8009aa8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009aaa:	47b0      	blx	r6
 8009aac:	2300      	movs	r3, #0
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d100      	bne.n	8009ab4 <_printf_float+0x2d8>
 8009ab2:	e6f1      	b.n	8009898 <_printf_float+0xbc>
 8009ab4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ab6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aba:	425b      	negs	r3, r3
 8009abc:	4293      	cmp	r3, r2
 8009abe:	dc01      	bgt.n	8009ac4 <_printf_float+0x2e8>
 8009ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ac2:	e791      	b.n	80099e8 <_printf_float+0x20c>
 8009ac4:	0022      	movs	r2, r4
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	0038      	movs	r0, r7
 8009aca:	9908      	ldr	r1, [sp, #32]
 8009acc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009ace:	321a      	adds	r2, #26
 8009ad0:	47b0      	blx	r6
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	d100      	bne.n	8009ad8 <_printf_float+0x2fc>
 8009ad6:	e6df      	b.n	8009898 <_printf_float+0xbc>
 8009ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ada:	3301      	adds	r3, #1
 8009adc:	e7ea      	b.n	8009ab4 <_printf_float+0x2d8>
 8009ade:	46c0      	nop			; (mov r8, r8)
 8009ae0:	7fefffff 	.word	0x7fefffff
 8009ae4:	0800d491 	.word	0x0800d491
 8009ae8:	0800d495 	.word	0x0800d495
 8009aec:	0800d499 	.word	0x0800d499
 8009af0:	0800d49d 	.word	0x0800d49d
 8009af4:	0800d4a1 	.word	0x0800d4a1
 8009af8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009afa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009afc:	920a      	str	r2, [sp, #40]	; 0x28
 8009afe:	429a      	cmp	r2, r3
 8009b00:	dd00      	ble.n	8009b04 <_printf_float+0x328>
 8009b02:	930a      	str	r3, [sp, #40]	; 0x28
 8009b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	dc3d      	bgt.n	8009b86 <_printf_float+0x3aa>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	930e      	str	r3, [sp, #56]	; 0x38
 8009b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b10:	43db      	mvns	r3, r3
 8009b12:	17db      	asrs	r3, r3, #31
 8009b14:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b1e:	4013      	ands	r3, r2
 8009b20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b26:	4293      	cmp	r3, r2
 8009b28:	dc36      	bgt.n	8009b98 <_printf_float+0x3bc>
 8009b2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	db40      	blt.n	8009bb4 <_printf_float+0x3d8>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	07db      	lsls	r3, r3, #31
 8009b36:	d43d      	bmi.n	8009bb4 <_printf_float+0x3d8>
 8009b38:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009b3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b3e:	1af3      	subs	r3, r6, r3
 8009b40:	1ab6      	subs	r6, r6, r2
 8009b42:	429e      	cmp	r6, r3
 8009b44:	dd00      	ble.n	8009b48 <_printf_float+0x36c>
 8009b46:	001e      	movs	r6, r3
 8009b48:	2e00      	cmp	r6, #0
 8009b4a:	dc3c      	bgt.n	8009bc6 <_printf_float+0x3ea>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b50:	43f3      	mvns	r3, r6
 8009b52:	17db      	asrs	r3, r3, #31
 8009b54:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b5a:	1a9b      	subs	r3, r3, r2
 8009b5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b5e:	4032      	ands	r2, r6
 8009b60:	1a9b      	subs	r3, r3, r2
 8009b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b64:	4293      	cmp	r3, r2
 8009b66:	dc00      	bgt.n	8009b6a <_printf_float+0x38e>
 8009b68:	e770      	b.n	8009a4c <_printf_float+0x270>
 8009b6a:	0022      	movs	r2, r4
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	0038      	movs	r0, r7
 8009b70:	9908      	ldr	r1, [sp, #32]
 8009b72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009b74:	321a      	adds	r2, #26
 8009b76:	47a8      	blx	r5
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d100      	bne.n	8009b7e <_printf_float+0x3a2>
 8009b7c:	e68c      	b.n	8009898 <_printf_float+0xbc>
 8009b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b80:	3301      	adds	r3, #1
 8009b82:	930a      	str	r3, [sp, #40]	; 0x28
 8009b84:	e7e7      	b.n	8009b56 <_printf_float+0x37a>
 8009b86:	002a      	movs	r2, r5
 8009b88:	0038      	movs	r0, r7
 8009b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b8c:	9908      	ldr	r1, [sp, #32]
 8009b8e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009b90:	47b0      	blx	r6
 8009b92:	3001      	adds	r0, #1
 8009b94:	d1b9      	bne.n	8009b0a <_printf_float+0x32e>
 8009b96:	e67f      	b.n	8009898 <_printf_float+0xbc>
 8009b98:	0022      	movs	r2, r4
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	0038      	movs	r0, r7
 8009b9e:	9908      	ldr	r1, [sp, #32]
 8009ba0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009ba2:	321a      	adds	r2, #26
 8009ba4:	47b0      	blx	r6
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	d100      	bne.n	8009bac <_printf_float+0x3d0>
 8009baa:	e675      	b.n	8009898 <_printf_float+0xbc>
 8009bac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bae:	3301      	adds	r3, #1
 8009bb0:	930e      	str	r3, [sp, #56]	; 0x38
 8009bb2:	e7b0      	b.n	8009b16 <_printf_float+0x33a>
 8009bb4:	0038      	movs	r0, r7
 8009bb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bba:	9908      	ldr	r1, [sp, #32]
 8009bbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009bbe:	47b0      	blx	r6
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	d1b9      	bne.n	8009b38 <_printf_float+0x35c>
 8009bc4:	e668      	b.n	8009898 <_printf_float+0xbc>
 8009bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bc8:	0038      	movs	r0, r7
 8009bca:	18ea      	adds	r2, r5, r3
 8009bcc:	9908      	ldr	r1, [sp, #32]
 8009bce:	0033      	movs	r3, r6
 8009bd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009bd2:	47a8      	blx	r5
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	d1b9      	bne.n	8009b4c <_printf_float+0x370>
 8009bd8:	e65e      	b.n	8009898 <_printf_float+0xbc>
 8009bda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	dc02      	bgt.n	8009be6 <_printf_float+0x40a>
 8009be0:	2301      	movs	r3, #1
 8009be2:	421a      	tst	r2, r3
 8009be4:	d03a      	beq.n	8009c5c <_printf_float+0x480>
 8009be6:	2301      	movs	r3, #1
 8009be8:	002a      	movs	r2, r5
 8009bea:	0038      	movs	r0, r7
 8009bec:	9908      	ldr	r1, [sp, #32]
 8009bee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009bf0:	47b0      	blx	r6
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	d100      	bne.n	8009bf8 <_printf_float+0x41c>
 8009bf6:	e64f      	b.n	8009898 <_printf_float+0xbc>
 8009bf8:	0038      	movs	r0, r7
 8009bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bfe:	9908      	ldr	r1, [sp, #32]
 8009c00:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c02:	47b0      	blx	r6
 8009c04:	3001      	adds	r0, #1
 8009c06:	d100      	bne.n	8009c0a <_printf_float+0x42e>
 8009c08:	e646      	b.n	8009898 <_printf_float+0xbc>
 8009c0a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009c0c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009c0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c10:	2200      	movs	r2, #0
 8009c12:	001e      	movs	r6, r3
 8009c14:	2300      	movs	r3, #0
 8009c16:	f7f6 fc19 	bl	800044c <__aeabi_dcmpeq>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d11c      	bne.n	8009c58 <_printf_float+0x47c>
 8009c1e:	0033      	movs	r3, r6
 8009c20:	1c6a      	adds	r2, r5, #1
 8009c22:	3b01      	subs	r3, #1
 8009c24:	0038      	movs	r0, r7
 8009c26:	9908      	ldr	r1, [sp, #32]
 8009c28:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009c2a:	47a8      	blx	r5
 8009c2c:	3001      	adds	r0, #1
 8009c2e:	d10f      	bne.n	8009c50 <_printf_float+0x474>
 8009c30:	e632      	b.n	8009898 <_printf_float+0xbc>
 8009c32:	0022      	movs	r2, r4
 8009c34:	2301      	movs	r3, #1
 8009c36:	0038      	movs	r0, r7
 8009c38:	9908      	ldr	r1, [sp, #32]
 8009c3a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c3c:	321a      	adds	r2, #26
 8009c3e:	47b0      	blx	r6
 8009c40:	3001      	adds	r0, #1
 8009c42:	d100      	bne.n	8009c46 <_printf_float+0x46a>
 8009c44:	e628      	b.n	8009898 <_printf_float+0xbc>
 8009c46:	3501      	adds	r5, #1
 8009c48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	42ab      	cmp	r3, r5
 8009c4e:	dcf0      	bgt.n	8009c32 <_printf_float+0x456>
 8009c50:	0022      	movs	r2, r4
 8009c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c54:	3250      	adds	r2, #80	; 0x50
 8009c56:	e6c8      	b.n	80099ea <_printf_float+0x20e>
 8009c58:	2500      	movs	r5, #0
 8009c5a:	e7f5      	b.n	8009c48 <_printf_float+0x46c>
 8009c5c:	002a      	movs	r2, r5
 8009c5e:	e7e1      	b.n	8009c24 <_printf_float+0x448>
 8009c60:	0022      	movs	r2, r4
 8009c62:	2301      	movs	r3, #1
 8009c64:	0038      	movs	r0, r7
 8009c66:	9908      	ldr	r1, [sp, #32]
 8009c68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c6a:	3219      	adds	r2, #25
 8009c6c:	47b0      	blx	r6
 8009c6e:	3001      	adds	r0, #1
 8009c70:	d100      	bne.n	8009c74 <_printf_float+0x498>
 8009c72:	e611      	b.n	8009898 <_printf_float+0xbc>
 8009c74:	3501      	adds	r5, #1
 8009c76:	68e3      	ldr	r3, [r4, #12]
 8009c78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c7a:	1a9b      	subs	r3, r3, r2
 8009c7c:	42ab      	cmp	r3, r5
 8009c7e:	dcef      	bgt.n	8009c60 <_printf_float+0x484>
 8009c80:	e6e8      	b.n	8009a54 <_printf_float+0x278>
 8009c82:	2500      	movs	r5, #0
 8009c84:	e7f7      	b.n	8009c76 <_printf_float+0x49a>
 8009c86:	46c0      	nop			; (mov r8, r8)

08009c88 <_printf_common>:
 8009c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c8a:	0016      	movs	r6, r2
 8009c8c:	9301      	str	r3, [sp, #4]
 8009c8e:	688a      	ldr	r2, [r1, #8]
 8009c90:	690b      	ldr	r3, [r1, #16]
 8009c92:	000c      	movs	r4, r1
 8009c94:	9000      	str	r0, [sp, #0]
 8009c96:	4293      	cmp	r3, r2
 8009c98:	da00      	bge.n	8009c9c <_printf_common+0x14>
 8009c9a:	0013      	movs	r3, r2
 8009c9c:	0022      	movs	r2, r4
 8009c9e:	6033      	str	r3, [r6, #0]
 8009ca0:	3243      	adds	r2, #67	; 0x43
 8009ca2:	7812      	ldrb	r2, [r2, #0]
 8009ca4:	2a00      	cmp	r2, #0
 8009ca6:	d001      	beq.n	8009cac <_printf_common+0x24>
 8009ca8:	3301      	adds	r3, #1
 8009caa:	6033      	str	r3, [r6, #0]
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	069b      	lsls	r3, r3, #26
 8009cb0:	d502      	bpl.n	8009cb8 <_printf_common+0x30>
 8009cb2:	6833      	ldr	r3, [r6, #0]
 8009cb4:	3302      	adds	r3, #2
 8009cb6:	6033      	str	r3, [r6, #0]
 8009cb8:	6822      	ldr	r2, [r4, #0]
 8009cba:	2306      	movs	r3, #6
 8009cbc:	0015      	movs	r5, r2
 8009cbe:	401d      	ands	r5, r3
 8009cc0:	421a      	tst	r2, r3
 8009cc2:	d027      	beq.n	8009d14 <_printf_common+0x8c>
 8009cc4:	0023      	movs	r3, r4
 8009cc6:	3343      	adds	r3, #67	; 0x43
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	1e5a      	subs	r2, r3, #1
 8009ccc:	4193      	sbcs	r3, r2
 8009cce:	6822      	ldr	r2, [r4, #0]
 8009cd0:	0692      	lsls	r2, r2, #26
 8009cd2:	d430      	bmi.n	8009d36 <_printf_common+0xae>
 8009cd4:	0022      	movs	r2, r4
 8009cd6:	9901      	ldr	r1, [sp, #4]
 8009cd8:	9800      	ldr	r0, [sp, #0]
 8009cda:	9d08      	ldr	r5, [sp, #32]
 8009cdc:	3243      	adds	r2, #67	; 0x43
 8009cde:	47a8      	blx	r5
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	d025      	beq.n	8009d30 <_printf_common+0xa8>
 8009ce4:	2206      	movs	r2, #6
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	2500      	movs	r5, #0
 8009cea:	4013      	ands	r3, r2
 8009cec:	2b04      	cmp	r3, #4
 8009cee:	d105      	bne.n	8009cfc <_printf_common+0x74>
 8009cf0:	6833      	ldr	r3, [r6, #0]
 8009cf2:	68e5      	ldr	r5, [r4, #12]
 8009cf4:	1aed      	subs	r5, r5, r3
 8009cf6:	43eb      	mvns	r3, r5
 8009cf8:	17db      	asrs	r3, r3, #31
 8009cfa:	401d      	ands	r5, r3
 8009cfc:	68a3      	ldr	r3, [r4, #8]
 8009cfe:	6922      	ldr	r2, [r4, #16]
 8009d00:	4293      	cmp	r3, r2
 8009d02:	dd01      	ble.n	8009d08 <_printf_common+0x80>
 8009d04:	1a9b      	subs	r3, r3, r2
 8009d06:	18ed      	adds	r5, r5, r3
 8009d08:	2600      	movs	r6, #0
 8009d0a:	42b5      	cmp	r5, r6
 8009d0c:	d120      	bne.n	8009d50 <_printf_common+0xc8>
 8009d0e:	2000      	movs	r0, #0
 8009d10:	e010      	b.n	8009d34 <_printf_common+0xac>
 8009d12:	3501      	adds	r5, #1
 8009d14:	68e3      	ldr	r3, [r4, #12]
 8009d16:	6832      	ldr	r2, [r6, #0]
 8009d18:	1a9b      	subs	r3, r3, r2
 8009d1a:	42ab      	cmp	r3, r5
 8009d1c:	ddd2      	ble.n	8009cc4 <_printf_common+0x3c>
 8009d1e:	0022      	movs	r2, r4
 8009d20:	2301      	movs	r3, #1
 8009d22:	9901      	ldr	r1, [sp, #4]
 8009d24:	9800      	ldr	r0, [sp, #0]
 8009d26:	9f08      	ldr	r7, [sp, #32]
 8009d28:	3219      	adds	r2, #25
 8009d2a:	47b8      	blx	r7
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d1f0      	bne.n	8009d12 <_printf_common+0x8a>
 8009d30:	2001      	movs	r0, #1
 8009d32:	4240      	negs	r0, r0
 8009d34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d36:	2030      	movs	r0, #48	; 0x30
 8009d38:	18e1      	adds	r1, r4, r3
 8009d3a:	3143      	adds	r1, #67	; 0x43
 8009d3c:	7008      	strb	r0, [r1, #0]
 8009d3e:	0021      	movs	r1, r4
 8009d40:	1c5a      	adds	r2, r3, #1
 8009d42:	3145      	adds	r1, #69	; 0x45
 8009d44:	7809      	ldrb	r1, [r1, #0]
 8009d46:	18a2      	adds	r2, r4, r2
 8009d48:	3243      	adds	r2, #67	; 0x43
 8009d4a:	3302      	adds	r3, #2
 8009d4c:	7011      	strb	r1, [r2, #0]
 8009d4e:	e7c1      	b.n	8009cd4 <_printf_common+0x4c>
 8009d50:	0022      	movs	r2, r4
 8009d52:	2301      	movs	r3, #1
 8009d54:	9901      	ldr	r1, [sp, #4]
 8009d56:	9800      	ldr	r0, [sp, #0]
 8009d58:	9f08      	ldr	r7, [sp, #32]
 8009d5a:	321a      	adds	r2, #26
 8009d5c:	47b8      	blx	r7
 8009d5e:	3001      	adds	r0, #1
 8009d60:	d0e6      	beq.n	8009d30 <_printf_common+0xa8>
 8009d62:	3601      	adds	r6, #1
 8009d64:	e7d1      	b.n	8009d0a <_printf_common+0x82>
	...

08009d68 <_printf_i>:
 8009d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d6a:	b08b      	sub	sp, #44	; 0x2c
 8009d6c:	9206      	str	r2, [sp, #24]
 8009d6e:	000a      	movs	r2, r1
 8009d70:	3243      	adds	r2, #67	; 0x43
 8009d72:	9307      	str	r3, [sp, #28]
 8009d74:	9005      	str	r0, [sp, #20]
 8009d76:	9204      	str	r2, [sp, #16]
 8009d78:	7e0a      	ldrb	r2, [r1, #24]
 8009d7a:	000c      	movs	r4, r1
 8009d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d7e:	2a78      	cmp	r2, #120	; 0x78
 8009d80:	d809      	bhi.n	8009d96 <_printf_i+0x2e>
 8009d82:	2a62      	cmp	r2, #98	; 0x62
 8009d84:	d80b      	bhi.n	8009d9e <_printf_i+0x36>
 8009d86:	2a00      	cmp	r2, #0
 8009d88:	d100      	bne.n	8009d8c <_printf_i+0x24>
 8009d8a:	e0be      	b.n	8009f0a <_printf_i+0x1a2>
 8009d8c:	497c      	ldr	r1, [pc, #496]	; (8009f80 <_printf_i+0x218>)
 8009d8e:	9103      	str	r1, [sp, #12]
 8009d90:	2a58      	cmp	r2, #88	; 0x58
 8009d92:	d100      	bne.n	8009d96 <_printf_i+0x2e>
 8009d94:	e093      	b.n	8009ebe <_printf_i+0x156>
 8009d96:	0026      	movs	r6, r4
 8009d98:	3642      	adds	r6, #66	; 0x42
 8009d9a:	7032      	strb	r2, [r6, #0]
 8009d9c:	e022      	b.n	8009de4 <_printf_i+0x7c>
 8009d9e:	0010      	movs	r0, r2
 8009da0:	3863      	subs	r0, #99	; 0x63
 8009da2:	2815      	cmp	r0, #21
 8009da4:	d8f7      	bhi.n	8009d96 <_printf_i+0x2e>
 8009da6:	f7f6 f9c1 	bl	800012c <__gnu_thumb1_case_shi>
 8009daa:	0016      	.short	0x0016
 8009dac:	fff6001f 	.word	0xfff6001f
 8009db0:	fff6fff6 	.word	0xfff6fff6
 8009db4:	001ffff6 	.word	0x001ffff6
 8009db8:	fff6fff6 	.word	0xfff6fff6
 8009dbc:	fff6fff6 	.word	0xfff6fff6
 8009dc0:	003600a3 	.word	0x003600a3
 8009dc4:	fff60083 	.word	0xfff60083
 8009dc8:	00b4fff6 	.word	0x00b4fff6
 8009dcc:	0036fff6 	.word	0x0036fff6
 8009dd0:	fff6fff6 	.word	0xfff6fff6
 8009dd4:	0087      	.short	0x0087
 8009dd6:	0026      	movs	r6, r4
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	3642      	adds	r6, #66	; 0x42
 8009ddc:	1d11      	adds	r1, r2, #4
 8009dde:	6019      	str	r1, [r3, #0]
 8009de0:	6813      	ldr	r3, [r2, #0]
 8009de2:	7033      	strb	r3, [r6, #0]
 8009de4:	2301      	movs	r3, #1
 8009de6:	e0a2      	b.n	8009f2e <_printf_i+0x1c6>
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	6809      	ldr	r1, [r1, #0]
 8009dec:	1d02      	adds	r2, r0, #4
 8009dee:	060d      	lsls	r5, r1, #24
 8009df0:	d50b      	bpl.n	8009e0a <_printf_i+0xa2>
 8009df2:	6805      	ldr	r5, [r0, #0]
 8009df4:	601a      	str	r2, [r3, #0]
 8009df6:	2d00      	cmp	r5, #0
 8009df8:	da03      	bge.n	8009e02 <_printf_i+0x9a>
 8009dfa:	232d      	movs	r3, #45	; 0x2d
 8009dfc:	9a04      	ldr	r2, [sp, #16]
 8009dfe:	426d      	negs	r5, r5
 8009e00:	7013      	strb	r3, [r2, #0]
 8009e02:	4b5f      	ldr	r3, [pc, #380]	; (8009f80 <_printf_i+0x218>)
 8009e04:	270a      	movs	r7, #10
 8009e06:	9303      	str	r3, [sp, #12]
 8009e08:	e01b      	b.n	8009e42 <_printf_i+0xda>
 8009e0a:	6805      	ldr	r5, [r0, #0]
 8009e0c:	601a      	str	r2, [r3, #0]
 8009e0e:	0649      	lsls	r1, r1, #25
 8009e10:	d5f1      	bpl.n	8009df6 <_printf_i+0x8e>
 8009e12:	b22d      	sxth	r5, r5
 8009e14:	e7ef      	b.n	8009df6 <_printf_i+0x8e>
 8009e16:	680d      	ldr	r5, [r1, #0]
 8009e18:	6819      	ldr	r1, [r3, #0]
 8009e1a:	1d08      	adds	r0, r1, #4
 8009e1c:	6018      	str	r0, [r3, #0]
 8009e1e:	062e      	lsls	r6, r5, #24
 8009e20:	d501      	bpl.n	8009e26 <_printf_i+0xbe>
 8009e22:	680d      	ldr	r5, [r1, #0]
 8009e24:	e003      	b.n	8009e2e <_printf_i+0xc6>
 8009e26:	066d      	lsls	r5, r5, #25
 8009e28:	d5fb      	bpl.n	8009e22 <_printf_i+0xba>
 8009e2a:	680d      	ldr	r5, [r1, #0]
 8009e2c:	b2ad      	uxth	r5, r5
 8009e2e:	4b54      	ldr	r3, [pc, #336]	; (8009f80 <_printf_i+0x218>)
 8009e30:	2708      	movs	r7, #8
 8009e32:	9303      	str	r3, [sp, #12]
 8009e34:	2a6f      	cmp	r2, #111	; 0x6f
 8009e36:	d000      	beq.n	8009e3a <_printf_i+0xd2>
 8009e38:	3702      	adds	r7, #2
 8009e3a:	0023      	movs	r3, r4
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	3343      	adds	r3, #67	; 0x43
 8009e40:	701a      	strb	r2, [r3, #0]
 8009e42:	6863      	ldr	r3, [r4, #4]
 8009e44:	60a3      	str	r3, [r4, #8]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	db03      	blt.n	8009e52 <_printf_i+0xea>
 8009e4a:	2104      	movs	r1, #4
 8009e4c:	6822      	ldr	r2, [r4, #0]
 8009e4e:	438a      	bics	r2, r1
 8009e50:	6022      	str	r2, [r4, #0]
 8009e52:	2d00      	cmp	r5, #0
 8009e54:	d102      	bne.n	8009e5c <_printf_i+0xf4>
 8009e56:	9e04      	ldr	r6, [sp, #16]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00c      	beq.n	8009e76 <_printf_i+0x10e>
 8009e5c:	9e04      	ldr	r6, [sp, #16]
 8009e5e:	0028      	movs	r0, r5
 8009e60:	0039      	movs	r1, r7
 8009e62:	f7f6 f9f3 	bl	800024c <__aeabi_uidivmod>
 8009e66:	9b03      	ldr	r3, [sp, #12]
 8009e68:	3e01      	subs	r6, #1
 8009e6a:	5c5b      	ldrb	r3, [r3, r1]
 8009e6c:	7033      	strb	r3, [r6, #0]
 8009e6e:	002b      	movs	r3, r5
 8009e70:	0005      	movs	r5, r0
 8009e72:	429f      	cmp	r7, r3
 8009e74:	d9f3      	bls.n	8009e5e <_printf_i+0xf6>
 8009e76:	2f08      	cmp	r7, #8
 8009e78:	d109      	bne.n	8009e8e <_printf_i+0x126>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	07db      	lsls	r3, r3, #31
 8009e7e:	d506      	bpl.n	8009e8e <_printf_i+0x126>
 8009e80:	6862      	ldr	r2, [r4, #4]
 8009e82:	6923      	ldr	r3, [r4, #16]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	dc02      	bgt.n	8009e8e <_printf_i+0x126>
 8009e88:	2330      	movs	r3, #48	; 0x30
 8009e8a:	3e01      	subs	r6, #1
 8009e8c:	7033      	strb	r3, [r6, #0]
 8009e8e:	9b04      	ldr	r3, [sp, #16]
 8009e90:	1b9b      	subs	r3, r3, r6
 8009e92:	6123      	str	r3, [r4, #16]
 8009e94:	9b07      	ldr	r3, [sp, #28]
 8009e96:	0021      	movs	r1, r4
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	9805      	ldr	r0, [sp, #20]
 8009e9c:	9b06      	ldr	r3, [sp, #24]
 8009e9e:	aa09      	add	r2, sp, #36	; 0x24
 8009ea0:	f7ff fef2 	bl	8009c88 <_printf_common>
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	d147      	bne.n	8009f38 <_printf_i+0x1d0>
 8009ea8:	2001      	movs	r0, #1
 8009eaa:	4240      	negs	r0, r0
 8009eac:	b00b      	add	sp, #44	; 0x2c
 8009eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eb0:	2220      	movs	r2, #32
 8009eb2:	6809      	ldr	r1, [r1, #0]
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	6022      	str	r2, [r4, #0]
 8009eb8:	2278      	movs	r2, #120	; 0x78
 8009eba:	4932      	ldr	r1, [pc, #200]	; (8009f84 <_printf_i+0x21c>)
 8009ebc:	9103      	str	r1, [sp, #12]
 8009ebe:	0021      	movs	r1, r4
 8009ec0:	3145      	adds	r1, #69	; 0x45
 8009ec2:	700a      	strb	r2, [r1, #0]
 8009ec4:	6819      	ldr	r1, [r3, #0]
 8009ec6:	6822      	ldr	r2, [r4, #0]
 8009ec8:	c920      	ldmia	r1!, {r5}
 8009eca:	0610      	lsls	r0, r2, #24
 8009ecc:	d402      	bmi.n	8009ed4 <_printf_i+0x16c>
 8009ece:	0650      	lsls	r0, r2, #25
 8009ed0:	d500      	bpl.n	8009ed4 <_printf_i+0x16c>
 8009ed2:	b2ad      	uxth	r5, r5
 8009ed4:	6019      	str	r1, [r3, #0]
 8009ed6:	07d3      	lsls	r3, r2, #31
 8009ed8:	d502      	bpl.n	8009ee0 <_printf_i+0x178>
 8009eda:	2320      	movs	r3, #32
 8009edc:	4313      	orrs	r3, r2
 8009ede:	6023      	str	r3, [r4, #0]
 8009ee0:	2710      	movs	r7, #16
 8009ee2:	2d00      	cmp	r5, #0
 8009ee4:	d1a9      	bne.n	8009e3a <_printf_i+0xd2>
 8009ee6:	2220      	movs	r2, #32
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	4393      	bics	r3, r2
 8009eec:	6023      	str	r3, [r4, #0]
 8009eee:	e7a4      	b.n	8009e3a <_printf_i+0xd2>
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	680d      	ldr	r5, [r1, #0]
 8009ef4:	1d10      	adds	r0, r2, #4
 8009ef6:	6949      	ldr	r1, [r1, #20]
 8009ef8:	6018      	str	r0, [r3, #0]
 8009efa:	6813      	ldr	r3, [r2, #0]
 8009efc:	062e      	lsls	r6, r5, #24
 8009efe:	d501      	bpl.n	8009f04 <_printf_i+0x19c>
 8009f00:	6019      	str	r1, [r3, #0]
 8009f02:	e002      	b.n	8009f0a <_printf_i+0x1a2>
 8009f04:	066d      	lsls	r5, r5, #25
 8009f06:	d5fb      	bpl.n	8009f00 <_printf_i+0x198>
 8009f08:	8019      	strh	r1, [r3, #0]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	9e04      	ldr	r6, [sp, #16]
 8009f0e:	6123      	str	r3, [r4, #16]
 8009f10:	e7c0      	b.n	8009e94 <_printf_i+0x12c>
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	1d11      	adds	r1, r2, #4
 8009f16:	6019      	str	r1, [r3, #0]
 8009f18:	6816      	ldr	r6, [r2, #0]
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	0030      	movs	r0, r6
 8009f1e:	6862      	ldr	r2, [r4, #4]
 8009f20:	f000 fca9 	bl	800a876 <memchr>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d001      	beq.n	8009f2c <_printf_i+0x1c4>
 8009f28:	1b80      	subs	r0, r0, r6
 8009f2a:	6060      	str	r0, [r4, #4]
 8009f2c:	6863      	ldr	r3, [r4, #4]
 8009f2e:	6123      	str	r3, [r4, #16]
 8009f30:	2300      	movs	r3, #0
 8009f32:	9a04      	ldr	r2, [sp, #16]
 8009f34:	7013      	strb	r3, [r2, #0]
 8009f36:	e7ad      	b.n	8009e94 <_printf_i+0x12c>
 8009f38:	0032      	movs	r2, r6
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	9906      	ldr	r1, [sp, #24]
 8009f3e:	9805      	ldr	r0, [sp, #20]
 8009f40:	9d07      	ldr	r5, [sp, #28]
 8009f42:	47a8      	blx	r5
 8009f44:	3001      	adds	r0, #1
 8009f46:	d0af      	beq.n	8009ea8 <_printf_i+0x140>
 8009f48:	6823      	ldr	r3, [r4, #0]
 8009f4a:	079b      	lsls	r3, r3, #30
 8009f4c:	d415      	bmi.n	8009f7a <_printf_i+0x212>
 8009f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f50:	68e0      	ldr	r0, [r4, #12]
 8009f52:	4298      	cmp	r0, r3
 8009f54:	daaa      	bge.n	8009eac <_printf_i+0x144>
 8009f56:	0018      	movs	r0, r3
 8009f58:	e7a8      	b.n	8009eac <_printf_i+0x144>
 8009f5a:	0022      	movs	r2, r4
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	9906      	ldr	r1, [sp, #24]
 8009f60:	9805      	ldr	r0, [sp, #20]
 8009f62:	9e07      	ldr	r6, [sp, #28]
 8009f64:	3219      	adds	r2, #25
 8009f66:	47b0      	blx	r6
 8009f68:	3001      	adds	r0, #1
 8009f6a:	d09d      	beq.n	8009ea8 <_printf_i+0x140>
 8009f6c:	3501      	adds	r5, #1
 8009f6e:	68e3      	ldr	r3, [r4, #12]
 8009f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f72:	1a9b      	subs	r3, r3, r2
 8009f74:	42ab      	cmp	r3, r5
 8009f76:	dcf0      	bgt.n	8009f5a <_printf_i+0x1f2>
 8009f78:	e7e9      	b.n	8009f4e <_printf_i+0x1e6>
 8009f7a:	2500      	movs	r5, #0
 8009f7c:	e7f7      	b.n	8009f6e <_printf_i+0x206>
 8009f7e:	46c0      	nop			; (mov r8, r8)
 8009f80:	0800d4a3 	.word	0x0800d4a3
 8009f84:	0800d4b4 	.word	0x0800d4b4

08009f88 <_scanf_float>:
 8009f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f8a:	b08b      	sub	sp, #44	; 0x2c
 8009f8c:	0016      	movs	r6, r2
 8009f8e:	9002      	str	r0, [sp, #8]
 8009f90:	22ae      	movs	r2, #174	; 0xae
 8009f92:	2000      	movs	r0, #0
 8009f94:	9307      	str	r3, [sp, #28]
 8009f96:	688b      	ldr	r3, [r1, #8]
 8009f98:	000f      	movs	r7, r1
 8009f9a:	1e59      	subs	r1, r3, #1
 8009f9c:	0052      	lsls	r2, r2, #1
 8009f9e:	9006      	str	r0, [sp, #24]
 8009fa0:	4291      	cmp	r1, r2
 8009fa2:	d905      	bls.n	8009fb0 <_scanf_float+0x28>
 8009fa4:	3b5e      	subs	r3, #94	; 0x5e
 8009fa6:	3bff      	subs	r3, #255	; 0xff
 8009fa8:	9306      	str	r3, [sp, #24]
 8009faa:	235e      	movs	r3, #94	; 0x5e
 8009fac:	33ff      	adds	r3, #255	; 0xff
 8009fae:	60bb      	str	r3, [r7, #8]
 8009fb0:	23f0      	movs	r3, #240	; 0xf0
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	00db      	lsls	r3, r3, #3
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	603b      	str	r3, [r7, #0]
 8009fba:	003b      	movs	r3, r7
 8009fbc:	2400      	movs	r4, #0
 8009fbe:	331c      	adds	r3, #28
 8009fc0:	001d      	movs	r5, r3
 8009fc2:	9304      	str	r3, [sp, #16]
 8009fc4:	9403      	str	r4, [sp, #12]
 8009fc6:	9409      	str	r4, [sp, #36]	; 0x24
 8009fc8:	9408      	str	r4, [sp, #32]
 8009fca:	9401      	str	r4, [sp, #4]
 8009fcc:	9405      	str	r4, [sp, #20]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	2a00      	cmp	r2, #0
 8009fd2:	d00a      	beq.n	8009fea <_scanf_float+0x62>
 8009fd4:	6833      	ldr	r3, [r6, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b4e      	cmp	r3, #78	; 0x4e
 8009fda:	d844      	bhi.n	800a066 <_scanf_float+0xde>
 8009fdc:	0018      	movs	r0, r3
 8009fde:	2b40      	cmp	r3, #64	; 0x40
 8009fe0:	d82c      	bhi.n	800a03c <_scanf_float+0xb4>
 8009fe2:	382b      	subs	r0, #43	; 0x2b
 8009fe4:	b2c1      	uxtb	r1, r0
 8009fe6:	290e      	cmp	r1, #14
 8009fe8:	d92a      	bls.n	800a040 <_scanf_float+0xb8>
 8009fea:	9b01      	ldr	r3, [sp, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d003      	beq.n	8009ff8 <_scanf_float+0x70>
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	4aa3      	ldr	r2, [pc, #652]	; (800a280 <_scanf_float+0x2f8>)
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	603b      	str	r3, [r7, #0]
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d900      	bls.n	800a002 <_scanf_float+0x7a>
 800a000:	e0f9      	b.n	800a1f6 <_scanf_float+0x26e>
 800a002:	24be      	movs	r4, #190	; 0xbe
 800a004:	0064      	lsls	r4, r4, #1
 800a006:	9b04      	ldr	r3, [sp, #16]
 800a008:	429d      	cmp	r5, r3
 800a00a:	d900      	bls.n	800a00e <_scanf_float+0x86>
 800a00c:	e0e9      	b.n	800a1e2 <_scanf_float+0x25a>
 800a00e:	2301      	movs	r3, #1
 800a010:	9303      	str	r3, [sp, #12]
 800a012:	e183      	b.n	800a31c <_scanf_float+0x394>
 800a014:	0018      	movs	r0, r3
 800a016:	3861      	subs	r0, #97	; 0x61
 800a018:	280d      	cmp	r0, #13
 800a01a:	d8e6      	bhi.n	8009fea <_scanf_float+0x62>
 800a01c:	f7f6 f886 	bl	800012c <__gnu_thumb1_case_shi>
 800a020:	ffe50083 	.word	0xffe50083
 800a024:	ffe5ffe5 	.word	0xffe5ffe5
 800a028:	00a200b6 	.word	0x00a200b6
 800a02c:	ffe5ffe5 	.word	0xffe5ffe5
 800a030:	ffe50089 	.word	0xffe50089
 800a034:	ffe5ffe5 	.word	0xffe5ffe5
 800a038:	0065ffe5 	.word	0x0065ffe5
 800a03c:	3841      	subs	r0, #65	; 0x41
 800a03e:	e7eb      	b.n	800a018 <_scanf_float+0x90>
 800a040:	280e      	cmp	r0, #14
 800a042:	d8d2      	bhi.n	8009fea <_scanf_float+0x62>
 800a044:	f7f6 f872 	bl	800012c <__gnu_thumb1_case_shi>
 800a048:	ffd1004b 	.word	0xffd1004b
 800a04c:	0098004b 	.word	0x0098004b
 800a050:	0020ffd1 	.word	0x0020ffd1
 800a054:	00400040 	.word	0x00400040
 800a058:	00400040 	.word	0x00400040
 800a05c:	00400040 	.word	0x00400040
 800a060:	00400040 	.word	0x00400040
 800a064:	0040      	.short	0x0040
 800a066:	2b6e      	cmp	r3, #110	; 0x6e
 800a068:	d809      	bhi.n	800a07e <_scanf_float+0xf6>
 800a06a:	2b60      	cmp	r3, #96	; 0x60
 800a06c:	d8d2      	bhi.n	800a014 <_scanf_float+0x8c>
 800a06e:	2b54      	cmp	r3, #84	; 0x54
 800a070:	d07d      	beq.n	800a16e <_scanf_float+0x1e6>
 800a072:	2b59      	cmp	r3, #89	; 0x59
 800a074:	d1b9      	bne.n	8009fea <_scanf_float+0x62>
 800a076:	2c07      	cmp	r4, #7
 800a078:	d1b7      	bne.n	8009fea <_scanf_float+0x62>
 800a07a:	2408      	movs	r4, #8
 800a07c:	e02c      	b.n	800a0d8 <_scanf_float+0x150>
 800a07e:	2b74      	cmp	r3, #116	; 0x74
 800a080:	d075      	beq.n	800a16e <_scanf_float+0x1e6>
 800a082:	2b79      	cmp	r3, #121	; 0x79
 800a084:	d0f7      	beq.n	800a076 <_scanf_float+0xee>
 800a086:	e7b0      	b.n	8009fea <_scanf_float+0x62>
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	05c8      	lsls	r0, r1, #23
 800a08c:	d51c      	bpl.n	800a0c8 <_scanf_float+0x140>
 800a08e:	2380      	movs	r3, #128	; 0x80
 800a090:	4399      	bics	r1, r3
 800a092:	9b01      	ldr	r3, [sp, #4]
 800a094:	6039      	str	r1, [r7, #0]
 800a096:	3301      	adds	r3, #1
 800a098:	9301      	str	r3, [sp, #4]
 800a09a:	9b06      	ldr	r3, [sp, #24]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d003      	beq.n	800a0a8 <_scanf_float+0x120>
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	3201      	adds	r2, #1
 800a0a4:	9306      	str	r3, [sp, #24]
 800a0a6:	60ba      	str	r2, [r7, #8]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	60bb      	str	r3, [r7, #8]
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	613b      	str	r3, [r7, #16]
 800a0b4:	6873      	ldr	r3, [r6, #4]
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	6073      	str	r3, [r6, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	dc00      	bgt.n	800a0c0 <_scanf_float+0x138>
 800a0be:	e086      	b.n	800a1ce <_scanf_float+0x246>
 800a0c0:	6833      	ldr	r3, [r6, #0]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	6033      	str	r3, [r6, #0]
 800a0c6:	e782      	b.n	8009fce <_scanf_float+0x46>
 800a0c8:	9a03      	ldr	r2, [sp, #12]
 800a0ca:	1912      	adds	r2, r2, r4
 800a0cc:	2a00      	cmp	r2, #0
 800a0ce:	d18c      	bne.n	8009fea <_scanf_float+0x62>
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	496c      	ldr	r1, [pc, #432]	; (800a284 <_scanf_float+0x2fc>)
 800a0d4:	400a      	ands	r2, r1
 800a0d6:	603a      	str	r2, [r7, #0]
 800a0d8:	702b      	strb	r3, [r5, #0]
 800a0da:	3501      	adds	r5, #1
 800a0dc:	e7e4      	b.n	800a0a8 <_scanf_float+0x120>
 800a0de:	2180      	movs	r1, #128	; 0x80
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	420a      	tst	r2, r1
 800a0e4:	d081      	beq.n	8009fea <_scanf_float+0x62>
 800a0e6:	438a      	bics	r2, r1
 800a0e8:	e7f5      	b.n	800a0d6 <_scanf_float+0x14e>
 800a0ea:	9a03      	ldr	r2, [sp, #12]
 800a0ec:	2a00      	cmp	r2, #0
 800a0ee:	d10f      	bne.n	800a110 <_scanf_float+0x188>
 800a0f0:	9a01      	ldr	r2, [sp, #4]
 800a0f2:	2a00      	cmp	r2, #0
 800a0f4:	d10f      	bne.n	800a116 <_scanf_float+0x18e>
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	21e0      	movs	r1, #224	; 0xe0
 800a0fa:	0010      	movs	r0, r2
 800a0fc:	00c9      	lsls	r1, r1, #3
 800a0fe:	4008      	ands	r0, r1
 800a100:	4288      	cmp	r0, r1
 800a102:	d108      	bne.n	800a116 <_scanf_float+0x18e>
 800a104:	4960      	ldr	r1, [pc, #384]	; (800a288 <_scanf_float+0x300>)
 800a106:	400a      	ands	r2, r1
 800a108:	603a      	str	r2, [r7, #0]
 800a10a:	2201      	movs	r2, #1
 800a10c:	9203      	str	r2, [sp, #12]
 800a10e:	e7e3      	b.n	800a0d8 <_scanf_float+0x150>
 800a110:	9a03      	ldr	r2, [sp, #12]
 800a112:	2a02      	cmp	r2, #2
 800a114:	d059      	beq.n	800a1ca <_scanf_float+0x242>
 800a116:	2c01      	cmp	r4, #1
 800a118:	d002      	beq.n	800a120 <_scanf_float+0x198>
 800a11a:	2c04      	cmp	r4, #4
 800a11c:	d000      	beq.n	800a120 <_scanf_float+0x198>
 800a11e:	e764      	b.n	8009fea <_scanf_float+0x62>
 800a120:	3401      	adds	r4, #1
 800a122:	b2e4      	uxtb	r4, r4
 800a124:	e7d8      	b.n	800a0d8 <_scanf_float+0x150>
 800a126:	9a03      	ldr	r2, [sp, #12]
 800a128:	2a01      	cmp	r2, #1
 800a12a:	d000      	beq.n	800a12e <_scanf_float+0x1a6>
 800a12c:	e75d      	b.n	8009fea <_scanf_float+0x62>
 800a12e:	2202      	movs	r2, #2
 800a130:	e7ec      	b.n	800a10c <_scanf_float+0x184>
 800a132:	2c00      	cmp	r4, #0
 800a134:	d110      	bne.n	800a158 <_scanf_float+0x1d0>
 800a136:	9a01      	ldr	r2, [sp, #4]
 800a138:	2a00      	cmp	r2, #0
 800a13a:	d000      	beq.n	800a13e <_scanf_float+0x1b6>
 800a13c:	e758      	b.n	8009ff0 <_scanf_float+0x68>
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	21e0      	movs	r1, #224	; 0xe0
 800a142:	0010      	movs	r0, r2
 800a144:	00c9      	lsls	r1, r1, #3
 800a146:	4008      	ands	r0, r1
 800a148:	4288      	cmp	r0, r1
 800a14a:	d000      	beq.n	800a14e <_scanf_float+0x1c6>
 800a14c:	e754      	b.n	8009ff8 <_scanf_float+0x70>
 800a14e:	494e      	ldr	r1, [pc, #312]	; (800a288 <_scanf_float+0x300>)
 800a150:	3401      	adds	r4, #1
 800a152:	400a      	ands	r2, r1
 800a154:	603a      	str	r2, [r7, #0]
 800a156:	e7bf      	b.n	800a0d8 <_scanf_float+0x150>
 800a158:	21fd      	movs	r1, #253	; 0xfd
 800a15a:	1ee2      	subs	r2, r4, #3
 800a15c:	420a      	tst	r2, r1
 800a15e:	d000      	beq.n	800a162 <_scanf_float+0x1da>
 800a160:	e743      	b.n	8009fea <_scanf_float+0x62>
 800a162:	e7dd      	b.n	800a120 <_scanf_float+0x198>
 800a164:	2c02      	cmp	r4, #2
 800a166:	d000      	beq.n	800a16a <_scanf_float+0x1e2>
 800a168:	e73f      	b.n	8009fea <_scanf_float+0x62>
 800a16a:	2403      	movs	r4, #3
 800a16c:	e7b4      	b.n	800a0d8 <_scanf_float+0x150>
 800a16e:	2c06      	cmp	r4, #6
 800a170:	d000      	beq.n	800a174 <_scanf_float+0x1ec>
 800a172:	e73a      	b.n	8009fea <_scanf_float+0x62>
 800a174:	2407      	movs	r4, #7
 800a176:	e7af      	b.n	800a0d8 <_scanf_float+0x150>
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	0591      	lsls	r1, r2, #22
 800a17c:	d400      	bmi.n	800a180 <_scanf_float+0x1f8>
 800a17e:	e734      	b.n	8009fea <_scanf_float+0x62>
 800a180:	4942      	ldr	r1, [pc, #264]	; (800a28c <_scanf_float+0x304>)
 800a182:	400a      	ands	r2, r1
 800a184:	603a      	str	r2, [r7, #0]
 800a186:	9a01      	ldr	r2, [sp, #4]
 800a188:	9205      	str	r2, [sp, #20]
 800a18a:	e7a5      	b.n	800a0d8 <_scanf_float+0x150>
 800a18c:	21a0      	movs	r1, #160	; 0xa0
 800a18e:	2080      	movs	r0, #128	; 0x80
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	00c9      	lsls	r1, r1, #3
 800a194:	4011      	ands	r1, r2
 800a196:	00c0      	lsls	r0, r0, #3
 800a198:	4281      	cmp	r1, r0
 800a19a:	d006      	beq.n	800a1aa <_scanf_float+0x222>
 800a19c:	4202      	tst	r2, r0
 800a19e:	d100      	bne.n	800a1a2 <_scanf_float+0x21a>
 800a1a0:	e723      	b.n	8009fea <_scanf_float+0x62>
 800a1a2:	9901      	ldr	r1, [sp, #4]
 800a1a4:	2900      	cmp	r1, #0
 800a1a6:	d100      	bne.n	800a1aa <_scanf_float+0x222>
 800a1a8:	e726      	b.n	8009ff8 <_scanf_float+0x70>
 800a1aa:	0591      	lsls	r1, r2, #22
 800a1ac:	d404      	bmi.n	800a1b8 <_scanf_float+0x230>
 800a1ae:	9901      	ldr	r1, [sp, #4]
 800a1b0:	9805      	ldr	r0, [sp, #20]
 800a1b2:	9509      	str	r5, [sp, #36]	; 0x24
 800a1b4:	1a09      	subs	r1, r1, r0
 800a1b6:	9108      	str	r1, [sp, #32]
 800a1b8:	4933      	ldr	r1, [pc, #204]	; (800a288 <_scanf_float+0x300>)
 800a1ba:	400a      	ands	r2, r1
 800a1bc:	21c0      	movs	r1, #192	; 0xc0
 800a1be:	0049      	lsls	r1, r1, #1
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	603a      	str	r2, [r7, #0]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	9201      	str	r2, [sp, #4]
 800a1c8:	e786      	b.n	800a0d8 <_scanf_float+0x150>
 800a1ca:	2203      	movs	r2, #3
 800a1cc:	e79e      	b.n	800a10c <_scanf_float+0x184>
 800a1ce:	23c0      	movs	r3, #192	; 0xc0
 800a1d0:	005b      	lsls	r3, r3, #1
 800a1d2:	0031      	movs	r1, r6
 800a1d4:	58fb      	ldr	r3, [r7, r3]
 800a1d6:	9802      	ldr	r0, [sp, #8]
 800a1d8:	4798      	blx	r3
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	d100      	bne.n	800a1e0 <_scanf_float+0x258>
 800a1de:	e6f6      	b.n	8009fce <_scanf_float+0x46>
 800a1e0:	e703      	b.n	8009fea <_scanf_float+0x62>
 800a1e2:	3d01      	subs	r5, #1
 800a1e4:	593b      	ldr	r3, [r7, r4]
 800a1e6:	0032      	movs	r2, r6
 800a1e8:	7829      	ldrb	r1, [r5, #0]
 800a1ea:	9802      	ldr	r0, [sp, #8]
 800a1ec:	4798      	blx	r3
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	613b      	str	r3, [r7, #16]
 800a1f4:	e707      	b.n	800a006 <_scanf_float+0x7e>
 800a1f6:	1e63      	subs	r3, r4, #1
 800a1f8:	2b06      	cmp	r3, #6
 800a1fa:	d80e      	bhi.n	800a21a <_scanf_float+0x292>
 800a1fc:	9503      	str	r5, [sp, #12]
 800a1fe:	2c02      	cmp	r4, #2
 800a200:	d920      	bls.n	800a244 <_scanf_float+0x2bc>
 800a202:	1b63      	subs	r3, r4, r5
 800a204:	b2db      	uxtb	r3, r3
 800a206:	9306      	str	r3, [sp, #24]
 800a208:	9b03      	ldr	r3, [sp, #12]
 800a20a:	9a06      	ldr	r2, [sp, #24]
 800a20c:	189b      	adds	r3, r3, r2
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b03      	cmp	r3, #3
 800a212:	d827      	bhi.n	800a264 <_scanf_float+0x2dc>
 800a214:	3c03      	subs	r4, #3
 800a216:	b2e4      	uxtb	r4, r4
 800a218:	1b2d      	subs	r5, r5, r4
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	05da      	lsls	r2, r3, #23
 800a21e:	d552      	bpl.n	800a2c6 <_scanf_float+0x33e>
 800a220:	055b      	lsls	r3, r3, #21
 800a222:	d535      	bpl.n	800a290 <_scanf_float+0x308>
 800a224:	24be      	movs	r4, #190	; 0xbe
 800a226:	0064      	lsls	r4, r4, #1
 800a228:	9b04      	ldr	r3, [sp, #16]
 800a22a:	429d      	cmp	r5, r3
 800a22c:	d800      	bhi.n	800a230 <_scanf_float+0x2a8>
 800a22e:	e6ee      	b.n	800a00e <_scanf_float+0x86>
 800a230:	3d01      	subs	r5, #1
 800a232:	593b      	ldr	r3, [r7, r4]
 800a234:	0032      	movs	r2, r6
 800a236:	7829      	ldrb	r1, [r5, #0]
 800a238:	9802      	ldr	r0, [sp, #8]
 800a23a:	4798      	blx	r3
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	3b01      	subs	r3, #1
 800a240:	613b      	str	r3, [r7, #16]
 800a242:	e7f1      	b.n	800a228 <_scanf_float+0x2a0>
 800a244:	24be      	movs	r4, #190	; 0xbe
 800a246:	0064      	lsls	r4, r4, #1
 800a248:	9b04      	ldr	r3, [sp, #16]
 800a24a:	429d      	cmp	r5, r3
 800a24c:	d800      	bhi.n	800a250 <_scanf_float+0x2c8>
 800a24e:	e6de      	b.n	800a00e <_scanf_float+0x86>
 800a250:	3d01      	subs	r5, #1
 800a252:	593b      	ldr	r3, [r7, r4]
 800a254:	0032      	movs	r2, r6
 800a256:	7829      	ldrb	r1, [r5, #0]
 800a258:	9802      	ldr	r0, [sp, #8]
 800a25a:	4798      	blx	r3
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	3b01      	subs	r3, #1
 800a260:	613b      	str	r3, [r7, #16]
 800a262:	e7f1      	b.n	800a248 <_scanf_float+0x2c0>
 800a264:	9b03      	ldr	r3, [sp, #12]
 800a266:	0032      	movs	r2, r6
 800a268:	3b01      	subs	r3, #1
 800a26a:	7819      	ldrb	r1, [r3, #0]
 800a26c:	9303      	str	r3, [sp, #12]
 800a26e:	23be      	movs	r3, #190	; 0xbe
 800a270:	005b      	lsls	r3, r3, #1
 800a272:	58fb      	ldr	r3, [r7, r3]
 800a274:	9802      	ldr	r0, [sp, #8]
 800a276:	4798      	blx	r3
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	3b01      	subs	r3, #1
 800a27c:	613b      	str	r3, [r7, #16]
 800a27e:	e7c3      	b.n	800a208 <_scanf_float+0x280>
 800a280:	fffffeff 	.word	0xfffffeff
 800a284:	fffffe7f 	.word	0xfffffe7f
 800a288:	fffff87f 	.word	0xfffff87f
 800a28c:	fffffd7f 	.word	0xfffffd7f
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	1e6c      	subs	r4, r5, #1
 800a294:	7821      	ldrb	r1, [r4, #0]
 800a296:	3b01      	subs	r3, #1
 800a298:	613b      	str	r3, [r7, #16]
 800a29a:	2965      	cmp	r1, #101	; 0x65
 800a29c:	d00c      	beq.n	800a2b8 <_scanf_float+0x330>
 800a29e:	2945      	cmp	r1, #69	; 0x45
 800a2a0:	d00a      	beq.n	800a2b8 <_scanf_float+0x330>
 800a2a2:	23be      	movs	r3, #190	; 0xbe
 800a2a4:	005b      	lsls	r3, r3, #1
 800a2a6:	58fb      	ldr	r3, [r7, r3]
 800a2a8:	0032      	movs	r2, r6
 800a2aa:	9802      	ldr	r0, [sp, #8]
 800a2ac:	4798      	blx	r3
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	1eac      	subs	r4, r5, #2
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	7821      	ldrb	r1, [r4, #0]
 800a2b6:	613b      	str	r3, [r7, #16]
 800a2b8:	23be      	movs	r3, #190	; 0xbe
 800a2ba:	005b      	lsls	r3, r3, #1
 800a2bc:	0032      	movs	r2, r6
 800a2be:	58fb      	ldr	r3, [r7, r3]
 800a2c0:	9802      	ldr	r0, [sp, #8]
 800a2c2:	4798      	blx	r3
 800a2c4:	0025      	movs	r5, r4
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	2310      	movs	r3, #16
 800a2ca:	0011      	movs	r1, r2
 800a2cc:	4019      	ands	r1, r3
 800a2ce:	9103      	str	r1, [sp, #12]
 800a2d0:	421a      	tst	r2, r3
 800a2d2:	d15b      	bne.n	800a38c <_scanf_float+0x404>
 800a2d4:	22c0      	movs	r2, #192	; 0xc0
 800a2d6:	7029      	strb	r1, [r5, #0]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	00d2      	lsls	r2, r2, #3
 800a2dc:	4013      	ands	r3, r2
 800a2de:	2280      	movs	r2, #128	; 0x80
 800a2e0:	00d2      	lsls	r2, r2, #3
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d11d      	bne.n	800a322 <_scanf_float+0x39a>
 800a2e6:	9b05      	ldr	r3, [sp, #20]
 800a2e8:	9a01      	ldr	r2, [sp, #4]
 800a2ea:	9901      	ldr	r1, [sp, #4]
 800a2ec:	1a9a      	subs	r2, r3, r2
 800a2ee:	428b      	cmp	r3, r1
 800a2f0:	d124      	bne.n	800a33c <_scanf_float+0x3b4>
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	9904      	ldr	r1, [sp, #16]
 800a2f6:	9802      	ldr	r0, [sp, #8]
 800a2f8:	f7ff f936 	bl	8009568 <_strtod_r>
 800a2fc:	9b07      	ldr	r3, [sp, #28]
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	0004      	movs	r4, r0
 800a302:	000d      	movs	r5, r1
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	0791      	lsls	r1, r2, #30
 800a308:	d525      	bpl.n	800a356 <_scanf_float+0x3ce>
 800a30a:	9907      	ldr	r1, [sp, #28]
 800a30c:	1d1a      	adds	r2, r3, #4
 800a30e:	600a      	str	r2, [r1, #0]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	601c      	str	r4, [r3, #0]
 800a314:	605d      	str	r5, [r3, #4]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3301      	adds	r3, #1
 800a31a:	60fb      	str	r3, [r7, #12]
 800a31c:	9803      	ldr	r0, [sp, #12]
 800a31e:	b00b      	add	sp, #44	; 0x2c
 800a320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a322:	9b08      	ldr	r3, [sp, #32]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d0e4      	beq.n	800a2f2 <_scanf_float+0x36a>
 800a328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32a:	9a03      	ldr	r2, [sp, #12]
 800a32c:	1c59      	adds	r1, r3, #1
 800a32e:	9802      	ldr	r0, [sp, #8]
 800a330:	230a      	movs	r3, #10
 800a332:	f7ff f9a7 	bl	8009684 <_strtol_r>
 800a336:	9b08      	ldr	r3, [sp, #32]
 800a338:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a33a:	1ac2      	subs	r2, r0, r3
 800a33c:	003b      	movs	r3, r7
 800a33e:	3370      	adds	r3, #112	; 0x70
 800a340:	33ff      	adds	r3, #255	; 0xff
 800a342:	429d      	cmp	r5, r3
 800a344:	d302      	bcc.n	800a34c <_scanf_float+0x3c4>
 800a346:	003d      	movs	r5, r7
 800a348:	356f      	adds	r5, #111	; 0x6f
 800a34a:	35ff      	adds	r5, #255	; 0xff
 800a34c:	0028      	movs	r0, r5
 800a34e:	4910      	ldr	r1, [pc, #64]	; (800a390 <_scanf_float+0x408>)
 800a350:	f000 f8e6 	bl	800a520 <siprintf>
 800a354:	e7cd      	b.n	800a2f2 <_scanf_float+0x36a>
 800a356:	1d19      	adds	r1, r3, #4
 800a358:	0752      	lsls	r2, r2, #29
 800a35a:	d502      	bpl.n	800a362 <_scanf_float+0x3da>
 800a35c:	9a07      	ldr	r2, [sp, #28]
 800a35e:	6011      	str	r1, [r2, #0]
 800a360:	e7d6      	b.n	800a310 <_scanf_float+0x388>
 800a362:	9a07      	ldr	r2, [sp, #28]
 800a364:	0020      	movs	r0, r4
 800a366:	6011      	str	r1, [r2, #0]
 800a368:	681e      	ldr	r6, [r3, #0]
 800a36a:	0022      	movs	r2, r4
 800a36c:	002b      	movs	r3, r5
 800a36e:	0029      	movs	r1, r5
 800a370:	f7f7 ffc2 	bl	80022f8 <__aeabi_dcmpun>
 800a374:	2800      	cmp	r0, #0
 800a376:	d004      	beq.n	800a382 <_scanf_float+0x3fa>
 800a378:	4806      	ldr	r0, [pc, #24]	; (800a394 <_scanf_float+0x40c>)
 800a37a:	f000 fa97 	bl	800a8ac <nanf>
 800a37e:	6030      	str	r0, [r6, #0]
 800a380:	e7c9      	b.n	800a316 <_scanf_float+0x38e>
 800a382:	0020      	movs	r0, r4
 800a384:	0029      	movs	r1, r5
 800a386:	f7f8 f861 	bl	800244c <__aeabi_d2f>
 800a38a:	e7f8      	b.n	800a37e <_scanf_float+0x3f6>
 800a38c:	2300      	movs	r3, #0
 800a38e:	e63f      	b.n	800a010 <_scanf_float+0x88>
 800a390:	0800d4c5 	.word	0x0800d4c5
 800a394:	0800d760 	.word	0x0800d760

0800a398 <std>:
 800a398:	2300      	movs	r3, #0
 800a39a:	b510      	push	{r4, lr}
 800a39c:	0004      	movs	r4, r0
 800a39e:	6003      	str	r3, [r0, #0]
 800a3a0:	6043      	str	r3, [r0, #4]
 800a3a2:	6083      	str	r3, [r0, #8]
 800a3a4:	8181      	strh	r1, [r0, #12]
 800a3a6:	6643      	str	r3, [r0, #100]	; 0x64
 800a3a8:	81c2      	strh	r2, [r0, #14]
 800a3aa:	6103      	str	r3, [r0, #16]
 800a3ac:	6143      	str	r3, [r0, #20]
 800a3ae:	6183      	str	r3, [r0, #24]
 800a3b0:	0019      	movs	r1, r3
 800a3b2:	2208      	movs	r2, #8
 800a3b4:	305c      	adds	r0, #92	; 0x5c
 800a3b6:	f000 f9c5 	bl	800a744 <memset>
 800a3ba:	4b0b      	ldr	r3, [pc, #44]	; (800a3e8 <std+0x50>)
 800a3bc:	6224      	str	r4, [r4, #32]
 800a3be:	6263      	str	r3, [r4, #36]	; 0x24
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <std+0x54>)
 800a3c2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3c4:	4b0a      	ldr	r3, [pc, #40]	; (800a3f0 <std+0x58>)
 800a3c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3c8:	4b0a      	ldr	r3, [pc, #40]	; (800a3f4 <std+0x5c>)
 800a3ca:	6323      	str	r3, [r4, #48]	; 0x30
 800a3cc:	4b0a      	ldr	r3, [pc, #40]	; (800a3f8 <std+0x60>)
 800a3ce:	429c      	cmp	r4, r3
 800a3d0:	d005      	beq.n	800a3de <std+0x46>
 800a3d2:	4b0a      	ldr	r3, [pc, #40]	; (800a3fc <std+0x64>)
 800a3d4:	429c      	cmp	r4, r3
 800a3d6:	d002      	beq.n	800a3de <std+0x46>
 800a3d8:	4b09      	ldr	r3, [pc, #36]	; (800a400 <std+0x68>)
 800a3da:	429c      	cmp	r4, r3
 800a3dc:	d103      	bne.n	800a3e6 <std+0x4e>
 800a3de:	0020      	movs	r0, r4
 800a3e0:	3058      	adds	r0, #88	; 0x58
 800a3e2:	f000 fa45 	bl	800a870 <__retarget_lock_init_recursive>
 800a3e6:	bd10      	pop	{r4, pc}
 800a3e8:	0800a561 	.word	0x0800a561
 800a3ec:	0800a589 	.word	0x0800a589
 800a3f0:	0800a5c1 	.word	0x0800a5c1
 800a3f4:	0800a5ed 	.word	0x0800a5ed
 800a3f8:	20000840 	.word	0x20000840
 800a3fc:	200008a8 	.word	0x200008a8
 800a400:	20000910 	.word	0x20000910

0800a404 <stdio_exit_handler>:
 800a404:	b510      	push	{r4, lr}
 800a406:	4a03      	ldr	r2, [pc, #12]	; (800a414 <stdio_exit_handler+0x10>)
 800a408:	4903      	ldr	r1, [pc, #12]	; (800a418 <stdio_exit_handler+0x14>)
 800a40a:	4804      	ldr	r0, [pc, #16]	; (800a41c <stdio_exit_handler+0x18>)
 800a40c:	f000 f86c 	bl	800a4e8 <_fwalk_sglue>
 800a410:	bd10      	pop	{r4, pc}
 800a412:	46c0      	nop			; (mov r8, r8)
 800a414:	2000000c 	.word	0x2000000c
 800a418:	0800cecd 	.word	0x0800cecd
 800a41c:	20000184 	.word	0x20000184

0800a420 <cleanup_stdio>:
 800a420:	6841      	ldr	r1, [r0, #4]
 800a422:	4b0b      	ldr	r3, [pc, #44]	; (800a450 <cleanup_stdio+0x30>)
 800a424:	b510      	push	{r4, lr}
 800a426:	0004      	movs	r4, r0
 800a428:	4299      	cmp	r1, r3
 800a42a:	d001      	beq.n	800a430 <cleanup_stdio+0x10>
 800a42c:	f002 fd4e 	bl	800cecc <_fflush_r>
 800a430:	68a1      	ldr	r1, [r4, #8]
 800a432:	4b08      	ldr	r3, [pc, #32]	; (800a454 <cleanup_stdio+0x34>)
 800a434:	4299      	cmp	r1, r3
 800a436:	d002      	beq.n	800a43e <cleanup_stdio+0x1e>
 800a438:	0020      	movs	r0, r4
 800a43a:	f002 fd47 	bl	800cecc <_fflush_r>
 800a43e:	68e1      	ldr	r1, [r4, #12]
 800a440:	4b05      	ldr	r3, [pc, #20]	; (800a458 <cleanup_stdio+0x38>)
 800a442:	4299      	cmp	r1, r3
 800a444:	d002      	beq.n	800a44c <cleanup_stdio+0x2c>
 800a446:	0020      	movs	r0, r4
 800a448:	f002 fd40 	bl	800cecc <_fflush_r>
 800a44c:	bd10      	pop	{r4, pc}
 800a44e:	46c0      	nop			; (mov r8, r8)
 800a450:	20000840 	.word	0x20000840
 800a454:	200008a8 	.word	0x200008a8
 800a458:	20000910 	.word	0x20000910

0800a45c <global_stdio_init.part.0>:
 800a45c:	b510      	push	{r4, lr}
 800a45e:	4b09      	ldr	r3, [pc, #36]	; (800a484 <global_stdio_init.part.0+0x28>)
 800a460:	4a09      	ldr	r2, [pc, #36]	; (800a488 <global_stdio_init.part.0+0x2c>)
 800a462:	2104      	movs	r1, #4
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	4809      	ldr	r0, [pc, #36]	; (800a48c <global_stdio_init.part.0+0x30>)
 800a468:	2200      	movs	r2, #0
 800a46a:	f7ff ff95 	bl	800a398 <std>
 800a46e:	2201      	movs	r2, #1
 800a470:	2109      	movs	r1, #9
 800a472:	4807      	ldr	r0, [pc, #28]	; (800a490 <global_stdio_init.part.0+0x34>)
 800a474:	f7ff ff90 	bl	800a398 <std>
 800a478:	2202      	movs	r2, #2
 800a47a:	2112      	movs	r1, #18
 800a47c:	4805      	ldr	r0, [pc, #20]	; (800a494 <global_stdio_init.part.0+0x38>)
 800a47e:	f7ff ff8b 	bl	800a398 <std>
 800a482:	bd10      	pop	{r4, pc}
 800a484:	20000978 	.word	0x20000978
 800a488:	0800a405 	.word	0x0800a405
 800a48c:	20000840 	.word	0x20000840
 800a490:	200008a8 	.word	0x200008a8
 800a494:	20000910 	.word	0x20000910

0800a498 <__sfp_lock_acquire>:
 800a498:	b510      	push	{r4, lr}
 800a49a:	4802      	ldr	r0, [pc, #8]	; (800a4a4 <__sfp_lock_acquire+0xc>)
 800a49c:	f000 f9e9 	bl	800a872 <__retarget_lock_acquire_recursive>
 800a4a0:	bd10      	pop	{r4, pc}
 800a4a2:	46c0      	nop			; (mov r8, r8)
 800a4a4:	20000981 	.word	0x20000981

0800a4a8 <__sfp_lock_release>:
 800a4a8:	b510      	push	{r4, lr}
 800a4aa:	4802      	ldr	r0, [pc, #8]	; (800a4b4 <__sfp_lock_release+0xc>)
 800a4ac:	f000 f9e2 	bl	800a874 <__retarget_lock_release_recursive>
 800a4b0:	bd10      	pop	{r4, pc}
 800a4b2:	46c0      	nop			; (mov r8, r8)
 800a4b4:	20000981 	.word	0x20000981

0800a4b8 <__sinit>:
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	0004      	movs	r4, r0
 800a4bc:	f7ff ffec 	bl	800a498 <__sfp_lock_acquire>
 800a4c0:	6a23      	ldr	r3, [r4, #32]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <__sinit+0x14>
 800a4c6:	f7ff ffef 	bl	800a4a8 <__sfp_lock_release>
 800a4ca:	bd10      	pop	{r4, pc}
 800a4cc:	4b04      	ldr	r3, [pc, #16]	; (800a4e0 <__sinit+0x28>)
 800a4ce:	6223      	str	r3, [r4, #32]
 800a4d0:	4b04      	ldr	r3, [pc, #16]	; (800a4e4 <__sinit+0x2c>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1f6      	bne.n	800a4c6 <__sinit+0xe>
 800a4d8:	f7ff ffc0 	bl	800a45c <global_stdio_init.part.0>
 800a4dc:	e7f3      	b.n	800a4c6 <__sinit+0xe>
 800a4de:	46c0      	nop			; (mov r8, r8)
 800a4e0:	0800a421 	.word	0x0800a421
 800a4e4:	20000978 	.word	0x20000978

0800a4e8 <_fwalk_sglue>:
 800a4e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4ea:	0014      	movs	r4, r2
 800a4ec:	2600      	movs	r6, #0
 800a4ee:	9000      	str	r0, [sp, #0]
 800a4f0:	9101      	str	r1, [sp, #4]
 800a4f2:	68a5      	ldr	r5, [r4, #8]
 800a4f4:	6867      	ldr	r7, [r4, #4]
 800a4f6:	3f01      	subs	r7, #1
 800a4f8:	d504      	bpl.n	800a504 <_fwalk_sglue+0x1c>
 800a4fa:	6824      	ldr	r4, [r4, #0]
 800a4fc:	2c00      	cmp	r4, #0
 800a4fe:	d1f8      	bne.n	800a4f2 <_fwalk_sglue+0xa>
 800a500:	0030      	movs	r0, r6
 800a502:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a504:	89ab      	ldrh	r3, [r5, #12]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d908      	bls.n	800a51c <_fwalk_sglue+0x34>
 800a50a:	220e      	movs	r2, #14
 800a50c:	5eab      	ldrsh	r3, [r5, r2]
 800a50e:	3301      	adds	r3, #1
 800a510:	d004      	beq.n	800a51c <_fwalk_sglue+0x34>
 800a512:	0029      	movs	r1, r5
 800a514:	9800      	ldr	r0, [sp, #0]
 800a516:	9b01      	ldr	r3, [sp, #4]
 800a518:	4798      	blx	r3
 800a51a:	4306      	orrs	r6, r0
 800a51c:	3568      	adds	r5, #104	; 0x68
 800a51e:	e7ea      	b.n	800a4f6 <_fwalk_sglue+0xe>

0800a520 <siprintf>:
 800a520:	b40e      	push	{r1, r2, r3}
 800a522:	b500      	push	{lr}
 800a524:	490b      	ldr	r1, [pc, #44]	; (800a554 <siprintf+0x34>)
 800a526:	b09c      	sub	sp, #112	; 0x70
 800a528:	ab1d      	add	r3, sp, #116	; 0x74
 800a52a:	9002      	str	r0, [sp, #8]
 800a52c:	9006      	str	r0, [sp, #24]
 800a52e:	9107      	str	r1, [sp, #28]
 800a530:	9104      	str	r1, [sp, #16]
 800a532:	4809      	ldr	r0, [pc, #36]	; (800a558 <siprintf+0x38>)
 800a534:	4909      	ldr	r1, [pc, #36]	; (800a55c <siprintf+0x3c>)
 800a536:	cb04      	ldmia	r3!, {r2}
 800a538:	9105      	str	r1, [sp, #20]
 800a53a:	6800      	ldr	r0, [r0, #0]
 800a53c:	a902      	add	r1, sp, #8
 800a53e:	9301      	str	r3, [sp, #4]
 800a540:	f002 f9f6 	bl	800c930 <_svfiprintf_r>
 800a544:	2200      	movs	r2, #0
 800a546:	9b02      	ldr	r3, [sp, #8]
 800a548:	701a      	strb	r2, [r3, #0]
 800a54a:	b01c      	add	sp, #112	; 0x70
 800a54c:	bc08      	pop	{r3}
 800a54e:	b003      	add	sp, #12
 800a550:	4718      	bx	r3
 800a552:	46c0      	nop			; (mov r8, r8)
 800a554:	7fffffff 	.word	0x7fffffff
 800a558:	200001d0 	.word	0x200001d0
 800a55c:	ffff0208 	.word	0xffff0208

0800a560 <__sread>:
 800a560:	b570      	push	{r4, r5, r6, lr}
 800a562:	000c      	movs	r4, r1
 800a564:	250e      	movs	r5, #14
 800a566:	5f49      	ldrsh	r1, [r1, r5]
 800a568:	f000 f930 	bl	800a7cc <_read_r>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	db03      	blt.n	800a578 <__sread+0x18>
 800a570:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a572:	181b      	adds	r3, r3, r0
 800a574:	6563      	str	r3, [r4, #84]	; 0x54
 800a576:	bd70      	pop	{r4, r5, r6, pc}
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	4a02      	ldr	r2, [pc, #8]	; (800a584 <__sread+0x24>)
 800a57c:	4013      	ands	r3, r2
 800a57e:	81a3      	strh	r3, [r4, #12]
 800a580:	e7f9      	b.n	800a576 <__sread+0x16>
 800a582:	46c0      	nop			; (mov r8, r8)
 800a584:	ffffefff 	.word	0xffffefff

0800a588 <__swrite>:
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58a:	001f      	movs	r7, r3
 800a58c:	898b      	ldrh	r3, [r1, #12]
 800a58e:	0005      	movs	r5, r0
 800a590:	000c      	movs	r4, r1
 800a592:	0016      	movs	r6, r2
 800a594:	05db      	lsls	r3, r3, #23
 800a596:	d505      	bpl.n	800a5a4 <__swrite+0x1c>
 800a598:	230e      	movs	r3, #14
 800a59a:	5ec9      	ldrsh	r1, [r1, r3]
 800a59c:	2200      	movs	r2, #0
 800a59e:	2302      	movs	r3, #2
 800a5a0:	f000 f900 	bl	800a7a4 <_lseek_r>
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	4a05      	ldr	r2, [pc, #20]	; (800a5bc <__swrite+0x34>)
 800a5a8:	0028      	movs	r0, r5
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	81a3      	strh	r3, [r4, #12]
 800a5ae:	0032      	movs	r2, r6
 800a5b0:	230e      	movs	r3, #14
 800a5b2:	5ee1      	ldrsh	r1, [r4, r3]
 800a5b4:	003b      	movs	r3, r7
 800a5b6:	f000 f91d 	bl	800a7f4 <_write_r>
 800a5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5bc:	ffffefff 	.word	0xffffefff

0800a5c0 <__sseek>:
 800a5c0:	b570      	push	{r4, r5, r6, lr}
 800a5c2:	000c      	movs	r4, r1
 800a5c4:	250e      	movs	r5, #14
 800a5c6:	5f49      	ldrsh	r1, [r1, r5]
 800a5c8:	f000 f8ec 	bl	800a7a4 <_lseek_r>
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	1c42      	adds	r2, r0, #1
 800a5d0:	d103      	bne.n	800a5da <__sseek+0x1a>
 800a5d2:	4a05      	ldr	r2, [pc, #20]	; (800a5e8 <__sseek+0x28>)
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	81a3      	strh	r3, [r4, #12]
 800a5d8:	bd70      	pop	{r4, r5, r6, pc}
 800a5da:	2280      	movs	r2, #128	; 0x80
 800a5dc:	0152      	lsls	r2, r2, #5
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	81a3      	strh	r3, [r4, #12]
 800a5e2:	6560      	str	r0, [r4, #84]	; 0x54
 800a5e4:	e7f8      	b.n	800a5d8 <__sseek+0x18>
 800a5e6:	46c0      	nop			; (mov r8, r8)
 800a5e8:	ffffefff 	.word	0xffffefff

0800a5ec <__sclose>:
 800a5ec:	b510      	push	{r4, lr}
 800a5ee:	230e      	movs	r3, #14
 800a5f0:	5ec9      	ldrsh	r1, [r1, r3]
 800a5f2:	f000 f8c5 	bl	800a780 <_close_r>
 800a5f6:	bd10      	pop	{r4, pc}

0800a5f8 <__swbuf_r>:
 800a5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fa:	0006      	movs	r6, r0
 800a5fc:	000d      	movs	r5, r1
 800a5fe:	0014      	movs	r4, r2
 800a600:	2800      	cmp	r0, #0
 800a602:	d004      	beq.n	800a60e <__swbuf_r+0x16>
 800a604:	6a03      	ldr	r3, [r0, #32]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <__swbuf_r+0x16>
 800a60a:	f7ff ff55 	bl	800a4b8 <__sinit>
 800a60e:	69a3      	ldr	r3, [r4, #24]
 800a610:	60a3      	str	r3, [r4, #8]
 800a612:	89a3      	ldrh	r3, [r4, #12]
 800a614:	071b      	lsls	r3, r3, #28
 800a616:	d528      	bpl.n	800a66a <__swbuf_r+0x72>
 800a618:	6923      	ldr	r3, [r4, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d025      	beq.n	800a66a <__swbuf_r+0x72>
 800a61e:	6923      	ldr	r3, [r4, #16]
 800a620:	6820      	ldr	r0, [r4, #0]
 800a622:	b2ef      	uxtb	r7, r5
 800a624:	1ac0      	subs	r0, r0, r3
 800a626:	6963      	ldr	r3, [r4, #20]
 800a628:	b2ed      	uxtb	r5, r5
 800a62a:	4283      	cmp	r3, r0
 800a62c:	dc05      	bgt.n	800a63a <__swbuf_r+0x42>
 800a62e:	0021      	movs	r1, r4
 800a630:	0030      	movs	r0, r6
 800a632:	f002 fc4b 	bl	800cecc <_fflush_r>
 800a636:	2800      	cmp	r0, #0
 800a638:	d11d      	bne.n	800a676 <__swbuf_r+0x7e>
 800a63a:	68a3      	ldr	r3, [r4, #8]
 800a63c:	3001      	adds	r0, #1
 800a63e:	3b01      	subs	r3, #1
 800a640:	60a3      	str	r3, [r4, #8]
 800a642:	6823      	ldr	r3, [r4, #0]
 800a644:	1c5a      	adds	r2, r3, #1
 800a646:	6022      	str	r2, [r4, #0]
 800a648:	701f      	strb	r7, [r3, #0]
 800a64a:	6963      	ldr	r3, [r4, #20]
 800a64c:	4283      	cmp	r3, r0
 800a64e:	d004      	beq.n	800a65a <__swbuf_r+0x62>
 800a650:	89a3      	ldrh	r3, [r4, #12]
 800a652:	07db      	lsls	r3, r3, #31
 800a654:	d507      	bpl.n	800a666 <__swbuf_r+0x6e>
 800a656:	2d0a      	cmp	r5, #10
 800a658:	d105      	bne.n	800a666 <__swbuf_r+0x6e>
 800a65a:	0021      	movs	r1, r4
 800a65c:	0030      	movs	r0, r6
 800a65e:	f002 fc35 	bl	800cecc <_fflush_r>
 800a662:	2800      	cmp	r0, #0
 800a664:	d107      	bne.n	800a676 <__swbuf_r+0x7e>
 800a666:	0028      	movs	r0, r5
 800a668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a66a:	0021      	movs	r1, r4
 800a66c:	0030      	movs	r0, r6
 800a66e:	f000 f805 	bl	800a67c <__swsetup_r>
 800a672:	2800      	cmp	r0, #0
 800a674:	d0d3      	beq.n	800a61e <__swbuf_r+0x26>
 800a676:	2501      	movs	r5, #1
 800a678:	426d      	negs	r5, r5
 800a67a:	e7f4      	b.n	800a666 <__swbuf_r+0x6e>

0800a67c <__swsetup_r>:
 800a67c:	4b30      	ldr	r3, [pc, #192]	; (800a740 <__swsetup_r+0xc4>)
 800a67e:	b570      	push	{r4, r5, r6, lr}
 800a680:	0005      	movs	r5, r0
 800a682:	6818      	ldr	r0, [r3, #0]
 800a684:	000c      	movs	r4, r1
 800a686:	2800      	cmp	r0, #0
 800a688:	d004      	beq.n	800a694 <__swsetup_r+0x18>
 800a68a:	6a03      	ldr	r3, [r0, #32]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <__swsetup_r+0x18>
 800a690:	f7ff ff12 	bl	800a4b8 <__sinit>
 800a694:	230c      	movs	r3, #12
 800a696:	5ee2      	ldrsh	r2, [r4, r3]
 800a698:	b293      	uxth	r3, r2
 800a69a:	0711      	lsls	r1, r2, #28
 800a69c:	d423      	bmi.n	800a6e6 <__swsetup_r+0x6a>
 800a69e:	06d9      	lsls	r1, r3, #27
 800a6a0:	d407      	bmi.n	800a6b2 <__swsetup_r+0x36>
 800a6a2:	2309      	movs	r3, #9
 800a6a4:	2001      	movs	r0, #1
 800a6a6:	602b      	str	r3, [r5, #0]
 800a6a8:	3337      	adds	r3, #55	; 0x37
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	81a3      	strh	r3, [r4, #12]
 800a6ae:	4240      	negs	r0, r0
 800a6b0:	bd70      	pop	{r4, r5, r6, pc}
 800a6b2:	075b      	lsls	r3, r3, #29
 800a6b4:	d513      	bpl.n	800a6de <__swsetup_r+0x62>
 800a6b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6b8:	2900      	cmp	r1, #0
 800a6ba:	d008      	beq.n	800a6ce <__swsetup_r+0x52>
 800a6bc:	0023      	movs	r3, r4
 800a6be:	3344      	adds	r3, #68	; 0x44
 800a6c0:	4299      	cmp	r1, r3
 800a6c2:	d002      	beq.n	800a6ca <__swsetup_r+0x4e>
 800a6c4:	0028      	movs	r0, r5
 800a6c6:	f000 ff93 	bl	800b5f0 <_free_r>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	6363      	str	r3, [r4, #52]	; 0x34
 800a6ce:	2224      	movs	r2, #36	; 0x24
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	4393      	bics	r3, r2
 800a6d4:	81a3      	strh	r3, [r4, #12]
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	6063      	str	r3, [r4, #4]
 800a6da:	6923      	ldr	r3, [r4, #16]
 800a6dc:	6023      	str	r3, [r4, #0]
 800a6de:	2308      	movs	r3, #8
 800a6e0:	89a2      	ldrh	r2, [r4, #12]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	81a3      	strh	r3, [r4, #12]
 800a6e6:	6923      	ldr	r3, [r4, #16]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10b      	bne.n	800a704 <__swsetup_r+0x88>
 800a6ec:	21a0      	movs	r1, #160	; 0xa0
 800a6ee:	2280      	movs	r2, #128	; 0x80
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	0089      	lsls	r1, r1, #2
 800a6f4:	0092      	lsls	r2, r2, #2
 800a6f6:	400b      	ands	r3, r1
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d003      	beq.n	800a704 <__swsetup_r+0x88>
 800a6fc:	0021      	movs	r1, r4
 800a6fe:	0028      	movs	r0, r5
 800a700:	f002 fc38 	bl	800cf74 <__smakebuf_r>
 800a704:	220c      	movs	r2, #12
 800a706:	5ea3      	ldrsh	r3, [r4, r2]
 800a708:	2001      	movs	r0, #1
 800a70a:	001a      	movs	r2, r3
 800a70c:	b299      	uxth	r1, r3
 800a70e:	4002      	ands	r2, r0
 800a710:	4203      	tst	r3, r0
 800a712:	d00f      	beq.n	800a734 <__swsetup_r+0xb8>
 800a714:	2200      	movs	r2, #0
 800a716:	60a2      	str	r2, [r4, #8]
 800a718:	6962      	ldr	r2, [r4, #20]
 800a71a:	4252      	negs	r2, r2
 800a71c:	61a2      	str	r2, [r4, #24]
 800a71e:	2000      	movs	r0, #0
 800a720:	6922      	ldr	r2, [r4, #16]
 800a722:	4282      	cmp	r2, r0
 800a724:	d1c4      	bne.n	800a6b0 <__swsetup_r+0x34>
 800a726:	0609      	lsls	r1, r1, #24
 800a728:	d5c2      	bpl.n	800a6b0 <__swsetup_r+0x34>
 800a72a:	2240      	movs	r2, #64	; 0x40
 800a72c:	4313      	orrs	r3, r2
 800a72e:	81a3      	strh	r3, [r4, #12]
 800a730:	3801      	subs	r0, #1
 800a732:	e7bd      	b.n	800a6b0 <__swsetup_r+0x34>
 800a734:	0788      	lsls	r0, r1, #30
 800a736:	d400      	bmi.n	800a73a <__swsetup_r+0xbe>
 800a738:	6962      	ldr	r2, [r4, #20]
 800a73a:	60a2      	str	r2, [r4, #8]
 800a73c:	e7ef      	b.n	800a71e <__swsetup_r+0xa2>
 800a73e:	46c0      	nop			; (mov r8, r8)
 800a740:	200001d0 	.word	0x200001d0

0800a744 <memset>:
 800a744:	0003      	movs	r3, r0
 800a746:	1882      	adds	r2, r0, r2
 800a748:	4293      	cmp	r3, r2
 800a74a:	d100      	bne.n	800a74e <memset+0xa>
 800a74c:	4770      	bx	lr
 800a74e:	7019      	strb	r1, [r3, #0]
 800a750:	3301      	adds	r3, #1
 800a752:	e7f9      	b.n	800a748 <memset+0x4>

0800a754 <strncmp>:
 800a754:	b530      	push	{r4, r5, lr}
 800a756:	0005      	movs	r5, r0
 800a758:	1e10      	subs	r0, r2, #0
 800a75a:	d00b      	beq.n	800a774 <strncmp+0x20>
 800a75c:	2400      	movs	r4, #0
 800a75e:	3a01      	subs	r2, #1
 800a760:	5d2b      	ldrb	r3, [r5, r4]
 800a762:	5d08      	ldrb	r0, [r1, r4]
 800a764:	4283      	cmp	r3, r0
 800a766:	d104      	bne.n	800a772 <strncmp+0x1e>
 800a768:	42a2      	cmp	r2, r4
 800a76a:	d002      	beq.n	800a772 <strncmp+0x1e>
 800a76c:	3401      	adds	r4, #1
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1f6      	bne.n	800a760 <strncmp+0xc>
 800a772:	1a18      	subs	r0, r3, r0
 800a774:	bd30      	pop	{r4, r5, pc}
	...

0800a778 <_localeconv_r>:
 800a778:	4800      	ldr	r0, [pc, #0]	; (800a77c <_localeconv_r+0x4>)
 800a77a:	4770      	bx	lr
 800a77c:	20000108 	.word	0x20000108

0800a780 <_close_r>:
 800a780:	2300      	movs	r3, #0
 800a782:	b570      	push	{r4, r5, r6, lr}
 800a784:	4d06      	ldr	r5, [pc, #24]	; (800a7a0 <_close_r+0x20>)
 800a786:	0004      	movs	r4, r0
 800a788:	0008      	movs	r0, r1
 800a78a:	602b      	str	r3, [r5, #0]
 800a78c:	f7f9 f94d 	bl	8003a2a <_close>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d103      	bne.n	800a79c <_close_r+0x1c>
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d000      	beq.n	800a79c <_close_r+0x1c>
 800a79a:	6023      	str	r3, [r4, #0]
 800a79c:	bd70      	pop	{r4, r5, r6, pc}
 800a79e:	46c0      	nop			; (mov r8, r8)
 800a7a0:	2000097c 	.word	0x2000097c

0800a7a4 <_lseek_r>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	0004      	movs	r4, r0
 800a7a8:	0008      	movs	r0, r1
 800a7aa:	0011      	movs	r1, r2
 800a7ac:	001a      	movs	r2, r3
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	4d05      	ldr	r5, [pc, #20]	; (800a7c8 <_lseek_r+0x24>)
 800a7b2:	602b      	str	r3, [r5, #0]
 800a7b4:	f7f9 f95a 	bl	8003a6c <_lseek>
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	d103      	bne.n	800a7c4 <_lseek_r+0x20>
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d000      	beq.n	800a7c4 <_lseek_r+0x20>
 800a7c2:	6023      	str	r3, [r4, #0]
 800a7c4:	bd70      	pop	{r4, r5, r6, pc}
 800a7c6:	46c0      	nop			; (mov r8, r8)
 800a7c8:	2000097c 	.word	0x2000097c

0800a7cc <_read_r>:
 800a7cc:	b570      	push	{r4, r5, r6, lr}
 800a7ce:	0004      	movs	r4, r0
 800a7d0:	0008      	movs	r0, r1
 800a7d2:	0011      	movs	r1, r2
 800a7d4:	001a      	movs	r2, r3
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	4d05      	ldr	r5, [pc, #20]	; (800a7f0 <_read_r+0x24>)
 800a7da:	602b      	str	r3, [r5, #0]
 800a7dc:	f7f9 f8ec 	bl	80039b8 <_read>
 800a7e0:	1c43      	adds	r3, r0, #1
 800a7e2:	d103      	bne.n	800a7ec <_read_r+0x20>
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d000      	beq.n	800a7ec <_read_r+0x20>
 800a7ea:	6023      	str	r3, [r4, #0]
 800a7ec:	bd70      	pop	{r4, r5, r6, pc}
 800a7ee:	46c0      	nop			; (mov r8, r8)
 800a7f0:	2000097c 	.word	0x2000097c

0800a7f4 <_write_r>:
 800a7f4:	b570      	push	{r4, r5, r6, lr}
 800a7f6:	0004      	movs	r4, r0
 800a7f8:	0008      	movs	r0, r1
 800a7fa:	0011      	movs	r1, r2
 800a7fc:	001a      	movs	r2, r3
 800a7fe:	2300      	movs	r3, #0
 800a800:	4d05      	ldr	r5, [pc, #20]	; (800a818 <_write_r+0x24>)
 800a802:	602b      	str	r3, [r5, #0]
 800a804:	f7f9 f8f5 	bl	80039f2 <_write>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d103      	bne.n	800a814 <_write_r+0x20>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d000      	beq.n	800a814 <_write_r+0x20>
 800a812:	6023      	str	r3, [r4, #0]
 800a814:	bd70      	pop	{r4, r5, r6, pc}
 800a816:	46c0      	nop			; (mov r8, r8)
 800a818:	2000097c 	.word	0x2000097c

0800a81c <__errno>:
 800a81c:	4b01      	ldr	r3, [pc, #4]	; (800a824 <__errno+0x8>)
 800a81e:	6818      	ldr	r0, [r3, #0]
 800a820:	4770      	bx	lr
 800a822:	46c0      	nop			; (mov r8, r8)
 800a824:	200001d0 	.word	0x200001d0

0800a828 <__libc_init_array>:
 800a828:	b570      	push	{r4, r5, r6, lr}
 800a82a:	2600      	movs	r6, #0
 800a82c:	4c0c      	ldr	r4, [pc, #48]	; (800a860 <__libc_init_array+0x38>)
 800a82e:	4d0d      	ldr	r5, [pc, #52]	; (800a864 <__libc_init_array+0x3c>)
 800a830:	1b64      	subs	r4, r4, r5
 800a832:	10a4      	asrs	r4, r4, #2
 800a834:	42a6      	cmp	r6, r4
 800a836:	d109      	bne.n	800a84c <__libc_init_array+0x24>
 800a838:	2600      	movs	r6, #0
 800a83a:	f002 fd07 	bl	800d24c <_init>
 800a83e:	4c0a      	ldr	r4, [pc, #40]	; (800a868 <__libc_init_array+0x40>)
 800a840:	4d0a      	ldr	r5, [pc, #40]	; (800a86c <__libc_init_array+0x44>)
 800a842:	1b64      	subs	r4, r4, r5
 800a844:	10a4      	asrs	r4, r4, #2
 800a846:	42a6      	cmp	r6, r4
 800a848:	d105      	bne.n	800a856 <__libc_init_array+0x2e>
 800a84a:	bd70      	pop	{r4, r5, r6, pc}
 800a84c:	00b3      	lsls	r3, r6, #2
 800a84e:	58eb      	ldr	r3, [r5, r3]
 800a850:	4798      	blx	r3
 800a852:	3601      	adds	r6, #1
 800a854:	e7ee      	b.n	800a834 <__libc_init_array+0xc>
 800a856:	00b3      	lsls	r3, r6, #2
 800a858:	58eb      	ldr	r3, [r5, r3]
 800a85a:	4798      	blx	r3
 800a85c:	3601      	adds	r6, #1
 800a85e:	e7f2      	b.n	800a846 <__libc_init_array+0x1e>
 800a860:	0800d76c 	.word	0x0800d76c
 800a864:	0800d76c 	.word	0x0800d76c
 800a868:	0800d770 	.word	0x0800d770
 800a86c:	0800d76c 	.word	0x0800d76c

0800a870 <__retarget_lock_init_recursive>:
 800a870:	4770      	bx	lr

0800a872 <__retarget_lock_acquire_recursive>:
 800a872:	4770      	bx	lr

0800a874 <__retarget_lock_release_recursive>:
 800a874:	4770      	bx	lr

0800a876 <memchr>:
 800a876:	b2c9      	uxtb	r1, r1
 800a878:	1882      	adds	r2, r0, r2
 800a87a:	4290      	cmp	r0, r2
 800a87c:	d101      	bne.n	800a882 <memchr+0xc>
 800a87e:	2000      	movs	r0, #0
 800a880:	4770      	bx	lr
 800a882:	7803      	ldrb	r3, [r0, #0]
 800a884:	428b      	cmp	r3, r1
 800a886:	d0fb      	beq.n	800a880 <memchr+0xa>
 800a888:	3001      	adds	r0, #1
 800a88a:	e7f6      	b.n	800a87a <memchr+0x4>

0800a88c <memcpy>:
 800a88c:	2300      	movs	r3, #0
 800a88e:	b510      	push	{r4, lr}
 800a890:	429a      	cmp	r2, r3
 800a892:	d100      	bne.n	800a896 <memcpy+0xa>
 800a894:	bd10      	pop	{r4, pc}
 800a896:	5ccc      	ldrb	r4, [r1, r3]
 800a898:	54c4      	strb	r4, [r0, r3]
 800a89a:	3301      	adds	r3, #1
 800a89c:	e7f8      	b.n	800a890 <memcpy+0x4>
	...

0800a8a0 <nan>:
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	4901      	ldr	r1, [pc, #4]	; (800a8a8 <nan+0x8>)
 800a8a4:	4770      	bx	lr
 800a8a6:	46c0      	nop			; (mov r8, r8)
 800a8a8:	7ff80000 	.word	0x7ff80000

0800a8ac <nanf>:
 800a8ac:	4800      	ldr	r0, [pc, #0]	; (800a8b0 <nanf+0x4>)
 800a8ae:	4770      	bx	lr
 800a8b0:	7fc00000 	.word	0x7fc00000

0800a8b4 <quorem>:
 800a8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8b6:	6902      	ldr	r2, [r0, #16]
 800a8b8:	690b      	ldr	r3, [r1, #16]
 800a8ba:	b089      	sub	sp, #36	; 0x24
 800a8bc:	0007      	movs	r7, r0
 800a8be:	9104      	str	r1, [sp, #16]
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	db69      	blt.n	800a99a <quorem+0xe6>
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	009c      	lsls	r4, r3, #2
 800a8ca:	9301      	str	r3, [sp, #4]
 800a8cc:	000b      	movs	r3, r1
 800a8ce:	3314      	adds	r3, #20
 800a8d0:	9306      	str	r3, [sp, #24]
 800a8d2:	191b      	adds	r3, r3, r4
 800a8d4:	9305      	str	r3, [sp, #20]
 800a8d6:	003b      	movs	r3, r7
 800a8d8:	3314      	adds	r3, #20
 800a8da:	9303      	str	r3, [sp, #12]
 800a8dc:	191c      	adds	r4, r3, r4
 800a8de:	9b05      	ldr	r3, [sp, #20]
 800a8e0:	6826      	ldr	r6, [r4, #0]
 800a8e2:	681d      	ldr	r5, [r3, #0]
 800a8e4:	0030      	movs	r0, r6
 800a8e6:	3501      	adds	r5, #1
 800a8e8:	0029      	movs	r1, r5
 800a8ea:	f7f5 fc29 	bl	8000140 <__udivsi3>
 800a8ee:	9002      	str	r0, [sp, #8]
 800a8f0:	42ae      	cmp	r6, r5
 800a8f2:	d329      	bcc.n	800a948 <quorem+0x94>
 800a8f4:	9b06      	ldr	r3, [sp, #24]
 800a8f6:	2600      	movs	r6, #0
 800a8f8:	469c      	mov	ip, r3
 800a8fa:	9d03      	ldr	r5, [sp, #12]
 800a8fc:	9606      	str	r6, [sp, #24]
 800a8fe:	4662      	mov	r2, ip
 800a900:	ca08      	ldmia	r2!, {r3}
 800a902:	6828      	ldr	r0, [r5, #0]
 800a904:	4694      	mov	ip, r2
 800a906:	9a02      	ldr	r2, [sp, #8]
 800a908:	b299      	uxth	r1, r3
 800a90a:	4351      	muls	r1, r2
 800a90c:	0c1b      	lsrs	r3, r3, #16
 800a90e:	4353      	muls	r3, r2
 800a910:	1989      	adds	r1, r1, r6
 800a912:	0c0a      	lsrs	r2, r1, #16
 800a914:	189b      	adds	r3, r3, r2
 800a916:	9307      	str	r3, [sp, #28]
 800a918:	0c1e      	lsrs	r6, r3, #16
 800a91a:	9b06      	ldr	r3, [sp, #24]
 800a91c:	b282      	uxth	r2, r0
 800a91e:	18d2      	adds	r2, r2, r3
 800a920:	466b      	mov	r3, sp
 800a922:	b289      	uxth	r1, r1
 800a924:	8b9b      	ldrh	r3, [r3, #28]
 800a926:	1a52      	subs	r2, r2, r1
 800a928:	0c01      	lsrs	r1, r0, #16
 800a92a:	1ac9      	subs	r1, r1, r3
 800a92c:	1413      	asrs	r3, r2, #16
 800a92e:	18cb      	adds	r3, r1, r3
 800a930:	1419      	asrs	r1, r3, #16
 800a932:	b292      	uxth	r2, r2
 800a934:	041b      	lsls	r3, r3, #16
 800a936:	4313      	orrs	r3, r2
 800a938:	c508      	stmia	r5!, {r3}
 800a93a:	9b05      	ldr	r3, [sp, #20]
 800a93c:	9106      	str	r1, [sp, #24]
 800a93e:	4563      	cmp	r3, ip
 800a940:	d2dd      	bcs.n	800a8fe <quorem+0x4a>
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d030      	beq.n	800a9aa <quorem+0xf6>
 800a948:	0038      	movs	r0, r7
 800a94a:	9904      	ldr	r1, [sp, #16]
 800a94c:	f001 fd98 	bl	800c480 <__mcmp>
 800a950:	2800      	cmp	r0, #0
 800a952:	db21      	blt.n	800a998 <quorem+0xe4>
 800a954:	0038      	movs	r0, r7
 800a956:	2600      	movs	r6, #0
 800a958:	9b02      	ldr	r3, [sp, #8]
 800a95a:	9c04      	ldr	r4, [sp, #16]
 800a95c:	3301      	adds	r3, #1
 800a95e:	9302      	str	r3, [sp, #8]
 800a960:	3014      	adds	r0, #20
 800a962:	3414      	adds	r4, #20
 800a964:	6803      	ldr	r3, [r0, #0]
 800a966:	cc02      	ldmia	r4!, {r1}
 800a968:	b29d      	uxth	r5, r3
 800a96a:	19ad      	adds	r5, r5, r6
 800a96c:	b28a      	uxth	r2, r1
 800a96e:	1aaa      	subs	r2, r5, r2
 800a970:	0c09      	lsrs	r1, r1, #16
 800a972:	0c1b      	lsrs	r3, r3, #16
 800a974:	1a5b      	subs	r3, r3, r1
 800a976:	1411      	asrs	r1, r2, #16
 800a978:	185b      	adds	r3, r3, r1
 800a97a:	141e      	asrs	r6, r3, #16
 800a97c:	b292      	uxth	r2, r2
 800a97e:	041b      	lsls	r3, r3, #16
 800a980:	4313      	orrs	r3, r2
 800a982:	c008      	stmia	r0!, {r3}
 800a984:	9b05      	ldr	r3, [sp, #20]
 800a986:	42a3      	cmp	r3, r4
 800a988:	d2ec      	bcs.n	800a964 <quorem+0xb0>
 800a98a:	9b01      	ldr	r3, [sp, #4]
 800a98c:	9a03      	ldr	r2, [sp, #12]
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	18d3      	adds	r3, r2, r3
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	2a00      	cmp	r2, #0
 800a996:	d015      	beq.n	800a9c4 <quorem+0x110>
 800a998:	9802      	ldr	r0, [sp, #8]
 800a99a:	b009      	add	sp, #36	; 0x24
 800a99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d106      	bne.n	800a9b2 <quorem+0xfe>
 800a9a4:	9b01      	ldr	r3, [sp, #4]
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	9301      	str	r3, [sp, #4]
 800a9aa:	9b03      	ldr	r3, [sp, #12]
 800a9ac:	3c04      	subs	r4, #4
 800a9ae:	42a3      	cmp	r3, r4
 800a9b0:	d3f5      	bcc.n	800a99e <quorem+0xea>
 800a9b2:	9b01      	ldr	r3, [sp, #4]
 800a9b4:	613b      	str	r3, [r7, #16]
 800a9b6:	e7c7      	b.n	800a948 <quorem+0x94>
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	2a00      	cmp	r2, #0
 800a9bc:	d106      	bne.n	800a9cc <quorem+0x118>
 800a9be:	9a01      	ldr	r2, [sp, #4]
 800a9c0:	3a01      	subs	r2, #1
 800a9c2:	9201      	str	r2, [sp, #4]
 800a9c4:	9a03      	ldr	r2, [sp, #12]
 800a9c6:	3b04      	subs	r3, #4
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d3f5      	bcc.n	800a9b8 <quorem+0x104>
 800a9cc:	9b01      	ldr	r3, [sp, #4]
 800a9ce:	613b      	str	r3, [r7, #16]
 800a9d0:	e7e2      	b.n	800a998 <quorem+0xe4>
	...

0800a9d4 <_dtoa_r>:
 800a9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9d6:	0014      	movs	r4, r2
 800a9d8:	001d      	movs	r5, r3
 800a9da:	69c6      	ldr	r6, [r0, #28]
 800a9dc:	b09d      	sub	sp, #116	; 0x74
 800a9de:	9408      	str	r4, [sp, #32]
 800a9e0:	9509      	str	r5, [sp, #36]	; 0x24
 800a9e2:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800a9e4:	9004      	str	r0, [sp, #16]
 800a9e6:	2e00      	cmp	r6, #0
 800a9e8:	d10f      	bne.n	800aa0a <_dtoa_r+0x36>
 800a9ea:	2010      	movs	r0, #16
 800a9ec:	f001 f9a6 	bl	800bd3c <malloc>
 800a9f0:	9b04      	ldr	r3, [sp, #16]
 800a9f2:	1e02      	subs	r2, r0, #0
 800a9f4:	61d8      	str	r0, [r3, #28]
 800a9f6:	d104      	bne.n	800aa02 <_dtoa_r+0x2e>
 800a9f8:	21ef      	movs	r1, #239	; 0xef
 800a9fa:	4bc6      	ldr	r3, [pc, #792]	; (800ad14 <_dtoa_r+0x340>)
 800a9fc:	48c6      	ldr	r0, [pc, #792]	; (800ad18 <_dtoa_r+0x344>)
 800a9fe:	f002 fb41 	bl	800d084 <__assert_func>
 800aa02:	6046      	str	r6, [r0, #4]
 800aa04:	6086      	str	r6, [r0, #8]
 800aa06:	6006      	str	r6, [r0, #0]
 800aa08:	60c6      	str	r6, [r0, #12]
 800aa0a:	9b04      	ldr	r3, [sp, #16]
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	6819      	ldr	r1, [r3, #0]
 800aa10:	2900      	cmp	r1, #0
 800aa12:	d00b      	beq.n	800aa2c <_dtoa_r+0x58>
 800aa14:	685a      	ldr	r2, [r3, #4]
 800aa16:	2301      	movs	r3, #1
 800aa18:	4093      	lsls	r3, r2
 800aa1a:	604a      	str	r2, [r1, #4]
 800aa1c:	608b      	str	r3, [r1, #8]
 800aa1e:	9804      	ldr	r0, [sp, #16]
 800aa20:	f001 faa0 	bl	800bf64 <_Bfree>
 800aa24:	2200      	movs	r2, #0
 800aa26:	9b04      	ldr	r3, [sp, #16]
 800aa28:	69db      	ldr	r3, [r3, #28]
 800aa2a:	601a      	str	r2, [r3, #0]
 800aa2c:	2d00      	cmp	r5, #0
 800aa2e:	da1e      	bge.n	800aa6e <_dtoa_r+0x9a>
 800aa30:	2301      	movs	r3, #1
 800aa32:	603b      	str	r3, [r7, #0]
 800aa34:	006b      	lsls	r3, r5, #1
 800aa36:	085b      	lsrs	r3, r3, #1
 800aa38:	9309      	str	r3, [sp, #36]	; 0x24
 800aa3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa3c:	4bb7      	ldr	r3, [pc, #732]	; (800ad1c <_dtoa_r+0x348>)
 800aa3e:	4ab7      	ldr	r2, [pc, #732]	; (800ad1c <_dtoa_r+0x348>)
 800aa40:	403b      	ands	r3, r7
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d116      	bne.n	800aa74 <_dtoa_r+0xa0>
 800aa46:	4bb6      	ldr	r3, [pc, #728]	; (800ad20 <_dtoa_r+0x34c>)
 800aa48:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa4a:	6013      	str	r3, [r2, #0]
 800aa4c:	033b      	lsls	r3, r7, #12
 800aa4e:	0b1b      	lsrs	r3, r3, #12
 800aa50:	4323      	orrs	r3, r4
 800aa52:	d101      	bne.n	800aa58 <_dtoa_r+0x84>
 800aa54:	f000 fdb5 	bl	800b5c2 <_dtoa_r+0xbee>
 800aa58:	4bb2      	ldr	r3, [pc, #712]	; (800ad24 <_dtoa_r+0x350>)
 800aa5a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa5c:	9306      	str	r3, [sp, #24]
 800aa5e:	2a00      	cmp	r2, #0
 800aa60:	d002      	beq.n	800aa68 <_dtoa_r+0x94>
 800aa62:	4bb1      	ldr	r3, [pc, #708]	; (800ad28 <_dtoa_r+0x354>)
 800aa64:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	9806      	ldr	r0, [sp, #24]
 800aa6a:	b01d      	add	sp, #116	; 0x74
 800aa6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa6e:	2300      	movs	r3, #0
 800aa70:	603b      	str	r3, [r7, #0]
 800aa72:	e7e2      	b.n	800aa3a <_dtoa_r+0x66>
 800aa74:	9a08      	ldr	r2, [sp, #32]
 800aa76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa78:	9210      	str	r2, [sp, #64]	; 0x40
 800aa7a:	9311      	str	r3, [sp, #68]	; 0x44
 800aa7c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aa7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aa80:	2200      	movs	r2, #0
 800aa82:	2300      	movs	r3, #0
 800aa84:	f7f5 fce2 	bl	800044c <__aeabi_dcmpeq>
 800aa88:	1e06      	subs	r6, r0, #0
 800aa8a:	d009      	beq.n	800aaa0 <_dtoa_r+0xcc>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa90:	6013      	str	r3, [r2, #0]
 800aa92:	4ba6      	ldr	r3, [pc, #664]	; (800ad2c <_dtoa_r+0x358>)
 800aa94:	9306      	str	r3, [sp, #24]
 800aa96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d0e5      	beq.n	800aa68 <_dtoa_r+0x94>
 800aa9c:	4ba4      	ldr	r3, [pc, #656]	; (800ad30 <_dtoa_r+0x35c>)
 800aa9e:	e7e1      	b.n	800aa64 <_dtoa_r+0x90>
 800aaa0:	ab1a      	add	r3, sp, #104	; 0x68
 800aaa2:	9301      	str	r3, [sp, #4]
 800aaa4:	ab1b      	add	r3, sp, #108	; 0x6c
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	9804      	ldr	r0, [sp, #16]
 800aaaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aaac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aaae:	f001 fe03 	bl	800c6b8 <__d2b>
 800aab2:	007a      	lsls	r2, r7, #1
 800aab4:	9005      	str	r0, [sp, #20]
 800aab6:	0d52      	lsrs	r2, r2, #21
 800aab8:	d100      	bne.n	800aabc <_dtoa_r+0xe8>
 800aaba:	e07b      	b.n	800abb4 <_dtoa_r+0x1e0>
 800aabc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aabe:	9617      	str	r6, [sp, #92]	; 0x5c
 800aac0:	0319      	lsls	r1, r3, #12
 800aac2:	4b9c      	ldr	r3, [pc, #624]	; (800ad34 <_dtoa_r+0x360>)
 800aac4:	0b09      	lsrs	r1, r1, #12
 800aac6:	430b      	orrs	r3, r1
 800aac8:	499b      	ldr	r1, [pc, #620]	; (800ad38 <_dtoa_r+0x364>)
 800aaca:	1857      	adds	r7, r2, r1
 800aacc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aace:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aad0:	0019      	movs	r1, r3
 800aad2:	2200      	movs	r2, #0
 800aad4:	4b99      	ldr	r3, [pc, #612]	; (800ad3c <_dtoa_r+0x368>)
 800aad6:	f7f7 f88d 	bl	8001bf4 <__aeabi_dsub>
 800aada:	4a99      	ldr	r2, [pc, #612]	; (800ad40 <_dtoa_r+0x36c>)
 800aadc:	4b99      	ldr	r3, [pc, #612]	; (800ad44 <_dtoa_r+0x370>)
 800aade:	f7f6 fdc7 	bl	8001670 <__aeabi_dmul>
 800aae2:	4a99      	ldr	r2, [pc, #612]	; (800ad48 <_dtoa_r+0x374>)
 800aae4:	4b99      	ldr	r3, [pc, #612]	; (800ad4c <_dtoa_r+0x378>)
 800aae6:	f7f5 fe69 	bl	80007bc <__aeabi_dadd>
 800aaea:	0004      	movs	r4, r0
 800aaec:	0038      	movs	r0, r7
 800aaee:	000d      	movs	r5, r1
 800aaf0:	f7f7 fc56 	bl	80023a0 <__aeabi_i2d>
 800aaf4:	4a96      	ldr	r2, [pc, #600]	; (800ad50 <_dtoa_r+0x37c>)
 800aaf6:	4b97      	ldr	r3, [pc, #604]	; (800ad54 <_dtoa_r+0x380>)
 800aaf8:	f7f6 fdba 	bl	8001670 <__aeabi_dmul>
 800aafc:	0002      	movs	r2, r0
 800aafe:	000b      	movs	r3, r1
 800ab00:	0020      	movs	r0, r4
 800ab02:	0029      	movs	r1, r5
 800ab04:	f7f5 fe5a 	bl	80007bc <__aeabi_dadd>
 800ab08:	0004      	movs	r4, r0
 800ab0a:	000d      	movs	r5, r1
 800ab0c:	f7f7 fc12 	bl	8002334 <__aeabi_d2iz>
 800ab10:	2200      	movs	r2, #0
 800ab12:	9003      	str	r0, [sp, #12]
 800ab14:	2300      	movs	r3, #0
 800ab16:	0020      	movs	r0, r4
 800ab18:	0029      	movs	r1, r5
 800ab1a:	f7f5 fc9d 	bl	8000458 <__aeabi_dcmplt>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d00b      	beq.n	800ab3a <_dtoa_r+0x166>
 800ab22:	9803      	ldr	r0, [sp, #12]
 800ab24:	f7f7 fc3c 	bl	80023a0 <__aeabi_i2d>
 800ab28:	002b      	movs	r3, r5
 800ab2a:	0022      	movs	r2, r4
 800ab2c:	f7f5 fc8e 	bl	800044c <__aeabi_dcmpeq>
 800ab30:	4243      	negs	r3, r0
 800ab32:	4158      	adcs	r0, r3
 800ab34:	9b03      	ldr	r3, [sp, #12]
 800ab36:	1a1b      	subs	r3, r3, r0
 800ab38:	9303      	str	r3, [sp, #12]
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	9316      	str	r3, [sp, #88]	; 0x58
 800ab3e:	9b03      	ldr	r3, [sp, #12]
 800ab40:	2b16      	cmp	r3, #22
 800ab42:	d810      	bhi.n	800ab66 <_dtoa_r+0x192>
 800ab44:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ab46:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab48:	9a03      	ldr	r2, [sp, #12]
 800ab4a:	4b83      	ldr	r3, [pc, #524]	; (800ad58 <_dtoa_r+0x384>)
 800ab4c:	00d2      	lsls	r2, r2, #3
 800ab4e:	189b      	adds	r3, r3, r2
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	f7f5 fc80 	bl	8000458 <__aeabi_dcmplt>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d047      	beq.n	800abec <_dtoa_r+0x218>
 800ab5c:	9b03      	ldr	r3, [sp, #12]
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	9303      	str	r3, [sp, #12]
 800ab62:	2300      	movs	r3, #0
 800ab64:	9316      	str	r3, [sp, #88]	; 0x58
 800ab66:	2200      	movs	r2, #0
 800ab68:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ab6a:	920a      	str	r2, [sp, #40]	; 0x28
 800ab6c:	1bdb      	subs	r3, r3, r7
 800ab6e:	1e5a      	subs	r2, r3, #1
 800ab70:	d53e      	bpl.n	800abf0 <_dtoa_r+0x21c>
 800ab72:	2201      	movs	r2, #1
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	930a      	str	r3, [sp, #40]	; 0x28
 800ab78:	2300      	movs	r3, #0
 800ab7a:	930c      	str	r3, [sp, #48]	; 0x30
 800ab7c:	9b03      	ldr	r3, [sp, #12]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	db38      	blt.n	800abf4 <_dtoa_r+0x220>
 800ab82:	9a03      	ldr	r2, [sp, #12]
 800ab84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab86:	4694      	mov	ip, r2
 800ab88:	4463      	add	r3, ip
 800ab8a:	930c      	str	r3, [sp, #48]	; 0x30
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	9213      	str	r2, [sp, #76]	; 0x4c
 800ab90:	930d      	str	r3, [sp, #52]	; 0x34
 800ab92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab94:	2401      	movs	r4, #1
 800ab96:	2b09      	cmp	r3, #9
 800ab98:	d867      	bhi.n	800ac6a <_dtoa_r+0x296>
 800ab9a:	2b05      	cmp	r3, #5
 800ab9c:	dd02      	ble.n	800aba4 <_dtoa_r+0x1d0>
 800ab9e:	2400      	movs	r4, #0
 800aba0:	3b04      	subs	r3, #4
 800aba2:	9322      	str	r3, [sp, #136]	; 0x88
 800aba4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aba6:	1e98      	subs	r0, r3, #2
 800aba8:	2803      	cmp	r0, #3
 800abaa:	d867      	bhi.n	800ac7c <_dtoa_r+0x2a8>
 800abac:	f7f5 fab4 	bl	8000118 <__gnu_thumb1_case_uqi>
 800abb0:	5b383a2b 	.word	0x5b383a2b
 800abb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abb6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800abb8:	18f6      	adds	r6, r6, r3
 800abba:	4b68      	ldr	r3, [pc, #416]	; (800ad5c <_dtoa_r+0x388>)
 800abbc:	18f2      	adds	r2, r6, r3
 800abbe:	2a20      	cmp	r2, #32
 800abc0:	dd0f      	ble.n	800abe2 <_dtoa_r+0x20e>
 800abc2:	2340      	movs	r3, #64	; 0x40
 800abc4:	1a9b      	subs	r3, r3, r2
 800abc6:	409f      	lsls	r7, r3
 800abc8:	4b65      	ldr	r3, [pc, #404]	; (800ad60 <_dtoa_r+0x38c>)
 800abca:	0038      	movs	r0, r7
 800abcc:	18f3      	adds	r3, r6, r3
 800abce:	40dc      	lsrs	r4, r3
 800abd0:	4320      	orrs	r0, r4
 800abd2:	f7f7 fc15 	bl	8002400 <__aeabi_ui2d>
 800abd6:	2201      	movs	r2, #1
 800abd8:	4b62      	ldr	r3, [pc, #392]	; (800ad64 <_dtoa_r+0x390>)
 800abda:	1e77      	subs	r7, r6, #1
 800abdc:	18cb      	adds	r3, r1, r3
 800abde:	9217      	str	r2, [sp, #92]	; 0x5c
 800abe0:	e776      	b.n	800aad0 <_dtoa_r+0xfc>
 800abe2:	2320      	movs	r3, #32
 800abe4:	0020      	movs	r0, r4
 800abe6:	1a9b      	subs	r3, r3, r2
 800abe8:	4098      	lsls	r0, r3
 800abea:	e7f2      	b.n	800abd2 <_dtoa_r+0x1fe>
 800abec:	9016      	str	r0, [sp, #88]	; 0x58
 800abee:	e7ba      	b.n	800ab66 <_dtoa_r+0x192>
 800abf0:	920c      	str	r2, [sp, #48]	; 0x30
 800abf2:	e7c3      	b.n	800ab7c <_dtoa_r+0x1a8>
 800abf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abf6:	9a03      	ldr	r2, [sp, #12]
 800abf8:	1a9b      	subs	r3, r3, r2
 800abfa:	930a      	str	r3, [sp, #40]	; 0x28
 800abfc:	4253      	negs	r3, r2
 800abfe:	930d      	str	r3, [sp, #52]	; 0x34
 800ac00:	2300      	movs	r3, #0
 800ac02:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac04:	e7c5      	b.n	800ab92 <_dtoa_r+0x1be>
 800ac06:	2300      	movs	r3, #0
 800ac08:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac0c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac0e:	9307      	str	r3, [sp, #28]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	dc13      	bgt.n	800ac3c <_dtoa_r+0x268>
 800ac14:	2301      	movs	r3, #1
 800ac16:	001a      	movs	r2, r3
 800ac18:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac1a:	9307      	str	r3, [sp, #28]
 800ac1c:	9223      	str	r2, [sp, #140]	; 0x8c
 800ac1e:	e00d      	b.n	800ac3c <_dtoa_r+0x268>
 800ac20:	2301      	movs	r3, #1
 800ac22:	e7f1      	b.n	800ac08 <_dtoa_r+0x234>
 800ac24:	2300      	movs	r3, #0
 800ac26:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ac28:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac2a:	4694      	mov	ip, r2
 800ac2c:	9b03      	ldr	r3, [sp, #12]
 800ac2e:	4463      	add	r3, ip
 800ac30:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac32:	3301      	adds	r3, #1
 800ac34:	9307      	str	r3, [sp, #28]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	dc00      	bgt.n	800ac3c <_dtoa_r+0x268>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	9a04      	ldr	r2, [sp, #16]
 800ac3e:	2100      	movs	r1, #0
 800ac40:	69d0      	ldr	r0, [r2, #28]
 800ac42:	2204      	movs	r2, #4
 800ac44:	0015      	movs	r5, r2
 800ac46:	3514      	adds	r5, #20
 800ac48:	429d      	cmp	r5, r3
 800ac4a:	d91b      	bls.n	800ac84 <_dtoa_r+0x2b0>
 800ac4c:	6041      	str	r1, [r0, #4]
 800ac4e:	9804      	ldr	r0, [sp, #16]
 800ac50:	f001 f944 	bl	800bedc <_Balloc>
 800ac54:	9006      	str	r0, [sp, #24]
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d117      	bne.n	800ac8a <_dtoa_r+0x2b6>
 800ac5a:	21b0      	movs	r1, #176	; 0xb0
 800ac5c:	4b42      	ldr	r3, [pc, #264]	; (800ad68 <_dtoa_r+0x394>)
 800ac5e:	482e      	ldr	r0, [pc, #184]	; (800ad18 <_dtoa_r+0x344>)
 800ac60:	9a06      	ldr	r2, [sp, #24]
 800ac62:	31ff      	adds	r1, #255	; 0xff
 800ac64:	e6cb      	b.n	800a9fe <_dtoa_r+0x2a>
 800ac66:	2301      	movs	r3, #1
 800ac68:	e7dd      	b.n	800ac26 <_dtoa_r+0x252>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	940f      	str	r4, [sp, #60]	; 0x3c
 800ac6e:	9322      	str	r3, [sp, #136]	; 0x88
 800ac70:	3b01      	subs	r3, #1
 800ac72:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac74:	9307      	str	r3, [sp, #28]
 800ac76:	2200      	movs	r2, #0
 800ac78:	3313      	adds	r3, #19
 800ac7a:	e7cf      	b.n	800ac1c <_dtoa_r+0x248>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac80:	3b02      	subs	r3, #2
 800ac82:	e7f6      	b.n	800ac72 <_dtoa_r+0x29e>
 800ac84:	3101      	adds	r1, #1
 800ac86:	0052      	lsls	r2, r2, #1
 800ac88:	e7dc      	b.n	800ac44 <_dtoa_r+0x270>
 800ac8a:	9b04      	ldr	r3, [sp, #16]
 800ac8c:	9a06      	ldr	r2, [sp, #24]
 800ac8e:	69db      	ldr	r3, [r3, #28]
 800ac90:	601a      	str	r2, [r3, #0]
 800ac92:	9b07      	ldr	r3, [sp, #28]
 800ac94:	2b0e      	cmp	r3, #14
 800ac96:	d900      	bls.n	800ac9a <_dtoa_r+0x2c6>
 800ac98:	e0e5      	b.n	800ae66 <_dtoa_r+0x492>
 800ac9a:	2c00      	cmp	r4, #0
 800ac9c:	d100      	bne.n	800aca0 <_dtoa_r+0x2cc>
 800ac9e:	e0e2      	b.n	800ae66 <_dtoa_r+0x492>
 800aca0:	9b03      	ldr	r3, [sp, #12]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	dd64      	ble.n	800ad70 <_dtoa_r+0x39c>
 800aca6:	210f      	movs	r1, #15
 800aca8:	9a03      	ldr	r2, [sp, #12]
 800acaa:	4b2b      	ldr	r3, [pc, #172]	; (800ad58 <_dtoa_r+0x384>)
 800acac:	400a      	ands	r2, r1
 800acae:	00d2      	lsls	r2, r2, #3
 800acb0:	189b      	adds	r3, r3, r2
 800acb2:	681e      	ldr	r6, [r3, #0]
 800acb4:	685f      	ldr	r7, [r3, #4]
 800acb6:	9b03      	ldr	r3, [sp, #12]
 800acb8:	2402      	movs	r4, #2
 800acba:	111d      	asrs	r5, r3, #4
 800acbc:	05db      	lsls	r3, r3, #23
 800acbe:	d50a      	bpl.n	800acd6 <_dtoa_r+0x302>
 800acc0:	4b2a      	ldr	r3, [pc, #168]	; (800ad6c <_dtoa_r+0x398>)
 800acc2:	400d      	ands	r5, r1
 800acc4:	6a1a      	ldr	r2, [r3, #32]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800acca:	9911      	ldr	r1, [sp, #68]	; 0x44
 800accc:	f7f6 f8d6 	bl	8000e7c <__aeabi_ddiv>
 800acd0:	9008      	str	r0, [sp, #32]
 800acd2:	9109      	str	r1, [sp, #36]	; 0x24
 800acd4:	3401      	adds	r4, #1
 800acd6:	4b25      	ldr	r3, [pc, #148]	; (800ad6c <_dtoa_r+0x398>)
 800acd8:	930e      	str	r3, [sp, #56]	; 0x38
 800acda:	2d00      	cmp	r5, #0
 800acdc:	d108      	bne.n	800acf0 <_dtoa_r+0x31c>
 800acde:	9808      	ldr	r0, [sp, #32]
 800ace0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ace2:	0032      	movs	r2, r6
 800ace4:	003b      	movs	r3, r7
 800ace6:	f7f6 f8c9 	bl	8000e7c <__aeabi_ddiv>
 800acea:	9008      	str	r0, [sp, #32]
 800acec:	9109      	str	r1, [sp, #36]	; 0x24
 800acee:	e05a      	b.n	800ada6 <_dtoa_r+0x3d2>
 800acf0:	2301      	movs	r3, #1
 800acf2:	421d      	tst	r5, r3
 800acf4:	d009      	beq.n	800ad0a <_dtoa_r+0x336>
 800acf6:	18e4      	adds	r4, r4, r3
 800acf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acfa:	0030      	movs	r0, r6
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	0039      	movs	r1, r7
 800ad02:	f7f6 fcb5 	bl	8001670 <__aeabi_dmul>
 800ad06:	0006      	movs	r6, r0
 800ad08:	000f      	movs	r7, r1
 800ad0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad0c:	106d      	asrs	r5, r5, #1
 800ad0e:	3308      	adds	r3, #8
 800ad10:	e7e2      	b.n	800acd8 <_dtoa_r+0x304>
 800ad12:	46c0      	nop			; (mov r8, r8)
 800ad14:	0800d4df 	.word	0x0800d4df
 800ad18:	0800d4f6 	.word	0x0800d4f6
 800ad1c:	7ff00000 	.word	0x7ff00000
 800ad20:	0000270f 	.word	0x0000270f
 800ad24:	0800d4db 	.word	0x0800d4db
 800ad28:	0800d4de 	.word	0x0800d4de
 800ad2c:	0800d4a1 	.word	0x0800d4a1
 800ad30:	0800d4a2 	.word	0x0800d4a2
 800ad34:	3ff00000 	.word	0x3ff00000
 800ad38:	fffffc01 	.word	0xfffffc01
 800ad3c:	3ff80000 	.word	0x3ff80000
 800ad40:	636f4361 	.word	0x636f4361
 800ad44:	3fd287a7 	.word	0x3fd287a7
 800ad48:	8b60c8b3 	.word	0x8b60c8b3
 800ad4c:	3fc68a28 	.word	0x3fc68a28
 800ad50:	509f79fb 	.word	0x509f79fb
 800ad54:	3fd34413 	.word	0x3fd34413
 800ad58:	0800d640 	.word	0x0800d640
 800ad5c:	00000432 	.word	0x00000432
 800ad60:	00000412 	.word	0x00000412
 800ad64:	fe100000 	.word	0xfe100000
 800ad68:	0800d54e 	.word	0x0800d54e
 800ad6c:	0800d618 	.word	0x0800d618
 800ad70:	9b03      	ldr	r3, [sp, #12]
 800ad72:	2402      	movs	r4, #2
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d016      	beq.n	800ada6 <_dtoa_r+0x3d2>
 800ad78:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ad7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad7c:	220f      	movs	r2, #15
 800ad7e:	425d      	negs	r5, r3
 800ad80:	402a      	ands	r2, r5
 800ad82:	4bdd      	ldr	r3, [pc, #884]	; (800b0f8 <_dtoa_r+0x724>)
 800ad84:	00d2      	lsls	r2, r2, #3
 800ad86:	189b      	adds	r3, r3, r2
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	f7f6 fc70 	bl	8001670 <__aeabi_dmul>
 800ad90:	2701      	movs	r7, #1
 800ad92:	2300      	movs	r3, #0
 800ad94:	9008      	str	r0, [sp, #32]
 800ad96:	9109      	str	r1, [sp, #36]	; 0x24
 800ad98:	4ed8      	ldr	r6, [pc, #864]	; (800b0fc <_dtoa_r+0x728>)
 800ad9a:	112d      	asrs	r5, r5, #4
 800ad9c:	2d00      	cmp	r5, #0
 800ad9e:	d000      	beq.n	800ada2 <_dtoa_r+0x3ce>
 800ada0:	e091      	b.n	800aec6 <_dtoa_r+0x4f2>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1a1      	bne.n	800acea <_dtoa_r+0x316>
 800ada6:	9e08      	ldr	r6, [sp, #32]
 800ada8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800adaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800adac:	2b00      	cmp	r3, #0
 800adae:	d100      	bne.n	800adb2 <_dtoa_r+0x3de>
 800adb0:	e094      	b.n	800aedc <_dtoa_r+0x508>
 800adb2:	2200      	movs	r2, #0
 800adb4:	0030      	movs	r0, r6
 800adb6:	0039      	movs	r1, r7
 800adb8:	4bd1      	ldr	r3, [pc, #836]	; (800b100 <_dtoa_r+0x72c>)
 800adba:	f7f5 fb4d 	bl	8000458 <__aeabi_dcmplt>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	d100      	bne.n	800adc4 <_dtoa_r+0x3f0>
 800adc2:	e08b      	b.n	800aedc <_dtoa_r+0x508>
 800adc4:	9b07      	ldr	r3, [sp, #28]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d100      	bne.n	800adcc <_dtoa_r+0x3f8>
 800adca:	e087      	b.n	800aedc <_dtoa_r+0x508>
 800adcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adce:	2b00      	cmp	r3, #0
 800add0:	dd45      	ble.n	800ae5e <_dtoa_r+0x48a>
 800add2:	9b03      	ldr	r3, [sp, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	3b01      	subs	r3, #1
 800add8:	930e      	str	r3, [sp, #56]	; 0x38
 800adda:	0030      	movs	r0, r6
 800addc:	4bc9      	ldr	r3, [pc, #804]	; (800b104 <_dtoa_r+0x730>)
 800adde:	0039      	movs	r1, r7
 800ade0:	f7f6 fc46 	bl	8001670 <__aeabi_dmul>
 800ade4:	9008      	str	r0, [sp, #32]
 800ade6:	9109      	str	r1, [sp, #36]	; 0x24
 800ade8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adea:	3401      	adds	r4, #1
 800adec:	0020      	movs	r0, r4
 800adee:	9e08      	ldr	r6, [sp, #32]
 800adf0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800adf2:	9312      	str	r3, [sp, #72]	; 0x48
 800adf4:	f7f7 fad4 	bl	80023a0 <__aeabi_i2d>
 800adf8:	0032      	movs	r2, r6
 800adfa:	003b      	movs	r3, r7
 800adfc:	f7f6 fc38 	bl	8001670 <__aeabi_dmul>
 800ae00:	2200      	movs	r2, #0
 800ae02:	4bc1      	ldr	r3, [pc, #772]	; (800b108 <_dtoa_r+0x734>)
 800ae04:	f7f5 fcda 	bl	80007bc <__aeabi_dadd>
 800ae08:	4ac0      	ldr	r2, [pc, #768]	; (800b10c <_dtoa_r+0x738>)
 800ae0a:	9014      	str	r0, [sp, #80]	; 0x50
 800ae0c:	9115      	str	r1, [sp, #84]	; 0x54
 800ae0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae10:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ae12:	4694      	mov	ip, r2
 800ae14:	9308      	str	r3, [sp, #32]
 800ae16:	9409      	str	r4, [sp, #36]	; 0x24
 800ae18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae1a:	4463      	add	r3, ip
 800ae1c:	9318      	str	r3, [sp, #96]	; 0x60
 800ae1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d15e      	bne.n	800aee4 <_dtoa_r+0x510>
 800ae26:	2200      	movs	r2, #0
 800ae28:	4bb9      	ldr	r3, [pc, #740]	; (800b110 <_dtoa_r+0x73c>)
 800ae2a:	0030      	movs	r0, r6
 800ae2c:	0039      	movs	r1, r7
 800ae2e:	f7f6 fee1 	bl	8001bf4 <__aeabi_dsub>
 800ae32:	9a08      	ldr	r2, [sp, #32]
 800ae34:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ae36:	0004      	movs	r4, r0
 800ae38:	000d      	movs	r5, r1
 800ae3a:	f7f5 fb21 	bl	8000480 <__aeabi_dcmpgt>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d000      	beq.n	800ae44 <_dtoa_r+0x470>
 800ae42:	e2b3      	b.n	800b3ac <_dtoa_r+0x9d8>
 800ae44:	48b3      	ldr	r0, [pc, #716]	; (800b114 <_dtoa_r+0x740>)
 800ae46:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ae48:	4684      	mov	ip, r0
 800ae4a:	4461      	add	r1, ip
 800ae4c:	000b      	movs	r3, r1
 800ae4e:	0020      	movs	r0, r4
 800ae50:	0029      	movs	r1, r5
 800ae52:	9a08      	ldr	r2, [sp, #32]
 800ae54:	f7f5 fb00 	bl	8000458 <__aeabi_dcmplt>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d000      	beq.n	800ae5e <_dtoa_r+0x48a>
 800ae5c:	e2a3      	b.n	800b3a6 <_dtoa_r+0x9d2>
 800ae5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae60:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ae62:	9308      	str	r3, [sp, #32]
 800ae64:	9409      	str	r4, [sp, #36]	; 0x24
 800ae66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	da00      	bge.n	800ae6e <_dtoa_r+0x49a>
 800ae6c:	e179      	b.n	800b162 <_dtoa_r+0x78e>
 800ae6e:	9a03      	ldr	r2, [sp, #12]
 800ae70:	2a0e      	cmp	r2, #14
 800ae72:	dd00      	ble.n	800ae76 <_dtoa_r+0x4a2>
 800ae74:	e175      	b.n	800b162 <_dtoa_r+0x78e>
 800ae76:	4ba0      	ldr	r3, [pc, #640]	; (800b0f8 <_dtoa_r+0x724>)
 800ae78:	00d2      	lsls	r2, r2, #3
 800ae7a:	189b      	adds	r3, r3, r2
 800ae7c:	681e      	ldr	r6, [r3, #0]
 800ae7e:	685f      	ldr	r7, [r3, #4]
 800ae80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	db00      	blt.n	800ae88 <_dtoa_r+0x4b4>
 800ae86:	e0e5      	b.n	800b054 <_dtoa_r+0x680>
 800ae88:	9b07      	ldr	r3, [sp, #28]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	dd00      	ble.n	800ae90 <_dtoa_r+0x4bc>
 800ae8e:	e0e1      	b.n	800b054 <_dtoa_r+0x680>
 800ae90:	d000      	beq.n	800ae94 <_dtoa_r+0x4c0>
 800ae92:	e288      	b.n	800b3a6 <_dtoa_r+0x9d2>
 800ae94:	2200      	movs	r2, #0
 800ae96:	0030      	movs	r0, r6
 800ae98:	0039      	movs	r1, r7
 800ae9a:	4b9d      	ldr	r3, [pc, #628]	; (800b110 <_dtoa_r+0x73c>)
 800ae9c:	f7f6 fbe8 	bl	8001670 <__aeabi_dmul>
 800aea0:	9a08      	ldr	r2, [sp, #32]
 800aea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea4:	f7f5 faf6 	bl	8000494 <__aeabi_dcmpge>
 800aea8:	9e07      	ldr	r6, [sp, #28]
 800aeaa:	0037      	movs	r7, r6
 800aeac:	2800      	cmp	r0, #0
 800aeae:	d000      	beq.n	800aeb2 <_dtoa_r+0x4de>
 800aeb0:	e25f      	b.n	800b372 <_dtoa_r+0x99e>
 800aeb2:	9b06      	ldr	r3, [sp, #24]
 800aeb4:	9a06      	ldr	r2, [sp, #24]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	9308      	str	r3, [sp, #32]
 800aeba:	2331      	movs	r3, #49	; 0x31
 800aebc:	7013      	strb	r3, [r2, #0]
 800aebe:	9b03      	ldr	r3, [sp, #12]
 800aec0:	3301      	adds	r3, #1
 800aec2:	9303      	str	r3, [sp, #12]
 800aec4:	e25a      	b.n	800b37c <_dtoa_r+0x9a8>
 800aec6:	423d      	tst	r5, r7
 800aec8:	d005      	beq.n	800aed6 <_dtoa_r+0x502>
 800aeca:	6832      	ldr	r2, [r6, #0]
 800aecc:	6873      	ldr	r3, [r6, #4]
 800aece:	f7f6 fbcf 	bl	8001670 <__aeabi_dmul>
 800aed2:	003b      	movs	r3, r7
 800aed4:	3401      	adds	r4, #1
 800aed6:	106d      	asrs	r5, r5, #1
 800aed8:	3608      	adds	r6, #8
 800aeda:	e75f      	b.n	800ad9c <_dtoa_r+0x3c8>
 800aedc:	9b03      	ldr	r3, [sp, #12]
 800aede:	930e      	str	r3, [sp, #56]	; 0x38
 800aee0:	9b07      	ldr	r3, [sp, #28]
 800aee2:	e783      	b.n	800adec <_dtoa_r+0x418>
 800aee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aee6:	4b84      	ldr	r3, [pc, #528]	; (800b0f8 <_dtoa_r+0x724>)
 800aee8:	3a01      	subs	r2, #1
 800aeea:	00d2      	lsls	r2, r2, #3
 800aeec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aeee:	189b      	adds	r3, r3, r2
 800aef0:	9c08      	ldr	r4, [sp, #32]
 800aef2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	2900      	cmp	r1, #0
 800aefa:	d051      	beq.n	800afa0 <_dtoa_r+0x5cc>
 800aefc:	2000      	movs	r0, #0
 800aefe:	4986      	ldr	r1, [pc, #536]	; (800b118 <_dtoa_r+0x744>)
 800af00:	f7f5 ffbc 	bl	8000e7c <__aeabi_ddiv>
 800af04:	0022      	movs	r2, r4
 800af06:	002b      	movs	r3, r5
 800af08:	f7f6 fe74 	bl	8001bf4 <__aeabi_dsub>
 800af0c:	9a06      	ldr	r2, [sp, #24]
 800af0e:	0004      	movs	r4, r0
 800af10:	4694      	mov	ip, r2
 800af12:	000d      	movs	r5, r1
 800af14:	9b06      	ldr	r3, [sp, #24]
 800af16:	9314      	str	r3, [sp, #80]	; 0x50
 800af18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af1a:	4463      	add	r3, ip
 800af1c:	9318      	str	r3, [sp, #96]	; 0x60
 800af1e:	0039      	movs	r1, r7
 800af20:	0030      	movs	r0, r6
 800af22:	f7f7 fa07 	bl	8002334 <__aeabi_d2iz>
 800af26:	9012      	str	r0, [sp, #72]	; 0x48
 800af28:	f7f7 fa3a 	bl	80023a0 <__aeabi_i2d>
 800af2c:	0002      	movs	r2, r0
 800af2e:	000b      	movs	r3, r1
 800af30:	0030      	movs	r0, r6
 800af32:	0039      	movs	r1, r7
 800af34:	f7f6 fe5e 	bl	8001bf4 <__aeabi_dsub>
 800af38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af3c:	3301      	adds	r3, #1
 800af3e:	9308      	str	r3, [sp, #32]
 800af40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af42:	0006      	movs	r6, r0
 800af44:	3330      	adds	r3, #48	; 0x30
 800af46:	7013      	strb	r3, [r2, #0]
 800af48:	0022      	movs	r2, r4
 800af4a:	002b      	movs	r3, r5
 800af4c:	000f      	movs	r7, r1
 800af4e:	f7f5 fa83 	bl	8000458 <__aeabi_dcmplt>
 800af52:	2800      	cmp	r0, #0
 800af54:	d174      	bne.n	800b040 <_dtoa_r+0x66c>
 800af56:	0032      	movs	r2, r6
 800af58:	003b      	movs	r3, r7
 800af5a:	2000      	movs	r0, #0
 800af5c:	4968      	ldr	r1, [pc, #416]	; (800b100 <_dtoa_r+0x72c>)
 800af5e:	f7f6 fe49 	bl	8001bf4 <__aeabi_dsub>
 800af62:	0022      	movs	r2, r4
 800af64:	002b      	movs	r3, r5
 800af66:	f7f5 fa77 	bl	8000458 <__aeabi_dcmplt>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d000      	beq.n	800af70 <_dtoa_r+0x59c>
 800af6e:	e0d7      	b.n	800b120 <_dtoa_r+0x74c>
 800af70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800af72:	9a08      	ldr	r2, [sp, #32]
 800af74:	4293      	cmp	r3, r2
 800af76:	d100      	bne.n	800af7a <_dtoa_r+0x5a6>
 800af78:	e771      	b.n	800ae5e <_dtoa_r+0x48a>
 800af7a:	2200      	movs	r2, #0
 800af7c:	0020      	movs	r0, r4
 800af7e:	0029      	movs	r1, r5
 800af80:	4b60      	ldr	r3, [pc, #384]	; (800b104 <_dtoa_r+0x730>)
 800af82:	f7f6 fb75 	bl	8001670 <__aeabi_dmul>
 800af86:	4b5f      	ldr	r3, [pc, #380]	; (800b104 <_dtoa_r+0x730>)
 800af88:	0004      	movs	r4, r0
 800af8a:	000d      	movs	r5, r1
 800af8c:	0030      	movs	r0, r6
 800af8e:	0039      	movs	r1, r7
 800af90:	2200      	movs	r2, #0
 800af92:	f7f6 fb6d 	bl	8001670 <__aeabi_dmul>
 800af96:	9b08      	ldr	r3, [sp, #32]
 800af98:	0006      	movs	r6, r0
 800af9a:	000f      	movs	r7, r1
 800af9c:	9314      	str	r3, [sp, #80]	; 0x50
 800af9e:	e7be      	b.n	800af1e <_dtoa_r+0x54a>
 800afa0:	0020      	movs	r0, r4
 800afa2:	0029      	movs	r1, r5
 800afa4:	f7f6 fb64 	bl	8001670 <__aeabi_dmul>
 800afa8:	9a06      	ldr	r2, [sp, #24]
 800afaa:	9b06      	ldr	r3, [sp, #24]
 800afac:	4694      	mov	ip, r2
 800afae:	9308      	str	r3, [sp, #32]
 800afb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afb2:	9014      	str	r0, [sp, #80]	; 0x50
 800afb4:	9115      	str	r1, [sp, #84]	; 0x54
 800afb6:	4463      	add	r3, ip
 800afb8:	9319      	str	r3, [sp, #100]	; 0x64
 800afba:	0030      	movs	r0, r6
 800afbc:	0039      	movs	r1, r7
 800afbe:	f7f7 f9b9 	bl	8002334 <__aeabi_d2iz>
 800afc2:	9018      	str	r0, [sp, #96]	; 0x60
 800afc4:	f7f7 f9ec 	bl	80023a0 <__aeabi_i2d>
 800afc8:	0002      	movs	r2, r0
 800afca:	000b      	movs	r3, r1
 800afcc:	0030      	movs	r0, r6
 800afce:	0039      	movs	r1, r7
 800afd0:	f7f6 fe10 	bl	8001bf4 <__aeabi_dsub>
 800afd4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800afd6:	9b08      	ldr	r3, [sp, #32]
 800afd8:	3630      	adds	r6, #48	; 0x30
 800afda:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800afdc:	701e      	strb	r6, [r3, #0]
 800afde:	3301      	adds	r3, #1
 800afe0:	0004      	movs	r4, r0
 800afe2:	000d      	movs	r5, r1
 800afe4:	9308      	str	r3, [sp, #32]
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d12d      	bne.n	800b046 <_dtoa_r+0x672>
 800afea:	9814      	ldr	r0, [sp, #80]	; 0x50
 800afec:	9915      	ldr	r1, [sp, #84]	; 0x54
 800afee:	9a06      	ldr	r2, [sp, #24]
 800aff0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aff2:	4694      	mov	ip, r2
 800aff4:	4463      	add	r3, ip
 800aff6:	2200      	movs	r2, #0
 800aff8:	9308      	str	r3, [sp, #32]
 800affa:	4b47      	ldr	r3, [pc, #284]	; (800b118 <_dtoa_r+0x744>)
 800affc:	f7f5 fbde 	bl	80007bc <__aeabi_dadd>
 800b000:	0002      	movs	r2, r0
 800b002:	000b      	movs	r3, r1
 800b004:	0020      	movs	r0, r4
 800b006:	0029      	movs	r1, r5
 800b008:	f7f5 fa3a 	bl	8000480 <__aeabi_dcmpgt>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d000      	beq.n	800b012 <_dtoa_r+0x63e>
 800b010:	e086      	b.n	800b120 <_dtoa_r+0x74c>
 800b012:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b016:	2000      	movs	r0, #0
 800b018:	493f      	ldr	r1, [pc, #252]	; (800b118 <_dtoa_r+0x744>)
 800b01a:	f7f6 fdeb 	bl	8001bf4 <__aeabi_dsub>
 800b01e:	0002      	movs	r2, r0
 800b020:	000b      	movs	r3, r1
 800b022:	0020      	movs	r0, r4
 800b024:	0029      	movs	r1, r5
 800b026:	f7f5 fa17 	bl	8000458 <__aeabi_dcmplt>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d100      	bne.n	800b030 <_dtoa_r+0x65c>
 800b02e:	e716      	b.n	800ae5e <_dtoa_r+0x48a>
 800b030:	9b08      	ldr	r3, [sp, #32]
 800b032:	001a      	movs	r2, r3
 800b034:	3a01      	subs	r2, #1
 800b036:	9208      	str	r2, [sp, #32]
 800b038:	7812      	ldrb	r2, [r2, #0]
 800b03a:	2a30      	cmp	r2, #48	; 0x30
 800b03c:	d0f8      	beq.n	800b030 <_dtoa_r+0x65c>
 800b03e:	9308      	str	r3, [sp, #32]
 800b040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b042:	9303      	str	r3, [sp, #12]
 800b044:	e046      	b.n	800b0d4 <_dtoa_r+0x700>
 800b046:	2200      	movs	r2, #0
 800b048:	4b2e      	ldr	r3, [pc, #184]	; (800b104 <_dtoa_r+0x730>)
 800b04a:	f7f6 fb11 	bl	8001670 <__aeabi_dmul>
 800b04e:	0006      	movs	r6, r0
 800b050:	000f      	movs	r7, r1
 800b052:	e7b2      	b.n	800afba <_dtoa_r+0x5e6>
 800b054:	9b06      	ldr	r3, [sp, #24]
 800b056:	9a06      	ldr	r2, [sp, #24]
 800b058:	930a      	str	r3, [sp, #40]	; 0x28
 800b05a:	9b07      	ldr	r3, [sp, #28]
 800b05c:	9c08      	ldr	r4, [sp, #32]
 800b05e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b060:	3b01      	subs	r3, #1
 800b062:	189b      	adds	r3, r3, r2
 800b064:	930b      	str	r3, [sp, #44]	; 0x2c
 800b066:	0032      	movs	r2, r6
 800b068:	003b      	movs	r3, r7
 800b06a:	0020      	movs	r0, r4
 800b06c:	0029      	movs	r1, r5
 800b06e:	f7f5 ff05 	bl	8000e7c <__aeabi_ddiv>
 800b072:	f7f7 f95f 	bl	8002334 <__aeabi_d2iz>
 800b076:	9007      	str	r0, [sp, #28]
 800b078:	f7f7 f992 	bl	80023a0 <__aeabi_i2d>
 800b07c:	0032      	movs	r2, r6
 800b07e:	003b      	movs	r3, r7
 800b080:	f7f6 faf6 	bl	8001670 <__aeabi_dmul>
 800b084:	0002      	movs	r2, r0
 800b086:	000b      	movs	r3, r1
 800b088:	0020      	movs	r0, r4
 800b08a:	0029      	movs	r1, r5
 800b08c:	f7f6 fdb2 	bl	8001bf4 <__aeabi_dsub>
 800b090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b092:	001a      	movs	r2, r3
 800b094:	3201      	adds	r2, #1
 800b096:	920a      	str	r2, [sp, #40]	; 0x28
 800b098:	9208      	str	r2, [sp, #32]
 800b09a:	9a07      	ldr	r2, [sp, #28]
 800b09c:	3230      	adds	r2, #48	; 0x30
 800b09e:	701a      	strb	r2, [r3, #0]
 800b0a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d14f      	bne.n	800b146 <_dtoa_r+0x772>
 800b0a6:	0002      	movs	r2, r0
 800b0a8:	000b      	movs	r3, r1
 800b0aa:	f7f5 fb87 	bl	80007bc <__aeabi_dadd>
 800b0ae:	0032      	movs	r2, r6
 800b0b0:	003b      	movs	r3, r7
 800b0b2:	0004      	movs	r4, r0
 800b0b4:	000d      	movs	r5, r1
 800b0b6:	f7f5 f9e3 	bl	8000480 <__aeabi_dcmpgt>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d12e      	bne.n	800b11c <_dtoa_r+0x748>
 800b0be:	0032      	movs	r2, r6
 800b0c0:	003b      	movs	r3, r7
 800b0c2:	0020      	movs	r0, r4
 800b0c4:	0029      	movs	r1, r5
 800b0c6:	f7f5 f9c1 	bl	800044c <__aeabi_dcmpeq>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d002      	beq.n	800b0d4 <_dtoa_r+0x700>
 800b0ce:	9b07      	ldr	r3, [sp, #28]
 800b0d0:	07de      	lsls	r6, r3, #31
 800b0d2:	d423      	bmi.n	800b11c <_dtoa_r+0x748>
 800b0d4:	9905      	ldr	r1, [sp, #20]
 800b0d6:	9804      	ldr	r0, [sp, #16]
 800b0d8:	f000 ff44 	bl	800bf64 <_Bfree>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	9a08      	ldr	r2, [sp, #32]
 800b0e0:	7013      	strb	r3, [r2, #0]
 800b0e2:	9b03      	ldr	r3, [sp, #12]
 800b0e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	6013      	str	r3, [r2, #0]
 800b0ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d100      	bne.n	800b0f2 <_dtoa_r+0x71e>
 800b0f0:	e4ba      	b.n	800aa68 <_dtoa_r+0x94>
 800b0f2:	9a08      	ldr	r2, [sp, #32]
 800b0f4:	601a      	str	r2, [r3, #0]
 800b0f6:	e4b7      	b.n	800aa68 <_dtoa_r+0x94>
 800b0f8:	0800d640 	.word	0x0800d640
 800b0fc:	0800d618 	.word	0x0800d618
 800b100:	3ff00000 	.word	0x3ff00000
 800b104:	40240000 	.word	0x40240000
 800b108:	401c0000 	.word	0x401c0000
 800b10c:	fcc00000 	.word	0xfcc00000
 800b110:	40140000 	.word	0x40140000
 800b114:	7cc00000 	.word	0x7cc00000
 800b118:	3fe00000 	.word	0x3fe00000
 800b11c:	9b03      	ldr	r3, [sp, #12]
 800b11e:	930e      	str	r3, [sp, #56]	; 0x38
 800b120:	9b08      	ldr	r3, [sp, #32]
 800b122:	9308      	str	r3, [sp, #32]
 800b124:	3b01      	subs	r3, #1
 800b126:	781a      	ldrb	r2, [r3, #0]
 800b128:	2a39      	cmp	r2, #57	; 0x39
 800b12a:	d108      	bne.n	800b13e <_dtoa_r+0x76a>
 800b12c:	9a06      	ldr	r2, [sp, #24]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d1f7      	bne.n	800b122 <_dtoa_r+0x74e>
 800b132:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b134:	9906      	ldr	r1, [sp, #24]
 800b136:	3201      	adds	r2, #1
 800b138:	920e      	str	r2, [sp, #56]	; 0x38
 800b13a:	2230      	movs	r2, #48	; 0x30
 800b13c:	700a      	strb	r2, [r1, #0]
 800b13e:	781a      	ldrb	r2, [r3, #0]
 800b140:	3201      	adds	r2, #1
 800b142:	701a      	strb	r2, [r3, #0]
 800b144:	e77c      	b.n	800b040 <_dtoa_r+0x66c>
 800b146:	2200      	movs	r2, #0
 800b148:	4ba9      	ldr	r3, [pc, #676]	; (800b3f0 <_dtoa_r+0xa1c>)
 800b14a:	f7f6 fa91 	bl	8001670 <__aeabi_dmul>
 800b14e:	2200      	movs	r2, #0
 800b150:	2300      	movs	r3, #0
 800b152:	0004      	movs	r4, r0
 800b154:	000d      	movs	r5, r1
 800b156:	f7f5 f979 	bl	800044c <__aeabi_dcmpeq>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d100      	bne.n	800b160 <_dtoa_r+0x78c>
 800b15e:	e782      	b.n	800b066 <_dtoa_r+0x692>
 800b160:	e7b8      	b.n	800b0d4 <_dtoa_r+0x700>
 800b162:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b164:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b166:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b168:	2f00      	cmp	r7, #0
 800b16a:	d012      	beq.n	800b192 <_dtoa_r+0x7be>
 800b16c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b16e:	2a01      	cmp	r2, #1
 800b170:	dc6e      	bgt.n	800b250 <_dtoa_r+0x87c>
 800b172:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b174:	2a00      	cmp	r2, #0
 800b176:	d065      	beq.n	800b244 <_dtoa_r+0x870>
 800b178:	4a9e      	ldr	r2, [pc, #632]	; (800b3f4 <_dtoa_r+0xa20>)
 800b17a:	189b      	adds	r3, r3, r2
 800b17c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b17e:	2101      	movs	r1, #1
 800b180:	18d2      	adds	r2, r2, r3
 800b182:	920a      	str	r2, [sp, #40]	; 0x28
 800b184:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b186:	9804      	ldr	r0, [sp, #16]
 800b188:	18d3      	adds	r3, r2, r3
 800b18a:	930c      	str	r3, [sp, #48]	; 0x30
 800b18c:	f000 ffe6 	bl	800c15c <__i2b>
 800b190:	0007      	movs	r7, r0
 800b192:	2c00      	cmp	r4, #0
 800b194:	d00e      	beq.n	800b1b4 <_dtoa_r+0x7e0>
 800b196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b198:	2b00      	cmp	r3, #0
 800b19a:	dd0b      	ble.n	800b1b4 <_dtoa_r+0x7e0>
 800b19c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b19e:	0023      	movs	r3, r4
 800b1a0:	4294      	cmp	r4, r2
 800b1a2:	dd00      	ble.n	800b1a6 <_dtoa_r+0x7d2>
 800b1a4:	0013      	movs	r3, r2
 800b1a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1a8:	1ae4      	subs	r4, r4, r3
 800b1aa:	1ad2      	subs	r2, r2, r3
 800b1ac:	920a      	str	r2, [sp, #40]	; 0x28
 800b1ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	930c      	str	r3, [sp, #48]	; 0x30
 800b1b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d01e      	beq.n	800b1f8 <_dtoa_r+0x824>
 800b1ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d05c      	beq.n	800b27a <_dtoa_r+0x8a6>
 800b1c0:	2d00      	cmp	r5, #0
 800b1c2:	dd10      	ble.n	800b1e6 <_dtoa_r+0x812>
 800b1c4:	0039      	movs	r1, r7
 800b1c6:	002a      	movs	r2, r5
 800b1c8:	9804      	ldr	r0, [sp, #16]
 800b1ca:	f001 f88f 	bl	800c2ec <__pow5mult>
 800b1ce:	9a05      	ldr	r2, [sp, #20]
 800b1d0:	0001      	movs	r1, r0
 800b1d2:	0007      	movs	r7, r0
 800b1d4:	9804      	ldr	r0, [sp, #16]
 800b1d6:	f000 ffd9 	bl	800c18c <__multiply>
 800b1da:	0006      	movs	r6, r0
 800b1dc:	9905      	ldr	r1, [sp, #20]
 800b1de:	9804      	ldr	r0, [sp, #16]
 800b1e0:	f000 fec0 	bl	800bf64 <_Bfree>
 800b1e4:	9605      	str	r6, [sp, #20]
 800b1e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1e8:	1b5a      	subs	r2, r3, r5
 800b1ea:	42ab      	cmp	r3, r5
 800b1ec:	d004      	beq.n	800b1f8 <_dtoa_r+0x824>
 800b1ee:	9905      	ldr	r1, [sp, #20]
 800b1f0:	9804      	ldr	r0, [sp, #16]
 800b1f2:	f001 f87b 	bl	800c2ec <__pow5mult>
 800b1f6:	9005      	str	r0, [sp, #20]
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	9804      	ldr	r0, [sp, #16]
 800b1fc:	f000 ffae 	bl	800c15c <__i2b>
 800b200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b202:	0006      	movs	r6, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	dd3a      	ble.n	800b27e <_dtoa_r+0x8aa>
 800b208:	001a      	movs	r2, r3
 800b20a:	0001      	movs	r1, r0
 800b20c:	9804      	ldr	r0, [sp, #16]
 800b20e:	f001 f86d 	bl	800c2ec <__pow5mult>
 800b212:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b214:	0006      	movs	r6, r0
 800b216:	2500      	movs	r5, #0
 800b218:	2b01      	cmp	r3, #1
 800b21a:	dc38      	bgt.n	800b28e <_dtoa_r+0x8ba>
 800b21c:	2500      	movs	r5, #0
 800b21e:	9b08      	ldr	r3, [sp, #32]
 800b220:	42ab      	cmp	r3, r5
 800b222:	d130      	bne.n	800b286 <_dtoa_r+0x8b2>
 800b224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b226:	031b      	lsls	r3, r3, #12
 800b228:	42ab      	cmp	r3, r5
 800b22a:	d12c      	bne.n	800b286 <_dtoa_r+0x8b2>
 800b22c:	4b72      	ldr	r3, [pc, #456]	; (800b3f8 <_dtoa_r+0xa24>)
 800b22e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b230:	4213      	tst	r3, r2
 800b232:	d028      	beq.n	800b286 <_dtoa_r+0x8b2>
 800b234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b236:	3501      	adds	r5, #1
 800b238:	3301      	adds	r3, #1
 800b23a:	930a      	str	r3, [sp, #40]	; 0x28
 800b23c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b23e:	3301      	adds	r3, #1
 800b240:	930c      	str	r3, [sp, #48]	; 0x30
 800b242:	e020      	b.n	800b286 <_dtoa_r+0x8b2>
 800b244:	2336      	movs	r3, #54	; 0x36
 800b246:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b248:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b24a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b24c:	1a9b      	subs	r3, r3, r2
 800b24e:	e795      	b.n	800b17c <_dtoa_r+0x7a8>
 800b250:	9b07      	ldr	r3, [sp, #28]
 800b252:	1e5d      	subs	r5, r3, #1
 800b254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b256:	42ab      	cmp	r3, r5
 800b258:	db07      	blt.n	800b26a <_dtoa_r+0x896>
 800b25a:	1b5d      	subs	r5, r3, r5
 800b25c:	9b07      	ldr	r3, [sp, #28]
 800b25e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b260:	2b00      	cmp	r3, #0
 800b262:	da8b      	bge.n	800b17c <_dtoa_r+0x7a8>
 800b264:	1ae4      	subs	r4, r4, r3
 800b266:	2300      	movs	r3, #0
 800b268:	e788      	b.n	800b17c <_dtoa_r+0x7a8>
 800b26a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b26c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b26e:	1aeb      	subs	r3, r5, r3
 800b270:	18d3      	adds	r3, r2, r3
 800b272:	950d      	str	r5, [sp, #52]	; 0x34
 800b274:	9313      	str	r3, [sp, #76]	; 0x4c
 800b276:	2500      	movs	r5, #0
 800b278:	e7f0      	b.n	800b25c <_dtoa_r+0x888>
 800b27a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b27c:	e7b7      	b.n	800b1ee <_dtoa_r+0x81a>
 800b27e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b280:	2500      	movs	r5, #0
 800b282:	2b01      	cmp	r3, #1
 800b284:	ddca      	ble.n	800b21c <_dtoa_r+0x848>
 800b286:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b288:	2001      	movs	r0, #1
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d008      	beq.n	800b2a0 <_dtoa_r+0x8cc>
 800b28e:	6933      	ldr	r3, [r6, #16]
 800b290:	3303      	adds	r3, #3
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	18f3      	adds	r3, r6, r3
 800b296:	6858      	ldr	r0, [r3, #4]
 800b298:	f000 ff18 	bl	800c0cc <__hi0bits>
 800b29c:	2320      	movs	r3, #32
 800b29e:	1a18      	subs	r0, r3, r0
 800b2a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2a2:	1818      	adds	r0, r3, r0
 800b2a4:	0002      	movs	r2, r0
 800b2a6:	231f      	movs	r3, #31
 800b2a8:	401a      	ands	r2, r3
 800b2aa:	4218      	tst	r0, r3
 800b2ac:	d047      	beq.n	800b33e <_dtoa_r+0x96a>
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	1a9b      	subs	r3, r3, r2
 800b2b2:	2b04      	cmp	r3, #4
 800b2b4:	dd3f      	ble.n	800b336 <_dtoa_r+0x962>
 800b2b6:	231c      	movs	r3, #28
 800b2b8:	1a9b      	subs	r3, r3, r2
 800b2ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2bc:	18e4      	adds	r4, r4, r3
 800b2be:	18d2      	adds	r2, r2, r3
 800b2c0:	920a      	str	r2, [sp, #40]	; 0x28
 800b2c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2c4:	18d3      	adds	r3, r2, r3
 800b2c6:	930c      	str	r3, [sp, #48]	; 0x30
 800b2c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	dd05      	ble.n	800b2da <_dtoa_r+0x906>
 800b2ce:	001a      	movs	r2, r3
 800b2d0:	9905      	ldr	r1, [sp, #20]
 800b2d2:	9804      	ldr	r0, [sp, #16]
 800b2d4:	f001 f866 	bl	800c3a4 <__lshift>
 800b2d8:	9005      	str	r0, [sp, #20]
 800b2da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	dd05      	ble.n	800b2ec <_dtoa_r+0x918>
 800b2e0:	0031      	movs	r1, r6
 800b2e2:	001a      	movs	r2, r3
 800b2e4:	9804      	ldr	r0, [sp, #16]
 800b2e6:	f001 f85d 	bl	800c3a4 <__lshift>
 800b2ea:	0006      	movs	r6, r0
 800b2ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d027      	beq.n	800b342 <_dtoa_r+0x96e>
 800b2f2:	0031      	movs	r1, r6
 800b2f4:	9805      	ldr	r0, [sp, #20]
 800b2f6:	f001 f8c3 	bl	800c480 <__mcmp>
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	da21      	bge.n	800b342 <_dtoa_r+0x96e>
 800b2fe:	9b03      	ldr	r3, [sp, #12]
 800b300:	220a      	movs	r2, #10
 800b302:	3b01      	subs	r3, #1
 800b304:	9303      	str	r3, [sp, #12]
 800b306:	9905      	ldr	r1, [sp, #20]
 800b308:	2300      	movs	r3, #0
 800b30a:	9804      	ldr	r0, [sp, #16]
 800b30c:	f000 fe4e 	bl	800bfac <__multadd>
 800b310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b312:	9005      	str	r0, [sp, #20]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d100      	bne.n	800b31a <_dtoa_r+0x946>
 800b318:	e15d      	b.n	800b5d6 <_dtoa_r+0xc02>
 800b31a:	2300      	movs	r3, #0
 800b31c:	0039      	movs	r1, r7
 800b31e:	220a      	movs	r2, #10
 800b320:	9804      	ldr	r0, [sp, #16]
 800b322:	f000 fe43 	bl	800bfac <__multadd>
 800b326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b328:	0007      	movs	r7, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	dc49      	bgt.n	800b3c2 <_dtoa_r+0x9ee>
 800b32e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b330:	2b02      	cmp	r3, #2
 800b332:	dc0e      	bgt.n	800b352 <_dtoa_r+0x97e>
 800b334:	e045      	b.n	800b3c2 <_dtoa_r+0x9ee>
 800b336:	2b04      	cmp	r3, #4
 800b338:	d0c6      	beq.n	800b2c8 <_dtoa_r+0x8f4>
 800b33a:	331c      	adds	r3, #28
 800b33c:	e7bd      	b.n	800b2ba <_dtoa_r+0x8e6>
 800b33e:	0013      	movs	r3, r2
 800b340:	e7fb      	b.n	800b33a <_dtoa_r+0x966>
 800b342:	9b07      	ldr	r3, [sp, #28]
 800b344:	2b00      	cmp	r3, #0
 800b346:	dc36      	bgt.n	800b3b6 <_dtoa_r+0x9e2>
 800b348:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	dd33      	ble.n	800b3b6 <_dtoa_r+0x9e2>
 800b34e:	9b07      	ldr	r3, [sp, #28]
 800b350:	930b      	str	r3, [sp, #44]	; 0x2c
 800b352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10c      	bne.n	800b372 <_dtoa_r+0x99e>
 800b358:	0031      	movs	r1, r6
 800b35a:	2205      	movs	r2, #5
 800b35c:	9804      	ldr	r0, [sp, #16]
 800b35e:	f000 fe25 	bl	800bfac <__multadd>
 800b362:	0006      	movs	r6, r0
 800b364:	0001      	movs	r1, r0
 800b366:	9805      	ldr	r0, [sp, #20]
 800b368:	f001 f88a 	bl	800c480 <__mcmp>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	dd00      	ble.n	800b372 <_dtoa_r+0x99e>
 800b370:	e59f      	b.n	800aeb2 <_dtoa_r+0x4de>
 800b372:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b374:	43db      	mvns	r3, r3
 800b376:	9303      	str	r3, [sp, #12]
 800b378:	9b06      	ldr	r3, [sp, #24]
 800b37a:	9308      	str	r3, [sp, #32]
 800b37c:	2500      	movs	r5, #0
 800b37e:	0031      	movs	r1, r6
 800b380:	9804      	ldr	r0, [sp, #16]
 800b382:	f000 fdef 	bl	800bf64 <_Bfree>
 800b386:	2f00      	cmp	r7, #0
 800b388:	d100      	bne.n	800b38c <_dtoa_r+0x9b8>
 800b38a:	e6a3      	b.n	800b0d4 <_dtoa_r+0x700>
 800b38c:	2d00      	cmp	r5, #0
 800b38e:	d005      	beq.n	800b39c <_dtoa_r+0x9c8>
 800b390:	42bd      	cmp	r5, r7
 800b392:	d003      	beq.n	800b39c <_dtoa_r+0x9c8>
 800b394:	0029      	movs	r1, r5
 800b396:	9804      	ldr	r0, [sp, #16]
 800b398:	f000 fde4 	bl	800bf64 <_Bfree>
 800b39c:	0039      	movs	r1, r7
 800b39e:	9804      	ldr	r0, [sp, #16]
 800b3a0:	f000 fde0 	bl	800bf64 <_Bfree>
 800b3a4:	e696      	b.n	800b0d4 <_dtoa_r+0x700>
 800b3a6:	2600      	movs	r6, #0
 800b3a8:	0037      	movs	r7, r6
 800b3aa:	e7e2      	b.n	800b372 <_dtoa_r+0x99e>
 800b3ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3ae:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b3b0:	9303      	str	r3, [sp, #12]
 800b3b2:	0037      	movs	r7, r6
 800b3b4:	e57d      	b.n	800aeb2 <_dtoa_r+0x4de>
 800b3b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d100      	bne.n	800b3be <_dtoa_r+0x9ea>
 800b3bc:	e0c3      	b.n	800b546 <_dtoa_r+0xb72>
 800b3be:	9b07      	ldr	r3, [sp, #28]
 800b3c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3c2:	2c00      	cmp	r4, #0
 800b3c4:	dd05      	ble.n	800b3d2 <_dtoa_r+0x9fe>
 800b3c6:	0039      	movs	r1, r7
 800b3c8:	0022      	movs	r2, r4
 800b3ca:	9804      	ldr	r0, [sp, #16]
 800b3cc:	f000 ffea 	bl	800c3a4 <__lshift>
 800b3d0:	0007      	movs	r7, r0
 800b3d2:	0038      	movs	r0, r7
 800b3d4:	2d00      	cmp	r5, #0
 800b3d6:	d024      	beq.n	800b422 <_dtoa_r+0xa4e>
 800b3d8:	6879      	ldr	r1, [r7, #4]
 800b3da:	9804      	ldr	r0, [sp, #16]
 800b3dc:	f000 fd7e 	bl	800bedc <_Balloc>
 800b3e0:	1e04      	subs	r4, r0, #0
 800b3e2:	d111      	bne.n	800b408 <_dtoa_r+0xa34>
 800b3e4:	0022      	movs	r2, r4
 800b3e6:	4b05      	ldr	r3, [pc, #20]	; (800b3fc <_dtoa_r+0xa28>)
 800b3e8:	4805      	ldr	r0, [pc, #20]	; (800b400 <_dtoa_r+0xa2c>)
 800b3ea:	4906      	ldr	r1, [pc, #24]	; (800b404 <_dtoa_r+0xa30>)
 800b3ec:	f7ff fb07 	bl	800a9fe <_dtoa_r+0x2a>
 800b3f0:	40240000 	.word	0x40240000
 800b3f4:	00000433 	.word	0x00000433
 800b3f8:	7ff00000 	.word	0x7ff00000
 800b3fc:	0800d54e 	.word	0x0800d54e
 800b400:	0800d4f6 	.word	0x0800d4f6
 800b404:	000002ef 	.word	0x000002ef
 800b408:	0039      	movs	r1, r7
 800b40a:	693a      	ldr	r2, [r7, #16]
 800b40c:	310c      	adds	r1, #12
 800b40e:	3202      	adds	r2, #2
 800b410:	0092      	lsls	r2, r2, #2
 800b412:	300c      	adds	r0, #12
 800b414:	f7ff fa3a 	bl	800a88c <memcpy>
 800b418:	2201      	movs	r2, #1
 800b41a:	0021      	movs	r1, r4
 800b41c:	9804      	ldr	r0, [sp, #16]
 800b41e:	f000 ffc1 	bl	800c3a4 <__lshift>
 800b422:	9b06      	ldr	r3, [sp, #24]
 800b424:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b426:	9307      	str	r3, [sp, #28]
 800b428:	3b01      	subs	r3, #1
 800b42a:	189b      	adds	r3, r3, r2
 800b42c:	2201      	movs	r2, #1
 800b42e:	003d      	movs	r5, r7
 800b430:	0007      	movs	r7, r0
 800b432:	930e      	str	r3, [sp, #56]	; 0x38
 800b434:	9b08      	ldr	r3, [sp, #32]
 800b436:	4013      	ands	r3, r2
 800b438:	930d      	str	r3, [sp, #52]	; 0x34
 800b43a:	0031      	movs	r1, r6
 800b43c:	9805      	ldr	r0, [sp, #20]
 800b43e:	f7ff fa39 	bl	800a8b4 <quorem>
 800b442:	0029      	movs	r1, r5
 800b444:	0004      	movs	r4, r0
 800b446:	900b      	str	r0, [sp, #44]	; 0x2c
 800b448:	9805      	ldr	r0, [sp, #20]
 800b44a:	f001 f819 	bl	800c480 <__mcmp>
 800b44e:	003a      	movs	r2, r7
 800b450:	900c      	str	r0, [sp, #48]	; 0x30
 800b452:	0031      	movs	r1, r6
 800b454:	9804      	ldr	r0, [sp, #16]
 800b456:	f001 f82f 	bl	800c4b8 <__mdiff>
 800b45a:	2201      	movs	r2, #1
 800b45c:	68c3      	ldr	r3, [r0, #12]
 800b45e:	3430      	adds	r4, #48	; 0x30
 800b460:	9008      	str	r0, [sp, #32]
 800b462:	920a      	str	r2, [sp, #40]	; 0x28
 800b464:	2b00      	cmp	r3, #0
 800b466:	d104      	bne.n	800b472 <_dtoa_r+0xa9e>
 800b468:	0001      	movs	r1, r0
 800b46a:	9805      	ldr	r0, [sp, #20]
 800b46c:	f001 f808 	bl	800c480 <__mcmp>
 800b470:	900a      	str	r0, [sp, #40]	; 0x28
 800b472:	9908      	ldr	r1, [sp, #32]
 800b474:	9804      	ldr	r0, [sp, #16]
 800b476:	f000 fd75 	bl	800bf64 <_Bfree>
 800b47a:	9b07      	ldr	r3, [sp, #28]
 800b47c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b47e:	3301      	adds	r3, #1
 800b480:	9308      	str	r3, [sp, #32]
 800b482:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b484:	4313      	orrs	r3, r2
 800b486:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b488:	4313      	orrs	r3, r2
 800b48a:	d109      	bne.n	800b4a0 <_dtoa_r+0xacc>
 800b48c:	2c39      	cmp	r4, #57	; 0x39
 800b48e:	d022      	beq.n	800b4d6 <_dtoa_r+0xb02>
 800b490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b492:	2b00      	cmp	r3, #0
 800b494:	dd01      	ble.n	800b49a <_dtoa_r+0xac6>
 800b496:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b498:	3431      	adds	r4, #49	; 0x31
 800b49a:	9b07      	ldr	r3, [sp, #28]
 800b49c:	701c      	strb	r4, [r3, #0]
 800b49e:	e76e      	b.n	800b37e <_dtoa_r+0x9aa>
 800b4a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	db04      	blt.n	800b4b0 <_dtoa_r+0xadc>
 800b4a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	d11e      	bne.n	800b4ee <_dtoa_r+0xb1a>
 800b4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	ddf1      	ble.n	800b49a <_dtoa_r+0xac6>
 800b4b6:	9905      	ldr	r1, [sp, #20]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	9804      	ldr	r0, [sp, #16]
 800b4bc:	f000 ff72 	bl	800c3a4 <__lshift>
 800b4c0:	0031      	movs	r1, r6
 800b4c2:	9005      	str	r0, [sp, #20]
 800b4c4:	f000 ffdc 	bl	800c480 <__mcmp>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	dc02      	bgt.n	800b4d2 <_dtoa_r+0xafe>
 800b4cc:	d1e5      	bne.n	800b49a <_dtoa_r+0xac6>
 800b4ce:	07e3      	lsls	r3, r4, #31
 800b4d0:	d5e3      	bpl.n	800b49a <_dtoa_r+0xac6>
 800b4d2:	2c39      	cmp	r4, #57	; 0x39
 800b4d4:	d1df      	bne.n	800b496 <_dtoa_r+0xac2>
 800b4d6:	2339      	movs	r3, #57	; 0x39
 800b4d8:	9a07      	ldr	r2, [sp, #28]
 800b4da:	7013      	strb	r3, [r2, #0]
 800b4dc:	9b08      	ldr	r3, [sp, #32]
 800b4de:	9308      	str	r3, [sp, #32]
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	781a      	ldrb	r2, [r3, #0]
 800b4e4:	2a39      	cmp	r2, #57	; 0x39
 800b4e6:	d063      	beq.n	800b5b0 <_dtoa_r+0xbdc>
 800b4e8:	3201      	adds	r2, #1
 800b4ea:	701a      	strb	r2, [r3, #0]
 800b4ec:	e747      	b.n	800b37e <_dtoa_r+0x9aa>
 800b4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	dd03      	ble.n	800b4fc <_dtoa_r+0xb28>
 800b4f4:	2c39      	cmp	r4, #57	; 0x39
 800b4f6:	d0ee      	beq.n	800b4d6 <_dtoa_r+0xb02>
 800b4f8:	3401      	adds	r4, #1
 800b4fa:	e7ce      	b.n	800b49a <_dtoa_r+0xac6>
 800b4fc:	9b07      	ldr	r3, [sp, #28]
 800b4fe:	9a07      	ldr	r2, [sp, #28]
 800b500:	701c      	strb	r4, [r3, #0]
 800b502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b504:	4293      	cmp	r3, r2
 800b506:	d03e      	beq.n	800b586 <_dtoa_r+0xbb2>
 800b508:	2300      	movs	r3, #0
 800b50a:	220a      	movs	r2, #10
 800b50c:	9905      	ldr	r1, [sp, #20]
 800b50e:	9804      	ldr	r0, [sp, #16]
 800b510:	f000 fd4c 	bl	800bfac <__multadd>
 800b514:	2300      	movs	r3, #0
 800b516:	9005      	str	r0, [sp, #20]
 800b518:	220a      	movs	r2, #10
 800b51a:	0029      	movs	r1, r5
 800b51c:	9804      	ldr	r0, [sp, #16]
 800b51e:	42bd      	cmp	r5, r7
 800b520:	d106      	bne.n	800b530 <_dtoa_r+0xb5c>
 800b522:	f000 fd43 	bl	800bfac <__multadd>
 800b526:	0005      	movs	r5, r0
 800b528:	0007      	movs	r7, r0
 800b52a:	9b08      	ldr	r3, [sp, #32]
 800b52c:	9307      	str	r3, [sp, #28]
 800b52e:	e784      	b.n	800b43a <_dtoa_r+0xa66>
 800b530:	f000 fd3c 	bl	800bfac <__multadd>
 800b534:	0039      	movs	r1, r7
 800b536:	0005      	movs	r5, r0
 800b538:	2300      	movs	r3, #0
 800b53a:	220a      	movs	r2, #10
 800b53c:	9804      	ldr	r0, [sp, #16]
 800b53e:	f000 fd35 	bl	800bfac <__multadd>
 800b542:	0007      	movs	r7, r0
 800b544:	e7f1      	b.n	800b52a <_dtoa_r+0xb56>
 800b546:	9b07      	ldr	r3, [sp, #28]
 800b548:	930b      	str	r3, [sp, #44]	; 0x2c
 800b54a:	2500      	movs	r5, #0
 800b54c:	0031      	movs	r1, r6
 800b54e:	9805      	ldr	r0, [sp, #20]
 800b550:	f7ff f9b0 	bl	800a8b4 <quorem>
 800b554:	9b06      	ldr	r3, [sp, #24]
 800b556:	3030      	adds	r0, #48	; 0x30
 800b558:	5558      	strb	r0, [r3, r5]
 800b55a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b55c:	3501      	adds	r5, #1
 800b55e:	0004      	movs	r4, r0
 800b560:	42ab      	cmp	r3, r5
 800b562:	dd07      	ble.n	800b574 <_dtoa_r+0xba0>
 800b564:	2300      	movs	r3, #0
 800b566:	220a      	movs	r2, #10
 800b568:	9905      	ldr	r1, [sp, #20]
 800b56a:	9804      	ldr	r0, [sp, #16]
 800b56c:	f000 fd1e 	bl	800bfac <__multadd>
 800b570:	9005      	str	r0, [sp, #20]
 800b572:	e7eb      	b.n	800b54c <_dtoa_r+0xb78>
 800b574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b576:	2301      	movs	r3, #1
 800b578:	2a00      	cmp	r2, #0
 800b57a:	dd00      	ble.n	800b57e <_dtoa_r+0xbaa>
 800b57c:	0013      	movs	r3, r2
 800b57e:	2500      	movs	r5, #0
 800b580:	9a06      	ldr	r2, [sp, #24]
 800b582:	18d3      	adds	r3, r2, r3
 800b584:	9308      	str	r3, [sp, #32]
 800b586:	9905      	ldr	r1, [sp, #20]
 800b588:	2201      	movs	r2, #1
 800b58a:	9804      	ldr	r0, [sp, #16]
 800b58c:	f000 ff0a 	bl	800c3a4 <__lshift>
 800b590:	0031      	movs	r1, r6
 800b592:	9005      	str	r0, [sp, #20]
 800b594:	f000 ff74 	bl	800c480 <__mcmp>
 800b598:	2800      	cmp	r0, #0
 800b59a:	dc9f      	bgt.n	800b4dc <_dtoa_r+0xb08>
 800b59c:	d101      	bne.n	800b5a2 <_dtoa_r+0xbce>
 800b59e:	07e4      	lsls	r4, r4, #31
 800b5a0:	d49c      	bmi.n	800b4dc <_dtoa_r+0xb08>
 800b5a2:	9b08      	ldr	r3, [sp, #32]
 800b5a4:	9308      	str	r3, [sp, #32]
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	781a      	ldrb	r2, [r3, #0]
 800b5aa:	2a30      	cmp	r2, #48	; 0x30
 800b5ac:	d0fa      	beq.n	800b5a4 <_dtoa_r+0xbd0>
 800b5ae:	e6e6      	b.n	800b37e <_dtoa_r+0x9aa>
 800b5b0:	9a06      	ldr	r2, [sp, #24]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d193      	bne.n	800b4de <_dtoa_r+0xb0a>
 800b5b6:	9b03      	ldr	r3, [sp, #12]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	9303      	str	r3, [sp, #12]
 800b5bc:	2331      	movs	r3, #49	; 0x31
 800b5be:	7013      	strb	r3, [r2, #0]
 800b5c0:	e6dd      	b.n	800b37e <_dtoa_r+0x9aa>
 800b5c2:	4b09      	ldr	r3, [pc, #36]	; (800b5e8 <_dtoa_r+0xc14>)
 800b5c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b5c6:	9306      	str	r3, [sp, #24]
 800b5c8:	4b08      	ldr	r3, [pc, #32]	; (800b5ec <_dtoa_r+0xc18>)
 800b5ca:	2a00      	cmp	r2, #0
 800b5cc:	d001      	beq.n	800b5d2 <_dtoa_r+0xbfe>
 800b5ce:	f7ff fa49 	bl	800aa64 <_dtoa_r+0x90>
 800b5d2:	f7ff fa49 	bl	800aa68 <_dtoa_r+0x94>
 800b5d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	dcb6      	bgt.n	800b54a <_dtoa_r+0xb76>
 800b5dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	dd00      	ble.n	800b5e4 <_dtoa_r+0xc10>
 800b5e2:	e6b6      	b.n	800b352 <_dtoa_r+0x97e>
 800b5e4:	e7b1      	b.n	800b54a <_dtoa_r+0xb76>
 800b5e6:	46c0      	nop			; (mov r8, r8)
 800b5e8:	0800d4d2 	.word	0x0800d4d2
 800b5ec:	0800d4da 	.word	0x0800d4da

0800b5f0 <_free_r>:
 800b5f0:	b570      	push	{r4, r5, r6, lr}
 800b5f2:	0005      	movs	r5, r0
 800b5f4:	2900      	cmp	r1, #0
 800b5f6:	d010      	beq.n	800b61a <_free_r+0x2a>
 800b5f8:	1f0c      	subs	r4, r1, #4
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	da00      	bge.n	800b602 <_free_r+0x12>
 800b600:	18e4      	adds	r4, r4, r3
 800b602:	0028      	movs	r0, r5
 800b604:	f000 fc5a 	bl	800bebc <__malloc_lock>
 800b608:	4a1d      	ldr	r2, [pc, #116]	; (800b680 <_free_r+0x90>)
 800b60a:	6813      	ldr	r3, [r2, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d105      	bne.n	800b61c <_free_r+0x2c>
 800b610:	6063      	str	r3, [r4, #4]
 800b612:	6014      	str	r4, [r2, #0]
 800b614:	0028      	movs	r0, r5
 800b616:	f000 fc59 	bl	800becc <__malloc_unlock>
 800b61a:	bd70      	pop	{r4, r5, r6, pc}
 800b61c:	42a3      	cmp	r3, r4
 800b61e:	d908      	bls.n	800b632 <_free_r+0x42>
 800b620:	6820      	ldr	r0, [r4, #0]
 800b622:	1821      	adds	r1, r4, r0
 800b624:	428b      	cmp	r3, r1
 800b626:	d1f3      	bne.n	800b610 <_free_r+0x20>
 800b628:	6819      	ldr	r1, [r3, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	1809      	adds	r1, r1, r0
 800b62e:	6021      	str	r1, [r4, #0]
 800b630:	e7ee      	b.n	800b610 <_free_r+0x20>
 800b632:	001a      	movs	r2, r3
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d001      	beq.n	800b63e <_free_r+0x4e>
 800b63a:	42a3      	cmp	r3, r4
 800b63c:	d9f9      	bls.n	800b632 <_free_r+0x42>
 800b63e:	6811      	ldr	r1, [r2, #0]
 800b640:	1850      	adds	r0, r2, r1
 800b642:	42a0      	cmp	r0, r4
 800b644:	d10b      	bne.n	800b65e <_free_r+0x6e>
 800b646:	6820      	ldr	r0, [r4, #0]
 800b648:	1809      	adds	r1, r1, r0
 800b64a:	1850      	adds	r0, r2, r1
 800b64c:	6011      	str	r1, [r2, #0]
 800b64e:	4283      	cmp	r3, r0
 800b650:	d1e0      	bne.n	800b614 <_free_r+0x24>
 800b652:	6818      	ldr	r0, [r3, #0]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	1841      	adds	r1, r0, r1
 800b658:	6011      	str	r1, [r2, #0]
 800b65a:	6053      	str	r3, [r2, #4]
 800b65c:	e7da      	b.n	800b614 <_free_r+0x24>
 800b65e:	42a0      	cmp	r0, r4
 800b660:	d902      	bls.n	800b668 <_free_r+0x78>
 800b662:	230c      	movs	r3, #12
 800b664:	602b      	str	r3, [r5, #0]
 800b666:	e7d5      	b.n	800b614 <_free_r+0x24>
 800b668:	6820      	ldr	r0, [r4, #0]
 800b66a:	1821      	adds	r1, r4, r0
 800b66c:	428b      	cmp	r3, r1
 800b66e:	d103      	bne.n	800b678 <_free_r+0x88>
 800b670:	6819      	ldr	r1, [r3, #0]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	1809      	adds	r1, r1, r0
 800b676:	6021      	str	r1, [r4, #0]
 800b678:	6063      	str	r3, [r4, #4]
 800b67a:	6054      	str	r4, [r2, #4]
 800b67c:	e7ca      	b.n	800b614 <_free_r+0x24>
 800b67e:	46c0      	nop			; (mov r8, r8)
 800b680:	20000984 	.word	0x20000984

0800b684 <rshift>:
 800b684:	0002      	movs	r2, r0
 800b686:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b688:	6904      	ldr	r4, [r0, #16]
 800b68a:	114b      	asrs	r3, r1, #5
 800b68c:	b085      	sub	sp, #20
 800b68e:	3214      	adds	r2, #20
 800b690:	9302      	str	r3, [sp, #8]
 800b692:	114d      	asrs	r5, r1, #5
 800b694:	0013      	movs	r3, r2
 800b696:	42ac      	cmp	r4, r5
 800b698:	dd32      	ble.n	800b700 <rshift+0x7c>
 800b69a:	261f      	movs	r6, #31
 800b69c:	000f      	movs	r7, r1
 800b69e:	114b      	asrs	r3, r1, #5
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	00a5      	lsls	r5, r4, #2
 800b6a4:	18d3      	adds	r3, r2, r3
 800b6a6:	4037      	ands	r7, r6
 800b6a8:	1955      	adds	r5, r2, r5
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	9701      	str	r7, [sp, #4]
 800b6ae:	4231      	tst	r1, r6
 800b6b0:	d10d      	bne.n	800b6ce <rshift+0x4a>
 800b6b2:	0016      	movs	r6, r2
 800b6b4:	0019      	movs	r1, r3
 800b6b6:	428d      	cmp	r5, r1
 800b6b8:	d836      	bhi.n	800b728 <rshift+0xa4>
 800b6ba:	9900      	ldr	r1, [sp, #0]
 800b6bc:	2300      	movs	r3, #0
 800b6be:	3903      	subs	r1, #3
 800b6c0:	428d      	cmp	r5, r1
 800b6c2:	d302      	bcc.n	800b6ca <rshift+0x46>
 800b6c4:	9b02      	ldr	r3, [sp, #8]
 800b6c6:	1ae4      	subs	r4, r4, r3
 800b6c8:	00a3      	lsls	r3, r4, #2
 800b6ca:	18d3      	adds	r3, r2, r3
 800b6cc:	e018      	b.n	800b700 <rshift+0x7c>
 800b6ce:	2120      	movs	r1, #32
 800b6d0:	9e01      	ldr	r6, [sp, #4]
 800b6d2:	9f01      	ldr	r7, [sp, #4]
 800b6d4:	1b89      	subs	r1, r1, r6
 800b6d6:	9e00      	ldr	r6, [sp, #0]
 800b6d8:	9103      	str	r1, [sp, #12]
 800b6da:	ce02      	ldmia	r6!, {r1}
 800b6dc:	4694      	mov	ip, r2
 800b6de:	40f9      	lsrs	r1, r7
 800b6e0:	42b5      	cmp	r5, r6
 800b6e2:	d816      	bhi.n	800b712 <rshift+0x8e>
 800b6e4:	9e00      	ldr	r6, [sp, #0]
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	3601      	adds	r6, #1
 800b6ea:	42b5      	cmp	r5, r6
 800b6ec:	d303      	bcc.n	800b6f6 <rshift+0x72>
 800b6ee:	9b02      	ldr	r3, [sp, #8]
 800b6f0:	1ae3      	subs	r3, r4, r3
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	3b04      	subs	r3, #4
 800b6f6:	18d3      	adds	r3, r2, r3
 800b6f8:	6019      	str	r1, [r3, #0]
 800b6fa:	2900      	cmp	r1, #0
 800b6fc:	d000      	beq.n	800b700 <rshift+0x7c>
 800b6fe:	3304      	adds	r3, #4
 800b700:	1a99      	subs	r1, r3, r2
 800b702:	1089      	asrs	r1, r1, #2
 800b704:	6101      	str	r1, [r0, #16]
 800b706:	4293      	cmp	r3, r2
 800b708:	d101      	bne.n	800b70e <rshift+0x8a>
 800b70a:	2300      	movs	r3, #0
 800b70c:	6143      	str	r3, [r0, #20]
 800b70e:	b005      	add	sp, #20
 800b710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b712:	6837      	ldr	r7, [r6, #0]
 800b714:	9b03      	ldr	r3, [sp, #12]
 800b716:	409f      	lsls	r7, r3
 800b718:	430f      	orrs	r7, r1
 800b71a:	4661      	mov	r1, ip
 800b71c:	c180      	stmia	r1!, {r7}
 800b71e:	468c      	mov	ip, r1
 800b720:	9b01      	ldr	r3, [sp, #4]
 800b722:	ce02      	ldmia	r6!, {r1}
 800b724:	40d9      	lsrs	r1, r3
 800b726:	e7db      	b.n	800b6e0 <rshift+0x5c>
 800b728:	c980      	ldmia	r1!, {r7}
 800b72a:	c680      	stmia	r6!, {r7}
 800b72c:	e7c3      	b.n	800b6b6 <rshift+0x32>

0800b72e <__hexdig_fun>:
 800b72e:	0002      	movs	r2, r0
 800b730:	3a30      	subs	r2, #48	; 0x30
 800b732:	0003      	movs	r3, r0
 800b734:	2a09      	cmp	r2, #9
 800b736:	d802      	bhi.n	800b73e <__hexdig_fun+0x10>
 800b738:	3b20      	subs	r3, #32
 800b73a:	b2d8      	uxtb	r0, r3
 800b73c:	4770      	bx	lr
 800b73e:	0002      	movs	r2, r0
 800b740:	3a61      	subs	r2, #97	; 0x61
 800b742:	2a05      	cmp	r2, #5
 800b744:	d801      	bhi.n	800b74a <__hexdig_fun+0x1c>
 800b746:	3b47      	subs	r3, #71	; 0x47
 800b748:	e7f7      	b.n	800b73a <__hexdig_fun+0xc>
 800b74a:	001a      	movs	r2, r3
 800b74c:	3a41      	subs	r2, #65	; 0x41
 800b74e:	2000      	movs	r0, #0
 800b750:	2a05      	cmp	r2, #5
 800b752:	d8f3      	bhi.n	800b73c <__hexdig_fun+0xe>
 800b754:	3b27      	subs	r3, #39	; 0x27
 800b756:	e7f0      	b.n	800b73a <__hexdig_fun+0xc>

0800b758 <__gethex>:
 800b758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b75a:	b089      	sub	sp, #36	; 0x24
 800b75c:	9307      	str	r3, [sp, #28]
 800b75e:	2302      	movs	r3, #2
 800b760:	9201      	str	r2, [sp, #4]
 800b762:	680a      	ldr	r2, [r1, #0]
 800b764:	425b      	negs	r3, r3
 800b766:	9003      	str	r0, [sp, #12]
 800b768:	9106      	str	r1, [sp, #24]
 800b76a:	1c96      	adds	r6, r2, #2
 800b76c:	1a9b      	subs	r3, r3, r2
 800b76e:	199a      	adds	r2, r3, r6
 800b770:	9600      	str	r6, [sp, #0]
 800b772:	9205      	str	r2, [sp, #20]
 800b774:	9a00      	ldr	r2, [sp, #0]
 800b776:	3601      	adds	r6, #1
 800b778:	7810      	ldrb	r0, [r2, #0]
 800b77a:	2830      	cmp	r0, #48	; 0x30
 800b77c:	d0f7      	beq.n	800b76e <__gethex+0x16>
 800b77e:	f7ff ffd6 	bl	800b72e <__hexdig_fun>
 800b782:	2300      	movs	r3, #0
 800b784:	001d      	movs	r5, r3
 800b786:	9302      	str	r3, [sp, #8]
 800b788:	4298      	cmp	r0, r3
 800b78a:	d11d      	bne.n	800b7c8 <__gethex+0x70>
 800b78c:	2201      	movs	r2, #1
 800b78e:	49a6      	ldr	r1, [pc, #664]	; (800ba28 <__gethex+0x2d0>)
 800b790:	9800      	ldr	r0, [sp, #0]
 800b792:	f7fe ffdf 	bl	800a754 <strncmp>
 800b796:	0007      	movs	r7, r0
 800b798:	42a8      	cmp	r0, r5
 800b79a:	d169      	bne.n	800b870 <__gethex+0x118>
 800b79c:	9b00      	ldr	r3, [sp, #0]
 800b79e:	0034      	movs	r4, r6
 800b7a0:	7858      	ldrb	r0, [r3, #1]
 800b7a2:	f7ff ffc4 	bl	800b72e <__hexdig_fun>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	9302      	str	r3, [sp, #8]
 800b7aa:	42a8      	cmp	r0, r5
 800b7ac:	d02f      	beq.n	800b80e <__gethex+0xb6>
 800b7ae:	9600      	str	r6, [sp, #0]
 800b7b0:	9b00      	ldr	r3, [sp, #0]
 800b7b2:	7818      	ldrb	r0, [r3, #0]
 800b7b4:	2830      	cmp	r0, #48	; 0x30
 800b7b6:	d009      	beq.n	800b7cc <__gethex+0x74>
 800b7b8:	f7ff ffb9 	bl	800b72e <__hexdig_fun>
 800b7bc:	4242      	negs	r2, r0
 800b7be:	4142      	adcs	r2, r0
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	0035      	movs	r5, r6
 800b7c4:	9202      	str	r2, [sp, #8]
 800b7c6:	9305      	str	r3, [sp, #20]
 800b7c8:	9c00      	ldr	r4, [sp, #0]
 800b7ca:	e004      	b.n	800b7d6 <__gethex+0x7e>
 800b7cc:	9b00      	ldr	r3, [sp, #0]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	e7ed      	b.n	800b7b0 <__gethex+0x58>
 800b7d4:	3401      	adds	r4, #1
 800b7d6:	7820      	ldrb	r0, [r4, #0]
 800b7d8:	f7ff ffa9 	bl	800b72e <__hexdig_fun>
 800b7dc:	1e07      	subs	r7, r0, #0
 800b7de:	d1f9      	bne.n	800b7d4 <__gethex+0x7c>
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	0020      	movs	r0, r4
 800b7e4:	4990      	ldr	r1, [pc, #576]	; (800ba28 <__gethex+0x2d0>)
 800b7e6:	f7fe ffb5 	bl	800a754 <strncmp>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d10d      	bne.n	800b80a <__gethex+0xb2>
 800b7ee:	2d00      	cmp	r5, #0
 800b7f0:	d106      	bne.n	800b800 <__gethex+0xa8>
 800b7f2:	3401      	adds	r4, #1
 800b7f4:	0025      	movs	r5, r4
 800b7f6:	7820      	ldrb	r0, [r4, #0]
 800b7f8:	f7ff ff99 	bl	800b72e <__hexdig_fun>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	d102      	bne.n	800b806 <__gethex+0xae>
 800b800:	1b2d      	subs	r5, r5, r4
 800b802:	00af      	lsls	r7, r5, #2
 800b804:	e003      	b.n	800b80e <__gethex+0xb6>
 800b806:	3401      	adds	r4, #1
 800b808:	e7f5      	b.n	800b7f6 <__gethex+0x9e>
 800b80a:	2d00      	cmp	r5, #0
 800b80c:	d1f8      	bne.n	800b800 <__gethex+0xa8>
 800b80e:	2220      	movs	r2, #32
 800b810:	7823      	ldrb	r3, [r4, #0]
 800b812:	0026      	movs	r6, r4
 800b814:	4393      	bics	r3, r2
 800b816:	2b50      	cmp	r3, #80	; 0x50
 800b818:	d11d      	bne.n	800b856 <__gethex+0xfe>
 800b81a:	7863      	ldrb	r3, [r4, #1]
 800b81c:	2b2b      	cmp	r3, #43	; 0x2b
 800b81e:	d02c      	beq.n	800b87a <__gethex+0x122>
 800b820:	2b2d      	cmp	r3, #45	; 0x2d
 800b822:	d02e      	beq.n	800b882 <__gethex+0x12a>
 800b824:	2300      	movs	r3, #0
 800b826:	1c66      	adds	r6, r4, #1
 800b828:	9304      	str	r3, [sp, #16]
 800b82a:	7830      	ldrb	r0, [r6, #0]
 800b82c:	f7ff ff7f 	bl	800b72e <__hexdig_fun>
 800b830:	1e43      	subs	r3, r0, #1
 800b832:	b2db      	uxtb	r3, r3
 800b834:	2b18      	cmp	r3, #24
 800b836:	d82b      	bhi.n	800b890 <__gethex+0x138>
 800b838:	3810      	subs	r0, #16
 800b83a:	0005      	movs	r5, r0
 800b83c:	7870      	ldrb	r0, [r6, #1]
 800b83e:	f7ff ff76 	bl	800b72e <__hexdig_fun>
 800b842:	1e43      	subs	r3, r0, #1
 800b844:	b2db      	uxtb	r3, r3
 800b846:	3601      	adds	r6, #1
 800b848:	2b18      	cmp	r3, #24
 800b84a:	d91c      	bls.n	800b886 <__gethex+0x12e>
 800b84c:	9b04      	ldr	r3, [sp, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d000      	beq.n	800b854 <__gethex+0xfc>
 800b852:	426d      	negs	r5, r5
 800b854:	197f      	adds	r7, r7, r5
 800b856:	9b06      	ldr	r3, [sp, #24]
 800b858:	601e      	str	r6, [r3, #0]
 800b85a:	9b02      	ldr	r3, [sp, #8]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d019      	beq.n	800b894 <__gethex+0x13c>
 800b860:	2600      	movs	r6, #0
 800b862:	9b05      	ldr	r3, [sp, #20]
 800b864:	42b3      	cmp	r3, r6
 800b866:	d100      	bne.n	800b86a <__gethex+0x112>
 800b868:	3606      	adds	r6, #6
 800b86a:	0030      	movs	r0, r6
 800b86c:	b009      	add	sp, #36	; 0x24
 800b86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b870:	2301      	movs	r3, #1
 800b872:	2700      	movs	r7, #0
 800b874:	9c00      	ldr	r4, [sp, #0]
 800b876:	9302      	str	r3, [sp, #8]
 800b878:	e7c9      	b.n	800b80e <__gethex+0xb6>
 800b87a:	2300      	movs	r3, #0
 800b87c:	9304      	str	r3, [sp, #16]
 800b87e:	1ca6      	adds	r6, r4, #2
 800b880:	e7d3      	b.n	800b82a <__gethex+0xd2>
 800b882:	2301      	movs	r3, #1
 800b884:	e7fa      	b.n	800b87c <__gethex+0x124>
 800b886:	230a      	movs	r3, #10
 800b888:	435d      	muls	r5, r3
 800b88a:	182d      	adds	r5, r5, r0
 800b88c:	3d10      	subs	r5, #16
 800b88e:	e7d5      	b.n	800b83c <__gethex+0xe4>
 800b890:	0026      	movs	r6, r4
 800b892:	e7e0      	b.n	800b856 <__gethex+0xfe>
 800b894:	9b00      	ldr	r3, [sp, #0]
 800b896:	9902      	ldr	r1, [sp, #8]
 800b898:	1ae3      	subs	r3, r4, r3
 800b89a:	3b01      	subs	r3, #1
 800b89c:	2b07      	cmp	r3, #7
 800b89e:	dc0a      	bgt.n	800b8b6 <__gethex+0x15e>
 800b8a0:	9803      	ldr	r0, [sp, #12]
 800b8a2:	f000 fb1b 	bl	800bedc <_Balloc>
 800b8a6:	1e05      	subs	r5, r0, #0
 800b8a8:	d108      	bne.n	800b8bc <__gethex+0x164>
 800b8aa:	002a      	movs	r2, r5
 800b8ac:	21e4      	movs	r1, #228	; 0xe4
 800b8ae:	4b5f      	ldr	r3, [pc, #380]	; (800ba2c <__gethex+0x2d4>)
 800b8b0:	485f      	ldr	r0, [pc, #380]	; (800ba30 <__gethex+0x2d8>)
 800b8b2:	f001 fbe7 	bl	800d084 <__assert_func>
 800b8b6:	3101      	adds	r1, #1
 800b8b8:	105b      	asrs	r3, r3, #1
 800b8ba:	e7ef      	b.n	800b89c <__gethex+0x144>
 800b8bc:	0003      	movs	r3, r0
 800b8be:	3314      	adds	r3, #20
 800b8c0:	9302      	str	r3, [sp, #8]
 800b8c2:	9305      	str	r3, [sp, #20]
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	001e      	movs	r6, r3
 800b8c8:	9304      	str	r3, [sp, #16]
 800b8ca:	9b00      	ldr	r3, [sp, #0]
 800b8cc:	42a3      	cmp	r3, r4
 800b8ce:	d33f      	bcc.n	800b950 <__gethex+0x1f8>
 800b8d0:	9c05      	ldr	r4, [sp, #20]
 800b8d2:	9b02      	ldr	r3, [sp, #8]
 800b8d4:	c440      	stmia	r4!, {r6}
 800b8d6:	1ae4      	subs	r4, r4, r3
 800b8d8:	10a4      	asrs	r4, r4, #2
 800b8da:	0030      	movs	r0, r6
 800b8dc:	612c      	str	r4, [r5, #16]
 800b8de:	f000 fbf5 	bl	800c0cc <__hi0bits>
 800b8e2:	9b01      	ldr	r3, [sp, #4]
 800b8e4:	0164      	lsls	r4, r4, #5
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	1a26      	subs	r6, r4, r0
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	429e      	cmp	r6, r3
 800b8ee:	dd51      	ble.n	800b994 <__gethex+0x23c>
 800b8f0:	1af6      	subs	r6, r6, r3
 800b8f2:	0031      	movs	r1, r6
 800b8f4:	0028      	movs	r0, r5
 800b8f6:	f000 ff89 	bl	800c80c <__any_on>
 800b8fa:	1e04      	subs	r4, r0, #0
 800b8fc:	d016      	beq.n	800b92c <__gethex+0x1d4>
 800b8fe:	2401      	movs	r4, #1
 800b900:	231f      	movs	r3, #31
 800b902:	0020      	movs	r0, r4
 800b904:	1e72      	subs	r2, r6, #1
 800b906:	4013      	ands	r3, r2
 800b908:	4098      	lsls	r0, r3
 800b90a:	0003      	movs	r3, r0
 800b90c:	1151      	asrs	r1, r2, #5
 800b90e:	9802      	ldr	r0, [sp, #8]
 800b910:	0089      	lsls	r1, r1, #2
 800b912:	5809      	ldr	r1, [r1, r0]
 800b914:	4219      	tst	r1, r3
 800b916:	d009      	beq.n	800b92c <__gethex+0x1d4>
 800b918:	42a2      	cmp	r2, r4
 800b91a:	dd06      	ble.n	800b92a <__gethex+0x1d2>
 800b91c:	0028      	movs	r0, r5
 800b91e:	1eb1      	subs	r1, r6, #2
 800b920:	f000 ff74 	bl	800c80c <__any_on>
 800b924:	3402      	adds	r4, #2
 800b926:	2800      	cmp	r0, #0
 800b928:	d100      	bne.n	800b92c <__gethex+0x1d4>
 800b92a:	2402      	movs	r4, #2
 800b92c:	0031      	movs	r1, r6
 800b92e:	0028      	movs	r0, r5
 800b930:	f7ff fea8 	bl	800b684 <rshift>
 800b934:	19bf      	adds	r7, r7, r6
 800b936:	9b01      	ldr	r3, [sp, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	42bb      	cmp	r3, r7
 800b93c:	da3a      	bge.n	800b9b4 <__gethex+0x25c>
 800b93e:	0029      	movs	r1, r5
 800b940:	9803      	ldr	r0, [sp, #12]
 800b942:	f000 fb0f 	bl	800bf64 <_Bfree>
 800b946:	2300      	movs	r3, #0
 800b948:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b94a:	26a3      	movs	r6, #163	; 0xa3
 800b94c:	6013      	str	r3, [r2, #0]
 800b94e:	e78c      	b.n	800b86a <__gethex+0x112>
 800b950:	3c01      	subs	r4, #1
 800b952:	7823      	ldrb	r3, [r4, #0]
 800b954:	2b2e      	cmp	r3, #46	; 0x2e
 800b956:	d012      	beq.n	800b97e <__gethex+0x226>
 800b958:	9b04      	ldr	r3, [sp, #16]
 800b95a:	2b20      	cmp	r3, #32
 800b95c:	d104      	bne.n	800b968 <__gethex+0x210>
 800b95e:	9b05      	ldr	r3, [sp, #20]
 800b960:	c340      	stmia	r3!, {r6}
 800b962:	2600      	movs	r6, #0
 800b964:	9305      	str	r3, [sp, #20]
 800b966:	9604      	str	r6, [sp, #16]
 800b968:	7820      	ldrb	r0, [r4, #0]
 800b96a:	f7ff fee0 	bl	800b72e <__hexdig_fun>
 800b96e:	230f      	movs	r3, #15
 800b970:	4018      	ands	r0, r3
 800b972:	9b04      	ldr	r3, [sp, #16]
 800b974:	4098      	lsls	r0, r3
 800b976:	3304      	adds	r3, #4
 800b978:	4306      	orrs	r6, r0
 800b97a:	9304      	str	r3, [sp, #16]
 800b97c:	e7a5      	b.n	800b8ca <__gethex+0x172>
 800b97e:	9b00      	ldr	r3, [sp, #0]
 800b980:	42a3      	cmp	r3, r4
 800b982:	d8e9      	bhi.n	800b958 <__gethex+0x200>
 800b984:	2201      	movs	r2, #1
 800b986:	0020      	movs	r0, r4
 800b988:	4927      	ldr	r1, [pc, #156]	; (800ba28 <__gethex+0x2d0>)
 800b98a:	f7fe fee3 	bl	800a754 <strncmp>
 800b98e:	2800      	cmp	r0, #0
 800b990:	d1e2      	bne.n	800b958 <__gethex+0x200>
 800b992:	e79a      	b.n	800b8ca <__gethex+0x172>
 800b994:	9b00      	ldr	r3, [sp, #0]
 800b996:	2400      	movs	r4, #0
 800b998:	429e      	cmp	r6, r3
 800b99a:	dacc      	bge.n	800b936 <__gethex+0x1de>
 800b99c:	1b9e      	subs	r6, r3, r6
 800b99e:	0029      	movs	r1, r5
 800b9a0:	0032      	movs	r2, r6
 800b9a2:	9803      	ldr	r0, [sp, #12]
 800b9a4:	f000 fcfe 	bl	800c3a4 <__lshift>
 800b9a8:	0003      	movs	r3, r0
 800b9aa:	3314      	adds	r3, #20
 800b9ac:	0005      	movs	r5, r0
 800b9ae:	1bbf      	subs	r7, r7, r6
 800b9b0:	9302      	str	r3, [sp, #8]
 800b9b2:	e7c0      	b.n	800b936 <__gethex+0x1de>
 800b9b4:	9b01      	ldr	r3, [sp, #4]
 800b9b6:	685e      	ldr	r6, [r3, #4]
 800b9b8:	42be      	cmp	r6, r7
 800b9ba:	dd70      	ble.n	800ba9e <__gethex+0x346>
 800b9bc:	9b00      	ldr	r3, [sp, #0]
 800b9be:	1bf6      	subs	r6, r6, r7
 800b9c0:	42b3      	cmp	r3, r6
 800b9c2:	dc37      	bgt.n	800ba34 <__gethex+0x2dc>
 800b9c4:	9b01      	ldr	r3, [sp, #4]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	2b02      	cmp	r3, #2
 800b9ca:	d024      	beq.n	800ba16 <__gethex+0x2be>
 800b9cc:	2b03      	cmp	r3, #3
 800b9ce:	d026      	beq.n	800ba1e <__gethex+0x2c6>
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d117      	bne.n	800ba04 <__gethex+0x2ac>
 800b9d4:	9b00      	ldr	r3, [sp, #0]
 800b9d6:	42b3      	cmp	r3, r6
 800b9d8:	d114      	bne.n	800ba04 <__gethex+0x2ac>
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d10b      	bne.n	800b9f6 <__gethex+0x29e>
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	9a07      	ldr	r2, [sp, #28]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	2662      	movs	r6, #98	; 0x62
 800b9e6:	6013      	str	r3, [r2, #0]
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	9a02      	ldr	r2, [sp, #8]
 800b9ec:	612b      	str	r3, [r5, #16]
 800b9ee:	6013      	str	r3, [r2, #0]
 800b9f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9f2:	601d      	str	r5, [r3, #0]
 800b9f4:	e739      	b.n	800b86a <__gethex+0x112>
 800b9f6:	9900      	ldr	r1, [sp, #0]
 800b9f8:	0028      	movs	r0, r5
 800b9fa:	3901      	subs	r1, #1
 800b9fc:	f000 ff06 	bl	800c80c <__any_on>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d1ec      	bne.n	800b9de <__gethex+0x286>
 800ba04:	0029      	movs	r1, r5
 800ba06:	9803      	ldr	r0, [sp, #12]
 800ba08:	f000 faac 	bl	800bf64 <_Bfree>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba10:	2650      	movs	r6, #80	; 0x50
 800ba12:	6013      	str	r3, [r2, #0]
 800ba14:	e729      	b.n	800b86a <__gethex+0x112>
 800ba16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d1f3      	bne.n	800ba04 <__gethex+0x2ac>
 800ba1c:	e7df      	b.n	800b9de <__gethex+0x286>
 800ba1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1dc      	bne.n	800b9de <__gethex+0x286>
 800ba24:	e7ee      	b.n	800ba04 <__gethex+0x2ac>
 800ba26:	46c0      	nop			; (mov r8, r8)
 800ba28:	0800d338 	.word	0x0800d338
 800ba2c:	0800d54e 	.word	0x0800d54e
 800ba30:	0800d55f 	.word	0x0800d55f
 800ba34:	1e77      	subs	r7, r6, #1
 800ba36:	2c00      	cmp	r4, #0
 800ba38:	d12f      	bne.n	800ba9a <__gethex+0x342>
 800ba3a:	2f00      	cmp	r7, #0
 800ba3c:	d004      	beq.n	800ba48 <__gethex+0x2f0>
 800ba3e:	0039      	movs	r1, r7
 800ba40:	0028      	movs	r0, r5
 800ba42:	f000 fee3 	bl	800c80c <__any_on>
 800ba46:	0004      	movs	r4, r0
 800ba48:	231f      	movs	r3, #31
 800ba4a:	117a      	asrs	r2, r7, #5
 800ba4c:	401f      	ands	r7, r3
 800ba4e:	3b1e      	subs	r3, #30
 800ba50:	40bb      	lsls	r3, r7
 800ba52:	9902      	ldr	r1, [sp, #8]
 800ba54:	0092      	lsls	r2, r2, #2
 800ba56:	5852      	ldr	r2, [r2, r1]
 800ba58:	421a      	tst	r2, r3
 800ba5a:	d001      	beq.n	800ba60 <__gethex+0x308>
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	431c      	orrs	r4, r3
 800ba60:	9b00      	ldr	r3, [sp, #0]
 800ba62:	0031      	movs	r1, r6
 800ba64:	1b9b      	subs	r3, r3, r6
 800ba66:	2602      	movs	r6, #2
 800ba68:	0028      	movs	r0, r5
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	f7ff fe0a 	bl	800b684 <rshift>
 800ba70:	9b01      	ldr	r3, [sp, #4]
 800ba72:	685f      	ldr	r7, [r3, #4]
 800ba74:	2c00      	cmp	r4, #0
 800ba76:	d041      	beq.n	800bafc <__gethex+0x3a4>
 800ba78:	9b01      	ldr	r3, [sp, #4]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d010      	beq.n	800baa2 <__gethex+0x34a>
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d012      	beq.n	800baaa <__gethex+0x352>
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d106      	bne.n	800ba96 <__gethex+0x33e>
 800ba88:	07a2      	lsls	r2, r4, #30
 800ba8a:	d504      	bpl.n	800ba96 <__gethex+0x33e>
 800ba8c:	9a02      	ldr	r2, [sp, #8]
 800ba8e:	6812      	ldr	r2, [r2, #0]
 800ba90:	4314      	orrs	r4, r2
 800ba92:	421c      	tst	r4, r3
 800ba94:	d10c      	bne.n	800bab0 <__gethex+0x358>
 800ba96:	2310      	movs	r3, #16
 800ba98:	e02f      	b.n	800bafa <__gethex+0x3a2>
 800ba9a:	2401      	movs	r4, #1
 800ba9c:	e7d4      	b.n	800ba48 <__gethex+0x2f0>
 800ba9e:	2601      	movs	r6, #1
 800baa0:	e7e8      	b.n	800ba74 <__gethex+0x31c>
 800baa2:	2301      	movs	r3, #1
 800baa4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800baa6:	1a9b      	subs	r3, r3, r2
 800baa8:	930f      	str	r3, [sp, #60]	; 0x3c
 800baaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800baac:	2b00      	cmp	r3, #0
 800baae:	d0f2      	beq.n	800ba96 <__gethex+0x33e>
 800bab0:	692b      	ldr	r3, [r5, #16]
 800bab2:	2000      	movs	r0, #0
 800bab4:	9302      	str	r3, [sp, #8]
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	9304      	str	r3, [sp, #16]
 800baba:	002b      	movs	r3, r5
 800babc:	9a04      	ldr	r2, [sp, #16]
 800babe:	3314      	adds	r3, #20
 800bac0:	1899      	adds	r1, r3, r2
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	1c54      	adds	r4, r2, #1
 800bac6:	d01e      	beq.n	800bb06 <__gethex+0x3ae>
 800bac8:	3201      	adds	r2, #1
 800baca:	601a      	str	r2, [r3, #0]
 800bacc:	002b      	movs	r3, r5
 800bace:	3314      	adds	r3, #20
 800bad0:	2e02      	cmp	r6, #2
 800bad2:	d141      	bne.n	800bb58 <__gethex+0x400>
 800bad4:	9a01      	ldr	r2, [sp, #4]
 800bad6:	9900      	ldr	r1, [sp, #0]
 800bad8:	6812      	ldr	r2, [r2, #0]
 800bada:	3a01      	subs	r2, #1
 800badc:	428a      	cmp	r2, r1
 800bade:	d10b      	bne.n	800baf8 <__gethex+0x3a0>
 800bae0:	221f      	movs	r2, #31
 800bae2:	9800      	ldr	r0, [sp, #0]
 800bae4:	1149      	asrs	r1, r1, #5
 800bae6:	4002      	ands	r2, r0
 800bae8:	2001      	movs	r0, #1
 800baea:	0004      	movs	r4, r0
 800baec:	4094      	lsls	r4, r2
 800baee:	0089      	lsls	r1, r1, #2
 800baf0:	58cb      	ldr	r3, [r1, r3]
 800baf2:	4223      	tst	r3, r4
 800baf4:	d000      	beq.n	800baf8 <__gethex+0x3a0>
 800baf6:	2601      	movs	r6, #1
 800baf8:	2320      	movs	r3, #32
 800bafa:	431e      	orrs	r6, r3
 800bafc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bafe:	601d      	str	r5, [r3, #0]
 800bb00:	9b07      	ldr	r3, [sp, #28]
 800bb02:	601f      	str	r7, [r3, #0]
 800bb04:	e6b1      	b.n	800b86a <__gethex+0x112>
 800bb06:	c301      	stmia	r3!, {r0}
 800bb08:	4299      	cmp	r1, r3
 800bb0a:	d8da      	bhi.n	800bac2 <__gethex+0x36a>
 800bb0c:	68ab      	ldr	r3, [r5, #8]
 800bb0e:	9a02      	ldr	r2, [sp, #8]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	db18      	blt.n	800bb46 <__gethex+0x3ee>
 800bb14:	6869      	ldr	r1, [r5, #4]
 800bb16:	9803      	ldr	r0, [sp, #12]
 800bb18:	3101      	adds	r1, #1
 800bb1a:	f000 f9df 	bl	800bedc <_Balloc>
 800bb1e:	1e04      	subs	r4, r0, #0
 800bb20:	d104      	bne.n	800bb2c <__gethex+0x3d4>
 800bb22:	0022      	movs	r2, r4
 800bb24:	2184      	movs	r1, #132	; 0x84
 800bb26:	4b1c      	ldr	r3, [pc, #112]	; (800bb98 <__gethex+0x440>)
 800bb28:	481c      	ldr	r0, [pc, #112]	; (800bb9c <__gethex+0x444>)
 800bb2a:	e6c2      	b.n	800b8b2 <__gethex+0x15a>
 800bb2c:	0029      	movs	r1, r5
 800bb2e:	692a      	ldr	r2, [r5, #16]
 800bb30:	310c      	adds	r1, #12
 800bb32:	3202      	adds	r2, #2
 800bb34:	0092      	lsls	r2, r2, #2
 800bb36:	300c      	adds	r0, #12
 800bb38:	f7fe fea8 	bl	800a88c <memcpy>
 800bb3c:	0029      	movs	r1, r5
 800bb3e:	9803      	ldr	r0, [sp, #12]
 800bb40:	f000 fa10 	bl	800bf64 <_Bfree>
 800bb44:	0025      	movs	r5, r4
 800bb46:	692b      	ldr	r3, [r5, #16]
 800bb48:	1c5a      	adds	r2, r3, #1
 800bb4a:	612a      	str	r2, [r5, #16]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	3304      	adds	r3, #4
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	18eb      	adds	r3, r5, r3
 800bb54:	605a      	str	r2, [r3, #4]
 800bb56:	e7b9      	b.n	800bacc <__gethex+0x374>
 800bb58:	692a      	ldr	r2, [r5, #16]
 800bb5a:	9902      	ldr	r1, [sp, #8]
 800bb5c:	428a      	cmp	r2, r1
 800bb5e:	dd09      	ble.n	800bb74 <__gethex+0x41c>
 800bb60:	2101      	movs	r1, #1
 800bb62:	0028      	movs	r0, r5
 800bb64:	f7ff fd8e 	bl	800b684 <rshift>
 800bb68:	9b01      	ldr	r3, [sp, #4]
 800bb6a:	3701      	adds	r7, #1
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	42bb      	cmp	r3, r7
 800bb70:	dac1      	bge.n	800baf6 <__gethex+0x39e>
 800bb72:	e6e4      	b.n	800b93e <__gethex+0x1e6>
 800bb74:	221f      	movs	r2, #31
 800bb76:	9c00      	ldr	r4, [sp, #0]
 800bb78:	9900      	ldr	r1, [sp, #0]
 800bb7a:	2601      	movs	r6, #1
 800bb7c:	4014      	ands	r4, r2
 800bb7e:	4211      	tst	r1, r2
 800bb80:	d0ba      	beq.n	800baf8 <__gethex+0x3a0>
 800bb82:	9a04      	ldr	r2, [sp, #16]
 800bb84:	189b      	adds	r3, r3, r2
 800bb86:	3b04      	subs	r3, #4
 800bb88:	6818      	ldr	r0, [r3, #0]
 800bb8a:	f000 fa9f 	bl	800c0cc <__hi0bits>
 800bb8e:	2320      	movs	r3, #32
 800bb90:	1b1b      	subs	r3, r3, r4
 800bb92:	4298      	cmp	r0, r3
 800bb94:	dbe4      	blt.n	800bb60 <__gethex+0x408>
 800bb96:	e7af      	b.n	800baf8 <__gethex+0x3a0>
 800bb98:	0800d54e 	.word	0x0800d54e
 800bb9c:	0800d55f 	.word	0x0800d55f

0800bba0 <L_shift>:
 800bba0:	2308      	movs	r3, #8
 800bba2:	b570      	push	{r4, r5, r6, lr}
 800bba4:	2520      	movs	r5, #32
 800bba6:	1a9a      	subs	r2, r3, r2
 800bba8:	0092      	lsls	r2, r2, #2
 800bbaa:	1aad      	subs	r5, r5, r2
 800bbac:	6843      	ldr	r3, [r0, #4]
 800bbae:	6804      	ldr	r4, [r0, #0]
 800bbb0:	001e      	movs	r6, r3
 800bbb2:	40ae      	lsls	r6, r5
 800bbb4:	40d3      	lsrs	r3, r2
 800bbb6:	4334      	orrs	r4, r6
 800bbb8:	6004      	str	r4, [r0, #0]
 800bbba:	6043      	str	r3, [r0, #4]
 800bbbc:	3004      	adds	r0, #4
 800bbbe:	4288      	cmp	r0, r1
 800bbc0:	d3f4      	bcc.n	800bbac <L_shift+0xc>
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}

0800bbc4 <__match>:
 800bbc4:	b530      	push	{r4, r5, lr}
 800bbc6:	6803      	ldr	r3, [r0, #0]
 800bbc8:	780c      	ldrb	r4, [r1, #0]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	2c00      	cmp	r4, #0
 800bbce:	d102      	bne.n	800bbd6 <__match+0x12>
 800bbd0:	6003      	str	r3, [r0, #0]
 800bbd2:	2001      	movs	r0, #1
 800bbd4:	bd30      	pop	{r4, r5, pc}
 800bbd6:	781a      	ldrb	r2, [r3, #0]
 800bbd8:	0015      	movs	r5, r2
 800bbda:	3d41      	subs	r5, #65	; 0x41
 800bbdc:	2d19      	cmp	r5, #25
 800bbde:	d800      	bhi.n	800bbe2 <__match+0x1e>
 800bbe0:	3220      	adds	r2, #32
 800bbe2:	3101      	adds	r1, #1
 800bbe4:	42a2      	cmp	r2, r4
 800bbe6:	d0ef      	beq.n	800bbc8 <__match+0x4>
 800bbe8:	2000      	movs	r0, #0
 800bbea:	e7f3      	b.n	800bbd4 <__match+0x10>

0800bbec <__hexnan>:
 800bbec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbee:	680b      	ldr	r3, [r1, #0]
 800bbf0:	b08b      	sub	sp, #44	; 0x2c
 800bbf2:	9201      	str	r2, [sp, #4]
 800bbf4:	9901      	ldr	r1, [sp, #4]
 800bbf6:	115a      	asrs	r2, r3, #5
 800bbf8:	0092      	lsls	r2, r2, #2
 800bbfa:	188a      	adds	r2, r1, r2
 800bbfc:	9202      	str	r2, [sp, #8]
 800bbfe:	0019      	movs	r1, r3
 800bc00:	221f      	movs	r2, #31
 800bc02:	4011      	ands	r1, r2
 800bc04:	9008      	str	r0, [sp, #32]
 800bc06:	9106      	str	r1, [sp, #24]
 800bc08:	4213      	tst	r3, r2
 800bc0a:	d002      	beq.n	800bc12 <__hexnan+0x26>
 800bc0c:	9b02      	ldr	r3, [sp, #8]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	9302      	str	r3, [sp, #8]
 800bc12:	9b02      	ldr	r3, [sp, #8]
 800bc14:	2500      	movs	r5, #0
 800bc16:	1f1f      	subs	r7, r3, #4
 800bc18:	003e      	movs	r6, r7
 800bc1a:	003c      	movs	r4, r7
 800bc1c:	9b08      	ldr	r3, [sp, #32]
 800bc1e:	603d      	str	r5, [r7, #0]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	9507      	str	r5, [sp, #28]
 800bc24:	9305      	str	r3, [sp, #20]
 800bc26:	9503      	str	r5, [sp, #12]
 800bc28:	9b05      	ldr	r3, [sp, #20]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc2e:	9b05      	ldr	r3, [sp, #20]
 800bc30:	785b      	ldrb	r3, [r3, #1]
 800bc32:	9304      	str	r3, [sp, #16]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d028      	beq.n	800bc8a <__hexnan+0x9e>
 800bc38:	9804      	ldr	r0, [sp, #16]
 800bc3a:	f7ff fd78 	bl	800b72e <__hexdig_fun>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d154      	bne.n	800bcec <__hexnan+0x100>
 800bc42:	9b04      	ldr	r3, [sp, #16]
 800bc44:	2b20      	cmp	r3, #32
 800bc46:	d819      	bhi.n	800bc7c <__hexnan+0x90>
 800bc48:	9b03      	ldr	r3, [sp, #12]
 800bc4a:	9a07      	ldr	r2, [sp, #28]
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	dd12      	ble.n	800bc76 <__hexnan+0x8a>
 800bc50:	42b4      	cmp	r4, r6
 800bc52:	d206      	bcs.n	800bc62 <__hexnan+0x76>
 800bc54:	2d07      	cmp	r5, #7
 800bc56:	dc04      	bgt.n	800bc62 <__hexnan+0x76>
 800bc58:	002a      	movs	r2, r5
 800bc5a:	0031      	movs	r1, r6
 800bc5c:	0020      	movs	r0, r4
 800bc5e:	f7ff ff9f 	bl	800bba0 <L_shift>
 800bc62:	9b01      	ldr	r3, [sp, #4]
 800bc64:	2508      	movs	r5, #8
 800bc66:	429c      	cmp	r4, r3
 800bc68:	d905      	bls.n	800bc76 <__hexnan+0x8a>
 800bc6a:	1f26      	subs	r6, r4, #4
 800bc6c:	2500      	movs	r5, #0
 800bc6e:	0034      	movs	r4, r6
 800bc70:	9b03      	ldr	r3, [sp, #12]
 800bc72:	6035      	str	r5, [r6, #0]
 800bc74:	9307      	str	r3, [sp, #28]
 800bc76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc78:	9305      	str	r3, [sp, #20]
 800bc7a:	e7d5      	b.n	800bc28 <__hexnan+0x3c>
 800bc7c:	9b04      	ldr	r3, [sp, #16]
 800bc7e:	2b29      	cmp	r3, #41	; 0x29
 800bc80:	d159      	bne.n	800bd36 <__hexnan+0x14a>
 800bc82:	9b05      	ldr	r3, [sp, #20]
 800bc84:	9a08      	ldr	r2, [sp, #32]
 800bc86:	3302      	adds	r3, #2
 800bc88:	6013      	str	r3, [r2, #0]
 800bc8a:	9b03      	ldr	r3, [sp, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d052      	beq.n	800bd36 <__hexnan+0x14a>
 800bc90:	42b4      	cmp	r4, r6
 800bc92:	d206      	bcs.n	800bca2 <__hexnan+0xb6>
 800bc94:	2d07      	cmp	r5, #7
 800bc96:	dc04      	bgt.n	800bca2 <__hexnan+0xb6>
 800bc98:	002a      	movs	r2, r5
 800bc9a:	0031      	movs	r1, r6
 800bc9c:	0020      	movs	r0, r4
 800bc9e:	f7ff ff7f 	bl	800bba0 <L_shift>
 800bca2:	9b01      	ldr	r3, [sp, #4]
 800bca4:	429c      	cmp	r4, r3
 800bca6:	d935      	bls.n	800bd14 <__hexnan+0x128>
 800bca8:	001a      	movs	r2, r3
 800bcaa:	0023      	movs	r3, r4
 800bcac:	cb02      	ldmia	r3!, {r1}
 800bcae:	c202      	stmia	r2!, {r1}
 800bcb0:	429f      	cmp	r7, r3
 800bcb2:	d2fb      	bcs.n	800bcac <__hexnan+0xc0>
 800bcb4:	9b02      	ldr	r3, [sp, #8]
 800bcb6:	1c62      	adds	r2, r4, #1
 800bcb8:	1ed9      	subs	r1, r3, #3
 800bcba:	2304      	movs	r3, #4
 800bcbc:	4291      	cmp	r1, r2
 800bcbe:	d305      	bcc.n	800bccc <__hexnan+0xe0>
 800bcc0:	9b02      	ldr	r3, [sp, #8]
 800bcc2:	3b04      	subs	r3, #4
 800bcc4:	1b1b      	subs	r3, r3, r4
 800bcc6:	089b      	lsrs	r3, r3, #2
 800bcc8:	3301      	adds	r3, #1
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	9a01      	ldr	r2, [sp, #4]
 800bcce:	18d3      	adds	r3, r2, r3
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	c304      	stmia	r3!, {r2}
 800bcd4:	429f      	cmp	r7, r3
 800bcd6:	d2fc      	bcs.n	800bcd2 <__hexnan+0xe6>
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d104      	bne.n	800bce8 <__hexnan+0xfc>
 800bcde:	9b01      	ldr	r3, [sp, #4]
 800bce0:	429f      	cmp	r7, r3
 800bce2:	d126      	bne.n	800bd32 <__hexnan+0x146>
 800bce4:	2301      	movs	r3, #1
 800bce6:	603b      	str	r3, [r7, #0]
 800bce8:	2005      	movs	r0, #5
 800bcea:	e025      	b.n	800bd38 <__hexnan+0x14c>
 800bcec:	9b03      	ldr	r3, [sp, #12]
 800bcee:	3501      	adds	r5, #1
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	9303      	str	r3, [sp, #12]
 800bcf4:	2d08      	cmp	r5, #8
 800bcf6:	dd06      	ble.n	800bd06 <__hexnan+0x11a>
 800bcf8:	9b01      	ldr	r3, [sp, #4]
 800bcfa:	429c      	cmp	r4, r3
 800bcfc:	d9bb      	bls.n	800bc76 <__hexnan+0x8a>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	2501      	movs	r5, #1
 800bd02:	3c04      	subs	r4, #4
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	220f      	movs	r2, #15
 800bd08:	6823      	ldr	r3, [r4, #0]
 800bd0a:	4010      	ands	r0, r2
 800bd0c:	011b      	lsls	r3, r3, #4
 800bd0e:	4303      	orrs	r3, r0
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	e7b0      	b.n	800bc76 <__hexnan+0x8a>
 800bd14:	9b06      	ldr	r3, [sp, #24]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d0de      	beq.n	800bcd8 <__hexnan+0xec>
 800bd1a:	2320      	movs	r3, #32
 800bd1c:	9a06      	ldr	r2, [sp, #24]
 800bd1e:	9902      	ldr	r1, [sp, #8]
 800bd20:	1a9b      	subs	r3, r3, r2
 800bd22:	2201      	movs	r2, #1
 800bd24:	4252      	negs	r2, r2
 800bd26:	40da      	lsrs	r2, r3
 800bd28:	3904      	subs	r1, #4
 800bd2a:	680b      	ldr	r3, [r1, #0]
 800bd2c:	4013      	ands	r3, r2
 800bd2e:	600b      	str	r3, [r1, #0]
 800bd30:	e7d2      	b.n	800bcd8 <__hexnan+0xec>
 800bd32:	3f04      	subs	r7, #4
 800bd34:	e7d0      	b.n	800bcd8 <__hexnan+0xec>
 800bd36:	2004      	movs	r0, #4
 800bd38:	b00b      	add	sp, #44	; 0x2c
 800bd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bd3c <malloc>:
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	4b03      	ldr	r3, [pc, #12]	; (800bd4c <malloc+0x10>)
 800bd40:	0001      	movs	r1, r0
 800bd42:	6818      	ldr	r0, [r3, #0]
 800bd44:	f000 f826 	bl	800bd94 <_malloc_r>
 800bd48:	bd10      	pop	{r4, pc}
 800bd4a:	46c0      	nop			; (mov r8, r8)
 800bd4c:	200001d0 	.word	0x200001d0

0800bd50 <sbrk_aligned>:
 800bd50:	b570      	push	{r4, r5, r6, lr}
 800bd52:	4e0f      	ldr	r6, [pc, #60]	; (800bd90 <sbrk_aligned+0x40>)
 800bd54:	000d      	movs	r5, r1
 800bd56:	6831      	ldr	r1, [r6, #0]
 800bd58:	0004      	movs	r4, r0
 800bd5a:	2900      	cmp	r1, #0
 800bd5c:	d102      	bne.n	800bd64 <sbrk_aligned+0x14>
 800bd5e:	f001 f97f 	bl	800d060 <_sbrk_r>
 800bd62:	6030      	str	r0, [r6, #0]
 800bd64:	0029      	movs	r1, r5
 800bd66:	0020      	movs	r0, r4
 800bd68:	f001 f97a 	bl	800d060 <_sbrk_r>
 800bd6c:	1c43      	adds	r3, r0, #1
 800bd6e:	d00a      	beq.n	800bd86 <sbrk_aligned+0x36>
 800bd70:	2303      	movs	r3, #3
 800bd72:	1cc5      	adds	r5, r0, #3
 800bd74:	439d      	bics	r5, r3
 800bd76:	42a8      	cmp	r0, r5
 800bd78:	d007      	beq.n	800bd8a <sbrk_aligned+0x3a>
 800bd7a:	1a29      	subs	r1, r5, r0
 800bd7c:	0020      	movs	r0, r4
 800bd7e:	f001 f96f 	bl	800d060 <_sbrk_r>
 800bd82:	3001      	adds	r0, #1
 800bd84:	d101      	bne.n	800bd8a <sbrk_aligned+0x3a>
 800bd86:	2501      	movs	r5, #1
 800bd88:	426d      	negs	r5, r5
 800bd8a:	0028      	movs	r0, r5
 800bd8c:	bd70      	pop	{r4, r5, r6, pc}
 800bd8e:	46c0      	nop			; (mov r8, r8)
 800bd90:	20000988 	.word	0x20000988

0800bd94 <_malloc_r>:
 800bd94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd96:	2203      	movs	r2, #3
 800bd98:	1ccb      	adds	r3, r1, #3
 800bd9a:	4393      	bics	r3, r2
 800bd9c:	3308      	adds	r3, #8
 800bd9e:	0006      	movs	r6, r0
 800bda0:	001f      	movs	r7, r3
 800bda2:	2b0c      	cmp	r3, #12
 800bda4:	d238      	bcs.n	800be18 <_malloc_r+0x84>
 800bda6:	270c      	movs	r7, #12
 800bda8:	42b9      	cmp	r1, r7
 800bdaa:	d837      	bhi.n	800be1c <_malloc_r+0x88>
 800bdac:	0030      	movs	r0, r6
 800bdae:	f000 f885 	bl	800bebc <__malloc_lock>
 800bdb2:	4b38      	ldr	r3, [pc, #224]	; (800be94 <_malloc_r+0x100>)
 800bdb4:	9300      	str	r3, [sp, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	001c      	movs	r4, r3
 800bdba:	2c00      	cmp	r4, #0
 800bdbc:	d133      	bne.n	800be26 <_malloc_r+0x92>
 800bdbe:	0039      	movs	r1, r7
 800bdc0:	0030      	movs	r0, r6
 800bdc2:	f7ff ffc5 	bl	800bd50 <sbrk_aligned>
 800bdc6:	0004      	movs	r4, r0
 800bdc8:	1c43      	adds	r3, r0, #1
 800bdca:	d15e      	bne.n	800be8a <_malloc_r+0xf6>
 800bdcc:	9b00      	ldr	r3, [sp, #0]
 800bdce:	681c      	ldr	r4, [r3, #0]
 800bdd0:	0025      	movs	r5, r4
 800bdd2:	2d00      	cmp	r5, #0
 800bdd4:	d14e      	bne.n	800be74 <_malloc_r+0xe0>
 800bdd6:	2c00      	cmp	r4, #0
 800bdd8:	d051      	beq.n	800be7e <_malloc_r+0xea>
 800bdda:	6823      	ldr	r3, [r4, #0]
 800bddc:	0029      	movs	r1, r5
 800bdde:	18e3      	adds	r3, r4, r3
 800bde0:	0030      	movs	r0, r6
 800bde2:	9301      	str	r3, [sp, #4]
 800bde4:	f001 f93c 	bl	800d060 <_sbrk_r>
 800bde8:	9b01      	ldr	r3, [sp, #4]
 800bdea:	4283      	cmp	r3, r0
 800bdec:	d147      	bne.n	800be7e <_malloc_r+0xea>
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	0030      	movs	r0, r6
 800bdf2:	1aff      	subs	r7, r7, r3
 800bdf4:	0039      	movs	r1, r7
 800bdf6:	f7ff ffab 	bl	800bd50 <sbrk_aligned>
 800bdfa:	3001      	adds	r0, #1
 800bdfc:	d03f      	beq.n	800be7e <_malloc_r+0xea>
 800bdfe:	6823      	ldr	r3, [r4, #0]
 800be00:	19db      	adds	r3, r3, r7
 800be02:	6023      	str	r3, [r4, #0]
 800be04:	9b00      	ldr	r3, [sp, #0]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d040      	beq.n	800be8e <_malloc_r+0xfa>
 800be0c:	685a      	ldr	r2, [r3, #4]
 800be0e:	42a2      	cmp	r2, r4
 800be10:	d133      	bne.n	800be7a <_malloc_r+0xe6>
 800be12:	2200      	movs	r2, #0
 800be14:	605a      	str	r2, [r3, #4]
 800be16:	e014      	b.n	800be42 <_malloc_r+0xae>
 800be18:	2b00      	cmp	r3, #0
 800be1a:	dac5      	bge.n	800bda8 <_malloc_r+0x14>
 800be1c:	230c      	movs	r3, #12
 800be1e:	2500      	movs	r5, #0
 800be20:	6033      	str	r3, [r6, #0]
 800be22:	0028      	movs	r0, r5
 800be24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be26:	6821      	ldr	r1, [r4, #0]
 800be28:	1bc9      	subs	r1, r1, r7
 800be2a:	d420      	bmi.n	800be6e <_malloc_r+0xda>
 800be2c:	290b      	cmp	r1, #11
 800be2e:	d918      	bls.n	800be62 <_malloc_r+0xce>
 800be30:	19e2      	adds	r2, r4, r7
 800be32:	6027      	str	r7, [r4, #0]
 800be34:	42a3      	cmp	r3, r4
 800be36:	d112      	bne.n	800be5e <_malloc_r+0xca>
 800be38:	9b00      	ldr	r3, [sp, #0]
 800be3a:	601a      	str	r2, [r3, #0]
 800be3c:	6863      	ldr	r3, [r4, #4]
 800be3e:	6011      	str	r1, [r2, #0]
 800be40:	6053      	str	r3, [r2, #4]
 800be42:	0030      	movs	r0, r6
 800be44:	0025      	movs	r5, r4
 800be46:	f000 f841 	bl	800becc <__malloc_unlock>
 800be4a:	2207      	movs	r2, #7
 800be4c:	350b      	adds	r5, #11
 800be4e:	1d23      	adds	r3, r4, #4
 800be50:	4395      	bics	r5, r2
 800be52:	1aea      	subs	r2, r5, r3
 800be54:	429d      	cmp	r5, r3
 800be56:	d0e4      	beq.n	800be22 <_malloc_r+0x8e>
 800be58:	1b5b      	subs	r3, r3, r5
 800be5a:	50a3      	str	r3, [r4, r2]
 800be5c:	e7e1      	b.n	800be22 <_malloc_r+0x8e>
 800be5e:	605a      	str	r2, [r3, #4]
 800be60:	e7ec      	b.n	800be3c <_malloc_r+0xa8>
 800be62:	6862      	ldr	r2, [r4, #4]
 800be64:	42a3      	cmp	r3, r4
 800be66:	d1d5      	bne.n	800be14 <_malloc_r+0x80>
 800be68:	9b00      	ldr	r3, [sp, #0]
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	e7e9      	b.n	800be42 <_malloc_r+0xae>
 800be6e:	0023      	movs	r3, r4
 800be70:	6864      	ldr	r4, [r4, #4]
 800be72:	e7a2      	b.n	800bdba <_malloc_r+0x26>
 800be74:	002c      	movs	r4, r5
 800be76:	686d      	ldr	r5, [r5, #4]
 800be78:	e7ab      	b.n	800bdd2 <_malloc_r+0x3e>
 800be7a:	0013      	movs	r3, r2
 800be7c:	e7c4      	b.n	800be08 <_malloc_r+0x74>
 800be7e:	230c      	movs	r3, #12
 800be80:	0030      	movs	r0, r6
 800be82:	6033      	str	r3, [r6, #0]
 800be84:	f000 f822 	bl	800becc <__malloc_unlock>
 800be88:	e7cb      	b.n	800be22 <_malloc_r+0x8e>
 800be8a:	6027      	str	r7, [r4, #0]
 800be8c:	e7d9      	b.n	800be42 <_malloc_r+0xae>
 800be8e:	605b      	str	r3, [r3, #4]
 800be90:	deff      	udf	#255	; 0xff
 800be92:	46c0      	nop			; (mov r8, r8)
 800be94:	20000984 	.word	0x20000984

0800be98 <__ascii_mbtowc>:
 800be98:	b082      	sub	sp, #8
 800be9a:	2900      	cmp	r1, #0
 800be9c:	d100      	bne.n	800bea0 <__ascii_mbtowc+0x8>
 800be9e:	a901      	add	r1, sp, #4
 800bea0:	1e10      	subs	r0, r2, #0
 800bea2:	d006      	beq.n	800beb2 <__ascii_mbtowc+0x1a>
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d006      	beq.n	800beb6 <__ascii_mbtowc+0x1e>
 800bea8:	7813      	ldrb	r3, [r2, #0]
 800beaa:	600b      	str	r3, [r1, #0]
 800beac:	7810      	ldrb	r0, [r2, #0]
 800beae:	1e43      	subs	r3, r0, #1
 800beb0:	4198      	sbcs	r0, r3
 800beb2:	b002      	add	sp, #8
 800beb4:	4770      	bx	lr
 800beb6:	2002      	movs	r0, #2
 800beb8:	4240      	negs	r0, r0
 800beba:	e7fa      	b.n	800beb2 <__ascii_mbtowc+0x1a>

0800bebc <__malloc_lock>:
 800bebc:	b510      	push	{r4, lr}
 800bebe:	4802      	ldr	r0, [pc, #8]	; (800bec8 <__malloc_lock+0xc>)
 800bec0:	f7fe fcd7 	bl	800a872 <__retarget_lock_acquire_recursive>
 800bec4:	bd10      	pop	{r4, pc}
 800bec6:	46c0      	nop			; (mov r8, r8)
 800bec8:	20000980 	.word	0x20000980

0800becc <__malloc_unlock>:
 800becc:	b510      	push	{r4, lr}
 800bece:	4802      	ldr	r0, [pc, #8]	; (800bed8 <__malloc_unlock+0xc>)
 800bed0:	f7fe fcd0 	bl	800a874 <__retarget_lock_release_recursive>
 800bed4:	bd10      	pop	{r4, pc}
 800bed6:	46c0      	nop			; (mov r8, r8)
 800bed8:	20000980 	.word	0x20000980

0800bedc <_Balloc>:
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	69c5      	ldr	r5, [r0, #28]
 800bee0:	0006      	movs	r6, r0
 800bee2:	000c      	movs	r4, r1
 800bee4:	2d00      	cmp	r5, #0
 800bee6:	d10e      	bne.n	800bf06 <_Balloc+0x2a>
 800bee8:	2010      	movs	r0, #16
 800beea:	f7ff ff27 	bl	800bd3c <malloc>
 800beee:	1e02      	subs	r2, r0, #0
 800bef0:	61f0      	str	r0, [r6, #28]
 800bef2:	d104      	bne.n	800befe <_Balloc+0x22>
 800bef4:	216b      	movs	r1, #107	; 0x6b
 800bef6:	4b19      	ldr	r3, [pc, #100]	; (800bf5c <_Balloc+0x80>)
 800bef8:	4819      	ldr	r0, [pc, #100]	; (800bf60 <_Balloc+0x84>)
 800befa:	f001 f8c3 	bl	800d084 <__assert_func>
 800befe:	6045      	str	r5, [r0, #4]
 800bf00:	6085      	str	r5, [r0, #8]
 800bf02:	6005      	str	r5, [r0, #0]
 800bf04:	60c5      	str	r5, [r0, #12]
 800bf06:	69f5      	ldr	r5, [r6, #28]
 800bf08:	68eb      	ldr	r3, [r5, #12]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d013      	beq.n	800bf36 <_Balloc+0x5a>
 800bf0e:	69f3      	ldr	r3, [r6, #28]
 800bf10:	00a2      	lsls	r2, r4, #2
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	189b      	adds	r3, r3, r2
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	d118      	bne.n	800bf4e <_Balloc+0x72>
 800bf1c:	2101      	movs	r1, #1
 800bf1e:	000d      	movs	r5, r1
 800bf20:	40a5      	lsls	r5, r4
 800bf22:	1d6a      	adds	r2, r5, #5
 800bf24:	0030      	movs	r0, r6
 800bf26:	0092      	lsls	r2, r2, #2
 800bf28:	f001 f8ca 	bl	800d0c0 <_calloc_r>
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	d00c      	beq.n	800bf4a <_Balloc+0x6e>
 800bf30:	6044      	str	r4, [r0, #4]
 800bf32:	6085      	str	r5, [r0, #8]
 800bf34:	e00d      	b.n	800bf52 <_Balloc+0x76>
 800bf36:	2221      	movs	r2, #33	; 0x21
 800bf38:	2104      	movs	r1, #4
 800bf3a:	0030      	movs	r0, r6
 800bf3c:	f001 f8c0 	bl	800d0c0 <_calloc_r>
 800bf40:	69f3      	ldr	r3, [r6, #28]
 800bf42:	60e8      	str	r0, [r5, #12]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d1e1      	bne.n	800bf0e <_Balloc+0x32>
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	bd70      	pop	{r4, r5, r6, pc}
 800bf4e:	6802      	ldr	r2, [r0, #0]
 800bf50:	601a      	str	r2, [r3, #0]
 800bf52:	2300      	movs	r3, #0
 800bf54:	6103      	str	r3, [r0, #16]
 800bf56:	60c3      	str	r3, [r0, #12]
 800bf58:	e7f8      	b.n	800bf4c <_Balloc+0x70>
 800bf5a:	46c0      	nop			; (mov r8, r8)
 800bf5c:	0800d4df 	.word	0x0800d4df
 800bf60:	0800d5bf 	.word	0x0800d5bf

0800bf64 <_Bfree>:
 800bf64:	b570      	push	{r4, r5, r6, lr}
 800bf66:	69c6      	ldr	r6, [r0, #28]
 800bf68:	0005      	movs	r5, r0
 800bf6a:	000c      	movs	r4, r1
 800bf6c:	2e00      	cmp	r6, #0
 800bf6e:	d10e      	bne.n	800bf8e <_Bfree+0x2a>
 800bf70:	2010      	movs	r0, #16
 800bf72:	f7ff fee3 	bl	800bd3c <malloc>
 800bf76:	1e02      	subs	r2, r0, #0
 800bf78:	61e8      	str	r0, [r5, #28]
 800bf7a:	d104      	bne.n	800bf86 <_Bfree+0x22>
 800bf7c:	218f      	movs	r1, #143	; 0x8f
 800bf7e:	4b09      	ldr	r3, [pc, #36]	; (800bfa4 <_Bfree+0x40>)
 800bf80:	4809      	ldr	r0, [pc, #36]	; (800bfa8 <_Bfree+0x44>)
 800bf82:	f001 f87f 	bl	800d084 <__assert_func>
 800bf86:	6046      	str	r6, [r0, #4]
 800bf88:	6086      	str	r6, [r0, #8]
 800bf8a:	6006      	str	r6, [r0, #0]
 800bf8c:	60c6      	str	r6, [r0, #12]
 800bf8e:	2c00      	cmp	r4, #0
 800bf90:	d007      	beq.n	800bfa2 <_Bfree+0x3e>
 800bf92:	69eb      	ldr	r3, [r5, #28]
 800bf94:	6862      	ldr	r2, [r4, #4]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	0092      	lsls	r2, r2, #2
 800bf9a:	189b      	adds	r3, r3, r2
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	6022      	str	r2, [r4, #0]
 800bfa0:	601c      	str	r4, [r3, #0]
 800bfa2:	bd70      	pop	{r4, r5, r6, pc}
 800bfa4:	0800d4df 	.word	0x0800d4df
 800bfa8:	0800d5bf 	.word	0x0800d5bf

0800bfac <__multadd>:
 800bfac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfae:	000e      	movs	r6, r1
 800bfb0:	9001      	str	r0, [sp, #4]
 800bfb2:	000c      	movs	r4, r1
 800bfb4:	001d      	movs	r5, r3
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	690f      	ldr	r7, [r1, #16]
 800bfba:	3614      	adds	r6, #20
 800bfbc:	6833      	ldr	r3, [r6, #0]
 800bfbe:	3001      	adds	r0, #1
 800bfc0:	b299      	uxth	r1, r3
 800bfc2:	4351      	muls	r1, r2
 800bfc4:	0c1b      	lsrs	r3, r3, #16
 800bfc6:	4353      	muls	r3, r2
 800bfc8:	1949      	adds	r1, r1, r5
 800bfca:	0c0d      	lsrs	r5, r1, #16
 800bfcc:	195b      	adds	r3, r3, r5
 800bfce:	0c1d      	lsrs	r5, r3, #16
 800bfd0:	b289      	uxth	r1, r1
 800bfd2:	041b      	lsls	r3, r3, #16
 800bfd4:	185b      	adds	r3, r3, r1
 800bfd6:	c608      	stmia	r6!, {r3}
 800bfd8:	4287      	cmp	r7, r0
 800bfda:	dcef      	bgt.n	800bfbc <__multadd+0x10>
 800bfdc:	2d00      	cmp	r5, #0
 800bfde:	d022      	beq.n	800c026 <__multadd+0x7a>
 800bfe0:	68a3      	ldr	r3, [r4, #8]
 800bfe2:	42bb      	cmp	r3, r7
 800bfe4:	dc19      	bgt.n	800c01a <__multadd+0x6e>
 800bfe6:	6861      	ldr	r1, [r4, #4]
 800bfe8:	9801      	ldr	r0, [sp, #4]
 800bfea:	3101      	adds	r1, #1
 800bfec:	f7ff ff76 	bl	800bedc <_Balloc>
 800bff0:	1e06      	subs	r6, r0, #0
 800bff2:	d105      	bne.n	800c000 <__multadd+0x54>
 800bff4:	0032      	movs	r2, r6
 800bff6:	21ba      	movs	r1, #186	; 0xba
 800bff8:	4b0c      	ldr	r3, [pc, #48]	; (800c02c <__multadd+0x80>)
 800bffa:	480d      	ldr	r0, [pc, #52]	; (800c030 <__multadd+0x84>)
 800bffc:	f001 f842 	bl	800d084 <__assert_func>
 800c000:	0021      	movs	r1, r4
 800c002:	6922      	ldr	r2, [r4, #16]
 800c004:	310c      	adds	r1, #12
 800c006:	3202      	adds	r2, #2
 800c008:	0092      	lsls	r2, r2, #2
 800c00a:	300c      	adds	r0, #12
 800c00c:	f7fe fc3e 	bl	800a88c <memcpy>
 800c010:	0021      	movs	r1, r4
 800c012:	9801      	ldr	r0, [sp, #4]
 800c014:	f7ff ffa6 	bl	800bf64 <_Bfree>
 800c018:	0034      	movs	r4, r6
 800c01a:	1d3b      	adds	r3, r7, #4
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	18e3      	adds	r3, r4, r3
 800c020:	605d      	str	r5, [r3, #4]
 800c022:	1c7b      	adds	r3, r7, #1
 800c024:	6123      	str	r3, [r4, #16]
 800c026:	0020      	movs	r0, r4
 800c028:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c02a:	46c0      	nop			; (mov r8, r8)
 800c02c:	0800d54e 	.word	0x0800d54e
 800c030:	0800d5bf 	.word	0x0800d5bf

0800c034 <__s2b>:
 800c034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c036:	0006      	movs	r6, r0
 800c038:	0018      	movs	r0, r3
 800c03a:	000c      	movs	r4, r1
 800c03c:	3008      	adds	r0, #8
 800c03e:	2109      	movs	r1, #9
 800c040:	9301      	str	r3, [sp, #4]
 800c042:	0015      	movs	r5, r2
 800c044:	f7f4 f906 	bl	8000254 <__divsi3>
 800c048:	2301      	movs	r3, #1
 800c04a:	2100      	movs	r1, #0
 800c04c:	4283      	cmp	r3, r0
 800c04e:	db0a      	blt.n	800c066 <__s2b+0x32>
 800c050:	0030      	movs	r0, r6
 800c052:	f7ff ff43 	bl	800bedc <_Balloc>
 800c056:	1e01      	subs	r1, r0, #0
 800c058:	d108      	bne.n	800c06c <__s2b+0x38>
 800c05a:	000a      	movs	r2, r1
 800c05c:	4b19      	ldr	r3, [pc, #100]	; (800c0c4 <__s2b+0x90>)
 800c05e:	481a      	ldr	r0, [pc, #104]	; (800c0c8 <__s2b+0x94>)
 800c060:	31d3      	adds	r1, #211	; 0xd3
 800c062:	f001 f80f 	bl	800d084 <__assert_func>
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	3101      	adds	r1, #1
 800c06a:	e7ef      	b.n	800c04c <__s2b+0x18>
 800c06c:	9b08      	ldr	r3, [sp, #32]
 800c06e:	6143      	str	r3, [r0, #20]
 800c070:	2301      	movs	r3, #1
 800c072:	6103      	str	r3, [r0, #16]
 800c074:	2d09      	cmp	r5, #9
 800c076:	dd18      	ble.n	800c0aa <__s2b+0x76>
 800c078:	0023      	movs	r3, r4
 800c07a:	3309      	adds	r3, #9
 800c07c:	001f      	movs	r7, r3
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	1964      	adds	r4, r4, r5
 800c082:	783b      	ldrb	r3, [r7, #0]
 800c084:	220a      	movs	r2, #10
 800c086:	0030      	movs	r0, r6
 800c088:	3b30      	subs	r3, #48	; 0x30
 800c08a:	f7ff ff8f 	bl	800bfac <__multadd>
 800c08e:	3701      	adds	r7, #1
 800c090:	0001      	movs	r1, r0
 800c092:	42a7      	cmp	r7, r4
 800c094:	d1f5      	bne.n	800c082 <__s2b+0x4e>
 800c096:	002c      	movs	r4, r5
 800c098:	9b00      	ldr	r3, [sp, #0]
 800c09a:	3c08      	subs	r4, #8
 800c09c:	191c      	adds	r4, r3, r4
 800c09e:	002f      	movs	r7, r5
 800c0a0:	9b01      	ldr	r3, [sp, #4]
 800c0a2:	429f      	cmp	r7, r3
 800c0a4:	db04      	blt.n	800c0b0 <__s2b+0x7c>
 800c0a6:	0008      	movs	r0, r1
 800c0a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c0aa:	2509      	movs	r5, #9
 800c0ac:	340a      	adds	r4, #10
 800c0ae:	e7f6      	b.n	800c09e <__s2b+0x6a>
 800c0b0:	1b63      	subs	r3, r4, r5
 800c0b2:	5ddb      	ldrb	r3, [r3, r7]
 800c0b4:	220a      	movs	r2, #10
 800c0b6:	0030      	movs	r0, r6
 800c0b8:	3b30      	subs	r3, #48	; 0x30
 800c0ba:	f7ff ff77 	bl	800bfac <__multadd>
 800c0be:	3701      	adds	r7, #1
 800c0c0:	0001      	movs	r1, r0
 800c0c2:	e7ed      	b.n	800c0a0 <__s2b+0x6c>
 800c0c4:	0800d54e 	.word	0x0800d54e
 800c0c8:	0800d5bf 	.word	0x0800d5bf

0800c0cc <__hi0bits>:
 800c0cc:	0003      	movs	r3, r0
 800c0ce:	0c02      	lsrs	r2, r0, #16
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	4282      	cmp	r2, r0
 800c0d4:	d101      	bne.n	800c0da <__hi0bits+0xe>
 800c0d6:	041b      	lsls	r3, r3, #16
 800c0d8:	3010      	adds	r0, #16
 800c0da:	0e1a      	lsrs	r2, r3, #24
 800c0dc:	d101      	bne.n	800c0e2 <__hi0bits+0x16>
 800c0de:	3008      	adds	r0, #8
 800c0e0:	021b      	lsls	r3, r3, #8
 800c0e2:	0f1a      	lsrs	r2, r3, #28
 800c0e4:	d101      	bne.n	800c0ea <__hi0bits+0x1e>
 800c0e6:	3004      	adds	r0, #4
 800c0e8:	011b      	lsls	r3, r3, #4
 800c0ea:	0f9a      	lsrs	r2, r3, #30
 800c0ec:	d101      	bne.n	800c0f2 <__hi0bits+0x26>
 800c0ee:	3002      	adds	r0, #2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	db03      	blt.n	800c0fe <__hi0bits+0x32>
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	005b      	lsls	r3, r3, #1
 800c0fa:	d400      	bmi.n	800c0fe <__hi0bits+0x32>
 800c0fc:	2020      	movs	r0, #32
 800c0fe:	4770      	bx	lr

0800c100 <__lo0bits>:
 800c100:	6803      	ldr	r3, [r0, #0]
 800c102:	0001      	movs	r1, r0
 800c104:	2207      	movs	r2, #7
 800c106:	0018      	movs	r0, r3
 800c108:	4010      	ands	r0, r2
 800c10a:	4213      	tst	r3, r2
 800c10c:	d00d      	beq.n	800c12a <__lo0bits+0x2a>
 800c10e:	3a06      	subs	r2, #6
 800c110:	2000      	movs	r0, #0
 800c112:	4213      	tst	r3, r2
 800c114:	d105      	bne.n	800c122 <__lo0bits+0x22>
 800c116:	3002      	adds	r0, #2
 800c118:	4203      	tst	r3, r0
 800c11a:	d003      	beq.n	800c124 <__lo0bits+0x24>
 800c11c:	40d3      	lsrs	r3, r2
 800c11e:	0010      	movs	r0, r2
 800c120:	600b      	str	r3, [r1, #0]
 800c122:	4770      	bx	lr
 800c124:	089b      	lsrs	r3, r3, #2
 800c126:	600b      	str	r3, [r1, #0]
 800c128:	e7fb      	b.n	800c122 <__lo0bits+0x22>
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	2a00      	cmp	r2, #0
 800c12e:	d101      	bne.n	800c134 <__lo0bits+0x34>
 800c130:	2010      	movs	r0, #16
 800c132:	0c1b      	lsrs	r3, r3, #16
 800c134:	b2da      	uxtb	r2, r3
 800c136:	2a00      	cmp	r2, #0
 800c138:	d101      	bne.n	800c13e <__lo0bits+0x3e>
 800c13a:	3008      	adds	r0, #8
 800c13c:	0a1b      	lsrs	r3, r3, #8
 800c13e:	071a      	lsls	r2, r3, #28
 800c140:	d101      	bne.n	800c146 <__lo0bits+0x46>
 800c142:	3004      	adds	r0, #4
 800c144:	091b      	lsrs	r3, r3, #4
 800c146:	079a      	lsls	r2, r3, #30
 800c148:	d101      	bne.n	800c14e <__lo0bits+0x4e>
 800c14a:	3002      	adds	r0, #2
 800c14c:	089b      	lsrs	r3, r3, #2
 800c14e:	07da      	lsls	r2, r3, #31
 800c150:	d4e9      	bmi.n	800c126 <__lo0bits+0x26>
 800c152:	3001      	adds	r0, #1
 800c154:	085b      	lsrs	r3, r3, #1
 800c156:	d1e6      	bne.n	800c126 <__lo0bits+0x26>
 800c158:	2020      	movs	r0, #32
 800c15a:	e7e2      	b.n	800c122 <__lo0bits+0x22>

0800c15c <__i2b>:
 800c15c:	b510      	push	{r4, lr}
 800c15e:	000c      	movs	r4, r1
 800c160:	2101      	movs	r1, #1
 800c162:	f7ff febb 	bl	800bedc <_Balloc>
 800c166:	2800      	cmp	r0, #0
 800c168:	d107      	bne.n	800c17a <__i2b+0x1e>
 800c16a:	2146      	movs	r1, #70	; 0x46
 800c16c:	4c05      	ldr	r4, [pc, #20]	; (800c184 <__i2b+0x28>)
 800c16e:	0002      	movs	r2, r0
 800c170:	4b05      	ldr	r3, [pc, #20]	; (800c188 <__i2b+0x2c>)
 800c172:	0020      	movs	r0, r4
 800c174:	31ff      	adds	r1, #255	; 0xff
 800c176:	f000 ff85 	bl	800d084 <__assert_func>
 800c17a:	2301      	movs	r3, #1
 800c17c:	6144      	str	r4, [r0, #20]
 800c17e:	6103      	str	r3, [r0, #16]
 800c180:	bd10      	pop	{r4, pc}
 800c182:	46c0      	nop			; (mov r8, r8)
 800c184:	0800d5bf 	.word	0x0800d5bf
 800c188:	0800d54e 	.word	0x0800d54e

0800c18c <__multiply>:
 800c18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c18e:	0015      	movs	r5, r2
 800c190:	690a      	ldr	r2, [r1, #16]
 800c192:	692b      	ldr	r3, [r5, #16]
 800c194:	000c      	movs	r4, r1
 800c196:	b08b      	sub	sp, #44	; 0x2c
 800c198:	429a      	cmp	r2, r3
 800c19a:	da01      	bge.n	800c1a0 <__multiply+0x14>
 800c19c:	002c      	movs	r4, r5
 800c19e:	000d      	movs	r5, r1
 800c1a0:	6927      	ldr	r7, [r4, #16]
 800c1a2:	692e      	ldr	r6, [r5, #16]
 800c1a4:	6861      	ldr	r1, [r4, #4]
 800c1a6:	19bb      	adds	r3, r7, r6
 800c1a8:	9303      	str	r3, [sp, #12]
 800c1aa:	68a3      	ldr	r3, [r4, #8]
 800c1ac:	19ba      	adds	r2, r7, r6
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	da00      	bge.n	800c1b4 <__multiply+0x28>
 800c1b2:	3101      	adds	r1, #1
 800c1b4:	f7ff fe92 	bl	800bedc <_Balloc>
 800c1b8:	9002      	str	r0, [sp, #8]
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	d106      	bne.n	800c1cc <__multiply+0x40>
 800c1be:	21b1      	movs	r1, #177	; 0xb1
 800c1c0:	4b48      	ldr	r3, [pc, #288]	; (800c2e4 <__multiply+0x158>)
 800c1c2:	4849      	ldr	r0, [pc, #292]	; (800c2e8 <__multiply+0x15c>)
 800c1c4:	9a02      	ldr	r2, [sp, #8]
 800c1c6:	0049      	lsls	r1, r1, #1
 800c1c8:	f000 ff5c 	bl	800d084 <__assert_func>
 800c1cc:	9b02      	ldr	r3, [sp, #8]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	3314      	adds	r3, #20
 800c1d2:	469c      	mov	ip, r3
 800c1d4:	19bb      	adds	r3, r7, r6
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	4463      	add	r3, ip
 800c1da:	9304      	str	r3, [sp, #16]
 800c1dc:	4663      	mov	r3, ip
 800c1de:	9904      	ldr	r1, [sp, #16]
 800c1e0:	428b      	cmp	r3, r1
 800c1e2:	d32a      	bcc.n	800c23a <__multiply+0xae>
 800c1e4:	0023      	movs	r3, r4
 800c1e6:	00bf      	lsls	r7, r7, #2
 800c1e8:	3314      	adds	r3, #20
 800c1ea:	3514      	adds	r5, #20
 800c1ec:	9308      	str	r3, [sp, #32]
 800c1ee:	00b6      	lsls	r6, r6, #2
 800c1f0:	19db      	adds	r3, r3, r7
 800c1f2:	9305      	str	r3, [sp, #20]
 800c1f4:	19ab      	adds	r3, r5, r6
 800c1f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c1f8:	2304      	movs	r3, #4
 800c1fa:	9306      	str	r3, [sp, #24]
 800c1fc:	0023      	movs	r3, r4
 800c1fe:	9a05      	ldr	r2, [sp, #20]
 800c200:	3315      	adds	r3, #21
 800c202:	9501      	str	r5, [sp, #4]
 800c204:	429a      	cmp	r2, r3
 800c206:	d305      	bcc.n	800c214 <__multiply+0x88>
 800c208:	1b13      	subs	r3, r2, r4
 800c20a:	3b15      	subs	r3, #21
 800c20c:	089b      	lsrs	r3, r3, #2
 800c20e:	3301      	adds	r3, #1
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	9306      	str	r3, [sp, #24]
 800c214:	9b01      	ldr	r3, [sp, #4]
 800c216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c218:	4293      	cmp	r3, r2
 800c21a:	d310      	bcc.n	800c23e <__multiply+0xb2>
 800c21c:	9b03      	ldr	r3, [sp, #12]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	dd05      	ble.n	800c22e <__multiply+0xa2>
 800c222:	9b04      	ldr	r3, [sp, #16]
 800c224:	3b04      	subs	r3, #4
 800c226:	9304      	str	r3, [sp, #16]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d056      	beq.n	800c2dc <__multiply+0x150>
 800c22e:	9b02      	ldr	r3, [sp, #8]
 800c230:	9a03      	ldr	r2, [sp, #12]
 800c232:	0018      	movs	r0, r3
 800c234:	611a      	str	r2, [r3, #16]
 800c236:	b00b      	add	sp, #44	; 0x2c
 800c238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c23a:	c304      	stmia	r3!, {r2}
 800c23c:	e7cf      	b.n	800c1de <__multiply+0x52>
 800c23e:	9b01      	ldr	r3, [sp, #4]
 800c240:	6818      	ldr	r0, [r3, #0]
 800c242:	b280      	uxth	r0, r0
 800c244:	2800      	cmp	r0, #0
 800c246:	d01e      	beq.n	800c286 <__multiply+0xfa>
 800c248:	4667      	mov	r7, ip
 800c24a:	2500      	movs	r5, #0
 800c24c:	9e08      	ldr	r6, [sp, #32]
 800c24e:	ce02      	ldmia	r6!, {r1}
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	9307      	str	r3, [sp, #28]
 800c254:	b28b      	uxth	r3, r1
 800c256:	4343      	muls	r3, r0
 800c258:	001a      	movs	r2, r3
 800c25a:	466b      	mov	r3, sp
 800c25c:	8b9b      	ldrh	r3, [r3, #28]
 800c25e:	18d3      	adds	r3, r2, r3
 800c260:	195b      	adds	r3, r3, r5
 800c262:	0c0d      	lsrs	r5, r1, #16
 800c264:	4345      	muls	r5, r0
 800c266:	9a07      	ldr	r2, [sp, #28]
 800c268:	0c11      	lsrs	r1, r2, #16
 800c26a:	1869      	adds	r1, r5, r1
 800c26c:	0c1a      	lsrs	r2, r3, #16
 800c26e:	188a      	adds	r2, r1, r2
 800c270:	b29b      	uxth	r3, r3
 800c272:	0c15      	lsrs	r5, r2, #16
 800c274:	0412      	lsls	r2, r2, #16
 800c276:	431a      	orrs	r2, r3
 800c278:	9b05      	ldr	r3, [sp, #20]
 800c27a:	c704      	stmia	r7!, {r2}
 800c27c:	42b3      	cmp	r3, r6
 800c27e:	d8e6      	bhi.n	800c24e <__multiply+0xc2>
 800c280:	4663      	mov	r3, ip
 800c282:	9a06      	ldr	r2, [sp, #24]
 800c284:	509d      	str	r5, [r3, r2]
 800c286:	9b01      	ldr	r3, [sp, #4]
 800c288:	6818      	ldr	r0, [r3, #0]
 800c28a:	0c00      	lsrs	r0, r0, #16
 800c28c:	d020      	beq.n	800c2d0 <__multiply+0x144>
 800c28e:	4663      	mov	r3, ip
 800c290:	0025      	movs	r5, r4
 800c292:	4661      	mov	r1, ip
 800c294:	2700      	movs	r7, #0
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3514      	adds	r5, #20
 800c29a:	682a      	ldr	r2, [r5, #0]
 800c29c:	680e      	ldr	r6, [r1, #0]
 800c29e:	b292      	uxth	r2, r2
 800c2a0:	4342      	muls	r2, r0
 800c2a2:	0c36      	lsrs	r6, r6, #16
 800c2a4:	1992      	adds	r2, r2, r6
 800c2a6:	19d2      	adds	r2, r2, r7
 800c2a8:	0416      	lsls	r6, r2, #16
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	431e      	orrs	r6, r3
 800c2ae:	600e      	str	r6, [r1, #0]
 800c2b0:	cd40      	ldmia	r5!, {r6}
 800c2b2:	684b      	ldr	r3, [r1, #4]
 800c2b4:	0c36      	lsrs	r6, r6, #16
 800c2b6:	4346      	muls	r6, r0
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	0c12      	lsrs	r2, r2, #16
 800c2bc:	18f3      	adds	r3, r6, r3
 800c2be:	189b      	adds	r3, r3, r2
 800c2c0:	9a05      	ldr	r2, [sp, #20]
 800c2c2:	0c1f      	lsrs	r7, r3, #16
 800c2c4:	3104      	adds	r1, #4
 800c2c6:	42aa      	cmp	r2, r5
 800c2c8:	d8e7      	bhi.n	800c29a <__multiply+0x10e>
 800c2ca:	4662      	mov	r2, ip
 800c2cc:	9906      	ldr	r1, [sp, #24]
 800c2ce:	5053      	str	r3, [r2, r1]
 800c2d0:	9b01      	ldr	r3, [sp, #4]
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	9301      	str	r3, [sp, #4]
 800c2d6:	2304      	movs	r3, #4
 800c2d8:	449c      	add	ip, r3
 800c2da:	e79b      	b.n	800c214 <__multiply+0x88>
 800c2dc:	9b03      	ldr	r3, [sp, #12]
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	9303      	str	r3, [sp, #12]
 800c2e2:	e79b      	b.n	800c21c <__multiply+0x90>
 800c2e4:	0800d54e 	.word	0x0800d54e
 800c2e8:	0800d5bf 	.word	0x0800d5bf

0800c2ec <__pow5mult>:
 800c2ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2ee:	2303      	movs	r3, #3
 800c2f0:	0015      	movs	r5, r2
 800c2f2:	0007      	movs	r7, r0
 800c2f4:	000e      	movs	r6, r1
 800c2f6:	401a      	ands	r2, r3
 800c2f8:	421d      	tst	r5, r3
 800c2fa:	d008      	beq.n	800c30e <__pow5mult+0x22>
 800c2fc:	4925      	ldr	r1, [pc, #148]	; (800c394 <__pow5mult+0xa8>)
 800c2fe:	3a01      	subs	r2, #1
 800c300:	0092      	lsls	r2, r2, #2
 800c302:	5852      	ldr	r2, [r2, r1]
 800c304:	2300      	movs	r3, #0
 800c306:	0031      	movs	r1, r6
 800c308:	f7ff fe50 	bl	800bfac <__multadd>
 800c30c:	0006      	movs	r6, r0
 800c30e:	10ad      	asrs	r5, r5, #2
 800c310:	d03d      	beq.n	800c38e <__pow5mult+0xa2>
 800c312:	69fc      	ldr	r4, [r7, #28]
 800c314:	2c00      	cmp	r4, #0
 800c316:	d10f      	bne.n	800c338 <__pow5mult+0x4c>
 800c318:	2010      	movs	r0, #16
 800c31a:	f7ff fd0f 	bl	800bd3c <malloc>
 800c31e:	1e02      	subs	r2, r0, #0
 800c320:	61f8      	str	r0, [r7, #28]
 800c322:	d105      	bne.n	800c330 <__pow5mult+0x44>
 800c324:	21b4      	movs	r1, #180	; 0xb4
 800c326:	4b1c      	ldr	r3, [pc, #112]	; (800c398 <__pow5mult+0xac>)
 800c328:	481c      	ldr	r0, [pc, #112]	; (800c39c <__pow5mult+0xb0>)
 800c32a:	31ff      	adds	r1, #255	; 0xff
 800c32c:	f000 feaa 	bl	800d084 <__assert_func>
 800c330:	6044      	str	r4, [r0, #4]
 800c332:	6084      	str	r4, [r0, #8]
 800c334:	6004      	str	r4, [r0, #0]
 800c336:	60c4      	str	r4, [r0, #12]
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	689c      	ldr	r4, [r3, #8]
 800c33c:	9301      	str	r3, [sp, #4]
 800c33e:	2c00      	cmp	r4, #0
 800c340:	d108      	bne.n	800c354 <__pow5mult+0x68>
 800c342:	0038      	movs	r0, r7
 800c344:	4916      	ldr	r1, [pc, #88]	; (800c3a0 <__pow5mult+0xb4>)
 800c346:	f7ff ff09 	bl	800c15c <__i2b>
 800c34a:	9b01      	ldr	r3, [sp, #4]
 800c34c:	0004      	movs	r4, r0
 800c34e:	6098      	str	r0, [r3, #8]
 800c350:	2300      	movs	r3, #0
 800c352:	6003      	str	r3, [r0, #0]
 800c354:	2301      	movs	r3, #1
 800c356:	421d      	tst	r5, r3
 800c358:	d00a      	beq.n	800c370 <__pow5mult+0x84>
 800c35a:	0031      	movs	r1, r6
 800c35c:	0022      	movs	r2, r4
 800c35e:	0038      	movs	r0, r7
 800c360:	f7ff ff14 	bl	800c18c <__multiply>
 800c364:	0031      	movs	r1, r6
 800c366:	9001      	str	r0, [sp, #4]
 800c368:	0038      	movs	r0, r7
 800c36a:	f7ff fdfb 	bl	800bf64 <_Bfree>
 800c36e:	9e01      	ldr	r6, [sp, #4]
 800c370:	106d      	asrs	r5, r5, #1
 800c372:	d00c      	beq.n	800c38e <__pow5mult+0xa2>
 800c374:	6820      	ldr	r0, [r4, #0]
 800c376:	2800      	cmp	r0, #0
 800c378:	d107      	bne.n	800c38a <__pow5mult+0x9e>
 800c37a:	0022      	movs	r2, r4
 800c37c:	0021      	movs	r1, r4
 800c37e:	0038      	movs	r0, r7
 800c380:	f7ff ff04 	bl	800c18c <__multiply>
 800c384:	2300      	movs	r3, #0
 800c386:	6020      	str	r0, [r4, #0]
 800c388:	6003      	str	r3, [r0, #0]
 800c38a:	0004      	movs	r4, r0
 800c38c:	e7e2      	b.n	800c354 <__pow5mult+0x68>
 800c38e:	0030      	movs	r0, r6
 800c390:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c392:	46c0      	nop			; (mov r8, r8)
 800c394:	0800d708 	.word	0x0800d708
 800c398:	0800d4df 	.word	0x0800d4df
 800c39c:	0800d5bf 	.word	0x0800d5bf
 800c3a0:	00000271 	.word	0x00000271

0800c3a4 <__lshift>:
 800c3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3a6:	000c      	movs	r4, r1
 800c3a8:	0017      	movs	r7, r2
 800c3aa:	6923      	ldr	r3, [r4, #16]
 800c3ac:	1155      	asrs	r5, r2, #5
 800c3ae:	b087      	sub	sp, #28
 800c3b0:	18eb      	adds	r3, r5, r3
 800c3b2:	9302      	str	r3, [sp, #8]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	9301      	str	r3, [sp, #4]
 800c3b8:	6849      	ldr	r1, [r1, #4]
 800c3ba:	68a3      	ldr	r3, [r4, #8]
 800c3bc:	9004      	str	r0, [sp, #16]
 800c3be:	9a01      	ldr	r2, [sp, #4]
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	db10      	blt.n	800c3e6 <__lshift+0x42>
 800c3c4:	9804      	ldr	r0, [sp, #16]
 800c3c6:	f7ff fd89 	bl	800bedc <_Balloc>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	0002      	movs	r2, r0
 800c3ce:	0006      	movs	r6, r0
 800c3d0:	0019      	movs	r1, r3
 800c3d2:	3214      	adds	r2, #20
 800c3d4:	4298      	cmp	r0, r3
 800c3d6:	d10c      	bne.n	800c3f2 <__lshift+0x4e>
 800c3d8:	31df      	adds	r1, #223	; 0xdf
 800c3da:	0032      	movs	r2, r6
 800c3dc:	4b26      	ldr	r3, [pc, #152]	; (800c478 <__lshift+0xd4>)
 800c3de:	4827      	ldr	r0, [pc, #156]	; (800c47c <__lshift+0xd8>)
 800c3e0:	31ff      	adds	r1, #255	; 0xff
 800c3e2:	f000 fe4f 	bl	800d084 <__assert_func>
 800c3e6:	3101      	adds	r1, #1
 800c3e8:	005b      	lsls	r3, r3, #1
 800c3ea:	e7e8      	b.n	800c3be <__lshift+0x1a>
 800c3ec:	0098      	lsls	r0, r3, #2
 800c3ee:	5011      	str	r1, [r2, r0]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	42ab      	cmp	r3, r5
 800c3f4:	dbfa      	blt.n	800c3ec <__lshift+0x48>
 800c3f6:	43eb      	mvns	r3, r5
 800c3f8:	17db      	asrs	r3, r3, #31
 800c3fa:	401d      	ands	r5, r3
 800c3fc:	211f      	movs	r1, #31
 800c3fe:	0023      	movs	r3, r4
 800c400:	0038      	movs	r0, r7
 800c402:	00ad      	lsls	r5, r5, #2
 800c404:	1955      	adds	r5, r2, r5
 800c406:	6922      	ldr	r2, [r4, #16]
 800c408:	3314      	adds	r3, #20
 800c40a:	0092      	lsls	r2, r2, #2
 800c40c:	4008      	ands	r0, r1
 800c40e:	4684      	mov	ip, r0
 800c410:	189a      	adds	r2, r3, r2
 800c412:	420f      	tst	r7, r1
 800c414:	d02a      	beq.n	800c46c <__lshift+0xc8>
 800c416:	3101      	adds	r1, #1
 800c418:	1a09      	subs	r1, r1, r0
 800c41a:	9105      	str	r1, [sp, #20]
 800c41c:	2100      	movs	r1, #0
 800c41e:	9503      	str	r5, [sp, #12]
 800c420:	4667      	mov	r7, ip
 800c422:	6818      	ldr	r0, [r3, #0]
 800c424:	40b8      	lsls	r0, r7
 800c426:	4308      	orrs	r0, r1
 800c428:	9903      	ldr	r1, [sp, #12]
 800c42a:	c101      	stmia	r1!, {r0}
 800c42c:	9103      	str	r1, [sp, #12]
 800c42e:	9805      	ldr	r0, [sp, #20]
 800c430:	cb02      	ldmia	r3!, {r1}
 800c432:	40c1      	lsrs	r1, r0
 800c434:	429a      	cmp	r2, r3
 800c436:	d8f3      	bhi.n	800c420 <__lshift+0x7c>
 800c438:	0020      	movs	r0, r4
 800c43a:	3015      	adds	r0, #21
 800c43c:	2304      	movs	r3, #4
 800c43e:	4282      	cmp	r2, r0
 800c440:	d304      	bcc.n	800c44c <__lshift+0xa8>
 800c442:	1b13      	subs	r3, r2, r4
 800c444:	3b15      	subs	r3, #21
 800c446:	089b      	lsrs	r3, r3, #2
 800c448:	3301      	adds	r3, #1
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	50e9      	str	r1, [r5, r3]
 800c44e:	2900      	cmp	r1, #0
 800c450:	d002      	beq.n	800c458 <__lshift+0xb4>
 800c452:	9b02      	ldr	r3, [sp, #8]
 800c454:	3302      	adds	r3, #2
 800c456:	9301      	str	r3, [sp, #4]
 800c458:	9b01      	ldr	r3, [sp, #4]
 800c45a:	9804      	ldr	r0, [sp, #16]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	0021      	movs	r1, r4
 800c460:	6133      	str	r3, [r6, #16]
 800c462:	f7ff fd7f 	bl	800bf64 <_Bfree>
 800c466:	0030      	movs	r0, r6
 800c468:	b007      	add	sp, #28
 800c46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c46c:	cb02      	ldmia	r3!, {r1}
 800c46e:	c502      	stmia	r5!, {r1}
 800c470:	429a      	cmp	r2, r3
 800c472:	d8fb      	bhi.n	800c46c <__lshift+0xc8>
 800c474:	e7f0      	b.n	800c458 <__lshift+0xb4>
 800c476:	46c0      	nop			; (mov r8, r8)
 800c478:	0800d54e 	.word	0x0800d54e
 800c47c:	0800d5bf 	.word	0x0800d5bf

0800c480 <__mcmp>:
 800c480:	b530      	push	{r4, r5, lr}
 800c482:	690b      	ldr	r3, [r1, #16]
 800c484:	6904      	ldr	r4, [r0, #16]
 800c486:	0002      	movs	r2, r0
 800c488:	1ae0      	subs	r0, r4, r3
 800c48a:	429c      	cmp	r4, r3
 800c48c:	d10e      	bne.n	800c4ac <__mcmp+0x2c>
 800c48e:	3214      	adds	r2, #20
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	3114      	adds	r1, #20
 800c494:	0014      	movs	r4, r2
 800c496:	18c9      	adds	r1, r1, r3
 800c498:	18d2      	adds	r2, r2, r3
 800c49a:	3a04      	subs	r2, #4
 800c49c:	3904      	subs	r1, #4
 800c49e:	6815      	ldr	r5, [r2, #0]
 800c4a0:	680b      	ldr	r3, [r1, #0]
 800c4a2:	429d      	cmp	r5, r3
 800c4a4:	d003      	beq.n	800c4ae <__mcmp+0x2e>
 800c4a6:	2001      	movs	r0, #1
 800c4a8:	429d      	cmp	r5, r3
 800c4aa:	d303      	bcc.n	800c4b4 <__mcmp+0x34>
 800c4ac:	bd30      	pop	{r4, r5, pc}
 800c4ae:	4294      	cmp	r4, r2
 800c4b0:	d3f3      	bcc.n	800c49a <__mcmp+0x1a>
 800c4b2:	e7fb      	b.n	800c4ac <__mcmp+0x2c>
 800c4b4:	4240      	negs	r0, r0
 800c4b6:	e7f9      	b.n	800c4ac <__mcmp+0x2c>

0800c4b8 <__mdiff>:
 800c4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ba:	000e      	movs	r6, r1
 800c4bc:	0007      	movs	r7, r0
 800c4be:	0011      	movs	r1, r2
 800c4c0:	0030      	movs	r0, r6
 800c4c2:	b087      	sub	sp, #28
 800c4c4:	0014      	movs	r4, r2
 800c4c6:	f7ff ffdb 	bl	800c480 <__mcmp>
 800c4ca:	1e05      	subs	r5, r0, #0
 800c4cc:	d110      	bne.n	800c4f0 <__mdiff+0x38>
 800c4ce:	0001      	movs	r1, r0
 800c4d0:	0038      	movs	r0, r7
 800c4d2:	f7ff fd03 	bl	800bedc <_Balloc>
 800c4d6:	1e02      	subs	r2, r0, #0
 800c4d8:	d104      	bne.n	800c4e4 <__mdiff+0x2c>
 800c4da:	4b3f      	ldr	r3, [pc, #252]	; (800c5d8 <__mdiff+0x120>)
 800c4dc:	483f      	ldr	r0, [pc, #252]	; (800c5dc <__mdiff+0x124>)
 800c4de:	4940      	ldr	r1, [pc, #256]	; (800c5e0 <__mdiff+0x128>)
 800c4e0:	f000 fdd0 	bl	800d084 <__assert_func>
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	6145      	str	r5, [r0, #20]
 800c4e8:	6103      	str	r3, [r0, #16]
 800c4ea:	0010      	movs	r0, r2
 800c4ec:	b007      	add	sp, #28
 800c4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	9301      	str	r3, [sp, #4]
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	db04      	blt.n	800c502 <__mdiff+0x4a>
 800c4f8:	0023      	movs	r3, r4
 800c4fa:	0034      	movs	r4, r6
 800c4fc:	001e      	movs	r6, r3
 800c4fe:	2300      	movs	r3, #0
 800c500:	9301      	str	r3, [sp, #4]
 800c502:	0038      	movs	r0, r7
 800c504:	6861      	ldr	r1, [r4, #4]
 800c506:	f7ff fce9 	bl	800bedc <_Balloc>
 800c50a:	1e02      	subs	r2, r0, #0
 800c50c:	d103      	bne.n	800c516 <__mdiff+0x5e>
 800c50e:	4b32      	ldr	r3, [pc, #200]	; (800c5d8 <__mdiff+0x120>)
 800c510:	4832      	ldr	r0, [pc, #200]	; (800c5dc <__mdiff+0x124>)
 800c512:	4934      	ldr	r1, [pc, #208]	; (800c5e4 <__mdiff+0x12c>)
 800c514:	e7e4      	b.n	800c4e0 <__mdiff+0x28>
 800c516:	9b01      	ldr	r3, [sp, #4]
 800c518:	2700      	movs	r7, #0
 800c51a:	60c3      	str	r3, [r0, #12]
 800c51c:	6920      	ldr	r0, [r4, #16]
 800c51e:	3414      	adds	r4, #20
 800c520:	0083      	lsls	r3, r0, #2
 800c522:	18e3      	adds	r3, r4, r3
 800c524:	0021      	movs	r1, r4
 800c526:	9401      	str	r4, [sp, #4]
 800c528:	0034      	movs	r4, r6
 800c52a:	9302      	str	r3, [sp, #8]
 800c52c:	6933      	ldr	r3, [r6, #16]
 800c52e:	3414      	adds	r4, #20
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	18e3      	adds	r3, r4, r3
 800c534:	9303      	str	r3, [sp, #12]
 800c536:	0013      	movs	r3, r2
 800c538:	3314      	adds	r3, #20
 800c53a:	469c      	mov	ip, r3
 800c53c:	9305      	str	r3, [sp, #20]
 800c53e:	9104      	str	r1, [sp, #16]
 800c540:	9b04      	ldr	r3, [sp, #16]
 800c542:	cc02      	ldmia	r4!, {r1}
 800c544:	cb20      	ldmia	r3!, {r5}
 800c546:	9304      	str	r3, [sp, #16]
 800c548:	b2ab      	uxth	r3, r5
 800c54a:	19df      	adds	r7, r3, r7
 800c54c:	b28b      	uxth	r3, r1
 800c54e:	1afb      	subs	r3, r7, r3
 800c550:	0c09      	lsrs	r1, r1, #16
 800c552:	0c2d      	lsrs	r5, r5, #16
 800c554:	1a6d      	subs	r5, r5, r1
 800c556:	1419      	asrs	r1, r3, #16
 800c558:	1869      	adds	r1, r5, r1
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	140f      	asrs	r7, r1, #16
 800c55e:	0409      	lsls	r1, r1, #16
 800c560:	4319      	orrs	r1, r3
 800c562:	4663      	mov	r3, ip
 800c564:	c302      	stmia	r3!, {r1}
 800c566:	469c      	mov	ip, r3
 800c568:	9b03      	ldr	r3, [sp, #12]
 800c56a:	42a3      	cmp	r3, r4
 800c56c:	d8e8      	bhi.n	800c540 <__mdiff+0x88>
 800c56e:	0031      	movs	r1, r6
 800c570:	9c03      	ldr	r4, [sp, #12]
 800c572:	3115      	adds	r1, #21
 800c574:	2304      	movs	r3, #4
 800c576:	428c      	cmp	r4, r1
 800c578:	d304      	bcc.n	800c584 <__mdiff+0xcc>
 800c57a:	1ba3      	subs	r3, r4, r6
 800c57c:	3b15      	subs	r3, #21
 800c57e:	089b      	lsrs	r3, r3, #2
 800c580:	3301      	adds	r3, #1
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	9901      	ldr	r1, [sp, #4]
 800c586:	18cd      	adds	r5, r1, r3
 800c588:	9905      	ldr	r1, [sp, #20]
 800c58a:	002e      	movs	r6, r5
 800c58c:	18cb      	adds	r3, r1, r3
 800c58e:	469c      	mov	ip, r3
 800c590:	9902      	ldr	r1, [sp, #8]
 800c592:	428e      	cmp	r6, r1
 800c594:	d310      	bcc.n	800c5b8 <__mdiff+0x100>
 800c596:	9e02      	ldr	r6, [sp, #8]
 800c598:	1ee9      	subs	r1, r5, #3
 800c59a:	2400      	movs	r4, #0
 800c59c:	428e      	cmp	r6, r1
 800c59e:	d304      	bcc.n	800c5aa <__mdiff+0xf2>
 800c5a0:	0031      	movs	r1, r6
 800c5a2:	3103      	adds	r1, #3
 800c5a4:	1b49      	subs	r1, r1, r5
 800c5a6:	0889      	lsrs	r1, r1, #2
 800c5a8:	008c      	lsls	r4, r1, #2
 800c5aa:	191b      	adds	r3, r3, r4
 800c5ac:	3b04      	subs	r3, #4
 800c5ae:	6819      	ldr	r1, [r3, #0]
 800c5b0:	2900      	cmp	r1, #0
 800c5b2:	d00f      	beq.n	800c5d4 <__mdiff+0x11c>
 800c5b4:	6110      	str	r0, [r2, #16]
 800c5b6:	e798      	b.n	800c4ea <__mdiff+0x32>
 800c5b8:	ce02      	ldmia	r6!, {r1}
 800c5ba:	b28c      	uxth	r4, r1
 800c5bc:	19e4      	adds	r4, r4, r7
 800c5be:	0c0f      	lsrs	r7, r1, #16
 800c5c0:	1421      	asrs	r1, r4, #16
 800c5c2:	1879      	adds	r1, r7, r1
 800c5c4:	b2a4      	uxth	r4, r4
 800c5c6:	140f      	asrs	r7, r1, #16
 800c5c8:	0409      	lsls	r1, r1, #16
 800c5ca:	4321      	orrs	r1, r4
 800c5cc:	4664      	mov	r4, ip
 800c5ce:	c402      	stmia	r4!, {r1}
 800c5d0:	46a4      	mov	ip, r4
 800c5d2:	e7dd      	b.n	800c590 <__mdiff+0xd8>
 800c5d4:	3801      	subs	r0, #1
 800c5d6:	e7e9      	b.n	800c5ac <__mdiff+0xf4>
 800c5d8:	0800d54e 	.word	0x0800d54e
 800c5dc:	0800d5bf 	.word	0x0800d5bf
 800c5e0:	00000237 	.word	0x00000237
 800c5e4:	00000245 	.word	0x00000245

0800c5e8 <__ulp>:
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	4b0b      	ldr	r3, [pc, #44]	; (800c618 <__ulp+0x30>)
 800c5ec:	4019      	ands	r1, r3
 800c5ee:	4b0b      	ldr	r3, [pc, #44]	; (800c61c <__ulp+0x34>)
 800c5f0:	18c9      	adds	r1, r1, r3
 800c5f2:	4281      	cmp	r1, r0
 800c5f4:	dc06      	bgt.n	800c604 <__ulp+0x1c>
 800c5f6:	4249      	negs	r1, r1
 800c5f8:	150b      	asrs	r3, r1, #20
 800c5fa:	2b13      	cmp	r3, #19
 800c5fc:	dc03      	bgt.n	800c606 <__ulp+0x1e>
 800c5fe:	2180      	movs	r1, #128	; 0x80
 800c600:	0309      	lsls	r1, r1, #12
 800c602:	4119      	asrs	r1, r3
 800c604:	4770      	bx	lr
 800c606:	3b14      	subs	r3, #20
 800c608:	2001      	movs	r0, #1
 800c60a:	2b1e      	cmp	r3, #30
 800c60c:	dc02      	bgt.n	800c614 <__ulp+0x2c>
 800c60e:	2080      	movs	r0, #128	; 0x80
 800c610:	0600      	lsls	r0, r0, #24
 800c612:	40d8      	lsrs	r0, r3
 800c614:	2100      	movs	r1, #0
 800c616:	e7f5      	b.n	800c604 <__ulp+0x1c>
 800c618:	7ff00000 	.word	0x7ff00000
 800c61c:	fcc00000 	.word	0xfcc00000

0800c620 <__b2d>:
 800c620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c622:	0006      	movs	r6, r0
 800c624:	6903      	ldr	r3, [r0, #16]
 800c626:	3614      	adds	r6, #20
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	18f3      	adds	r3, r6, r3
 800c62c:	1f1d      	subs	r5, r3, #4
 800c62e:	682c      	ldr	r4, [r5, #0]
 800c630:	000f      	movs	r7, r1
 800c632:	0020      	movs	r0, r4
 800c634:	9301      	str	r3, [sp, #4]
 800c636:	f7ff fd49 	bl	800c0cc <__hi0bits>
 800c63a:	2220      	movs	r2, #32
 800c63c:	1a12      	subs	r2, r2, r0
 800c63e:	603a      	str	r2, [r7, #0]
 800c640:	0003      	movs	r3, r0
 800c642:	4a1c      	ldr	r2, [pc, #112]	; (800c6b4 <__b2d+0x94>)
 800c644:	280a      	cmp	r0, #10
 800c646:	dc15      	bgt.n	800c674 <__b2d+0x54>
 800c648:	210b      	movs	r1, #11
 800c64a:	0027      	movs	r7, r4
 800c64c:	1a09      	subs	r1, r1, r0
 800c64e:	40cf      	lsrs	r7, r1
 800c650:	433a      	orrs	r2, r7
 800c652:	468c      	mov	ip, r1
 800c654:	0011      	movs	r1, r2
 800c656:	2200      	movs	r2, #0
 800c658:	42ae      	cmp	r6, r5
 800c65a:	d202      	bcs.n	800c662 <__b2d+0x42>
 800c65c:	9a01      	ldr	r2, [sp, #4]
 800c65e:	3a08      	subs	r2, #8
 800c660:	6812      	ldr	r2, [r2, #0]
 800c662:	3315      	adds	r3, #21
 800c664:	409c      	lsls	r4, r3
 800c666:	4663      	mov	r3, ip
 800c668:	0027      	movs	r7, r4
 800c66a:	40da      	lsrs	r2, r3
 800c66c:	4317      	orrs	r7, r2
 800c66e:	0038      	movs	r0, r7
 800c670:	b003      	add	sp, #12
 800c672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c674:	2700      	movs	r7, #0
 800c676:	42ae      	cmp	r6, r5
 800c678:	d202      	bcs.n	800c680 <__b2d+0x60>
 800c67a:	9d01      	ldr	r5, [sp, #4]
 800c67c:	3d08      	subs	r5, #8
 800c67e:	682f      	ldr	r7, [r5, #0]
 800c680:	210b      	movs	r1, #11
 800c682:	4249      	negs	r1, r1
 800c684:	468c      	mov	ip, r1
 800c686:	449c      	add	ip, r3
 800c688:	2b0b      	cmp	r3, #11
 800c68a:	d010      	beq.n	800c6ae <__b2d+0x8e>
 800c68c:	4661      	mov	r1, ip
 800c68e:	2320      	movs	r3, #32
 800c690:	408c      	lsls	r4, r1
 800c692:	1a5b      	subs	r3, r3, r1
 800c694:	0039      	movs	r1, r7
 800c696:	40d9      	lsrs	r1, r3
 800c698:	430c      	orrs	r4, r1
 800c69a:	4322      	orrs	r2, r4
 800c69c:	0011      	movs	r1, r2
 800c69e:	2200      	movs	r2, #0
 800c6a0:	42b5      	cmp	r5, r6
 800c6a2:	d901      	bls.n	800c6a8 <__b2d+0x88>
 800c6a4:	3d04      	subs	r5, #4
 800c6a6:	682a      	ldr	r2, [r5, #0]
 800c6a8:	4664      	mov	r4, ip
 800c6aa:	40a7      	lsls	r7, r4
 800c6ac:	e7dd      	b.n	800c66a <__b2d+0x4a>
 800c6ae:	4322      	orrs	r2, r4
 800c6b0:	0011      	movs	r1, r2
 800c6b2:	e7dc      	b.n	800c66e <__b2d+0x4e>
 800c6b4:	3ff00000 	.word	0x3ff00000

0800c6b8 <__d2b>:
 800c6b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6ba:	2101      	movs	r1, #1
 800c6bc:	0014      	movs	r4, r2
 800c6be:	001d      	movs	r5, r3
 800c6c0:	9f08      	ldr	r7, [sp, #32]
 800c6c2:	f7ff fc0b 	bl	800bedc <_Balloc>
 800c6c6:	1e06      	subs	r6, r0, #0
 800c6c8:	d105      	bne.n	800c6d6 <__d2b+0x1e>
 800c6ca:	0032      	movs	r2, r6
 800c6cc:	4b24      	ldr	r3, [pc, #144]	; (800c760 <__d2b+0xa8>)
 800c6ce:	4825      	ldr	r0, [pc, #148]	; (800c764 <__d2b+0xac>)
 800c6d0:	4925      	ldr	r1, [pc, #148]	; (800c768 <__d2b+0xb0>)
 800c6d2:	f000 fcd7 	bl	800d084 <__assert_func>
 800c6d6:	032b      	lsls	r3, r5, #12
 800c6d8:	006d      	lsls	r5, r5, #1
 800c6da:	0b1b      	lsrs	r3, r3, #12
 800c6dc:	0d6d      	lsrs	r5, r5, #21
 800c6de:	d125      	bne.n	800c72c <__d2b+0x74>
 800c6e0:	9301      	str	r3, [sp, #4]
 800c6e2:	2c00      	cmp	r4, #0
 800c6e4:	d028      	beq.n	800c738 <__d2b+0x80>
 800c6e6:	4668      	mov	r0, sp
 800c6e8:	9400      	str	r4, [sp, #0]
 800c6ea:	f7ff fd09 	bl	800c100 <__lo0bits>
 800c6ee:	9b01      	ldr	r3, [sp, #4]
 800c6f0:	9900      	ldr	r1, [sp, #0]
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d01e      	beq.n	800c734 <__d2b+0x7c>
 800c6f6:	2220      	movs	r2, #32
 800c6f8:	001c      	movs	r4, r3
 800c6fa:	1a12      	subs	r2, r2, r0
 800c6fc:	4094      	lsls	r4, r2
 800c6fe:	0022      	movs	r2, r4
 800c700:	40c3      	lsrs	r3, r0
 800c702:	430a      	orrs	r2, r1
 800c704:	6172      	str	r2, [r6, #20]
 800c706:	9301      	str	r3, [sp, #4]
 800c708:	9c01      	ldr	r4, [sp, #4]
 800c70a:	61b4      	str	r4, [r6, #24]
 800c70c:	1e63      	subs	r3, r4, #1
 800c70e:	419c      	sbcs	r4, r3
 800c710:	3401      	adds	r4, #1
 800c712:	6134      	str	r4, [r6, #16]
 800c714:	2d00      	cmp	r5, #0
 800c716:	d017      	beq.n	800c748 <__d2b+0x90>
 800c718:	2435      	movs	r4, #53	; 0x35
 800c71a:	4b14      	ldr	r3, [pc, #80]	; (800c76c <__d2b+0xb4>)
 800c71c:	18ed      	adds	r5, r5, r3
 800c71e:	182d      	adds	r5, r5, r0
 800c720:	603d      	str	r5, [r7, #0]
 800c722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c724:	1a24      	subs	r4, r4, r0
 800c726:	601c      	str	r4, [r3, #0]
 800c728:	0030      	movs	r0, r6
 800c72a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c72c:	2280      	movs	r2, #128	; 0x80
 800c72e:	0352      	lsls	r2, r2, #13
 800c730:	4313      	orrs	r3, r2
 800c732:	e7d5      	b.n	800c6e0 <__d2b+0x28>
 800c734:	6171      	str	r1, [r6, #20]
 800c736:	e7e7      	b.n	800c708 <__d2b+0x50>
 800c738:	a801      	add	r0, sp, #4
 800c73a:	f7ff fce1 	bl	800c100 <__lo0bits>
 800c73e:	9b01      	ldr	r3, [sp, #4]
 800c740:	2401      	movs	r4, #1
 800c742:	6173      	str	r3, [r6, #20]
 800c744:	3020      	adds	r0, #32
 800c746:	e7e4      	b.n	800c712 <__d2b+0x5a>
 800c748:	4b09      	ldr	r3, [pc, #36]	; (800c770 <__d2b+0xb8>)
 800c74a:	18c0      	adds	r0, r0, r3
 800c74c:	4b09      	ldr	r3, [pc, #36]	; (800c774 <__d2b+0xbc>)
 800c74e:	6038      	str	r0, [r7, #0]
 800c750:	18e3      	adds	r3, r4, r3
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	18f3      	adds	r3, r6, r3
 800c756:	6958      	ldr	r0, [r3, #20]
 800c758:	f7ff fcb8 	bl	800c0cc <__hi0bits>
 800c75c:	0164      	lsls	r4, r4, #5
 800c75e:	e7e0      	b.n	800c722 <__d2b+0x6a>
 800c760:	0800d54e 	.word	0x0800d54e
 800c764:	0800d5bf 	.word	0x0800d5bf
 800c768:	0000030f 	.word	0x0000030f
 800c76c:	fffffbcd 	.word	0xfffffbcd
 800c770:	fffffbce 	.word	0xfffffbce
 800c774:	3fffffff 	.word	0x3fffffff

0800c778 <__ratio>:
 800c778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c77a:	b087      	sub	sp, #28
 800c77c:	000f      	movs	r7, r1
 800c77e:	a904      	add	r1, sp, #16
 800c780:	0006      	movs	r6, r0
 800c782:	f7ff ff4d 	bl	800c620 <__b2d>
 800c786:	9000      	str	r0, [sp, #0]
 800c788:	9101      	str	r1, [sp, #4]
 800c78a:	9c00      	ldr	r4, [sp, #0]
 800c78c:	9d01      	ldr	r5, [sp, #4]
 800c78e:	0038      	movs	r0, r7
 800c790:	a905      	add	r1, sp, #20
 800c792:	f7ff ff45 	bl	800c620 <__b2d>
 800c796:	9002      	str	r0, [sp, #8]
 800c798:	9103      	str	r1, [sp, #12]
 800c79a:	9a02      	ldr	r2, [sp, #8]
 800c79c:	9b03      	ldr	r3, [sp, #12]
 800c79e:	6930      	ldr	r0, [r6, #16]
 800c7a0:	6939      	ldr	r1, [r7, #16]
 800c7a2:	9e04      	ldr	r6, [sp, #16]
 800c7a4:	1a40      	subs	r0, r0, r1
 800c7a6:	9905      	ldr	r1, [sp, #20]
 800c7a8:	0140      	lsls	r0, r0, #5
 800c7aa:	1a71      	subs	r1, r6, r1
 800c7ac:	1841      	adds	r1, r0, r1
 800c7ae:	0508      	lsls	r0, r1, #20
 800c7b0:	2900      	cmp	r1, #0
 800c7b2:	dd07      	ble.n	800c7c4 <__ratio+0x4c>
 800c7b4:	9901      	ldr	r1, [sp, #4]
 800c7b6:	1845      	adds	r5, r0, r1
 800c7b8:	0020      	movs	r0, r4
 800c7ba:	0029      	movs	r1, r5
 800c7bc:	f7f4 fb5e 	bl	8000e7c <__aeabi_ddiv>
 800c7c0:	b007      	add	sp, #28
 800c7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7c4:	9903      	ldr	r1, [sp, #12]
 800c7c6:	1a0b      	subs	r3, r1, r0
 800c7c8:	e7f6      	b.n	800c7b8 <__ratio+0x40>

0800c7ca <__copybits>:
 800c7ca:	b570      	push	{r4, r5, r6, lr}
 800c7cc:	0014      	movs	r4, r2
 800c7ce:	0005      	movs	r5, r0
 800c7d0:	3901      	subs	r1, #1
 800c7d2:	6913      	ldr	r3, [r2, #16]
 800c7d4:	1149      	asrs	r1, r1, #5
 800c7d6:	3101      	adds	r1, #1
 800c7d8:	0089      	lsls	r1, r1, #2
 800c7da:	3414      	adds	r4, #20
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	1841      	adds	r1, r0, r1
 800c7e0:	18e3      	adds	r3, r4, r3
 800c7e2:	42a3      	cmp	r3, r4
 800c7e4:	d80d      	bhi.n	800c802 <__copybits+0x38>
 800c7e6:	0014      	movs	r4, r2
 800c7e8:	3411      	adds	r4, #17
 800c7ea:	2500      	movs	r5, #0
 800c7ec:	429c      	cmp	r4, r3
 800c7ee:	d803      	bhi.n	800c7f8 <__copybits+0x2e>
 800c7f0:	1a9b      	subs	r3, r3, r2
 800c7f2:	3b11      	subs	r3, #17
 800c7f4:	089b      	lsrs	r3, r3, #2
 800c7f6:	009d      	lsls	r5, r3, #2
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	1940      	adds	r0, r0, r5
 800c7fc:	4281      	cmp	r1, r0
 800c7fe:	d803      	bhi.n	800c808 <__copybits+0x3e>
 800c800:	bd70      	pop	{r4, r5, r6, pc}
 800c802:	cc40      	ldmia	r4!, {r6}
 800c804:	c540      	stmia	r5!, {r6}
 800c806:	e7ec      	b.n	800c7e2 <__copybits+0x18>
 800c808:	c008      	stmia	r0!, {r3}
 800c80a:	e7f7      	b.n	800c7fc <__copybits+0x32>

0800c80c <__any_on>:
 800c80c:	0002      	movs	r2, r0
 800c80e:	6900      	ldr	r0, [r0, #16]
 800c810:	b510      	push	{r4, lr}
 800c812:	3214      	adds	r2, #20
 800c814:	114b      	asrs	r3, r1, #5
 800c816:	4298      	cmp	r0, r3
 800c818:	db13      	blt.n	800c842 <__any_on+0x36>
 800c81a:	dd0c      	ble.n	800c836 <__any_on+0x2a>
 800c81c:	241f      	movs	r4, #31
 800c81e:	0008      	movs	r0, r1
 800c820:	4020      	ands	r0, r4
 800c822:	4221      	tst	r1, r4
 800c824:	d007      	beq.n	800c836 <__any_on+0x2a>
 800c826:	0099      	lsls	r1, r3, #2
 800c828:	588c      	ldr	r4, [r1, r2]
 800c82a:	0021      	movs	r1, r4
 800c82c:	40c1      	lsrs	r1, r0
 800c82e:	4081      	lsls	r1, r0
 800c830:	2001      	movs	r0, #1
 800c832:	428c      	cmp	r4, r1
 800c834:	d104      	bne.n	800c840 <__any_on+0x34>
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	18d3      	adds	r3, r2, r3
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d803      	bhi.n	800c846 <__any_on+0x3a>
 800c83e:	2000      	movs	r0, #0
 800c840:	bd10      	pop	{r4, pc}
 800c842:	0003      	movs	r3, r0
 800c844:	e7f7      	b.n	800c836 <__any_on+0x2a>
 800c846:	3b04      	subs	r3, #4
 800c848:	6819      	ldr	r1, [r3, #0]
 800c84a:	2900      	cmp	r1, #0
 800c84c:	d0f5      	beq.n	800c83a <__any_on+0x2e>
 800c84e:	2001      	movs	r0, #1
 800c850:	e7f6      	b.n	800c840 <__any_on+0x34>

0800c852 <__ascii_wctomb>:
 800c852:	0003      	movs	r3, r0
 800c854:	1e08      	subs	r0, r1, #0
 800c856:	d005      	beq.n	800c864 <__ascii_wctomb+0x12>
 800c858:	2aff      	cmp	r2, #255	; 0xff
 800c85a:	d904      	bls.n	800c866 <__ascii_wctomb+0x14>
 800c85c:	228a      	movs	r2, #138	; 0x8a
 800c85e:	2001      	movs	r0, #1
 800c860:	601a      	str	r2, [r3, #0]
 800c862:	4240      	negs	r0, r0
 800c864:	4770      	bx	lr
 800c866:	2001      	movs	r0, #1
 800c868:	700a      	strb	r2, [r1, #0]
 800c86a:	e7fb      	b.n	800c864 <__ascii_wctomb+0x12>

0800c86c <__ssputs_r>:
 800c86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c86e:	b085      	sub	sp, #20
 800c870:	9301      	str	r3, [sp, #4]
 800c872:	9203      	str	r2, [sp, #12]
 800c874:	688e      	ldr	r6, [r1, #8]
 800c876:	9a01      	ldr	r2, [sp, #4]
 800c878:	0007      	movs	r7, r0
 800c87a:	000c      	movs	r4, r1
 800c87c:	680b      	ldr	r3, [r1, #0]
 800c87e:	4296      	cmp	r6, r2
 800c880:	d831      	bhi.n	800c8e6 <__ssputs_r+0x7a>
 800c882:	898a      	ldrh	r2, [r1, #12]
 800c884:	2190      	movs	r1, #144	; 0x90
 800c886:	00c9      	lsls	r1, r1, #3
 800c888:	420a      	tst	r2, r1
 800c88a:	d029      	beq.n	800c8e0 <__ssputs_r+0x74>
 800c88c:	2003      	movs	r0, #3
 800c88e:	6921      	ldr	r1, [r4, #16]
 800c890:	1a5b      	subs	r3, r3, r1
 800c892:	9302      	str	r3, [sp, #8]
 800c894:	6963      	ldr	r3, [r4, #20]
 800c896:	4343      	muls	r3, r0
 800c898:	0fdd      	lsrs	r5, r3, #31
 800c89a:	18ed      	adds	r5, r5, r3
 800c89c:	9b01      	ldr	r3, [sp, #4]
 800c89e:	9802      	ldr	r0, [sp, #8]
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	181b      	adds	r3, r3, r0
 800c8a4:	106d      	asrs	r5, r5, #1
 800c8a6:	42ab      	cmp	r3, r5
 800c8a8:	d900      	bls.n	800c8ac <__ssputs_r+0x40>
 800c8aa:	001d      	movs	r5, r3
 800c8ac:	0552      	lsls	r2, r2, #21
 800c8ae:	d529      	bpl.n	800c904 <__ssputs_r+0x98>
 800c8b0:	0029      	movs	r1, r5
 800c8b2:	0038      	movs	r0, r7
 800c8b4:	f7ff fa6e 	bl	800bd94 <_malloc_r>
 800c8b8:	1e06      	subs	r6, r0, #0
 800c8ba:	d02d      	beq.n	800c918 <__ssputs_r+0xac>
 800c8bc:	9a02      	ldr	r2, [sp, #8]
 800c8be:	6921      	ldr	r1, [r4, #16]
 800c8c0:	f7fd ffe4 	bl	800a88c <memcpy>
 800c8c4:	89a2      	ldrh	r2, [r4, #12]
 800c8c6:	4b19      	ldr	r3, [pc, #100]	; (800c92c <__ssputs_r+0xc0>)
 800c8c8:	401a      	ands	r2, r3
 800c8ca:	2380      	movs	r3, #128	; 0x80
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	81a3      	strh	r3, [r4, #12]
 800c8d0:	9b02      	ldr	r3, [sp, #8]
 800c8d2:	6126      	str	r6, [r4, #16]
 800c8d4:	18f6      	adds	r6, r6, r3
 800c8d6:	6026      	str	r6, [r4, #0]
 800c8d8:	6165      	str	r5, [r4, #20]
 800c8da:	9e01      	ldr	r6, [sp, #4]
 800c8dc:	1aed      	subs	r5, r5, r3
 800c8de:	60a5      	str	r5, [r4, #8]
 800c8e0:	9b01      	ldr	r3, [sp, #4]
 800c8e2:	429e      	cmp	r6, r3
 800c8e4:	d900      	bls.n	800c8e8 <__ssputs_r+0x7c>
 800c8e6:	9e01      	ldr	r6, [sp, #4]
 800c8e8:	0032      	movs	r2, r6
 800c8ea:	9903      	ldr	r1, [sp, #12]
 800c8ec:	6820      	ldr	r0, [r4, #0]
 800c8ee:	f000 fb7f 	bl	800cff0 <memmove>
 800c8f2:	2000      	movs	r0, #0
 800c8f4:	68a3      	ldr	r3, [r4, #8]
 800c8f6:	1b9b      	subs	r3, r3, r6
 800c8f8:	60a3      	str	r3, [r4, #8]
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	199b      	adds	r3, r3, r6
 800c8fe:	6023      	str	r3, [r4, #0]
 800c900:	b005      	add	sp, #20
 800c902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c904:	002a      	movs	r2, r5
 800c906:	0038      	movs	r0, r7
 800c908:	f000 fc07 	bl	800d11a <_realloc_r>
 800c90c:	1e06      	subs	r6, r0, #0
 800c90e:	d1df      	bne.n	800c8d0 <__ssputs_r+0x64>
 800c910:	0038      	movs	r0, r7
 800c912:	6921      	ldr	r1, [r4, #16]
 800c914:	f7fe fe6c 	bl	800b5f0 <_free_r>
 800c918:	230c      	movs	r3, #12
 800c91a:	2001      	movs	r0, #1
 800c91c:	603b      	str	r3, [r7, #0]
 800c91e:	89a2      	ldrh	r2, [r4, #12]
 800c920:	3334      	adds	r3, #52	; 0x34
 800c922:	4313      	orrs	r3, r2
 800c924:	81a3      	strh	r3, [r4, #12]
 800c926:	4240      	negs	r0, r0
 800c928:	e7ea      	b.n	800c900 <__ssputs_r+0x94>
 800c92a:	46c0      	nop			; (mov r8, r8)
 800c92c:	fffffb7f 	.word	0xfffffb7f

0800c930 <_svfiprintf_r>:
 800c930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c932:	b0a1      	sub	sp, #132	; 0x84
 800c934:	9003      	str	r0, [sp, #12]
 800c936:	001d      	movs	r5, r3
 800c938:	898b      	ldrh	r3, [r1, #12]
 800c93a:	000f      	movs	r7, r1
 800c93c:	0016      	movs	r6, r2
 800c93e:	061b      	lsls	r3, r3, #24
 800c940:	d511      	bpl.n	800c966 <_svfiprintf_r+0x36>
 800c942:	690b      	ldr	r3, [r1, #16]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d10e      	bne.n	800c966 <_svfiprintf_r+0x36>
 800c948:	2140      	movs	r1, #64	; 0x40
 800c94a:	f7ff fa23 	bl	800bd94 <_malloc_r>
 800c94e:	6038      	str	r0, [r7, #0]
 800c950:	6138      	str	r0, [r7, #16]
 800c952:	2800      	cmp	r0, #0
 800c954:	d105      	bne.n	800c962 <_svfiprintf_r+0x32>
 800c956:	230c      	movs	r3, #12
 800c958:	9a03      	ldr	r2, [sp, #12]
 800c95a:	3801      	subs	r0, #1
 800c95c:	6013      	str	r3, [r2, #0]
 800c95e:	b021      	add	sp, #132	; 0x84
 800c960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c962:	2340      	movs	r3, #64	; 0x40
 800c964:	617b      	str	r3, [r7, #20]
 800c966:	2300      	movs	r3, #0
 800c968:	ac08      	add	r4, sp, #32
 800c96a:	6163      	str	r3, [r4, #20]
 800c96c:	3320      	adds	r3, #32
 800c96e:	7663      	strb	r3, [r4, #25]
 800c970:	3310      	adds	r3, #16
 800c972:	76a3      	strb	r3, [r4, #26]
 800c974:	9507      	str	r5, [sp, #28]
 800c976:	0035      	movs	r5, r6
 800c978:	782b      	ldrb	r3, [r5, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d001      	beq.n	800c982 <_svfiprintf_r+0x52>
 800c97e:	2b25      	cmp	r3, #37	; 0x25
 800c980:	d148      	bne.n	800ca14 <_svfiprintf_r+0xe4>
 800c982:	1bab      	subs	r3, r5, r6
 800c984:	9305      	str	r3, [sp, #20]
 800c986:	42b5      	cmp	r5, r6
 800c988:	d00b      	beq.n	800c9a2 <_svfiprintf_r+0x72>
 800c98a:	0032      	movs	r2, r6
 800c98c:	0039      	movs	r1, r7
 800c98e:	9803      	ldr	r0, [sp, #12]
 800c990:	f7ff ff6c 	bl	800c86c <__ssputs_r>
 800c994:	3001      	adds	r0, #1
 800c996:	d100      	bne.n	800c99a <_svfiprintf_r+0x6a>
 800c998:	e0af      	b.n	800cafa <_svfiprintf_r+0x1ca>
 800c99a:	6963      	ldr	r3, [r4, #20]
 800c99c:	9a05      	ldr	r2, [sp, #20]
 800c99e:	189b      	adds	r3, r3, r2
 800c9a0:	6163      	str	r3, [r4, #20]
 800c9a2:	782b      	ldrb	r3, [r5, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d100      	bne.n	800c9aa <_svfiprintf_r+0x7a>
 800c9a8:	e0a7      	b.n	800cafa <_svfiprintf_r+0x1ca>
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	4252      	negs	r2, r2
 800c9b0:	6062      	str	r2, [r4, #4]
 800c9b2:	a904      	add	r1, sp, #16
 800c9b4:	3254      	adds	r2, #84	; 0x54
 800c9b6:	1852      	adds	r2, r2, r1
 800c9b8:	1c6e      	adds	r6, r5, #1
 800c9ba:	6023      	str	r3, [r4, #0]
 800c9bc:	60e3      	str	r3, [r4, #12]
 800c9be:	60a3      	str	r3, [r4, #8]
 800c9c0:	7013      	strb	r3, [r2, #0]
 800c9c2:	65a3      	str	r3, [r4, #88]	; 0x58
 800c9c4:	4b55      	ldr	r3, [pc, #340]	; (800cb1c <_svfiprintf_r+0x1ec>)
 800c9c6:	2205      	movs	r2, #5
 800c9c8:	0018      	movs	r0, r3
 800c9ca:	7831      	ldrb	r1, [r6, #0]
 800c9cc:	9305      	str	r3, [sp, #20]
 800c9ce:	f7fd ff52 	bl	800a876 <memchr>
 800c9d2:	1c75      	adds	r5, r6, #1
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d11f      	bne.n	800ca18 <_svfiprintf_r+0xe8>
 800c9d8:	6822      	ldr	r2, [r4, #0]
 800c9da:	06d3      	lsls	r3, r2, #27
 800c9dc:	d504      	bpl.n	800c9e8 <_svfiprintf_r+0xb8>
 800c9de:	2353      	movs	r3, #83	; 0x53
 800c9e0:	a904      	add	r1, sp, #16
 800c9e2:	185b      	adds	r3, r3, r1
 800c9e4:	2120      	movs	r1, #32
 800c9e6:	7019      	strb	r1, [r3, #0]
 800c9e8:	0713      	lsls	r3, r2, #28
 800c9ea:	d504      	bpl.n	800c9f6 <_svfiprintf_r+0xc6>
 800c9ec:	2353      	movs	r3, #83	; 0x53
 800c9ee:	a904      	add	r1, sp, #16
 800c9f0:	185b      	adds	r3, r3, r1
 800c9f2:	212b      	movs	r1, #43	; 0x2b
 800c9f4:	7019      	strb	r1, [r3, #0]
 800c9f6:	7833      	ldrb	r3, [r6, #0]
 800c9f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c9fa:	d016      	beq.n	800ca2a <_svfiprintf_r+0xfa>
 800c9fc:	0035      	movs	r5, r6
 800c9fe:	2100      	movs	r1, #0
 800ca00:	200a      	movs	r0, #10
 800ca02:	68e3      	ldr	r3, [r4, #12]
 800ca04:	782a      	ldrb	r2, [r5, #0]
 800ca06:	1c6e      	adds	r6, r5, #1
 800ca08:	3a30      	subs	r2, #48	; 0x30
 800ca0a:	2a09      	cmp	r2, #9
 800ca0c:	d94e      	bls.n	800caac <_svfiprintf_r+0x17c>
 800ca0e:	2900      	cmp	r1, #0
 800ca10:	d111      	bne.n	800ca36 <_svfiprintf_r+0x106>
 800ca12:	e017      	b.n	800ca44 <_svfiprintf_r+0x114>
 800ca14:	3501      	adds	r5, #1
 800ca16:	e7af      	b.n	800c978 <_svfiprintf_r+0x48>
 800ca18:	9b05      	ldr	r3, [sp, #20]
 800ca1a:	6822      	ldr	r2, [r4, #0]
 800ca1c:	1ac0      	subs	r0, r0, r3
 800ca1e:	2301      	movs	r3, #1
 800ca20:	4083      	lsls	r3, r0
 800ca22:	4313      	orrs	r3, r2
 800ca24:	002e      	movs	r6, r5
 800ca26:	6023      	str	r3, [r4, #0]
 800ca28:	e7cc      	b.n	800c9c4 <_svfiprintf_r+0x94>
 800ca2a:	9b07      	ldr	r3, [sp, #28]
 800ca2c:	1d19      	adds	r1, r3, #4
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	9107      	str	r1, [sp, #28]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	db01      	blt.n	800ca3a <_svfiprintf_r+0x10a>
 800ca36:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca38:	e004      	b.n	800ca44 <_svfiprintf_r+0x114>
 800ca3a:	425b      	negs	r3, r3
 800ca3c:	60e3      	str	r3, [r4, #12]
 800ca3e:	2302      	movs	r3, #2
 800ca40:	4313      	orrs	r3, r2
 800ca42:	6023      	str	r3, [r4, #0]
 800ca44:	782b      	ldrb	r3, [r5, #0]
 800ca46:	2b2e      	cmp	r3, #46	; 0x2e
 800ca48:	d10a      	bne.n	800ca60 <_svfiprintf_r+0x130>
 800ca4a:	786b      	ldrb	r3, [r5, #1]
 800ca4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ca4e:	d135      	bne.n	800cabc <_svfiprintf_r+0x18c>
 800ca50:	9b07      	ldr	r3, [sp, #28]
 800ca52:	3502      	adds	r5, #2
 800ca54:	1d1a      	adds	r2, r3, #4
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	9207      	str	r2, [sp, #28]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	db2b      	blt.n	800cab6 <_svfiprintf_r+0x186>
 800ca5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca60:	4e2f      	ldr	r6, [pc, #188]	; (800cb20 <_svfiprintf_r+0x1f0>)
 800ca62:	2203      	movs	r2, #3
 800ca64:	0030      	movs	r0, r6
 800ca66:	7829      	ldrb	r1, [r5, #0]
 800ca68:	f7fd ff05 	bl	800a876 <memchr>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	d006      	beq.n	800ca7e <_svfiprintf_r+0x14e>
 800ca70:	2340      	movs	r3, #64	; 0x40
 800ca72:	1b80      	subs	r0, r0, r6
 800ca74:	4083      	lsls	r3, r0
 800ca76:	6822      	ldr	r2, [r4, #0]
 800ca78:	3501      	adds	r5, #1
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	7829      	ldrb	r1, [r5, #0]
 800ca80:	2206      	movs	r2, #6
 800ca82:	4828      	ldr	r0, [pc, #160]	; (800cb24 <_svfiprintf_r+0x1f4>)
 800ca84:	1c6e      	adds	r6, r5, #1
 800ca86:	7621      	strb	r1, [r4, #24]
 800ca88:	f7fd fef5 	bl	800a876 <memchr>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d03c      	beq.n	800cb0a <_svfiprintf_r+0x1da>
 800ca90:	4b25      	ldr	r3, [pc, #148]	; (800cb28 <_svfiprintf_r+0x1f8>)
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d125      	bne.n	800cae2 <_svfiprintf_r+0x1b2>
 800ca96:	2207      	movs	r2, #7
 800ca98:	9b07      	ldr	r3, [sp, #28]
 800ca9a:	3307      	adds	r3, #7
 800ca9c:	4393      	bics	r3, r2
 800ca9e:	3308      	adds	r3, #8
 800caa0:	9307      	str	r3, [sp, #28]
 800caa2:	6963      	ldr	r3, [r4, #20]
 800caa4:	9a04      	ldr	r2, [sp, #16]
 800caa6:	189b      	adds	r3, r3, r2
 800caa8:	6163      	str	r3, [r4, #20]
 800caaa:	e764      	b.n	800c976 <_svfiprintf_r+0x46>
 800caac:	4343      	muls	r3, r0
 800caae:	0035      	movs	r5, r6
 800cab0:	2101      	movs	r1, #1
 800cab2:	189b      	adds	r3, r3, r2
 800cab4:	e7a6      	b.n	800ca04 <_svfiprintf_r+0xd4>
 800cab6:	2301      	movs	r3, #1
 800cab8:	425b      	negs	r3, r3
 800caba:	e7d0      	b.n	800ca5e <_svfiprintf_r+0x12e>
 800cabc:	2300      	movs	r3, #0
 800cabe:	200a      	movs	r0, #10
 800cac0:	001a      	movs	r2, r3
 800cac2:	3501      	adds	r5, #1
 800cac4:	6063      	str	r3, [r4, #4]
 800cac6:	7829      	ldrb	r1, [r5, #0]
 800cac8:	1c6e      	adds	r6, r5, #1
 800caca:	3930      	subs	r1, #48	; 0x30
 800cacc:	2909      	cmp	r1, #9
 800cace:	d903      	bls.n	800cad8 <_svfiprintf_r+0x1a8>
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d0c5      	beq.n	800ca60 <_svfiprintf_r+0x130>
 800cad4:	9209      	str	r2, [sp, #36]	; 0x24
 800cad6:	e7c3      	b.n	800ca60 <_svfiprintf_r+0x130>
 800cad8:	4342      	muls	r2, r0
 800cada:	0035      	movs	r5, r6
 800cadc:	2301      	movs	r3, #1
 800cade:	1852      	adds	r2, r2, r1
 800cae0:	e7f1      	b.n	800cac6 <_svfiprintf_r+0x196>
 800cae2:	aa07      	add	r2, sp, #28
 800cae4:	9200      	str	r2, [sp, #0]
 800cae6:	0021      	movs	r1, r4
 800cae8:	003a      	movs	r2, r7
 800caea:	4b10      	ldr	r3, [pc, #64]	; (800cb2c <_svfiprintf_r+0x1fc>)
 800caec:	9803      	ldr	r0, [sp, #12]
 800caee:	f7fc fe75 	bl	80097dc <_printf_float>
 800caf2:	9004      	str	r0, [sp, #16]
 800caf4:	9b04      	ldr	r3, [sp, #16]
 800caf6:	3301      	adds	r3, #1
 800caf8:	d1d3      	bne.n	800caa2 <_svfiprintf_r+0x172>
 800cafa:	89bb      	ldrh	r3, [r7, #12]
 800cafc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cafe:	065b      	lsls	r3, r3, #25
 800cb00:	d400      	bmi.n	800cb04 <_svfiprintf_r+0x1d4>
 800cb02:	e72c      	b.n	800c95e <_svfiprintf_r+0x2e>
 800cb04:	2001      	movs	r0, #1
 800cb06:	4240      	negs	r0, r0
 800cb08:	e729      	b.n	800c95e <_svfiprintf_r+0x2e>
 800cb0a:	aa07      	add	r2, sp, #28
 800cb0c:	9200      	str	r2, [sp, #0]
 800cb0e:	0021      	movs	r1, r4
 800cb10:	003a      	movs	r2, r7
 800cb12:	4b06      	ldr	r3, [pc, #24]	; (800cb2c <_svfiprintf_r+0x1fc>)
 800cb14:	9803      	ldr	r0, [sp, #12]
 800cb16:	f7fd f927 	bl	8009d68 <_printf_i>
 800cb1a:	e7ea      	b.n	800caf2 <_svfiprintf_r+0x1c2>
 800cb1c:	0800d714 	.word	0x0800d714
 800cb20:	0800d71a 	.word	0x0800d71a
 800cb24:	0800d71e 	.word	0x0800d71e
 800cb28:	080097dd 	.word	0x080097dd
 800cb2c:	0800c86d 	.word	0x0800c86d

0800cb30 <__sfputc_r>:
 800cb30:	6893      	ldr	r3, [r2, #8]
 800cb32:	b510      	push	{r4, lr}
 800cb34:	3b01      	subs	r3, #1
 800cb36:	6093      	str	r3, [r2, #8]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	da04      	bge.n	800cb46 <__sfputc_r+0x16>
 800cb3c:	6994      	ldr	r4, [r2, #24]
 800cb3e:	42a3      	cmp	r3, r4
 800cb40:	db07      	blt.n	800cb52 <__sfputc_r+0x22>
 800cb42:	290a      	cmp	r1, #10
 800cb44:	d005      	beq.n	800cb52 <__sfputc_r+0x22>
 800cb46:	6813      	ldr	r3, [r2, #0]
 800cb48:	1c58      	adds	r0, r3, #1
 800cb4a:	6010      	str	r0, [r2, #0]
 800cb4c:	7019      	strb	r1, [r3, #0]
 800cb4e:	0008      	movs	r0, r1
 800cb50:	bd10      	pop	{r4, pc}
 800cb52:	f7fd fd51 	bl	800a5f8 <__swbuf_r>
 800cb56:	0001      	movs	r1, r0
 800cb58:	e7f9      	b.n	800cb4e <__sfputc_r+0x1e>

0800cb5a <__sfputs_r>:
 800cb5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb5c:	0006      	movs	r6, r0
 800cb5e:	000f      	movs	r7, r1
 800cb60:	0014      	movs	r4, r2
 800cb62:	18d5      	adds	r5, r2, r3
 800cb64:	42ac      	cmp	r4, r5
 800cb66:	d101      	bne.n	800cb6c <__sfputs_r+0x12>
 800cb68:	2000      	movs	r0, #0
 800cb6a:	e007      	b.n	800cb7c <__sfputs_r+0x22>
 800cb6c:	7821      	ldrb	r1, [r4, #0]
 800cb6e:	003a      	movs	r2, r7
 800cb70:	0030      	movs	r0, r6
 800cb72:	f7ff ffdd 	bl	800cb30 <__sfputc_r>
 800cb76:	3401      	adds	r4, #1
 800cb78:	1c43      	adds	r3, r0, #1
 800cb7a:	d1f3      	bne.n	800cb64 <__sfputs_r+0xa>
 800cb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cb80 <_vfiprintf_r>:
 800cb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb82:	b0a1      	sub	sp, #132	; 0x84
 800cb84:	000f      	movs	r7, r1
 800cb86:	0015      	movs	r5, r2
 800cb88:	001e      	movs	r6, r3
 800cb8a:	9003      	str	r0, [sp, #12]
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	d004      	beq.n	800cb9a <_vfiprintf_r+0x1a>
 800cb90:	6a03      	ldr	r3, [r0, #32]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d101      	bne.n	800cb9a <_vfiprintf_r+0x1a>
 800cb96:	f7fd fc8f 	bl	800a4b8 <__sinit>
 800cb9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb9c:	07db      	lsls	r3, r3, #31
 800cb9e:	d405      	bmi.n	800cbac <_vfiprintf_r+0x2c>
 800cba0:	89bb      	ldrh	r3, [r7, #12]
 800cba2:	059b      	lsls	r3, r3, #22
 800cba4:	d402      	bmi.n	800cbac <_vfiprintf_r+0x2c>
 800cba6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cba8:	f7fd fe63 	bl	800a872 <__retarget_lock_acquire_recursive>
 800cbac:	89bb      	ldrh	r3, [r7, #12]
 800cbae:	071b      	lsls	r3, r3, #28
 800cbb0:	d502      	bpl.n	800cbb8 <_vfiprintf_r+0x38>
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d113      	bne.n	800cbe0 <_vfiprintf_r+0x60>
 800cbb8:	0039      	movs	r1, r7
 800cbba:	9803      	ldr	r0, [sp, #12]
 800cbbc:	f7fd fd5e 	bl	800a67c <__swsetup_r>
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	d00d      	beq.n	800cbe0 <_vfiprintf_r+0x60>
 800cbc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbc6:	07db      	lsls	r3, r3, #31
 800cbc8:	d503      	bpl.n	800cbd2 <_vfiprintf_r+0x52>
 800cbca:	2001      	movs	r0, #1
 800cbcc:	4240      	negs	r0, r0
 800cbce:	b021      	add	sp, #132	; 0x84
 800cbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbd2:	89bb      	ldrh	r3, [r7, #12]
 800cbd4:	059b      	lsls	r3, r3, #22
 800cbd6:	d4f8      	bmi.n	800cbca <_vfiprintf_r+0x4a>
 800cbd8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cbda:	f7fd fe4b 	bl	800a874 <__retarget_lock_release_recursive>
 800cbde:	e7f4      	b.n	800cbca <_vfiprintf_r+0x4a>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	ac08      	add	r4, sp, #32
 800cbe4:	6163      	str	r3, [r4, #20]
 800cbe6:	3320      	adds	r3, #32
 800cbe8:	7663      	strb	r3, [r4, #25]
 800cbea:	3310      	adds	r3, #16
 800cbec:	76a3      	strb	r3, [r4, #26]
 800cbee:	9607      	str	r6, [sp, #28]
 800cbf0:	002e      	movs	r6, r5
 800cbf2:	7833      	ldrb	r3, [r6, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <_vfiprintf_r+0x7c>
 800cbf8:	2b25      	cmp	r3, #37	; 0x25
 800cbfa:	d148      	bne.n	800cc8e <_vfiprintf_r+0x10e>
 800cbfc:	1b73      	subs	r3, r6, r5
 800cbfe:	9305      	str	r3, [sp, #20]
 800cc00:	42ae      	cmp	r6, r5
 800cc02:	d00b      	beq.n	800cc1c <_vfiprintf_r+0x9c>
 800cc04:	002a      	movs	r2, r5
 800cc06:	0039      	movs	r1, r7
 800cc08:	9803      	ldr	r0, [sp, #12]
 800cc0a:	f7ff ffa6 	bl	800cb5a <__sfputs_r>
 800cc0e:	3001      	adds	r0, #1
 800cc10:	d100      	bne.n	800cc14 <_vfiprintf_r+0x94>
 800cc12:	e0af      	b.n	800cd74 <_vfiprintf_r+0x1f4>
 800cc14:	6963      	ldr	r3, [r4, #20]
 800cc16:	9a05      	ldr	r2, [sp, #20]
 800cc18:	189b      	adds	r3, r3, r2
 800cc1a:	6163      	str	r3, [r4, #20]
 800cc1c:	7833      	ldrb	r3, [r6, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d100      	bne.n	800cc24 <_vfiprintf_r+0xa4>
 800cc22:	e0a7      	b.n	800cd74 <_vfiprintf_r+0x1f4>
 800cc24:	2201      	movs	r2, #1
 800cc26:	2300      	movs	r3, #0
 800cc28:	4252      	negs	r2, r2
 800cc2a:	6062      	str	r2, [r4, #4]
 800cc2c:	a904      	add	r1, sp, #16
 800cc2e:	3254      	adds	r2, #84	; 0x54
 800cc30:	1852      	adds	r2, r2, r1
 800cc32:	1c75      	adds	r5, r6, #1
 800cc34:	6023      	str	r3, [r4, #0]
 800cc36:	60e3      	str	r3, [r4, #12]
 800cc38:	60a3      	str	r3, [r4, #8]
 800cc3a:	7013      	strb	r3, [r2, #0]
 800cc3c:	65a3      	str	r3, [r4, #88]	; 0x58
 800cc3e:	4b59      	ldr	r3, [pc, #356]	; (800cda4 <_vfiprintf_r+0x224>)
 800cc40:	2205      	movs	r2, #5
 800cc42:	0018      	movs	r0, r3
 800cc44:	7829      	ldrb	r1, [r5, #0]
 800cc46:	9305      	str	r3, [sp, #20]
 800cc48:	f7fd fe15 	bl	800a876 <memchr>
 800cc4c:	1c6e      	adds	r6, r5, #1
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d11f      	bne.n	800cc92 <_vfiprintf_r+0x112>
 800cc52:	6822      	ldr	r2, [r4, #0]
 800cc54:	06d3      	lsls	r3, r2, #27
 800cc56:	d504      	bpl.n	800cc62 <_vfiprintf_r+0xe2>
 800cc58:	2353      	movs	r3, #83	; 0x53
 800cc5a:	a904      	add	r1, sp, #16
 800cc5c:	185b      	adds	r3, r3, r1
 800cc5e:	2120      	movs	r1, #32
 800cc60:	7019      	strb	r1, [r3, #0]
 800cc62:	0713      	lsls	r3, r2, #28
 800cc64:	d504      	bpl.n	800cc70 <_vfiprintf_r+0xf0>
 800cc66:	2353      	movs	r3, #83	; 0x53
 800cc68:	a904      	add	r1, sp, #16
 800cc6a:	185b      	adds	r3, r3, r1
 800cc6c:	212b      	movs	r1, #43	; 0x2b
 800cc6e:	7019      	strb	r1, [r3, #0]
 800cc70:	782b      	ldrb	r3, [r5, #0]
 800cc72:	2b2a      	cmp	r3, #42	; 0x2a
 800cc74:	d016      	beq.n	800cca4 <_vfiprintf_r+0x124>
 800cc76:	002e      	movs	r6, r5
 800cc78:	2100      	movs	r1, #0
 800cc7a:	200a      	movs	r0, #10
 800cc7c:	68e3      	ldr	r3, [r4, #12]
 800cc7e:	7832      	ldrb	r2, [r6, #0]
 800cc80:	1c75      	adds	r5, r6, #1
 800cc82:	3a30      	subs	r2, #48	; 0x30
 800cc84:	2a09      	cmp	r2, #9
 800cc86:	d94e      	bls.n	800cd26 <_vfiprintf_r+0x1a6>
 800cc88:	2900      	cmp	r1, #0
 800cc8a:	d111      	bne.n	800ccb0 <_vfiprintf_r+0x130>
 800cc8c:	e017      	b.n	800ccbe <_vfiprintf_r+0x13e>
 800cc8e:	3601      	adds	r6, #1
 800cc90:	e7af      	b.n	800cbf2 <_vfiprintf_r+0x72>
 800cc92:	9b05      	ldr	r3, [sp, #20]
 800cc94:	6822      	ldr	r2, [r4, #0]
 800cc96:	1ac0      	subs	r0, r0, r3
 800cc98:	2301      	movs	r3, #1
 800cc9a:	4083      	lsls	r3, r0
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	0035      	movs	r5, r6
 800cca0:	6023      	str	r3, [r4, #0]
 800cca2:	e7cc      	b.n	800cc3e <_vfiprintf_r+0xbe>
 800cca4:	9b07      	ldr	r3, [sp, #28]
 800cca6:	1d19      	adds	r1, r3, #4
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	9107      	str	r1, [sp, #28]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	db01      	blt.n	800ccb4 <_vfiprintf_r+0x134>
 800ccb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccb2:	e004      	b.n	800ccbe <_vfiprintf_r+0x13e>
 800ccb4:	425b      	negs	r3, r3
 800ccb6:	60e3      	str	r3, [r4, #12]
 800ccb8:	2302      	movs	r3, #2
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	6023      	str	r3, [r4, #0]
 800ccbe:	7833      	ldrb	r3, [r6, #0]
 800ccc0:	2b2e      	cmp	r3, #46	; 0x2e
 800ccc2:	d10a      	bne.n	800ccda <_vfiprintf_r+0x15a>
 800ccc4:	7873      	ldrb	r3, [r6, #1]
 800ccc6:	2b2a      	cmp	r3, #42	; 0x2a
 800ccc8:	d135      	bne.n	800cd36 <_vfiprintf_r+0x1b6>
 800ccca:	9b07      	ldr	r3, [sp, #28]
 800cccc:	3602      	adds	r6, #2
 800ccce:	1d1a      	adds	r2, r3, #4
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	9207      	str	r2, [sp, #28]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	db2b      	blt.n	800cd30 <_vfiprintf_r+0x1b0>
 800ccd8:	9309      	str	r3, [sp, #36]	; 0x24
 800ccda:	4d33      	ldr	r5, [pc, #204]	; (800cda8 <_vfiprintf_r+0x228>)
 800ccdc:	2203      	movs	r2, #3
 800ccde:	0028      	movs	r0, r5
 800cce0:	7831      	ldrb	r1, [r6, #0]
 800cce2:	f7fd fdc8 	bl	800a876 <memchr>
 800cce6:	2800      	cmp	r0, #0
 800cce8:	d006      	beq.n	800ccf8 <_vfiprintf_r+0x178>
 800ccea:	2340      	movs	r3, #64	; 0x40
 800ccec:	1b40      	subs	r0, r0, r5
 800ccee:	4083      	lsls	r3, r0
 800ccf0:	6822      	ldr	r2, [r4, #0]
 800ccf2:	3601      	adds	r6, #1
 800ccf4:	4313      	orrs	r3, r2
 800ccf6:	6023      	str	r3, [r4, #0]
 800ccf8:	7831      	ldrb	r1, [r6, #0]
 800ccfa:	2206      	movs	r2, #6
 800ccfc:	482b      	ldr	r0, [pc, #172]	; (800cdac <_vfiprintf_r+0x22c>)
 800ccfe:	1c75      	adds	r5, r6, #1
 800cd00:	7621      	strb	r1, [r4, #24]
 800cd02:	f7fd fdb8 	bl	800a876 <memchr>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d043      	beq.n	800cd92 <_vfiprintf_r+0x212>
 800cd0a:	4b29      	ldr	r3, [pc, #164]	; (800cdb0 <_vfiprintf_r+0x230>)
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d125      	bne.n	800cd5c <_vfiprintf_r+0x1dc>
 800cd10:	2207      	movs	r2, #7
 800cd12:	9b07      	ldr	r3, [sp, #28]
 800cd14:	3307      	adds	r3, #7
 800cd16:	4393      	bics	r3, r2
 800cd18:	3308      	adds	r3, #8
 800cd1a:	9307      	str	r3, [sp, #28]
 800cd1c:	6963      	ldr	r3, [r4, #20]
 800cd1e:	9a04      	ldr	r2, [sp, #16]
 800cd20:	189b      	adds	r3, r3, r2
 800cd22:	6163      	str	r3, [r4, #20]
 800cd24:	e764      	b.n	800cbf0 <_vfiprintf_r+0x70>
 800cd26:	4343      	muls	r3, r0
 800cd28:	002e      	movs	r6, r5
 800cd2a:	2101      	movs	r1, #1
 800cd2c:	189b      	adds	r3, r3, r2
 800cd2e:	e7a6      	b.n	800cc7e <_vfiprintf_r+0xfe>
 800cd30:	2301      	movs	r3, #1
 800cd32:	425b      	negs	r3, r3
 800cd34:	e7d0      	b.n	800ccd8 <_vfiprintf_r+0x158>
 800cd36:	2300      	movs	r3, #0
 800cd38:	200a      	movs	r0, #10
 800cd3a:	001a      	movs	r2, r3
 800cd3c:	3601      	adds	r6, #1
 800cd3e:	6063      	str	r3, [r4, #4]
 800cd40:	7831      	ldrb	r1, [r6, #0]
 800cd42:	1c75      	adds	r5, r6, #1
 800cd44:	3930      	subs	r1, #48	; 0x30
 800cd46:	2909      	cmp	r1, #9
 800cd48:	d903      	bls.n	800cd52 <_vfiprintf_r+0x1d2>
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0c5      	beq.n	800ccda <_vfiprintf_r+0x15a>
 800cd4e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd50:	e7c3      	b.n	800ccda <_vfiprintf_r+0x15a>
 800cd52:	4342      	muls	r2, r0
 800cd54:	002e      	movs	r6, r5
 800cd56:	2301      	movs	r3, #1
 800cd58:	1852      	adds	r2, r2, r1
 800cd5a:	e7f1      	b.n	800cd40 <_vfiprintf_r+0x1c0>
 800cd5c:	aa07      	add	r2, sp, #28
 800cd5e:	9200      	str	r2, [sp, #0]
 800cd60:	0021      	movs	r1, r4
 800cd62:	003a      	movs	r2, r7
 800cd64:	4b13      	ldr	r3, [pc, #76]	; (800cdb4 <_vfiprintf_r+0x234>)
 800cd66:	9803      	ldr	r0, [sp, #12]
 800cd68:	f7fc fd38 	bl	80097dc <_printf_float>
 800cd6c:	9004      	str	r0, [sp, #16]
 800cd6e:	9b04      	ldr	r3, [sp, #16]
 800cd70:	3301      	adds	r3, #1
 800cd72:	d1d3      	bne.n	800cd1c <_vfiprintf_r+0x19c>
 800cd74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd76:	07db      	lsls	r3, r3, #31
 800cd78:	d405      	bmi.n	800cd86 <_vfiprintf_r+0x206>
 800cd7a:	89bb      	ldrh	r3, [r7, #12]
 800cd7c:	059b      	lsls	r3, r3, #22
 800cd7e:	d402      	bmi.n	800cd86 <_vfiprintf_r+0x206>
 800cd80:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cd82:	f7fd fd77 	bl	800a874 <__retarget_lock_release_recursive>
 800cd86:	89bb      	ldrh	r3, [r7, #12]
 800cd88:	065b      	lsls	r3, r3, #25
 800cd8a:	d500      	bpl.n	800cd8e <_vfiprintf_r+0x20e>
 800cd8c:	e71d      	b.n	800cbca <_vfiprintf_r+0x4a>
 800cd8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cd90:	e71d      	b.n	800cbce <_vfiprintf_r+0x4e>
 800cd92:	aa07      	add	r2, sp, #28
 800cd94:	9200      	str	r2, [sp, #0]
 800cd96:	0021      	movs	r1, r4
 800cd98:	003a      	movs	r2, r7
 800cd9a:	4b06      	ldr	r3, [pc, #24]	; (800cdb4 <_vfiprintf_r+0x234>)
 800cd9c:	9803      	ldr	r0, [sp, #12]
 800cd9e:	f7fc ffe3 	bl	8009d68 <_printf_i>
 800cda2:	e7e3      	b.n	800cd6c <_vfiprintf_r+0x1ec>
 800cda4:	0800d714 	.word	0x0800d714
 800cda8:	0800d71a 	.word	0x0800d71a
 800cdac:	0800d71e 	.word	0x0800d71e
 800cdb0:	080097dd 	.word	0x080097dd
 800cdb4:	0800cb5b 	.word	0x0800cb5b

0800cdb8 <__sflush_r>:
 800cdb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdba:	898b      	ldrh	r3, [r1, #12]
 800cdbc:	0005      	movs	r5, r0
 800cdbe:	000c      	movs	r4, r1
 800cdc0:	071a      	lsls	r2, r3, #28
 800cdc2:	d45c      	bmi.n	800ce7e <__sflush_r+0xc6>
 800cdc4:	684a      	ldr	r2, [r1, #4]
 800cdc6:	2a00      	cmp	r2, #0
 800cdc8:	dc04      	bgt.n	800cdd4 <__sflush_r+0x1c>
 800cdca:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800cdcc:	2a00      	cmp	r2, #0
 800cdce:	dc01      	bgt.n	800cdd4 <__sflush_r+0x1c>
 800cdd0:	2000      	movs	r0, #0
 800cdd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cdd4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cdd6:	2f00      	cmp	r7, #0
 800cdd8:	d0fa      	beq.n	800cdd0 <__sflush_r+0x18>
 800cdda:	2200      	movs	r2, #0
 800cddc:	2080      	movs	r0, #128	; 0x80
 800cdde:	682e      	ldr	r6, [r5, #0]
 800cde0:	602a      	str	r2, [r5, #0]
 800cde2:	001a      	movs	r2, r3
 800cde4:	0140      	lsls	r0, r0, #5
 800cde6:	6a21      	ldr	r1, [r4, #32]
 800cde8:	4002      	ands	r2, r0
 800cdea:	4203      	tst	r3, r0
 800cdec:	d034      	beq.n	800ce58 <__sflush_r+0xa0>
 800cdee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cdf0:	89a3      	ldrh	r3, [r4, #12]
 800cdf2:	075b      	lsls	r3, r3, #29
 800cdf4:	d506      	bpl.n	800ce04 <__sflush_r+0x4c>
 800cdf6:	6863      	ldr	r3, [r4, #4]
 800cdf8:	1ac0      	subs	r0, r0, r3
 800cdfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d001      	beq.n	800ce04 <__sflush_r+0x4c>
 800ce00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce02:	1ac0      	subs	r0, r0, r3
 800ce04:	0002      	movs	r2, r0
 800ce06:	2300      	movs	r3, #0
 800ce08:	0028      	movs	r0, r5
 800ce0a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ce0c:	6a21      	ldr	r1, [r4, #32]
 800ce0e:	47b8      	blx	r7
 800ce10:	89a2      	ldrh	r2, [r4, #12]
 800ce12:	1c43      	adds	r3, r0, #1
 800ce14:	d106      	bne.n	800ce24 <__sflush_r+0x6c>
 800ce16:	6829      	ldr	r1, [r5, #0]
 800ce18:	291d      	cmp	r1, #29
 800ce1a:	d82c      	bhi.n	800ce76 <__sflush_r+0xbe>
 800ce1c:	4b2a      	ldr	r3, [pc, #168]	; (800cec8 <__sflush_r+0x110>)
 800ce1e:	410b      	asrs	r3, r1
 800ce20:	07db      	lsls	r3, r3, #31
 800ce22:	d428      	bmi.n	800ce76 <__sflush_r+0xbe>
 800ce24:	2300      	movs	r3, #0
 800ce26:	6063      	str	r3, [r4, #4]
 800ce28:	6923      	ldr	r3, [r4, #16]
 800ce2a:	6023      	str	r3, [r4, #0]
 800ce2c:	04d2      	lsls	r2, r2, #19
 800ce2e:	d505      	bpl.n	800ce3c <__sflush_r+0x84>
 800ce30:	1c43      	adds	r3, r0, #1
 800ce32:	d102      	bne.n	800ce3a <__sflush_r+0x82>
 800ce34:	682b      	ldr	r3, [r5, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d100      	bne.n	800ce3c <__sflush_r+0x84>
 800ce3a:	6560      	str	r0, [r4, #84]	; 0x54
 800ce3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce3e:	602e      	str	r6, [r5, #0]
 800ce40:	2900      	cmp	r1, #0
 800ce42:	d0c5      	beq.n	800cdd0 <__sflush_r+0x18>
 800ce44:	0023      	movs	r3, r4
 800ce46:	3344      	adds	r3, #68	; 0x44
 800ce48:	4299      	cmp	r1, r3
 800ce4a:	d002      	beq.n	800ce52 <__sflush_r+0x9a>
 800ce4c:	0028      	movs	r0, r5
 800ce4e:	f7fe fbcf 	bl	800b5f0 <_free_r>
 800ce52:	2000      	movs	r0, #0
 800ce54:	6360      	str	r0, [r4, #52]	; 0x34
 800ce56:	e7bc      	b.n	800cdd2 <__sflush_r+0x1a>
 800ce58:	2301      	movs	r3, #1
 800ce5a:	0028      	movs	r0, r5
 800ce5c:	47b8      	blx	r7
 800ce5e:	1c43      	adds	r3, r0, #1
 800ce60:	d1c6      	bne.n	800cdf0 <__sflush_r+0x38>
 800ce62:	682b      	ldr	r3, [r5, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d0c3      	beq.n	800cdf0 <__sflush_r+0x38>
 800ce68:	2b1d      	cmp	r3, #29
 800ce6a:	d001      	beq.n	800ce70 <__sflush_r+0xb8>
 800ce6c:	2b16      	cmp	r3, #22
 800ce6e:	d101      	bne.n	800ce74 <__sflush_r+0xbc>
 800ce70:	602e      	str	r6, [r5, #0]
 800ce72:	e7ad      	b.n	800cdd0 <__sflush_r+0x18>
 800ce74:	89a2      	ldrh	r2, [r4, #12]
 800ce76:	2340      	movs	r3, #64	; 0x40
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	81a3      	strh	r3, [r4, #12]
 800ce7c:	e7a9      	b.n	800cdd2 <__sflush_r+0x1a>
 800ce7e:	690e      	ldr	r6, [r1, #16]
 800ce80:	2e00      	cmp	r6, #0
 800ce82:	d0a5      	beq.n	800cdd0 <__sflush_r+0x18>
 800ce84:	680f      	ldr	r7, [r1, #0]
 800ce86:	600e      	str	r6, [r1, #0]
 800ce88:	1bba      	subs	r2, r7, r6
 800ce8a:	9201      	str	r2, [sp, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	079b      	lsls	r3, r3, #30
 800ce90:	d100      	bne.n	800ce94 <__sflush_r+0xdc>
 800ce92:	694a      	ldr	r2, [r1, #20]
 800ce94:	60a2      	str	r2, [r4, #8]
 800ce96:	9b01      	ldr	r3, [sp, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	dd99      	ble.n	800cdd0 <__sflush_r+0x18>
 800ce9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ce9e:	0032      	movs	r2, r6
 800cea0:	001f      	movs	r7, r3
 800cea2:	0028      	movs	r0, r5
 800cea4:	9b01      	ldr	r3, [sp, #4]
 800cea6:	6a21      	ldr	r1, [r4, #32]
 800cea8:	47b8      	blx	r7
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	dc06      	bgt.n	800cebc <__sflush_r+0x104>
 800ceae:	2340      	movs	r3, #64	; 0x40
 800ceb0:	2001      	movs	r0, #1
 800ceb2:	89a2      	ldrh	r2, [r4, #12]
 800ceb4:	4240      	negs	r0, r0
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	81a3      	strh	r3, [r4, #12]
 800ceba:	e78a      	b.n	800cdd2 <__sflush_r+0x1a>
 800cebc:	9b01      	ldr	r3, [sp, #4]
 800cebe:	1836      	adds	r6, r6, r0
 800cec0:	1a1b      	subs	r3, r3, r0
 800cec2:	9301      	str	r3, [sp, #4]
 800cec4:	e7e7      	b.n	800ce96 <__sflush_r+0xde>
 800cec6:	46c0      	nop			; (mov r8, r8)
 800cec8:	dfbffffe 	.word	0xdfbffffe

0800cecc <_fflush_r>:
 800cecc:	690b      	ldr	r3, [r1, #16]
 800cece:	b570      	push	{r4, r5, r6, lr}
 800ced0:	0005      	movs	r5, r0
 800ced2:	000c      	movs	r4, r1
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d102      	bne.n	800cede <_fflush_r+0x12>
 800ced8:	2500      	movs	r5, #0
 800ceda:	0028      	movs	r0, r5
 800cedc:	bd70      	pop	{r4, r5, r6, pc}
 800cede:	2800      	cmp	r0, #0
 800cee0:	d004      	beq.n	800ceec <_fflush_r+0x20>
 800cee2:	6a03      	ldr	r3, [r0, #32]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d101      	bne.n	800ceec <_fflush_r+0x20>
 800cee8:	f7fd fae6 	bl	800a4b8 <__sinit>
 800ceec:	220c      	movs	r2, #12
 800ceee:	5ea3      	ldrsh	r3, [r4, r2]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d0f1      	beq.n	800ced8 <_fflush_r+0xc>
 800cef4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cef6:	07d2      	lsls	r2, r2, #31
 800cef8:	d404      	bmi.n	800cf04 <_fflush_r+0x38>
 800cefa:	059b      	lsls	r3, r3, #22
 800cefc:	d402      	bmi.n	800cf04 <_fflush_r+0x38>
 800cefe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf00:	f7fd fcb7 	bl	800a872 <__retarget_lock_acquire_recursive>
 800cf04:	0028      	movs	r0, r5
 800cf06:	0021      	movs	r1, r4
 800cf08:	f7ff ff56 	bl	800cdb8 <__sflush_r>
 800cf0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf0e:	0005      	movs	r5, r0
 800cf10:	07db      	lsls	r3, r3, #31
 800cf12:	d4e2      	bmi.n	800ceda <_fflush_r+0xe>
 800cf14:	89a3      	ldrh	r3, [r4, #12]
 800cf16:	059b      	lsls	r3, r3, #22
 800cf18:	d4df      	bmi.n	800ceda <_fflush_r+0xe>
 800cf1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf1c:	f7fd fcaa 	bl	800a874 <__retarget_lock_release_recursive>
 800cf20:	e7db      	b.n	800ceda <_fflush_r+0xe>
	...

0800cf24 <__swhatbuf_r>:
 800cf24:	b570      	push	{r4, r5, r6, lr}
 800cf26:	000e      	movs	r6, r1
 800cf28:	001d      	movs	r5, r3
 800cf2a:	230e      	movs	r3, #14
 800cf2c:	5ec9      	ldrsh	r1, [r1, r3]
 800cf2e:	0014      	movs	r4, r2
 800cf30:	b096      	sub	sp, #88	; 0x58
 800cf32:	2900      	cmp	r1, #0
 800cf34:	da0c      	bge.n	800cf50 <__swhatbuf_r+0x2c>
 800cf36:	89b2      	ldrh	r2, [r6, #12]
 800cf38:	2380      	movs	r3, #128	; 0x80
 800cf3a:	0011      	movs	r1, r2
 800cf3c:	4019      	ands	r1, r3
 800cf3e:	421a      	tst	r2, r3
 800cf40:	d013      	beq.n	800cf6a <__swhatbuf_r+0x46>
 800cf42:	2100      	movs	r1, #0
 800cf44:	3b40      	subs	r3, #64	; 0x40
 800cf46:	2000      	movs	r0, #0
 800cf48:	6029      	str	r1, [r5, #0]
 800cf4a:	6023      	str	r3, [r4, #0]
 800cf4c:	b016      	add	sp, #88	; 0x58
 800cf4e:	bd70      	pop	{r4, r5, r6, pc}
 800cf50:	466a      	mov	r2, sp
 800cf52:	f000 f861 	bl	800d018 <_fstat_r>
 800cf56:	2800      	cmp	r0, #0
 800cf58:	dbed      	blt.n	800cf36 <__swhatbuf_r+0x12>
 800cf5a:	23f0      	movs	r3, #240	; 0xf0
 800cf5c:	9901      	ldr	r1, [sp, #4]
 800cf5e:	021b      	lsls	r3, r3, #8
 800cf60:	4019      	ands	r1, r3
 800cf62:	4b03      	ldr	r3, [pc, #12]	; (800cf70 <__swhatbuf_r+0x4c>)
 800cf64:	18c9      	adds	r1, r1, r3
 800cf66:	424b      	negs	r3, r1
 800cf68:	4159      	adcs	r1, r3
 800cf6a:	2380      	movs	r3, #128	; 0x80
 800cf6c:	00db      	lsls	r3, r3, #3
 800cf6e:	e7ea      	b.n	800cf46 <__swhatbuf_r+0x22>
 800cf70:	ffffe000 	.word	0xffffe000

0800cf74 <__smakebuf_r>:
 800cf74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf76:	2602      	movs	r6, #2
 800cf78:	898b      	ldrh	r3, [r1, #12]
 800cf7a:	0005      	movs	r5, r0
 800cf7c:	000c      	movs	r4, r1
 800cf7e:	4233      	tst	r3, r6
 800cf80:	d006      	beq.n	800cf90 <__smakebuf_r+0x1c>
 800cf82:	0023      	movs	r3, r4
 800cf84:	3347      	adds	r3, #71	; 0x47
 800cf86:	6023      	str	r3, [r4, #0]
 800cf88:	6123      	str	r3, [r4, #16]
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	6163      	str	r3, [r4, #20]
 800cf8e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800cf90:	466a      	mov	r2, sp
 800cf92:	ab01      	add	r3, sp, #4
 800cf94:	f7ff ffc6 	bl	800cf24 <__swhatbuf_r>
 800cf98:	9900      	ldr	r1, [sp, #0]
 800cf9a:	0007      	movs	r7, r0
 800cf9c:	0028      	movs	r0, r5
 800cf9e:	f7fe fef9 	bl	800bd94 <_malloc_r>
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	d108      	bne.n	800cfb8 <__smakebuf_r+0x44>
 800cfa6:	220c      	movs	r2, #12
 800cfa8:	5ea3      	ldrsh	r3, [r4, r2]
 800cfaa:	059a      	lsls	r2, r3, #22
 800cfac:	d4ef      	bmi.n	800cf8e <__smakebuf_r+0x1a>
 800cfae:	2203      	movs	r2, #3
 800cfb0:	4393      	bics	r3, r2
 800cfb2:	431e      	orrs	r6, r3
 800cfb4:	81a6      	strh	r6, [r4, #12]
 800cfb6:	e7e4      	b.n	800cf82 <__smakebuf_r+0xe>
 800cfb8:	2380      	movs	r3, #128	; 0x80
 800cfba:	89a2      	ldrh	r2, [r4, #12]
 800cfbc:	6020      	str	r0, [r4, #0]
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	81a3      	strh	r3, [r4, #12]
 800cfc2:	9b00      	ldr	r3, [sp, #0]
 800cfc4:	6120      	str	r0, [r4, #16]
 800cfc6:	6163      	str	r3, [r4, #20]
 800cfc8:	9b01      	ldr	r3, [sp, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00c      	beq.n	800cfe8 <__smakebuf_r+0x74>
 800cfce:	0028      	movs	r0, r5
 800cfd0:	230e      	movs	r3, #14
 800cfd2:	5ee1      	ldrsh	r1, [r4, r3]
 800cfd4:	f000 f832 	bl	800d03c <_isatty_r>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d005      	beq.n	800cfe8 <__smakebuf_r+0x74>
 800cfdc:	2303      	movs	r3, #3
 800cfde:	89a2      	ldrh	r2, [r4, #12]
 800cfe0:	439a      	bics	r2, r3
 800cfe2:	3b02      	subs	r3, #2
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	81a3      	strh	r3, [r4, #12]
 800cfe8:	89a3      	ldrh	r3, [r4, #12]
 800cfea:	433b      	orrs	r3, r7
 800cfec:	81a3      	strh	r3, [r4, #12]
 800cfee:	e7ce      	b.n	800cf8e <__smakebuf_r+0x1a>

0800cff0 <memmove>:
 800cff0:	b510      	push	{r4, lr}
 800cff2:	4288      	cmp	r0, r1
 800cff4:	d902      	bls.n	800cffc <memmove+0xc>
 800cff6:	188b      	adds	r3, r1, r2
 800cff8:	4298      	cmp	r0, r3
 800cffa:	d303      	bcc.n	800d004 <memmove+0x14>
 800cffc:	2300      	movs	r3, #0
 800cffe:	e007      	b.n	800d010 <memmove+0x20>
 800d000:	5c8b      	ldrb	r3, [r1, r2]
 800d002:	5483      	strb	r3, [r0, r2]
 800d004:	3a01      	subs	r2, #1
 800d006:	d2fb      	bcs.n	800d000 <memmove+0x10>
 800d008:	bd10      	pop	{r4, pc}
 800d00a:	5ccc      	ldrb	r4, [r1, r3]
 800d00c:	54c4      	strb	r4, [r0, r3]
 800d00e:	3301      	adds	r3, #1
 800d010:	429a      	cmp	r2, r3
 800d012:	d1fa      	bne.n	800d00a <memmove+0x1a>
 800d014:	e7f8      	b.n	800d008 <memmove+0x18>
	...

0800d018 <_fstat_r>:
 800d018:	2300      	movs	r3, #0
 800d01a:	b570      	push	{r4, r5, r6, lr}
 800d01c:	4d06      	ldr	r5, [pc, #24]	; (800d038 <_fstat_r+0x20>)
 800d01e:	0004      	movs	r4, r0
 800d020:	0008      	movs	r0, r1
 800d022:	0011      	movs	r1, r2
 800d024:	602b      	str	r3, [r5, #0]
 800d026:	f7f6 fd0a 	bl	8003a3e <_fstat>
 800d02a:	1c43      	adds	r3, r0, #1
 800d02c:	d103      	bne.n	800d036 <_fstat_r+0x1e>
 800d02e:	682b      	ldr	r3, [r5, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d000      	beq.n	800d036 <_fstat_r+0x1e>
 800d034:	6023      	str	r3, [r4, #0]
 800d036:	bd70      	pop	{r4, r5, r6, pc}
 800d038:	2000097c 	.word	0x2000097c

0800d03c <_isatty_r>:
 800d03c:	2300      	movs	r3, #0
 800d03e:	b570      	push	{r4, r5, r6, lr}
 800d040:	4d06      	ldr	r5, [pc, #24]	; (800d05c <_isatty_r+0x20>)
 800d042:	0004      	movs	r4, r0
 800d044:	0008      	movs	r0, r1
 800d046:	602b      	str	r3, [r5, #0]
 800d048:	f7f6 fd07 	bl	8003a5a <_isatty>
 800d04c:	1c43      	adds	r3, r0, #1
 800d04e:	d103      	bne.n	800d058 <_isatty_r+0x1c>
 800d050:	682b      	ldr	r3, [r5, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d000      	beq.n	800d058 <_isatty_r+0x1c>
 800d056:	6023      	str	r3, [r4, #0]
 800d058:	bd70      	pop	{r4, r5, r6, pc}
 800d05a:	46c0      	nop			; (mov r8, r8)
 800d05c:	2000097c 	.word	0x2000097c

0800d060 <_sbrk_r>:
 800d060:	2300      	movs	r3, #0
 800d062:	b570      	push	{r4, r5, r6, lr}
 800d064:	4d06      	ldr	r5, [pc, #24]	; (800d080 <_sbrk_r+0x20>)
 800d066:	0004      	movs	r4, r0
 800d068:	0008      	movs	r0, r1
 800d06a:	602b      	str	r3, [r5, #0]
 800d06c:	f7f6 fd0a 	bl	8003a84 <_sbrk>
 800d070:	1c43      	adds	r3, r0, #1
 800d072:	d103      	bne.n	800d07c <_sbrk_r+0x1c>
 800d074:	682b      	ldr	r3, [r5, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d000      	beq.n	800d07c <_sbrk_r+0x1c>
 800d07a:	6023      	str	r3, [r4, #0]
 800d07c:	bd70      	pop	{r4, r5, r6, pc}
 800d07e:	46c0      	nop			; (mov r8, r8)
 800d080:	2000097c 	.word	0x2000097c

0800d084 <__assert_func>:
 800d084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d086:	0014      	movs	r4, r2
 800d088:	001a      	movs	r2, r3
 800d08a:	4b09      	ldr	r3, [pc, #36]	; (800d0b0 <__assert_func+0x2c>)
 800d08c:	0005      	movs	r5, r0
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	000e      	movs	r6, r1
 800d092:	68d8      	ldr	r0, [r3, #12]
 800d094:	4b07      	ldr	r3, [pc, #28]	; (800d0b4 <__assert_func+0x30>)
 800d096:	2c00      	cmp	r4, #0
 800d098:	d101      	bne.n	800d09e <__assert_func+0x1a>
 800d09a:	4b07      	ldr	r3, [pc, #28]	; (800d0b8 <__assert_func+0x34>)
 800d09c:	001c      	movs	r4, r3
 800d09e:	4907      	ldr	r1, [pc, #28]	; (800d0bc <__assert_func+0x38>)
 800d0a0:	9301      	str	r3, [sp, #4]
 800d0a2:	9402      	str	r4, [sp, #8]
 800d0a4:	002b      	movs	r3, r5
 800d0a6:	9600      	str	r6, [sp, #0]
 800d0a8:	f000 f866 	bl	800d178 <fiprintf>
 800d0ac:	f000 f874 	bl	800d198 <abort>
 800d0b0:	200001d0 	.word	0x200001d0
 800d0b4:	0800d725 	.word	0x0800d725
 800d0b8:	0800d760 	.word	0x0800d760
 800d0bc:	0800d732 	.word	0x0800d732

0800d0c0 <_calloc_r>:
 800d0c0:	b570      	push	{r4, r5, r6, lr}
 800d0c2:	0c0b      	lsrs	r3, r1, #16
 800d0c4:	0c15      	lsrs	r5, r2, #16
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d11e      	bne.n	800d108 <_calloc_r+0x48>
 800d0ca:	2d00      	cmp	r5, #0
 800d0cc:	d10c      	bne.n	800d0e8 <_calloc_r+0x28>
 800d0ce:	b289      	uxth	r1, r1
 800d0d0:	b294      	uxth	r4, r2
 800d0d2:	434c      	muls	r4, r1
 800d0d4:	0021      	movs	r1, r4
 800d0d6:	f7fe fe5d 	bl	800bd94 <_malloc_r>
 800d0da:	1e05      	subs	r5, r0, #0
 800d0dc:	d01b      	beq.n	800d116 <_calloc_r+0x56>
 800d0de:	0022      	movs	r2, r4
 800d0e0:	2100      	movs	r1, #0
 800d0e2:	f7fd fb2f 	bl	800a744 <memset>
 800d0e6:	e016      	b.n	800d116 <_calloc_r+0x56>
 800d0e8:	1c2b      	adds	r3, r5, #0
 800d0ea:	1c0c      	adds	r4, r1, #0
 800d0ec:	b289      	uxth	r1, r1
 800d0ee:	b292      	uxth	r2, r2
 800d0f0:	434a      	muls	r2, r1
 800d0f2:	b2a1      	uxth	r1, r4
 800d0f4:	b29c      	uxth	r4, r3
 800d0f6:	434c      	muls	r4, r1
 800d0f8:	0c13      	lsrs	r3, r2, #16
 800d0fa:	18e4      	adds	r4, r4, r3
 800d0fc:	0c23      	lsrs	r3, r4, #16
 800d0fe:	d107      	bne.n	800d110 <_calloc_r+0x50>
 800d100:	0424      	lsls	r4, r4, #16
 800d102:	b292      	uxth	r2, r2
 800d104:	4314      	orrs	r4, r2
 800d106:	e7e5      	b.n	800d0d4 <_calloc_r+0x14>
 800d108:	2d00      	cmp	r5, #0
 800d10a:	d101      	bne.n	800d110 <_calloc_r+0x50>
 800d10c:	1c14      	adds	r4, r2, #0
 800d10e:	e7ed      	b.n	800d0ec <_calloc_r+0x2c>
 800d110:	230c      	movs	r3, #12
 800d112:	2500      	movs	r5, #0
 800d114:	6003      	str	r3, [r0, #0]
 800d116:	0028      	movs	r0, r5
 800d118:	bd70      	pop	{r4, r5, r6, pc}

0800d11a <_realloc_r>:
 800d11a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d11c:	0007      	movs	r7, r0
 800d11e:	000e      	movs	r6, r1
 800d120:	0014      	movs	r4, r2
 800d122:	2900      	cmp	r1, #0
 800d124:	d105      	bne.n	800d132 <_realloc_r+0x18>
 800d126:	0011      	movs	r1, r2
 800d128:	f7fe fe34 	bl	800bd94 <_malloc_r>
 800d12c:	0005      	movs	r5, r0
 800d12e:	0028      	movs	r0, r5
 800d130:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d132:	2a00      	cmp	r2, #0
 800d134:	d103      	bne.n	800d13e <_realloc_r+0x24>
 800d136:	f7fe fa5b 	bl	800b5f0 <_free_r>
 800d13a:	0025      	movs	r5, r4
 800d13c:	e7f7      	b.n	800d12e <_realloc_r+0x14>
 800d13e:	f000 f832 	bl	800d1a6 <_malloc_usable_size_r>
 800d142:	9001      	str	r0, [sp, #4]
 800d144:	4284      	cmp	r4, r0
 800d146:	d803      	bhi.n	800d150 <_realloc_r+0x36>
 800d148:	0035      	movs	r5, r6
 800d14a:	0843      	lsrs	r3, r0, #1
 800d14c:	42a3      	cmp	r3, r4
 800d14e:	d3ee      	bcc.n	800d12e <_realloc_r+0x14>
 800d150:	0021      	movs	r1, r4
 800d152:	0038      	movs	r0, r7
 800d154:	f7fe fe1e 	bl	800bd94 <_malloc_r>
 800d158:	1e05      	subs	r5, r0, #0
 800d15a:	d0e8      	beq.n	800d12e <_realloc_r+0x14>
 800d15c:	9b01      	ldr	r3, [sp, #4]
 800d15e:	0022      	movs	r2, r4
 800d160:	429c      	cmp	r4, r3
 800d162:	d900      	bls.n	800d166 <_realloc_r+0x4c>
 800d164:	001a      	movs	r2, r3
 800d166:	0031      	movs	r1, r6
 800d168:	0028      	movs	r0, r5
 800d16a:	f7fd fb8f 	bl	800a88c <memcpy>
 800d16e:	0031      	movs	r1, r6
 800d170:	0038      	movs	r0, r7
 800d172:	f7fe fa3d 	bl	800b5f0 <_free_r>
 800d176:	e7da      	b.n	800d12e <_realloc_r+0x14>

0800d178 <fiprintf>:
 800d178:	b40e      	push	{r1, r2, r3}
 800d17a:	b517      	push	{r0, r1, r2, r4, lr}
 800d17c:	4c05      	ldr	r4, [pc, #20]	; (800d194 <fiprintf+0x1c>)
 800d17e:	ab05      	add	r3, sp, #20
 800d180:	cb04      	ldmia	r3!, {r2}
 800d182:	0001      	movs	r1, r0
 800d184:	6820      	ldr	r0, [r4, #0]
 800d186:	9301      	str	r3, [sp, #4]
 800d188:	f7ff fcfa 	bl	800cb80 <_vfiprintf_r>
 800d18c:	bc1e      	pop	{r1, r2, r3, r4}
 800d18e:	bc08      	pop	{r3}
 800d190:	b003      	add	sp, #12
 800d192:	4718      	bx	r3
 800d194:	200001d0 	.word	0x200001d0

0800d198 <abort>:
 800d198:	2006      	movs	r0, #6
 800d19a:	b510      	push	{r4, lr}
 800d19c:	f000 f836 	bl	800d20c <raise>
 800d1a0:	2001      	movs	r0, #1
 800d1a2:	f7f6 fbfd 	bl	80039a0 <_exit>

0800d1a6 <_malloc_usable_size_r>:
 800d1a6:	1f0b      	subs	r3, r1, #4
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	1f18      	subs	r0, r3, #4
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	da01      	bge.n	800d1b4 <_malloc_usable_size_r+0xe>
 800d1b0:	580b      	ldr	r3, [r1, r0]
 800d1b2:	18c0      	adds	r0, r0, r3
 800d1b4:	4770      	bx	lr

0800d1b6 <_raise_r>:
 800d1b6:	b570      	push	{r4, r5, r6, lr}
 800d1b8:	0004      	movs	r4, r0
 800d1ba:	000d      	movs	r5, r1
 800d1bc:	291f      	cmp	r1, #31
 800d1be:	d904      	bls.n	800d1ca <_raise_r+0x14>
 800d1c0:	2316      	movs	r3, #22
 800d1c2:	6003      	str	r3, [r0, #0]
 800d1c4:	2001      	movs	r0, #1
 800d1c6:	4240      	negs	r0, r0
 800d1c8:	bd70      	pop	{r4, r5, r6, pc}
 800d1ca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d004      	beq.n	800d1da <_raise_r+0x24>
 800d1d0:	008a      	lsls	r2, r1, #2
 800d1d2:	189b      	adds	r3, r3, r2
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	2a00      	cmp	r2, #0
 800d1d8:	d108      	bne.n	800d1ec <_raise_r+0x36>
 800d1da:	0020      	movs	r0, r4
 800d1dc:	f000 f832 	bl	800d244 <_getpid_r>
 800d1e0:	002a      	movs	r2, r5
 800d1e2:	0001      	movs	r1, r0
 800d1e4:	0020      	movs	r0, r4
 800d1e6:	f000 f81b 	bl	800d220 <_kill_r>
 800d1ea:	e7ed      	b.n	800d1c8 <_raise_r+0x12>
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	2a01      	cmp	r2, #1
 800d1f0:	d0ea      	beq.n	800d1c8 <_raise_r+0x12>
 800d1f2:	1c51      	adds	r1, r2, #1
 800d1f4:	d103      	bne.n	800d1fe <_raise_r+0x48>
 800d1f6:	2316      	movs	r3, #22
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	6023      	str	r3, [r4, #0]
 800d1fc:	e7e4      	b.n	800d1c8 <_raise_r+0x12>
 800d1fe:	2400      	movs	r4, #0
 800d200:	0028      	movs	r0, r5
 800d202:	601c      	str	r4, [r3, #0]
 800d204:	4790      	blx	r2
 800d206:	0020      	movs	r0, r4
 800d208:	e7de      	b.n	800d1c8 <_raise_r+0x12>
	...

0800d20c <raise>:
 800d20c:	b510      	push	{r4, lr}
 800d20e:	4b03      	ldr	r3, [pc, #12]	; (800d21c <raise+0x10>)
 800d210:	0001      	movs	r1, r0
 800d212:	6818      	ldr	r0, [r3, #0]
 800d214:	f7ff ffcf 	bl	800d1b6 <_raise_r>
 800d218:	bd10      	pop	{r4, pc}
 800d21a:	46c0      	nop			; (mov r8, r8)
 800d21c:	200001d0 	.word	0x200001d0

0800d220 <_kill_r>:
 800d220:	2300      	movs	r3, #0
 800d222:	b570      	push	{r4, r5, r6, lr}
 800d224:	4d06      	ldr	r5, [pc, #24]	; (800d240 <_kill_r+0x20>)
 800d226:	0004      	movs	r4, r0
 800d228:	0008      	movs	r0, r1
 800d22a:	0011      	movs	r1, r2
 800d22c:	602b      	str	r3, [r5, #0]
 800d22e:	f7f6 fba7 	bl	8003980 <_kill>
 800d232:	1c43      	adds	r3, r0, #1
 800d234:	d103      	bne.n	800d23e <_kill_r+0x1e>
 800d236:	682b      	ldr	r3, [r5, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d000      	beq.n	800d23e <_kill_r+0x1e>
 800d23c:	6023      	str	r3, [r4, #0]
 800d23e:	bd70      	pop	{r4, r5, r6, pc}
 800d240:	2000097c 	.word	0x2000097c

0800d244 <_getpid_r>:
 800d244:	b510      	push	{r4, lr}
 800d246:	f7f6 fb95 	bl	8003974 <_getpid>
 800d24a:	bd10      	pop	{r4, pc}

0800d24c <_init>:
 800d24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24e:	46c0      	nop			; (mov r8, r8)
 800d250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d252:	bc08      	pop	{r3}
 800d254:	469e      	mov	lr, r3
 800d256:	4770      	bx	lr

0800d258 <_fini>:
 800d258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d25a:	46c0      	nop			; (mov r8, r8)
 800d25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d25e:	bc08      	pop	{r3}
 800d260:	469e      	mov	lr, r3
 800d262:	4770      	bx	lr
